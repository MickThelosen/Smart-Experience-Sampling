
Clicker_Software.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .intvec       000000c0  10040000  10040000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000bea0  100400c0  100400c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .init         00000004  1004bf60  1004bf60  0000cf60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .fini         00000004  1004bf64  1004bf64  0000cf64  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  4 .rodata       000003e0  1004bf68  1004bf68  0000cf68  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .ARM          00000008  1004c348  1004c348  0000d348  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000234  20000af4  1004c350  0000daf4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .ram_preamble 0000002c  20000004  20000004  0000e004  2**2
                  ALLOC
  8 .bss.blueRAM  000000bc  200000c0  200000c0  0000e004  2**2
                  ALLOC
  9 .bss          00000978  2000017c  2000017c  0000e004  2**2
                  ALLOC
 10 .noinit       00000000  20000d28  1004c584  00000000  2**0
                  ALLOC
 11 .ota_region_end 00000000  1004c584  1004c584  0000dd28  2**0
                  CONTENTS
 12 .heap         00000000  20000d28  20000d28  0000dd28  2**0
                  CONTENTS
 13 .stack        00000c00  2000f400  2000f400  0000e400  2**0
                  ALLOC
 14 .rom_info     00000000  10000000  10000000  0000dd28  2**0
                  CONTENTS
 15 .ARM.attributes 00000028  00000000  00000000  0000dd28  2**0
                  CONTENTS, READONLY
 16 .debug_line   00013351  00000000  00000000  0000dd50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line_str 00000093  00000000  00000000  000210a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_info   0001346f  00000000  00000000  00021134  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_abbrev 00002d25  00000000  00000000  000345a3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_aranges 000011d0  00000000  00000000  000372c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_str    000b8e25  00000000  00000000  00038498  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_rnglists 00000d97  00000000  00000000  000f12bd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_macro  0001d88c  00000000  00000000  000f2054  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 24 .comment      00000043  00000000  00000000  0010f8e0  2**0
                  CONTENTS, READONLY
 25 .debug_frame  000050c8  00000000  00000000  0010f924  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

100400c0 <blue_unit_conversion>:
                __CODE__
                __THUMB__
                __EXPORT__ blue_unit_conversion

EXPORT_FUNC(blue_unit_conversion)
                  PUSH    {r4, lr}
100400c0:	b510      	push	{r4, lr}
                  CMP     r0, r2
100400c2:	4290      	cmp	r0, r2
                  BLS     mul32
100400c4:	d916      	bls.n	100400f4 <mul32>
                  UXTH    r2, r1
100400c6:	b28a      	uxth	r2, r1
                  LSRS    r3, r0, #16
100400c8:	0c03      	lsrs	r3, r0, #16
                  LSRS    r1, r1, #16
100400ca:	0c09      	lsrs	r1, r1, #16
                  MOV     r4, r1
100400cc:	460c      	mov	r4, r1
                  MULS    r1, r3, r1
100400ce:	4359      	muls	r1, r3
                  UXTH    r0, r0
100400d0:	b280      	uxth	r0, r0
                  MULS    r3, r2, r3
100400d2:	4353      	muls	r3, r2
                  MULS    r4, r0, r4
100400d4:	4344      	muls	r4, r0
                  MULS    r0, r2, r0
100400d6:	4350      	muls	r0, r2
                  ADDS    r3, r3, r4
100400d8:	191b      	adds	r3, r3, r4
                  LSLS    r2, r3, #16
100400da:	041a      	lsls	r2, r3, #16
                  LSRS    r3, r3, #16
100400dc:	0c1b      	lsrs	r3, r3, #16
                  ADDS    r0, r2, r0
100400de:	1810      	adds	r0, r2, r0
                  ADCS    r1, r3
100400e0:	4159      	adcs	r1, r3

                  MOVS    r2, #128
100400e2:	2280      	movs	r2, #128	@ 0x80
                  LSLS    r2, r2, #13
100400e4:	0352      	lsls	r2, r2, #13
                  MOVS    r3, #0
100400e6:	2300      	movs	r3, #0
                  ADDS    r2, r2, r0
100400e8:	1812      	adds	r2, r2, r0
                  ADCS    r3, r1
100400ea:	414b      	adcs	r3, r1
                  LSRS    r2, r2, #21
100400ec:	0d52      	lsrs	r2, r2, #21
                  LSLS    r0, r3, #11
100400ee:	02d8      	lsls	r0, r3, #11
                  ORRS    r0, r2
100400f0:	4310      	orrs	r0, r2

                  POP {r4, pc}
100400f2:	bd10      	pop	{r4, pc}

100400f4 <mul32>:

                  ENDFUNC

EXPORT_FUNC(mul32)
                  MULS    r0, r1, r0
100400f4:	4348      	muls	r0, r1
                  MOVS    r2, #128
100400f6:	2280      	movs	r2, #128	@ 0x80
                  LSLS    r2, r2, #13
100400f8:	0352      	lsls	r2, r2, #13
                  ADDS    r2, r2, r0
100400fa:	1812      	adds	r2, r2, r0
                  LSRS    r2, r2, #21
100400fc:	0d52      	lsrs	r2, r2, #21
                  MOV     r0, r2
100400fe:	4610      	mov	r0, r2

                  POP {r4, pc}
10040100:	bd10      	pop	{r4, pc}
10040102:	46c0      	nop			@ (mov r8, r8)

10040104 <strlen>:
10040104:	2300      	movs	r3, #0
10040106:	5cc2      	ldrb	r2, [r0, r3]
10040108:	3301      	adds	r3, #1
1004010a:	2a00      	cmp	r2, #0
1004010c:	d1fb      	bne.n	10040106 <strlen+0x2>
1004010e:	1e58      	subs	r0, r3, #1
10040110:	4770      	bx	lr
	...

10040114 <__gnu_thumb1_case_uqi>:
10040114:	b402      	push	{r1}
10040116:	4671      	mov	r1, lr
10040118:	0849      	lsrs	r1, r1, #1
1004011a:	0049      	lsls	r1, r1, #1
1004011c:	5c09      	ldrb	r1, [r1, r0]
1004011e:	0049      	lsls	r1, r1, #1
10040120:	448e      	add	lr, r1
10040122:	bc02      	pop	{r1}
10040124:	4770      	bx	lr
10040126:	46c0      	nop			@ (mov r8, r8)

10040128 <__gnu_thumb1_case_shi>:
10040128:	b403      	push	{r0, r1}
1004012a:	4671      	mov	r1, lr
1004012c:	0849      	lsrs	r1, r1, #1
1004012e:	0040      	lsls	r0, r0, #1
10040130:	0049      	lsls	r1, r1, #1
10040132:	5e09      	ldrsh	r1, [r1, r0]
10040134:	0049      	lsls	r1, r1, #1
10040136:	448e      	add	lr, r1
10040138:	bc03      	pop	{r0, r1}
1004013a:	4770      	bx	lr

1004013c <__udivsi3>:
1004013c:	2200      	movs	r2, #0
1004013e:	0843      	lsrs	r3, r0, #1
10040140:	428b      	cmp	r3, r1
10040142:	d374      	bcc.n	1004022e <__udivsi3+0xf2>
10040144:	0903      	lsrs	r3, r0, #4
10040146:	428b      	cmp	r3, r1
10040148:	d35f      	bcc.n	1004020a <__udivsi3+0xce>
1004014a:	0a03      	lsrs	r3, r0, #8
1004014c:	428b      	cmp	r3, r1
1004014e:	d344      	bcc.n	100401da <__udivsi3+0x9e>
10040150:	0b03      	lsrs	r3, r0, #12
10040152:	428b      	cmp	r3, r1
10040154:	d328      	bcc.n	100401a8 <__udivsi3+0x6c>
10040156:	0c03      	lsrs	r3, r0, #16
10040158:	428b      	cmp	r3, r1
1004015a:	d30d      	bcc.n	10040178 <__udivsi3+0x3c>
1004015c:	22ff      	movs	r2, #255	@ 0xff
1004015e:	0209      	lsls	r1, r1, #8
10040160:	ba12      	rev	r2, r2
10040162:	0c03      	lsrs	r3, r0, #16
10040164:	428b      	cmp	r3, r1
10040166:	d302      	bcc.n	1004016e <__udivsi3+0x32>
10040168:	1212      	asrs	r2, r2, #8
1004016a:	0209      	lsls	r1, r1, #8
1004016c:	d065      	beq.n	1004023a <__udivsi3+0xfe>
1004016e:	0b03      	lsrs	r3, r0, #12
10040170:	428b      	cmp	r3, r1
10040172:	d319      	bcc.n	100401a8 <__udivsi3+0x6c>
10040174:	e000      	b.n	10040178 <__udivsi3+0x3c>
10040176:	0a09      	lsrs	r1, r1, #8
10040178:	0bc3      	lsrs	r3, r0, #15
1004017a:	428b      	cmp	r3, r1
1004017c:	d301      	bcc.n	10040182 <__udivsi3+0x46>
1004017e:	03cb      	lsls	r3, r1, #15
10040180:	1ac0      	subs	r0, r0, r3
10040182:	4152      	adcs	r2, r2
10040184:	0b83      	lsrs	r3, r0, #14
10040186:	428b      	cmp	r3, r1
10040188:	d301      	bcc.n	1004018e <__udivsi3+0x52>
1004018a:	038b      	lsls	r3, r1, #14
1004018c:	1ac0      	subs	r0, r0, r3
1004018e:	4152      	adcs	r2, r2
10040190:	0b43      	lsrs	r3, r0, #13
10040192:	428b      	cmp	r3, r1
10040194:	d301      	bcc.n	1004019a <__udivsi3+0x5e>
10040196:	034b      	lsls	r3, r1, #13
10040198:	1ac0      	subs	r0, r0, r3
1004019a:	4152      	adcs	r2, r2
1004019c:	0b03      	lsrs	r3, r0, #12
1004019e:	428b      	cmp	r3, r1
100401a0:	d301      	bcc.n	100401a6 <__udivsi3+0x6a>
100401a2:	030b      	lsls	r3, r1, #12
100401a4:	1ac0      	subs	r0, r0, r3
100401a6:	4152      	adcs	r2, r2
100401a8:	0ac3      	lsrs	r3, r0, #11
100401aa:	428b      	cmp	r3, r1
100401ac:	d301      	bcc.n	100401b2 <__udivsi3+0x76>
100401ae:	02cb      	lsls	r3, r1, #11
100401b0:	1ac0      	subs	r0, r0, r3
100401b2:	4152      	adcs	r2, r2
100401b4:	0a83      	lsrs	r3, r0, #10
100401b6:	428b      	cmp	r3, r1
100401b8:	d301      	bcc.n	100401be <__udivsi3+0x82>
100401ba:	028b      	lsls	r3, r1, #10
100401bc:	1ac0      	subs	r0, r0, r3
100401be:	4152      	adcs	r2, r2
100401c0:	0a43      	lsrs	r3, r0, #9
100401c2:	428b      	cmp	r3, r1
100401c4:	d301      	bcc.n	100401ca <__udivsi3+0x8e>
100401c6:	024b      	lsls	r3, r1, #9
100401c8:	1ac0      	subs	r0, r0, r3
100401ca:	4152      	adcs	r2, r2
100401cc:	0a03      	lsrs	r3, r0, #8
100401ce:	428b      	cmp	r3, r1
100401d0:	d301      	bcc.n	100401d6 <__udivsi3+0x9a>
100401d2:	020b      	lsls	r3, r1, #8
100401d4:	1ac0      	subs	r0, r0, r3
100401d6:	4152      	adcs	r2, r2
100401d8:	d2cd      	bcs.n	10040176 <__udivsi3+0x3a>
100401da:	09c3      	lsrs	r3, r0, #7
100401dc:	428b      	cmp	r3, r1
100401de:	d301      	bcc.n	100401e4 <__udivsi3+0xa8>
100401e0:	01cb      	lsls	r3, r1, #7
100401e2:	1ac0      	subs	r0, r0, r3
100401e4:	4152      	adcs	r2, r2
100401e6:	0983      	lsrs	r3, r0, #6
100401e8:	428b      	cmp	r3, r1
100401ea:	d301      	bcc.n	100401f0 <__udivsi3+0xb4>
100401ec:	018b      	lsls	r3, r1, #6
100401ee:	1ac0      	subs	r0, r0, r3
100401f0:	4152      	adcs	r2, r2
100401f2:	0943      	lsrs	r3, r0, #5
100401f4:	428b      	cmp	r3, r1
100401f6:	d301      	bcc.n	100401fc <__udivsi3+0xc0>
100401f8:	014b      	lsls	r3, r1, #5
100401fa:	1ac0      	subs	r0, r0, r3
100401fc:	4152      	adcs	r2, r2
100401fe:	0903      	lsrs	r3, r0, #4
10040200:	428b      	cmp	r3, r1
10040202:	d301      	bcc.n	10040208 <__udivsi3+0xcc>
10040204:	010b      	lsls	r3, r1, #4
10040206:	1ac0      	subs	r0, r0, r3
10040208:	4152      	adcs	r2, r2
1004020a:	08c3      	lsrs	r3, r0, #3
1004020c:	428b      	cmp	r3, r1
1004020e:	d301      	bcc.n	10040214 <__udivsi3+0xd8>
10040210:	00cb      	lsls	r3, r1, #3
10040212:	1ac0      	subs	r0, r0, r3
10040214:	4152      	adcs	r2, r2
10040216:	0883      	lsrs	r3, r0, #2
10040218:	428b      	cmp	r3, r1
1004021a:	d301      	bcc.n	10040220 <__udivsi3+0xe4>
1004021c:	008b      	lsls	r3, r1, #2
1004021e:	1ac0      	subs	r0, r0, r3
10040220:	4152      	adcs	r2, r2
10040222:	0843      	lsrs	r3, r0, #1
10040224:	428b      	cmp	r3, r1
10040226:	d301      	bcc.n	1004022c <__udivsi3+0xf0>
10040228:	004b      	lsls	r3, r1, #1
1004022a:	1ac0      	subs	r0, r0, r3
1004022c:	4152      	adcs	r2, r2
1004022e:	1a41      	subs	r1, r0, r1
10040230:	d200      	bcs.n	10040234 <__udivsi3+0xf8>
10040232:	4601      	mov	r1, r0
10040234:	4152      	adcs	r2, r2
10040236:	4610      	mov	r0, r2
10040238:	4770      	bx	lr
1004023a:	e7ff      	b.n	1004023c <__udivsi3+0x100>
1004023c:	b501      	push	{r0, lr}
1004023e:	2000      	movs	r0, #0
10040240:	f000 f8f0 	bl	10040424 <__aeabi_idiv0>
10040244:	bd02      	pop	{r1, pc}
10040246:	46c0      	nop			@ (mov r8, r8)

10040248 <__aeabi_uidivmod>:
10040248:	2900      	cmp	r1, #0
1004024a:	d0f7      	beq.n	1004023c <__udivsi3+0x100>
1004024c:	e776      	b.n	1004013c <__udivsi3>
1004024e:	4770      	bx	lr

10040250 <__divsi3>:
10040250:	4603      	mov	r3, r0
10040252:	430b      	orrs	r3, r1
10040254:	d47f      	bmi.n	10040356 <__divsi3+0x106>
10040256:	2200      	movs	r2, #0
10040258:	0843      	lsrs	r3, r0, #1
1004025a:	428b      	cmp	r3, r1
1004025c:	d374      	bcc.n	10040348 <__divsi3+0xf8>
1004025e:	0903      	lsrs	r3, r0, #4
10040260:	428b      	cmp	r3, r1
10040262:	d35f      	bcc.n	10040324 <__divsi3+0xd4>
10040264:	0a03      	lsrs	r3, r0, #8
10040266:	428b      	cmp	r3, r1
10040268:	d344      	bcc.n	100402f4 <__divsi3+0xa4>
1004026a:	0b03      	lsrs	r3, r0, #12
1004026c:	428b      	cmp	r3, r1
1004026e:	d328      	bcc.n	100402c2 <__divsi3+0x72>
10040270:	0c03      	lsrs	r3, r0, #16
10040272:	428b      	cmp	r3, r1
10040274:	d30d      	bcc.n	10040292 <__divsi3+0x42>
10040276:	22ff      	movs	r2, #255	@ 0xff
10040278:	0209      	lsls	r1, r1, #8
1004027a:	ba12      	rev	r2, r2
1004027c:	0c03      	lsrs	r3, r0, #16
1004027e:	428b      	cmp	r3, r1
10040280:	d302      	bcc.n	10040288 <__divsi3+0x38>
10040282:	1212      	asrs	r2, r2, #8
10040284:	0209      	lsls	r1, r1, #8
10040286:	d065      	beq.n	10040354 <__divsi3+0x104>
10040288:	0b03      	lsrs	r3, r0, #12
1004028a:	428b      	cmp	r3, r1
1004028c:	d319      	bcc.n	100402c2 <__divsi3+0x72>
1004028e:	e000      	b.n	10040292 <__divsi3+0x42>
10040290:	0a09      	lsrs	r1, r1, #8
10040292:	0bc3      	lsrs	r3, r0, #15
10040294:	428b      	cmp	r3, r1
10040296:	d301      	bcc.n	1004029c <__divsi3+0x4c>
10040298:	03cb      	lsls	r3, r1, #15
1004029a:	1ac0      	subs	r0, r0, r3
1004029c:	4152      	adcs	r2, r2
1004029e:	0b83      	lsrs	r3, r0, #14
100402a0:	428b      	cmp	r3, r1
100402a2:	d301      	bcc.n	100402a8 <__divsi3+0x58>
100402a4:	038b      	lsls	r3, r1, #14
100402a6:	1ac0      	subs	r0, r0, r3
100402a8:	4152      	adcs	r2, r2
100402aa:	0b43      	lsrs	r3, r0, #13
100402ac:	428b      	cmp	r3, r1
100402ae:	d301      	bcc.n	100402b4 <__divsi3+0x64>
100402b0:	034b      	lsls	r3, r1, #13
100402b2:	1ac0      	subs	r0, r0, r3
100402b4:	4152      	adcs	r2, r2
100402b6:	0b03      	lsrs	r3, r0, #12
100402b8:	428b      	cmp	r3, r1
100402ba:	d301      	bcc.n	100402c0 <__divsi3+0x70>
100402bc:	030b      	lsls	r3, r1, #12
100402be:	1ac0      	subs	r0, r0, r3
100402c0:	4152      	adcs	r2, r2
100402c2:	0ac3      	lsrs	r3, r0, #11
100402c4:	428b      	cmp	r3, r1
100402c6:	d301      	bcc.n	100402cc <__divsi3+0x7c>
100402c8:	02cb      	lsls	r3, r1, #11
100402ca:	1ac0      	subs	r0, r0, r3
100402cc:	4152      	adcs	r2, r2
100402ce:	0a83      	lsrs	r3, r0, #10
100402d0:	428b      	cmp	r3, r1
100402d2:	d301      	bcc.n	100402d8 <__divsi3+0x88>
100402d4:	028b      	lsls	r3, r1, #10
100402d6:	1ac0      	subs	r0, r0, r3
100402d8:	4152      	adcs	r2, r2
100402da:	0a43      	lsrs	r3, r0, #9
100402dc:	428b      	cmp	r3, r1
100402de:	d301      	bcc.n	100402e4 <__divsi3+0x94>
100402e0:	024b      	lsls	r3, r1, #9
100402e2:	1ac0      	subs	r0, r0, r3
100402e4:	4152      	adcs	r2, r2
100402e6:	0a03      	lsrs	r3, r0, #8
100402e8:	428b      	cmp	r3, r1
100402ea:	d301      	bcc.n	100402f0 <__divsi3+0xa0>
100402ec:	020b      	lsls	r3, r1, #8
100402ee:	1ac0      	subs	r0, r0, r3
100402f0:	4152      	adcs	r2, r2
100402f2:	d2cd      	bcs.n	10040290 <__divsi3+0x40>
100402f4:	09c3      	lsrs	r3, r0, #7
100402f6:	428b      	cmp	r3, r1
100402f8:	d301      	bcc.n	100402fe <__divsi3+0xae>
100402fa:	01cb      	lsls	r3, r1, #7
100402fc:	1ac0      	subs	r0, r0, r3
100402fe:	4152      	adcs	r2, r2
10040300:	0983      	lsrs	r3, r0, #6
10040302:	428b      	cmp	r3, r1
10040304:	d301      	bcc.n	1004030a <__divsi3+0xba>
10040306:	018b      	lsls	r3, r1, #6
10040308:	1ac0      	subs	r0, r0, r3
1004030a:	4152      	adcs	r2, r2
1004030c:	0943      	lsrs	r3, r0, #5
1004030e:	428b      	cmp	r3, r1
10040310:	d301      	bcc.n	10040316 <__divsi3+0xc6>
10040312:	014b      	lsls	r3, r1, #5
10040314:	1ac0      	subs	r0, r0, r3
10040316:	4152      	adcs	r2, r2
10040318:	0903      	lsrs	r3, r0, #4
1004031a:	428b      	cmp	r3, r1
1004031c:	d301      	bcc.n	10040322 <__divsi3+0xd2>
1004031e:	010b      	lsls	r3, r1, #4
10040320:	1ac0      	subs	r0, r0, r3
10040322:	4152      	adcs	r2, r2
10040324:	08c3      	lsrs	r3, r0, #3
10040326:	428b      	cmp	r3, r1
10040328:	d301      	bcc.n	1004032e <__divsi3+0xde>
1004032a:	00cb      	lsls	r3, r1, #3
1004032c:	1ac0      	subs	r0, r0, r3
1004032e:	4152      	adcs	r2, r2
10040330:	0883      	lsrs	r3, r0, #2
10040332:	428b      	cmp	r3, r1
10040334:	d301      	bcc.n	1004033a <__divsi3+0xea>
10040336:	008b      	lsls	r3, r1, #2
10040338:	1ac0      	subs	r0, r0, r3
1004033a:	4152      	adcs	r2, r2
1004033c:	0843      	lsrs	r3, r0, #1
1004033e:	428b      	cmp	r3, r1
10040340:	d301      	bcc.n	10040346 <__divsi3+0xf6>
10040342:	004b      	lsls	r3, r1, #1
10040344:	1ac0      	subs	r0, r0, r3
10040346:	4152      	adcs	r2, r2
10040348:	1a41      	subs	r1, r0, r1
1004034a:	d200      	bcs.n	1004034e <__divsi3+0xfe>
1004034c:	4601      	mov	r1, r0
1004034e:	4152      	adcs	r2, r2
10040350:	4610      	mov	r0, r2
10040352:	4770      	bx	lr
10040354:	e05d      	b.n	10040412 <__divsi3+0x1c2>
10040356:	0fca      	lsrs	r2, r1, #31
10040358:	d000      	beq.n	1004035c <__divsi3+0x10c>
1004035a:	4249      	negs	r1, r1
1004035c:	1003      	asrs	r3, r0, #32
1004035e:	d300      	bcc.n	10040362 <__divsi3+0x112>
10040360:	4240      	negs	r0, r0
10040362:	4053      	eors	r3, r2
10040364:	2200      	movs	r2, #0
10040366:	469c      	mov	ip, r3
10040368:	0903      	lsrs	r3, r0, #4
1004036a:	428b      	cmp	r3, r1
1004036c:	d32d      	bcc.n	100403ca <__divsi3+0x17a>
1004036e:	0a03      	lsrs	r3, r0, #8
10040370:	428b      	cmp	r3, r1
10040372:	d312      	bcc.n	1004039a <__divsi3+0x14a>
10040374:	22fc      	movs	r2, #252	@ 0xfc
10040376:	0189      	lsls	r1, r1, #6
10040378:	ba12      	rev	r2, r2
1004037a:	0a03      	lsrs	r3, r0, #8
1004037c:	428b      	cmp	r3, r1
1004037e:	d30c      	bcc.n	1004039a <__divsi3+0x14a>
10040380:	0189      	lsls	r1, r1, #6
10040382:	1192      	asrs	r2, r2, #6
10040384:	428b      	cmp	r3, r1
10040386:	d308      	bcc.n	1004039a <__divsi3+0x14a>
10040388:	0189      	lsls	r1, r1, #6
1004038a:	1192      	asrs	r2, r2, #6
1004038c:	428b      	cmp	r3, r1
1004038e:	d304      	bcc.n	1004039a <__divsi3+0x14a>
10040390:	0189      	lsls	r1, r1, #6
10040392:	d03a      	beq.n	1004040a <__divsi3+0x1ba>
10040394:	1192      	asrs	r2, r2, #6
10040396:	e000      	b.n	1004039a <__divsi3+0x14a>
10040398:	0989      	lsrs	r1, r1, #6
1004039a:	09c3      	lsrs	r3, r0, #7
1004039c:	428b      	cmp	r3, r1
1004039e:	d301      	bcc.n	100403a4 <__divsi3+0x154>
100403a0:	01cb      	lsls	r3, r1, #7
100403a2:	1ac0      	subs	r0, r0, r3
100403a4:	4152      	adcs	r2, r2
100403a6:	0983      	lsrs	r3, r0, #6
100403a8:	428b      	cmp	r3, r1
100403aa:	d301      	bcc.n	100403b0 <__divsi3+0x160>
100403ac:	018b      	lsls	r3, r1, #6
100403ae:	1ac0      	subs	r0, r0, r3
100403b0:	4152      	adcs	r2, r2
100403b2:	0943      	lsrs	r3, r0, #5
100403b4:	428b      	cmp	r3, r1
100403b6:	d301      	bcc.n	100403bc <__divsi3+0x16c>
100403b8:	014b      	lsls	r3, r1, #5
100403ba:	1ac0      	subs	r0, r0, r3
100403bc:	4152      	adcs	r2, r2
100403be:	0903      	lsrs	r3, r0, #4
100403c0:	428b      	cmp	r3, r1
100403c2:	d301      	bcc.n	100403c8 <__divsi3+0x178>
100403c4:	010b      	lsls	r3, r1, #4
100403c6:	1ac0      	subs	r0, r0, r3
100403c8:	4152      	adcs	r2, r2
100403ca:	08c3      	lsrs	r3, r0, #3
100403cc:	428b      	cmp	r3, r1
100403ce:	d301      	bcc.n	100403d4 <__divsi3+0x184>
100403d0:	00cb      	lsls	r3, r1, #3
100403d2:	1ac0      	subs	r0, r0, r3
100403d4:	4152      	adcs	r2, r2
100403d6:	0883      	lsrs	r3, r0, #2
100403d8:	428b      	cmp	r3, r1
100403da:	d301      	bcc.n	100403e0 <__divsi3+0x190>
100403dc:	008b      	lsls	r3, r1, #2
100403de:	1ac0      	subs	r0, r0, r3
100403e0:	4152      	adcs	r2, r2
100403e2:	d2d9      	bcs.n	10040398 <__divsi3+0x148>
100403e4:	0843      	lsrs	r3, r0, #1
100403e6:	428b      	cmp	r3, r1
100403e8:	d301      	bcc.n	100403ee <__divsi3+0x19e>
100403ea:	004b      	lsls	r3, r1, #1
100403ec:	1ac0      	subs	r0, r0, r3
100403ee:	4152      	adcs	r2, r2
100403f0:	1a41      	subs	r1, r0, r1
100403f2:	d200      	bcs.n	100403f6 <__divsi3+0x1a6>
100403f4:	4601      	mov	r1, r0
100403f6:	4663      	mov	r3, ip
100403f8:	4152      	adcs	r2, r2
100403fa:	105b      	asrs	r3, r3, #1
100403fc:	4610      	mov	r0, r2
100403fe:	d301      	bcc.n	10040404 <__divsi3+0x1b4>
10040400:	4240      	negs	r0, r0
10040402:	2b00      	cmp	r3, #0
10040404:	d500      	bpl.n	10040408 <__divsi3+0x1b8>
10040406:	4249      	negs	r1, r1
10040408:	4770      	bx	lr
1004040a:	4663      	mov	r3, ip
1004040c:	105b      	asrs	r3, r3, #1
1004040e:	d300      	bcc.n	10040412 <__divsi3+0x1c2>
10040410:	4240      	negs	r0, r0
10040412:	b501      	push	{r0, lr}
10040414:	2000      	movs	r0, #0
10040416:	f000 f805 	bl	10040424 <__aeabi_idiv0>
1004041a:	bd02      	pop	{r1, pc}

1004041c <__aeabi_idivmod>:
1004041c:	2900      	cmp	r1, #0
1004041e:	d0f8      	beq.n	10040412 <__divsi3+0x1c2>
10040420:	e716      	b.n	10040250 <__divsi3>
10040422:	4770      	bx	lr

10040424 <__aeabi_idiv0>:
10040424:	4770      	bx	lr
10040426:	46c0      	nop			@ (mov r8, r8)

10040428 <__aeabi_cdrcmple>:
10040428:	4684      	mov	ip, r0
1004042a:	0010      	movs	r0, r2
1004042c:	4662      	mov	r2, ip
1004042e:	468c      	mov	ip, r1
10040430:	0019      	movs	r1, r3
10040432:	4663      	mov	r3, ip
10040434:	e000      	b.n	10040438 <__aeabi_cdcmpeq>
10040436:	46c0      	nop			@ (mov r8, r8)

10040438 <__aeabi_cdcmpeq>:
10040438:	b51f      	push	{r0, r1, r2, r3, r4, lr}
1004043a:	f001 f8a1 	bl	10041580 <__ledf2>
1004043e:	2800      	cmp	r0, #0
10040440:	d401      	bmi.n	10040446 <__aeabi_cdcmpeq+0xe>
10040442:	2100      	movs	r1, #0
10040444:	42c8      	cmn	r0, r1
10040446:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

10040448 <__aeabi_dcmpeq>:
10040448:	b510      	push	{r4, lr}
1004044a:	f000 ffe1 	bl	10041410 <__eqdf2>
1004044e:	4240      	negs	r0, r0
10040450:	3001      	adds	r0, #1
10040452:	bd10      	pop	{r4, pc}

10040454 <__aeabi_dcmplt>:
10040454:	b510      	push	{r4, lr}
10040456:	f001 f893 	bl	10041580 <__ledf2>
1004045a:	2800      	cmp	r0, #0
1004045c:	db01      	blt.n	10040462 <__aeabi_dcmplt+0xe>
1004045e:	2000      	movs	r0, #0
10040460:	bd10      	pop	{r4, pc}
10040462:	2001      	movs	r0, #1
10040464:	bd10      	pop	{r4, pc}
10040466:	46c0      	nop			@ (mov r8, r8)

10040468 <__aeabi_dcmple>:
10040468:	b510      	push	{r4, lr}
1004046a:	f001 f889 	bl	10041580 <__ledf2>
1004046e:	2800      	cmp	r0, #0
10040470:	dd01      	ble.n	10040476 <__aeabi_dcmple+0xe>
10040472:	2000      	movs	r0, #0
10040474:	bd10      	pop	{r4, pc}
10040476:	2001      	movs	r0, #1
10040478:	bd10      	pop	{r4, pc}
1004047a:	46c0      	nop			@ (mov r8, r8)

1004047c <__aeabi_dcmpgt>:
1004047c:	b510      	push	{r4, lr}
1004047e:	f001 f80b 	bl	10041498 <__gedf2>
10040482:	2800      	cmp	r0, #0
10040484:	dc01      	bgt.n	1004048a <__aeabi_dcmpgt+0xe>
10040486:	2000      	movs	r0, #0
10040488:	bd10      	pop	{r4, pc}
1004048a:	2001      	movs	r0, #1
1004048c:	bd10      	pop	{r4, pc}
1004048e:	46c0      	nop			@ (mov r8, r8)

10040490 <__aeabi_dcmpge>:
10040490:	b510      	push	{r4, lr}
10040492:	f001 f801 	bl	10041498 <__gedf2>
10040496:	2800      	cmp	r0, #0
10040498:	da01      	bge.n	1004049e <__aeabi_dcmpge+0xe>
1004049a:	2000      	movs	r0, #0
1004049c:	bd10      	pop	{r4, pc}
1004049e:	2001      	movs	r0, #1
100404a0:	bd10      	pop	{r4, pc}
100404a2:	46c0      	nop			@ (mov r8, r8)

100404a4 <__aeabi_uldivmod>:
100404a4:	2b00      	cmp	r3, #0
100404a6:	d111      	bne.n	100404cc <__aeabi_uldivmod+0x28>
100404a8:	2a00      	cmp	r2, #0
100404aa:	d10f      	bne.n	100404cc <__aeabi_uldivmod+0x28>
100404ac:	2900      	cmp	r1, #0
100404ae:	d100      	bne.n	100404b2 <__aeabi_uldivmod+0xe>
100404b0:	2800      	cmp	r0, #0
100404b2:	d002      	beq.n	100404ba <__aeabi_uldivmod+0x16>
100404b4:	2100      	movs	r1, #0
100404b6:	43c9      	mvns	r1, r1
100404b8:	0008      	movs	r0, r1
100404ba:	b407      	push	{r0, r1, r2}
100404bc:	4802      	ldr	r0, [pc, #8]	@ (100404c8 <__aeabi_uldivmod+0x24>)
100404be:	a102      	add	r1, pc, #8	@ (adr r1, 100404c8 <__aeabi_uldivmod+0x24>)
100404c0:	1840      	adds	r0, r0, r1
100404c2:	9002      	str	r0, [sp, #8]
100404c4:	bd03      	pop	{r0, r1, pc}
100404c6:	46c0      	nop			@ (mov r8, r8)
100404c8:	ffffff5d 	.word	0xffffff5d
100404cc:	b403      	push	{r0, r1}
100404ce:	4668      	mov	r0, sp
100404d0:	b501      	push	{r0, lr}
100404d2:	9802      	ldr	r0, [sp, #8]
100404d4:	f000 f852 	bl	1004057c <__udivmoddi4>
100404d8:	9b01      	ldr	r3, [sp, #4]
100404da:	469e      	mov	lr, r3
100404dc:	b002      	add	sp, #8
100404de:	bc0c      	pop	{r2, r3}
100404e0:	4770      	bx	lr
100404e2:	46c0      	nop			@ (mov r8, r8)

100404e4 <__aeabi_lmul>:
100404e4:	b5f0      	push	{r4, r5, r6, r7, lr}
100404e6:	46ce      	mov	lr, r9
100404e8:	4699      	mov	r9, r3
100404ea:	0c03      	lsrs	r3, r0, #16
100404ec:	469c      	mov	ip, r3
100404ee:	0413      	lsls	r3, r2, #16
100404f0:	4647      	mov	r7, r8
100404f2:	0c1b      	lsrs	r3, r3, #16
100404f4:	001d      	movs	r5, r3
100404f6:	000e      	movs	r6, r1
100404f8:	4661      	mov	r1, ip
100404fa:	0404      	lsls	r4, r0, #16
100404fc:	0c24      	lsrs	r4, r4, #16
100404fe:	b580      	push	{r7, lr}
10040500:	0007      	movs	r7, r0
10040502:	0c10      	lsrs	r0, r2, #16
10040504:	434b      	muls	r3, r1
10040506:	4365      	muls	r5, r4
10040508:	4341      	muls	r1, r0
1004050a:	4360      	muls	r0, r4
1004050c:	0c2c      	lsrs	r4, r5, #16
1004050e:	18c0      	adds	r0, r0, r3
10040510:	1824      	adds	r4, r4, r0
10040512:	468c      	mov	ip, r1
10040514:	42a3      	cmp	r3, r4
10040516:	d903      	bls.n	10040520 <__aeabi_lmul+0x3c>
10040518:	2380      	movs	r3, #128	@ 0x80
1004051a:	025b      	lsls	r3, r3, #9
1004051c:	4698      	mov	r8, r3
1004051e:	44c4      	add	ip, r8
10040520:	4649      	mov	r1, r9
10040522:	4379      	muls	r1, r7
10040524:	4356      	muls	r6, r2
10040526:	0c23      	lsrs	r3, r4, #16
10040528:	042d      	lsls	r5, r5, #16
1004052a:	0c2d      	lsrs	r5, r5, #16
1004052c:	1989      	adds	r1, r1, r6
1004052e:	4463      	add	r3, ip
10040530:	0424      	lsls	r4, r4, #16
10040532:	1960      	adds	r0, r4, r5
10040534:	18c9      	adds	r1, r1, r3
10040536:	bcc0      	pop	{r6, r7}
10040538:	46b9      	mov	r9, r7
1004053a:	46b0      	mov	r8, r6
1004053c:	bdf0      	pop	{r4, r5, r6, r7, pc}
1004053e:	46c0      	nop			@ (mov r8, r8)

10040540 <__aeabi_d2uiz>:
10040540:	b570      	push	{r4, r5, r6, lr}
10040542:	2200      	movs	r2, #0
10040544:	4b0c      	ldr	r3, [pc, #48]	@ (10040578 <__aeabi_d2uiz+0x38>)
10040546:	0004      	movs	r4, r0
10040548:	000d      	movs	r5, r1
1004054a:	f7ff ffa1 	bl	10040490 <__aeabi_dcmpge>
1004054e:	2800      	cmp	r0, #0
10040550:	d104      	bne.n	1004055c <__aeabi_d2uiz+0x1c>
10040552:	0020      	movs	r0, r4
10040554:	0029      	movs	r1, r5
10040556:	f001 ff0b 	bl	10042370 <__aeabi_d2iz>
1004055a:	bd70      	pop	{r4, r5, r6, pc}
1004055c:	4b06      	ldr	r3, [pc, #24]	@ (10040578 <__aeabi_d2uiz+0x38>)
1004055e:	2200      	movs	r2, #0
10040560:	0020      	movs	r0, r4
10040562:	0029      	movs	r1, r5
10040564:	f001 fb46 	bl	10041bf4 <__aeabi_dsub>
10040568:	f001 ff02 	bl	10042370 <__aeabi_d2iz>
1004056c:	2380      	movs	r3, #128	@ 0x80
1004056e:	061b      	lsls	r3, r3, #24
10040570:	469c      	mov	ip, r3
10040572:	4460      	add	r0, ip
10040574:	e7f1      	b.n	1004055a <__aeabi_d2uiz+0x1a>
10040576:	46c0      	nop			@ (mov r8, r8)
10040578:	41e00000 	.word	0x41e00000

1004057c <__udivmoddi4>:
1004057c:	b5f0      	push	{r4, r5, r6, r7, lr}
1004057e:	4657      	mov	r7, sl
10040580:	464e      	mov	r6, r9
10040582:	4645      	mov	r5, r8
10040584:	46de      	mov	lr, fp
10040586:	b5e0      	push	{r5, r6, r7, lr}
10040588:	0004      	movs	r4, r0
1004058a:	000d      	movs	r5, r1
1004058c:	4692      	mov	sl, r2
1004058e:	4699      	mov	r9, r3
10040590:	b083      	sub	sp, #12
10040592:	428b      	cmp	r3, r1
10040594:	d830      	bhi.n	100405f8 <__udivmoddi4+0x7c>
10040596:	d02d      	beq.n	100405f4 <__udivmoddi4+0x78>
10040598:	4649      	mov	r1, r9
1004059a:	4650      	mov	r0, sl
1004059c:	f001 ff94 	bl	100424c8 <__clzdi2>
100405a0:	0029      	movs	r1, r5
100405a2:	0006      	movs	r6, r0
100405a4:	0020      	movs	r0, r4
100405a6:	f001 ff8f 	bl	100424c8 <__clzdi2>
100405aa:	1a33      	subs	r3, r6, r0
100405ac:	4698      	mov	r8, r3
100405ae:	3b20      	subs	r3, #32
100405b0:	d434      	bmi.n	1004061c <__udivmoddi4+0xa0>
100405b2:	469b      	mov	fp, r3
100405b4:	4653      	mov	r3, sl
100405b6:	465a      	mov	r2, fp
100405b8:	4093      	lsls	r3, r2
100405ba:	4642      	mov	r2, r8
100405bc:	001f      	movs	r7, r3
100405be:	4653      	mov	r3, sl
100405c0:	4093      	lsls	r3, r2
100405c2:	001e      	movs	r6, r3
100405c4:	42af      	cmp	r7, r5
100405c6:	d83b      	bhi.n	10040640 <__udivmoddi4+0xc4>
100405c8:	42af      	cmp	r7, r5
100405ca:	d100      	bne.n	100405ce <__udivmoddi4+0x52>
100405cc:	e079      	b.n	100406c2 <__udivmoddi4+0x146>
100405ce:	465b      	mov	r3, fp
100405d0:	1ba4      	subs	r4, r4, r6
100405d2:	41bd      	sbcs	r5, r7
100405d4:	2b00      	cmp	r3, #0
100405d6:	da00      	bge.n	100405da <__udivmoddi4+0x5e>
100405d8:	e076      	b.n	100406c8 <__udivmoddi4+0x14c>
100405da:	2200      	movs	r2, #0
100405dc:	2300      	movs	r3, #0
100405de:	9200      	str	r2, [sp, #0]
100405e0:	9301      	str	r3, [sp, #4]
100405e2:	2301      	movs	r3, #1
100405e4:	465a      	mov	r2, fp
100405e6:	4093      	lsls	r3, r2
100405e8:	9301      	str	r3, [sp, #4]
100405ea:	2301      	movs	r3, #1
100405ec:	4642      	mov	r2, r8
100405ee:	4093      	lsls	r3, r2
100405f0:	9300      	str	r3, [sp, #0]
100405f2:	e029      	b.n	10040648 <__udivmoddi4+0xcc>
100405f4:	4282      	cmp	r2, r0
100405f6:	d9cf      	bls.n	10040598 <__udivmoddi4+0x1c>
100405f8:	2200      	movs	r2, #0
100405fa:	2300      	movs	r3, #0
100405fc:	9200      	str	r2, [sp, #0]
100405fe:	9301      	str	r3, [sp, #4]
10040600:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
10040602:	2b00      	cmp	r3, #0
10040604:	d001      	beq.n	1004060a <__udivmoddi4+0x8e>
10040606:	601c      	str	r4, [r3, #0]
10040608:	605d      	str	r5, [r3, #4]
1004060a:	9800      	ldr	r0, [sp, #0]
1004060c:	9901      	ldr	r1, [sp, #4]
1004060e:	b003      	add	sp, #12
10040610:	bcf0      	pop	{r4, r5, r6, r7}
10040612:	46bb      	mov	fp, r7
10040614:	46b2      	mov	sl, r6
10040616:	46a9      	mov	r9, r5
10040618:	46a0      	mov	r8, r4
1004061a:	bdf0      	pop	{r4, r5, r6, r7, pc}
1004061c:	4642      	mov	r2, r8
1004061e:	469b      	mov	fp, r3
10040620:	2320      	movs	r3, #32
10040622:	1a9b      	subs	r3, r3, r2
10040624:	4652      	mov	r2, sl
10040626:	40da      	lsrs	r2, r3
10040628:	4641      	mov	r1, r8
1004062a:	0013      	movs	r3, r2
1004062c:	464a      	mov	r2, r9
1004062e:	408a      	lsls	r2, r1
10040630:	0017      	movs	r7, r2
10040632:	4642      	mov	r2, r8
10040634:	431f      	orrs	r7, r3
10040636:	4653      	mov	r3, sl
10040638:	4093      	lsls	r3, r2
1004063a:	001e      	movs	r6, r3
1004063c:	42af      	cmp	r7, r5
1004063e:	d9c3      	bls.n	100405c8 <__udivmoddi4+0x4c>
10040640:	2200      	movs	r2, #0
10040642:	2300      	movs	r3, #0
10040644:	9200      	str	r2, [sp, #0]
10040646:	9301      	str	r3, [sp, #4]
10040648:	4643      	mov	r3, r8
1004064a:	2b00      	cmp	r3, #0
1004064c:	d0d8      	beq.n	10040600 <__udivmoddi4+0x84>
1004064e:	07fb      	lsls	r3, r7, #31
10040650:	0872      	lsrs	r2, r6, #1
10040652:	431a      	orrs	r2, r3
10040654:	4646      	mov	r6, r8
10040656:	087b      	lsrs	r3, r7, #1
10040658:	e00e      	b.n	10040678 <__udivmoddi4+0xfc>
1004065a:	42ab      	cmp	r3, r5
1004065c:	d101      	bne.n	10040662 <__udivmoddi4+0xe6>
1004065e:	42a2      	cmp	r2, r4
10040660:	d80c      	bhi.n	1004067c <__udivmoddi4+0x100>
10040662:	1aa4      	subs	r4, r4, r2
10040664:	419d      	sbcs	r5, r3
10040666:	2001      	movs	r0, #1
10040668:	1924      	adds	r4, r4, r4
1004066a:	416d      	adcs	r5, r5
1004066c:	2100      	movs	r1, #0
1004066e:	3e01      	subs	r6, #1
10040670:	1824      	adds	r4, r4, r0
10040672:	414d      	adcs	r5, r1
10040674:	2e00      	cmp	r6, #0
10040676:	d006      	beq.n	10040686 <__udivmoddi4+0x10a>
10040678:	42ab      	cmp	r3, r5
1004067a:	d9ee      	bls.n	1004065a <__udivmoddi4+0xde>
1004067c:	3e01      	subs	r6, #1
1004067e:	1924      	adds	r4, r4, r4
10040680:	416d      	adcs	r5, r5
10040682:	2e00      	cmp	r6, #0
10040684:	d1f8      	bne.n	10040678 <__udivmoddi4+0xfc>
10040686:	9800      	ldr	r0, [sp, #0]
10040688:	9901      	ldr	r1, [sp, #4]
1004068a:	465b      	mov	r3, fp
1004068c:	1900      	adds	r0, r0, r4
1004068e:	4169      	adcs	r1, r5
10040690:	2b00      	cmp	r3, #0
10040692:	db24      	blt.n	100406de <__udivmoddi4+0x162>
10040694:	002b      	movs	r3, r5
10040696:	465a      	mov	r2, fp
10040698:	4644      	mov	r4, r8
1004069a:	40d3      	lsrs	r3, r2
1004069c:	002a      	movs	r2, r5
1004069e:	40e2      	lsrs	r2, r4
100406a0:	001c      	movs	r4, r3
100406a2:	465b      	mov	r3, fp
100406a4:	0015      	movs	r5, r2
100406a6:	2b00      	cmp	r3, #0
100406a8:	db2a      	blt.n	10040700 <__udivmoddi4+0x184>
100406aa:	0026      	movs	r6, r4
100406ac:	409e      	lsls	r6, r3
100406ae:	0033      	movs	r3, r6
100406b0:	0026      	movs	r6, r4
100406b2:	4647      	mov	r7, r8
100406b4:	40be      	lsls	r6, r7
100406b6:	0032      	movs	r2, r6
100406b8:	1a80      	subs	r0, r0, r2
100406ba:	4199      	sbcs	r1, r3
100406bc:	9000      	str	r0, [sp, #0]
100406be:	9101      	str	r1, [sp, #4]
100406c0:	e79e      	b.n	10040600 <__udivmoddi4+0x84>
100406c2:	42a3      	cmp	r3, r4
100406c4:	d8bc      	bhi.n	10040640 <__udivmoddi4+0xc4>
100406c6:	e782      	b.n	100405ce <__udivmoddi4+0x52>
100406c8:	4642      	mov	r2, r8
100406ca:	2320      	movs	r3, #32
100406cc:	2100      	movs	r1, #0
100406ce:	1a9b      	subs	r3, r3, r2
100406d0:	2200      	movs	r2, #0
100406d2:	9100      	str	r1, [sp, #0]
100406d4:	9201      	str	r2, [sp, #4]
100406d6:	2201      	movs	r2, #1
100406d8:	40da      	lsrs	r2, r3
100406da:	9201      	str	r2, [sp, #4]
100406dc:	e785      	b.n	100405ea <__udivmoddi4+0x6e>
100406de:	4642      	mov	r2, r8
100406e0:	2320      	movs	r3, #32
100406e2:	1a9b      	subs	r3, r3, r2
100406e4:	002a      	movs	r2, r5
100406e6:	4646      	mov	r6, r8
100406e8:	409a      	lsls	r2, r3
100406ea:	0023      	movs	r3, r4
100406ec:	40f3      	lsrs	r3, r6
100406ee:	4644      	mov	r4, r8
100406f0:	4313      	orrs	r3, r2
100406f2:	002a      	movs	r2, r5
100406f4:	40e2      	lsrs	r2, r4
100406f6:	001c      	movs	r4, r3
100406f8:	465b      	mov	r3, fp
100406fa:	0015      	movs	r5, r2
100406fc:	2b00      	cmp	r3, #0
100406fe:	dad4      	bge.n	100406aa <__udivmoddi4+0x12e>
10040700:	4642      	mov	r2, r8
10040702:	002f      	movs	r7, r5
10040704:	2320      	movs	r3, #32
10040706:	0026      	movs	r6, r4
10040708:	4097      	lsls	r7, r2
1004070a:	1a9b      	subs	r3, r3, r2
1004070c:	40de      	lsrs	r6, r3
1004070e:	003b      	movs	r3, r7
10040710:	4333      	orrs	r3, r6
10040712:	e7cd      	b.n	100406b0 <__udivmoddi4+0x134>

10040714 <__aeabi_dadd>:
10040714:	b5f0      	push	{r4, r5, r6, r7, lr}
10040716:	4657      	mov	r7, sl
10040718:	464e      	mov	r6, r9
1004071a:	4645      	mov	r5, r8
1004071c:	46de      	mov	lr, fp
1004071e:	b5e0      	push	{r5, r6, r7, lr}
10040720:	b083      	sub	sp, #12
10040722:	9000      	str	r0, [sp, #0]
10040724:	9101      	str	r1, [sp, #4]
10040726:	030c      	lsls	r4, r1, #12
10040728:	004f      	lsls	r7, r1, #1
1004072a:	0fce      	lsrs	r6, r1, #31
1004072c:	0a61      	lsrs	r1, r4, #9
1004072e:	9c00      	ldr	r4, [sp, #0]
10040730:	031d      	lsls	r5, r3, #12
10040732:	0f64      	lsrs	r4, r4, #29
10040734:	430c      	orrs	r4, r1
10040736:	9900      	ldr	r1, [sp, #0]
10040738:	9200      	str	r2, [sp, #0]
1004073a:	9301      	str	r3, [sp, #4]
1004073c:	00c8      	lsls	r0, r1, #3
1004073e:	0059      	lsls	r1, r3, #1
10040740:	0d4b      	lsrs	r3, r1, #21
10040742:	4699      	mov	r9, r3
10040744:	9a00      	ldr	r2, [sp, #0]
10040746:	9b01      	ldr	r3, [sp, #4]
10040748:	0a6d      	lsrs	r5, r5, #9
1004074a:	0fd9      	lsrs	r1, r3, #31
1004074c:	0f53      	lsrs	r3, r2, #29
1004074e:	432b      	orrs	r3, r5
10040750:	469a      	mov	sl, r3
10040752:	9b00      	ldr	r3, [sp, #0]
10040754:	0d7f      	lsrs	r7, r7, #21
10040756:	00da      	lsls	r2, r3, #3
10040758:	4694      	mov	ip, r2
1004075a:	464a      	mov	r2, r9
1004075c:	46b0      	mov	r8, r6
1004075e:	1aba      	subs	r2, r7, r2
10040760:	428e      	cmp	r6, r1
10040762:	d100      	bne.n	10040766 <__aeabi_dadd+0x52>
10040764:	e0b0      	b.n	100408c8 <__aeabi_dadd+0x1b4>
10040766:	2a00      	cmp	r2, #0
10040768:	dc00      	bgt.n	1004076c <__aeabi_dadd+0x58>
1004076a:	e078      	b.n	1004085e <__aeabi_dadd+0x14a>
1004076c:	4649      	mov	r1, r9
1004076e:	2900      	cmp	r1, #0
10040770:	d100      	bne.n	10040774 <__aeabi_dadd+0x60>
10040772:	e0e9      	b.n	10040948 <__aeabi_dadd+0x234>
10040774:	49c9      	ldr	r1, [pc, #804]	@ (10040a9c <__aeabi_dadd+0x388>)
10040776:	428f      	cmp	r7, r1
10040778:	d100      	bne.n	1004077c <__aeabi_dadd+0x68>
1004077a:	e195      	b.n	10040aa8 <__aeabi_dadd+0x394>
1004077c:	2501      	movs	r5, #1
1004077e:	2a38      	cmp	r2, #56	@ 0x38
10040780:	dc16      	bgt.n	100407b0 <__aeabi_dadd+0x9c>
10040782:	2180      	movs	r1, #128	@ 0x80
10040784:	4653      	mov	r3, sl
10040786:	0409      	lsls	r1, r1, #16
10040788:	430b      	orrs	r3, r1
1004078a:	469a      	mov	sl, r3
1004078c:	2a1f      	cmp	r2, #31
1004078e:	dd00      	ble.n	10040792 <__aeabi_dadd+0x7e>
10040790:	e1e7      	b.n	10040b62 <__aeabi_dadd+0x44e>
10040792:	2120      	movs	r1, #32
10040794:	4655      	mov	r5, sl
10040796:	1a8b      	subs	r3, r1, r2
10040798:	4661      	mov	r1, ip
1004079a:	409d      	lsls	r5, r3
1004079c:	40d1      	lsrs	r1, r2
1004079e:	430d      	orrs	r5, r1
100407a0:	4661      	mov	r1, ip
100407a2:	4099      	lsls	r1, r3
100407a4:	1e4b      	subs	r3, r1, #1
100407a6:	4199      	sbcs	r1, r3
100407a8:	4653      	mov	r3, sl
100407aa:	40d3      	lsrs	r3, r2
100407ac:	430d      	orrs	r5, r1
100407ae:	1ae4      	subs	r4, r4, r3
100407b0:	1b45      	subs	r5, r0, r5
100407b2:	42a8      	cmp	r0, r5
100407b4:	4180      	sbcs	r0, r0
100407b6:	4240      	negs	r0, r0
100407b8:	1a24      	subs	r4, r4, r0
100407ba:	0223      	lsls	r3, r4, #8
100407bc:	d400      	bmi.n	100407c0 <__aeabi_dadd+0xac>
100407be:	e10f      	b.n	100409e0 <__aeabi_dadd+0x2cc>
100407c0:	0264      	lsls	r4, r4, #9
100407c2:	0a64      	lsrs	r4, r4, #9
100407c4:	2c00      	cmp	r4, #0
100407c6:	d100      	bne.n	100407ca <__aeabi_dadd+0xb6>
100407c8:	e139      	b.n	10040a3e <__aeabi_dadd+0x32a>
100407ca:	0020      	movs	r0, r4
100407cc:	f001 fe5e 	bl	1004248c <__clzsi2>
100407d0:	0003      	movs	r3, r0
100407d2:	3b08      	subs	r3, #8
100407d4:	2120      	movs	r1, #32
100407d6:	0028      	movs	r0, r5
100407d8:	1aca      	subs	r2, r1, r3
100407da:	40d0      	lsrs	r0, r2
100407dc:	409c      	lsls	r4, r3
100407de:	0002      	movs	r2, r0
100407e0:	409d      	lsls	r5, r3
100407e2:	4322      	orrs	r2, r4
100407e4:	429f      	cmp	r7, r3
100407e6:	dd00      	ble.n	100407ea <__aeabi_dadd+0xd6>
100407e8:	e173      	b.n	10040ad2 <__aeabi_dadd+0x3be>
100407ea:	1bd8      	subs	r0, r3, r7
100407ec:	3001      	adds	r0, #1
100407ee:	1a09      	subs	r1, r1, r0
100407f0:	002c      	movs	r4, r5
100407f2:	408d      	lsls	r5, r1
100407f4:	40c4      	lsrs	r4, r0
100407f6:	1e6b      	subs	r3, r5, #1
100407f8:	419d      	sbcs	r5, r3
100407fa:	0013      	movs	r3, r2
100407fc:	40c2      	lsrs	r2, r0
100407fe:	408b      	lsls	r3, r1
10040800:	4325      	orrs	r5, r4
10040802:	2700      	movs	r7, #0
10040804:	0014      	movs	r4, r2
10040806:	431d      	orrs	r5, r3
10040808:	076b      	lsls	r3, r5, #29
1004080a:	d009      	beq.n	10040820 <__aeabi_dadd+0x10c>
1004080c:	230f      	movs	r3, #15
1004080e:	402b      	ands	r3, r5
10040810:	2b04      	cmp	r3, #4
10040812:	d005      	beq.n	10040820 <__aeabi_dadd+0x10c>
10040814:	1d2b      	adds	r3, r5, #4
10040816:	42ab      	cmp	r3, r5
10040818:	41ad      	sbcs	r5, r5
1004081a:	426d      	negs	r5, r5
1004081c:	1964      	adds	r4, r4, r5
1004081e:	001d      	movs	r5, r3
10040820:	0223      	lsls	r3, r4, #8
10040822:	d400      	bmi.n	10040826 <__aeabi_dadd+0x112>
10040824:	e12d      	b.n	10040a82 <__aeabi_dadd+0x36e>
10040826:	4a9d      	ldr	r2, [pc, #628]	@ (10040a9c <__aeabi_dadd+0x388>)
10040828:	3701      	adds	r7, #1
1004082a:	4297      	cmp	r7, r2
1004082c:	d100      	bne.n	10040830 <__aeabi_dadd+0x11c>
1004082e:	e0d3      	b.n	100409d8 <__aeabi_dadd+0x2c4>
10040830:	4646      	mov	r6, r8
10040832:	499b      	ldr	r1, [pc, #620]	@ (10040aa0 <__aeabi_dadd+0x38c>)
10040834:	08ed      	lsrs	r5, r5, #3
10040836:	4021      	ands	r1, r4
10040838:	074a      	lsls	r2, r1, #29
1004083a:	432a      	orrs	r2, r5
1004083c:	057c      	lsls	r4, r7, #21
1004083e:	024d      	lsls	r5, r1, #9
10040840:	0b2d      	lsrs	r5, r5, #12
10040842:	0d64      	lsrs	r4, r4, #21
10040844:	0524      	lsls	r4, r4, #20
10040846:	432c      	orrs	r4, r5
10040848:	07f6      	lsls	r6, r6, #31
1004084a:	4334      	orrs	r4, r6
1004084c:	0010      	movs	r0, r2
1004084e:	0021      	movs	r1, r4
10040850:	b003      	add	sp, #12
10040852:	bcf0      	pop	{r4, r5, r6, r7}
10040854:	46bb      	mov	fp, r7
10040856:	46b2      	mov	sl, r6
10040858:	46a9      	mov	r9, r5
1004085a:	46a0      	mov	r8, r4
1004085c:	bdf0      	pop	{r4, r5, r6, r7, pc}
1004085e:	2a00      	cmp	r2, #0
10040860:	d100      	bne.n	10040864 <__aeabi_dadd+0x150>
10040862:	e084      	b.n	1004096e <__aeabi_dadd+0x25a>
10040864:	464a      	mov	r2, r9
10040866:	1bd2      	subs	r2, r2, r7
10040868:	2f00      	cmp	r7, #0
1004086a:	d000      	beq.n	1004086e <__aeabi_dadd+0x15a>
1004086c:	e16d      	b.n	10040b4a <__aeabi_dadd+0x436>
1004086e:	0025      	movs	r5, r4
10040870:	4305      	orrs	r5, r0
10040872:	d100      	bne.n	10040876 <__aeabi_dadd+0x162>
10040874:	e127      	b.n	10040ac6 <__aeabi_dadd+0x3b2>
10040876:	1e56      	subs	r6, r2, #1
10040878:	2a01      	cmp	r2, #1
1004087a:	d100      	bne.n	1004087e <__aeabi_dadd+0x16a>
1004087c:	e23b      	b.n	10040cf6 <__aeabi_dadd+0x5e2>
1004087e:	4d87      	ldr	r5, [pc, #540]	@ (10040a9c <__aeabi_dadd+0x388>)
10040880:	42aa      	cmp	r2, r5
10040882:	d100      	bne.n	10040886 <__aeabi_dadd+0x172>
10040884:	e26a      	b.n	10040d5c <__aeabi_dadd+0x648>
10040886:	2501      	movs	r5, #1
10040888:	2e38      	cmp	r6, #56	@ 0x38
1004088a:	dc12      	bgt.n	100408b2 <__aeabi_dadd+0x19e>
1004088c:	0032      	movs	r2, r6
1004088e:	2a1f      	cmp	r2, #31
10040890:	dd00      	ble.n	10040894 <__aeabi_dadd+0x180>
10040892:	e1f8      	b.n	10040c86 <__aeabi_dadd+0x572>
10040894:	2620      	movs	r6, #32
10040896:	0025      	movs	r5, r4
10040898:	1ab6      	subs	r6, r6, r2
1004089a:	0007      	movs	r7, r0
1004089c:	4653      	mov	r3, sl
1004089e:	40b0      	lsls	r0, r6
100408a0:	40d4      	lsrs	r4, r2
100408a2:	40b5      	lsls	r5, r6
100408a4:	40d7      	lsrs	r7, r2
100408a6:	1e46      	subs	r6, r0, #1
100408a8:	41b0      	sbcs	r0, r6
100408aa:	1b1b      	subs	r3, r3, r4
100408ac:	469a      	mov	sl, r3
100408ae:	433d      	orrs	r5, r7
100408b0:	4305      	orrs	r5, r0
100408b2:	4662      	mov	r2, ip
100408b4:	1b55      	subs	r5, r2, r5
100408b6:	45ac      	cmp	ip, r5
100408b8:	4192      	sbcs	r2, r2
100408ba:	4653      	mov	r3, sl
100408bc:	4252      	negs	r2, r2
100408be:	000e      	movs	r6, r1
100408c0:	464f      	mov	r7, r9
100408c2:	4688      	mov	r8, r1
100408c4:	1a9c      	subs	r4, r3, r2
100408c6:	e778      	b.n	100407ba <__aeabi_dadd+0xa6>
100408c8:	2a00      	cmp	r2, #0
100408ca:	dc00      	bgt.n	100408ce <__aeabi_dadd+0x1ba>
100408cc:	e08e      	b.n	100409ec <__aeabi_dadd+0x2d8>
100408ce:	4649      	mov	r1, r9
100408d0:	2900      	cmp	r1, #0
100408d2:	d175      	bne.n	100409c0 <__aeabi_dadd+0x2ac>
100408d4:	4661      	mov	r1, ip
100408d6:	4653      	mov	r3, sl
100408d8:	4319      	orrs	r1, r3
100408da:	d100      	bne.n	100408de <__aeabi_dadd+0x1ca>
100408dc:	e0f6      	b.n	10040acc <__aeabi_dadd+0x3b8>
100408de:	1e51      	subs	r1, r2, #1
100408e0:	2a01      	cmp	r2, #1
100408e2:	d100      	bne.n	100408e6 <__aeabi_dadd+0x1d2>
100408e4:	e191      	b.n	10040c0a <__aeabi_dadd+0x4f6>
100408e6:	4d6d      	ldr	r5, [pc, #436]	@ (10040a9c <__aeabi_dadd+0x388>)
100408e8:	42aa      	cmp	r2, r5
100408ea:	d100      	bne.n	100408ee <__aeabi_dadd+0x1da>
100408ec:	e0dc      	b.n	10040aa8 <__aeabi_dadd+0x394>
100408ee:	2501      	movs	r5, #1
100408f0:	2938      	cmp	r1, #56	@ 0x38
100408f2:	dc14      	bgt.n	1004091e <__aeabi_dadd+0x20a>
100408f4:	000a      	movs	r2, r1
100408f6:	2a1f      	cmp	r2, #31
100408f8:	dd00      	ble.n	100408fc <__aeabi_dadd+0x1e8>
100408fa:	e1a2      	b.n	10040c42 <__aeabi_dadd+0x52e>
100408fc:	2120      	movs	r1, #32
100408fe:	4653      	mov	r3, sl
10040900:	1a89      	subs	r1, r1, r2
10040902:	408b      	lsls	r3, r1
10040904:	001d      	movs	r5, r3
10040906:	4663      	mov	r3, ip
10040908:	40d3      	lsrs	r3, r2
1004090a:	431d      	orrs	r5, r3
1004090c:	4663      	mov	r3, ip
1004090e:	408b      	lsls	r3, r1
10040910:	0019      	movs	r1, r3
10040912:	1e4b      	subs	r3, r1, #1
10040914:	4199      	sbcs	r1, r3
10040916:	4653      	mov	r3, sl
10040918:	40d3      	lsrs	r3, r2
1004091a:	430d      	orrs	r5, r1
1004091c:	18e4      	adds	r4, r4, r3
1004091e:	182d      	adds	r5, r5, r0
10040920:	4285      	cmp	r5, r0
10040922:	4180      	sbcs	r0, r0
10040924:	4240      	negs	r0, r0
10040926:	1824      	adds	r4, r4, r0
10040928:	0223      	lsls	r3, r4, #8
1004092a:	d559      	bpl.n	100409e0 <__aeabi_dadd+0x2cc>
1004092c:	4b5b      	ldr	r3, [pc, #364]	@ (10040a9c <__aeabi_dadd+0x388>)
1004092e:	3701      	adds	r7, #1
10040930:	429f      	cmp	r7, r3
10040932:	d051      	beq.n	100409d8 <__aeabi_dadd+0x2c4>
10040934:	2101      	movs	r1, #1
10040936:	4b5a      	ldr	r3, [pc, #360]	@ (10040aa0 <__aeabi_dadd+0x38c>)
10040938:	086a      	lsrs	r2, r5, #1
1004093a:	401c      	ands	r4, r3
1004093c:	4029      	ands	r1, r5
1004093e:	430a      	orrs	r2, r1
10040940:	07e5      	lsls	r5, r4, #31
10040942:	4315      	orrs	r5, r2
10040944:	0864      	lsrs	r4, r4, #1
10040946:	e75f      	b.n	10040808 <__aeabi_dadd+0xf4>
10040948:	4661      	mov	r1, ip
1004094a:	4653      	mov	r3, sl
1004094c:	4319      	orrs	r1, r3
1004094e:	d100      	bne.n	10040952 <__aeabi_dadd+0x23e>
10040950:	e0bc      	b.n	10040acc <__aeabi_dadd+0x3b8>
10040952:	1e51      	subs	r1, r2, #1
10040954:	2a01      	cmp	r2, #1
10040956:	d100      	bne.n	1004095a <__aeabi_dadd+0x246>
10040958:	e164      	b.n	10040c24 <__aeabi_dadd+0x510>
1004095a:	4d50      	ldr	r5, [pc, #320]	@ (10040a9c <__aeabi_dadd+0x388>)
1004095c:	42aa      	cmp	r2, r5
1004095e:	d100      	bne.n	10040962 <__aeabi_dadd+0x24e>
10040960:	e16a      	b.n	10040c38 <__aeabi_dadd+0x524>
10040962:	2501      	movs	r5, #1
10040964:	2938      	cmp	r1, #56	@ 0x38
10040966:	dd00      	ble.n	1004096a <__aeabi_dadd+0x256>
10040968:	e722      	b.n	100407b0 <__aeabi_dadd+0x9c>
1004096a:	000a      	movs	r2, r1
1004096c:	e70e      	b.n	1004078c <__aeabi_dadd+0x78>
1004096e:	4a4d      	ldr	r2, [pc, #308]	@ (10040aa4 <__aeabi_dadd+0x390>)
10040970:	1c7d      	adds	r5, r7, #1
10040972:	4215      	tst	r5, r2
10040974:	d000      	beq.n	10040978 <__aeabi_dadd+0x264>
10040976:	e0d0      	b.n	10040b1a <__aeabi_dadd+0x406>
10040978:	0025      	movs	r5, r4
1004097a:	4662      	mov	r2, ip
1004097c:	4653      	mov	r3, sl
1004097e:	4305      	orrs	r5, r0
10040980:	431a      	orrs	r2, r3
10040982:	2f00      	cmp	r7, #0
10040984:	d000      	beq.n	10040988 <__aeabi_dadd+0x274>
10040986:	e137      	b.n	10040bf8 <__aeabi_dadd+0x4e4>
10040988:	2d00      	cmp	r5, #0
1004098a:	d100      	bne.n	1004098e <__aeabi_dadd+0x27a>
1004098c:	e1a8      	b.n	10040ce0 <__aeabi_dadd+0x5cc>
1004098e:	2a00      	cmp	r2, #0
10040990:	d100      	bne.n	10040994 <__aeabi_dadd+0x280>
10040992:	e16a      	b.n	10040c6a <__aeabi_dadd+0x556>
10040994:	4663      	mov	r3, ip
10040996:	1ac5      	subs	r5, r0, r3
10040998:	4653      	mov	r3, sl
1004099a:	1ae2      	subs	r2, r4, r3
1004099c:	42a8      	cmp	r0, r5
1004099e:	419b      	sbcs	r3, r3
100409a0:	425b      	negs	r3, r3
100409a2:	1ad3      	subs	r3, r2, r3
100409a4:	021a      	lsls	r2, r3, #8
100409a6:	d400      	bmi.n	100409aa <__aeabi_dadd+0x296>
100409a8:	e203      	b.n	10040db2 <__aeabi_dadd+0x69e>
100409aa:	4663      	mov	r3, ip
100409ac:	1a1d      	subs	r5, r3, r0
100409ae:	45ac      	cmp	ip, r5
100409b0:	4192      	sbcs	r2, r2
100409b2:	4653      	mov	r3, sl
100409b4:	4252      	negs	r2, r2
100409b6:	1b1c      	subs	r4, r3, r4
100409b8:	000e      	movs	r6, r1
100409ba:	4688      	mov	r8, r1
100409bc:	1aa4      	subs	r4, r4, r2
100409be:	e723      	b.n	10040808 <__aeabi_dadd+0xf4>
100409c0:	4936      	ldr	r1, [pc, #216]	@ (10040a9c <__aeabi_dadd+0x388>)
100409c2:	428f      	cmp	r7, r1
100409c4:	d070      	beq.n	10040aa8 <__aeabi_dadd+0x394>
100409c6:	2501      	movs	r5, #1
100409c8:	2a38      	cmp	r2, #56	@ 0x38
100409ca:	dca8      	bgt.n	1004091e <__aeabi_dadd+0x20a>
100409cc:	2180      	movs	r1, #128	@ 0x80
100409ce:	4653      	mov	r3, sl
100409d0:	0409      	lsls	r1, r1, #16
100409d2:	430b      	orrs	r3, r1
100409d4:	469a      	mov	sl, r3
100409d6:	e78e      	b.n	100408f6 <__aeabi_dadd+0x1e2>
100409d8:	003c      	movs	r4, r7
100409da:	2500      	movs	r5, #0
100409dc:	2200      	movs	r2, #0
100409de:	e731      	b.n	10040844 <__aeabi_dadd+0x130>
100409e0:	2307      	movs	r3, #7
100409e2:	402b      	ands	r3, r5
100409e4:	2b00      	cmp	r3, #0
100409e6:	d000      	beq.n	100409ea <__aeabi_dadd+0x2d6>
100409e8:	e710      	b.n	1004080c <__aeabi_dadd+0xf8>
100409ea:	e093      	b.n	10040b14 <__aeabi_dadd+0x400>
100409ec:	2a00      	cmp	r2, #0
100409ee:	d074      	beq.n	10040ada <__aeabi_dadd+0x3c6>
100409f0:	464a      	mov	r2, r9
100409f2:	1bd2      	subs	r2, r2, r7
100409f4:	2f00      	cmp	r7, #0
100409f6:	d100      	bne.n	100409fa <__aeabi_dadd+0x2e6>
100409f8:	e0c7      	b.n	10040b8a <__aeabi_dadd+0x476>
100409fa:	4928      	ldr	r1, [pc, #160]	@ (10040a9c <__aeabi_dadd+0x388>)
100409fc:	4589      	cmp	r9, r1
100409fe:	d100      	bne.n	10040a02 <__aeabi_dadd+0x2ee>
10040a00:	e185      	b.n	10040d0e <__aeabi_dadd+0x5fa>
10040a02:	2501      	movs	r5, #1
10040a04:	2a38      	cmp	r2, #56	@ 0x38
10040a06:	dc12      	bgt.n	10040a2e <__aeabi_dadd+0x31a>
10040a08:	2180      	movs	r1, #128	@ 0x80
10040a0a:	0409      	lsls	r1, r1, #16
10040a0c:	430c      	orrs	r4, r1
10040a0e:	2a1f      	cmp	r2, #31
10040a10:	dd00      	ble.n	10040a14 <__aeabi_dadd+0x300>
10040a12:	e1ab      	b.n	10040d6c <__aeabi_dadd+0x658>
10040a14:	2120      	movs	r1, #32
10040a16:	0025      	movs	r5, r4
10040a18:	1a89      	subs	r1, r1, r2
10040a1a:	0007      	movs	r7, r0
10040a1c:	4088      	lsls	r0, r1
10040a1e:	408d      	lsls	r5, r1
10040a20:	40d7      	lsrs	r7, r2
10040a22:	1e41      	subs	r1, r0, #1
10040a24:	4188      	sbcs	r0, r1
10040a26:	40d4      	lsrs	r4, r2
10040a28:	433d      	orrs	r5, r7
10040a2a:	4305      	orrs	r5, r0
10040a2c:	44a2      	add	sl, r4
10040a2e:	4465      	add	r5, ip
10040a30:	4565      	cmp	r5, ip
10040a32:	4192      	sbcs	r2, r2
10040a34:	4252      	negs	r2, r2
10040a36:	4452      	add	r2, sl
10040a38:	0014      	movs	r4, r2
10040a3a:	464f      	mov	r7, r9
10040a3c:	e774      	b.n	10040928 <__aeabi_dadd+0x214>
10040a3e:	0028      	movs	r0, r5
10040a40:	f001 fd24 	bl	1004248c <__clzsi2>
10040a44:	0003      	movs	r3, r0
10040a46:	3318      	adds	r3, #24
10040a48:	2b1f      	cmp	r3, #31
10040a4a:	dc00      	bgt.n	10040a4e <__aeabi_dadd+0x33a>
10040a4c:	e6c2      	b.n	100407d4 <__aeabi_dadd+0xc0>
10040a4e:	002a      	movs	r2, r5
10040a50:	3808      	subs	r0, #8
10040a52:	4082      	lsls	r2, r0
10040a54:	429f      	cmp	r7, r3
10040a56:	dd00      	ble.n	10040a5a <__aeabi_dadd+0x346>
10040a58:	e0a9      	b.n	10040bae <__aeabi_dadd+0x49a>
10040a5a:	1bdb      	subs	r3, r3, r7
10040a5c:	1c58      	adds	r0, r3, #1
10040a5e:	281f      	cmp	r0, #31
10040a60:	dc00      	bgt.n	10040a64 <__aeabi_dadd+0x350>
10040a62:	e1ac      	b.n	10040dbe <__aeabi_dadd+0x6aa>
10040a64:	0015      	movs	r5, r2
10040a66:	3b1f      	subs	r3, #31
10040a68:	40dd      	lsrs	r5, r3
10040a6a:	2820      	cmp	r0, #32
10040a6c:	d005      	beq.n	10040a7a <__aeabi_dadd+0x366>
10040a6e:	2340      	movs	r3, #64	@ 0x40
10040a70:	1a1b      	subs	r3, r3, r0
10040a72:	409a      	lsls	r2, r3
10040a74:	1e53      	subs	r3, r2, #1
10040a76:	419a      	sbcs	r2, r3
10040a78:	4315      	orrs	r5, r2
10040a7a:	2307      	movs	r3, #7
10040a7c:	2700      	movs	r7, #0
10040a7e:	402b      	ands	r3, r5
10040a80:	e7b0      	b.n	100409e4 <__aeabi_dadd+0x2d0>
10040a82:	08ed      	lsrs	r5, r5, #3
10040a84:	4b05      	ldr	r3, [pc, #20]	@ (10040a9c <__aeabi_dadd+0x388>)
10040a86:	0762      	lsls	r2, r4, #29
10040a88:	432a      	orrs	r2, r5
10040a8a:	08e4      	lsrs	r4, r4, #3
10040a8c:	429f      	cmp	r7, r3
10040a8e:	d00f      	beq.n	10040ab0 <__aeabi_dadd+0x39c>
10040a90:	0324      	lsls	r4, r4, #12
10040a92:	0b25      	lsrs	r5, r4, #12
10040a94:	057c      	lsls	r4, r7, #21
10040a96:	0d64      	lsrs	r4, r4, #21
10040a98:	e6d4      	b.n	10040844 <__aeabi_dadd+0x130>
10040a9a:	46c0      	nop			@ (mov r8, r8)
10040a9c:	000007ff 	.word	0x000007ff
10040aa0:	ff7fffff 	.word	0xff7fffff
10040aa4:	000007fe 	.word	0x000007fe
10040aa8:	08c0      	lsrs	r0, r0, #3
10040aaa:	0762      	lsls	r2, r4, #29
10040aac:	4302      	orrs	r2, r0
10040aae:	08e4      	lsrs	r4, r4, #3
10040ab0:	0013      	movs	r3, r2
10040ab2:	4323      	orrs	r3, r4
10040ab4:	d100      	bne.n	10040ab8 <__aeabi_dadd+0x3a4>
10040ab6:	e186      	b.n	10040dc6 <__aeabi_dadd+0x6b2>
10040ab8:	2580      	movs	r5, #128	@ 0x80
10040aba:	032d      	lsls	r5, r5, #12
10040abc:	4325      	orrs	r5, r4
10040abe:	032d      	lsls	r5, r5, #12
10040ac0:	4cc3      	ldr	r4, [pc, #780]	@ (10040dd0 <__aeabi_dadd+0x6bc>)
10040ac2:	0b2d      	lsrs	r5, r5, #12
10040ac4:	e6be      	b.n	10040844 <__aeabi_dadd+0x130>
10040ac6:	4660      	mov	r0, ip
10040ac8:	4654      	mov	r4, sl
10040aca:	000e      	movs	r6, r1
10040acc:	0017      	movs	r7, r2
10040ace:	08c5      	lsrs	r5, r0, #3
10040ad0:	e7d8      	b.n	10040a84 <__aeabi_dadd+0x370>
10040ad2:	4cc0      	ldr	r4, [pc, #768]	@ (10040dd4 <__aeabi_dadd+0x6c0>)
10040ad4:	1aff      	subs	r7, r7, r3
10040ad6:	4014      	ands	r4, r2
10040ad8:	e696      	b.n	10040808 <__aeabi_dadd+0xf4>
10040ada:	4abf      	ldr	r2, [pc, #764]	@ (10040dd8 <__aeabi_dadd+0x6c4>)
10040adc:	1c79      	adds	r1, r7, #1
10040ade:	4211      	tst	r1, r2
10040ae0:	d16b      	bne.n	10040bba <__aeabi_dadd+0x4a6>
10040ae2:	0022      	movs	r2, r4
10040ae4:	4302      	orrs	r2, r0
10040ae6:	2f00      	cmp	r7, #0
10040ae8:	d000      	beq.n	10040aec <__aeabi_dadd+0x3d8>
10040aea:	e0db      	b.n	10040ca4 <__aeabi_dadd+0x590>
10040aec:	2a00      	cmp	r2, #0
10040aee:	d100      	bne.n	10040af2 <__aeabi_dadd+0x3de>
10040af0:	e12d      	b.n	10040d4e <__aeabi_dadd+0x63a>
10040af2:	4662      	mov	r2, ip
10040af4:	4653      	mov	r3, sl
10040af6:	431a      	orrs	r2, r3
10040af8:	d100      	bne.n	10040afc <__aeabi_dadd+0x3e8>
10040afa:	e0b6      	b.n	10040c6a <__aeabi_dadd+0x556>
10040afc:	4663      	mov	r3, ip
10040afe:	18c5      	adds	r5, r0, r3
10040b00:	4285      	cmp	r5, r0
10040b02:	4180      	sbcs	r0, r0
10040b04:	4454      	add	r4, sl
10040b06:	4240      	negs	r0, r0
10040b08:	1824      	adds	r4, r4, r0
10040b0a:	0223      	lsls	r3, r4, #8
10040b0c:	d502      	bpl.n	10040b14 <__aeabi_dadd+0x400>
10040b0e:	000f      	movs	r7, r1
10040b10:	4bb0      	ldr	r3, [pc, #704]	@ (10040dd4 <__aeabi_dadd+0x6c0>)
10040b12:	401c      	ands	r4, r3
10040b14:	003a      	movs	r2, r7
10040b16:	0028      	movs	r0, r5
10040b18:	e7d8      	b.n	10040acc <__aeabi_dadd+0x3b8>
10040b1a:	4662      	mov	r2, ip
10040b1c:	1a85      	subs	r5, r0, r2
10040b1e:	42a8      	cmp	r0, r5
10040b20:	4192      	sbcs	r2, r2
10040b22:	4653      	mov	r3, sl
10040b24:	4252      	negs	r2, r2
10040b26:	4691      	mov	r9, r2
10040b28:	1ae3      	subs	r3, r4, r3
10040b2a:	001a      	movs	r2, r3
10040b2c:	464b      	mov	r3, r9
10040b2e:	1ad2      	subs	r2, r2, r3
10040b30:	0013      	movs	r3, r2
10040b32:	4691      	mov	r9, r2
10040b34:	021a      	lsls	r2, r3, #8
10040b36:	d454      	bmi.n	10040be2 <__aeabi_dadd+0x4ce>
10040b38:	464a      	mov	r2, r9
10040b3a:	464c      	mov	r4, r9
10040b3c:	432a      	orrs	r2, r5
10040b3e:	d000      	beq.n	10040b42 <__aeabi_dadd+0x42e>
10040b40:	e640      	b.n	100407c4 <__aeabi_dadd+0xb0>
10040b42:	2600      	movs	r6, #0
10040b44:	2400      	movs	r4, #0
10040b46:	2500      	movs	r5, #0
10040b48:	e67c      	b.n	10040844 <__aeabi_dadd+0x130>
10040b4a:	4da1      	ldr	r5, [pc, #644]	@ (10040dd0 <__aeabi_dadd+0x6bc>)
10040b4c:	45a9      	cmp	r9, r5
10040b4e:	d100      	bne.n	10040b52 <__aeabi_dadd+0x43e>
10040b50:	e090      	b.n	10040c74 <__aeabi_dadd+0x560>
10040b52:	2501      	movs	r5, #1
10040b54:	2a38      	cmp	r2, #56	@ 0x38
10040b56:	dd00      	ble.n	10040b5a <__aeabi_dadd+0x446>
10040b58:	e6ab      	b.n	100408b2 <__aeabi_dadd+0x19e>
10040b5a:	2580      	movs	r5, #128	@ 0x80
10040b5c:	042d      	lsls	r5, r5, #16
10040b5e:	432c      	orrs	r4, r5
10040b60:	e695      	b.n	1004088e <__aeabi_dadd+0x17a>
10040b62:	0011      	movs	r1, r2
10040b64:	4655      	mov	r5, sl
10040b66:	3920      	subs	r1, #32
10040b68:	40cd      	lsrs	r5, r1
10040b6a:	46a9      	mov	r9, r5
10040b6c:	2a20      	cmp	r2, #32
10040b6e:	d006      	beq.n	10040b7e <__aeabi_dadd+0x46a>
10040b70:	2140      	movs	r1, #64	@ 0x40
10040b72:	4653      	mov	r3, sl
10040b74:	1a8a      	subs	r2, r1, r2
10040b76:	4093      	lsls	r3, r2
10040b78:	4662      	mov	r2, ip
10040b7a:	431a      	orrs	r2, r3
10040b7c:	4694      	mov	ip, r2
10040b7e:	4665      	mov	r5, ip
10040b80:	1e6b      	subs	r3, r5, #1
10040b82:	419d      	sbcs	r5, r3
10040b84:	464b      	mov	r3, r9
10040b86:	431d      	orrs	r5, r3
10040b88:	e612      	b.n	100407b0 <__aeabi_dadd+0x9c>
10040b8a:	0021      	movs	r1, r4
10040b8c:	4301      	orrs	r1, r0
10040b8e:	d100      	bne.n	10040b92 <__aeabi_dadd+0x47e>
10040b90:	e0c4      	b.n	10040d1c <__aeabi_dadd+0x608>
10040b92:	1e51      	subs	r1, r2, #1
10040b94:	2a01      	cmp	r2, #1
10040b96:	d100      	bne.n	10040b9a <__aeabi_dadd+0x486>
10040b98:	e0fb      	b.n	10040d92 <__aeabi_dadd+0x67e>
10040b9a:	4d8d      	ldr	r5, [pc, #564]	@ (10040dd0 <__aeabi_dadd+0x6bc>)
10040b9c:	42aa      	cmp	r2, r5
10040b9e:	d100      	bne.n	10040ba2 <__aeabi_dadd+0x48e>
10040ba0:	e0b5      	b.n	10040d0e <__aeabi_dadd+0x5fa>
10040ba2:	2501      	movs	r5, #1
10040ba4:	2938      	cmp	r1, #56	@ 0x38
10040ba6:	dd00      	ble.n	10040baa <__aeabi_dadd+0x496>
10040ba8:	e741      	b.n	10040a2e <__aeabi_dadd+0x31a>
10040baa:	000a      	movs	r2, r1
10040bac:	e72f      	b.n	10040a0e <__aeabi_dadd+0x2fa>
10040bae:	4c89      	ldr	r4, [pc, #548]	@ (10040dd4 <__aeabi_dadd+0x6c0>)
10040bb0:	1aff      	subs	r7, r7, r3
10040bb2:	4014      	ands	r4, r2
10040bb4:	0762      	lsls	r2, r4, #29
10040bb6:	08e4      	lsrs	r4, r4, #3
10040bb8:	e76a      	b.n	10040a90 <__aeabi_dadd+0x37c>
10040bba:	4a85      	ldr	r2, [pc, #532]	@ (10040dd0 <__aeabi_dadd+0x6bc>)
10040bbc:	4291      	cmp	r1, r2
10040bbe:	d100      	bne.n	10040bc2 <__aeabi_dadd+0x4ae>
10040bc0:	e0e3      	b.n	10040d8a <__aeabi_dadd+0x676>
10040bc2:	4663      	mov	r3, ip
10040bc4:	18c2      	adds	r2, r0, r3
10040bc6:	4282      	cmp	r2, r0
10040bc8:	4180      	sbcs	r0, r0
10040bca:	0023      	movs	r3, r4
10040bcc:	4240      	negs	r0, r0
10040bce:	4453      	add	r3, sl
10040bd0:	181b      	adds	r3, r3, r0
10040bd2:	07dd      	lsls	r5, r3, #31
10040bd4:	085c      	lsrs	r4, r3, #1
10040bd6:	2307      	movs	r3, #7
10040bd8:	0852      	lsrs	r2, r2, #1
10040bda:	4315      	orrs	r5, r2
10040bdc:	000f      	movs	r7, r1
10040bde:	402b      	ands	r3, r5
10040be0:	e700      	b.n	100409e4 <__aeabi_dadd+0x2d0>
10040be2:	4663      	mov	r3, ip
10040be4:	1a1d      	subs	r5, r3, r0
10040be6:	45ac      	cmp	ip, r5
10040be8:	4192      	sbcs	r2, r2
10040bea:	4653      	mov	r3, sl
10040bec:	4252      	negs	r2, r2
10040bee:	1b1c      	subs	r4, r3, r4
10040bf0:	000e      	movs	r6, r1
10040bf2:	4688      	mov	r8, r1
10040bf4:	1aa4      	subs	r4, r4, r2
10040bf6:	e5e5      	b.n	100407c4 <__aeabi_dadd+0xb0>
10040bf8:	2d00      	cmp	r5, #0
10040bfa:	d000      	beq.n	10040bfe <__aeabi_dadd+0x4ea>
10040bfc:	e091      	b.n	10040d22 <__aeabi_dadd+0x60e>
10040bfe:	2a00      	cmp	r2, #0
10040c00:	d138      	bne.n	10040c74 <__aeabi_dadd+0x560>
10040c02:	2480      	movs	r4, #128	@ 0x80
10040c04:	2600      	movs	r6, #0
10040c06:	0324      	lsls	r4, r4, #12
10040c08:	e756      	b.n	10040ab8 <__aeabi_dadd+0x3a4>
10040c0a:	4663      	mov	r3, ip
10040c0c:	18c5      	adds	r5, r0, r3
10040c0e:	4285      	cmp	r5, r0
10040c10:	4180      	sbcs	r0, r0
10040c12:	4454      	add	r4, sl
10040c14:	4240      	negs	r0, r0
10040c16:	1824      	adds	r4, r4, r0
10040c18:	2701      	movs	r7, #1
10040c1a:	0223      	lsls	r3, r4, #8
10040c1c:	d400      	bmi.n	10040c20 <__aeabi_dadd+0x50c>
10040c1e:	e6df      	b.n	100409e0 <__aeabi_dadd+0x2cc>
10040c20:	2702      	movs	r7, #2
10040c22:	e687      	b.n	10040934 <__aeabi_dadd+0x220>
10040c24:	4663      	mov	r3, ip
10040c26:	1ac5      	subs	r5, r0, r3
10040c28:	42a8      	cmp	r0, r5
10040c2a:	4180      	sbcs	r0, r0
10040c2c:	4653      	mov	r3, sl
10040c2e:	4240      	negs	r0, r0
10040c30:	1ae4      	subs	r4, r4, r3
10040c32:	2701      	movs	r7, #1
10040c34:	1a24      	subs	r4, r4, r0
10040c36:	e5c0      	b.n	100407ba <__aeabi_dadd+0xa6>
10040c38:	0762      	lsls	r2, r4, #29
10040c3a:	08c0      	lsrs	r0, r0, #3
10040c3c:	4302      	orrs	r2, r0
10040c3e:	08e4      	lsrs	r4, r4, #3
10040c40:	e736      	b.n	10040ab0 <__aeabi_dadd+0x39c>
10040c42:	0011      	movs	r1, r2
10040c44:	4653      	mov	r3, sl
10040c46:	3920      	subs	r1, #32
10040c48:	40cb      	lsrs	r3, r1
10040c4a:	4699      	mov	r9, r3
10040c4c:	2a20      	cmp	r2, #32
10040c4e:	d006      	beq.n	10040c5e <__aeabi_dadd+0x54a>
10040c50:	2140      	movs	r1, #64	@ 0x40
10040c52:	4653      	mov	r3, sl
10040c54:	1a8a      	subs	r2, r1, r2
10040c56:	4093      	lsls	r3, r2
10040c58:	4662      	mov	r2, ip
10040c5a:	431a      	orrs	r2, r3
10040c5c:	4694      	mov	ip, r2
10040c5e:	4665      	mov	r5, ip
10040c60:	1e6b      	subs	r3, r5, #1
10040c62:	419d      	sbcs	r5, r3
10040c64:	464b      	mov	r3, r9
10040c66:	431d      	orrs	r5, r3
10040c68:	e659      	b.n	1004091e <__aeabi_dadd+0x20a>
10040c6a:	0762      	lsls	r2, r4, #29
10040c6c:	08c0      	lsrs	r0, r0, #3
10040c6e:	4302      	orrs	r2, r0
10040c70:	08e4      	lsrs	r4, r4, #3
10040c72:	e70d      	b.n	10040a90 <__aeabi_dadd+0x37c>
10040c74:	4653      	mov	r3, sl
10040c76:	075a      	lsls	r2, r3, #29
10040c78:	4663      	mov	r3, ip
10040c7a:	08d8      	lsrs	r0, r3, #3
10040c7c:	4653      	mov	r3, sl
10040c7e:	000e      	movs	r6, r1
10040c80:	4302      	orrs	r2, r0
10040c82:	08dc      	lsrs	r4, r3, #3
10040c84:	e714      	b.n	10040ab0 <__aeabi_dadd+0x39c>
10040c86:	0015      	movs	r5, r2
10040c88:	0026      	movs	r6, r4
10040c8a:	3d20      	subs	r5, #32
10040c8c:	40ee      	lsrs	r6, r5
10040c8e:	2a20      	cmp	r2, #32
10040c90:	d003      	beq.n	10040c9a <__aeabi_dadd+0x586>
10040c92:	2540      	movs	r5, #64	@ 0x40
10040c94:	1aaa      	subs	r2, r5, r2
10040c96:	4094      	lsls	r4, r2
10040c98:	4320      	orrs	r0, r4
10040c9a:	1e42      	subs	r2, r0, #1
10040c9c:	4190      	sbcs	r0, r2
10040c9e:	0005      	movs	r5, r0
10040ca0:	4335      	orrs	r5, r6
10040ca2:	e606      	b.n	100408b2 <__aeabi_dadd+0x19e>
10040ca4:	2a00      	cmp	r2, #0
10040ca6:	d07c      	beq.n	10040da2 <__aeabi_dadd+0x68e>
10040ca8:	4662      	mov	r2, ip
10040caa:	4653      	mov	r3, sl
10040cac:	08c0      	lsrs	r0, r0, #3
10040cae:	431a      	orrs	r2, r3
10040cb0:	d100      	bne.n	10040cb4 <__aeabi_dadd+0x5a0>
10040cb2:	e6fa      	b.n	10040aaa <__aeabi_dadd+0x396>
10040cb4:	0762      	lsls	r2, r4, #29
10040cb6:	4310      	orrs	r0, r2
10040cb8:	2280      	movs	r2, #128	@ 0x80
10040cba:	08e4      	lsrs	r4, r4, #3
10040cbc:	0312      	lsls	r2, r2, #12
10040cbe:	4214      	tst	r4, r2
10040cc0:	d008      	beq.n	10040cd4 <__aeabi_dadd+0x5c0>
10040cc2:	08d9      	lsrs	r1, r3, #3
10040cc4:	4211      	tst	r1, r2
10040cc6:	d105      	bne.n	10040cd4 <__aeabi_dadd+0x5c0>
10040cc8:	4663      	mov	r3, ip
10040cca:	08d8      	lsrs	r0, r3, #3
10040ccc:	4653      	mov	r3, sl
10040cce:	000c      	movs	r4, r1
10040cd0:	075b      	lsls	r3, r3, #29
10040cd2:	4318      	orrs	r0, r3
10040cd4:	0f42      	lsrs	r2, r0, #29
10040cd6:	00c0      	lsls	r0, r0, #3
10040cd8:	08c0      	lsrs	r0, r0, #3
10040cda:	0752      	lsls	r2, r2, #29
10040cdc:	4302      	orrs	r2, r0
10040cde:	e6e7      	b.n	10040ab0 <__aeabi_dadd+0x39c>
10040ce0:	2a00      	cmp	r2, #0
10040ce2:	d100      	bne.n	10040ce6 <__aeabi_dadd+0x5d2>
10040ce4:	e72d      	b.n	10040b42 <__aeabi_dadd+0x42e>
10040ce6:	4663      	mov	r3, ip
10040ce8:	08d8      	lsrs	r0, r3, #3
10040cea:	4653      	mov	r3, sl
10040cec:	075a      	lsls	r2, r3, #29
10040cee:	000e      	movs	r6, r1
10040cf0:	4302      	orrs	r2, r0
10040cf2:	08dc      	lsrs	r4, r3, #3
10040cf4:	e6cc      	b.n	10040a90 <__aeabi_dadd+0x37c>
10040cf6:	4663      	mov	r3, ip
10040cf8:	1a1d      	subs	r5, r3, r0
10040cfa:	45ac      	cmp	ip, r5
10040cfc:	4192      	sbcs	r2, r2
10040cfe:	4653      	mov	r3, sl
10040d00:	4252      	negs	r2, r2
10040d02:	1b1c      	subs	r4, r3, r4
10040d04:	000e      	movs	r6, r1
10040d06:	4688      	mov	r8, r1
10040d08:	1aa4      	subs	r4, r4, r2
10040d0a:	3701      	adds	r7, #1
10040d0c:	e555      	b.n	100407ba <__aeabi_dadd+0xa6>
10040d0e:	4663      	mov	r3, ip
10040d10:	08d9      	lsrs	r1, r3, #3
10040d12:	4653      	mov	r3, sl
10040d14:	075a      	lsls	r2, r3, #29
10040d16:	430a      	orrs	r2, r1
10040d18:	08dc      	lsrs	r4, r3, #3
10040d1a:	e6c9      	b.n	10040ab0 <__aeabi_dadd+0x39c>
10040d1c:	4660      	mov	r0, ip
10040d1e:	4654      	mov	r4, sl
10040d20:	e6d4      	b.n	10040acc <__aeabi_dadd+0x3b8>
10040d22:	08c0      	lsrs	r0, r0, #3
10040d24:	2a00      	cmp	r2, #0
10040d26:	d100      	bne.n	10040d2a <__aeabi_dadd+0x616>
10040d28:	e6bf      	b.n	10040aaa <__aeabi_dadd+0x396>
10040d2a:	0762      	lsls	r2, r4, #29
10040d2c:	4310      	orrs	r0, r2
10040d2e:	2280      	movs	r2, #128	@ 0x80
10040d30:	08e4      	lsrs	r4, r4, #3
10040d32:	0312      	lsls	r2, r2, #12
10040d34:	4214      	tst	r4, r2
10040d36:	d0cd      	beq.n	10040cd4 <__aeabi_dadd+0x5c0>
10040d38:	08dd      	lsrs	r5, r3, #3
10040d3a:	4215      	tst	r5, r2
10040d3c:	d1ca      	bne.n	10040cd4 <__aeabi_dadd+0x5c0>
10040d3e:	4663      	mov	r3, ip
10040d40:	08d8      	lsrs	r0, r3, #3
10040d42:	4653      	mov	r3, sl
10040d44:	075b      	lsls	r3, r3, #29
10040d46:	000e      	movs	r6, r1
10040d48:	002c      	movs	r4, r5
10040d4a:	4318      	orrs	r0, r3
10040d4c:	e7c2      	b.n	10040cd4 <__aeabi_dadd+0x5c0>
10040d4e:	4663      	mov	r3, ip
10040d50:	08d9      	lsrs	r1, r3, #3
10040d52:	4653      	mov	r3, sl
10040d54:	075a      	lsls	r2, r3, #29
10040d56:	430a      	orrs	r2, r1
10040d58:	08dc      	lsrs	r4, r3, #3
10040d5a:	e699      	b.n	10040a90 <__aeabi_dadd+0x37c>
10040d5c:	4663      	mov	r3, ip
10040d5e:	08d8      	lsrs	r0, r3, #3
10040d60:	4653      	mov	r3, sl
10040d62:	075a      	lsls	r2, r3, #29
10040d64:	000e      	movs	r6, r1
10040d66:	4302      	orrs	r2, r0
10040d68:	08dc      	lsrs	r4, r3, #3
10040d6a:	e6a1      	b.n	10040ab0 <__aeabi_dadd+0x39c>
10040d6c:	0011      	movs	r1, r2
10040d6e:	0027      	movs	r7, r4
10040d70:	3920      	subs	r1, #32
10040d72:	40cf      	lsrs	r7, r1
10040d74:	2a20      	cmp	r2, #32
10040d76:	d003      	beq.n	10040d80 <__aeabi_dadd+0x66c>
10040d78:	2140      	movs	r1, #64	@ 0x40
10040d7a:	1a8a      	subs	r2, r1, r2
10040d7c:	4094      	lsls	r4, r2
10040d7e:	4320      	orrs	r0, r4
10040d80:	1e42      	subs	r2, r0, #1
10040d82:	4190      	sbcs	r0, r2
10040d84:	0005      	movs	r5, r0
10040d86:	433d      	orrs	r5, r7
10040d88:	e651      	b.n	10040a2e <__aeabi_dadd+0x31a>
10040d8a:	000c      	movs	r4, r1
10040d8c:	2500      	movs	r5, #0
10040d8e:	2200      	movs	r2, #0
10040d90:	e558      	b.n	10040844 <__aeabi_dadd+0x130>
10040d92:	4460      	add	r0, ip
10040d94:	4560      	cmp	r0, ip
10040d96:	4192      	sbcs	r2, r2
10040d98:	4454      	add	r4, sl
10040d9a:	4252      	negs	r2, r2
10040d9c:	0005      	movs	r5, r0
10040d9e:	18a4      	adds	r4, r4, r2
10040da0:	e73a      	b.n	10040c18 <__aeabi_dadd+0x504>
10040da2:	4653      	mov	r3, sl
10040da4:	075a      	lsls	r2, r3, #29
10040da6:	4663      	mov	r3, ip
10040da8:	08d9      	lsrs	r1, r3, #3
10040daa:	4653      	mov	r3, sl
10040dac:	430a      	orrs	r2, r1
10040dae:	08dc      	lsrs	r4, r3, #3
10040db0:	e67e      	b.n	10040ab0 <__aeabi_dadd+0x39c>
10040db2:	001a      	movs	r2, r3
10040db4:	001c      	movs	r4, r3
10040db6:	432a      	orrs	r2, r5
10040db8:	d000      	beq.n	10040dbc <__aeabi_dadd+0x6a8>
10040dba:	e6ab      	b.n	10040b14 <__aeabi_dadd+0x400>
10040dbc:	e6c1      	b.n	10040b42 <__aeabi_dadd+0x42e>
10040dbe:	2120      	movs	r1, #32
10040dc0:	2500      	movs	r5, #0
10040dc2:	1a09      	subs	r1, r1, r0
10040dc4:	e519      	b.n	100407fa <__aeabi_dadd+0xe6>
10040dc6:	2200      	movs	r2, #0
10040dc8:	2500      	movs	r5, #0
10040dca:	4c01      	ldr	r4, [pc, #4]	@ (10040dd0 <__aeabi_dadd+0x6bc>)
10040dcc:	e53a      	b.n	10040844 <__aeabi_dadd+0x130>
10040dce:	46c0      	nop			@ (mov r8, r8)
10040dd0:	000007ff 	.word	0x000007ff
10040dd4:	ff7fffff 	.word	0xff7fffff
10040dd8:	000007fe 	.word	0x000007fe

10040ddc <__aeabi_ddiv>:
10040ddc:	b5f0      	push	{r4, r5, r6, r7, lr}
10040dde:	46de      	mov	lr, fp
10040de0:	4645      	mov	r5, r8
10040de2:	4657      	mov	r7, sl
10040de4:	464e      	mov	r6, r9
10040de6:	b5e0      	push	{r5, r6, r7, lr}
10040de8:	b087      	sub	sp, #28
10040dea:	9200      	str	r2, [sp, #0]
10040dec:	9301      	str	r3, [sp, #4]
10040dee:	030b      	lsls	r3, r1, #12
10040df0:	0b1b      	lsrs	r3, r3, #12
10040df2:	469b      	mov	fp, r3
10040df4:	0fca      	lsrs	r2, r1, #31
10040df6:	004b      	lsls	r3, r1, #1
10040df8:	0004      	movs	r4, r0
10040dfa:	4680      	mov	r8, r0
10040dfc:	0d5b      	lsrs	r3, r3, #21
10040dfe:	9202      	str	r2, [sp, #8]
10040e00:	d100      	bne.n	10040e04 <__aeabi_ddiv+0x28>
10040e02:	e16a      	b.n	100410da <__aeabi_ddiv+0x2fe>
10040e04:	4ad4      	ldr	r2, [pc, #848]	@ (10041158 <__aeabi_ddiv+0x37c>)
10040e06:	4293      	cmp	r3, r2
10040e08:	d100      	bne.n	10040e0c <__aeabi_ddiv+0x30>
10040e0a:	e18c      	b.n	10041126 <__aeabi_ddiv+0x34a>
10040e0c:	4659      	mov	r1, fp
10040e0e:	0f42      	lsrs	r2, r0, #29
10040e10:	00c9      	lsls	r1, r1, #3
10040e12:	430a      	orrs	r2, r1
10040e14:	2180      	movs	r1, #128	@ 0x80
10040e16:	0409      	lsls	r1, r1, #16
10040e18:	4311      	orrs	r1, r2
10040e1a:	00c2      	lsls	r2, r0, #3
10040e1c:	4690      	mov	r8, r2
10040e1e:	4acf      	ldr	r2, [pc, #828]	@ (1004115c <__aeabi_ddiv+0x380>)
10040e20:	4689      	mov	r9, r1
10040e22:	4692      	mov	sl, r2
10040e24:	449a      	add	sl, r3
10040e26:	2300      	movs	r3, #0
10040e28:	2400      	movs	r4, #0
10040e2a:	9303      	str	r3, [sp, #12]
10040e2c:	9e00      	ldr	r6, [sp, #0]
10040e2e:	9f01      	ldr	r7, [sp, #4]
10040e30:	033b      	lsls	r3, r7, #12
10040e32:	0b1b      	lsrs	r3, r3, #12
10040e34:	469b      	mov	fp, r3
10040e36:	007b      	lsls	r3, r7, #1
10040e38:	0030      	movs	r0, r6
10040e3a:	0d5b      	lsrs	r3, r3, #21
10040e3c:	0ffd      	lsrs	r5, r7, #31
10040e3e:	2b00      	cmp	r3, #0
10040e40:	d100      	bne.n	10040e44 <__aeabi_ddiv+0x68>
10040e42:	e128      	b.n	10041096 <__aeabi_ddiv+0x2ba>
10040e44:	4ac4      	ldr	r2, [pc, #784]	@ (10041158 <__aeabi_ddiv+0x37c>)
10040e46:	4293      	cmp	r3, r2
10040e48:	d100      	bne.n	10040e4c <__aeabi_ddiv+0x70>
10040e4a:	e177      	b.n	1004113c <__aeabi_ddiv+0x360>
10040e4c:	4659      	mov	r1, fp
10040e4e:	0f72      	lsrs	r2, r6, #29
10040e50:	00c9      	lsls	r1, r1, #3
10040e52:	430a      	orrs	r2, r1
10040e54:	2180      	movs	r1, #128	@ 0x80
10040e56:	0409      	lsls	r1, r1, #16
10040e58:	4311      	orrs	r1, r2
10040e5a:	468b      	mov	fp, r1
10040e5c:	49bf      	ldr	r1, [pc, #764]	@ (1004115c <__aeabi_ddiv+0x380>)
10040e5e:	00f2      	lsls	r2, r6, #3
10040e60:	468c      	mov	ip, r1
10040e62:	4651      	mov	r1, sl
10040e64:	4463      	add	r3, ip
10040e66:	1acb      	subs	r3, r1, r3
10040e68:	469a      	mov	sl, r3
10040e6a:	2300      	movs	r3, #0
10040e6c:	9e02      	ldr	r6, [sp, #8]
10040e6e:	406e      	eors	r6, r5
10040e70:	2c0f      	cmp	r4, #15
10040e72:	d827      	bhi.n	10040ec4 <__aeabi_ddiv+0xe8>
10040e74:	49ba      	ldr	r1, [pc, #744]	@ (10041160 <__aeabi_ddiv+0x384>)
10040e76:	00a4      	lsls	r4, r4, #2
10040e78:	5909      	ldr	r1, [r1, r4]
10040e7a:	468f      	mov	pc, r1
10040e7c:	46cb      	mov	fp, r9
10040e7e:	4642      	mov	r2, r8
10040e80:	9e02      	ldr	r6, [sp, #8]
10040e82:	9b03      	ldr	r3, [sp, #12]
10040e84:	2b02      	cmp	r3, #2
10040e86:	d016      	beq.n	10040eb6 <__aeabi_ddiv+0xda>
10040e88:	2b03      	cmp	r3, #3
10040e8a:	d100      	bne.n	10040e8e <__aeabi_ddiv+0xb2>
10040e8c:	e2a6      	b.n	100413dc <__aeabi_ddiv+0x600>
10040e8e:	2b01      	cmp	r3, #1
10040e90:	d000      	beq.n	10040e94 <__aeabi_ddiv+0xb8>
10040e92:	e0df      	b.n	10041054 <__aeabi_ddiv+0x278>
10040e94:	2200      	movs	r2, #0
10040e96:	2300      	movs	r3, #0
10040e98:	2400      	movs	r4, #0
10040e9a:	4690      	mov	r8, r2
10040e9c:	051b      	lsls	r3, r3, #20
10040e9e:	4323      	orrs	r3, r4
10040ea0:	07f6      	lsls	r6, r6, #31
10040ea2:	4333      	orrs	r3, r6
10040ea4:	4640      	mov	r0, r8
10040ea6:	0019      	movs	r1, r3
10040ea8:	b007      	add	sp, #28
10040eaa:	bcf0      	pop	{r4, r5, r6, r7}
10040eac:	46bb      	mov	fp, r7
10040eae:	46b2      	mov	sl, r6
10040eb0:	46a9      	mov	r9, r5
10040eb2:	46a0      	mov	r8, r4
10040eb4:	bdf0      	pop	{r4, r5, r6, r7, pc}
10040eb6:	2200      	movs	r2, #0
10040eb8:	2400      	movs	r4, #0
10040eba:	4690      	mov	r8, r2
10040ebc:	4ba6      	ldr	r3, [pc, #664]	@ (10041158 <__aeabi_ddiv+0x37c>)
10040ebe:	e7ed      	b.n	10040e9c <__aeabi_ddiv+0xc0>
10040ec0:	002e      	movs	r6, r5
10040ec2:	e7df      	b.n	10040e84 <__aeabi_ddiv+0xa8>
10040ec4:	45cb      	cmp	fp, r9
10040ec6:	d200      	bcs.n	10040eca <__aeabi_ddiv+0xee>
10040ec8:	e1d4      	b.n	10041274 <__aeabi_ddiv+0x498>
10040eca:	d100      	bne.n	10040ece <__aeabi_ddiv+0xf2>
10040ecc:	e1cf      	b.n	1004126e <__aeabi_ddiv+0x492>
10040ece:	2301      	movs	r3, #1
10040ed0:	425b      	negs	r3, r3
10040ed2:	469c      	mov	ip, r3
10040ed4:	4644      	mov	r4, r8
10040ed6:	4648      	mov	r0, r9
10040ed8:	2700      	movs	r7, #0
10040eda:	44e2      	add	sl, ip
10040edc:	465b      	mov	r3, fp
10040ede:	0e15      	lsrs	r5, r2, #24
10040ee0:	021b      	lsls	r3, r3, #8
10040ee2:	431d      	orrs	r5, r3
10040ee4:	0c19      	lsrs	r1, r3, #16
10040ee6:	042b      	lsls	r3, r5, #16
10040ee8:	0212      	lsls	r2, r2, #8
10040eea:	9500      	str	r5, [sp, #0]
10040eec:	0c1d      	lsrs	r5, r3, #16
10040eee:	4691      	mov	r9, r2
10040ef0:	9102      	str	r1, [sp, #8]
10040ef2:	9503      	str	r5, [sp, #12]
10040ef4:	f7ff f9a8 	bl	10040248 <__aeabi_uidivmod>
10040ef8:	0002      	movs	r2, r0
10040efa:	436a      	muls	r2, r5
10040efc:	040b      	lsls	r3, r1, #16
10040efe:	0c21      	lsrs	r1, r4, #16
10040f00:	4680      	mov	r8, r0
10040f02:	4319      	orrs	r1, r3
10040f04:	428a      	cmp	r2, r1
10040f06:	d909      	bls.n	10040f1c <__aeabi_ddiv+0x140>
10040f08:	9d00      	ldr	r5, [sp, #0]
10040f0a:	2301      	movs	r3, #1
10040f0c:	46ac      	mov	ip, r5
10040f0e:	425b      	negs	r3, r3
10040f10:	4461      	add	r1, ip
10040f12:	469c      	mov	ip, r3
10040f14:	44e0      	add	r8, ip
10040f16:	428d      	cmp	r5, r1
10040f18:	d800      	bhi.n	10040f1c <__aeabi_ddiv+0x140>
10040f1a:	e1fb      	b.n	10041314 <__aeabi_ddiv+0x538>
10040f1c:	1a88      	subs	r0, r1, r2
10040f1e:	9902      	ldr	r1, [sp, #8]
10040f20:	f7ff f992 	bl	10040248 <__aeabi_uidivmod>
10040f24:	9a03      	ldr	r2, [sp, #12]
10040f26:	0424      	lsls	r4, r4, #16
10040f28:	4342      	muls	r2, r0
10040f2a:	0409      	lsls	r1, r1, #16
10040f2c:	0c24      	lsrs	r4, r4, #16
10040f2e:	0003      	movs	r3, r0
10040f30:	430c      	orrs	r4, r1
10040f32:	42a2      	cmp	r2, r4
10040f34:	d906      	bls.n	10040f44 <__aeabi_ddiv+0x168>
10040f36:	9900      	ldr	r1, [sp, #0]
10040f38:	3b01      	subs	r3, #1
10040f3a:	468c      	mov	ip, r1
10040f3c:	4464      	add	r4, ip
10040f3e:	42a1      	cmp	r1, r4
10040f40:	d800      	bhi.n	10040f44 <__aeabi_ddiv+0x168>
10040f42:	e1e1      	b.n	10041308 <__aeabi_ddiv+0x52c>
10040f44:	1aa0      	subs	r0, r4, r2
10040f46:	4642      	mov	r2, r8
10040f48:	0412      	lsls	r2, r2, #16
10040f4a:	431a      	orrs	r2, r3
10040f4c:	4693      	mov	fp, r2
10040f4e:	464b      	mov	r3, r9
10040f50:	4659      	mov	r1, fp
10040f52:	0c1b      	lsrs	r3, r3, #16
10040f54:	001d      	movs	r5, r3
10040f56:	9304      	str	r3, [sp, #16]
10040f58:	040b      	lsls	r3, r1, #16
10040f5a:	4649      	mov	r1, r9
10040f5c:	0409      	lsls	r1, r1, #16
10040f5e:	0c09      	lsrs	r1, r1, #16
10040f60:	000c      	movs	r4, r1
10040f62:	0c1b      	lsrs	r3, r3, #16
10040f64:	435c      	muls	r4, r3
10040f66:	0c12      	lsrs	r2, r2, #16
10040f68:	436b      	muls	r3, r5
10040f6a:	4688      	mov	r8, r1
10040f6c:	4351      	muls	r1, r2
10040f6e:	436a      	muls	r2, r5
10040f70:	0c25      	lsrs	r5, r4, #16
10040f72:	46ac      	mov	ip, r5
10040f74:	185b      	adds	r3, r3, r1
10040f76:	4463      	add	r3, ip
10040f78:	4299      	cmp	r1, r3
10040f7a:	d903      	bls.n	10040f84 <__aeabi_ddiv+0x1a8>
10040f7c:	2180      	movs	r1, #128	@ 0x80
10040f7e:	0249      	lsls	r1, r1, #9
10040f80:	468c      	mov	ip, r1
10040f82:	4462      	add	r2, ip
10040f84:	0c19      	lsrs	r1, r3, #16
10040f86:	0424      	lsls	r4, r4, #16
10040f88:	041b      	lsls	r3, r3, #16
10040f8a:	0c24      	lsrs	r4, r4, #16
10040f8c:	188a      	adds	r2, r1, r2
10040f8e:	191c      	adds	r4, r3, r4
10040f90:	4290      	cmp	r0, r2
10040f92:	d302      	bcc.n	10040f9a <__aeabi_ddiv+0x1be>
10040f94:	d116      	bne.n	10040fc4 <__aeabi_ddiv+0x1e8>
10040f96:	42a7      	cmp	r7, r4
10040f98:	d214      	bcs.n	10040fc4 <__aeabi_ddiv+0x1e8>
10040f9a:	465b      	mov	r3, fp
10040f9c:	9d00      	ldr	r5, [sp, #0]
10040f9e:	3b01      	subs	r3, #1
10040fa0:	444f      	add	r7, r9
10040fa2:	9305      	str	r3, [sp, #20]
10040fa4:	454f      	cmp	r7, r9
10040fa6:	419b      	sbcs	r3, r3
10040fa8:	46ac      	mov	ip, r5
10040faa:	425b      	negs	r3, r3
10040fac:	4463      	add	r3, ip
10040fae:	18c0      	adds	r0, r0, r3
10040fb0:	4285      	cmp	r5, r0
10040fb2:	d300      	bcc.n	10040fb6 <__aeabi_ddiv+0x1da>
10040fb4:	e1a1      	b.n	100412fa <__aeabi_ddiv+0x51e>
10040fb6:	4282      	cmp	r2, r0
10040fb8:	d900      	bls.n	10040fbc <__aeabi_ddiv+0x1e0>
10040fba:	e1f6      	b.n	100413aa <__aeabi_ddiv+0x5ce>
10040fbc:	d100      	bne.n	10040fc0 <__aeabi_ddiv+0x1e4>
10040fbe:	e1f1      	b.n	100413a4 <__aeabi_ddiv+0x5c8>
10040fc0:	9b05      	ldr	r3, [sp, #20]
10040fc2:	469b      	mov	fp, r3
10040fc4:	1b3c      	subs	r4, r7, r4
10040fc6:	42a7      	cmp	r7, r4
10040fc8:	41bf      	sbcs	r7, r7
10040fca:	9d00      	ldr	r5, [sp, #0]
10040fcc:	1a80      	subs	r0, r0, r2
10040fce:	427f      	negs	r7, r7
10040fd0:	1bc0      	subs	r0, r0, r7
10040fd2:	4285      	cmp	r5, r0
10040fd4:	d100      	bne.n	10040fd8 <__aeabi_ddiv+0x1fc>
10040fd6:	e1d0      	b.n	1004137a <__aeabi_ddiv+0x59e>
10040fd8:	9902      	ldr	r1, [sp, #8]
10040fda:	f7ff f935 	bl	10040248 <__aeabi_uidivmod>
10040fde:	9a03      	ldr	r2, [sp, #12]
10040fe0:	040b      	lsls	r3, r1, #16
10040fe2:	4342      	muls	r2, r0
10040fe4:	0c21      	lsrs	r1, r4, #16
10040fe6:	0007      	movs	r7, r0
10040fe8:	4319      	orrs	r1, r3
10040fea:	428a      	cmp	r2, r1
10040fec:	d900      	bls.n	10040ff0 <__aeabi_ddiv+0x214>
10040fee:	e178      	b.n	100412e2 <__aeabi_ddiv+0x506>
10040ff0:	1a88      	subs	r0, r1, r2
10040ff2:	9902      	ldr	r1, [sp, #8]
10040ff4:	f7ff f928 	bl	10040248 <__aeabi_uidivmod>
10040ff8:	9a03      	ldr	r2, [sp, #12]
10040ffa:	0424      	lsls	r4, r4, #16
10040ffc:	4342      	muls	r2, r0
10040ffe:	0409      	lsls	r1, r1, #16
10041000:	0c24      	lsrs	r4, r4, #16
10041002:	0003      	movs	r3, r0
10041004:	430c      	orrs	r4, r1
10041006:	42a2      	cmp	r2, r4
10041008:	d900      	bls.n	1004100c <__aeabi_ddiv+0x230>
1004100a:	e15d      	b.n	100412c8 <__aeabi_ddiv+0x4ec>
1004100c:	4641      	mov	r1, r8
1004100e:	1aa4      	subs	r4, r4, r2
10041010:	043a      	lsls	r2, r7, #16
10041012:	431a      	orrs	r2, r3
10041014:	9d04      	ldr	r5, [sp, #16]
10041016:	0413      	lsls	r3, r2, #16
10041018:	0c1b      	lsrs	r3, r3, #16
1004101a:	4359      	muls	r1, r3
1004101c:	4647      	mov	r7, r8
1004101e:	436b      	muls	r3, r5
10041020:	469c      	mov	ip, r3
10041022:	0c10      	lsrs	r0, r2, #16
10041024:	4347      	muls	r7, r0
10041026:	0c0b      	lsrs	r3, r1, #16
10041028:	44bc      	add	ip, r7
1004102a:	4463      	add	r3, ip
1004102c:	4368      	muls	r0, r5
1004102e:	429f      	cmp	r7, r3
10041030:	d903      	bls.n	1004103a <__aeabi_ddiv+0x25e>
10041032:	2580      	movs	r5, #128	@ 0x80
10041034:	026d      	lsls	r5, r5, #9
10041036:	46ac      	mov	ip, r5
10041038:	4460      	add	r0, ip
1004103a:	0c1f      	lsrs	r7, r3, #16
1004103c:	0409      	lsls	r1, r1, #16
1004103e:	041b      	lsls	r3, r3, #16
10041040:	0c09      	lsrs	r1, r1, #16
10041042:	183f      	adds	r7, r7, r0
10041044:	185b      	adds	r3, r3, r1
10041046:	42bc      	cmp	r4, r7
10041048:	d200      	bcs.n	1004104c <__aeabi_ddiv+0x270>
1004104a:	e102      	b.n	10041252 <__aeabi_ddiv+0x476>
1004104c:	d100      	bne.n	10041050 <__aeabi_ddiv+0x274>
1004104e:	e0fd      	b.n	1004124c <__aeabi_ddiv+0x470>
10041050:	2301      	movs	r3, #1
10041052:	431a      	orrs	r2, r3
10041054:	4b43      	ldr	r3, [pc, #268]	@ (10041164 <__aeabi_ddiv+0x388>)
10041056:	4453      	add	r3, sl
10041058:	2b00      	cmp	r3, #0
1004105a:	dc00      	bgt.n	1004105e <__aeabi_ddiv+0x282>
1004105c:	e0ae      	b.n	100411bc <__aeabi_ddiv+0x3e0>
1004105e:	0751      	lsls	r1, r2, #29
10041060:	d000      	beq.n	10041064 <__aeabi_ddiv+0x288>
10041062:	e198      	b.n	10041396 <__aeabi_ddiv+0x5ba>
10041064:	4659      	mov	r1, fp
10041066:	01c9      	lsls	r1, r1, #7
10041068:	d506      	bpl.n	10041078 <__aeabi_ddiv+0x29c>
1004106a:	4659      	mov	r1, fp
1004106c:	4b3e      	ldr	r3, [pc, #248]	@ (10041168 <__aeabi_ddiv+0x38c>)
1004106e:	4019      	ands	r1, r3
10041070:	2380      	movs	r3, #128	@ 0x80
10041072:	468b      	mov	fp, r1
10041074:	00db      	lsls	r3, r3, #3
10041076:	4453      	add	r3, sl
10041078:	493c      	ldr	r1, [pc, #240]	@ (1004116c <__aeabi_ddiv+0x390>)
1004107a:	428b      	cmp	r3, r1
1004107c:	dd00      	ble.n	10041080 <__aeabi_ddiv+0x2a4>
1004107e:	e71a      	b.n	10040eb6 <__aeabi_ddiv+0xda>
10041080:	4659      	mov	r1, fp
10041082:	08d2      	lsrs	r2, r2, #3
10041084:	0749      	lsls	r1, r1, #29
10041086:	4311      	orrs	r1, r2
10041088:	465a      	mov	r2, fp
1004108a:	055b      	lsls	r3, r3, #21
1004108c:	0254      	lsls	r4, r2, #9
1004108e:	4688      	mov	r8, r1
10041090:	0b24      	lsrs	r4, r4, #12
10041092:	0d5b      	lsrs	r3, r3, #21
10041094:	e702      	b.n	10040e9c <__aeabi_ddiv+0xc0>
10041096:	465a      	mov	r2, fp
10041098:	9b00      	ldr	r3, [sp, #0]
1004109a:	431a      	orrs	r2, r3
1004109c:	d100      	bne.n	100410a0 <__aeabi_ddiv+0x2c4>
1004109e:	e07e      	b.n	1004119e <__aeabi_ddiv+0x3c2>
100410a0:	465b      	mov	r3, fp
100410a2:	2b00      	cmp	r3, #0
100410a4:	d100      	bne.n	100410a8 <__aeabi_ddiv+0x2cc>
100410a6:	e100      	b.n	100412aa <__aeabi_ddiv+0x4ce>
100410a8:	4658      	mov	r0, fp
100410aa:	f001 f9ef 	bl	1004248c <__clzsi2>
100410ae:	0002      	movs	r2, r0
100410b0:	0003      	movs	r3, r0
100410b2:	3a0b      	subs	r2, #11
100410b4:	271d      	movs	r7, #29
100410b6:	9e00      	ldr	r6, [sp, #0]
100410b8:	1aba      	subs	r2, r7, r2
100410ba:	0019      	movs	r1, r3
100410bc:	4658      	mov	r0, fp
100410be:	40d6      	lsrs	r6, r2
100410c0:	3908      	subs	r1, #8
100410c2:	4088      	lsls	r0, r1
100410c4:	0032      	movs	r2, r6
100410c6:	4302      	orrs	r2, r0
100410c8:	4693      	mov	fp, r2
100410ca:	9a00      	ldr	r2, [sp, #0]
100410cc:	408a      	lsls	r2, r1
100410ce:	4928      	ldr	r1, [pc, #160]	@ (10041170 <__aeabi_ddiv+0x394>)
100410d0:	4453      	add	r3, sl
100410d2:	468a      	mov	sl, r1
100410d4:	449a      	add	sl, r3
100410d6:	2300      	movs	r3, #0
100410d8:	e6c8      	b.n	10040e6c <__aeabi_ddiv+0x90>
100410da:	465b      	mov	r3, fp
100410dc:	4303      	orrs	r3, r0
100410de:	4699      	mov	r9, r3
100410e0:	d056      	beq.n	10041190 <__aeabi_ddiv+0x3b4>
100410e2:	465b      	mov	r3, fp
100410e4:	2b00      	cmp	r3, #0
100410e6:	d100      	bne.n	100410ea <__aeabi_ddiv+0x30e>
100410e8:	e0cd      	b.n	10041286 <__aeabi_ddiv+0x4aa>
100410ea:	4658      	mov	r0, fp
100410ec:	f001 f9ce 	bl	1004248c <__clzsi2>
100410f0:	230b      	movs	r3, #11
100410f2:	425b      	negs	r3, r3
100410f4:	469c      	mov	ip, r3
100410f6:	0002      	movs	r2, r0
100410f8:	4484      	add	ip, r0
100410fa:	4666      	mov	r6, ip
100410fc:	231d      	movs	r3, #29
100410fe:	1b9b      	subs	r3, r3, r6
10041100:	0026      	movs	r6, r4
10041102:	0011      	movs	r1, r2
10041104:	4658      	mov	r0, fp
10041106:	40de      	lsrs	r6, r3
10041108:	3908      	subs	r1, #8
1004110a:	4088      	lsls	r0, r1
1004110c:	0033      	movs	r3, r6
1004110e:	4303      	orrs	r3, r0
10041110:	4699      	mov	r9, r3
10041112:	0023      	movs	r3, r4
10041114:	408b      	lsls	r3, r1
10041116:	4698      	mov	r8, r3
10041118:	4b16      	ldr	r3, [pc, #88]	@ (10041174 <__aeabi_ddiv+0x398>)
1004111a:	2400      	movs	r4, #0
1004111c:	1a9b      	subs	r3, r3, r2
1004111e:	469a      	mov	sl, r3
10041120:	2300      	movs	r3, #0
10041122:	9303      	str	r3, [sp, #12]
10041124:	e682      	b.n	10040e2c <__aeabi_ddiv+0x50>
10041126:	465a      	mov	r2, fp
10041128:	4302      	orrs	r2, r0
1004112a:	4691      	mov	r9, r2
1004112c:	d12a      	bne.n	10041184 <__aeabi_ddiv+0x3a8>
1004112e:	2200      	movs	r2, #0
10041130:	469a      	mov	sl, r3
10041132:	2302      	movs	r3, #2
10041134:	4690      	mov	r8, r2
10041136:	2408      	movs	r4, #8
10041138:	9303      	str	r3, [sp, #12]
1004113a:	e677      	b.n	10040e2c <__aeabi_ddiv+0x50>
1004113c:	465a      	mov	r2, fp
1004113e:	9b00      	ldr	r3, [sp, #0]
10041140:	431a      	orrs	r2, r3
10041142:	4b0d      	ldr	r3, [pc, #52]	@ (10041178 <__aeabi_ddiv+0x39c>)
10041144:	469c      	mov	ip, r3
10041146:	44e2      	add	sl, ip
10041148:	2a00      	cmp	r2, #0
1004114a:	d117      	bne.n	1004117c <__aeabi_ddiv+0x3a0>
1004114c:	2302      	movs	r3, #2
1004114e:	431c      	orrs	r4, r3
10041150:	2300      	movs	r3, #0
10041152:	469b      	mov	fp, r3
10041154:	3302      	adds	r3, #2
10041156:	e689      	b.n	10040e6c <__aeabi_ddiv+0x90>
10041158:	000007ff 	.word	0x000007ff
1004115c:	fffffc01 	.word	0xfffffc01
10041160:	1004bf70 	.word	0x1004bf70
10041164:	000003ff 	.word	0x000003ff
10041168:	feffffff 	.word	0xfeffffff
1004116c:	000007fe 	.word	0x000007fe
10041170:	000003f3 	.word	0x000003f3
10041174:	fffffc0d 	.word	0xfffffc0d
10041178:	fffff801 	.word	0xfffff801
1004117c:	2303      	movs	r3, #3
1004117e:	0032      	movs	r2, r6
10041180:	431c      	orrs	r4, r3
10041182:	e673      	b.n	10040e6c <__aeabi_ddiv+0x90>
10041184:	469a      	mov	sl, r3
10041186:	2303      	movs	r3, #3
10041188:	46d9      	mov	r9, fp
1004118a:	240c      	movs	r4, #12
1004118c:	9303      	str	r3, [sp, #12]
1004118e:	e64d      	b.n	10040e2c <__aeabi_ddiv+0x50>
10041190:	2300      	movs	r3, #0
10041192:	4698      	mov	r8, r3
10041194:	469a      	mov	sl, r3
10041196:	3301      	adds	r3, #1
10041198:	2404      	movs	r4, #4
1004119a:	9303      	str	r3, [sp, #12]
1004119c:	e646      	b.n	10040e2c <__aeabi_ddiv+0x50>
1004119e:	2301      	movs	r3, #1
100411a0:	431c      	orrs	r4, r3
100411a2:	2300      	movs	r3, #0
100411a4:	469b      	mov	fp, r3
100411a6:	3301      	adds	r3, #1
100411a8:	e660      	b.n	10040e6c <__aeabi_ddiv+0x90>
100411aa:	2300      	movs	r3, #0
100411ac:	2480      	movs	r4, #128	@ 0x80
100411ae:	4698      	mov	r8, r3
100411b0:	2600      	movs	r6, #0
100411b2:	4b92      	ldr	r3, [pc, #584]	@ (100413fc <__aeabi_ddiv+0x620>)
100411b4:	0324      	lsls	r4, r4, #12
100411b6:	e671      	b.n	10040e9c <__aeabi_ddiv+0xc0>
100411b8:	2201      	movs	r2, #1
100411ba:	4252      	negs	r2, r2
100411bc:	2101      	movs	r1, #1
100411be:	1ac9      	subs	r1, r1, r3
100411c0:	2938      	cmp	r1, #56	@ 0x38
100411c2:	dd00      	ble.n	100411c6 <__aeabi_ddiv+0x3ea>
100411c4:	e666      	b.n	10040e94 <__aeabi_ddiv+0xb8>
100411c6:	291f      	cmp	r1, #31
100411c8:	dc00      	bgt.n	100411cc <__aeabi_ddiv+0x3f0>
100411ca:	e0ab      	b.n	10041324 <__aeabi_ddiv+0x548>
100411cc:	201f      	movs	r0, #31
100411ce:	4240      	negs	r0, r0
100411d0:	1ac3      	subs	r3, r0, r3
100411d2:	4658      	mov	r0, fp
100411d4:	40d8      	lsrs	r0, r3
100411d6:	0003      	movs	r3, r0
100411d8:	2920      	cmp	r1, #32
100411da:	d004      	beq.n	100411e6 <__aeabi_ddiv+0x40a>
100411dc:	4658      	mov	r0, fp
100411de:	4988      	ldr	r1, [pc, #544]	@ (10041400 <__aeabi_ddiv+0x624>)
100411e0:	4451      	add	r1, sl
100411e2:	4088      	lsls	r0, r1
100411e4:	4302      	orrs	r2, r0
100411e6:	1e51      	subs	r1, r2, #1
100411e8:	418a      	sbcs	r2, r1
100411ea:	431a      	orrs	r2, r3
100411ec:	2307      	movs	r3, #7
100411ee:	0019      	movs	r1, r3
100411f0:	2400      	movs	r4, #0
100411f2:	4011      	ands	r1, r2
100411f4:	4213      	tst	r3, r2
100411f6:	d00c      	beq.n	10041212 <__aeabi_ddiv+0x436>
100411f8:	230f      	movs	r3, #15
100411fa:	4013      	ands	r3, r2
100411fc:	2b04      	cmp	r3, #4
100411fe:	d100      	bne.n	10041202 <__aeabi_ddiv+0x426>
10041200:	e0f9      	b.n	100413f6 <__aeabi_ddiv+0x61a>
10041202:	1d11      	adds	r1, r2, #4
10041204:	4291      	cmp	r1, r2
10041206:	419b      	sbcs	r3, r3
10041208:	000a      	movs	r2, r1
1004120a:	425b      	negs	r3, r3
1004120c:	0759      	lsls	r1, r3, #29
1004120e:	025b      	lsls	r3, r3, #9
10041210:	0b1c      	lsrs	r4, r3, #12
10041212:	08d2      	lsrs	r2, r2, #3
10041214:	430a      	orrs	r2, r1
10041216:	4690      	mov	r8, r2
10041218:	2300      	movs	r3, #0
1004121a:	e63f      	b.n	10040e9c <__aeabi_ddiv+0xc0>
1004121c:	2480      	movs	r4, #128	@ 0x80
1004121e:	464b      	mov	r3, r9
10041220:	0324      	lsls	r4, r4, #12
10041222:	4223      	tst	r3, r4
10041224:	d009      	beq.n	1004123a <__aeabi_ddiv+0x45e>
10041226:	465b      	mov	r3, fp
10041228:	4223      	tst	r3, r4
1004122a:	d106      	bne.n	1004123a <__aeabi_ddiv+0x45e>
1004122c:	431c      	orrs	r4, r3
1004122e:	0324      	lsls	r4, r4, #12
10041230:	002e      	movs	r6, r5
10041232:	4690      	mov	r8, r2
10041234:	4b71      	ldr	r3, [pc, #452]	@ (100413fc <__aeabi_ddiv+0x620>)
10041236:	0b24      	lsrs	r4, r4, #12
10041238:	e630      	b.n	10040e9c <__aeabi_ddiv+0xc0>
1004123a:	2480      	movs	r4, #128	@ 0x80
1004123c:	464b      	mov	r3, r9
1004123e:	0324      	lsls	r4, r4, #12
10041240:	431c      	orrs	r4, r3
10041242:	0324      	lsls	r4, r4, #12
10041244:	9e02      	ldr	r6, [sp, #8]
10041246:	4b6d      	ldr	r3, [pc, #436]	@ (100413fc <__aeabi_ddiv+0x620>)
10041248:	0b24      	lsrs	r4, r4, #12
1004124a:	e627      	b.n	10040e9c <__aeabi_ddiv+0xc0>
1004124c:	2b00      	cmp	r3, #0
1004124e:	d100      	bne.n	10041252 <__aeabi_ddiv+0x476>
10041250:	e700      	b.n	10041054 <__aeabi_ddiv+0x278>
10041252:	9800      	ldr	r0, [sp, #0]
10041254:	1e51      	subs	r1, r2, #1
10041256:	4684      	mov	ip, r0
10041258:	4464      	add	r4, ip
1004125a:	4284      	cmp	r4, r0
1004125c:	d200      	bcs.n	10041260 <__aeabi_ddiv+0x484>
1004125e:	e084      	b.n	1004136a <__aeabi_ddiv+0x58e>
10041260:	42bc      	cmp	r4, r7
10041262:	d200      	bcs.n	10041266 <__aeabi_ddiv+0x48a>
10041264:	e0ae      	b.n	100413c4 <__aeabi_ddiv+0x5e8>
10041266:	d100      	bne.n	1004126a <__aeabi_ddiv+0x48e>
10041268:	e0c1      	b.n	100413ee <__aeabi_ddiv+0x612>
1004126a:	000a      	movs	r2, r1
1004126c:	e6f0      	b.n	10041050 <__aeabi_ddiv+0x274>
1004126e:	4542      	cmp	r2, r8
10041270:	d900      	bls.n	10041274 <__aeabi_ddiv+0x498>
10041272:	e62c      	b.n	10040ece <__aeabi_ddiv+0xf2>
10041274:	464b      	mov	r3, r9
10041276:	07dc      	lsls	r4, r3, #31
10041278:	0858      	lsrs	r0, r3, #1
1004127a:	4643      	mov	r3, r8
1004127c:	085b      	lsrs	r3, r3, #1
1004127e:	431c      	orrs	r4, r3
10041280:	4643      	mov	r3, r8
10041282:	07df      	lsls	r7, r3, #31
10041284:	e62a      	b.n	10040edc <__aeabi_ddiv+0x100>
10041286:	f001 f901 	bl	1004248c <__clzsi2>
1004128a:	2315      	movs	r3, #21
1004128c:	469c      	mov	ip, r3
1004128e:	4484      	add	ip, r0
10041290:	0002      	movs	r2, r0
10041292:	4663      	mov	r3, ip
10041294:	3220      	adds	r2, #32
10041296:	2b1c      	cmp	r3, #28
10041298:	dc00      	bgt.n	1004129c <__aeabi_ddiv+0x4c0>
1004129a:	e72e      	b.n	100410fa <__aeabi_ddiv+0x31e>
1004129c:	0023      	movs	r3, r4
1004129e:	3808      	subs	r0, #8
100412a0:	4083      	lsls	r3, r0
100412a2:	4699      	mov	r9, r3
100412a4:	2300      	movs	r3, #0
100412a6:	4698      	mov	r8, r3
100412a8:	e736      	b.n	10041118 <__aeabi_ddiv+0x33c>
100412aa:	f001 f8ef 	bl	1004248c <__clzsi2>
100412ae:	0002      	movs	r2, r0
100412b0:	0003      	movs	r3, r0
100412b2:	3215      	adds	r2, #21
100412b4:	3320      	adds	r3, #32
100412b6:	2a1c      	cmp	r2, #28
100412b8:	dc00      	bgt.n	100412bc <__aeabi_ddiv+0x4e0>
100412ba:	e6fb      	b.n	100410b4 <__aeabi_ddiv+0x2d8>
100412bc:	9900      	ldr	r1, [sp, #0]
100412be:	3808      	subs	r0, #8
100412c0:	4081      	lsls	r1, r0
100412c2:	2200      	movs	r2, #0
100412c4:	468b      	mov	fp, r1
100412c6:	e702      	b.n	100410ce <__aeabi_ddiv+0x2f2>
100412c8:	9900      	ldr	r1, [sp, #0]
100412ca:	3b01      	subs	r3, #1
100412cc:	468c      	mov	ip, r1
100412ce:	4464      	add	r4, ip
100412d0:	42a1      	cmp	r1, r4
100412d2:	d900      	bls.n	100412d6 <__aeabi_ddiv+0x4fa>
100412d4:	e69a      	b.n	1004100c <__aeabi_ddiv+0x230>
100412d6:	42a2      	cmp	r2, r4
100412d8:	d800      	bhi.n	100412dc <__aeabi_ddiv+0x500>
100412da:	e697      	b.n	1004100c <__aeabi_ddiv+0x230>
100412dc:	1e83      	subs	r3, r0, #2
100412de:	4464      	add	r4, ip
100412e0:	e694      	b.n	1004100c <__aeabi_ddiv+0x230>
100412e2:	46ac      	mov	ip, r5
100412e4:	4461      	add	r1, ip
100412e6:	3f01      	subs	r7, #1
100412e8:	428d      	cmp	r5, r1
100412ea:	d900      	bls.n	100412ee <__aeabi_ddiv+0x512>
100412ec:	e680      	b.n	10040ff0 <__aeabi_ddiv+0x214>
100412ee:	428a      	cmp	r2, r1
100412f0:	d800      	bhi.n	100412f4 <__aeabi_ddiv+0x518>
100412f2:	e67d      	b.n	10040ff0 <__aeabi_ddiv+0x214>
100412f4:	1e87      	subs	r7, r0, #2
100412f6:	4461      	add	r1, ip
100412f8:	e67a      	b.n	10040ff0 <__aeabi_ddiv+0x214>
100412fa:	4285      	cmp	r5, r0
100412fc:	d000      	beq.n	10041300 <__aeabi_ddiv+0x524>
100412fe:	e65f      	b.n	10040fc0 <__aeabi_ddiv+0x1e4>
10041300:	45b9      	cmp	r9, r7
10041302:	d900      	bls.n	10041306 <__aeabi_ddiv+0x52a>
10041304:	e65c      	b.n	10040fc0 <__aeabi_ddiv+0x1e4>
10041306:	e656      	b.n	10040fb6 <__aeabi_ddiv+0x1da>
10041308:	42a2      	cmp	r2, r4
1004130a:	d800      	bhi.n	1004130e <__aeabi_ddiv+0x532>
1004130c:	e61a      	b.n	10040f44 <__aeabi_ddiv+0x168>
1004130e:	1e83      	subs	r3, r0, #2
10041310:	4464      	add	r4, ip
10041312:	e617      	b.n	10040f44 <__aeabi_ddiv+0x168>
10041314:	428a      	cmp	r2, r1
10041316:	d800      	bhi.n	1004131a <__aeabi_ddiv+0x53e>
10041318:	e600      	b.n	10040f1c <__aeabi_ddiv+0x140>
1004131a:	46ac      	mov	ip, r5
1004131c:	1e83      	subs	r3, r0, #2
1004131e:	4698      	mov	r8, r3
10041320:	4461      	add	r1, ip
10041322:	e5fb      	b.n	10040f1c <__aeabi_ddiv+0x140>
10041324:	4837      	ldr	r0, [pc, #220]	@ (10041404 <__aeabi_ddiv+0x628>)
10041326:	0014      	movs	r4, r2
10041328:	4450      	add	r0, sl
1004132a:	4082      	lsls	r2, r0
1004132c:	465b      	mov	r3, fp
1004132e:	0017      	movs	r7, r2
10041330:	4083      	lsls	r3, r0
10041332:	40cc      	lsrs	r4, r1
10041334:	1e7a      	subs	r2, r7, #1
10041336:	4197      	sbcs	r7, r2
10041338:	4323      	orrs	r3, r4
1004133a:	433b      	orrs	r3, r7
1004133c:	001a      	movs	r2, r3
1004133e:	465b      	mov	r3, fp
10041340:	40cb      	lsrs	r3, r1
10041342:	0751      	lsls	r1, r2, #29
10041344:	d009      	beq.n	1004135a <__aeabi_ddiv+0x57e>
10041346:	210f      	movs	r1, #15
10041348:	4011      	ands	r1, r2
1004134a:	2904      	cmp	r1, #4
1004134c:	d005      	beq.n	1004135a <__aeabi_ddiv+0x57e>
1004134e:	1d11      	adds	r1, r2, #4
10041350:	4291      	cmp	r1, r2
10041352:	4192      	sbcs	r2, r2
10041354:	4252      	negs	r2, r2
10041356:	189b      	adds	r3, r3, r2
10041358:	000a      	movs	r2, r1
1004135a:	0219      	lsls	r1, r3, #8
1004135c:	d400      	bmi.n	10041360 <__aeabi_ddiv+0x584>
1004135e:	e755      	b.n	1004120c <__aeabi_ddiv+0x430>
10041360:	2200      	movs	r2, #0
10041362:	2301      	movs	r3, #1
10041364:	2400      	movs	r4, #0
10041366:	4690      	mov	r8, r2
10041368:	e598      	b.n	10040e9c <__aeabi_ddiv+0xc0>
1004136a:	000a      	movs	r2, r1
1004136c:	42bc      	cmp	r4, r7
1004136e:	d000      	beq.n	10041372 <__aeabi_ddiv+0x596>
10041370:	e66e      	b.n	10041050 <__aeabi_ddiv+0x274>
10041372:	454b      	cmp	r3, r9
10041374:	d000      	beq.n	10041378 <__aeabi_ddiv+0x59c>
10041376:	e66b      	b.n	10041050 <__aeabi_ddiv+0x274>
10041378:	e66c      	b.n	10041054 <__aeabi_ddiv+0x278>
1004137a:	4b23      	ldr	r3, [pc, #140]	@ (10041408 <__aeabi_ddiv+0x62c>)
1004137c:	4a23      	ldr	r2, [pc, #140]	@ (1004140c <__aeabi_ddiv+0x630>)
1004137e:	4453      	add	r3, sl
10041380:	4592      	cmp	sl, r2
10041382:	da00      	bge.n	10041386 <__aeabi_ddiv+0x5aa>
10041384:	e718      	b.n	100411b8 <__aeabi_ddiv+0x3dc>
10041386:	2101      	movs	r1, #1
10041388:	4249      	negs	r1, r1
1004138a:	1d0a      	adds	r2, r1, #4
1004138c:	428a      	cmp	r2, r1
1004138e:	4189      	sbcs	r1, r1
10041390:	4249      	negs	r1, r1
10041392:	448b      	add	fp, r1
10041394:	e666      	b.n	10041064 <__aeabi_ddiv+0x288>
10041396:	210f      	movs	r1, #15
10041398:	4011      	ands	r1, r2
1004139a:	2904      	cmp	r1, #4
1004139c:	d100      	bne.n	100413a0 <__aeabi_ddiv+0x5c4>
1004139e:	e661      	b.n	10041064 <__aeabi_ddiv+0x288>
100413a0:	0011      	movs	r1, r2
100413a2:	e7f2      	b.n	1004138a <__aeabi_ddiv+0x5ae>
100413a4:	42bc      	cmp	r4, r7
100413a6:	d800      	bhi.n	100413aa <__aeabi_ddiv+0x5ce>
100413a8:	e60a      	b.n	10040fc0 <__aeabi_ddiv+0x1e4>
100413aa:	2302      	movs	r3, #2
100413ac:	425b      	negs	r3, r3
100413ae:	469c      	mov	ip, r3
100413b0:	9900      	ldr	r1, [sp, #0]
100413b2:	444f      	add	r7, r9
100413b4:	454f      	cmp	r7, r9
100413b6:	419b      	sbcs	r3, r3
100413b8:	44e3      	add	fp, ip
100413ba:	468c      	mov	ip, r1
100413bc:	425b      	negs	r3, r3
100413be:	4463      	add	r3, ip
100413c0:	18c0      	adds	r0, r0, r3
100413c2:	e5ff      	b.n	10040fc4 <__aeabi_ddiv+0x1e8>
100413c4:	4649      	mov	r1, r9
100413c6:	9d00      	ldr	r5, [sp, #0]
100413c8:	0048      	lsls	r0, r1, #1
100413ca:	4548      	cmp	r0, r9
100413cc:	4189      	sbcs	r1, r1
100413ce:	46ac      	mov	ip, r5
100413d0:	4249      	negs	r1, r1
100413d2:	4461      	add	r1, ip
100413d4:	4681      	mov	r9, r0
100413d6:	3a02      	subs	r2, #2
100413d8:	1864      	adds	r4, r4, r1
100413da:	e7c7      	b.n	1004136c <__aeabi_ddiv+0x590>
100413dc:	2480      	movs	r4, #128	@ 0x80
100413de:	465b      	mov	r3, fp
100413e0:	0324      	lsls	r4, r4, #12
100413e2:	431c      	orrs	r4, r3
100413e4:	0324      	lsls	r4, r4, #12
100413e6:	4690      	mov	r8, r2
100413e8:	4b04      	ldr	r3, [pc, #16]	@ (100413fc <__aeabi_ddiv+0x620>)
100413ea:	0b24      	lsrs	r4, r4, #12
100413ec:	e556      	b.n	10040e9c <__aeabi_ddiv+0xc0>
100413ee:	4599      	cmp	r9, r3
100413f0:	d3e8      	bcc.n	100413c4 <__aeabi_ddiv+0x5e8>
100413f2:	000a      	movs	r2, r1
100413f4:	e7bd      	b.n	10041372 <__aeabi_ddiv+0x596>
100413f6:	2300      	movs	r3, #0
100413f8:	e708      	b.n	1004120c <__aeabi_ddiv+0x430>
100413fa:	46c0      	nop			@ (mov r8, r8)
100413fc:	000007ff 	.word	0x000007ff
10041400:	0000043e 	.word	0x0000043e
10041404:	0000041e 	.word	0x0000041e
10041408:	000003ff 	.word	0x000003ff
1004140c:	fffffc02 	.word	0xfffffc02

10041410 <__eqdf2>:
10041410:	b5f0      	push	{r4, r5, r6, r7, lr}
10041412:	4657      	mov	r7, sl
10041414:	46de      	mov	lr, fp
10041416:	464e      	mov	r6, r9
10041418:	4645      	mov	r5, r8
1004141a:	b5e0      	push	{r5, r6, r7, lr}
1004141c:	000d      	movs	r5, r1
1004141e:	0004      	movs	r4, r0
10041420:	0fe8      	lsrs	r0, r5, #31
10041422:	4683      	mov	fp, r0
10041424:	0309      	lsls	r1, r1, #12
10041426:	0fd8      	lsrs	r0, r3, #31
10041428:	0b09      	lsrs	r1, r1, #12
1004142a:	4682      	mov	sl, r0
1004142c:	4819      	ldr	r0, [pc, #100]	@ (10041494 <__eqdf2+0x84>)
1004142e:	468c      	mov	ip, r1
10041430:	031f      	lsls	r7, r3, #12
10041432:	0069      	lsls	r1, r5, #1
10041434:	005e      	lsls	r6, r3, #1
10041436:	0d49      	lsrs	r1, r1, #21
10041438:	0b3f      	lsrs	r7, r7, #12
1004143a:	0d76      	lsrs	r6, r6, #21
1004143c:	4281      	cmp	r1, r0
1004143e:	d018      	beq.n	10041472 <__eqdf2+0x62>
10041440:	4286      	cmp	r6, r0
10041442:	d00f      	beq.n	10041464 <__eqdf2+0x54>
10041444:	2001      	movs	r0, #1
10041446:	42b1      	cmp	r1, r6
10041448:	d10d      	bne.n	10041466 <__eqdf2+0x56>
1004144a:	45bc      	cmp	ip, r7
1004144c:	d10b      	bne.n	10041466 <__eqdf2+0x56>
1004144e:	4294      	cmp	r4, r2
10041450:	d109      	bne.n	10041466 <__eqdf2+0x56>
10041452:	45d3      	cmp	fp, sl
10041454:	d01c      	beq.n	10041490 <__eqdf2+0x80>
10041456:	2900      	cmp	r1, #0
10041458:	d105      	bne.n	10041466 <__eqdf2+0x56>
1004145a:	4660      	mov	r0, ip
1004145c:	4320      	orrs	r0, r4
1004145e:	1e43      	subs	r3, r0, #1
10041460:	4198      	sbcs	r0, r3
10041462:	e000      	b.n	10041466 <__eqdf2+0x56>
10041464:	2001      	movs	r0, #1
10041466:	bcf0      	pop	{r4, r5, r6, r7}
10041468:	46bb      	mov	fp, r7
1004146a:	46b2      	mov	sl, r6
1004146c:	46a9      	mov	r9, r5
1004146e:	46a0      	mov	r8, r4
10041470:	bdf0      	pop	{r4, r5, r6, r7, pc}
10041472:	2001      	movs	r0, #1
10041474:	428e      	cmp	r6, r1
10041476:	d1f6      	bne.n	10041466 <__eqdf2+0x56>
10041478:	4661      	mov	r1, ip
1004147a:	4339      	orrs	r1, r7
1004147c:	000f      	movs	r7, r1
1004147e:	4317      	orrs	r7, r2
10041480:	4327      	orrs	r7, r4
10041482:	d1f0      	bne.n	10041466 <__eqdf2+0x56>
10041484:	465b      	mov	r3, fp
10041486:	4652      	mov	r2, sl
10041488:	1a98      	subs	r0, r3, r2
1004148a:	1e43      	subs	r3, r0, #1
1004148c:	4198      	sbcs	r0, r3
1004148e:	e7ea      	b.n	10041466 <__eqdf2+0x56>
10041490:	2000      	movs	r0, #0
10041492:	e7e8      	b.n	10041466 <__eqdf2+0x56>
10041494:	000007ff 	.word	0x000007ff

10041498 <__gedf2>:
10041498:	b5f0      	push	{r4, r5, r6, r7, lr}
1004149a:	4657      	mov	r7, sl
1004149c:	464e      	mov	r6, r9
1004149e:	4645      	mov	r5, r8
100414a0:	46de      	mov	lr, fp
100414a2:	b5e0      	push	{r5, r6, r7, lr}
100414a4:	000d      	movs	r5, r1
100414a6:	030f      	lsls	r7, r1, #12
100414a8:	0b39      	lsrs	r1, r7, #12
100414aa:	b083      	sub	sp, #12
100414ac:	0004      	movs	r4, r0
100414ae:	4680      	mov	r8, r0
100414b0:	9101      	str	r1, [sp, #4]
100414b2:	0058      	lsls	r0, r3, #1
100414b4:	0fe9      	lsrs	r1, r5, #31
100414b6:	4f31      	ldr	r7, [pc, #196]	@ (1004157c <__gedf2+0xe4>)
100414b8:	0d40      	lsrs	r0, r0, #21
100414ba:	468c      	mov	ip, r1
100414bc:	006e      	lsls	r6, r5, #1
100414be:	0319      	lsls	r1, r3, #12
100414c0:	4682      	mov	sl, r0
100414c2:	4691      	mov	r9, r2
100414c4:	0d76      	lsrs	r6, r6, #21
100414c6:	0b09      	lsrs	r1, r1, #12
100414c8:	0fd8      	lsrs	r0, r3, #31
100414ca:	42be      	cmp	r6, r7
100414cc:	d01f      	beq.n	1004150e <__gedf2+0x76>
100414ce:	45ba      	cmp	sl, r7
100414d0:	d00f      	beq.n	100414f2 <__gedf2+0x5a>
100414d2:	2e00      	cmp	r6, #0
100414d4:	d12f      	bne.n	10041536 <__gedf2+0x9e>
100414d6:	4655      	mov	r5, sl
100414d8:	9e01      	ldr	r6, [sp, #4]
100414da:	4334      	orrs	r4, r6
100414dc:	2d00      	cmp	r5, #0
100414de:	d127      	bne.n	10041530 <__gedf2+0x98>
100414e0:	430a      	orrs	r2, r1
100414e2:	d03a      	beq.n	1004155a <__gedf2+0xc2>
100414e4:	2c00      	cmp	r4, #0
100414e6:	d145      	bne.n	10041574 <__gedf2+0xdc>
100414e8:	2800      	cmp	r0, #0
100414ea:	d11a      	bne.n	10041522 <__gedf2+0x8a>
100414ec:	2001      	movs	r0, #1
100414ee:	4240      	negs	r0, r0
100414f0:	e017      	b.n	10041522 <__gedf2+0x8a>
100414f2:	4311      	orrs	r1, r2
100414f4:	d13b      	bne.n	1004156e <__gedf2+0xd6>
100414f6:	2e00      	cmp	r6, #0
100414f8:	d102      	bne.n	10041500 <__gedf2+0x68>
100414fa:	9f01      	ldr	r7, [sp, #4]
100414fc:	4327      	orrs	r7, r4
100414fe:	d0f3      	beq.n	100414e8 <__gedf2+0x50>
10041500:	4584      	cmp	ip, r0
10041502:	d109      	bne.n	10041518 <__gedf2+0x80>
10041504:	4663      	mov	r3, ip
10041506:	2b00      	cmp	r3, #0
10041508:	d0f0      	beq.n	100414ec <__gedf2+0x54>
1004150a:	4660      	mov	r0, ip
1004150c:	e009      	b.n	10041522 <__gedf2+0x8a>
1004150e:	9f01      	ldr	r7, [sp, #4]
10041510:	4327      	orrs	r7, r4
10041512:	d12c      	bne.n	1004156e <__gedf2+0xd6>
10041514:	45b2      	cmp	sl, r6
10041516:	d024      	beq.n	10041562 <__gedf2+0xca>
10041518:	4663      	mov	r3, ip
1004151a:	2002      	movs	r0, #2
1004151c:	3b01      	subs	r3, #1
1004151e:	4018      	ands	r0, r3
10041520:	3801      	subs	r0, #1
10041522:	b003      	add	sp, #12
10041524:	bcf0      	pop	{r4, r5, r6, r7}
10041526:	46bb      	mov	fp, r7
10041528:	46b2      	mov	sl, r6
1004152a:	46a9      	mov	r9, r5
1004152c:	46a0      	mov	r8, r4
1004152e:	bdf0      	pop	{r4, r5, r6, r7, pc}
10041530:	2c00      	cmp	r4, #0
10041532:	d0d9      	beq.n	100414e8 <__gedf2+0x50>
10041534:	e7e4      	b.n	10041500 <__gedf2+0x68>
10041536:	4654      	mov	r4, sl
10041538:	2c00      	cmp	r4, #0
1004153a:	d0ed      	beq.n	10041518 <__gedf2+0x80>
1004153c:	4584      	cmp	ip, r0
1004153e:	d1eb      	bne.n	10041518 <__gedf2+0x80>
10041540:	4556      	cmp	r6, sl
10041542:	dce9      	bgt.n	10041518 <__gedf2+0x80>
10041544:	dbde      	blt.n	10041504 <__gedf2+0x6c>
10041546:	9b01      	ldr	r3, [sp, #4]
10041548:	428b      	cmp	r3, r1
1004154a:	d8e5      	bhi.n	10041518 <__gedf2+0x80>
1004154c:	d1da      	bne.n	10041504 <__gedf2+0x6c>
1004154e:	45c8      	cmp	r8, r9
10041550:	d8e2      	bhi.n	10041518 <__gedf2+0x80>
10041552:	2000      	movs	r0, #0
10041554:	45c8      	cmp	r8, r9
10041556:	d2e4      	bcs.n	10041522 <__gedf2+0x8a>
10041558:	e7d4      	b.n	10041504 <__gedf2+0x6c>
1004155a:	2000      	movs	r0, #0
1004155c:	2c00      	cmp	r4, #0
1004155e:	d0e0      	beq.n	10041522 <__gedf2+0x8a>
10041560:	e7da      	b.n	10041518 <__gedf2+0x80>
10041562:	4311      	orrs	r1, r2
10041564:	d103      	bne.n	1004156e <__gedf2+0xd6>
10041566:	4584      	cmp	ip, r0
10041568:	d1d6      	bne.n	10041518 <__gedf2+0x80>
1004156a:	2000      	movs	r0, #0
1004156c:	e7d9      	b.n	10041522 <__gedf2+0x8a>
1004156e:	2002      	movs	r0, #2
10041570:	4240      	negs	r0, r0
10041572:	e7d6      	b.n	10041522 <__gedf2+0x8a>
10041574:	4584      	cmp	ip, r0
10041576:	d0e6      	beq.n	10041546 <__gedf2+0xae>
10041578:	e7ce      	b.n	10041518 <__gedf2+0x80>
1004157a:	46c0      	nop			@ (mov r8, r8)
1004157c:	000007ff 	.word	0x000007ff

10041580 <__ledf2>:
10041580:	b5f0      	push	{r4, r5, r6, r7, lr}
10041582:	4657      	mov	r7, sl
10041584:	464e      	mov	r6, r9
10041586:	4645      	mov	r5, r8
10041588:	46de      	mov	lr, fp
1004158a:	b5e0      	push	{r5, r6, r7, lr}
1004158c:	000d      	movs	r5, r1
1004158e:	030f      	lsls	r7, r1, #12
10041590:	0004      	movs	r4, r0
10041592:	4680      	mov	r8, r0
10041594:	0fe8      	lsrs	r0, r5, #31
10041596:	0b39      	lsrs	r1, r7, #12
10041598:	4684      	mov	ip, r0
1004159a:	b083      	sub	sp, #12
1004159c:	0058      	lsls	r0, r3, #1
1004159e:	4f30      	ldr	r7, [pc, #192]	@ (10041660 <__ledf2+0xe0>)
100415a0:	0d40      	lsrs	r0, r0, #21
100415a2:	9101      	str	r1, [sp, #4]
100415a4:	031e      	lsls	r6, r3, #12
100415a6:	0069      	lsls	r1, r5, #1
100415a8:	4682      	mov	sl, r0
100415aa:	4691      	mov	r9, r2
100415ac:	0d49      	lsrs	r1, r1, #21
100415ae:	0b36      	lsrs	r6, r6, #12
100415b0:	0fd8      	lsrs	r0, r3, #31
100415b2:	42b9      	cmp	r1, r7
100415b4:	d020      	beq.n	100415f8 <__ledf2+0x78>
100415b6:	45ba      	cmp	sl, r7
100415b8:	d00f      	beq.n	100415da <__ledf2+0x5a>
100415ba:	2900      	cmp	r1, #0
100415bc:	d12b      	bne.n	10041616 <__ledf2+0x96>
100415be:	9901      	ldr	r1, [sp, #4]
100415c0:	430c      	orrs	r4, r1
100415c2:	4651      	mov	r1, sl
100415c4:	2900      	cmp	r1, #0
100415c6:	d137      	bne.n	10041638 <__ledf2+0xb8>
100415c8:	4332      	orrs	r2, r6
100415ca:	d038      	beq.n	1004163e <__ledf2+0xbe>
100415cc:	2c00      	cmp	r4, #0
100415ce:	d144      	bne.n	1004165a <__ledf2+0xda>
100415d0:	2800      	cmp	r0, #0
100415d2:	d119      	bne.n	10041608 <__ledf2+0x88>
100415d4:	2001      	movs	r0, #1
100415d6:	4240      	negs	r0, r0
100415d8:	e016      	b.n	10041608 <__ledf2+0x88>
100415da:	4316      	orrs	r6, r2
100415dc:	d113      	bne.n	10041606 <__ledf2+0x86>
100415de:	2900      	cmp	r1, #0
100415e0:	d102      	bne.n	100415e8 <__ledf2+0x68>
100415e2:	9f01      	ldr	r7, [sp, #4]
100415e4:	4327      	orrs	r7, r4
100415e6:	d0f3      	beq.n	100415d0 <__ledf2+0x50>
100415e8:	4584      	cmp	ip, r0
100415ea:	d020      	beq.n	1004162e <__ledf2+0xae>
100415ec:	4663      	mov	r3, ip
100415ee:	2002      	movs	r0, #2
100415f0:	3b01      	subs	r3, #1
100415f2:	4018      	ands	r0, r3
100415f4:	3801      	subs	r0, #1
100415f6:	e007      	b.n	10041608 <__ledf2+0x88>
100415f8:	9f01      	ldr	r7, [sp, #4]
100415fa:	4327      	orrs	r7, r4
100415fc:	d103      	bne.n	10041606 <__ledf2+0x86>
100415fe:	458a      	cmp	sl, r1
10041600:	d1f4      	bne.n	100415ec <__ledf2+0x6c>
10041602:	4316      	orrs	r6, r2
10041604:	d01f      	beq.n	10041646 <__ledf2+0xc6>
10041606:	2002      	movs	r0, #2
10041608:	b003      	add	sp, #12
1004160a:	bcf0      	pop	{r4, r5, r6, r7}
1004160c:	46bb      	mov	fp, r7
1004160e:	46b2      	mov	sl, r6
10041610:	46a9      	mov	r9, r5
10041612:	46a0      	mov	r8, r4
10041614:	bdf0      	pop	{r4, r5, r6, r7, pc}
10041616:	4654      	mov	r4, sl
10041618:	2c00      	cmp	r4, #0
1004161a:	d0e7      	beq.n	100415ec <__ledf2+0x6c>
1004161c:	4584      	cmp	ip, r0
1004161e:	d1e5      	bne.n	100415ec <__ledf2+0x6c>
10041620:	4551      	cmp	r1, sl
10041622:	dce3      	bgt.n	100415ec <__ledf2+0x6c>
10041624:	db03      	blt.n	1004162e <__ledf2+0xae>
10041626:	9b01      	ldr	r3, [sp, #4]
10041628:	42b3      	cmp	r3, r6
1004162a:	d8df      	bhi.n	100415ec <__ledf2+0x6c>
1004162c:	d00f      	beq.n	1004164e <__ledf2+0xce>
1004162e:	4663      	mov	r3, ip
10041630:	2b00      	cmp	r3, #0
10041632:	d0cf      	beq.n	100415d4 <__ledf2+0x54>
10041634:	4660      	mov	r0, ip
10041636:	e7e7      	b.n	10041608 <__ledf2+0x88>
10041638:	2c00      	cmp	r4, #0
1004163a:	d0c9      	beq.n	100415d0 <__ledf2+0x50>
1004163c:	e7d4      	b.n	100415e8 <__ledf2+0x68>
1004163e:	2000      	movs	r0, #0
10041640:	2c00      	cmp	r4, #0
10041642:	d0e1      	beq.n	10041608 <__ledf2+0x88>
10041644:	e7d2      	b.n	100415ec <__ledf2+0x6c>
10041646:	4584      	cmp	ip, r0
10041648:	d1d0      	bne.n	100415ec <__ledf2+0x6c>
1004164a:	2000      	movs	r0, #0
1004164c:	e7dc      	b.n	10041608 <__ledf2+0x88>
1004164e:	45c8      	cmp	r8, r9
10041650:	d8cc      	bhi.n	100415ec <__ledf2+0x6c>
10041652:	2000      	movs	r0, #0
10041654:	45c8      	cmp	r8, r9
10041656:	d2d7      	bcs.n	10041608 <__ledf2+0x88>
10041658:	e7e9      	b.n	1004162e <__ledf2+0xae>
1004165a:	4584      	cmp	ip, r0
1004165c:	d0e3      	beq.n	10041626 <__ledf2+0xa6>
1004165e:	e7c5      	b.n	100415ec <__ledf2+0x6c>
10041660:	000007ff 	.word	0x000007ff

10041664 <__aeabi_dmul>:
10041664:	b5f0      	push	{r4, r5, r6, r7, lr}
10041666:	4657      	mov	r7, sl
10041668:	46de      	mov	lr, fp
1004166a:	464e      	mov	r6, r9
1004166c:	4645      	mov	r5, r8
1004166e:	b5e0      	push	{r5, r6, r7, lr}
10041670:	001f      	movs	r7, r3
10041672:	030b      	lsls	r3, r1, #12
10041674:	0b1b      	lsrs	r3, r3, #12
10041676:	0016      	movs	r6, r2
10041678:	469a      	mov	sl, r3
1004167a:	0fca      	lsrs	r2, r1, #31
1004167c:	004b      	lsls	r3, r1, #1
1004167e:	0004      	movs	r4, r0
10041680:	4693      	mov	fp, r2
10041682:	b087      	sub	sp, #28
10041684:	0d5b      	lsrs	r3, r3, #21
10041686:	d100      	bne.n	1004168a <__aeabi_dmul+0x26>
10041688:	e0d5      	b.n	10041836 <__aeabi_dmul+0x1d2>
1004168a:	4abb      	ldr	r2, [pc, #748]	@ (10041978 <__aeabi_dmul+0x314>)
1004168c:	4293      	cmp	r3, r2
1004168e:	d100      	bne.n	10041692 <__aeabi_dmul+0x2e>
10041690:	e0f8      	b.n	10041884 <__aeabi_dmul+0x220>
10041692:	4651      	mov	r1, sl
10041694:	0f42      	lsrs	r2, r0, #29
10041696:	00c9      	lsls	r1, r1, #3
10041698:	430a      	orrs	r2, r1
1004169a:	2180      	movs	r1, #128	@ 0x80
1004169c:	0409      	lsls	r1, r1, #16
1004169e:	4311      	orrs	r1, r2
100416a0:	00c2      	lsls	r2, r0, #3
100416a2:	4691      	mov	r9, r2
100416a4:	4ab5      	ldr	r2, [pc, #724]	@ (1004197c <__aeabi_dmul+0x318>)
100416a6:	468a      	mov	sl, r1
100416a8:	189d      	adds	r5, r3, r2
100416aa:	2300      	movs	r3, #0
100416ac:	4698      	mov	r8, r3
100416ae:	9302      	str	r3, [sp, #8]
100416b0:	033c      	lsls	r4, r7, #12
100416b2:	007b      	lsls	r3, r7, #1
100416b4:	0ffa      	lsrs	r2, r7, #31
100416b6:	0030      	movs	r0, r6
100416b8:	0b24      	lsrs	r4, r4, #12
100416ba:	0d5b      	lsrs	r3, r3, #21
100416bc:	9200      	str	r2, [sp, #0]
100416be:	d100      	bne.n	100416c2 <__aeabi_dmul+0x5e>
100416c0:	e096      	b.n	100417f0 <__aeabi_dmul+0x18c>
100416c2:	4aad      	ldr	r2, [pc, #692]	@ (10041978 <__aeabi_dmul+0x314>)
100416c4:	4293      	cmp	r3, r2
100416c6:	d031      	beq.n	1004172c <__aeabi_dmul+0xc8>
100416c8:	0f72      	lsrs	r2, r6, #29
100416ca:	00e4      	lsls	r4, r4, #3
100416cc:	4322      	orrs	r2, r4
100416ce:	2480      	movs	r4, #128	@ 0x80
100416d0:	0424      	lsls	r4, r4, #16
100416d2:	4314      	orrs	r4, r2
100416d4:	4aa9      	ldr	r2, [pc, #676]	@ (1004197c <__aeabi_dmul+0x318>)
100416d6:	00f0      	lsls	r0, r6, #3
100416d8:	4694      	mov	ip, r2
100416da:	4463      	add	r3, ip
100416dc:	195b      	adds	r3, r3, r5
100416de:	1c5a      	adds	r2, r3, #1
100416e0:	9201      	str	r2, [sp, #4]
100416e2:	4642      	mov	r2, r8
100416e4:	2600      	movs	r6, #0
100416e6:	2a0a      	cmp	r2, #10
100416e8:	dc42      	bgt.n	10041770 <__aeabi_dmul+0x10c>
100416ea:	465a      	mov	r2, fp
100416ec:	9900      	ldr	r1, [sp, #0]
100416ee:	404a      	eors	r2, r1
100416f0:	4693      	mov	fp, r2
100416f2:	4642      	mov	r2, r8
100416f4:	2a02      	cmp	r2, #2
100416f6:	dc32      	bgt.n	1004175e <__aeabi_dmul+0xfa>
100416f8:	3a01      	subs	r2, #1
100416fa:	2a01      	cmp	r2, #1
100416fc:	d900      	bls.n	10041700 <__aeabi_dmul+0x9c>
100416fe:	e149      	b.n	10041994 <__aeabi_dmul+0x330>
10041700:	2e02      	cmp	r6, #2
10041702:	d100      	bne.n	10041706 <__aeabi_dmul+0xa2>
10041704:	e0ca      	b.n	1004189c <__aeabi_dmul+0x238>
10041706:	2e01      	cmp	r6, #1
10041708:	d13d      	bne.n	10041786 <__aeabi_dmul+0x122>
1004170a:	2300      	movs	r3, #0
1004170c:	2400      	movs	r4, #0
1004170e:	2200      	movs	r2, #0
10041710:	0010      	movs	r0, r2
10041712:	465a      	mov	r2, fp
10041714:	051b      	lsls	r3, r3, #20
10041716:	4323      	orrs	r3, r4
10041718:	07d2      	lsls	r2, r2, #31
1004171a:	4313      	orrs	r3, r2
1004171c:	0019      	movs	r1, r3
1004171e:	b007      	add	sp, #28
10041720:	bcf0      	pop	{r4, r5, r6, r7}
10041722:	46bb      	mov	fp, r7
10041724:	46b2      	mov	sl, r6
10041726:	46a9      	mov	r9, r5
10041728:	46a0      	mov	r8, r4
1004172a:	bdf0      	pop	{r4, r5, r6, r7, pc}
1004172c:	4b92      	ldr	r3, [pc, #584]	@ (10041978 <__aeabi_dmul+0x314>)
1004172e:	4326      	orrs	r6, r4
10041730:	18eb      	adds	r3, r5, r3
10041732:	2e00      	cmp	r6, #0
10041734:	d100      	bne.n	10041738 <__aeabi_dmul+0xd4>
10041736:	e0bb      	b.n	100418b0 <__aeabi_dmul+0x24c>
10041738:	2203      	movs	r2, #3
1004173a:	4641      	mov	r1, r8
1004173c:	4311      	orrs	r1, r2
1004173e:	465a      	mov	r2, fp
10041740:	4688      	mov	r8, r1
10041742:	9900      	ldr	r1, [sp, #0]
10041744:	404a      	eors	r2, r1
10041746:	2180      	movs	r1, #128	@ 0x80
10041748:	0109      	lsls	r1, r1, #4
1004174a:	468c      	mov	ip, r1
1004174c:	0029      	movs	r1, r5
1004174e:	4461      	add	r1, ip
10041750:	9101      	str	r1, [sp, #4]
10041752:	4641      	mov	r1, r8
10041754:	290a      	cmp	r1, #10
10041756:	dd00      	ble.n	1004175a <__aeabi_dmul+0xf6>
10041758:	e233      	b.n	10041bc2 <__aeabi_dmul+0x55e>
1004175a:	4693      	mov	fp, r2
1004175c:	2603      	movs	r6, #3
1004175e:	4642      	mov	r2, r8
10041760:	2701      	movs	r7, #1
10041762:	4097      	lsls	r7, r2
10041764:	21a6      	movs	r1, #166	@ 0xa6
10041766:	003a      	movs	r2, r7
10041768:	00c9      	lsls	r1, r1, #3
1004176a:	400a      	ands	r2, r1
1004176c:	420f      	tst	r7, r1
1004176e:	d031      	beq.n	100417d4 <__aeabi_dmul+0x170>
10041770:	9e02      	ldr	r6, [sp, #8]
10041772:	2e02      	cmp	r6, #2
10041774:	d100      	bne.n	10041778 <__aeabi_dmul+0x114>
10041776:	e235      	b.n	10041be4 <__aeabi_dmul+0x580>
10041778:	2e03      	cmp	r6, #3
1004177a:	d100      	bne.n	1004177e <__aeabi_dmul+0x11a>
1004177c:	e1d2      	b.n	10041b24 <__aeabi_dmul+0x4c0>
1004177e:	4654      	mov	r4, sl
10041780:	4648      	mov	r0, r9
10041782:	2e01      	cmp	r6, #1
10041784:	d0c1      	beq.n	1004170a <__aeabi_dmul+0xa6>
10041786:	9a01      	ldr	r2, [sp, #4]
10041788:	4b7d      	ldr	r3, [pc, #500]	@ (10041980 <__aeabi_dmul+0x31c>)
1004178a:	4694      	mov	ip, r2
1004178c:	4463      	add	r3, ip
1004178e:	2b00      	cmp	r3, #0
10041790:	dc00      	bgt.n	10041794 <__aeabi_dmul+0x130>
10041792:	e0c0      	b.n	10041916 <__aeabi_dmul+0x2b2>
10041794:	0742      	lsls	r2, r0, #29
10041796:	d009      	beq.n	100417ac <__aeabi_dmul+0x148>
10041798:	220f      	movs	r2, #15
1004179a:	4002      	ands	r2, r0
1004179c:	2a04      	cmp	r2, #4
1004179e:	d005      	beq.n	100417ac <__aeabi_dmul+0x148>
100417a0:	1d02      	adds	r2, r0, #4
100417a2:	4282      	cmp	r2, r0
100417a4:	4180      	sbcs	r0, r0
100417a6:	4240      	negs	r0, r0
100417a8:	1824      	adds	r4, r4, r0
100417aa:	0010      	movs	r0, r2
100417ac:	01e2      	lsls	r2, r4, #7
100417ae:	d506      	bpl.n	100417be <__aeabi_dmul+0x15a>
100417b0:	4b74      	ldr	r3, [pc, #464]	@ (10041984 <__aeabi_dmul+0x320>)
100417b2:	9a01      	ldr	r2, [sp, #4]
100417b4:	401c      	ands	r4, r3
100417b6:	2380      	movs	r3, #128	@ 0x80
100417b8:	4694      	mov	ip, r2
100417ba:	00db      	lsls	r3, r3, #3
100417bc:	4463      	add	r3, ip
100417be:	4a72      	ldr	r2, [pc, #456]	@ (10041988 <__aeabi_dmul+0x324>)
100417c0:	4293      	cmp	r3, r2
100417c2:	dc6b      	bgt.n	1004189c <__aeabi_dmul+0x238>
100417c4:	0762      	lsls	r2, r4, #29
100417c6:	08c0      	lsrs	r0, r0, #3
100417c8:	0264      	lsls	r4, r4, #9
100417ca:	055b      	lsls	r3, r3, #21
100417cc:	4302      	orrs	r2, r0
100417ce:	0b24      	lsrs	r4, r4, #12
100417d0:	0d5b      	lsrs	r3, r3, #21
100417d2:	e79d      	b.n	10041710 <__aeabi_dmul+0xac>
100417d4:	2190      	movs	r1, #144	@ 0x90
100417d6:	0089      	lsls	r1, r1, #2
100417d8:	420f      	tst	r7, r1
100417da:	d163      	bne.n	100418a4 <__aeabi_dmul+0x240>
100417dc:	2288      	movs	r2, #136	@ 0x88
100417de:	423a      	tst	r2, r7
100417e0:	d100      	bne.n	100417e4 <__aeabi_dmul+0x180>
100417e2:	e0d7      	b.n	10041994 <__aeabi_dmul+0x330>
100417e4:	9b00      	ldr	r3, [sp, #0]
100417e6:	46a2      	mov	sl, r4
100417e8:	469b      	mov	fp, r3
100417ea:	4681      	mov	r9, r0
100417ec:	9602      	str	r6, [sp, #8]
100417ee:	e7bf      	b.n	10041770 <__aeabi_dmul+0x10c>
100417f0:	0023      	movs	r3, r4
100417f2:	4333      	orrs	r3, r6
100417f4:	d100      	bne.n	100417f8 <__aeabi_dmul+0x194>
100417f6:	e07f      	b.n	100418f8 <__aeabi_dmul+0x294>
100417f8:	2c00      	cmp	r4, #0
100417fa:	d100      	bne.n	100417fe <__aeabi_dmul+0x19a>
100417fc:	e1ad      	b.n	10041b5a <__aeabi_dmul+0x4f6>
100417fe:	0020      	movs	r0, r4
10041800:	f000 fe44 	bl	1004248c <__clzsi2>
10041804:	0002      	movs	r2, r0
10041806:	0003      	movs	r3, r0
10041808:	3a0b      	subs	r2, #11
1004180a:	201d      	movs	r0, #29
1004180c:	0019      	movs	r1, r3
1004180e:	1a82      	subs	r2, r0, r2
10041810:	0030      	movs	r0, r6
10041812:	3908      	subs	r1, #8
10041814:	40d0      	lsrs	r0, r2
10041816:	408c      	lsls	r4, r1
10041818:	4304      	orrs	r4, r0
1004181a:	0030      	movs	r0, r6
1004181c:	4088      	lsls	r0, r1
1004181e:	4a5b      	ldr	r2, [pc, #364]	@ (1004198c <__aeabi_dmul+0x328>)
10041820:	1aeb      	subs	r3, r5, r3
10041822:	4694      	mov	ip, r2
10041824:	4463      	add	r3, ip
10041826:	1c5a      	adds	r2, r3, #1
10041828:	9201      	str	r2, [sp, #4]
1004182a:	4642      	mov	r2, r8
1004182c:	2600      	movs	r6, #0
1004182e:	2a0a      	cmp	r2, #10
10041830:	dc00      	bgt.n	10041834 <__aeabi_dmul+0x1d0>
10041832:	e75a      	b.n	100416ea <__aeabi_dmul+0x86>
10041834:	e79c      	b.n	10041770 <__aeabi_dmul+0x10c>
10041836:	4653      	mov	r3, sl
10041838:	4303      	orrs	r3, r0
1004183a:	4699      	mov	r9, r3
1004183c:	d054      	beq.n	100418e8 <__aeabi_dmul+0x284>
1004183e:	4653      	mov	r3, sl
10041840:	2b00      	cmp	r3, #0
10041842:	d100      	bne.n	10041846 <__aeabi_dmul+0x1e2>
10041844:	e177      	b.n	10041b36 <__aeabi_dmul+0x4d2>
10041846:	4650      	mov	r0, sl
10041848:	f000 fe20 	bl	1004248c <__clzsi2>
1004184c:	230b      	movs	r3, #11
1004184e:	425b      	negs	r3, r3
10041850:	469c      	mov	ip, r3
10041852:	0002      	movs	r2, r0
10041854:	4484      	add	ip, r0
10041856:	0011      	movs	r1, r2
10041858:	4650      	mov	r0, sl
1004185a:	3908      	subs	r1, #8
1004185c:	4088      	lsls	r0, r1
1004185e:	231d      	movs	r3, #29
10041860:	4680      	mov	r8, r0
10041862:	4660      	mov	r0, ip
10041864:	1a1b      	subs	r3, r3, r0
10041866:	0020      	movs	r0, r4
10041868:	40d8      	lsrs	r0, r3
1004186a:	0003      	movs	r3, r0
1004186c:	4640      	mov	r0, r8
1004186e:	4303      	orrs	r3, r0
10041870:	469a      	mov	sl, r3
10041872:	0023      	movs	r3, r4
10041874:	408b      	lsls	r3, r1
10041876:	4699      	mov	r9, r3
10041878:	2300      	movs	r3, #0
1004187a:	4d44      	ldr	r5, [pc, #272]	@ (1004198c <__aeabi_dmul+0x328>)
1004187c:	4698      	mov	r8, r3
1004187e:	1aad      	subs	r5, r5, r2
10041880:	9302      	str	r3, [sp, #8]
10041882:	e715      	b.n	100416b0 <__aeabi_dmul+0x4c>
10041884:	4652      	mov	r2, sl
10041886:	4302      	orrs	r2, r0
10041888:	4691      	mov	r9, r2
1004188a:	d126      	bne.n	100418da <__aeabi_dmul+0x276>
1004188c:	2200      	movs	r2, #0
1004188e:	001d      	movs	r5, r3
10041890:	2302      	movs	r3, #2
10041892:	4692      	mov	sl, r2
10041894:	3208      	adds	r2, #8
10041896:	4690      	mov	r8, r2
10041898:	9302      	str	r3, [sp, #8]
1004189a:	e709      	b.n	100416b0 <__aeabi_dmul+0x4c>
1004189c:	2400      	movs	r4, #0
1004189e:	2200      	movs	r2, #0
100418a0:	4b35      	ldr	r3, [pc, #212]	@ (10041978 <__aeabi_dmul+0x314>)
100418a2:	e735      	b.n	10041710 <__aeabi_dmul+0xac>
100418a4:	2300      	movs	r3, #0
100418a6:	2480      	movs	r4, #128	@ 0x80
100418a8:	469b      	mov	fp, r3
100418aa:	0324      	lsls	r4, r4, #12
100418ac:	4b32      	ldr	r3, [pc, #200]	@ (10041978 <__aeabi_dmul+0x314>)
100418ae:	e72f      	b.n	10041710 <__aeabi_dmul+0xac>
100418b0:	2202      	movs	r2, #2
100418b2:	4641      	mov	r1, r8
100418b4:	4311      	orrs	r1, r2
100418b6:	2280      	movs	r2, #128	@ 0x80
100418b8:	0112      	lsls	r2, r2, #4
100418ba:	4694      	mov	ip, r2
100418bc:	002a      	movs	r2, r5
100418be:	4462      	add	r2, ip
100418c0:	4688      	mov	r8, r1
100418c2:	9201      	str	r2, [sp, #4]
100418c4:	290a      	cmp	r1, #10
100418c6:	dd00      	ble.n	100418ca <__aeabi_dmul+0x266>
100418c8:	e752      	b.n	10041770 <__aeabi_dmul+0x10c>
100418ca:	465a      	mov	r2, fp
100418cc:	2000      	movs	r0, #0
100418ce:	9900      	ldr	r1, [sp, #0]
100418d0:	0004      	movs	r4, r0
100418d2:	404a      	eors	r2, r1
100418d4:	4693      	mov	fp, r2
100418d6:	2602      	movs	r6, #2
100418d8:	e70b      	b.n	100416f2 <__aeabi_dmul+0x8e>
100418da:	220c      	movs	r2, #12
100418dc:	001d      	movs	r5, r3
100418de:	2303      	movs	r3, #3
100418e0:	4681      	mov	r9, r0
100418e2:	4690      	mov	r8, r2
100418e4:	9302      	str	r3, [sp, #8]
100418e6:	e6e3      	b.n	100416b0 <__aeabi_dmul+0x4c>
100418e8:	2300      	movs	r3, #0
100418ea:	469a      	mov	sl, r3
100418ec:	3304      	adds	r3, #4
100418ee:	4698      	mov	r8, r3
100418f0:	3b03      	subs	r3, #3
100418f2:	2500      	movs	r5, #0
100418f4:	9302      	str	r3, [sp, #8]
100418f6:	e6db      	b.n	100416b0 <__aeabi_dmul+0x4c>
100418f8:	4642      	mov	r2, r8
100418fa:	3301      	adds	r3, #1
100418fc:	431a      	orrs	r2, r3
100418fe:	002b      	movs	r3, r5
10041900:	4690      	mov	r8, r2
10041902:	1c5a      	adds	r2, r3, #1
10041904:	9201      	str	r2, [sp, #4]
10041906:	4642      	mov	r2, r8
10041908:	2400      	movs	r4, #0
1004190a:	2000      	movs	r0, #0
1004190c:	2601      	movs	r6, #1
1004190e:	2a0a      	cmp	r2, #10
10041910:	dc00      	bgt.n	10041914 <__aeabi_dmul+0x2b0>
10041912:	e6ea      	b.n	100416ea <__aeabi_dmul+0x86>
10041914:	e72c      	b.n	10041770 <__aeabi_dmul+0x10c>
10041916:	2201      	movs	r2, #1
10041918:	1ad2      	subs	r2, r2, r3
1004191a:	2a38      	cmp	r2, #56	@ 0x38
1004191c:	dd00      	ble.n	10041920 <__aeabi_dmul+0x2bc>
1004191e:	e6f4      	b.n	1004170a <__aeabi_dmul+0xa6>
10041920:	2a1f      	cmp	r2, #31
10041922:	dc00      	bgt.n	10041926 <__aeabi_dmul+0x2c2>
10041924:	e12a      	b.n	10041b7c <__aeabi_dmul+0x518>
10041926:	211f      	movs	r1, #31
10041928:	4249      	negs	r1, r1
1004192a:	1acb      	subs	r3, r1, r3
1004192c:	0021      	movs	r1, r4
1004192e:	40d9      	lsrs	r1, r3
10041930:	000b      	movs	r3, r1
10041932:	2a20      	cmp	r2, #32
10041934:	d005      	beq.n	10041942 <__aeabi_dmul+0x2de>
10041936:	4a16      	ldr	r2, [pc, #88]	@ (10041990 <__aeabi_dmul+0x32c>)
10041938:	9d01      	ldr	r5, [sp, #4]
1004193a:	4694      	mov	ip, r2
1004193c:	4465      	add	r5, ip
1004193e:	40ac      	lsls	r4, r5
10041940:	4320      	orrs	r0, r4
10041942:	1e42      	subs	r2, r0, #1
10041944:	4190      	sbcs	r0, r2
10041946:	4318      	orrs	r0, r3
10041948:	2307      	movs	r3, #7
1004194a:	0019      	movs	r1, r3
1004194c:	2400      	movs	r4, #0
1004194e:	4001      	ands	r1, r0
10041950:	4203      	tst	r3, r0
10041952:	d00c      	beq.n	1004196e <__aeabi_dmul+0x30a>
10041954:	230f      	movs	r3, #15
10041956:	4003      	ands	r3, r0
10041958:	2b04      	cmp	r3, #4
1004195a:	d100      	bne.n	1004195e <__aeabi_dmul+0x2fa>
1004195c:	e140      	b.n	10041be0 <__aeabi_dmul+0x57c>
1004195e:	1d03      	adds	r3, r0, #4
10041960:	4283      	cmp	r3, r0
10041962:	41a4      	sbcs	r4, r4
10041964:	0018      	movs	r0, r3
10041966:	4264      	negs	r4, r4
10041968:	0761      	lsls	r1, r4, #29
1004196a:	0264      	lsls	r4, r4, #9
1004196c:	0b24      	lsrs	r4, r4, #12
1004196e:	08c2      	lsrs	r2, r0, #3
10041970:	2300      	movs	r3, #0
10041972:	430a      	orrs	r2, r1
10041974:	e6cc      	b.n	10041710 <__aeabi_dmul+0xac>
10041976:	46c0      	nop			@ (mov r8, r8)
10041978:	000007ff 	.word	0x000007ff
1004197c:	fffffc01 	.word	0xfffffc01
10041980:	000003ff 	.word	0x000003ff
10041984:	feffffff 	.word	0xfeffffff
10041988:	000007fe 	.word	0x000007fe
1004198c:	fffffc0d 	.word	0xfffffc0d
10041990:	0000043e 	.word	0x0000043e
10041994:	4649      	mov	r1, r9
10041996:	464a      	mov	r2, r9
10041998:	0409      	lsls	r1, r1, #16
1004199a:	0c09      	lsrs	r1, r1, #16
1004199c:	000d      	movs	r5, r1
1004199e:	0c16      	lsrs	r6, r2, #16
100419a0:	0c02      	lsrs	r2, r0, #16
100419a2:	0400      	lsls	r0, r0, #16
100419a4:	0c00      	lsrs	r0, r0, #16
100419a6:	4345      	muls	r5, r0
100419a8:	46ac      	mov	ip, r5
100419aa:	0005      	movs	r5, r0
100419ac:	4375      	muls	r5, r6
100419ae:	46a8      	mov	r8, r5
100419b0:	0015      	movs	r5, r2
100419b2:	000f      	movs	r7, r1
100419b4:	4375      	muls	r5, r6
100419b6:	9200      	str	r2, [sp, #0]
100419b8:	9502      	str	r5, [sp, #8]
100419ba:	002a      	movs	r2, r5
100419bc:	9d00      	ldr	r5, [sp, #0]
100419be:	436f      	muls	r7, r5
100419c0:	4665      	mov	r5, ip
100419c2:	0c2d      	lsrs	r5, r5, #16
100419c4:	46a9      	mov	r9, r5
100419c6:	4447      	add	r7, r8
100419c8:	444f      	add	r7, r9
100419ca:	45b8      	cmp	r8, r7
100419cc:	d905      	bls.n	100419da <__aeabi_dmul+0x376>
100419ce:	0015      	movs	r5, r2
100419d0:	2280      	movs	r2, #128	@ 0x80
100419d2:	0252      	lsls	r2, r2, #9
100419d4:	4690      	mov	r8, r2
100419d6:	4445      	add	r5, r8
100419d8:	9502      	str	r5, [sp, #8]
100419da:	0c3d      	lsrs	r5, r7, #16
100419dc:	9503      	str	r5, [sp, #12]
100419de:	4665      	mov	r5, ip
100419e0:	042d      	lsls	r5, r5, #16
100419e2:	043f      	lsls	r7, r7, #16
100419e4:	0c2d      	lsrs	r5, r5, #16
100419e6:	46ac      	mov	ip, r5
100419e8:	003d      	movs	r5, r7
100419ea:	4465      	add	r5, ip
100419ec:	9504      	str	r5, [sp, #16]
100419ee:	0c25      	lsrs	r5, r4, #16
100419f0:	0424      	lsls	r4, r4, #16
100419f2:	0c24      	lsrs	r4, r4, #16
100419f4:	46ac      	mov	ip, r5
100419f6:	0025      	movs	r5, r4
100419f8:	4375      	muls	r5, r6
100419fa:	46a8      	mov	r8, r5
100419fc:	4665      	mov	r5, ip
100419fe:	000f      	movs	r7, r1
10041a00:	4369      	muls	r1, r5
10041a02:	4441      	add	r1, r8
10041a04:	4689      	mov	r9, r1
10041a06:	4367      	muls	r7, r4
10041a08:	0c39      	lsrs	r1, r7, #16
10041a0a:	4449      	add	r1, r9
10041a0c:	436e      	muls	r6, r5
10041a0e:	4588      	cmp	r8, r1
10041a10:	d903      	bls.n	10041a1a <__aeabi_dmul+0x3b6>
10041a12:	2280      	movs	r2, #128	@ 0x80
10041a14:	0252      	lsls	r2, r2, #9
10041a16:	4690      	mov	r8, r2
10041a18:	4446      	add	r6, r8
10041a1a:	0c0d      	lsrs	r5, r1, #16
10041a1c:	46a8      	mov	r8, r5
10041a1e:	0035      	movs	r5, r6
10041a20:	4445      	add	r5, r8
10041a22:	9505      	str	r5, [sp, #20]
10041a24:	9d03      	ldr	r5, [sp, #12]
10041a26:	043f      	lsls	r7, r7, #16
10041a28:	46a8      	mov	r8, r5
10041a2a:	0c3f      	lsrs	r7, r7, #16
10041a2c:	0409      	lsls	r1, r1, #16
10041a2e:	19c9      	adds	r1, r1, r7
10041a30:	4488      	add	r8, r1
10041a32:	4645      	mov	r5, r8
10041a34:	9503      	str	r5, [sp, #12]
10041a36:	4655      	mov	r5, sl
10041a38:	042e      	lsls	r6, r5, #16
10041a3a:	0c36      	lsrs	r6, r6, #16
10041a3c:	0c2f      	lsrs	r7, r5, #16
10041a3e:	0035      	movs	r5, r6
10041a40:	4345      	muls	r5, r0
10041a42:	4378      	muls	r0, r7
10041a44:	4681      	mov	r9, r0
10041a46:	0038      	movs	r0, r7
10041a48:	46a8      	mov	r8, r5
10041a4a:	0c2d      	lsrs	r5, r5, #16
10041a4c:	46aa      	mov	sl, r5
10041a4e:	9a00      	ldr	r2, [sp, #0]
10041a50:	4350      	muls	r0, r2
10041a52:	4372      	muls	r2, r6
10041a54:	444a      	add	r2, r9
10041a56:	4452      	add	r2, sl
10041a58:	4591      	cmp	r9, r2
10041a5a:	d903      	bls.n	10041a64 <__aeabi_dmul+0x400>
10041a5c:	2580      	movs	r5, #128	@ 0x80
10041a5e:	026d      	lsls	r5, r5, #9
10041a60:	46a9      	mov	r9, r5
10041a62:	4448      	add	r0, r9
10041a64:	0c15      	lsrs	r5, r2, #16
10041a66:	46a9      	mov	r9, r5
10041a68:	4645      	mov	r5, r8
10041a6a:	042d      	lsls	r5, r5, #16
10041a6c:	0c2d      	lsrs	r5, r5, #16
10041a6e:	46a8      	mov	r8, r5
10041a70:	4665      	mov	r5, ip
10041a72:	437d      	muls	r5, r7
10041a74:	0412      	lsls	r2, r2, #16
10041a76:	4448      	add	r0, r9
10041a78:	4490      	add	r8, r2
10041a7a:	46a9      	mov	r9, r5
10041a7c:	0032      	movs	r2, r6
10041a7e:	4665      	mov	r5, ip
10041a80:	4362      	muls	r2, r4
10041a82:	436e      	muls	r6, r5
10041a84:	437c      	muls	r4, r7
10041a86:	0c17      	lsrs	r7, r2, #16
10041a88:	1936      	adds	r6, r6, r4
10041a8a:	19bf      	adds	r7, r7, r6
10041a8c:	42bc      	cmp	r4, r7
10041a8e:	d903      	bls.n	10041a98 <__aeabi_dmul+0x434>
10041a90:	2480      	movs	r4, #128	@ 0x80
10041a92:	0264      	lsls	r4, r4, #9
10041a94:	46a4      	mov	ip, r4
10041a96:	44e1      	add	r9, ip
10041a98:	9c02      	ldr	r4, [sp, #8]
10041a9a:	9e03      	ldr	r6, [sp, #12]
10041a9c:	46a4      	mov	ip, r4
10041a9e:	9d05      	ldr	r5, [sp, #20]
10041aa0:	4466      	add	r6, ip
10041aa2:	428e      	cmp	r6, r1
10041aa4:	4189      	sbcs	r1, r1
10041aa6:	46ac      	mov	ip, r5
10041aa8:	0412      	lsls	r2, r2, #16
10041aaa:	043c      	lsls	r4, r7, #16
10041aac:	0c12      	lsrs	r2, r2, #16
10041aae:	18a2      	adds	r2, r4, r2
10041ab0:	4462      	add	r2, ip
10041ab2:	4249      	negs	r1, r1
10041ab4:	1854      	adds	r4, r2, r1
10041ab6:	4446      	add	r6, r8
10041ab8:	46a4      	mov	ip, r4
10041aba:	4546      	cmp	r6, r8
10041abc:	41a4      	sbcs	r4, r4
10041abe:	4682      	mov	sl, r0
10041ac0:	4264      	negs	r4, r4
10041ac2:	46a0      	mov	r8, r4
10041ac4:	42aa      	cmp	r2, r5
10041ac6:	4192      	sbcs	r2, r2
10041ac8:	458c      	cmp	ip, r1
10041aca:	4189      	sbcs	r1, r1
10041acc:	44e2      	add	sl, ip
10041ace:	44d0      	add	r8, sl
10041ad0:	4249      	negs	r1, r1
10041ad2:	4252      	negs	r2, r2
10041ad4:	430a      	orrs	r2, r1
10041ad6:	45a0      	cmp	r8, r4
10041ad8:	41a4      	sbcs	r4, r4
10041ada:	4582      	cmp	sl, r0
10041adc:	4189      	sbcs	r1, r1
10041ade:	4264      	negs	r4, r4
10041ae0:	4249      	negs	r1, r1
10041ae2:	430c      	orrs	r4, r1
10041ae4:	4641      	mov	r1, r8
10041ae6:	0c3f      	lsrs	r7, r7, #16
10041ae8:	19d2      	adds	r2, r2, r7
10041aea:	1912      	adds	r2, r2, r4
10041aec:	0dcc      	lsrs	r4, r1, #23
10041aee:	9904      	ldr	r1, [sp, #16]
10041af0:	0270      	lsls	r0, r6, #9
10041af2:	4308      	orrs	r0, r1
10041af4:	1e41      	subs	r1, r0, #1
10041af6:	4188      	sbcs	r0, r1
10041af8:	4641      	mov	r1, r8
10041afa:	444a      	add	r2, r9
10041afc:	0df6      	lsrs	r6, r6, #23
10041afe:	0252      	lsls	r2, r2, #9
10041b00:	4330      	orrs	r0, r6
10041b02:	0249      	lsls	r1, r1, #9
10041b04:	4314      	orrs	r4, r2
10041b06:	4308      	orrs	r0, r1
10041b08:	01d2      	lsls	r2, r2, #7
10041b0a:	d535      	bpl.n	10041b78 <__aeabi_dmul+0x514>
10041b0c:	2201      	movs	r2, #1
10041b0e:	0843      	lsrs	r3, r0, #1
10041b10:	4002      	ands	r2, r0
10041b12:	4313      	orrs	r3, r2
10041b14:	07e0      	lsls	r0, r4, #31
10041b16:	4318      	orrs	r0, r3
10041b18:	0864      	lsrs	r4, r4, #1
10041b1a:	e634      	b.n	10041786 <__aeabi_dmul+0x122>
10041b1c:	9b00      	ldr	r3, [sp, #0]
10041b1e:	46a2      	mov	sl, r4
10041b20:	469b      	mov	fp, r3
10041b22:	4681      	mov	r9, r0
10041b24:	2480      	movs	r4, #128	@ 0x80
10041b26:	4653      	mov	r3, sl
10041b28:	0324      	lsls	r4, r4, #12
10041b2a:	431c      	orrs	r4, r3
10041b2c:	0324      	lsls	r4, r4, #12
10041b2e:	464a      	mov	r2, r9
10041b30:	4b2e      	ldr	r3, [pc, #184]	@ (10041bec <__aeabi_dmul+0x588>)
10041b32:	0b24      	lsrs	r4, r4, #12
10041b34:	e5ec      	b.n	10041710 <__aeabi_dmul+0xac>
10041b36:	f000 fca9 	bl	1004248c <__clzsi2>
10041b3a:	2315      	movs	r3, #21
10041b3c:	469c      	mov	ip, r3
10041b3e:	4484      	add	ip, r0
10041b40:	0002      	movs	r2, r0
10041b42:	4663      	mov	r3, ip
10041b44:	3220      	adds	r2, #32
10041b46:	2b1c      	cmp	r3, #28
10041b48:	dc00      	bgt.n	10041b4c <__aeabi_dmul+0x4e8>
10041b4a:	e684      	b.n	10041856 <__aeabi_dmul+0x1f2>
10041b4c:	2300      	movs	r3, #0
10041b4e:	4699      	mov	r9, r3
10041b50:	0023      	movs	r3, r4
10041b52:	3808      	subs	r0, #8
10041b54:	4083      	lsls	r3, r0
10041b56:	469a      	mov	sl, r3
10041b58:	e68e      	b.n	10041878 <__aeabi_dmul+0x214>
10041b5a:	f000 fc97 	bl	1004248c <__clzsi2>
10041b5e:	0002      	movs	r2, r0
10041b60:	0003      	movs	r3, r0
10041b62:	3215      	adds	r2, #21
10041b64:	3320      	adds	r3, #32
10041b66:	2a1c      	cmp	r2, #28
10041b68:	dc00      	bgt.n	10041b6c <__aeabi_dmul+0x508>
10041b6a:	e64e      	b.n	1004180a <__aeabi_dmul+0x1a6>
10041b6c:	0002      	movs	r2, r0
10041b6e:	0034      	movs	r4, r6
10041b70:	3a08      	subs	r2, #8
10041b72:	2000      	movs	r0, #0
10041b74:	4094      	lsls	r4, r2
10041b76:	e652      	b.n	1004181e <__aeabi_dmul+0x1ba>
10041b78:	9301      	str	r3, [sp, #4]
10041b7a:	e604      	b.n	10041786 <__aeabi_dmul+0x122>
10041b7c:	4b1c      	ldr	r3, [pc, #112]	@ (10041bf0 <__aeabi_dmul+0x58c>)
10041b7e:	0021      	movs	r1, r4
10041b80:	469c      	mov	ip, r3
10041b82:	0003      	movs	r3, r0
10041b84:	9d01      	ldr	r5, [sp, #4]
10041b86:	40d3      	lsrs	r3, r2
10041b88:	4465      	add	r5, ip
10041b8a:	40a9      	lsls	r1, r5
10041b8c:	4319      	orrs	r1, r3
10041b8e:	0003      	movs	r3, r0
10041b90:	40ab      	lsls	r3, r5
10041b92:	1e58      	subs	r0, r3, #1
10041b94:	4183      	sbcs	r3, r0
10041b96:	4319      	orrs	r1, r3
10041b98:	0008      	movs	r0, r1
10041b9a:	40d4      	lsrs	r4, r2
10041b9c:	074b      	lsls	r3, r1, #29
10041b9e:	d009      	beq.n	10041bb4 <__aeabi_dmul+0x550>
10041ba0:	230f      	movs	r3, #15
10041ba2:	400b      	ands	r3, r1
10041ba4:	2b04      	cmp	r3, #4
10041ba6:	d005      	beq.n	10041bb4 <__aeabi_dmul+0x550>
10041ba8:	1d0b      	adds	r3, r1, #4
10041baa:	428b      	cmp	r3, r1
10041bac:	4180      	sbcs	r0, r0
10041bae:	4240      	negs	r0, r0
10041bb0:	1824      	adds	r4, r4, r0
10041bb2:	0018      	movs	r0, r3
10041bb4:	0223      	lsls	r3, r4, #8
10041bb6:	d400      	bmi.n	10041bba <__aeabi_dmul+0x556>
10041bb8:	e6d6      	b.n	10041968 <__aeabi_dmul+0x304>
10041bba:	2301      	movs	r3, #1
10041bbc:	2400      	movs	r4, #0
10041bbe:	2200      	movs	r2, #0
10041bc0:	e5a6      	b.n	10041710 <__aeabi_dmul+0xac>
10041bc2:	290f      	cmp	r1, #15
10041bc4:	d1aa      	bne.n	10041b1c <__aeabi_dmul+0x4b8>
10041bc6:	2380      	movs	r3, #128	@ 0x80
10041bc8:	4652      	mov	r2, sl
10041bca:	031b      	lsls	r3, r3, #12
10041bcc:	421a      	tst	r2, r3
10041bce:	d0a9      	beq.n	10041b24 <__aeabi_dmul+0x4c0>
10041bd0:	421c      	tst	r4, r3
10041bd2:	d1a7      	bne.n	10041b24 <__aeabi_dmul+0x4c0>
10041bd4:	431c      	orrs	r4, r3
10041bd6:	9b00      	ldr	r3, [sp, #0]
10041bd8:	0002      	movs	r2, r0
10041bda:	469b      	mov	fp, r3
10041bdc:	4b03      	ldr	r3, [pc, #12]	@ (10041bec <__aeabi_dmul+0x588>)
10041bde:	e597      	b.n	10041710 <__aeabi_dmul+0xac>
10041be0:	2400      	movs	r4, #0
10041be2:	e6c1      	b.n	10041968 <__aeabi_dmul+0x304>
10041be4:	2400      	movs	r4, #0
10041be6:	4b01      	ldr	r3, [pc, #4]	@ (10041bec <__aeabi_dmul+0x588>)
10041be8:	0022      	movs	r2, r4
10041bea:	e591      	b.n	10041710 <__aeabi_dmul+0xac>
10041bec:	000007ff 	.word	0x000007ff
10041bf0:	0000041e 	.word	0x0000041e

10041bf4 <__aeabi_dsub>:
10041bf4:	b5f0      	push	{r4, r5, r6, r7, lr}
10041bf6:	464e      	mov	r6, r9
10041bf8:	4645      	mov	r5, r8
10041bfa:	46de      	mov	lr, fp
10041bfc:	4657      	mov	r7, sl
10041bfe:	b5e0      	push	{r5, r6, r7, lr}
10041c00:	b085      	sub	sp, #20
10041c02:	9000      	str	r0, [sp, #0]
10041c04:	9101      	str	r1, [sp, #4]
10041c06:	030c      	lsls	r4, r1, #12
10041c08:	004f      	lsls	r7, r1, #1
10041c0a:	0fce      	lsrs	r6, r1, #31
10041c0c:	0a61      	lsrs	r1, r4, #9
10041c0e:	9c00      	ldr	r4, [sp, #0]
10041c10:	46b0      	mov	r8, r6
10041c12:	0f64      	lsrs	r4, r4, #29
10041c14:	430c      	orrs	r4, r1
10041c16:	9900      	ldr	r1, [sp, #0]
10041c18:	0d7f      	lsrs	r7, r7, #21
10041c1a:	00c8      	lsls	r0, r1, #3
10041c1c:	0011      	movs	r1, r2
10041c1e:	001a      	movs	r2, r3
10041c20:	031b      	lsls	r3, r3, #12
10041c22:	469c      	mov	ip, r3
10041c24:	9100      	str	r1, [sp, #0]
10041c26:	9201      	str	r2, [sp, #4]
10041c28:	0051      	lsls	r1, r2, #1
10041c2a:	0d4b      	lsrs	r3, r1, #21
10041c2c:	4699      	mov	r9, r3
10041c2e:	9b01      	ldr	r3, [sp, #4]
10041c30:	9d00      	ldr	r5, [sp, #0]
10041c32:	0fd9      	lsrs	r1, r3, #31
10041c34:	4663      	mov	r3, ip
10041c36:	0f6a      	lsrs	r2, r5, #29
10041c38:	0a5b      	lsrs	r3, r3, #9
10041c3a:	4313      	orrs	r3, r2
10041c3c:	00ea      	lsls	r2, r5, #3
10041c3e:	4694      	mov	ip, r2
10041c40:	4693      	mov	fp, r2
10041c42:	4ac1      	ldr	r2, [pc, #772]	@ (10041f48 <__aeabi_dsub+0x354>)
10041c44:	9003      	str	r0, [sp, #12]
10041c46:	9302      	str	r3, [sp, #8]
10041c48:	4591      	cmp	r9, r2
10041c4a:	d100      	bne.n	10041c4e <__aeabi_dsub+0x5a>
10041c4c:	e0cd      	b.n	10041dea <__aeabi_dsub+0x1f6>
10041c4e:	2501      	movs	r5, #1
10041c50:	4069      	eors	r1, r5
10041c52:	464d      	mov	r5, r9
10041c54:	1b7d      	subs	r5, r7, r5
10041c56:	46aa      	mov	sl, r5
10041c58:	428e      	cmp	r6, r1
10041c5a:	d100      	bne.n	10041c5e <__aeabi_dsub+0x6a>
10041c5c:	e080      	b.n	10041d60 <__aeabi_dsub+0x16c>
10041c5e:	2d00      	cmp	r5, #0
10041c60:	dc00      	bgt.n	10041c64 <__aeabi_dsub+0x70>
10041c62:	e335      	b.n	100422d0 <__aeabi_dsub+0x6dc>
10041c64:	4649      	mov	r1, r9
10041c66:	2900      	cmp	r1, #0
10041c68:	d100      	bne.n	10041c6c <__aeabi_dsub+0x78>
10041c6a:	e0df      	b.n	10041e2c <__aeabi_dsub+0x238>
10041c6c:	4297      	cmp	r7, r2
10041c6e:	d100      	bne.n	10041c72 <__aeabi_dsub+0x7e>
10041c70:	e194      	b.n	10041f9c <__aeabi_dsub+0x3a8>
10041c72:	4652      	mov	r2, sl
10041c74:	2501      	movs	r5, #1
10041c76:	2a38      	cmp	r2, #56	@ 0x38
10041c78:	dc19      	bgt.n	10041cae <__aeabi_dsub+0xba>
10041c7a:	2280      	movs	r2, #128	@ 0x80
10041c7c:	9b02      	ldr	r3, [sp, #8]
10041c7e:	0412      	lsls	r2, r2, #16
10041c80:	4313      	orrs	r3, r2
10041c82:	9302      	str	r3, [sp, #8]
10041c84:	4652      	mov	r2, sl
10041c86:	2a1f      	cmp	r2, #31
10041c88:	dd00      	ble.n	10041c8c <__aeabi_dsub+0x98>
10041c8a:	e1e3      	b.n	10042054 <__aeabi_dsub+0x460>
10041c8c:	4653      	mov	r3, sl
10041c8e:	2220      	movs	r2, #32
10041c90:	4661      	mov	r1, ip
10041c92:	9d02      	ldr	r5, [sp, #8]
10041c94:	1ad2      	subs	r2, r2, r3
10041c96:	4095      	lsls	r5, r2
10041c98:	40d9      	lsrs	r1, r3
10041c9a:	430d      	orrs	r5, r1
10041c9c:	4661      	mov	r1, ip
10041c9e:	4091      	lsls	r1, r2
10041ca0:	000a      	movs	r2, r1
10041ca2:	1e51      	subs	r1, r2, #1
10041ca4:	418a      	sbcs	r2, r1
10041ca6:	4315      	orrs	r5, r2
10041ca8:	9a02      	ldr	r2, [sp, #8]
10041caa:	40da      	lsrs	r2, r3
10041cac:	1aa4      	subs	r4, r4, r2
10041cae:	1b45      	subs	r5, r0, r5
10041cb0:	42a8      	cmp	r0, r5
10041cb2:	4180      	sbcs	r0, r0
10041cb4:	4240      	negs	r0, r0
10041cb6:	1a24      	subs	r4, r4, r0
10041cb8:	0223      	lsls	r3, r4, #8
10041cba:	d400      	bmi.n	10041cbe <__aeabi_dsub+0xca>
10041cbc:	e13d      	b.n	10041f3a <__aeabi_dsub+0x346>
10041cbe:	0264      	lsls	r4, r4, #9
10041cc0:	0a64      	lsrs	r4, r4, #9
10041cc2:	2c00      	cmp	r4, #0
10041cc4:	d100      	bne.n	10041cc8 <__aeabi_dsub+0xd4>
10041cc6:	e147      	b.n	10041f58 <__aeabi_dsub+0x364>
10041cc8:	0020      	movs	r0, r4
10041cca:	f000 fbdf 	bl	1004248c <__clzsi2>
10041cce:	0003      	movs	r3, r0
10041cd0:	3b08      	subs	r3, #8
10041cd2:	2120      	movs	r1, #32
10041cd4:	0028      	movs	r0, r5
10041cd6:	1aca      	subs	r2, r1, r3
10041cd8:	40d0      	lsrs	r0, r2
10041cda:	409c      	lsls	r4, r3
10041cdc:	0002      	movs	r2, r0
10041cde:	409d      	lsls	r5, r3
10041ce0:	4322      	orrs	r2, r4
10041ce2:	429f      	cmp	r7, r3
10041ce4:	dd00      	ble.n	10041ce8 <__aeabi_dsub+0xf4>
10041ce6:	e177      	b.n	10041fd8 <__aeabi_dsub+0x3e4>
10041ce8:	1bd8      	subs	r0, r3, r7
10041cea:	3001      	adds	r0, #1
10041cec:	1a09      	subs	r1, r1, r0
10041cee:	002c      	movs	r4, r5
10041cf0:	408d      	lsls	r5, r1
10041cf2:	40c4      	lsrs	r4, r0
10041cf4:	1e6b      	subs	r3, r5, #1
10041cf6:	419d      	sbcs	r5, r3
10041cf8:	0013      	movs	r3, r2
10041cfa:	40c2      	lsrs	r2, r0
10041cfc:	408b      	lsls	r3, r1
10041cfe:	4325      	orrs	r5, r4
10041d00:	2700      	movs	r7, #0
10041d02:	0014      	movs	r4, r2
10041d04:	431d      	orrs	r5, r3
10041d06:	076b      	lsls	r3, r5, #29
10041d08:	d009      	beq.n	10041d1e <__aeabi_dsub+0x12a>
10041d0a:	230f      	movs	r3, #15
10041d0c:	402b      	ands	r3, r5
10041d0e:	2b04      	cmp	r3, #4
10041d10:	d005      	beq.n	10041d1e <__aeabi_dsub+0x12a>
10041d12:	1d2b      	adds	r3, r5, #4
10041d14:	42ab      	cmp	r3, r5
10041d16:	41ad      	sbcs	r5, r5
10041d18:	426d      	negs	r5, r5
10041d1a:	1964      	adds	r4, r4, r5
10041d1c:	001d      	movs	r5, r3
10041d1e:	0223      	lsls	r3, r4, #8
10041d20:	d400      	bmi.n	10041d24 <__aeabi_dsub+0x130>
10041d22:	e140      	b.n	10041fa6 <__aeabi_dsub+0x3b2>
10041d24:	4a88      	ldr	r2, [pc, #544]	@ (10041f48 <__aeabi_dsub+0x354>)
10041d26:	3701      	adds	r7, #1
10041d28:	4297      	cmp	r7, r2
10041d2a:	d100      	bne.n	10041d2e <__aeabi_dsub+0x13a>
10041d2c:	e101      	b.n	10041f32 <__aeabi_dsub+0x33e>
10041d2e:	2601      	movs	r6, #1
10041d30:	4643      	mov	r3, r8
10041d32:	4986      	ldr	r1, [pc, #536]	@ (10041f4c <__aeabi_dsub+0x358>)
10041d34:	08ed      	lsrs	r5, r5, #3
10041d36:	4021      	ands	r1, r4
10041d38:	074a      	lsls	r2, r1, #29
10041d3a:	432a      	orrs	r2, r5
10041d3c:	057c      	lsls	r4, r7, #21
10041d3e:	024d      	lsls	r5, r1, #9
10041d40:	0b2d      	lsrs	r5, r5, #12
10041d42:	0d64      	lsrs	r4, r4, #21
10041d44:	401e      	ands	r6, r3
10041d46:	0524      	lsls	r4, r4, #20
10041d48:	432c      	orrs	r4, r5
10041d4a:	07f6      	lsls	r6, r6, #31
10041d4c:	4334      	orrs	r4, r6
10041d4e:	0010      	movs	r0, r2
10041d50:	0021      	movs	r1, r4
10041d52:	b005      	add	sp, #20
10041d54:	bcf0      	pop	{r4, r5, r6, r7}
10041d56:	46bb      	mov	fp, r7
10041d58:	46b2      	mov	sl, r6
10041d5a:	46a9      	mov	r9, r5
10041d5c:	46a0      	mov	r8, r4
10041d5e:	bdf0      	pop	{r4, r5, r6, r7, pc}
10041d60:	2d00      	cmp	r5, #0
10041d62:	dc00      	bgt.n	10041d66 <__aeabi_dsub+0x172>
10041d64:	e2d0      	b.n	10042308 <__aeabi_dsub+0x714>
10041d66:	4649      	mov	r1, r9
10041d68:	2900      	cmp	r1, #0
10041d6a:	d000      	beq.n	10041d6e <__aeabi_dsub+0x17a>
10041d6c:	e0d4      	b.n	10041f18 <__aeabi_dsub+0x324>
10041d6e:	4661      	mov	r1, ip
10041d70:	9b02      	ldr	r3, [sp, #8]
10041d72:	4319      	orrs	r1, r3
10041d74:	d100      	bne.n	10041d78 <__aeabi_dsub+0x184>
10041d76:	e12b      	b.n	10041fd0 <__aeabi_dsub+0x3dc>
10041d78:	1e69      	subs	r1, r5, #1
10041d7a:	2d01      	cmp	r5, #1
10041d7c:	d100      	bne.n	10041d80 <__aeabi_dsub+0x18c>
10041d7e:	e1d9      	b.n	10042134 <__aeabi_dsub+0x540>
10041d80:	4295      	cmp	r5, r2
10041d82:	d100      	bne.n	10041d86 <__aeabi_dsub+0x192>
10041d84:	e10a      	b.n	10041f9c <__aeabi_dsub+0x3a8>
10041d86:	2501      	movs	r5, #1
10041d88:	2938      	cmp	r1, #56	@ 0x38
10041d8a:	dc17      	bgt.n	10041dbc <__aeabi_dsub+0x1c8>
10041d8c:	468a      	mov	sl, r1
10041d8e:	4653      	mov	r3, sl
10041d90:	2b1f      	cmp	r3, #31
10041d92:	dd00      	ble.n	10041d96 <__aeabi_dsub+0x1a2>
10041d94:	e1e7      	b.n	10042166 <__aeabi_dsub+0x572>
10041d96:	2220      	movs	r2, #32
10041d98:	1ad2      	subs	r2, r2, r3
10041d9a:	9b02      	ldr	r3, [sp, #8]
10041d9c:	4661      	mov	r1, ip
10041d9e:	4093      	lsls	r3, r2
10041da0:	001d      	movs	r5, r3
10041da2:	4653      	mov	r3, sl
10041da4:	40d9      	lsrs	r1, r3
10041da6:	4663      	mov	r3, ip
10041da8:	4093      	lsls	r3, r2
10041daa:	001a      	movs	r2, r3
10041dac:	430d      	orrs	r5, r1
10041dae:	1e51      	subs	r1, r2, #1
10041db0:	418a      	sbcs	r2, r1
10041db2:	4653      	mov	r3, sl
10041db4:	4315      	orrs	r5, r2
10041db6:	9a02      	ldr	r2, [sp, #8]
10041db8:	40da      	lsrs	r2, r3
10041dba:	18a4      	adds	r4, r4, r2
10041dbc:	182d      	adds	r5, r5, r0
10041dbe:	4285      	cmp	r5, r0
10041dc0:	4180      	sbcs	r0, r0
10041dc2:	4240      	negs	r0, r0
10041dc4:	1824      	adds	r4, r4, r0
10041dc6:	0223      	lsls	r3, r4, #8
10041dc8:	d400      	bmi.n	10041dcc <__aeabi_dsub+0x1d8>
10041dca:	e0b6      	b.n	10041f3a <__aeabi_dsub+0x346>
10041dcc:	4b5e      	ldr	r3, [pc, #376]	@ (10041f48 <__aeabi_dsub+0x354>)
10041dce:	3701      	adds	r7, #1
10041dd0:	429f      	cmp	r7, r3
10041dd2:	d100      	bne.n	10041dd6 <__aeabi_dsub+0x1e2>
10041dd4:	e0ad      	b.n	10041f32 <__aeabi_dsub+0x33e>
10041dd6:	2101      	movs	r1, #1
10041dd8:	4b5c      	ldr	r3, [pc, #368]	@ (10041f4c <__aeabi_dsub+0x358>)
10041dda:	086a      	lsrs	r2, r5, #1
10041ddc:	401c      	ands	r4, r3
10041dde:	4029      	ands	r1, r5
10041de0:	430a      	orrs	r2, r1
10041de2:	07e5      	lsls	r5, r4, #31
10041de4:	4315      	orrs	r5, r2
10041de6:	0864      	lsrs	r4, r4, #1
10041de8:	e78d      	b.n	10041d06 <__aeabi_dsub+0x112>
10041dea:	4a59      	ldr	r2, [pc, #356]	@ (10041f50 <__aeabi_dsub+0x35c>)
10041dec:	9b02      	ldr	r3, [sp, #8]
10041dee:	4692      	mov	sl, r2
10041df0:	4662      	mov	r2, ip
10041df2:	44ba      	add	sl, r7
10041df4:	431a      	orrs	r2, r3
10041df6:	d02c      	beq.n	10041e52 <__aeabi_dsub+0x25e>
10041df8:	428e      	cmp	r6, r1
10041dfa:	d02e      	beq.n	10041e5a <__aeabi_dsub+0x266>
10041dfc:	4652      	mov	r2, sl
10041dfe:	2a00      	cmp	r2, #0
10041e00:	d060      	beq.n	10041ec4 <__aeabi_dsub+0x2d0>
10041e02:	2f00      	cmp	r7, #0
10041e04:	d100      	bne.n	10041e08 <__aeabi_dsub+0x214>
10041e06:	e0db      	b.n	10041fc0 <__aeabi_dsub+0x3cc>
10041e08:	4663      	mov	r3, ip
10041e0a:	000e      	movs	r6, r1
10041e0c:	9c02      	ldr	r4, [sp, #8]
10041e0e:	08d8      	lsrs	r0, r3, #3
10041e10:	0762      	lsls	r2, r4, #29
10041e12:	4302      	orrs	r2, r0
10041e14:	08e4      	lsrs	r4, r4, #3
10041e16:	0013      	movs	r3, r2
10041e18:	4323      	orrs	r3, r4
10041e1a:	d100      	bne.n	10041e1e <__aeabi_dsub+0x22a>
10041e1c:	e254      	b.n	100422c8 <__aeabi_dsub+0x6d4>
10041e1e:	2580      	movs	r5, #128	@ 0x80
10041e20:	032d      	lsls	r5, r5, #12
10041e22:	4325      	orrs	r5, r4
10041e24:	032d      	lsls	r5, r5, #12
10041e26:	4c48      	ldr	r4, [pc, #288]	@ (10041f48 <__aeabi_dsub+0x354>)
10041e28:	0b2d      	lsrs	r5, r5, #12
10041e2a:	e78c      	b.n	10041d46 <__aeabi_dsub+0x152>
10041e2c:	4661      	mov	r1, ip
10041e2e:	9b02      	ldr	r3, [sp, #8]
10041e30:	4319      	orrs	r1, r3
10041e32:	d100      	bne.n	10041e36 <__aeabi_dsub+0x242>
10041e34:	e0cc      	b.n	10041fd0 <__aeabi_dsub+0x3dc>
10041e36:	0029      	movs	r1, r5
10041e38:	3901      	subs	r1, #1
10041e3a:	2d01      	cmp	r5, #1
10041e3c:	d100      	bne.n	10041e40 <__aeabi_dsub+0x24c>
10041e3e:	e188      	b.n	10042152 <__aeabi_dsub+0x55e>
10041e40:	4295      	cmp	r5, r2
10041e42:	d100      	bne.n	10041e46 <__aeabi_dsub+0x252>
10041e44:	e0aa      	b.n	10041f9c <__aeabi_dsub+0x3a8>
10041e46:	2501      	movs	r5, #1
10041e48:	2938      	cmp	r1, #56	@ 0x38
10041e4a:	dd00      	ble.n	10041e4e <__aeabi_dsub+0x25a>
10041e4c:	e72f      	b.n	10041cae <__aeabi_dsub+0xba>
10041e4e:	468a      	mov	sl, r1
10041e50:	e718      	b.n	10041c84 <__aeabi_dsub+0x90>
10041e52:	2201      	movs	r2, #1
10041e54:	4051      	eors	r1, r2
10041e56:	428e      	cmp	r6, r1
10041e58:	d1d0      	bne.n	10041dfc <__aeabi_dsub+0x208>
10041e5a:	4653      	mov	r3, sl
10041e5c:	2b00      	cmp	r3, #0
10041e5e:	d100      	bne.n	10041e62 <__aeabi_dsub+0x26e>
10041e60:	e0be      	b.n	10041fe0 <__aeabi_dsub+0x3ec>
10041e62:	2f00      	cmp	r7, #0
10041e64:	d000      	beq.n	10041e68 <__aeabi_dsub+0x274>
10041e66:	e138      	b.n	100420da <__aeabi_dsub+0x4e6>
10041e68:	46ca      	mov	sl, r9
10041e6a:	0022      	movs	r2, r4
10041e6c:	4302      	orrs	r2, r0
10041e6e:	d100      	bne.n	10041e72 <__aeabi_dsub+0x27e>
10041e70:	e1e2      	b.n	10042238 <__aeabi_dsub+0x644>
10041e72:	4653      	mov	r3, sl
10041e74:	1e59      	subs	r1, r3, #1
10041e76:	2b01      	cmp	r3, #1
10041e78:	d100      	bne.n	10041e7c <__aeabi_dsub+0x288>
10041e7a:	e20d      	b.n	10042298 <__aeabi_dsub+0x6a4>
10041e7c:	4a32      	ldr	r2, [pc, #200]	@ (10041f48 <__aeabi_dsub+0x354>)
10041e7e:	4592      	cmp	sl, r2
10041e80:	d100      	bne.n	10041e84 <__aeabi_dsub+0x290>
10041e82:	e1d2      	b.n	1004222a <__aeabi_dsub+0x636>
10041e84:	2701      	movs	r7, #1
10041e86:	2938      	cmp	r1, #56	@ 0x38
10041e88:	dc13      	bgt.n	10041eb2 <__aeabi_dsub+0x2be>
10041e8a:	291f      	cmp	r1, #31
10041e8c:	dd00      	ble.n	10041e90 <__aeabi_dsub+0x29c>
10041e8e:	e1ee      	b.n	1004226e <__aeabi_dsub+0x67a>
10041e90:	2220      	movs	r2, #32
10041e92:	9b02      	ldr	r3, [sp, #8]
10041e94:	1a52      	subs	r2, r2, r1
10041e96:	0025      	movs	r5, r4
10041e98:	0007      	movs	r7, r0
10041e9a:	469a      	mov	sl, r3
10041e9c:	40cc      	lsrs	r4, r1
10041e9e:	4090      	lsls	r0, r2
10041ea0:	4095      	lsls	r5, r2
10041ea2:	40cf      	lsrs	r7, r1
10041ea4:	44a2      	add	sl, r4
10041ea6:	1e42      	subs	r2, r0, #1
10041ea8:	4190      	sbcs	r0, r2
10041eaa:	4653      	mov	r3, sl
10041eac:	432f      	orrs	r7, r5
10041eae:	4307      	orrs	r7, r0
10041eb0:	9302      	str	r3, [sp, #8]
10041eb2:	003d      	movs	r5, r7
10041eb4:	4465      	add	r5, ip
10041eb6:	4565      	cmp	r5, ip
10041eb8:	4192      	sbcs	r2, r2
10041eba:	9b02      	ldr	r3, [sp, #8]
10041ebc:	4252      	negs	r2, r2
10041ebe:	464f      	mov	r7, r9
10041ec0:	18d4      	adds	r4, r2, r3
10041ec2:	e780      	b.n	10041dc6 <__aeabi_dsub+0x1d2>
10041ec4:	4a23      	ldr	r2, [pc, #140]	@ (10041f54 <__aeabi_dsub+0x360>)
10041ec6:	1c7d      	adds	r5, r7, #1
10041ec8:	4215      	tst	r5, r2
10041eca:	d000      	beq.n	10041ece <__aeabi_dsub+0x2da>
10041ecc:	e0aa      	b.n	10042024 <__aeabi_dsub+0x430>
10041ece:	4662      	mov	r2, ip
10041ed0:	0025      	movs	r5, r4
10041ed2:	9b02      	ldr	r3, [sp, #8]
10041ed4:	4305      	orrs	r5, r0
10041ed6:	431a      	orrs	r2, r3
10041ed8:	2f00      	cmp	r7, #0
10041eda:	d000      	beq.n	10041ede <__aeabi_dsub+0x2ea>
10041edc:	e0f5      	b.n	100420ca <__aeabi_dsub+0x4d6>
10041ede:	2d00      	cmp	r5, #0
10041ee0:	d100      	bne.n	10041ee4 <__aeabi_dsub+0x2f0>
10041ee2:	e16b      	b.n	100421bc <__aeabi_dsub+0x5c8>
10041ee4:	2a00      	cmp	r2, #0
10041ee6:	d100      	bne.n	10041eea <__aeabi_dsub+0x2f6>
10041ee8:	e152      	b.n	10042190 <__aeabi_dsub+0x59c>
10041eea:	4663      	mov	r3, ip
10041eec:	1ac5      	subs	r5, r0, r3
10041eee:	9b02      	ldr	r3, [sp, #8]
10041ef0:	1ae2      	subs	r2, r4, r3
10041ef2:	42a8      	cmp	r0, r5
10041ef4:	419b      	sbcs	r3, r3
10041ef6:	425b      	negs	r3, r3
10041ef8:	1ad3      	subs	r3, r2, r3
10041efa:	021a      	lsls	r2, r3, #8
10041efc:	d400      	bmi.n	10041f00 <__aeabi_dsub+0x30c>
10041efe:	e1d5      	b.n	100422ac <__aeabi_dsub+0x6b8>
10041f00:	4663      	mov	r3, ip
10041f02:	1a1d      	subs	r5, r3, r0
10041f04:	45ac      	cmp	ip, r5
10041f06:	4192      	sbcs	r2, r2
10041f08:	2601      	movs	r6, #1
10041f0a:	9b02      	ldr	r3, [sp, #8]
10041f0c:	4252      	negs	r2, r2
10041f0e:	1b1c      	subs	r4, r3, r4
10041f10:	4688      	mov	r8, r1
10041f12:	1aa4      	subs	r4, r4, r2
10041f14:	400e      	ands	r6, r1
10041f16:	e6f6      	b.n	10041d06 <__aeabi_dsub+0x112>
10041f18:	4297      	cmp	r7, r2
10041f1a:	d03f      	beq.n	10041f9c <__aeabi_dsub+0x3a8>
10041f1c:	4652      	mov	r2, sl
10041f1e:	2501      	movs	r5, #1
10041f20:	2a38      	cmp	r2, #56	@ 0x38
10041f22:	dd00      	ble.n	10041f26 <__aeabi_dsub+0x332>
10041f24:	e74a      	b.n	10041dbc <__aeabi_dsub+0x1c8>
10041f26:	2280      	movs	r2, #128	@ 0x80
10041f28:	9b02      	ldr	r3, [sp, #8]
10041f2a:	0412      	lsls	r2, r2, #16
10041f2c:	4313      	orrs	r3, r2
10041f2e:	9302      	str	r3, [sp, #8]
10041f30:	e72d      	b.n	10041d8e <__aeabi_dsub+0x19a>
10041f32:	003c      	movs	r4, r7
10041f34:	2500      	movs	r5, #0
10041f36:	2200      	movs	r2, #0
10041f38:	e705      	b.n	10041d46 <__aeabi_dsub+0x152>
10041f3a:	2307      	movs	r3, #7
10041f3c:	402b      	ands	r3, r5
10041f3e:	2b00      	cmp	r3, #0
10041f40:	d000      	beq.n	10041f44 <__aeabi_dsub+0x350>
10041f42:	e6e2      	b.n	10041d0a <__aeabi_dsub+0x116>
10041f44:	e06b      	b.n	1004201e <__aeabi_dsub+0x42a>
10041f46:	46c0      	nop			@ (mov r8, r8)
10041f48:	000007ff 	.word	0x000007ff
10041f4c:	ff7fffff 	.word	0xff7fffff
10041f50:	fffff801 	.word	0xfffff801
10041f54:	000007fe 	.word	0x000007fe
10041f58:	0028      	movs	r0, r5
10041f5a:	f000 fa97 	bl	1004248c <__clzsi2>
10041f5e:	0003      	movs	r3, r0
10041f60:	3318      	adds	r3, #24
10041f62:	2b1f      	cmp	r3, #31
10041f64:	dc00      	bgt.n	10041f68 <__aeabi_dsub+0x374>
10041f66:	e6b4      	b.n	10041cd2 <__aeabi_dsub+0xde>
10041f68:	002a      	movs	r2, r5
10041f6a:	3808      	subs	r0, #8
10041f6c:	4082      	lsls	r2, r0
10041f6e:	429f      	cmp	r7, r3
10041f70:	dd00      	ble.n	10041f74 <__aeabi_dsub+0x380>
10041f72:	e0b9      	b.n	100420e8 <__aeabi_dsub+0x4f4>
10041f74:	1bdb      	subs	r3, r3, r7
10041f76:	1c58      	adds	r0, r3, #1
10041f78:	281f      	cmp	r0, #31
10041f7a:	dc00      	bgt.n	10041f7e <__aeabi_dsub+0x38a>
10041f7c:	e1a0      	b.n	100422c0 <__aeabi_dsub+0x6cc>
10041f7e:	0015      	movs	r5, r2
10041f80:	3b1f      	subs	r3, #31
10041f82:	40dd      	lsrs	r5, r3
10041f84:	2820      	cmp	r0, #32
10041f86:	d005      	beq.n	10041f94 <__aeabi_dsub+0x3a0>
10041f88:	2340      	movs	r3, #64	@ 0x40
10041f8a:	1a1b      	subs	r3, r3, r0
10041f8c:	409a      	lsls	r2, r3
10041f8e:	1e53      	subs	r3, r2, #1
10041f90:	419a      	sbcs	r2, r3
10041f92:	4315      	orrs	r5, r2
10041f94:	2307      	movs	r3, #7
10041f96:	2700      	movs	r7, #0
10041f98:	402b      	ands	r3, r5
10041f9a:	e7d0      	b.n	10041f3e <__aeabi_dsub+0x34a>
10041f9c:	08c0      	lsrs	r0, r0, #3
10041f9e:	0762      	lsls	r2, r4, #29
10041fa0:	4302      	orrs	r2, r0
10041fa2:	08e4      	lsrs	r4, r4, #3
10041fa4:	e737      	b.n	10041e16 <__aeabi_dsub+0x222>
10041fa6:	08ea      	lsrs	r2, r5, #3
10041fa8:	0763      	lsls	r3, r4, #29
10041faa:	431a      	orrs	r2, r3
10041fac:	4bd3      	ldr	r3, [pc, #844]	@ (100422fc <__aeabi_dsub+0x708>)
10041fae:	08e4      	lsrs	r4, r4, #3
10041fb0:	429f      	cmp	r7, r3
10041fb2:	d100      	bne.n	10041fb6 <__aeabi_dsub+0x3c2>
10041fb4:	e72f      	b.n	10041e16 <__aeabi_dsub+0x222>
10041fb6:	0324      	lsls	r4, r4, #12
10041fb8:	0b25      	lsrs	r5, r4, #12
10041fba:	057c      	lsls	r4, r7, #21
10041fbc:	0d64      	lsrs	r4, r4, #21
10041fbe:	e6c2      	b.n	10041d46 <__aeabi_dsub+0x152>
10041fc0:	46ca      	mov	sl, r9
10041fc2:	0022      	movs	r2, r4
10041fc4:	4302      	orrs	r2, r0
10041fc6:	d158      	bne.n	1004207a <__aeabi_dsub+0x486>
10041fc8:	4663      	mov	r3, ip
10041fca:	000e      	movs	r6, r1
10041fcc:	9c02      	ldr	r4, [sp, #8]
10041fce:	9303      	str	r3, [sp, #12]
10041fd0:	9b03      	ldr	r3, [sp, #12]
10041fd2:	4657      	mov	r7, sl
10041fd4:	08da      	lsrs	r2, r3, #3
10041fd6:	e7e7      	b.n	10041fa8 <__aeabi_dsub+0x3b4>
10041fd8:	4cc9      	ldr	r4, [pc, #804]	@ (10042300 <__aeabi_dsub+0x70c>)
10041fda:	1aff      	subs	r7, r7, r3
10041fdc:	4014      	ands	r4, r2
10041fde:	e692      	b.n	10041d06 <__aeabi_dsub+0x112>
10041fe0:	4dc8      	ldr	r5, [pc, #800]	@ (10042304 <__aeabi_dsub+0x710>)
10041fe2:	1c7a      	adds	r2, r7, #1
10041fe4:	422a      	tst	r2, r5
10041fe6:	d000      	beq.n	10041fea <__aeabi_dsub+0x3f6>
10041fe8:	e084      	b.n	100420f4 <__aeabi_dsub+0x500>
10041fea:	0022      	movs	r2, r4
10041fec:	4302      	orrs	r2, r0
10041fee:	2f00      	cmp	r7, #0
10041ff0:	d000      	beq.n	10041ff4 <__aeabi_dsub+0x400>
10041ff2:	e0ef      	b.n	100421d4 <__aeabi_dsub+0x5e0>
10041ff4:	2a00      	cmp	r2, #0
10041ff6:	d100      	bne.n	10041ffa <__aeabi_dsub+0x406>
10041ff8:	e0e5      	b.n	100421c6 <__aeabi_dsub+0x5d2>
10041ffa:	4662      	mov	r2, ip
10041ffc:	9902      	ldr	r1, [sp, #8]
10041ffe:	430a      	orrs	r2, r1
10042000:	d100      	bne.n	10042004 <__aeabi_dsub+0x410>
10042002:	e0c5      	b.n	10042190 <__aeabi_dsub+0x59c>
10042004:	4663      	mov	r3, ip
10042006:	18c5      	adds	r5, r0, r3
10042008:	468c      	mov	ip, r1
1004200a:	4285      	cmp	r5, r0
1004200c:	4180      	sbcs	r0, r0
1004200e:	4464      	add	r4, ip
10042010:	4240      	negs	r0, r0
10042012:	1824      	adds	r4, r4, r0
10042014:	0223      	lsls	r3, r4, #8
10042016:	d502      	bpl.n	1004201e <__aeabi_dsub+0x42a>
10042018:	4bb9      	ldr	r3, [pc, #740]	@ (10042300 <__aeabi_dsub+0x70c>)
1004201a:	3701      	adds	r7, #1
1004201c:	401c      	ands	r4, r3
1004201e:	46ba      	mov	sl, r7
10042020:	9503      	str	r5, [sp, #12]
10042022:	e7d5      	b.n	10041fd0 <__aeabi_dsub+0x3dc>
10042024:	4662      	mov	r2, ip
10042026:	1a85      	subs	r5, r0, r2
10042028:	42a8      	cmp	r0, r5
1004202a:	4192      	sbcs	r2, r2
1004202c:	4252      	negs	r2, r2
1004202e:	4691      	mov	r9, r2
10042030:	9b02      	ldr	r3, [sp, #8]
10042032:	1ae3      	subs	r3, r4, r3
10042034:	001a      	movs	r2, r3
10042036:	464b      	mov	r3, r9
10042038:	1ad2      	subs	r2, r2, r3
1004203a:	0013      	movs	r3, r2
1004203c:	4691      	mov	r9, r2
1004203e:	021a      	lsls	r2, r3, #8
10042040:	d46c      	bmi.n	1004211c <__aeabi_dsub+0x528>
10042042:	464a      	mov	r2, r9
10042044:	464c      	mov	r4, r9
10042046:	432a      	orrs	r2, r5
10042048:	d000      	beq.n	1004204c <__aeabi_dsub+0x458>
1004204a:	e63a      	b.n	10041cc2 <__aeabi_dsub+0xce>
1004204c:	2600      	movs	r6, #0
1004204e:	2400      	movs	r4, #0
10042050:	2500      	movs	r5, #0
10042052:	e678      	b.n	10041d46 <__aeabi_dsub+0x152>
10042054:	9902      	ldr	r1, [sp, #8]
10042056:	4653      	mov	r3, sl
10042058:	000d      	movs	r5, r1
1004205a:	3a20      	subs	r2, #32
1004205c:	40d5      	lsrs	r5, r2
1004205e:	2b20      	cmp	r3, #32
10042060:	d006      	beq.n	10042070 <__aeabi_dsub+0x47c>
10042062:	2240      	movs	r2, #64	@ 0x40
10042064:	1ad2      	subs	r2, r2, r3
10042066:	000b      	movs	r3, r1
10042068:	4093      	lsls	r3, r2
1004206a:	4662      	mov	r2, ip
1004206c:	431a      	orrs	r2, r3
1004206e:	4693      	mov	fp, r2
10042070:	465b      	mov	r3, fp
10042072:	1e5a      	subs	r2, r3, #1
10042074:	4193      	sbcs	r3, r2
10042076:	431d      	orrs	r5, r3
10042078:	e619      	b.n	10041cae <__aeabi_dsub+0xba>
1004207a:	4653      	mov	r3, sl
1004207c:	1e5a      	subs	r2, r3, #1
1004207e:	2b01      	cmp	r3, #1
10042080:	d100      	bne.n	10042084 <__aeabi_dsub+0x490>
10042082:	e0c6      	b.n	10042212 <__aeabi_dsub+0x61e>
10042084:	4e9d      	ldr	r6, [pc, #628]	@ (100422fc <__aeabi_dsub+0x708>)
10042086:	45b2      	cmp	sl, r6
10042088:	d100      	bne.n	1004208c <__aeabi_dsub+0x498>
1004208a:	e6bd      	b.n	10041e08 <__aeabi_dsub+0x214>
1004208c:	4688      	mov	r8, r1
1004208e:	000e      	movs	r6, r1
10042090:	2501      	movs	r5, #1
10042092:	2a38      	cmp	r2, #56	@ 0x38
10042094:	dc10      	bgt.n	100420b8 <__aeabi_dsub+0x4c4>
10042096:	2a1f      	cmp	r2, #31
10042098:	dc7f      	bgt.n	1004219a <__aeabi_dsub+0x5a6>
1004209a:	2120      	movs	r1, #32
1004209c:	0025      	movs	r5, r4
1004209e:	1a89      	subs	r1, r1, r2
100420a0:	0007      	movs	r7, r0
100420a2:	4088      	lsls	r0, r1
100420a4:	408d      	lsls	r5, r1
100420a6:	40d7      	lsrs	r7, r2
100420a8:	40d4      	lsrs	r4, r2
100420aa:	1e41      	subs	r1, r0, #1
100420ac:	4188      	sbcs	r0, r1
100420ae:	9b02      	ldr	r3, [sp, #8]
100420b0:	433d      	orrs	r5, r7
100420b2:	1b1b      	subs	r3, r3, r4
100420b4:	4305      	orrs	r5, r0
100420b6:	9302      	str	r3, [sp, #8]
100420b8:	4662      	mov	r2, ip
100420ba:	1b55      	subs	r5, r2, r5
100420bc:	45ac      	cmp	ip, r5
100420be:	4192      	sbcs	r2, r2
100420c0:	9b02      	ldr	r3, [sp, #8]
100420c2:	4252      	negs	r2, r2
100420c4:	464f      	mov	r7, r9
100420c6:	1a9c      	subs	r4, r3, r2
100420c8:	e5f6      	b.n	10041cb8 <__aeabi_dsub+0xc4>
100420ca:	2d00      	cmp	r5, #0
100420cc:	d000      	beq.n	100420d0 <__aeabi_dsub+0x4dc>
100420ce:	e0b7      	b.n	10042240 <__aeabi_dsub+0x64c>
100420d0:	2a00      	cmp	r2, #0
100420d2:	d100      	bne.n	100420d6 <__aeabi_dsub+0x4e2>
100420d4:	e0f0      	b.n	100422b8 <__aeabi_dsub+0x6c4>
100420d6:	2601      	movs	r6, #1
100420d8:	400e      	ands	r6, r1
100420da:	4663      	mov	r3, ip
100420dc:	9802      	ldr	r0, [sp, #8]
100420de:	08d9      	lsrs	r1, r3, #3
100420e0:	0742      	lsls	r2, r0, #29
100420e2:	430a      	orrs	r2, r1
100420e4:	08c4      	lsrs	r4, r0, #3
100420e6:	e696      	b.n	10041e16 <__aeabi_dsub+0x222>
100420e8:	4c85      	ldr	r4, [pc, #532]	@ (10042300 <__aeabi_dsub+0x70c>)
100420ea:	1aff      	subs	r7, r7, r3
100420ec:	4014      	ands	r4, r2
100420ee:	0762      	lsls	r2, r4, #29
100420f0:	08e4      	lsrs	r4, r4, #3
100420f2:	e760      	b.n	10041fb6 <__aeabi_dsub+0x3c2>
100420f4:	4981      	ldr	r1, [pc, #516]	@ (100422fc <__aeabi_dsub+0x708>)
100420f6:	428a      	cmp	r2, r1
100420f8:	d100      	bne.n	100420fc <__aeabi_dsub+0x508>
100420fa:	e0c9      	b.n	10042290 <__aeabi_dsub+0x69c>
100420fc:	4663      	mov	r3, ip
100420fe:	18c1      	adds	r1, r0, r3
10042100:	4281      	cmp	r1, r0
10042102:	4180      	sbcs	r0, r0
10042104:	9b02      	ldr	r3, [sp, #8]
10042106:	4240      	negs	r0, r0
10042108:	18e3      	adds	r3, r4, r3
1004210a:	181b      	adds	r3, r3, r0
1004210c:	07dd      	lsls	r5, r3, #31
1004210e:	085c      	lsrs	r4, r3, #1
10042110:	2307      	movs	r3, #7
10042112:	0849      	lsrs	r1, r1, #1
10042114:	430d      	orrs	r5, r1
10042116:	0017      	movs	r7, r2
10042118:	402b      	ands	r3, r5
1004211a:	e710      	b.n	10041f3e <__aeabi_dsub+0x34a>
1004211c:	4663      	mov	r3, ip
1004211e:	1a1d      	subs	r5, r3, r0
10042120:	45ac      	cmp	ip, r5
10042122:	4192      	sbcs	r2, r2
10042124:	2601      	movs	r6, #1
10042126:	9b02      	ldr	r3, [sp, #8]
10042128:	4252      	negs	r2, r2
1004212a:	1b1c      	subs	r4, r3, r4
1004212c:	4688      	mov	r8, r1
1004212e:	1aa4      	subs	r4, r4, r2
10042130:	400e      	ands	r6, r1
10042132:	e5c6      	b.n	10041cc2 <__aeabi_dsub+0xce>
10042134:	4663      	mov	r3, ip
10042136:	18c5      	adds	r5, r0, r3
10042138:	9b02      	ldr	r3, [sp, #8]
1004213a:	4285      	cmp	r5, r0
1004213c:	4180      	sbcs	r0, r0
1004213e:	469c      	mov	ip, r3
10042140:	4240      	negs	r0, r0
10042142:	4464      	add	r4, ip
10042144:	1824      	adds	r4, r4, r0
10042146:	2701      	movs	r7, #1
10042148:	0223      	lsls	r3, r4, #8
1004214a:	d400      	bmi.n	1004214e <__aeabi_dsub+0x55a>
1004214c:	e6f5      	b.n	10041f3a <__aeabi_dsub+0x346>
1004214e:	2702      	movs	r7, #2
10042150:	e641      	b.n	10041dd6 <__aeabi_dsub+0x1e2>
10042152:	4663      	mov	r3, ip
10042154:	1ac5      	subs	r5, r0, r3
10042156:	42a8      	cmp	r0, r5
10042158:	4180      	sbcs	r0, r0
1004215a:	9b02      	ldr	r3, [sp, #8]
1004215c:	4240      	negs	r0, r0
1004215e:	1ae4      	subs	r4, r4, r3
10042160:	2701      	movs	r7, #1
10042162:	1a24      	subs	r4, r4, r0
10042164:	e5a8      	b.n	10041cb8 <__aeabi_dsub+0xc4>
10042166:	9d02      	ldr	r5, [sp, #8]
10042168:	4652      	mov	r2, sl
1004216a:	002b      	movs	r3, r5
1004216c:	3a20      	subs	r2, #32
1004216e:	40d3      	lsrs	r3, r2
10042170:	0019      	movs	r1, r3
10042172:	4653      	mov	r3, sl
10042174:	2b20      	cmp	r3, #32
10042176:	d006      	beq.n	10042186 <__aeabi_dsub+0x592>
10042178:	2240      	movs	r2, #64	@ 0x40
1004217a:	1ad2      	subs	r2, r2, r3
1004217c:	002b      	movs	r3, r5
1004217e:	4093      	lsls	r3, r2
10042180:	4662      	mov	r2, ip
10042182:	431a      	orrs	r2, r3
10042184:	4693      	mov	fp, r2
10042186:	465d      	mov	r5, fp
10042188:	1e6b      	subs	r3, r5, #1
1004218a:	419d      	sbcs	r5, r3
1004218c:	430d      	orrs	r5, r1
1004218e:	e615      	b.n	10041dbc <__aeabi_dsub+0x1c8>
10042190:	0762      	lsls	r2, r4, #29
10042192:	08c0      	lsrs	r0, r0, #3
10042194:	4302      	orrs	r2, r0
10042196:	08e4      	lsrs	r4, r4, #3
10042198:	e70d      	b.n	10041fb6 <__aeabi_dsub+0x3c2>
1004219a:	0011      	movs	r1, r2
1004219c:	0027      	movs	r7, r4
1004219e:	3920      	subs	r1, #32
100421a0:	40cf      	lsrs	r7, r1
100421a2:	2a20      	cmp	r2, #32
100421a4:	d005      	beq.n	100421b2 <__aeabi_dsub+0x5be>
100421a6:	2140      	movs	r1, #64	@ 0x40
100421a8:	1a8a      	subs	r2, r1, r2
100421aa:	4094      	lsls	r4, r2
100421ac:	0025      	movs	r5, r4
100421ae:	4305      	orrs	r5, r0
100421b0:	9503      	str	r5, [sp, #12]
100421b2:	9d03      	ldr	r5, [sp, #12]
100421b4:	1e6a      	subs	r2, r5, #1
100421b6:	4195      	sbcs	r5, r2
100421b8:	433d      	orrs	r5, r7
100421ba:	e77d      	b.n	100420b8 <__aeabi_dsub+0x4c4>
100421bc:	2a00      	cmp	r2, #0
100421be:	d100      	bne.n	100421c2 <__aeabi_dsub+0x5ce>
100421c0:	e744      	b.n	1004204c <__aeabi_dsub+0x458>
100421c2:	2601      	movs	r6, #1
100421c4:	400e      	ands	r6, r1
100421c6:	4663      	mov	r3, ip
100421c8:	08d9      	lsrs	r1, r3, #3
100421ca:	9b02      	ldr	r3, [sp, #8]
100421cc:	075a      	lsls	r2, r3, #29
100421ce:	430a      	orrs	r2, r1
100421d0:	08dc      	lsrs	r4, r3, #3
100421d2:	e6f0      	b.n	10041fb6 <__aeabi_dsub+0x3c2>
100421d4:	2a00      	cmp	r2, #0
100421d6:	d028      	beq.n	1004222a <__aeabi_dsub+0x636>
100421d8:	4662      	mov	r2, ip
100421da:	9f02      	ldr	r7, [sp, #8]
100421dc:	08c0      	lsrs	r0, r0, #3
100421de:	433a      	orrs	r2, r7
100421e0:	d100      	bne.n	100421e4 <__aeabi_dsub+0x5f0>
100421e2:	e6dc      	b.n	10041f9e <__aeabi_dsub+0x3aa>
100421e4:	0762      	lsls	r2, r4, #29
100421e6:	4310      	orrs	r0, r2
100421e8:	2280      	movs	r2, #128	@ 0x80
100421ea:	08e4      	lsrs	r4, r4, #3
100421ec:	0312      	lsls	r2, r2, #12
100421ee:	4214      	tst	r4, r2
100421f0:	d009      	beq.n	10042206 <__aeabi_dsub+0x612>
100421f2:	08fd      	lsrs	r5, r7, #3
100421f4:	4215      	tst	r5, r2
100421f6:	d106      	bne.n	10042206 <__aeabi_dsub+0x612>
100421f8:	4663      	mov	r3, ip
100421fa:	2601      	movs	r6, #1
100421fc:	002c      	movs	r4, r5
100421fe:	08d8      	lsrs	r0, r3, #3
10042200:	077b      	lsls	r3, r7, #29
10042202:	4318      	orrs	r0, r3
10042204:	400e      	ands	r6, r1
10042206:	0f42      	lsrs	r2, r0, #29
10042208:	00c0      	lsls	r0, r0, #3
1004220a:	08c0      	lsrs	r0, r0, #3
1004220c:	0752      	lsls	r2, r2, #29
1004220e:	4302      	orrs	r2, r0
10042210:	e601      	b.n	10041e16 <__aeabi_dsub+0x222>
10042212:	4663      	mov	r3, ip
10042214:	1a1d      	subs	r5, r3, r0
10042216:	45ac      	cmp	ip, r5
10042218:	4192      	sbcs	r2, r2
1004221a:	9b02      	ldr	r3, [sp, #8]
1004221c:	4252      	negs	r2, r2
1004221e:	1b1c      	subs	r4, r3, r4
10042220:	000e      	movs	r6, r1
10042222:	4688      	mov	r8, r1
10042224:	2701      	movs	r7, #1
10042226:	1aa4      	subs	r4, r4, r2
10042228:	e546      	b.n	10041cb8 <__aeabi_dsub+0xc4>
1004222a:	4663      	mov	r3, ip
1004222c:	08d9      	lsrs	r1, r3, #3
1004222e:	9b02      	ldr	r3, [sp, #8]
10042230:	075a      	lsls	r2, r3, #29
10042232:	430a      	orrs	r2, r1
10042234:	08dc      	lsrs	r4, r3, #3
10042236:	e5ee      	b.n	10041e16 <__aeabi_dsub+0x222>
10042238:	4663      	mov	r3, ip
1004223a:	9c02      	ldr	r4, [sp, #8]
1004223c:	9303      	str	r3, [sp, #12]
1004223e:	e6c7      	b.n	10041fd0 <__aeabi_dsub+0x3dc>
10042240:	08c0      	lsrs	r0, r0, #3
10042242:	2a00      	cmp	r2, #0
10042244:	d100      	bne.n	10042248 <__aeabi_dsub+0x654>
10042246:	e6aa      	b.n	10041f9e <__aeabi_dsub+0x3aa>
10042248:	0762      	lsls	r2, r4, #29
1004224a:	4310      	orrs	r0, r2
1004224c:	2280      	movs	r2, #128	@ 0x80
1004224e:	08e4      	lsrs	r4, r4, #3
10042250:	0312      	lsls	r2, r2, #12
10042252:	4214      	tst	r4, r2
10042254:	d0d7      	beq.n	10042206 <__aeabi_dsub+0x612>
10042256:	9f02      	ldr	r7, [sp, #8]
10042258:	08fd      	lsrs	r5, r7, #3
1004225a:	4215      	tst	r5, r2
1004225c:	d1d3      	bne.n	10042206 <__aeabi_dsub+0x612>
1004225e:	4663      	mov	r3, ip
10042260:	2601      	movs	r6, #1
10042262:	08d8      	lsrs	r0, r3, #3
10042264:	077b      	lsls	r3, r7, #29
10042266:	002c      	movs	r4, r5
10042268:	4318      	orrs	r0, r3
1004226a:	400e      	ands	r6, r1
1004226c:	e7cb      	b.n	10042206 <__aeabi_dsub+0x612>
1004226e:	000a      	movs	r2, r1
10042270:	0027      	movs	r7, r4
10042272:	3a20      	subs	r2, #32
10042274:	40d7      	lsrs	r7, r2
10042276:	2920      	cmp	r1, #32
10042278:	d005      	beq.n	10042286 <__aeabi_dsub+0x692>
1004227a:	2240      	movs	r2, #64	@ 0x40
1004227c:	1a52      	subs	r2, r2, r1
1004227e:	4094      	lsls	r4, r2
10042280:	0025      	movs	r5, r4
10042282:	4305      	orrs	r5, r0
10042284:	9503      	str	r5, [sp, #12]
10042286:	9d03      	ldr	r5, [sp, #12]
10042288:	1e6a      	subs	r2, r5, #1
1004228a:	4195      	sbcs	r5, r2
1004228c:	432f      	orrs	r7, r5
1004228e:	e610      	b.n	10041eb2 <__aeabi_dsub+0x2be>
10042290:	0014      	movs	r4, r2
10042292:	2500      	movs	r5, #0
10042294:	2200      	movs	r2, #0
10042296:	e556      	b.n	10041d46 <__aeabi_dsub+0x152>
10042298:	9b02      	ldr	r3, [sp, #8]
1004229a:	4460      	add	r0, ip
1004229c:	4699      	mov	r9, r3
1004229e:	4560      	cmp	r0, ip
100422a0:	4192      	sbcs	r2, r2
100422a2:	444c      	add	r4, r9
100422a4:	4252      	negs	r2, r2
100422a6:	0005      	movs	r5, r0
100422a8:	18a4      	adds	r4, r4, r2
100422aa:	e74c      	b.n	10042146 <__aeabi_dsub+0x552>
100422ac:	001a      	movs	r2, r3
100422ae:	001c      	movs	r4, r3
100422b0:	432a      	orrs	r2, r5
100422b2:	d000      	beq.n	100422b6 <__aeabi_dsub+0x6c2>
100422b4:	e6b3      	b.n	1004201e <__aeabi_dsub+0x42a>
100422b6:	e6c9      	b.n	1004204c <__aeabi_dsub+0x458>
100422b8:	2480      	movs	r4, #128	@ 0x80
100422ba:	2600      	movs	r6, #0
100422bc:	0324      	lsls	r4, r4, #12
100422be:	e5ae      	b.n	10041e1e <__aeabi_dsub+0x22a>
100422c0:	2120      	movs	r1, #32
100422c2:	2500      	movs	r5, #0
100422c4:	1a09      	subs	r1, r1, r0
100422c6:	e517      	b.n	10041cf8 <__aeabi_dsub+0x104>
100422c8:	2200      	movs	r2, #0
100422ca:	2500      	movs	r5, #0
100422cc:	4c0b      	ldr	r4, [pc, #44]	@ (100422fc <__aeabi_dsub+0x708>)
100422ce:	e53a      	b.n	10041d46 <__aeabi_dsub+0x152>
100422d0:	2d00      	cmp	r5, #0
100422d2:	d100      	bne.n	100422d6 <__aeabi_dsub+0x6e2>
100422d4:	e5f6      	b.n	10041ec4 <__aeabi_dsub+0x2d0>
100422d6:	464b      	mov	r3, r9
100422d8:	1bda      	subs	r2, r3, r7
100422da:	4692      	mov	sl, r2
100422dc:	2f00      	cmp	r7, #0
100422de:	d100      	bne.n	100422e2 <__aeabi_dsub+0x6ee>
100422e0:	e66f      	b.n	10041fc2 <__aeabi_dsub+0x3ce>
100422e2:	2a38      	cmp	r2, #56	@ 0x38
100422e4:	dc05      	bgt.n	100422f2 <__aeabi_dsub+0x6fe>
100422e6:	2680      	movs	r6, #128	@ 0x80
100422e8:	0436      	lsls	r6, r6, #16
100422ea:	4334      	orrs	r4, r6
100422ec:	4688      	mov	r8, r1
100422ee:	000e      	movs	r6, r1
100422f0:	e6d1      	b.n	10042096 <__aeabi_dsub+0x4a2>
100422f2:	4688      	mov	r8, r1
100422f4:	000e      	movs	r6, r1
100422f6:	2501      	movs	r5, #1
100422f8:	e6de      	b.n	100420b8 <__aeabi_dsub+0x4c4>
100422fa:	46c0      	nop			@ (mov r8, r8)
100422fc:	000007ff 	.word	0x000007ff
10042300:	ff7fffff 	.word	0xff7fffff
10042304:	000007fe 	.word	0x000007fe
10042308:	2d00      	cmp	r5, #0
1004230a:	d100      	bne.n	1004230e <__aeabi_dsub+0x71a>
1004230c:	e668      	b.n	10041fe0 <__aeabi_dsub+0x3ec>
1004230e:	464b      	mov	r3, r9
10042310:	1bd9      	subs	r1, r3, r7
10042312:	2f00      	cmp	r7, #0
10042314:	d101      	bne.n	1004231a <__aeabi_dsub+0x726>
10042316:	468a      	mov	sl, r1
10042318:	e5a7      	b.n	10041e6a <__aeabi_dsub+0x276>
1004231a:	2701      	movs	r7, #1
1004231c:	2938      	cmp	r1, #56	@ 0x38
1004231e:	dd00      	ble.n	10042322 <__aeabi_dsub+0x72e>
10042320:	e5c7      	b.n	10041eb2 <__aeabi_dsub+0x2be>
10042322:	2280      	movs	r2, #128	@ 0x80
10042324:	0412      	lsls	r2, r2, #16
10042326:	4314      	orrs	r4, r2
10042328:	e5af      	b.n	10041e8a <__aeabi_dsub+0x296>
1004232a:	46c0      	nop			@ (mov r8, r8)

1004232c <__aeabi_dcmpun>:
1004232c:	b5f0      	push	{r4, r5, r6, r7, lr}
1004232e:	46c6      	mov	lr, r8
10042330:	031e      	lsls	r6, r3, #12
10042332:	0b36      	lsrs	r6, r6, #12
10042334:	46b0      	mov	r8, r6
10042336:	4e0d      	ldr	r6, [pc, #52]	@ (1004236c <__aeabi_dcmpun+0x40>)
10042338:	030c      	lsls	r4, r1, #12
1004233a:	004d      	lsls	r5, r1, #1
1004233c:	005f      	lsls	r7, r3, #1
1004233e:	b500      	push	{lr}
10042340:	0b24      	lsrs	r4, r4, #12
10042342:	0d6d      	lsrs	r5, r5, #21
10042344:	0d7f      	lsrs	r7, r7, #21
10042346:	42b5      	cmp	r5, r6
10042348:	d00b      	beq.n	10042362 <__aeabi_dcmpun+0x36>
1004234a:	4908      	ldr	r1, [pc, #32]	@ (1004236c <__aeabi_dcmpun+0x40>)
1004234c:	2000      	movs	r0, #0
1004234e:	428f      	cmp	r7, r1
10042350:	d104      	bne.n	1004235c <__aeabi_dcmpun+0x30>
10042352:	4646      	mov	r6, r8
10042354:	4316      	orrs	r6, r2
10042356:	0030      	movs	r0, r6
10042358:	1e43      	subs	r3, r0, #1
1004235a:	4198      	sbcs	r0, r3
1004235c:	bc80      	pop	{r7}
1004235e:	46b8      	mov	r8, r7
10042360:	bdf0      	pop	{r4, r5, r6, r7, pc}
10042362:	4304      	orrs	r4, r0
10042364:	2001      	movs	r0, #1
10042366:	2c00      	cmp	r4, #0
10042368:	d1f8      	bne.n	1004235c <__aeabi_dcmpun+0x30>
1004236a:	e7ee      	b.n	1004234a <__aeabi_dcmpun+0x1e>
1004236c:	000007ff 	.word	0x000007ff

10042370 <__aeabi_d2iz>:
10042370:	000b      	movs	r3, r1
10042372:	0002      	movs	r2, r0
10042374:	b570      	push	{r4, r5, r6, lr}
10042376:	4d16      	ldr	r5, [pc, #88]	@ (100423d0 <__aeabi_d2iz+0x60>)
10042378:	030c      	lsls	r4, r1, #12
1004237a:	b082      	sub	sp, #8
1004237c:	0049      	lsls	r1, r1, #1
1004237e:	2000      	movs	r0, #0
10042380:	9200      	str	r2, [sp, #0]
10042382:	9301      	str	r3, [sp, #4]
10042384:	0b24      	lsrs	r4, r4, #12
10042386:	0d49      	lsrs	r1, r1, #21
10042388:	0fde      	lsrs	r6, r3, #31
1004238a:	42a9      	cmp	r1, r5
1004238c:	dd04      	ble.n	10042398 <__aeabi_d2iz+0x28>
1004238e:	4811      	ldr	r0, [pc, #68]	@ (100423d4 <__aeabi_d2iz+0x64>)
10042390:	4281      	cmp	r1, r0
10042392:	dd03      	ble.n	1004239c <__aeabi_d2iz+0x2c>
10042394:	4b10      	ldr	r3, [pc, #64]	@ (100423d8 <__aeabi_d2iz+0x68>)
10042396:	18f0      	adds	r0, r6, r3
10042398:	b002      	add	sp, #8
1004239a:	bd70      	pop	{r4, r5, r6, pc}
1004239c:	2080      	movs	r0, #128	@ 0x80
1004239e:	0340      	lsls	r0, r0, #13
100423a0:	4320      	orrs	r0, r4
100423a2:	4c0e      	ldr	r4, [pc, #56]	@ (100423dc <__aeabi_d2iz+0x6c>)
100423a4:	1a64      	subs	r4, r4, r1
100423a6:	2c1f      	cmp	r4, #31
100423a8:	dd08      	ble.n	100423bc <__aeabi_d2iz+0x4c>
100423aa:	4b0d      	ldr	r3, [pc, #52]	@ (100423e0 <__aeabi_d2iz+0x70>)
100423ac:	1a5b      	subs	r3, r3, r1
100423ae:	40d8      	lsrs	r0, r3
100423b0:	0003      	movs	r3, r0
100423b2:	4258      	negs	r0, r3
100423b4:	2e00      	cmp	r6, #0
100423b6:	d1ef      	bne.n	10042398 <__aeabi_d2iz+0x28>
100423b8:	0018      	movs	r0, r3
100423ba:	e7ed      	b.n	10042398 <__aeabi_d2iz+0x28>
100423bc:	4b09      	ldr	r3, [pc, #36]	@ (100423e4 <__aeabi_d2iz+0x74>)
100423be:	9a00      	ldr	r2, [sp, #0]
100423c0:	469c      	mov	ip, r3
100423c2:	0003      	movs	r3, r0
100423c4:	4461      	add	r1, ip
100423c6:	408b      	lsls	r3, r1
100423c8:	40e2      	lsrs	r2, r4
100423ca:	4313      	orrs	r3, r2
100423cc:	e7f1      	b.n	100423b2 <__aeabi_d2iz+0x42>
100423ce:	46c0      	nop			@ (mov r8, r8)
100423d0:	000003fe 	.word	0x000003fe
100423d4:	0000041d 	.word	0x0000041d
100423d8:	7fffffff 	.word	0x7fffffff
100423dc:	00000433 	.word	0x00000433
100423e0:	00000413 	.word	0x00000413
100423e4:	fffffbed 	.word	0xfffffbed

100423e8 <__aeabi_i2d>:
100423e8:	b570      	push	{r4, r5, r6, lr}
100423ea:	2800      	cmp	r0, #0
100423ec:	d016      	beq.n	1004241c <__aeabi_i2d+0x34>
100423ee:	17c3      	asrs	r3, r0, #31
100423f0:	18c5      	adds	r5, r0, r3
100423f2:	405d      	eors	r5, r3
100423f4:	0fc4      	lsrs	r4, r0, #31
100423f6:	0028      	movs	r0, r5
100423f8:	f000 f848 	bl	1004248c <__clzsi2>
100423fc:	4b10      	ldr	r3, [pc, #64]	@ (10042440 <__aeabi_i2d+0x58>)
100423fe:	1a1b      	subs	r3, r3, r0
10042400:	055b      	lsls	r3, r3, #21
10042402:	0d5b      	lsrs	r3, r3, #21
10042404:	280a      	cmp	r0, #10
10042406:	dc14      	bgt.n	10042432 <__aeabi_i2d+0x4a>
10042408:	0002      	movs	r2, r0
1004240a:	002e      	movs	r6, r5
1004240c:	3215      	adds	r2, #21
1004240e:	4096      	lsls	r6, r2
10042410:	220b      	movs	r2, #11
10042412:	1a12      	subs	r2, r2, r0
10042414:	40d5      	lsrs	r5, r2
10042416:	032d      	lsls	r5, r5, #12
10042418:	0b2d      	lsrs	r5, r5, #12
1004241a:	e003      	b.n	10042424 <__aeabi_i2d+0x3c>
1004241c:	2400      	movs	r4, #0
1004241e:	2300      	movs	r3, #0
10042420:	2500      	movs	r5, #0
10042422:	2600      	movs	r6, #0
10042424:	051b      	lsls	r3, r3, #20
10042426:	432b      	orrs	r3, r5
10042428:	07e4      	lsls	r4, r4, #31
1004242a:	4323      	orrs	r3, r4
1004242c:	0030      	movs	r0, r6
1004242e:	0019      	movs	r1, r3
10042430:	bd70      	pop	{r4, r5, r6, pc}
10042432:	380b      	subs	r0, #11
10042434:	4085      	lsls	r5, r0
10042436:	032d      	lsls	r5, r5, #12
10042438:	2600      	movs	r6, #0
1004243a:	0b2d      	lsrs	r5, r5, #12
1004243c:	e7f2      	b.n	10042424 <__aeabi_i2d+0x3c>
1004243e:	46c0      	nop			@ (mov r8, r8)
10042440:	0000041e 	.word	0x0000041e

10042444 <__aeabi_ui2d>:
10042444:	b510      	push	{r4, lr}
10042446:	1e04      	subs	r4, r0, #0
10042448:	d010      	beq.n	1004246c <__aeabi_ui2d+0x28>
1004244a:	f000 f81f 	bl	1004248c <__clzsi2>
1004244e:	4b0e      	ldr	r3, [pc, #56]	@ (10042488 <__aeabi_ui2d+0x44>)
10042450:	1a1b      	subs	r3, r3, r0
10042452:	055b      	lsls	r3, r3, #21
10042454:	0d5b      	lsrs	r3, r3, #21
10042456:	280a      	cmp	r0, #10
10042458:	dc0f      	bgt.n	1004247a <__aeabi_ui2d+0x36>
1004245a:	220b      	movs	r2, #11
1004245c:	0021      	movs	r1, r4
1004245e:	1a12      	subs	r2, r2, r0
10042460:	40d1      	lsrs	r1, r2
10042462:	3015      	adds	r0, #21
10042464:	030a      	lsls	r2, r1, #12
10042466:	4084      	lsls	r4, r0
10042468:	0b12      	lsrs	r2, r2, #12
1004246a:	e001      	b.n	10042470 <__aeabi_ui2d+0x2c>
1004246c:	2300      	movs	r3, #0
1004246e:	2200      	movs	r2, #0
10042470:	051b      	lsls	r3, r3, #20
10042472:	4313      	orrs	r3, r2
10042474:	0020      	movs	r0, r4
10042476:	0019      	movs	r1, r3
10042478:	bd10      	pop	{r4, pc}
1004247a:	0022      	movs	r2, r4
1004247c:	380b      	subs	r0, #11
1004247e:	4082      	lsls	r2, r0
10042480:	0312      	lsls	r2, r2, #12
10042482:	2400      	movs	r4, #0
10042484:	0b12      	lsrs	r2, r2, #12
10042486:	e7f3      	b.n	10042470 <__aeabi_ui2d+0x2c>
10042488:	0000041e 	.word	0x0000041e

1004248c <__clzsi2>:
1004248c:	211c      	movs	r1, #28
1004248e:	2301      	movs	r3, #1
10042490:	041b      	lsls	r3, r3, #16
10042492:	4298      	cmp	r0, r3
10042494:	d301      	bcc.n	1004249a <__clzsi2+0xe>
10042496:	0c00      	lsrs	r0, r0, #16
10042498:	3910      	subs	r1, #16
1004249a:	0a1b      	lsrs	r3, r3, #8
1004249c:	4298      	cmp	r0, r3
1004249e:	d301      	bcc.n	100424a4 <__clzsi2+0x18>
100424a0:	0a00      	lsrs	r0, r0, #8
100424a2:	3908      	subs	r1, #8
100424a4:	091b      	lsrs	r3, r3, #4
100424a6:	4298      	cmp	r0, r3
100424a8:	d301      	bcc.n	100424ae <__clzsi2+0x22>
100424aa:	0900      	lsrs	r0, r0, #4
100424ac:	3904      	subs	r1, #4
100424ae:	a202      	add	r2, pc, #8	@ (adr r2, 100424b8 <__clzsi2+0x2c>)
100424b0:	5c10      	ldrb	r0, [r2, r0]
100424b2:	1840      	adds	r0, r0, r1
100424b4:	4770      	bx	lr
100424b6:	46c0      	nop			@ (mov r8, r8)
100424b8:	02020304 	.word	0x02020304
100424bc:	01010101 	.word	0x01010101
	...

100424c8 <__clzdi2>:
100424c8:	b510      	push	{r4, lr}
100424ca:	2900      	cmp	r1, #0
100424cc:	d103      	bne.n	100424d6 <__clzdi2+0xe>
100424ce:	f7ff ffdd 	bl	1004248c <__clzsi2>
100424d2:	3020      	adds	r0, #32
100424d4:	e002      	b.n	100424dc <__clzdi2+0x14>
100424d6:	0008      	movs	r0, r1
100424d8:	f7ff ffd8 	bl	1004248c <__clzsi2>
100424dc:	bd10      	pop	{r4, pc}
100424de:	46c0      	nop			@ (mov r8, r8)

100424e0 <LL_PWR_EnableGPIOPullUp>:
  *         @arg @ref LL_PWR_GPIO_BIT_14
  *         @arg @ref LL_PWR_GPIO_BIT_15
  * @retval None
  */
__STATIC_INLINE void LL_PWR_EnableGPIOPullUp(uint32_t GPIO, uint32_t GPIONumber)
{
100424e0:	b580      	push	{r7, lr}
100424e2:	b082      	sub	sp, #8
100424e4:	af00      	add	r7, sp, #0
100424e6:	6078      	str	r0, [r7, #4]
100424e8:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(*((__IO uint32_t *)(GPIO + 4UL)), GPIONumber);
100424ea:	687b      	ldr	r3, [r7, #4]
100424ec:	3304      	adds	r3, #4
100424ee:	681a      	ldr	r2, [r3, #0]
100424f0:	683b      	ldr	r3, [r7, #0]
100424f2:	43d9      	mvns	r1, r3
100424f4:	687b      	ldr	r3, [r7, #4]
100424f6:	3304      	adds	r3, #4
100424f8:	400a      	ands	r2, r1
100424fa:	601a      	str	r2, [r3, #0]
  SET_BIT(*((__IO uint32_t *)GPIO), GPIONumber);
100424fc:	687b      	ldr	r3, [r7, #4]
100424fe:	6819      	ldr	r1, [r3, #0]
10042500:	687b      	ldr	r3, [r7, #4]
10042502:	683a      	ldr	r2, [r7, #0]
10042504:	430a      	orrs	r2, r1
10042506:	601a      	str	r2, [r3, #0]
}
10042508:	46c0      	nop			@ (mov r8, r8)
1004250a:	46bd      	mov	sp, r7
1004250c:	b002      	add	sp, #8
1004250e:	bd80      	pop	{r7, pc}

10042510 <LL_PWR_SetNoPullA>:
  *         @arg @ref LL_PWR_GPIO_BIT_15(*)
  *         (*) available only on STM32WB06 and STM32WB07 devices
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SetNoPullA(uint32_t GPIONumber)
{
10042510:	b580      	push	{r7, lr}
10042512:	b082      	sub	sp, #8
10042514:	af00      	add	r7, sp, #0
10042516:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(PWR->PUCRA, GPIONumber);
10042518:	4b08      	ldr	r3, [pc, #32]	@ (1004253c <LL_PWR_SetNoPullA+0x2c>)
1004251a:	6a1a      	ldr	r2, [r3, #32]
1004251c:	687b      	ldr	r3, [r7, #4]
1004251e:	43d9      	mvns	r1, r3
10042520:	4b06      	ldr	r3, [pc, #24]	@ (1004253c <LL_PWR_SetNoPullA+0x2c>)
10042522:	400a      	ands	r2, r1
10042524:	621a      	str	r2, [r3, #32]
  CLEAR_BIT(PWR->PDCRA, GPIONumber);
10042526:	4b05      	ldr	r3, [pc, #20]	@ (1004253c <LL_PWR_SetNoPullA+0x2c>)
10042528:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
1004252a:	687b      	ldr	r3, [r7, #4]
1004252c:	43d9      	mvns	r1, r3
1004252e:	4b03      	ldr	r3, [pc, #12]	@ (1004253c <LL_PWR_SetNoPullA+0x2c>)
10042530:	400a      	ands	r2, r1
10042532:	625a      	str	r2, [r3, #36]	@ 0x24
}
10042534:	46c0      	nop			@ (mov r8, r8)
10042536:	46bd      	mov	sp, r7
10042538:	b002      	add	sp, #8
1004253a:	bd80      	pop	{r7, pc}
1004253c:	48500000 	.word	0x48500000

10042540 <LL_PWR_SetNoPullB>:
  *         @arg @ref LL_PWR_GPIO_BIT_15
  *         (*) available only oon STM32WB06 and STM32WB07 devices
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SetNoPullB(uint32_t GPIONumber)
{
10042540:	b580      	push	{r7, lr}
10042542:	b082      	sub	sp, #8
10042544:	af00      	add	r7, sp, #0
10042546:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(PWR->PUCRB, GPIONumber);
10042548:	4b08      	ldr	r3, [pc, #32]	@ (1004256c <LL_PWR_SetNoPullB+0x2c>)
1004254a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
1004254c:	687b      	ldr	r3, [r7, #4]
1004254e:	43d9      	mvns	r1, r3
10042550:	4b06      	ldr	r3, [pc, #24]	@ (1004256c <LL_PWR_SetNoPullB+0x2c>)
10042552:	400a      	ands	r2, r1
10042554:	629a      	str	r2, [r3, #40]	@ 0x28
  CLEAR_BIT(PWR->PDCRB, GPIONumber);
10042556:	4b05      	ldr	r3, [pc, #20]	@ (1004256c <LL_PWR_SetNoPullB+0x2c>)
10042558:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
1004255a:	687b      	ldr	r3, [r7, #4]
1004255c:	43d9      	mvns	r1, r3
1004255e:	4b03      	ldr	r3, [pc, #12]	@ (1004256c <LL_PWR_SetNoPullB+0x2c>)
10042560:	400a      	ands	r2, r1
10042562:	62da      	str	r2, [r3, #44]	@ 0x2c
}
10042564:	46c0      	nop			@ (mov r8, r8)
10042566:	46bd      	mov	sp, r7
10042568:	b002      	add	sp, #8
1004256a:	bd80      	pop	{r7, pc}
1004256c:	48500000 	.word	0x48500000

10042570 <LL_RADIO_TIMER_GetAbsoluteTime>:
  * @brief  Get the Absolute Time of the wakeup timer (Granularity unit is 16 x slow clock period).
  * @param  WAKEUPx Radio Timer instance
  * @retval Absolute Time of Wakeup Timer
  */
__STATIC_INLINE uint32_t LL_RADIO_TIMER_GetAbsoluteTime(WAKEUP_TypeDef *WAKEUPx)
{
10042570:	b580      	push	{r7, lr}
10042572:	b082      	sub	sp, #8
10042574:	af00      	add	r7, sp, #0
10042576:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_REG(WAKEUPx->ABSOLUTE_TIME));
10042578:	687b      	ldr	r3, [r7, #4]
1004257a:	691b      	ldr	r3, [r3, #16]
}
1004257c:	0018      	movs	r0, r3
1004257e:	46bd      	mov	sp, r7
10042580:	b002      	add	sp, #8
10042582:	bd80      	pop	{r7, pc}

10042584 <LL_AHB1_GRP1_EnableClock>:
  * @arg LL_AHB1_GRP1_PERIPH_RNG
  * @retval None
  * @note   LL_AHB1_GRP1_PERIPH_PKA
  */
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
10042584:	b580      	push	{r7, lr}
10042586:	b084      	sub	sp, #16
10042588:	af00      	add	r7, sp, #0
1004258a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHBENR, Periphs);
1004258c:	4b07      	ldr	r3, [pc, #28]	@ (100425ac <LL_AHB1_GRP1_EnableClock+0x28>)
1004258e:	6d19      	ldr	r1, [r3, #80]	@ 0x50
10042590:	4b06      	ldr	r3, [pc, #24]	@ (100425ac <LL_AHB1_GRP1_EnableClock+0x28>)
10042592:	687a      	ldr	r2, [r7, #4]
10042594:	430a      	orrs	r2, r1
10042596:	651a      	str	r2, [r3, #80]	@ 0x50
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
10042598:	4b04      	ldr	r3, [pc, #16]	@ (100425ac <LL_AHB1_GRP1_EnableClock+0x28>)
1004259a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
1004259c:	687a      	ldr	r2, [r7, #4]
1004259e:	4013      	ands	r3, r2
100425a0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
100425a2:	68fb      	ldr	r3, [r7, #12]
}
100425a4:	46c0      	nop			@ (mov r8, r8)
100425a6:	46bd      	mov	sp, r7
100425a8:	b004      	add	sp, #16
100425aa:	bd80      	pop	{r7, pc}
100425ac:	48400000 	.word	0x48400000

100425b0 <LL_APB2_GRP1_EnableClock>:
  * @arg LL_APB2_GRP1_PERIPH_MRBLE
  * @retval None
  * @note   LL_APB2_GRP1_PERIPH_MRBLE
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
100425b0:	b580      	push	{r7, lr}
100425b2:	b084      	sub	sp, #16
100425b4:	af00      	add	r7, sp, #0
100425b6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
100425b8:	4b07      	ldr	r3, [pc, #28]	@ (100425d8 <LL_APB2_GRP1_EnableClock+0x28>)
100425ba:	6e19      	ldr	r1, [r3, #96]	@ 0x60
100425bc:	4b06      	ldr	r3, [pc, #24]	@ (100425d8 <LL_APB2_GRP1_EnableClock+0x28>)
100425be:	687a      	ldr	r2, [r7, #4]
100425c0:	430a      	orrs	r2, r1
100425c2:	661a      	str	r2, [r3, #96]	@ 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
100425c4:	4b04      	ldr	r3, [pc, #16]	@ (100425d8 <LL_APB2_GRP1_EnableClock+0x28>)
100425c6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
100425c8:	687a      	ldr	r2, [r7, #4]
100425ca:	4013      	ands	r3, r2
100425cc:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
100425ce:	68fb      	ldr	r3, [r7, #12]
}
100425d0:	46c0      	nop			@ (mov r8, r8)
100425d2:	46bd      	mov	sp, r7
100425d4:	b004      	add	sp, #16
100425d6:	bd80      	pop	{r7, pc}
100425d8:	48400000 	.word	0x48400000

100425dc <LL_APB2_GRP1_IsEnabledClock>:
  * @arg LL_APB2_GRP1_PERIPH_MRBLE
  * @retval uint32_t
  * @note   LL_APB2_GRP1_PERIPH_MRBLE
  */
__STATIC_INLINE uint32_t LL_APB2_GRP1_IsEnabledClock(uint32_t Periphs)
{
100425dc:	b580      	push	{r7, lr}
100425de:	b082      	sub	sp, #8
100425e0:	af00      	add	r7, sp, #0
100425e2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(RCC->APB2ENR, Periphs) == (Periphs)) ? 1UL : 0UL);
100425e4:	4b06      	ldr	r3, [pc, #24]	@ (10042600 <LL_APB2_GRP1_IsEnabledClock+0x24>)
100425e6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
100425e8:	687a      	ldr	r2, [r7, #4]
100425ea:	4013      	ands	r3, r2
100425ec:	687a      	ldr	r2, [r7, #4]
100425ee:	429a      	cmp	r2, r3
100425f0:	d101      	bne.n	100425f6 <LL_APB2_GRP1_IsEnabledClock+0x1a>
100425f2:	2301      	movs	r3, #1
100425f4:	e000      	b.n	100425f8 <LL_APB2_GRP1_IsEnabledClock+0x1c>
100425f6:	2300      	movs	r3, #0
}
100425f8:	0018      	movs	r0, r3
100425fa:	46bd      	mov	sp, r7
100425fc:	b002      	add	sp, #8
100425fe:	bd80      	pop	{r7, pc}
10042600:	48400000 	.word	0x48400000

10042604 <LL_APB2_GRP1_ForceReset>:
  * @arg LL_APB2_GRP1_PERIPH_MRBLE
  * @retval None
  * @note   LL_APB2_GRP1_PERIPH_MRBLE
  */
__STATIC_INLINE void LL_APB2_GRP1_ForceReset(uint32_t Periphs)
{
10042604:	b580      	push	{r7, lr}
10042606:	b082      	sub	sp, #8
10042608:	af00      	add	r7, sp, #0
1004260a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2RSTR, Periphs);
1004260c:	4b04      	ldr	r3, [pc, #16]	@ (10042620 <LL_APB2_GRP1_ForceReset+0x1c>)
1004260e:	6c19      	ldr	r1, [r3, #64]	@ 0x40
10042610:	4b03      	ldr	r3, [pc, #12]	@ (10042620 <LL_APB2_GRP1_ForceReset+0x1c>)
10042612:	687a      	ldr	r2, [r7, #4]
10042614:	430a      	orrs	r2, r1
10042616:	641a      	str	r2, [r3, #64]	@ 0x40
}
10042618:	46c0      	nop			@ (mov r8, r8)
1004261a:	46bd      	mov	sp, r7
1004261c:	b002      	add	sp, #8
1004261e:	bd80      	pop	{r7, pc}
10042620:	48400000 	.word	0x48400000

10042624 <LL_APB2_GRP1_ReleaseReset>:
  * @arg LL_APB2_GRP1_PERIPH_MRBLE
  * @retval None
  * @note   LL_APB2_GRP1_PERIPH_MRBLE
  */
__STATIC_INLINE void LL_APB2_GRP1_ReleaseReset(uint32_t Periphs)
{
10042624:	b580      	push	{r7, lr}
10042626:	b082      	sub	sp, #8
10042628:	af00      	add	r7, sp, #0
1004262a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB2RSTR, Periphs);
1004262c:	4b05      	ldr	r3, [pc, #20]	@ (10042644 <LL_APB2_GRP1_ReleaseReset+0x20>)
1004262e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
10042630:	687b      	ldr	r3, [r7, #4]
10042632:	43d9      	mvns	r1, r3
10042634:	4b03      	ldr	r3, [pc, #12]	@ (10042644 <LL_APB2_GRP1_ReleaseReset+0x20>)
10042636:	400a      	ands	r2, r1
10042638:	641a      	str	r2, [r3, #64]	@ 0x40
}
1004263a:	46c0      	nop			@ (mov r8, r8)
1004263c:	46bd      	mov	sp, r7
1004263e:	b002      	add	sp, #8
10042640:	bd80      	pop	{r7, pc}
10042642:	46c0      	nop			@ (mov r8, r8)
10042644:	48400000 	.word	0x48400000

10042648 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
10042648:	b5f0      	push	{r4, r5, r6, r7, lr}
1004264a:	b08d      	sub	sp, #52	@ 0x34
1004264c:	af04      	add	r7, sp, #16
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
1004264e:	f002 f903 	bl	10044858 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
10042652:	f000 f9b9 	bl	100429c8 <SystemClock_Config>

	/* Configure the peripherals common clocks */
	PeriphCommonClock_Config();
10042656:	f000 f9ee 	bl	10042a36 <PeriphCommonClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
1004265a:	f000 fad9 	bl	10042c10 <MX_GPIO_Init>
	MX_SPI2_Init();
1004265e:	f000 fa4b 	bl	10042af8 <MX_SPI2_Init>
	MX_USART1_UART_Init();
10042662:	f000 fa87 	bl	10042b74 <MX_USART1_UART_Init>
	MX_RADIO_Init();
10042666:	f000 fa03 	bl	10042a70 <MX_RADIO_Init>
	MX_RADIO_TIMER_Init();
1004266a:	f000 fa11 	bl	10042a90 <MX_RADIO_TIMER_Init>
	/* USER CODE BEGIN 2 */
	DW1000_init(&dw1000);
1004266e:	4bc7      	ldr	r3, [pc, #796]	@ (1004298c <main+0x344>)
10042670:	0018      	movs	r0, r3
10042672:	f001 f9ff 	bl	10043a74 <DW1000_init>
	uint8_t pll_lock = DW1000_config(&dw1000, &dw1000_cfg);
10042676:	2310      	movs	r3, #16
10042678:	18fe      	adds	r6, r7, r3
1004267a:	4ac5      	ldr	r2, [pc, #788]	@ (10042990 <main+0x348>)
1004267c:	4bc3      	ldr	r3, [pc, #780]	@ (1004298c <main+0x344>)
1004267e:	0011      	movs	r1, r2
10042680:	0018      	movs	r0, r3
10042682:	f001 fb57 	bl	10043d34 <DW1000_config>
10042686:	0003      	movs	r3, r0
10042688:	7033      	strb	r3, [r6, #0]
	if (pll_lock) {
1004268a:	2310      	movs	r3, #16
1004268c:	18fb      	adds	r3, r7, r3
1004268e:	781b      	ldrb	r3, [r3, #0]
10042690:	2b00      	cmp	r3, #0
10042692:	d006      	beq.n	100426a2 <main+0x5a>
		hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
10042694:	4bbf      	ldr	r3, [pc, #764]	@ (10042994 <main+0x34c>)
10042696:	2208      	movs	r2, #8
10042698:	61da      	str	r2, [r3, #28]
		HAL_SPI_Init(&hspi2);
1004269a:	4bbe      	ldr	r3, [pc, #760]	@ (10042994 <main+0x34c>)
1004269c:	0018      	movs	r0, r3
1004269e:	f006 f977 	bl	10048990 <HAL_SPI_Init>
	}
	uint64_t ID = *((uint64_t*) UID64_BASE);
100426a2:	4bbd      	ldr	r3, [pc, #756]	@ (10042998 <main+0x350>)
100426a4:	681a      	ldr	r2, [r3, #0]
100426a6:	685b      	ldr	r3, [r3, #4]
100426a8:	61ba      	str	r2, [r7, #24]
100426aa:	61fb      	str	r3, [r7, #28]
	uint8_t i = 2;
100426ac:	2317      	movs	r3, #23
100426ae:	18fb      	adds	r3, r7, r3
100426b0:	2202      	movs	r2, #2
100426b2:	701a      	strb	r2, [r3, #0]
	sendData[1] = 8;
100426b4:	4bb9      	ldr	r3, [pc, #740]	@ (1004299c <main+0x354>)
100426b6:	2208      	movs	r2, #8
100426b8:	705a      	strb	r2, [r3, #1]
	do {
		sendData[i++] = ID & 0xFF;
100426ba:	2217      	movs	r2, #23
100426bc:	18bb      	adds	r3, r7, r2
100426be:	781b      	ldrb	r3, [r3, #0]
100426c0:	18ba      	adds	r2, r7, r2
100426c2:	1c59      	adds	r1, r3, #1
100426c4:	7011      	strb	r1, [r2, #0]
100426c6:	0019      	movs	r1, r3
100426c8:	69ba      	ldr	r2, [r7, #24]
100426ca:	69fb      	ldr	r3, [r7, #28]
100426cc:	1c13      	adds	r3, r2, #0
100426ce:	b2da      	uxtb	r2, r3
100426d0:	4bb2      	ldr	r3, [pc, #712]	@ (1004299c <main+0x354>)
100426d2:	545a      	strb	r2, [r3, r1]
	} while (ID >>= 8);
100426d4:	69fb      	ldr	r3, [r7, #28]
100426d6:	061b      	lsls	r3, r3, #24
100426d8:	69ba      	ldr	r2, [r7, #24]
100426da:	0a14      	lsrs	r4, r2, #8
100426dc:	431c      	orrs	r4, r3
100426de:	69fb      	ldr	r3, [r7, #28]
100426e0:	0a1d      	lsrs	r5, r3, #8
100426e2:	61bc      	str	r4, [r7, #24]
100426e4:	61fd      	str	r5, [r7, #28]
100426e6:	69bb      	ldr	r3, [r7, #24]
100426e8:	69fa      	ldr	r2, [r7, #28]
100426ea:	4313      	orrs	r3, r2
100426ec:	d1e5      	bne.n	100426ba <main+0x72>
	HAL_RADIO_SetNetworkID(0x88DF88DF);
100426ee:	4bac      	ldr	r3, [pc, #688]	@ (100429a0 <main+0x358>)
100426f0:	0018      	movs	r0, r3
100426f2:	f003 fde9 	bl	100462c8 <HAL_RADIO_SetNetworkID>
	HAL_RADIO_SetTxPower(0x18);
100426f6:	2018      	movs	r0, #24
100426f8:	f003 fdbc 	bl	10046274 <HAL_RADIO_SetTxPower>
	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
		HAL_RADIO_TIMER_Tick();
100426fc:	f004 f9c6 	bl	10046a8c <HAL_RADIO_TIMER_Tick>
		if (sendNewPacket) {
10042700:	4ba8      	ldr	r3, [pc, #672]	@ (100429a4 <main+0x35c>)
10042702:	781b      	ldrb	r3, [r3, #0]
10042704:	2b00      	cmp	r3, #0
10042706:	d0f9      	beq.n	100426fc <main+0xb4>
			sendNewPacket = FALSE;
10042708:	4ba6      	ldr	r3, [pc, #664]	@ (100429a4 <main+0x35c>)
1004270a:	2200      	movs	r2, #0
1004270c:	701a      	strb	r2, [r3, #0]
			for (current_channel = 0; current_channel < MAX_BEACON_COUNT;
1004270e:	4ba6      	ldr	r3, [pc, #664]	@ (100429a8 <main+0x360>)
10042710:	2200      	movs	r2, #0
10042712:	701a      	strb	r2, [r3, #0]
10042714:	e044      	b.n	100427a0 <main+0x158>
					current_channel++) {
				sendData[0] = 0x1D;
10042716:	4ba1      	ldr	r3, [pc, #644]	@ (1004299c <main+0x354>)
10042718:	221d      	movs	r2, #29
1004271a:	701a      	strb	r2, [r3, #0]
				HAL_RADIO_SendPacketWithAck(current_channel, TX_WAKEUP_TIME,
1004271c:	4ba2      	ldr	r3, [pc, #648]	@ (100429a8 <main+0x360>)
1004271e:	7818      	ldrb	r0, [r3, #0]
10042720:	4ca2      	ldr	r4, [pc, #648]	@ (100429ac <main+0x364>)
10042722:	4a9e      	ldr	r2, [pc, #632]	@ (1004299c <main+0x354>)
10042724:	23c8      	movs	r3, #200	@ 0xc8
10042726:	0059      	lsls	r1, r3, #1
10042728:	4ba1      	ldr	r3, [pc, #644]	@ (100429b0 <main+0x368>)
1004272a:	9302      	str	r3, [sp, #8]
1004272c:	23ff      	movs	r3, #255	@ 0xff
1004272e:	9301      	str	r3, [sp, #4]
10042730:	4ba0      	ldr	r3, [pc, #640]	@ (100429b4 <main+0x36c>)
10042732:	9300      	str	r3, [sp, #0]
10042734:	0023      	movs	r3, r4
10042736:	f003 fdd5 	bl	100462e4 <HAL_RADIO_SendPacketWithAck>
						sendData, receivedData, RX_TIMEOUT_ACK,
						MAX_LL_PACKET_LENGTH, HAL_RADIO_Callback);
				HAL_Delay(40);
1004273a:	2028      	movs	r0, #40	@ 0x28
1004273c:	f002 f912 	bl	10044964 <HAL_Delay>
				HAL_RADIO_TIMER_Tick();
10042740:	f004 f9a4 	bl	10046a8c <HAL_RADIO_TIMER_Tick>
				if (beacon_ID[current_channel] != 0) {
10042744:	4b98      	ldr	r3, [pc, #608]	@ (100429a8 <main+0x360>)
10042746:	781b      	ldrb	r3, [r3, #0]
10042748:	4a9b      	ldr	r2, [pc, #620]	@ (100429b8 <main+0x370>)
1004274a:	00db      	lsls	r3, r3, #3
1004274c:	18d3      	adds	r3, r2, r3
1004274e:	681a      	ldr	r2, [r3, #0]
10042750:	685b      	ldr	r3, [r3, #4]
10042752:	0011      	movs	r1, r2
10042754:	4319      	orrs	r1, r3
10042756:	d01d      	beq.n	10042794 <main+0x14c>
					DW1000_initiator(&dw1000, current_channel);
10042758:	4b93      	ldr	r3, [pc, #588]	@ (100429a8 <main+0x360>)
1004275a:	781a      	ldrb	r2, [r3, #0]
1004275c:	4b8b      	ldr	r3, [pc, #556]	@ (1004298c <main+0x344>)
1004275e:	0011      	movs	r1, r2
10042760:	0018      	movs	r0, r3
10042762:	f001 fdbd 	bl	100442e0 <DW1000_initiator>
					sendData[0] = 0xDD;
10042766:	4b8d      	ldr	r3, [pc, #564]	@ (1004299c <main+0x354>)
10042768:	22dd      	movs	r2, #221	@ 0xdd
1004276a:	701a      	strb	r2, [r3, #0]
					HAL_RADIO_SendPacketWithAck(current_channel,
1004276c:	4b8e      	ldr	r3, [pc, #568]	@ (100429a8 <main+0x360>)
1004276e:	7818      	ldrb	r0, [r3, #0]
10042770:	4c8e      	ldr	r4, [pc, #568]	@ (100429ac <main+0x364>)
10042772:	4a8a      	ldr	r2, [pc, #552]	@ (1004299c <main+0x354>)
10042774:	23c8      	movs	r3, #200	@ 0xc8
10042776:	0059      	lsls	r1, r3, #1
10042778:	4b8d      	ldr	r3, [pc, #564]	@ (100429b0 <main+0x368>)
1004277a:	9302      	str	r3, [sp, #8]
1004277c:	23ff      	movs	r3, #255	@ 0xff
1004277e:	9301      	str	r3, [sp, #4]
10042780:	4b8c      	ldr	r3, [pc, #560]	@ (100429b4 <main+0x36c>)
10042782:	9300      	str	r3, [sp, #0]
10042784:	0023      	movs	r3, r4
10042786:	f003 fdad 	bl	100462e4 <HAL_RADIO_SendPacketWithAck>
					TX_WAKEUP_TIME, sendData, receivedData,
					RX_TIMEOUT_ACK,
					MAX_LL_PACKET_LENGTH, HAL_RADIO_Callback);
					HAL_Delay(40);
1004278a:	2028      	movs	r0, #40	@ 0x28
1004278c:	f002 f8ea 	bl	10044964 <HAL_Delay>
					HAL_RADIO_TIMER_Tick();
10042790:	f004 f97c 	bl	10046a8c <HAL_RADIO_TIMER_Tick>
					current_channel++) {
10042794:	4b84      	ldr	r3, [pc, #528]	@ (100429a8 <main+0x360>)
10042796:	781b      	ldrb	r3, [r3, #0]
10042798:	3301      	adds	r3, #1
1004279a:	b2da      	uxtb	r2, r3
1004279c:	4b82      	ldr	r3, [pc, #520]	@ (100429a8 <main+0x360>)
1004279e:	701a      	strb	r2, [r3, #0]
			for (current_channel = 0; current_channel < MAX_BEACON_COUNT;
100427a0:	4b81      	ldr	r3, [pc, #516]	@ (100429a8 <main+0x360>)
100427a2:	781b      	ldrb	r3, [r3, #0]
100427a4:	2b27      	cmp	r3, #39	@ 0x27
100427a6:	d9b6      	bls.n	10042716 <main+0xce>

				}
			}
			if (beacon_count > 0) {
100427a8:	4b84      	ldr	r3, [pc, #528]	@ (100429bc <main+0x374>)
100427aa:	781b      	ldrb	r3, [r3, #0]
100427ac:	2b00      	cmp	r3, #0
100427ae:	d0a5      	beq.n	100426fc <main+0xb4>
				memset(receivedDistanceData, 0, sizeof receivedDistanceData);
100427b0:	2302      	movs	r3, #2
100427b2:	33ff      	adds	r3, #255	@ 0xff
100427b4:	001a      	movs	r2, r3
100427b6:	4b82      	ldr	r3, [pc, #520]	@ (100429c0 <main+0x378>)
100427b8:	2100      	movs	r1, #0
100427ba:	0018      	movs	r0, r3
100427bc:	f007 fc2a 	bl	1004a014 <memset>
				receivedDistanceData[0] = 0xFF;
100427c0:	4b7f      	ldr	r3, [pc, #508]	@ (100429c0 <main+0x378>)
100427c2:	22ff      	movs	r2, #255	@ 0xff
100427c4:	701a      	strb	r2, [r3, #0]
				uint8_t clicker_uuid[8];
				uint8_t data_size = 10;
100427c6:	2316      	movs	r3, #22
100427c8:	18fb      	adds	r3, r7, r3
100427ca:	220a      	movs	r2, #10
100427cc:	701a      	strb	r2, [r3, #0]
				split_from_uint64(*((uint64_t*) UID64_BASE), clicker_uuid);
100427ce:	4b72      	ldr	r3, [pc, #456]	@ (10042998 <main+0x350>)
100427d0:	6818      	ldr	r0, [r3, #0]
100427d2:	6859      	ldr	r1, [r3, #4]
100427d4:	2308      	movs	r3, #8
100427d6:	18fb      	adds	r3, r7, r3
100427d8:	001a      	movs	r2, r3
100427da:	f000 faa1 	bl	10042d20 <split_from_uint64>
				for (uint8_t k = 2, l = 0; k < 10; k++, l++) {
100427de:	2315      	movs	r3, #21
100427e0:	18fb      	adds	r3, r7, r3
100427e2:	2202      	movs	r2, #2
100427e4:	701a      	strb	r2, [r3, #0]
100427e6:	2314      	movs	r3, #20
100427e8:	18fb      	adds	r3, r7, r3
100427ea:	2200      	movs	r2, #0
100427ec:	701a      	strb	r2, [r3, #0]
100427ee:	e014      	b.n	1004281a <main+0x1d2>
					receivedDistanceData[k] = clicker_uuid[l];
100427f0:	2014      	movs	r0, #20
100427f2:	183b      	adds	r3, r7, r0
100427f4:	781a      	ldrb	r2, [r3, #0]
100427f6:	2415      	movs	r4, #21
100427f8:	193b      	adds	r3, r7, r4
100427fa:	781b      	ldrb	r3, [r3, #0]
100427fc:	2108      	movs	r1, #8
100427fe:	1879      	adds	r1, r7, r1
10042800:	5c89      	ldrb	r1, [r1, r2]
10042802:	4a6f      	ldr	r2, [pc, #444]	@ (100429c0 <main+0x378>)
10042804:	54d1      	strb	r1, [r2, r3]
				for (uint8_t k = 2, l = 0; k < 10; k++, l++) {
10042806:	193b      	adds	r3, r7, r4
10042808:	781a      	ldrb	r2, [r3, #0]
1004280a:	193b      	adds	r3, r7, r4
1004280c:	3201      	adds	r2, #1
1004280e:	701a      	strb	r2, [r3, #0]
10042810:	183b      	adds	r3, r7, r0
10042812:	781a      	ldrb	r2, [r3, #0]
10042814:	183b      	adds	r3, r7, r0
10042816:	3201      	adds	r2, #1
10042818:	701a      	strb	r2, [r3, #0]
1004281a:	2315      	movs	r3, #21
1004281c:	18fb      	adds	r3, r7, r3
1004281e:	781b      	ldrb	r3, [r3, #0]
10042820:	2b09      	cmp	r3, #9
10042822:	d9e5      	bls.n	100427f0 <main+0x1a8>
				}
				for (uint8_t j = 0; j + 1 < MAX_BEACON_COUNT; j++) {
10042824:	2313      	movs	r3, #19
10042826:	18fb      	adds	r3, r7, r3
10042828:	2200      	movs	r2, #0
1004282a:	701a      	strb	r2, [r3, #0]
1004282c:	e07e      	b.n	1004292c <main+0x2e4>
					if (distance_to_beacon[j] != 0 && beacon_ID[j] != 0) {
1004282e:	2013      	movs	r0, #19
10042830:	183b      	adds	r3, r7, r0
10042832:	781b      	ldrb	r3, [r3, #0]
10042834:	4a63      	ldr	r2, [pc, #396]	@ (100429c4 <main+0x37c>)
10042836:	00db      	lsls	r3, r3, #3
10042838:	18d3      	adds	r3, r2, r3
1004283a:	681a      	ldr	r2, [r3, #0]
1004283c:	685b      	ldr	r3, [r3, #4]
1004283e:	0011      	movs	r1, r2
10042840:	4319      	orrs	r1, r3
10042842:	d06d      	beq.n	10042920 <main+0x2d8>
10042844:	183b      	adds	r3, r7, r0
10042846:	781b      	ldrb	r3, [r3, #0]
10042848:	4a5b      	ldr	r2, [pc, #364]	@ (100429b8 <main+0x370>)
1004284a:	00db      	lsls	r3, r3, #3
1004284c:	18d3      	adds	r3, r2, r3
1004284e:	681a      	ldr	r2, [r3, #0]
10042850:	685b      	ldr	r3, [r3, #4]
10042852:	0011      	movs	r1, r2
10042854:	4319      	orrs	r1, r3
10042856:	d063      	beq.n	10042920 <main+0x2d8>
						uint8_t uuid[8];
						split_from_uint64(beacon_ID[j], uuid);
10042858:	183b      	adds	r3, r7, r0
1004285a:	781b      	ldrb	r3, [r3, #0]
1004285c:	4a56      	ldr	r2, [pc, #344]	@ (100429b8 <main+0x370>)
1004285e:	00db      	lsls	r3, r3, #3
10042860:	18d3      	adds	r3, r2, r3
10042862:	6818      	ldr	r0, [r3, #0]
10042864:	6859      	ldr	r1, [r3, #4]
10042866:	003b      	movs	r3, r7
10042868:	001a      	movs	r2, r3
1004286a:	f000 fa59 	bl	10042d20 <split_from_uint64>
						for (uint8_t k = data_size, l = 0; k < data_size + 8;
1004286e:	2312      	movs	r3, #18
10042870:	18fb      	adds	r3, r7, r3
10042872:	2216      	movs	r2, #22
10042874:	18ba      	adds	r2, r7, r2
10042876:	7812      	ldrb	r2, [r2, #0]
10042878:	701a      	strb	r2, [r3, #0]
1004287a:	2311      	movs	r3, #17
1004287c:	18fb      	adds	r3, r7, r3
1004287e:	2200      	movs	r2, #0
10042880:	701a      	strb	r2, [r3, #0]
10042882:	e013      	b.n	100428ac <main+0x264>
								k++, l++) {
							receivedDistanceData[k] = uuid[l];
10042884:	2011      	movs	r0, #17
10042886:	183b      	adds	r3, r7, r0
10042888:	781a      	ldrb	r2, [r3, #0]
1004288a:	2412      	movs	r4, #18
1004288c:	193b      	adds	r3, r7, r4
1004288e:	781b      	ldrb	r3, [r3, #0]
10042890:	0039      	movs	r1, r7
10042892:	5c89      	ldrb	r1, [r1, r2]
10042894:	4a4a      	ldr	r2, [pc, #296]	@ (100429c0 <main+0x378>)
10042896:	54d1      	strb	r1, [r2, r3]
								k++, l++) {
10042898:	193b      	adds	r3, r7, r4
1004289a:	781a      	ldrb	r2, [r3, #0]
1004289c:	193b      	adds	r3, r7, r4
1004289e:	3201      	adds	r2, #1
100428a0:	701a      	strb	r2, [r3, #0]
100428a2:	183b      	adds	r3, r7, r0
100428a4:	781a      	ldrb	r2, [r3, #0]
100428a6:	183b      	adds	r3, r7, r0
100428a8:	3201      	adds	r2, #1
100428aa:	701a      	strb	r2, [r3, #0]
						for (uint8_t k = data_size, l = 0; k < data_size + 8;
100428ac:	2516      	movs	r5, #22
100428ae:	197b      	adds	r3, r7, r5
100428b0:	781b      	ldrb	r3, [r3, #0]
100428b2:	1dda      	adds	r2, r3, #7
100428b4:	2312      	movs	r3, #18
100428b6:	18fb      	adds	r3, r7, r3
100428b8:	781b      	ldrb	r3, [r3, #0]
100428ba:	429a      	cmp	r2, r3
100428bc:	dae2      	bge.n	10042884 <main+0x23c>
						}
						receivedDistanceData[data_size + 8] =
								(uint8_t) distance_to_beacon[j] / 100;
100428be:	2613      	movs	r6, #19
100428c0:	19bb      	adds	r3, r7, r6
100428c2:	781b      	ldrb	r3, [r3, #0]
100428c4:	4a3f      	ldr	r2, [pc, #252]	@ (100429c4 <main+0x37c>)
100428c6:	00db      	lsls	r3, r3, #3
100428c8:	18d3      	adds	r3, r2, r3
100428ca:	681a      	ldr	r2, [r3, #0]
100428cc:	685b      	ldr	r3, [r3, #4]
100428ce:	b2d2      	uxtb	r2, r2
						receivedDistanceData[data_size + 8] =
100428d0:	197b      	adds	r3, r7, r5
100428d2:	781b      	ldrb	r3, [r3, #0]
100428d4:	3308      	adds	r3, #8
100428d6:	001c      	movs	r4, r3
100428d8:	2164      	movs	r1, #100	@ 0x64
100428da:	0010      	movs	r0, r2
100428dc:	f7fd fc2e 	bl	1004013c <__udivsi3>
100428e0:	0003      	movs	r3, r0
100428e2:	b2da      	uxtb	r2, r3
100428e4:	4b36      	ldr	r3, [pc, #216]	@ (100429c0 <main+0x378>)
100428e6:	551a      	strb	r2, [r3, r4]
						receivedDistanceData[data_size + 9] =
								distance_to_beacon[j]
100428e8:	19bb      	adds	r3, r7, r6
100428ea:	781b      	ldrb	r3, [r3, #0]
100428ec:	4a35      	ldr	r2, [pc, #212]	@ (100429c4 <main+0x37c>)
100428ee:	00db      	lsls	r3, r3, #3
100428f0:	18d3      	adds	r3, r2, r3
100428f2:	681a      	ldr	r2, [r3, #0]
100428f4:	685b      	ldr	r3, [r3, #4]
										- (receivedDistanceData[data_size + 8]
100428f6:	b2d1      	uxtb	r1, r2
100428f8:	197b      	adds	r3, r7, r5
100428fa:	781b      	ldrb	r3, [r3, #0]
100428fc:	3308      	adds	r3, #8
100428fe:	4a30      	ldr	r2, [pc, #192]	@ (100429c0 <main+0x378>)
10042900:	5cd3      	ldrb	r3, [r2, r3]
10042902:	2264      	movs	r2, #100	@ 0x64
10042904:	4353      	muls	r3, r2
10042906:	b2da      	uxtb	r2, r3
						receivedDistanceData[data_size + 9] =
10042908:	197b      	adds	r3, r7, r5
1004290a:	781b      	ldrb	r3, [r3, #0]
1004290c:	3309      	adds	r3, #9
										- (receivedDistanceData[data_size + 8]
1004290e:	1a8a      	subs	r2, r1, r2
10042910:	b2d1      	uxtb	r1, r2
						receivedDistanceData[data_size + 9] =
10042912:	4a2b      	ldr	r2, [pc, #172]	@ (100429c0 <main+0x378>)
10042914:	54d1      	strb	r1, [r2, r3]
												* 100);
						data_size += 10;
10042916:	197b      	adds	r3, r7, r5
10042918:	197a      	adds	r2, r7, r5
1004291a:	7812      	ldrb	r2, [r2, #0]
1004291c:	320a      	adds	r2, #10
1004291e:	701a      	strb	r2, [r3, #0]
				for (uint8_t j = 0; j + 1 < MAX_BEACON_COUNT; j++) {
10042920:	2113      	movs	r1, #19
10042922:	187b      	adds	r3, r7, r1
10042924:	781a      	ldrb	r2, [r3, #0]
10042926:	187b      	adds	r3, r7, r1
10042928:	3201      	adds	r2, #1
1004292a:	701a      	strb	r2, [r3, #0]
1004292c:	2313      	movs	r3, #19
1004292e:	18fb      	adds	r3, r7, r3
10042930:	781b      	ldrb	r3, [r3, #0]
10042932:	2b26      	cmp	r3, #38	@ 0x26
10042934:	d800      	bhi.n	10042938 <main+0x2f0>
10042936:	e77a      	b.n	1004282e <main+0x1e6>
					}
				}
				receivedDistanceData[1] = data_size;
10042938:	4b21      	ldr	r3, [pc, #132]	@ (100429c0 <main+0x378>)
1004293a:	2216      	movs	r2, #22
1004293c:	18ba      	adds	r2, r7, r2
1004293e:	7812      	ldrb	r2, [r2, #0]
10042940:	705a      	strb	r2, [r3, #1]
				HAL_RADIO_SendPacketWithAck(SERVER_CHANNEL,
10042942:	481a      	ldr	r0, [pc, #104]	@ (100429ac <main+0x364>)
10042944:	4a1e      	ldr	r2, [pc, #120]	@ (100429c0 <main+0x378>)
10042946:	23c8      	movs	r3, #200	@ 0xc8
10042948:	0059      	lsls	r1, r3, #1
1004294a:	4b19      	ldr	r3, [pc, #100]	@ (100429b0 <main+0x368>)
1004294c:	9302      	str	r3, [sp, #8]
1004294e:	23ff      	movs	r3, #255	@ 0xff
10042950:	9301      	str	r3, [sp, #4]
10042952:	4b18      	ldr	r3, [pc, #96]	@ (100429b4 <main+0x36c>)
10042954:	9300      	str	r3, [sp, #0]
10042956:	0003      	movs	r3, r0
10042958:	2000      	movs	r0, #0
1004295a:	f003 fcc3 	bl	100462e4 <HAL_RADIO_SendPacketWithAck>
				TX_WAKEUP_TIME, receivedDistanceData, receivedData,
				RX_TIMEOUT_ACK,
				MAX_LL_PACKET_LENGTH, HAL_RADIO_Callback);
				HAL_Delay(40);
1004295e:	2028      	movs	r0, #40	@ 0x28
10042960:	f002 f800 	bl	10044964 <HAL_Delay>
				HAL_RADIO_TIMER_Tick();
10042964:	f004 f892 	bl	10046a8c <HAL_RADIO_TIMER_Tick>
				memset(distance_to_beacon, 0, sizeof distance_to_beacon);
10042968:	23a0      	movs	r3, #160	@ 0xa0
1004296a:	005a      	lsls	r2, r3, #1
1004296c:	4b15      	ldr	r3, [pc, #84]	@ (100429c4 <main+0x37c>)
1004296e:	2100      	movs	r1, #0
10042970:	0018      	movs	r0, r3
10042972:	f007 fb4f 	bl	1004a014 <memset>
				memset(beacon_ID, 0, sizeof beacon_ID);
10042976:	23a0      	movs	r3, #160	@ 0xa0
10042978:	005a      	lsls	r2, r3, #1
1004297a:	4b0f      	ldr	r3, [pc, #60]	@ (100429b8 <main+0x370>)
1004297c:	2100      	movs	r1, #0
1004297e:	0018      	movs	r0, r3
10042980:	f007 fb48 	bl	1004a014 <memset>
				beacon_count = 0;
10042984:	4b0d      	ldr	r3, [pc, #52]	@ (100429bc <main+0x374>)
10042986:	2200      	movs	r2, #0
10042988:	701a      	strb	r2, [r3, #0]
		HAL_RADIO_TIMER_Tick();
1004298a:	e6b7      	b.n	100426fc <main+0xb4>
1004298c:	20000af4 	.word	0x20000af4
10042990:	20000b0c 	.word	0x20000b0c
10042994:	2000017c 	.word	0x2000017c
10042998:	10001ef0 	.word	0x10001ef0
1004299c:	20000274 	.word	0x20000274
100429a0:	88df88df 	.word	0x88df88df
100429a4:	2000057d 	.word	0x2000057d
100429a8:	2000057f 	.word	0x2000057f
100429ac:	20000378 	.word	0x20000378
100429b0:	10045929 	.word	0x10045929
100429b4:	00009c40 	.word	0x00009c40
100429b8:	20000580 	.word	0x20000580
100429bc:	2000057e 	.word	0x2000057e
100429c0:	2000047c 	.word	0x2000047c
100429c4:	200006c0 	.word	0x200006c0

100429c8 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
100429c8:	b590      	push	{r4, r7, lr}
100429ca:	b089      	sub	sp, #36	@ 0x24
100429cc:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
100429ce:	2408      	movs	r4, #8
100429d0:	193b      	adds	r3, r7, r4
100429d2:	0018      	movs	r0, r3
100429d4:	2318      	movs	r3, #24
100429d6:	001a      	movs	r2, r3
100429d8:	2100      	movs	r1, #0
100429da:	f007 fb1b 	bl	1004a014 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
100429de:	003b      	movs	r3, r7
100429e0:	0018      	movs	r0, r3
100429e2:	2308      	movs	r3, #8
100429e4:	001a      	movs	r2, r3
100429e6:	2100      	movs	r1, #0
100429e8:	f007 fb14 	bl	1004a014 <memset>

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE
100429ec:	193b      	adds	r3, r7, r4
100429ee:	2203      	movs	r2, #3
100429f0:	601a      	str	r2, [r3, #0]
			| RCC_OSCILLATORTYPE_LSE;
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
100429f2:	193b      	adds	r3, r7, r4
100429f4:	2280      	movs	r2, #128	@ 0x80
100429f6:	0252      	lsls	r2, r2, #9
100429f8:	605a      	str	r2, [r3, #4]
	RCC_OscInitStruct.LSEState = RCC_LSE_ON;
100429fa:	193b      	adds	r3, r7, r4
100429fc:	2210      	movs	r2, #16
100429fe:	60da      	str	r2, [r3, #12]
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
10042a00:	193b      	adds	r3, r7, r4
10042a02:	0018      	movs	r0, r3
10042a04:	f005 fd16 	bl	10048434 <HAL_RCC_OscConfig>
10042a08:	1e03      	subs	r3, r0, #0
10042a0a:	d001      	beq.n	10042a10 <SystemClock_Config+0x48>
		Error_Handler();
10042a0c:	f000 fb2c 	bl	10043068 <Error_Handler>
	}

	/** Configure the SYSCLKSource and SYSCLKDivider
	 */
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_RC64MPLL;
10042a10:	003b      	movs	r3, r7
10042a12:	2200      	movs	r2, #0
10042a14:	601a      	str	r2, [r3, #0]
	RCC_ClkInitStruct.SYSCLKDivider = RCC_RC64MPLL_DIV2;
10042a16:	003b      	movs	r3, r7
10042a18:	2220      	movs	r2, #32
10042a1a:	605a      	str	r2, [r3, #4]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_WAIT_STATES_0)
10042a1c:	003b      	movs	r3, r7
10042a1e:	2100      	movs	r1, #0
10042a20:	0018      	movs	r0, r3
10042a22:	f005 fe57 	bl	100486d4 <HAL_RCC_ClockConfig>
10042a26:	1e03      	subs	r3, r0, #0
10042a28:	d001      	beq.n	10042a2e <SystemClock_Config+0x66>
			!= HAL_OK) {
		Error_Handler();
10042a2a:	f000 fb1d 	bl	10043068 <Error_Handler>
	}
}
10042a2e:	46c0      	nop			@ (mov r8, r8)
10042a30:	46bd      	mov	sp, r7
10042a32:	b009      	add	sp, #36	@ 0x24
10042a34:	bd90      	pop	{r4, r7, pc}

10042a36 <PeriphCommonClock_Config>:

/**
 * @brief Peripherals Common Clock Configuration
 * @retval None
 */
void PeriphCommonClock_Config(void) {
10042a36:	b580      	push	{r7, lr}
10042a38:	b086      	sub	sp, #24
10042a3a:	af00      	add	r7, sp, #0
	RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = { 0 };
10042a3c:	003b      	movs	r3, r7
10042a3e:	0018      	movs	r0, r3
10042a40:	2318      	movs	r3, #24
10042a42:	001a      	movs	r2, r3
10042a44:	2100      	movs	r1, #0
10042a46:	f007 fae5 	bl	1004a014 <memset>

	/** Initializes the peripherals clock
	 */
	PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS;
10042a4a:	003b      	movs	r3, r7
10042a4c:	2202      	movs	r2, #2
10042a4e:	601a      	str	r2, [r3, #0]
	PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLK_DIV4;
10042a50:	003b      	movs	r3, r7
10042a52:	2280      	movs	r2, #128	@ 0x80
10042a54:	0152      	lsls	r2, r2, #5
10042a56:	615a      	str	r2, [r3, #20]

	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK) {
10042a58:	003b      	movs	r3, r7
10042a5a:	0018      	movs	r0, r3
10042a5c:	f005 ff5c 	bl	10048918 <HAL_RCCEx_PeriphCLKConfig>
10042a60:	1e03      	subs	r3, r0, #0
10042a62:	d001      	beq.n	10042a68 <PeriphCommonClock_Config+0x32>
		Error_Handler();
10042a64:	f000 fb00 	bl	10043068 <Error_Handler>
	}
}
10042a68:	46c0      	nop			@ (mov r8, r8)
10042a6a:	46bd      	mov	sp, r7
10042a6c:	b006      	add	sp, #24
10042a6e:	bd80      	pop	{r7, pc}

10042a70 <MX_RADIO_Init>:
/**
 * @brief RADIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_RADIO_Init(void) {
10042a70:	b580      	push	{r7, lr}
10042a72:	b082      	sub	sp, #8
10042a74:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN RADIO_Init 0 */

	/* USER CODE END RADIO_Init 0 */

	RADIO_HandleTypeDef hradio = { 0 };
10042a76:	2300      	movs	r3, #0
10042a78:	607b      	str	r3, [r7, #4]

	/* USER CODE BEGIN RADIO_Init 1 */

	/* USER CODE END RADIO_Init 1 */
	hradio.Instance = RADIO;
10042a7a:	23c0      	movs	r3, #192	@ 0xc0
10042a7c:	05db      	lsls	r3, r3, #23
10042a7e:	607b      	str	r3, [r7, #4]
	HAL_RADIO_Init(&hradio);
10042a80:	1d3b      	adds	r3, r7, #4
10042a82:	0018      	movs	r0, r3
10042a84:	f002 fc18 	bl	100452b8 <HAL_RADIO_Init>
	/* USER CODE BEGIN RADIO_Init 2 */

	/* USER CODE END RADIO_Init 2 */

}
10042a88:	46c0      	nop			@ (mov r8, r8)
10042a8a:	46bd      	mov	sp, r7
10042a8c:	b002      	add	sp, #8
10042a8e:	bd80      	pop	{r7, pc}

10042a90 <MX_RADIO_TIMER_Init>:
/**
 * @brief RADIO_TIMER Initialization Function
 * @param None
 * @retval None
 */
static void MX_RADIO_TIMER_Init(void) {
10042a90:	b580      	push	{r7, lr}
10042a92:	b082      	sub	sp, #8
10042a94:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN RADIO_TIMER_Init 0 */

	/* USER CODE END RADIO_TIMER_Init 0 */

	RADIO_TIMER_InitTypeDef RADIO_TIMER_InitStruct = { 0 };
10042a96:	003b      	movs	r3, r7
10042a98:	0018      	movs	r0, r3
10042a9a:	2308      	movs	r3, #8
10042a9c:	001a      	movs	r2, r3
10042a9e:	2100      	movs	r1, #0
10042aa0:	f007 fab8 	bl	1004a014 <memset>

	/* USER CODE BEGIN RADIO_TIMER_Init 1 */

	/* USER CODE END RADIO_TIMER_Init 1 */

	if (__HAL_RCC_RADIO_IS_CLK_DISABLED()) {
10042aa4:	2001      	movs	r0, #1
10042aa6:	f7ff fd99 	bl	100425dc <LL_APB2_GRP1_IsEnabledClock>
10042aaa:	1e03      	subs	r3, r0, #0
10042aac:	d108      	bne.n	10042ac0 <MX_RADIO_TIMER_Init+0x30>
		/* Radio Peripheral reset */
		__HAL_RCC_RADIO_FORCE_RESET();
10042aae:	2001      	movs	r0, #1
10042ab0:	f7ff fda8 	bl	10042604 <LL_APB2_GRP1_ForceReset>
		__HAL_RCC_RADIO_RELEASE_RESET();
10042ab4:	2001      	movs	r0, #1
10042ab6:	f7ff fdb5 	bl	10042624 <LL_APB2_GRP1_ReleaseReset>

		/* Enable Radio peripheral clock */
		__HAL_RCC_RADIO_CLK_ENABLE();
10042aba:	2001      	movs	r0, #1
10042abc:	f7ff fd78 	bl	100425b0 <LL_APB2_GRP1_EnableClock>
	}
	/* Wait to be sure that the Radio Timer is active */
	while (LL_RADIO_TIMER_GetAbsoluteTime(WAKEUP) < 0x10)
10042ac0:	46c0      	nop			@ (mov r8, r8)
10042ac2:	4b0c      	ldr	r3, [pc, #48]	@ (10042af4 <MX_RADIO_TIMER_Init+0x64>)
10042ac4:	0018      	movs	r0, r3
10042ac6:	f7ff fd53 	bl	10042570 <LL_RADIO_TIMER_GetAbsoluteTime>
10042aca:	0003      	movs	r3, r0
10042acc:	2b0f      	cmp	r3, #15
10042ace:	d9f8      	bls.n	10042ac2 <MX_RADIO_TIMER_Init+0x32>
		;
	RADIO_TIMER_InitStruct.XTAL_StartupTime = 320;
10042ad0:	003b      	movs	r3, r7
10042ad2:	22a0      	movs	r2, #160	@ 0xa0
10042ad4:	0052      	lsls	r2, r2, #1
10042ad6:	801a      	strh	r2, [r3, #0]
	RADIO_TIMER_InitStruct.enableInitialCalibration = FALSE;
10042ad8:	003b      	movs	r3, r7
10042ada:	2200      	movs	r2, #0
10042adc:	709a      	strb	r2, [r3, #2]
	RADIO_TIMER_InitStruct.periodicCalibrationInterval = 0;
10042ade:	003b      	movs	r3, r7
10042ae0:	2200      	movs	r2, #0
10042ae2:	605a      	str	r2, [r3, #4]
	HAL_RADIO_TIMER_Init(&RADIO_TIMER_InitStruct);
10042ae4:	003b      	movs	r3, r7
10042ae6:	0018      	movs	r0, r3
10042ae8:	f003 fec0 	bl	1004686c <HAL_RADIO_TIMER_Init>
	/* USER CODE BEGIN RADIO_TIMER_Init 2 */

	/* USER CODE END RADIO_TIMER_Init 2 */

}
10042aec:	46c0      	nop			@ (mov r8, r8)
10042aee:	46bd      	mov	sp, r7
10042af0:	b002      	add	sp, #8
10042af2:	bd80      	pop	{r7, pc}
10042af4:	60001800 	.word	0x60001800

10042af8 <MX_SPI2_Init>:
/**
 * @brief SPI2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI2_Init(void) {
10042af8:	b580      	push	{r7, lr}
10042afa:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI2_Init 1 */

	/* USER CODE END SPI2_Init 1 */
	/* SPI2 parameter configuration*/
	hspi2.Instance = SPI2;
10042afc:	4b1b      	ldr	r3, [pc, #108]	@ (10042b6c <MX_SPI2_Init+0x74>)
10042afe:	4a1c      	ldr	r2, [pc, #112]	@ (10042b70 <MX_SPI2_Init+0x78>)
10042b00:	601a      	str	r2, [r3, #0]
	hspi2.Init.Mode = SPI_MODE_MASTER;
10042b02:	4b1a      	ldr	r3, [pc, #104]	@ (10042b6c <MX_SPI2_Init+0x74>)
10042b04:	2282      	movs	r2, #130	@ 0x82
10042b06:	0052      	lsls	r2, r2, #1
10042b08:	605a      	str	r2, [r3, #4]
	hspi2.Init.Direction = SPI_DIRECTION_2LINES;
10042b0a:	4b18      	ldr	r3, [pc, #96]	@ (10042b6c <MX_SPI2_Init+0x74>)
10042b0c:	2200      	movs	r2, #0
10042b0e:	609a      	str	r2, [r3, #8]
	hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
10042b10:	4b16      	ldr	r3, [pc, #88]	@ (10042b6c <MX_SPI2_Init+0x74>)
10042b12:	22e0      	movs	r2, #224	@ 0xe0
10042b14:	00d2      	lsls	r2, r2, #3
10042b16:	60da      	str	r2, [r3, #12]
	hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
10042b18:	4b14      	ldr	r3, [pc, #80]	@ (10042b6c <MX_SPI2_Init+0x74>)
10042b1a:	2200      	movs	r2, #0
10042b1c:	611a      	str	r2, [r3, #16]
	hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
10042b1e:	4b13      	ldr	r3, [pc, #76]	@ (10042b6c <MX_SPI2_Init+0x74>)
10042b20:	2200      	movs	r2, #0
10042b22:	615a      	str	r2, [r3, #20]
	hspi2.Init.NSS = SPI_NSS_SOFT;
10042b24:	4b11      	ldr	r3, [pc, #68]	@ (10042b6c <MX_SPI2_Init+0x74>)
10042b26:	2280      	movs	r2, #128	@ 0x80
10042b28:	0092      	lsls	r2, r2, #2
10042b2a:	619a      	str	r2, [r3, #24]
	hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
10042b2c:	4b0f      	ldr	r3, [pc, #60]	@ (10042b6c <MX_SPI2_Init+0x74>)
10042b2e:	2218      	movs	r2, #24
10042b30:	61da      	str	r2, [r3, #28]
	hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
10042b32:	4b0e      	ldr	r3, [pc, #56]	@ (10042b6c <MX_SPI2_Init+0x74>)
10042b34:	2200      	movs	r2, #0
10042b36:	621a      	str	r2, [r3, #32]
	hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
10042b38:	4b0c      	ldr	r3, [pc, #48]	@ (10042b6c <MX_SPI2_Init+0x74>)
10042b3a:	2200      	movs	r2, #0
10042b3c:	625a      	str	r2, [r3, #36]	@ 0x24
	hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
10042b3e:	4b0b      	ldr	r3, [pc, #44]	@ (10042b6c <MX_SPI2_Init+0x74>)
10042b40:	2200      	movs	r2, #0
10042b42:	629a      	str	r2, [r3, #40]	@ 0x28
	hspi2.Init.CRCPolynomial = 7;
10042b44:	4b09      	ldr	r3, [pc, #36]	@ (10042b6c <MX_SPI2_Init+0x74>)
10042b46:	2207      	movs	r2, #7
10042b48:	62da      	str	r2, [r3, #44]	@ 0x2c
	hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
10042b4a:	4b08      	ldr	r3, [pc, #32]	@ (10042b6c <MX_SPI2_Init+0x74>)
10042b4c:	2200      	movs	r2, #0
10042b4e:	631a      	str	r2, [r3, #48]	@ 0x30
	hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
10042b50:	4b06      	ldr	r3, [pc, #24]	@ (10042b6c <MX_SPI2_Init+0x74>)
10042b52:	2208      	movs	r2, #8
10042b54:	635a      	str	r2, [r3, #52]	@ 0x34
	if (HAL_SPI_Init(&hspi2) != HAL_OK) {
10042b56:	4b05      	ldr	r3, [pc, #20]	@ (10042b6c <MX_SPI2_Init+0x74>)
10042b58:	0018      	movs	r0, r3
10042b5a:	f005 ff19 	bl	10048990 <HAL_SPI_Init>
10042b5e:	1e03      	subs	r3, r0, #0
10042b60:	d001      	beq.n	10042b66 <MX_SPI2_Init+0x6e>
		Error_Handler();
10042b62:	f000 fa81 	bl	10043068 <Error_Handler>
	}
	/* USER CODE BEGIN SPI2_Init 2 */

	/* USER CODE END SPI2_Init 2 */

}
10042b66:	46c0      	nop			@ (mov r8, r8)
10042b68:	46bd      	mov	sp, r7
10042b6a:	bd80      	pop	{r7, pc}
10042b6c:	2000017c 	.word	0x2000017c
10042b70:	41003000 	.word	0x41003000

10042b74 <MX_USART1_UART_Init>:
/**
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void) {
10042b74:	b580      	push	{r7, lr}
10042b76:	af00      	add	r7, sp, #0
	/* USER CODE END USART1_Init 0 */

	/* USER CODE BEGIN USART1_Init 1 */

	/* USER CODE END USART1_Init 1 */
	huart1.Instance = USART1;
10042b78:	4b23      	ldr	r3, [pc, #140]	@ (10042c08 <MX_USART1_UART_Init+0x94>)
10042b7a:	4a24      	ldr	r2, [pc, #144]	@ (10042c0c <MX_USART1_UART_Init+0x98>)
10042b7c:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 115200;
10042b7e:	4b22      	ldr	r3, [pc, #136]	@ (10042c08 <MX_USART1_UART_Init+0x94>)
10042b80:	22e1      	movs	r2, #225	@ 0xe1
10042b82:	0252      	lsls	r2, r2, #9
10042b84:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
10042b86:	4b20      	ldr	r3, [pc, #128]	@ (10042c08 <MX_USART1_UART_Init+0x94>)
10042b88:	2200      	movs	r2, #0
10042b8a:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
10042b8c:	4b1e      	ldr	r3, [pc, #120]	@ (10042c08 <MX_USART1_UART_Init+0x94>)
10042b8e:	2200      	movs	r2, #0
10042b90:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
10042b92:	4b1d      	ldr	r3, [pc, #116]	@ (10042c08 <MX_USART1_UART_Init+0x94>)
10042b94:	2200      	movs	r2, #0
10042b96:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
10042b98:	4b1b      	ldr	r3, [pc, #108]	@ (10042c08 <MX_USART1_UART_Init+0x94>)
10042b9a:	220c      	movs	r2, #12
10042b9c:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
10042b9e:	4b1a      	ldr	r3, [pc, #104]	@ (10042c08 <MX_USART1_UART_Init+0x94>)
10042ba0:	2200      	movs	r2, #0
10042ba2:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
10042ba4:	4b18      	ldr	r3, [pc, #96]	@ (10042c08 <MX_USART1_UART_Init+0x94>)
10042ba6:	2200      	movs	r2, #0
10042ba8:	61da      	str	r2, [r3, #28]
	huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
10042baa:	4b17      	ldr	r3, [pc, #92]	@ (10042c08 <MX_USART1_UART_Init+0x94>)
10042bac:	2200      	movs	r2, #0
10042bae:	621a      	str	r2, [r3, #32]
	huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
10042bb0:	4b15      	ldr	r3, [pc, #84]	@ (10042c08 <MX_USART1_UART_Init+0x94>)
10042bb2:	2200      	movs	r2, #0
10042bb4:	625a      	str	r2, [r3, #36]	@ 0x24
	huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
10042bb6:	4b14      	ldr	r3, [pc, #80]	@ (10042c08 <MX_USART1_UART_Init+0x94>)
10042bb8:	2200      	movs	r2, #0
10042bba:	629a      	str	r2, [r3, #40]	@ 0x28
	if (HAL_UART_Init(&huart1) != HAL_OK) {
10042bbc:	4b12      	ldr	r3, [pc, #72]	@ (10042c08 <MX_USART1_UART_Init+0x94>)
10042bbe:	0018      	movs	r0, r3
10042bc0:	f005 ff9e 	bl	10048b00 <HAL_UART_Init>
10042bc4:	1e03      	subs	r3, r0, #0
10042bc6:	d001      	beq.n	10042bcc <MX_USART1_UART_Init+0x58>
		Error_Handler();
10042bc8:	f000 fa4e 	bl	10043068 <Error_Handler>
	}
	if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8)
10042bcc:	4b0e      	ldr	r3, [pc, #56]	@ (10042c08 <MX_USART1_UART_Init+0x94>)
10042bce:	2100      	movs	r1, #0
10042bd0:	0018      	movs	r0, r3
10042bd2:	f006 fbbf 	bl	10049354 <HAL_UARTEx_SetTxFifoThreshold>
10042bd6:	1e03      	subs	r3, r0, #0
10042bd8:	d001      	beq.n	10042bde <MX_USART1_UART_Init+0x6a>
			!= HAL_OK) {
		Error_Handler();
10042bda:	f000 fa45 	bl	10043068 <Error_Handler>
	}
	if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8)
10042bde:	4b0a      	ldr	r3, [pc, #40]	@ (10042c08 <MX_USART1_UART_Init+0x94>)
10042be0:	2100      	movs	r1, #0
10042be2:	0018      	movs	r0, r3
10042be4:	f006 fbf6 	bl	100493d4 <HAL_UARTEx_SetRxFifoThreshold>
10042be8:	1e03      	subs	r3, r0, #0
10042bea:	d001      	beq.n	10042bf0 <MX_USART1_UART_Init+0x7c>
			!= HAL_OK) {
		Error_Handler();
10042bec:	f000 fa3c 	bl	10043068 <Error_Handler>
	}
	if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK) {
10042bf0:	4b05      	ldr	r3, [pc, #20]	@ (10042c08 <MX_USART1_UART_Init+0x94>)
10042bf2:	0018      	movs	r0, r3
10042bf4:	f006 fb74 	bl	100492e0 <HAL_UARTEx_DisableFifoMode>
10042bf8:	1e03      	subs	r3, r0, #0
10042bfa:	d001      	beq.n	10042c00 <MX_USART1_UART_Init+0x8c>
		Error_Handler();
10042bfc:	f000 fa34 	bl	10043068 <Error_Handler>
	}
	/* USER CODE BEGIN USART1_Init 2 */

	/* USER CODE END USART1_Init 2 */

}
10042c00:	46c0      	nop			@ (mov r8, r8)
10042c02:	46bd      	mov	sp, r7
10042c04:	bd80      	pop	{r7, pc}
10042c06:	46c0      	nop			@ (mov r8, r8)
10042c08:	200001e0 	.word	0x200001e0
10042c0c:	41004000 	.word	0x41004000

10042c10 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
10042c10:	b580      	push	{r7, lr}
10042c12:	b086      	sub	sp, #24
10042c14:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
10042c16:	1d3b      	adds	r3, r7, #4
10042c18:	0018      	movs	r0, r3
10042c1a:	2314      	movs	r3, #20
10042c1c:	001a      	movs	r2, r3
10042c1e:	2100      	movs	r1, #0
10042c20:	f007 f9f8 	bl	1004a014 <memset>
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOA_CLK_ENABLE();
10042c24:	2004      	movs	r0, #4
10042c26:	f7ff fcad 	bl	10042584 <LL_AHB1_GRP1_EnableClock>
	__HAL_RCC_GPIOB_CLK_ENABLE();
10042c2a:	2008      	movs	r0, #8
10042c2c:	f7ff fcaa 	bl	10042584 <LL_AHB1_GRP1_EnableClock>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
10042c30:	2390      	movs	r3, #144	@ 0x90
10042c32:	05db      	lsls	r3, r3, #23
10042c34:	2200      	movs	r2, #0
10042c36:	2110      	movs	r1, #16
10042c38:	0018      	movs	r0, r3
10042c3a:	f002 f93e 	bl	10044eba <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_RESET);
10042c3e:	2380      	movs	r3, #128	@ 0x80
10042c40:	00db      	lsls	r3, r3, #3
10042c42:	4835      	ldr	r0, [pc, #212]	@ (10042d18 <MX_GPIO_Init+0x108>)
10042c44:	2200      	movs	r2, #0
10042c46:	0019      	movs	r1, r3
10042c48:	f002 f937 	bl	10044eba <HAL_GPIO_WritePin>

	/*Configure GPIO pin : PA2 */
	GPIO_InitStruct.Pin = GPIO_PIN_2;
10042c4c:	1d3b      	adds	r3, r7, #4
10042c4e:	2204      	movs	r2, #4
10042c50:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
10042c52:	1d3b      	adds	r3, r7, #4
10042c54:	2202      	movs	r2, #2
10042c56:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
10042c58:	1d3b      	adds	r3, r7, #4
10042c5a:	2201      	movs	r2, #1
10042c5c:	609a      	str	r2, [r3, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
10042c5e:	1d3b      	adds	r3, r7, #4
10042c60:	2200      	movs	r2, #0
10042c62:	60da      	str	r2, [r3, #12]
	GPIO_InitStruct.Alternate = GPIO_AF5_SWDIO;
10042c64:	1d3b      	adds	r3, r7, #4
10042c66:	2205      	movs	r2, #5
10042c68:	611a      	str	r2, [r3, #16]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
10042c6a:	1d3a      	adds	r2, r7, #4
10042c6c:	2390      	movs	r3, #144	@ 0x90
10042c6e:	05db      	lsls	r3, r3, #23
10042c70:	0011      	movs	r1, r2
10042c72:	0018      	movs	r0, r3
10042c74:	f001 ff78 	bl	10044b68 <HAL_GPIO_Init>

	/*Configure GPIO pin : PA4 */
	GPIO_InitStruct.Pin = GPIO_PIN_4;
10042c78:	1d3b      	adds	r3, r7, #4
10042c7a:	2210      	movs	r2, #16
10042c7c:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
10042c7e:	1d3b      	adds	r3, r7, #4
10042c80:	2201      	movs	r2, #1
10042c82:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
10042c84:	1d3b      	adds	r3, r7, #4
10042c86:	2200      	movs	r2, #0
10042c88:	609a      	str	r2, [r3, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
10042c8a:	1d3b      	adds	r3, r7, #4
10042c8c:	2200      	movs	r2, #0
10042c8e:	60da      	str	r2, [r3, #12]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
10042c90:	1d3a      	adds	r2, r7, #4
10042c92:	2390      	movs	r3, #144	@ 0x90
10042c94:	05db      	lsls	r3, r3, #23
10042c96:	0011      	movs	r1, r2
10042c98:	0018      	movs	r0, r3
10042c9a:	f001 ff65 	bl	10044b68 <HAL_GPIO_Init>

	/*Configure GPIO pin : PB10 */
	GPIO_InitStruct.Pin = GPIO_PIN_10;
10042c9e:	1d3b      	adds	r3, r7, #4
10042ca0:	2280      	movs	r2, #128	@ 0x80
10042ca2:	00d2      	lsls	r2, r2, #3
10042ca4:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
10042ca6:	1d3b      	adds	r3, r7, #4
10042ca8:	2201      	movs	r2, #1
10042caa:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
10042cac:	1d3b      	adds	r3, r7, #4
10042cae:	2200      	movs	r2, #0
10042cb0:	609a      	str	r2, [r3, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
10042cb2:	1d3b      	adds	r3, r7, #4
10042cb4:	2200      	movs	r2, #0
10042cb6:	60da      	str	r2, [r3, #12]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
10042cb8:	1d3b      	adds	r3, r7, #4
10042cba:	4a17      	ldr	r2, [pc, #92]	@ (10042d18 <MX_GPIO_Init+0x108>)
10042cbc:	0019      	movs	r1, r3
10042cbe:	0010      	movs	r0, r2
10042cc0:	f001 ff52 	bl	10044b68 <HAL_GPIO_Init>

	/*Configure GPIO pin : PB5 */
	GPIO_InitStruct.Pin = GPIO_PIN_5;
10042cc4:	1d3b      	adds	r3, r7, #4
10042cc6:	2220      	movs	r2, #32
10042cc8:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
10042cca:	1d3b      	adds	r3, r7, #4
10042ccc:	2280      	movs	r2, #128	@ 0x80
10042cce:	0252      	lsls	r2, r2, #9
10042cd0:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
10042cd2:	1d3b      	adds	r3, r7, #4
10042cd4:	2201      	movs	r2, #1
10042cd6:	609a      	str	r2, [r3, #8]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
10042cd8:	1d3b      	adds	r3, r7, #4
10042cda:	4a0f      	ldr	r2, [pc, #60]	@ (10042d18 <MX_GPIO_Init+0x108>)
10042cdc:	0019      	movs	r1, r3
10042cde:	0010      	movs	r0, r2
10042ce0:	f001 ff42 	bl	10044b68 <HAL_GPIO_Init>

	/**/
	LL_PWR_EnableGPIOPullUp(LL_PWR_GPIO_A, LL_PWR_GPIO_BIT_2);
10042ce4:	4b0d      	ldr	r3, [pc, #52]	@ (10042d1c <MX_GPIO_Init+0x10c>)
10042ce6:	2104      	movs	r1, #4
10042ce8:	0018      	movs	r0, r3
10042cea:	f7ff fbf9 	bl	100424e0 <LL_PWR_EnableGPIOPullUp>

	/**/
	LL_PWR_SetNoPullA(LL_PWR_GPIO_BIT_4);
10042cee:	2010      	movs	r0, #16
10042cf0:	f7ff fc0e 	bl	10042510 <LL_PWR_SetNoPullA>

	/**/
	LL_PWR_SetNoPullB(LL_PWR_GPIO_BIT_10);
10042cf4:	2380      	movs	r3, #128	@ 0x80
10042cf6:	00db      	lsls	r3, r3, #3
10042cf8:	0018      	movs	r0, r3
10042cfa:	f7ff fc21 	bl	10042540 <LL_PWR_SetNoPullB>

	/* EXTI interrupt init*/
	HAL_NVIC_SetPriority(GPIOB_IRQn, 1, 0);
10042cfe:	2200      	movs	r2, #0
10042d00:	2101      	movs	r1, #1
10042d02:	2010      	movs	r0, #16
10042d04:	f001 fefe 	bl	10044b04 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(GPIOB_IRQn);
10042d08:	2010      	movs	r0, #16
10042d0a:	f001 ff10 	bl	10044b2e <HAL_NVIC_EnableIRQ>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
10042d0e:	46c0      	nop			@ (mov r8, r8)
10042d10:	46bd      	mov	sp, r7
10042d12:	b006      	add	sp, #24
10042d14:	bd80      	pop	{r7, pc}
10042d16:	46c0      	nop			@ (mov r8, r8)
10042d18:	48100000 	.word	0x48100000
10042d1c:	48500020 	.word	0x48500020

10042d20 <split_from_uint64>:

/* USER CODE BEGIN 4 */
void split_from_uint64(uint64_t id, uint8_t *array) {
10042d20:	b5b0      	push	{r4, r5, r7, lr}
10042d22:	b086      	sub	sp, #24
10042d24:	af00      	add	r7, sp, #0
10042d26:	60b8      	str	r0, [r7, #8]
10042d28:	60f9      	str	r1, [r7, #12]
10042d2a:	607a      	str	r2, [r7, #4]
	for (uint8_t i = 0; i < 8; i++) {
10042d2c:	2317      	movs	r3, #23
10042d2e:	18fb      	adds	r3, r7, r3
10042d30:	2200      	movs	r2, #0
10042d32:	701a      	strb	r2, [r3, #0]
10042d34:	e025      	b.n	10042d82 <split_from_uint64+0x62>
		array[i] = (id >> (8 * (7 - i))) & 0xFF;
10042d36:	2317      	movs	r3, #23
10042d38:	18fb      	adds	r3, r7, r3
10042d3a:	781b      	ldrb	r3, [r3, #0]
10042d3c:	2207      	movs	r2, #7
10042d3e:	1ad3      	subs	r3, r2, r3
10042d40:	00db      	lsls	r3, r3, #3
10042d42:	001a      	movs	r2, r3
10042d44:	3a20      	subs	r2, #32
10042d46:	2a00      	cmp	r2, #0
10042d48:	db03      	blt.n	10042d52 <split_from_uint64+0x32>
10042d4a:	68f9      	ldr	r1, [r7, #12]
10042d4c:	40d1      	lsrs	r1, r2
10042d4e:	000c      	movs	r4, r1
10042d50:	e008      	b.n	10042d64 <split_from_uint64+0x44>
10042d52:	2220      	movs	r2, #32
10042d54:	1ad2      	subs	r2, r2, r3
10042d56:	68f9      	ldr	r1, [r7, #12]
10042d58:	4091      	lsls	r1, r2
10042d5a:	000a      	movs	r2, r1
10042d5c:	68b9      	ldr	r1, [r7, #8]
10042d5e:	40d9      	lsrs	r1, r3
10042d60:	000c      	movs	r4, r1
10042d62:	4314      	orrs	r4, r2
10042d64:	68fa      	ldr	r2, [r7, #12]
10042d66:	40da      	lsrs	r2, r3
10042d68:	0015      	movs	r5, r2
10042d6a:	2117      	movs	r1, #23
10042d6c:	187b      	adds	r3, r7, r1
10042d6e:	781b      	ldrb	r3, [r3, #0]
10042d70:	687a      	ldr	r2, [r7, #4]
10042d72:	18d3      	adds	r3, r2, r3
10042d74:	b2e2      	uxtb	r2, r4
10042d76:	701a      	strb	r2, [r3, #0]
	for (uint8_t i = 0; i < 8; i++) {
10042d78:	187b      	adds	r3, r7, r1
10042d7a:	781a      	ldrb	r2, [r3, #0]
10042d7c:	187b      	adds	r3, r7, r1
10042d7e:	3201      	adds	r2, #1
10042d80:	701a      	strb	r2, [r3, #0]
10042d82:	2317      	movs	r3, #23
10042d84:	18fb      	adds	r3, r7, r3
10042d86:	781b      	ldrb	r3, [r3, #0]
10042d88:	2b07      	cmp	r3, #7
10042d8a:	d9d4      	bls.n	10042d36 <split_from_uint64+0x16>
	}
}
10042d8c:	46c0      	nop			@ (mov r8, r8)
10042d8e:	46c0      	nop			@ (mov r8, r8)
10042d90:	46bd      	mov	sp, r7
10042d92:	b006      	add	sp, #24
10042d94:	bdb0      	pop	{r4, r5, r7, pc}

10042d96 <combine_to_uint64>:
uint64_t combine_to_uint64(uint8_t *array, uint8_t start_index) {
10042d96:	b5f0      	push	{r4, r5, r6, r7, lr}
10042d98:	b089      	sub	sp, #36	@ 0x24
10042d9a:	af00      	add	r7, sp, #0
10042d9c:	60f8      	str	r0, [r7, #12]
10042d9e:	0008      	movs	r0, r1
10042da0:	210b      	movs	r1, #11
10042da2:	1879      	adds	r1, r7, r1
10042da4:	7008      	strb	r0, [r1, #0]
	uint64_t result = 0;
10042da6:	2000      	movs	r0, #0
10042da8:	2100      	movs	r1, #0
10042daa:	61b8      	str	r0, [r7, #24]
10042dac:	61f9      	str	r1, [r7, #28]

	for (uint8_t i = 0; i < 8; i++) {
10042dae:	210f      	movs	r1, #15
10042db0:	2008      	movs	r0, #8
10042db2:	1809      	adds	r1, r1, r0
10042db4:	19c9      	adds	r1, r1, r7
10042db6:	2000      	movs	r0, #0
10042db8:	7008      	strb	r0, [r1, #0]
10042dba:	e03e      	b.n	10042e3a <combine_to_uint64+0xa4>
		result |= ((uint64_t) array[start_index + i]) << (8 * (7 - i));
10042dbc:	210b      	movs	r1, #11
10042dbe:	1879      	adds	r1, r7, r1
10042dc0:	7808      	ldrb	r0, [r1, #0]
10042dc2:	260f      	movs	r6, #15
10042dc4:	2108      	movs	r1, #8
10042dc6:	1871      	adds	r1, r6, r1
10042dc8:	19c9      	adds	r1, r1, r7
10042dca:	7809      	ldrb	r1, [r1, #0]
10042dcc:	1841      	adds	r1, r0, r1
10042dce:	0008      	movs	r0, r1
10042dd0:	68f9      	ldr	r1, [r7, #12]
10042dd2:	1809      	adds	r1, r1, r0
10042dd4:	7809      	ldrb	r1, [r1, #0]
10042dd6:	000c      	movs	r4, r1
10042dd8:	2100      	movs	r1, #0
10042dda:	000d      	movs	r5, r1
10042ddc:	2108      	movs	r1, #8
10042dde:	1871      	adds	r1, r6, r1
10042de0:	19c9      	adds	r1, r1, r7
10042de2:	7809      	ldrb	r1, [r1, #0]
10042de4:	2007      	movs	r0, #7
10042de6:	1a41      	subs	r1, r0, r1
10042de8:	00c9      	lsls	r1, r1, #3
10042dea:	0008      	movs	r0, r1
10042dec:	3820      	subs	r0, #32
10042dee:	2800      	cmp	r0, #0
10042df0:	db03      	blt.n	10042dfa <combine_to_uint64+0x64>
10042df2:	0026      	movs	r6, r4
10042df4:	4086      	lsls	r6, r0
10042df6:	0033      	movs	r3, r6
10042df8:	e008      	b.n	10042e0c <combine_to_uint64+0x76>
10042dfa:	2020      	movs	r0, #32
10042dfc:	1a40      	subs	r0, r0, r1
10042dfe:	0026      	movs	r6, r4
10042e00:	40c6      	lsrs	r6, r0
10042e02:	0030      	movs	r0, r6
10042e04:	002e      	movs	r6, r5
10042e06:	408e      	lsls	r6, r1
10042e08:	0033      	movs	r3, r6
10042e0a:	4303      	orrs	r3, r0
10042e0c:	0020      	movs	r0, r4
10042e0e:	4088      	lsls	r0, r1
10042e10:	0002      	movs	r2, r0
10042e12:	69b9      	ldr	r1, [r7, #24]
10042e14:	4311      	orrs	r1, r2
10042e16:	6039      	str	r1, [r7, #0]
10042e18:	69f9      	ldr	r1, [r7, #28]
10042e1a:	4319      	orrs	r1, r3
10042e1c:	6079      	str	r1, [r7, #4]
10042e1e:	6838      	ldr	r0, [r7, #0]
10042e20:	6879      	ldr	r1, [r7, #4]
10042e22:	61b8      	str	r0, [r7, #24]
10042e24:	61f9      	str	r1, [r7, #28]
	for (uint8_t i = 0; i < 8; i++) {
10042e26:	260f      	movs	r6, #15
10042e28:	2108      	movs	r1, #8
10042e2a:	1870      	adds	r0, r6, r1
10042e2c:	19c1      	adds	r1, r0, r7
10042e2e:	7808      	ldrb	r0, [r1, #0]
10042e30:	2108      	movs	r1, #8
10042e32:	1871      	adds	r1, r6, r1
10042e34:	19c9      	adds	r1, r1, r7
10042e36:	3001      	adds	r0, #1
10042e38:	7008      	strb	r0, [r1, #0]
10042e3a:	210f      	movs	r1, #15
10042e3c:	2008      	movs	r0, #8
10042e3e:	1809      	adds	r1, r1, r0
10042e40:	19c9      	adds	r1, r1, r7
10042e42:	7809      	ldrb	r1, [r1, #0]
10042e44:	2907      	cmp	r1, #7
10042e46:	d9b9      	bls.n	10042dbc <combine_to_uint64+0x26>
	}

	return result;
10042e48:	69ba      	ldr	r2, [r7, #24]
10042e4a:	69fb      	ldr	r3, [r7, #28]
}
10042e4c:	0010      	movs	r0, r2
10042e4e:	0019      	movs	r1, r3
10042e50:	46bd      	mov	sp, r7
10042e52:	b009      	add	sp, #36	@ 0x24
10042e54:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

10042e58 <HAL_RADIO_CallbackRcvOk>:

void HAL_RADIO_CallbackRcvOk(RxStats_t *rxPacketStats) {
10042e58:	b5b0      	push	{r4, r5, r7, lr}
10042e5a:	b08c      	sub	sp, #48	@ 0x30
10042e5c:	af00      	add	r7, sp, #0
10042e5e:	6178      	str	r0, [r7, #20]
	if (receivedData[0] == 0x1D) {
10042e60:	4b6e      	ldr	r3, [pc, #440]	@ (1004301c <HAL_RADIO_CallbackRcvOk+0x1c4>)
10042e62:	781b      	ldrb	r3, [r3, #0]
10042e64:	2b1d      	cmp	r3, #29
10042e66:	d000      	beq.n	10042e6a <HAL_RADIO_CallbackRcvOk+0x12>
10042e68:	e0cb      	b.n	10043002 <HAL_RADIO_CallbackRcvOk+0x1aa>
		uint64_t ID = combine_to_uint64(receivedData, 2U);
10042e6a:	4b6c      	ldr	r3, [pc, #432]	@ (1004301c <HAL_RADIO_CallbackRcvOk+0x1c4>)
10042e6c:	2102      	movs	r1, #2
10042e6e:	0018      	movs	r0, r3
10042e70:	f7ff ff91 	bl	10042d96 <combine_to_uint64>
10042e74:	0002      	movs	r2, r0
10042e76:	000b      	movs	r3, r1
10042e78:	623a      	str	r2, [r7, #32]
10042e7a:	627b      	str	r3, [r7, #36]	@ 0x24
		uint8_t duplicate = 0;
10042e7c:	231f      	movs	r3, #31
10042e7e:	2110      	movs	r1, #16
10042e80:	185b      	adds	r3, r3, r1
10042e82:	19db      	adds	r3, r3, r7
10042e84:	2200      	movs	r2, #0
10042e86:	701a      	strb	r2, [r3, #0]
		for (uint8_t i = 0; i < 39; i++) {
10042e88:	231e      	movs	r3, #30
10042e8a:	185b      	adds	r3, r3, r1
10042e8c:	19db      	adds	r3, r3, r7
10042e8e:	2200      	movs	r2, #0
10042e90:	701a      	strb	r2, [r3, #0]
10042e92:	e020      	b.n	10042ed6 <HAL_RADIO_CallbackRcvOk+0x7e>
			if (beacon_ID[i] == ID) {
10042e94:	231e      	movs	r3, #30
10042e96:	2010      	movs	r0, #16
10042e98:	181b      	adds	r3, r3, r0
10042e9a:	19db      	adds	r3, r3, r7
10042e9c:	781b      	ldrb	r3, [r3, #0]
10042e9e:	4a60      	ldr	r2, [pc, #384]	@ (10043020 <HAL_RADIO_CallbackRcvOk+0x1c8>)
10042ea0:	00db      	lsls	r3, r3, #3
10042ea2:	18d3      	adds	r3, r2, r3
10042ea4:	681a      	ldr	r2, [r3, #0]
10042ea6:	685b      	ldr	r3, [r3, #4]
10042ea8:	6a39      	ldr	r1, [r7, #32]
10042eaa:	4291      	cmp	r1, r2
10042eac:	d10a      	bne.n	10042ec4 <HAL_RADIO_CallbackRcvOk+0x6c>
10042eae:	6a79      	ldr	r1, [r7, #36]	@ 0x24
10042eb0:	4299      	cmp	r1, r3
10042eb2:	d107      	bne.n	10042ec4 <HAL_RADIO_CallbackRcvOk+0x6c>
				duplicate++;
10042eb4:	211f      	movs	r1, #31
10042eb6:	180b      	adds	r3, r1, r0
10042eb8:	19db      	adds	r3, r3, r7
10042eba:	781a      	ldrb	r2, [r3, #0]
10042ebc:	180b      	adds	r3, r1, r0
10042ebe:	19db      	adds	r3, r3, r7
10042ec0:	3201      	adds	r2, #1
10042ec2:	701a      	strb	r2, [r3, #0]
		for (uint8_t i = 0; i < 39; i++) {
10042ec4:	211e      	movs	r1, #30
10042ec6:	2010      	movs	r0, #16
10042ec8:	180b      	adds	r3, r1, r0
10042eca:	19db      	adds	r3, r3, r7
10042ecc:	781a      	ldrb	r2, [r3, #0]
10042ece:	180b      	adds	r3, r1, r0
10042ed0:	19db      	adds	r3, r3, r7
10042ed2:	3201      	adds	r2, #1
10042ed4:	701a      	strb	r2, [r3, #0]
10042ed6:	231e      	movs	r3, #30
10042ed8:	2210      	movs	r2, #16
10042eda:	189b      	adds	r3, r3, r2
10042edc:	19db      	adds	r3, r3, r7
10042ede:	781b      	ldrb	r3, [r3, #0]
10042ee0:	2b26      	cmp	r3, #38	@ 0x26
10042ee2:	d9d7      	bls.n	10042e94 <HAL_RADIO_CallbackRcvOk+0x3c>
			}
		}
		if (duplicate == 0) {
10042ee4:	231f      	movs	r3, #31
10042ee6:	189b      	adds	r3, r3, r2
10042ee8:	19db      	adds	r3, r3, r7
10042eea:	781b      	ldrb	r3, [r3, #0]
10042eec:	2b00      	cmp	r3, #0
10042eee:	d108      	bne.n	10042f02 <HAL_RADIO_CallbackRcvOk+0xaa>
			beacon_ID[current_channel] = ID;
10042ef0:	4b4c      	ldr	r3, [pc, #304]	@ (10043024 <HAL_RADIO_CallbackRcvOk+0x1cc>)
10042ef2:	781b      	ldrb	r3, [r3, #0]
10042ef4:	4a4a      	ldr	r2, [pc, #296]	@ (10043020 <HAL_RADIO_CallbackRcvOk+0x1c8>)
10042ef6:	00db      	lsls	r3, r3, #3
10042ef8:	18d1      	adds	r1, r2, r3
10042efa:	6a3a      	ldr	r2, [r7, #32]
10042efc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10042efe:	600a      	str	r2, [r1, #0]
10042f00:	604b      	str	r3, [r1, #4]
		}
		beacon_count = 0;
10042f02:	4b49      	ldr	r3, [pc, #292]	@ (10043028 <HAL_RADIO_CallbackRcvOk+0x1d0>)
10042f04:	2200      	movs	r2, #0
10042f06:	701a      	strb	r2, [r3, #0]
		for (uint8_t i = 0; i < 39; i++) {
10042f08:	231d      	movs	r3, #29
10042f0a:	2210      	movs	r2, #16
10042f0c:	189b      	adds	r3, r3, r2
10042f0e:	19db      	adds	r3, r3, r7
10042f10:	2200      	movs	r2, #0
10042f12:	701a      	strb	r2, [r3, #0]
10042f14:	e01b      	b.n	10042f4e <HAL_RADIO_CallbackRcvOk+0xf6>
			if (beacon_ID[i] != 0) {
10042f16:	231d      	movs	r3, #29
10042f18:	2210      	movs	r2, #16
10042f1a:	189b      	adds	r3, r3, r2
10042f1c:	19db      	adds	r3, r3, r7
10042f1e:	781b      	ldrb	r3, [r3, #0]
10042f20:	4a3f      	ldr	r2, [pc, #252]	@ (10043020 <HAL_RADIO_CallbackRcvOk+0x1c8>)
10042f22:	00db      	lsls	r3, r3, #3
10042f24:	18d3      	adds	r3, r2, r3
10042f26:	681a      	ldr	r2, [r3, #0]
10042f28:	685b      	ldr	r3, [r3, #4]
10042f2a:	0011      	movs	r1, r2
10042f2c:	4319      	orrs	r1, r3
10042f2e:	d005      	beq.n	10042f3c <HAL_RADIO_CallbackRcvOk+0xe4>
				beacon_count++;
10042f30:	4b3d      	ldr	r3, [pc, #244]	@ (10043028 <HAL_RADIO_CallbackRcvOk+0x1d0>)
10042f32:	781b      	ldrb	r3, [r3, #0]
10042f34:	3301      	adds	r3, #1
10042f36:	b2da      	uxtb	r2, r3
10042f38:	4b3b      	ldr	r3, [pc, #236]	@ (10043028 <HAL_RADIO_CallbackRcvOk+0x1d0>)
10042f3a:	701a      	strb	r2, [r3, #0]
		for (uint8_t i = 0; i < 39; i++) {
10042f3c:	211d      	movs	r1, #29
10042f3e:	2010      	movs	r0, #16
10042f40:	180b      	adds	r3, r1, r0
10042f42:	19db      	adds	r3, r3, r7
10042f44:	781a      	ldrb	r2, [r3, #0]
10042f46:	180b      	adds	r3, r1, r0
10042f48:	19db      	adds	r3, r3, r7
10042f4a:	3201      	adds	r2, #1
10042f4c:	701a      	strb	r2, [r3, #0]
10042f4e:	231d      	movs	r3, #29
10042f50:	2210      	movs	r2, #16
10042f52:	189b      	adds	r3, r3, r2
10042f54:	19db      	adds	r3, r3, r7
10042f56:	781b      	ldrb	r3, [r3, #0]
10042f58:	2b26      	cmp	r3, #38	@ 0x26
10042f5a:	d9dc      	bls.n	10042f16 <HAL_RADIO_CallbackRcvOk+0xbe>
			}
		}
		if (receivedData[10] != 0 || receivedData[11] != 0) {
10042f5c:	4b2f      	ldr	r3, [pc, #188]	@ (1004301c <HAL_RADIO_CallbackRcvOk+0x1c4>)
10042f5e:	7a9b      	ldrb	r3, [r3, #10]
10042f60:	2b00      	cmp	r3, #0
10042f62:	d103      	bne.n	10042f6c <HAL_RADIO_CallbackRcvOk+0x114>
10042f64:	4b2d      	ldr	r3, [pc, #180]	@ (1004301c <HAL_RADIO_CallbackRcvOk+0x1c4>)
10042f66:	7adb      	ldrb	r3, [r3, #11]
10042f68:	2b00      	cmp	r3, #0
10042f6a:	d04a      	beq.n	10043002 <HAL_RADIO_CallbackRcvOk+0x1aa>
			uint32_t measured_distance = (receivedData[10] * 100)
10042f6c:	4b2b      	ldr	r3, [pc, #172]	@ (1004301c <HAL_RADIO_CallbackRcvOk+0x1c4>)
10042f6e:	7a9b      	ldrb	r3, [r3, #10]
10042f70:	001a      	movs	r2, r3
10042f72:	2364      	movs	r3, #100	@ 0x64
10042f74:	4353      	muls	r3, r2
					+ receivedData[11];
10042f76:	4a29      	ldr	r2, [pc, #164]	@ (1004301c <HAL_RADIO_CallbackRcvOk+0x1c4>)
10042f78:	7ad2      	ldrb	r2, [r2, #11]
10042f7a:	189b      	adds	r3, r3, r2
			uint32_t measured_distance = (receivedData[10] * 100)
10042f7c:	61fb      	str	r3, [r7, #28]
			uint32_t distance =
					measured_distance
							* (0.5316 + 0.0259 * measured_distance
10042f7e:	69f8      	ldr	r0, [r7, #28]
10042f80:	f7ff fa60 	bl	10042444 <__aeabi_ui2d>
10042f84:	0004      	movs	r4, r0
10042f86:	000d      	movs	r5, r1
10042f88:	69f8      	ldr	r0, [r7, #28]
10042f8a:	f7ff fa5b 	bl	10042444 <__aeabi_ui2d>
10042f8e:	4a27      	ldr	r2, [pc, #156]	@ (1004302c <HAL_RADIO_CallbackRcvOk+0x1d4>)
10042f90:	4b27      	ldr	r3, [pc, #156]	@ (10043030 <HAL_RADIO_CallbackRcvOk+0x1d8>)
10042f92:	f7fe fb67 	bl	10041664 <__aeabi_dmul>
10042f96:	0002      	movs	r2, r0
10042f98:	000b      	movs	r3, r1
10042f9a:	0010      	movs	r0, r2
10042f9c:	0019      	movs	r1, r3
10042f9e:	4a25      	ldr	r2, [pc, #148]	@ (10043034 <HAL_RADIO_CallbackRcvOk+0x1dc>)
10042fa0:	4b25      	ldr	r3, [pc, #148]	@ (10043038 <HAL_RADIO_CallbackRcvOk+0x1e0>)
10042fa2:	f7fd fbb7 	bl	10040714 <__aeabi_dadd>
10042fa6:	0002      	movs	r2, r0
10042fa8:	000b      	movs	r3, r1
10042faa:	603a      	str	r2, [r7, #0]
10042fac:	607b      	str	r3, [r7, #4]
									+ -0.0001
											* (measured_distance
													* measured_distance));
10042fae:	69fb      	ldr	r3, [r7, #28]
10042fb0:	435b      	muls	r3, r3
											* (measured_distance
10042fb2:	0018      	movs	r0, r3
10042fb4:	f7ff fa46 	bl	10042444 <__aeabi_ui2d>
10042fb8:	4a20      	ldr	r2, [pc, #128]	@ (1004303c <HAL_RADIO_CallbackRcvOk+0x1e4>)
10042fba:	4b21      	ldr	r3, [pc, #132]	@ (10043040 <HAL_RADIO_CallbackRcvOk+0x1e8>)
10042fbc:	f7fe fb52 	bl	10041664 <__aeabi_dmul>
10042fc0:	0002      	movs	r2, r0
10042fc2:	000b      	movs	r3, r1
									+ -0.0001
10042fc4:	6838      	ldr	r0, [r7, #0]
10042fc6:	6879      	ldr	r1, [r7, #4]
10042fc8:	f7fd fba4 	bl	10040714 <__aeabi_dadd>
10042fcc:	0002      	movs	r2, r0
10042fce:	000b      	movs	r3, r1
							* (0.5316 + 0.0259 * measured_distance
10042fd0:	0020      	movs	r0, r4
10042fd2:	0029      	movs	r1, r5
10042fd4:	f7fe fb46 	bl	10041664 <__aeabi_dmul>
10042fd8:	0002      	movs	r2, r0
10042fda:	000b      	movs	r3, r1
			uint32_t distance =
10042fdc:	0010      	movs	r0, r2
10042fde:	0019      	movs	r1, r3
10042fe0:	f7fd faae 	bl	10040540 <__aeabi_d2uiz>
10042fe4:	0003      	movs	r3, r0
10042fe6:	61bb      	str	r3, [r7, #24]
			distance_to_beacon[current_channel] = distance;
10042fe8:	4b0e      	ldr	r3, [pc, #56]	@ (10043024 <HAL_RADIO_CallbackRcvOk+0x1cc>)
10042fea:	781b      	ldrb	r3, [r3, #0]
10042fec:	69ba      	ldr	r2, [r7, #24]
10042fee:	60ba      	str	r2, [r7, #8]
10042ff0:	2200      	movs	r2, #0
10042ff2:	60fa      	str	r2, [r7, #12]
10042ff4:	4a13      	ldr	r2, [pc, #76]	@ (10043044 <HAL_RADIO_CallbackRcvOk+0x1ec>)
10042ff6:	00db      	lsls	r3, r3, #3
10042ff8:	18d3      	adds	r3, r2, r3
10042ffa:	68b9      	ldr	r1, [r7, #8]
10042ffc:	68fa      	ldr	r2, [r7, #12]
10042ffe:	6019      	str	r1, [r3, #0]
10043000:	605a      	str	r2, [r3, #4]
		}
	}
	memset(receivedData, 0, sizeof receivedData);
10043002:	2302      	movs	r3, #2
10043004:	33ff      	adds	r3, #255	@ 0xff
10043006:	001a      	movs	r2, r3
10043008:	4b04      	ldr	r3, [pc, #16]	@ (1004301c <HAL_RADIO_CallbackRcvOk+0x1c4>)
1004300a:	2100      	movs	r1, #0
1004300c:	0018      	movs	r0, r3
1004300e:	f007 f801 	bl	1004a014 <memset>
}
10043012:	46c0      	nop			@ (mov r8, r8)
10043014:	46bd      	mov	sp, r7
10043016:	b00c      	add	sp, #48	@ 0x30
10043018:	bdb0      	pop	{r4, r5, r7, pc}
1004301a:	46c0      	nop			@ (mov r8, r8)
1004301c:	20000378 	.word	0x20000378
10043020:	20000580 	.word	0x20000580
10043024:	2000057f 	.word	0x2000057f
10043028:	2000057e 	.word	0x2000057e
1004302c:	93dd97f6 	.word	0x93dd97f6
10043030:	3f9a8587 	.word	0x3f9a8587
10043034:	00d1b717 	.word	0x00d1b717
10043038:	3fe102de 	.word	0x3fe102de
1004303c:	eb1c432d 	.word	0xeb1c432d
10043040:	bf1a36e2 	.word	0xbf1a36e2
10043044:	200006c0 	.word	0x200006c0

10043048 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin) {
10043048:	b580      	push	{r7, lr}
1004304a:	b082      	sub	sp, #8
1004304c:	af00      	add	r7, sp, #0
1004304e:	6078      	str	r0, [r7, #4]
10043050:	000a      	movs	r2, r1
10043052:	1cbb      	adds	r3, r7, #2
10043054:	801a      	strh	r2, [r3, #0]
	sendNewPacket = TRUE;
10043056:	4b03      	ldr	r3, [pc, #12]	@ (10043064 <HAL_GPIO_EXTI_Callback+0x1c>)
10043058:	2201      	movs	r2, #1
1004305a:	701a      	strb	r2, [r3, #0]
}
1004305c:	46c0      	nop			@ (mov r8, r8)
1004305e:	46bd      	mov	sp, r7
10043060:	b002      	add	sp, #8
10043062:	bd80      	pop	{r7, pc}
10043064:	2000057d 	.word	0x2000057d

10043068 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
10043068:	b580      	push	{r7, lr}
1004306a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
1004306c:	b672      	cpsid	i
}
1004306e:	46c0      	nop			@ (mov r8, r8)
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
10043070:	46c0      	nop			@ (mov r8, r8)
10043072:	e7fd      	b.n	10043070 <Error_Handler+0x8>

10043074 <LL_PWR_SetNoPullA>:
{
10043074:	b580      	push	{r7, lr}
10043076:	b082      	sub	sp, #8
10043078:	af00      	add	r7, sp, #0
1004307a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(PWR->PUCRA, GPIONumber);
1004307c:	4b08      	ldr	r3, [pc, #32]	@ (100430a0 <LL_PWR_SetNoPullA+0x2c>)
1004307e:	6a1a      	ldr	r2, [r3, #32]
10043080:	687b      	ldr	r3, [r7, #4]
10043082:	43d9      	mvns	r1, r3
10043084:	4b06      	ldr	r3, [pc, #24]	@ (100430a0 <LL_PWR_SetNoPullA+0x2c>)
10043086:	400a      	ands	r2, r1
10043088:	621a      	str	r2, [r3, #32]
  CLEAR_BIT(PWR->PDCRA, GPIONumber);
1004308a:	4b05      	ldr	r3, [pc, #20]	@ (100430a0 <LL_PWR_SetNoPullA+0x2c>)
1004308c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
1004308e:	687b      	ldr	r3, [r7, #4]
10043090:	43d9      	mvns	r1, r3
10043092:	4b03      	ldr	r3, [pc, #12]	@ (100430a0 <LL_PWR_SetNoPullA+0x2c>)
10043094:	400a      	ands	r2, r1
10043096:	625a      	str	r2, [r3, #36]	@ 0x24
}
10043098:	46c0      	nop			@ (mov r8, r8)
1004309a:	46bd      	mov	sp, r7
1004309c:	b002      	add	sp, #8
1004309e:	bd80      	pop	{r7, pc}
100430a0:	48500000 	.word	0x48500000

100430a4 <LL_AHB1_GRP1_EnableClock>:
{
100430a4:	b580      	push	{r7, lr}
100430a6:	b084      	sub	sp, #16
100430a8:	af00      	add	r7, sp, #0
100430aa:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHBENR, Periphs);
100430ac:	4b07      	ldr	r3, [pc, #28]	@ (100430cc <LL_AHB1_GRP1_EnableClock+0x28>)
100430ae:	6d19      	ldr	r1, [r3, #80]	@ 0x50
100430b0:	4b06      	ldr	r3, [pc, #24]	@ (100430cc <LL_AHB1_GRP1_EnableClock+0x28>)
100430b2:	687a      	ldr	r2, [r7, #4]
100430b4:	430a      	orrs	r2, r1
100430b6:	651a      	str	r2, [r3, #80]	@ 0x50
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
100430b8:	4b04      	ldr	r3, [pc, #16]	@ (100430cc <LL_AHB1_GRP1_EnableClock+0x28>)
100430ba:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
100430bc:	687a      	ldr	r2, [r7, #4]
100430be:	4013      	ands	r3, r2
100430c0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
100430c2:	68fb      	ldr	r3, [r7, #12]
}
100430c4:	46c0      	nop			@ (mov r8, r8)
100430c6:	46bd      	mov	sp, r7
100430c8:	b004      	add	sp, #16
100430ca:	bd80      	pop	{r7, pc}
100430cc:	48400000 	.word	0x48400000

100430d0 <LL_APB0_GRP1_EnableClock>:
{
100430d0:	b580      	push	{r7, lr}
100430d2:	b084      	sub	sp, #16
100430d4:	af00      	add	r7, sp, #0
100430d6:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB0ENR, Periphs);
100430d8:	4b07      	ldr	r3, [pc, #28]	@ (100430f8 <LL_APB0_GRP1_EnableClock+0x28>)
100430da:	6d59      	ldr	r1, [r3, #84]	@ 0x54
100430dc:	4b06      	ldr	r3, [pc, #24]	@ (100430f8 <LL_APB0_GRP1_EnableClock+0x28>)
100430de:	687a      	ldr	r2, [r7, #4]
100430e0:	430a      	orrs	r2, r1
100430e2:	655a      	str	r2, [r3, #84]	@ 0x54
  tmpreg = READ_BIT(RCC->APB0ENR, Periphs);
100430e4:	4b04      	ldr	r3, [pc, #16]	@ (100430f8 <LL_APB0_GRP1_EnableClock+0x28>)
100430e6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
100430e8:	687a      	ldr	r2, [r7, #4]
100430ea:	4013      	ands	r3, r2
100430ec:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
100430ee:	68fb      	ldr	r3, [r7, #12]
}
100430f0:	46c0      	nop			@ (mov r8, r8)
100430f2:	46bd      	mov	sp, r7
100430f4:	b004      	add	sp, #16
100430f6:	bd80      	pop	{r7, pc}
100430f8:	48400000 	.word	0x48400000

100430fc <LL_APB1_GRP1_EnableClock>:
{
100430fc:	b580      	push	{r7, lr}
100430fe:	b084      	sub	sp, #16
10043100:	af00      	add	r7, sp, #0
10043102:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
10043104:	4b07      	ldr	r3, [pc, #28]	@ (10043124 <LL_APB1_GRP1_EnableClock+0x28>)
10043106:	6d99      	ldr	r1, [r3, #88]	@ 0x58
10043108:	4b06      	ldr	r3, [pc, #24]	@ (10043124 <LL_APB1_GRP1_EnableClock+0x28>)
1004310a:	687a      	ldr	r2, [r7, #4]
1004310c:	430a      	orrs	r2, r1
1004310e:	659a      	str	r2, [r3, #88]	@ 0x58
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
10043110:	4b04      	ldr	r3, [pc, #16]	@ (10043124 <LL_APB1_GRP1_EnableClock+0x28>)
10043112:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
10043114:	687a      	ldr	r2, [r7, #4]
10043116:	4013      	ands	r3, r2
10043118:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
1004311a:	68fb      	ldr	r3, [r7, #12]
}
1004311c:	46c0      	nop			@ (mov r8, r8)
1004311e:	46bd      	mov	sp, r7
10043120:	b004      	add	sp, #16
10043122:	bd80      	pop	{r7, pc}
10043124:	48400000 	.word	0x48400000

10043128 <LL_APB2_GRP1_EnableClock>:
{
10043128:	b580      	push	{r7, lr}
1004312a:	b084      	sub	sp, #16
1004312c:	af00      	add	r7, sp, #0
1004312e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
10043130:	4b07      	ldr	r3, [pc, #28]	@ (10043150 <LL_APB2_GRP1_EnableClock+0x28>)
10043132:	6e19      	ldr	r1, [r3, #96]	@ 0x60
10043134:	4b06      	ldr	r3, [pc, #24]	@ (10043150 <LL_APB2_GRP1_EnableClock+0x28>)
10043136:	687a      	ldr	r2, [r7, #4]
10043138:	430a      	orrs	r2, r1
1004313a:	661a      	str	r2, [r3, #96]	@ 0x60
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
1004313c:	4b04      	ldr	r3, [pc, #16]	@ (10043150 <LL_APB2_GRP1_EnableClock+0x28>)
1004313e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
10043140:	687a      	ldr	r2, [r7, #4]
10043142:	4013      	ands	r3, r2
10043144:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
10043146:	68fb      	ldr	r3, [r7, #12]
}
10043148:	46c0      	nop			@ (mov r8, r8)
1004314a:	46bd      	mov	sp, r7
1004314c:	b004      	add	sp, #16
1004314e:	bd80      	pop	{r7, pc}
10043150:	48400000 	.word	0x48400000

10043154 <LL_APB2_GRP1_IsEnabledClock>:
{
10043154:	b580      	push	{r7, lr}
10043156:	b082      	sub	sp, #8
10043158:	af00      	add	r7, sp, #0
1004315a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(RCC->APB2ENR, Periphs) == (Periphs)) ? 1UL : 0UL);
1004315c:	4b06      	ldr	r3, [pc, #24]	@ (10043178 <LL_APB2_GRP1_IsEnabledClock+0x24>)
1004315e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
10043160:	687a      	ldr	r2, [r7, #4]
10043162:	4013      	ands	r3, r2
10043164:	687a      	ldr	r2, [r7, #4]
10043166:	429a      	cmp	r2, r3
10043168:	d101      	bne.n	1004316e <LL_APB2_GRP1_IsEnabledClock+0x1a>
1004316a:	2301      	movs	r3, #1
1004316c:	e000      	b.n	10043170 <LL_APB2_GRP1_IsEnabledClock+0x1c>
1004316e:	2300      	movs	r3, #0
}
10043170:	0018      	movs	r0, r3
10043172:	46bd      	mov	sp, r7
10043174:	b002      	add	sp, #8
10043176:	bd80      	pop	{r7, pc}
10043178:	48400000 	.word	0x48400000

1004317c <LL_APB2_GRP1_ForceReset>:
{
1004317c:	b580      	push	{r7, lr}
1004317e:	b082      	sub	sp, #8
10043180:	af00      	add	r7, sp, #0
10043182:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2RSTR, Periphs);
10043184:	4b04      	ldr	r3, [pc, #16]	@ (10043198 <LL_APB2_GRP1_ForceReset+0x1c>)
10043186:	6c19      	ldr	r1, [r3, #64]	@ 0x40
10043188:	4b03      	ldr	r3, [pc, #12]	@ (10043198 <LL_APB2_GRP1_ForceReset+0x1c>)
1004318a:	687a      	ldr	r2, [r7, #4]
1004318c:	430a      	orrs	r2, r1
1004318e:	641a      	str	r2, [r3, #64]	@ 0x40
}
10043190:	46c0      	nop			@ (mov r8, r8)
10043192:	46bd      	mov	sp, r7
10043194:	b002      	add	sp, #8
10043196:	bd80      	pop	{r7, pc}
10043198:	48400000 	.word	0x48400000

1004319c <LL_APB2_GRP1_ReleaseReset>:
{
1004319c:	b580      	push	{r7, lr}
1004319e:	b082      	sub	sp, #8
100431a0:	af00      	add	r7, sp, #0
100431a2:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB2RSTR, Periphs);
100431a4:	4b05      	ldr	r3, [pc, #20]	@ (100431bc <LL_APB2_GRP1_ReleaseReset+0x20>)
100431a6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
100431a8:	687b      	ldr	r3, [r7, #4]
100431aa:	43d9      	mvns	r1, r3
100431ac:	4b03      	ldr	r3, [pc, #12]	@ (100431bc <LL_APB2_GRP1_ReleaseReset+0x20>)
100431ae:	400a      	ands	r2, r1
100431b0:	641a      	str	r2, [r3, #64]	@ 0x40
}
100431b2:	46c0      	nop			@ (mov r8, r8)
100431b4:	46bd      	mov	sp, r7
100431b6:	b002      	add	sp, #8
100431b8:	bd80      	pop	{r7, pc}
100431ba:	46c0      	nop			@ (mov r8, r8)
100431bc:	48400000 	.word	0x48400000

100431c0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
100431c0:	b580      	push	{r7, lr}
100431c2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
100431c4:	2380      	movs	r3, #128	@ 0x80
100431c6:	005b      	lsls	r3, r3, #1
100431c8:	0018      	movs	r0, r3
100431ca:	f7ff ff81 	bl	100430d0 <LL_APB0_GRP1_EnableClock>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
100431ce:	46c0      	nop			@ (mov r8, r8)
100431d0:	46bd      	mov	sp, r7
100431d2:	bd80      	pop	{r7, pc}

100431d4 <HAL_RADIO_MspInit>:
* This function configures the hardware resources used in this example
* @param hradio: RADIO handle pointer
* @retval None
*/
void HAL_RADIO_MspInit(RADIO_HandleTypeDef* hradio)
{
100431d4:	b590      	push	{r4, r7, lr}
100431d6:	b089      	sub	sp, #36	@ 0x24
100431d8:	af00      	add	r7, sp, #0
100431da:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
100431dc:	2408      	movs	r4, #8
100431de:	193b      	adds	r3, r7, r4
100431e0:	0018      	movs	r0, r3
100431e2:	2318      	movs	r3, #24
100431e4:	001a      	movs	r2, r3
100431e6:	2100      	movs	r1, #0
100431e8:	f006 ff14 	bl	1004a014 <memset>
  if(hradio->Instance==RADIO)
100431ec:	687b      	ldr	r3, [r7, #4]
100431ee:	681a      	ldr	r2, [r3, #0]
100431f0:	23c0      	movs	r3, #192	@ 0xc0
100431f2:	05db      	lsls	r3, r3, #23
100431f4:	429a      	cmp	r2, r3
100431f6:	d12b      	bne.n	10043250 <HAL_RADIO_MspInit+0x7c>

  /* USER CODE END RADIO_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RF;
100431f8:	193b      	adds	r3, r7, r4
100431fa:	2201      	movs	r2, #1
100431fc:	601a      	str	r2, [r3, #0]
    PeriphClkInitStruct.RFClockSelection = RCC_RF_CLK_32M;
100431fe:	193b      	adds	r3, r7, r4
10043200:	2202      	movs	r2, #2
10043202:	611a      	str	r2, [r3, #16]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
10043204:	193b      	adds	r3, r7, r4
10043206:	0018      	movs	r0, r3
10043208:	f005 fb86 	bl	10048918 <HAL_RCCEx_PeriphCLKConfig>
1004320c:	1e03      	subs	r3, r0, #0
1004320e:	d001      	beq.n	10043214 <HAL_RADIO_MspInit+0x40>
    {
      Error_Handler();
10043210:	f7ff ff2a 	bl	10043068 <Error_Handler>
    }

    /* Peripheral clock enable */
    if (__HAL_RCC_RADIO_IS_CLK_DISABLED())
10043214:	2001      	movs	r0, #1
10043216:	f7ff ff9d 	bl	10043154 <LL_APB2_GRP1_IsEnabledClock>
1004321a:	1e03      	subs	r3, r0, #0
1004321c:	d108      	bne.n	10043230 <HAL_RADIO_MspInit+0x5c>
    {
      /* Radio reset */
      __HAL_RCC_RADIO_FORCE_RESET();
1004321e:	2001      	movs	r0, #1
10043220:	f7ff ffac 	bl	1004317c <LL_APB2_GRP1_ForceReset>
      __HAL_RCC_RADIO_RELEASE_RESET();
10043224:	2001      	movs	r0, #1
10043226:	f7ff ffb9 	bl	1004319c <LL_APB2_GRP1_ReleaseReset>

      /* Enable Radio peripheral clock */
      __HAL_RCC_RADIO_CLK_ENABLE();
1004322a:	2001      	movs	r0, #1
1004322c:	f7ff ff7c 	bl	10043128 <LL_APB2_GRP1_EnableClock>
    }

    /* RADIO interrupt Init */
    HAL_NVIC_SetPriority(RADIO_TXRX_IRQn, 0, 0);
10043230:	2200      	movs	r2, #0
10043232:	2100      	movs	r1, #0
10043234:	2012      	movs	r0, #18
10043236:	f001 fc65 	bl	10044b04 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RADIO_TXRX_IRQn);
1004323a:	2012      	movs	r0, #18
1004323c:	f001 fc77 	bl	10044b2e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(RADIO_TXRX_SEQ_IRQn, 0, 0);
10043240:	2200      	movs	r2, #0
10043242:	2100      	movs	r1, #0
10043244:	2019      	movs	r0, #25
10043246:	f001 fc5d 	bl	10044b04 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RADIO_TXRX_SEQ_IRQn);
1004324a:	2019      	movs	r0, #25
1004324c:	f001 fc6f 	bl	10044b2e <HAL_NVIC_EnableIRQ>

  /* USER CODE END RADIO_MspInit 1 */

  }

}
10043250:	46c0      	nop			@ (mov r8, r8)
10043252:	46bd      	mov	sp, r7
10043254:	b009      	add	sp, #36	@ 0x24
10043256:	bd90      	pop	{r4, r7, pc}

10043258 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
10043258:	b590      	push	{r4, r7, lr}
1004325a:	b089      	sub	sp, #36	@ 0x24
1004325c:	af00      	add	r7, sp, #0
1004325e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
10043260:	240c      	movs	r4, #12
10043262:	193b      	adds	r3, r7, r4
10043264:	0018      	movs	r0, r3
10043266:	2314      	movs	r3, #20
10043268:	001a      	movs	r2, r3
1004326a:	2100      	movs	r1, #0
1004326c:	f006 fed2 	bl	1004a014 <memset>
  if(hspi->Instance==SPI2)
10043270:	687b      	ldr	r3, [r7, #4]
10043272:	681b      	ldr	r3, [r3, #0]
10043274:	4a14      	ldr	r2, [pc, #80]	@ (100432c8 <HAL_SPI_MspInit+0x70>)
10043276:	4293      	cmp	r3, r2
10043278:	d121      	bne.n	100432be <HAL_SPI_MspInit+0x66>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
1004327a:	2380      	movs	r3, #128	@ 0x80
1004327c:	015b      	lsls	r3, r3, #5
1004327e:	0018      	movs	r0, r3
10043280:	f7ff ff3c 	bl	100430fc <LL_APB1_GRP1_EnableClock>

    __HAL_RCC_GPIOA_CLK_ENABLE();
10043284:	2004      	movs	r0, #4
10043286:	f7ff ff0d 	bl	100430a4 <LL_AHB1_GRP1_EnableClock>
    /**SPI2 GPIO Configuration
    PA5     ------> SPI2_SCK
    PA6     ------> SPI2_MOSI
    PA7     ------> SPI2_MISO
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
1004328a:	0021      	movs	r1, r4
1004328c:	187b      	adds	r3, r7, r1
1004328e:	22e0      	movs	r2, #224	@ 0xe0
10043290:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
10043292:	187b      	adds	r3, r7, r1
10043294:	2202      	movs	r2, #2
10043296:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
10043298:	187b      	adds	r3, r7, r1
1004329a:	2200      	movs	r2, #0
1004329c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
1004329e:	187b      	adds	r3, r7, r1
100432a0:	2200      	movs	r2, #0
100432a2:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_SPI2;
100432a4:	187b      	adds	r3, r7, r1
100432a6:	2201      	movs	r2, #1
100432a8:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
100432aa:	187a      	adds	r2, r7, r1
100432ac:	2390      	movs	r3, #144	@ 0x90
100432ae:	05db      	lsls	r3, r3, #23
100432b0:	0011      	movs	r1, r2
100432b2:	0018      	movs	r0, r3
100432b4:	f001 fc58 	bl	10044b68 <HAL_GPIO_Init>

    LL_PWR_SetNoPullA(LL_PWR_GPIO_BIT_5|LL_PWR_GPIO_BIT_6|LL_PWR_GPIO_BIT_7);
100432b8:	20e0      	movs	r0, #224	@ 0xe0
100432ba:	f7ff fedb 	bl	10043074 <LL_PWR_SetNoPullA>

  /* USER CODE END SPI2_MspInit 1 */

  }

}
100432be:	46c0      	nop			@ (mov r8, r8)
100432c0:	46bd      	mov	sp, r7
100432c2:	b009      	add	sp, #36	@ 0x24
100432c4:	bd90      	pop	{r4, r7, pc}
100432c6:	46c0      	nop			@ (mov r8, r8)
100432c8:	41003000 	.word	0x41003000

100432cc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
100432cc:	b590      	push	{r4, r7, lr}
100432ce:	b089      	sub	sp, #36	@ 0x24
100432d0:	af00      	add	r7, sp, #0
100432d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
100432d4:	240c      	movs	r4, #12
100432d6:	193b      	adds	r3, r7, r4
100432d8:	0018      	movs	r0, r3
100432da:	2314      	movs	r3, #20
100432dc:	001a      	movs	r2, r3
100432de:	2100      	movs	r1, #0
100432e0:	f006 fe98 	bl	1004a014 <memset>
  if(huart->Instance==USART1)
100432e4:	687b      	ldr	r3, [r7, #4]
100432e6:	681b      	ldr	r3, [r3, #0]
100432e8:	4a15      	ldr	r2, [pc, #84]	@ (10043340 <HAL_UART_MspInit+0x74>)
100432ea:	4293      	cmp	r3, r2
100432ec:	d124      	bne.n	10043338 <HAL_UART_MspInit+0x6c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
100432ee:	2380      	movs	r3, #128	@ 0x80
100432f0:	00db      	lsls	r3, r3, #3
100432f2:	0018      	movs	r0, r3
100432f4:	f7ff ff02 	bl	100430fc <LL_APB1_GRP1_EnableClock>

    __HAL_RCC_GPIOA_CLK_ENABLE();
100432f8:	2004      	movs	r0, #4
100432fa:	f7ff fed3 	bl	100430a4 <LL_AHB1_GRP1_EnableClock>
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA8     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_8;
100432fe:	193b      	adds	r3, r7, r4
10043300:	22c0      	movs	r2, #192	@ 0xc0
10043302:	0092      	lsls	r2, r2, #2
10043304:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
10043306:	0021      	movs	r1, r4
10043308:	187b      	adds	r3, r7, r1
1004330a:	2202      	movs	r2, #2
1004330c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
1004330e:	187b      	adds	r3, r7, r1
10043310:	2200      	movs	r2, #0
10043312:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
10043314:	187b      	adds	r3, r7, r1
10043316:	2200      	movs	r2, #0
10043318:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_USART1;
1004331a:	187b      	adds	r3, r7, r1
1004331c:	2200      	movs	r2, #0
1004331e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
10043320:	187a      	adds	r2, r7, r1
10043322:	2390      	movs	r3, #144	@ 0x90
10043324:	05db      	lsls	r3, r3, #23
10043326:	0011      	movs	r1, r2
10043328:	0018      	movs	r0, r3
1004332a:	f001 fc1d 	bl	10044b68 <HAL_GPIO_Init>

    LL_PWR_SetNoPullA(LL_PWR_GPIO_BIT_9|LL_PWR_GPIO_BIT_8);
1004332e:	23c0      	movs	r3, #192	@ 0xc0
10043330:	009b      	lsls	r3, r3, #2
10043332:	0018      	movs	r0, r3
10043334:	f7ff fe9e 	bl	10043074 <LL_PWR_SetNoPullA>

  /* USER CODE END USART1_MspInit 1 */

  }

}
10043338:	46c0      	nop			@ (mov r8, r8)
1004333a:	46bd      	mov	sp, r7
1004333c:	b009      	add	sp, #36	@ 0x24
1004333e:	bd90      	pop	{r4, r7, pc}
10043340:	41004000 	.word	0x41004000

10043344 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
10043344:	b580      	push	{r7, lr}
10043346:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
10043348:	46c0      	nop			@ (mov r8, r8)
1004334a:	e7fd      	b.n	10043348 <NMI_Handler+0x4>

1004334c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
1004334c:	b580      	push	{r7, lr}
1004334e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
10043350:	46c0      	nop			@ (mov r8, r8)
10043352:	e7fd      	b.n	10043350 <HardFault_Handler+0x4>

10043354 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
10043354:	b580      	push	{r7, lr}
10043356:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
10043358:	46c0      	nop			@ (mov r8, r8)
1004335a:	46bd      	mov	sp, r7
1004335c:	bd80      	pop	{r7, pc}

1004335e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
1004335e:	b580      	push	{r7, lr}
10043360:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
10043362:	46c0      	nop			@ (mov r8, r8)
10043364:	46bd      	mov	sp, r7
10043366:	bd80      	pop	{r7, pc}

10043368 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
10043368:	b580      	push	{r7, lr}
1004336a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
1004336c:	f001 fad4 	bl	10044918 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
10043370:	46c0      	nop			@ (mov r8, r8)
10043372:	46bd      	mov	sp, r7
10043374:	bd80      	pop	{r7, pc}
	...

10043378 <GPIOB_IRQHandler>:

/**
  * @brief This function handles GPIOB interrupt.
  */
void GPIOB_IRQHandler(void)
{
10043378:	b580      	push	{r7, lr}
1004337a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GPIOB_IRQn 0 */

  /* USER CODE END GPIOB_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIOB,GPIO_PIN_5);
1004337c:	4b03      	ldr	r3, [pc, #12]	@ (1004338c <GPIOB_IRQHandler+0x14>)
1004337e:	2120      	movs	r1, #32
10043380:	0018      	movs	r0, r3
10043382:	f001 fdb7 	bl	10044ef4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN GPIOB_IRQn 1 */

  /* USER CODE END GPIOB_IRQn 1 */
}
10043386:	46c0      	nop			@ (mov r8, r8)
10043388:	46bd      	mov	sp, r7
1004338a:	bd80      	pop	{r7, pc}
1004338c:	48100000 	.word	0x48100000

10043390 <RADIO_TIMER_CPU_WKUP_IRQHandler>:

/**
  * @brief This function handles RADIO_TIMER_CPU_WKUP global interrupt.
  */
void RADIO_TIMER_CPU_WKUP_IRQHandler(void)
{
10043390:	b580      	push	{r7, lr}
10043392:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RADIO_TIMER_CPU_WKUP_IRQn 0 */

  /* USER CODE END RADIO_TIMER_CPU_WKUP_IRQn 0 */
  HAL_RADIO_TIMER_CPU_WKUP_IRQHandler();
10043394:	f004 fe50 	bl	10048038 <HAL_RADIO_TIMER_CPU_WKUP_IRQHandler>
  /* USER CODE BEGIN RADIO_TIMER_CPU_WKUP_IRQn 1 */

  /* USER CODE END RADIO_TIMER_CPU_WKUP_IRQn 1 */
}
10043398:	46c0      	nop			@ (mov r8, r8)
1004339a:	46bd      	mov	sp, r7
1004339c:	bd80      	pop	{r7, pc}

1004339e <RADIO_TIMER_TXRX_WKUP_IRQHandler>:

/**
  * @brief This function handles RADIO_TIMER_TXRX_WKUP global interrupt.
  */
void RADIO_TIMER_TXRX_WKUP_IRQHandler(void)
{
1004339e:	b580      	push	{r7, lr}
100433a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RADIO_TIMER_TXRX_WKUP_IRQn 0 */

  /* USER CODE END RADIO_TIMER_TXRX_WKUP_IRQn 0 */
  HAL_RADIO_TIMER_TXRX_WKUP_IRQHandler();
100433a2:	f004 fe52 	bl	1004804a <HAL_RADIO_TIMER_TXRX_WKUP_IRQHandler>
  /* USER CODE BEGIN RADIO_TIMER_TXRX_WKUP_IRQn 1 */

  /* USER CODE END RADIO_TIMER_TXRX_WKUP_IRQn 1 */
}
100433a6:	46c0      	nop			@ (mov r8, r8)
100433a8:	46bd      	mov	sp, r7
100433aa:	bd80      	pop	{r7, pc}

100433ac <RADIO_TIMER_ERROR_IRQHandler>:

/**
  * @brief This function handles RADIO_TIMER_ERROR global interrupt.
  */
void RADIO_TIMER_ERROR_IRQHandler(void)
{
100433ac:	b580      	push	{r7, lr}
100433ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RADIO_TIMER_ERROR_IRQn 0 */

  /* USER CODE END RADIO_TIMER_ERROR_IRQn 0 */
  HAL_RADIO_TIMER_ERROR_IRQHandler();
100433b0:	f004 fe54 	bl	1004805c <HAL_RADIO_TIMER_ERROR_IRQHandler>
  /* USER CODE BEGIN RADIO_TIMER_ERROR_IRQn 1 */

  /* USER CODE END RADIO_TIMER_ERROR_IRQn 1 */
}
100433b4:	46c0      	nop			@ (mov r8, r8)
100433b6:	46bd      	mov	sp, r7
100433b8:	bd80      	pop	{r7, pc}

100433ba <RADIO_TXRX_IRQHandler>:

/**
  * @brief This function handles RADIO_TXRX global interrupt.
  */
void RADIO_TXRX_IRQHandler(void)
{
100433ba:	b580      	push	{r7, lr}
100433bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RADIO_TXRX_IRQn 0 */

  /* USER CODE END RADIO_TXRX_IRQn 0 */
  HAL_RADIO_TXRX_IRQHandler();
100433be:	f003 f84a 	bl	10046456 <HAL_RADIO_TXRX_IRQHandler>
  /* USER CODE BEGIN RADIO_TXRX_IRQn 1 */

  /* USER CODE END RADIO_TXRX_IRQn 1 */
}
100433c2:	46c0      	nop			@ (mov r8, r8)
100433c4:	46bd      	mov	sp, r7
100433c6:	bd80      	pop	{r7, pc}

100433c8 <RADIO_TXRX_SEQ_IRQHandler>:

/**
  * @brief This function handles RADIO_TXRX_SEQ global interrupt.
  */
void RADIO_TXRX_SEQ_IRQHandler(void)
{
100433c8:	b580      	push	{r7, lr}
100433ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RADIO_TXRX_SEQ_IRQn 0 */

  /* USER CODE END RADIO_TXRX_SEQ_IRQn 0 */
  HAL_RADIO_TXRX_SEQ_IRQHandler();
100433cc:	f003 f86a 	bl	100464a4 <HAL_RADIO_TXRX_SEQ_IRQHandler>
  /* USER CODE BEGIN RADIO_TXRX_SEQ_IRQn 1 */

  /* USER CODE END RADIO_TXRX_SEQ_IRQn 1 */
}
100433d0:	46c0      	nop			@ (mov r8, r8)
100433d2:	46bd      	mov	sp, r7
100433d4:	bd80      	pop	{r7, pc}

100433d6 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
100433d6:	b580      	push	{r7, lr}
100433d8:	af00      	add	r7, sp, #0
  return 1;
100433da:	2301      	movs	r3, #1
}
100433dc:	0018      	movs	r0, r3
100433de:	46bd      	mov	sp, r7
100433e0:	bd80      	pop	{r7, pc}

100433e2 <_kill>:

int _kill(int pid, int sig)
{
100433e2:	b580      	push	{r7, lr}
100433e4:	b082      	sub	sp, #8
100433e6:	af00      	add	r7, sp, #0
100433e8:	6078      	str	r0, [r7, #4]
100433ea:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
100433ec:	f006 fe6c 	bl	1004a0c8 <__errno>
100433f0:	0003      	movs	r3, r0
100433f2:	2216      	movs	r2, #22
100433f4:	601a      	str	r2, [r3, #0]
  return -1;
100433f6:	2301      	movs	r3, #1
100433f8:	425b      	negs	r3, r3
}
100433fa:	0018      	movs	r0, r3
100433fc:	46bd      	mov	sp, r7
100433fe:	b002      	add	sp, #8
10043400:	bd80      	pop	{r7, pc}

10043402 <_exit>:

void _exit (int status)
{
10043402:	b580      	push	{r7, lr}
10043404:	b082      	sub	sp, #8
10043406:	af00      	add	r7, sp, #0
10043408:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
1004340a:	2301      	movs	r3, #1
1004340c:	425a      	negs	r2, r3
1004340e:	687b      	ldr	r3, [r7, #4]
10043410:	0011      	movs	r1, r2
10043412:	0018      	movs	r0, r3
10043414:	f7ff ffe5 	bl	100433e2 <_kill>
  while (1) {}    /* Make sure we hang here */
10043418:	46c0      	nop			@ (mov r8, r8)
1004341a:	e7fd      	b.n	10043418 <_exit+0x16>

1004341c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
1004341c:	b580      	push	{r7, lr}
1004341e:	b086      	sub	sp, #24
10043420:	af00      	add	r7, sp, #0
10043422:	60f8      	str	r0, [r7, #12]
10043424:	60b9      	str	r1, [r7, #8]
10043426:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
10043428:	2300      	movs	r3, #0
1004342a:	617b      	str	r3, [r7, #20]
1004342c:	e00a      	b.n	10043444 <_read+0x28>
  {
    *ptr++ = __io_getchar();
1004342e:	e000      	b.n	10043432 <_read+0x16>
10043430:	bf00      	nop
10043432:	0001      	movs	r1, r0
10043434:	68bb      	ldr	r3, [r7, #8]
10043436:	1c5a      	adds	r2, r3, #1
10043438:	60ba      	str	r2, [r7, #8]
1004343a:	b2ca      	uxtb	r2, r1
1004343c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
1004343e:	697b      	ldr	r3, [r7, #20]
10043440:	3301      	adds	r3, #1
10043442:	617b      	str	r3, [r7, #20]
10043444:	697a      	ldr	r2, [r7, #20]
10043446:	687b      	ldr	r3, [r7, #4]
10043448:	429a      	cmp	r2, r3
1004344a:	dbf0      	blt.n	1004342e <_read+0x12>
  }

  return len;
1004344c:	687b      	ldr	r3, [r7, #4]
}
1004344e:	0018      	movs	r0, r3
10043450:	46bd      	mov	sp, r7
10043452:	b006      	add	sp, #24
10043454:	bd80      	pop	{r7, pc}

10043456 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
10043456:	b580      	push	{r7, lr}
10043458:	b086      	sub	sp, #24
1004345a:	af00      	add	r7, sp, #0
1004345c:	60f8      	str	r0, [r7, #12]
1004345e:	60b9      	str	r1, [r7, #8]
10043460:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
10043462:	2300      	movs	r3, #0
10043464:	617b      	str	r3, [r7, #20]
10043466:	e009      	b.n	1004347c <_write+0x26>
  {
    __io_putchar(*ptr++);
10043468:	68bb      	ldr	r3, [r7, #8]
1004346a:	1c5a      	adds	r2, r3, #1
1004346c:	60ba      	str	r2, [r7, #8]
1004346e:	781b      	ldrb	r3, [r3, #0]
10043470:	0018      	movs	r0, r3
10043472:	e000      	b.n	10043476 <_write+0x20>
10043474:	bf00      	nop
  for (DataIdx = 0; DataIdx < len; DataIdx++)
10043476:	697b      	ldr	r3, [r7, #20]
10043478:	3301      	adds	r3, #1
1004347a:	617b      	str	r3, [r7, #20]
1004347c:	697a      	ldr	r2, [r7, #20]
1004347e:	687b      	ldr	r3, [r7, #4]
10043480:	429a      	cmp	r2, r3
10043482:	dbf1      	blt.n	10043468 <_write+0x12>
  }
  return len;
10043484:	687b      	ldr	r3, [r7, #4]
}
10043486:	0018      	movs	r0, r3
10043488:	46bd      	mov	sp, r7
1004348a:	b006      	add	sp, #24
1004348c:	bd80      	pop	{r7, pc}

1004348e <_close>:

int _close(int file)
{
1004348e:	b580      	push	{r7, lr}
10043490:	b082      	sub	sp, #8
10043492:	af00      	add	r7, sp, #0
10043494:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
10043496:	2301      	movs	r3, #1
10043498:	425b      	negs	r3, r3
}
1004349a:	0018      	movs	r0, r3
1004349c:	46bd      	mov	sp, r7
1004349e:	b002      	add	sp, #8
100434a0:	bd80      	pop	{r7, pc}

100434a2 <_fstat>:


int _fstat(int file, struct stat *st)
{
100434a2:	b580      	push	{r7, lr}
100434a4:	b082      	sub	sp, #8
100434a6:	af00      	add	r7, sp, #0
100434a8:	6078      	str	r0, [r7, #4]
100434aa:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
100434ac:	683b      	ldr	r3, [r7, #0]
100434ae:	2280      	movs	r2, #128	@ 0x80
100434b0:	0192      	lsls	r2, r2, #6
100434b2:	605a      	str	r2, [r3, #4]
  return 0;
100434b4:	2300      	movs	r3, #0
}
100434b6:	0018      	movs	r0, r3
100434b8:	46bd      	mov	sp, r7
100434ba:	b002      	add	sp, #8
100434bc:	bd80      	pop	{r7, pc}

100434be <_isatty>:

int _isatty(int file)
{
100434be:	b580      	push	{r7, lr}
100434c0:	b082      	sub	sp, #8
100434c2:	af00      	add	r7, sp, #0
100434c4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
100434c6:	2301      	movs	r3, #1
}
100434c8:	0018      	movs	r0, r3
100434ca:	46bd      	mov	sp, r7
100434cc:	b002      	add	sp, #8
100434ce:	bd80      	pop	{r7, pc}

100434d0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
100434d0:	b580      	push	{r7, lr}
100434d2:	b084      	sub	sp, #16
100434d4:	af00      	add	r7, sp, #0
100434d6:	60f8      	str	r0, [r7, #12]
100434d8:	60b9      	str	r1, [r7, #8]
100434da:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
100434dc:	2300      	movs	r3, #0
}
100434de:	0018      	movs	r0, r3
100434e0:	46bd      	mov	sp, r7
100434e2:	b004      	add	sp, #16
100434e4:	bd80      	pop	{r7, pc}
	...

100434e8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
100434e8:	b580      	push	{r7, lr}
100434ea:	b086      	sub	sp, #24
100434ec:	af00      	add	r7, sp, #0
100434ee:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
100434f0:	4a14      	ldr	r2, [pc, #80]	@ (10043544 <_sbrk+0x5c>)
100434f2:	4b15      	ldr	r3, [pc, #84]	@ (10043548 <_sbrk+0x60>)
100434f4:	1ad3      	subs	r3, r2, r3
100434f6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
100434f8:	697b      	ldr	r3, [r7, #20]
100434fa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
100434fc:	4b13      	ldr	r3, [pc, #76]	@ (1004354c <_sbrk+0x64>)
100434fe:	681b      	ldr	r3, [r3, #0]
10043500:	2b00      	cmp	r3, #0
10043502:	d102      	bne.n	1004350a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
10043504:	4b11      	ldr	r3, [pc, #68]	@ (1004354c <_sbrk+0x64>)
10043506:	4a12      	ldr	r2, [pc, #72]	@ (10043550 <_sbrk+0x68>)
10043508:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
1004350a:	4b10      	ldr	r3, [pc, #64]	@ (1004354c <_sbrk+0x64>)
1004350c:	681a      	ldr	r2, [r3, #0]
1004350e:	687b      	ldr	r3, [r7, #4]
10043510:	18d3      	adds	r3, r2, r3
10043512:	693a      	ldr	r2, [r7, #16]
10043514:	429a      	cmp	r2, r3
10043516:	d207      	bcs.n	10043528 <_sbrk+0x40>
  {
    errno = ENOMEM;
10043518:	f006 fdd6 	bl	1004a0c8 <__errno>
1004351c:	0003      	movs	r3, r0
1004351e:	220c      	movs	r2, #12
10043520:	601a      	str	r2, [r3, #0]
    return (void *)-1;
10043522:	2301      	movs	r3, #1
10043524:	425b      	negs	r3, r3
10043526:	e009      	b.n	1004353c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
10043528:	4b08      	ldr	r3, [pc, #32]	@ (1004354c <_sbrk+0x64>)
1004352a:	681b      	ldr	r3, [r3, #0]
1004352c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
1004352e:	4b07      	ldr	r3, [pc, #28]	@ (1004354c <_sbrk+0x64>)
10043530:	681a      	ldr	r2, [r3, #0]
10043532:	687b      	ldr	r3, [r7, #4]
10043534:	18d2      	adds	r2, r2, r3
10043536:	4b05      	ldr	r3, [pc, #20]	@ (1004354c <_sbrk+0x64>)
10043538:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
1004353a:	68fb      	ldr	r3, [r7, #12]
}
1004353c:	0018      	movs	r0, r3
1004353e:	46bd      	mov	sp, r7
10043540:	b006      	add	sp, #24
10043542:	bd80      	pop	{r7, pc}
10043544:	20010000 	.word	0x20010000
10043548:	00000c00 	.word	0x00000c00
1004354c:	20000800 	.word	0x20000800
10043550:	20000d28 	.word	0x20000d28

10043554 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
10043554:	b590      	push	{r4, r7, lr}
10043556:	b083      	sub	sp, #12
10043558:	af00      	add	r7, sp, #0
1004355a:	0002      	movs	r2, r0
1004355c:	6039      	str	r1, [r7, #0]
1004355e:	1dfb      	adds	r3, r7, #7
10043560:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
10043562:	1dfb      	adds	r3, r7, #7
10043564:	781b      	ldrb	r3, [r3, #0]
10043566:	2b7f      	cmp	r3, #127	@ 0x7f
10043568:	d828      	bhi.n	100435bc <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
1004356a:	4a2f      	ldr	r2, [pc, #188]	@ (10043628 <__NVIC_SetPriority+0xd4>)
1004356c:	1dfb      	adds	r3, r7, #7
1004356e:	781b      	ldrb	r3, [r3, #0]
10043570:	b25b      	sxtb	r3, r3
10043572:	089b      	lsrs	r3, r3, #2
10043574:	33c0      	adds	r3, #192	@ 0xc0
10043576:	009b      	lsls	r3, r3, #2
10043578:	589b      	ldr	r3, [r3, r2]
1004357a:	1dfa      	adds	r2, r7, #7
1004357c:	7812      	ldrb	r2, [r2, #0]
1004357e:	0011      	movs	r1, r2
10043580:	2203      	movs	r2, #3
10043582:	400a      	ands	r2, r1
10043584:	00d2      	lsls	r2, r2, #3
10043586:	21ff      	movs	r1, #255	@ 0xff
10043588:	4091      	lsls	r1, r2
1004358a:	000a      	movs	r2, r1
1004358c:	43d2      	mvns	r2, r2
1004358e:	401a      	ands	r2, r3
10043590:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
10043592:	683b      	ldr	r3, [r7, #0]
10043594:	019b      	lsls	r3, r3, #6
10043596:	22ff      	movs	r2, #255	@ 0xff
10043598:	401a      	ands	r2, r3
1004359a:	1dfb      	adds	r3, r7, #7
1004359c:	781b      	ldrb	r3, [r3, #0]
1004359e:	0018      	movs	r0, r3
100435a0:	2303      	movs	r3, #3
100435a2:	4003      	ands	r3, r0
100435a4:	00db      	lsls	r3, r3, #3
100435a6:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
100435a8:	481f      	ldr	r0, [pc, #124]	@ (10043628 <__NVIC_SetPriority+0xd4>)
100435aa:	1dfb      	adds	r3, r7, #7
100435ac:	781b      	ldrb	r3, [r3, #0]
100435ae:	b25b      	sxtb	r3, r3
100435b0:	089b      	lsrs	r3, r3, #2
100435b2:	430a      	orrs	r2, r1
100435b4:	33c0      	adds	r3, #192	@ 0xc0
100435b6:	009b      	lsls	r3, r3, #2
100435b8:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
100435ba:	e031      	b.n	10043620 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
100435bc:	4a1b      	ldr	r2, [pc, #108]	@ (1004362c <__NVIC_SetPriority+0xd8>)
100435be:	1dfb      	adds	r3, r7, #7
100435c0:	781b      	ldrb	r3, [r3, #0]
100435c2:	0019      	movs	r1, r3
100435c4:	230f      	movs	r3, #15
100435c6:	400b      	ands	r3, r1
100435c8:	3b08      	subs	r3, #8
100435ca:	089b      	lsrs	r3, r3, #2
100435cc:	3306      	adds	r3, #6
100435ce:	009b      	lsls	r3, r3, #2
100435d0:	18d3      	adds	r3, r2, r3
100435d2:	3304      	adds	r3, #4
100435d4:	681b      	ldr	r3, [r3, #0]
100435d6:	1dfa      	adds	r2, r7, #7
100435d8:	7812      	ldrb	r2, [r2, #0]
100435da:	0011      	movs	r1, r2
100435dc:	2203      	movs	r2, #3
100435de:	400a      	ands	r2, r1
100435e0:	00d2      	lsls	r2, r2, #3
100435e2:	21ff      	movs	r1, #255	@ 0xff
100435e4:	4091      	lsls	r1, r2
100435e6:	000a      	movs	r2, r1
100435e8:	43d2      	mvns	r2, r2
100435ea:	401a      	ands	r2, r3
100435ec:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
100435ee:	683b      	ldr	r3, [r7, #0]
100435f0:	019b      	lsls	r3, r3, #6
100435f2:	22ff      	movs	r2, #255	@ 0xff
100435f4:	401a      	ands	r2, r3
100435f6:	1dfb      	adds	r3, r7, #7
100435f8:	781b      	ldrb	r3, [r3, #0]
100435fa:	0018      	movs	r0, r3
100435fc:	2303      	movs	r3, #3
100435fe:	4003      	ands	r3, r0
10043600:	00db      	lsls	r3, r3, #3
10043602:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
10043604:	4809      	ldr	r0, [pc, #36]	@ (1004362c <__NVIC_SetPriority+0xd8>)
10043606:	1dfb      	adds	r3, r7, #7
10043608:	781b      	ldrb	r3, [r3, #0]
1004360a:	001c      	movs	r4, r3
1004360c:	230f      	movs	r3, #15
1004360e:	4023      	ands	r3, r4
10043610:	3b08      	subs	r3, #8
10043612:	089b      	lsrs	r3, r3, #2
10043614:	430a      	orrs	r2, r1
10043616:	3306      	adds	r3, #6
10043618:	009b      	lsls	r3, r3, #2
1004361a:	18c3      	adds	r3, r0, r3
1004361c:	3304      	adds	r3, #4
1004361e:	601a      	str	r2, [r3, #0]
}
10043620:	46c0      	nop			@ (mov r8, r8)
10043622:	46bd      	mov	sp, r7
10043624:	b003      	add	sp, #12
10043626:	bd90      	pop	{r4, r7, pc}
10043628:	e000e100 	.word	0xe000e100
1004362c:	e000ed00 	.word	0xe000ed00

10043630 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
10043630:	b580      	push	{r7, lr}
10043632:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
10043634:	f3bf 8f4f 	dsb	sy
}
10043638:	46c0      	nop			@ (mov r8, r8)
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = ((0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
1004363a:	4b04      	ldr	r3, [pc, #16]	@ (1004364c <__NVIC_SystemReset+0x1c>)
1004363c:	4a04      	ldr	r2, [pc, #16]	@ (10043650 <__NVIC_SystemReset+0x20>)
1004363e:	60da      	str	r2, [r3, #12]
  __ASM volatile ("dsb 0xF":::"memory");
10043640:	f3bf 8f4f 	dsb	sy
}
10043644:	46c0      	nop			@ (mov r8, r8)
                 SCB_AIRCR_SYSRESETREQ_Msk);
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
10043646:	46c0      	nop			@ (mov r8, r8)
10043648:	e7fd      	b.n	10043646 <__NVIC_SystemReset+0x16>
1004364a:	46c0      	nop			@ (mov r8, r8)
1004364c:	e000ed00 	.word	0xe000ed00
10043650:	05fa0004 	.word	0x05fa0004

10043654 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
10043654:	b590      	push	{r4, r7, lr}
10043656:	b087      	sub	sp, #28
10043658:	af00      	add	r7, sp, #0
  uint32_t lsiBw;
#endif
  uint8_t i;
  
  /* If the reset reason is a wakeup from power save restore the context */
  if ((RCC->CSR == 0) && ((PWR->SR1 != 0)||(PWR->SR3 != 0))) {
1004365a:	4a64      	ldr	r2, [pc, #400]	@ (100437ec <SystemInit+0x198>)
1004365c:	2394      	movs	r3, #148	@ 0x94
1004365e:	58d3      	ldr	r3, [r2, r3]
10043660:	2b00      	cmp	r3, #0
10043662:	d10e      	bne.n	10043682 <SystemInit+0x2e>
10043664:	4b62      	ldr	r3, [pc, #392]	@ (100437f0 <SystemInit+0x19c>)
10043666:	691b      	ldr	r3, [r3, #16]
10043668:	2b00      	cmp	r3, #0
1004366a:	d103      	bne.n	10043674 <SystemInit+0x20>
1004366c:	4b60      	ldr	r3, [pc, #384]	@ (100437f0 <SystemInit+0x19c>)
1004366e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
10043670:	2b00      	cmp	r3, #0
10043672:	d006      	beq.n	10043682 <SystemInit+0x2e>
    RAM_VR.WakeupFromSleepFlag = 1; /* A wakeup from power save occurred */
10043674:	4b5f      	ldr	r3, [pc, #380]	@ (100437f4 <SystemInit+0x1a0>)
10043676:	2201      	movs	r2, #1
10043678:	609a      	str	r2, [r3, #8]
    CPUcontextRestore();            /* Restore the context */
1004367a:	f000 f8ff 	bl	1004387c <CPUcontextRestore>
    /* if the context restore worked properly, we should never return here */
    while(1) { 
      NVIC_SystemReset(); 
1004367e:	f7ff ffd7 	bl	10043630 <__NVIC_SystemReset>

  /* Configure the Vector Table location */
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#else
  SCB->VTOR = (uint32_t) (__vector_table);
10043682:	4b5d      	ldr	r3, [pc, #372]	@ (100437f8 <SystemInit+0x1a4>)
10043684:	4a5d      	ldr	r2, [pc, #372]	@ (100437fc <SystemInit+0x1a8>)
10043686:	609a      	str	r2, [r3, #8]
#endif /* USER_VECT_TAB_ADDRESS */

  /* Store in RAM the AppBase information */
  RAM_VR.AppBase = (uint32_t) SCB->VTOR;
10043688:	4b5b      	ldr	r3, [pc, #364]	@ (100437f8 <SystemInit+0x1a4>)
1004368a:	689a      	ldr	r2, [r3, #8]
1004368c:	4b59      	ldr	r3, [pc, #356]	@ (100437f4 <SystemInit+0x1a0>)
1004368e:	611a      	str	r2, [r3, #16]

  /* Enable all the RAM banks in retention during power save */
#if defined(PWR_CR2_RAMRET1)
  SET_BIT(PWR->CR2, PWR_CR2_RAMRET1);
10043690:	4b57      	ldr	r3, [pc, #348]	@ (100437f0 <SystemInit+0x19c>)
10043692:	685a      	ldr	r2, [r3, #4]
10043694:	4b56      	ldr	r3, [pc, #344]	@ (100437f0 <SystemInit+0x19c>)
10043696:	2120      	movs	r1, #32
10043698:	430a      	orrs	r2, r1
1004369a:	605a      	str	r2, [r3, #4]
#endif /* PWR_CR2_RAMRET1 */
  
#if defined(PWR_CR2_RAMRET2)
  SET_BIT(PWR->CR2, PWR_CR2_RAMRET2);
1004369c:	4b54      	ldr	r3, [pc, #336]	@ (100437f0 <SystemInit+0x19c>)
1004369e:	685a      	ldr	r2, [r3, #4]
100436a0:	4b53      	ldr	r3, [pc, #332]	@ (100437f0 <SystemInit+0x19c>)
100436a2:	2140      	movs	r1, #64	@ 0x40
100436a4:	430a      	orrs	r2, r1
100436a6:	605a      	str	r2, [r3, #4]
#endif /* PWR_CR2_RAMRET2 */
  
#if defined(PWR_CR2_RAMRET3)
  SET_BIT(PWR->CR2, PWR_CR2_RAMRET3);
100436a8:	4b51      	ldr	r3, [pc, #324]	@ (100437f0 <SystemInit+0x19c>)
100436aa:	685a      	ldr	r2, [r3, #4]
100436ac:	4b50      	ldr	r3, [pc, #320]	@ (100437f0 <SystemInit+0x19c>)
100436ae:	2180      	movs	r1, #128	@ 0x80
100436b0:	430a      	orrs	r2, r1
100436b2:	605a      	str	r2, [r3, #4]
#endif /* PWR_CR2_GPIORET */
   
  /* SMPS setup */
  if ((CFG_HW_SMPS == SMPS_ON) || (CFG_HW_SMPS == SMPS_BYPAPSS))
  {
    while(READ_BIT(PWR->SR2, PWR_SR2_SMPSRDY) != PWR_SR2_SMPSRDY); // Wait until SMPS is ready
100436b4:	46c0      	nop			@ (mov r8, r8)
100436b6:	4b4e      	ldr	r3, [pc, #312]	@ (100437f0 <SystemInit+0x19c>)
100436b8:	695b      	ldr	r3, [r3, #20]
100436ba:	2204      	movs	r2, #4
100436bc:	4013      	ands	r3, r2
100436be:	2b04      	cmp	r3, #4
100436c0:	d1f9      	bne.n	100436b6 <SystemInit+0x62>
    MODIFY_REG(PWR->CR5, PWR_CR5_SMPSBOMSEL, (CFG_HW_SMPS_BOM<<PWR_CR5_SMPSBOMSEL_Pos)); // Configure the SMPS BOM
100436c2:	4b4b      	ldr	r3, [pc, #300]	@ (100437f0 <SystemInit+0x19c>)
100436c4:	69db      	ldr	r3, [r3, #28]
100436c6:	2230      	movs	r2, #48	@ 0x30
100436c8:	4393      	bics	r3, r2
100436ca:	001a      	movs	r2, r3
100436cc:	4b48      	ldr	r3, [pc, #288]	@ (100437f0 <SystemInit+0x19c>)
100436ce:	2120      	movs	r1, #32
100436d0:	430a      	orrs	r2, r1
100436d2:	61da      	str	r2, [r3, #28]
  }
  if ((CFG_HW_SMPS == SMPS_ON) || (CFG_HW_SMPS == SMPS_OFF))
  {
    MODIFY_REG(PWR->CR5, PWR_CR5_NOSMPS, (CFG_HW_SMPS<<PWR_CR5_NOSMPS_Pos)); // SMPS ON/OFF Configuration
100436d4:	4b46      	ldr	r3, [pc, #280]	@ (100437f0 <SystemInit+0x19c>)
100436d6:	69da      	ldr	r2, [r3, #28]
100436d8:	4b45      	ldr	r3, [pc, #276]	@ (100437f0 <SystemInit+0x19c>)
100436da:	4949      	ldr	r1, [pc, #292]	@ (10043800 <SystemInit+0x1ac>)
100436dc:	400a      	ands	r2, r1
100436de:	61da      	str	r2, [r3, #28]
  }
  else
  {
    MODIFY_REG(PWR->CR5, PWR_CR5_SMPSFBYP, (1<<PWR_CR5_SMPSFBYP_Pos)); // SMPS BYPASS Configuration
  }
  MODIFY_REG(PWR->CR5, PWR_CR5_SMPSLPOPEN, (CFG_HW_SMPS_LOW_POWER<<PWR_CR5_SMPSLPOPEN_Pos)); // SMPS configuration during power save
100436e0:	4b43      	ldr	r3, [pc, #268]	@ (100437f0 <SystemInit+0x19c>)
100436e2:	69da      	ldr	r2, [r3, #28]
100436e4:	4b42      	ldr	r3, [pc, #264]	@ (100437f0 <SystemInit+0x19c>)
100436e6:	2180      	movs	r1, #128	@ 0x80
100436e8:	0049      	lsls	r1, r1, #1
100436ea:	430a      	orrs	r2, r1
100436ec:	61da      	str	r2, [r3, #28]
  
  /* If Trimming values from engineering in flash locations are not present load default values */
  if (*(volatile uint32_t*)VALIDITY_LOCATION != VALIDITY_TAG)
100436ee:	4b45      	ldr	r3, [pc, #276]	@ (10043804 <SystemInit+0x1b0>)
100436f0:	681b      	ldr	r3, [r3, #0]
100436f2:	4a45      	ldr	r2, [pc, #276]	@ (10043808 <SystemInit+0x1b4>)
100436f4:	4293      	cmp	r3, r2
100436f6:	d05b      	beq.n	100437b0 <SystemInit+0x15c>
  {
#if defined(STM32WB06) || defined(STM32WB07)
    hsiCalib       = 0x1E;
100436f8:	231e      	movs	r3, #30
100436fa:	613b      	str	r3, [r7, #16]
    mainRegulator  = 0x08;
100436fc:	2308      	movs	r3, #8
100436fe:	60fb      	str	r3, [r7, #12]
    smpsOutVoltage = 0x03;
10043700:	2303      	movs	r3, #3
10043702:	60bb      	str	r3, [r7, #8]
    lsiLpmu        = 0x08;
10043704:	2308      	movs	r3, #8
10043706:	607b      	str	r3, [r7, #4]

    /* Set Low Speed Internal oscillator LPMU trimming value. */
    MODIFY_REG(PWR->ENGTRIM, PWR_ENGTRIM_TRIM_LSI_LPMU, ((lsiLpmu << PWR_ENGTRIM_TRIM_LSI_LPMU_Pos) & PWR_ENGTRIM_TRIM_LSI_LPMU));
10043708:	4a39      	ldr	r2, [pc, #228]	@ (100437f0 <SystemInit+0x19c>)
1004370a:	2394      	movs	r3, #148	@ 0x94
1004370c:	58d3      	ldr	r3, [r2, r3]
1004370e:	221e      	movs	r2, #30
10043710:	4393      	bics	r3, r2
10043712:	001a      	movs	r2, r3
10043714:	687b      	ldr	r3, [r7, #4]
10043716:	005b      	lsls	r3, r3, #1
10043718:	211e      	movs	r1, #30
1004371a:	400b      	ands	r3, r1
1004371c:	4934      	ldr	r1, [pc, #208]	@ (100437f0 <SystemInit+0x19c>)
1004371e:	4313      	orrs	r3, r2
10043720:	2294      	movs	r2, #148	@ 0x94
10043722:	508b      	str	r3, [r1, r2]
    SET_BIT(PWR->ENGTRIM, PWR_ENGTRIM_TRIMLSILPMUEN);
10043724:	4a32      	ldr	r2, [pc, #200]	@ (100437f0 <SystemInit+0x19c>)
10043726:	2394      	movs	r3, #148	@ 0x94
10043728:	58d3      	ldr	r3, [r2, r3]
1004372a:	4931      	ldr	r1, [pc, #196]	@ (100437f0 <SystemInit+0x19c>)
1004372c:	2201      	movs	r2, #1
1004372e:	4313      	orrs	r3, r2
10043730:	2294      	movs	r2, #148	@ 0x94
10043732:	508b      	str	r3, [r1, r2]
    MODIFY_REG(RCC->CSSWCR, RCC_CSSWCR_LSISWBW, lsiBw << RCC_CSSWCR_LSISWBW_Pos);
    SET_BIT(RCC->CSSWCR, RCC_CSSWCR_LSISWTRIMEN);
#endif
    
    /* Set HSI Calibration Trimming value */
    MODIFY_REG(RCC->CSSWCR, RCC_CSSWCR_HSITRIMSW, hsiCalib << RCC_CSSWCR_HSITRIMSW_Pos);
10043734:	4b2d      	ldr	r3, [pc, #180]	@ (100437ec <SystemInit+0x198>)
10043736:	68db      	ldr	r3, [r3, #12]
10043738:	4a34      	ldr	r2, [pc, #208]	@ (1004380c <SystemInit+0x1b8>)
1004373a:	4013      	ands	r3, r2
1004373c:	0019      	movs	r1, r3
1004373e:	693b      	ldr	r3, [r7, #16]
10043740:	061a      	lsls	r2, r3, #24
10043742:	4b2a      	ldr	r3, [pc, #168]	@ (100437ec <SystemInit+0x198>)
10043744:	430a      	orrs	r2, r1
10043746:	60da      	str	r2, [r3, #12]
    SET_BIT(RCC->CSSWCR, RCC_CSSWCR_HSISWTRIMEN);
10043748:	4b28      	ldr	r3, [pc, #160]	@ (100437ec <SystemInit+0x198>)
1004374a:	68da      	ldr	r2, [r3, #12]
1004374c:	4b27      	ldr	r3, [pc, #156]	@ (100437ec <SystemInit+0x198>)
1004374e:	2180      	movs	r1, #128	@ 0x80
10043750:	0409      	lsls	r1, r1, #16
10043752:	430a      	orrs	r2, r1
10043754:	60da      	str	r2, [r3, #12]
              
    /* Set Main Regulator voltage Trimming value */ 
    MODIFY_REG(PWR->ENGTRIM, PWR_ENGTRIM_TRIM_MR, ((mainRegulator << PWR_ENGTRIM_TRIM_MR_Pos) & PWR_ENGTRIM_TRIM_MR));
10043756:	4a26      	ldr	r2, [pc, #152]	@ (100437f0 <SystemInit+0x19c>)
10043758:	2394      	movs	r3, #148	@ 0x94
1004375a:	58d3      	ldr	r3, [r2, r3]
1004375c:	4a2c      	ldr	r2, [pc, #176]	@ (10043810 <SystemInit+0x1bc>)
1004375e:	401a      	ands	r2, r3
10043760:	68fb      	ldr	r3, [r7, #12]
10043762:	0199      	lsls	r1, r3, #6
10043764:	23f0      	movs	r3, #240	@ 0xf0
10043766:	009b      	lsls	r3, r3, #2
10043768:	400b      	ands	r3, r1
1004376a:	4921      	ldr	r1, [pc, #132]	@ (100437f0 <SystemInit+0x19c>)
1004376c:	4313      	orrs	r3, r2
1004376e:	2294      	movs	r2, #148	@ 0x94
10043770:	508b      	str	r3, [r1, r2]
    SET_BIT(PWR->ENGTRIM, PWR_ENGTRIM_TRIMMREN);
10043772:	4a1f      	ldr	r2, [pc, #124]	@ (100437f0 <SystemInit+0x19c>)
10043774:	2394      	movs	r3, #148	@ 0x94
10043776:	58d3      	ldr	r3, [r2, r3]
10043778:	491d      	ldr	r1, [pc, #116]	@ (100437f0 <SystemInit+0x19c>)
1004377a:	2220      	movs	r2, #32
1004377c:	4313      	orrs	r3, r2
1004377e:	2294      	movs	r2, #148	@ 0x94
10043780:	508b      	str	r3, [r1, r2]

    /* Set SMPS output voltage Trimming value */
    MODIFY_REG(PWR->ENGTRIM, PWR_ENGTRIM_SMPS_TRIM, ((smpsOutVoltage << PWR_ENGTRIM_SMPS_TRIM_Pos) & PWR_ENGTRIM_SMPS_TRIM));
10043782:	4a1b      	ldr	r2, [pc, #108]	@ (100437f0 <SystemInit+0x19c>)
10043784:	2394      	movs	r3, #148	@ 0x94
10043786:	58d3      	ldr	r3, [r2, r3]
10043788:	4a22      	ldr	r2, [pc, #136]	@ (10043814 <SystemInit+0x1c0>)
1004378a:	401a      	ands	r2, r3
1004378c:	68bb      	ldr	r3, [r7, #8]
1004378e:	02d9      	lsls	r1, r3, #11
10043790:	23e0      	movs	r3, #224	@ 0xe0
10043792:	019b      	lsls	r3, r3, #6
10043794:	400b      	ands	r3, r1
10043796:	4916      	ldr	r1, [pc, #88]	@ (100437f0 <SystemInit+0x19c>)
10043798:	4313      	orrs	r3, r2
1004379a:	2294      	movs	r2, #148	@ 0x94
1004379c:	508b      	str	r3, [r1, r2]
    SET_BIT(PWR->ENGTRIM, PWR_ENGTRIM_SMPSTRIMEN);    
1004379e:	4a14      	ldr	r2, [pc, #80]	@ (100437f0 <SystemInit+0x19c>)
100437a0:	2394      	movs	r3, #148	@ 0x94
100437a2:	58d3      	ldr	r3, [r2, r3]
100437a4:	4912      	ldr	r1, [pc, #72]	@ (100437f0 <SystemInit+0x19c>)
100437a6:	2280      	movs	r2, #128	@ 0x80
100437a8:	00d2      	lsls	r2, r2, #3
100437aa:	4313      	orrs	r3, r2
100437ac:	2294      	movs	r2, #148	@ 0x94
100437ae:	508b      	str	r3, [r1, r2]
  }

  /* Set all the interrupt with low priprity */
  for (i=0; i<32; i++)
100437b0:	2317      	movs	r3, #23
100437b2:	18fb      	adds	r3, r7, r3
100437b4:	2200      	movs	r2, #0
100437b6:	701a      	strb	r2, [r3, #0]
100437b8:	e00d      	b.n	100437d6 <SystemInit+0x182>
  {
    NVIC_SetPriority((IRQn_Type)i, IRQ_LOW_PRIORITY);
100437ba:	2417      	movs	r4, #23
100437bc:	193b      	adds	r3, r7, r4
100437be:	781b      	ldrb	r3, [r3, #0]
100437c0:	b25b      	sxtb	r3, r3
100437c2:	2103      	movs	r1, #3
100437c4:	0018      	movs	r0, r3
100437c6:	f7ff fec5 	bl	10043554 <__NVIC_SetPriority>
  for (i=0; i<32; i++)
100437ca:	0021      	movs	r1, r4
100437cc:	187b      	adds	r3, r7, r1
100437ce:	781a      	ldrb	r2, [r3, #0]
100437d0:	187b      	adds	r3, r7, r1
100437d2:	3201      	adds	r2, #1
100437d4:	701a      	strb	r2, [r3, #0]
100437d6:	2317      	movs	r3, #23
100437d8:	18fb      	adds	r3, r7, r3
100437da:	781b      	ldrb	r3, [r3, #0]
100437dc:	2b1f      	cmp	r3, #31
100437de:	d9ec      	bls.n	100437ba <SystemInit+0x166>
  __ASM volatile ("cpsie i" : : : "memory");
100437e0:	b662      	cpsie	i
}
100437e2:	46c0      	nop			@ (mov r8, r8)
  }
  
  /* Enable all the irqs */
  __enable_irq();
}
100437e4:	46c0      	nop			@ (mov r8, r8)
100437e6:	46bd      	mov	sp, r7
100437e8:	b007      	add	sp, #28
100437ea:	bd90      	pop	{r4, r7, pc}
100437ec:	48400000 	.word	0x48400000
100437f0:	48500000 	.word	0x48500000
100437f4:	20000004 	.word	0x20000004
100437f8:	e000ed00 	.word	0xe000ed00
100437fc:	10040000 	.word	0x10040000
10043800:	fffffbff 	.word	0xfffffbff
10043804:	10001ef8 	.word	0x10001ef8
10043808:	fcbceccc 	.word	0xfcbceccc
1004380c:	c0ffffff 	.word	0xc0ffffff
10043810:	fffffc3f 	.word	0xfffffc3f
10043814:	ffffc7ff 	.word	0xffffc7ff

10043818 <SystemCoreClockUpdate>:
  *
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
10043818:	b580      	push	{r7, lr}
1004381a:	b082      	sub	sp, #8
1004381c:	af00      	add	r7, sp, #0
  uint8_t directHSE_enabled;
  uint8_t divPrescaler;

  /* Get SYSCLK source HSE or HSI+PLL64MHz */
  directHSE_enabled = (RCC->CFGR & RCC_CFGR_HSESEL) >> RCC_CFGR_HSESEL_Pos;
1004381e:	4b13      	ldr	r3, [pc, #76]	@ (1004386c <SystemCoreClockUpdate+0x54>)
10043820:	689b      	ldr	r3, [r3, #8]
10043822:	085b      	lsrs	r3, r3, #1
10043824:	b2da      	uxtb	r2, r3
10043826:	1dfb      	adds	r3, r7, #7
10043828:	2101      	movs	r1, #1
1004382a:	400a      	ands	r2, r1
1004382c:	701a      	strb	r2, [r3, #0]

#if defined(STM32WB06) || defined(STM32WB07)
  /* Get the clock divider */
    divPrescaler = (RCC->CFGR & RCC_CFGR_CLKSYSDIV) >> RCC_CFGR_CLKSYSDIV_Pos;
1004382e:	4b0f      	ldr	r3, [pc, #60]	@ (1004386c <SystemCoreClockUpdate+0x54>)
10043830:	689b      	ldr	r3, [r3, #8]
10043832:	095b      	lsrs	r3, r3, #5
10043834:	b2da      	uxtb	r2, r3
10043836:	1dbb      	adds	r3, r7, #6
10043838:	2107      	movs	r1, #7
1004383a:	400a      	ands	r2, r1
1004383c:	701a      	strb	r2, [r3, #0]
#else
  /* Get the clock divider */
  divPrescaler = (RCC->CFGR & RCC_CFGR_CLKSYSDIV_STATUS) >> RCC_CFGR_CLKSYSDIV_STATUS_Pos;
#endif

  if (directHSE_enabled)
1004383e:	1dfb      	adds	r3, r7, #7
10043840:	781b      	ldrb	r3, [r3, #0]
10043842:	2b00      	cmp	r3, #0
10043844:	d007      	beq.n	10043856 <SystemCoreClockUpdate+0x3e>
  {
    SystemCoreClock = HSE_VALUE >> (divPrescaler - 1U);
10043846:	1dbb      	adds	r3, r7, #6
10043848:	781b      	ldrb	r3, [r3, #0]
1004384a:	3b01      	subs	r3, #1
1004384c:	4a08      	ldr	r2, [pc, #32]	@ (10043870 <SystemCoreClockUpdate+0x58>)
1004384e:	40da      	lsrs	r2, r3
10043850:	4b08      	ldr	r3, [pc, #32]	@ (10043874 <SystemCoreClockUpdate+0x5c>)
10043852:	601a      	str	r2, [r3, #0]
  }
  else
  {
    SystemCoreClock = HSI_VALUE >> divPrescaler;
  }  
}
10043854:	e005      	b.n	10043862 <SystemCoreClockUpdate+0x4a>
    SystemCoreClock = HSI_VALUE >> divPrescaler;
10043856:	1dbb      	adds	r3, r7, #6
10043858:	781b      	ldrb	r3, [r3, #0]
1004385a:	4a07      	ldr	r2, [pc, #28]	@ (10043878 <SystemCoreClockUpdate+0x60>)
1004385c:	40da      	lsrs	r2, r3
1004385e:	4b05      	ldr	r3, [pc, #20]	@ (10043874 <SystemCoreClockUpdate+0x5c>)
10043860:	601a      	str	r2, [r3, #0]
}
10043862:	46c0      	nop			@ (mov r8, r8)
10043864:	46bd      	mov	sp, r7
10043866:	b002      	add	sp, #8
10043868:	bd80      	pop	{r7, pc}
1004386a:	46c0      	nop			@ (mov r8, r8)
1004386c:	48400000 	.word	0x48400000
10043870:	01e84800 	.word	0x01e84800
10043874:	20000b08 	.word	0x20000b08
10043878:	03d09000 	.word	0x03d09000

1004387c <CPUcontextRestore>:
  *         by popping it from the stack 
  * @param  None
  * @retval None
  */
__WEAK void CPUcontextRestore(void)
{
1004387c:	b580      	push	{r7, lr}
1004387e:	af00      	add	r7, sp, #0
}
10043880:	46c0      	nop			@ (mov r8, r8)
10043882:	46bd      	mov	sp, r7
10043884:	bd80      	pop	{r7, pc}
	...

10043888 <Reset_Handler>:

	.section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
10043888:	4810      	ldr	r0, [pc, #64]	@ (100438cc <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
1004388a:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
1004388c:	f7ff fee2 	bl	10043654 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs  r1, #0
10043890:	2100      	movs	r1, #0
  b  LoopCopyDataInit
10043892:	e003      	b.n	1004389c <LoopCopyDataInit>

10043894 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
10043894:	4b0e      	ldr	r3, [pc, #56]	@ (100438d0 <LoopForever+0x6>)
  ldr  r3, [r3, r1]
10043896:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
10043898:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
1004389a:	3104      	adds	r1, #4

1004389c <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr  r0, =_sdata
1004389c:	480d      	ldr	r0, [pc, #52]	@ (100438d4 <LoopForever+0xa>)
  ldr  r3, =_edata
1004389e:	4b0e      	ldr	r3, [pc, #56]	@ (100438d8 <LoopForever+0xe>)
  adds  r2, r0, r1
100438a0:	1842      	adds	r2, r0, r1
  cmp  r2, r3
100438a2:	429a      	cmp	r2, r3
  bcc  CopyDataInit
100438a4:	d3f6      	bcc.n	10043894 <CopyDataInit>
  ldr  r2, =_sbss
100438a6:	4a0d      	ldr	r2, [pc, #52]	@ (100438dc <LoopForever+0x12>)
  b  LoopFillZerobss
100438a8:	e002      	b.n	100438b0 <LoopFillZerobss>

100438aa <FillZerobss>:

/* Zero fill the bss segment. */
FillZerobss:
  movs  r3, #0
100438aa:	2300      	movs	r3, #0
  str  r3, [r2]
100438ac:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
100438ae:	3204      	adds	r2, #4

100438b0 <LoopFillZerobss>:

LoopFillZerobss:
  ldr  r3, = _ebss
100438b0:	4b0b      	ldr	r3, [pc, #44]	@ (100438e0 <LoopForever+0x16>)
  cmp  r2, r3
100438b2:	429a      	cmp	r2, r3
  bcc  FillZerobss
100438b4:	d3f9      	bcc.n	100438aa <FillZerobss>
  ldr  r2, =_sbssblue
100438b6:	4a0b      	ldr	r2, [pc, #44]	@ (100438e4 <LoopForever+0x1a>)
  b  LoopFillZeroBlueRam
100438b8:	e002      	b.n	100438c0 <LoopFillZeroBlueRam>

100438ba <FillZerobssram>:


FillZerobssram:
  movs  r3, #0
100438ba:	2300      	movs	r3, #0
  str  r3, [r2]
100438bc:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
100438be:	3204      	adds	r2, #4

100438c0 <LoopFillZeroBlueRam>:

LoopFillZeroBlueRam:
  ldr  r3, = _ebssblue
100438c0:	4b09      	ldr	r3, [pc, #36]	@ (100438e8 <LoopForever+0x1e>)
  cmp  r2, r3
100438c2:	429a      	cmp	r2, r3
  bcc  FillZerobssram
100438c4:	d3f9      	bcc.n	100438ba <FillZerobssram>

/* Call the application's entry point.*/
  bl  main
100438c6:	f7fe febf 	bl	10042648 <main>

100438ca <LoopForever>:

LoopForever:
    b LoopForever
100438ca:	e7fe      	b.n	100438ca <LoopForever>
   ldr   r0, =_estack
100438cc:	20010000 	.word	0x20010000
  ldr  r3, =_sidata
100438d0:	1004c350 	.word	0x1004c350
  ldr  r0, =_sdata
100438d4:	20000af4 	.word	0x20000af4
  ldr  r3, =_edata
100438d8:	20000d28 	.word	0x20000d28
  ldr  r2, =_sbss
100438dc:	2000017c 	.word	0x2000017c
  ldr  r3, = _ebss
100438e0:	20000af4 	.word	0x20000af4
  ldr  r2, =_sbssblue
100438e4:	200000c0 	.word	0x200000c0
  ldr  r3, = _ebssblue
100438e8:	2000017c 	.word	0x2000017c

100438ec <ADC_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
100438ec:	e7fe      	b.n	100438ec <ADC_IRQHandler>
	...

100438f0 <DW1000_read_reg>:
/*!<
 * LL functions
 * */

static inline void DW1000_read_reg(DW1000_t *dw1000, uint32_t reg,
		uint16_t offset, uint8_t *buffer, uint32_t size) {
100438f0:	b580      	push	{r7, lr}
100438f2:	b084      	sub	sp, #16
100438f4:	af00      	add	r7, sp, #0
100438f6:	60f8      	str	r0, [r7, #12]
100438f8:	60b9      	str	r1, [r7, #8]
100438fa:	603b      	str	r3, [r7, #0]
100438fc:	1dbb      	adds	r3, r7, #6
100438fe:	801a      	strh	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
10043900:	b672      	cpsid	i
}
10043902:	46c0      	nop			@ (mov r8, r8)
	__disable_irq();
	reg &= 0x3FU;
10043904:	68bb      	ldr	r3, [r7, #8]
10043906:	223f      	movs	r2, #63	@ 0x3f
10043908:	4013      	ands	r3, r2
1004390a:	60bb      	str	r3, [r7, #8]
	HAL_GPIO_WritePin(dw1000->NSS_port, dw1000->NSS_pin, 0);
1004390c:	68fb      	ldr	r3, [r7, #12]
1004390e:	6858      	ldr	r0, [r3, #4]
10043910:	68fb      	ldr	r3, [r7, #12]
10043912:	899b      	ldrh	r3, [r3, #12]
10043914:	2200      	movs	r2, #0
10043916:	0019      	movs	r1, r3
10043918:	f001 facf 	bl	10044eba <HAL_GPIO_WritePin>
	if (offset & 0xFF00) {
1004391c:	1dbb      	adds	r3, r7, #6
1004391e:	881a      	ldrh	r2, [r3, #0]
10043920:	23ff      	movs	r3, #255	@ 0xff
10043922:	021b      	lsls	r3, r3, #8
10043924:	4013      	ands	r3, r2
10043926:	d010      	beq.n	1004394a <DW1000_read_reg+0x5a>
		reg |= 0x8040U | (offset << 8);
10043928:	1dbb      	adds	r3, r7, #6
1004392a:	881b      	ldrh	r3, [r3, #0]
1004392c:	021a      	lsls	r2, r3, #8
1004392e:	68bb      	ldr	r3, [r7, #8]
10043930:	4313      	orrs	r3, r2
10043932:	4a1f      	ldr	r2, [pc, #124]	@ (100439b0 <DW1000_read_reg+0xc0>)
10043934:	4313      	orrs	r3, r2
10043936:	60bb      	str	r3, [r7, #8]
		SPI_write8(dw1000->spi, (void*) &reg, 3, DW1000_TIMEOUT);
10043938:	68fb      	ldr	r3, [r7, #12]
1004393a:	6818      	ldr	r0, [r3, #0]
1004393c:	2308      	movs	r3, #8
1004393e:	18f9      	adds	r1, r7, r3
10043940:	230a      	movs	r3, #10
10043942:	2203      	movs	r2, #3
10043944:	f000 fe5a 	bl	100445fc <SPI_write8>
10043948:	e01c      	b.n	10043984 <DW1000_read_reg+0x94>
	} else if (offset) {
1004394a:	1dbb      	adds	r3, r7, #6
1004394c:	881b      	ldrh	r3, [r3, #0]
1004394e:	2b00      	cmp	r3, #0
10043950:	d010      	beq.n	10043974 <DW1000_read_reg+0x84>
		reg |= 0x40U | (offset << 8);
10043952:	1dbb      	adds	r3, r7, #6
10043954:	881b      	ldrh	r3, [r3, #0]
10043956:	021a      	lsls	r2, r3, #8
10043958:	68bb      	ldr	r3, [r7, #8]
1004395a:	4313      	orrs	r3, r2
1004395c:	2240      	movs	r2, #64	@ 0x40
1004395e:	4313      	orrs	r3, r2
10043960:	60bb      	str	r3, [r7, #8]
		SPI_write8(dw1000->spi, (void*) &reg, 2, DW1000_TIMEOUT);
10043962:	68fb      	ldr	r3, [r7, #12]
10043964:	6818      	ldr	r0, [r3, #0]
10043966:	2308      	movs	r3, #8
10043968:	18f9      	adds	r1, r7, r3
1004396a:	230a      	movs	r3, #10
1004396c:	2202      	movs	r2, #2
1004396e:	f000 fe45 	bl	100445fc <SPI_write8>
10043972:	e007      	b.n	10043984 <DW1000_read_reg+0x94>
	} else {
		SPI_write8(dw1000->spi, (void*) &reg, 1, DW1000_TIMEOUT);
10043974:	68fb      	ldr	r3, [r7, #12]
10043976:	6818      	ldr	r0, [r3, #0]
10043978:	2308      	movs	r3, #8
1004397a:	18f9      	adds	r1, r7, r3
1004397c:	230a      	movs	r3, #10
1004397e:	2201      	movs	r2, #1
10043980:	f000 fe3c 	bl	100445fc <SPI_write8>
	}
	SPI_read8(dw1000->spi, buffer, size, DW1000_TIMEOUT);
10043984:	68fb      	ldr	r3, [r7, #12]
10043986:	6818      	ldr	r0, [r3, #0]
10043988:	69ba      	ldr	r2, [r7, #24]
1004398a:	6839      	ldr	r1, [r7, #0]
1004398c:	230a      	movs	r3, #10
1004398e:	f000 feb1 	bl	100446f4 <SPI_read8>
	HAL_GPIO_WritePin(dw1000->NSS_port, dw1000->NSS_pin, 1);
10043992:	68fb      	ldr	r3, [r7, #12]
10043994:	6858      	ldr	r0, [r3, #4]
10043996:	68fb      	ldr	r3, [r7, #12]
10043998:	899b      	ldrh	r3, [r3, #12]
1004399a:	2201      	movs	r2, #1
1004399c:	0019      	movs	r1, r3
1004399e:	f001 fa8c 	bl	10044eba <HAL_GPIO_WritePin>
  __ASM volatile ("cpsie i" : : : "memory");
100439a2:	b662      	cpsie	i
}
100439a4:	46c0      	nop			@ (mov r8, r8)
	__enable_irq();
}
100439a6:	46c0      	nop			@ (mov r8, r8)
100439a8:	46bd      	mov	sp, r7
100439aa:	b004      	add	sp, #16
100439ac:	bd80      	pop	{r7, pc}
100439ae:	46c0      	nop			@ (mov r8, r8)
100439b0:	00008040 	.word	0x00008040

100439b4 <DW1000_write_reg>:

static inline void DW1000_write_reg(DW1000_t *dw1000, uint32_t reg,
		uint16_t offset, uint8_t *buffer, uint32_t size) {
100439b4:	b580      	push	{r7, lr}
100439b6:	b084      	sub	sp, #16
100439b8:	af00      	add	r7, sp, #0
100439ba:	60f8      	str	r0, [r7, #12]
100439bc:	60b9      	str	r1, [r7, #8]
100439be:	603b      	str	r3, [r7, #0]
100439c0:	1dbb      	adds	r3, r7, #6
100439c2:	801a      	strh	r2, [r3, #0]
	reg = (reg & 0x3FU) | 0x80;
100439c4:	68bb      	ldr	r3, [r7, #8]
100439c6:	223f      	movs	r2, #63	@ 0x3f
100439c8:	4013      	ands	r3, r2
100439ca:	2280      	movs	r2, #128	@ 0x80
100439cc:	4313      	orrs	r3, r2
100439ce:	60bb      	str	r3, [r7, #8]
	HAL_GPIO_WritePin(dw1000->NSS_port, dw1000->NSS_pin, 0);
100439d0:	68fb      	ldr	r3, [r7, #12]
100439d2:	6858      	ldr	r0, [r3, #4]
100439d4:	68fb      	ldr	r3, [r7, #12]
100439d6:	899b      	ldrh	r3, [r3, #12]
100439d8:	2200      	movs	r2, #0
100439da:	0019      	movs	r1, r3
100439dc:	f001 fa6d 	bl	10044eba <HAL_GPIO_WritePin>
	if (offset & 0xFF00) {
100439e0:	1dbb      	adds	r3, r7, #6
100439e2:	881a      	ldrh	r2, [r3, #0]
100439e4:	23ff      	movs	r3, #255	@ 0xff
100439e6:	021b      	lsls	r3, r3, #8
100439e8:	4013      	ands	r3, r2
100439ea:	d010      	beq.n	10043a0e <DW1000_write_reg+0x5a>
		reg |= 0x8040U | (offset << 8);
100439ec:	1dbb      	adds	r3, r7, #6
100439ee:	881b      	ldrh	r3, [r3, #0]
100439f0:	021a      	lsls	r2, r3, #8
100439f2:	68bb      	ldr	r3, [r7, #8]
100439f4:	4313      	orrs	r3, r2
100439f6:	4a1e      	ldr	r2, [pc, #120]	@ (10043a70 <DW1000_write_reg+0xbc>)
100439f8:	4313      	orrs	r3, r2
100439fa:	60bb      	str	r3, [r7, #8]
		SPI_write8(dw1000->spi, (void*) &reg, 3, DW1000_TIMEOUT);
100439fc:	68fb      	ldr	r3, [r7, #12]
100439fe:	6818      	ldr	r0, [r3, #0]
10043a00:	2308      	movs	r3, #8
10043a02:	18f9      	adds	r1, r7, r3
10043a04:	230a      	movs	r3, #10
10043a06:	2203      	movs	r2, #3
10043a08:	f000 fdf8 	bl	100445fc <SPI_write8>
10043a0c:	e01c      	b.n	10043a48 <DW1000_write_reg+0x94>
	} else if (offset) {
10043a0e:	1dbb      	adds	r3, r7, #6
10043a10:	881b      	ldrh	r3, [r3, #0]
10043a12:	2b00      	cmp	r3, #0
10043a14:	d010      	beq.n	10043a38 <DW1000_write_reg+0x84>
		reg |= 0x40U | (offset << 8);
10043a16:	1dbb      	adds	r3, r7, #6
10043a18:	881b      	ldrh	r3, [r3, #0]
10043a1a:	021a      	lsls	r2, r3, #8
10043a1c:	68bb      	ldr	r3, [r7, #8]
10043a1e:	4313      	orrs	r3, r2
10043a20:	2240      	movs	r2, #64	@ 0x40
10043a22:	4313      	orrs	r3, r2
10043a24:	60bb      	str	r3, [r7, #8]
		SPI_write8(dw1000->spi, (void*) &reg, 2, DW1000_TIMEOUT);
10043a26:	68fb      	ldr	r3, [r7, #12]
10043a28:	6818      	ldr	r0, [r3, #0]
10043a2a:	2308      	movs	r3, #8
10043a2c:	18f9      	adds	r1, r7, r3
10043a2e:	230a      	movs	r3, #10
10043a30:	2202      	movs	r2, #2
10043a32:	f000 fde3 	bl	100445fc <SPI_write8>
10043a36:	e007      	b.n	10043a48 <DW1000_write_reg+0x94>
	} else {
		SPI_write8(dw1000->spi, (void*) &reg, 1, DW1000_TIMEOUT);
10043a38:	68fb      	ldr	r3, [r7, #12]
10043a3a:	6818      	ldr	r0, [r3, #0]
10043a3c:	2308      	movs	r3, #8
10043a3e:	18f9      	adds	r1, r7, r3
10043a40:	230a      	movs	r3, #10
10043a42:	2201      	movs	r2, #1
10043a44:	f000 fdda 	bl	100445fc <SPI_write8>
	}
	SPI_write8(dw1000->spi, buffer, size, DW1000_TIMEOUT);
10043a48:	68fb      	ldr	r3, [r7, #12]
10043a4a:	6818      	ldr	r0, [r3, #0]
10043a4c:	69ba      	ldr	r2, [r7, #24]
10043a4e:	6839      	ldr	r1, [r7, #0]
10043a50:	230a      	movs	r3, #10
10043a52:	f000 fdd3 	bl	100445fc <SPI_write8>
	HAL_GPIO_WritePin(dw1000->NSS_port, dw1000->NSS_pin, 1);
10043a56:	68fb      	ldr	r3, [r7, #12]
10043a58:	6858      	ldr	r0, [r3, #4]
10043a5a:	68fb      	ldr	r3, [r7, #12]
10043a5c:	899b      	ldrh	r3, [r3, #12]
10043a5e:	2201      	movs	r2, #1
10043a60:	0019      	movs	r1, r3
10043a62:	f001 fa2a 	bl	10044eba <HAL_GPIO_WritePin>
}
10043a66:	46c0      	nop			@ (mov r8, r8)
10043a68:	46bd      	mov	sp, r7
10043a6a:	b004      	add	sp, #16
10043a6c:	bd80      	pop	{r7, pc}
10043a6e:	46c0      	nop			@ (mov r8, r8)
10043a70:	00008040 	.word	0x00008040

10043a74 <DW1000_init>:

/*!<
 * functions
 * */
void DW1000_init(DW1000_t *dw1000) {
10043a74:	b590      	push	{r4, r7, lr}
10043a76:	b087      	sub	sp, #28
10043a78:	af02      	add	r7, sp, #8
10043a7a:	6078      	str	r0, [r7, #4]
	uint32_t tmp;
	// reset
	HAL_GPIO_WritePin(dw1000->NRST_port, dw1000->NRST_pin, 0);
10043a7c:	687b      	ldr	r3, [r7, #4]
10043a7e:	6898      	ldr	r0, [r3, #8]
10043a80:	687b      	ldr	r3, [r7, #4]
10043a82:	89db      	ldrh	r3, [r3, #14]
10043a84:	2200      	movs	r2, #0
10043a86:	0019      	movs	r1, r3
10043a88:	f001 fa17 	bl	10044eba <HAL_GPIO_WritePin>
	HAL_Delay(1);
10043a8c:	2001      	movs	r0, #1
10043a8e:	f000 ff69 	bl	10044964 <HAL_Delay>

	HAL_GPIO_WritePin(dw1000->NRST_port, dw1000->NRST_pin, 1);
10043a92:	687b      	ldr	r3, [r7, #4]
10043a94:	6898      	ldr	r0, [r3, #8]
10043a96:	687b      	ldr	r3, [r7, #4]
10043a98:	89db      	ldrh	r3, [r3, #14]
10043a9a:	2201      	movs	r2, #1
10043a9c:	0019      	movs	r1, r3
10043a9e:	f001 fa0c 	bl	10044eba <HAL_GPIO_WritePin>

	// check devid
	DW1000_read_reg(dw1000, DEV_ID_ID, 0, (void*) &tmp, 4);
10043aa2:	230c      	movs	r3, #12
10043aa4:	18fb      	adds	r3, r7, r3
10043aa6:	6878      	ldr	r0, [r7, #4]
10043aa8:	2204      	movs	r2, #4
10043aaa:	9200      	str	r2, [sp, #0]
10043aac:	2200      	movs	r2, #0
10043aae:	2100      	movs	r1, #0
10043ab0:	f7ff ff1e 	bl	100438f0 <DW1000_read_reg>
	if (tmp != 0xDECA0130UL) {
10043ab4:	68fb      	ldr	r3, [r7, #12]
10043ab6:	4a9c      	ldr	r2, [pc, #624]	@ (10043d28 <DW1000_init+0x2b4>)
10043ab8:	4293      	cmp	r3, r2
10043aba:	d001      	beq.n	10043ac0 <DW1000_init+0x4c>
		for (;;)
10043abc:	46c0      	nop			@ (mov r8, r8)
10043abe:	e7fd      	b.n	10043abc <DW1000_init+0x48>
			;
	}

	// enable clock
	DW1000_read_reg(dw1000, PMSC_ID, PMSC_CTRL0_OFFSET, (void*) &tmp, 2);
10043ac0:	240c      	movs	r4, #12
10043ac2:	193b      	adds	r3, r7, r4
10043ac4:	6878      	ldr	r0, [r7, #4]
10043ac6:	2202      	movs	r2, #2
10043ac8:	9200      	str	r2, [sp, #0]
10043aca:	2200      	movs	r2, #0
10043acc:	2136      	movs	r1, #54	@ 0x36
10043ace:	f7ff ff0f 	bl	100438f0 <DW1000_read_reg>
	tmp &= 0xFFFCU;	// reset sys_clk select
10043ad2:	68fb      	ldr	r3, [r7, #12]
10043ad4:	4a95      	ldr	r2, [pc, #596]	@ (10043d2c <DW1000_init+0x2b8>)
10043ad6:	4013      	ands	r3, r2
10043ad8:	60fb      	str	r3, [r7, #12]
	tmp |= 0x0001U;	// select XTI as sys_clk
10043ada:	68fb      	ldr	r3, [r7, #12]
10043adc:	2201      	movs	r2, #1
10043ade:	4313      	orrs	r3, r2
10043ae0:	60fb      	str	r3, [r7, #12]
	DW1000_write_reg(dw1000, PMSC_ID, PMSC_CTRL0_OFFSET, (void*) &tmp, 2);
10043ae2:	193b      	adds	r3, r7, r4
10043ae4:	6878      	ldr	r0, [r7, #4]
10043ae6:	2202      	movs	r2, #2
10043ae8:	9200      	str	r2, [sp, #0]
10043aea:	2200      	movs	r2, #0
10043aec:	2136      	movs	r1, #54	@ 0x36
10043aee:	f7ff ff61 	bl	100439b4 <DW1000_write_reg>

	tmp = PMSC_CTRL1_PKTSEQ_DISABLE;
10043af2:	2300      	movs	r3, #0
10043af4:	60fb      	str	r3, [r7, #12]
	DW1000_write_reg(dw1000, PMSC_ID, PMSC_CTRL1_OFFSET, (void*) &tmp, 2); // Disable PMSC ctrl of RF and RX clk blocks
10043af6:	193b      	adds	r3, r7, r4
10043af8:	6878      	ldr	r0, [r7, #4]
10043afa:	2202      	movs	r2, #2
10043afc:	9200      	str	r2, [sp, #0]
10043afe:	2204      	movs	r2, #4
10043b00:	2136      	movs	r1, #54	@ 0x36
10043b02:	f7ff ff57 	bl	100439b4 <DW1000_write_reg>

	// Clear any AON auto download bits (as reset will trigger AON download)
	tmp = 0x00;
10043b06:	2300      	movs	r3, #0
10043b08:	60fb      	str	r3, [r7, #12]
	DW1000_write_reg(dw1000, AON_ID, AON_WCFG_OFFSET, (void*) &tmp, 2);
10043b0a:	193b      	adds	r3, r7, r4
10043b0c:	6878      	ldr	r0, [r7, #4]
10043b0e:	2202      	movs	r2, #2
10043b10:	9200      	str	r2, [sp, #0]
10043b12:	2200      	movs	r2, #0
10043b14:	212c      	movs	r1, #44	@ 0x2c
10043b16:	f7ff ff4d 	bl	100439b4 <DW1000_write_reg>
	// Clear the wake-up configuration
	DW1000_write_reg(dw1000, AON_ID, AON_CFG0_OFFSET, (void*) &tmp, 1);
10043b1a:	193b      	adds	r3, r7, r4
10043b1c:	6878      	ldr	r0, [r7, #4]
10043b1e:	2201      	movs	r2, #1
10043b20:	9200      	str	r2, [sp, #0]
10043b22:	2206      	movs	r2, #6
10043b24:	212c      	movs	r1, #44	@ 0x2c
10043b26:	f7ff ff45 	bl	100439b4 <DW1000_write_reg>
	// Upload the new configuration
	DW1000_write_reg(dw1000, AON_ID, AON_CTRL_OFFSET, (void*) &tmp, 1); // Clear the register
10043b2a:	193b      	adds	r3, r7, r4
10043b2c:	6878      	ldr	r0, [r7, #4]
10043b2e:	2201      	movs	r2, #1
10043b30:	9200      	str	r2, [sp, #0]
10043b32:	2202      	movs	r2, #2
10043b34:	212c      	movs	r1, #44	@ 0x2c
10043b36:	f7ff ff3d 	bl	100439b4 <DW1000_write_reg>
	tmp = AON_CTRL_SAVE;
10043b3a:	2302      	movs	r3, #2
10043b3c:	60fb      	str	r3, [r7, #12]
	DW1000_write_reg(dw1000, AON_ID, AON_CTRL_OFFSET, (void*) &tmp, 1);
10043b3e:	193b      	adds	r3, r7, r4
10043b40:	6878      	ldr	r0, [r7, #4]
10043b42:	2201      	movs	r2, #1
10043b44:	9200      	str	r2, [sp, #0]
10043b46:	2202      	movs	r2, #2
10043b48:	212c      	movs	r1, #44	@ 0x2c
10043b4a:	f7ff ff33 	bl	100439b4 <DW1000_write_reg>

	// Reset HIF, TX, RX and PMSC (set the reset bits)
	tmp = PMSC_CTRL0_RESET_ALL;
10043b4e:	2300      	movs	r3, #0
10043b50:	60fb      	str	r3, [r7, #12]
	DW1000_write_reg(dw1000, PMSC_ID, PMSC_CTRL0_SOFTRESET_OFFSET, (void*) &tmp,
10043b52:	193b      	adds	r3, r7, r4
10043b54:	6878      	ldr	r0, [r7, #4]
10043b56:	2201      	movs	r2, #1
10043b58:	9200      	str	r2, [sp, #0]
10043b5a:	2203      	movs	r2, #3
10043b5c:	2136      	movs	r1, #54	@ 0x36
10043b5e:	f7ff ff29 	bl	100439b4 <DW1000_write_reg>
			1);

	// DW1000 needs a 10us sleep to let clk PLL lock after reset - the PLL will automatically lock after the reset
	// Could also have polled the PLL lock flag, but then the SPI needs to be < 3MHz !! So a simple delay is easier
	HAL_Delay(1);
10043b62:	2001      	movs	r0, #1
10043b64:	f000 fefe 	bl	10044964 <HAL_Delay>

	// Clear the reset bits
	tmp = PMSC_CTRL0_RESET_CLEAR;
10043b68:	23f0      	movs	r3, #240	@ 0xf0
10043b6a:	60fb      	str	r3, [r7, #12]
	DW1000_write_reg(dw1000, PMSC_ID, PMSC_CTRL0_SOFTRESET_OFFSET, (void*) &tmp,
10043b6c:	193b      	adds	r3, r7, r4
10043b6e:	6878      	ldr	r0, [r7, #4]
10043b70:	2201      	movs	r2, #1
10043b72:	9200      	str	r2, [sp, #0]
10043b74:	2203      	movs	r2, #3
10043b76:	2136      	movs	r1, #54	@ 0x36
10043b78:	f7ff ff1c 	bl	100439b4 <DW1000_write_reg>
			1);

	// enable clock
	DW1000_read_reg(dw1000, PMSC_ID, PMSC_CTRL0_OFFSET, (void*) &tmp, 2);
10043b7c:	193b      	adds	r3, r7, r4
10043b7e:	6878      	ldr	r0, [r7, #4]
10043b80:	2202      	movs	r2, #2
10043b82:	9200      	str	r2, [sp, #0]
10043b84:	2200      	movs	r2, #0
10043b86:	2136      	movs	r1, #54	@ 0x36
10043b88:	f7ff feb2 	bl	100438f0 <DW1000_read_reg>
	tmp &= 0xFFFCU;	// reset sys_clk select
10043b8c:	68fb      	ldr	r3, [r7, #12]
10043b8e:	4a67      	ldr	r2, [pc, #412]	@ (10043d2c <DW1000_init+0x2b8>)
10043b90:	4013      	ands	r3, r2
10043b92:	60fb      	str	r3, [r7, #12]
	tmp |= 0x0001U;	// select XTI as sys_clk
10043b94:	68fb      	ldr	r3, [r7, #12]
10043b96:	2201      	movs	r2, #1
10043b98:	4313      	orrs	r3, r2
10043b9a:	60fb      	str	r3, [r7, #12]
	DW1000_write_reg(dw1000, PMSC_ID, PMSC_CTRL0_OFFSET, (void*) &tmp, 2);
10043b9c:	193b      	adds	r3, r7, r4
10043b9e:	6878      	ldr	r0, [r7, #4]
10043ba0:	2202      	movs	r2, #2
10043ba2:	9200      	str	r2, [sp, #0]
10043ba4:	2200      	movs	r2, #0
10043ba6:	2136      	movs	r1, #54	@ 0x36
10043ba8:	f7ff ff04 	bl	100439b4 <DW1000_write_reg>

	// configure the CPLL lock detect
	tmp = EC_CTRL_PLLLCK;
10043bac:	2304      	movs	r3, #4
10043bae:	60fb      	str	r3, [r7, #12]
	DW1000_write_reg(dw1000, EXT_SYNC_ID, EC_CTRL_OFFSET, (void*) &tmp, 1);
10043bb0:	193b      	adds	r3, r7, r4
10043bb2:	6878      	ldr	r0, [r7, #4]
10043bb4:	2201      	movs	r2, #1
10043bb6:	9200      	str	r2, [sp, #0]
10043bb8:	2200      	movs	r2, #0
10043bba:	2124      	movs	r1, #36	@ 0x24
10043bbc:	f7ff fefa 	bl	100439b4 <DW1000_write_reg>

	// LDO tune config
	// Write the address
	tmp = LDOTUNE_ADDRESS;
10043bc0:	2304      	movs	r3, #4
10043bc2:	60fb      	str	r3, [r7, #12]
	DW1000_write_reg(dw1000, OTP_IF_ID, OTP_ADDR, (void*) &tmp, 2);
10043bc4:	193b      	adds	r3, r7, r4
10043bc6:	6878      	ldr	r0, [r7, #4]
10043bc8:	2202      	movs	r2, #2
10043bca:	9200      	str	r2, [sp, #0]
10043bcc:	2204      	movs	r2, #4
10043bce:	212d      	movs	r1, #45	@ 0x2d
10043bd0:	f7ff fef0 	bl	100439b4 <DW1000_write_reg>

	// Perform OTP Read - Manual read mode has to be set
	tmp = OTP_CTRL_OTPREAD | OTP_CTRL_OTPRDEN;
10043bd4:	2303      	movs	r3, #3
10043bd6:	60fb      	str	r3, [r7, #12]
	DW1000_write_reg(dw1000, OTP_IF_ID, OTP_CTRL, (void*) &tmp, 1);
10043bd8:	193b      	adds	r3, r7, r4
10043bda:	6878      	ldr	r0, [r7, #4]
10043bdc:	2201      	movs	r2, #1
10043bde:	9200      	str	r2, [sp, #0]
10043be0:	2206      	movs	r2, #6
10043be2:	212d      	movs	r1, #45	@ 0x2d
10043be4:	f7ff fee6 	bl	100439b4 <DW1000_write_reg>
	tmp = 0;
10043be8:	2300      	movs	r3, #0
10043bea:	60fb      	str	r3, [r7, #12]
	DW1000_write_reg(dw1000, OTP_IF_ID, OTP_CTRL, (void*) &tmp, 1);
10043bec:	193b      	adds	r3, r7, r4
10043bee:	6878      	ldr	r0, [r7, #4]
10043bf0:	2201      	movs	r2, #1
10043bf2:	9200      	str	r2, [sp, #0]
10043bf4:	2206      	movs	r2, #6
10043bf6:	212d      	movs	r1, #45	@ 0x2d
10043bf8:	f7ff fedc 	bl	100439b4 <DW1000_write_reg>
	DW1000_read_reg(dw1000, OTP_IF_ID, OTP_RDAT, (void*) &tmp, 4);
10043bfc:	193b      	adds	r3, r7, r4
10043bfe:	6878      	ldr	r0, [r7, #4]
10043c00:	2204      	movs	r2, #4
10043c02:	9200      	str	r2, [sp, #0]
10043c04:	220a      	movs	r2, #10
10043c06:	212d      	movs	r1, #45	@ 0x2d
10043c08:	f7ff fe72 	bl	100438f0 <DW1000_read_reg>
	if ((tmp & 0xFF) != 0) {
10043c0c:	68fb      	ldr	r3, [r7, #12]
10043c0e:	22ff      	movs	r2, #255	@ 0xff
10043c10:	4013      	ands	r3, r2
10043c12:	d009      	beq.n	10043c28 <DW1000_init+0x1b4>
		tmp = OTP_SF_LDO_KICK;
10043c14:	2302      	movs	r3, #2
10043c16:	60fb      	str	r3, [r7, #12]
		DW1000_write_reg(dw1000, OTP_IF_ID, OTP_SF, (void*) &tmp, 1); // Set load LDO kick bit
10043c18:	193b      	adds	r3, r7, r4
10043c1a:	6878      	ldr	r0, [r7, #4]
10043c1c:	2201      	movs	r2, #1
10043c1e:	9200      	str	r2, [sp, #0]
10043c20:	2212      	movs	r2, #18
10043c22:	212d      	movs	r1, #45	@ 0x2d
10043c24:	f7ff fec6 	bl	100439b4 <DW1000_write_reg>
	}

	// xtrim OTP
	// Write the address
	tmp = XTRIM_ADDRESS;
10043c28:	231e      	movs	r3, #30
10043c2a:	60fb      	str	r3, [r7, #12]
	DW1000_write_reg(dw1000, OTP_IF_ID, OTP_ADDR, (void*) &tmp, 2);
10043c2c:	240c      	movs	r4, #12
10043c2e:	193b      	adds	r3, r7, r4
10043c30:	6878      	ldr	r0, [r7, #4]
10043c32:	2202      	movs	r2, #2
10043c34:	9200      	str	r2, [sp, #0]
10043c36:	2204      	movs	r2, #4
10043c38:	212d      	movs	r1, #45	@ 0x2d
10043c3a:	f7ff febb 	bl	100439b4 <DW1000_write_reg>

	// Perform OTP Read - Manual read mode has to be set
	tmp = OTP_CTRL_OTPREAD | OTP_CTRL_OTPRDEN;
10043c3e:	2303      	movs	r3, #3
10043c40:	60fb      	str	r3, [r7, #12]
	DW1000_write_reg(dw1000, OTP_IF_ID, OTP_CTRL, (void*) &tmp, 1);
10043c42:	193b      	adds	r3, r7, r4
10043c44:	6878      	ldr	r0, [r7, #4]
10043c46:	2201      	movs	r2, #1
10043c48:	9200      	str	r2, [sp, #0]
10043c4a:	2206      	movs	r2, #6
10043c4c:	212d      	movs	r1, #45	@ 0x2d
10043c4e:	f7ff feb1 	bl	100439b4 <DW1000_write_reg>
	tmp = 0x00;
10043c52:	2300      	movs	r3, #0
10043c54:	60fb      	str	r3, [r7, #12]
	DW1000_write_reg(dw1000, OTP_IF_ID, OTP_CTRL, (void*) &tmp, 1); // OTPREAD is self clearing but OTPRDEN is not
10043c56:	193b      	adds	r3, r7, r4
10043c58:	6878      	ldr	r0, [r7, #4]
10043c5a:	2201      	movs	r2, #1
10043c5c:	9200      	str	r2, [sp, #0]
10043c5e:	2206      	movs	r2, #6
10043c60:	212d      	movs	r1, #45	@ 0x2d
10043c62:	f7ff fea7 	bl	100439b4 <DW1000_write_reg>

	// Read read data, available 40ns after rising edge of OTP_READ

	DW1000_read_reg(dw1000, OTP_IF_ID, OTP_RDAT, (void*) &tmp, 4);
10043c66:	193b      	adds	r3, r7, r4
10043c68:	6878      	ldr	r0, [r7, #4]
10043c6a:	2204      	movs	r2, #4
10043c6c:	9200      	str	r2, [sp, #0]
10043c6e:	220a      	movs	r2, #10
10043c70:	212d      	movs	r1, #45	@ 0x2d
10043c72:	f7ff fe3d 	bl	100438f0 <DW1000_read_reg>
	tmp &= 0xffff;
10043c76:	68fb      	ldr	r3, [r7, #12]
10043c78:	041b      	lsls	r3, r3, #16
10043c7a:	0c1b      	lsrs	r3, r3, #16
10043c7c:	60fb      	str	r3, [r7, #12]

	if ((tmp & 0x1F) == 0) // A value of 0 means that the crystal has not been trimmed
10043c7e:	68fb      	ldr	r3, [r7, #12]
10043c80:	221f      	movs	r2, #31
10043c82:	4013      	ands	r3, r2
10043c84:	d101      	bne.n	10043c8a <DW1000_init+0x216>
			{
		tmp = FS_XTALT_MIDRANGE; // Set to mid-range if no calibration value inside
10043c86:	2310      	movs	r3, #16
10043c88:	60fb      	str	r3, [r7, #12]
	}
	// Configure XTAL trim
	uint8_t reg_val = (3 << 5) | (tmp & FS_XTALT_MASK);
10043c8a:	68fb      	ldr	r3, [r7, #12]
10043c8c:	b2db      	uxtb	r3, r3
10043c8e:	221f      	movs	r2, #31
10043c90:	4013      	ands	r3, r2
10043c92:	b2db      	uxtb	r3, r3
10043c94:	2260      	movs	r2, #96	@ 0x60
10043c96:	4313      	orrs	r3, r2
10043c98:	b2da      	uxtb	r2, r3
10043c9a:	210b      	movs	r1, #11
10043c9c:	187b      	adds	r3, r7, r1
10043c9e:	701a      	strb	r2, [r3, #0]
	DW1000_write_reg(dw1000, FS_CTRL_ID, FS_XTALT_OFFSET, (void*) &reg_val, 1);
10043ca0:	187b      	adds	r3, r7, r1
10043ca2:	6878      	ldr	r0, [r7, #4]
10043ca4:	2201      	movs	r2, #1
10043ca6:	9200      	str	r2, [sp, #0]
10043ca8:	220e      	movs	r2, #14
10043caa:	212b      	movs	r1, #43	@ 0x2b
10043cac:	f7ff fe82 	bl	100439b4 <DW1000_write_reg>

	// force enable LDE
	tmp = 0x0301U;
10043cb0:	4b1f      	ldr	r3, [pc, #124]	@ (10043d30 <DW1000_init+0x2bc>)
10043cb2:	60fb      	str	r3, [r7, #12]
	DW1000_write_reg(dw1000, PMSC_ID, PMSC_CTRL0_OFFSET, (void*) &tmp, 2);
10043cb4:	240c      	movs	r4, #12
10043cb6:	193b      	adds	r3, r7, r4
10043cb8:	6878      	ldr	r0, [r7, #4]
10043cba:	2202      	movs	r2, #2
10043cbc:	9200      	str	r2, [sp, #0]
10043cbe:	2200      	movs	r2, #0
10043cc0:	2136      	movs	r1, #54	@ 0x36
10043cc2:	f7ff fe77 	bl	100439b4 <DW1000_write_reg>
	tmp = OTP_CTRL_LDELOAD;
10043cc6:	2380      	movs	r3, #128	@ 0x80
10043cc8:	021b      	lsls	r3, r3, #8
10043cca:	60fb      	str	r3, [r7, #12]
	DW1000_write_reg(dw1000, OTP_IF_ID, OTP_CTRL, (void*) &tmp, 2); // Set load LDE kick bit
10043ccc:	193b      	adds	r3, r7, r4
10043cce:	6878      	ldr	r0, [r7, #4]
10043cd0:	2202      	movs	r2, #2
10043cd2:	9200      	str	r2, [sp, #0]
10043cd4:	2206      	movs	r2, #6
10043cd6:	212d      	movs	r1, #45	@ 0x2d
10043cd8:	f7ff fe6c 	bl	100439b4 <DW1000_write_reg>
	HAL_Delay(1);
10043cdc:	2001      	movs	r0, #1
10043cde:	f000 fe41 	bl	10044964 <HAL_Delay>
	DW1000_read_reg(dw1000, PMSC_ID, PMSC_CTRL0_OFFSET, (void*) &tmp, 2);
10043ce2:	193b      	adds	r3, r7, r4
10043ce4:	6878      	ldr	r0, [r7, #4]
10043ce6:	2202      	movs	r2, #2
10043ce8:	9200      	str	r2, [sp, #0]
10043cea:	2200      	movs	r2, #0
10043cec:	2136      	movs	r1, #54	@ 0x36
10043cee:	f7ff fdff 	bl	100438f0 <DW1000_read_reg>
	tmp &= 0xFE00U;
10043cf2:	68fa      	ldr	r2, [r7, #12]
10043cf4:	23fe      	movs	r3, #254	@ 0xfe
10043cf6:	021b      	lsls	r3, r3, #8
10043cf8:	4013      	ands	r3, r2
10043cfa:	60fb      	str	r3, [r7, #12]
	DW1000_write_reg(dw1000, PMSC_ID, PMSC_CTRL0_OFFSET, (void*) &tmp, 2);
10043cfc:	193b      	adds	r3, r7, r4
10043cfe:	6878      	ldr	r0, [r7, #4]
10043d00:	2202      	movs	r2, #2
10043d02:	9200      	str	r2, [sp, #0]
10043d04:	2200      	movs	r2, #0
10043d06:	2136      	movs	r1, #54	@ 0x36
10043d08:	f7ff fe54 	bl	100439b4 <DW1000_write_reg>

	// AON
	tmp = 0x00;
10043d0c:	2300      	movs	r3, #0
10043d0e:	60fb      	str	r3, [r7, #12]
	DW1000_write_reg(dw1000, AON_ID, AON_CFG1_OFFSET, (void*) &tmp, 1);
10043d10:	193b      	adds	r3, r7, r4
10043d12:	6878      	ldr	r0, [r7, #4]
10043d14:	2201      	movs	r2, #1
10043d16:	9200      	str	r2, [sp, #0]
10043d18:	220a      	movs	r2, #10
10043d1a:	212c      	movs	r1, #44	@ 0x2c
10043d1c:	f7ff fe4a 	bl	100439b4 <DW1000_write_reg>
}
10043d20:	46c0      	nop			@ (mov r8, r8)
10043d22:	46bd      	mov	sp, r7
10043d24:	b005      	add	sp, #20
10043d26:	bd90      	pop	{r4, r7, pc}
10043d28:	deca0130 	.word	0xdeca0130
10043d2c:	0000fffc 	.word	0x0000fffc
10043d30:	00000301 	.word	0x00000301

10043d34 <DW1000_config>:

uint8_t DW1000_config(DW1000_t *dw1000, DW1000_config_t *cfg) {
10043d34:	b5f0      	push	{r4, r5, r6, r7, lr}
10043d36:	b08d      	sub	sp, #52	@ 0x34
10043d38:	af02      	add	r7, sp, #8
10043d3a:	6078      	str	r0, [r7, #4]
10043d3c:	6039      	str	r1, [r7, #0]
	uint32_t tmp = 0;
10043d3e:	2300      	movs	r3, #0
10043d40:	623b      	str	r3, [r7, #32]
	uint32_t sysCFGreg;
	uint16_t reg16 = 0x28F4; // rx code 9 (lde_replicaCoeff)
10043d42:	241a      	movs	r4, #26
10043d44:	193b      	adds	r3, r7, r4
10043d46:	4ae5      	ldr	r2, [pc, #916]	@ (100440dc <DW1000_config+0x3a8>)
10043d48:	801a      	strh	r2, [r3, #0]

	DW1000_read_reg(dw1000, SYS_CFG_ID, 0x00, (void*) &sysCFGreg, 4);
10043d4a:	231c      	movs	r3, #28
10043d4c:	18fb      	adds	r3, r7, r3
10043d4e:	6878      	ldr	r0, [r7, #4]
10043d50:	2204      	movs	r2, #4
10043d52:	9200      	str	r2, [sp, #0]
10043d54:	2200      	movs	r2, #0
10043d56:	2104      	movs	r1, #4
10043d58:	f7ff fdca 	bl	100438f0 <DW1000_read_reg>
	if (DWT_BR_110K == cfg->dataRate) {
10043d5c:	683b      	ldr	r3, [r7, #0]
10043d5e:	79db      	ldrb	r3, [r3, #7]
10043d60:	2b00      	cmp	r3, #0
10043d62:	d10b      	bne.n	10043d7c <DW1000_config+0x48>
		sysCFGreg |= SYS_CFG_RXM110K;
10043d64:	69fb      	ldr	r3, [r7, #28]
10043d66:	2280      	movs	r2, #128	@ 0x80
10043d68:	03d2      	lsls	r2, r2, #15
10043d6a:	4313      	orrs	r3, r2
10043d6c:	61fb      	str	r3, [r7, #28]
		reg16 >>= 3; // lde_replicaCoeff must be divided by 8
10043d6e:	193b      	adds	r3, r7, r4
10043d70:	881b      	ldrh	r3, [r3, #0]
10043d72:	08db      	lsrs	r3, r3, #3
10043d74:	b29a      	uxth	r2, r3
10043d76:	193b      	adds	r3, r7, r4
10043d78:	801a      	strh	r2, [r3, #0]
10043d7a:	e003      	b.n	10043d84 <DW1000_config+0x50>
	} else {
		sysCFGreg &= (~SYS_CFG_RXM110K);
10043d7c:	69fb      	ldr	r3, [r7, #28]
10043d7e:	4ad8      	ldr	r2, [pc, #864]	@ (100440e0 <DW1000_config+0x3ac>)
10043d80:	4013      	ands	r3, r2
10043d82:	61fb      	str	r3, [r7, #28]
	}

	sysCFGreg &= ~SYS_CFG_PHR_MODE_11;
10043d84:	69fb      	ldr	r3, [r7, #28]
10043d86:	4ad7      	ldr	r2, [pc, #860]	@ (100440e4 <DW1000_config+0x3b0>)
10043d88:	4013      	ands	r3, r2
10043d8a:	61fb      	str	r3, [r7, #28]
	sysCFGreg |= (SYS_CFG_PHR_MODE_11
			& ((uint32_t) cfg->phrMode << SYS_CFG_PHR_MODE_SHFT));
10043d8c:	683b      	ldr	r3, [r7, #0]
10043d8e:	7a1b      	ldrb	r3, [r3, #8]
10043d90:	041a      	lsls	r2, r3, #16
10043d92:	23c0      	movs	r3, #192	@ 0xc0
10043d94:	029b      	lsls	r3, r3, #10
10043d96:	401a      	ands	r2, r3
	sysCFGreg |= (SYS_CFG_PHR_MODE_11
10043d98:	69fb      	ldr	r3, [r7, #28]
10043d9a:	4313      	orrs	r3, r2
10043d9c:	61fb      	str	r3, [r7, #28]

	DW1000_write_reg(dw1000, SYS_CFG_ID, 0x00, (void*) &sysCFGreg, 4);
10043d9e:	231c      	movs	r3, #28
10043da0:	18fb      	adds	r3, r7, r3
10043da2:	6878      	ldr	r0, [r7, #4]
10043da4:	2204      	movs	r2, #4
10043da6:	9200      	str	r2, [sp, #0]
10043da8:	2200      	movs	r2, #0
10043daa:	2104      	movs	r1, #4
10043dac:	f7ff fe02 	bl	100439b4 <DW1000_write_reg>

	// Set the lde_replicaCoeff
	DW1000_write_reg(dw1000, LDE_IF_ID, LDE_REPC_OFFSET, (void*) &reg16, 2);
10043db0:	231a      	movs	r3, #26
10043db2:	18fb      	adds	r3, r7, r3
10043db4:	49cc      	ldr	r1, [pc, #816]	@ (100440e8 <DW1000_config+0x3b4>)
10043db6:	6878      	ldr	r0, [r7, #4]
10043db8:	2202      	movs	r2, #2
10043dba:	9200      	str	r2, [sp, #0]
10043dbc:	000a      	movs	r2, r1
10043dbe:	212e      	movs	r1, #46	@ 0x2e
10043dc0:	f7ff fdf8 	bl	100439b4 <DW1000_write_reg>

	tmp = LDE_PARAM1;
10043dc4:	236d      	movs	r3, #109	@ 0x6d
10043dc6:	623b      	str	r3, [r7, #32]
	DW1000_write_reg(dw1000, LDE_IF_ID, LDE_CFG1_OFFSET, (void*) &tmp, 1); // 8-bit configuration register
10043dc8:	2420      	movs	r4, #32
10043dca:	193b      	adds	r3, r7, r4
10043dcc:	49c7      	ldr	r1, [pc, #796]	@ (100440ec <DW1000_config+0x3b8>)
10043dce:	6878      	ldr	r0, [r7, #4]
10043dd0:	2201      	movs	r2, #1
10043dd2:	9200      	str	r2, [sp, #0]
10043dd4:	000a      	movs	r2, r1
10043dd6:	212e      	movs	r1, #46	@ 0x2e
10043dd8:	f7ff fdec 	bl	100439b4 <DW1000_write_reg>

	if (dw1000_cfg.prf - DWT_PRF_16M) {
10043ddc:	4bc4      	ldr	r3, [pc, #784]	@ (100440f0 <DW1000_config+0x3bc>)
10043dde:	785b      	ldrb	r3, [r3, #1]
10043de0:	2b01      	cmp	r3, #1
10043de2:	d00b      	beq.n	10043dfc <DW1000_config+0xc8>
		tmp = LDE_PARAM3_64;
10043de4:	4bc3      	ldr	r3, [pc, #780]	@ (100440f4 <DW1000_config+0x3c0>)
10043de6:	623b      	str	r3, [r7, #32]
		DW1000_write_reg(dw1000, LDE_IF_ID, LDE_CFG2_OFFSET, (void*) &tmp, 2); // 16-bit LDE configuration tuning register
10043de8:	193b      	adds	r3, r7, r4
10043dea:	49c3      	ldr	r1, [pc, #780]	@ (100440f8 <DW1000_config+0x3c4>)
10043dec:	6878      	ldr	r0, [r7, #4]
10043dee:	2202      	movs	r2, #2
10043df0:	9200      	str	r2, [sp, #0]
10043df2:	000a      	movs	r2, r1
10043df4:	212e      	movs	r1, #46	@ 0x2e
10043df6:	f7ff fddd 	bl	100439b4 <DW1000_write_reg>
10043dfa:	e00b      	b.n	10043e14 <DW1000_config+0xe0>
	} else {
		tmp = LDE_PARAM3_16;
10043dfc:	4bbf      	ldr	r3, [pc, #764]	@ (100440fc <DW1000_config+0x3c8>)
10043dfe:	623b      	str	r3, [r7, #32]
		DW1000_write_reg(dw1000, LDE_IF_ID, LDE_CFG2_OFFSET, (void*) &tmp, 2);
10043e00:	2320      	movs	r3, #32
10043e02:	18fb      	adds	r3, r7, r3
10043e04:	49bc      	ldr	r1, [pc, #752]	@ (100440f8 <DW1000_config+0x3c4>)
10043e06:	6878      	ldr	r0, [r7, #4]
10043e08:	2202      	movs	r2, #2
10043e0a:	9200      	str	r2, [sp, #0]
10043e0c:	000a      	movs	r2, r1
10043e0e:	212e      	movs	r1, #46	@ 0x2e
10043e10:	f7ff fdd0 	bl	100439b4 <DW1000_write_reg>
	}

	// Configure PLL2/RF PLL block CFG/TUNE (for a given channel)
	tmp = FS_PLLCFG_CH2;
10043e14:	4bba      	ldr	r3, [pc, #744]	@ (10044100 <DW1000_config+0x3cc>)
10043e16:	623b      	str	r3, [r7, #32]
	DW1000_write_reg(dw1000, FS_CTRL_ID, FS_PLLCFG_OFFSET, (void*) &tmp, 4);
10043e18:	2420      	movs	r4, #32
10043e1a:	193b      	adds	r3, r7, r4
10043e1c:	6878      	ldr	r0, [r7, #4]
10043e1e:	2204      	movs	r2, #4
10043e20:	9200      	str	r2, [sp, #0]
10043e22:	2207      	movs	r2, #7
10043e24:	212b      	movs	r1, #43	@ 0x2b
10043e26:	f7ff fdc5 	bl	100439b4 <DW1000_write_reg>
	tmp = FS_PLLTUNE_CH2;
10043e2a:	2326      	movs	r3, #38	@ 0x26
10043e2c:	623b      	str	r3, [r7, #32]
	DW1000_write_reg(dw1000, FS_CTRL_ID, FS_PLLTUNE_OFFSET, (void*) &tmp, 1);
10043e2e:	193b      	adds	r3, r7, r4
10043e30:	6878      	ldr	r0, [r7, #4]
10043e32:	2201      	movs	r2, #1
10043e34:	9200      	str	r2, [sp, #0]
10043e36:	220b      	movs	r2, #11
10043e38:	212b      	movs	r1, #43	@ 0x2b
10043e3a:	f7ff fdbb 	bl	100439b4 <DW1000_write_reg>

	// Configure RF RX blocks (for specified channel/bandwidth)
	tmp = RF_RXCTRLH_NBW;
10043e3e:	23d8      	movs	r3, #216	@ 0xd8
10043e40:	623b      	str	r3, [r7, #32]
	DW1000_write_reg(dw1000, RF_CONF_ID, RF_RXCTRLH_OFFSET, (void*) &tmp, 1);
10043e42:	193b      	adds	r3, r7, r4
10043e44:	6878      	ldr	r0, [r7, #4]
10043e46:	2201      	movs	r2, #1
10043e48:	9200      	str	r2, [sp, #0]
10043e4a:	220b      	movs	r2, #11
10043e4c:	2128      	movs	r1, #40	@ 0x28
10043e4e:	f7ff fdb1 	bl	100439b4 <DW1000_write_reg>

	// Configure RF TX blocks (for specified channel and PRF)
	// Configure RF TX control
	tmp = RF_TXCTRL_CH2;
10043e52:	4bac      	ldr	r3, [pc, #688]	@ (10044104 <DW1000_config+0x3d0>)
10043e54:	623b      	str	r3, [r7, #32]
	DW1000_write_reg(dw1000, RF_CONF_ID, RF_TXCTRL_OFFSET, (void*) &tmp, 4);
10043e56:	193b      	adds	r3, r7, r4
10043e58:	6878      	ldr	r0, [r7, #4]
10043e5a:	2204      	movs	r2, #4
10043e5c:	9200      	str	r2, [sp, #0]
10043e5e:	220c      	movs	r2, #12
10043e60:	2128      	movs	r1, #40	@ 0x28
10043e62:	f7ff fda7 	bl	100439b4 <DW1000_write_reg>

	// Configure the baseband parameters (for specified PRF, bit rate, PAC, and SFD settings)
	// DTUNE0
	tmp = DRX_TUNE0b_110K_NSTD;
10043e66:	2316      	movs	r3, #22
10043e68:	623b      	str	r3, [r7, #32]
	DW1000_write_reg(dw1000, DRX_CONF_ID, DRX_TUNE0b_OFFSET, (void*) &tmp, 2);
10043e6a:	193b      	adds	r3, r7, r4
10043e6c:	6878      	ldr	r0, [r7, #4]
10043e6e:	2202      	movs	r2, #2
10043e70:	9200      	str	r2, [sp, #0]
10043e72:	2202      	movs	r2, #2
10043e74:	2127      	movs	r1, #39	@ 0x27
10043e76:	f7ff fd9d 	bl	100439b4 <DW1000_write_reg>

	// DTUNE1
	tmp = DRX_TUNE1a_PRF64;
10043e7a:	238d      	movs	r3, #141	@ 0x8d
10043e7c:	623b      	str	r3, [r7, #32]
	DW1000_write_reg(dw1000, DRX_CONF_ID, DRX_TUNE1a_OFFSET, (void*) &tmp, 2);
10043e7e:	193b      	adds	r3, r7, r4
10043e80:	6878      	ldr	r0, [r7, #4]
10043e82:	2202      	movs	r2, #2
10043e84:	9200      	str	r2, [sp, #0]
10043e86:	2204      	movs	r2, #4
10043e88:	2127      	movs	r1, #39	@ 0x27
10043e8a:	f7ff fd93 	bl	100439b4 <DW1000_write_reg>
	tmp = DRX_TUNE1b_110K;
10043e8e:	2364      	movs	r3, #100	@ 0x64
10043e90:	623b      	str	r3, [r7, #32]
	DW1000_write_reg(dw1000, DRX_CONF_ID, DRX_TUNE1b_OFFSET, (void*) &tmp, 2);
10043e92:	193b      	adds	r3, r7, r4
10043e94:	6878      	ldr	r0, [r7, #4]
10043e96:	2202      	movs	r2, #2
10043e98:	9200      	str	r2, [sp, #0]
10043e9a:	2206      	movs	r2, #6
10043e9c:	2127      	movs	r1, #39	@ 0x27
10043e9e:	f7ff fd89 	bl	100439b4 <DW1000_write_reg>

	// DTUNE2
	tmp = DRX_TUNE2_PRF64_PAC32;
10043ea2:	4b99      	ldr	r3, [pc, #612]	@ (10044108 <DW1000_config+0x3d4>)
10043ea4:	623b      	str	r3, [r7, #32]
	DW1000_write_reg(dw1000, DRX_CONF_ID, DRX_TUNE2_OFFSET, (void*) &tmp, 4);
10043ea6:	193b      	adds	r3, r7, r4
10043ea8:	6878      	ldr	r0, [r7, #4]
10043eaa:	2204      	movs	r2, #4
10043eac:	9200      	str	r2, [sp, #0]
10043eae:	2208      	movs	r2, #8
10043eb0:	2127      	movs	r1, #39	@ 0x27
10043eb2:	f7ff fd7f 	bl	100439b4 <DW1000_write_reg>

	// DTUNE3 (SFD timeout)
	// Don't allow 0 - SFD timeout will always be enabled
	if (cfg->sfdTO == 0) {
10043eb6:	683b      	ldr	r3, [r7, #0]
10043eb8:	895b      	ldrh	r3, [r3, #10]
10043eba:	2b00      	cmp	r3, #0
10043ebc:	d102      	bne.n	10043ec4 <DW1000_config+0x190>
		cfg->sfdTO = DWT_SFDTOC_DEF;
10043ebe:	683b      	ldr	r3, [r7, #0]
10043ec0:	4a92      	ldr	r2, [pc, #584]	@ (1004410c <DW1000_config+0x3d8>)
10043ec2:	815a      	strh	r2, [r3, #10]
	}
	tmp = cfg->sfdTO;
10043ec4:	683b      	ldr	r3, [r7, #0]
10043ec6:	895b      	ldrh	r3, [r3, #10]
10043ec8:	623b      	str	r3, [r7, #32]
	DW1000_write_reg(dw1000, DRX_CONF_ID, DRX_SFDTOC_OFFSET, (void*) &tmp, 2);
10043eca:	2420      	movs	r4, #32
10043ecc:	193b      	adds	r3, r7, r4
10043ece:	6878      	ldr	r0, [r7, #4]
10043ed0:	2202      	movs	r2, #2
10043ed2:	9200      	str	r2, [sp, #0]
10043ed4:	2220      	movs	r2, #32
10043ed6:	2127      	movs	r1, #39	@ 0x27
10043ed8:	f7ff fd6c 	bl	100439b4 <DW1000_write_reg>

	// Configure AGC parameters
	tmp = AGC_TUNE2_VAL;
10043edc:	4b8c      	ldr	r3, [pc, #560]	@ (10044110 <DW1000_config+0x3dc>)
10043ede:	623b      	str	r3, [r7, #32]
	DW1000_write_reg(dw1000, AGC_CFG_STS_ID, 0xC, (void*) &tmp, 4);
10043ee0:	193b      	adds	r3, r7, r4
10043ee2:	6878      	ldr	r0, [r7, #4]
10043ee4:	2204      	movs	r2, #4
10043ee6:	9200      	str	r2, [sp, #0]
10043ee8:	220c      	movs	r2, #12
10043eea:	2123      	movs	r1, #35	@ 0x23
10043eec:	f7ff fd62 	bl	100439b4 <DW1000_write_reg>
	tmp = AGC_TUNE1_64M;
10043ef0:	4b88      	ldr	r3, [pc, #544]	@ (10044114 <DW1000_config+0x3e0>)
10043ef2:	623b      	str	r3, [r7, #32]
	DW1000_write_reg(dw1000, AGC_CFG_STS_ID, 0x4, (void*) &tmp, 2);
10043ef4:	193b      	adds	r3, r7, r4
10043ef6:	6878      	ldr	r0, [r7, #4]
10043ef8:	2202      	movs	r2, #2
10043efa:	9200      	str	r2, [sp, #0]
10043efc:	2204      	movs	r2, #4
10043efe:	2123      	movs	r1, #35	@ 0x23
10043f00:	f7ff fd58 	bl	100439b4 <DW1000_write_reg>

	// Set (non-standard) user SFD for improved performance,
	uint8_t nsSfd_result = 0;
10043f04:	2527      	movs	r5, #39	@ 0x27
10043f06:	197b      	adds	r3, r7, r5
10043f08:	2200      	movs	r2, #0
10043f0a:	701a      	strb	r2, [r3, #0]
	uint8_t useDWnsSFD = 0;
10043f0c:	2626      	movs	r6, #38	@ 0x26
10043f0e:	19bb      	adds	r3, r7, r6
10043f10:	2200      	movs	r2, #0
10043f12:	701a      	strb	r2, [r3, #0]
	if (cfg->nsSFD) {
10043f14:	683b      	ldr	r3, [r7, #0]
10043f16:	799b      	ldrb	r3, [r3, #6]
10043f18:	2b00      	cmp	r3, #0
10043f1a:	d00f      	beq.n	10043f3c <DW1000_config+0x208>
		// Write non standard (DW) SFD length
		tmp = DW_NS_SFD_LEN_110K;
10043f1c:	2340      	movs	r3, #64	@ 0x40
10043f1e:	623b      	str	r3, [r7, #32]
		DW1000_write_reg(dw1000, USR_SFD_ID, 0x00, (void*) &tmp, 1);
10043f20:	193b      	adds	r3, r7, r4
10043f22:	6878      	ldr	r0, [r7, #4]
10043f24:	2201      	movs	r2, #1
10043f26:	9200      	str	r2, [sp, #0]
10043f28:	2200      	movs	r2, #0
10043f2a:	2121      	movs	r1, #33	@ 0x21
10043f2c:	f7ff fd42 	bl	100439b4 <DW1000_write_reg>
		nsSfd_result = 3;
10043f30:	197b      	adds	r3, r7, r5
10043f32:	2203      	movs	r2, #3
10043f34:	701a      	strb	r2, [r3, #0]
		useDWnsSFD = 1;
10043f36:	19bb      	adds	r3, r7, r6
10043f38:	2201      	movs	r2, #1
10043f3a:	701a      	strb	r2, [r3, #0]
	}

	uint8_t chan = cfg->chan;
10043f3c:	2125      	movs	r1, #37	@ 0x25
10043f3e:	187b      	adds	r3, r7, r1
10043f40:	683a      	ldr	r2, [r7, #0]
10043f42:	7812      	ldrb	r2, [r2, #0]
10043f44:	701a      	strb	r2, [r3, #0]
	uint32_t regval = (CHAN_CTRL_TX_CHAN_MASK
			& (chan << CHAN_CTRL_TX_CHAN_SHIFT))
10043f46:	187b      	adds	r3, r7, r1
10043f48:	781b      	ldrb	r3, [r3, #0]
10043f4a:	220f      	movs	r2, #15
10043f4c:	401a      	ands	r2, r3
			| // Transmit Channel
			(CHAN_CTRL_RX_CHAN_MASK & (chan << CHAN_CTRL_RX_CHAN_SHIFT))
10043f4e:	187b      	adds	r3, r7, r1
10043f50:	781b      	ldrb	r3, [r3, #0]
10043f52:	011b      	lsls	r3, r3, #4
10043f54:	21ff      	movs	r1, #255	@ 0xff
10043f56:	400b      	ands	r3, r1
			| // Transmit Channel
10043f58:	431a      	orrs	r2, r3
			| // Receive Channel
			(CHAN_CTRL_RXFPRF_MASK
					& ((uint32_t) cfg->prf << CHAN_CTRL_RXFPRF_SHIFT))
10043f5a:	683b      	ldr	r3, [r7, #0]
10043f5c:	785b      	ldrb	r3, [r3, #1]
10043f5e:	0499      	lsls	r1, r3, #18
10043f60:	23c0      	movs	r3, #192	@ 0xc0
10043f62:	031b      	lsls	r3, r3, #12
10043f64:	400b      	ands	r3, r1
			| // Receive Channel
10043f66:	431a      	orrs	r2, r3
			| // RX PRF
			((CHAN_CTRL_TNSSFD | CHAN_CTRL_RNSSFD)
					& ((uint32_t) nsSfd_result << CHAN_CTRL_TNSSFD_SHIFT))
10043f68:	2327      	movs	r3, #39	@ 0x27
10043f6a:	18fb      	adds	r3, r7, r3
10043f6c:	781b      	ldrb	r3, [r3, #0]
10043f6e:	0519      	lsls	r1, r3, #20
10043f70:	23c0      	movs	r3, #192	@ 0xc0
10043f72:	039b      	lsls	r3, r3, #14
10043f74:	400b      	ands	r3, r1
			| // RX PRF
10043f76:	431a      	orrs	r2, r3
			| // nsSFD enable RX&TX
			(CHAN_CTRL_DWSFD & ((uint32_t) useDWnsSFD << CHAN_CTRL_DWSFD_SHIFT))
10043f78:	2326      	movs	r3, #38	@ 0x26
10043f7a:	18fb      	adds	r3, r7, r3
10043f7c:	781b      	ldrb	r3, [r3, #0]
10043f7e:	0459      	lsls	r1, r3, #17
10043f80:	2380      	movs	r3, #128	@ 0x80
10043f82:	029b      	lsls	r3, r3, #10
10043f84:	400b      	ands	r3, r1
			| // nsSFD enable RX&TX
10043f86:	431a      	orrs	r2, r3
			| // Use DW nsSFD
			(CHAN_CTRL_TX_PCOD_MASK
					& ((uint32_t) cfg->txCode << CHAN_CTRL_TX_PCOD_SHIFT)) | // TX Preamble Code
10043f88:	683b      	ldr	r3, [r7, #0]
10043f8a:	791b      	ldrb	r3, [r3, #4]
10043f8c:	0599      	lsls	r1, r3, #22
10043f8e:	23f8      	movs	r3, #248	@ 0xf8
10043f90:	04db      	lsls	r3, r3, #19
10043f92:	400b      	ands	r3, r1
			| // Use DW nsSFD
10043f94:	431a      	orrs	r2, r3
			(CHAN_CTRL_RX_PCOD_MASK
					& ((uint32_t) cfg->rxCode << CHAN_CTRL_RX_PCOD_SHIFT)); // RX Preamble Code
10043f96:	683b      	ldr	r3, [r7, #0]
10043f98:	795b      	ldrb	r3, [r3, #5]
10043f9a:	06db      	lsls	r3, r3, #27
					& ((uint32_t) cfg->txCode << CHAN_CTRL_TX_PCOD_SHIFT)) | // TX Preamble Code
10043f9c:	4313      	orrs	r3, r2
	uint32_t regval = (CHAN_CTRL_TX_CHAN_MASK
10043f9e:	617b      	str	r3, [r7, #20]

	DW1000_write_reg(dw1000, CHAN_CTRL_ID, 0x00, (void*) &regval, 4);
10043fa0:	2314      	movs	r3, #20
10043fa2:	18fb      	adds	r3, r7, r3
10043fa4:	6878      	ldr	r0, [r7, #4]
10043fa6:	2204      	movs	r2, #4
10043fa8:	9200      	str	r2, [sp, #0]
10043faa:	2200      	movs	r2, #0
10043fac:	211f      	movs	r1, #31
10043fae:	f7ff fd01 	bl	100439b4 <DW1000_write_reg>

	// Set up TX Preamble Size, PRF and Data Rate
	txFCTRL = ((uint32_t) (cfg->txPreambLength | cfg->prf)
10043fb2:	683b      	ldr	r3, [r7, #0]
10043fb4:	789a      	ldrb	r2, [r3, #2]
10043fb6:	683b      	ldr	r3, [r7, #0]
10043fb8:	785b      	ldrb	r3, [r3, #1]
10043fba:	4313      	orrs	r3, r2
10043fbc:	b2db      	uxtb	r3, r3
			<< TX_FCTRL_TXPRF_SHFT)
10043fbe:	041a      	lsls	r2, r3, #16
			| ((uint32_t) cfg->dataRate << TX_FCTRL_TXBR_SHFT);
10043fc0:	683b      	ldr	r3, [r7, #0]
10043fc2:	79db      	ldrb	r3, [r3, #7]
10043fc4:	035b      	lsls	r3, r3, #13
10043fc6:	431a      	orrs	r2, r3
	txFCTRL = ((uint32_t) (cfg->txPreambLength | cfg->prf)
10043fc8:	4b53      	ldr	r3, [pc, #332]	@ (10044118 <DW1000_config+0x3e4>)
10043fca:	601a      	str	r2, [r3, #0]

	DW1000_write_reg(dw1000, TX_FCTRL_ID, 0x00, (void*) &txFCTRL, 4);
10043fcc:	4b52      	ldr	r3, [pc, #328]	@ (10044118 <DW1000_config+0x3e4>)
10043fce:	6878      	ldr	r0, [r7, #4]
10043fd0:	2204      	movs	r2, #4
10043fd2:	9200      	str	r2, [sp, #0]
10043fd4:	2200      	movs	r2, #0
10043fd6:	2108      	movs	r1, #8
10043fd8:	f7ff fcec 	bl	100439b4 <DW1000_write_reg>

	// Request TX start and TRX off at the same time
	tmp = SYS_CTRL_TXSTRT | SYS_CTRL_TRXOFF;
10043fdc:	2342      	movs	r3, #66	@ 0x42
10043fde:	623b      	str	r3, [r7, #32]
	DW1000_write_reg(dw1000, SYS_CTRL_ID, SYS_CTRL_OFFSET, (void*) &tmp, 1);
10043fe0:	2420      	movs	r4, #32
10043fe2:	193b      	adds	r3, r7, r4
10043fe4:	6878      	ldr	r0, [r7, #4]
10043fe6:	2201      	movs	r2, #1
10043fe8:	9200      	str	r2, [sp, #0]
10043fea:	2200      	movs	r2, #0
10043fec:	210d      	movs	r1, #13
10043fee:	f7ff fce1 	bl	100439b4 <DW1000_write_reg>

	// set rx antenna delay
	tmp = RX_ANT_DLY;
10043ff2:	4b4a      	ldr	r3, [pc, #296]	@ (1004411c <DW1000_config+0x3e8>)
10043ff4:	623b      	str	r3, [r7, #32]
	DW1000_write_reg(dw1000, LDE_IF_ID, LDE_RXANTD_OFFSET, (void*) &tmp, 2);
10043ff6:	193b      	adds	r3, r7, r4
10043ff8:	4949      	ldr	r1, [pc, #292]	@ (10044120 <DW1000_config+0x3ec>)
10043ffa:	6878      	ldr	r0, [r7, #4]
10043ffc:	2202      	movs	r2, #2
10043ffe:	9200      	str	r2, [sp, #0]
10044000:	000a      	movs	r2, r1
10044002:	212e      	movs	r1, #46	@ 0x2e
10044004:	f7ff fcd6 	bl	100439b4 <DW1000_write_reg>
	// set tx antenna delay
	tmp = TX_ANT_DLY;
10044008:	4b44      	ldr	r3, [pc, #272]	@ (1004411c <DW1000_config+0x3e8>)
1004400a:	623b      	str	r3, [r7, #32]
	DW1000_write_reg(dw1000, LDE_IF_ID, TX_ANTD_OFFSET, (void*) &tmp, 2);
1004400c:	193b      	adds	r3, r7, r4
1004400e:	6878      	ldr	r0, [r7, #4]
10044010:	2202      	movs	r2, #2
10044012:	9200      	str	r2, [sp, #0]
10044014:	2200      	movs	r2, #0
10044016:	212e      	movs	r1, #46	@ 0x2e
10044018:	f7ff fccc 	bl	100439b4 <DW1000_write_reg>

	/* tx specific functions */
	if (dw1000->tx) {
1004401c:	687b      	ldr	r3, [r7, #4]
1004401e:	7c1b      	ldrb	r3, [r3, #16]
10044020:	2201      	movs	r2, #1
10044022:	4013      	ands	r3, r2
10044024:	b2db      	uxtb	r3, r3
10044026:	2b00      	cmp	r3, #0
10044028:	d038      	beq.n	1004409c <DW1000_config+0x368>
		// set rx after tx delay
		uint32_t val;
		DW1000_read_reg(dw1000, ACK_RESP_T_ID, 0x00, (void*) &val, 4); // Read ACK_RESP_T_ID register
1004402a:	250c      	movs	r5, #12
1004402c:	197b      	adds	r3, r7, r5
1004402e:	6878      	ldr	r0, [r7, #4]
10044030:	2204      	movs	r2, #4
10044032:	9200      	str	r2, [sp, #0]
10044034:	2200      	movs	r2, #0
10044036:	211a      	movs	r1, #26
10044038:	f7ff fc5a 	bl	100438f0 <DW1000_read_reg>
		val &= ~(ACK_RESP_T_W4R_TIM_MASK); // Clear the timer (19:0)
1004403c:	68fb      	ldr	r3, [r7, #12]
1004403e:	0d1b      	lsrs	r3, r3, #20
10044040:	051b      	lsls	r3, r3, #20
10044042:	60fb      	str	r3, [r7, #12]
		val |= (POLL_TX_TO_RESP_RX_DLY_UUS & ACK_RESP_T_W4R_TIM_MASK); // In UWB microseconds (e.g. turn the receiver on 20uus after TX)
10044044:	68fb      	ldr	r3, [r7, #12]
10044046:	2296      	movs	r2, #150	@ 0x96
10044048:	0052      	lsls	r2, r2, #1
1004404a:	4313      	orrs	r3, r2
1004404c:	60fb      	str	r3, [r7, #12]
		DW1000_write_reg(dw1000, ACK_RESP_T_ID, 0x00, (void*) &val, 4);
1004404e:	197b      	adds	r3, r7, r5
10044050:	6878      	ldr	r0, [r7, #4]
10044052:	2204      	movs	r2, #4
10044054:	9200      	str	r2, [sp, #0]
10044056:	2200      	movs	r2, #0
10044058:	211a      	movs	r1, #26
1004405a:	f7ff fcab 	bl	100439b4 <DW1000_write_reg>

		uint32_t time = RESP_RX_TIMEOUT_UUS;
1004405e:	4b31      	ldr	r3, [pc, #196]	@ (10044124 <DW1000_config+0x3f0>)
10044060:	60bb      	str	r3, [r7, #8]
		// set tx timeout
		DW1000_write_reg(dw1000, RX_FWTO_ID, RX_FWTO_OFFSET, (void*) &time, 2);
10044062:	2308      	movs	r3, #8
10044064:	18fb      	adds	r3, r7, r3
10044066:	6878      	ldr	r0, [r7, #4]
10044068:	2202      	movs	r2, #2
1004406a:	9200      	str	r2, [sp, #0]
1004406c:	2200      	movs	r2, #0
1004406e:	210c      	movs	r1, #12
10044070:	f7ff fca0 	bl	100439b4 <DW1000_write_reg>
		DW1000_read_reg(dw1000, SYS_CFG_ID, 0x03, (void*) &tmp, 1); // Read at offset 3 to get the upper byte only
10044074:	193b      	adds	r3, r7, r4
10044076:	6878      	ldr	r0, [r7, #4]
10044078:	2201      	movs	r2, #1
1004407a:	9200      	str	r2, [sp, #0]
1004407c:	2203      	movs	r2, #3
1004407e:	2104      	movs	r1, #4
10044080:	f7ff fc36 	bl	100438f0 <DW1000_read_reg>
		tmp |= (SYS_CFG_RXWTOE >> 24); // Shift RXWTOE mask as we read the upper byte only
10044084:	6a3b      	ldr	r3, [r7, #32]
10044086:	2210      	movs	r2, #16
10044088:	4313      	orrs	r3, r2
1004408a:	623b      	str	r3, [r7, #32]
		// OR in 32bit value (1 bit set), I know this is in high byte.

		DW1000_write_reg(dw1000, SYS_CFG_ID, 0x03, (void*) &tmp, 1); // Write at offset 3 to write the upper byte only
1004408c:	193b      	adds	r3, r7, r4
1004408e:	6878      	ldr	r0, [r7, #4]
10044090:	2201      	movs	r2, #1
10044092:	9200      	str	r2, [sp, #0]
10044094:	2203      	movs	r2, #3
10044096:	2104      	movs	r1, #4
10044098:	f7ff fc8c 	bl	100439b4 <DW1000_write_reg>

	}
	/* end of tx specific functions */

	// set preamble timeout
	tmp = PRE_TIMEOUT;
1004409c:	2320      	movs	r3, #32
1004409e:	623b      	str	r3, [r7, #32]
	DW1000_write_reg(dw1000, DRX_CONF_ID, DRX_PRETOC_OFFSET, (void*) &tmp, 2);
100440a0:	2320      	movs	r3, #32
100440a2:	18fb      	adds	r3, r7, r3
100440a4:	6878      	ldr	r0, [r7, #4]
100440a6:	2202      	movs	r2, #2
100440a8:	9200      	str	r2, [sp, #0]
100440aa:	2224      	movs	r2, #36	@ 0x24
100440ac:	2127      	movs	r1, #39	@ 0x27
100440ae:	f7ff fc81 	bl	100439b4 <DW1000_write_reg>

	uint32_t sys_status;
	DW1000_read_reg(dw1000, SYS_STATUS_ID, 0x00, (void*) &sys_status, 4); // Read at offset 3 to get the upper 2 bytes out of 5
100440b2:	2310      	movs	r3, #16
100440b4:	18fb      	adds	r3, r7, r3
100440b6:	6878      	ldr	r0, [r7, #4]
100440b8:	2204      	movs	r2, #4
100440ba:	9200      	str	r2, [sp, #0]
100440bc:	2200      	movs	r2, #0
100440be:	210f      	movs	r1, #15
100440c0:	f7ff fc16 	bl	100438f0 <DW1000_read_reg>
	if (sys_status & 0x2) {
100440c4:	693b      	ldr	r3, [r7, #16]
100440c6:	2202      	movs	r2, #2
100440c8:	4013      	ands	r3, r2
100440ca:	d001      	beq.n	100440d0 <DW1000_config+0x39c>
		return 1;
100440cc:	2301      	movs	r3, #1
100440ce:	e000      	b.n	100440d2 <DW1000_config+0x39e>
	} else {
		return 0;
100440d0:	2300      	movs	r3, #0
	}

}
100440d2:	0018      	movs	r0, r3
100440d4:	46bd      	mov	sp, r7
100440d6:	b00b      	add	sp, #44	@ 0x2c
100440d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
100440da:	46c0      	nop			@ (mov r8, r8)
100440dc:	000028f4 	.word	0x000028f4
100440e0:	ffbfffff 	.word	0xffbfffff
100440e4:	fffcffff 	.word	0xfffcffff
100440e8:	00002804 	.word	0x00002804
100440ec:	00000806 	.word	0x00000806
100440f0:	20000b0c 	.word	0x20000b0c
100440f4:	00000607 	.word	0x00000607
100440f8:	00001806 	.word	0x00001806
100440fc:	00001607 	.word	0x00001607
10044100:	08400508 	.word	0x08400508
10044104:	00045ca0 	.word	0x00045ca0
10044108:	353b015e 	.word	0x353b015e
1004410c:	00001041 	.word	0x00001041
10044110:	2502a907 	.word	0x2502a907
10044114:	0000889b 	.word	0x0000889b
10044118:	20000804 	.word	0x20000804
1004411c:	00004034 	.word	0x00004034
10044120:	00001804 	.word	0x00001804
10044124:	00001388 	.word	0x00001388

10044128 <get_tx_timestamp_u64>:

static uint64_t get_tx_timestamp_u64(DW1000_t *dw1000) {
10044128:	b5f0      	push	{r4, r5, r6, r7, lr}
1004412a:	b08d      	sub	sp, #52	@ 0x34
1004412c:	af02      	add	r7, sp, #8
1004412e:	6178      	str	r0, [r7, #20]
	uint8_t ts_tab[5];
	uint64_t ts = 0;
10044130:	2200      	movs	r2, #0
10044132:	2300      	movs	r3, #0
10044134:	623a      	str	r2, [r7, #32]
10044136:	627b      	str	r3, [r7, #36]	@ 0x24
	int8_t i;
	DW1000_read_reg(dw1000, TX_TIME_ID, TX_TIME_TX_STAMP_OFFSET,
10044138:	2308      	movs	r3, #8
1004413a:	2610      	movs	r6, #16
1004413c:	199b      	adds	r3, r3, r6
1004413e:	19db      	adds	r3, r3, r7
10044140:	6978      	ldr	r0, [r7, #20]
10044142:	2205      	movs	r2, #5
10044144:	9200      	str	r2, [sp, #0]
10044146:	2200      	movs	r2, #0
10044148:	2117      	movs	r1, #23
1004414a:	f7ff fbd1 	bl	100438f0 <DW1000_read_reg>
			(void*) &ts_tab, TX_TIME_TX_STAMP_LEN);
	for (i = 4; i >= 0; i--) {
1004414e:	230f      	movs	r3, #15
10044150:	199b      	adds	r3, r3, r6
10044152:	19db      	adds	r3, r3, r7
10044154:	2204      	movs	r2, #4
10044156:	701a      	strb	r2, [r3, #0]
10044158:	e02d      	b.n	100441b6 <get_tx_timestamp_u64+0x8e>
		ts <<= 8;
1004415a:	6a3b      	ldr	r3, [r7, #32]
1004415c:	0e1b      	lsrs	r3, r3, #24
1004415e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
10044160:	0215      	lsls	r5, r2, #8
10044162:	431d      	orrs	r5, r3
10044164:	6a3b      	ldr	r3, [r7, #32]
10044166:	021c      	lsls	r4, r3, #8
10044168:	623c      	str	r4, [r7, #32]
1004416a:	627d      	str	r5, [r7, #36]	@ 0x24
		ts |= ts_tab[i];
1004416c:	200f      	movs	r0, #15
1004416e:	2110      	movs	r1, #16
10044170:	1843      	adds	r3, r0, r1
10044172:	19db      	adds	r3, r3, r7
10044174:	781b      	ldrb	r3, [r3, #0]
10044176:	b25b      	sxtb	r3, r3
10044178:	2208      	movs	r2, #8
1004417a:	1852      	adds	r2, r2, r1
1004417c:	19d2      	adds	r2, r2, r7
1004417e:	5cd3      	ldrb	r3, [r2, r3]
10044180:	60bb      	str	r3, [r7, #8]
10044182:	2300      	movs	r3, #0
10044184:	60fb      	str	r3, [r7, #12]
10044186:	6a3b      	ldr	r3, [r7, #32]
10044188:	68b9      	ldr	r1, [r7, #8]
1004418a:	68fa      	ldr	r2, [r7, #12]
1004418c:	000e      	movs	r6, r1
1004418e:	431e      	orrs	r6, r3
10044190:	603e      	str	r6, [r7, #0]
10044192:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10044194:	431a      	orrs	r2, r3
10044196:	607a      	str	r2, [r7, #4]
10044198:	683a      	ldr	r2, [r7, #0]
1004419a:	687b      	ldr	r3, [r7, #4]
1004419c:	623a      	str	r2, [r7, #32]
1004419e:	627b      	str	r3, [r7, #36]	@ 0x24
	for (i = 4; i >= 0; i--) {
100441a0:	2110      	movs	r1, #16
100441a2:	1843      	adds	r3, r0, r1
100441a4:	19db      	adds	r3, r3, r7
100441a6:	781b      	ldrb	r3, [r3, #0]
100441a8:	b25b      	sxtb	r3, r3
100441aa:	b2db      	uxtb	r3, r3
100441ac:	3b01      	subs	r3, #1
100441ae:	b2da      	uxtb	r2, r3
100441b0:	1843      	adds	r3, r0, r1
100441b2:	19db      	adds	r3, r3, r7
100441b4:	701a      	strb	r2, [r3, #0]
100441b6:	230f      	movs	r3, #15
100441b8:	2210      	movs	r2, #16
100441ba:	189b      	adds	r3, r3, r2
100441bc:	19db      	adds	r3, r3, r7
100441be:	781b      	ldrb	r3, [r3, #0]
100441c0:	2b7f      	cmp	r3, #127	@ 0x7f
100441c2:	d9ca      	bls.n	1004415a <get_tx_timestamp_u64+0x32>
	}
	return ts;
100441c4:	6a3a      	ldr	r2, [r7, #32]
100441c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
100441c8:	0010      	movs	r0, r2
100441ca:	0019      	movs	r1, r3
100441cc:	46bd      	mov	sp, r7
100441ce:	b00b      	add	sp, #44	@ 0x2c
100441d0:	bdf0      	pop	{r4, r5, r6, r7, pc}

100441d2 <get_rx_timestamp_u64>:

static uint64_t get_rx_timestamp_u64(DW1000_t *dw1000) {
100441d2:	b5f0      	push	{r4, r5, r6, r7, lr}
100441d4:	b08d      	sub	sp, #52	@ 0x34
100441d6:	af02      	add	r7, sp, #8
100441d8:	6178      	str	r0, [r7, #20]
	uint8_t ts_tab[5];
	uint64_t ts = 0;
100441da:	2200      	movs	r2, #0
100441dc:	2300      	movs	r3, #0
100441de:	623a      	str	r2, [r7, #32]
100441e0:	627b      	str	r3, [r7, #36]	@ 0x24
	int8_t i;
	DW1000_read_reg(dw1000, RX_TIME_ID, RX_TIME_RX_STAMP_OFFSET,
100441e2:	2308      	movs	r3, #8
100441e4:	2610      	movs	r6, #16
100441e6:	199b      	adds	r3, r3, r6
100441e8:	19db      	adds	r3, r3, r7
100441ea:	6978      	ldr	r0, [r7, #20]
100441ec:	2205      	movs	r2, #5
100441ee:	9200      	str	r2, [sp, #0]
100441f0:	2200      	movs	r2, #0
100441f2:	2115      	movs	r1, #21
100441f4:	f7ff fb7c 	bl	100438f0 <DW1000_read_reg>
			(void*) &ts_tab, RX_TIME_RX_STAMP_LEN);
	for (i = 4; i >= 0; i--) {
100441f8:	230f      	movs	r3, #15
100441fa:	199b      	adds	r3, r3, r6
100441fc:	19db      	adds	r3, r3, r7
100441fe:	2204      	movs	r2, #4
10044200:	701a      	strb	r2, [r3, #0]
10044202:	e02d      	b.n	10044260 <get_rx_timestamp_u64+0x8e>
		ts <<= 8;
10044204:	6a3b      	ldr	r3, [r7, #32]
10044206:	0e1b      	lsrs	r3, r3, #24
10044208:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
1004420a:	0215      	lsls	r5, r2, #8
1004420c:	431d      	orrs	r5, r3
1004420e:	6a3b      	ldr	r3, [r7, #32]
10044210:	021c      	lsls	r4, r3, #8
10044212:	623c      	str	r4, [r7, #32]
10044214:	627d      	str	r5, [r7, #36]	@ 0x24
		ts |= ts_tab[i];
10044216:	200f      	movs	r0, #15
10044218:	2110      	movs	r1, #16
1004421a:	1843      	adds	r3, r0, r1
1004421c:	19db      	adds	r3, r3, r7
1004421e:	781b      	ldrb	r3, [r3, #0]
10044220:	b25b      	sxtb	r3, r3
10044222:	2208      	movs	r2, #8
10044224:	1852      	adds	r2, r2, r1
10044226:	19d2      	adds	r2, r2, r7
10044228:	5cd3      	ldrb	r3, [r2, r3]
1004422a:	60bb      	str	r3, [r7, #8]
1004422c:	2300      	movs	r3, #0
1004422e:	60fb      	str	r3, [r7, #12]
10044230:	6a3b      	ldr	r3, [r7, #32]
10044232:	68b9      	ldr	r1, [r7, #8]
10044234:	68fa      	ldr	r2, [r7, #12]
10044236:	000e      	movs	r6, r1
10044238:	431e      	orrs	r6, r3
1004423a:	603e      	str	r6, [r7, #0]
1004423c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
1004423e:	431a      	orrs	r2, r3
10044240:	607a      	str	r2, [r7, #4]
10044242:	683a      	ldr	r2, [r7, #0]
10044244:	687b      	ldr	r3, [r7, #4]
10044246:	623a      	str	r2, [r7, #32]
10044248:	627b      	str	r3, [r7, #36]	@ 0x24
	for (i = 4; i >= 0; i--) {
1004424a:	2110      	movs	r1, #16
1004424c:	1843      	adds	r3, r0, r1
1004424e:	19db      	adds	r3, r3, r7
10044250:	781b      	ldrb	r3, [r3, #0]
10044252:	b25b      	sxtb	r3, r3
10044254:	b2db      	uxtb	r3, r3
10044256:	3b01      	subs	r3, #1
10044258:	b2da      	uxtb	r2, r3
1004425a:	1843      	adds	r3, r0, r1
1004425c:	19db      	adds	r3, r3, r7
1004425e:	701a      	strb	r2, [r3, #0]
10044260:	230f      	movs	r3, #15
10044262:	2210      	movs	r2, #16
10044264:	189b      	adds	r3, r3, r2
10044266:	19db      	adds	r3, r3, r7
10044268:	781b      	ldrb	r3, [r3, #0]
1004426a:	2b7f      	cmp	r3, #127	@ 0x7f
1004426c:	d9ca      	bls.n	10044204 <get_rx_timestamp_u64+0x32>
	}
	return ts;
1004426e:	6a3a      	ldr	r2, [r7, #32]
10044270:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
10044272:	0010      	movs	r0, r2
10044274:	0019      	movs	r1, r3
10044276:	46bd      	mov	sp, r7
10044278:	b00b      	add	sp, #44	@ 0x2c
1004427a:	bdf0      	pop	{r4, r5, r6, r7, pc}

1004427c <final_msg_set_ts>:

static void final_msg_set_ts(uint8_t *ts_field, uint64_t ts) {
1004427c:	b5b0      	push	{r4, r5, r7, lr}
1004427e:	b086      	sub	sp, #24
10044280:	af00      	add	r7, sp, #0
10044282:	60f8      	str	r0, [r7, #12]
10044284:	603a      	str	r2, [r7, #0]
10044286:	607b      	str	r3, [r7, #4]
	int8_t i;
	for (i = 0; i < FINAL_MSG_TS_LEN; i++) {
10044288:	2317      	movs	r3, #23
1004428a:	18fb      	adds	r3, r7, r3
1004428c:	2200      	movs	r2, #0
1004428e:	701a      	strb	r2, [r3, #0]
10044290:	e01b      	b.n	100442ca <final_msg_set_ts+0x4e>
		ts_field[i] = (uint8_t) ts;
10044292:	2017      	movs	r0, #23
10044294:	183b      	adds	r3, r7, r0
10044296:	781b      	ldrb	r3, [r3, #0]
10044298:	b25b      	sxtb	r3, r3
1004429a:	68fa      	ldr	r2, [r7, #12]
1004429c:	18d1      	adds	r1, r2, r3
1004429e:	683a      	ldr	r2, [r7, #0]
100442a0:	687b      	ldr	r3, [r7, #4]
100442a2:	1c13      	adds	r3, r2, #0
100442a4:	b2db      	uxtb	r3, r3
100442a6:	700b      	strb	r3, [r1, #0]
		ts >>= 8;
100442a8:	687b      	ldr	r3, [r7, #4]
100442aa:	061b      	lsls	r3, r3, #24
100442ac:	683a      	ldr	r2, [r7, #0]
100442ae:	0a14      	lsrs	r4, r2, #8
100442b0:	431c      	orrs	r4, r3
100442b2:	687b      	ldr	r3, [r7, #4]
100442b4:	0a1d      	lsrs	r5, r3, #8
100442b6:	603c      	str	r4, [r7, #0]
100442b8:	607d      	str	r5, [r7, #4]
	for (i = 0; i < FINAL_MSG_TS_LEN; i++) {
100442ba:	183b      	adds	r3, r7, r0
100442bc:	781b      	ldrb	r3, [r3, #0]
100442be:	b25b      	sxtb	r3, r3
100442c0:	b2db      	uxtb	r3, r3
100442c2:	3301      	adds	r3, #1
100442c4:	b2da      	uxtb	r2, r3
100442c6:	183b      	adds	r3, r7, r0
100442c8:	701a      	strb	r2, [r3, #0]
100442ca:	2317      	movs	r3, #23
100442cc:	18fb      	adds	r3, r7, r3
100442ce:	781b      	ldrb	r3, [r3, #0]
100442d0:	b25b      	sxtb	r3, r3
100442d2:	2b03      	cmp	r3, #3
100442d4:	dddd      	ble.n	10044292 <final_msg_set_ts+0x16>
	}
}
100442d6:	46c0      	nop			@ (mov r8, r8)
100442d8:	46c0      	nop			@ (mov r8, r8)
100442da:	46bd      	mov	sp, r7
100442dc:	b006      	add	sp, #24
100442de:	bdb0      	pop	{r4, r5, r7, pc}

100442e0 <DW1000_initiator>:
	for (i = 0; i < FINAL_MSG_TS_LEN; i++) {
		*ts += ts_field[i] << (i * 8);
	}
}

void DW1000_initiator(DW1000_t *dw1000, uint8_t channel) {
100442e0:	b5f0      	push	{r4, r5, r6, r7, lr}
100442e2:	b08f      	sub	sp, #60	@ 0x3c
100442e4:	af02      	add	r7, sp, #8
100442e6:	61f8      	str	r0, [r7, #28]
100442e8:	000a      	movs	r2, r1
100442ea:	211b      	movs	r1, #27
100442ec:	187b      	adds	r3, r7, r1
100442ee:	701a      	strb	r2, [r3, #0]
	/* Write frame data to DW1000 and prepare transmission. See NOTE 8 below. */
	tx_poll_msg[ALL_MSG_SN_IDX] = frame_seq_nb;
100442f0:	4bb0      	ldr	r3, [pc, #704]	@ (100445b4 <DW1000_initiator+0x2d4>)
100442f2:	781a      	ldrb	r2, [r3, #0]
100442f4:	4bb0      	ldr	r3, [pc, #704]	@ (100445b8 <DW1000_initiator+0x2d8>)
100442f6:	709a      	strb	r2, [r3, #2]
	tx_poll_msg[10] = channel;
100442f8:	4baf      	ldr	r3, [pc, #700]	@ (100445b8 <DW1000_initiator+0x2d8>)
100442fa:	187a      	adds	r2, r7, r1
100442fc:	7812      	ldrb	r2, [r2, #0]
100442fe:	729a      	strb	r2, [r3, #10]
	DW1000_write_reg(dw1000, TX_BUFFER_ID, 0, tx_poll_msg,
10044300:	4bad      	ldr	r3, [pc, #692]	@ (100445b8 <DW1000_initiator+0x2d8>)
10044302:	69f8      	ldr	r0, [r7, #28]
10044304:	220b      	movs	r2, #11
10044306:	9200      	str	r2, [sp, #0]
10044308:	2200      	movs	r2, #0
1004430a:	2109      	movs	r1, #9
1004430c:	f7ff fb52 	bl	100439b4 <DW1000_write_reg>
			sizeof(tx_poll_msg) - 2);
	uint32_t tmp = 0;
10044310:	2300      	movs	r3, #0
10044312:	62fb      	str	r3, [r7, #44]	@ 0x2c
	tmp = txFCTRL | sizeof(tx_poll_msg)
			| ((uint32_t) 0x0U << TX_FCTRL_TXBOFFS_SHFT)
			| ((uint32_t) 0x1U << TX_FCTRL_TR_SHFT);
10044314:	4ba9      	ldr	r3, [pc, #676]	@ (100445bc <DW1000_initiator+0x2dc>)
10044316:	681b      	ldr	r3, [r3, #0]
10044318:	4aa9      	ldr	r2, [pc, #676]	@ (100445c0 <DW1000_initiator+0x2e0>)
1004431a:	4313      	orrs	r3, r2
	tmp = txFCTRL | sizeof(tx_poll_msg)
1004431c:	62fb      	str	r3, [r7, #44]	@ 0x2c
	DW1000_write_reg(dw1000, TX_FCTRL_ID, 0x00, (void*) &tmp, 4);
1004431e:	2614      	movs	r6, #20
10044320:	2318      	movs	r3, #24
10044322:	18f2      	adds	r2, r6, r3
10044324:	19d3      	adds	r3, r2, r7
10044326:	69f8      	ldr	r0, [r7, #28]
10044328:	2204      	movs	r2, #4
1004432a:	9200      	str	r2, [sp, #0]
1004432c:	2200      	movs	r2, #0
1004432e:	2108      	movs	r1, #8
10044330:	f7ff fb40 	bl	100439b4 <DW1000_write_reg>

	// start TX
	tmp = SYS_CTRL_WAIT4RESP | SYS_CTRL_TXSTRT;
10044334:	2382      	movs	r3, #130	@ 0x82
10044336:	62fb      	str	r3, [r7, #44]	@ 0x2c
	DW1000_write_reg(dw1000, SYS_CTRL_ID, SYS_CTRL_OFFSET, (void*) &tmp, 1);
10044338:	2318      	movs	r3, #24
1004433a:	18f3      	adds	r3, r6, r3
1004433c:	19db      	adds	r3, r3, r7
1004433e:	69f8      	ldr	r0, [r7, #28]
10044340:	2201      	movs	r2, #1
10044342:	9200      	str	r2, [sp, #0]
10044344:	2200      	movs	r2, #0
10044346:	210d      	movs	r1, #13
10044348:	f7ff fb34 	bl	100439b4 <DW1000_write_reg>

	// poll for reception
	do {
		DW1000_read_reg(dw1000, SYS_STATUS_ID, 0x0, (void*) &status_reg, 4);
1004434c:	4b9d      	ldr	r3, [pc, #628]	@ (100445c4 <DW1000_initiator+0x2e4>)
1004434e:	69f8      	ldr	r0, [r7, #28]
10044350:	2204      	movs	r2, #4
10044352:	9200      	str	r2, [sp, #0]
10044354:	2200      	movs	r2, #0
10044356:	210f      	movs	r1, #15
10044358:	f7ff faca 	bl	100438f0 <DW1000_read_reg>

	} while (!(status_reg
			& (SYS_STATUS_RXFCG | SYS_STATUS_ALL_RX_TO | SYS_STATUS_ALL_RX_ERR)));
1004435c:	4b99      	ldr	r3, [pc, #612]	@ (100445c4 <DW1000_initiator+0x2e4>)
1004435e:	681b      	ldr	r3, [r3, #0]
10044360:	4a99      	ldr	r2, [pc, #612]	@ (100445c8 <DW1000_initiator+0x2e8>)
10044362:	4013      	ands	r3, r2
	} while (!(status_reg
10044364:	d0f2      	beq.n	1004434c <DW1000_initiator+0x6c>

	frame_seq_nb++;
10044366:	4b93      	ldr	r3, [pc, #588]	@ (100445b4 <DW1000_initiator+0x2d4>)
10044368:	781b      	ldrb	r3, [r3, #0]
1004436a:	3301      	adds	r3, #1
1004436c:	b2da      	uxtb	r2, r3
1004436e:	4b91      	ldr	r3, [pc, #580]	@ (100445b4 <DW1000_initiator+0x2d4>)
10044370:	701a      	strb	r2, [r3, #0]

	if (status_reg & SYS_STATUS_RXFCG) {
10044372:	4b94      	ldr	r3, [pc, #592]	@ (100445c4 <DW1000_initiator+0x2e4>)
10044374:	681a      	ldr	r2, [r3, #0]
10044376:	2380      	movs	r3, #128	@ 0x80
10044378:	01db      	lsls	r3, r3, #7
1004437a:	4013      	ands	r3, r2
1004437c:	d100      	bne.n	10044380 <DW1000_initiator+0xa0>
1004437e:	e0f1      	b.n	10044564 <DW1000_initiator+0x284>
		uint32_t frame_len;

		/* Clear good RX frame event and TX frame sent in the DW1000 status register. */
		tmp = SYS_STATUS_RXFCG | SYS_STATUS_TXFRS;
10044380:	2381      	movs	r3, #129	@ 0x81
10044382:	01db      	lsls	r3, r3, #7
10044384:	62fb      	str	r3, [r7, #44]	@ 0x2c
		DW1000_write_reg(dw1000, SYS_STATUS_ID, 0x00, (void*) &tmp, 4);
10044386:	2314      	movs	r3, #20
10044388:	2618      	movs	r6, #24
1004438a:	199b      	adds	r3, r3, r6
1004438c:	19db      	adds	r3, r3, r7
1004438e:	69f8      	ldr	r0, [r7, #28]
10044390:	2204      	movs	r2, #4
10044392:	9200      	str	r2, [sp, #0]
10044394:	2200      	movs	r2, #0
10044396:	210f      	movs	r1, #15
10044398:	f7ff fb0c 	bl	100439b4 <DW1000_write_reg>

		/* A frame has been received, read it into the local buffer. */
		DW1000_read_reg(dw1000, RX_FINFO_ID, 0x00, (void*) &frame_len, 4);
1004439c:	2310      	movs	r3, #16
1004439e:	199b      	adds	r3, r3, r6
100443a0:	19db      	adds	r3, r3, r7
100443a2:	69f8      	ldr	r0, [r7, #28]
100443a4:	2204      	movs	r2, #4
100443a6:	9200      	str	r2, [sp, #0]
100443a8:	2200      	movs	r2, #0
100443aa:	2110      	movs	r1, #16
100443ac:	f7ff faa0 	bl	100438f0 <DW1000_read_reg>
		frame_len &= RX_FINFO_RXFLEN_MASK;
100443b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
100443b2:	227f      	movs	r2, #127	@ 0x7f
100443b4:	4013      	ands	r3, r2
100443b6:	62bb      	str	r3, [r7, #40]	@ 0x28
		if (frame_len <= RX_BUF_LEN) {
100443b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
100443ba:	2b19      	cmp	r3, #25
100443bc:	d808      	bhi.n	100443d0 <DW1000_initiator+0xf0>
			DW1000_read_reg(dw1000, RX_BUFFER_ID, 0x00, (void*) &rx_buffer,
100443be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
100443c0:	4a82      	ldr	r2, [pc, #520]	@ (100445cc <DW1000_initiator+0x2ec>)
100443c2:	69f8      	ldr	r0, [r7, #28]
100443c4:	9300      	str	r3, [sp, #0]
100443c6:	0013      	movs	r3, r2
100443c8:	2200      	movs	r2, #0
100443ca:	2111      	movs	r1, #17
100443cc:	f7ff fa90 	bl	100438f0 <DW1000_read_reg>
					frame_len);
		}
		rx_buffer[ALL_MSG_SN_IDX] = 0;
100443d0:	4b7e      	ldr	r3, [pc, #504]	@ (100445cc <DW1000_initiator+0x2ec>)
100443d2:	2200      	movs	r2, #0
100443d4:	709a      	strb	r2, [r3, #2]
		if (memcmp(rx_buffer, rx_resp_msg, ALL_MSG_COMMON_LEN) == 0
100443d6:	497e      	ldr	r1, [pc, #504]	@ (100445d0 <DW1000_initiator+0x2f0>)
100443d8:	4b7c      	ldr	r3, [pc, #496]	@ (100445cc <DW1000_initiator+0x2ec>)
100443da:	220a      	movs	r2, #10
100443dc:	0018      	movs	r0, r3
100443de:	f005 fe0b 	bl	10049ff8 <memcmp>
100443e2:	1e03      	subs	r3, r0, #0
100443e4:	d000      	beq.n	100443e8 <DW1000_initiator+0x108>
100443e6:	e0e0      	b.n	100445aa <DW1000_initiator+0x2ca>
				&& rx_buffer[13] == channel) {
100443e8:	4b78      	ldr	r3, [pc, #480]	@ (100445cc <DW1000_initiator+0x2ec>)
100443ea:	7b5b      	ldrb	r3, [r3, #13]
100443ec:	221b      	movs	r2, #27
100443ee:	18ba      	adds	r2, r7, r2
100443f0:	7812      	ldrb	r2, [r2, #0]
100443f2:	429a      	cmp	r2, r3
100443f4:	d000      	beq.n	100443f8 <DW1000_initiator+0x118>
100443f6:	e0d8      	b.n	100445aa <DW1000_initiator+0x2ca>
			uint32_t final_tx_time;

			/* Retrieve poll transmission and response reception timestamp. */
			poll_tx_ts = get_tx_timestamp_u64(dw1000);
100443f8:	69fb      	ldr	r3, [r7, #28]
100443fa:	0018      	movs	r0, r3
100443fc:	f7ff fe94 	bl	10044128 <get_tx_timestamp_u64>
10044400:	0002      	movs	r2, r0
10044402:	000b      	movs	r3, r1
10044404:	4973      	ldr	r1, [pc, #460]	@ (100445d4 <DW1000_initiator+0x2f4>)
10044406:	600a      	str	r2, [r1, #0]
10044408:	604b      	str	r3, [r1, #4]
			resp_rx_ts = get_rx_timestamp_u64(dw1000);
1004440a:	69fb      	ldr	r3, [r7, #28]
1004440c:	0018      	movs	r0, r3
1004440e:	f7ff fee0 	bl	100441d2 <get_rx_timestamp_u64>
10044412:	0002      	movs	r2, r0
10044414:	000b      	movs	r3, r1
10044416:	4970      	ldr	r1, [pc, #448]	@ (100445d8 <DW1000_initiator+0x2f8>)
10044418:	600a      	str	r2, [r1, #0]
1004441a:	604b      	str	r3, [r1, #4]

			/* Compute final message transmission time. See NOTE 10 below. */
			final_tx_time = (resp_rx_ts
					+ (RESP_RX_TO_FINAL_TX_DLY_UUS * UUS_TO_DWT_TIME)) >> 8;
1004441c:	4b6e      	ldr	r3, [pc, #440]	@ (100445d8 <DW1000_initiator+0x2f8>)
1004441e:	681a      	ldr	r2, [r3, #0]
10044420:	685b      	ldr	r3, [r3, #4]
10044422:	20fa      	movs	r0, #250	@ 0xfa
10044424:	0500      	lsls	r0, r0, #20
10044426:	2100      	movs	r1, #0
10044428:	1812      	adds	r2, r2, r0
1004442a:	414b      	adcs	r3, r1
1004442c:	0619      	lsls	r1, r3, #24
1004442e:	0a14      	lsrs	r4, r2, #8
10044430:	430c      	orrs	r4, r1
10044432:	0a1d      	lsrs	r5, r3, #8
			final_tx_time = (resp_rx_ts
10044434:	0023      	movs	r3, r4
10044436:	627b      	str	r3, [r7, #36]	@ 0x24
			DW1000_write_reg(dw1000, DX_TIME_ID, 0x01, (void*) &final_tx_time,
10044438:	230c      	movs	r3, #12
1004443a:	2518      	movs	r5, #24
1004443c:	195b      	adds	r3, r3, r5
1004443e:	19db      	adds	r3, r3, r7
10044440:	69f8      	ldr	r0, [r7, #28]
10044442:	2204      	movs	r2, #4
10044444:	9200      	str	r2, [sp, #0]
10044446:	2201      	movs	r2, #1
10044448:	210a      	movs	r1, #10
1004444a:	f7ff fab3 	bl	100439b4 <DW1000_write_reg>
					4);

			/* Final TX timestamp is the transmission time we programmed plus the TX antenna delay. */
			final_tx_ts = (((uint64_t) (final_tx_time & 0xFFFFFFFEUL)) << 8)
1004444e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10044450:	613b      	str	r3, [r7, #16]
10044452:	2300      	movs	r3, #0
10044454:	617b      	str	r3, [r7, #20]
10044456:	693b      	ldr	r3, [r7, #16]
10044458:	697c      	ldr	r4, [r7, #20]
1004445a:	001a      	movs	r2, r3
1004445c:	0e12      	lsrs	r2, r2, #24
1004445e:	60fa      	str	r2, [r7, #12]
10044460:	021b      	lsls	r3, r3, #8
10044462:	60bb      	str	r3, [r7, #8]
10044464:	68b9      	ldr	r1, [r7, #8]
10044466:	68fa      	ldr	r2, [r7, #12]
10044468:	000b      	movs	r3, r1
1004446a:	0a5b      	lsrs	r3, r3, #9
1004446c:	025b      	lsls	r3, r3, #9
1004446e:	603b      	str	r3, [r7, #0]
10044470:	23ff      	movs	r3, #255	@ 0xff
10044472:	401a      	ands	r2, r3
10044474:	607a      	str	r2, [r7, #4]
					+ TX_ANT_DLY;
10044476:	4a59      	ldr	r2, [pc, #356]	@ (100445dc <DW1000_initiator+0x2fc>)
10044478:	2300      	movs	r3, #0
1004447a:	6838      	ldr	r0, [r7, #0]
1004447c:	6879      	ldr	r1, [r7, #4]
1004447e:	1880      	adds	r0, r0, r2
10044480:	4159      	adcs	r1, r3
10044482:	0002      	movs	r2, r0
10044484:	000b      	movs	r3, r1
			final_tx_ts = (((uint64_t) (final_tx_time & 0xFFFFFFFEUL)) << 8)
10044486:	4956      	ldr	r1, [pc, #344]	@ (100445e0 <DW1000_initiator+0x300>)
10044488:	600a      	str	r2, [r1, #0]
1004448a:	604b      	str	r3, [r1, #4]

			/* Write all timestamps in the final message. See NOTE 11 below. */
			final_msg_set_ts(&tx_final_msg[FINAL_MSG_POLL_TX_TS_IDX],
1004448c:	4b51      	ldr	r3, [pc, #324]	@ (100445d4 <DW1000_initiator+0x2f4>)
1004448e:	681a      	ldr	r2, [r3, #0]
10044490:	685b      	ldr	r3, [r3, #4]
10044492:	4954      	ldr	r1, [pc, #336]	@ (100445e4 <DW1000_initiator+0x304>)
10044494:	0008      	movs	r0, r1
10044496:	f7ff fef1 	bl	1004427c <final_msg_set_ts>
					poll_tx_ts);
			final_msg_set_ts(&tx_final_msg[FINAL_MSG_RESP_RX_TS_IDX],
1004449a:	4b4f      	ldr	r3, [pc, #316]	@ (100445d8 <DW1000_initiator+0x2f8>)
1004449c:	681a      	ldr	r2, [r3, #0]
1004449e:	685b      	ldr	r3, [r3, #4]
100444a0:	4951      	ldr	r1, [pc, #324]	@ (100445e8 <DW1000_initiator+0x308>)
100444a2:	0008      	movs	r0, r1
100444a4:	f7ff feea 	bl	1004427c <final_msg_set_ts>
					resp_rx_ts);
			final_msg_set_ts(&tx_final_msg[FINAL_MSG_FINAL_TX_TS_IDX],
100444a8:	4b4d      	ldr	r3, [pc, #308]	@ (100445e0 <DW1000_initiator+0x300>)
100444aa:	681a      	ldr	r2, [r3, #0]
100444ac:	685b      	ldr	r3, [r3, #4]
100444ae:	494f      	ldr	r1, [pc, #316]	@ (100445ec <DW1000_initiator+0x30c>)
100444b0:	0008      	movs	r0, r1
100444b2:	f7ff fee3 	bl	1004427c <final_msg_set_ts>
					final_tx_ts);

			/* Write and send final message. See NOTE 8 below. */
			tx_final_msg[ALL_MSG_SN_IDX] = frame_seq_nb;
100444b6:	4b3f      	ldr	r3, [pc, #252]	@ (100445b4 <DW1000_initiator+0x2d4>)
100444b8:	781a      	ldrb	r2, [r3, #0]
100444ba:	4b4d      	ldr	r3, [pc, #308]	@ (100445f0 <DW1000_initiator+0x310>)
100444bc:	709a      	strb	r2, [r3, #2]
			DW1000_write_reg(dw1000, TX_BUFFER_ID, 0, tx_final_msg,
100444be:	4b4c      	ldr	r3, [pc, #304]	@ (100445f0 <DW1000_initiator+0x310>)
100444c0:	69f8      	ldr	r0, [r7, #28]
100444c2:	2217      	movs	r2, #23
100444c4:	9200      	str	r2, [sp, #0]
100444c6:	2200      	movs	r2, #0
100444c8:	2109      	movs	r1, #9
100444ca:	f7ff fa73 	bl	100439b4 <DW1000_write_reg>
					sizeof(tx_final_msg) - 2);
			tmp = txFCTRL | sizeof(tx_final_msg)
					| ((uint32_t) 0x0U << TX_FCTRL_TXBOFFS_SHFT)
					| ((uint32_t) 0x1U << TX_FCTRL_TR_SHFT);
100444ce:	4b3b      	ldr	r3, [pc, #236]	@ (100445bc <DW1000_initiator+0x2dc>)
100444d0:	681b      	ldr	r3, [r3, #0]
100444d2:	4a48      	ldr	r2, [pc, #288]	@ (100445f4 <DW1000_initiator+0x314>)
100444d4:	4313      	orrs	r3, r2
			tmp = txFCTRL | sizeof(tx_final_msg)
100444d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
			DW1000_write_reg(dw1000, TX_FCTRL_ID, 0x00, (void*) &tmp, 4);
100444d8:	2414      	movs	r4, #20
100444da:	1963      	adds	r3, r4, r5
100444dc:	19db      	adds	r3, r3, r7
100444de:	69f8      	ldr	r0, [r7, #28]
100444e0:	2204      	movs	r2, #4
100444e2:	9200      	str	r2, [sp, #0]
100444e4:	2200      	movs	r2, #0
100444e6:	2108      	movs	r1, #8
100444e8:	f7ff fa64 	bl	100439b4 <DW1000_write_reg>

			tmp |= (SYS_CTRL_TXDLYS | SYS_CTRL_TXSTRT);
100444ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
100444ee:	2206      	movs	r2, #6
100444f0:	4313      	orrs	r3, r2
100444f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
			DW1000_write_reg(dw1000, SYS_CTRL_ID, SYS_CTRL_OFFSET, (void*) &tmp,
100444f4:	1963      	adds	r3, r4, r5
100444f6:	19db      	adds	r3, r3, r7
100444f8:	69f8      	ldr	r0, [r7, #28]
100444fa:	2201      	movs	r2, #1
100444fc:	9200      	str	r2, [sp, #0]
100444fe:	2200      	movs	r2, #0
10044500:	210d      	movs	r1, #13
10044502:	f7ff fa57 	bl	100439b4 <DW1000_write_reg>
					1);

			DW1000_read_reg(dw1000, SYS_STATUS_ID, 0x03, (void*) &tmp, 2); // Read at offset 3 to get the upper 2 bytes out of 5
10044506:	1963      	adds	r3, r4, r5
10044508:	19db      	adds	r3, r3, r7
1004450a:	69f8      	ldr	r0, [r7, #28]
1004450c:	2202      	movs	r2, #2
1004450e:	9200      	str	r2, [sp, #0]
10044510:	2203      	movs	r2, #3
10044512:	210f      	movs	r1, #15
10044514:	f7ff f9ec 	bl	100438f0 <DW1000_read_reg>

			if ((tmp & SYS_STATUS_TXERR) == 0) {
10044518:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
1004451a:	2381      	movs	r3, #129	@ 0x81
1004451c:	00db      	lsls	r3, r3, #3
1004451e:	4013      	ands	r3, r2
10044520:	d143      	bne.n	100445aa <DW1000_initiator+0x2ca>
				/* Poll DW1000 until TX frame sent event set. See NOTE 9 below. */
				do {
					DW1000_read_reg(dw1000, SYS_STATUS_ID, 0x00,
10044522:	4b28      	ldr	r3, [pc, #160]	@ (100445c4 <DW1000_initiator+0x2e4>)
10044524:	69f8      	ldr	r0, [r7, #28]
10044526:	2204      	movs	r2, #4
10044528:	9200      	str	r2, [sp, #0]
1004452a:	2200      	movs	r2, #0
1004452c:	210f      	movs	r1, #15
1004452e:	f7ff f9df 	bl	100438f0 <DW1000_read_reg>
							(void*) &status_reg, 4);
				} while (!(status_reg & SYS_STATUS_TXFRS));
10044532:	4b24      	ldr	r3, [pc, #144]	@ (100445c4 <DW1000_initiator+0x2e4>)
10044534:	681b      	ldr	r3, [r3, #0]
10044536:	2280      	movs	r2, #128	@ 0x80
10044538:	4013      	ands	r3, r2
1004453a:	d0f2      	beq.n	10044522 <DW1000_initiator+0x242>

				/* Clear TXFRS event. */
				tmp = SYS_STATUS_TXFRS;
1004453c:	2380      	movs	r3, #128	@ 0x80
1004453e:	62fb      	str	r3, [r7, #44]	@ 0x2c
				DW1000_write_reg(dw1000, SYS_STATUS_ID, 0x00, (void*) &tmp, 4);
10044540:	2314      	movs	r3, #20
10044542:	2218      	movs	r2, #24
10044544:	189b      	adds	r3, r3, r2
10044546:	19db      	adds	r3, r3, r7
10044548:	69f8      	ldr	r0, [r7, #28]
1004454a:	2204      	movs	r2, #4
1004454c:	9200      	str	r2, [sp, #0]
1004454e:	2200      	movs	r2, #0
10044550:	210f      	movs	r1, #15
10044552:	f7ff fa2f 	bl	100439b4 <DW1000_write_reg>

				/* Increment frame sequence number after transmission of the final message (modulo 256). */
				frame_seq_nb++;
10044556:	4b17      	ldr	r3, [pc, #92]	@ (100445b4 <DW1000_initiator+0x2d4>)
10044558:	781b      	ldrb	r3, [r3, #0]
1004455a:	3301      	adds	r3, #1
1004455c:	b2da      	uxtb	r2, r3
1004455e:	4b15      	ldr	r3, [pc, #84]	@ (100445b4 <DW1000_initiator+0x2d4>)
10044560:	701a      	strb	r2, [r3, #0]
		tmp = PMSC_CTRL0_RESET_CLEAR;
		DW1000_write_reg(dw1000, PMSC_ID, PMSC_CTRL0_SOFTRESET_OFFSET,
				(void*) &tmp, 1);
	}

}
10044562:	e022      	b.n	100445aa <DW1000_initiator+0x2ca>
		tmp = SYS_STATUS_ALL_RX_TO | SYS_STATUS_ALL_RX_ERR;
10044564:	4b24      	ldr	r3, [pc, #144]	@ (100445f8 <DW1000_initiator+0x318>)
10044566:	62fb      	str	r3, [r7, #44]	@ 0x2c
		DW1000_write_reg(dw1000, SYS_STATUS_ID, 0x00, (void*) &tmp, 4);
10044568:	2414      	movs	r4, #20
1004456a:	2518      	movs	r5, #24
1004456c:	1963      	adds	r3, r4, r5
1004456e:	19db      	adds	r3, r3, r7
10044570:	69f8      	ldr	r0, [r7, #28]
10044572:	2204      	movs	r2, #4
10044574:	9200      	str	r2, [sp, #0]
10044576:	2200      	movs	r2, #0
10044578:	210f      	movs	r1, #15
1004457a:	f7ff fa1b 	bl	100439b4 <DW1000_write_reg>
		tmp = PMSC_CTRL0_RESET_RX;
1004457e:	23e0      	movs	r3, #224	@ 0xe0
10044580:	62fb      	str	r3, [r7, #44]	@ 0x2c
		DW1000_write_reg(dw1000, PMSC_ID, PMSC_CTRL0_SOFTRESET_OFFSET,
10044582:	1963      	adds	r3, r4, r5
10044584:	19db      	adds	r3, r3, r7
10044586:	69f8      	ldr	r0, [r7, #28]
10044588:	2201      	movs	r2, #1
1004458a:	9200      	str	r2, [sp, #0]
1004458c:	2203      	movs	r2, #3
1004458e:	2136      	movs	r1, #54	@ 0x36
10044590:	f7ff fa10 	bl	100439b4 <DW1000_write_reg>
		tmp = PMSC_CTRL0_RESET_CLEAR;
10044594:	23f0      	movs	r3, #240	@ 0xf0
10044596:	62fb      	str	r3, [r7, #44]	@ 0x2c
		DW1000_write_reg(dw1000, PMSC_ID, PMSC_CTRL0_SOFTRESET_OFFSET,
10044598:	1963      	adds	r3, r4, r5
1004459a:	19db      	adds	r3, r3, r7
1004459c:	69f8      	ldr	r0, [r7, #28]
1004459e:	2201      	movs	r2, #1
100445a0:	9200      	str	r2, [sp, #0]
100445a2:	2203      	movs	r2, #3
100445a4:	2136      	movs	r1, #54	@ 0x36
100445a6:	f7ff fa05 	bl	100439b4 <DW1000_write_reg>
}
100445aa:	46c0      	nop			@ (mov r8, r8)
100445ac:	46bd      	mov	sp, r7
100445ae:	b00d      	add	sp, #52	@ 0x34
100445b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
100445b2:	46c0      	nop			@ (mov r8, r8)
100445b4:	20000840 	.word	0x20000840
100445b8:	20000b18 	.word	0x20000b18
100445bc:	20000804 	.word	0x20000804
100445c0:	0000800d 	.word	0x0000800d
100445c4:	20000808 	.word	0x20000808
100445c8:	2427d000 	.word	0x2427d000
100445cc:	2000080c 	.word	0x2000080c
100445d0:	20000b28 	.word	0x20000b28
100445d4:	20000828 	.word	0x20000828
100445d8:	20000830 	.word	0x20000830
100445dc:	00004034 	.word	0x00004034
100445e0:	20000838 	.word	0x20000838
100445e4:	20000b42 	.word	0x20000b42
100445e8:	20000b46 	.word	0x20000b46
100445ec:	20000b4a 	.word	0x20000b4a
100445f0:	20000b38 	.word	0x20000b38
100445f4:	00008019 	.word	0x00008019
100445f8:	24279000 	.word	0x24279000

100445fc <SPI_write8>:


/*!<
 * usage
 * */
uint32_t SPI_write8(SPI_HandleTypeDef* spi, const uint8_t* buffer, uint32_t size, uint32_t timeout) {
100445fc:	b5f0      	push	{r4, r5, r6, r7, lr}
100445fe:	b08f      	sub	sp, #60	@ 0x3c
10044600:	af00      	add	r7, sp, #0
10044602:	6278      	str	r0, [r7, #36]	@ 0x24
10044604:	6239      	str	r1, [r7, #32]
10044606:	61fa      	str	r2, [r7, #28]
10044608:	61bb      	str	r3, [r7, #24]
	spi->Instance->CR1 |= 0x00000040UL;
1004460a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
1004460c:	681b      	ldr	r3, [r3, #0]
1004460e:	681a      	ldr	r2, [r3, #0]
10044610:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10044612:	681b      	ldr	r3, [r3, #0]
10044614:	2140      	movs	r1, #64	@ 0x40
10044616:	430a      	orrs	r2, r1
10044618:	601a      	str	r2, [r3, #0]
	uint64_t start = uwTick;
1004461a:	4b35      	ldr	r3, [pc, #212]	@ (100446f0 <SPI_write8+0xf4>)
1004461c:	681b      	ldr	r3, [r3, #0]
1004461e:	62bb      	str	r3, [r7, #40]	@ 0x28
10044620:	2300      	movs	r3, #0
10044622:	62fb      	str	r3, [r7, #44]	@ 0x2c
	uint32_t i = 0;
10044624:	2300      	movs	r3, #0
10044626:	637b      	str	r3, [r7, #52]	@ 0x34
	for (; i < size; i++) {
10044628:	e02c      	b.n	10044684 <SPI_write8+0x88>
		while (!(spi->Instance->SR & 0x00000002UL))	{ if ( uwTick - start > timeout) { goto SPI_master_write8_end; } }
1004462a:	4b31      	ldr	r3, [pc, #196]	@ (100446f0 <SPI_write8+0xf4>)
1004462c:	681b      	ldr	r3, [r3, #0]
1004462e:	613b      	str	r3, [r7, #16]
10044630:	2300      	movs	r3, #0
10044632:	617b      	str	r3, [r7, #20]
10044634:	6aba      	ldr	r2, [r7, #40]	@ 0x28
10044636:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
10044638:	6938      	ldr	r0, [r7, #16]
1004463a:	6979      	ldr	r1, [r7, #20]
1004463c:	1a80      	subs	r0, r0, r2
1004463e:	4199      	sbcs	r1, r3
10044640:	0002      	movs	r2, r0
10044642:	000b      	movs	r3, r1
10044644:	69b9      	ldr	r1, [r7, #24]
10044646:	60b9      	str	r1, [r7, #8]
10044648:	2100      	movs	r1, #0
1004464a:	60f9      	str	r1, [r7, #12]
1004464c:	68b8      	ldr	r0, [r7, #8]
1004464e:	68f9      	ldr	r1, [r7, #12]
10044650:	000e      	movs	r6, r1
10044652:	42b3      	cmp	r3, r6
10044654:	d83b      	bhi.n	100446ce <SPI_write8+0xd2>
10044656:	000e      	movs	r6, r1
10044658:	42b3      	cmp	r3, r6
1004465a:	d102      	bne.n	10044662 <SPI_write8+0x66>
1004465c:	0001      	movs	r1, r0
1004465e:	428a      	cmp	r2, r1
10044660:	d835      	bhi.n	100446ce <SPI_write8+0xd2>
10044662:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10044664:	681b      	ldr	r3, [r3, #0]
10044666:	689b      	ldr	r3, [r3, #8]
10044668:	2202      	movs	r2, #2
1004466a:	4013      	ands	r3, r2
1004466c:	d0dd      	beq.n	1004462a <SPI_write8+0x2e>
		*((volatile uint8_t*)&spi->Instance->DR) = buffer[i];
1004466e:	6a3a      	ldr	r2, [r7, #32]
10044670:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
10044672:	18d2      	adds	r2, r2, r3
10044674:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10044676:	681b      	ldr	r3, [r3, #0]
10044678:	330c      	adds	r3, #12
1004467a:	7812      	ldrb	r2, [r2, #0]
1004467c:	701a      	strb	r2, [r3, #0]
	for (; i < size; i++) {
1004467e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
10044680:	3301      	adds	r3, #1
10044682:	637b      	str	r3, [r7, #52]	@ 0x34
10044684:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
10044686:	69fb      	ldr	r3, [r7, #28]
10044688:	429a      	cmp	r2, r3
1004468a:	d3ea      	bcc.n	10044662 <SPI_write8+0x66>
	}
	while (spi->Instance->SR & 0x00000080UL)			{ if ( uwTick - start > timeout) { goto SPI_master_write8_end; } }
1004468c:	e015      	b.n	100446ba <SPI_write8+0xbe>
1004468e:	4b18      	ldr	r3, [pc, #96]	@ (100446f0 <SPI_write8+0xf4>)
10044690:	681b      	ldr	r3, [r3, #0]
10044692:	603b      	str	r3, [r7, #0]
10044694:	2300      	movs	r3, #0
10044696:	607b      	str	r3, [r7, #4]
10044698:	6aba      	ldr	r2, [r7, #40]	@ 0x28
1004469a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
1004469c:	6838      	ldr	r0, [r7, #0]
1004469e:	6879      	ldr	r1, [r7, #4]
100446a0:	1a80      	subs	r0, r0, r2
100446a2:	4199      	sbcs	r1, r3
100446a4:	0002      	movs	r2, r0
100446a6:	000b      	movs	r3, r1
100446a8:	69b9      	ldr	r1, [r7, #24]
100446aa:	000c      	movs	r4, r1
100446ac:	2100      	movs	r1, #0
100446ae:	000d      	movs	r5, r1
100446b0:	42ab      	cmp	r3, r5
100446b2:	d80e      	bhi.n	100446d2 <SPI_write8+0xd6>
100446b4:	d101      	bne.n	100446ba <SPI_write8+0xbe>
100446b6:	42a2      	cmp	r2, r4
100446b8:	d80b      	bhi.n	100446d2 <SPI_write8+0xd6>
100446ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
100446bc:	681b      	ldr	r3, [r3, #0]
100446be:	689b      	ldr	r3, [r3, #8]
100446c0:	2280      	movs	r2, #128	@ 0x80
100446c2:	4013      	ands	r3, r2
100446c4:	d1e3      	bne.n	1004468e <SPI_write8+0x92>
	i++; SPI_master_write8_end:
100446c6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
100446c8:	3301      	adds	r3, #1
100446ca:	637b      	str	r3, [r7, #52]	@ 0x34
100446cc:	e002      	b.n	100446d4 <SPI_write8+0xd8>
		while (!(spi->Instance->SR & 0x00000002UL))	{ if ( uwTick - start > timeout) { goto SPI_master_write8_end; } }
100446ce:	46c0      	nop			@ (mov r8, r8)
100446d0:	e000      	b.n	100446d4 <SPI_write8+0xd8>
	while (spi->Instance->SR & 0x00000080UL)			{ if ( uwTick - start > timeout) { goto SPI_master_write8_end; } }
100446d2:	46c0      	nop			@ (mov r8, r8)
	spi->Instance->CR1 &= ~0x00000040UL;
100446d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
100446d6:	681b      	ldr	r3, [r3, #0]
100446d8:	681a      	ldr	r2, [r3, #0]
100446da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
100446dc:	681b      	ldr	r3, [r3, #0]
100446de:	2140      	movs	r1, #64	@ 0x40
100446e0:	438a      	bics	r2, r1
100446e2:	601a      	str	r2, [r3, #0]
	return i;
100446e4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
100446e6:	0018      	movs	r0, r3
100446e8:	46bd      	mov	sp, r7
100446ea:	b00f      	add	sp, #60	@ 0x3c
100446ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
100446ee:	46c0      	nop			@ (mov r8, r8)
100446f0:	20000844 	.word	0x20000844

100446f4 <SPI_read8>:

uint32_t SPI_read8(SPI_HandleTypeDef* spi, uint8_t* buffer, uint32_t size, uint32_t timeout) {
100446f4:	b5f0      	push	{r4, r5, r6, r7, lr}
100446f6:	b093      	sub	sp, #76	@ 0x4c
100446f8:	af00      	add	r7, sp, #0
100446fa:	6378      	str	r0, [r7, #52]	@ 0x34
100446fc:	6339      	str	r1, [r7, #48]	@ 0x30
100446fe:	62fa      	str	r2, [r7, #44]	@ 0x2c
10044700:	62bb      	str	r3, [r7, #40]	@ 0x28
	spi->Instance->CR1 |= 0x00000040UL;
10044702:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
10044704:	681b      	ldr	r3, [r3, #0]
10044706:	6819      	ldr	r1, [r3, #0]
10044708:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
1004470a:	681a      	ldr	r2, [r3, #0]
1004470c:	2340      	movs	r3, #64	@ 0x40
1004470e:	430b      	orrs	r3, r1
10044710:	6013      	str	r3, [r2, #0]
	uint64_t start = uwTick;
10044712:	4b50      	ldr	r3, [pc, #320]	@ (10044854 <SPI_read8+0x160>)
10044714:	681b      	ldr	r3, [r3, #0]
10044716:	63bb      	str	r3, [r7, #56]	@ 0x38
10044718:	2300      	movs	r3, #0
1004471a:	63fb      	str	r3, [r7, #60]	@ 0x3c
	uint32_t i = 0;
1004471c:	2300      	movs	r3, #0
1004471e:	647b      	str	r3, [r7, #68]	@ 0x44

	while (spi->Instance->SR & 0x00000001UL) {
10044720:	e002      	b.n	10044728 <SPI_read8+0x34>
		(void)(volatile uint8_t)spi->Instance->DR;  // flush buffer
10044722:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
10044724:	681b      	ldr	r3, [r3, #0]
10044726:	68db      	ldr	r3, [r3, #12]
	while (spi->Instance->SR & 0x00000001UL) {
10044728:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
1004472a:	681b      	ldr	r3, [r3, #0]
1004472c:	689a      	ldr	r2, [r3, #8]
1004472e:	2301      	movs	r3, #1
10044730:	4013      	ands	r3, r2
10044732:	d1f6      	bne.n	10044722 <SPI_read8+0x2e>
	}

	for (; i < size; i++) {
10044734:	e056      	b.n	100447e4 <SPI_read8+0xf0>
		while (!(spi->Instance->SR & 0x00000002UL))	{ if ( uwTick - start > timeout) { goto SPI_master_read8_end; } }
10044736:	4b47      	ldr	r3, [pc, #284]	@ (10044854 <SPI_read8+0x160>)
10044738:	681b      	ldr	r3, [r3, #0]
1004473a:	623b      	str	r3, [r7, #32]
1004473c:	2300      	movs	r3, #0
1004473e:	627b      	str	r3, [r7, #36]	@ 0x24
10044740:	6bba      	ldr	r2, [r7, #56]	@ 0x38
10044742:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
10044744:	6a38      	ldr	r0, [r7, #32]
10044746:	6a79      	ldr	r1, [r7, #36]	@ 0x24
10044748:	1a80      	subs	r0, r0, r2
1004474a:	4199      	sbcs	r1, r3
1004474c:	0002      	movs	r2, r0
1004474e:	000b      	movs	r3, r1
10044750:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
10044752:	61b9      	str	r1, [r7, #24]
10044754:	2100      	movs	r1, #0
10044756:	61f9      	str	r1, [r7, #28]
10044758:	69b8      	ldr	r0, [r7, #24]
1004475a:	69f9      	ldr	r1, [r7, #28]
1004475c:	000e      	movs	r6, r1
1004475e:	42b3      	cmp	r3, r6
10044760:	d900      	bls.n	10044764 <SPI_read8+0x70>
10044762:	e064      	b.n	1004482e <SPI_read8+0x13a>
10044764:	000e      	movs	r6, r1
10044766:	42b3      	cmp	r3, r6
10044768:	d102      	bne.n	10044770 <SPI_read8+0x7c>
1004476a:	0001      	movs	r1, r0
1004476c:	428a      	cmp	r2, r1
1004476e:	d85e      	bhi.n	1004482e <SPI_read8+0x13a>
10044770:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
10044772:	681b      	ldr	r3, [r3, #0]
10044774:	689a      	ldr	r2, [r3, #8]
10044776:	2302      	movs	r3, #2
10044778:	4013      	ands	r3, r2
1004477a:	d0dc      	beq.n	10044736 <SPI_read8+0x42>
		*((volatile uint8_t*)&spi->Instance->DR) = 0;
1004477c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
1004477e:	681b      	ldr	r3, [r3, #0]
10044780:	330c      	adds	r3, #12
10044782:	001a      	movs	r2, r3
10044784:	2300      	movs	r3, #0
10044786:	7013      	strb	r3, [r2, #0]
		while (!(spi->Instance->SR & 0x00000001UL))	{ if ( uwTick - start > timeout) { goto SPI_master_read8_end; } }
10044788:	e01b      	b.n	100447c2 <SPI_read8+0xce>
1004478a:	4b32      	ldr	r3, [pc, #200]	@ (10044854 <SPI_read8+0x160>)
1004478c:	681b      	ldr	r3, [r3, #0]
1004478e:	613b      	str	r3, [r7, #16]
10044790:	2300      	movs	r3, #0
10044792:	617b      	str	r3, [r7, #20]
10044794:	6bba      	ldr	r2, [r7, #56]	@ 0x38
10044796:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
10044798:	6938      	ldr	r0, [r7, #16]
1004479a:	6979      	ldr	r1, [r7, #20]
1004479c:	1a80      	subs	r0, r0, r2
1004479e:	4199      	sbcs	r1, r3
100447a0:	0002      	movs	r2, r0
100447a2:	000b      	movs	r3, r1
100447a4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
100447a6:	60b9      	str	r1, [r7, #8]
100447a8:	2100      	movs	r1, #0
100447aa:	60f9      	str	r1, [r7, #12]
100447ac:	68b8      	ldr	r0, [r7, #8]
100447ae:	68f9      	ldr	r1, [r7, #12]
100447b0:	000e      	movs	r6, r1
100447b2:	42b3      	cmp	r3, r6
100447b4:	d83d      	bhi.n	10044832 <SPI_read8+0x13e>
100447b6:	000e      	movs	r6, r1
100447b8:	42b3      	cmp	r3, r6
100447ba:	d102      	bne.n	100447c2 <SPI_read8+0xce>
100447bc:	0001      	movs	r1, r0
100447be:	428a      	cmp	r2, r1
100447c0:	d837      	bhi.n	10044832 <SPI_read8+0x13e>
100447c2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
100447c4:	681b      	ldr	r3, [r3, #0]
100447c6:	689a      	ldr	r2, [r3, #8]
100447c8:	2301      	movs	r3, #1
100447ca:	4013      	ands	r3, r2
100447cc:	d0dd      	beq.n	1004478a <SPI_read8+0x96>
		buffer[i] = (volatile uint8_t)spi->Instance->DR;
100447ce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
100447d0:	681b      	ldr	r3, [r3, #0]
100447d2:	68d9      	ldr	r1, [r3, #12]
100447d4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
100447d6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
100447d8:	18d2      	adds	r2, r2, r3
100447da:	b2cb      	uxtb	r3, r1
100447dc:	7013      	strb	r3, [r2, #0]
	for (; i < size; i++) {
100447de:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
100447e0:	3301      	adds	r3, #1
100447e2:	647b      	str	r3, [r7, #68]	@ 0x44
100447e4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
100447e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
100447e8:	429a      	cmp	r2, r3
100447ea:	d3c1      	bcc.n	10044770 <SPI_read8+0x7c>
	}
	while (spi->Instance->SR & 0x00000080UL)			{ if ( uwTick - start > timeout) { goto SPI_master_read8_end; } }
100447ec:	e015      	b.n	1004481a <SPI_read8+0x126>
100447ee:	4b19      	ldr	r3, [pc, #100]	@ (10044854 <SPI_read8+0x160>)
100447f0:	681b      	ldr	r3, [r3, #0]
100447f2:	603b      	str	r3, [r7, #0]
100447f4:	2300      	movs	r3, #0
100447f6:	607b      	str	r3, [r7, #4]
100447f8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
100447fa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
100447fc:	6838      	ldr	r0, [r7, #0]
100447fe:	6879      	ldr	r1, [r7, #4]
10044800:	1a80      	subs	r0, r0, r2
10044802:	4199      	sbcs	r1, r3
10044804:	0002      	movs	r2, r0
10044806:	000b      	movs	r3, r1
10044808:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
1004480a:	000c      	movs	r4, r1
1004480c:	2100      	movs	r1, #0
1004480e:	000d      	movs	r5, r1
10044810:	42ab      	cmp	r3, r5
10044812:	d810      	bhi.n	10044836 <SPI_read8+0x142>
10044814:	d101      	bne.n	1004481a <SPI_read8+0x126>
10044816:	42a2      	cmp	r2, r4
10044818:	d80d      	bhi.n	10044836 <SPI_read8+0x142>
1004481a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
1004481c:	681b      	ldr	r3, [r3, #0]
1004481e:	689b      	ldr	r3, [r3, #8]
10044820:	2280      	movs	r2, #128	@ 0x80
10044822:	4013      	ands	r3, r2
10044824:	d1e3      	bne.n	100447ee <SPI_read8+0xfa>
	i++; SPI_master_read8_end:
10044826:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
10044828:	3301      	adds	r3, #1
1004482a:	647b      	str	r3, [r7, #68]	@ 0x44
1004482c:	e004      	b.n	10044838 <SPI_read8+0x144>
		while (!(spi->Instance->SR & 0x00000002UL))	{ if ( uwTick - start > timeout) { goto SPI_master_read8_end; } }
1004482e:	46c0      	nop			@ (mov r8, r8)
10044830:	e002      	b.n	10044838 <SPI_read8+0x144>
		while (!(spi->Instance->SR & 0x00000001UL))	{ if ( uwTick - start > timeout) { goto SPI_master_read8_end; } }
10044832:	46c0      	nop			@ (mov r8, r8)
10044834:	e000      	b.n	10044838 <SPI_read8+0x144>
	while (spi->Instance->SR & 0x00000080UL)			{ if ( uwTick - start > timeout) { goto SPI_master_read8_end; } }
10044836:	46c0      	nop			@ (mov r8, r8)
	spi->Instance->CR1 &= ~0x00000040UL;
10044838:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
1004483a:	681b      	ldr	r3, [r3, #0]
1004483c:	681a      	ldr	r2, [r3, #0]
1004483e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
10044840:	681b      	ldr	r3, [r3, #0]
10044842:	2140      	movs	r1, #64	@ 0x40
10044844:	438a      	bics	r2, r1
10044846:	601a      	str	r2, [r3, #0]
	return i;
10044848:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
}
1004484a:	0018      	movs	r0, r3
1004484c:	46bd      	mov	sp, r7
1004484e:	b013      	add	sp, #76	@ 0x4c
10044850:	bdf0      	pop	{r4, r5, r6, r7, pc}
10044852:	46c0      	nop			@ (mov r8, r8)
10044854:	20000844 	.word	0x20000844

10044858 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
10044858:	b580      	push	{r7, lr}
1004485a:	b082      	sub	sp, #8
1004485c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
1004485e:	1dfb      	adds	r3, r7, #7
10044860:	2200      	movs	r2, #0
10044862:	701a      	strb	r2, [r3, #0]

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
10044864:	2003      	movs	r0, #3
10044866:	f000 f80f 	bl	10044888 <HAL_InitTick>
1004486a:	1e03      	subs	r3, r0, #0
1004486c:	d003      	beq.n	10044876 <HAL_Init+0x1e>
  {
    status = HAL_ERROR;
1004486e:	1dfb      	adds	r3, r7, #7
10044870:	2201      	movs	r2, #1
10044872:	701a      	strb	r2, [r3, #0]
10044874:	e001      	b.n	1004487a <HAL_Init+0x22>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
10044876:	f7fe fca3 	bl	100431c0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
1004487a:	1dfb      	adds	r3, r7, #7
1004487c:	781b      	ldrb	r3, [r3, #0]
}
1004487e:	0018      	movs	r0, r3
10044880:	46bd      	mov	sp, r7
10044882:	b002      	add	sp, #8
10044884:	bd80      	pop	{r7, pc}
	...

10044888 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
10044888:	b590      	push	{r4, r7, lr}
1004488a:	b085      	sub	sp, #20
1004488c:	af00      	add	r7, sp, #0
1004488e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
10044890:	230f      	movs	r3, #15
10044892:	18fb      	adds	r3, r7, r3
10044894:	2200      	movs	r2, #0
10044896:	701a      	strb	r2, [r3, #0]

  if (uwTickFreq != 0U)
10044898:	4b1d      	ldr	r3, [pc, #116]	@ (10044910 <HAL_InitTick+0x88>)
1004489a:	781b      	ldrb	r3, [r3, #0]
1004489c:	2b00      	cmp	r3, #0
1004489e:	d02c      	beq.n	100448fa <HAL_InitTick+0x72>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(HAL_RCC_GetSysClockFreq() / (1000U / uwTickFreq)) == 0U)
100448a0:	f003 ffc4 	bl	1004882c <HAL_RCC_GetSysClockFreq>
100448a4:	0004      	movs	r4, r0
100448a6:	4b1a      	ldr	r3, [pc, #104]	@ (10044910 <HAL_InitTick+0x88>)
100448a8:	781b      	ldrb	r3, [r3, #0]
100448aa:	0019      	movs	r1, r3
100448ac:	23fa      	movs	r3, #250	@ 0xfa
100448ae:	0098      	lsls	r0, r3, #2
100448b0:	f7fb fc44 	bl	1004013c <__udivsi3>
100448b4:	0003      	movs	r3, r0
100448b6:	0019      	movs	r1, r3
100448b8:	0020      	movs	r0, r4
100448ba:	f7fb fc3f 	bl	1004013c <__udivsi3>
100448be:	0003      	movs	r3, r0
100448c0:	0018      	movs	r0, r3
100448c2:	f000 f944 	bl	10044b4e <HAL_SYSTICK_Config>
100448c6:	1e03      	subs	r3, r0, #0
100448c8:	d112      	bne.n	100448f0 <HAL_InitTick+0x68>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
100448ca:	687b      	ldr	r3, [r7, #4]
100448cc:	2b03      	cmp	r3, #3
100448ce:	d80a      	bhi.n	100448e6 <HAL_InitTick+0x5e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0);
100448d0:	6879      	ldr	r1, [r7, #4]
100448d2:	2301      	movs	r3, #1
100448d4:	425b      	negs	r3, r3
100448d6:	2200      	movs	r2, #0
100448d8:	0018      	movs	r0, r3
100448da:	f000 f913 	bl	10044b04 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
100448de:	4b0d      	ldr	r3, [pc, #52]	@ (10044914 <HAL_InitTick+0x8c>)
100448e0:	687a      	ldr	r2, [r7, #4]
100448e2:	601a      	str	r2, [r3, #0]
100448e4:	e00d      	b.n	10044902 <HAL_InitTick+0x7a>
      }
      else
      {
        status = HAL_ERROR;
100448e6:	230f      	movs	r3, #15
100448e8:	18fb      	adds	r3, r7, r3
100448ea:	2201      	movs	r2, #1
100448ec:	701a      	strb	r2, [r3, #0]
100448ee:	e008      	b.n	10044902 <HAL_InitTick+0x7a>
      }
    }
    else
    {
      status = HAL_ERROR;
100448f0:	230f      	movs	r3, #15
100448f2:	18fb      	adds	r3, r7, r3
100448f4:	2201      	movs	r2, #1
100448f6:	701a      	strb	r2, [r3, #0]
100448f8:	e003      	b.n	10044902 <HAL_InitTick+0x7a>
    }
  }
  else
  {
    status = HAL_ERROR;
100448fa:	230f      	movs	r3, #15
100448fc:	18fb      	adds	r3, r7, r3
100448fe:	2201      	movs	r2, #1
10044900:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
10044902:	230f      	movs	r3, #15
10044904:	18fb      	adds	r3, r7, r3
10044906:	781b      	ldrb	r3, [r3, #0]
}
10044908:	0018      	movs	r0, r3
1004490a:	46bd      	mov	sp, r7
1004490c:	b005      	add	sp, #20
1004490e:	bd90      	pop	{r4, r7, pc}
10044910:	20000b58 	.word	0x20000b58
10044914:	20000b54 	.word	0x20000b54

10044918 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
10044918:	b580      	push	{r7, lr}
1004491a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
1004491c:	4b05      	ldr	r3, [pc, #20]	@ (10044934 <HAL_IncTick+0x1c>)
1004491e:	781b      	ldrb	r3, [r3, #0]
10044920:	001a      	movs	r2, r3
10044922:	4b05      	ldr	r3, [pc, #20]	@ (10044938 <HAL_IncTick+0x20>)
10044924:	681b      	ldr	r3, [r3, #0]
10044926:	18d2      	adds	r2, r2, r3
10044928:	4b03      	ldr	r3, [pc, #12]	@ (10044938 <HAL_IncTick+0x20>)
1004492a:	601a      	str	r2, [r3, #0]
}
1004492c:	46c0      	nop			@ (mov r8, r8)
1004492e:	46bd      	mov	sp, r7
10044930:	bd80      	pop	{r7, pc}
10044932:	46c0      	nop			@ (mov r8, r8)
10044934:	20000b58 	.word	0x20000b58
10044938:	20000844 	.word	0x20000844

1004493c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
1004493c:	b580      	push	{r7, lr}
1004493e:	af00      	add	r7, sp, #0
  return uwTick;
10044940:	4b02      	ldr	r3, [pc, #8]	@ (1004494c <HAL_GetTick+0x10>)
10044942:	681b      	ldr	r3, [r3, #0]
}
10044944:	0018      	movs	r0, r3
10044946:	46bd      	mov	sp, r7
10044948:	bd80      	pop	{r7, pc}
1004494a:	46c0      	nop			@ (mov r8, r8)
1004494c:	20000844 	.word	0x20000844

10044950 <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
10044950:	b580      	push	{r7, lr}
10044952:	af00      	add	r7, sp, #0
  return uwTickPrio;
10044954:	4b02      	ldr	r3, [pc, #8]	@ (10044960 <HAL_GetTickPrio+0x10>)
10044956:	681b      	ldr	r3, [r3, #0]
}
10044958:	0018      	movs	r0, r3
1004495a:	46bd      	mov	sp, r7
1004495c:	bd80      	pop	{r7, pc}
1004495e:	46c0      	nop			@ (mov r8, r8)
10044960:	20000b54 	.word	0x20000b54

10044964 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
10044964:	b580      	push	{r7, lr}
10044966:	b084      	sub	sp, #16
10044968:	af00      	add	r7, sp, #0
1004496a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
1004496c:	f7ff ffe6 	bl	1004493c <HAL_GetTick>
10044970:	0003      	movs	r3, r0
10044972:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
10044974:	687b      	ldr	r3, [r7, #4]
10044976:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
10044978:	68fb      	ldr	r3, [r7, #12]
1004497a:	3301      	adds	r3, #1
1004497c:	d005      	beq.n	1004498a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
1004497e:	4b0a      	ldr	r3, [pc, #40]	@ (100449a8 <HAL_Delay+0x44>)
10044980:	781b      	ldrb	r3, [r3, #0]
10044982:	001a      	movs	r2, r3
10044984:	68fb      	ldr	r3, [r7, #12]
10044986:	189b      	adds	r3, r3, r2
10044988:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
1004498a:	46c0      	nop			@ (mov r8, r8)
1004498c:	f7ff ffd6 	bl	1004493c <HAL_GetTick>
10044990:	0002      	movs	r2, r0
10044992:	68bb      	ldr	r3, [r7, #8]
10044994:	1ad3      	subs	r3, r2, r3
10044996:	68fa      	ldr	r2, [r7, #12]
10044998:	429a      	cmp	r2, r3
1004499a:	d8f7      	bhi.n	1004498c <HAL_Delay+0x28>
  {
  }
}
1004499c:	46c0      	nop			@ (mov r8, r8)
1004499e:	46c0      	nop			@ (mov r8, r8)
100449a0:	46bd      	mov	sp, r7
100449a2:	b004      	add	sp, #16
100449a4:	bd80      	pop	{r7, pc}
100449a6:	46c0      	nop			@ (mov r8, r8)
100449a8:	20000b58 	.word	0x20000b58

100449ac <__NVIC_EnableIRQ>:
{
100449ac:	b580      	push	{r7, lr}
100449ae:	b082      	sub	sp, #8
100449b0:	af00      	add	r7, sp, #0
100449b2:	0002      	movs	r2, r0
100449b4:	1dfb      	adds	r3, r7, #7
100449b6:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
100449b8:	1dfb      	adds	r3, r7, #7
100449ba:	781b      	ldrb	r3, [r3, #0]
100449bc:	2b7f      	cmp	r3, #127	@ 0x7f
100449be:	d809      	bhi.n	100449d4 <__NVIC_EnableIRQ+0x28>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
100449c0:	1dfb      	adds	r3, r7, #7
100449c2:	781b      	ldrb	r3, [r3, #0]
100449c4:	001a      	movs	r2, r3
100449c6:	231f      	movs	r3, #31
100449c8:	401a      	ands	r2, r3
100449ca:	4b04      	ldr	r3, [pc, #16]	@ (100449dc <__NVIC_EnableIRQ+0x30>)
100449cc:	2101      	movs	r1, #1
100449ce:	4091      	lsls	r1, r2
100449d0:	000a      	movs	r2, r1
100449d2:	601a      	str	r2, [r3, #0]
}
100449d4:	46c0      	nop			@ (mov r8, r8)
100449d6:	46bd      	mov	sp, r7
100449d8:	b002      	add	sp, #8
100449da:	bd80      	pop	{r7, pc}
100449dc:	e000e100 	.word	0xe000e100

100449e0 <__NVIC_SetPriority>:
{
100449e0:	b590      	push	{r4, r7, lr}
100449e2:	b083      	sub	sp, #12
100449e4:	af00      	add	r7, sp, #0
100449e6:	0002      	movs	r2, r0
100449e8:	6039      	str	r1, [r7, #0]
100449ea:	1dfb      	adds	r3, r7, #7
100449ec:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
100449ee:	1dfb      	adds	r3, r7, #7
100449f0:	781b      	ldrb	r3, [r3, #0]
100449f2:	2b7f      	cmp	r3, #127	@ 0x7f
100449f4:	d828      	bhi.n	10044a48 <__NVIC_SetPriority+0x68>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
100449f6:	4a2f      	ldr	r2, [pc, #188]	@ (10044ab4 <__NVIC_SetPriority+0xd4>)
100449f8:	1dfb      	adds	r3, r7, #7
100449fa:	781b      	ldrb	r3, [r3, #0]
100449fc:	b25b      	sxtb	r3, r3
100449fe:	089b      	lsrs	r3, r3, #2
10044a00:	33c0      	adds	r3, #192	@ 0xc0
10044a02:	009b      	lsls	r3, r3, #2
10044a04:	589b      	ldr	r3, [r3, r2]
10044a06:	1dfa      	adds	r2, r7, #7
10044a08:	7812      	ldrb	r2, [r2, #0]
10044a0a:	0011      	movs	r1, r2
10044a0c:	2203      	movs	r2, #3
10044a0e:	400a      	ands	r2, r1
10044a10:	00d2      	lsls	r2, r2, #3
10044a12:	21ff      	movs	r1, #255	@ 0xff
10044a14:	4091      	lsls	r1, r2
10044a16:	000a      	movs	r2, r1
10044a18:	43d2      	mvns	r2, r2
10044a1a:	401a      	ands	r2, r3
10044a1c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
10044a1e:	683b      	ldr	r3, [r7, #0]
10044a20:	019b      	lsls	r3, r3, #6
10044a22:	22ff      	movs	r2, #255	@ 0xff
10044a24:	401a      	ands	r2, r3
10044a26:	1dfb      	adds	r3, r7, #7
10044a28:	781b      	ldrb	r3, [r3, #0]
10044a2a:	0018      	movs	r0, r3
10044a2c:	2303      	movs	r3, #3
10044a2e:	4003      	ands	r3, r0
10044a30:	00db      	lsls	r3, r3, #3
10044a32:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
10044a34:	481f      	ldr	r0, [pc, #124]	@ (10044ab4 <__NVIC_SetPriority+0xd4>)
10044a36:	1dfb      	adds	r3, r7, #7
10044a38:	781b      	ldrb	r3, [r3, #0]
10044a3a:	b25b      	sxtb	r3, r3
10044a3c:	089b      	lsrs	r3, r3, #2
10044a3e:	430a      	orrs	r2, r1
10044a40:	33c0      	adds	r3, #192	@ 0xc0
10044a42:	009b      	lsls	r3, r3, #2
10044a44:	501a      	str	r2, [r3, r0]
}
10044a46:	e031      	b.n	10044aac <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
10044a48:	4a1b      	ldr	r2, [pc, #108]	@ (10044ab8 <__NVIC_SetPriority+0xd8>)
10044a4a:	1dfb      	adds	r3, r7, #7
10044a4c:	781b      	ldrb	r3, [r3, #0]
10044a4e:	0019      	movs	r1, r3
10044a50:	230f      	movs	r3, #15
10044a52:	400b      	ands	r3, r1
10044a54:	3b08      	subs	r3, #8
10044a56:	089b      	lsrs	r3, r3, #2
10044a58:	3306      	adds	r3, #6
10044a5a:	009b      	lsls	r3, r3, #2
10044a5c:	18d3      	adds	r3, r2, r3
10044a5e:	3304      	adds	r3, #4
10044a60:	681b      	ldr	r3, [r3, #0]
10044a62:	1dfa      	adds	r2, r7, #7
10044a64:	7812      	ldrb	r2, [r2, #0]
10044a66:	0011      	movs	r1, r2
10044a68:	2203      	movs	r2, #3
10044a6a:	400a      	ands	r2, r1
10044a6c:	00d2      	lsls	r2, r2, #3
10044a6e:	21ff      	movs	r1, #255	@ 0xff
10044a70:	4091      	lsls	r1, r2
10044a72:	000a      	movs	r2, r1
10044a74:	43d2      	mvns	r2, r2
10044a76:	401a      	ands	r2, r3
10044a78:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
10044a7a:	683b      	ldr	r3, [r7, #0]
10044a7c:	019b      	lsls	r3, r3, #6
10044a7e:	22ff      	movs	r2, #255	@ 0xff
10044a80:	401a      	ands	r2, r3
10044a82:	1dfb      	adds	r3, r7, #7
10044a84:	781b      	ldrb	r3, [r3, #0]
10044a86:	0018      	movs	r0, r3
10044a88:	2303      	movs	r3, #3
10044a8a:	4003      	ands	r3, r0
10044a8c:	00db      	lsls	r3, r3, #3
10044a8e:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
10044a90:	4809      	ldr	r0, [pc, #36]	@ (10044ab8 <__NVIC_SetPriority+0xd8>)
10044a92:	1dfb      	adds	r3, r7, #7
10044a94:	781b      	ldrb	r3, [r3, #0]
10044a96:	001c      	movs	r4, r3
10044a98:	230f      	movs	r3, #15
10044a9a:	4023      	ands	r3, r4
10044a9c:	3b08      	subs	r3, #8
10044a9e:	089b      	lsrs	r3, r3, #2
10044aa0:	430a      	orrs	r2, r1
10044aa2:	3306      	adds	r3, #6
10044aa4:	009b      	lsls	r3, r3, #2
10044aa6:	18c3      	adds	r3, r0, r3
10044aa8:	3304      	adds	r3, #4
10044aaa:	601a      	str	r2, [r3, #0]
}
10044aac:	46c0      	nop			@ (mov r8, r8)
10044aae:	46bd      	mov	sp, r7
10044ab0:	b003      	add	sp, #12
10044ab2:	bd90      	pop	{r4, r7, pc}
10044ab4:	e000e100 	.word	0xe000e100
10044ab8:	e000ed00 	.word	0xe000ed00

10044abc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
10044abc:	b580      	push	{r7, lr}
10044abe:	b082      	sub	sp, #8
10044ac0:	af00      	add	r7, sp, #0
10044ac2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
10044ac4:	687b      	ldr	r3, [r7, #4]
10044ac6:	1e5a      	subs	r2, r3, #1
10044ac8:	2380      	movs	r3, #128	@ 0x80
10044aca:	045b      	lsls	r3, r3, #17
10044acc:	429a      	cmp	r2, r3
10044ace:	d301      	bcc.n	10044ad4 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
10044ad0:	2301      	movs	r3, #1
10044ad2:	e010      	b.n	10044af6 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
10044ad4:	4b0a      	ldr	r3, [pc, #40]	@ (10044b00 <SysTick_Config+0x44>)
10044ad6:	687a      	ldr	r2, [r7, #4]
10044ad8:	3a01      	subs	r2, #1
10044ada:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
10044adc:	2301      	movs	r3, #1
10044ade:	425b      	negs	r3, r3
10044ae0:	2103      	movs	r1, #3
10044ae2:	0018      	movs	r0, r3
10044ae4:	f7ff ff7c 	bl	100449e0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
10044ae8:	4b05      	ldr	r3, [pc, #20]	@ (10044b00 <SysTick_Config+0x44>)
10044aea:	2200      	movs	r2, #0
10044aec:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
10044aee:	4b04      	ldr	r3, [pc, #16]	@ (10044b00 <SysTick_Config+0x44>)
10044af0:	2207      	movs	r2, #7
10044af2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
10044af4:	2300      	movs	r3, #0
}
10044af6:	0018      	movs	r0, r3
10044af8:	46bd      	mov	sp, r7
10044afa:	b002      	add	sp, #8
10044afc:	bd80      	pop	{r7, pc}
10044afe:	46c0      	nop			@ (mov r8, r8)
10044b00:	e000e010 	.word	0xe000e010

10044b04 <HAL_NVIC_SetPriority>:
  *         with stm32wb0x devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
10044b04:	b580      	push	{r7, lr}
10044b06:	b084      	sub	sp, #16
10044b08:	af00      	add	r7, sp, #0
10044b0a:	60b9      	str	r1, [r7, #8]
10044b0c:	607a      	str	r2, [r7, #4]
10044b0e:	210f      	movs	r1, #15
10044b10:	187b      	adds	r3, r7, r1
10044b12:	1c02      	adds	r2, r0, #0
10044b14:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
10044b16:	68ba      	ldr	r2, [r7, #8]
10044b18:	187b      	adds	r3, r7, r1
10044b1a:	781b      	ldrb	r3, [r3, #0]
10044b1c:	b25b      	sxtb	r3, r3
10044b1e:	0011      	movs	r1, r2
10044b20:	0018      	movs	r0, r3
10044b22:	f7ff ff5d 	bl	100449e0 <__NVIC_SetPriority>
}
10044b26:	46c0      	nop			@ (mov r8, r8)
10044b28:	46bd      	mov	sp, r7
10044b2a:	b004      	add	sp, #16
10044b2c:	bd80      	pop	{r7, pc}

10044b2e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file)
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
10044b2e:	b580      	push	{r7, lr}
10044b30:	b082      	sub	sp, #8
10044b32:	af00      	add	r7, sp, #0
10044b34:	0002      	movs	r2, r0
10044b36:	1dfb      	adds	r3, r7, #7
10044b38:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
10044b3a:	1dfb      	adds	r3, r7, #7
10044b3c:	781b      	ldrb	r3, [r3, #0]
10044b3e:	b25b      	sxtb	r3, r3
10044b40:	0018      	movs	r0, r3
10044b42:	f7ff ff33 	bl	100449ac <__NVIC_EnableIRQ>
}
10044b46:	46c0      	nop			@ (mov r8, r8)
10044b48:	46bd      	mov	sp, r7
10044b4a:	b002      	add	sp, #8
10044b4c:	bd80      	pop	{r7, pc}

10044b4e <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
10044b4e:	b580      	push	{r7, lr}
10044b50:	b082      	sub	sp, #8
10044b52:	af00      	add	r7, sp, #0
10044b54:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
10044b56:	687b      	ldr	r3, [r7, #4]
10044b58:	0018      	movs	r0, r3
10044b5a:	f7ff ffaf 	bl	10044abc <SysTick_Config>
10044b5e:	0003      	movs	r3, r0
}
10044b60:	0018      	movs	r0, r3
10044b62:	46bd      	mov	sp, r7
10044b64:	b002      	add	sp, #8
10044b66:	bd80      	pop	{r7, pc}

10044b68 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
10044b68:	b580      	push	{r7, lr}
10044b6a:	b086      	sub	sp, #24
10044b6c:	af00      	add	r7, sp, #0
10044b6e:	6078      	str	r0, [r7, #4]
10044b70:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
10044b72:	2300      	movs	r3, #0
10044b74:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
10044b76:	e194      	b.n	10044ea2 <HAL_GPIO_Init+0x33a>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
10044b78:	683b      	ldr	r3, [r7, #0]
10044b7a:	681b      	ldr	r3, [r3, #0]
10044b7c:	2101      	movs	r1, #1
10044b7e:	697a      	ldr	r2, [r7, #20]
10044b80:	4091      	lsls	r1, r2
10044b82:	000a      	movs	r2, r1
10044b84:	4013      	ands	r3, r2
10044b86:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
10044b88:	68fb      	ldr	r3, [r7, #12]
10044b8a:	2b00      	cmp	r3, #0
10044b8c:	d100      	bne.n	10044b90 <HAL_GPIO_Init+0x28>
10044b8e:	e185      	b.n	10044e9c <HAL_GPIO_Init+0x334>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
10044b90:	683b      	ldr	r3, [r7, #0]
10044b92:	685b      	ldr	r3, [r3, #4]
10044b94:	2203      	movs	r2, #3
10044b96:	4013      	ands	r3, r2
10044b98:	2b01      	cmp	r3, #1
10044b9a:	d005      	beq.n	10044ba8 <HAL_GPIO_Init+0x40>
10044b9c:	683b      	ldr	r3, [r7, #0]
10044b9e:	685b      	ldr	r3, [r3, #4]
10044ba0:	2203      	movs	r2, #3
10044ba2:	4013      	ands	r3, r2
10044ba4:	2b02      	cmp	r3, #2
10044ba6:	d130      	bne.n	10044c0a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
10044ba8:	687b      	ldr	r3, [r7, #4]
10044baa:	689b      	ldr	r3, [r3, #8]
10044bac:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
10044bae:	697b      	ldr	r3, [r7, #20]
10044bb0:	005b      	lsls	r3, r3, #1
10044bb2:	2203      	movs	r2, #3
10044bb4:	409a      	lsls	r2, r3
10044bb6:	0013      	movs	r3, r2
10044bb8:	43da      	mvns	r2, r3
10044bba:	693b      	ldr	r3, [r7, #16]
10044bbc:	4013      	ands	r3, r2
10044bbe:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
10044bc0:	683b      	ldr	r3, [r7, #0]
10044bc2:	68da      	ldr	r2, [r3, #12]
10044bc4:	697b      	ldr	r3, [r7, #20]
10044bc6:	005b      	lsls	r3, r3, #1
10044bc8:	409a      	lsls	r2, r3
10044bca:	0013      	movs	r3, r2
10044bcc:	693a      	ldr	r2, [r7, #16]
10044bce:	4313      	orrs	r3, r2
10044bd0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
10044bd2:	687b      	ldr	r3, [r7, #4]
10044bd4:	693a      	ldr	r2, [r7, #16]
10044bd6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
10044bd8:	687b      	ldr	r3, [r7, #4]
10044bda:	685b      	ldr	r3, [r3, #4]
10044bdc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
10044bde:	2201      	movs	r2, #1
10044be0:	697b      	ldr	r3, [r7, #20]
10044be2:	409a      	lsls	r2, r3
10044be4:	0013      	movs	r3, r2
10044be6:	43da      	mvns	r2, r3
10044be8:	693b      	ldr	r3, [r7, #16]
10044bea:	4013      	ands	r3, r2
10044bec:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
10044bee:	683b      	ldr	r3, [r7, #0]
10044bf0:	685b      	ldr	r3, [r3, #4]
10044bf2:	091b      	lsrs	r3, r3, #4
10044bf4:	2201      	movs	r2, #1
10044bf6:	401a      	ands	r2, r3
10044bf8:	697b      	ldr	r3, [r7, #20]
10044bfa:	409a      	lsls	r2, r3
10044bfc:	0013      	movs	r3, r2
10044bfe:	693a      	ldr	r2, [r7, #16]
10044c00:	4313      	orrs	r3, r2
10044c02:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
10044c04:	687b      	ldr	r3, [r7, #4]
10044c06:	693a      	ldr	r2, [r7, #16]
10044c08:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
10044c0a:	683b      	ldr	r3, [r7, #0]
10044c0c:	685b      	ldr	r3, [r3, #4]
10044c0e:	2203      	movs	r2, #3
10044c10:	4013      	ands	r3, r2
10044c12:	2b03      	cmp	r3, #3
10044c14:	d017      	beq.n	10044c46 <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
10044c16:	687b      	ldr	r3, [r7, #4]
10044c18:	68db      	ldr	r3, [r3, #12]
10044c1a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
10044c1c:	697b      	ldr	r3, [r7, #20]
10044c1e:	005b      	lsls	r3, r3, #1
10044c20:	2203      	movs	r2, #3
10044c22:	409a      	lsls	r2, r3
10044c24:	0013      	movs	r3, r2
10044c26:	43da      	mvns	r2, r3
10044c28:	693b      	ldr	r3, [r7, #16]
10044c2a:	4013      	ands	r3, r2
10044c2c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
10044c2e:	683b      	ldr	r3, [r7, #0]
10044c30:	689a      	ldr	r2, [r3, #8]
10044c32:	697b      	ldr	r3, [r7, #20]
10044c34:	005b      	lsls	r3, r3, #1
10044c36:	409a      	lsls	r2, r3
10044c38:	0013      	movs	r3, r2
10044c3a:	693a      	ldr	r2, [r7, #16]
10044c3c:	4313      	orrs	r3, r2
10044c3e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
10044c40:	687b      	ldr	r3, [r7, #4]
10044c42:	693a      	ldr	r2, [r7, #16]
10044c44:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
10044c46:	683b      	ldr	r3, [r7, #0]
10044c48:	685b      	ldr	r3, [r3, #4]
10044c4a:	2203      	movs	r2, #3
10044c4c:	4013      	ands	r3, r2
10044c4e:	2b02      	cmp	r3, #2
10044c50:	d123      	bne.n	10044c9a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
10044c52:	697b      	ldr	r3, [r7, #20]
10044c54:	08da      	lsrs	r2, r3, #3
10044c56:	687b      	ldr	r3, [r7, #4]
10044c58:	3208      	adds	r2, #8
10044c5a:	0092      	lsls	r2, r2, #2
10044c5c:	58d3      	ldr	r3, [r2, r3]
10044c5e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
10044c60:	697b      	ldr	r3, [r7, #20]
10044c62:	2207      	movs	r2, #7
10044c64:	4013      	ands	r3, r2
10044c66:	009b      	lsls	r3, r3, #2
10044c68:	220f      	movs	r2, #15
10044c6a:	409a      	lsls	r2, r3
10044c6c:	0013      	movs	r3, r2
10044c6e:	43da      	mvns	r2, r3
10044c70:	693b      	ldr	r3, [r7, #16]
10044c72:	4013      	ands	r3, r2
10044c74:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
10044c76:	683b      	ldr	r3, [r7, #0]
10044c78:	691a      	ldr	r2, [r3, #16]
10044c7a:	697b      	ldr	r3, [r7, #20]
10044c7c:	2107      	movs	r1, #7
10044c7e:	400b      	ands	r3, r1
10044c80:	009b      	lsls	r3, r3, #2
10044c82:	409a      	lsls	r2, r3
10044c84:	0013      	movs	r3, r2
10044c86:	693a      	ldr	r2, [r7, #16]
10044c88:	4313      	orrs	r3, r2
10044c8a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
10044c8c:	697b      	ldr	r3, [r7, #20]
10044c8e:	08da      	lsrs	r2, r3, #3
10044c90:	687b      	ldr	r3, [r7, #4]
10044c92:	3208      	adds	r2, #8
10044c94:	0092      	lsls	r2, r2, #2
10044c96:	6939      	ldr	r1, [r7, #16]
10044c98:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
10044c9a:	687b      	ldr	r3, [r7, #4]
10044c9c:	681b      	ldr	r3, [r3, #0]
10044c9e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
10044ca0:	697b      	ldr	r3, [r7, #20]
10044ca2:	005b      	lsls	r3, r3, #1
10044ca4:	2203      	movs	r2, #3
10044ca6:	409a      	lsls	r2, r3
10044ca8:	0013      	movs	r3, r2
10044caa:	43da      	mvns	r2, r3
10044cac:	693b      	ldr	r3, [r7, #16]
10044cae:	4013      	ands	r3, r2
10044cb0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
10044cb2:	683b      	ldr	r3, [r7, #0]
10044cb4:	685b      	ldr	r3, [r3, #4]
10044cb6:	2203      	movs	r2, #3
10044cb8:	401a      	ands	r2, r3
10044cba:	697b      	ldr	r3, [r7, #20]
10044cbc:	005b      	lsls	r3, r3, #1
10044cbe:	409a      	lsls	r2, r3
10044cc0:	0013      	movs	r3, r2
10044cc2:	693a      	ldr	r2, [r7, #16]
10044cc4:	4313      	orrs	r3, r2
10044cc6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
10044cc8:	687b      	ldr	r3, [r7, #4]
10044cca:	693a      	ldr	r2, [r7, #16]
10044ccc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
10044cce:	683b      	ldr	r3, [r7, #0]
10044cd0:	685a      	ldr	r2, [r3, #4]
10044cd2:	23c0      	movs	r3, #192	@ 0xc0
10044cd4:	029b      	lsls	r3, r3, #10
10044cd6:	4013      	ands	r3, r2
10044cd8:	d100      	bne.n	10044cdc <HAL_GPIO_Init+0x174>
10044cda:	e0df      	b.n	10044e9c <HAL_GPIO_Init+0x334>
      {

        /* Edge/Level line configuration */
        if ((GPIO_Init->Mode & DETECTION_TYPE) != 0x00u)
10044cdc:	683b      	ldr	r3, [r7, #0]
10044cde:	685a      	ldr	r2, [r3, #4]
10044ce0:	2380      	movs	r3, #128	@ 0x80
10044ce2:	02db      	lsls	r3, r3, #11
10044ce4:	4013      	ands	r3, r2
10044ce6:	d031      	beq.n	10044d4c <HAL_GPIO_Init+0x1e4>
        {
          temp = SYSCFG->IO_DTR;
10044ce8:	2380      	movs	r3, #128	@ 0x80
10044cea:	05db      	lsls	r3, r3, #23
10044cec:	68db      	ldr	r3, [r3, #12]
10044cee:	613b      	str	r3, [r7, #16]
          if (GPIOx == GPIOA)
10044cf0:	687a      	ldr	r2, [r7, #4]
10044cf2:	2390      	movs	r3, #144	@ 0x90
10044cf4:	05db      	lsls	r3, r3, #23
10044cf6:	429a      	cmp	r2, r3
10044cf8:	d111      	bne.n	10044d1e <HAL_GPIO_Init+0x1b6>
          {
            temp &= ~(1 << position);
10044cfa:	2201      	movs	r2, #1
10044cfc:	697b      	ldr	r3, [r7, #20]
10044cfe:	409a      	lsls	r2, r3
10044d00:	0013      	movs	r3, r2
10044d02:	43db      	mvns	r3, r3
10044d04:	001a      	movs	r2, r3
10044d06:	693b      	ldr	r3, [r7, #16]
10044d08:	4013      	ands	r3, r2
10044d0a:	613b      	str	r3, [r7, #16]
            temp |= (1 << position);
10044d0c:	2201      	movs	r2, #1
10044d0e:	697b      	ldr	r3, [r7, #20]
10044d10:	409a      	lsls	r2, r3
10044d12:	0013      	movs	r3, r2
10044d14:	001a      	movs	r2, r3
10044d16:	693b      	ldr	r3, [r7, #16]
10044d18:	4313      	orrs	r3, r2
10044d1a:	613b      	str	r3, [r7, #16]
10044d1c:	e012      	b.n	10044d44 <HAL_GPIO_Init+0x1dc>
          }
          else
          {
            temp &= ~((1 << position) << 16);
10044d1e:	2201      	movs	r2, #1
10044d20:	697b      	ldr	r3, [r7, #20]
10044d22:	409a      	lsls	r2, r3
10044d24:	0013      	movs	r3, r2
10044d26:	041b      	lsls	r3, r3, #16
10044d28:	43db      	mvns	r3, r3
10044d2a:	001a      	movs	r2, r3
10044d2c:	693b      	ldr	r3, [r7, #16]
10044d2e:	4013      	ands	r3, r2
10044d30:	613b      	str	r3, [r7, #16]
            temp |= ((1 << position) << 16);
10044d32:	2201      	movs	r2, #1
10044d34:	697b      	ldr	r3, [r7, #20]
10044d36:	409a      	lsls	r2, r3
10044d38:	0013      	movs	r3, r2
10044d3a:	041b      	lsls	r3, r3, #16
10044d3c:	001a      	movs	r2, r3
10044d3e:	693b      	ldr	r3, [r7, #16]
10044d40:	4313      	orrs	r3, r2
10044d42:	613b      	str	r3, [r7, #16]
          }
          SYSCFG->IO_DTR = temp;
10044d44:	2380      	movs	r3, #128	@ 0x80
10044d46:	05db      	lsls	r3, r3, #23
10044d48:	693a      	ldr	r2, [r7, #16]
10044d4a:	60da      	str	r2, [r3, #12]
        }

		/* Edge selection configuration */
		if ((GPIO_Init->Mode & EDGE_SELECTION) != 0x00u)
10044d4c:	683b      	ldr	r3, [r7, #0]
10044d4e:	685a      	ldr	r2, [r3, #4]
10044d50:	2380      	movs	r3, #128	@ 0x80
10044d52:	035b      	lsls	r3, r3, #13
10044d54:	4013      	ands	r3, r2
10044d56:	d031      	beq.n	10044dbc <HAL_GPIO_Init+0x254>
        {
          temp = SYSCFG->IO_IBER;
10044d58:	2380      	movs	r3, #128	@ 0x80
10044d5a:	05db      	lsls	r3, r3, #23
10044d5c:	691b      	ldr	r3, [r3, #16]
10044d5e:	613b      	str	r3, [r7, #16]

          if (GPIOx == GPIOA)
10044d60:	687a      	ldr	r2, [r7, #4]
10044d62:	2390      	movs	r3, #144	@ 0x90
10044d64:	05db      	lsls	r3, r3, #23
10044d66:	429a      	cmp	r2, r3
10044d68:	d111      	bne.n	10044d8e <HAL_GPIO_Init+0x226>
          {
            temp &= ~(1 << position);
10044d6a:	2201      	movs	r2, #1
10044d6c:	697b      	ldr	r3, [r7, #20]
10044d6e:	409a      	lsls	r2, r3
10044d70:	0013      	movs	r3, r2
10044d72:	43db      	mvns	r3, r3
10044d74:	001a      	movs	r2, r3
10044d76:	693b      	ldr	r3, [r7, #16]
10044d78:	4013      	ands	r3, r2
10044d7a:	613b      	str	r3, [r7, #16]
            temp |= (1 << position);
10044d7c:	2201      	movs	r2, #1
10044d7e:	697b      	ldr	r3, [r7, #20]
10044d80:	409a      	lsls	r2, r3
10044d82:	0013      	movs	r3, r2
10044d84:	001a      	movs	r2, r3
10044d86:	693b      	ldr	r3, [r7, #16]
10044d88:	4313      	orrs	r3, r2
10044d8a:	613b      	str	r3, [r7, #16]
10044d8c:	e012      	b.n	10044db4 <HAL_GPIO_Init+0x24c>
          }
          else
          {
            temp &= ~((1 << position) << 16);
10044d8e:	2201      	movs	r2, #1
10044d90:	697b      	ldr	r3, [r7, #20]
10044d92:	409a      	lsls	r2, r3
10044d94:	0013      	movs	r3, r2
10044d96:	041b      	lsls	r3, r3, #16
10044d98:	43db      	mvns	r3, r3
10044d9a:	001a      	movs	r2, r3
10044d9c:	693b      	ldr	r3, [r7, #16]
10044d9e:	4013      	ands	r3, r2
10044da0:	613b      	str	r3, [r7, #16]
            temp |= ((1 << position) << 16);
10044da2:	2201      	movs	r2, #1
10044da4:	697b      	ldr	r3, [r7, #20]
10044da6:	409a      	lsls	r2, r3
10044da8:	0013      	movs	r3, r2
10044daa:	041b      	lsls	r3, r3, #16
10044dac:	001a      	movs	r2, r3
10044dae:	693b      	ldr	r3, [r7, #16]
10044db0:	4313      	orrs	r3, r2
10044db2:	613b      	str	r3, [r7, #16]
          }
          SYSCFG->IO_IBER= temp;
10044db4:	2380      	movs	r3, #128	@ 0x80
10044db6:	05db      	lsls	r3, r3, #23
10044db8:	693a      	ldr	r2, [r7, #16]
10044dba:	611a      	str	r2, [r3, #16]
        }

        /* Trigger mode configuration */
		if ((GPIO_Init->Mode & TRIGGER_MODE) != 0x00u)
10044dbc:	683b      	ldr	r3, [r7, #0]
10044dbe:	685a      	ldr	r2, [r3, #4]
10044dc0:	2380      	movs	r3, #128	@ 0x80
10044dc2:	03db      	lsls	r3, r3, #15
10044dc4:	4013      	ands	r3, r2
10044dc6:	d031      	beq.n	10044e2c <HAL_GPIO_Init+0x2c4>
        {
          temp = SYSCFG->IO_IEVR;
10044dc8:	2380      	movs	r3, #128	@ 0x80
10044dca:	05db      	lsls	r3, r3, #23
10044dcc:	695b      	ldr	r3, [r3, #20]
10044dce:	613b      	str	r3, [r7, #16]

          if (GPIOx == GPIOA)
10044dd0:	687a      	ldr	r2, [r7, #4]
10044dd2:	2390      	movs	r3, #144	@ 0x90
10044dd4:	05db      	lsls	r3, r3, #23
10044dd6:	429a      	cmp	r2, r3
10044dd8:	d111      	bne.n	10044dfe <HAL_GPIO_Init+0x296>
          {
            temp &= ~(1 << position);
10044dda:	2201      	movs	r2, #1
10044ddc:	697b      	ldr	r3, [r7, #20]
10044dde:	409a      	lsls	r2, r3
10044de0:	0013      	movs	r3, r2
10044de2:	43db      	mvns	r3, r3
10044de4:	001a      	movs	r2, r3
10044de6:	693b      	ldr	r3, [r7, #16]
10044de8:	4013      	ands	r3, r2
10044dea:	613b      	str	r3, [r7, #16]
            temp |= (1 << position);
10044dec:	2201      	movs	r2, #1
10044dee:	697b      	ldr	r3, [r7, #20]
10044df0:	409a      	lsls	r2, r3
10044df2:	0013      	movs	r3, r2
10044df4:	001a      	movs	r2, r3
10044df6:	693b      	ldr	r3, [r7, #16]
10044df8:	4313      	orrs	r3, r2
10044dfa:	613b      	str	r3, [r7, #16]
10044dfc:	e012      	b.n	10044e24 <HAL_GPIO_Init+0x2bc>
          }
          else
          {
            temp &= ~((1 << position) << 16);
10044dfe:	2201      	movs	r2, #1
10044e00:	697b      	ldr	r3, [r7, #20]
10044e02:	409a      	lsls	r2, r3
10044e04:	0013      	movs	r3, r2
10044e06:	041b      	lsls	r3, r3, #16
10044e08:	43db      	mvns	r3, r3
10044e0a:	001a      	movs	r2, r3
10044e0c:	693b      	ldr	r3, [r7, #16]
10044e0e:	4013      	ands	r3, r2
10044e10:	613b      	str	r3, [r7, #16]
            temp |= ((1 << position) << 16);
10044e12:	2201      	movs	r2, #1
10044e14:	697b      	ldr	r3, [r7, #20]
10044e16:	409a      	lsls	r2, r3
10044e18:	0013      	movs	r3, r2
10044e1a:	041b      	lsls	r3, r3, #16
10044e1c:	001a      	movs	r2, r3
10044e1e:	693b      	ldr	r3, [r7, #16]
10044e20:	4313      	orrs	r3, r2
10044e22:	613b      	str	r3, [r7, #16]
          }
          SYSCFG->IO_IEVR= temp;
10044e24:	2380      	movs	r3, #128	@ 0x80
10044e26:	05db      	lsls	r3, r3, #23
10044e28:	693a      	ldr	r2, [r7, #16]
10044e2a:	615a      	str	r2, [r3, #20]
        }

        /* Enable the specified EXTI interrupt line */
        if ((GPIO_Init->Mode & EXTI_IT) == EXTI_IT)
10044e2c:	683b      	ldr	r3, [r7, #0]
10044e2e:	685a      	ldr	r2, [r3, #4]
10044e30:	2380      	movs	r3, #128	@ 0x80
10044e32:	025b      	lsls	r3, r3, #9
10044e34:	4013      	ands	r3, r2
10044e36:	d031      	beq.n	10044e9c <HAL_GPIO_Init+0x334>
        {
          temp = SYSCFG->IO_IER;
10044e38:	2380      	movs	r3, #128	@ 0x80
10044e3a:	05db      	lsls	r3, r3, #23
10044e3c:	699b      	ldr	r3, [r3, #24]
10044e3e:	613b      	str	r3, [r7, #16]

          if (GPIOx == GPIOA)
10044e40:	687a      	ldr	r2, [r7, #4]
10044e42:	2390      	movs	r3, #144	@ 0x90
10044e44:	05db      	lsls	r3, r3, #23
10044e46:	429a      	cmp	r2, r3
10044e48:	d111      	bne.n	10044e6e <HAL_GPIO_Init+0x306>
          {
            temp &= ~(1 << position);
10044e4a:	2201      	movs	r2, #1
10044e4c:	697b      	ldr	r3, [r7, #20]
10044e4e:	409a      	lsls	r2, r3
10044e50:	0013      	movs	r3, r2
10044e52:	43db      	mvns	r3, r3
10044e54:	001a      	movs	r2, r3
10044e56:	693b      	ldr	r3, [r7, #16]
10044e58:	4013      	ands	r3, r2
10044e5a:	613b      	str	r3, [r7, #16]
            temp |= (1 << position);
10044e5c:	2201      	movs	r2, #1
10044e5e:	697b      	ldr	r3, [r7, #20]
10044e60:	409a      	lsls	r2, r3
10044e62:	0013      	movs	r3, r2
10044e64:	001a      	movs	r2, r3
10044e66:	693b      	ldr	r3, [r7, #16]
10044e68:	4313      	orrs	r3, r2
10044e6a:	613b      	str	r3, [r7, #16]
10044e6c:	e012      	b.n	10044e94 <HAL_GPIO_Init+0x32c>
          }
          else
          {
            temp &= ~((1 << position) << 16);
10044e6e:	2201      	movs	r2, #1
10044e70:	697b      	ldr	r3, [r7, #20]
10044e72:	409a      	lsls	r2, r3
10044e74:	0013      	movs	r3, r2
10044e76:	041b      	lsls	r3, r3, #16
10044e78:	43db      	mvns	r3, r3
10044e7a:	001a      	movs	r2, r3
10044e7c:	693b      	ldr	r3, [r7, #16]
10044e7e:	4013      	ands	r3, r2
10044e80:	613b      	str	r3, [r7, #16]
            temp |= ((1 << position) << 16);
10044e82:	2201      	movs	r2, #1
10044e84:	697b      	ldr	r3, [r7, #20]
10044e86:	409a      	lsls	r2, r3
10044e88:	0013      	movs	r3, r2
10044e8a:	041b      	lsls	r3, r3, #16
10044e8c:	001a      	movs	r2, r3
10044e8e:	693b      	ldr	r3, [r7, #16]
10044e90:	4313      	orrs	r3, r2
10044e92:	613b      	str	r3, [r7, #16]
          }
          SYSCFG->IO_IER= temp;
10044e94:	2380      	movs	r3, #128	@ 0x80
10044e96:	05db      	lsls	r3, r3, #23
10044e98:	693a      	ldr	r2, [r7, #16]
10044e9a:	619a      	str	r2, [r3, #24]
        }
      }
    }

    position++;
10044e9c:	697b      	ldr	r3, [r7, #20]
10044e9e:	3301      	adds	r3, #1
10044ea0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
10044ea2:	683b      	ldr	r3, [r7, #0]
10044ea4:	681a      	ldr	r2, [r3, #0]
10044ea6:	697b      	ldr	r3, [r7, #20]
10044ea8:	40da      	lsrs	r2, r3
10044eaa:	1e13      	subs	r3, r2, #0
10044eac:	d000      	beq.n	10044eb0 <HAL_GPIO_Init+0x348>
10044eae:	e663      	b.n	10044b78 <HAL_GPIO_Init+0x10>
  }
}
10044eb0:	46c0      	nop			@ (mov r8, r8)
10044eb2:	46c0      	nop			@ (mov r8, r8)
10044eb4:	46bd      	mov	sp, r7
10044eb6:	b006      	add	sp, #24
10044eb8:	bd80      	pop	{r7, pc}

10044eba <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
10044eba:	b580      	push	{r7, lr}
10044ebc:	b082      	sub	sp, #8
10044ebe:	af00      	add	r7, sp, #0
10044ec0:	6078      	str	r0, [r7, #4]
10044ec2:	0008      	movs	r0, r1
10044ec4:	0011      	movs	r1, r2
10044ec6:	1cbb      	adds	r3, r7, #2
10044ec8:	1c02      	adds	r2, r0, #0
10044eca:	801a      	strh	r2, [r3, #0]
10044ecc:	1c7b      	adds	r3, r7, #1
10044ece:	1c0a      	adds	r2, r1, #0
10044ed0:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
10044ed2:	1c7b      	adds	r3, r7, #1
10044ed4:	781b      	ldrb	r3, [r3, #0]
10044ed6:	2b00      	cmp	r3, #0
10044ed8:	d004      	beq.n	10044ee4 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
10044eda:	1cbb      	adds	r3, r7, #2
10044edc:	881a      	ldrh	r2, [r3, #0]
10044ede:	687b      	ldr	r3, [r7, #4]
10044ee0:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
10044ee2:	e003      	b.n	10044eec <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
10044ee4:	1cbb      	adds	r3, r7, #2
10044ee6:	881a      	ldrh	r2, [r3, #0]
10044ee8:	687b      	ldr	r3, [r7, #4]
10044eea:	629a      	str	r2, [r3, #40]	@ 0x28
}
10044eec:	46c0      	nop			@ (mov r8, r8)
10044eee:	46bd      	mov	sp, r7
10044ef0:	b002      	add	sp, #8
10044ef2:	bd80      	pop	{r7, pc}

10044ef4 <HAL_GPIO_EXTI_IRQHandler>:
  * @param GPIOx where x can be (A..B) to select the GPIO peripheral
  * @param GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
10044ef4:	b580      	push	{r7, lr}
10044ef6:	b082      	sub	sp, #8
10044ef8:	af00      	add	r7, sp, #0
10044efa:	6078      	str	r0, [r7, #4]
10044efc:	000a      	movs	r2, r1
10044efe:	1cbb      	adds	r3, r7, #2
10044f00:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIOx, GPIO_Pin) != 0x00u)
10044f02:	687a      	ldr	r2, [r7, #4]
10044f04:	2390      	movs	r3, #144	@ 0x90
10044f06:	05db      	lsls	r3, r3, #23
10044f08:	429a      	cmp	r2, r3
10044f0a:	d109      	bne.n	10044f20 <HAL_GPIO_EXTI_IRQHandler+0x2c>
10044f0c:	2380      	movs	r3, #128	@ 0x80
10044f0e:	05db      	lsls	r3, r3, #23
10044f10:	69db      	ldr	r3, [r3, #28]
10044f12:	1cba      	adds	r2, r7, #2
10044f14:	8812      	ldrh	r2, [r2, #0]
10044f16:	4013      	ands	r3, r2
10044f18:	1e5a      	subs	r2, r3, #1
10044f1a:	4193      	sbcs	r3, r2
10044f1c:	b2db      	uxtb	r3, r3
10044f1e:	e009      	b.n	10044f34 <HAL_GPIO_EXTI_IRQHandler+0x40>
10044f20:	2380      	movs	r3, #128	@ 0x80
10044f22:	05db      	lsls	r3, r3, #23
10044f24:	69db      	ldr	r3, [r3, #28]
10044f26:	1cba      	adds	r2, r7, #2
10044f28:	8812      	ldrh	r2, [r2, #0]
10044f2a:	0412      	lsls	r2, r2, #16
10044f2c:	4013      	ands	r3, r2
10044f2e:	1e5a      	subs	r2, r3, #1
10044f30:	4193      	sbcs	r3, r2
10044f32:	b2db      	uxtb	r3, r3
10044f34:	2b00      	cmp	r3, #0
10044f36:	d017      	beq.n	10044f68 <HAL_GPIO_EXTI_IRQHandler+0x74>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIOx, GPIO_Pin);
10044f38:	687a      	ldr	r2, [r7, #4]
10044f3a:	2390      	movs	r3, #144	@ 0x90
10044f3c:	05db      	lsls	r3, r3, #23
10044f3e:	429a      	cmp	r2, r3
10044f40:	d105      	bne.n	10044f4e <HAL_GPIO_EXTI_IRQHandler+0x5a>
10044f42:	2380      	movs	r3, #128	@ 0x80
10044f44:	05db      	lsls	r3, r3, #23
10044f46:	1cba      	adds	r2, r7, #2
10044f48:	8812      	ldrh	r2, [r2, #0]
10044f4a:	61da      	str	r2, [r3, #28]
10044f4c:	e005      	b.n	10044f5a <HAL_GPIO_EXTI_IRQHandler+0x66>
10044f4e:	1cbb      	adds	r3, r7, #2
10044f50:	881a      	ldrh	r2, [r3, #0]
10044f52:	2380      	movs	r3, #128	@ 0x80
10044f54:	05db      	lsls	r3, r3, #23
10044f56:	0412      	lsls	r2, r2, #16
10044f58:	61da      	str	r2, [r3, #28]
    HAL_GPIO_EXTI_Callback(GPIOx, GPIO_Pin);
10044f5a:	1cbb      	adds	r3, r7, #2
10044f5c:	881a      	ldrh	r2, [r3, #0]
10044f5e:	687b      	ldr	r3, [r7, #4]
10044f60:	0011      	movs	r1, r2
10044f62:	0018      	movs	r0, r3
10044f64:	f7fe f870 	bl	10043048 <HAL_GPIO_EXTI_Callback>
  }
}
10044f68:	46c0      	nop			@ (mov r8, r8)
10044f6a:	46bd      	mov	sp, r7
10044f6c:	b002      	add	sp, #8
10044f6e:	bd80      	pop	{r7, pc}

10044f70 <LL_RADIO_SetRadioConfigurationAddressPointer>:
  * @rmtoll WORD0          RADIOCONFIGPTR       LL_RADIO_SetRadioConfigurationAddressPointer
  * @param  value
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_SetRadioConfigurationAddressPointer(uint32_t value)
{
10044f70:	b580      	push	{r7, lr}
10044f72:	b082      	sub	sp, #8
10044f74:	af00      	add	r7, sp, #0
10044f76:	6078      	str	r0, [r7, #4]
  MODIFY_REG_FIELD(BLUEGLOBWORD->WORD0, GLOBAL_WORD0_RADIOCONFIGPTR, value);
10044f78:	4b04      	ldr	r3, [pc, #16]	@ (10044f8c <LL_RADIO_SetRadioConfigurationAddressPointer+0x1c>)
10044f7a:	681b      	ldr	r3, [r3, #0]
10044f7c:	4b03      	ldr	r3, [pc, #12]	@ (10044f8c <LL_RADIO_SetRadioConfigurationAddressPointer+0x1c>)
10044f7e:	687a      	ldr	r2, [r7, #4]
10044f80:	601a      	str	r2, [r3, #0]
}
10044f82:	46c0      	nop			@ (mov r8, r8)
10044f84:	46bd      	mov	sp, r7
10044f86:	b002      	add	sp, #8
10044f88:	bd80      	pop	{r7, pc}
10044f8a:	46c0      	nop			@ (mov r8, r8)
10044f8c:	200000c0 	.word	0x200000c0

10044f90 <LL_RADIO_SetWakeupInitDelay>:
  * @rmtoll WORD1          WAKEUPINITDELAY       LL_RADIO_SetWakeupInitDelay
  * @param  value
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_SetWakeupInitDelay(uint32_t value)
{
10044f90:	b580      	push	{r7, lr}
10044f92:	b082      	sub	sp, #8
10044f94:	af00      	add	r7, sp, #0
10044f96:	6078      	str	r0, [r7, #4]
  MODIFY_REG_FIELD(BLUEGLOBWORD->WORD1, GLOBAL_WORD1_WAKEUPINITDELAY, value);
10044f98:	4b07      	ldr	r3, [pc, #28]	@ (10044fb8 <LL_RADIO_SetWakeupInitDelay+0x28>)
10044f9a:	685b      	ldr	r3, [r3, #4]
10044f9c:	4a07      	ldr	r2, [pc, #28]	@ (10044fbc <LL_RADIO_SetWakeupInitDelay+0x2c>)
10044f9e:	4013      	ands	r3, r2
10044fa0:	0019      	movs	r1, r3
10044fa2:	687b      	ldr	r3, [r7, #4]
10044fa4:	021b      	lsls	r3, r3, #8
10044fa6:	041b      	lsls	r3, r3, #16
10044fa8:	0c1a      	lsrs	r2, r3, #16
10044faa:	4b03      	ldr	r3, [pc, #12]	@ (10044fb8 <LL_RADIO_SetWakeupInitDelay+0x28>)
10044fac:	430a      	orrs	r2, r1
10044fae:	605a      	str	r2, [r3, #4]
}
10044fb0:	46c0      	nop			@ (mov r8, r8)
10044fb2:	46bd      	mov	sp, r7
10044fb4:	b002      	add	sp, #8
10044fb6:	bd80      	pop	{r7, pc}
10044fb8:	200000c0 	.word	0x200000c0
10044fbc:	ffff00ff 	.word	0xffff00ff

10044fc0 <LL_RADIO_SetTimer12InitDelayCal>:
  * @rmtoll WORD1          TIMER12INITDELAYCAL       LL_RADIO_SetTimer12InitDelayCal
  * @param  value
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_SetTimer12InitDelayCal(uint32_t value)
{
10044fc0:	b580      	push	{r7, lr}
10044fc2:	b082      	sub	sp, #8
10044fc4:	af00      	add	r7, sp, #0
10044fc6:	6078      	str	r0, [r7, #4]
  MODIFY_REG_FIELD(BLUEGLOBWORD->WORD1, GLOBAL_WORD1_TIMER12INITDELAYCAL, value);
10044fc8:	4b08      	ldr	r3, [pc, #32]	@ (10044fec <LL_RADIO_SetTimer12InitDelayCal+0x2c>)
10044fca:	685b      	ldr	r3, [r3, #4]
10044fcc:	4a08      	ldr	r2, [pc, #32]	@ (10044ff0 <LL_RADIO_SetTimer12InitDelayCal+0x30>)
10044fce:	4013      	ands	r3, r2
10044fd0:	0019      	movs	r1, r3
10044fd2:	687b      	ldr	r3, [r7, #4]
10044fd4:	041a      	lsls	r2, r3, #16
10044fd6:	23ff      	movs	r3, #255	@ 0xff
10044fd8:	041b      	lsls	r3, r3, #16
10044fda:	401a      	ands	r2, r3
10044fdc:	4b03      	ldr	r3, [pc, #12]	@ (10044fec <LL_RADIO_SetTimer12InitDelayCal+0x2c>)
10044fde:	430a      	orrs	r2, r1
10044fe0:	605a      	str	r2, [r3, #4]
}
10044fe2:	46c0      	nop			@ (mov r8, r8)
10044fe4:	46bd      	mov	sp, r7
10044fe6:	b002      	add	sp, #8
10044fe8:	bd80      	pop	{r7, pc}
10044fea:	46c0      	nop			@ (mov r8, r8)
10044fec:	200000c0 	.word	0x200000c0
10044ff0:	ff00ffff 	.word	0xff00ffff

10044ff4 <LL_RADIO_SetTimer12InitDelayNoCal>:
  * @rmtoll WORD1          TIMER2INITDELAYNOCAL       LL_RADIO_SetTimer12InitDelayNoCal
  * @param  value
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_SetTimer12InitDelayNoCal(uint32_t value)
{
10044ff4:	b580      	push	{r7, lr}
10044ff6:	b082      	sub	sp, #8
10044ff8:	af00      	add	r7, sp, #0
10044ffa:	6078      	str	r0, [r7, #4]
  MODIFY_REG_FIELD(BLUEGLOBWORD->WORD1, GLOBAL_WORD1_TIMER2INITDELAYNOCAL, value);
10044ffc:	4b06      	ldr	r3, [pc, #24]	@ (10045018 <LL_RADIO_SetTimer12InitDelayNoCal+0x24>)
10044ffe:	685b      	ldr	r3, [r3, #4]
10045000:	021b      	lsls	r3, r3, #8
10045002:	0a19      	lsrs	r1, r3, #8
10045004:	687b      	ldr	r3, [r7, #4]
10045006:	061a      	lsls	r2, r3, #24
10045008:	4b03      	ldr	r3, [pc, #12]	@ (10045018 <LL_RADIO_SetTimer12InitDelayNoCal+0x24>)
1004500a:	430a      	orrs	r2, r1
1004500c:	605a      	str	r2, [r3, #4]
}
1004500e:	46c0      	nop			@ (mov r8, r8)
10045010:	46bd      	mov	sp, r7
10045012:	b002      	add	sp, #8
10045014:	bd80      	pop	{r7, pc}
10045016:	46c0      	nop			@ (mov r8, r8)
10045018:	200000c0 	.word	0x200000c0

1004501c <LL_RADIO_SetTransmitCalDelayChk>:
  * @rmtoll WORD2          TRANSMITCALDELAYCHK       LL_RADIO_SetTransmitCalDelayChk
  * @param  value
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_SetTransmitCalDelayChk(uint32_t value)
{
1004501c:	b580      	push	{r7, lr}
1004501e:	b082      	sub	sp, #8
10045020:	af00      	add	r7, sp, #0
10045022:	6078      	str	r0, [r7, #4]
  MODIFY_REG_FIELD(BLUEGLOBWORD->WORD2, GLOBAL_WORD2_TRANSMITCALDELAYCHK, value);
10045024:	4b07      	ldr	r3, [pc, #28]	@ (10045044 <LL_RADIO_SetTransmitCalDelayChk+0x28>)
10045026:	689b      	ldr	r3, [r3, #8]
10045028:	22ff      	movs	r2, #255	@ 0xff
1004502a:	4393      	bics	r3, r2
1004502c:	0019      	movs	r1, r3
1004502e:	687b      	ldr	r3, [r7, #4]
10045030:	22ff      	movs	r2, #255	@ 0xff
10045032:	401a      	ands	r2, r3
10045034:	4b03      	ldr	r3, [pc, #12]	@ (10045044 <LL_RADIO_SetTransmitCalDelayChk+0x28>)
10045036:	430a      	orrs	r2, r1
10045038:	609a      	str	r2, [r3, #8]
}
1004503a:	46c0      	nop			@ (mov r8, r8)
1004503c:	46bd      	mov	sp, r7
1004503e:	b002      	add	sp, #8
10045040:	bd80      	pop	{r7, pc}
10045042:	46c0      	nop			@ (mov r8, r8)
10045044:	200000c0 	.word	0x200000c0

10045048 <LL_RADIO_SetTransmitNoCalDelayChk>:
  * @rmtoll WORD2          TRANSMITNOCALDELAYCHK       LL_RADIO_SetTransmitNoCalDelayChk
  * @param  value
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_SetTransmitNoCalDelayChk(uint32_t value)
{
10045048:	b580      	push	{r7, lr}
1004504a:	b082      	sub	sp, #8
1004504c:	af00      	add	r7, sp, #0
1004504e:	6078      	str	r0, [r7, #4]
  MODIFY_REG_FIELD(BLUEGLOBWORD->WORD2, GLOBAL_WORD2_TRANSMITNOCALDELAYCHK, value);
10045050:	4b07      	ldr	r3, [pc, #28]	@ (10045070 <LL_RADIO_SetTransmitNoCalDelayChk+0x28>)
10045052:	689b      	ldr	r3, [r3, #8]
10045054:	4a07      	ldr	r2, [pc, #28]	@ (10045074 <LL_RADIO_SetTransmitNoCalDelayChk+0x2c>)
10045056:	4013      	ands	r3, r2
10045058:	0019      	movs	r1, r3
1004505a:	687b      	ldr	r3, [r7, #4]
1004505c:	021b      	lsls	r3, r3, #8
1004505e:	041b      	lsls	r3, r3, #16
10045060:	0c1a      	lsrs	r2, r3, #16
10045062:	4b03      	ldr	r3, [pc, #12]	@ (10045070 <LL_RADIO_SetTransmitNoCalDelayChk+0x28>)
10045064:	430a      	orrs	r2, r1
10045066:	609a      	str	r2, [r3, #8]
}
10045068:	46c0      	nop			@ (mov r8, r8)
1004506a:	46bd      	mov	sp, r7
1004506c:	b002      	add	sp, #8
1004506e:	bd80      	pop	{r7, pc}
10045070:	200000c0 	.word	0x200000c0
10045074:	ffff00ff 	.word	0xffff00ff

10045078 <LL_RADIO_SetReceivedCalDelayChk>:
  * @rmtoll WORD2          RECEIVECALDELAYCHK       LL_RADIO_SetReceivedCalDelayChk
  * @param  value
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_SetReceivedCalDelayChk(uint32_t value)
{
10045078:	b580      	push	{r7, lr}
1004507a:	b082      	sub	sp, #8
1004507c:	af00      	add	r7, sp, #0
1004507e:	6078      	str	r0, [r7, #4]
  MODIFY_REG_FIELD(BLUEGLOBWORD->WORD2, GLOBAL_WORD2_RECEIVECALDELAYCHK, value);
10045080:	4b08      	ldr	r3, [pc, #32]	@ (100450a4 <LL_RADIO_SetReceivedCalDelayChk+0x2c>)
10045082:	689b      	ldr	r3, [r3, #8]
10045084:	4a08      	ldr	r2, [pc, #32]	@ (100450a8 <LL_RADIO_SetReceivedCalDelayChk+0x30>)
10045086:	4013      	ands	r3, r2
10045088:	0019      	movs	r1, r3
1004508a:	687b      	ldr	r3, [r7, #4]
1004508c:	041a      	lsls	r2, r3, #16
1004508e:	23ff      	movs	r3, #255	@ 0xff
10045090:	041b      	lsls	r3, r3, #16
10045092:	401a      	ands	r2, r3
10045094:	4b03      	ldr	r3, [pc, #12]	@ (100450a4 <LL_RADIO_SetReceivedCalDelayChk+0x2c>)
10045096:	430a      	orrs	r2, r1
10045098:	609a      	str	r2, [r3, #8]
}
1004509a:	46c0      	nop			@ (mov r8, r8)
1004509c:	46bd      	mov	sp, r7
1004509e:	b002      	add	sp, #8
100450a0:	bd80      	pop	{r7, pc}
100450a2:	46c0      	nop			@ (mov r8, r8)
100450a4:	200000c0 	.word	0x200000c0
100450a8:	ff00ffff 	.word	0xff00ffff

100450ac <LL_RADIO_SetReceivedNoCalDelayChk>:
  * @rmtoll WORD2          RECEIVENOCALDELAYCHK       LL_RADIO_SetReceivedNoCalDelayChk
  * @param  value
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_SetReceivedNoCalDelayChk(uint32_t value)
{
100450ac:	b580      	push	{r7, lr}
100450ae:	b082      	sub	sp, #8
100450b0:	af00      	add	r7, sp, #0
100450b2:	6078      	str	r0, [r7, #4]
  MODIFY_REG_FIELD(BLUEGLOBWORD->WORD2, GLOBAL_WORD2_RECEIVENOCALDELAYCHK, value);
100450b4:	4b06      	ldr	r3, [pc, #24]	@ (100450d0 <LL_RADIO_SetReceivedNoCalDelayChk+0x24>)
100450b6:	689b      	ldr	r3, [r3, #8]
100450b8:	021b      	lsls	r3, r3, #8
100450ba:	0a19      	lsrs	r1, r3, #8
100450bc:	687b      	ldr	r3, [r7, #4]
100450be:	061a      	lsls	r2, r3, #24
100450c0:	4b03      	ldr	r3, [pc, #12]	@ (100450d0 <LL_RADIO_SetReceivedNoCalDelayChk+0x24>)
100450c2:	430a      	orrs	r2, r1
100450c4:	609a      	str	r2, [r3, #8]
}
100450c6:	46c0      	nop			@ (mov r8, r8)
100450c8:	46bd      	mov	sp, r7
100450ca:	b002      	add	sp, #8
100450cc:	bd80      	pop	{r7, pc}
100450ce:	46c0      	nop			@ (mov r8, r8)
100450d0:	200000c0 	.word	0x200000c0

100450d4 <LL_RADIO_SetConfigurationEndDuration>:
  * @rmtoll WORD3          CONFIGENDDURATION       LL_RADIO_SetConfigurationEndDuration
  * @param  value
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_SetConfigurationEndDuration(uint32_t value)
{
100450d4:	b580      	push	{r7, lr}
100450d6:	b082      	sub	sp, #8
100450d8:	af00      	add	r7, sp, #0
100450da:	6078      	str	r0, [r7, #4]
  MODIFY_REG_FIELD(BLUEGLOBWORD->WORD3, GLOBAL_WORD3_CONFIGENDDURATION, value);
100450dc:	4b07      	ldr	r3, [pc, #28]	@ (100450fc <LL_RADIO_SetConfigurationEndDuration+0x28>)
100450de:	68db      	ldr	r3, [r3, #12]
100450e0:	22ff      	movs	r2, #255	@ 0xff
100450e2:	4393      	bics	r3, r2
100450e4:	0019      	movs	r1, r3
100450e6:	687b      	ldr	r3, [r7, #4]
100450e8:	22ff      	movs	r2, #255	@ 0xff
100450ea:	401a      	ands	r2, r3
100450ec:	4b03      	ldr	r3, [pc, #12]	@ (100450fc <LL_RADIO_SetConfigurationEndDuration+0x28>)
100450ee:	430a      	orrs	r2, r1
100450f0:	60da      	str	r2, [r3, #12]
}
100450f2:	46c0      	nop			@ (mov r8, r8)
100450f4:	46bd      	mov	sp, r7
100450f6:	b002      	add	sp, #8
100450f8:	bd80      	pop	{r7, pc}
100450fa:	46c0      	nop			@ (mov r8, r8)
100450fc:	200000c0 	.word	0x200000c0

10045100 <LL_RADIO_SetTxDataReadyCheck>:
  * @rmtoll WORD3          TXDATAREADYCHECK       LL_RADIO_SetTxDataReadyCheck
  * @param  value
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_SetTxDataReadyCheck(uint32_t value)
{
10045100:	b580      	push	{r7, lr}
10045102:	b082      	sub	sp, #8
10045104:	af00      	add	r7, sp, #0
10045106:	6078      	str	r0, [r7, #4]
  MODIFY_REG_FIELD(BLUEGLOBWORD->WORD3, GLOBAL_WORD3_TXDATAREADYCHECK, value);
10045108:	4b07      	ldr	r3, [pc, #28]	@ (10045128 <LL_RADIO_SetTxDataReadyCheck+0x28>)
1004510a:	68db      	ldr	r3, [r3, #12]
1004510c:	4a07      	ldr	r2, [pc, #28]	@ (1004512c <LL_RADIO_SetTxDataReadyCheck+0x2c>)
1004510e:	4013      	ands	r3, r2
10045110:	0019      	movs	r1, r3
10045112:	687b      	ldr	r3, [r7, #4]
10045114:	021b      	lsls	r3, r3, #8
10045116:	041b      	lsls	r3, r3, #16
10045118:	0c1a      	lsrs	r2, r3, #16
1004511a:	4b03      	ldr	r3, [pc, #12]	@ (10045128 <LL_RADIO_SetTxDataReadyCheck+0x28>)
1004511c:	430a      	orrs	r2, r1
1004511e:	60da      	str	r2, [r3, #12]
}
10045120:	46c0      	nop			@ (mov r8, r8)
10045122:	46bd      	mov	sp, r7
10045124:	b002      	add	sp, #8
10045126:	bd80      	pop	{r7, pc}
10045128:	200000c0 	.word	0x200000c0
1004512c:	ffff00ff 	.word	0xffff00ff

10045130 <LL_RADIO_SetTxDelayStart>:
  * @rmtoll WORD3          TXDELAYSTART       LL_RADIO_SetTxDelayStart
  * @param  value
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_SetTxDelayStart(uint32_t value)
{
10045130:	b580      	push	{r7, lr}
10045132:	b082      	sub	sp, #8
10045134:	af00      	add	r7, sp, #0
10045136:	6078      	str	r0, [r7, #4]
  MODIFY_REG_FIELD(BLUEGLOBWORD->WORD3, GLOBAL_WORD3_TXDELAYSTART, value);
10045138:	4b08      	ldr	r3, [pc, #32]	@ (1004515c <LL_RADIO_SetTxDelayStart+0x2c>)
1004513a:	68db      	ldr	r3, [r3, #12]
1004513c:	4a08      	ldr	r2, [pc, #32]	@ (10045160 <LL_RADIO_SetTxDelayStart+0x30>)
1004513e:	4013      	ands	r3, r2
10045140:	0019      	movs	r1, r3
10045142:	687b      	ldr	r3, [r7, #4]
10045144:	041a      	lsls	r2, r3, #16
10045146:	23ff      	movs	r3, #255	@ 0xff
10045148:	041b      	lsls	r3, r3, #16
1004514a:	401a      	ands	r2, r3
1004514c:	4b03      	ldr	r3, [pc, #12]	@ (1004515c <LL_RADIO_SetTxDelayStart+0x2c>)
1004514e:	430a      	orrs	r2, r1
10045150:	60da      	str	r2, [r3, #12]
}
10045152:	46c0      	nop			@ (mov r8, r8)
10045154:	46bd      	mov	sp, r7
10045156:	b002      	add	sp, #8
10045158:	bd80      	pop	{r7, pc}
1004515a:	46c0      	nop			@ (mov r8, r8)
1004515c:	200000c0 	.word	0x200000c0
10045160:	ff00ffff 	.word	0xff00ffff

10045164 <LL_RADIO_SetTxDelayEnd>:
  * @rmtoll WORD3          TXDELAYEND       LL_RADIO_SetTxDelayEnd
  * @param  value
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_SetTxDelayEnd(uint32_t value)
{
10045164:	b580      	push	{r7, lr}
10045166:	b082      	sub	sp, #8
10045168:	af00      	add	r7, sp, #0
1004516a:	6078      	str	r0, [r7, #4]
  MODIFY_REG_FIELD(BLUEGLOBWORD->WORD3, GLOBAL_WORD3_TXDELAYEND, value);
1004516c:	4b08      	ldr	r3, [pc, #32]	@ (10045190 <LL_RADIO_SetTxDelayEnd+0x2c>)
1004516e:	68db      	ldr	r3, [r3, #12]
10045170:	4a08      	ldr	r2, [pc, #32]	@ (10045194 <LL_RADIO_SetTxDelayEnd+0x30>)
10045172:	4013      	ands	r3, r2
10045174:	0019      	movs	r1, r3
10045176:	687b      	ldr	r3, [r7, #4]
10045178:	061a      	lsls	r2, r3, #24
1004517a:	23fc      	movs	r3, #252	@ 0xfc
1004517c:	059b      	lsls	r3, r3, #22
1004517e:	401a      	ands	r2, r3
10045180:	4b03      	ldr	r3, [pc, #12]	@ (10045190 <LL_RADIO_SetTxDelayEnd+0x2c>)
10045182:	430a      	orrs	r2, r1
10045184:	60da      	str	r2, [r3, #12]
}
10045186:	46c0      	nop			@ (mov r8, r8)
10045188:	46bd      	mov	sp, r7
1004518a:	b002      	add	sp, #8
1004518c:	bd80      	pop	{r7, pc}
1004518e:	46c0      	nop			@ (mov r8, r8)
10045190:	200000c0 	.word	0x200000c0
10045194:	c0ffffff 	.word	0xc0ffffff

10045198 <LL_RADIO_SetTransmissionReadyTimeout>:
  * @rmtoll WORD4          TXREADYTIMEOUT       LL_RADIO_SetTransmissionReadyTimeout
  * @param  value
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_SetTransmissionReadyTimeout(uint32_t value)
{
10045198:	b580      	push	{r7, lr}
1004519a:	b082      	sub	sp, #8
1004519c:	af00      	add	r7, sp, #0
1004519e:	6078      	str	r0, [r7, #4]
  MODIFY_REG_FIELD(BLUEGLOBWORD->WORD4, GLOBAL_WORD4_TXREADYTIMEOUT, value);
100451a0:	4b07      	ldr	r3, [pc, #28]	@ (100451c0 <LL_RADIO_SetTransmissionReadyTimeout+0x28>)
100451a2:	691b      	ldr	r3, [r3, #16]
100451a4:	22ff      	movs	r2, #255	@ 0xff
100451a6:	4393      	bics	r3, r2
100451a8:	0019      	movs	r1, r3
100451aa:	687b      	ldr	r3, [r7, #4]
100451ac:	22ff      	movs	r2, #255	@ 0xff
100451ae:	401a      	ands	r2, r3
100451b0:	4b03      	ldr	r3, [pc, #12]	@ (100451c0 <LL_RADIO_SetTransmissionReadyTimeout+0x28>)
100451b2:	430a      	orrs	r2, r1
100451b4:	611a      	str	r2, [r3, #16]
}
100451b6:	46c0      	nop			@ (mov r8, r8)
100451b8:	46bd      	mov	sp, r7
100451ba:	b002      	add	sp, #8
100451bc:	bd80      	pop	{r7, pc}
100451be:	46c0      	nop			@ (mov r8, r8)
100451c0:	200000c0 	.word	0x200000c0

100451c4 <LL_RADIO_ChkFlagAutoclearEnable_Enable>:
  * @brief  RADIO Enable
  * @rmtoll WORD5          CHKFLAGAUTOCLEARENA            LL_RADIO_ChkFlagAutoclearEnable_Enable
  * @retval uint32_t
  */
__STATIC_INLINE void LL_RADIO_ChkFlagAutoclearEnable_Enable(void)
{
100451c4:	b580      	push	{r7, lr}
100451c6:	af00      	add	r7, sp, #0
  SET_BIT(BLUEGLOBWORD->WORD5, GLOBAL_WORD5_CHKFLAGAUTOCLEARENA);
100451c8:	4b04      	ldr	r3, [pc, #16]	@ (100451dc <LL_RADIO_ChkFlagAutoclearEnable_Enable+0x18>)
100451ca:	695a      	ldr	r2, [r3, #20]
100451cc:	4b03      	ldr	r3, [pc, #12]	@ (100451dc <LL_RADIO_ChkFlagAutoclearEnable_Enable+0x18>)
100451ce:	2104      	movs	r1, #4
100451d0:	430a      	orrs	r2, r1
100451d2:	615a      	str	r2, [r3, #20]
}
100451d4:	46c0      	nop			@ (mov r8, r8)
100451d6:	46bd      	mov	sp, r7
100451d8:	bd80      	pop	{r7, pc}
100451da:	46c0      	nop			@ (mov r8, r8)
100451dc:	200000c0 	.word	0x200000c0

100451e0 <LL_RADIO_NoActiveLErrorInterrupt_Enable>:
  * @brief  Indicate if INTNOACTIVELERROR is enabled
  * @rmtoll WORD5          INTNOACTIVELERROR            LL_RADIO_NoActiveLErrorInterrupt_Enable
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE void LL_RADIO_NoActiveLErrorInterrupt_Enable(void)
{
100451e0:	b580      	push	{r7, lr}
100451e2:	af00      	add	r7, sp, #0
  SET_BIT(BLUEGLOBWORD->WORD5, GLOBAL_WORD5_INTNOACTIVELERROR);
100451e4:	4b04      	ldr	r3, [pc, #16]	@ (100451f8 <LL_RADIO_NoActiveLErrorInterrupt_Enable+0x18>)
100451e6:	695a      	ldr	r2, [r3, #20]
100451e8:	4b03      	ldr	r3, [pc, #12]	@ (100451f8 <LL_RADIO_NoActiveLErrorInterrupt_Enable+0x18>)
100451ea:	2180      	movs	r1, #128	@ 0x80
100451ec:	0409      	lsls	r1, r1, #16
100451ee:	430a      	orrs	r2, r1
100451f0:	615a      	str	r2, [r3, #20]
}
100451f2:	46c0      	nop			@ (mov r8, r8)
100451f4:	46bd      	mov	sp, r7
100451f6:	bd80      	pop	{r7, pc}
100451f8:	200000c0 	.word	0x200000c0

100451fc <LL_RADIO_TxRxSkipInterrupt_Enable>:
  * @brief  RADIO Enable
  * @rmtoll WORD5          INTTXRXSKIP            LL_RADIO_TxRxSkipInterrupt_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_TxRxSkipInterrupt_Enable(void)
{
100451fc:	b580      	push	{r7, lr}
100451fe:	af00      	add	r7, sp, #0
  SET_BIT(BLUEGLOBWORD->WORD5, GLOBAL_WORD5_INTTXRXSKIP);
10045200:	4b04      	ldr	r3, [pc, #16]	@ (10045214 <LL_RADIO_TxRxSkipInterrupt_Enable+0x18>)
10045202:	695a      	ldr	r2, [r3, #20]
10045204:	4b03      	ldr	r3, [pc, #12]	@ (10045214 <LL_RADIO_TxRxSkipInterrupt_Enable+0x18>)
10045206:	2180      	movs	r1, #128	@ 0x80
10045208:	0589      	lsls	r1, r1, #22
1004520a:	430a      	orrs	r2, r1
1004520c:	615a      	str	r2, [r3, #20]
}
1004520e:	46c0      	nop			@ (mov r8, r8)
10045210:	46bd      	mov	sp, r7
10045212:	bd80      	pop	{r7, pc}
10045214:	200000c0 	.word	0x200000c0

10045218 <LL_RADIO_Active2ErrorInterrupt_Enable>:
  * @brief  RADIO Enable
  * @rmtoll WORD5          INTACTIVE2ERR            LL_RADIO_Active2ErrorInterrupt_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_Active2ErrorInterrupt_Enable(void)
{
10045218:	b580      	push	{r7, lr}
1004521a:	af00      	add	r7, sp, #0
  SET_BIT(BLUEGLOBWORD->WORD5, GLOBAL_WORD5_INTACTIVE2ERR);
1004521c:	4b04      	ldr	r3, [pc, #16]	@ (10045230 <LL_RADIO_Active2ErrorInterrupt_Enable+0x18>)
1004521e:	695a      	ldr	r2, [r3, #20]
10045220:	4b03      	ldr	r3, [pc, #12]	@ (10045230 <LL_RADIO_Active2ErrorInterrupt_Enable+0x18>)
10045222:	2180      	movs	r1, #128	@ 0x80
10045224:	05c9      	lsls	r1, r1, #23
10045226:	430a      	orrs	r2, r1
10045228:	615a      	str	r2, [r3, #20]
}
1004522a:	46c0      	nop			@ (mov r8, r8)
1004522c:	46bd      	mov	sp, r7
1004522e:	bd80      	pop	{r7, pc}
10045230:	200000c0 	.word	0x200000c0

10045234 <LL_RADIO_TIMER_DisableTimer1>:
{
10045234:	b580      	push	{r7, lr}
10045236:	b082      	sub	sp, #8
10045238:	af00      	add	r7, sp, #0
1004523a:	6078      	str	r0, [r7, #4]
  MODIFY_REG_FIELD(BLUEx->TIMEOUTDESTREG, BLUE_TIMEOUTDESTREG_DESTINATION, 0);
1004523c:	687b      	ldr	r3, [r7, #4]
1004523e:	68db      	ldr	r3, [r3, #12]
10045240:	2203      	movs	r2, #3
10045242:	4393      	bics	r3, r2
10045244:	001a      	movs	r2, r3
10045246:	687b      	ldr	r3, [r7, #4]
10045248:	60da      	str	r2, [r3, #12]
}
1004524a:	46c0      	nop			@ (mov r8, r8)
1004524c:	46bd      	mov	sp, r7
1004524e:	b002      	add	sp, #8
10045250:	bd80      	pop	{r7, pc}

10045252 <LL_RADIO_TIMER_DisableTimer2>:
{
10045252:	b580      	push	{r7, lr}
10045254:	b082      	sub	sp, #8
10045256:	af00      	add	r7, sp, #0
10045258:	6078      	str	r0, [r7, #4]
  MODIFY_REG_FIELD(BLUEx->TIMEOUTDESTREG, BLUE_TIMEOUTDESTREG_DESTINATION, 0);
1004525a:	687b      	ldr	r3, [r7, #4]
1004525c:	68db      	ldr	r3, [r3, #12]
1004525e:	2203      	movs	r2, #3
10045260:	4393      	bics	r3, r2
10045262:	001a      	movs	r2, r3
10045264:	687b      	ldr	r3, [r7, #4]
10045266:	60da      	str	r2, [r3, #12]
}
10045268:	46c0      	nop			@ (mov r8, r8)
1004526a:	46bd      	mov	sp, r7
1004526c:	b002      	add	sp, #8
1004526e:	bd80      	pop	{r7, pc}

10045270 <LL_RADIO_TIMER_DisableBLEWakeupTimer>:
{
10045270:	b580      	push	{r7, lr}
10045272:	b082      	sub	sp, #8
10045274:	af00      	add	r7, sp, #0
10045276:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(WAKEUPx->BLUE_SLEEP_REQUEST_MODE, WAKEUP_BLUE_SLEEP_REQUEST_MODE_BLE_WAKEUP_EN);
10045278:	687b      	ldr	r3, [r7, #4]
1004527a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
1004527c:	4a03      	ldr	r2, [pc, #12]	@ (1004528c <LL_RADIO_TIMER_DisableBLEWakeupTimer+0x1c>)
1004527e:	401a      	ands	r2, r3
10045280:	687b      	ldr	r3, [r7, #4]
10045282:	629a      	str	r2, [r3, #40]	@ 0x28
}
10045284:	46c0      	nop			@ (mov r8, r8)
10045286:	46bd      	mov	sp, r7
10045288:	b002      	add	sp, #8
1004528a:	bd80      	pop	{r7, pc}
1004528c:	bfffffff 	.word	0xbfffffff

10045290 <CondRoutineTrue>:
  */

#if USE_RADIO_PROPRIETARY_DRIVER

static uint8_t CondRoutineTrue(ActionPacket *p)
{
10045290:	b580      	push	{r7, lr}
10045292:	b082      	sub	sp, #8
10045294:	af00      	add	r7, sp, #0
10045296:	6078      	str	r0, [r7, #4]
  return TRUE;
10045298:	2301      	movs	r3, #1
}
1004529a:	0018      	movs	r0, r3
1004529c:	46bd      	mov	sp, r7
1004529e:	b002      	add	sp, #8
100452a0:	bd80      	pop	{r7, pc}

100452a2 <DataRoutineNull>:

static uint8_t DataRoutineNull(ActionPacket *current_action_packet, ActionPacket *next)
{
100452a2:	b580      	push	{r7, lr}
100452a4:	b082      	sub	sp, #8
100452a6:	af00      	add	r7, sp, #0
100452a8:	6078      	str	r0, [r7, #4]
100452aa:	6039      	str	r1, [r7, #0]
  return TRUE;
100452ac:	2301      	movs	r3, #1
}
100452ae:	0018      	movs	r0, r3
100452b0:	46bd      	mov	sp, r7
100452b2:	b002      	add	sp, #8
100452b4:	bd80      	pop	{r7, pc}
	...

100452b8 <HAL_RADIO_Init>:
/**
  * @brief  Initializes the radio.
  * @retval None
  */
void HAL_RADIO_Init(RADIO_HandleTypeDef *hradio)
{
100452b8:	b590      	push	{r4, r7, lr}
100452ba:	b08d      	sub	sp, #52	@ 0x34
100452bc:	af00      	add	r7, sp, #0
100452be:	6078      	str	r0, [r7, #4]
  uint32_t mr_ble_iptat;
  uint32_t mr_ble_vbg;
  uint32_t mr_ble_rxadc_delay_i;
  uint32_t mr_ble_rxadc_delay_q;
  uint8_t mr_ble_rxadc_delay_flag;
  uint8_t *hot_table_radio_config = (uint8_t *)&hot_table_radio_config_u32[4];
100452c0:	4b14      	ldr	r3, [pc, #80]	@ (10045314 <HAL_RADIO_Init+0x5c>)
100452c2:	617b      	str	r3, [r7, #20]
  uint8_t index;

  /* Retrieve Trimming values from engineering flash locations */
  if (*(volatile uint32_t *)VALIDITY_LOCATION == VALIDITY_TAG)
100452c4:	4b14      	ldr	r3, [pc, #80]	@ (10045318 <HAL_RADIO_Init+0x60>)
100452c6:	681b      	ldr	r3, [r3, #0]
100452c8:	4a14      	ldr	r2, [pc, #80]	@ (1004531c <HAL_RADIO_Init+0x64>)
100452ca:	4293      	cmp	r3, r2
100452cc:	d12a      	bne.n	10045324 <HAL_RADIO_Init+0x6c>
  {
    mr_ble_ibias            = ((*(volatile uint32_t *)MR_TRIMMING_LOCATION) & MR_BLE_IBIAS_TRIM_Msk) >> MR_BLE_IBIAS_TRIM_Pos;
100452ce:	4b14      	ldr	r3, [pc, #80]	@ (10045320 <HAL_RADIO_Init+0x68>)
100452d0:	681b      	ldr	r3, [r3, #0]
100452d2:	0a1b      	lsrs	r3, r3, #8
100452d4:	220f      	movs	r2, #15
100452d6:	4013      	ands	r3, r2
100452d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    mr_ble_iptat            = ((*(volatile uint32_t *)MR_TRIMMING_LOCATION) & MR_BLE_IPTAT_TRIM_Msk) >> MR_BLE_IPTAT_TRIM_Pos;
100452da:	4b11      	ldr	r3, [pc, #68]	@ (10045320 <HAL_RADIO_Init+0x68>)
100452dc:	681b      	ldr	r3, [r3, #0]
100452de:	0b1b      	lsrs	r3, r3, #12
100452e0:	220f      	movs	r2, #15
100452e2:	4013      	ands	r3, r2
100452e4:	62bb      	str	r3, [r7, #40]	@ 0x28
    mr_ble_vbg              = ((*(volatile uint32_t *)MR_TRIMMING_LOCATION) & MR_BLE_VBG_TRIM_Msk) >> MR_BLE_VBG_TRIM_Pos;
100452e6:	4b0e      	ldr	r3, [pc, #56]	@ (10045320 <HAL_RADIO_Init+0x68>)
100452e8:	681b      	ldr	r3, [r3, #0]
100452ea:	0c1b      	lsrs	r3, r3, #16
100452ec:	220f      	movs	r2, #15
100452ee:	4013      	ands	r3, r2
100452f0:	627b      	str	r3, [r7, #36]	@ 0x24
    mr_ble_rxadc_delay_i    = ((*(volatile uint32_t *)MR_TRIMMING_LOCATION) & MR_BLE_RXADC_DELAY_I_TRIM_Msk) >> MR_BLE_RXADC_DELAY_I_TRIM_Pos;
100452f2:	4b0b      	ldr	r3, [pc, #44]	@ (10045320 <HAL_RADIO_Init+0x68>)
100452f4:	681b      	ldr	r3, [r3, #0]
100452f6:	0d1b      	lsrs	r3, r3, #20
100452f8:	2207      	movs	r2, #7
100452fa:	4013      	ands	r3, r2
100452fc:	623b      	str	r3, [r7, #32]
    mr_ble_rxadc_delay_q    = ((*(volatile uint32_t *)MR_TRIMMING_LOCATION) & MR_BLE_RXADC_DELAY_Q_TRIM_Msk) >> MR_BLE_RXADC_DELAY_Q_TRIM_Pos;
100452fe:	4b08      	ldr	r3, [pc, #32]	@ (10045320 <HAL_RADIO_Init+0x68>)
10045300:	681b      	ldr	r3, [r3, #0]
10045302:	0e1b      	lsrs	r3, r3, #24
10045304:	2207      	movs	r2, #7
10045306:	4013      	ands	r3, r2
10045308:	61fb      	str	r3, [r7, #28]
    mr_ble_rxadc_delay_flag = TRUE;
1004530a:	231b      	movs	r3, #27
1004530c:	18fb      	adds	r3, r7, r3
1004530e:	2201      	movs	r2, #1
10045310:	701a      	strb	r2, [r3, #0]
10045312:	e011      	b.n	10045338 <HAL_RADIO_Init+0x80>
10045314:	200008e4 	.word	0x200008e4
10045318:	10001ef8 	.word	0x10001ef8
1004531c:	fcbceccc 	.word	0xfcbceccc
10045320:	10001ee8 	.word	0x10001ee8
  }
  else
  {
    mr_ble_ibias = 0x08;
10045324:	2308      	movs	r3, #8
10045326:	62fb      	str	r3, [r7, #44]	@ 0x2c
    mr_ble_iptat = 0x07;
10045328:	2307      	movs	r3, #7
1004532a:	62bb      	str	r3, [r7, #40]	@ 0x28
    mr_ble_vbg   = 0x08;
1004532c:	2308      	movs	r3, #8
1004532e:	627b      	str	r3, [r7, #36]	@ 0x24
    mr_ble_rxadc_delay_flag = FALSE;
10045330:	231b      	movs	r3, #27
10045332:	18fb      	adds	r3, r7, r3
10045334:	2200      	movs	r2, #0
10045336:	701a      	strb	r2, [r3, #0]
    mr_ble_rxadc_delay_q    = 3;
    mr_ble_rxadc_delay_flag = TRUE;
#endif /* STM32WB05 or STM32WB09 */
  }

  BLUEGLOB->BYTE4 = BLUE_IDLE_0;
10045338:	4bfc      	ldr	r3, [pc, #1008]	@ (1004572c <HAL_RADIO_Init+0x474>)
1004533a:	2200      	movs	r2, #0
1004533c:	711a      	strb	r2, [r3, #4]
  if (hradio != NULL)
1004533e:	687b      	ldr	r3, [r7, #4]
10045340:	2b00      	cmp	r3, #0
10045342:	d003      	beq.n	1004534c <HAL_RADIO_Init+0x94>
  {
    HAL_RADIO_MspInit(hradio);
10045344:	687b      	ldr	r3, [r7, #4]
10045346:	0018      	movs	r0, r3
10045348:	f7fd ff44 	bl	100431d4 <HAL_RADIO_MspInit>
  }
  LL_RADIO_TIMER_DisableTimer1(BLUE);
1004534c:	23c0      	movs	r3, #192	@ 0xc0
1004534e:	05db      	lsls	r3, r3, #23
10045350:	0018      	movs	r0, r3
10045352:	f7ff ff6f 	bl	10045234 <LL_RADIO_TIMER_DisableTimer1>
  LL_RADIO_TIMER_DisableTimer2(BLUE);
10045356:	23c0      	movs	r3, #192	@ 0xc0
10045358:	05db      	lsls	r3, r3, #23
1004535a:	0018      	movs	r0, r3
1004535c:	f7ff ff79 	bl	10045252 <LL_RADIO_TIMER_DisableTimer2>
  LL_RADIO_TIMER_DisableBLEWakeupTimer(WAKEUP);
10045360:	4bf3      	ldr	r3, [pc, #972]	@ (10045730 <HAL_RADIO_Init+0x478>)
10045362:	0018      	movs	r0, r3
10045364:	f7ff ff84 	bl	10045270 <LL_RADIO_TIMER_DisableBLEWakeupTimer>

  /* Write Radio Trimming values in the registers: Cbias' VBG, Cbias' IPTAT, Cbias' IBIAS, RxAnaUsr Delay Trim I & Q */
  MODIFY_REG_FIELD(RRM->CBIAS1_ANA_ENG, RRM_CBIAS1_ANA_ENG_RFD_CBIAS_VBG_TRIM, mr_ble_vbg);
10045368:	4af2      	ldr	r2, [pc, #968]	@ (10045734 <HAL_RADIO_Init+0x47c>)
1004536a:	239e      	movs	r3, #158	@ 0x9e
1004536c:	009b      	lsls	r3, r3, #2
1004536e:	58d3      	ldr	r3, [r2, r3]
10045370:	220f      	movs	r2, #15
10045372:	4393      	bics	r3, r2
10045374:	001a      	movs	r2, r3
10045376:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10045378:	210f      	movs	r1, #15
1004537a:	400b      	ands	r3, r1
1004537c:	49ed      	ldr	r1, [pc, #948]	@ (10045734 <HAL_RADIO_Init+0x47c>)
1004537e:	431a      	orrs	r2, r3
10045380:	239e      	movs	r3, #158	@ 0x9e
10045382:	009b      	lsls	r3, r3, #2
10045384:	50ca      	str	r2, [r1, r3]
  MODIFY_REG_FIELD(RRM->CBIAS0_ANA_ENG, RRM_CBIAS0_ANA_ENG_RFD_CBIAS_IPTAT_TRIM, mr_ble_iptat);
10045386:	4aeb      	ldr	r2, [pc, #940]	@ (10045734 <HAL_RADIO_Init+0x47c>)
10045388:	239d      	movs	r3, #157	@ 0x9d
1004538a:	009b      	lsls	r3, r3, #2
1004538c:	58d3      	ldr	r3, [r2, r3]
1004538e:	22f0      	movs	r2, #240	@ 0xf0
10045390:	4393      	bics	r3, r2
10045392:	001a      	movs	r2, r3
10045394:	6abb      	ldr	r3, [r7, #40]	@ 0x28
10045396:	011b      	lsls	r3, r3, #4
10045398:	21ff      	movs	r1, #255	@ 0xff
1004539a:	400b      	ands	r3, r1
1004539c:	49e5      	ldr	r1, [pc, #916]	@ (10045734 <HAL_RADIO_Init+0x47c>)
1004539e:	431a      	orrs	r2, r3
100453a0:	239d      	movs	r3, #157	@ 0x9d
100453a2:	009b      	lsls	r3, r3, #2
100453a4:	50ca      	str	r2, [r1, r3]
  MODIFY_REG_FIELD(RRM->CBIAS0_ANA_ENG, RRM_CBIAS0_ANA_ENG_RFD_CBIAS_IBIAS_TRIM, mr_ble_ibias);
100453a6:	4ae3      	ldr	r2, [pc, #908]	@ (10045734 <HAL_RADIO_Init+0x47c>)
100453a8:	239d      	movs	r3, #157	@ 0x9d
100453aa:	009b      	lsls	r3, r3, #2
100453ac:	58d3      	ldr	r3, [r2, r3]
100453ae:	220f      	movs	r2, #15
100453b0:	4393      	bics	r3, r2
100453b2:	001a      	movs	r2, r3
100453b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
100453b6:	210f      	movs	r1, #15
100453b8:	400b      	ands	r3, r1
100453ba:	49de      	ldr	r1, [pc, #888]	@ (10045734 <HAL_RADIO_Init+0x47c>)
100453bc:	431a      	orrs	r2, r3
100453be:	239d      	movs	r3, #157	@ 0x9d
100453c0:	009b      	lsls	r3, r3, #2
100453c2:	50ca      	str	r2, [r1, r3]
  if (mr_ble_rxadc_delay_flag)
100453c4:	231b      	movs	r3, #27
100453c6:	18fb      	adds	r3, r7, r3
100453c8:	781b      	ldrb	r3, [r3, #0]
100453ca:	2b00      	cmp	r3, #0
100453cc:	d01e      	beq.n	1004540c <HAL_RADIO_Init+0x154>
  {
    MODIFY_REG_FIELD(RRM->RXADC_ANA_USR, RRM_RXADC_ANA_USR_RFD_RXADC_DELAYTRIM_I, mr_ble_rxadc_delay_i);
100453ce:	4ad9      	ldr	r2, [pc, #868]	@ (10045734 <HAL_RADIO_Init+0x47c>)
100453d0:	2392      	movs	r3, #146	@ 0x92
100453d2:	009b      	lsls	r3, r3, #2
100453d4:	58d3      	ldr	r3, [r2, r3]
100453d6:	2207      	movs	r2, #7
100453d8:	4393      	bics	r3, r2
100453da:	001a      	movs	r2, r3
100453dc:	6a3b      	ldr	r3, [r7, #32]
100453de:	2107      	movs	r1, #7
100453e0:	400b      	ands	r3, r1
100453e2:	49d4      	ldr	r1, [pc, #848]	@ (10045734 <HAL_RADIO_Init+0x47c>)
100453e4:	431a      	orrs	r2, r3
100453e6:	2392      	movs	r3, #146	@ 0x92
100453e8:	009b      	lsls	r3, r3, #2
100453ea:	50ca      	str	r2, [r1, r3]
    MODIFY_REG_FIELD(RRM->RXADC_ANA_USR, RRM_RXADC_ANA_USR_RFD_RXADC_DELAYTRIM_Q, mr_ble_rxadc_delay_q);
100453ec:	4ad1      	ldr	r2, [pc, #836]	@ (10045734 <HAL_RADIO_Init+0x47c>)
100453ee:	2392      	movs	r3, #146	@ 0x92
100453f0:	009b      	lsls	r3, r3, #2
100453f2:	58d3      	ldr	r3, [r2, r3]
100453f4:	2238      	movs	r2, #56	@ 0x38
100453f6:	4393      	bics	r3, r2
100453f8:	001a      	movs	r2, r3
100453fa:	69fb      	ldr	r3, [r7, #28]
100453fc:	00db      	lsls	r3, r3, #3
100453fe:	2138      	movs	r1, #56	@ 0x38
10045400:	400b      	ands	r3, r1
10045402:	49cc      	ldr	r1, [pc, #816]	@ (10045734 <HAL_RADIO_Init+0x47c>)
10045404:	431a      	orrs	r2, r3
10045406:	2392      	movs	r3, #146	@ 0x92
10045408:	009b      	lsls	r3, r3, #2
1004540a:	50ca      	str	r2, [r1, r3]
  }

  /* Radio AFC configuration */
  MODIFY_REG(RRM->AFC1_DIG_ENG, RRM_AFC1_DIG_ENG_AFC_DELAY_AFTER | RRM_AFC1_DIG_ENG_AFC_DELAY_BEFORE,
1004540c:	4ac9      	ldr	r2, [pc, #804]	@ (10045734 <HAL_RADIO_Init+0x47c>)
1004540e:	23a4      	movs	r3, #164	@ 0xa4
10045410:	005b      	lsls	r3, r3, #1
10045412:	58d3      	ldr	r3, [r2, r3]
10045414:	22ff      	movs	r2, #255	@ 0xff
10045416:	4393      	bics	r3, r2
10045418:	49c6      	ldr	r1, [pc, #792]	@ (10045734 <HAL_RADIO_Init+0x47c>)
1004541a:	2255      	movs	r2, #85	@ 0x55
1004541c:	431a      	orrs	r2, r3
1004541e:	23a4      	movs	r3, #164	@ 0xa4
10045420:	005b      	lsls	r3, r3, #1
10045422:	50ca      	str	r2, [r1, r3]
             ((AFC_DELAY_BEFORE << RRM_AFC1_DIG_ENG_AFC_DELAY_BEFORE_Pos) & RRM_AFC1_DIG_ENG_AFC_DELAY_BEFORE_Msk) |
             ((AFC_DELAY_AFTER << RRM_AFC1_DIG_ENG_AFC_DELAY_AFTER_Pos) & RRM_AFC1_DIG_ENG_AFC_DELAY_AFTER_Msk));
  MODIFY_REG(RRM->CR0_DIG_ENG, RRM_CR0_DIG_ENG_CR_GAIN_BEFORE | RRM_CR0_DIG_ENG_CR_GAIN_AFTER,
10045424:	4ac3      	ldr	r2, [pc, #780]	@ (10045734 <HAL_RADIO_Init+0x47c>)
10045426:	23aa      	movs	r3, #170	@ 0xaa
10045428:	005b      	lsls	r3, r3, #1
1004542a:	58d3      	ldr	r3, [r2, r3]
1004542c:	22ff      	movs	r2, #255	@ 0xff
1004542e:	4393      	bics	r3, r2
10045430:	49c0      	ldr	r1, [pc, #768]	@ (10045734 <HAL_RADIO_Init+0x47c>)
10045432:	2266      	movs	r2, #102	@ 0x66
10045434:	431a      	orrs	r2, r3
10045436:	23aa      	movs	r3, #170	@ 0xaa
10045438:	005b      	lsls	r3, r3, #1
1004543a:	50ca      	str	r2, [r1, r3]
             ((CR_GAIN_BEFORE << RRM_CR0_DIG_ENG_CR_GAIN_BEFORE_Pos) & RRM_CR0_DIG_ENG_CR_GAIN_BEFORE_Msk) |
             ((CR_GAIN_AFTER << RRM_CR0_DIG_ENG_CR_GAIN_AFTER_Pos) & RRM_CR0_DIG_ENG_CR_GAIN_AFTER_Msk));
  MODIFY_REG(RRM->CR0_LR, RRM_CR0_LR_CR_LR_GAIN_BEFORE | RRM_CR0_LR_CR_LR_GAIN_AFTER,
1004543c:	4abd      	ldr	r2, [pc, #756]	@ (10045734 <HAL_RADIO_Init+0x47c>)
1004543e:	23b4      	movs	r3, #180	@ 0xb4
10045440:	005b      	lsls	r3, r3, #1
10045442:	58d3      	ldr	r3, [r2, r3]
10045444:	22ff      	movs	r2, #255	@ 0xff
10045446:	4393      	bics	r3, r2
10045448:	49ba      	ldr	r1, [pc, #744]	@ (10045734 <HAL_RADIO_Init+0x47c>)
1004544a:	2255      	movs	r2, #85	@ 0x55
1004544c:	431a      	orrs	r2, r3
1004544e:	23b4      	movs	r3, #180	@ 0xb4
10045450:	005b      	lsls	r3, r3, #1
10045452:	50ca      	str	r2, [r1, r3]
             ((CR_LR_GAIN_BEFORE << RRM_CR0_LR_CR_LR_GAIN_BEFORE_Pos) & RRM_CR0_LR_CR_LR_GAIN_BEFORE_Msk) |
             ((CR_LR_GAIN_AFTER << RRM_CR0_LR_CR_LR_GAIN_AFTER_Pos) & RRM_CR0_LR_CR_LR_GAIN_AFTER_Msk));

  /* Radio RSSI Threshold configuration */
  MODIFY_REG_FIELD(RRM->LR_RSSI_THR_DIG_ENG, RRM_LR_RSSI_THR_DIG_ENG_LR_RSSI_THR, LR_RSSI_THR);
10045454:	4ab7      	ldr	r2, [pc, #732]	@ (10045734 <HAL_RADIO_Init+0x47c>)
10045456:	23c4      	movs	r3, #196	@ 0xc4
10045458:	005b      	lsls	r3, r3, #1
1004545a:	58d3      	ldr	r3, [r2, r3]
1004545c:	22ff      	movs	r2, #255	@ 0xff
1004545e:	4393      	bics	r3, r2
10045460:	49b4      	ldr	r1, [pc, #720]	@ (10045734 <HAL_RADIO_Init+0x47c>)
10045462:	221d      	movs	r2, #29
10045464:	431a      	orrs	r2, r3
10045466:	23c4      	movs	r3, #196	@ 0xc4
10045468:	005b      	lsls	r3, r3, #1
1004546a:	50ca      	str	r2, [r1, r3]
  MODIFY_REG_FIELD(RRM->LR_PD_THR_DIG_ENG, RRM_LR_PD_THR_DIG_ENG_LR_PD_THR, LR_PD_THR);
1004546c:	4ab1      	ldr	r2, [pc, #708]	@ (10045734 <HAL_RADIO_Init+0x47c>)
1004546e:	23c2      	movs	r3, #194	@ 0xc2
10045470:	005b      	lsls	r3, r3, #1
10045472:	58d3      	ldr	r3, [r2, r3]
10045474:	22ff      	movs	r2, #255	@ 0xff
10045476:	4393      	bics	r3, r2
10045478:	49ae      	ldr	r1, [pc, #696]	@ (10045734 <HAL_RADIO_Init+0x47c>)
1004547a:	2259      	movs	r2, #89	@ 0x59
1004547c:	431a      	orrs	r2, r3
1004547e:	23c2      	movs	r3, #194	@ 0xc2
10045480:	005b      	lsls	r3, r3, #1
10045482:	50ca      	str	r2, [r1, r3]
  MODIFY_REG_FIELD(RRM->LR_AAC_THR_DIG_ENG, RRM_LR_AAC_THR_DIG_ENG_LR_AAC_THR, LR_AAC_THR);
10045484:	4aab      	ldr	r2, [pc, #684]	@ (10045734 <HAL_RADIO_Init+0x47c>)
10045486:	23c6      	movs	r3, #198	@ 0xc6
10045488:	005b      	lsls	r3, r3, #1
1004548a:	58d3      	ldr	r3, [r2, r3]
1004548c:	22ff      	movs	r2, #255	@ 0xff
1004548e:	4393      	bics	r3, r2
10045490:	49a8      	ldr	r1, [pc, #672]	@ (10045734 <HAL_RADIO_Init+0x47c>)
10045492:	2232      	movs	r2, #50	@ 0x32
10045494:	431a      	orrs	r2, r3
10045496:	23c6      	movs	r3, #198	@ 0xc6
10045498:	005b      	lsls	r3, r3, #1
1004549a:	50ca      	str	r2, [r1, r3]

  /* Enable Viterbi */
  SET_BIT(RRM->VIT_CONF_DIG_ENG, RRM_VIT_CONF_DIG_ENG_VIT_CONF_0);
1004549c:	4aa5      	ldr	r2, [pc, #660]	@ (10045734 <HAL_RADIO_Init+0x47c>)
1004549e:	23b6      	movs	r3, #182	@ 0xb6
100454a0:	005b      	lsls	r3, r3, #1
100454a2:	58d3      	ldr	r3, [r2, r3]
100454a4:	49a3      	ldr	r1, [pc, #652]	@ (10045734 <HAL_RADIO_Init+0x47c>)
100454a6:	2201      	movs	r2, #1
100454a8:	431a      	orrs	r2, r3
100454aa:	23b6      	movs	r3, #182	@ 0xb6
100454ac:	005b      	lsls	r3, r3, #1
100454ae:	50ca      	str	r2, [r1, r3]
  MODIFY_REG_FIELD(RRM->ANTSW_DIG0_USR, RRM_ANTSW0_DIG_USR_RX_TIME_TO_SAMPLE, RX_TIME_TO_SAMPLE);
  MODIFY_REG_FIELD(RRM->ANTSW_DIG1_USR, RRM_ANTSW1_DIG_USR_RX_TIME_TO_SWITCH, RX_TIME_TO_SWITCH);
#endif /* STM32WB05 or STM32WB09 */

  /*Set InitDelay*/
  LL_RADIO_SetWakeupInitDelay(INITDELAY_WAKEUP);
100454b0:	2040      	movs	r0, #64	@ 0x40
100454b2:	f7ff fd6d 	bl	10044f90 <LL_RADIO_SetWakeupInitDelay>
  LL_RADIO_SetTimer12InitDelayCal(INITDELAY_TIMER12_CAL);
100454b6:	203f      	movs	r0, #63	@ 0x3f
100454b8:	f7ff fd82 	bl	10044fc0 <LL_RADIO_SetTimer12InitDelayCal>
  LL_RADIO_SetTimer12InitDelayNoCal(INITDELAY_TIMER2_NOCAL);
100454bc:	2009      	movs	r0, #9
100454be:	f7ff fd99 	bl	10044ff4 <LL_RADIO_SetTimer12InitDelayNoCal>

  /*Set Init_radio_delay*/
  LL_RADIO_SetReceivedCalDelayChk(DELAYCHK_RECEIVE_CAL);
100454c2:	2074      	movs	r0, #116	@ 0x74
100454c4:	f7ff fdd8 	bl	10045078 <LL_RADIO_SetReceivedCalDelayChk>
  LL_RADIO_SetReceivedNoCalDelayChk(DELAYCHK_RECEIVE_NOCAL);
100454c8:	2038      	movs	r0, #56	@ 0x38
100454ca:	f7ff fdef 	bl	100450ac <LL_RADIO_SetReceivedNoCalDelayChk>
  LL_RADIO_SetTransmitCalDelayChk(DELAYCHK_TRANSMIT_CAL);
100454ce:	2076      	movs	r0, #118	@ 0x76
100454d0:	f7ff fda4 	bl	1004501c <LL_RADIO_SetTransmitCalDelayChk>
  LL_RADIO_SetTransmitNoCalDelayChk(DELAYCHK_TRANSMIT_NOCAL);
100454d4:	203a      	movs	r0, #58	@ 0x3a
100454d6:	f7ff fdb7 	bl	10045048 <LL_RADIO_SetTransmitNoCalDelayChk>

  /* Initial and final TX delays: control the on-air start time of the TX packet
  *  and the length of the packet "tail" after last bit is transmitted
  */
  LL_RADIO_SetTxDelayStart(TXDELAY_START);
100454da:	2010      	movs	r0, #16
100454dc:	f7ff fe28 	bl	10045130 <LL_RADIO_SetTxDelayStart>
  LL_RADIO_SetTxDelayEnd(TXDELAY_END);
100454e0:	2010      	movs	r0, #16
100454e2:	f7ff fe3f 	bl	10045164 <LL_RADIO_SetTxDelayEnd>

  /* Timeout for TX ready signal from the radio FSM after the 2nd init phase
  *  has expired
  */
  LL_RADIO_SetTransmissionReadyTimeout(TXREADY_TIMEOUT);
100454e6:	2005      	movs	r0, #5
100454e8:	f7ff fe56 	bl	10045198 <LL_RADIO_SetTransmissionReadyTimeout>

  /* Timing for the various programming phases of the radio, modem and memory
  *  pointers.
  */
  LL_RADIO_SetConfigurationEndDuration(CONFIG_END_DURATION);
100454ec:	2014      	movs	r0, #20
100454ee:	f7ff fdf1 	bl	100450d4 <LL_RADIO_SetConfigurationEndDuration>
  LL_RADIO_SetTxDataReadyCheck(CHECK_TXDATAREADY);
100454f2:	2005      	movs	r0, #5
100454f4:	f7ff fe04 	bl	10045100 <LL_RADIO_SetTxDataReadyCheck>

  LL_RADIO_ChkFlagAutoclearEnable_Enable();
100454f8:	f7ff fe64 	bl	100451c4 <LL_RADIO_ChkFlagAutoclearEnable_Enable>
  LL_RADIO_NoActiveLErrorInterrupt_Enable();
100454fc:	f7ff fe70 	bl	100451e0 <LL_RADIO_NoActiveLErrorInterrupt_Enable>
  LL_RADIO_TxRxSkipInterrupt_Enable();
10045500:	f7ff fe7c 	bl	100451fc <LL_RADIO_TxRxSkipInterrupt_Enable>
  /* The commands in the hot table start at word 4
  * The words 0 to 2 are used to point to the command list
  * for the various trigger events, word 3 is a null command
  * (see function BLEPLAT_CNTR_SetRadioConfigData)
  */
  index = 0;
10045504:	2013      	movs	r0, #19
10045506:	183b      	adds	r3, r7, r0
10045508:	2200      	movs	r2, #0
1004550a:	701a      	strb	r2, [r3, #0]
  hot_table_radio_config[index++] = 0x01;
1004550c:	183b      	adds	r3, r7, r0
1004550e:	781b      	ldrb	r3, [r3, #0]
10045510:	183a      	adds	r2, r7, r0
10045512:	1c59      	adds	r1, r3, #1
10045514:	7011      	strb	r1, [r2, #0]
10045516:	001a      	movs	r2, r3
10045518:	697b      	ldr	r3, [r7, #20]
1004551a:	189b      	adds	r3, r3, r2
1004551c:	2201      	movs	r2, #1
1004551e:	701a      	strb	r2, [r3, #0]
  hot_table_radio_config[index++] = RRM_CBIAS1_ANA_ENG;
10045520:	183b      	adds	r3, r7, r0
10045522:	781b      	ldrb	r3, [r3, #0]
10045524:	183a      	adds	r2, r7, r0
10045526:	1c59      	adds	r1, r3, #1
10045528:	7011      	strb	r1, [r2, #0]
1004552a:	001a      	movs	r2, r3
1004552c:	697b      	ldr	r3, [r7, #20]
1004552e:	189b      	adds	r3, r3, r2
10045530:	225e      	movs	r2, #94	@ 0x5e
10045532:	701a      	strb	r2, [r3, #0]
  hot_table_radio_config[index++] = RRM->CBIAS1_ANA_ENG;
10045534:	4a7f      	ldr	r2, [pc, #508]	@ (10045734 <HAL_RADIO_Init+0x47c>)
10045536:	239e      	movs	r3, #158	@ 0x9e
10045538:	009b      	lsls	r3, r3, #2
1004553a:	58d1      	ldr	r1, [r2, r3]
1004553c:	183b      	adds	r3, r7, r0
1004553e:	781b      	ldrb	r3, [r3, #0]
10045540:	0004      	movs	r4, r0
10045542:	183a      	adds	r2, r7, r0
10045544:	1c58      	adds	r0, r3, #1
10045546:	7010      	strb	r0, [r2, #0]
10045548:	001a      	movs	r2, r3
1004554a:	697b      	ldr	r3, [r7, #20]
1004554c:	189b      	adds	r3, r3, r2
1004554e:	b2ca      	uxtb	r2, r1
10045550:	701a      	strb	r2, [r3, #0]
  hot_table_radio_config[index++] = 0x01;
10045552:	0020      	movs	r0, r4
10045554:	183b      	adds	r3, r7, r0
10045556:	781b      	ldrb	r3, [r3, #0]
10045558:	183a      	adds	r2, r7, r0
1004555a:	1c59      	adds	r1, r3, #1
1004555c:	7011      	strb	r1, [r2, #0]
1004555e:	001a      	movs	r2, r3
10045560:	697b      	ldr	r3, [r7, #20]
10045562:	189b      	adds	r3, r3, r2
10045564:	2201      	movs	r2, #1
10045566:	701a      	strb	r2, [r3, #0]
  hot_table_radio_config[index++] = RRM_CBIAS0_ANA_ENG;
10045568:	183b      	adds	r3, r7, r0
1004556a:	781b      	ldrb	r3, [r3, #0]
1004556c:	183a      	adds	r2, r7, r0
1004556e:	1c59      	adds	r1, r3, #1
10045570:	7011      	strb	r1, [r2, #0]
10045572:	001a      	movs	r2, r3
10045574:	697b      	ldr	r3, [r7, #20]
10045576:	189b      	adds	r3, r3, r2
10045578:	225d      	movs	r2, #93	@ 0x5d
1004557a:	701a      	strb	r2, [r3, #0]
  hot_table_radio_config[index++] = RRM->CBIAS0_ANA_ENG;
1004557c:	4a6d      	ldr	r2, [pc, #436]	@ (10045734 <HAL_RADIO_Init+0x47c>)
1004557e:	239d      	movs	r3, #157	@ 0x9d
10045580:	009b      	lsls	r3, r3, #2
10045582:	58d1      	ldr	r1, [r2, r3]
10045584:	183b      	adds	r3, r7, r0
10045586:	781b      	ldrb	r3, [r3, #0]
10045588:	0004      	movs	r4, r0
1004558a:	183a      	adds	r2, r7, r0
1004558c:	1c58      	adds	r0, r3, #1
1004558e:	7010      	strb	r0, [r2, #0]
10045590:	001a      	movs	r2, r3
10045592:	697b      	ldr	r3, [r7, #20]
10045594:	189b      	adds	r3, r3, r2
10045596:	b2ca      	uxtb	r2, r1
10045598:	701a      	strb	r2, [r3, #0]

  hot_table_radio_config[index++] = 0x01;
1004559a:	0020      	movs	r0, r4
1004559c:	183b      	adds	r3, r7, r0
1004559e:	781b      	ldrb	r3, [r3, #0]
100455a0:	183a      	adds	r2, r7, r0
100455a2:	1c59      	adds	r1, r3, #1
100455a4:	7011      	strb	r1, [r2, #0]
100455a6:	001a      	movs	r2, r3
100455a8:	697b      	ldr	r3, [r7, #20]
100455aa:	189b      	adds	r3, r3, r2
100455ac:	2201      	movs	r2, #1
100455ae:	701a      	strb	r2, [r3, #0]
  hot_table_radio_config[index++] = RRM_RXADC_ANA_USR;
100455b0:	183b      	adds	r3, r7, r0
100455b2:	781b      	ldrb	r3, [r3, #0]
100455b4:	183a      	adds	r2, r7, r0
100455b6:	1c59      	adds	r1, r3, #1
100455b8:	7011      	strb	r1, [r2, #0]
100455ba:	001a      	movs	r2, r3
100455bc:	697b      	ldr	r3, [r7, #20]
100455be:	189b      	adds	r3, r3, r2
100455c0:	2252      	movs	r2, #82	@ 0x52
100455c2:	701a      	strb	r2, [r3, #0]
  hot_table_radio_config[index++] = RRM->RXADC_ANA_USR;
100455c4:	4a5b      	ldr	r2, [pc, #364]	@ (10045734 <HAL_RADIO_Init+0x47c>)
100455c6:	2392      	movs	r3, #146	@ 0x92
100455c8:	009b      	lsls	r3, r3, #2
100455ca:	58d1      	ldr	r1, [r2, r3]
100455cc:	183b      	adds	r3, r7, r0
100455ce:	781b      	ldrb	r3, [r3, #0]
100455d0:	0004      	movs	r4, r0
100455d2:	183a      	adds	r2, r7, r0
100455d4:	1c58      	adds	r0, r3, #1
100455d6:	7010      	strb	r0, [r2, #0]
100455d8:	001a      	movs	r2, r3
100455da:	697b      	ldr	r3, [r7, #20]
100455dc:	189b      	adds	r3, r3, r2
100455de:	b2ca      	uxtb	r2, r1
100455e0:	701a      	strb	r2, [r3, #0]

  hot_table_radio_config[index++] = 0x01;
100455e2:	0020      	movs	r0, r4
100455e4:	183b      	adds	r3, r7, r0
100455e6:	781b      	ldrb	r3, [r3, #0]
100455e8:	183a      	adds	r2, r7, r0
100455ea:	1c59      	adds	r1, r3, #1
100455ec:	7011      	strb	r1, [r2, #0]
100455ee:	001a      	movs	r2, r3
100455f0:	697b      	ldr	r3, [r7, #20]
100455f2:	189b      	adds	r3, r3, r2
100455f4:	2201      	movs	r2, #1
100455f6:	701a      	strb	r2, [r3, #0]
  hot_table_radio_config[index++] = RRM_AFC1_DIG_ENG;
100455f8:	183b      	adds	r3, r7, r0
100455fa:	781b      	ldrb	r3, [r3, #0]
100455fc:	183a      	adds	r2, r7, r0
100455fe:	1c59      	adds	r1, r3, #1
10045600:	7011      	strb	r1, [r2, #0]
10045602:	001a      	movs	r2, r3
10045604:	697b      	ldr	r3, [r7, #20]
10045606:	189b      	adds	r3, r3, r2
10045608:	2212      	movs	r2, #18
1004560a:	701a      	strb	r2, [r3, #0]
  hot_table_radio_config[index++] = RRM->AFC1_DIG_ENG;
1004560c:	4a49      	ldr	r2, [pc, #292]	@ (10045734 <HAL_RADIO_Init+0x47c>)
1004560e:	23a4      	movs	r3, #164	@ 0xa4
10045610:	005b      	lsls	r3, r3, #1
10045612:	58d1      	ldr	r1, [r2, r3]
10045614:	183b      	adds	r3, r7, r0
10045616:	781b      	ldrb	r3, [r3, #0]
10045618:	0004      	movs	r4, r0
1004561a:	183a      	adds	r2, r7, r0
1004561c:	1c58      	adds	r0, r3, #1
1004561e:	7010      	strb	r0, [r2, #0]
10045620:	001a      	movs	r2, r3
10045622:	697b      	ldr	r3, [r7, #20]
10045624:	189b      	adds	r3, r3, r2
10045626:	b2ca      	uxtb	r2, r1
10045628:	701a      	strb	r2, [r3, #0]
  hot_table_radio_config[index++] = 0x01;
1004562a:	0020      	movs	r0, r4
1004562c:	183b      	adds	r3, r7, r0
1004562e:	781b      	ldrb	r3, [r3, #0]
10045630:	183a      	adds	r2, r7, r0
10045632:	1c59      	adds	r1, r3, #1
10045634:	7011      	strb	r1, [r2, #0]
10045636:	001a      	movs	r2, r3
10045638:	697b      	ldr	r3, [r7, #20]
1004563a:	189b      	adds	r3, r3, r2
1004563c:	2201      	movs	r2, #1
1004563e:	701a      	strb	r2, [r3, #0]
  hot_table_radio_config[index++] = RRM_CR0_DIG_ENG;
10045640:	183b      	adds	r3, r7, r0
10045642:	781b      	ldrb	r3, [r3, #0]
10045644:	183a      	adds	r2, r7, r0
10045646:	1c59      	adds	r1, r3, #1
10045648:	7011      	strb	r1, [r2, #0]
1004564a:	001a      	movs	r2, r3
1004564c:	697b      	ldr	r3, [r7, #20]
1004564e:	189b      	adds	r3, r3, r2
10045650:	2215      	movs	r2, #21
10045652:	701a      	strb	r2, [r3, #0]
  hot_table_radio_config[index++] = RRM->CR0_DIG_ENG;
10045654:	4a37      	ldr	r2, [pc, #220]	@ (10045734 <HAL_RADIO_Init+0x47c>)
10045656:	23aa      	movs	r3, #170	@ 0xaa
10045658:	005b      	lsls	r3, r3, #1
1004565a:	58d1      	ldr	r1, [r2, r3]
1004565c:	183b      	adds	r3, r7, r0
1004565e:	781b      	ldrb	r3, [r3, #0]
10045660:	0004      	movs	r4, r0
10045662:	183a      	adds	r2, r7, r0
10045664:	1c58      	adds	r0, r3, #1
10045666:	7010      	strb	r0, [r2, #0]
10045668:	001a      	movs	r2, r3
1004566a:	697b      	ldr	r3, [r7, #20]
1004566c:	189b      	adds	r3, r3, r2
1004566e:	b2ca      	uxtb	r2, r1
10045670:	701a      	strb	r2, [r3, #0]
  hot_table_radio_config[index++] = 0x01;
10045672:	0020      	movs	r0, r4
10045674:	183b      	adds	r3, r7, r0
10045676:	781b      	ldrb	r3, [r3, #0]
10045678:	183a      	adds	r2, r7, r0
1004567a:	1c59      	adds	r1, r3, #1
1004567c:	7011      	strb	r1, [r2, #0]
1004567e:	001a      	movs	r2, r3
10045680:	697b      	ldr	r3, [r7, #20]
10045682:	189b      	adds	r3, r3, r2
10045684:	2201      	movs	r2, #1
10045686:	701a      	strb	r2, [r3, #0]
  hot_table_radio_config[index++] = RRM_CR0_LR;
10045688:	183b      	adds	r3, r7, r0
1004568a:	781b      	ldrb	r3, [r3, #0]
1004568c:	183a      	adds	r2, r7, r0
1004568e:	1c59      	adds	r1, r3, #1
10045690:	7011      	strb	r1, [r2, #0]
10045692:	001a      	movs	r2, r3
10045694:	697b      	ldr	r3, [r7, #20]
10045696:	189b      	adds	r3, r3, r2
10045698:	221a      	movs	r2, #26
1004569a:	701a      	strb	r2, [r3, #0]
  hot_table_radio_config[index++] = RRM->CR0_LR;
1004569c:	4a25      	ldr	r2, [pc, #148]	@ (10045734 <HAL_RADIO_Init+0x47c>)
1004569e:	23b4      	movs	r3, #180	@ 0xb4
100456a0:	005b      	lsls	r3, r3, #1
100456a2:	58d1      	ldr	r1, [r2, r3]
100456a4:	183b      	adds	r3, r7, r0
100456a6:	781b      	ldrb	r3, [r3, #0]
100456a8:	0004      	movs	r4, r0
100456aa:	183a      	adds	r2, r7, r0
100456ac:	1c58      	adds	r0, r3, #1
100456ae:	7010      	strb	r0, [r2, #0]
100456b0:	001a      	movs	r2, r3
100456b2:	697b      	ldr	r3, [r7, #20]
100456b4:	189b      	adds	r3, r3, r2
100456b6:	b2ca      	uxtb	r2, r1
100456b8:	701a      	strb	r2, [r3, #0]
  hot_table_radio_config[index++] = 0x01;
100456ba:	0020      	movs	r0, r4
100456bc:	183b      	adds	r3, r7, r0
100456be:	781b      	ldrb	r3, [r3, #0]
100456c0:	183a      	adds	r2, r7, r0
100456c2:	1c59      	adds	r1, r3, #1
100456c4:	7011      	strb	r1, [r2, #0]
100456c6:	001a      	movs	r2, r3
100456c8:	697b      	ldr	r3, [r7, #20]
100456ca:	189b      	adds	r3, r3, r2
100456cc:	2201      	movs	r2, #1
100456ce:	701a      	strb	r2, [r3, #0]
  hot_table_radio_config[index++] = RRM_LR_RSSI_THR_DIG_ENG;
100456d0:	183b      	adds	r3, r7, r0
100456d2:	781b      	ldrb	r3, [r3, #0]
100456d4:	183a      	adds	r2, r7, r0
100456d6:	1c59      	adds	r1, r3, #1
100456d8:	7011      	strb	r1, [r2, #0]
100456da:	001a      	movs	r2, r3
100456dc:	697b      	ldr	r3, [r7, #20]
100456de:	189b      	adds	r3, r3, r2
100456e0:	2222      	movs	r2, #34	@ 0x22
100456e2:	701a      	strb	r2, [r3, #0]
  hot_table_radio_config[index++] = RRM->LR_RSSI_THR_DIG_ENG;
100456e4:	4a13      	ldr	r2, [pc, #76]	@ (10045734 <HAL_RADIO_Init+0x47c>)
100456e6:	23c4      	movs	r3, #196	@ 0xc4
100456e8:	005b      	lsls	r3, r3, #1
100456ea:	58d1      	ldr	r1, [r2, r3]
100456ec:	183b      	adds	r3, r7, r0
100456ee:	781b      	ldrb	r3, [r3, #0]
100456f0:	0004      	movs	r4, r0
100456f2:	183a      	adds	r2, r7, r0
100456f4:	1c58      	adds	r0, r3, #1
100456f6:	7010      	strb	r0, [r2, #0]
100456f8:	001a      	movs	r2, r3
100456fa:	697b      	ldr	r3, [r7, #20]
100456fc:	189b      	adds	r3, r3, r2
100456fe:	b2ca      	uxtb	r2, r1
10045700:	701a      	strb	r2, [r3, #0]
  hot_table_radio_config[index++] = 0x01;
10045702:	0020      	movs	r0, r4
10045704:	183b      	adds	r3, r7, r0
10045706:	781b      	ldrb	r3, [r3, #0]
10045708:	183a      	adds	r2, r7, r0
1004570a:	1c59      	adds	r1, r3, #1
1004570c:	7011      	strb	r1, [r2, #0]
1004570e:	001a      	movs	r2, r3
10045710:	697b      	ldr	r3, [r7, #20]
10045712:	189b      	adds	r3, r3, r2
10045714:	2201      	movs	r2, #1
10045716:	701a      	strb	r2, [r3, #0]
  hot_table_radio_config[index++] = RRM_LR_PD_THR_DIG_ENG;
10045718:	183b      	adds	r3, r7, r0
1004571a:	781b      	ldrb	r3, [r3, #0]
1004571c:	183a      	adds	r2, r7, r0
1004571e:	1c59      	adds	r1, r3, #1
10045720:	7011      	strb	r1, [r2, #0]
10045722:	001a      	movs	r2, r3
10045724:	697b      	ldr	r3, [r7, #20]
10045726:	189b      	adds	r3, r3, r2
10045728:	e006      	b.n	10045738 <HAL_RADIO_Init+0x480>
1004572a:	46c0      	nop			@ (mov r8, r8)
1004572c:	200000c0 	.word	0x200000c0
10045730:	60001800 	.word	0x60001800
10045734:	60001400 	.word	0x60001400
10045738:	2221      	movs	r2, #33	@ 0x21
1004573a:	701a      	strb	r2, [r3, #0]
  hot_table_radio_config[index++] = RRM->LR_PD_THR_DIG_ENG;
1004573c:	4a4c      	ldr	r2, [pc, #304]	@ (10045870 <HAL_RADIO_Init+0x5b8>)
1004573e:	23c2      	movs	r3, #194	@ 0xc2
10045740:	005b      	lsls	r3, r3, #1
10045742:	58d1      	ldr	r1, [r2, r3]
10045744:	183b      	adds	r3, r7, r0
10045746:	781b      	ldrb	r3, [r3, #0]
10045748:	0004      	movs	r4, r0
1004574a:	183a      	adds	r2, r7, r0
1004574c:	1c58      	adds	r0, r3, #1
1004574e:	7010      	strb	r0, [r2, #0]
10045750:	001a      	movs	r2, r3
10045752:	697b      	ldr	r3, [r7, #20]
10045754:	189b      	adds	r3, r3, r2
10045756:	b2ca      	uxtb	r2, r1
10045758:	701a      	strb	r2, [r3, #0]
  hot_table_radio_config[index++] = 0x01;
1004575a:	0020      	movs	r0, r4
1004575c:	183b      	adds	r3, r7, r0
1004575e:	781b      	ldrb	r3, [r3, #0]
10045760:	183a      	adds	r2, r7, r0
10045762:	1c59      	adds	r1, r3, #1
10045764:	7011      	strb	r1, [r2, #0]
10045766:	001a      	movs	r2, r3
10045768:	697b      	ldr	r3, [r7, #20]
1004576a:	189b      	adds	r3, r3, r2
1004576c:	2201      	movs	r2, #1
1004576e:	701a      	strb	r2, [r3, #0]
  hot_table_radio_config[index++] = RRM_LR_AAC_THR_DIG_ENG;
10045770:	183b      	adds	r3, r7, r0
10045772:	781b      	ldrb	r3, [r3, #0]
10045774:	183a      	adds	r2, r7, r0
10045776:	1c59      	adds	r1, r3, #1
10045778:	7011      	strb	r1, [r2, #0]
1004577a:	001a      	movs	r2, r3
1004577c:	697b      	ldr	r3, [r7, #20]
1004577e:	189b      	adds	r3, r3, r2
10045780:	2223      	movs	r2, #35	@ 0x23
10045782:	701a      	strb	r2, [r3, #0]
  hot_table_radio_config[index++] = RRM->LR_AAC_THR_DIG_ENG;
10045784:	4a3a      	ldr	r2, [pc, #232]	@ (10045870 <HAL_RADIO_Init+0x5b8>)
10045786:	23c6      	movs	r3, #198	@ 0xc6
10045788:	005b      	lsls	r3, r3, #1
1004578a:	58d1      	ldr	r1, [r2, r3]
1004578c:	183b      	adds	r3, r7, r0
1004578e:	781b      	ldrb	r3, [r3, #0]
10045790:	0004      	movs	r4, r0
10045792:	183a      	adds	r2, r7, r0
10045794:	1c58      	adds	r0, r3, #1
10045796:	7010      	strb	r0, [r2, #0]
10045798:	001a      	movs	r2, r3
1004579a:	697b      	ldr	r3, [r7, #20]
1004579c:	189b      	adds	r3, r3, r2
1004579e:	b2ca      	uxtb	r2, r1
100457a0:	701a      	strb	r2, [r3, #0]
  hot_table_radio_config[index++] = 0x01;
100457a2:	0020      	movs	r0, r4
100457a4:	183b      	adds	r3, r7, r0
100457a6:	781b      	ldrb	r3, [r3, #0]
100457a8:	183a      	adds	r2, r7, r0
100457aa:	1c59      	adds	r1, r3, #1
100457ac:	7011      	strb	r1, [r2, #0]
100457ae:	001a      	movs	r2, r3
100457b0:	697b      	ldr	r3, [r7, #20]
100457b2:	189b      	adds	r3, r3, r2
100457b4:	2201      	movs	r2, #1
100457b6:	701a      	strb	r2, [r3, #0]
  hot_table_radio_config[index++] = RRM_VIT_CONF_DIG_ENG;
100457b8:	183b      	adds	r3, r7, r0
100457ba:	781b      	ldrb	r3, [r3, #0]
100457bc:	183a      	adds	r2, r7, r0
100457be:	1c59      	adds	r1, r3, #1
100457c0:	7011      	strb	r1, [r2, #0]
100457c2:	001a      	movs	r2, r3
100457c4:	697b      	ldr	r3, [r7, #20]
100457c6:	189b      	adds	r3, r3, r2
100457c8:	221b      	movs	r2, #27
100457ca:	701a      	strb	r2, [r3, #0]
  hot_table_radio_config[index++] = RRM->VIT_CONF_DIG_ENG;
100457cc:	4a28      	ldr	r2, [pc, #160]	@ (10045870 <HAL_RADIO_Init+0x5b8>)
100457ce:	23b6      	movs	r3, #182	@ 0xb6
100457d0:	005b      	lsls	r3, r3, #1
100457d2:	58d1      	ldr	r1, [r2, r3]
100457d4:	183b      	adds	r3, r7, r0
100457d6:	781b      	ldrb	r3, [r3, #0]
100457d8:	0004      	movs	r4, r0
100457da:	183a      	adds	r2, r7, r0
100457dc:	1c58      	adds	r0, r3, #1
100457de:	7010      	strb	r0, [r2, #0]
100457e0:	001a      	movs	r2, r3
100457e2:	697b      	ldr	r3, [r7, #20]
100457e4:	189b      	adds	r3, r3, r2
100457e6:	b2ca      	uxtb	r2, r1
100457e8:	701a      	strb	r2, [r3, #0]
  hot_table_radio_config[index++] = RRM->ANTSW_DIG0_USR;
  hot_table_radio_config[index++] = 0x01;
  hot_table_radio_config[index++] = RRM_ANTSW_DIG1_USR;
  hot_table_radio_config[index++] = RRM->ANTSW_DIG1_USR;
#endif
  hot_table_radio_config[index++] = 0x00;
100457ea:	193b      	adds	r3, r7, r4
100457ec:	781b      	ldrb	r3, [r3, #0]
100457ee:	193a      	adds	r2, r7, r4
100457f0:	1c59      	adds	r1, r3, #1
100457f2:	7011      	strb	r1, [r2, #0]
100457f4:	001a      	movs	r2, r3
100457f6:	697b      	ldr	r3, [r7, #20]
100457f8:	189b      	adds	r3, r3, r2
100457fa:	2200      	movs	r2, #0
100457fc:	701a      	strb	r2, [r3, #0]

  hot_table_radio_config_u32[0] = (uint32_t)(&hot_table_radio_config_u32[4]); /* Point to Port 0 command list 1 executed when Wakeup timer triggers */
100457fe:	4a1d      	ldr	r2, [pc, #116]	@ (10045874 <HAL_RADIO_Init+0x5bc>)
10045800:	4b1d      	ldr	r3, [pc, #116]	@ (10045878 <HAL_RADIO_Init+0x5c0>)
10045802:	601a      	str	r2, [r3, #0]
  hot_table_radio_config_u32[1] = (uint32_t)(&hot_table_radio_config_u32[4]); /* Point to Port 0 command list 2 executed when Timer1 triggers       */
10045804:	4a1b      	ldr	r2, [pc, #108]	@ (10045874 <HAL_RADIO_Init+0x5bc>)
10045806:	4b1c      	ldr	r3, [pc, #112]	@ (10045878 <HAL_RADIO_Init+0x5c0>)
10045808:	605a      	str	r2, [r3, #4]
  hot_table_radio_config_u32[2] = (uint32_t)(&hot_table_radio_config_u32[3]); /* Point to Port 0 command list 3 executed when Timer2 triggers       */
1004580a:	4a1c      	ldr	r2, [pc, #112]	@ (1004587c <HAL_RADIO_Init+0x5c4>)
1004580c:	4b1a      	ldr	r3, [pc, #104]	@ (10045878 <HAL_RADIO_Init+0x5c0>)
1004580e:	609a      	str	r2, [r3, #8]
  hot_table_radio_config_u32[3] = 0x00000000;                /* Null command */
10045810:	4b19      	ldr	r3, [pc, #100]	@ (10045878 <HAL_RADIO_Init+0x5c0>)
10045812:	2200      	movs	r2, #0
10045814:	60da      	str	r2, [r3, #12]

  LL_RADIO_SetRadioConfigurationAddressPointer(hot_table_radio_config_u32[0]);
10045816:	4b18      	ldr	r3, [pc, #96]	@ (10045878 <HAL_RADIO_Init+0x5c0>)
10045818:	681b      	ldr	r3, [r3, #0]
1004581a:	0018      	movs	r0, r3
1004581c:	f7ff fba8 	bl	10044f70 <LL_RADIO_SetRadioConfigurationAddressPointer>
  /* Reload radio config pointer */
  RRM->UDRA_CTRL0 = RRM_UDRA_CTRL0_RELOAD_RDCFGPTR;
10045820:	4b13      	ldr	r3, [pc, #76]	@ (10045870 <HAL_RADIO_Init+0x5b8>)
10045822:	2201      	movs	r2, #1
10045824:	611a      	str	r2, [r3, #16]
  LL_RADIO_Active2ErrorInterrupt_Enable();
10045826:	f7ff fcf7 	bl	10045218 <LL_RADIO_Active2ErrorInterrupt_Enable>

#if USE_RADIO_PROPRIETARY_DRIVER
  globalParameters.back2backTime = BACK_TO_BACK_TIME;
1004582a:	4b15      	ldr	r3, [pc, #84]	@ (10045880 <HAL_RADIO_Init+0x5c8>)
1004582c:	2296      	movs	r2, #150	@ 0x96
1004582e:	601a      	str	r2, [r3, #0]
  globalParameters.tone_start_stop_flag = 0;
10045830:	4b13      	ldr	r3, [pc, #76]	@ (10045880 <HAL_RADIO_Init+0x5c8>)
10045832:	2200      	movs	r2, #0
10045834:	711a      	strb	r2, [r3, #4]
#endif

  /*Clear all interrupts of the BLUE Controller*/
  uint32_t int_val_tmp = BLUE->INTERRUPT1REG;
10045836:	23c0      	movs	r3, #192	@ 0xc0
10045838:	05db      	lsls	r3, r3, #23
1004583a:	685b      	ldr	r3, [r3, #4]
1004583c:	60fb      	str	r3, [r7, #12]
  BLUE->INTERRUPT1REG = int_val_tmp;
1004583e:	23c0      	movs	r3, #192	@ 0xc0
10045840:	05db      	lsls	r3, r3, #23
10045842:	68fa      	ldr	r2, [r7, #12]
10045844:	605a      	str	r2, [r3, #4]

  /*BLE wake up IRQ Status clearing and enable*/
  WAKEUP->WAKEUP_BLE_IRQ_STATUS |= 1;
10045846:	4b0f      	ldr	r3, [pc, #60]	@ (10045884 <HAL_RADIO_Init+0x5cc>)
10045848:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
1004584a:	4b0e      	ldr	r3, [pc, #56]	@ (10045884 <HAL_RADIO_Init+0x5cc>)
1004584c:	2101      	movs	r1, #1
1004584e:	430a      	orrs	r2, r1
10045850:	645a      	str	r2, [r3, #68]	@ 0x44
  WAKEUP->WAKEUP_BLE_IRQ_ENABLE |= 1;
10045852:	4b0c      	ldr	r3, [pc, #48]	@ (10045884 <HAL_RADIO_Init+0x5cc>)
10045854:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
10045856:	4b0b      	ldr	r3, [pc, #44]	@ (10045884 <HAL_RADIO_Init+0x5cc>)
10045858:	2101      	movs	r1, #1
1004585a:	430a      	orrs	r2, r1
1004585c:	641a      	str	r2, [r3, #64]	@ 0x40
  /* If the device is configured with
     System clock = 64 MHz and BLE clock = 16 MHz
     a register read is necessary to end fine
     the clear interrupt register operation,
     due the AHB down converter latency */
  int_val_tmp = BLUE->INTERRUPT1REG;
1004585e:	23c0      	movs	r3, #192	@ 0xc0
10045860:	05db      	lsls	r3, r3, #23
10045862:	685b      	ldr	r3, [r3, #4]
10045864:	60fb      	str	r3, [r7, #12]

  return;
10045866:	46c0      	nop			@ (mov r8, r8)
}
10045868:	46bd      	mov	sp, r7
1004586a:	b00d      	add	sp, #52	@ 0x34
1004586c:	bd90      	pop	{r4, r7, pc}
1004586e:	46c0      	nop			@ (mov r8, r8)
10045870:	60001400 	.word	0x60001400
10045874:	200008e4 	.word	0x200008e4
10045878:	200008d4 	.word	0x200008d4
1004587c:	200008e0 	.word	0x200008e0
10045880:	20000848 	.word	0x20000848
10045884:	60001800 	.word	0x60001800

10045888 <HAL_RADIO_ReadRSSI>:
/**
  * @brief  Read RSSI
  * @retval int8_t: RSSI in dBm
  */
int8_t HAL_RADIO_ReadRSSI(void)
{
10045888:	b580      	push	{r7, lr}
1004588a:	b086      	sub	sp, #24
1004588c:	af00      	add	r7, sp, #0
  int32_t rssi_dbm;
  uint32_t rssi0 = RRM->RSSI0_DIG_OUT;
1004588e:	4a24      	ldr	r2, [pc, #144]	@ (10045920 <HAL_RADIO_ReadRSSI+0x98>)
10045890:	23a9      	movs	r3, #169	@ 0xa9
10045892:	009b      	lsls	r3, r3, #2
10045894:	58d3      	ldr	r3, [r2, r3]
10045896:	60fb      	str	r3, [r7, #12]
  uint32_t rssi1 = RRM->RSSI1_DIG_OUT;
10045898:	4a21      	ldr	r2, [pc, #132]	@ (10045920 <HAL_RADIO_ReadRSSI+0x98>)
1004589a:	23aa      	movs	r3, #170	@ 0xaa
1004589c:	009b      	lsls	r3, r3, #2
1004589e:	58d3      	ldr	r3, [r2, r3]
100458a0:	60bb      	str	r3, [r7, #8]

  uint32_t rssi_int16 = ((rssi1 & 0xFF) << 8) | (rssi0 & 0xFF);
100458a2:	68bb      	ldr	r3, [r7, #8]
100458a4:	021b      	lsls	r3, r3, #8
100458a6:	041b      	lsls	r3, r3, #16
100458a8:	0c1a      	lsrs	r2, r3, #16
100458aa:	68fb      	ldr	r3, [r7, #12]
100458ac:	21ff      	movs	r1, #255	@ 0xff
100458ae:	400b      	ands	r3, r1
100458b0:	4313      	orrs	r3, r2
100458b2:	613b      	str	r3, [r7, #16]
  uint32_t reg_agc = RRM->AGC_DIG_OUT;
100458b4:	4a1a      	ldr	r2, [pc, #104]	@ (10045920 <HAL_RADIO_ReadRSSI+0x98>)
100458b6:	23ab      	movs	r3, #171	@ 0xab
100458b8:	009b      	lsls	r3, r3, #2
100458ba:	58d3      	ldr	r3, [r2, r3]
100458bc:	607b      	str	r3, [r7, #4]

  if ((rssi_int16 == 0U) || (reg_agc > 0xbU))
100458be:	693b      	ldr	r3, [r7, #16]
100458c0:	2b00      	cmp	r3, #0
100458c2:	d002      	beq.n	100458ca <HAL_RADIO_ReadRSSI+0x42>
100458c4:	687b      	ldr	r3, [r7, #4]
100458c6:	2b0b      	cmp	r3, #11
100458c8:	d902      	bls.n	100458d0 <HAL_RADIO_ReadRSSI+0x48>
  {
    rssi_dbm = 127 ;
100458ca:	237f      	movs	r3, #127	@ 0x7f
100458cc:	617b      	str	r3, [r7, #20]
100458ce:	e020      	b.n	10045912 <HAL_RADIO_ReadRSSI+0x8a>
  }
  else
  {
    rssi_dbm = (int32_t)reg_agc * 6 - RSSI_OFFSET;//127 ;
100458d0:	687a      	ldr	r2, [r7, #4]
100458d2:	0013      	movs	r3, r2
100458d4:	005b      	lsls	r3, r3, #1
100458d6:	189b      	adds	r3, r3, r2
100458d8:	005b      	lsls	r3, r3, #1
100458da:	3b77      	subs	r3, #119	@ 0x77
100458dc:	617b      	str	r3, [r7, #20]
    while (rssi_int16 > 30U)
100458de:	e005      	b.n	100458ec <HAL_RADIO_ReadRSSI+0x64>
    {
      rssi_dbm = rssi_dbm + 6 ;
100458e0:	697b      	ldr	r3, [r7, #20]
100458e2:	3306      	adds	r3, #6
100458e4:	617b      	str	r3, [r7, #20]
      rssi_int16 = (rssi_int16 >> 1) ;
100458e6:	693b      	ldr	r3, [r7, #16]
100458e8:	085b      	lsrs	r3, r3, #1
100458ea:	613b      	str	r3, [r7, #16]
    while (rssi_int16 > 30U)
100458ec:	693b      	ldr	r3, [r7, #16]
100458ee:	2b1e      	cmp	r3, #30
100458f0:	d8f6      	bhi.n	100458e0 <HAL_RADIO_ReadRSSI+0x58>
    }
    rssi_dbm = rssi_dbm + (int32_t)(uint32_t)((417U * rssi_int16 + 18080U) >> 10);
100458f2:	693a      	ldr	r2, [r7, #16]
100458f4:	0013      	movs	r3, r2
100458f6:	005b      	lsls	r3, r3, #1
100458f8:	189b      	adds	r3, r3, r2
100458fa:	009b      	lsls	r3, r3, #2
100458fc:	189b      	adds	r3, r3, r2
100458fe:	015b      	lsls	r3, r3, #5
10045900:	189b      	adds	r3, r3, r2
10045902:	4a08      	ldr	r2, [pc, #32]	@ (10045924 <HAL_RADIO_ReadRSSI+0x9c>)
10045904:	4694      	mov	ip, r2
10045906:	4463      	add	r3, ip
10045908:	0a9b      	lsrs	r3, r3, #10
1004590a:	001a      	movs	r2, r3
1004590c:	697b      	ldr	r3, [r7, #20]
1004590e:	189b      	adds	r3, r3, r2
10045910:	617b      	str	r3, [r7, #20]
  }
  return (int8_t)rssi_dbm;
10045912:	697b      	ldr	r3, [r7, #20]
10045914:	b25b      	sxtb	r3, r3
}
10045916:	0018      	movs	r0, r3
10045918:	46bd      	mov	sp, r7
1004591a:	b006      	add	sp, #24
1004591c:	bd80      	pop	{r7, pc}
1004591e:	46c0      	nop			@ (mov r8, r8)
10045920:	60001400 	.word	0x60001400
10045924:	000046a0 	.word	0x000046a0

10045928 <HAL_RADIO_Callback>:
  * @param  p: Current action packet which its transaction has been completed.
  * @param  next: Next action packet which is going to be scheduled.
  * @retval return value: TRUE
  */
uint8_t HAL_RADIO_Callback(ActionPacket *p, ActionPacket *next)
{
10045928:	b590      	push	{r4, r7, lr}
1004592a:	b085      	sub	sp, #20
1004592c:	af00      	add	r7, sp, #0
1004592e:	6078      	str	r0, [r7, #4]
10045930:	6039      	str	r1, [r7, #0]
  /* Event is a reception */
  if ((p->status & BLUE_STATUSREG_PREVTRANSMIT) == 0)
10045932:	687b      	ldr	r3, [r7, #4]
10045934:	68db      	ldr	r3, [r3, #12]
10045936:	2240      	movs	r2, #64	@ 0x40
10045938:	4013      	ands	r3, r2
1004593a:	d153      	bne.n	100459e4 <HAL_RADIO_Callback+0xbc>
  {
    RxStats_t receivedStats = {0};
1004593c:	2408      	movs	r4, #8
1004593e:	193b      	adds	r3, r7, r4
10045940:	0018      	movs	r0, r3
10045942:	2308      	movs	r3, #8
10045944:	001a      	movs	r2, r3
10045946:	2100      	movs	r1, #0
10045948:	f004 fb64 	bl	1004a014 <memset>
    /* Reception ends with no errors */
    if ((p->status & BLUE_INTERRUPT1REG_RCVOK) != 0)
1004594c:	687b      	ldr	r3, [r7, #4]
1004594e:	68db      	ldr	r3, [r3, #12]
10045950:	2b00      	cmp	r3, #0
10045952:	da20      	bge.n	10045996 <HAL_RADIO_Callback+0x6e>
    {
      if ((p->status & BLUE_INTERRUPT1REG_ENCERROR) != 0)
10045954:	687b      	ldr	r3, [r7, #4]
10045956:	68da      	ldr	r2, [r3, #12]
10045958:	2380      	movs	r3, #128	@ 0x80
1004595a:	019b      	lsls	r3, r3, #6
1004595c:	4013      	ands	r3, r2
1004595e:	d00c      	beq.n	1004597a <HAL_RADIO_Callback+0x52>
      {
        receivedStats.rssi = p->rssi;
10045960:	687b      	ldr	r3, [r7, #4]
10045962:	695a      	ldr	r2, [r3, #20]
10045964:	193b      	adds	r3, r7, r4
10045966:	601a      	str	r2, [r3, #0]
        receivedStats.timestamp_receive = p->timestamp_receive;
10045968:	687b      	ldr	r3, [r7, #4]
1004596a:	691a      	ldr	r2, [r3, #16]
1004596c:	193b      	adds	r3, r7, r4
1004596e:	605a      	str	r2, [r3, #4]
        HAL_RADIO_CallbackRcvEncryptErr(&receivedStats);
10045970:	193b      	adds	r3, r7, r4
10045972:	0018      	movs	r0, r3
10045974:	f000 f853 	bl	10045a1e <HAL_RADIO_CallbackRcvEncryptErr>
10045978:	e03c      	b.n	100459f4 <HAL_RADIO_Callback+0xcc>
      }
      else
      {
        receivedStats.rssi = p->rssi;
1004597a:	687b      	ldr	r3, [r7, #4]
1004597c:	695a      	ldr	r2, [r3, #20]
1004597e:	2108      	movs	r1, #8
10045980:	187b      	adds	r3, r7, r1
10045982:	601a      	str	r2, [r3, #0]
        receivedStats.timestamp_receive = p->timestamp_receive;
10045984:	687b      	ldr	r3, [r7, #4]
10045986:	691a      	ldr	r2, [r3, #16]
10045988:	187b      	adds	r3, r7, r1
1004598a:	605a      	str	r2, [r3, #4]
        HAL_RADIO_CallbackRcvOk(&receivedStats);
1004598c:	187b      	adds	r3, r7, r1
1004598e:	0018      	movs	r0, r3
10045990:	f7fd fa62 	bl	10042e58 <HAL_RADIO_CallbackRcvOk>
10045994:	e02e      	b.n	100459f4 <HAL_RADIO_Callback+0xcc>
      }
    }
    /* Reception ends with timeout */
    else if ((p->status & BLUE_INTERRUPT1REG_RCVTIMEOUT) != 0)
10045996:	687b      	ldr	r3, [r7, #4]
10045998:	68da      	ldr	r2, [r3, #12]
1004599a:	2380      	movs	r3, #128	@ 0x80
1004599c:	04db      	lsls	r3, r3, #19
1004599e:	4013      	ands	r3, r2
100459a0:	d00c      	beq.n	100459bc <HAL_RADIO_Callback+0x94>
    {
      receivedStats.rssi = p->rssi;
100459a2:	687b      	ldr	r3, [r7, #4]
100459a4:	695a      	ldr	r2, [r3, #20]
100459a6:	2108      	movs	r1, #8
100459a8:	187b      	adds	r3, r7, r1
100459aa:	601a      	str	r2, [r3, #0]
      receivedStats.timestamp_receive = 0;
100459ac:	187b      	adds	r3, r7, r1
100459ae:	2200      	movs	r2, #0
100459b0:	605a      	str	r2, [r3, #4]
      HAL_RADIO_CallbackRcvTimeout(&receivedStats);
100459b2:	187b      	adds	r3, r7, r1
100459b4:	0018      	movs	r0, r3
100459b6:	f000 f82a 	bl	10045a0e <HAL_RADIO_CallbackRcvTimeout>
100459ba:	e01b      	b.n	100459f4 <HAL_RADIO_Callback+0xcc>
    }
    /* Reception ends with errors */
    else if ((p->status & BLUE_INTERRUPT1REG_RCVCRCERR) != 0)
100459bc:	687b      	ldr	r3, [r7, #4]
100459be:	68da      	ldr	r2, [r3, #12]
100459c0:	2380      	movs	r3, #128	@ 0x80
100459c2:	05db      	lsls	r3, r3, #23
100459c4:	4013      	ands	r3, r2
100459c6:	d015      	beq.n	100459f4 <HAL_RADIO_Callback+0xcc>
    {
      receivedStats.rssi = p->rssi;
100459c8:	687b      	ldr	r3, [r7, #4]
100459ca:	695a      	ldr	r2, [r3, #20]
100459cc:	2108      	movs	r1, #8
100459ce:	187b      	adds	r3, r7, r1
100459d0:	601a      	str	r2, [r3, #0]
      receivedStats.timestamp_receive = p->timestamp_receive;
100459d2:	687b      	ldr	r3, [r7, #4]
100459d4:	691a      	ldr	r2, [r3, #16]
100459d6:	187b      	adds	r3, r7, r1
100459d8:	605a      	str	r2, [r3, #4]
      HAL_RADIO_CallbackRcvError(&receivedStats);
100459da:	187b      	adds	r3, r7, r1
100459dc:	0018      	movs	r0, r3
100459de:	f000 f80e 	bl	100459fe <HAL_RADIO_CallbackRcvError>
100459e2:	e007      	b.n	100459f4 <HAL_RADIO_Callback+0xcc>
    }
  }
  /* Event is a transmission */
  else if ((p->status & BLUE_INTERRUPT1REG_DONE) != 0)
100459e4:	687b      	ldr	r3, [r7, #4]
100459e6:	68da      	ldr	r2, [r3, #12]
100459e8:	2380      	movs	r3, #128	@ 0x80
100459ea:	049b      	lsls	r3, r3, #18
100459ec:	4013      	ands	r3, r2
100459ee:	d001      	beq.n	100459f4 <HAL_RADIO_Callback+0xcc>
  {
    /* RADIO TX operation done */
    HAL_RADIO_CallbackTxDone();
100459f0:	f000 f81d 	bl	10045a2e <HAL_RADIO_CallbackTxDone>
  }
  return TRUE;
100459f4:	2301      	movs	r3, #1
}
100459f6:	0018      	movs	r0, r3
100459f8:	46bd      	mov	sp, r7
100459fa:	b005      	add	sp, #20
100459fc:	bd90      	pop	{r4, r7, pc}

100459fe <HAL_RADIO_CallbackRcvError>:

__weak void HAL_RADIO_CallbackRcvError(RxStats_t *rxPacketStats) {}
100459fe:	b580      	push	{r7, lr}
10045a00:	b082      	sub	sp, #8
10045a02:	af00      	add	r7, sp, #0
10045a04:	6078      	str	r0, [r7, #4]
10045a06:	46c0      	nop			@ (mov r8, r8)
10045a08:	46bd      	mov	sp, r7
10045a0a:	b002      	add	sp, #8
10045a0c:	bd80      	pop	{r7, pc}

10045a0e <HAL_RADIO_CallbackRcvTimeout>:
__weak void HAL_RADIO_CallbackRcvTimeout(RxStats_t *rxPacketStats) {}
10045a0e:	b580      	push	{r7, lr}
10045a10:	b082      	sub	sp, #8
10045a12:	af00      	add	r7, sp, #0
10045a14:	6078      	str	r0, [r7, #4]
10045a16:	46c0      	nop			@ (mov r8, r8)
10045a18:	46bd      	mov	sp, r7
10045a1a:	b002      	add	sp, #8
10045a1c:	bd80      	pop	{r7, pc}

10045a1e <HAL_RADIO_CallbackRcvEncryptErr>:
__weak void HAL_RADIO_CallbackRcvEncryptErr(RxStats_t *rxPacketStats) {}
10045a1e:	b580      	push	{r7, lr}
10045a20:	b082      	sub	sp, #8
10045a22:	af00      	add	r7, sp, #0
10045a24:	6078      	str	r0, [r7, #4]
10045a26:	46c0      	nop			@ (mov r8, r8)
10045a28:	46bd      	mov	sp, r7
10045a2a:	b002      	add	sp, #8
10045a2c:	bd80      	pop	{r7, pc}

10045a2e <HAL_RADIO_CallbackTxDone>:
__weak void HAL_RADIO_CallbackRcvOk(RxStats_t *rxPacketStats) {}
__weak void HAL_RADIO_CallbackTxDone(void) {}
10045a2e:	b580      	push	{r7, lr}
10045a30:	af00      	add	r7, sp, #0
10045a32:	46c0      	nop			@ (mov r8, r8)
10045a34:	46bd      	mov	sp, r7
10045a36:	bd80      	pop	{r7, pc}

10045a38 <HAL_RADIO_ActionPacketIsr>:
  * @brief  Radio ISR.
  *         Besides, next packet is scheduled here.
  * @retval None
  */
static void HAL_RADIO_ActionPacketIsr(uint32_t int_flags)
{
10045a38:	b590      	push	{r4, r7, lr}
10045a3a:	b089      	sub	sp, #36	@ 0x24
10045a3c:	af00      	add	r7, sp, #0
10045a3e:	6078      	str	r0, [r7, #4]
  if ((int_flags & BLUE_INTERRUPT1REG_DONE) != 0)
10045a40:	687a      	ldr	r2, [r7, #4]
10045a42:	2380      	movs	r3, #128	@ 0x80
10045a44:	049b      	lsls	r3, r3, #18
10045a46:	4013      	ands	r3, r2
10045a48:	d100      	bne.n	10045a4c <HAL_RADIO_ActionPacketIsr+0x14>
10045a4a:	e105      	b.n	10045c58 <HAL_RADIO_ActionPacketIsr+0x220>
    BlueTransStruct *p;
    uint32_t time;

    /* Copy status in order for callback to access it. */
    globalParameters.current_action_packet->status = int_flags | \
                                                     (BLUE->STATUSREG & BLUE_STATUSREG_PREVTRANSMIT_Msk);
10045a4c:	23c0      	movs	r3, #192	@ 0xc0
10045a4e:	05db      	lsls	r3, r3, #23
10045a50:	69db      	ldr	r3, [r3, #28]
10045a52:	2240      	movs	r2, #64	@ 0x40
10045a54:	4013      	ands	r3, r2
10045a56:	0019      	movs	r1, r3
    globalParameters.current_action_packet->status = int_flags | \
10045a58:	4b81      	ldr	r3, [pc, #516]	@ (10045c60 <HAL_RADIO_ActionPacketIsr+0x228>)
10045a5a:	689b      	ldr	r3, [r3, #8]
10045a5c:	687a      	ldr	r2, [r7, #4]
10045a5e:	430a      	orrs	r2, r1
10045a60:	60da      	str	r2, [r3, #12]

    if ((globalParameters.current_action_packet->condRoutine(globalParameters.current_action_packet)) == TRUE)
10045a62:	4b7f      	ldr	r3, [pc, #508]	@ (10045c60 <HAL_RADIO_ActionPacketIsr+0x228>)
10045a64:	689b      	ldr	r3, [r3, #8]
10045a66:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
10045a68:	4b7d      	ldr	r3, [pc, #500]	@ (10045c60 <HAL_RADIO_ActionPacketIsr+0x228>)
10045a6a:	689b      	ldr	r3, [r3, #8]
10045a6c:	0018      	movs	r0, r3
10045a6e:	4790      	blx	r2
10045a70:	0003      	movs	r3, r0
10045a72:	2b01      	cmp	r3, #1
10045a74:	d104      	bne.n	10045a80 <HAL_RADIO_ActionPacketIsr+0x48>
    {
      next = globalParameters.current_action_packet->next_true;
10045a76:	4b7a      	ldr	r3, [pc, #488]	@ (10045c60 <HAL_RADIO_ActionPacketIsr+0x228>)
10045a78:	689b      	ldr	r3, [r3, #8]
10045a7a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
10045a7c:	61fb      	str	r3, [r7, #28]
10045a7e:	e003      	b.n	10045a88 <HAL_RADIO_ActionPacketIsr+0x50>
    }
    else
    {
      next = globalParameters.current_action_packet->next_false;
10045a80:	4b77      	ldr	r3, [pc, #476]	@ (10045c60 <HAL_RADIO_ActionPacketIsr+0x228>)
10045a82:	689b      	ldr	r3, [r3, #8]
10045a84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
10045a86:	61fb      	str	r3, [r7, #28]
    }
    /*The radio event is started. So here a check on the next packet of the event is made*/
    if (next == NULL_0)
10045a88:	69fb      	ldr	r3, [r7, #28]
10045a8a:	2b00      	cmp	r3, #0
10045a8c:	d116      	bne.n	10045abc <HAL_RADIO_ActionPacketIsr+0x84>
    {
      /* timer2 off */
      LL_RADIO_TIMER_DisableTimer1(BLUE);
10045a8e:	23c0      	movs	r3, #192	@ 0xc0
10045a90:	05db      	lsls	r3, r3, #23
10045a92:	0018      	movs	r0, r3
10045a94:	f7ff fbce 	bl	10045234 <LL_RADIO_TIMER_DisableTimer1>
      LL_RADIO_TIMER_DisableTimer2(BLUE);
10045a98:	23c0      	movs	r3, #192	@ 0xc0
10045a9a:	05db      	lsls	r3, r3, #23
10045a9c:	0018      	movs	r0, r3
10045a9e:	f7ff fbd8 	bl	10045252 <LL_RADIO_TIMER_DisableTimer2>
      LL_RADIO_TIMER_DisableBLEWakeupTimer(WAKEUP);
10045aa2:	4b70      	ldr	r3, [pc, #448]	@ (10045c64 <HAL_RADIO_ActionPacketIsr+0x22c>)
10045aa4:	0018      	movs	r0, r3
10045aa6:	f7ff fbe3 	bl	10045270 <LL_RADIO_TIMER_DisableBLEWakeupTimer>
      MODIFY_REG(BLUEGLOB->BYTE4, GLOBAL_BYTE4_ACTIVE_Msk, BLUE_IDLE_0);
10045aaa:	4b6f      	ldr	r3, [pc, #444]	@ (10045c68 <HAL_RADIO_ActionPacketIsr+0x230>)
10045aac:	791b      	ldrb	r3, [r3, #4]
10045aae:	b2db      	uxtb	r3, r3
10045ab0:	4a6d      	ldr	r2, [pc, #436]	@ (10045c68 <HAL_RADIO_ActionPacketIsr+0x230>)
10045ab2:	217f      	movs	r1, #127	@ 0x7f
10045ab4:	400b      	ands	r3, r1
10045ab6:	b2db      	uxtb	r3, r3
10045ab8:	7113      	strb	r3, [r2, #4]
10045aba:	e099      	b.n	10045bf0 <HAL_RADIO_ActionPacketIsr+0x1b8>
    }
    else
    {
      BLUEGLOB->BYTE4 = (next->StateMachineNo | GLOBAL_BYTE4_ACTIVE_Msk);
10045abc:	69fb      	ldr	r3, [r7, #28]
10045abe:	781b      	ldrb	r3, [r3, #0]
10045ac0:	4969      	ldr	r1, [pc, #420]	@ (10045c68 <HAL_RADIO_ActionPacketIsr+0x230>)
10045ac2:	2280      	movs	r2, #128	@ 0x80
10045ac4:	4252      	negs	r2, r2
10045ac6:	4313      	orrs	r3, r2
10045ac8:	b2db      	uxtb	r3, r3
10045aca:	710b      	strb	r3, [r1, #4]
      p = &next->trans_packet;
10045acc:	69fb      	ldr	r3, [r7, #28]
10045ace:	3318      	adds	r3, #24
10045ad0:	61bb      	str	r3, [r7, #24]
      MODIFY_REG((bluedata + next->StateMachineNo)->BYTE0, STATEMACH_BYTE0_TXMODE_Msk,
10045ad2:	69fb      	ldr	r3, [r7, #28]
10045ad4:	781b      	ldrb	r3, [r3, #0]
10045ad6:	001a      	movs	r2, r3
10045ad8:	0013      	movs	r3, r2
10045ada:	009b      	lsls	r3, r3, #2
10045adc:	189b      	adds	r3, r3, r2
10045ade:	011b      	lsls	r3, r3, #4
10045ae0:	4a62      	ldr	r2, [pc, #392]	@ (10045c6c <HAL_RADIO_ActionPacketIsr+0x234>)
10045ae2:	4694      	mov	ip, r2
10045ae4:	4463      	add	r3, ip
10045ae6:	781b      	ldrb	r3, [r3, #0]
10045ae8:	b2db      	uxtb	r3, r3
10045aea:	b25b      	sxtb	r3, r3
10045aec:	227f      	movs	r2, #127	@ 0x7f
10045aee:	4013      	ands	r3, r2
10045af0:	b25a      	sxtb	r2, r3
10045af2:	69fb      	ldr	r3, [r7, #28]
10045af4:	213c      	movs	r1, #60	@ 0x3c
10045af6:	5c5b      	ldrb	r3, [r3, r1]
10045af8:	b25b      	sxtb	r3, r3
10045afa:	4313      	orrs	r3, r2
10045afc:	b259      	sxtb	r1, r3
10045afe:	69fb      	ldr	r3, [r7, #28]
10045b00:	781b      	ldrb	r3, [r3, #0]
10045b02:	001a      	movs	r2, r3
10045b04:	0013      	movs	r3, r2
10045b06:	009b      	lsls	r3, r3, #2
10045b08:	189b      	adds	r3, r3, r2
10045b0a:	011b      	lsls	r3, r3, #4
10045b0c:	4a57      	ldr	r2, [pc, #348]	@ (10045c6c <HAL_RADIO_ActionPacketIsr+0x234>)
10045b0e:	4694      	mov	ip, r2
10045b10:	4463      	add	r3, ip
10045b12:	b2ca      	uxtb	r2, r1
10045b14:	701a      	strb	r2, [r3, #0]
                 next->trans_config);/* Transmission or reception*/
      (bluedata + next->StateMachineNo)->TXPOINT = BLUE_STRUCT_PTR_CAST(p);
10045b16:	69fb      	ldr	r3, [r7, #28]
10045b18:	781b      	ldrb	r3, [r3, #0]
10045b1a:	001a      	movs	r2, r3
10045b1c:	0013      	movs	r3, r2
10045b1e:	009b      	lsls	r3, r3, #2
10045b20:	189b      	adds	r3, r3, r2
10045b22:	011b      	lsls	r3, r3, #4
10045b24:	4a51      	ldr	r2, [pc, #324]	@ (10045c6c <HAL_RADIO_ActionPacketIsr+0x234>)
10045b26:	4694      	mov	ip, r2
10045b28:	4463      	add	r3, ip
10045b2a:	69ba      	ldr	r2, [r7, #24]
10045b2c:	605a      	str	r2, [r3, #4]
      (bluedata + next->StateMachineNo)->RCVPOINT = BLUE_STRUCT_PTR_CAST(p);
10045b2e:	69fb      	ldr	r3, [r7, #28]
10045b30:	781b      	ldrb	r3, [r3, #0]
10045b32:	001a      	movs	r2, r3
10045b34:	0013      	movs	r3, r2
10045b36:	009b      	lsls	r3, r3, #2
10045b38:	189b      	adds	r3, r3, r2
10045b3a:	011b      	lsls	r3, r3, #4
10045b3c:	4a4b      	ldr	r2, [pc, #300]	@ (10045c6c <HAL_RADIO_ActionPacketIsr+0x234>)
10045b3e:	4694      	mov	ip, r2
10045b40:	4463      	add	r3, ip
10045b42:	69ba      	ldr	r2, [r7, #24]
10045b44:	609a      	str	r2, [r3, #8]
      (bluedata + next->StateMachineNo)->MAXRECEIVEDLENGTH = next->MaxReceiveLength;
10045b46:	69fb      	ldr	r3, [r7, #28]
10045b48:	781b      	ldrb	r3, [r3, #0]
10045b4a:	001a      	movs	r2, r3
10045b4c:	0013      	movs	r3, r2
10045b4e:	009b      	lsls	r3, r3, #2
10045b50:	189b      	adds	r3, r3, r2
10045b52:	011b      	lsls	r3, r3, #4
10045b54:	4a45      	ldr	r2, [pc, #276]	@ (10045c6c <HAL_RADIO_ActionPacketIsr+0x234>)
10045b56:	4694      	mov	ip, r2
10045b58:	4463      	add	r3, ip
10045b5a:	69fa      	ldr	r2, [r7, #28]
10045b5c:	7891      	ldrb	r1, [r2, #2]
10045b5e:	222b      	movs	r2, #43	@ 0x2b
10045b60:	5499      	strb	r1, [r3, r2]

      /* Packet will execute on time specified by WakeupTime */
      if ((next->ActionTag & TIMER_WAKEUP) != 0)
10045b62:	69fb      	ldr	r3, [r7, #28]
10045b64:	785b      	ldrb	r3, [r3, #1]
10045b66:	001a      	movs	r2, r3
10045b68:	2304      	movs	r3, #4
10045b6a:	4013      	ands	r3, r2
10045b6c:	d040      	beq.n	10045bf0 <HAL_RADIO_ActionPacketIsr+0x1b8>
      {
        /* timer1/2 off */
        LL_RADIO_TIMER_DisableTimer1(BLUE);
10045b6e:	23c0      	movs	r3, #192	@ 0xc0
10045b70:	05db      	lsls	r3, r3, #23
10045b72:	0018      	movs	r0, r3
10045b74:	f7ff fb5e 	bl	10045234 <LL_RADIO_TIMER_DisableTimer1>
        LL_RADIO_TIMER_DisableTimer2(BLUE);
10045b78:	23c0      	movs	r3, #192	@ 0xc0
10045b7a:	05db      	lsls	r3, r3, #23
10045b7c:	0018      	movs	r0, r3
10045b7e:	f7ff fb68 	bl	10045252 <LL_RADIO_TIMER_DisableTimer2>

        /* program timer at next->wakeuptime */
        if ((next->ActionTag & RELATIVE) != 0)
10045b82:	69fb      	ldr	r3, [r7, #28]
10045b84:	785b      	ldrb	r3, [r3, #1]
10045b86:	001a      	movs	r2, r3
10045b88:	2320      	movs	r3, #32
10045b8a:	4013      	ands	r3, r2
10045b8c:	d01e      	beq.n	10045bcc <HAL_RADIO_ActionPacketIsr+0x194>
        {
          time = HAL_RADIO_TIMER_GetCurrentSysTime() + HAL_RADIO_TIMER_UsToSystime(next->WakeupTime);
10045b8e:	f001 fa45 	bl	1004701c <HAL_RADIO_TIMER_GetCurrentSysTime>
10045b92:	0002      	movs	r2, r0
10045b94:	000b      	movs	r3, r1
10045b96:	0014      	movs	r4, r2
10045b98:	69fb      	ldr	r3, [r7, #28]
10045b9a:	685b      	ldr	r3, [r3, #4]
10045b9c:	0018      	movs	r0, r3
10045b9e:	f001 fa19 	bl	10046fd4 <HAL_RADIO_TIMER_UsToSystime>
10045ba2:	0003      	movs	r3, r0
10045ba4:	18e3      	adds	r3, r4, r3
10045ba6:	617b      	str	r3, [r7, #20]
          HAL_RADIO_TIMER_SetRadioTimerValue(time, (next->trans_config == STATEMACH_BYTE0_TXMODE_Msk), (next->ActionTag & PLL_TRIG));
10045ba8:	69fb      	ldr	r3, [r7, #28]
10045baa:	223c      	movs	r2, #60	@ 0x3c
10045bac:	5c9b      	ldrb	r3, [r3, r2]
10045bae:	3b80      	subs	r3, #128	@ 0x80
10045bb0:	425a      	negs	r2, r3
10045bb2:	4153      	adcs	r3, r2
10045bb4:	b2db      	uxtb	r3, r3
10045bb6:	0019      	movs	r1, r3
10045bb8:	69fb      	ldr	r3, [r7, #28]
10045bba:	785b      	ldrb	r3, [r3, #1]
10045bbc:	2201      	movs	r2, #1
10045bbe:	4013      	ands	r3, r2
10045bc0:	b2da      	uxtb	r2, r3
10045bc2:	697b      	ldr	r3, [r7, #20]
10045bc4:	0018      	movs	r0, r3
10045bc6:	f001 f911 	bl	10046dec <HAL_RADIO_TIMER_SetRadioTimerValue>
10045bca:	e011      	b.n	10045bf0 <HAL_RADIO_ActionPacketIsr+0x1b8>
        }
        else
        {
          HAL_RADIO_TIMER_SetRadioTimerValue(next->WakeupTime, (next->trans_config == STATEMACH_BYTE0_TXMODE_Msk), (next->ActionTag & PLL_TRIG));
10045bcc:	69fb      	ldr	r3, [r7, #28]
10045bce:	6858      	ldr	r0, [r3, #4]
10045bd0:	69fb      	ldr	r3, [r7, #28]
10045bd2:	223c      	movs	r2, #60	@ 0x3c
10045bd4:	5c9b      	ldrb	r3, [r3, r2]
10045bd6:	3b80      	subs	r3, #128	@ 0x80
10045bd8:	425a      	negs	r2, r3
10045bda:	4153      	adcs	r3, r2
10045bdc:	b2db      	uxtb	r3, r3
10045bde:	0019      	movs	r1, r3
10045be0:	69fb      	ldr	r3, [r7, #28]
10045be2:	785b      	ldrb	r3, [r3, #1]
10045be4:	2201      	movs	r2, #1
10045be6:	4013      	ands	r3, r2
10045be8:	b2db      	uxtb	r3, r3
10045bea:	001a      	movs	r2, r3
10045bec:	f001 f8fe 	bl	10046dec <HAL_RADIO_TIMER_SetRadioTimerValue>
        /* back to back */
      }
    }

    /* Accept the packet even with CRC Error */
    if (((int_flags & BLUE_INTERRUPT1REG_RCVOK) != 0) || ((int_flags & BLUE_INTERRUPT1REG_RCVCRCERR) != 0))
10045bf0:	687b      	ldr	r3, [r7, #4]
10045bf2:	2b00      	cmp	r3, #0
10045bf4:	db04      	blt.n	10045c00 <HAL_RADIO_ActionPacketIsr+0x1c8>
10045bf6:	687a      	ldr	r2, [r7, #4]
10045bf8:	2380      	movs	r3, #128	@ 0x80
10045bfa:	05db      	lsls	r3, r3, #23
10045bfc:	4013      	ands	r3, r2
10045bfe:	d012      	beq.n	10045c26 <HAL_RADIO_ActionPacketIsr+0x1ee>
    {

      uint64_t current_system_time;
      /* read RSSI */
      globalParameters.current_action_packet->rssi =  HAL_RADIO_ReadRSSI();
10045c00:	f7ff fe42 	bl	10045888 <HAL_RADIO_ReadRSSI>
10045c04:	0003      	movs	r3, r0
10045c06:	001a      	movs	r2, r3
10045c08:	4b15      	ldr	r3, [pc, #84]	@ (10045c60 <HAL_RADIO_ActionPacketIsr+0x228>)
10045c0a:	689b      	ldr	r3, [r3, #8]
10045c0c:	615a      	str	r2, [r3, #20]

      /* bluedata->config = bluedata->config ^ 0x80 ;  toggle NESN bit
      bluedata->config = bluedata->config & 0x7F ;  //reset NESN bit */

      /* read time stamp */
      globalParameters.current_action_packet->timestamp_receive = HAL_RADIO_TIMER_GetAnchorPoint(&current_system_time);
10045c0e:	2308      	movs	r3, #8
10045c10:	18fb      	adds	r3, r7, r3
10045c12:	0018      	movs	r0, r3
10045c14:	f001 f8d6 	bl	10046dc4 <HAL_RADIO_TIMER_GetAnchorPoint>
10045c18:	0002      	movs	r2, r0
10045c1a:	000b      	movs	r3, r1
10045c1c:	4910      	ldr	r1, [pc, #64]	@ (10045c60 <HAL_RADIO_ActionPacketIsr+0x228>)
10045c1e:	6889      	ldr	r1, [r1, #8]
10045c20:	0013      	movs	r3, r2
10045c22:	610b      	str	r3, [r1, #16]
    {
10045c24:	e00b      	b.n	10045c3e <HAL_RADIO_ActionPacketIsr+0x206>
    }
    else if ((int_flags & BLUE_INTERRUPT1REG_RCVTIMEOUT) != 0)
10045c26:	687a      	ldr	r2, [r7, #4]
10045c28:	2380      	movs	r3, #128	@ 0x80
10045c2a:	04db      	lsls	r3, r3, #19
10045c2c:	4013      	ands	r3, r2
10045c2e:	d006      	beq.n	10045c3e <HAL_RADIO_ActionPacketIsr+0x206>
    {
      /* read RSSI even if a timeout happens */
      globalParameters.current_action_packet->rssi =  HAL_RADIO_ReadRSSI();
10045c30:	f7ff fe2a 	bl	10045888 <HAL_RADIO_ReadRSSI>
10045c34:	0003      	movs	r3, r0
10045c36:	001a      	movs	r2, r3
10045c38:	4b09      	ldr	r3, [pc, #36]	@ (10045c60 <HAL_RADIO_ActionPacketIsr+0x228>)
10045c3a:	689b      	ldr	r3, [r3, #8]
10045c3c:	615a      	str	r2, [r3, #20]
    }

    actionPacketBackup = globalParameters.current_action_packet;
10045c3e:	4b08      	ldr	r3, [pc, #32]	@ (10045c60 <HAL_RADIO_ActionPacketIsr+0x228>)
10045c40:	689b      	ldr	r3, [r3, #8]
10045c42:	613b      	str	r3, [r7, #16]
    globalParameters.current_action_packet = next;
10045c44:	4b06      	ldr	r3, [pc, #24]	@ (10045c60 <HAL_RADIO_ActionPacketIsr+0x228>)
10045c46:	69fa      	ldr	r2, [r7, #28]
10045c48:	609a      	str	r2, [r3, #8]
    actionPacketBackup->dataRoutine(actionPacketBackup, next);
10045c4a:	693b      	ldr	r3, [r7, #16]
10045c4c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
10045c4e:	69f9      	ldr	r1, [r7, #28]
10045c50:	693a      	ldr	r2, [r7, #16]
10045c52:	0010      	movs	r0, r2
10045c54:	4798      	blx	r3
  }

  return ;
10045c56:	46c0      	nop			@ (mov r8, r8)
10045c58:	46c0      	nop			@ (mov r8, r8)
}
10045c5a:	46bd      	mov	sp, r7
10045c5c:	b009      	add	sp, #36	@ 0x24
10045c5e:	bd90      	pop	{r4, r7, pc}
10045c60:	20000848 	.word	0x20000848
10045c64:	60001800 	.word	0x60001800
10045c68:	200000c0 	.word	0x200000c0
10045c6c:	200000dc 	.word	0x200000dc

10045c70 <HAL_RADIO_SetChannelMap>:
  * @param  StateMachineNo: state machine number in multi state.
  * @param  chan_remap: a 37-bit vector, one bit per channel from 0 to 36, with the LSB corresponding to the channel 0
  * @retval None
  */
void HAL_RADIO_SetChannelMap(uint8_t StateMachineNo, uint8_t *chan_remap)
{
10045c70:	b590      	push	{r4, r7, lr}
10045c72:	b085      	sub	sp, #20
10045c74:	af00      	add	r7, sp, #0
10045c76:	0002      	movs	r2, r0
10045c78:	6039      	str	r1, [r7, #0]
10045c7a:	1dfb      	adds	r3, r7, #7
10045c7c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_STATE_VALID(StateMachineNo));

  for (uint8_t i = 0; i < 5; i++)
10045c7e:	230f      	movs	r3, #15
10045c80:	18fb      	adds	r3, r7, r3
10045c82:	2200      	movs	r2, #0
10045c84:	701a      	strb	r2, [r3, #0]
10045c86:	e01a      	b.n	10045cbe <HAL_RADIO_SetChannelMap+0x4e>
  {
    (bluedata + StateMachineNo)->USEDCHANNELFLAGS[i] = chan_remap[i];
10045c88:	200f      	movs	r0, #15
10045c8a:	183b      	adds	r3, r7, r0
10045c8c:	781b      	ldrb	r3, [r3, #0]
10045c8e:	683a      	ldr	r2, [r7, #0]
10045c90:	18d1      	adds	r1, r2, r3
10045c92:	1dfb      	adds	r3, r7, #7
10045c94:	781a      	ldrb	r2, [r3, #0]
10045c96:	0013      	movs	r3, r2
10045c98:	009b      	lsls	r3, r3, #2
10045c9a:	189b      	adds	r3, r3, r2
10045c9c:	011b      	lsls	r3, r3, #4
10045c9e:	4a19      	ldr	r2, [pc, #100]	@ (10045d04 <HAL_RADIO_SetChannelMap+0x94>)
10045ca0:	189a      	adds	r2, r3, r2
10045ca2:	0004      	movs	r4, r0
10045ca4:	183b      	adds	r3, r7, r0
10045ca6:	781b      	ldrb	r3, [r3, #0]
10045ca8:	7808      	ldrb	r0, [r1, #0]
10045caa:	212e      	movs	r1, #46	@ 0x2e
10045cac:	18d3      	adds	r3, r2, r3
10045cae:	185b      	adds	r3, r3, r1
10045cb0:	1c02      	adds	r2, r0, #0
10045cb2:	701a      	strb	r2, [r3, #0]
  for (uint8_t i = 0; i < 5; i++)
10045cb4:	193b      	adds	r3, r7, r4
10045cb6:	781a      	ldrb	r2, [r3, #0]
10045cb8:	193b      	adds	r3, r7, r4
10045cba:	3201      	adds	r2, #1
10045cbc:	701a      	strb	r2, [r3, #0]
10045cbe:	230f      	movs	r3, #15
10045cc0:	18fb      	adds	r3, r7, r3
10045cc2:	781b      	ldrb	r3, [r3, #0]
10045cc4:	2b04      	cmp	r3, #4
10045cc6:	d9df      	bls.n	10045c88 <HAL_RADIO_SetChannelMap+0x18>
  }
  (bluedata + StateMachineNo)->USEDCHANNELFLAGS[4] &= 0x1F;
10045cc8:	1dfb      	adds	r3, r7, #7
10045cca:	781a      	ldrb	r2, [r3, #0]
10045ccc:	0013      	movs	r3, r2
10045cce:	009b      	lsls	r3, r3, #2
10045cd0:	189b      	adds	r3, r3, r2
10045cd2:	011b      	lsls	r3, r3, #4
10045cd4:	4a0b      	ldr	r2, [pc, #44]	@ (10045d04 <HAL_RADIO_SetChannelMap+0x94>)
10045cd6:	4694      	mov	ip, r2
10045cd8:	4463      	add	r3, ip
10045cda:	2232      	movs	r2, #50	@ 0x32
10045cdc:	5c9b      	ldrb	r3, [r3, r2]
10045cde:	b2d9      	uxtb	r1, r3
10045ce0:	1dfb      	adds	r3, r7, #7
10045ce2:	781a      	ldrb	r2, [r3, #0]
10045ce4:	0013      	movs	r3, r2
10045ce6:	009b      	lsls	r3, r3, #2
10045ce8:	189b      	adds	r3, r3, r2
10045cea:	011b      	lsls	r3, r3, #4
10045cec:	4a05      	ldr	r2, [pc, #20]	@ (10045d04 <HAL_RADIO_SetChannelMap+0x94>)
10045cee:	4694      	mov	ip, r2
10045cf0:	4463      	add	r3, ip
10045cf2:	221f      	movs	r2, #31
10045cf4:	400a      	ands	r2, r1
10045cf6:	b2d1      	uxtb	r1, r2
10045cf8:	2232      	movs	r2, #50	@ 0x32
10045cfa:	5499      	strb	r1, [r3, r2]
  return;
10045cfc:	46c0      	nop			@ (mov r8, r8)
}
10045cfe:	46bd      	mov	sp, r7
10045d00:	b005      	add	sp, #20
10045d02:	bd90      	pop	{r4, r7, pc}
10045d04:	200000dc 	.word	0x200000dc

10045d08 <HAL_RADIO_SetChannel>:
  * @param  channel: ble channel index. From 0 to 39.
  * @param  channel_increment: determines the hoping value.
  * @retval None
  */
void HAL_RADIO_SetChannel(uint8_t StateMachineNo, uint8_t channel, uint8_t channel_increment)
{
10045d08:	b590      	push	{r4, r7, lr}
10045d0a:	b083      	sub	sp, #12
10045d0c:	af00      	add	r7, sp, #0
10045d0e:	0004      	movs	r4, r0
10045d10:	0008      	movs	r0, r1
10045d12:	0011      	movs	r1, r2
10045d14:	1dfb      	adds	r3, r7, #7
10045d16:	1c22      	adds	r2, r4, #0
10045d18:	701a      	strb	r2, [r3, #0]
10045d1a:	1dbb      	adds	r3, r7, #6
10045d1c:	1c02      	adds	r2, r0, #0
10045d1e:	701a      	strb	r2, [r3, #0]
10045d20:	1d7b      	adds	r3, r7, #5
10045d22:	1c0a      	adds	r2, r1, #0
10045d24:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_STATE_VALID(StateMachineNo));
  assert_param(IS_RFCHANNEL_VALID(channel));

  MODIFY_REG((bluedata + StateMachineNo)->BYTE0, STATEMACH_BYTE0_UCHAN_Msk, channel);
10045d26:	1dfb      	adds	r3, r7, #7
10045d28:	781a      	ldrb	r2, [r3, #0]
10045d2a:	0013      	movs	r3, r2
10045d2c:	009b      	lsls	r3, r3, #2
10045d2e:	189b      	adds	r3, r3, r2
10045d30:	011b      	lsls	r3, r3, #4
10045d32:	4a24      	ldr	r2, [pc, #144]	@ (10045dc4 <HAL_RADIO_SetChannel+0xbc>)
10045d34:	4694      	mov	ip, r2
10045d36:	4463      	add	r3, ip
10045d38:	781b      	ldrb	r3, [r3, #0]
10045d3a:	b2db      	uxtb	r3, r3
10045d3c:	b25b      	sxtb	r3, r3
10045d3e:	223f      	movs	r2, #63	@ 0x3f
10045d40:	4393      	bics	r3, r2
10045d42:	b25a      	sxtb	r2, r3
10045d44:	1dbb      	adds	r3, r7, #6
10045d46:	781b      	ldrb	r3, [r3, #0]
10045d48:	b25b      	sxtb	r3, r3
10045d4a:	4313      	orrs	r3, r2
10045d4c:	b259      	sxtb	r1, r3
10045d4e:	1dfb      	adds	r3, r7, #7
10045d50:	781a      	ldrb	r2, [r3, #0]
10045d52:	0013      	movs	r3, r2
10045d54:	009b      	lsls	r3, r3, #2
10045d56:	189b      	adds	r3, r3, r2
10045d58:	011b      	lsls	r3, r3, #4
10045d5a:	4a1a      	ldr	r2, [pc, #104]	@ (10045dc4 <HAL_RADIO_SetChannel+0xbc>)
10045d5c:	4694      	mov	ip, r2
10045d5e:	4463      	add	r3, ip
10045d60:	b2ca      	uxtb	r2, r1
10045d62:	701a      	strb	r2, [r3, #0]
  /*if TxRxPack.incchan = 0, then remap_chan is used as physical channel*/
  MODIFY_REG((bluedata + StateMachineNo)->BYTE1, STATEMACH_BYTE1_REMAP_CHAN_Msk, channel);
10045d64:	1dfb      	adds	r3, r7, #7
10045d66:	781a      	ldrb	r2, [r3, #0]
10045d68:	0013      	movs	r3, r2
10045d6a:	009b      	lsls	r3, r3, #2
10045d6c:	189b      	adds	r3, r3, r2
10045d6e:	011b      	lsls	r3, r3, #4
10045d70:	4a14      	ldr	r2, [pc, #80]	@ (10045dc4 <HAL_RADIO_SetChannel+0xbc>)
10045d72:	4694      	mov	ip, r2
10045d74:	4463      	add	r3, ip
10045d76:	785b      	ldrb	r3, [r3, #1]
10045d78:	b2db      	uxtb	r3, r3
10045d7a:	b25b      	sxtb	r3, r3
10045d7c:	223f      	movs	r2, #63	@ 0x3f
10045d7e:	4393      	bics	r3, r2
10045d80:	b25a      	sxtb	r2, r3
10045d82:	1dbb      	adds	r3, r7, #6
10045d84:	781b      	ldrb	r3, [r3, #0]
10045d86:	b25b      	sxtb	r3, r3
10045d88:	4313      	orrs	r3, r2
10045d8a:	b259      	sxtb	r1, r3
10045d8c:	1dfb      	adds	r3, r7, #7
10045d8e:	781a      	ldrb	r2, [r3, #0]
10045d90:	0013      	movs	r3, r2
10045d92:	009b      	lsls	r3, r3, #2
10045d94:	189b      	adds	r3, r3, r2
10045d96:	011b      	lsls	r3, r3, #4
10045d98:	4a0a      	ldr	r2, [pc, #40]	@ (10045dc4 <HAL_RADIO_SetChannel+0xbc>)
10045d9a:	4694      	mov	ip, r2
10045d9c:	4463      	add	r3, ip
10045d9e:	b2ca      	uxtb	r2, r1
10045da0:	705a      	strb	r2, [r3, #1]
  (bluedata + StateMachineNo)->HOPINCR = channel_increment;
10045da2:	1dfb      	adds	r3, r7, #7
10045da4:	781a      	ldrb	r2, [r3, #0]
10045da6:	0013      	movs	r3, r2
10045da8:	009b      	lsls	r3, r3, #2
10045daa:	189b      	adds	r3, r3, r2
10045dac:	011b      	lsls	r3, r3, #4
10045dae:	4a05      	ldr	r2, [pc, #20]	@ (10045dc4 <HAL_RADIO_SetChannel+0xbc>)
10045db0:	4694      	mov	ip, r2
10045db2:	4463      	add	r3, ip
10045db4:	1d7a      	adds	r2, r7, #5
10045db6:	212d      	movs	r1, #45	@ 0x2d
10045db8:	7812      	ldrb	r2, [r2, #0]
10045dba:	545a      	strb	r2, [r3, r1]
  return;
10045dbc:	46c0      	nop			@ (mov r8, r8)
}
10045dbe:	46bd      	mov	sp, r7
10045dc0:	b003      	add	sp, #12
10045dc2:	bd90      	pop	{r4, r7, pc}
10045dc4:	200000dc 	.word	0x200000dc

10045dc8 <HAL_RADIO_SetTxAttributes>:
  * @param  crc_init: CRC initialization value.
  *         This value must be 0x555555 when channel frequency is one of these values: 37, 38, 39.
  * @retval None
  */
void HAL_RADIO_SetTxAttributes(uint8_t StateMachineNo, uint32_t NetworkID, uint32_t crc_init)
{
10045dc8:	b580      	push	{r7, lr}
10045dca:	b084      	sub	sp, #16
10045dcc:	af00      	add	r7, sp, #0
10045dce:	60b9      	str	r1, [r7, #8]
10045dd0:	607a      	str	r2, [r7, #4]
10045dd2:	210f      	movs	r1, #15
10045dd4:	187b      	adds	r3, r7, r1
10045dd6:	1c02      	adds	r2, r0, #0
10045dd8:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_STATE_VALID(StateMachineNo));

  (bluedata + StateMachineNo)->ACCADDR = NetworkID;
10045dda:	0008      	movs	r0, r1
10045ddc:	183b      	adds	r3, r7, r0
10045dde:	781a      	ldrb	r2, [r3, #0]
10045de0:	0013      	movs	r3, r2
10045de2:	009b      	lsls	r3, r3, #2
10045de4:	189b      	adds	r3, r3, r2
10045de6:	011b      	lsls	r3, r3, #4
10045de8:	4a18      	ldr	r2, [pc, #96]	@ (10045e4c <HAL_RADIO_SetTxAttributes+0x84>)
10045dea:	4694      	mov	ip, r2
10045dec:	4463      	add	r3, ip
10045dee:	68ba      	ldr	r2, [r7, #8]
10045df0:	625a      	str	r2, [r3, #36]	@ 0x24
  (bluedata + StateMachineNo)->CRCINIT[0] = crc_init;
10045df2:	183b      	adds	r3, r7, r0
10045df4:	781a      	ldrb	r2, [r3, #0]
10045df6:	0013      	movs	r3, r2
10045df8:	009b      	lsls	r3, r3, #2
10045dfa:	189b      	adds	r3, r3, r2
10045dfc:	011b      	lsls	r3, r3, #4
10045dfe:	4a13      	ldr	r2, [pc, #76]	@ (10045e4c <HAL_RADIO_SetTxAttributes+0x84>)
10045e00:	4694      	mov	ip, r2
10045e02:	4463      	add	r3, ip
10045e04:	687a      	ldr	r2, [r7, #4]
10045e06:	b2d1      	uxtb	r1, r2
10045e08:	2228      	movs	r2, #40	@ 0x28
10045e0a:	5499      	strb	r1, [r3, r2]
  (bluedata + StateMachineNo)->CRCINIT[1] = crc_init >> 8;
10045e0c:	687b      	ldr	r3, [r7, #4]
10045e0e:	0a19      	lsrs	r1, r3, #8
10045e10:	183b      	adds	r3, r7, r0
10045e12:	781a      	ldrb	r2, [r3, #0]
10045e14:	0013      	movs	r3, r2
10045e16:	009b      	lsls	r3, r3, #2
10045e18:	189b      	adds	r3, r3, r2
10045e1a:	011b      	lsls	r3, r3, #4
10045e1c:	4a0b      	ldr	r2, [pc, #44]	@ (10045e4c <HAL_RADIO_SetTxAttributes+0x84>)
10045e1e:	4694      	mov	ip, r2
10045e20:	4463      	add	r3, ip
10045e22:	b2c9      	uxtb	r1, r1
10045e24:	2229      	movs	r2, #41	@ 0x29
10045e26:	5499      	strb	r1, [r3, r2]
  (bluedata + StateMachineNo)->CRCINIT[2] = crc_init >> 16;
10045e28:	687b      	ldr	r3, [r7, #4]
10045e2a:	0c19      	lsrs	r1, r3, #16
10045e2c:	183b      	adds	r3, r7, r0
10045e2e:	781a      	ldrb	r2, [r3, #0]
10045e30:	0013      	movs	r3, r2
10045e32:	009b      	lsls	r3, r3, #2
10045e34:	189b      	adds	r3, r3, r2
10045e36:	011b      	lsls	r3, r3, #4
10045e38:	4a04      	ldr	r2, [pc, #16]	@ (10045e4c <HAL_RADIO_SetTxAttributes+0x84>)
10045e3a:	4694      	mov	ip, r2
10045e3c:	4463      	add	r3, ip
10045e3e:	b2c9      	uxtb	r1, r1
10045e40:	222a      	movs	r2, #42	@ 0x2a
10045e42:	5499      	strb	r1, [r3, r2]
  return;
10045e44:	46c0      	nop			@ (mov r8, r8)
}
10045e46:	46bd      	mov	sp, r7
10045e48:	b004      	add	sp, #16
10045e4a:	bd80      	pop	{r7, pc}
10045e4c:	200000dc 	.word	0x200000dc

10045e50 <HAL_RADIO_SetGlobalReceiveTimeout>:
  *         and access address detection.
  * @param  ReceiveTimeout: receive window length in microseconds.
  * @retval None
  */
void HAL_RADIO_SetGlobalReceiveTimeout(uint32_t ReceiveTimeout)
{
10045e50:	b580      	push	{r7, lr}
10045e52:	b082      	sub	sp, #8
10045e54:	af00      	add	r7, sp, #0
10045e56:	6078      	str	r0, [r7, #4]
  /* Set the Rx window Timeout expressed as: 4^(RCVTIMEOUT_19_18)*RCVTIMEOUT_17_0 */
  if (ReceiveTimeout < 0x40000)
10045e58:	687a      	ldr	r2, [r7, #4]
10045e5a:	2380      	movs	r3, #128	@ 0x80
10045e5c:	02db      	lsls	r3, r3, #11
10045e5e:	429a      	cmp	r2, r3
10045e60:	d211      	bcs.n	10045e86 <HAL_RADIO_SetGlobalReceiveTimeout+0x36>
  {
    BLUEGLOB->RCVTIMEOUT[0] = (ReceiveTimeout)       & 0x000000FF;
10045e62:	4b3a      	ldr	r3, [pc, #232]	@ (10045f4c <HAL_RADIO_SetGlobalReceiveTimeout+0xfc>)
10045e64:	687a      	ldr	r2, [r7, #4]
10045e66:	b2d2      	uxtb	r2, r2
10045e68:	745a      	strb	r2, [r3, #17]
    BLUEGLOB->RCVTIMEOUT[1] = (ReceiveTimeout >> 8)  & 0x000000FF;
10045e6a:	687b      	ldr	r3, [r7, #4]
10045e6c:	0a1a      	lsrs	r2, r3, #8
10045e6e:	4b37      	ldr	r3, [pc, #220]	@ (10045f4c <HAL_RADIO_SetGlobalReceiveTimeout+0xfc>)
10045e70:	b2d2      	uxtb	r2, r2
10045e72:	749a      	strb	r2, [r3, #18]
    BLUEGLOB->RCVTIMEOUT[2] = (ReceiveTimeout >> 16) & 0x00000003;
10045e74:	687b      	ldr	r3, [r7, #4]
10045e76:	0c1b      	lsrs	r3, r3, #16
10045e78:	b2db      	uxtb	r3, r3
10045e7a:	4a34      	ldr	r2, [pc, #208]	@ (10045f4c <HAL_RADIO_SetGlobalReceiveTimeout+0xfc>)
10045e7c:	2103      	movs	r1, #3
10045e7e:	400b      	ands	r3, r1
10045e80:	b2db      	uxtb	r3, r3
10045e82:	74d3      	strb	r3, [r2, #19]
  }
  else
  {
    /* error */
  }
}
10045e84:	e05e      	b.n	10045f44 <HAL_RADIO_SetGlobalReceiveTimeout+0xf4>
  else if (ReceiveTimeout < 0x100000)
10045e86:	687a      	ldr	r2, [r7, #4]
10045e88:	2380      	movs	r3, #128	@ 0x80
10045e8a:	035b      	lsls	r3, r3, #13
10045e8c:	429a      	cmp	r2, r3
10045e8e:	d21a      	bcs.n	10045ec6 <HAL_RADIO_SetGlobalReceiveTimeout+0x76>
    BLUEGLOB->RCVTIMEOUT[0] = (ReceiveTimeout >> 2)  & 0x000000FF;
10045e90:	687b      	ldr	r3, [r7, #4]
10045e92:	089a      	lsrs	r2, r3, #2
10045e94:	4b2d      	ldr	r3, [pc, #180]	@ (10045f4c <HAL_RADIO_SetGlobalReceiveTimeout+0xfc>)
10045e96:	b2d2      	uxtb	r2, r2
10045e98:	745a      	strb	r2, [r3, #17]
    BLUEGLOB->RCVTIMEOUT[1] = (ReceiveTimeout >> 10) & 0x000000FF;
10045e9a:	687b      	ldr	r3, [r7, #4]
10045e9c:	0a9a      	lsrs	r2, r3, #10
10045e9e:	4b2b      	ldr	r3, [pc, #172]	@ (10045f4c <HAL_RADIO_SetGlobalReceiveTimeout+0xfc>)
10045ea0:	b2d2      	uxtb	r2, r2
10045ea2:	749a      	strb	r2, [r3, #18]
    BLUEGLOB->RCVTIMEOUT[2] = (ReceiveTimeout >> 18) & 0x00000003;
10045ea4:	687b      	ldr	r3, [r7, #4]
10045ea6:	0c9b      	lsrs	r3, r3, #18
10045ea8:	b2db      	uxtb	r3, r3
10045eaa:	4a28      	ldr	r2, [pc, #160]	@ (10045f4c <HAL_RADIO_SetGlobalReceiveTimeout+0xfc>)
10045eac:	2103      	movs	r1, #3
10045eae:	400b      	ands	r3, r1
10045eb0:	b2db      	uxtb	r3, r3
10045eb2:	74d3      	strb	r3, [r2, #19]
    BLUEGLOB->RCVTIMEOUT[2] |= 0x04;
10045eb4:	4b25      	ldr	r3, [pc, #148]	@ (10045f4c <HAL_RADIO_SetGlobalReceiveTimeout+0xfc>)
10045eb6:	7cdb      	ldrb	r3, [r3, #19]
10045eb8:	b2db      	uxtb	r3, r3
10045eba:	4a24      	ldr	r2, [pc, #144]	@ (10045f4c <HAL_RADIO_SetGlobalReceiveTimeout+0xfc>)
10045ebc:	2104      	movs	r1, #4
10045ebe:	430b      	orrs	r3, r1
10045ec0:	b2db      	uxtb	r3, r3
10045ec2:	74d3      	strb	r3, [r2, #19]
}
10045ec4:	e03e      	b.n	10045f44 <HAL_RADIO_SetGlobalReceiveTimeout+0xf4>
  else if (ReceiveTimeout < 0x400000)
10045ec6:	687a      	ldr	r2, [r7, #4]
10045ec8:	2380      	movs	r3, #128	@ 0x80
10045eca:	03db      	lsls	r3, r3, #15
10045ecc:	429a      	cmp	r2, r3
10045ece:	d21a      	bcs.n	10045f06 <HAL_RADIO_SetGlobalReceiveTimeout+0xb6>
    BLUEGLOB->RCVTIMEOUT[0] = (ReceiveTimeout >> 4)  & 0x000000FF;
10045ed0:	687b      	ldr	r3, [r7, #4]
10045ed2:	091a      	lsrs	r2, r3, #4
10045ed4:	4b1d      	ldr	r3, [pc, #116]	@ (10045f4c <HAL_RADIO_SetGlobalReceiveTimeout+0xfc>)
10045ed6:	b2d2      	uxtb	r2, r2
10045ed8:	745a      	strb	r2, [r3, #17]
    BLUEGLOB->RCVTIMEOUT[1] = (ReceiveTimeout >> 12) & 0x000000FF;
10045eda:	687b      	ldr	r3, [r7, #4]
10045edc:	0b1a      	lsrs	r2, r3, #12
10045ede:	4b1b      	ldr	r3, [pc, #108]	@ (10045f4c <HAL_RADIO_SetGlobalReceiveTimeout+0xfc>)
10045ee0:	b2d2      	uxtb	r2, r2
10045ee2:	749a      	strb	r2, [r3, #18]
    BLUEGLOB->RCVTIMEOUT[2] = (ReceiveTimeout >> 20) & 0x00000003;
10045ee4:	687b      	ldr	r3, [r7, #4]
10045ee6:	0d1b      	lsrs	r3, r3, #20
10045ee8:	b2db      	uxtb	r3, r3
10045eea:	4a18      	ldr	r2, [pc, #96]	@ (10045f4c <HAL_RADIO_SetGlobalReceiveTimeout+0xfc>)
10045eec:	2103      	movs	r1, #3
10045eee:	400b      	ands	r3, r1
10045ef0:	b2db      	uxtb	r3, r3
10045ef2:	74d3      	strb	r3, [r2, #19]
    BLUEGLOB->RCVTIMEOUT[2] |= 0x08;
10045ef4:	4b15      	ldr	r3, [pc, #84]	@ (10045f4c <HAL_RADIO_SetGlobalReceiveTimeout+0xfc>)
10045ef6:	7cdb      	ldrb	r3, [r3, #19]
10045ef8:	b2db      	uxtb	r3, r3
10045efa:	4a14      	ldr	r2, [pc, #80]	@ (10045f4c <HAL_RADIO_SetGlobalReceiveTimeout+0xfc>)
10045efc:	2108      	movs	r1, #8
10045efe:	430b      	orrs	r3, r1
10045f00:	b2db      	uxtb	r3, r3
10045f02:	74d3      	strb	r3, [r2, #19]
}
10045f04:	e01e      	b.n	10045f44 <HAL_RADIO_SetGlobalReceiveTimeout+0xf4>
  else if (ReceiveTimeout < 0x1000000)
10045f06:	687a      	ldr	r2, [r7, #4]
10045f08:	2380      	movs	r3, #128	@ 0x80
10045f0a:	045b      	lsls	r3, r3, #17
10045f0c:	429a      	cmp	r2, r3
10045f0e:	d219      	bcs.n	10045f44 <HAL_RADIO_SetGlobalReceiveTimeout+0xf4>
    BLUEGLOB->RCVTIMEOUT[0] = (ReceiveTimeout >> 6)  & 0x000000FF ;
10045f10:	687b      	ldr	r3, [r7, #4]
10045f12:	099a      	lsrs	r2, r3, #6
10045f14:	4b0d      	ldr	r3, [pc, #52]	@ (10045f4c <HAL_RADIO_SetGlobalReceiveTimeout+0xfc>)
10045f16:	b2d2      	uxtb	r2, r2
10045f18:	745a      	strb	r2, [r3, #17]
    BLUEGLOB->RCVTIMEOUT[1] = (ReceiveTimeout >> 14) & 0x000000FF ;
10045f1a:	687b      	ldr	r3, [r7, #4]
10045f1c:	0b9a      	lsrs	r2, r3, #14
10045f1e:	4b0b      	ldr	r3, [pc, #44]	@ (10045f4c <HAL_RADIO_SetGlobalReceiveTimeout+0xfc>)
10045f20:	b2d2      	uxtb	r2, r2
10045f22:	749a      	strb	r2, [r3, #18]
    BLUEGLOB->RCVTIMEOUT[2] = (ReceiveTimeout >> 22) & 0x00000003 ;
10045f24:	687b      	ldr	r3, [r7, #4]
10045f26:	0d9b      	lsrs	r3, r3, #22
10045f28:	b2db      	uxtb	r3, r3
10045f2a:	4a08      	ldr	r2, [pc, #32]	@ (10045f4c <HAL_RADIO_SetGlobalReceiveTimeout+0xfc>)
10045f2c:	2103      	movs	r1, #3
10045f2e:	400b      	ands	r3, r1
10045f30:	b2db      	uxtb	r3, r3
10045f32:	74d3      	strb	r3, [r2, #19]
    BLUEGLOB->RCVTIMEOUT[2] |= 0x0C;
10045f34:	4b05      	ldr	r3, [pc, #20]	@ (10045f4c <HAL_RADIO_SetGlobalReceiveTimeout+0xfc>)
10045f36:	7cdb      	ldrb	r3, [r3, #19]
10045f38:	b2db      	uxtb	r3, r3
10045f3a:	4a04      	ldr	r2, [pc, #16]	@ (10045f4c <HAL_RADIO_SetGlobalReceiveTimeout+0xfc>)
10045f3c:	210c      	movs	r1, #12
10045f3e:	430b      	orrs	r3, r1
10045f40:	b2db      	uxtb	r3, r3
10045f42:	74d3      	strb	r3, [r2, #19]
}
10045f44:	46c0      	nop			@ (mov r8, r8)
10045f46:	46bd      	mov	sp, r7
10045f48:	b002      	add	sp, #8
10045f4a:	bd80      	pop	{r7, pc}
10045f4c:	200000c0 	.word	0x200000c0

10045f50 <HAL_RADIO_SetReservedArea>:
  *         is executed via either the API mechanism, or the next mechanism.
  * @param  p: pointer to action packet.
  * @retval None
  */
void HAL_RADIO_SetReservedArea(ActionPacket *p)
{
10045f50:	b580      	push	{r7, lr}
10045f52:	b084      	sub	sp, #16
10045f54:	af00      	add	r7, sp, #0
10045f56:	6078      	str	r0, [r7, #4]
  uint32_t relTimeout;
  uint32_t cnt;

  /*Init to 0 the TxRxPack*/
  for (cnt = 0; cnt < sizeof(p->trans_packet); cnt++)
10045f58:	2300      	movs	r3, #0
10045f5a:	60fb      	str	r3, [r7, #12]
10045f5c:	e009      	b.n	10045f72 <HAL_RADIO_SetReservedArea+0x22>
  {
    ((uint8_t *)(&(p->trans_packet)))[cnt] = 0;
10045f5e:	687b      	ldr	r3, [r7, #4]
10045f60:	3318      	adds	r3, #24
10045f62:	001a      	movs	r2, r3
10045f64:	68fb      	ldr	r3, [r7, #12]
10045f66:	18d3      	adds	r3, r2, r3
10045f68:	2200      	movs	r2, #0
10045f6a:	701a      	strb	r2, [r3, #0]
  for (cnt = 0; cnt < sizeof(p->trans_packet); cnt++)
10045f6c:	68fb      	ldr	r3, [r7, #12]
10045f6e:	3301      	adds	r3, #1
10045f70:	60fb      	str	r3, [r7, #12]
10045f72:	68fb      	ldr	r3, [r7, #12]
10045f74:	2b13      	cmp	r3, #19
10045f76:	d9f2      	bls.n	10045f5e <HAL_RADIO_SetReservedArea+0xe>
  }

  /*Set the TxRxPack for the next transaction. The list cannot be empty.
  At least,it can be composed by one only packet that points to itself*/
  p->trans_packet.NEXTPTR = BLUE_STRUCT_PTR_CAST(&(p->trans_packet));
10045f78:	687b      	ldr	r3, [r7, #4]
10045f7a:	3318      	adds	r3, #24
10045f7c:	001a      	movs	r2, r3
10045f7e:	687b      	ldr	r3, [r7, #4]
10045f80:	619a      	str	r2, [r3, #24]

  /* Set the buffer that contains the values to send or that stores
  the data received */
  p->trans_packet.DATAPTR = BLUE_DATA_PTR_CAST(p->data);
10045f82:	687b      	ldr	r3, [r7, #4]
10045f84:	689b      	ldr	r3, [r3, #8]
10045f86:	001a      	movs	r2, r3
10045f88:	687b      	ldr	r3, [r7, #4]
10045f8a:	621a      	str	r2, [r3, #32]

  /* Compensate the radio setup time from the back2back time */
  relTimeout = globalParameters.back2backTime - 70;
10045f8c:	4b46      	ldr	r3, [pc, #280]	@ (100460a8 <HAL_RADIO_SetReservedArea+0x158>)
10045f8e:	681b      	ldr	r3, [r3, #0]
10045f90:	3b46      	subs	r3, #70	@ 0x46
10045f92:	60bb      	str	r3, [r7, #8]

  /*Check if there is some action to perform next*/
//  if (p->next_false || p->next_true){ /* Host timer workaround */
  /* Set the Timeout for the Timer2 */
  p->trans_packet.TIMER2[0] = relTimeout & 0xFF;
10045f94:	68bb      	ldr	r3, [r7, #8]
10045f96:	b2d9      	uxtb	r1, r3
10045f98:	687b      	ldr	r3, [r7, #4]
10045f9a:	2224      	movs	r2, #36	@ 0x24
10045f9c:	5499      	strb	r1, [r3, r2]
  p->trans_packet.TIMER2[1] = (relTimeout >> 8) & 0xFF;
10045f9e:	68bb      	ldr	r3, [r7, #8]
10045fa0:	0a1b      	lsrs	r3, r3, #8
10045fa2:	b2d9      	uxtb	r1, r3
10045fa4:	687b      	ldr	r3, [r7, #4]
10045fa6:	2225      	movs	r2, #37	@ 0x25
10045fa8:	5499      	strb	r1, [r3, r2]
  p->trans_packet.BYTE14 = (relTimeout >> 16) & TXRXPACK_BYTE14_TIMER2_19_16_Msk;
10045faa:	68bb      	ldr	r3, [r7, #8]
10045fac:	0c1b      	lsrs	r3, r3, #16
10045fae:	b2db      	uxtb	r3, r3
10045fb0:	220f      	movs	r2, #15
10045fb2:	4013      	ands	r3, r2
10045fb4:	b2d9      	uxtb	r1, r3
10045fb6:	687b      	ldr	r3, [r7, #4]
10045fb8:	2226      	movs	r2, #38	@ 0x26
10045fba:	5499      	strb	r1, [r3, r2]
  /*Enable relative timer*/
  p->trans_packet.BYTE14 |= TXRXPACK_BYTE14_TIMER2EN_Msk;
10045fbc:	687b      	ldr	r3, [r7, #4]
10045fbe:	2226      	movs	r2, #38	@ 0x26
10045fc0:	5c9b      	ldrb	r3, [r3, r2]
10045fc2:	b2db      	uxtb	r3, r3
10045fc4:	2210      	movs	r2, #16
10045fc6:	4313      	orrs	r3, r2
10045fc8:	b2d9      	uxtb	r1, r3
10045fca:	687b      	ldr	r3, [r7, #4]
10045fcc:	2226      	movs	r2, #38	@ 0x26
10045fce:	5499      	strb	r1, [r3, r2]
//  }

  /* TrigDone or TrigReceive */
  if ((p->ActionTag & TIMESTAMP_POSITION) == 0)
10045fd0:	687b      	ldr	r3, [r7, #4]
10045fd2:	785b      	ldrb	r3, [r3, #1]
10045fd4:	001a      	movs	r2, r3
10045fd6:	2340      	movs	r3, #64	@ 0x40
10045fd8:	4013      	ands	r3, r2
10045fda:	d10b      	bne.n	10045ff4 <HAL_RADIO_SetReservedArea+0xa4>
  {
    p->trans_packet.BYTE14 |= TIMESTAMP_POSITION_LASTBIT;
10045fdc:	687b      	ldr	r3, [r7, #4]
10045fde:	2226      	movs	r2, #38	@ 0x26
10045fe0:	5c9b      	ldrb	r3, [r3, r2]
10045fe2:	b2db      	uxtb	r3, r3
10045fe4:	2280      	movs	r2, #128	@ 0x80
10045fe6:	4252      	negs	r2, r2
10045fe8:	4313      	orrs	r3, r2
10045fea:	b2d9      	uxtb	r1, r3
10045fec:	687b      	ldr	r3, [r7, #4]
10045fee:	2226      	movs	r2, #38	@ 0x26
10045ff0:	5499      	strb	r1, [r3, r2]
10045ff2:	e009      	b.n	10046008 <HAL_RADIO_SetReservedArea+0xb8>
  }
  else
  {
    p->trans_packet.BYTE14 |= TIMESTAMP_POSITION_ACCESSADDRESS;
10045ff4:	687b      	ldr	r3, [r7, #4]
10045ff6:	2226      	movs	r2, #38	@ 0x26
10045ff8:	5c9b      	ldrb	r3, [r3, r2]
10045ffa:	b2db      	uxtb	r3, r3
10045ffc:	2240      	movs	r2, #64	@ 0x40
10045ffe:	4313      	orrs	r3, r2
10046000:	b2d9      	uxtb	r1, r3
10046002:	687b      	ldr	r3, [r7, #4]
10046004:	2226      	movs	r2, #38	@ 0x26
10046006:	5499      	strb	r1, [r3, r2]
  }

  p->trans_packet.BYTE4 |= TXRXPACK_BYTE4_KEEPSEMAREQ_Msk | \
10046008:	687b      	ldr	r3, [r7, #4]
1004600a:	7f1b      	ldrb	r3, [r3, #28]
1004600c:	b2db      	uxtb	r3, r3
1004600e:	b25a      	sxtb	r2, r3
                           (p->ActionTag & INC_CHAN) | \
10046010:	687b      	ldr	r3, [r7, #4]
10046012:	785b      	ldrb	r3, [r3, #1]
10046014:	b25b      	sxtb	r3, r3
10046016:	217f      	movs	r1, #127	@ 0x7f
10046018:	438b      	bics	r3, r1
1004601a:	b25b      	sxtb	r3, r3
  p->trans_packet.BYTE4 |= TXRXPACK_BYTE4_KEEPSEMAREQ_Msk | \
1004601c:	2104      	movs	r1, #4
1004601e:	430b      	orrs	r3, r1
10046020:	b259      	sxtb	r1, r3
                           (p->ActionTag & PLL_TRIG);
10046022:	687b      	ldr	r3, [r7, #4]
10046024:	785b      	ldrb	r3, [r3, #1]
10046026:	b25b      	sxtb	r3, r3
10046028:	2001      	movs	r0, #1
1004602a:	4003      	ands	r3, r0
1004602c:	b25b      	sxtb	r3, r3
                           (p->ActionTag & INC_CHAN) | \
1004602e:	430b      	orrs	r3, r1
10046030:	b25b      	sxtb	r3, r3
  p->trans_packet.BYTE4 |= TXRXPACK_BYTE4_KEEPSEMAREQ_Msk | \
10046032:	4313      	orrs	r3, r2
10046034:	b25b      	sxtb	r3, r3
10046036:	b2da      	uxtb	r2, r3
10046038:	687b      	ldr	r3, [r7, #4]
1004603a:	771a      	strb	r2, [r3, #28]

  p->trans_packet.BYTE5 |= (p->ActionTag & WHITENING_DISABLE) | \
1004603c:	687b      	ldr	r3, [r7, #4]
1004603e:	7f5b      	ldrb	r3, [r3, #29]
10046040:	b2da      	uxtb	r2, r3
10046042:	687b      	ldr	r3, [r7, #4]
10046044:	785b      	ldrb	r3, [r3, #1]
10046046:	2110      	movs	r1, #16
10046048:	400b      	ands	r3, r1
1004604a:	b2db      	uxtb	r3, r3
1004604c:	4313      	orrs	r3, r2
1004604e:	b2db      	uxtb	r3, r3
10046050:	2206      	movs	r2, #6
10046052:	4313      	orrs	r3, r2
10046054:	b2da      	uxtb	r2, r3
10046056:	687b      	ldr	r3, [r7, #4]
10046058:	775a      	strb	r2, [r3, #29]
                           TXRXPACK_BYTE5_TXDATAREADY_Msk | \
                           TXRXPACK_BYTE5_ALLTABLEREADY_Msk;

  /* Enable all interrupts */
  p->trans_packet.BYTE15 = TXRXPACK_BYTE15_INT_EN_Msk;
1004605a:	687b      	ldr	r3, [r7, #4]
1004605c:	2227      	movs	r2, #39	@ 0x27
1004605e:	21ff      	movs	r1, #255	@ 0xff
10046060:	5499      	strb	r1, [r3, r2]

  /* By Default the next action is considered as next_true */
  if ((p->next_true->ActionTag & TXRX) != 0)
10046062:	687b      	ldr	r3, [r7, #4]
10046064:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
10046066:	785b      	ldrb	r3, [r3, #1]
10046068:	001a      	movs	r2, r3
1004606a:	2302      	movs	r3, #2
1004606c:	4013      	ands	r3, r2
1004606e:	d007      	beq.n	10046080 <HAL_RADIO_SetReservedArea+0x130>
  {
    /* Set the type of the next activity */
    p->trans_packet.BYTE5 |= TXRXPACK_BYTE5_NEXTTXMODE_Msk;
10046070:	687b      	ldr	r3, [r7, #4]
10046072:	7f5b      	ldrb	r3, [r3, #29]
10046074:	b2db      	uxtb	r3, r3
10046076:	2201      	movs	r2, #1
10046078:	4313      	orrs	r3, r2
1004607a:	b2da      	uxtb	r2, r3
1004607c:	687b      	ldr	r3, [r7, #4]
1004607e:	775a      	strb	r2, [r3, #29]
  }

  p->trans_config = 0; // Rx
10046080:	687b      	ldr	r3, [r7, #4]
10046082:	223c      	movs	r2, #60	@ 0x3c
10046084:	2100      	movs	r1, #0
10046086:	5499      	strb	r1, [r3, r2]
  if ((p->ActionTag & TXRX) != 0)
10046088:	687b      	ldr	r3, [r7, #4]
1004608a:	785b      	ldrb	r3, [r3, #1]
1004608c:	001a      	movs	r2, r3
1004608e:	2302      	movs	r3, #2
10046090:	4013      	ands	r3, r2
10046092:	d004      	beq.n	1004609e <HAL_RADIO_SetReservedArea+0x14e>
  {
    p->trans_config = STATEMACH_BYTE0_TXMODE_Msk; // Tx
10046094:	687b      	ldr	r3, [r7, #4]
10046096:	223c      	movs	r2, #60	@ 0x3c
10046098:	2180      	movs	r1, #128	@ 0x80
1004609a:	5499      	strb	r1, [r3, r2]
  }
  return ;
1004609c:	46c0      	nop			@ (mov r8, r8)
1004609e:	46c0      	nop			@ (mov r8, r8)
}
100460a0:	46bd      	mov	sp, r7
100460a2:	b004      	add	sp, #16
100460a4:	bd80      	pop	{r7, pc}
100460a6:	46c0      	nop			@ (mov r8, r8)
100460a8:	20000848 	.word	0x20000848

100460ac <HAL_RADIO_MakeActionPacketPending>:
  * @retval uint8_t with following values:
  *          - 0x00 : Success.
  *          - 0xC4 : Radio is busy, action packet has not been executed.
  */
uint8_t HAL_RADIO_MakeActionPacketPending(ActionPacket *p)
{
100460ac:	b5b0      	push	{r4, r5, r7, lr}
100460ae:	b086      	sub	sp, #24
100460b0:	af00      	add	r7, sp, #0
100460b2:	6078      	str	r0, [r7, #4]
  uint8_t returnValue = SUCCESS_0;
100460b4:	2517      	movs	r5, #23
100460b6:	197b      	adds	r3, r7, r5
100460b8:	2200      	movs	r2, #0
100460ba:	701a      	strb	r2, [r3, #0]
  uint32_t time;
  uint32_t dummyTime;
  if (HAL_RADIO_GetStatus(&dummyTime) == BLUE_IDLE_0)
100460bc:	2308      	movs	r3, #8
100460be:	18fb      	adds	r3, r7, r3
100460c0:	0018      	movs	r0, r3
100460c2:	f000 f8b9 	bl	10046238 <HAL_RADIO_GetStatus>
100460c6:	1e03      	subs	r3, r0, #0
100460c8:	d000      	beq.n	100460cc <HAL_RADIO_MakeActionPacketPending+0x20>
100460ca:	e0a3      	b.n	10046214 <HAL_RADIO_MakeActionPacketPending+0x168>
  {
    uint8_t  statemachineNo;
    BlueTransStruct *p1 ;

    /* timer1/2 off */
    LL_RADIO_TIMER_DisableTimer1(BLUE);
100460cc:	23c0      	movs	r3, #192	@ 0xc0
100460ce:	05db      	lsls	r3, r3, #23
100460d0:	0018      	movs	r0, r3
100460d2:	f7ff f8af 	bl	10045234 <LL_RADIO_TIMER_DisableTimer1>
    LL_RADIO_TIMER_DisableTimer2(BLUE);
100460d6:	23c0      	movs	r3, #192	@ 0xc0
100460d8:	05db      	lsls	r3, r3, #23
100460da:	0018      	movs	r0, r3
100460dc:	f7ff f8b9 	bl	10045252 <LL_RADIO_TIMER_DisableTimer2>

    statemachineNo = 0x7F & p->StateMachineNo;
100460e0:	687b      	ldr	r3, [r7, #4]
100460e2:	781a      	ldrb	r2, [r3, #0]
100460e4:	2016      	movs	r0, #22
100460e6:	183b      	adds	r3, r7, r0
100460e8:	217f      	movs	r1, #127	@ 0x7f
100460ea:	400a      	ands	r2, r1
100460ec:	701a      	strb	r2, [r3, #0]

    BLUEGLOB->BYTE4 = (p->StateMachineNo | GLOBAL_BYTE4_ACTIVE_Msk);
100460ee:	687b      	ldr	r3, [r7, #4]
100460f0:	781b      	ldrb	r3, [r3, #0]
100460f2:	494e      	ldr	r1, [pc, #312]	@ (1004622c <HAL_RADIO_MakeActionPacketPending+0x180>)
100460f4:	2280      	movs	r2, #128	@ 0x80
100460f6:	4252      	negs	r2, r2
100460f8:	4313      	orrs	r3, r2
100460fa:	b2db      	uxtb	r3, r3
100460fc:	710b      	strb	r3, [r1, #4]

    p1 = &p->trans_packet;
100460fe:	687b      	ldr	r3, [r7, #4]
10046100:	3318      	adds	r3, #24
10046102:	613b      	str	r3, [r7, #16]
    (bluedata + statemachineNo)->RCVPOINT = BLUE_STRUCT_PTR_CAST(p1);
10046104:	183b      	adds	r3, r7, r0
10046106:	781a      	ldrb	r2, [r3, #0]
10046108:	0013      	movs	r3, r2
1004610a:	009b      	lsls	r3, r3, #2
1004610c:	189b      	adds	r3, r3, r2
1004610e:	011b      	lsls	r3, r3, #4
10046110:	4a47      	ldr	r2, [pc, #284]	@ (10046230 <HAL_RADIO_MakeActionPacketPending+0x184>)
10046112:	4694      	mov	ip, r2
10046114:	4463      	add	r3, ip
10046116:	693a      	ldr	r2, [r7, #16]
10046118:	609a      	str	r2, [r3, #8]
    (bluedata + statemachineNo)->TXPOINT = BLUE_STRUCT_PTR_CAST(p1);
1004611a:	183b      	adds	r3, r7, r0
1004611c:	781a      	ldrb	r2, [r3, #0]
1004611e:	0013      	movs	r3, r2
10046120:	009b      	lsls	r3, r3, #2
10046122:	189b      	adds	r3, r3, r2
10046124:	011b      	lsls	r3, r3, #4
10046126:	4a42      	ldr	r2, [pc, #264]	@ (10046230 <HAL_RADIO_MakeActionPacketPending+0x184>)
10046128:	4694      	mov	ip, r2
1004612a:	4463      	add	r3, ip
1004612c:	693a      	ldr	r2, [r7, #16]
1004612e:	605a      	str	r2, [r3, #4]
    (bluedata + statemachineNo)->MAXRECEIVEDLENGTH = p->MaxReceiveLength;
10046130:	183b      	adds	r3, r7, r0
10046132:	781a      	ldrb	r2, [r3, #0]
10046134:	0013      	movs	r3, r2
10046136:	009b      	lsls	r3, r3, #2
10046138:	189b      	adds	r3, r3, r2
1004613a:	011b      	lsls	r3, r3, #4
1004613c:	4a3c      	ldr	r2, [pc, #240]	@ (10046230 <HAL_RADIO_MakeActionPacketPending+0x184>)
1004613e:	4694      	mov	ip, r2
10046140:	4463      	add	r3, ip
10046142:	687a      	ldr	r2, [r7, #4]
10046144:	7891      	ldrb	r1, [r2, #2]
10046146:	222b      	movs	r2, #43	@ 0x2b
10046148:	5499      	strb	r1, [r3, r2]

#if defined (STM32WB05) || defined(STM32WB09 )
    (bluedata + statemachineNo)->BYTE3 |= 1 << 3;
#endif

    globalParameters.current_action_packet = p;
1004614a:	4b3a      	ldr	r3, [pc, #232]	@ (10046234 <HAL_RADIO_MakeActionPacketPending+0x188>)
1004614c:	687a      	ldr	r2, [r7, #4]
1004614e:	609a      	str	r2, [r3, #8]

    MODIFY_REG((bluedata + statemachineNo)->BYTE0, STATEMACH_BYTE0_TXMODE_Msk,
10046150:	183b      	adds	r3, r7, r0
10046152:	781a      	ldrb	r2, [r3, #0]
10046154:	0013      	movs	r3, r2
10046156:	009b      	lsls	r3, r3, #2
10046158:	189b      	adds	r3, r3, r2
1004615a:	011b      	lsls	r3, r3, #4
1004615c:	4a34      	ldr	r2, [pc, #208]	@ (10046230 <HAL_RADIO_MakeActionPacketPending+0x184>)
1004615e:	4694      	mov	ip, r2
10046160:	4463      	add	r3, ip
10046162:	781b      	ldrb	r3, [r3, #0]
10046164:	b2db      	uxtb	r3, r3
10046166:	b25b      	sxtb	r3, r3
10046168:	227f      	movs	r2, #127	@ 0x7f
1004616a:	4013      	ands	r3, r2
1004616c:	b25a      	sxtb	r2, r3
1004616e:	687b      	ldr	r3, [r7, #4]
10046170:	213c      	movs	r1, #60	@ 0x3c
10046172:	5c5b      	ldrb	r3, [r3, r1]
10046174:	b25b      	sxtb	r3, r3
10046176:	4313      	orrs	r3, r2
10046178:	b259      	sxtb	r1, r3
1004617a:	183b      	adds	r3, r7, r0
1004617c:	781a      	ldrb	r2, [r3, #0]
1004617e:	0013      	movs	r3, r2
10046180:	009b      	lsls	r3, r3, #2
10046182:	189b      	adds	r3, r3, r2
10046184:	011b      	lsls	r3, r3, #4
10046186:	4a2a      	ldr	r2, [pc, #168]	@ (10046230 <HAL_RADIO_MakeActionPacketPending+0x184>)
10046188:	4694      	mov	ip, r2
1004618a:	4463      	add	r3, ip
1004618c:	b2ca      	uxtb	r2, r1
1004618e:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
10046190:	b672      	cpsid	i
}
10046192:	46c0      	nop			@ (mov r8, r8)
               p->trans_config); /* Transmission or reception */

    /* program timer at next->wakeuptime */
    MASK_INTERRUPTS();
    if ((p->ActionTag & RELATIVE) != 0)
10046194:	687b      	ldr	r3, [r7, #4]
10046196:	785b      	ldrb	r3, [r3, #1]
10046198:	001a      	movs	r2, r3
1004619a:	2320      	movs	r3, #32
1004619c:	4013      	ands	r3, r2
1004619e:	d021      	beq.n	100461e4 <HAL_RADIO_MakeActionPacketPending+0x138>
    {
      time = HAL_RADIO_TIMER_GetCurrentSysTime() + HAL_RADIO_TIMER_UsToSystime(p->WakeupTime);
100461a0:	f000 ff3c 	bl	1004701c <HAL_RADIO_TIMER_GetCurrentSysTime>
100461a4:	0002      	movs	r2, r0
100461a6:	000b      	movs	r3, r1
100461a8:	0014      	movs	r4, r2
100461aa:	687b      	ldr	r3, [r7, #4]
100461ac:	685b      	ldr	r3, [r3, #4]
100461ae:	0018      	movs	r0, r3
100461b0:	f000 ff10 	bl	10046fd4 <HAL_RADIO_TIMER_UsToSystime>
100461b4:	0003      	movs	r3, r0
100461b6:	18e3      	adds	r3, r4, r3
100461b8:	60fb      	str	r3, [r7, #12]
      returnValue = HAL_RADIO_TIMER_SetRadioTimerValue(time, (p->trans_config == STATEMACH_BYTE0_TXMODE_Msk), (p->ActionTag & PLL_TRIG));
100461ba:	687b      	ldr	r3, [r7, #4]
100461bc:	223c      	movs	r2, #60	@ 0x3c
100461be:	5c9b      	ldrb	r3, [r3, r2]
100461c0:	3b80      	subs	r3, #128	@ 0x80
100461c2:	425a      	negs	r2, r3
100461c4:	4153      	adcs	r3, r2
100461c6:	b2db      	uxtb	r3, r3
100461c8:	0019      	movs	r1, r3
100461ca:	687b      	ldr	r3, [r7, #4]
100461cc:	785b      	ldrb	r3, [r3, #1]
100461ce:	2201      	movs	r2, #1
100461d0:	4013      	ands	r3, r2
100461d2:	b2da      	uxtb	r2, r3
100461d4:	68fb      	ldr	r3, [r7, #12]
100461d6:	0018      	movs	r0, r3
100461d8:	f000 fe08 	bl	10046dec <HAL_RADIO_TIMER_SetRadioTimerValue>
100461dc:	0002      	movs	r2, r0
100461de:	197b      	adds	r3, r7, r5
100461e0:	701a      	strb	r2, [r3, #0]
100461e2:	e015      	b.n	10046210 <HAL_RADIO_MakeActionPacketPending+0x164>
    }
    else /*absolute time*/
    {
      returnValue = HAL_RADIO_TIMER_SetRadioTimerValue(p->WakeupTime, (p->trans_config == STATEMACH_BYTE0_TXMODE_Msk), (p->ActionTag & PLL_TRIG));
100461e4:	687b      	ldr	r3, [r7, #4]
100461e6:	6858      	ldr	r0, [r3, #4]
100461e8:	687b      	ldr	r3, [r7, #4]
100461ea:	223c      	movs	r2, #60	@ 0x3c
100461ec:	5c9b      	ldrb	r3, [r3, r2]
100461ee:	3b80      	subs	r3, #128	@ 0x80
100461f0:	425a      	negs	r2, r3
100461f2:	4153      	adcs	r3, r2
100461f4:	b2db      	uxtb	r3, r3
100461f6:	0019      	movs	r1, r3
100461f8:	687b      	ldr	r3, [r7, #4]
100461fa:	785b      	ldrb	r3, [r3, #1]
100461fc:	2201      	movs	r2, #1
100461fe:	4013      	ands	r3, r2
10046200:	b2db      	uxtb	r3, r3
10046202:	001a      	movs	r2, r3
10046204:	f000 fdf2 	bl	10046dec <HAL_RADIO_TIMER_SetRadioTimerValue>
10046208:	0002      	movs	r2, r0
1004620a:	2317      	movs	r3, #23
1004620c:	18fb      	adds	r3, r7, r3
1004620e:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
10046210:	b662      	cpsie	i
}
10046212:	e003      	b.n	1004621c <HAL_RADIO_MakeActionPacketPending+0x170>

    UNMASK_INTERRUPTS();
  }
  else
  {
    returnValue = RADIO_BUSY_C4;
10046214:	2317      	movs	r3, #23
10046216:	18fb      	adds	r3, r7, r3
10046218:	22c4      	movs	r2, #196	@ 0xc4
1004621a:	701a      	strb	r2, [r3, #0]
  }
  return returnValue;
1004621c:	2317      	movs	r3, #23
1004621e:	18fb      	adds	r3, r7, r3
10046220:	781b      	ldrb	r3, [r3, #0]
}
10046222:	0018      	movs	r0, r3
10046224:	46bd      	mov	sp, r7
10046226:	b006      	add	sp, #24
10046228:	bdb0      	pop	{r4, r5, r7, pc}
1004622a:	46c0      	nop			@ (mov r8, r8)
1004622c:	200000c0 	.word	0x200000c0
10046230:	200000dc 	.word	0x200000dc
10046234:	20000848 	.word	0x20000848

10046238 <HAL_RADIO_GetStatus>:
  * @param  time: where to store the last value programmed.
  * @retval 0 if the radio controller is IDLE or no timer has been programmed
  * @retval 1 if the radio is ACTIVE and a radio timer has been programmed
  */
uint8_t HAL_RADIO_GetStatus(uint32_t *time)
{
10046238:	b590      	push	{r4, r7, lr}
1004623a:	b085      	sub	sp, #20
1004623c:	af00      	add	r7, sp, #0
1004623e:	6078      	str	r0, [r7, #4]
  uint8_t retValue = BLUE_IDLE_0;
10046240:	210f      	movs	r1, #15
10046242:	187b      	adds	r3, r7, r1
10046244:	2200      	movs	r2, #0
10046246:	701a      	strb	r2, [r3, #0]
  if ((BLUEGLOB->BYTE4 & GLOBAL_BYTE4_ACTIVE_Msk) != 0)
10046248:	4b09      	ldr	r3, [pc, #36]	@ (10046270 <HAL_RADIO_GetStatus+0x38>)
1004624a:	791b      	ldrb	r3, [r3, #4]
1004624c:	b2db      	uxtb	r3, r3
1004624e:	b25b      	sxtb	r3, r3
10046250:	2b00      	cmp	r3, #0
10046252:	da06      	bge.n	10046262 <HAL_RADIO_GetStatus+0x2a>
  {
    retValue = HAL_RADIO_TIMER_GetRadioTimerValue(time);
10046254:	187c      	adds	r4, r7, r1
10046256:	687b      	ldr	r3, [r7, #4]
10046258:	0018      	movs	r0, r3
1004625a:	f000 fe8d 	bl	10046f78 <HAL_RADIO_TIMER_GetRadioTimerValue>
1004625e:	0003      	movs	r3, r0
10046260:	7023      	strb	r3, [r4, #0]
  }
  return retValue;
10046262:	230f      	movs	r3, #15
10046264:	18fb      	adds	r3, r7, r3
10046266:	781b      	ldrb	r3, [r3, #0]
}
10046268:	0018      	movs	r0, r3
1004626a:	46bd      	mov	sp, r7
1004626c:	b005      	add	sp, #20
1004626e:	bd90      	pop	{r4, r7, pc}
10046270:	200000c0 	.word	0x200000c0

10046274 <HAL_RADIO_SetTxPower>:
  * @param  PowerLevel: power level which should set to this value.
  *         See the documentation inside the datasheet.
  * @retval None
  */
void HAL_RADIO_SetTxPower(uint8_t PowerLevel)
{
10046274:	b580      	push	{r7, lr}
10046276:	b084      	sub	sp, #16
10046278:	af00      	add	r7, sp, #0
1004627a:	0002      	movs	r2, r0
1004627c:	1dfb      	adds	r3, r7, #7
1004627e:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_POWERLEVEL_VALID(PowerLevel));

  for (uint8_t n = 0; n < STATEMACHINE_COUNT ; n++)
10046280:	230f      	movs	r3, #15
10046282:	18fb      	adds	r3, r7, r3
10046284:	2200      	movs	r2, #0
10046286:	701a      	strb	r2, [r3, #0]
10046288:	e012      	b.n	100462b0 <HAL_RADIO_SetTxPower+0x3c>
  {
    (bluedata + n)->PAPOWER = PowerLevel;
1004628a:	200f      	movs	r0, #15
1004628c:	183b      	adds	r3, r7, r0
1004628e:	781a      	ldrb	r2, [r3, #0]
10046290:	0013      	movs	r3, r2
10046292:	009b      	lsls	r3, r3, #2
10046294:	189b      	adds	r3, r3, r2
10046296:	011b      	lsls	r3, r3, #4
10046298:	4a0a      	ldr	r2, [pc, #40]	@ (100462c4 <HAL_RADIO_SetTxPower+0x50>)
1004629a:	4694      	mov	ip, r2
1004629c:	4463      	add	r3, ip
1004629e:	1dfa      	adds	r2, r7, #7
100462a0:	212c      	movs	r1, #44	@ 0x2c
100462a2:	7812      	ldrb	r2, [r2, #0]
100462a4:	545a      	strb	r2, [r3, r1]
  for (uint8_t n = 0; n < STATEMACHINE_COUNT ; n++)
100462a6:	183b      	adds	r3, r7, r0
100462a8:	781a      	ldrb	r2, [r3, #0]
100462aa:	183b      	adds	r3, r7, r0
100462ac:	3201      	adds	r2, #1
100462ae:	701a      	strb	r2, [r3, #0]
100462b0:	230f      	movs	r3, #15
100462b2:	18fb      	adds	r3, r7, r3
100462b4:	781b      	ldrb	r3, [r3, #0]
100462b6:	2b01      	cmp	r3, #1
100462b8:	d9e7      	bls.n	1004628a <HAL_RADIO_SetTxPower+0x16>
  }
  return;
100462ba:	46c0      	nop			@ (mov r8, r8)
}
100462bc:	46bd      	mov	sp, r7
100462be:	b004      	add	sp, #16
100462c0:	bd80      	pop	{r7, pc}
100462c2:	46c0      	nop			@ (mov r8, r8)
100462c4:	200000dc 	.word	0x200000dc

100462c8 <HAL_RADIO_SetNetworkID>:
  * @retval uint8_t: return value
  *           - 0x00 : Success.
  *           - 0xC0 : Invalid parameter.
  */
uint8_t HAL_RADIO_SetNetworkID(uint32_t ID)
{
100462c8:	b580      	push	{r7, lr}
100462ca:	b082      	sub	sp, #8
100462cc:	af00      	add	r7, sp, #0
100462ce:	6078      	str	r0, [r7, #4]
  networkID = ID;
100462d0:	4b03      	ldr	r3, [pc, #12]	@ (100462e0 <HAL_RADIO_SetNetworkID+0x18>)
100462d2:	687a      	ldr	r2, [r7, #4]
100462d4:	601a      	str	r2, [r3, #0]
  return 0;
100462d6:	2300      	movs	r3, #0
}
100462d8:	0018      	movs	r0, r3
100462da:	46bd      	mov	sp, r7
100462dc:	b002      	add	sp, #8
100462de:	bd80      	pop	{r7, pc}
100462e0:	20000b5c 	.word	0x20000b5c

100462e4 <HAL_RADIO_SendPacketWithAck>:
  */
uint8_t HAL_RADIO_SendPacketWithAck(uint8_t channel, uint32_t wakeup_time, uint8_t *txBuffer, uint8_t *rxBuffer,
                                    uint32_t receive_timeout,
                                    uint8_t receive_length,
                                    uint8_t (*Callback)(ActionPacket *, ActionPacket *))
{
100462e4:	b5f0      	push	{r4, r5, r6, r7, lr}
100462e6:	b08b      	sub	sp, #44	@ 0x2c
100462e8:	af00      	add	r7, sp, #0
100462ea:	60b9      	str	r1, [r7, #8]
100462ec:	607a      	str	r2, [r7, #4]
100462ee:	603b      	str	r3, [r7, #0]
100462f0:	250f      	movs	r5, #15
100462f2:	197b      	adds	r3, r7, r5
100462f4:	1c02      	adds	r2, r0, #0
100462f6:	701a      	strb	r2, [r3, #0]
  uint8_t returnValue = SUCCESS_0;
100462f8:	2627      	movs	r6, #39	@ 0x27
100462fa:	19bb      	adds	r3, r7, r6
100462fc:	2200      	movs	r2, #0
100462fe:	701a      	strb	r2, [r3, #0]
  uint32_t dummy;
  uint32_t time;

  time = (uint32_t)HAL_RADIO_TIMER_GetCurrentSysTime() + HAL_RADIO_TIMER_UsToSystime(wakeup_time);
10046300:	f000 fe8c 	bl	1004701c <HAL_RADIO_TIMER_GetCurrentSysTime>
10046304:	0002      	movs	r2, r0
10046306:	000b      	movs	r3, r1
10046308:	0014      	movs	r4, r2
1004630a:	68bb      	ldr	r3, [r7, #8]
1004630c:	0018      	movs	r0, r3
1004630e:	f000 fe61 	bl	10046fd4 <HAL_RADIO_TIMER_UsToSystime>
10046312:	0003      	movs	r3, r0
10046314:	18e3      	adds	r3, r4, r3
10046316:	623b      	str	r3, [r7, #32]

  if (channel > 39)
10046318:	197b      	adds	r3, r7, r5
1004631a:	781b      	ldrb	r3, [r3, #0]
1004631c:	2b27      	cmp	r3, #39	@ 0x27
1004631e:	d902      	bls.n	10046326 <HAL_RADIO_SendPacketWithAck+0x42>
  {
    returnValue = INVALID_PARAMETER_C0;
10046320:	19bb      	adds	r3, r7, r6
10046322:	22c0      	movs	r2, #192	@ 0xc0
10046324:	701a      	strb	r2, [r3, #0]
  }

  if (HAL_RADIO_GetStatus(&dummy) != BLUE_IDLE_0)
10046326:	231c      	movs	r3, #28
10046328:	18fb      	adds	r3, r7, r3
1004632a:	0018      	movs	r0, r3
1004632c:	f7ff ff84 	bl	10046238 <HAL_RADIO_GetStatus>
10046330:	1e03      	subs	r3, r0, #0
10046332:	d003      	beq.n	1004633c <HAL_RADIO_SendPacketWithAck+0x58>
  {
    returnValue = RADIO_BUSY_C4;
10046334:	2327      	movs	r3, #39	@ 0x27
10046336:	18fb      	adds	r3, r7, r3
10046338:	22c4      	movs	r2, #196	@ 0xc4
1004633a:	701a      	strb	r2, [r3, #0]
  }

  uint8_t map[5] = {0xFFU, 0xFFU, 0xFFU, 0xFFU, 0xFFU};
1004633c:	2014      	movs	r0, #20
1004633e:	183b      	adds	r3, r7, r0
10046340:	4a37      	ldr	r2, [pc, #220]	@ (10046420 <HAL_RADIO_SendPacketWithAck+0x13c>)
10046342:	6811      	ldr	r1, [r2, #0]
10046344:	6019      	str	r1, [r3, #0]
10046346:	7912      	ldrb	r2, [r2, #4]
10046348:	711a      	strb	r2, [r3, #4]
  HAL_RADIO_SetChannelMap(0, &map[0]);
1004634a:	183b      	adds	r3, r7, r0
1004634c:	0019      	movs	r1, r3
1004634e:	2000      	movs	r0, #0
10046350:	f7ff fc8e 	bl	10045c70 <HAL_RADIO_SetChannelMap>
  HAL_RADIO_SetChannel(0, channel, 0);
10046354:	230f      	movs	r3, #15
10046356:	18fb      	adds	r3, r7, r3
10046358:	781b      	ldrb	r3, [r3, #0]
1004635a:	2200      	movs	r2, #0
1004635c:	0019      	movs	r1, r3
1004635e:	2000      	movs	r0, #0
10046360:	f7ff fcd2 	bl	10045d08 <HAL_RADIO_SetChannel>
  HAL_RADIO_SetTxAttributes(0, networkID, 0x555555);
10046364:	4b2f      	ldr	r3, [pc, #188]	@ (10046424 <HAL_RADIO_SendPacketWithAck+0x140>)
10046366:	681b      	ldr	r3, [r3, #0]
10046368:	4a2f      	ldr	r2, [pc, #188]	@ (10046428 <HAL_RADIO_SendPacketWithAck+0x144>)
1004636a:	0019      	movs	r1, r3
1004636c:	2000      	movs	r0, #0
1004636e:	f7ff fd2b 	bl	10045dc8 <HAL_RADIO_SetTxAttributes>
  HAL_RADIO_SetGlobalReceiveTimeout(receive_timeout);
10046372:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
10046374:	0018      	movs	r0, r3
10046376:	f7ff fd6b 	bl	10045e50 <HAL_RADIO_SetGlobalReceiveTimeout>

  aPacket[0].StateMachineNo = 0;
1004637a:	4b2c      	ldr	r3, [pc, #176]	@ (1004642c <HAL_RADIO_SendPacketWithAck+0x148>)
1004637c:	2200      	movs	r2, #0
1004637e:	701a      	strb	r2, [r3, #0]
  aPacket[0].ActionTag = TXRX | PLL_TRIG;
10046380:	4b2a      	ldr	r3, [pc, #168]	@ (1004642c <HAL_RADIO_SendPacketWithAck+0x148>)
10046382:	2203      	movs	r2, #3
10046384:	705a      	strb	r2, [r3, #1]
  aPacket[0].WakeupTime = time;
10046386:	4b29      	ldr	r3, [pc, #164]	@ (1004642c <HAL_RADIO_SendPacketWithAck+0x148>)
10046388:	6a3a      	ldr	r2, [r7, #32]
1004638a:	605a      	str	r2, [r3, #4]
  aPacket[0].MaxReceiveLength = 0; /* does not affect for Tx */
1004638c:	4b27      	ldr	r3, [pc, #156]	@ (1004642c <HAL_RADIO_SendPacketWithAck+0x148>)
1004638e:	2200      	movs	r2, #0
10046390:	709a      	strb	r2, [r3, #2]
  aPacket[0].data = txBuffer;
10046392:	4b26      	ldr	r3, [pc, #152]	@ (1004642c <HAL_RADIO_SendPacketWithAck+0x148>)
10046394:	687a      	ldr	r2, [r7, #4]
10046396:	609a      	str	r2, [r3, #8]
  aPacket[0].next_true = &aPacket[1];
10046398:	4b24      	ldr	r3, [pc, #144]	@ (1004642c <HAL_RADIO_SendPacketWithAck+0x148>)
1004639a:	4a25      	ldr	r2, [pc, #148]	@ (10046430 <HAL_RADIO_SendPacketWithAck+0x14c>)
1004639c:	62da      	str	r2, [r3, #44]	@ 0x2c
  aPacket[0].next_false = &aPacket[1];
1004639e:	4b23      	ldr	r3, [pc, #140]	@ (1004642c <HAL_RADIO_SendPacketWithAck+0x148>)
100463a0:	4a23      	ldr	r2, [pc, #140]	@ (10046430 <HAL_RADIO_SendPacketWithAck+0x14c>)
100463a2:	631a      	str	r2, [r3, #48]	@ 0x30
  aPacket[0].condRoutine = CondRoutineTrue;
100463a4:	4b21      	ldr	r3, [pc, #132]	@ (1004642c <HAL_RADIO_SendPacketWithAck+0x148>)
100463a6:	4a23      	ldr	r2, [pc, #140]	@ (10046434 <HAL_RADIO_SendPacketWithAck+0x150>)
100463a8:	635a      	str	r2, [r3, #52]	@ 0x34
  aPacket[0].dataRoutine = DataRoutineNull;
100463aa:	4b20      	ldr	r3, [pc, #128]	@ (1004642c <HAL_RADIO_SendPacketWithAck+0x148>)
100463ac:	4a22      	ldr	r2, [pc, #136]	@ (10046438 <HAL_RADIO_SendPacketWithAck+0x154>)
100463ae:	639a      	str	r2, [r3, #56]	@ 0x38

  aPacket[1].StateMachineNo = 0;
100463b0:	4b1e      	ldr	r3, [pc, #120]	@ (1004642c <HAL_RADIO_SendPacketWithAck+0x148>)
100463b2:	2240      	movs	r2, #64	@ 0x40
100463b4:	2100      	movs	r1, #0
100463b6:	5499      	strb	r1, [r3, r2]
  aPacket[1].ActionTag = 0;
100463b8:	4b1c      	ldr	r3, [pc, #112]	@ (1004642c <HAL_RADIO_SendPacketWithAck+0x148>)
100463ba:	2241      	movs	r2, #65	@ 0x41
100463bc:	2100      	movs	r1, #0
100463be:	5499      	strb	r1, [r3, r2]
  aPacket[1].WakeupTime = time;
100463c0:	4b1a      	ldr	r3, [pc, #104]	@ (1004642c <HAL_RADIO_SendPacketWithAck+0x148>)
100463c2:	6a3a      	ldr	r2, [r7, #32]
100463c4:	645a      	str	r2, [r3, #68]	@ 0x44
  aPacket[1].MaxReceiveLength = receive_length;
100463c6:	4b19      	ldr	r3, [pc, #100]	@ (1004642c <HAL_RADIO_SendPacketWithAck+0x148>)
100463c8:	223c      	movs	r2, #60	@ 0x3c
100463ca:	2108      	movs	r1, #8
100463cc:	1852      	adds	r2, r2, r1
100463ce:	19d2      	adds	r2, r2, r7
100463d0:	2142      	movs	r1, #66	@ 0x42
100463d2:	7812      	ldrb	r2, [r2, #0]
100463d4:	545a      	strb	r2, [r3, r1]
  aPacket[1].data = rxBuffer;
100463d6:	4b15      	ldr	r3, [pc, #84]	@ (1004642c <HAL_RADIO_SendPacketWithAck+0x148>)
100463d8:	683a      	ldr	r2, [r7, #0]
100463da:	649a      	str	r2, [r3, #72]	@ 0x48
  aPacket[1].next_true = NULL_0;
100463dc:	4b13      	ldr	r3, [pc, #76]	@ (1004642c <HAL_RADIO_SendPacketWithAck+0x148>)
100463de:	2200      	movs	r2, #0
100463e0:	66da      	str	r2, [r3, #108]	@ 0x6c
  aPacket[1].next_false = NULL_0;
100463e2:	4b12      	ldr	r3, [pc, #72]	@ (1004642c <HAL_RADIO_SendPacketWithAck+0x148>)
100463e4:	2200      	movs	r2, #0
100463e6:	671a      	str	r2, [r3, #112]	@ 0x70
  aPacket[1].condRoutine = CondRoutineTrue;
100463e8:	4b10      	ldr	r3, [pc, #64]	@ (1004642c <HAL_RADIO_SendPacketWithAck+0x148>)
100463ea:	4a12      	ldr	r2, [pc, #72]	@ (10046434 <HAL_RADIO_SendPacketWithAck+0x150>)
100463ec:	675a      	str	r2, [r3, #116]	@ 0x74
  aPacket[1].dataRoutine = Callback;
100463ee:	4b0f      	ldr	r3, [pc, #60]	@ (1004642c <HAL_RADIO_SendPacketWithAck+0x148>)
100463f0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
100463f2:	679a      	str	r2, [r3, #120]	@ 0x78

  HAL_RADIO_SetReservedArea(&aPacket[0]);
100463f4:	4b0d      	ldr	r3, [pc, #52]	@ (1004642c <HAL_RADIO_SendPacketWithAck+0x148>)
100463f6:	0018      	movs	r0, r3
100463f8:	f7ff fdaa 	bl	10045f50 <HAL_RADIO_SetReservedArea>
  HAL_RADIO_SetReservedArea(&aPacket[1]);
100463fc:	4b0c      	ldr	r3, [pc, #48]	@ (10046430 <HAL_RADIO_SendPacketWithAck+0x14c>)
100463fe:	0018      	movs	r0, r3
10046400:	f7ff fda6 	bl	10045f50 <HAL_RADIO_SetReservedArea>
  returnValue = HAL_RADIO_MakeActionPacketPending(&aPacket[0]);
10046404:	2527      	movs	r5, #39	@ 0x27
10046406:	197c      	adds	r4, r7, r5
10046408:	4b08      	ldr	r3, [pc, #32]	@ (1004642c <HAL_RADIO_SendPacketWithAck+0x148>)
1004640a:	0018      	movs	r0, r3
1004640c:	f7ff fe4e 	bl	100460ac <HAL_RADIO_MakeActionPacketPending>
10046410:	0003      	movs	r3, r0
10046412:	7023      	strb	r3, [r4, #0]

  return returnValue;
10046414:	197b      	adds	r3, r7, r5
10046416:	781b      	ldrb	r3, [r3, #0]
}
10046418:	0018      	movs	r0, r3
1004641a:	46bd      	mov	sp, r7
1004641c:	b00b      	add	sp, #44	@ 0x2c
1004641e:	bdf0      	pop	{r4, r5, r6, r7, pc}
10046420:	1004bf68 	.word	0x1004bf68
10046424:	20000b5c 	.word	0x20000b5c
10046428:	00555555 	.word	0x00555555
1004642c:	20000854 	.word	0x20000854
10046430:	20000894 	.word	0x20000894
10046434:	10045291 	.word	0x10045291
10046438:	100452a3 	.word	0x100452a3

1004643c <HAL_RADIO_TxRxCallback>:
}

#endif /* USE_RADIO_PROPRIETARY_DRIVER */

__weak void HAL_RADIO_TxRxCallback(uint32_t flags)
{
1004643c:	b580      	push	{r7, lr}
1004643e:	b082      	sub	sp, #8
10046440:	af00      	add	r7, sp, #0
10046442:	6078      	str	r0, [r7, #4]
}
10046444:	46c0      	nop			@ (mov r8, r8)
10046446:	46bd      	mov	sp, r7
10046448:	b002      	add	sp, #8
1004644a:	bd80      	pop	{r7, pc}

1004644c <HAL_RADIO_TxRxSeqCallback>:


__weak void HAL_RADIO_TxRxSeqCallback(void)
{
1004644c:	b580      	push	{r7, lr}
1004644e:	af00      	add	r7, sp, #0
}
10046450:	46c0      	nop			@ (mov r8, r8)
10046452:	46bd      	mov	sp, r7
10046454:	bd80      	pop	{r7, pc}

10046456 <HAL_RADIO_TXRX_IRQHandler>:

void HAL_RADIO_TXRX_IRQHandler(void)
{
10046456:	b580      	push	{r7, lr}
10046458:	b082      	sub	sp, #8
1004645a:	af00      	add	r7, sp, #0
  uint32_t blue_status = BLUE->STATUSREG;
1004645c:	23c0      	movs	r3, #192	@ 0xc0
1004645e:	05db      	lsls	r3, r3, #23
10046460:	69db      	ldr	r3, [r3, #28]
10046462:	607b      	str	r3, [r7, #4]
  uint32_t blue_interrupt = BLUE->INTERRUPT1REG;
10046464:	23c0      	movs	r3, #192	@ 0xc0
10046466:	05db      	lsls	r3, r3, #23
10046468:	685b      	ldr	r3, [r3, #4]
1004646a:	603b      	str	r3, [r7, #0]

  /** clear all pending interrupts */
  BLUE->INTERRUPT1REG = blue_interrupt;
1004646c:	23c0      	movs	r3, #192	@ 0xc0
1004646e:	05db      	lsls	r3, r3, #23
10046470:	683a      	ldr	r2, [r7, #0]
10046472:	605a      	str	r2, [r3, #4]

  HAL_RADIO_TIMER_EndOfRadioActivityIsr();
10046474:	f000 fda2 	bl	10046fbc <HAL_RADIO_TIMER_EndOfRadioActivityIsr>

#if (USE_RADIO_PROPRIETARY_DRIVER == 1)
  HAL_RADIO_ActionPacketIsr(blue_status | blue_interrupt);
10046478:	687a      	ldr	r2, [r7, #4]
1004647a:	683b      	ldr	r3, [r7, #0]
1004647c:	4313      	orrs	r3, r2
1004647e:	0018      	movs	r0, r3
10046480:	f7ff fada 	bl	10045a38 <HAL_RADIO_ActionPacketIsr>
#endif

  HAL_RADIO_TxRxCallback(blue_status | blue_interrupt);
10046484:	687a      	ldr	r2, [r7, #4]
10046486:	683b      	ldr	r3, [r7, #0]
10046488:	4313      	orrs	r3, r2
1004648a:	0018      	movs	r0, r3
1004648c:	f7ff ffd6 	bl	1004643c <HAL_RADIO_TxRxCallback>

  HAL_RADIO_TIMER_RadioTimerIsr();
10046490:	f000 fd7f 	bl	10046f92 <HAL_RADIO_TIMER_RadioTimerIsr>
  /* If the device is configured with
     System clock = 64 MHz and BLE clock = 16 MHz
     a register read is necessary to end fine
     the clear interrupt register operation,
     due the AHB down converter latency */
  blue_interrupt = BLUE->INTERRUPT1REG;
10046494:	23c0      	movs	r3, #192	@ 0xc0
10046496:	05db      	lsls	r3, r3, #23
10046498:	685b      	ldr	r3, [r3, #4]
1004649a:	603b      	str	r3, [r7, #0]
}
1004649c:	46c0      	nop			@ (mov r8, r8)
1004649e:	46bd      	mov	sp, r7
100464a0:	b002      	add	sp, #8
100464a2:	bd80      	pop	{r7, pc}

100464a4 <HAL_RADIO_TXRX_SEQ_IRQHandler>:


void HAL_RADIO_TXRX_SEQ_IRQHandler(void)
{
100464a4:	b580      	push	{r7, lr}
100464a6:	af00      	add	r7, sp, #0
  HAL_RADIO_TxRxSeqCallback();
100464a8:	f7ff ffd0 	bl	1004644c <HAL_RADIO_TxRxSeqCallback>
}
100464ac:	46c0      	nop			@ (mov r8, r8)
100464ae:	46bd      	mov	sp, r7
100464b0:	bd80      	pop	{r7, pc}
	...

100464b4 <__NVIC_EnableIRQ>:
{
100464b4:	b580      	push	{r7, lr}
100464b6:	b082      	sub	sp, #8
100464b8:	af00      	add	r7, sp, #0
100464ba:	0002      	movs	r2, r0
100464bc:	1dfb      	adds	r3, r7, #7
100464be:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
100464c0:	1dfb      	adds	r3, r7, #7
100464c2:	781b      	ldrb	r3, [r3, #0]
100464c4:	2b7f      	cmp	r3, #127	@ 0x7f
100464c6:	d809      	bhi.n	100464dc <__NVIC_EnableIRQ+0x28>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
100464c8:	1dfb      	adds	r3, r7, #7
100464ca:	781b      	ldrb	r3, [r3, #0]
100464cc:	001a      	movs	r2, r3
100464ce:	231f      	movs	r3, #31
100464d0:	401a      	ands	r2, r3
100464d2:	4b04      	ldr	r3, [pc, #16]	@ (100464e4 <__NVIC_EnableIRQ+0x30>)
100464d4:	2101      	movs	r1, #1
100464d6:	4091      	lsls	r1, r2
100464d8:	000a      	movs	r2, r1
100464da:	601a      	str	r2, [r3, #0]
}
100464dc:	46c0      	nop			@ (mov r8, r8)
100464de:	46bd      	mov	sp, r7
100464e0:	b002      	add	sp, #8
100464e2:	bd80      	pop	{r7, pc}
100464e4:	e000e100 	.word	0xe000e100

100464e8 <LL_RADIO_TIMER_EnableTimer1>:
{
100464e8:	b580      	push	{r7, lr}
100464ea:	b082      	sub	sp, #8
100464ec:	af00      	add	r7, sp, #0
100464ee:	6078      	str	r0, [r7, #4]
  MODIFY_REG_FIELD(BLUEx->TIMEOUTDESTREG, BLUE_TIMEOUTDESTREG_DESTINATION, LL_RADIO_TIMER_1);
100464f0:	687b      	ldr	r3, [r7, #4]
100464f2:	68db      	ldr	r3, [r3, #12]
100464f4:	2203      	movs	r2, #3
100464f6:	4393      	bics	r3, r2
100464f8:	2202      	movs	r2, #2
100464fa:	431a      	orrs	r2, r3
100464fc:	687b      	ldr	r3, [r7, #4]
100464fe:	60da      	str	r2, [r3, #12]
}
10046500:	46c0      	nop			@ (mov r8, r8)
10046502:	46bd      	mov	sp, r7
10046504:	b002      	add	sp, #8
10046506:	bd80      	pop	{r7, pc}

10046508 <LL_RADIO_TIMER_DisableTimer1>:
{
10046508:	b580      	push	{r7, lr}
1004650a:	b082      	sub	sp, #8
1004650c:	af00      	add	r7, sp, #0
1004650e:	6078      	str	r0, [r7, #4]
  MODIFY_REG_FIELD(BLUEx->TIMEOUTDESTREG, BLUE_TIMEOUTDESTREG_DESTINATION, 0);
10046510:	687b      	ldr	r3, [r7, #4]
10046512:	68db      	ldr	r3, [r3, #12]
10046514:	2203      	movs	r2, #3
10046516:	4393      	bics	r3, r2
10046518:	001a      	movs	r2, r3
1004651a:	687b      	ldr	r3, [r7, #4]
1004651c:	60da      	str	r2, [r3, #12]
}
1004651e:	46c0      	nop			@ (mov r8, r8)
10046520:	46bd      	mov	sp, r7
10046522:	b002      	add	sp, #8
10046524:	bd80      	pop	{r7, pc}

10046526 <LL_RADIO_TIMER_IsEnabledTimer1>:
{
10046526:	b580      	push	{r7, lr}
10046528:	b082      	sub	sp, #8
1004652a:	af00      	add	r7, sp, #0
1004652c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(BLUEx->TIMEOUTDESTREG, BLUE_TIMEOUTDESTREG_DESTINATION) == (LL_RADIO_TIMER_1)) ? 1UL : 0UL);
1004652e:	687b      	ldr	r3, [r7, #4]
10046530:	68db      	ldr	r3, [r3, #12]
10046532:	2203      	movs	r2, #3
10046534:	4013      	ands	r3, r2
10046536:	2b02      	cmp	r3, #2
10046538:	d101      	bne.n	1004653e <LL_RADIO_TIMER_IsEnabledTimer1+0x18>
1004653a:	2301      	movs	r3, #1
1004653c:	e000      	b.n	10046540 <LL_RADIO_TIMER_IsEnabledTimer1+0x1a>
1004653e:	2300      	movs	r3, #0
}
10046540:	0018      	movs	r0, r3
10046542:	46bd      	mov	sp, r7
10046544:	b002      	add	sp, #8
10046546:	bd80      	pop	{r7, pc}

10046548 <LL_RADIO_TIMER_DisableTimer2>:
{
10046548:	b580      	push	{r7, lr}
1004654a:	b082      	sub	sp, #8
1004654c:	af00      	add	r7, sp, #0
1004654e:	6078      	str	r0, [r7, #4]
  MODIFY_REG_FIELD(BLUEx->TIMEOUTDESTREG, BLUE_TIMEOUTDESTREG_DESTINATION, 0);
10046550:	687b      	ldr	r3, [r7, #4]
10046552:	68db      	ldr	r3, [r3, #12]
10046554:	2203      	movs	r2, #3
10046556:	4393      	bics	r3, r2
10046558:	001a      	movs	r2, r3
1004655a:	687b      	ldr	r3, [r7, #4]
1004655c:	60da      	str	r2, [r3, #12]
}
1004655e:	46c0      	nop			@ (mov r8, r8)
10046560:	46bd      	mov	sp, r7
10046562:	b002      	add	sp, #8
10046564:	bd80      	pop	{r7, pc}

10046566 <LL_RADIO_TIMER_IsEnabledTimer2>:
{
10046566:	b580      	push	{r7, lr}
10046568:	b082      	sub	sp, #8
1004656a:	af00      	add	r7, sp, #0
1004656c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(BLUEx->TIMEOUTDESTREG, BLUE_TIMEOUTDESTREG_DESTINATION) == (LL_RADIO_TIMER_2)) ? 1UL : 0UL);
1004656e:	687b      	ldr	r3, [r7, #4]
10046570:	68db      	ldr	r3, [r3, #12]
10046572:	2203      	movs	r2, #3
10046574:	4013      	ands	r3, r2
10046576:	2b03      	cmp	r3, #3
10046578:	d101      	bne.n	1004657e <LL_RADIO_TIMER_IsEnabledTimer2+0x18>
1004657a:	2301      	movs	r3, #1
1004657c:	e000      	b.n	10046580 <LL_RADIO_TIMER_IsEnabledTimer2+0x1a>
1004657e:	2300      	movs	r3, #0
}
10046580:	0018      	movs	r0, r3
10046582:	46bd      	mov	sp, r7
10046584:	b002      	add	sp, #8
10046586:	bd80      	pop	{r7, pc}

10046588 <LL_RADIO_TIMER_SetTimeout>:
{
10046588:	b580      	push	{r7, lr}
1004658a:	b082      	sub	sp, #8
1004658c:	af00      	add	r7, sp, #0
1004658e:	6078      	str	r0, [r7, #4]
10046590:	6039      	str	r1, [r7, #0]
  WRITE_REG(BLUEx->TIMEOUTREG, timeout);
10046592:	687b      	ldr	r3, [r7, #4]
10046594:	683a      	ldr	r2, [r7, #0]
10046596:	611a      	str	r2, [r3, #16]
}
10046598:	46c0      	nop			@ (mov r8, r8)
1004659a:	46bd      	mov	sp, r7
1004659c:	b002      	add	sp, #8
1004659e:	bd80      	pop	{r7, pc}

100465a0 <LL_RADIO_TIMER_GetTimeout>:
{
100465a0:	b580      	push	{r7, lr}
100465a2:	b082      	sub	sp, #8
100465a4:	af00      	add	r7, sp, #0
100465a6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_REG(BLUEx->TIMEOUTREG));
100465a8:	687b      	ldr	r3, [r7, #4]
100465aa:	691b      	ldr	r3, [r3, #16]
}
100465ac:	0018      	movs	r0, r3
100465ae:	46bd      	mov	sp, r7
100465b0:	b002      	add	sp, #8
100465b2:	bd80      	pop	{r7, pc}

100465b4 <LL_RADIO_TIMER_EnableBLEWakeupTimer>:
{
100465b4:	b580      	push	{r7, lr}
100465b6:	b082      	sub	sp, #8
100465b8:	af00      	add	r7, sp, #0
100465ba:	6078      	str	r0, [r7, #4]
  SET_BIT(WAKEUPx->BLUE_SLEEP_REQUEST_MODE, WAKEUP_BLUE_SLEEP_REQUEST_MODE_BLE_WAKEUP_EN);
100465bc:	687b      	ldr	r3, [r7, #4]
100465be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
100465c0:	2280      	movs	r2, #128	@ 0x80
100465c2:	05d2      	lsls	r2, r2, #23
100465c4:	431a      	orrs	r2, r3
100465c6:	687b      	ldr	r3, [r7, #4]
100465c8:	629a      	str	r2, [r3, #40]	@ 0x28
}
100465ca:	46c0      	nop			@ (mov r8, r8)
100465cc:	46bd      	mov	sp, r7
100465ce:	b002      	add	sp, #8
100465d0:	bd80      	pop	{r7, pc}
	...

100465d4 <LL_RADIO_TIMER_DisableBLEWakeupTimer>:
{
100465d4:	b580      	push	{r7, lr}
100465d6:	b082      	sub	sp, #8
100465d8:	af00      	add	r7, sp, #0
100465da:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(WAKEUPx->BLUE_SLEEP_REQUEST_MODE, WAKEUP_BLUE_SLEEP_REQUEST_MODE_BLE_WAKEUP_EN);
100465dc:	687b      	ldr	r3, [r7, #4]
100465de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
100465e0:	4a03      	ldr	r2, [pc, #12]	@ (100465f0 <LL_RADIO_TIMER_DisableBLEWakeupTimer+0x1c>)
100465e2:	401a      	ands	r2, r3
100465e4:	687b      	ldr	r3, [r7, #4]
100465e6:	629a      	str	r2, [r3, #40]	@ 0x28
}
100465e8:	46c0      	nop			@ (mov r8, r8)
100465ea:	46bd      	mov	sp, r7
100465ec:	b002      	add	sp, #8
100465ee:	bd80      	pop	{r7, pc}
100465f0:	bfffffff 	.word	0xbfffffff

100465f4 <LL_RADIO_TIMER_IsEnabledBLEWakeupTimer>:
{
100465f4:	b580      	push	{r7, lr}
100465f6:	b082      	sub	sp, #8
100465f8:	af00      	add	r7, sp, #0
100465fa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(WAKEUPx->BLUE_SLEEP_REQUEST_MODE, WAKEUP_BLUE_SLEEP_REQUEST_MODE_BLE_WAKEUP_EN) == (WAKEUP_BLUE_SLEEP_REQUEST_MODE_BLE_WAKEUP_EN)) ? 1UL : 0UL);
100465fc:	687b      	ldr	r3, [r7, #4]
100465fe:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
10046600:	2380      	movs	r3, #128	@ 0x80
10046602:	05db      	lsls	r3, r3, #23
10046604:	401a      	ands	r2, r3
10046606:	2380      	movs	r3, #128	@ 0x80
10046608:	05db      	lsls	r3, r3, #23
1004660a:	429a      	cmp	r2, r3
1004660c:	d101      	bne.n	10046612 <LL_RADIO_TIMER_IsEnabledBLEWakeupTimer+0x1e>
1004660e:	2301      	movs	r3, #1
10046610:	e000      	b.n	10046614 <LL_RADIO_TIMER_IsEnabledBLEWakeupTimer+0x20>
10046612:	2300      	movs	r3, #0
}
10046614:	0018      	movs	r0, r3
10046616:	46bd      	mov	sp, r7
10046618:	b002      	add	sp, #8
1004661a:	bd80      	pop	{r7, pc}

1004661c <LL_RADIO_TIMER_EnableCPUWakeupTimer>:
{
1004661c:	b580      	push	{r7, lr}
1004661e:	b082      	sub	sp, #8
10046620:	af00      	add	r7, sp, #0
10046622:	6078      	str	r0, [r7, #4]
  SET_BIT(WAKEUPx->CM0_SLEEP_REQUEST_MODE, WAKEUP_CM0_SLEEP_REQUEST_MODE_CPU_WAKEUP_EN);
10046624:	687b      	ldr	r3, [r7, #4]
10046626:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
10046628:	2280      	movs	r2, #128	@ 0x80
1004662a:	05d2      	lsls	r2, r2, #23
1004662c:	431a      	orrs	r2, r3
1004662e:	687b      	ldr	r3, [r7, #4]
10046630:	631a      	str	r2, [r3, #48]	@ 0x30
}
10046632:	46c0      	nop			@ (mov r8, r8)
10046634:	46bd      	mov	sp, r7
10046636:	b002      	add	sp, #8
10046638:	bd80      	pop	{r7, pc}
	...

1004663c <LL_RADIO_TIMER_DisableCPUWakeupTimer>:
{
1004663c:	b580      	push	{r7, lr}
1004663e:	b082      	sub	sp, #8
10046640:	af00      	add	r7, sp, #0
10046642:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(WAKEUPx->CM0_SLEEP_REQUEST_MODE, WAKEUP_CM0_SLEEP_REQUEST_MODE_CPU_WAKEUP_EN);
10046644:	687b      	ldr	r3, [r7, #4]
10046646:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
10046648:	4a03      	ldr	r2, [pc, #12]	@ (10046658 <LL_RADIO_TIMER_DisableCPUWakeupTimer+0x1c>)
1004664a:	401a      	ands	r2, r3
1004664c:	687b      	ldr	r3, [r7, #4]
1004664e:	631a      	str	r2, [r3, #48]	@ 0x30
}
10046650:	46c0      	nop			@ (mov r8, r8)
10046652:	46bd      	mov	sp, r7
10046654:	b002      	add	sp, #8
10046656:	bd80      	pop	{r7, pc}
10046658:	bfffffff 	.word	0xbfffffff

1004665c <LL_RADIO_TIMER_SetWakeupOffset>:
{
1004665c:	b580      	push	{r7, lr}
1004665e:	b082      	sub	sp, #8
10046660:	af00      	add	r7, sp, #0
10046662:	6078      	str	r0, [r7, #4]
10046664:	000a      	movs	r2, r1
10046666:	1cfb      	adds	r3, r7, #3
10046668:	701a      	strb	r2, [r3, #0]
  WRITE_REG(WAKEUPx->WAKEUP_OFFSET[0], (Time & 0xFF));
1004666a:	1cfb      	adds	r3, r7, #3
1004666c:	781a      	ldrb	r2, [r3, #0]
1004666e:	687b      	ldr	r3, [r7, #4]
10046670:	609a      	str	r2, [r3, #8]
}
10046672:	46c0      	nop			@ (mov r8, r8)
10046674:	46bd      	mov	sp, r7
10046676:	b002      	add	sp, #8
10046678:	bd80      	pop	{r7, pc}

1004667a <LL_RADIO_TIMER_SetBLEWakeupTime>:
{
1004667a:	b580      	push	{r7, lr}
1004667c:	b082      	sub	sp, #8
1004667e:	af00      	add	r7, sp, #0
10046680:	6078      	str	r0, [r7, #4]
10046682:	6039      	str	r1, [r7, #0]
  WRITE_REG(WAKEUPx->BLUE_WAKEUP_TIME, Time);
10046684:	687b      	ldr	r3, [r7, #4]
10046686:	683a      	ldr	r2, [r7, #0]
10046688:	625a      	str	r2, [r3, #36]	@ 0x24
}
1004668a:	46c0      	nop			@ (mov r8, r8)
1004668c:	46bd      	mov	sp, r7
1004668e:	b002      	add	sp, #8
10046690:	bd80      	pop	{r7, pc}

10046692 <LL_RADIO_TIMER_GetBLEWakeupTime>:
{
10046692:	b580      	push	{r7, lr}
10046694:	b082      	sub	sp, #8
10046696:	af00      	add	r7, sp, #0
10046698:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_REG(WAKEUPx->BLUE_WAKEUP_TIME));
1004669a:	687b      	ldr	r3, [r7, #4]
1004669c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
}
1004669e:	0018      	movs	r0, r3
100466a0:	46bd      	mov	sp, r7
100466a2:	b002      	add	sp, #8
100466a4:	bd80      	pop	{r7, pc}

100466a6 <LL_RADIO_TIMER_SetCPUWakeupTime>:
{
100466a6:	b580      	push	{r7, lr}
100466a8:	b082      	sub	sp, #8
100466aa:	af00      	add	r7, sp, #0
100466ac:	6078      	str	r0, [r7, #4]
100466ae:	6039      	str	r1, [r7, #0]
  WRITE_REG(WAKEUPx->CM0_WAKEUP_TIME, Time);
100466b0:	687b      	ldr	r3, [r7, #4]
100466b2:	683a      	ldr	r2, [r7, #0]
100466b4:	62da      	str	r2, [r3, #44]	@ 0x2c
}
100466b6:	46c0      	nop			@ (mov r8, r8)
100466b8:	46bd      	mov	sp, r7
100466ba:	b002      	add	sp, #8
100466bc:	bd80      	pop	{r7, pc}

100466be <LL_RADIO_TIMER_GetAbsoluteTime>:
{
100466be:	b580      	push	{r7, lr}
100466c0:	b082      	sub	sp, #8
100466c2:	af00      	add	r7, sp, #0
100466c4:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_REG(WAKEUPx->ABSOLUTE_TIME));
100466c6:	687b      	ldr	r3, [r7, #4]
100466c8:	691b      	ldr	r3, [r3, #16]
}
100466ca:	0018      	movs	r0, r3
100466cc:	46bd      	mov	sp, r7
100466ce:	b002      	add	sp, #8
100466d0:	bd80      	pop	{r7, pc}

100466d2 <LL_RADIO_TIMER_EnableWakeupTimerLowPowerMode>:
  * @rmtoll BLUE_SLEEP_REQUEST_MODE    SLEEP_EN   LL_RADIO_TIMER_EnableWakeupTimerLowPowerMode
  * @param  WAKEUPx Radio Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_TIMER_EnableWakeupTimerLowPowerMode(WAKEUP_TypeDef *WAKEUPx)
{
100466d2:	b580      	push	{r7, lr}
100466d4:	b082      	sub	sp, #8
100466d6:	af00      	add	r7, sp, #0
100466d8:	6078      	str	r0, [r7, #4]
  SET_BIT(WAKEUPx->BLUE_SLEEP_REQUEST_MODE, WAKEUP_BLUE_SLEEP_REQUEST_MODE_SLEEP_EN);
100466da:	687b      	ldr	r3, [r7, #4]
100466dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
100466de:	2280      	movs	r2, #128	@ 0x80
100466e0:	0592      	lsls	r2, r2, #22
100466e2:	431a      	orrs	r2, r3
100466e4:	687b      	ldr	r3, [r7, #4]
100466e6:	629a      	str	r2, [r3, #40]	@ 0x28
}
100466e8:	46c0      	nop			@ (mov r8, r8)
100466ea:	46bd      	mov	sp, r7
100466ec:	b002      	add	sp, #8
100466ee:	bd80      	pop	{r7, pc}

100466f0 <LL_RADIO_TIMER_SetSleepRequestMode>:
  * @param  WAKEUPx Radio Timer instance
  * @param  mode Sleep mode value in range 0-7
  * @retval None.
  */
__STATIC_INLINE void LL_RADIO_TIMER_SetSleepRequestMode(WAKEUP_TypeDef *WAKEUPx, uint8_t mode)
{
100466f0:	b580      	push	{r7, lr}
100466f2:	b082      	sub	sp, #8
100466f4:	af00      	add	r7, sp, #0
100466f6:	6078      	str	r0, [r7, #4]
100466f8:	000a      	movs	r2, r1
100466fa:	1cfb      	adds	r3, r7, #3
100466fc:	701a      	strb	r2, [r3, #0]
#if defined(STM32WB09)
  return;
#else
  MODIFY_REG_FIELD(WAKEUP->BLUE_SLEEP_REQUEST_MODE, WAKEUP_BLUE_SLEEP_REQUEST_MODE_SLEEP_REQ_MODE, (mode & 0x7));
100466fe:	4b08      	ldr	r3, [pc, #32]	@ (10046720 <LL_RADIO_TIMER_SetSleepRequestMode+0x30>)
10046700:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
10046702:	2207      	movs	r2, #7
10046704:	4393      	bics	r3, r2
10046706:	0019      	movs	r1, r3
10046708:	1cfb      	adds	r3, r7, #3
1004670a:	781b      	ldrb	r3, [r3, #0]
1004670c:	2207      	movs	r2, #7
1004670e:	401a      	ands	r2, r3
10046710:	4b03      	ldr	r3, [pc, #12]	@ (10046720 <LL_RADIO_TIMER_SetSleepRequestMode+0x30>)
10046712:	430a      	orrs	r2, r1
10046714:	629a      	str	r2, [r3, #40]	@ 0x28
#endif
}
10046716:	46c0      	nop			@ (mov r8, r8)
10046718:	46bd      	mov	sp, r7
1004671a:	b002      	add	sp, #8
1004671c:	bd80      	pop	{r7, pc}
1004671e:	46c0      	nop			@ (mov r8, r8)
10046720:	60001800 	.word	0x60001800

10046724 <LL_RADIO_TIMER_EnableBLEWakeupIT>:
  * @rmtoll WAKEUP_BLE_IRQ_ENABLE    WAKEUP_IT   LL_RADIO_TIMER_EnableBLEWakeupIT
  * @param  WAKEUPx Radio Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_TIMER_EnableBLEWakeupIT(WAKEUP_TypeDef *WAKEUPx)
{
10046724:	b580      	push	{r7, lr}
10046726:	b082      	sub	sp, #8
10046728:	af00      	add	r7, sp, #0
1004672a:	6078      	str	r0, [r7, #4]
  SET_BIT(WAKEUPx->WAKEUP_BLE_IRQ_ENABLE, WAKEUP_WAKEUP_BLE_IRQ_ENABLE_WAKEUP_IT);
1004672c:	687b      	ldr	r3, [r7, #4]
1004672e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
10046730:	2201      	movs	r2, #1
10046732:	431a      	orrs	r2, r3
10046734:	687b      	ldr	r3, [r7, #4]
10046736:	641a      	str	r2, [r3, #64]	@ 0x40
}
10046738:	46c0      	nop			@ (mov r8, r8)
1004673a:	46bd      	mov	sp, r7
1004673c:	b002      	add	sp, #8
1004673e:	bd80      	pop	{r7, pc}

10046740 <LL_RADIO_TIMER_EnableCPUWakeupIT>:
  * @rmtoll WAKEUP_CM0_IRQ_ENABLE    WAKEUP_IT   LL_RADIO_TIMER_EnableCPUWakeupIT
  * @param  WAKEUPx Radio Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_TIMER_EnableCPUWakeupIT(WAKEUP_TypeDef *WAKEUPx)
{
10046740:	b580      	push	{r7, lr}
10046742:	b082      	sub	sp, #8
10046744:	af00      	add	r7, sp, #0
10046746:	6078      	str	r0, [r7, #4]
  SET_BIT(WAKEUPx->WAKEUP_CM0_IRQ_ENABLE, WAKEUP_WAKEUP_CM0_IRQ_ENABLE_WAKEUP_IT);
10046748:	687b      	ldr	r3, [r7, #4]
1004674a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
1004674c:	2201      	movs	r2, #1
1004674e:	431a      	orrs	r2, r3
10046750:	687b      	ldr	r3, [r7, #4]
10046752:	649a      	str	r2, [r3, #72]	@ 0x48
}
10046754:	46c0      	nop			@ (mov r8, r8)
10046756:	46bd      	mov	sp, r7
10046758:	b002      	add	sp, #8
1004675a:	bd80      	pop	{r7, pc}

1004675c <LL_RADIO_TIMER_ClearFlag_BLEWakeup>:
  * @rmtoll WAKEUP_BLE_IRQ_STATUS   WAKEUP_IT   LL_RADIO_TIMER_ClearFlag_BLEWakeup
  * @param  WAKEUPx Radio Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_TIMER_ClearFlag_BLEWakeup(WAKEUP_TypeDef *WAKEUPx)
{
1004675c:	b580      	push	{r7, lr}
1004675e:	b082      	sub	sp, #8
10046760:	af00      	add	r7, sp, #0
10046762:	6078      	str	r0, [r7, #4]
  SET_BIT(WAKEUPx->WAKEUP_BLE_IRQ_STATUS, WAKEUP_WAKEUP_BLE_IRQ_STATUS_WAKEUP_IT);
10046764:	687b      	ldr	r3, [r7, #4]
10046766:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
10046768:	2201      	movs	r2, #1
1004676a:	431a      	orrs	r2, r3
1004676c:	687b      	ldr	r3, [r7, #4]
1004676e:	645a      	str	r2, [r3, #68]	@ 0x44
}
10046770:	46c0      	nop			@ (mov r8, r8)
10046772:	46bd      	mov	sp, r7
10046774:	b002      	add	sp, #8
10046776:	bd80      	pop	{r7, pc}

10046778 <LL_RADIO_TIMER_IsActiveFlag_BLEWakeup>:
  * @rmtoll WAKEUP_BLE_IRQ_STATUS   WAKEUP_IT   LL_RADIO_TIMER_IsActiveFlag_BLEWakeup
  * @param  WAKEUPx Radio Timer instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RADIO_TIMER_IsActiveFlag_BLEWakeup(WAKEUP_TypeDef *WAKEUPx)
{
10046778:	b580      	push	{r7, lr}
1004677a:	b082      	sub	sp, #8
1004677c:	af00      	add	r7, sp, #0
1004677e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(WAKEUPx->WAKEUP_BLE_IRQ_STATUS, WAKEUP_WAKEUP_BLE_IRQ_STATUS_WAKEUP_IT) == (WAKEUP_WAKEUP_BLE_IRQ_STATUS_WAKEUP_IT)) ? 1UL : 0UL);
10046780:	687b      	ldr	r3, [r7, #4]
10046782:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
10046784:	2201      	movs	r2, #1
10046786:	4013      	ands	r3, r2
10046788:	2b01      	cmp	r3, #1
1004678a:	d101      	bne.n	10046790 <LL_RADIO_TIMER_IsActiveFlag_BLEWakeup+0x18>
1004678c:	2301      	movs	r3, #1
1004678e:	e000      	b.n	10046792 <LL_RADIO_TIMER_IsActiveFlag_BLEWakeup+0x1a>
10046790:	2300      	movs	r3, #0
}
10046792:	0018      	movs	r0, r3
10046794:	46bd      	mov	sp, r7
10046796:	b002      	add	sp, #8
10046798:	bd80      	pop	{r7, pc}

1004679a <LL_RADIO_TIMER_ClearFlag_CPUWakeup>:
  * @rmtoll WAKEUP_CM0_IRQ_STATUS   WAKEUP_IT   LL_RADIO_TIMER_ClearFlag_CPUWakeup
  * @param  WAKEUPx Radio Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_TIMER_ClearFlag_CPUWakeup(WAKEUP_TypeDef *WAKEUPx)
{
1004679a:	b580      	push	{r7, lr}
1004679c:	b082      	sub	sp, #8
1004679e:	af00      	add	r7, sp, #0
100467a0:	6078      	str	r0, [r7, #4]
  SET_BIT(WAKEUPx->WAKEUP_CM0_IRQ_STATUS, WAKEUP_WAKEUP_CM0_IRQ_STATUS_WAKEUP_IT);
100467a2:	687b      	ldr	r3, [r7, #4]
100467a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
100467a6:	2201      	movs	r2, #1
100467a8:	431a      	orrs	r2, r3
100467aa:	687b      	ldr	r3, [r7, #4]
100467ac:	64da      	str	r2, [r3, #76]	@ 0x4c
}
100467ae:	46c0      	nop			@ (mov r8, r8)
100467b0:	46bd      	mov	sp, r7
100467b2:	b002      	add	sp, #8
100467b4:	bd80      	pop	{r7, pc}

100467b6 <LL_RADIO_TIMER_IsActiveFlag_CPUWakeup>:
  * @rmtoll WAKEUP_CM0_IRQ_STATUS   WAKEUP_IT   LL_RADIO_TIMER_IsActiveFlag_CPUWakeup
  * @param  WAKEUPx Radio Timer instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RADIO_TIMER_IsActiveFlag_CPUWakeup(WAKEUP_TypeDef *WAKEUPx)
{
100467b6:	b580      	push	{r7, lr}
100467b8:	b082      	sub	sp, #8
100467ba:	af00      	add	r7, sp, #0
100467bc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(WAKEUPx->WAKEUP_CM0_IRQ_STATUS, WAKEUP_WAKEUP_CM0_IRQ_STATUS_WAKEUP_IT) == (WAKEUP_WAKEUP_CM0_IRQ_STATUS_WAKEUP_IT)) ? 1UL : 0UL);
100467be:	687b      	ldr	r3, [r7, #4]
100467c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
100467c2:	2201      	movs	r2, #1
100467c4:	4013      	ands	r3, r2
100467c6:	2b01      	cmp	r3, #1
100467c8:	d101      	bne.n	100467ce <LL_RADIO_TIMER_IsActiveFlag_CPUWakeup+0x18>
100467ca:	2301      	movs	r3, #1
100467cc:	e000      	b.n	100467d0 <LL_RADIO_TIMER_IsActiveFlag_CPUWakeup+0x1a>
100467ce:	2300      	movs	r3, #0
}
100467d0:	0018      	movs	r0, r3
100467d2:	46bd      	mov	sp, r7
100467d4:	b002      	add	sp, #8
100467d6:	bd80      	pop	{r7, pc}

100467d8 <LL_RADIO_TIMER_SetLSIWindowCalibrationLength>:
  * @param RADIO_CTRLx: Radio Control instance
  * @param  Count Slow clock is measured in a window of SLOW_COUNT+1 slow clock cycles
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_TIMER_SetLSIWindowCalibrationLength(RADIO_CTRL_TypeDef *RADIO_CTRLx, uint32_t Count)
{
100467d8:	b580      	push	{r7, lr}
100467da:	b082      	sub	sp, #8
100467dc:	af00      	add	r7, sp, #0
100467de:	6078      	str	r0, [r7, #4]
100467e0:	6039      	str	r1, [r7, #0]
  WRITE_REG(RADIO_CTRLx->CLK32COUNT_REG, Count);
100467e2:	687b      	ldr	r3, [r7, #4]
100467e4:	683a      	ldr	r2, [r7, #0]
100467e6:	605a      	str	r2, [r3, #4]
}
100467e8:	46c0      	nop			@ (mov r8, r8)
100467ea:	46bd      	mov	sp, r7
100467ec:	b002      	add	sp, #8
100467ee:	bd80      	pop	{r7, pc}

100467f0 <LL_RADIO_TIMER_StartLSICalibration>:
  * @brief  Start the LSI calibration procedure.
  * @param RADIO_CTRLx: Radio Control instance
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_TIMER_StartLSICalibration(RADIO_CTRL_TypeDef *RADIO_CTRLx)
{
100467f0:	b580      	push	{r7, lr}
100467f2:	b082      	sub	sp, #8
100467f4:	af00      	add	r7, sp, #0
100467f6:	6078      	str	r0, [r7, #4]
  WRITE_REG(RADIO_CTRLx->CLK32PERIOD_REG, 0);
100467f8:	687b      	ldr	r3, [r7, #4]
100467fa:	2200      	movs	r2, #0
100467fc:	609a      	str	r2, [r3, #8]
}
100467fe:	46c0      	nop			@ (mov r8, r8)
10046800:	46bd      	mov	sp, r7
10046802:	b002      	add	sp, #8
10046804:	bd80      	pop	{r7, pc}

10046806 <LL_RADIO_TIMER_GetLSIPeriod>:
  * @brief  Get the LSI clock Period calibrated.
  * @param RADIO_CTRLx: Radio Control instance
  * @retval The LSI clock period calibrated
  */
__STATIC_INLINE uint32_t LL_RADIO_TIMER_GetLSIPeriod(RADIO_CTRL_TypeDef *RADIO_CTRLx)
{
10046806:	b580      	push	{r7, lr}
10046808:	b082      	sub	sp, #8
1004680a:	af00      	add	r7, sp, #0
1004680c:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_REG(RADIO_CTRLx->CLK32PERIOD_REG));
1004680e:	687b      	ldr	r3, [r7, #4]
10046810:	689b      	ldr	r3, [r3, #8]
}
10046812:	0018      	movs	r0, r3
10046814:	46bd      	mov	sp, r7
10046816:	b002      	add	sp, #8
10046818:	bd80      	pop	{r7, pc}

1004681a <LL_RADIO_TIMER_GetLSIFrequency>:
  * @brief  Get the LSI clock Frequency calibrated.
  * @param RADIO_CTRLx: Radio Control instance
  * @retval The LSI clock frequency calibrated
  */
__STATIC_INLINE uint32_t LL_RADIO_TIMER_GetLSIFrequency(RADIO_CTRL_TypeDef *RADIO_CTRLx)
{
1004681a:	b580      	push	{r7, lr}
1004681c:	b082      	sub	sp, #8
1004681e:	af00      	add	r7, sp, #0
10046820:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_REG(RADIO_CTRLx->CLK32FREQUENCY_REG));
10046822:	687b      	ldr	r3, [r7, #4]
10046824:	68db      	ldr	r3, [r3, #12]
}
10046826:	0018      	movs	r0, r3
10046828:	46bd      	mov	sp, r7
1004682a:	b002      	add	sp, #8
1004682c:	bd80      	pop	{r7, pc}

1004682e <LL_RADIO_TIMER_ClearFlag_LSICalibrationEnded>:
  * @brief  Clear the LSI calibration ended flag.
  * @param RADIO_CTRLx: Radio Control instance
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_TIMER_ClearFlag_LSICalibrationEnded(RADIO_CTRL_TypeDef *RADIO_CTRLx)
{
1004682e:	b580      	push	{r7, lr}
10046830:	b082      	sub	sp, #8
10046832:	af00      	add	r7, sp, #0
10046834:	6078      	str	r0, [r7, #4]
  SET_BIT(RADIO_CTRLx->RADIO_CONTROL_IRQ_STATUS, RADIO_CTRL_RADIO_CONTROL_IRQ_STATUS_SLOW_CLK_IRQ);
10046836:	687b      	ldr	r3, [r7, #4]
10046838:	691b      	ldr	r3, [r3, #16]
1004683a:	2201      	movs	r2, #1
1004683c:	431a      	orrs	r2, r3
1004683e:	687b      	ldr	r3, [r7, #4]
10046840:	611a      	str	r2, [r3, #16]
}
10046842:	46c0      	nop			@ (mov r8, r8)
10046844:	46bd      	mov	sp, r7
10046846:	b002      	add	sp, #8
10046848:	bd80      	pop	{r7, pc}

1004684a <LL_RADIO_TIMER_IsActiveFlag_LSICalibrationEnded>:
  * @brief  Check if the LSI calibration ended flag is set or not.
  * @param RADIO_CTRLx: Radio Control instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RADIO_TIMER_IsActiveFlag_LSICalibrationEnded(RADIO_CTRL_TypeDef *RADIO_CTRLx)
{
1004684a:	b580      	push	{r7, lr}
1004684c:	b082      	sub	sp, #8
1004684e:	af00      	add	r7, sp, #0
10046850:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(RADIO_CTRLx->RADIO_CONTROL_IRQ_STATUS, RADIO_CTRL_RADIO_CONTROL_IRQ_STATUS_SLOW_CLK_IRQ) == (RADIO_CTRL_RADIO_CONTROL_IRQ_STATUS_SLOW_CLK_IRQ)) ? 1UL : 0UL);
10046852:	687b      	ldr	r3, [r7, #4]
10046854:	691b      	ldr	r3, [r3, #16]
10046856:	2201      	movs	r2, #1
10046858:	4013      	ands	r3, r2
1004685a:	2b01      	cmp	r3, #1
1004685c:	d101      	bne.n	10046862 <LL_RADIO_TIMER_IsActiveFlag_LSICalibrationEnded+0x18>
1004685e:	2301      	movs	r3, #1
10046860:	e000      	b.n	10046864 <LL_RADIO_TIMER_IsActiveFlag_LSICalibrationEnded+0x1a>
10046862:	2300      	movs	r3, #0
}
10046864:	0018      	movs	r0, r3
10046866:	46bd      	mov	sp, r7
10046868:	b002      	add	sp, #8
1004686a:	bd80      	pop	{r7, pc}

1004686c <HAL_RADIO_TIMER_Init>:
  *         section of the application.
  * @param RADIO_TIMER_InitStruct Radio Timer Initialization parameters
  * @retval None
  */
void HAL_RADIO_TIMER_Init(RADIO_TIMER_InitTypeDef *RADIO_TIMER_InitStruct)
{
1004686c:	b5f0      	push	{r4, r5, r6, r7, lr}
1004686e:	b083      	sub	sp, #12
10046870:	af00      	add	r7, sp, #0
10046872:	6078      	str	r0, [r7, #4]
  /* Interrupt Configuration */
  LL_RADIO_TIMER_ClearFlag_CPUWakeup(WAKEUP);
10046874:	4b7c      	ldr	r3, [pc, #496]	@ (10046a68 <HAL_RADIO_TIMER_Init+0x1fc>)
10046876:	0018      	movs	r0, r3
10046878:	f7ff ff8f 	bl	1004679a <LL_RADIO_TIMER_ClearFlag_CPUWakeup>
  LL_RADIO_TIMER_EnableCPUWakeupIT(WAKEUP);
1004687c:	4b7a      	ldr	r3, [pc, #488]	@ (10046a68 <HAL_RADIO_TIMER_Init+0x1fc>)
1004687e:	0018      	movs	r0, r3
10046880:	f7ff ff5e 	bl	10046740 <LL_RADIO_TIMER_EnableCPUWakeupIT>
  NVIC_EnableIRQ(RADIO_TIMER_CPU_WKUP_IRQn);
10046884:	2017      	movs	r0, #23
10046886:	f7ff fe15 	bl	100464b4 <__NVIC_EnableIRQ>
  NVIC_EnableIRQ(RADIO_TIMER_ERROR_IRQn);
1004688a:	2014      	movs	r0, #20
1004688c:	f7ff fe12 	bl	100464b4 <__NVIC_EnableIRQ>

#if defined (STM32WB06) || defined (STM32WB07)
  LL_RADIO_TIMER_ClearFlag_BLEWakeup(WAKEUP);
10046890:	4b75      	ldr	r3, [pc, #468]	@ (10046a68 <HAL_RADIO_TIMER_Init+0x1fc>)
10046892:	0018      	movs	r0, r3
10046894:	f7ff ff62 	bl	1004675c <LL_RADIO_TIMER_ClearFlag_BLEWakeup>
  LL_RADIO_TIMER_EnableBLEWakeupIT(WAKEUP);
10046898:	4b73      	ldr	r3, [pc, #460]	@ (10046a68 <HAL_RADIO_TIMER_Init+0x1fc>)
1004689a:	0018      	movs	r0, r3
1004689c:	f7ff ff42 	bl	10046724 <LL_RADIO_TIMER_EnableBLEWakeupIT>
  NVIC_EnableIRQ(RADIO_TIMER_TXRX_WKUP_IRQn);
100468a0:	2018      	movs	r0, #24
100468a2:	f7ff fe07 	bl	100464b4 <__NVIC_EnableIRQ>
  RADIO_TIMER_Context.hostMargin = MAX(HOST_MARGIN, RADIO_TIMER_InitStruct->XTAL_StartupTime);
100468a6:	687b      	ldr	r3, [r7, #4]
100468a8:	881b      	ldrh	r3, [r3, #0]
100468aa:	1c1a      	adds	r2, r3, #0
100468ac:	b293      	uxth	r3, r2
100468ae:	2bc8      	cmp	r3, #200	@ 0xc8
100468b0:	d201      	bcs.n	100468b6 <HAL_RADIO_TIMER_Init+0x4a>
100468b2:	23c8      	movs	r3, #200	@ 0xc8
100468b4:	1c1a      	adds	r2, r3, #0
100468b6:	b293      	uxth	r3, r2
100468b8:	0019      	movs	r1, r3
100468ba:	4b6c      	ldr	r3, [pc, #432]	@ (10046a6c <HAL_RADIO_TIMER_Init+0x200>)
100468bc:	2298      	movs	r2, #152	@ 0x98
100468be:	5099      	str	r1, [r3, r2]
#endif

  /* Calibration Setting */
  RADIO_TIMER_Context.calibrationSettings.periodicCalibration = (RADIO_TIMER_InitStruct->periodicCalibrationInterval != 0);
100468c0:	687b      	ldr	r3, [r7, #4]
100468c2:	685b      	ldr	r3, [r3, #4]
100468c4:	1e5a      	subs	r2, r3, #1
100468c6:	4193      	sbcs	r3, r2
100468c8:	b2db      	uxtb	r3, r3
100468ca:	001a      	movs	r2, r3
100468cc:	4b67      	ldr	r3, [pc, #412]	@ (10046a6c <HAL_RADIO_TIMER_Init+0x200>)
100468ce:	701a      	strb	r2, [r3, #0]
  if (RADIO_TIMER_Context.calibrationSettings.periodicCalibration || RADIO_TIMER_InitStruct->enableInitialCalibration)
100468d0:	4b66      	ldr	r3, [pc, #408]	@ (10046a6c <HAL_RADIO_TIMER_Init+0x200>)
100468d2:	781b      	ldrb	r3, [r3, #0]
100468d4:	2b00      	cmp	r3, #0
100468d6:	d103      	bne.n	100468e0 <HAL_RADIO_TIMER_Init+0x74>
100468d8:	687b      	ldr	r3, [r7, #4]
100468da:	789b      	ldrb	r3, [r3, #2]
100468dc:	2b00      	cmp	r3, #0
100468de:	d002      	beq.n	100468e6 <HAL_RADIO_TIMER_Init+0x7a>
  {
    _calibrationProcedure();
100468e0:	f000 fc68 	bl	100471b4 <_calibrationProcedure>
100468e4:	e010      	b.n	10046908 <HAL_RADIO_TIMER_Init+0x9c>
  }
  else
  {
    /* Assume fix frequency at 32.768 kHz */
    RADIO_TIMER_Context.calibrationData.last_period1 = 0x00190000;
100468e6:	4b61      	ldr	r3, [pc, #388]	@ (10046a6c <HAL_RADIO_TIMER_Init+0x200>)
100468e8:	22c8      	movs	r2, #200	@ 0xc8
100468ea:	0352      	lsls	r2, r2, #13
100468ec:	621a      	str	r2, [r3, #32]
    RADIO_TIMER_Context.calibrationData.period1 = 0x00190000 ;
100468ee:	4b5f      	ldr	r3, [pc, #380]	@ (10046a6c <HAL_RADIO_TIMER_Init+0x200>)
100468f0:	22c8      	movs	r2, #200	@ 0xc8
100468f2:	0352      	lsls	r2, r2, #13
100468f4:	61da      	str	r2, [r3, #28]
    RADIO_TIMER_Context.calibrationData.freq1 = 0x0028F5C2 ;
100468f6:	4b5d      	ldr	r3, [pc, #372]	@ (10046a6c <HAL_RADIO_TIMER_Init+0x200>)
100468f8:	4a5d      	ldr	r2, [pc, #372]	@ (10046a70 <HAL_RADIO_TIMER_Init+0x204>)
100468fa:	619a      	str	r2, [r3, #24]
    RADIO_TIMER_Context.calibrationData.period = 23437;
100468fc:	4b5b      	ldr	r3, [pc, #364]	@ (10046a6c <HAL_RADIO_TIMER_Init+0x200>)
100468fe:	4a5d      	ldr	r2, [pc, #372]	@ (10046a74 <HAL_RADIO_TIMER_Init+0x208>)
10046900:	611a      	str	r2, [r3, #16]
    RADIO_TIMER_Context.calibrationData.freq = 23456748;
10046902:	4b5a      	ldr	r3, [pc, #360]	@ (10046a6c <HAL_RADIO_TIMER_Init+0x200>)
10046904:	4a5c      	ldr	r2, [pc, #368]	@ (10046a78 <HAL_RADIO_TIMER_Init+0x20c>)
10046906:	615a      	str	r2, [r3, #20]
  }
  if (RADIO_TIMER_InitStruct->periodicCalibrationInterval == 0)
10046908:	687b      	ldr	r3, [r7, #4]
1004690a:	685b      	ldr	r3, [r3, #4]
1004690c:	2b00      	cmp	r3, #0
1004690e:	d108      	bne.n	10046922 <HAL_RADIO_TIMER_Init+0xb6>
  {
    RADIO_TIMER_Context.calibrationSettings.periodicCalibrationInterval = HAL_RADIO_TIMER_MachineTimeToSysTime(0x50000000);
10046910:	23a0      	movs	r3, #160	@ 0xa0
10046912:	05db      	lsls	r3, r3, #23
10046914:	0018      	movs	r0, r3
10046916:	f000 fb6b 	bl	10046ff0 <HAL_RADIO_TIMER_MachineTimeToSysTime>
1004691a:	0002      	movs	r2, r0
1004691c:	4b53      	ldr	r3, [pc, #332]	@ (10046a6c <HAL_RADIO_TIMER_Init+0x200>)
1004691e:	605a      	str	r2, [r3, #4]
10046920:	e01d      	b.n	1004695e <HAL_RADIO_TIMER_Init+0xf2>
  }
  else
  {
    RADIO_TIMER_Context.calibrationSettings.periodicCalibrationInterval = (TIMER_SYSTICK_PER_10MS * RADIO_TIMER_InitStruct->periodicCalibrationInterval) / 10;
10046922:	687b      	ldr	r3, [r7, #4]
10046924:	685b      	ldr	r3, [r3, #4]
10046926:	031b      	lsls	r3, r3, #12
10046928:	210a      	movs	r1, #10
1004692a:	0018      	movs	r0, r3
1004692c:	f7f9 fc06 	bl	1004013c <__udivsi3>
10046930:	0003      	movs	r3, r0
10046932:	001a      	movs	r2, r3
10046934:	4b4d      	ldr	r3, [pc, #308]	@ (10046a6c <HAL_RADIO_TIMER_Init+0x200>)
10046936:	605a      	str	r2, [r3, #4]
    RADIO_TIMER_Context.calibrationSettings.periodicCalibrationInterval = MIN(RADIO_TIMER_Context.calibrationSettings.periodicCalibrationInterval,
10046938:	4b4c      	ldr	r3, [pc, #304]	@ (10046a6c <HAL_RADIO_TIMER_Init+0x200>)
1004693a:	685e      	ldr	r6, [r3, #4]
1004693c:	4b4f      	ldr	r3, [pc, #316]	@ (10046a7c <HAL_RADIO_TIMER_Init+0x210>)
1004693e:	0018      	movs	r0, r3
10046940:	f000 fb56 	bl	10046ff0 <HAL_RADIO_TIMER_MachineTimeToSysTime>
10046944:	0003      	movs	r3, r0
10046946:	429e      	cmp	r6, r3
10046948:	d202      	bcs.n	10046950 <HAL_RADIO_TIMER_Init+0xe4>
1004694a:	4b48      	ldr	r3, [pc, #288]	@ (10046a6c <HAL_RADIO_TIMER_Init+0x200>)
1004694c:	685a      	ldr	r2, [r3, #4]
1004694e:	e004      	b.n	1004695a <HAL_RADIO_TIMER_Init+0xee>
10046950:	4b4a      	ldr	r3, [pc, #296]	@ (10046a7c <HAL_RADIO_TIMER_Init+0x210>)
10046952:	0018      	movs	r0, r3
10046954:	f000 fb4c 	bl	10046ff0 <HAL_RADIO_TIMER_MachineTimeToSysTime>
10046958:	0002      	movs	r2, r0
1004695a:	4b44      	ldr	r3, [pc, #272]	@ (10046a6c <HAL_RADIO_TIMER_Init+0x200>)
1004695c:	605a      	str	r2, [r3, #4]
                                                                              HAL_RADIO_TIMER_MachineTimeToSysTime(TIMER_MAX_VALUE - TIMER_WRAPPING_MARGIN));
  }
  RADIO_TIMER_Context.calibrationSettings.calibration_in_progress = FALSE;
1004695e:	4b43      	ldr	r3, [pc, #268]	@ (10046a6c <HAL_RADIO_TIMER_Init+0x200>)
10046960:	2200      	movs	r2, #0
10046962:	721a      	strb	r2, [r3, #8]

  /* XTAL startup time configuration */
  RADIO_TIMER_Context.hs_startup_time = RADIO_TIMER_InitStruct->XTAL_StartupTime;
10046964:	687b      	ldr	r3, [r7, #4]
10046966:	881b      	ldrh	r3, [r3, #0]
10046968:	001a      	movs	r2, r3
1004696a:	4b40      	ldr	r3, [pc, #256]	@ (10046a6c <HAL_RADIO_TIMER_Init+0x200>)
1004696c:	669a      	str	r2, [r3, #104]	@ 0x68
  _update_xtal_startup_time(RADIO_TIMER_Context.hs_startup_time, RADIO_TIMER_Context.calibrationData.freq1);
1004696e:	4b3f      	ldr	r3, [pc, #252]	@ (10046a6c <HAL_RADIO_TIMER_Init+0x200>)
10046970:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
10046972:	b29a      	uxth	r2, r3
10046974:	4b3d      	ldr	r3, [pc, #244]	@ (10046a6c <HAL_RADIO_TIMER_Init+0x200>)
10046976:	699b      	ldr	r3, [r3, #24]
10046978:	0019      	movs	r1, r3
1004697a:	0010      	movs	r0, r2
1004697c:	f000 fd8e 	bl	1004749c <_update_xtal_startup_time>

  /* Init Radio Timer Context */
  RADIO_TIMER_Context.last_setup_time = 0;
10046980:	4b3a      	ldr	r3, [pc, #232]	@ (10046a6c <HAL_RADIO_TIMER_Init+0x200>)
10046982:	2284      	movs	r2, #132	@ 0x84
10046984:	2100      	movs	r1, #0
10046986:	5499      	strb	r1, [r3, r2]
  RADIO_TIMER_Context.cumulative_time = 0;
10046988:	4938      	ldr	r1, [pc, #224]	@ (10046a6c <HAL_RADIO_TIMER_Init+0x200>)
1004698a:	2200      	movs	r2, #0
1004698c:	2300      	movs	r3, #0
1004698e:	670a      	str	r2, [r1, #112]	@ 0x70
10046990:	674b      	str	r3, [r1, #116]	@ 0x74
  RADIO_TIMER_Context.last_machine_time = LL_RADIO_TIMER_GetAbsoluteTime(WAKEUP);
10046992:	4b35      	ldr	r3, [pc, #212]	@ (10046a68 <HAL_RADIO_TIMER_Init+0x1fc>)
10046994:	0018      	movs	r0, r3
10046996:	f7ff fe92 	bl	100466be <LL_RADIO_TIMER_GetAbsoluteTime>
1004699a:	0002      	movs	r2, r0
1004699c:	4b33      	ldr	r3, [pc, #204]	@ (10046a6c <HAL_RADIO_TIMER_Init+0x200>)
1004699e:	2180      	movs	r1, #128	@ 0x80
100469a0:	505a      	str	r2, [r3, r1]
  RADIO_TIMER_Context.last_system_time = 0;
100469a2:	4932      	ldr	r1, [pc, #200]	@ (10046a6c <HAL_RADIO_TIMER_Init+0x200>)
100469a4:	2200      	movs	r2, #0
100469a6:	2300      	movs	r3, #0
100469a8:	678a      	str	r2, [r1, #120]	@ 0x78
100469aa:	67cb      	str	r3, [r1, #124]	@ 0x7c
  RADIO_TIMER_Context.calibrationData.last_calibration_time = 0;
100469ac:	492f      	ldr	r1, [pc, #188]	@ (10046a6c <HAL_RADIO_TIMER_Init+0x200>)
100469ae:	2200      	movs	r2, #0
100469b0:	2300      	movs	r3, #0
100469b2:	628a      	str	r2, [r1, #40]	@ 0x28
100469b4:	62cb      	str	r3, [r1, #44]	@ 0x2c
  RADIO_TIMER_Context.calibrationData.calibration_data_available = 0;
100469b6:	4b2d      	ldr	r3, [pc, #180]	@ (10046a6c <HAL_RADIO_TIMER_Init+0x200>)
100469b8:	2234      	movs	r2, #52	@ 0x34
100469ba:	2100      	movs	r1, #0
100469bc:	5499      	strb	r1, [r3, r2]
  RADIO_TIMER_Context.calibrationData.calibration_machine_interval = blue_unit_conversion(RADIO_TIMER_Context.calibrationSettings.periodicCalibrationInterval,
100469be:	4b2b      	ldr	r3, [pc, #172]	@ (10046a6c <HAL_RADIO_TIMER_Init+0x200>)
100469c0:	6858      	ldr	r0, [r3, #4]
                                                                     RADIO_TIMER_Context.calibrationData.freq1, MULT64_THR_FREQ);
100469c2:	4b2a      	ldr	r3, [pc, #168]	@ (10046a6c <HAL_RADIO_TIMER_Init+0x200>)
100469c4:	699b      	ldr	r3, [r3, #24]
  RADIO_TIMER_Context.calibrationData.calibration_machine_interval = blue_unit_conversion(RADIO_TIMER_Context.calibrationSettings.periodicCalibrationInterval,
100469c6:	0019      	movs	r1, r3
100469c8:	4b2d      	ldr	r3, [pc, #180]	@ (10046a80 <HAL_RADIO_TIMER_Init+0x214>)
100469ca:	001a      	movs	r2, r3
100469cc:	f7f9 fb78 	bl	100400c0 <blue_unit_conversion>
100469d0:	0002      	movs	r2, r0
100469d2:	4b26      	ldr	r3, [pc, #152]	@ (10046a6c <HAL_RADIO_TIMER_Init+0x200>)
100469d4:	631a      	str	r2, [r3, #48]	@ 0x30
  RADIO_TIMER_Context.wakeup_calibration = RADIO_TIMER_Context.calibrationSettings.periodicCalibration;
100469d6:	4b25      	ldr	r3, [pc, #148]	@ (10046a6c <HAL_RADIO_TIMER_Init+0x200>)
100469d8:	7819      	ldrb	r1, [r3, #0]
100469da:	4b24      	ldr	r3, [pc, #144]	@ (10046a6c <HAL_RADIO_TIMER_Init+0x200>)
100469dc:	2294      	movs	r2, #148	@ 0x94
100469de:	5499      	strb	r1, [r3, r2]

  /* Init the Virtual Timer queue */
  RADIO_TIMER_Context.rootNode = NULL;
100469e0:	4b22      	ldr	r3, [pc, #136]	@ (10046a6c <HAL_RADIO_TIMER_Init+0x200>)
100469e2:	228c      	movs	r2, #140	@ 0x8c
100469e4:	2100      	movs	r1, #0
100469e6:	5099      	str	r1, [r3, r2]
  RADIO_TIMER_Context.enableTimeBase = TRUE;
100469e8:	4b20      	ldr	r3, [pc, #128]	@ (10046a6c <HAL_RADIO_TIMER_Init+0x200>)
100469ea:	2290      	movs	r2, #144	@ 0x90
100469ec:	2101      	movs	r1, #1
100469ee:	5499      	strb	r1, [r3, r2]
  RADIO_TIMER_Context.stop_notimer_action = FALSE;
100469f0:	4b1e      	ldr	r3, [pc, #120]	@ (10046a6c <HAL_RADIO_TIMER_Init+0x200>)
100469f2:	2293      	movs	r2, #147	@ 0x93
100469f4:	2100      	movs	r1, #0
100469f6:	5499      	strb	r1, [r3, r2]
  RADIO_TIMER_Context.expired_count = 0;
100469f8:	4b1c      	ldr	r3, [pc, #112]	@ (10046a6c <HAL_RADIO_TIMER_Init+0x200>)
100469fa:	2291      	movs	r2, #145	@ 0x91
100469fc:	2100      	movs	r1, #0
100469fe:	5499      	strb	r1, [r3, r2]
  RADIO_TIMER_Context.served_count = 0;
10046a00:	4b1a      	ldr	r3, [pc, #104]	@ (10046a6c <HAL_RADIO_TIMER_Init+0x200>)
10046a02:	2292      	movs	r2, #146	@ 0x92
10046a04:	2100      	movs	r1, #0
10046a06:	5499      	strb	r1, [r3, r2]

  /* Init Radio Timer queue */
  RADIO_TIMER_Context.radioTimer.active = FALSE;
10046a08:	4b18      	ldr	r3, [pc, #96]	@ (10046a6c <HAL_RADIO_TIMER_Init+0x200>)
10046a0a:	2261      	movs	r2, #97	@ 0x61
10046a0c:	2100      	movs	r1, #0
10046a0e:	5499      	strb	r1, [r3, r2]
  RADIO_TIMER_Context.radioTimer.pending = FALSE;
10046a10:	4b16      	ldr	r3, [pc, #88]	@ (10046a6c <HAL_RADIO_TIMER_Init+0x200>)
10046a12:	2262      	movs	r2, #98	@ 0x62
10046a14:	2100      	movs	r1, #0
10046a16:	5499      	strb	r1, [r3, r2]
  RADIO_TIMER_Context.radioTimer.intTxRx_to_be_served = FALSE;
10046a18:	4b14      	ldr	r3, [pc, #80]	@ (10046a6c <HAL_RADIO_TIMER_Init+0x200>)
10046a1a:	2263      	movs	r2, #99	@ 0x63
10046a1c:	2100      	movs	r1, #0
10046a1e:	5499      	strb	r1, [r3, r2]
  RADIO_TIMER_Context.radioTimer.expiryTime = 0;
10046a20:	4912      	ldr	r1, [pc, #72]	@ (10046a6c <HAL_RADIO_TIMER_Init+0x200>)
10046a22:	2200      	movs	r2, #0
10046a24:	2300      	movs	r3, #0
10046a26:	658a      	str	r2, [r1, #88]	@ 0x58
10046a28:	65cb      	str	r3, [r1, #92]	@ 0x5c

  /* Configure the Calibration callback and schedule the next calibration */
  RADIO_TIMER_Context.calibrationTimer.callback = _calibration_callback;
10046a2a:	4b10      	ldr	r3, [pc, #64]	@ (10046a6c <HAL_RADIO_TIMER_Init+0x200>)
10046a2c:	4a15      	ldr	r2, [pc, #84]	@ (10046a84 <HAL_RADIO_TIMER_Init+0x218>)
10046a2e:	649a      	str	r2, [r3, #72]	@ 0x48
  RADIO_TIMER_Context.calibrationTimer.userData = NULL;
10046a30:	4b0e      	ldr	r3, [pc, #56]	@ (10046a6c <HAL_RADIO_TIMER_Init+0x200>)
10046a32:	2200      	movs	r2, #0
10046a34:	655a      	str	r2, [r3, #84]	@ 0x54
  _start_timer(&RADIO_TIMER_Context.calibrationTimer,
               HAL_RADIO_TIMER_GetCurrentSysTime() + RADIO_TIMER_Context.calibrationSettings.periodicCalibrationInterval);
10046a36:	f000 faf1 	bl	1004701c <HAL_RADIO_TIMER_GetCurrentSysTime>
10046a3a:	0002      	movs	r2, r0
10046a3c:	000b      	movs	r3, r1
10046a3e:	490b      	ldr	r1, [pc, #44]	@ (10046a6c <HAL_RADIO_TIMER_Init+0x200>)
10046a40:	6849      	ldr	r1, [r1, #4]
10046a42:	000c      	movs	r4, r1
10046a44:	2100      	movs	r1, #0
10046a46:	000d      	movs	r5, r1
  _start_timer(&RADIO_TIMER_Context.calibrationTimer,
10046a48:	1912      	adds	r2, r2, r4
10046a4a:	416b      	adcs	r3, r5
10046a4c:	490e      	ldr	r1, [pc, #56]	@ (10046a88 <HAL_RADIO_TIMER_Init+0x21c>)
10046a4e:	0008      	movs	r0, r1
10046a50:	f000 fd66 	bl	10047520 <_start_timer>

  /* Tx & Rx delay configuration */
  _configureTxRxDelay(&RADIO_TIMER_Context, TRUE);
10046a54:	4b05      	ldr	r3, [pc, #20]	@ (10046a6c <HAL_RADIO_TIMER_Init+0x200>)
10046a56:	2101      	movs	r1, #1
10046a58:	0018      	movs	r0, r3
10046a5a:	f000 fc5b 	bl	10047314 <_configureTxRxDelay>
}
10046a5e:	46c0      	nop			@ (mov r8, r8)
10046a60:	46bd      	mov	sp, r7
10046a62:	b003      	add	sp, #12
10046a64:	bdf0      	pop	{r4, r5, r6, r7, pc}
10046a66:	46c0      	nop			@ (mov r8, r8)
10046a68:	60001800 	.word	0x60001800
10046a6c:	20000908 	.word	0x20000908
10046a70:	0028f5c2 	.word	0x0028f5c2
10046a74:	00005b8d 	.word	0x00005b8d
10046a78:	0165ebec 	.word	0x0165ebec
10046a7c:	ffffefff 	.word	0xffffefff
10046a80:	00000326 	.word	0x00000326
10046a84:	100474f9 	.word	0x100474f9
10046a88:	20000948 	.word	0x20000948

10046a8c <HAL_RADIO_TIMER_Tick>:
  * Check expired timers and execute user callback.
  * It must be placed inside the infinite loop.
  * @retval None
  */
void HAL_RADIO_TIMER_Tick(void)
{
10046a8c:	b5b0      	push	{r4, r5, r7, lr}
10046a8e:	b094      	sub	sp, #80	@ 0x50
10046a90:	af00      	add	r7, sp, #0
  uint8_t expired = 0;
10046a92:	230b      	movs	r3, #11
10046a94:	2208      	movs	r2, #8
10046a96:	189b      	adds	r3, r3, r2
10046a98:	19db      	adds	r3, r3, r7
10046a9a:	2200      	movs	r2, #0
10046a9c:	701a      	strb	r2, [r3, #0]
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
10046a9e:	f3ef 8310 	mrs	r3, PRIMASK
10046aa2:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
10046aa4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30

  ATOMIC_SECTION_BEGIN();
10046aa6:	64bb      	str	r3, [r7, #72]	@ 0x48
  __ASM volatile ("cpsid i" : : : "memory");
10046aa8:	b672      	cpsid	i
}
10046aaa:	46c0      	nop			@ (mov r8, r8)
  if (RADIO_TIMER_Context.radioTimer.active)
10046aac:	4bc1      	ldr	r3, [pc, #772]	@ (10046db4 <HAL_RADIO_TIMER_Tick+0x328>)
10046aae:	2261      	movs	r2, #97	@ 0x61
10046ab0:	5c9b      	ldrb	r3, [r3, r2]
10046ab2:	2b00      	cmp	r3, #0
10046ab4:	d00f      	beq.n	10046ad6 <HAL_RADIO_TIMER_Tick+0x4a>
  {
    if (RADIO_TIMER_Context.radioTimer.expiryTime < HAL_RADIO_TIMER_GetCurrentSysTime())
10046ab6:	4bbf      	ldr	r3, [pc, #764]	@ (10046db4 <HAL_RADIO_TIMER_Tick+0x328>)
10046ab8:	6d9c      	ldr	r4, [r3, #88]	@ 0x58
10046aba:	6ddd      	ldr	r5, [r3, #92]	@ 0x5c
10046abc:	f000 faae 	bl	1004701c <HAL_RADIO_TIMER_GetCurrentSysTime>
10046ac0:	0002      	movs	r2, r0
10046ac2:	000b      	movs	r3, r1
10046ac4:	42ab      	cmp	r3, r5
10046ac6:	d802      	bhi.n	10046ace <HAL_RADIO_TIMER_Tick+0x42>
10046ac8:	d105      	bne.n	10046ad6 <HAL_RADIO_TIMER_Tick+0x4a>
10046aca:	42a2      	cmp	r2, r4
10046acc:	d903      	bls.n	10046ad6 <HAL_RADIO_TIMER_Tick+0x4a>
    {
      RADIO_TIMER_Context.radioTimer.active = FALSE;
10046ace:	4bb9      	ldr	r3, [pc, #740]	@ (10046db4 <HAL_RADIO_TIMER_Tick+0x328>)
10046ad0:	2261      	movs	r2, #97	@ 0x61
10046ad2:	2100      	movs	r1, #0
10046ad4:	5499      	strb	r1, [r3, r2]
10046ad6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
10046ad8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
10046ada:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
10046adc:	f383 8810 	msr	PRIMASK, r3
}
10046ae0:	46c0      	nop			@ (mov r8, r8)
    }
  }
  ATOMIC_SECTION_END();

  /* Check for expired timers */
  while (DIFF8(RADIO_TIMER_Context.expired_count, RADIO_TIMER_Context.served_count))
10046ae2:	e072      	b.n	10046bca <HAL_RADIO_TIMER_Tick+0x13e>
  {
    VTIMER_HandleType *expiredList, *curr;
    uint8_t to_be_served = DIFF8(RADIO_TIMER_Context.expired_count, RADIO_TIMER_Context.served_count);
10046ae4:	4bb3      	ldr	r3, [pc, #716]	@ (10046db4 <HAL_RADIO_TIMER_Tick+0x328>)
10046ae6:	2291      	movs	r2, #145	@ 0x91
10046ae8:	5c99      	ldrb	r1, [r3, r2]
10046aea:	4bb2      	ldr	r3, [pc, #712]	@ (10046db4 <HAL_RADIO_TIMER_Tick+0x328>)
10046aec:	2292      	movs	r2, #146	@ 0x92
10046aee:	5c9a      	ldrb	r2, [r3, r2]
10046af0:	2337      	movs	r3, #55	@ 0x37
10046af2:	2008      	movs	r0, #8
10046af4:	181b      	adds	r3, r3, r0
10046af6:	19db      	adds	r3, r3, r7
10046af8:	1a8a      	subs	r2, r1, r2
10046afa:	701a      	strb	r2, [r3, #0]

    RADIO_TIMER_Context.rootNode = _check_callbacks(RADIO_TIMER_Context.rootNode, &expiredList);
10046afc:	4bad      	ldr	r3, [pc, #692]	@ (10046db4 <HAL_RADIO_TIMER_Tick+0x328>)
10046afe:	228c      	movs	r2, #140	@ 0x8c
10046b00:	589b      	ldr	r3, [r3, r2]
10046b02:	220c      	movs	r2, #12
10046b04:	18ba      	adds	r2, r7, r2
10046b06:	0011      	movs	r1, r2
10046b08:	0018      	movs	r0, r3
10046b0a:	f000 ff0d 	bl	10047928 <_check_callbacks>
10046b0e:	0002      	movs	r2, r0
10046b10:	4ba8      	ldr	r3, [pc, #672]	@ (10046db4 <HAL_RADIO_TIMER_Tick+0x328>)
10046b12:	218c      	movs	r1, #140	@ 0x8c
10046b14:	505a      	str	r2, [r3, r1]

    /* Call all the user callbacks */
    curr = expiredList;
10046b16:	68fb      	ldr	r3, [r7, #12]
10046b18:	64fb      	str	r3, [r7, #76]	@ 0x4c
    while (curr != NULL)
10046b1a:	e010      	b.n	10046b3e <HAL_RADIO_TIMER_Tick+0xb2>
    {
      /* Save next pointer, in case callback start the timer again */
      VTIMER_HandleType *next = curr->next;
10046b1c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
10046b1e:	691b      	ldr	r3, [r3, #16]
10046b20:	637b      	str	r3, [r7, #52]	@ 0x34
      curr->active = FALSE;
10046b22:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
10046b24:	2200      	movs	r2, #0
10046b26:	731a      	strb	r2, [r3, #12]
      if (curr->callback)
10046b28:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
10046b2a:	689b      	ldr	r3, [r3, #8]
10046b2c:	2b00      	cmp	r3, #0
10046b2e:	d004      	beq.n	10046b3a <HAL_RADIO_TIMER_Tick+0xae>
      {
        curr->callback(curr); /* we are sure a callback is set?*/
10046b30:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
10046b32:	689b      	ldr	r3, [r3, #8]
10046b34:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
10046b36:	0010      	movs	r0, r2
10046b38:	4798      	blx	r3
      }
      curr = next;
10046b3a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
10046b3c:	64fb      	str	r3, [r7, #76]	@ 0x4c
    while (curr != NULL)
10046b3e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
10046b40:	2b00      	cmp	r3, #0
10046b42:	d1eb      	bne.n	10046b1c <HAL_RADIO_TIMER_Tick+0x90>
    }

    RADIO_TIMER_Context.rootNode = _update_user_timeout(RADIO_TIMER_Context.rootNode, &expired);
10046b44:	4b9b      	ldr	r3, [pc, #620]	@ (10046db4 <HAL_RADIO_TIMER_Tick+0x328>)
10046b46:	228c      	movs	r2, #140	@ 0x8c
10046b48:	589b      	ldr	r3, [r3, r2]
10046b4a:	240b      	movs	r4, #11
10046b4c:	2508      	movs	r5, #8
10046b4e:	1962      	adds	r2, r4, r5
10046b50:	19d2      	adds	r2, r2, r7
10046b52:	0011      	movs	r1, r2
10046b54:	0018      	movs	r0, r3
10046b56:	f000 fda9 	bl	100476ac <_update_user_timeout>
10046b5a:	0002      	movs	r2, r0
10046b5c:	4b95      	ldr	r3, [pc, #596]	@ (10046db4 <HAL_RADIO_TIMER_Tick+0x328>)
10046b5e:	218c      	movs	r1, #140	@ 0x8c
10046b60:	505a      	str	r2, [r3, r1]
    if (expired == 1)
10046b62:	1963      	adds	r3, r4, r5
10046b64:	19db      	adds	r3, r3, r7
10046b66:	781b      	ldrb	r3, [r3, #0]
10046b68:	2b01      	cmp	r3, #1
10046b6a:	d121      	bne.n	10046bb0 <HAL_RADIO_TIMER_Tick+0x124>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
10046b6c:	f3ef 8310 	mrs	r3, PRIMASK
10046b70:	62bb      	str	r3, [r7, #40]	@ 0x28
  return(result);
10046b72:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    {
      /* A new root timer is already expired, mimic timer expire */
      INCREMENT_EXPIRE_COUNT;
10046b74:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("cpsid i" : : : "memory");
10046b76:	b672      	cpsid	i
}
10046b78:	46c0      	nop			@ (mov r8, r8)
10046b7a:	4b8e      	ldr	r3, [pc, #568]	@ (10046db4 <HAL_RADIO_TIMER_Tick+0x328>)
10046b7c:	2291      	movs	r2, #145	@ 0x91
10046b7e:	5c9b      	ldrb	r3, [r3, r2]
10046b80:	3301      	adds	r3, #1
10046b82:	4a8c      	ldr	r2, [pc, #560]	@ (10046db4 <HAL_RADIO_TIMER_Tick+0x328>)
10046b84:	2192      	movs	r1, #146	@ 0x92
10046b86:	5c52      	ldrb	r2, [r2, r1]
10046b88:	4293      	cmp	r3, r2
10046b8a:	d103      	bne.n	10046b94 <HAL_RADIO_TIMER_Tick+0x108>
10046b8c:	4b89      	ldr	r3, [pc, #548]	@ (10046db4 <HAL_RADIO_TIMER_Tick+0x328>)
10046b8e:	2291      	movs	r2, #145	@ 0x91
10046b90:	5c9b      	ldrb	r3, [r3, r2]
10046b92:	e004      	b.n	10046b9e <HAL_RADIO_TIMER_Tick+0x112>
10046b94:	4b87      	ldr	r3, [pc, #540]	@ (10046db4 <HAL_RADIO_TIMER_Tick+0x328>)
10046b96:	2291      	movs	r2, #145	@ 0x91
10046b98:	5c9b      	ldrb	r3, [r3, r2]
10046b9a:	3301      	adds	r3, #1
10046b9c:	b2db      	uxtb	r3, r3
10046b9e:	4a85      	ldr	r2, [pc, #532]	@ (10046db4 <HAL_RADIO_TIMER_Tick+0x328>)
10046ba0:	2191      	movs	r1, #145	@ 0x91
10046ba2:	5453      	strb	r3, [r2, r1]
10046ba4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
10046ba6:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
10046ba8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10046baa:	f383 8810 	msr	PRIMASK, r3
}
10046bae:	46c0      	nop			@ (mov r8, r8)
    }
    RADIO_TIMER_Context.served_count += to_be_served;
10046bb0:	4b80      	ldr	r3, [pc, #512]	@ (10046db4 <HAL_RADIO_TIMER_Tick+0x328>)
10046bb2:	2292      	movs	r2, #146	@ 0x92
10046bb4:	5c9a      	ldrb	r2, [r3, r2]
10046bb6:	2337      	movs	r3, #55	@ 0x37
10046bb8:	2108      	movs	r1, #8
10046bba:	185b      	adds	r3, r3, r1
10046bbc:	19db      	adds	r3, r3, r7
10046bbe:	781b      	ldrb	r3, [r3, #0]
10046bc0:	18d3      	adds	r3, r2, r3
10046bc2:	b2d9      	uxtb	r1, r3
10046bc4:	4b7b      	ldr	r3, [pc, #492]	@ (10046db4 <HAL_RADIO_TIMER_Tick+0x328>)
10046bc6:	2292      	movs	r2, #146	@ 0x92
10046bc8:	5499      	strb	r1, [r3, r2]
  while (DIFF8(RADIO_TIMER_Context.expired_count, RADIO_TIMER_Context.served_count))
10046bca:	4b7a      	ldr	r3, [pc, #488]	@ (10046db4 <HAL_RADIO_TIMER_Tick+0x328>)
10046bcc:	2291      	movs	r2, #145	@ 0x91
10046bce:	5c9a      	ldrb	r2, [r3, r2]
10046bd0:	4b78      	ldr	r3, [pc, #480]	@ (10046db4 <HAL_RADIO_TIMER_Tick+0x328>)
10046bd2:	2192      	movs	r1, #146	@ 0x92
10046bd4:	5c5b      	ldrb	r3, [r3, r1]
10046bd6:	429a      	cmp	r2, r3
10046bd8:	d30a      	bcc.n	10046bf0 <HAL_RADIO_TIMER_Tick+0x164>
10046bda:	4b76      	ldr	r3, [pc, #472]	@ (10046db4 <HAL_RADIO_TIMER_Tick+0x328>)
10046bdc:	2291      	movs	r2, #145	@ 0x91
10046bde:	5c9a      	ldrb	r2, [r3, r2]
10046be0:	4b74      	ldr	r3, [pc, #464]	@ (10046db4 <HAL_RADIO_TIMER_Tick+0x328>)
10046be2:	2192      	movs	r1, #146	@ 0x92
10046be4:	5c5b      	ldrb	r3, [r3, r1]
10046be6:	1ad3      	subs	r3, r2, r3
10046be8:	1e5a      	subs	r2, r3, #1
10046bea:	4193      	sbcs	r3, r2
10046bec:	b2db      	uxtb	r3, r3
10046bee:	e00c      	b.n	10046c0a <HAL_RADIO_TIMER_Tick+0x17e>
10046bf0:	4b70      	ldr	r3, [pc, #448]	@ (10046db4 <HAL_RADIO_TIMER_Tick+0x328>)
10046bf2:	2291      	movs	r2, #145	@ 0x91
10046bf4:	5c9b      	ldrb	r3, [r3, r2]
10046bf6:	0019      	movs	r1, r3
10046bf8:	4b6e      	ldr	r3, [pc, #440]	@ (10046db4 <HAL_RADIO_TIMER_Tick+0x328>)
10046bfa:	2292      	movs	r2, #146	@ 0x92
10046bfc:	5c9b      	ldrb	r3, [r3, r2]
10046bfe:	1acb      	subs	r3, r1, r3
10046c00:	3301      	adds	r3, #1
10046c02:	33ff      	adds	r3, #255	@ 0xff
10046c04:	1e5a      	subs	r2, r3, #1
10046c06:	4193      	sbcs	r3, r2
10046c08:	b2db      	uxtb	r3, r3
10046c0a:	2b00      	cmp	r3, #0
10046c0c:	d000      	beq.n	10046c10 <HAL_RADIO_TIMER_Tick+0x184>
10046c0e:	e769      	b.n	10046ae4 <HAL_RADIO_TIMER_Tick+0x58>
  }

  /* Check for periodic calibration */
  if (RADIO_TIMER_Context.calibrationSettings.calibration_in_progress)
10046c10:	4b68      	ldr	r3, [pc, #416]	@ (10046db4 <HAL_RADIO_TIMER_Tick+0x328>)
10046c12:	7a1b      	ldrb	r3, [r3, #8]
10046c14:	2b00      	cmp	r3, #0
10046c16:	d100      	bne.n	10046c1a <HAL_RADIO_TIMER_Tick+0x18e>
10046c18:	e0b0      	b.n	10046d7c <HAL_RADIO_TIMER_Tick+0x2f0>
  {
    if (LL_RADIO_TIMER_IsActiveFlag_LSICalibrationEnded(RADIO_CTRL))
10046c1a:	4b67      	ldr	r3, [pc, #412]	@ (10046db8 <HAL_RADIO_TIMER_Tick+0x32c>)
10046c1c:	0018      	movs	r0, r3
10046c1e:	f7ff fe14 	bl	1004684a <LL_RADIO_TIMER_IsActiveFlag_LSICalibrationEnded>
10046c22:	1e03      	subs	r3, r0, #0
10046c24:	d100      	bne.n	10046c28 <HAL_RADIO_TIMER_Tick+0x19c>
10046c26:	e0c1      	b.n	10046dac <HAL_RADIO_TIMER_Tick+0x320>
    {
      /* Calibration is completed */
      RADIO_TIMER_Context.calibrationSettings.calibration_in_progress = FALSE;
10046c28:	4b62      	ldr	r3, [pc, #392]	@ (10046db4 <HAL_RADIO_TIMER_Tick+0x328>)
10046c2a:	2200      	movs	r2, #0
10046c2c:	721a      	strb	r2, [r3, #8]
      if ((RADIO_TIMER_Context.wakeup_calibration == FALSE) && RADIO_TIMER_Context.stop_notimer_action)
10046c2e:	4b61      	ldr	r3, [pc, #388]	@ (10046db4 <HAL_RADIO_TIMER_Tick+0x328>)
10046c30:	2294      	movs	r2, #148	@ 0x94
10046c32:	5c9b      	ldrb	r3, [r3, r2]
10046c34:	2b00      	cmp	r3, #0
10046c36:	d109      	bne.n	10046c4c <HAL_RADIO_TIMER_Tick+0x1c0>
10046c38:	4b5e      	ldr	r3, [pc, #376]	@ (10046db4 <HAL_RADIO_TIMER_Tick+0x328>)
10046c3a:	2293      	movs	r2, #147	@ 0x93
10046c3c:	5c9b      	ldrb	r3, [r3, r2]
10046c3e:	2b00      	cmp	r3, #0
10046c40:	d004      	beq.n	10046c4c <HAL_RADIO_TIMER_Tick+0x1c0>
      {
        RADIO_TIMER_Context.stop_notimer_action = FALSE;
10046c42:	4b5c      	ldr	r3, [pc, #368]	@ (10046db4 <HAL_RADIO_TIMER_Tick+0x328>)
10046c44:	2293      	movs	r2, #147	@ 0x93
10046c46:	2100      	movs	r1, #0
10046c48:	5499      	strb	r1, [r3, r2]
10046c4a:	e037      	b.n	10046cbc <HAL_RADIO_TIMER_Tick+0x230>
      }
      else
      {
        /* Collect calibration data */
        _updateCalibrationData();
10046c4c:	f000 feb6 	bl	100479bc <_updateCalibrationData>
        RADIO_TIMER_Context.rootNode = _update_user_timeout(RADIO_TIMER_Context.rootNode, &expired);
10046c50:	4b58      	ldr	r3, [pc, #352]	@ (10046db4 <HAL_RADIO_TIMER_Tick+0x328>)
10046c52:	228c      	movs	r2, #140	@ 0x8c
10046c54:	589b      	ldr	r3, [r3, r2]
10046c56:	240b      	movs	r4, #11
10046c58:	2508      	movs	r5, #8
10046c5a:	1962      	adds	r2, r4, r5
10046c5c:	19d2      	adds	r2, r2, r7
10046c5e:	0011      	movs	r1, r2
10046c60:	0018      	movs	r0, r3
10046c62:	f000 fd23 	bl	100476ac <_update_user_timeout>
10046c66:	0002      	movs	r2, r0
10046c68:	4b52      	ldr	r3, [pc, #328]	@ (10046db4 <HAL_RADIO_TIMER_Tick+0x328>)
10046c6a:	218c      	movs	r1, #140	@ 0x8c
10046c6c:	505a      	str	r2, [r3, r1]
        if (expired == 1)
10046c6e:	1963      	adds	r3, r4, r5
10046c70:	19db      	adds	r3, r3, r7
10046c72:	781b      	ldrb	r3, [r3, #0]
10046c74:	2b01      	cmp	r3, #1
10046c76:	d121      	bne.n	10046cbc <HAL_RADIO_TIMER_Tick+0x230>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
10046c78:	f3ef 8310 	mrs	r3, PRIMASK
10046c7c:	623b      	str	r3, [r7, #32]
  return(result);
10046c7e:	6a3b      	ldr	r3, [r7, #32]
        {
          /* A new root timer is already expired, mimic timer expire */
          INCREMENT_EXPIRE_COUNT;
10046c80:	647b      	str	r3, [r7, #68]	@ 0x44
  __ASM volatile ("cpsid i" : : : "memory");
10046c82:	b672      	cpsid	i
}
10046c84:	46c0      	nop			@ (mov r8, r8)
10046c86:	4b4b      	ldr	r3, [pc, #300]	@ (10046db4 <HAL_RADIO_TIMER_Tick+0x328>)
10046c88:	2291      	movs	r2, #145	@ 0x91
10046c8a:	5c9b      	ldrb	r3, [r3, r2]
10046c8c:	3301      	adds	r3, #1
10046c8e:	4a49      	ldr	r2, [pc, #292]	@ (10046db4 <HAL_RADIO_TIMER_Tick+0x328>)
10046c90:	2192      	movs	r1, #146	@ 0x92
10046c92:	5c52      	ldrb	r2, [r2, r1]
10046c94:	4293      	cmp	r3, r2
10046c96:	d103      	bne.n	10046ca0 <HAL_RADIO_TIMER_Tick+0x214>
10046c98:	4b46      	ldr	r3, [pc, #280]	@ (10046db4 <HAL_RADIO_TIMER_Tick+0x328>)
10046c9a:	2291      	movs	r2, #145	@ 0x91
10046c9c:	5c9b      	ldrb	r3, [r3, r2]
10046c9e:	e004      	b.n	10046caa <HAL_RADIO_TIMER_Tick+0x21e>
10046ca0:	4b44      	ldr	r3, [pc, #272]	@ (10046db4 <HAL_RADIO_TIMER_Tick+0x328>)
10046ca2:	2291      	movs	r2, #145	@ 0x91
10046ca4:	5c9b      	ldrb	r3, [r3, r2]
10046ca6:	3301      	adds	r3, #1
10046ca8:	b2db      	uxtb	r3, r3
10046caa:	4a42      	ldr	r2, [pc, #264]	@ (10046db4 <HAL_RADIO_TIMER_Tick+0x328>)
10046cac:	2191      	movs	r1, #145	@ 0x91
10046cae:	5453      	strb	r3, [r2, r1]
10046cb0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
10046cb2:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
10046cb4:	69fb      	ldr	r3, [r7, #28]
10046cb6:	f383 8810 	msr	PRIMASK, r3
}
10046cba:	46c0      	nop			@ (mov r8, r8)
        }
      }

#if defined (STM32WB06) || defined (STM32WB07)
      if (RADIO_TIMER_Context.waitCal)
10046cbc:	4b3d      	ldr	r3, [pc, #244]	@ (10046db4 <HAL_RADIO_TIMER_Tick+0x328>)
10046cbe:	229c      	movs	r2, #156	@ 0x9c
10046cc0:	5c9b      	ldrb	r3, [r3, r2]
10046cc2:	2b00      	cmp	r3, #0
10046cc4:	d044      	beq.n	10046d50 <HAL_RADIO_TIMER_Tick+0x2c4>
      {
        RADIO_TIMER_Context.waitCal = 0;
10046cc6:	4b3b      	ldr	r3, [pc, #236]	@ (10046db4 <HAL_RADIO_TIMER_Tick+0x328>)
10046cc8:	229c      	movs	r2, #156	@ 0x9c
10046cca:	2100      	movs	r1, #0
10046ccc:	5499      	strb	r1, [r3, r2]
        RADIO_TIMER_Context.radioTimer.pending = TRUE;
10046cce:	4b39      	ldr	r3, [pc, #228]	@ (10046db4 <HAL_RADIO_TIMER_Tick+0x328>)
10046cd0:	2262      	movs	r2, #98	@ 0x62
10046cd2:	2101      	movs	r1, #1
10046cd4:	5499      	strb	r1, [r3, r2]
        _check_radio_activity(&RADIO_TIMER_Context.radioTimer, &expired);
10046cd6:	240b      	movs	r4, #11
10046cd8:	2508      	movs	r5, #8
10046cda:	1963      	adds	r3, r4, r5
10046cdc:	19da      	adds	r2, r3, r7
10046cde:	4b37      	ldr	r3, [pc, #220]	@ (10046dbc <HAL_RADIO_TIMER_Tick+0x330>)
10046ce0:	0011      	movs	r1, r2
10046ce2:	0018      	movs	r0, r3
10046ce4:	f000 fefe 	bl	10047ae4 <_check_radio_activity>
        RADIO_TIMER_Context.rootNode = _update_user_timeout(RADIO_TIMER_Context.rootNode, &expired);
10046ce8:	4b32      	ldr	r3, [pc, #200]	@ (10046db4 <HAL_RADIO_TIMER_Tick+0x328>)
10046cea:	228c      	movs	r2, #140	@ 0x8c
10046cec:	589b      	ldr	r3, [r3, r2]
10046cee:	1962      	adds	r2, r4, r5
10046cf0:	19d2      	adds	r2, r2, r7
10046cf2:	0011      	movs	r1, r2
10046cf4:	0018      	movs	r0, r3
10046cf6:	f000 fcd9 	bl	100476ac <_update_user_timeout>
10046cfa:	0002      	movs	r2, r0
10046cfc:	4b2d      	ldr	r3, [pc, #180]	@ (10046db4 <HAL_RADIO_TIMER_Tick+0x328>)
10046cfe:	218c      	movs	r1, #140	@ 0x8c
10046d00:	505a      	str	r2, [r3, r1]
        if (expired == 1)
10046d02:	1963      	adds	r3, r4, r5
10046d04:	19db      	adds	r3, r3, r7
10046d06:	781b      	ldrb	r3, [r3, #0]
10046d08:	2b01      	cmp	r3, #1
10046d0a:	d121      	bne.n	10046d50 <HAL_RADIO_TIMER_Tick+0x2c4>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
10046d0c:	f3ef 8310 	mrs	r3, PRIMASK
10046d10:	61bb      	str	r3, [r7, #24]
  return(result);
10046d12:	69bb      	ldr	r3, [r7, #24]
        {
          /* A new root timer is already expired, mimic timer expire */
          INCREMENT_EXPIRE_COUNT;
10046d14:	643b      	str	r3, [r7, #64]	@ 0x40
  __ASM volatile ("cpsid i" : : : "memory");
10046d16:	b672      	cpsid	i
}
10046d18:	46c0      	nop			@ (mov r8, r8)
10046d1a:	4b26      	ldr	r3, [pc, #152]	@ (10046db4 <HAL_RADIO_TIMER_Tick+0x328>)
10046d1c:	2291      	movs	r2, #145	@ 0x91
10046d1e:	5c9b      	ldrb	r3, [r3, r2]
10046d20:	3301      	adds	r3, #1
10046d22:	4a24      	ldr	r2, [pc, #144]	@ (10046db4 <HAL_RADIO_TIMER_Tick+0x328>)
10046d24:	2192      	movs	r1, #146	@ 0x92
10046d26:	5c52      	ldrb	r2, [r2, r1]
10046d28:	4293      	cmp	r3, r2
10046d2a:	d103      	bne.n	10046d34 <HAL_RADIO_TIMER_Tick+0x2a8>
10046d2c:	4b21      	ldr	r3, [pc, #132]	@ (10046db4 <HAL_RADIO_TIMER_Tick+0x328>)
10046d2e:	2291      	movs	r2, #145	@ 0x91
10046d30:	5c9b      	ldrb	r3, [r3, r2]
10046d32:	e004      	b.n	10046d3e <HAL_RADIO_TIMER_Tick+0x2b2>
10046d34:	4b1f      	ldr	r3, [pc, #124]	@ (10046db4 <HAL_RADIO_TIMER_Tick+0x328>)
10046d36:	2291      	movs	r2, #145	@ 0x91
10046d38:	5c9b      	ldrb	r3, [r3, r2]
10046d3a:	3301      	adds	r3, #1
10046d3c:	b2db      	uxtb	r3, r3
10046d3e:	4a1d      	ldr	r2, [pc, #116]	@ (10046db4 <HAL_RADIO_TIMER_Tick+0x328>)
10046d40:	2191      	movs	r1, #145	@ 0x91
10046d42:	5453      	strb	r3, [r2, r1]
10046d44:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
10046d46:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
10046d48:	697b      	ldr	r3, [r7, #20]
10046d4a:	f383 8810 	msr	PRIMASK, r3
}
10046d4e:	46c0      	nop			@ (mov r8, r8)
      }
#else
      _check_radio_activity(&RADIO_TIMER_Context.radioTimer, &expired);
#endif

      HAL_RADIO_TIMER_StopVirtualTimer(&RADIO_TIMER_Context.calibrationTimer);
10046d50:	4b1b      	ldr	r3, [pc, #108]	@ (10046dc0 <HAL_RADIO_TIMER_Tick+0x334>)
10046d52:	0018      	movs	r0, r3
10046d54:	f000 f974 	bl	10047040 <HAL_RADIO_TIMER_StopVirtualTimer>
      /* Schedule next calibration event */
      _start_timer(&RADIO_TIMER_Context.calibrationTimer,
                   HAL_RADIO_TIMER_GetCurrentSysTime() + RADIO_TIMER_Context.calibrationSettings.periodicCalibrationInterval);
10046d58:	f000 f960 	bl	1004701c <HAL_RADIO_TIMER_GetCurrentSysTime>
10046d5c:	0002      	movs	r2, r0
10046d5e:	000b      	movs	r3, r1
10046d60:	4914      	ldr	r1, [pc, #80]	@ (10046db4 <HAL_RADIO_TIMER_Tick+0x328>)
10046d62:	6849      	ldr	r1, [r1, #4]
10046d64:	6039      	str	r1, [r7, #0]
10046d66:	2100      	movs	r1, #0
10046d68:	6079      	str	r1, [r7, #4]
      _start_timer(&RADIO_TIMER_Context.calibrationTimer,
10046d6a:	6838      	ldr	r0, [r7, #0]
10046d6c:	6879      	ldr	r1, [r7, #4]
10046d6e:	1812      	adds	r2, r2, r0
10046d70:	414b      	adcs	r3, r1
10046d72:	4913      	ldr	r1, [pc, #76]	@ (10046dc0 <HAL_RADIO_TIMER_Tick+0x334>)
10046d74:	0008      	movs	r0, r1
10046d76:	f000 fbd3 	bl	10047520 <_start_timer>
      {
        _calibration_callback(&RADIO_TIMER_Context.calibrationTimer);
      }
    }
  }
}
10046d7a:	e017      	b.n	10046dac <HAL_RADIO_TIMER_Tick+0x320>
    if (RADIO_TIMER_Context.calibrationSettings.periodicCalibration)
10046d7c:	4b0d      	ldr	r3, [pc, #52]	@ (10046db4 <HAL_RADIO_TIMER_Tick+0x328>)
10046d7e:	781b      	ldrb	r3, [r3, #0]
10046d80:	2b00      	cmp	r3, #0
10046d82:	d013      	beq.n	10046dac <HAL_RADIO_TIMER_Tick+0x320>
      if (HAL_RADIO_TIMER_GetCurrentSysTime() > (RADIO_TIMER_Context.calibrationData.last_calibration_time +
10046d84:	f000 f94a 	bl	1004701c <HAL_RADIO_TIMER_GetCurrentSysTime>
10046d88:	4b0a      	ldr	r3, [pc, #40]	@ (10046db4 <HAL_RADIO_TIMER_Tick+0x328>)
10046d8a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
10046d8c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
10046d8e:	24fa      	movs	r4, #250	@ 0xfa
10046d90:	0364      	lsls	r4, r4, #13
10046d92:	2500      	movs	r5, #0
10046d94:	1912      	adds	r2, r2, r4
10046d96:	416b      	adcs	r3, r5
10046d98:	4299      	cmp	r1, r3
10046d9a:	d803      	bhi.n	10046da4 <HAL_RADIO_TIMER_Tick+0x318>
10046d9c:	d106      	bne.n	10046dac <HAL_RADIO_TIMER_Tick+0x320>
10046d9e:	4290      	cmp	r0, r2
10046da0:	d800      	bhi.n	10046da4 <HAL_RADIO_TIMER_Tick+0x318>
}
10046da2:	e003      	b.n	10046dac <HAL_RADIO_TIMER_Tick+0x320>
        _calibration_callback(&RADIO_TIMER_Context.calibrationTimer);
10046da4:	4b06      	ldr	r3, [pc, #24]	@ (10046dc0 <HAL_RADIO_TIMER_Tick+0x334>)
10046da6:	0018      	movs	r0, r3
10046da8:	f000 fba6 	bl	100474f8 <_calibration_callback>
}
10046dac:	46c0      	nop			@ (mov r8, r8)
10046dae:	46bd      	mov	sp, r7
10046db0:	b014      	add	sp, #80	@ 0x50
10046db2:	bdb0      	pop	{r4, r5, r7, pc}
10046db4:	20000908 	.word	0x20000908
10046db8:	60001000 	.word	0x60001000
10046dbc:	20000960 	.word	0x20000960
10046dc0:	20000948 	.word	0x20000948

10046dc4 <HAL_RADIO_TIMER_GetAnchorPoint>:
  * @brief Get the last anchorPoint in system time unit.
  * @param current_system_time: Current System Time
  * @return TimerCapture register in system time unit.
  */
uint64_t HAL_RADIO_TIMER_GetAnchorPoint(uint64_t *current_system_time)
{
10046dc4:	b580      	push	{r7, lr}
10046dc6:	b082      	sub	sp, #8
10046dc8:	af00      	add	r7, sp, #0
10046dca:	6078      	str	r0, [r7, #4]
  return TIMER_GetPastSysTime(BLUE->TIMERCAPTUREREG, current_system_time);
10046dcc:	23c0      	movs	r3, #192	@ 0xc0
10046dce:	05db      	lsls	r3, r3, #23
10046dd0:	695b      	ldr	r3, [r3, #20]
10046dd2:	687a      	ldr	r2, [r7, #4]
10046dd4:	0011      	movs	r1, r2
10046dd6:	0018      	movs	r0, r3
10046dd8:	f001 f8b8 	bl	10047f4c <TIMER_GetPastSysTime>
10046ddc:	0002      	movs	r2, r0
10046dde:	000b      	movs	r3, r1
}
10046de0:	0010      	movs	r0, r2
10046de2:	0019      	movs	r1, r3
10046de4:	46bd      	mov	sp, r7
10046de6:	b002      	add	sp, #8
10046de8:	bd80      	pop	{r7, pc}
	...

10046dec <HAL_RADIO_TIMER_SetRadioTimerValue>:
  * @param  cal_req: Specify if PLL calibration is requested (1) or not (0).
  * @retval 0 if radio activity has been scheduled successfully.
  * @retval 1 if radio activity has been rejected (it is too close or in the past).
  */
uint32_t HAL_RADIO_TIMER_SetRadioTimerValue(uint32_t time, uint8_t event_type, uint8_t cal_req)
{
10046dec:	b5f0      	push	{r4, r5, r6, r7, lr}
10046dee:	b089      	sub	sp, #36	@ 0x24
10046df0:	af00      	add	r7, sp, #0
10046df2:	60f8      	str	r0, [r7, #12]
10046df4:	0008      	movs	r0, r1
10046df6:	0011      	movs	r1, r2
10046df8:	230b      	movs	r3, #11
10046dfa:	18fb      	adds	r3, r7, r3
10046dfc:	1c02      	adds	r2, r0, #0
10046dfe:	701a      	strb	r2, [r3, #0]
10046e00:	230a      	movs	r3, #10
10046e02:	18fb      	adds	r3, r7, r3
10046e04:	1c0a      	adds	r2, r1, #0
10046e06:	701a      	strb	r2, [r3, #0]
  uint8_t retVal = 0;
10046e08:	260f      	movs	r6, #15
10046e0a:	2308      	movs	r3, #8
10046e0c:	18f3      	adds	r3, r6, r3
10046e0e:	19db      	adds	r3, r3, r7
10046e10:	2200      	movs	r2, #0
10046e12:	701a      	strb	r2, [r3, #0]
#if defined (STM32WB06) || defined (STM32WB07)
  uint64_t current_time;
#endif

  RADIO_TIMER_Context.radioTimer.event_type = event_type;
10046e14:	230b      	movs	r3, #11
10046e16:	18fb      	adds	r3, r7, r3
10046e18:	781b      	ldrb	r3, [r3, #0]
10046e1a:	1e5a      	subs	r2, r3, #1
10046e1c:	4193      	sbcs	r3, r2
10046e1e:	b2d9      	uxtb	r1, r3
10046e20:	4b53      	ldr	r3, [pc, #332]	@ (10046f70 <HAL_RADIO_TIMER_SetRadioTimerValue+0x184>)
10046e22:	2264      	movs	r2, #100	@ 0x64
10046e24:	5499      	strb	r1, [r3, r2]
  RADIO_TIMER_Context.radioTimer.cal_req = cal_req;
10046e26:	230a      	movs	r3, #10
10046e28:	18fb      	adds	r3, r7, r3
10046e2a:	781b      	ldrb	r3, [r3, #0]
10046e2c:	1e5a      	subs	r2, r3, #1
10046e2e:	4193      	sbcs	r3, r2
10046e30:	b2d9      	uxtb	r1, r3
10046e32:	4b4f      	ldr	r3, [pc, #316]	@ (10046f70 <HAL_RADIO_TIMER_SetRadioTimerValue+0x184>)
10046e34:	2260      	movs	r2, #96	@ 0x60
10046e36:	5499      	strb	r1, [r3, r2]
  RADIO_TIMER_Context.radioTimer.expiryTime = RADIO_TIMER_Context.calibrationData.last_calibration_time + (uint32_t)(time - (uint32_t)RADIO_TIMER_Context.calibrationData.last_calibration_time);
10046e38:	4b4d      	ldr	r3, [pc, #308]	@ (10046f70 <HAL_RADIO_TIMER_SetRadioTimerValue+0x184>)
10046e3a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
10046e3c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
10046e3e:	494c      	ldr	r1, [pc, #304]	@ (10046f70 <HAL_RADIO_TIMER_SetRadioTimerValue+0x184>)
10046e40:	6a88      	ldr	r0, [r1, #40]	@ 0x28
10046e42:	6ac9      	ldr	r1, [r1, #44]	@ 0x2c
10046e44:	68f9      	ldr	r1, [r7, #12]
10046e46:	1a09      	subs	r1, r1, r0
10046e48:	6039      	str	r1, [r7, #0]
10046e4a:	2100      	movs	r1, #0
10046e4c:	6079      	str	r1, [r7, #4]
10046e4e:	6838      	ldr	r0, [r7, #0]
10046e50:	6879      	ldr	r1, [r7, #4]
10046e52:	1812      	adds	r2, r2, r0
10046e54:	414b      	adcs	r3, r1
10046e56:	4946      	ldr	r1, [pc, #280]	@ (10046f70 <HAL_RADIO_TIMER_SetRadioTimerValue+0x184>)
10046e58:	658a      	str	r2, [r1, #88]	@ 0x58
10046e5a:	65cb      	str	r3, [r1, #92]	@ 0x5c
  RADIO_TIMER_Context.radioTimer.active = FALSE;
10046e5c:	4b44      	ldr	r3, [pc, #272]	@ (10046f70 <HAL_RADIO_TIMER_SetRadioTimerValue+0x184>)
10046e5e:	2261      	movs	r2, #97	@ 0x61
10046e60:	2100      	movs	r1, #0
10046e62:	5499      	strb	r1, [r3, r2]
  RADIO_TIMER_Context.radioTimer.intTxRx_to_be_served = FALSE;
10046e64:	4b42      	ldr	r3, [pc, #264]	@ (10046f70 <HAL_RADIO_TIMER_SetRadioTimerValue+0x184>)
10046e66:	2263      	movs	r2, #99	@ 0x63
10046e68:	2100      	movs	r1, #0
10046e6a:	5499      	strb	r1, [r3, r2]
  RADIO_TIMER_Context.radioTimer.pending = TRUE;
10046e6c:	4b40      	ldr	r3, [pc, #256]	@ (10046f70 <HAL_RADIO_TIMER_SetRadioTimerValue+0x184>)
10046e6e:	2262      	movs	r2, #98	@ 0x62
10046e70:	2101      	movs	r1, #1
10046e72:	5499      	strb	r1, [r3, r2]

#if defined (STM32WB06) || defined (STM32WB07)
  current_time = HAL_RADIO_TIMER_GetCurrentSysTime();
10046e74:	f000 f8d2 	bl	1004701c <HAL_RADIO_TIMER_GetCurrentSysTime>
10046e78:	0002      	movs	r2, r0
10046e7a:	000b      	movs	r3, r1
10046e7c:	61ba      	str	r2, [r7, #24]
10046e7e:	61fb      	str	r3, [r7, #28]

  if (RADIO_TIMER_Context.rootNode == NULL)
10046e80:	4b3b      	ldr	r3, [pc, #236]	@ (10046f70 <HAL_RADIO_TIMER_SetRadioTimerValue+0x184>)
10046e82:	228c      	movs	r2, #140	@ 0x8c
10046e84:	589b      	ldr	r3, [r3, r2]
10046e86:	2b00      	cmp	r3, #0
10046e88:	d108      	bne.n	10046e9c <HAL_RADIO_TIMER_SetRadioTimerValue+0xb0>
  {
    _check_radio_activity(&RADIO_TIMER_Context.radioTimer, &retVal);
10046e8a:	2308      	movs	r3, #8
10046e8c:	18f3      	adds	r3, r6, r3
10046e8e:	19da      	adds	r2, r3, r7
10046e90:	4b38      	ldr	r3, [pc, #224]	@ (10046f74 <HAL_RADIO_TIMER_SetRadioTimerValue+0x188>)
10046e92:	0011      	movs	r1, r2
10046e94:	0018      	movs	r0, r3
10046e96:	f000 fe25 	bl	10047ae4 <_check_radio_activity>
10046e9a:	e05c      	b.n	10046f56 <HAL_RADIO_TIMER_SetRadioTimerValue+0x16a>
  }
  else
  {
    if (RADIO_TIMER_Context.rootNode->expiryTime < current_time ||
10046e9c:	4b34      	ldr	r3, [pc, #208]	@ (10046f70 <HAL_RADIO_TIMER_SetRadioTimerValue+0x184>)
10046e9e:	228c      	movs	r2, #140	@ 0x8c
10046ea0:	589b      	ldr	r3, [r3, r2]
10046ea2:	681a      	ldr	r2, [r3, #0]
10046ea4:	685b      	ldr	r3, [r3, #4]
10046ea6:	69f9      	ldr	r1, [r7, #28]
10046ea8:	4299      	cmp	r1, r3
10046eaa:	d82f      	bhi.n	10046f0c <HAL_RADIO_TIMER_SetRadioTimerValue+0x120>
10046eac:	69f9      	ldr	r1, [r7, #28]
10046eae:	4299      	cmp	r1, r3
10046eb0:	d102      	bne.n	10046eb8 <HAL_RADIO_TIMER_SetRadioTimerValue+0xcc>
10046eb2:	69b9      	ldr	r1, [r7, #24]
10046eb4:	4291      	cmp	r1, r2
10046eb6:	d829      	bhi.n	10046f0c <HAL_RADIO_TIMER_SetRadioTimerValue+0x120>
        ((RADIO_TIMER_Context.radioTimer.expiryTime < (RADIO_TIMER_Context.rootNode->expiryTime +
10046eb8:	4b2d      	ldr	r3, [pc, #180]	@ (10046f70 <HAL_RADIO_TIMER_SetRadioTimerValue+0x184>)
10046eba:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
10046ebc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
10046ebe:	492c      	ldr	r1, [pc, #176]	@ (10046f70 <HAL_RADIO_TIMER_SetRadioTimerValue+0x184>)
10046ec0:	208c      	movs	r0, #140	@ 0x8c
10046ec2:	5809      	ldr	r1, [r1, r0]
10046ec4:	6808      	ldr	r0, [r1, #0]
10046ec6:	6849      	ldr	r1, [r1, #4]
10046ec8:	6038      	str	r0, [r7, #0]
10046eca:	6079      	str	r1, [r7, #4]
                                                       RADIO_TIMER_Context.hostMargin)) && RADIO_TIMER_Context.rootNode->active) || !RADIO_TIMER_Context.rootNode->active)
10046ecc:	4e28      	ldr	r6, [pc, #160]	@ (10046f70 <HAL_RADIO_TIMER_SetRadioTimerValue+0x184>)
10046ece:	2198      	movs	r1, #152	@ 0x98
10046ed0:	468c      	mov	ip, r1
10046ed2:	4661      	mov	r1, ip
10046ed4:	5876      	ldr	r6, [r6, r1]
10046ed6:	0034      	movs	r4, r6
10046ed8:	2600      	movs	r6, #0
10046eda:	0035      	movs	r5, r6
        ((RADIO_TIMER_Context.radioTimer.expiryTime < (RADIO_TIMER_Context.rootNode->expiryTime +
10046edc:	6838      	ldr	r0, [r7, #0]
10046ede:	6879      	ldr	r1, [r7, #4]
10046ee0:	1900      	adds	r0, r0, r4
10046ee2:	4169      	adcs	r1, r5
    if (RADIO_TIMER_Context.rootNode->expiryTime < current_time ||
10046ee4:	4299      	cmp	r1, r3
10046ee6:	d802      	bhi.n	10046eee <HAL_RADIO_TIMER_SetRadioTimerValue+0x102>
10046ee8:	d107      	bne.n	10046efa <HAL_RADIO_TIMER_SetRadioTimerValue+0x10e>
10046eea:	4290      	cmp	r0, r2
10046eec:	d905      	bls.n	10046efa <HAL_RADIO_TIMER_SetRadioTimerValue+0x10e>
                                                       RADIO_TIMER_Context.hostMargin)) && RADIO_TIMER_Context.rootNode->active) || !RADIO_TIMER_Context.rootNode->active)
10046eee:	4b20      	ldr	r3, [pc, #128]	@ (10046f70 <HAL_RADIO_TIMER_SetRadioTimerValue+0x184>)
10046ef0:	228c      	movs	r2, #140	@ 0x8c
10046ef2:	589b      	ldr	r3, [r3, r2]
10046ef4:	7b1b      	ldrb	r3, [r3, #12]
10046ef6:	2b00      	cmp	r3, #0
10046ef8:	d108      	bne.n	10046f0c <HAL_RADIO_TIMER_SetRadioTimerValue+0x120>
10046efa:	4b1d      	ldr	r3, [pc, #116]	@ (10046f70 <HAL_RADIO_TIMER_SetRadioTimerValue+0x184>)
10046efc:	228c      	movs	r2, #140	@ 0x8c
10046efe:	589b      	ldr	r3, [r3, r2]
10046f00:	7b1b      	ldrb	r3, [r3, #12]
10046f02:	2201      	movs	r2, #1
10046f04:	4053      	eors	r3, r2
10046f06:	b2db      	uxtb	r3, r3
10046f08:	2b00      	cmp	r3, #0
10046f0a:	d020      	beq.n	10046f4e <HAL_RADIO_TIMER_SetRadioTimerValue+0x162>
    {
      /* Program the radio timer */
      _check_radio_activity(&RADIO_TIMER_Context.radioTimer, &retVal);
10046f0c:	230f      	movs	r3, #15
10046f0e:	2208      	movs	r2, #8
10046f10:	189b      	adds	r3, r3, r2
10046f12:	19da      	adds	r2, r3, r7
10046f14:	4b17      	ldr	r3, [pc, #92]	@ (10046f74 <HAL_RADIO_TIMER_SetRadioTimerValue+0x188>)
10046f16:	0011      	movs	r1, r2
10046f18:	0018      	movs	r0, r3
10046f1a:	f000 fde3 	bl	10047ae4 <_check_radio_activity>
      if ((RADIO_TIMER_Context.radioTimer.expiryTime >= RADIO_TIMER_Context.rootNode->expiryTime)
10046f1e:	4b14      	ldr	r3, [pc, #80]	@ (10046f70 <HAL_RADIO_TIMER_SetRadioTimerValue+0x184>)
10046f20:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
10046f22:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
10046f24:	4912      	ldr	r1, [pc, #72]	@ (10046f70 <HAL_RADIO_TIMER_SetRadioTimerValue+0x184>)
10046f26:	208c      	movs	r0, #140	@ 0x8c
10046f28:	5809      	ldr	r1, [r1, r0]
10046f2a:	6808      	ldr	r0, [r1, #0]
10046f2c:	6849      	ldr	r1, [r1, #4]
10046f2e:	4299      	cmp	r1, r3
10046f30:	d810      	bhi.n	10046f54 <HAL_RADIO_TIMER_SetRadioTimerValue+0x168>
10046f32:	d101      	bne.n	10046f38 <HAL_RADIO_TIMER_SetRadioTimerValue+0x14c>
10046f34:	4290      	cmp	r0, r2
10046f36:	d80d      	bhi.n	10046f54 <HAL_RADIO_TIMER_SetRadioTimerValue+0x168>
          && RADIO_TIMER_Context.rootNode->active)
10046f38:	4b0d      	ldr	r3, [pc, #52]	@ (10046f70 <HAL_RADIO_TIMER_SetRadioTimerValue+0x184>)
10046f3a:	228c      	movs	r2, #140	@ 0x8c
10046f3c:	589b      	ldr	r3, [r3, r2]
10046f3e:	7b1b      	ldrb	r3, [r3, #12]
10046f40:	2b00      	cmp	r3, #0
10046f42:	d007      	beq.n	10046f54 <HAL_RADIO_TIMER_SetRadioTimerValue+0x168>
      {
        /*The radio operation is before or too close the host timeout*/
        RADIO_TIMER_Context.hostIsRadioPending = 1;
10046f44:	4b0a      	ldr	r3, [pc, #40]	@ (10046f70 <HAL_RADIO_TIMER_SetRadioTimerValue+0x184>)
10046f46:	2295      	movs	r2, #149	@ 0x95
10046f48:	2101      	movs	r1, #1
10046f4a:	5499      	strb	r1, [r3, r2]
      if ((RADIO_TIMER_Context.radioTimer.expiryTime >= RADIO_TIMER_Context.rootNode->expiryTime)
10046f4c:	e002      	b.n	10046f54 <HAL_RADIO_TIMER_SetRadioTimerValue+0x168>
    else
    {
      /* If radio timer is not programmed, an emulated host timer is already programmed.
      Make sure radio errors are disabled.
      This call is not needed if radio errors are not enabled by the BLE stack. */
      _set_controller_as_host();
10046f4e:	f000 febd 	bl	10047ccc <_set_controller_as_host>
10046f52:	e000      	b.n	10046f56 <HAL_RADIO_TIMER_SetRadioTimerValue+0x16a>
      if ((RADIO_TIMER_Context.radioTimer.expiryTime >= RADIO_TIMER_Context.rootNode->expiryTime)
10046f54:	46c0      	nop			@ (mov r8, r8)
  }
#else
  _check_radio_activity(&RADIO_TIMER_Context.radioTimer, &retVal);
#endif

  _virtualTimeBaseEnable(ENABLE);
10046f56:	2001      	movs	r0, #1
10046f58:	f000 fc8e 	bl	10047878 <_virtualTimeBaseEnable>

  return retVal;
10046f5c:	230f      	movs	r3, #15
10046f5e:	2208      	movs	r2, #8
10046f60:	189b      	adds	r3, r3, r2
10046f62:	19db      	adds	r3, r3, r7
10046f64:	781b      	ldrb	r3, [r3, #0]
}
10046f66:	0018      	movs	r0, r3
10046f68:	46bd      	mov	sp, r7
10046f6a:	b009      	add	sp, #36	@ 0x24
10046f6c:	bdf0      	pop	{r4, r5, r6, r7, pc}
10046f6e:	46c0      	nop			@ (mov r8, r8)
10046f70:	20000908 	.word	0x20000908
10046f74:	20000960 	.word	0x20000960

10046f78 <HAL_RADIO_TIMER_GetRadioTimerValue>:
  * @retval 1 if Timer1 has been programmed.
  * @retval 2 if Timer2 has been programmed.
  * @retval 3 if Wakeup Timer has been programmed.
  */
uint8_t HAL_RADIO_TIMER_GetRadioTimerValue(uint32_t *time)
{
10046f78:	b580      	push	{r7, lr}
10046f7a:	b082      	sub	sp, #8
10046f7c:	af00      	add	r7, sp, #0
10046f7e:	6078      	str	r0, [r7, #4]
  return TIMER_GetRadioTimerValue(time);
10046f80:	687b      	ldr	r3, [r7, #4]
10046f82:	0018      	movs	r0, r3
10046f84:	f001 f812 	bl	10047fac <TIMER_GetRadioTimerValue>
10046f88:	0003      	movs	r3, r0
}
10046f8a:	0018      	movs	r0, r3
10046f8c:	46bd      	mov	sp, r7
10046f8e:	b002      	add	sp, #8
10046f90:	bd80      	pop	{r7, pc}

10046f92 <HAL_RADIO_TIMER_RadioTimerIsr>:
/**
  * @brief  Radio activity finished.
  * @retval None
  */
void HAL_RADIO_TIMER_RadioTimerIsr(void)
{
10046f92:	b580      	push	{r7, lr}
10046f94:	af00      	add	r7, sp, #0
#if defined (STM32WB06) || defined (STM32WB07)
  if (!(LL_RADIO_TIMER_IsEnabledTimer1(BLUE) || LL_RADIO_TIMER_IsEnabledTimer2(BLUE)))
10046f96:	23c0      	movs	r3, #192	@ 0xc0
10046f98:	05db      	lsls	r3, r3, #23
10046f9a:	0018      	movs	r0, r3
10046f9c:	f7ff fac3 	bl	10046526 <LL_RADIO_TIMER_IsEnabledTimer1>
10046fa0:	1e03      	subs	r3, r0, #0
10046fa2:	d108      	bne.n	10046fb6 <HAL_RADIO_TIMER_RadioTimerIsr+0x24>
10046fa4:	23c0      	movs	r3, #192	@ 0xc0
10046fa6:	05db      	lsls	r3, r3, #23
10046fa8:	0018      	movs	r0, r3
10046faa:	f7ff fadc 	bl	10046566 <LL_RADIO_TIMER_IsEnabledTimer2>
10046fae:	1e03      	subs	r3, r0, #0
10046fb0:	d101      	bne.n	10046fb6 <HAL_RADIO_TIMER_RadioTimerIsr+0x24>
  {
    _check_host_activity();
10046fb2:	f000 fea1 	bl	10047cf8 <_check_host_activity>
  }
#endif
}
10046fb6:	46c0      	nop			@ (mov r8, r8)
10046fb8:	46bd      	mov	sp, r7
10046fba:	bd80      	pop	{r7, pc}

10046fbc <HAL_RADIO_TIMER_EndOfRadioActivityIsr>:
/**
  * @brief  Timer State machine semaphore to signal the radio activity finished.
  * @retval None
  */
void HAL_RADIO_TIMER_EndOfRadioActivityIsr(void)
{
10046fbc:	b580      	push	{r7, lr}
10046fbe:	af00      	add	r7, sp, #0
  RADIO_TIMER_Context.radioTimer.intTxRx_to_be_served = FALSE;
10046fc0:	4b03      	ldr	r3, [pc, #12]	@ (10046fd0 <HAL_RADIO_TIMER_EndOfRadioActivityIsr+0x14>)
10046fc2:	2263      	movs	r2, #99	@ 0x63
10046fc4:	2100      	movs	r1, #0
10046fc6:	5499      	strb	r1, [r3, r2]
}
10046fc8:	46c0      	nop			@ (mov r8, r8)
10046fca:	46bd      	mov	sp, r7
10046fcc:	bd80      	pop	{r7, pc}
10046fce:	46c0      	nop			@ (mov r8, r8)
10046fd0:	20000908 	.word	0x20000908

10046fd4 <HAL_RADIO_TIMER_UsToSystime>:
  * @brief  Translate time in microseconds into sys time units.
  * @param  time: Microseconds to be converted in STU
  * @return STU value
  */
uint32_t HAL_RADIO_TIMER_UsToSystime(uint32_t time)
{
10046fd4:	b580      	push	{r7, lr}
10046fd6:	b082      	sub	sp, #8
10046fd8:	af00      	add	r7, sp, #0
10046fda:	6078      	str	r0, [r7, #4]
  return _us_to_systime(time);
10046fdc:	687b      	ldr	r3, [r7, #4]
10046fde:	0018      	movs	r0, r3
10046fe0:	f000 fa14 	bl	1004740c <_us_to_systime>
10046fe4:	0003      	movs	r3, r0
}
10046fe6:	0018      	movs	r0, r3
10046fe8:	46bd      	mov	sp, r7
10046fea:	b002      	add	sp, #8
10046fec:	bd80      	pop	{r7, pc}
	...

10046ff0 <HAL_RADIO_TIMER_MachineTimeToSysTime>:
  *          storing the system time. It should be called only in
  *          user context and not in interrupt context.
  * @return  STU value
  */
uint32_t HAL_RADIO_TIMER_MachineTimeToSysTime(uint32_t time)
{
10046ff0:	b580      	push	{r7, lr}
10046ff2:	b082      	sub	sp, #8
10046ff4:	af00      	add	r7, sp, #0
10046ff6:	6078      	str	r0, [r7, #4]
  return blue_unit_conversion(time, RADIO_TIMER_Context.calibrationData.period1, MULT64_THR_PERIOD);
10046ff8:	4b06      	ldr	r3, [pc, #24]	@ (10047014 <HAL_RADIO_TIMER_MachineTimeToSysTime+0x24>)
10046ffa:	69db      	ldr	r3, [r3, #28]
10046ffc:	0019      	movs	r1, r3
10046ffe:	4a06      	ldr	r2, [pc, #24]	@ (10047018 <HAL_RADIO_TIMER_MachineTimeToSysTime+0x28>)
10047000:	687b      	ldr	r3, [r7, #4]
10047002:	0018      	movs	r0, r3
10047004:	f7f9 f85c 	bl	100400c0 <blue_unit_conversion>
10047008:	0003      	movs	r3, r0
}
1004700a:	0018      	movs	r0, r3
1004700c:	46bd      	mov	sp, r7
1004700e:	b002      	add	sp, #8
10047010:	bd80      	pop	{r7, pc}
10047012:	46c0      	nop			@ (mov r8, r8)
10047014:	20000908 	.word	0x20000908
10047018:	00000635 	.word	0x00000635

1004701c <HAL_RADIO_TIMER_GetCurrentSysTime>:
  *         The returned value can be used as absolute time parameter where needed in the other
  *         HAL_RADIO_TIMER* APIs
  * @return absolute current time expressed in system time units.
  */
uint64_t HAL_RADIO_TIMER_GetCurrentSysTime(void)
{
1004701c:	b580      	push	{r7, lr}
1004701e:	b082      	sub	sp, #8
10047020:	af00      	add	r7, sp, #0
  uint32_t current_machine_time;
  return _get_system_time_and_machine(&RADIO_TIMER_Context, &current_machine_time);
10047022:	1d3a      	adds	r2, r7, #4
10047024:	4b05      	ldr	r3, [pc, #20]	@ (1004703c <HAL_RADIO_TIMER_GetCurrentSysTime+0x20>)
10047026:	0011      	movs	r1, r2
10047028:	0018      	movs	r0, r3
1004702a:	f000 fad7 	bl	100475dc <_get_system_time_and_machine>
1004702e:	0002      	movs	r2, r0
10047030:	000b      	movs	r3, r1
}
10047032:	0010      	movs	r0, r2
10047034:	0019      	movs	r1, r3
10047036:	46bd      	mov	sp, r7
10047038:	b002      	add	sp, #8
1004703a:	bd80      	pop	{r7, pc}
1004703c:	20000908 	.word	0x20000908

10047040 <HAL_RADIO_TIMER_StopVirtualTimer>:
  * @brief  Stops the one-shot virtual timer specified if found
  * @param  timerHandle: The virtual timer
  * @retval None
  */
void HAL_RADIO_TIMER_StopVirtualTimer(VTIMER_HandleType *timerHandle)
{
10047040:	b590      	push	{r4, r7, lr}
10047042:	b089      	sub	sp, #36	@ 0x24
10047044:	af00      	add	r7, sp, #0
10047046:	6078      	str	r0, [r7, #4]
  VTIMER_HandleType *rootNode = _remove_timer_in_queue(RADIO_TIMER_Context.rootNode, timerHandle);
10047048:	4b28      	ldr	r3, [pc, #160]	@ (100470ec <HAL_RADIO_TIMER_StopVirtualTimer+0xac>)
1004704a:	228c      	movs	r2, #140	@ 0x8c
1004704c:	589b      	ldr	r3, [r3, r2]
1004704e:	687a      	ldr	r2, [r7, #4]
10047050:	0011      	movs	r1, r2
10047052:	0018      	movs	r0, r3
10047054:	f000 fc3c 	bl	100478d0 <_remove_timer_in_queue>
10047058:	0003      	movs	r3, r0
1004705a:	61fb      	str	r3, [r7, #28]
  uint8_t expired = 0;
1004705c:	210f      	movs	r1, #15
1004705e:	187b      	adds	r3, r7, r1
10047060:	2200      	movs	r2, #0
10047062:	701a      	strb	r2, [r3, #0]
  timerHandle->active = FALSE;
10047064:	687b      	ldr	r3, [r7, #4]
10047066:	2200      	movs	r2, #0
10047068:	731a      	strb	r2, [r3, #12]
  if (RADIO_TIMER_Context.rootNode != rootNode)
1004706a:	4b20      	ldr	r3, [pc, #128]	@ (100470ec <HAL_RADIO_TIMER_StopVirtualTimer+0xac>)
1004706c:	228c      	movs	r2, #140	@ 0x8c
1004706e:	589b      	ldr	r3, [r3, r2]
10047070:	69fa      	ldr	r2, [r7, #28]
10047072:	429a      	cmp	r2, r3
10047074:	d031      	beq.n	100470da <HAL_RADIO_TIMER_StopVirtualTimer+0x9a>
  {
    RADIO_TIMER_Context.rootNode = _update_user_timeout(rootNode, &expired);
10047076:	000c      	movs	r4, r1
10047078:	187a      	adds	r2, r7, r1
1004707a:	69fb      	ldr	r3, [r7, #28]
1004707c:	0011      	movs	r1, r2
1004707e:	0018      	movs	r0, r3
10047080:	f000 fb14 	bl	100476ac <_update_user_timeout>
10047084:	0002      	movs	r2, r0
10047086:	4b19      	ldr	r3, [pc, #100]	@ (100470ec <HAL_RADIO_TIMER_StopVirtualTimer+0xac>)
10047088:	218c      	movs	r1, #140	@ 0x8c
1004708a:	505a      	str	r2, [r3, r1]
    if (expired)
1004708c:	193b      	adds	r3, r7, r4
1004708e:	781b      	ldrb	r3, [r3, #0]
10047090:	2b00      	cmp	r3, #0
10047092:	d026      	beq.n	100470e2 <HAL_RADIO_TIMER_StopVirtualTimer+0xa2>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
10047094:	f3ef 8310 	mrs	r3, PRIMASK
10047098:	617b      	str	r3, [r7, #20]
  return(result);
1004709a:	697b      	ldr	r3, [r7, #20]
    {
      /* A new root timer is already expired, mimic timer expire */
      INCREMENT_EXPIRE_COUNT;
1004709c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("cpsid i" : : : "memory");
1004709e:	b672      	cpsid	i
}
100470a0:	46c0      	nop			@ (mov r8, r8)
100470a2:	4b12      	ldr	r3, [pc, #72]	@ (100470ec <HAL_RADIO_TIMER_StopVirtualTimer+0xac>)
100470a4:	2291      	movs	r2, #145	@ 0x91
100470a6:	5c9b      	ldrb	r3, [r3, r2]
100470a8:	3301      	adds	r3, #1
100470aa:	4a10      	ldr	r2, [pc, #64]	@ (100470ec <HAL_RADIO_TIMER_StopVirtualTimer+0xac>)
100470ac:	2192      	movs	r1, #146	@ 0x92
100470ae:	5c52      	ldrb	r2, [r2, r1]
100470b0:	4293      	cmp	r3, r2
100470b2:	d103      	bne.n	100470bc <HAL_RADIO_TIMER_StopVirtualTimer+0x7c>
100470b4:	4b0d      	ldr	r3, [pc, #52]	@ (100470ec <HAL_RADIO_TIMER_StopVirtualTimer+0xac>)
100470b6:	2291      	movs	r2, #145	@ 0x91
100470b8:	5c9b      	ldrb	r3, [r3, r2]
100470ba:	e004      	b.n	100470c6 <HAL_RADIO_TIMER_StopVirtualTimer+0x86>
100470bc:	4b0b      	ldr	r3, [pc, #44]	@ (100470ec <HAL_RADIO_TIMER_StopVirtualTimer+0xac>)
100470be:	2291      	movs	r2, #145	@ 0x91
100470c0:	5c9b      	ldrb	r3, [r3, r2]
100470c2:	3301      	adds	r3, #1
100470c4:	b2db      	uxtb	r3, r3
100470c6:	4a09      	ldr	r2, [pc, #36]	@ (100470ec <HAL_RADIO_TIMER_StopVirtualTimer+0xac>)
100470c8:	2191      	movs	r1, #145	@ 0x91
100470ca:	5453      	strb	r3, [r2, r1]
100470cc:	69bb      	ldr	r3, [r7, #24]
100470ce:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
100470d0:	693b      	ldr	r3, [r7, #16]
100470d2:	f383 8810 	msr	PRIMASK, r3
}
100470d6:	46c0      	nop			@ (mov r8, r8)
  }
  else
  {
    RADIO_TIMER_Context.rootNode = rootNode;
  }
}
100470d8:	e003      	b.n	100470e2 <HAL_RADIO_TIMER_StopVirtualTimer+0xa2>
    RADIO_TIMER_Context.rootNode = rootNode;
100470da:	4b04      	ldr	r3, [pc, #16]	@ (100470ec <HAL_RADIO_TIMER_StopVirtualTimer+0xac>)
100470dc:	218c      	movs	r1, #140	@ 0x8c
100470de:	69fa      	ldr	r2, [r7, #28]
100470e0:	505a      	str	r2, [r3, r1]
}
100470e2:	46c0      	nop			@ (mov r8, r8)
100470e4:	46bd      	mov	sp, r7
100470e6:	b009      	add	sp, #36	@ 0x24
100470e8:	bd90      	pop	{r4, r7, pc}
100470ea:	46c0      	nop			@ (mov r8, r8)
100470ec:	20000908 	.word	0x20000908

100470f0 <HAL_RADIO_TIMER_WakeUpCallback>:
  * @brief   If the wakeup timer triggers for a host wakeup, a pending radio activity is programmed.
  *          If the wakeup timer triggers for a radio activity, a pending virtual timer callback is executed.
  * @retval  None
  */
void HAL_RADIO_TIMER_WakeUpCallback(void)
{
100470f0:	b580      	push	{r7, lr}
100470f2:	b082      	sub	sp, #8
100470f4:	af00      	add	r7, sp, #0
  volatile uint32_t status = 0;
100470f6:	2300      	movs	r3, #0
100470f8:	607b      	str	r3, [r7, #4]
  uint8_t expired;
  UNUSED(status);
100470fa:	687b      	ldr	r3, [r7, #4]
  _check_radio_activity(&RADIO_TIMER_Context.radioTimer, &expired);
100470fc:	1cfa      	adds	r2, r7, #3
100470fe:	4b0f      	ldr	r3, [pc, #60]	@ (1004713c <HAL_RADIO_TIMER_WakeUpCallback+0x4c>)
10047100:	0011      	movs	r1, r2
10047102:	0018      	movs	r0, r3
10047104:	f000 fcee 	bl	10047ae4 <_check_radio_activity>
  if (RADIO_TIMER_Context.hostIsRadioPending)
10047108:	4b0d      	ldr	r3, [pc, #52]	@ (10047140 <HAL_RADIO_TIMER_WakeUpCallback+0x50>)
1004710a:	2295      	movs	r2, #149	@ 0x95
1004710c:	5c9b      	ldrb	r3, [r3, r2]
1004710e:	2b00      	cmp	r3, #0
10047110:	d005      	beq.n	1004711e <HAL_RADIO_TIMER_WakeUpCallback+0x2e>
  {
    RADIO_TIMER_Context.hostIsRadioPending = 0;
10047112:	4b0b      	ldr	r3, [pc, #44]	@ (10047140 <HAL_RADIO_TIMER_WakeUpCallback+0x50>)
10047114:	2295      	movs	r2, #149	@ 0x95
10047116:	2100      	movs	r1, #0
10047118:	5499      	strb	r1, [r3, r2]
    HAL_RADIO_TIMER_TimeoutCallback();
1004711a:	f000 f815 	bl	10047148 <HAL_RADIO_TIMER_TimeoutCallback>
  }

  LL_RADIO_TIMER_ClearFlag_BLEWakeup(WAKEUP);
1004711e:	4b09      	ldr	r3, [pc, #36]	@ (10047144 <HAL_RADIO_TIMER_WakeUpCallback+0x54>)
10047120:	0018      	movs	r0, r3
10047122:	f7ff fb1b 	bl	1004675c <LL_RADIO_TIMER_ClearFlag_BLEWakeup>
  status = LL_RADIO_TIMER_IsActiveFlag_BLEWakeup(WAKEUP);
10047126:	4b07      	ldr	r3, [pc, #28]	@ (10047144 <HAL_RADIO_TIMER_WakeUpCallback+0x54>)
10047128:	0018      	movs	r0, r3
1004712a:	f7ff fb25 	bl	10046778 <LL_RADIO_TIMER_IsActiveFlag_BLEWakeup>
1004712e:	0003      	movs	r3, r0
10047130:	607b      	str	r3, [r7, #4]
}
10047132:	46c0      	nop			@ (mov r8, r8)
10047134:	46bd      	mov	sp, r7
10047136:	b002      	add	sp, #8
10047138:	bd80      	pop	{r7, pc}
1004713a:	46c0      	nop			@ (mov r8, r8)
1004713c:	20000960 	.word	0x20000960
10047140:	20000908 	.word	0x20000908
10047144:	60001800 	.word	0x60001800

10047148 <HAL_RADIO_TIMER_TimeoutCallback>:
/**
  * @brief  Virtual timer Timeout Callback. It signals that a host timeout occurred.
  * @retval None
  */
void HAL_RADIO_TIMER_TimeoutCallback(void)
{
10047148:	b580      	push	{r7, lr}
1004714a:	b082      	sub	sp, #8
1004714c:	af00      	add	r7, sp, #0
  volatile uint32_t status = 0;
1004714e:	2300      	movs	r3, #0
10047150:	607b      	str	r3, [r7, #4]
  UNUSED(status);
10047152:	687b      	ldr	r3, [r7, #4]
#if defined (STM32WB06) || defined (STM32WB07)
  RADIO_TIMER_Context.hostIsRadioPending = 0;
10047154:	4b15      	ldr	r3, [pc, #84]	@ (100471ac <HAL_RADIO_TIMER_TimeoutCallback+0x64>)
10047156:	2295      	movs	r2, #149	@ 0x95
10047158:	2100      	movs	r1, #0
1004715a:	5499      	strb	r1, [r3, r2]
#endif

  /* Disable host timer */
  LL_RADIO_TIMER_DisableCPUWakeupTimer(WAKEUP);
1004715c:	4b14      	ldr	r3, [pc, #80]	@ (100471b0 <HAL_RADIO_TIMER_TimeoutCallback+0x68>)
1004715e:	0018      	movs	r0, r3
10047160:	f7ff fa6c 	bl	1004663c <LL_RADIO_TIMER_DisableCPUWakeupTimer>
  INCREMENT_EXPIRE_COUNT_ISR;
10047164:	4b11      	ldr	r3, [pc, #68]	@ (100471ac <HAL_RADIO_TIMER_TimeoutCallback+0x64>)
10047166:	2291      	movs	r2, #145	@ 0x91
10047168:	5c9b      	ldrb	r3, [r3, r2]
1004716a:	3301      	adds	r3, #1
1004716c:	4a0f      	ldr	r2, [pc, #60]	@ (100471ac <HAL_RADIO_TIMER_TimeoutCallback+0x64>)
1004716e:	2192      	movs	r1, #146	@ 0x92
10047170:	5c52      	ldrb	r2, [r2, r1]
10047172:	4293      	cmp	r3, r2
10047174:	d103      	bne.n	1004717e <HAL_RADIO_TIMER_TimeoutCallback+0x36>
10047176:	4b0d      	ldr	r3, [pc, #52]	@ (100471ac <HAL_RADIO_TIMER_TimeoutCallback+0x64>)
10047178:	2291      	movs	r2, #145	@ 0x91
1004717a:	5c9b      	ldrb	r3, [r3, r2]
1004717c:	e004      	b.n	10047188 <HAL_RADIO_TIMER_TimeoutCallback+0x40>
1004717e:	4b0b      	ldr	r3, [pc, #44]	@ (100471ac <HAL_RADIO_TIMER_TimeoutCallback+0x64>)
10047180:	2291      	movs	r2, #145	@ 0x91
10047182:	5c9b      	ldrb	r3, [r3, r2]
10047184:	3301      	adds	r3, #1
10047186:	b2db      	uxtb	r3, r3
10047188:	4a08      	ldr	r2, [pc, #32]	@ (100471ac <HAL_RADIO_TIMER_TimeoutCallback+0x64>)
1004718a:	2191      	movs	r1, #145	@ 0x91
1004718c:	5453      	strb	r3, [r2, r1]
  /* Clear the interrupt */
  LL_RADIO_TIMER_ClearFlag_CPUWakeup(WAKEUP);
1004718e:	4b08      	ldr	r3, [pc, #32]	@ (100471b0 <HAL_RADIO_TIMER_TimeoutCallback+0x68>)
10047190:	0018      	movs	r0, r3
10047192:	f7ff fb02 	bl	1004679a <LL_RADIO_TIMER_ClearFlag_CPUWakeup>
  status = LL_RADIO_TIMER_IsActiveFlag_CPUWakeup(WAKEUP);
10047196:	4b06      	ldr	r3, [pc, #24]	@ (100471b0 <HAL_RADIO_TIMER_TimeoutCallback+0x68>)
10047198:	0018      	movs	r0, r3
1004719a:	f7ff fb0c 	bl	100467b6 <LL_RADIO_TIMER_IsActiveFlag_CPUWakeup>
1004719e:	0003      	movs	r3, r0
100471a0:	607b      	str	r3, [r7, #4]
}
100471a2:	46c0      	nop			@ (mov r8, r8)
100471a4:	46bd      	mov	sp, r7
100471a6:	b002      	add	sp, #8
100471a8:	bd80      	pop	{r7, pc}
100471aa:	46c0      	nop			@ (mov r8, r8)
100471ac:	20000908 	.word	0x20000908
100471b0:	60001800 	.word	0x60001800

100471b4 <_calibrationProcedure>:
/** @defgroup RADIO_TIMER_Private_Functions  RADIO TIMER Private Functions
  * @{
  */

static void _calibrationProcedure(void)
{
100471b4:	b580      	push	{r7, lr}
100471b6:	af00      	add	r7, sp, #0
  /* Make sure any pending calibration is over */
  while (LL_RADIO_TIMER_IsActiveFlag_LSICalibrationEnded(RADIO_CTRL) == 0);
100471b8:	46c0      	nop			@ (mov r8, r8)
100471ba:	4b0b      	ldr	r3, [pc, #44]	@ (100471e8 <_calibrationProcedure+0x34>)
100471bc:	0018      	movs	r0, r3
100471be:	f7ff fb44 	bl	1004684a <LL_RADIO_TIMER_IsActiveFlag_LSICalibrationEnded>
100471c2:	1e03      	subs	r3, r0, #0
100471c4:	d0f9      	beq.n	100471ba <_calibrationProcedure+0x6>

  /* Set SLOW_COUNT to 23, that is calibrate over 24 clock periods, this number
  cannot be changed without changing all the integer maths function in the
  file  */
  LL_RADIO_TIMER_SetLSIWindowCalibrationLength(RADIO_CTRL, 23);
100471c6:	4b08      	ldr	r3, [pc, #32]	@ (100471e8 <_calibrationProcedure+0x34>)
100471c8:	2117      	movs	r1, #23
100471ca:	0018      	movs	r0, r3
100471cc:	f7ff fb04 	bl	100467d8 <LL_RADIO_TIMER_SetLSIWindowCalibrationLength>

  /* Start a calibration and take the correct freq */
  _timer_calibrate(&RADIO_TIMER_Context.calibrationData);
100471d0:	4b06      	ldr	r3, [pc, #24]	@ (100471ec <_calibrationProcedure+0x38>)
100471d2:	0018      	movs	r0, r3
100471d4:	f000 f81e 	bl	10047214 <_timer_calibrate>
  /* For first time set last to current */
  RADIO_TIMER_Context.calibrationData.last_period1 = RADIO_TIMER_Context.calibrationData.period1;
100471d8:	4b05      	ldr	r3, [pc, #20]	@ (100471f0 <_calibrationProcedure+0x3c>)
100471da:	69da      	ldr	r2, [r3, #28]
100471dc:	4b04      	ldr	r3, [pc, #16]	@ (100471f0 <_calibrationProcedure+0x3c>)
100471de:	621a      	str	r2, [r3, #32]

}
100471e0:	46c0      	nop			@ (mov r8, r8)
100471e2:	46bd      	mov	sp, r7
100471e4:	bd80      	pop	{r7, pc}
100471e6:	46c0      	nop			@ (mov r8, r8)
100471e8:	60001000 	.word	0x60001000
100471ec:	20000918 	.word	0x20000918
100471f0:	20000908 	.word	0x20000908

100471f4 <_timer_start_calibration>:

static void _timer_start_calibration(void)
{
100471f4:	b580      	push	{r7, lr}
100471f6:	af00      	add	r7, sp, #0
  /* Clear any pending interrupt */
  LL_RADIO_TIMER_ClearFlag_LSICalibrationEnded(RADIO_CTRL);
100471f8:	4b05      	ldr	r3, [pc, #20]	@ (10047210 <_timer_start_calibration+0x1c>)
100471fa:	0018      	movs	r0, r3
100471fc:	f7ff fb17 	bl	1004682e <LL_RADIO_TIMER_ClearFlag_LSICalibrationEnded>
  /* Start calibration */
  LL_RADIO_TIMER_StartLSICalibration(RADIO_CTRL);
10047200:	4b03      	ldr	r3, [pc, #12]	@ (10047210 <_timer_start_calibration+0x1c>)
10047202:	0018      	movs	r0, r3
10047204:	f7ff faf4 	bl	100467f0 <LL_RADIO_TIMER_StartLSICalibration>
}
10047208:	46c0      	nop			@ (mov r8, r8)
1004720a:	46bd      	mov	sp, r7
1004720c:	bd80      	pop	{r7, pc}
1004720e:	46c0      	nop			@ (mov r8, r8)
10047210:	60001000 	.word	0x60001000

10047214 <_timer_calibrate>:

static void _timer_calibrate(CalibrationDataTypeDef *calibrationData)
{
10047214:	b580      	push	{r7, lr}
10047216:	b082      	sub	sp, #8
10047218:	af00      	add	r7, sp, #0
1004721a:	6078      	str	r0, [r7, #4]
  _timer_start_calibration();
1004721c:	f7ff ffea 	bl	100471f4 <_timer_start_calibration>
  while (LL_RADIO_TIMER_IsActiveFlag_LSICalibrationEnded(RADIO_CTRL) == 0);
10047220:	46c0      	nop			@ (mov r8, r8)
10047222:	4b07      	ldr	r3, [pc, #28]	@ (10047240 <_timer_calibrate+0x2c>)
10047224:	0018      	movs	r0, r3
10047226:	f7ff fb10 	bl	1004684a <LL_RADIO_TIMER_IsActiveFlag_LSICalibrationEnded>
1004722a:	1e03      	subs	r3, r0, #0
1004722c:	d0f9      	beq.n	10047222 <_timer_calibrate+0xe>
  _get_calibration_data(calibrationData);
1004722e:	687b      	ldr	r3, [r7, #4]
10047230:	0018      	movs	r0, r3
10047232:	f000 f807 	bl	10047244 <_get_calibration_data>
}
10047236:	46c0      	nop			@ (mov r8, r8)
10047238:	46bd      	mov	sp, r7
1004723a:	b002      	add	sp, #8
1004723c:	bd80      	pop	{r7, pc}
1004723e:	46c0      	nop			@ (mov r8, r8)
10047240:	60001000 	.word	0x60001000

10047244 <_get_calibration_data>:

static void _get_calibration_data(CalibrationDataTypeDef *calibrationData)
{
10047244:	b580      	push	{r7, lr}
10047246:	b08a      	sub	sp, #40	@ 0x28
10047248:	af00      	add	r7, sp, #0
1004724a:	6078      	str	r0, [r7, #4]
  int32_t b2;
  int32_t mult;
  int32_t a1;
  int32_t a2;

  period =  LL_RADIO_TIMER_GetLSIPeriod(RADIO_CTRL);
1004724c:	4b2e      	ldr	r3, [pc, #184]	@ (10047308 <_get_calibration_data+0xc4>)
1004724e:	0018      	movs	r0, r3
10047250:	f7ff fad9 	bl	10046806 <LL_RADIO_TIMER_GetLSIPeriod>
10047254:	0003      	movs	r3, r0
10047256:	627b      	str	r3, [r7, #36]	@ 0x24
  while (period != LL_RADIO_TIMER_GetLSIPeriod(RADIO_CTRL) || period == 0)
10047258:	e005      	b.n	10047266 <_get_calibration_data+0x22>
  {
    period = LL_RADIO_TIMER_GetLSIPeriod(RADIO_CTRL);
1004725a:	4b2b      	ldr	r3, [pc, #172]	@ (10047308 <_get_calibration_data+0xc4>)
1004725c:	0018      	movs	r0, r3
1004725e:	f7ff fad2 	bl	10046806 <LL_RADIO_TIMER_GetLSIPeriod>
10047262:	0003      	movs	r3, r0
10047264:	627b      	str	r3, [r7, #36]	@ 0x24
  while (period != LL_RADIO_TIMER_GetLSIPeriod(RADIO_CTRL) || period == 0)
10047266:	4b28      	ldr	r3, [pc, #160]	@ (10047308 <_get_calibration_data+0xc4>)
10047268:	0018      	movs	r0, r3
1004726a:	f7ff facc 	bl	10046806 <LL_RADIO_TIMER_GetLSIPeriod>
1004726e:	0002      	movs	r2, r0
10047270:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10047272:	429a      	cmp	r2, r3
10047274:	d1f1      	bne.n	1004725a <_get_calibration_data+0x16>
10047276:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10047278:	2b00      	cmp	r3, #0
1004727a:	d0ee      	beq.n	1004725a <_get_calibration_data+0x16>
  }

  mul1 = 0x8BCF6 ;
1004727c:	4b23      	ldr	r3, [pc, #140]	@ (1004730c <_get_calibration_data+0xc8>)
1004727e:	61fb      	str	r3, [r7, #28]
  b1 = period >> 8 ;
10047280:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10047282:	121b      	asrs	r3, r3, #8
10047284:	61bb      	str	r3, [r7, #24]
  b2 = period & 0xff ;
10047286:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10047288:	22ff      	movs	r2, #255	@ 0xff
1004728a:	4013      	ands	r3, r2
1004728c:	617b      	str	r3, [r7, #20]
  calibrationData->period1 = ((mul1 * b1) + ((b2 * mul1) >> 8) + 16) >> 5;
1004728e:	69fb      	ldr	r3, [r7, #28]
10047290:	69ba      	ldr	r2, [r7, #24]
10047292:	435a      	muls	r2, r3
10047294:	697b      	ldr	r3, [r7, #20]
10047296:	69f9      	ldr	r1, [r7, #28]
10047298:	434b      	muls	r3, r1
1004729a:	121b      	asrs	r3, r3, #8
1004729c:	18d3      	adds	r3, r2, r3
1004729e:	3310      	adds	r3, #16
100472a0:	115a      	asrs	r2, r3, #5
100472a2:	687b      	ldr	r3, [r7, #4]
100472a4:	60da      	str	r2, [r3, #12]
  calibrationData->period = period;
100472a6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
100472a8:	687b      	ldr	r3, [r7, #4]
100472aa:	601a      	str	r2, [r3, #0]

  mult = 0x753 ;
100472ac:	4b18      	ldr	r3, [pc, #96]	@ (10047310 <_get_calibration_data+0xcc>)
100472ae:	613b      	str	r3, [r7, #16]
  freq = LL_RADIO_TIMER_GetLSIFrequency(RADIO_CTRL);
100472b0:	4b15      	ldr	r3, [pc, #84]	@ (10047308 <_get_calibration_data+0xc4>)
100472b2:	0018      	movs	r0, r3
100472b4:	f7ff fab1 	bl	1004681a <LL_RADIO_TIMER_GetLSIFrequency>
100472b8:	0003      	movs	r3, r0
100472ba:	623b      	str	r3, [r7, #32]

  while (freq != LL_RADIO_TIMER_GetLSIFrequency(RADIO_CTRL) || freq == 0)
100472bc:	e005      	b.n	100472ca <_get_calibration_data+0x86>
  {
    freq = LL_RADIO_TIMER_GetLSIFrequency(RADIO_CTRL);
100472be:	4b12      	ldr	r3, [pc, #72]	@ (10047308 <_get_calibration_data+0xc4>)
100472c0:	0018      	movs	r0, r3
100472c2:	f7ff faaa 	bl	1004681a <LL_RADIO_TIMER_GetLSIFrequency>
100472c6:	0003      	movs	r3, r0
100472c8:	623b      	str	r3, [r7, #32]
  while (freq != LL_RADIO_TIMER_GetLSIFrequency(RADIO_CTRL) || freq == 0)
100472ca:	4b0f      	ldr	r3, [pc, #60]	@ (10047308 <_get_calibration_data+0xc4>)
100472cc:	0018      	movs	r0, r3
100472ce:	f7ff faa4 	bl	1004681a <LL_RADIO_TIMER_GetLSIFrequency>
100472d2:	0002      	movs	r2, r0
100472d4:	6a3b      	ldr	r3, [r7, #32]
100472d6:	429a      	cmp	r2, r3
100472d8:	d1f1      	bne.n	100472be <_get_calibration_data+0x7a>
100472da:	6a3b      	ldr	r3, [r7, #32]
100472dc:	2b00      	cmp	r3, #0
100472de:	d0ee      	beq.n	100472be <_get_calibration_data+0x7a>
  }
  a1 = freq >> 6 ;
100472e0:	6a3b      	ldr	r3, [r7, #32]
100472e2:	119b      	asrs	r3, r3, #6
100472e4:	60fb      	str	r3, [r7, #12]
  a2 = a1 * mult ;
100472e6:	68fb      	ldr	r3, [r7, #12]
100472e8:	693a      	ldr	r2, [r7, #16]
100472ea:	4353      	muls	r3, r2
100472ec:	60bb      	str	r3, [r7, #8]
  calibrationData->freq1 = (a2 + 128) >> 8 ;
100472ee:	68bb      	ldr	r3, [r7, #8]
100472f0:	3380      	adds	r3, #128	@ 0x80
100472f2:	121a      	asrs	r2, r3, #8
100472f4:	687b      	ldr	r3, [r7, #4]
100472f6:	609a      	str	r2, [r3, #8]
  calibrationData->freq = freq;
100472f8:	6a3a      	ldr	r2, [r7, #32]
100472fa:	687b      	ldr	r3, [r7, #4]
100472fc:	605a      	str	r2, [r3, #4]
}
100472fe:	46c0      	nop			@ (mov r8, r8)
10047300:	46bd      	mov	sp, r7
10047302:	b00a      	add	sp, #40	@ 0x28
10047304:	bd80      	pop	{r7, pc}
10047306:	46c0      	nop			@ (mov r8, r8)
10047308:	60001000 	.word	0x60001000
1004730c:	0008bcf6 	.word	0x0008bcf6
10047310:	00000753 	.word	0x00000753

10047314 <_configureTxRxDelay>:

static void _configureTxRxDelay(RADIO_TIMER_ContextTypeDef *context, uint8_t calculate_st)
{
10047314:	b590      	push	{r4, r7, lr}
10047316:	b085      	sub	sp, #20
10047318:	af00      	add	r7, sp, #0
1004731a:	6078      	str	r0, [r7, #4]
1004731c:	000a      	movs	r2, r1
1004731e:	1cfb      	adds	r3, r7, #3
10047320:	701a      	strb	r2, [r3, #0]
  uint8_t tx_delay_start;

  tx_delay_start = (BLUEGLOB->TXDELAYSTART * 125 / 1000) + 1;
10047322:	4b38      	ldr	r3, [pc, #224]	@ (10047404 <_configureTxRxDelay+0xf0>)
10047324:	7b9b      	ldrb	r3, [r3, #14]
10047326:	b2db      	uxtb	r3, r3
10047328:	2b00      	cmp	r3, #0
1004732a:	da00      	bge.n	1004732e <_configureTxRxDelay+0x1a>
1004732c:	3307      	adds	r3, #7
1004732e:	10db      	asrs	r3, r3, #3
10047330:	b2da      	uxtb	r2, r3
10047332:	240f      	movs	r4, #15
10047334:	193b      	adds	r3, r7, r4
10047336:	3201      	adds	r2, #1
10047338:	701a      	strb	r2, [r3, #0]

  BLUEGLOB->WAKEUPINITDELAY =  blue_unit_conversion(WAKEUP_INIT_DELAY, context->calibrationData.freq1, MULT64_THR_FREQ);
1004733a:	687b      	ldr	r3, [r7, #4]
1004733c:	699b      	ldr	r3, [r3, #24]
1004733e:	0019      	movs	r1, r3
10047340:	4b31      	ldr	r3, [pc, #196]	@ (10047408 <_configureTxRxDelay+0xf4>)
10047342:	001a      	movs	r2, r3
10047344:	201b      	movs	r0, #27
10047346:	f7f8 febb 	bl	100400c0 <blue_unit_conversion>
1004734a:	0002      	movs	r2, r0
1004734c:	4b2d      	ldr	r3, [pc, #180]	@ (10047404 <_configureTxRxDelay+0xf0>)
1004734e:	b2d2      	uxtb	r2, r2
10047350:	715a      	strb	r2, [r3, #5]
  context->TxRxDelay.tim12_delay_mt = _us_to_machinetime(BLUEGLOB->TIMER12INITDELAYCAL);
10047352:	4b2c      	ldr	r3, [pc, #176]	@ (10047404 <_configureTxRxDelay+0xf0>)
10047354:	799b      	ldrb	r3, [r3, #6]
10047356:	b2db      	uxtb	r3, r3
10047358:	0018      	movs	r0, r3
1004735a:	f000 f86d 	bl	10047438 <_us_to_machinetime>
1004735e:	0003      	movs	r3, r0
10047360:	b2d9      	uxtb	r1, r3
10047362:	687b      	ldr	r3, [r7, #4]
10047364:	223d      	movs	r2, #61	@ 0x3d
10047366:	5499      	strb	r1, [r3, r2]
  context->TxRxDelay.tx_cal_delay = _us_to_machinetime(BLUEGLOB->TRANSMITCALDELAYCHK + tx_delay_start);
10047368:	4b26      	ldr	r3, [pc, #152]	@ (10047404 <_configureTxRxDelay+0xf0>)
1004736a:	7a1b      	ldrb	r3, [r3, #8]
1004736c:	b2db      	uxtb	r3, r3
1004736e:	001a      	movs	r2, r3
10047370:	193b      	adds	r3, r7, r4
10047372:	781b      	ldrb	r3, [r3, #0]
10047374:	18d3      	adds	r3, r2, r3
10047376:	0018      	movs	r0, r3
10047378:	f000 f85e 	bl	10047438 <_us_to_machinetime>
1004737c:	0003      	movs	r3, r0
1004737e:	b2d9      	uxtb	r1, r3
10047380:	687b      	ldr	r3, [r7, #4]
10047382:	2238      	movs	r2, #56	@ 0x38
10047384:	5499      	strb	r1, [r3, r2]
  context->TxRxDelay.tx_no_cal_delay = _us_to_machinetime(BLUEGLOB->TRANSMITNOCALDELAYCHK + tx_delay_start);
10047386:	4b1f      	ldr	r3, [pc, #124]	@ (10047404 <_configureTxRxDelay+0xf0>)
10047388:	7a5b      	ldrb	r3, [r3, #9]
1004738a:	b2db      	uxtb	r3, r3
1004738c:	001a      	movs	r2, r3
1004738e:	193b      	adds	r3, r7, r4
10047390:	781b      	ldrb	r3, [r3, #0]
10047392:	18d3      	adds	r3, r2, r3
10047394:	0018      	movs	r0, r3
10047396:	f000 f84f 	bl	10047438 <_us_to_machinetime>
1004739a:	0003      	movs	r3, r0
1004739c:	b2d9      	uxtb	r1, r3
1004739e:	687b      	ldr	r3, [r7, #4]
100473a0:	2239      	movs	r2, #57	@ 0x39
100473a2:	5499      	strb	r1, [r3, r2]
  context->TxRxDelay.rx_cal_delay = _us_to_machinetime(BLUEGLOB->RECEIVECALDELAYCHK);
100473a4:	4b17      	ldr	r3, [pc, #92]	@ (10047404 <_configureTxRxDelay+0xf0>)
100473a6:	7a9b      	ldrb	r3, [r3, #10]
100473a8:	b2db      	uxtb	r3, r3
100473aa:	0018      	movs	r0, r3
100473ac:	f000 f844 	bl	10047438 <_us_to_machinetime>
100473b0:	0003      	movs	r3, r0
100473b2:	b2d9      	uxtb	r1, r3
100473b4:	687b      	ldr	r3, [r7, #4]
100473b6:	223a      	movs	r2, #58	@ 0x3a
100473b8:	5499      	strb	r1, [r3, r2]
  context->TxRxDelay.rx_no_cal_delay = _us_to_machinetime(BLUEGLOB->RECEIVENOCALDELAYCHK);
100473ba:	4b12      	ldr	r3, [pc, #72]	@ (10047404 <_configureTxRxDelay+0xf0>)
100473bc:	7adb      	ldrb	r3, [r3, #11]
100473be:	b2db      	uxtb	r3, r3
100473c0:	0018      	movs	r0, r3
100473c2:	f000 f839 	bl	10047438 <_us_to_machinetime>
100473c6:	0003      	movs	r3, r0
100473c8:	b2d9      	uxtb	r1, r3
100473ca:	687b      	ldr	r3, [r7, #4]
100473cc:	223b      	movs	r2, #59	@ 0x3b
100473ce:	5499      	strb	r1, [r3, r2]

  if (calculate_st)
100473d0:	1cfb      	adds	r3, r7, #3
100473d2:	781b      	ldrb	r3, [r3, #0]
100473d4:	2b00      	cmp	r3, #0
100473d6:	d010      	beq.n	100473fa <_configureTxRxDelay+0xe6>
  {
    context->TxRxDelay.tx_cal_delay_st    = _us_to_systime(BLUEGLOB->TRANSMITCALDELAYCHK + tx_delay_start) + WAKEUP_INIT_DELAY;
100473d8:	4b0a      	ldr	r3, [pc, #40]	@ (10047404 <_configureTxRxDelay+0xf0>)
100473da:	7a1b      	ldrb	r3, [r3, #8]
100473dc:	b2db      	uxtb	r3, r3
100473de:	001a      	movs	r2, r3
100473e0:	193b      	adds	r3, r7, r4
100473e2:	781b      	ldrb	r3, [r3, #0]
100473e4:	18d3      	adds	r3, r2, r3
100473e6:	0018      	movs	r0, r3
100473e8:	f000 f810 	bl	1004740c <_us_to_systime>
100473ec:	0003      	movs	r3, r0
100473ee:	b2db      	uxtb	r3, r3
100473f0:	331b      	adds	r3, #27
100473f2:	b2d9      	uxtb	r1, r3
100473f4:	687b      	ldr	r3, [r7, #4]
100473f6:	223c      	movs	r2, #60	@ 0x3c
100473f8:	5499      	strb	r1, [r3, r2]
  }

}
100473fa:	46c0      	nop			@ (mov r8, r8)
100473fc:	46bd      	mov	sp, r7
100473fe:	b005      	add	sp, #20
10047400:	bd90      	pop	{r4, r7, pc}
10047402:	46c0      	nop			@ (mov r8, r8)
10047404:	200000c0 	.word	0x200000c0
10047408:	00000326 	.word	0x00000326

1004740c <_us_to_systime>:

static uint32_t _us_to_systime(uint32_t time)
{
1004740c:	b580      	push	{r7, lr}
1004740e:	b084      	sub	sp, #16
10047410:	af00      	add	r7, sp, #0
10047412:	6078      	str	r0, [r7, #4]
  uint32_t t1, t2;
  t1 = time * 0x68;
10047414:	687b      	ldr	r3, [r7, #4]
10047416:	2268      	movs	r2, #104	@ 0x68
10047418:	4353      	muls	r3, r2
1004741a:	60fb      	str	r3, [r7, #12]
  t2 = time * 0xDB;
1004741c:	687b      	ldr	r3, [r7, #4]
1004741e:	22db      	movs	r2, #219	@ 0xdb
10047420:	4353      	muls	r3, r2
10047422:	60bb      	str	r3, [r7, #8]
  return (t1 >> 8) + (t2 >> 16);
10047424:	68fb      	ldr	r3, [r7, #12]
10047426:	0a1a      	lsrs	r2, r3, #8
10047428:	68bb      	ldr	r3, [r7, #8]
1004742a:	0c1b      	lsrs	r3, r3, #16
1004742c:	18d3      	adds	r3, r2, r3
}
1004742e:	0018      	movs	r0, r3
10047430:	46bd      	mov	sp, r7
10047432:	b004      	add	sp, #16
10047434:	bd80      	pop	{r7, pc}
	...

10047438 <_us_to_machinetime>:

static uint32_t _us_to_machinetime(uint32_t time)
{
10047438:	b5b0      	push	{r4, r5, r7, lr}
1004743a:	b088      	sub	sp, #32
1004743c:	af00      	add	r7, sp, #0
1004743e:	60f8      	str	r0, [r7, #12]
  uint64_t tmp = (uint64_t)RADIO_TIMER_Context.calibrationData.freq * (uint64_t)time * (uint64_t)3U;
10047440:	4915      	ldr	r1, [pc, #84]	@ (10047498 <_us_to_machinetime+0x60>)
10047442:	6949      	ldr	r1, [r1, #20]
10047444:	6039      	str	r1, [r7, #0]
10047446:	2100      	movs	r1, #0
10047448:	6079      	str	r1, [r7, #4]
1004744a:	68f9      	ldr	r1, [r7, #12]
1004744c:	000a      	movs	r2, r1
1004744e:	2100      	movs	r1, #0
10047450:	000b      	movs	r3, r1
10047452:	6838      	ldr	r0, [r7, #0]
10047454:	6879      	ldr	r1, [r7, #4]
10047456:	f7f9 f845 	bl	100404e4 <__aeabi_lmul>
1004745a:	0002      	movs	r2, r0
1004745c:	000b      	movs	r3, r1
1004745e:	0010      	movs	r0, r2
10047460:	0019      	movs	r1, r3
10047462:	0002      	movs	r2, r0
10047464:	000b      	movs	r3, r1
10047466:	1892      	adds	r2, r2, r2
10047468:	415b      	adcs	r3, r3
1004746a:	1812      	adds	r2, r2, r0
1004746c:	414b      	adcs	r3, r1
1004746e:	61ba      	str	r2, [r7, #24]
10047470:	61fb      	str	r3, [r7, #28]
  uint32_t time_mt = ((tmp + (1 << 26)) >> 27) & TIMER_MAX_VALUE;
10047472:	69ba      	ldr	r2, [r7, #24]
10047474:	69fb      	ldr	r3, [r7, #28]
10047476:	2080      	movs	r0, #128	@ 0x80
10047478:	04c0      	lsls	r0, r0, #19
1004747a:	2100      	movs	r1, #0
1004747c:	1812      	adds	r2, r2, r0
1004747e:	414b      	adcs	r3, r1
10047480:	0159      	lsls	r1, r3, #5
10047482:	0ed4      	lsrs	r4, r2, #27
10047484:	430c      	orrs	r4, r1
10047486:	0edd      	lsrs	r5, r3, #27
10047488:	0023      	movs	r3, r4
1004748a:	617b      	str	r3, [r7, #20]

  return time_mt;
1004748c:	697b      	ldr	r3, [r7, #20]
}
1004748e:	0018      	movs	r0, r3
10047490:	46bd      	mov	sp, r7
10047492:	b008      	add	sp, #32
10047494:	bdb0      	pop	{r4, r5, r7, pc}
10047496:	46c0      	nop			@ (mov r8, r8)
10047498:	20000908 	.word	0x20000908

1004749c <_update_xtal_startup_time>:

static void _update_xtal_startup_time(uint16_t hs_startup_time, int32_t freq1)
{
1004749c:	b580      	push	{r7, lr}
1004749e:	b084      	sub	sp, #16
100474a0:	af00      	add	r7, sp, #0
100474a2:	0002      	movs	r2, r0
100474a4:	6039      	str	r1, [r7, #0]
100474a6:	1dbb      	adds	r3, r7, #6
100474a8:	801a      	strh	r2, [r3, #0]
  int32_t time1;

  time1 = blue_unit_conversion(hs_startup_time, freq1, MULT64_THR_FREQ);
100474aa:	1dbb      	adds	r3, r7, #6
100474ac:	881b      	ldrh	r3, [r3, #0]
100474ae:	6839      	ldr	r1, [r7, #0]
100474b0:	4a0e      	ldr	r2, [pc, #56]	@ (100474ec <_update_xtal_startup_time+0x50>)
100474b2:	0018      	movs	r0, r3
100474b4:	f7f8 fe04 	bl	100400c0 <blue_unit_conversion>
100474b8:	0003      	movs	r3, r0
100474ba:	60fb      	str	r3, [r7, #12]
  if (time1 >= 4096)
100474bc:	68fa      	ldr	r2, [r7, #12]
100474be:	2380      	movs	r3, #128	@ 0x80
100474c0:	015b      	lsls	r3, r3, #5
100474c2:	429a      	cmp	r2, r3
100474c4:	db01      	blt.n	100474ca <_update_xtal_startup_time+0x2e>
  {
    time1 = 4095;
100474c6:	4b0a      	ldr	r3, [pc, #40]	@ (100474f0 <_update_xtal_startup_time+0x54>)
100474c8:	60fb      	str	r3, [r7, #12]
  }
  if (time1 < 16)
100474ca:	68fb      	ldr	r3, [r7, #12]
100474cc:	2b0f      	cmp	r3, #15
100474ce:	dc01      	bgt.n	100474d4 <_update_xtal_startup_time+0x38>
  {
    time1 = 16;
100474d0:	2310      	movs	r3, #16
100474d2:	60fb      	str	r3, [r7, #12]
  }
  LL_RADIO_TIMER_SetWakeupOffset(WAKEUP, (time1 >> 4));
100474d4:	68fb      	ldr	r3, [r7, #12]
100474d6:	111b      	asrs	r3, r3, #4
100474d8:	b2db      	uxtb	r3, r3
100474da:	4a06      	ldr	r2, [pc, #24]	@ (100474f4 <_update_xtal_startup_time+0x58>)
100474dc:	0019      	movs	r1, r3
100474de:	0010      	movs	r0, r2
100474e0:	f7ff f8bc 	bl	1004665c <LL_RADIO_TIMER_SetWakeupOffset>
}
100474e4:	46c0      	nop			@ (mov r8, r8)
100474e6:	46bd      	mov	sp, r7
100474e8:	b004      	add	sp, #16
100474ea:	bd80      	pop	{r7, pc}
100474ec:	00000326 	.word	0x00000326
100474f0:	00000fff 	.word	0x00000fff
100474f4:	60001800 	.word	0x60001800

100474f8 <_calibration_callback>:

static void _calibration_callback(void *handle)
{
100474f8:	b580      	push	{r7, lr}
100474fa:	b082      	sub	sp, #8
100474fc:	af00      	add	r7, sp, #0
100474fe:	6078      	str	r0, [r7, #4]
  if (RADIO_TIMER_Context.calibrationSettings.periodicCalibration)
10047500:	4b06      	ldr	r3, [pc, #24]	@ (1004751c <_calibration_callback+0x24>)
10047502:	781b      	ldrb	r3, [r3, #0]
10047504:	2b00      	cmp	r3, #0
10047506:	d001      	beq.n	1004750c <_calibration_callback+0x14>
  {
    _timer_start_calibration();
10047508:	f7ff fe74 	bl	100471f4 <_timer_start_calibration>
  }
  RADIO_TIMER_Context.calibrationSettings.calibration_in_progress = TRUE;
1004750c:	4b03      	ldr	r3, [pc, #12]	@ (1004751c <_calibration_callback+0x24>)
1004750e:	2201      	movs	r2, #1
10047510:	721a      	strb	r2, [r3, #8]
}
10047512:	46c0      	nop			@ (mov r8, r8)
10047514:	46bd      	mov	sp, r7
10047516:	b002      	add	sp, #8
10047518:	bd80      	pop	{r7, pc}
1004751a:	46c0      	nop			@ (mov r8, r8)
1004751c:	20000908 	.word	0x20000908

10047520 <_start_timer>:

static int32_t _start_timer(VTIMER_HandleType *timerHandle, uint64_t time)
{
10047520:	b590      	push	{r4, r7, lr}
10047522:	b089      	sub	sp, #36	@ 0x24
10047524:	af00      	add	r7, sp, #0
10047526:	60f8      	str	r0, [r7, #12]
10047528:	603a      	str	r2, [r7, #0]
1004752a:	607b      	str	r3, [r7, #4]
  uint8_t expired = 0;
1004752c:	2313      	movs	r3, #19
1004752e:	18fb      	adds	r3, r7, r3
10047530:	2200      	movs	r2, #0
10047532:	701a      	strb	r2, [r3, #0]

  /* The timer is already started*/
  if (timerHandle->active)
10047534:	68fb      	ldr	r3, [r7, #12]
10047536:	7b1b      	ldrb	r3, [r3, #12]
10047538:	2b00      	cmp	r3, #0
1004753a:	d001      	beq.n	10047540 <_start_timer+0x20>
  {
    return 1;
1004753c:	2301      	movs	r3, #1
1004753e:	e047      	b.n	100475d0 <_start_timer+0xb0>
  }
  timerHandle->expiryTime = time;
10047540:	68f9      	ldr	r1, [r7, #12]
10047542:	683a      	ldr	r2, [r7, #0]
10047544:	687b      	ldr	r3, [r7, #4]
10047546:	600a      	str	r2, [r1, #0]
10047548:	604b      	str	r3, [r1, #4]
  timerHandle->active = TRUE;
1004754a:	68fb      	ldr	r3, [r7, #12]
1004754c:	2201      	movs	r2, #1
1004754e:	731a      	strb	r2, [r3, #12]
  if (_insert_timer_in_queue(RADIO_TIMER_Context.rootNode, timerHandle) == timerHandle)
10047550:	4b21      	ldr	r3, [pc, #132]	@ (100475d8 <_start_timer+0xb8>)
10047552:	228c      	movs	r2, #140	@ 0x8c
10047554:	589b      	ldr	r3, [r3, r2]
10047556:	68fa      	ldr	r2, [r7, #12]
10047558:	0011      	movs	r1, r2
1004755a:	0018      	movs	r0, r3
1004755c:	f000 f95c 	bl	10047818 <_insert_timer_in_queue>
10047560:	0002      	movs	r2, r0
10047562:	68fb      	ldr	r3, [r7, #12]
10047564:	4293      	cmp	r3, r2
10047566:	d130      	bne.n	100475ca <_start_timer+0xaa>
  {
    RADIO_TIMER_Context.rootNode = _update_user_timeout(timerHandle, &expired);
10047568:	2413      	movs	r4, #19
1004756a:	193a      	adds	r2, r7, r4
1004756c:	68fb      	ldr	r3, [r7, #12]
1004756e:	0011      	movs	r1, r2
10047570:	0018      	movs	r0, r3
10047572:	f000 f89b 	bl	100476ac <_update_user_timeout>
10047576:	0002      	movs	r2, r0
10047578:	4b17      	ldr	r3, [pc, #92]	@ (100475d8 <_start_timer+0xb8>)
1004757a:	218c      	movs	r1, #140	@ 0x8c
1004757c:	505a      	str	r2, [r3, r1]
    if (expired)
1004757e:	193b      	adds	r3, r7, r4
10047580:	781b      	ldrb	r3, [r3, #0]
10047582:	2b00      	cmp	r3, #0
10047584:	d021      	beq.n	100475ca <_start_timer+0xaa>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
10047586:	f3ef 8310 	mrs	r3, PRIMASK
1004758a:	61bb      	str	r3, [r7, #24]
  return(result);
1004758c:	69bb      	ldr	r3, [r7, #24]
    {
      /* A new root timer is already expired, mimic timer expire that is normally signaled
       through the interrupt handler that increase the number of expired timers*/
      INCREMENT_EXPIRE_COUNT;
1004758e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
10047590:	b672      	cpsid	i
}
10047592:	46c0      	nop			@ (mov r8, r8)
10047594:	4b10      	ldr	r3, [pc, #64]	@ (100475d8 <_start_timer+0xb8>)
10047596:	2291      	movs	r2, #145	@ 0x91
10047598:	5c9b      	ldrb	r3, [r3, r2]
1004759a:	3301      	adds	r3, #1
1004759c:	4a0e      	ldr	r2, [pc, #56]	@ (100475d8 <_start_timer+0xb8>)
1004759e:	2192      	movs	r1, #146	@ 0x92
100475a0:	5c52      	ldrb	r2, [r2, r1]
100475a2:	4293      	cmp	r3, r2
100475a4:	d103      	bne.n	100475ae <_start_timer+0x8e>
100475a6:	4b0c      	ldr	r3, [pc, #48]	@ (100475d8 <_start_timer+0xb8>)
100475a8:	2291      	movs	r2, #145	@ 0x91
100475aa:	5c9b      	ldrb	r3, [r3, r2]
100475ac:	e004      	b.n	100475b8 <_start_timer+0x98>
100475ae:	4b0a      	ldr	r3, [pc, #40]	@ (100475d8 <_start_timer+0xb8>)
100475b0:	2291      	movs	r2, #145	@ 0x91
100475b2:	5c9b      	ldrb	r3, [r3, r2]
100475b4:	3301      	adds	r3, #1
100475b6:	b2db      	uxtb	r3, r3
100475b8:	4a07      	ldr	r2, [pc, #28]	@ (100475d8 <_start_timer+0xb8>)
100475ba:	2191      	movs	r1, #145	@ 0x91
100475bc:	5453      	strb	r3, [r2, r1]
100475be:	69fb      	ldr	r3, [r7, #28]
100475c0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
100475c2:	697b      	ldr	r3, [r7, #20]
100475c4:	f383 8810 	msr	PRIMASK, r3
}
100475c8:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return expired;
100475ca:	2313      	movs	r3, #19
100475cc:	18fb      	adds	r3, r7, r3
100475ce:	781b      	ldrb	r3, [r3, #0]
}
100475d0:	0018      	movs	r0, r3
100475d2:	46bd      	mov	sp, r7
100475d4:	b009      	add	sp, #36	@ 0x24
100475d6:	bd90      	pop	{r4, r7, pc}
100475d8:	20000908 	.word	0x20000908

100475dc <_get_system_time_and_machine>:

static uint64_t _get_system_time_and_machine(RADIO_TIMER_ContextTypeDef *context, uint32_t *current_machine_time)
{
100475dc:	b5b0      	push	{r4, r5, r7, lr}
100475de:	b08a      	sub	sp, #40	@ 0x28
100475e0:	af00      	add	r7, sp, #0
100475e2:	60f8      	str	r0, [r7, #12]
100475e4:	60b9      	str	r1, [r7, #8]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
100475e6:	f3ef 8310 	mrs	r3, PRIMASK
100475ea:	617b      	str	r3, [r7, #20]
  return(result);
100475ec:	697b      	ldr	r3, [r7, #20]
  uint32_t difftime;
  uint64_t new_time;

  ATOMIC_SECTION_BEGIN();
100475ee:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
100475f0:	b672      	cpsid	i
}
100475f2:	46c0      	nop			@ (mov r8, r8)
  new_time = context->cumulative_time;
100475f4:	68fb      	ldr	r3, [r7, #12]
100475f6:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
100475f8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
100475fa:	623a      	str	r2, [r7, #32]
100475fc:	627b      	str	r3, [r7, #36]	@ 0x24
  *current_machine_time =  LL_RADIO_TIMER_GetAbsoluteTime(WAKEUP);
100475fe:	4b29      	ldr	r3, [pc, #164]	@ (100476a4 <_get_system_time_and_machine+0xc8>)
10047600:	0018      	movs	r0, r3
10047602:	f7ff f85c 	bl	100466be <LL_RADIO_TIMER_GetAbsoluteTime>
10047606:	0002      	movs	r2, r0
10047608:	68bb      	ldr	r3, [r7, #8]
1004760a:	601a      	str	r2, [r3, #0]
  difftime = TIME_ABSDIFF(*current_machine_time, context->last_machine_time);
1004760c:	68bb      	ldr	r3, [r7, #8]
1004760e:	681a      	ldr	r2, [r3, #0]
10047610:	68fb      	ldr	r3, [r7, #12]
10047612:	2180      	movs	r1, #128	@ 0x80
10047614:	585b      	ldr	r3, [r3, r1]
10047616:	1ad3      	subs	r3, r2, r3
10047618:	61bb      	str	r3, [r7, #24]
  new_time += blue_unit_conversion(difftime, context->calibrationData.period1, MULT64_THR_PERIOD);
1004761a:	68fb      	ldr	r3, [r7, #12]
1004761c:	69db      	ldr	r3, [r3, #28]
1004761e:	0019      	movs	r1, r3
10047620:	4a21      	ldr	r2, [pc, #132]	@ (100476a8 <_get_system_time_and_machine+0xcc>)
10047622:	69bb      	ldr	r3, [r7, #24]
10047624:	0018      	movs	r0, r3
10047626:	f7f8 fd4b 	bl	100400c0 <blue_unit_conversion>
1004762a:	0003      	movs	r3, r0
1004762c:	603b      	str	r3, [r7, #0]
1004762e:	2300      	movs	r3, #0
10047630:	607b      	str	r3, [r7, #4]
10047632:	6a3a      	ldr	r2, [r7, #32]
10047634:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10047636:	6838      	ldr	r0, [r7, #0]
10047638:	6879      	ldr	r1, [r7, #4]
1004763a:	1812      	adds	r2, r2, r0
1004763c:	414b      	adcs	r3, r1
1004763e:	623a      	str	r2, [r7, #32]
10047640:	627b      	str	r3, [r7, #36]	@ 0x24
  if (new_time < context->last_system_time)
10047642:	68fb      	ldr	r3, [r7, #12]
10047644:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
10047646:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
10047648:	6a79      	ldr	r1, [r7, #36]	@ 0x24
1004764a:	4299      	cmp	r1, r3
1004764c:	d305      	bcc.n	1004765a <_get_system_time_and_machine+0x7e>
1004764e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
10047650:	4299      	cmp	r1, r3
10047652:	d115      	bne.n	10047680 <_get_system_time_and_machine+0xa4>
10047654:	6a39      	ldr	r1, [r7, #32]
10047656:	4291      	cmp	r1, r2
10047658:	d212      	bcs.n	10047680 <_get_system_time_and_machine+0xa4>
  {
    new_time += blue_unit_conversion(TIMER_MAX_VALUE, context->calibrationData.period1, MULT64_THR_PERIOD);
1004765a:	68fb      	ldr	r3, [r7, #12]
1004765c:	69db      	ldr	r3, [r3, #28]
1004765e:	0019      	movs	r1, r3
10047660:	4a11      	ldr	r2, [pc, #68]	@ (100476a8 <_get_system_time_and_machine+0xcc>)
10047662:	2301      	movs	r3, #1
10047664:	425b      	negs	r3, r3
10047666:	0018      	movs	r0, r3
10047668:	f7f8 fd2a 	bl	100400c0 <blue_unit_conversion>
1004766c:	0003      	movs	r3, r0
1004766e:	001c      	movs	r4, r3
10047670:	2300      	movs	r3, #0
10047672:	001d      	movs	r5, r3
10047674:	6a3a      	ldr	r2, [r7, #32]
10047676:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10047678:	1912      	adds	r2, r2, r4
1004767a:	416b      	adcs	r3, r5
1004767c:	623a      	str	r2, [r7, #32]
1004767e:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  context->last_system_time = new_time;
10047680:	68f9      	ldr	r1, [r7, #12]
10047682:	6a3a      	ldr	r2, [r7, #32]
10047684:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10047686:	678a      	str	r2, [r1, #120]	@ 0x78
10047688:	67cb      	str	r3, [r1, #124]	@ 0x7c
1004768a:	69fb      	ldr	r3, [r7, #28]
1004768c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
1004768e:	693b      	ldr	r3, [r7, #16]
10047690:	f383 8810 	msr	PRIMASK, r3
}
10047694:	46c0      	nop			@ (mov r8, r8)
  ATOMIC_SECTION_END();

  return new_time;
10047696:	6a3a      	ldr	r2, [r7, #32]
10047698:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
1004769a:	0010      	movs	r0, r2
1004769c:	0019      	movs	r1, r3
1004769e:	46bd      	mov	sp, r7
100476a0:	b00a      	add	sp, #40	@ 0x28
100476a2:	bdb0      	pop	{r4, r5, r7, pc}
100476a4:	60001800 	.word	0x60001800
100476a8:	00000635 	.word	0x00000635

100476ac <_update_user_timeout>:

/* Set timeout and skip non active timers */
static VTIMER_HandleType *_update_user_timeout(VTIMER_HandleType *rootNode, uint8_t *expired)
{
100476ac:	b5b0      	push	{r4, r5, r7, lr}
100476ae:	b08e      	sub	sp, #56	@ 0x38
100476b0:	af00      	add	r7, sp, #0
100476b2:	60f8      	str	r0, [r7, #12]
100476b4:	60b9      	str	r1, [r7, #8]
  VTIMER_HandleType *curr = rootNode;
100476b6:	68fb      	ldr	r3, [r7, #12]
100476b8:	637b      	str	r3, [r7, #52]	@ 0x34
  VTIMER_HandleType *rootOrig = rootNode;
100476ba:	68fb      	ldr	r3, [r7, #12]
100476bc:	633b      	str	r3, [r7, #48]	@ 0x30
  int64_t delay;
  *expired = 0;
100476be:	68bb      	ldr	r3, [r7, #8]
100476c0:	2200      	movs	r2, #0
100476c2:	701a      	strb	r2, [r3, #0]
  while (curr != NULL)
100476c4:	e094      	b.n	100477f0 <_update_user_timeout+0x144>
  {
    if (curr->active)
100476c6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
100476c8:	7b1b      	ldrb	r3, [r3, #12]
100476ca:	2b00      	cmp	r3, #0
100476cc:	d100      	bne.n	100476d0 <_update_user_timeout+0x24>
100476ce:	e08c      	b.n	100477ea <_update_user_timeout+0x13e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
100476d0:	f3ef 8310 	mrs	r3, PRIMASK
100476d4:	61fb      	str	r3, [r7, #28]
  return(result);
100476d6:	69fb      	ldr	r3, [r7, #28]
    {
      ATOMIC_SECTION_BEGIN();
100476d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("cpsid i" : : : "memory");
100476da:	b672      	cpsid	i
}
100476dc:	46c0      	nop			@ (mov r8, r8)
#if defined (STM32WB06) || defined (STM32WB07)
      uint8_t dummy;
      bool share = FALSE;
100476de:	230e      	movs	r3, #14
100476e0:	2108      	movs	r1, #8
100476e2:	185b      	adds	r3, r3, r1
100476e4:	19db      	adds	r3, r3, r7
100476e6:	2200      	movs	r2, #0
100476e8:	701a      	strb	r2, [r3, #0]
      _check_radio_activity(&RADIO_TIMER_Context.radioTimer, &dummy);
100476ea:	230f      	movs	r3, #15
100476ec:	185b      	adds	r3, r3, r1
100476ee:	19da      	adds	r2, r3, r7
100476f0:	4b47      	ldr	r3, [pc, #284]	@ (10047810 <_update_user_timeout+0x164>)
100476f2:	0011      	movs	r1, r2
100476f4:	0018      	movs	r0, r3
100476f6:	f000 f9f5 	bl	10047ae4 <_check_radio_activity>
#endif
      delay = curr->expiryTime - HAL_RADIO_TIMER_GetCurrentSysTime();
100476fa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
100476fc:	681c      	ldr	r4, [r3, #0]
100476fe:	685d      	ldr	r5, [r3, #4]
10047700:	f7ff fc8c 	bl	1004701c <HAL_RADIO_TIMER_GetCurrentSysTime>
10047704:	0002      	movs	r2, r0
10047706:	000b      	movs	r3, r1
10047708:	1aa4      	subs	r4, r4, r2
1004770a:	419d      	sbcs	r5, r3
1004770c:	0022      	movs	r2, r4
1004770e:	002b      	movs	r3, r5
10047710:	623a      	str	r2, [r7, #32]
10047712:	627b      	str	r3, [r7, #36]	@ 0x24
      if (delay > 0)
10047714:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10047716:	2b00      	cmp	r3, #0
10047718:	dc05      	bgt.n	10047726 <_update_user_timeout+0x7a>
1004771a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
1004771c:	2b00      	cmp	r3, #0
1004771e:	d15a      	bne.n	100477d6 <_update_user_timeout+0x12a>
10047720:	6a3b      	ldr	r3, [r7, #32]
10047722:	2b00      	cmp	r3, #0
10047724:	d057      	beq.n	100477d6 <_update_user_timeout+0x12a>
         /* Protection against interrupt must be used to avoid that the called function will be interrupted
          and so the timer programming will happen after the target time is already passed
          leading to a timer expiring after timer wraps, instead of the expected delay */
#if defined (STM32WB06) || defined (STM32WB07)
        /* Is the active radio operation before or too close the host timeout? */
        if (((RADIO_TIMER_Context.radioTimer.expiryTime) < (curr->expiryTime + RADIO_TIMER_Context.hostMargin))
10047726:	4b3b      	ldr	r3, [pc, #236]	@ (10047814 <_update_user_timeout+0x168>)
10047728:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
1004772a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
1004772c:	6b79      	ldr	r1, [r7, #52]	@ 0x34
1004772e:	6808      	ldr	r0, [r1, #0]
10047730:	6849      	ldr	r1, [r1, #4]
10047732:	4c38      	ldr	r4, [pc, #224]	@ (10047814 <_update_user_timeout+0x168>)
10047734:	2598      	movs	r5, #152	@ 0x98
10047736:	5964      	ldr	r4, [r4, r5]
10047738:	603c      	str	r4, [r7, #0]
1004773a:	2400      	movs	r4, #0
1004773c:	607c      	str	r4, [r7, #4]
1004773e:	683c      	ldr	r4, [r7, #0]
10047740:	687d      	ldr	r5, [r7, #4]
10047742:	1900      	adds	r0, r0, r4
10047744:	4169      	adcs	r1, r5
10047746:	4299      	cmp	r1, r3
10047748:	d802      	bhi.n	10047750 <_update_user_timeout+0xa4>
1004774a:	d11b      	bne.n	10047784 <_update_user_timeout+0xd8>
1004774c:	4290      	cmp	r0, r2
1004774e:	d919      	bls.n	10047784 <_update_user_timeout+0xd8>
            && RADIO_TIMER_Context.radioTimer.active)
10047750:	4b30      	ldr	r3, [pc, #192]	@ (10047814 <_update_user_timeout+0x168>)
10047752:	2261      	movs	r2, #97	@ 0x61
10047754:	5c9b      	ldrb	r3, [r3, r2]
10047756:	2b00      	cmp	r3, #0
10047758:	d014      	beq.n	10047784 <_update_user_timeout+0xd8>
        {
          if ((RADIO_TIMER_Context.radioTimer.expiryTime >= curr->expiryTime) && RADIO_TIMER_Context.radioTimer.active)
1004775a:	4b2e      	ldr	r3, [pc, #184]	@ (10047814 <_update_user_timeout+0x168>)
1004775c:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
1004775e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
10047760:	6b79      	ldr	r1, [r7, #52]	@ 0x34
10047762:	6808      	ldr	r0, [r1, #0]
10047764:	6849      	ldr	r1, [r1, #4]
10047766:	4299      	cmp	r1, r3
10047768:	d813      	bhi.n	10047792 <_update_user_timeout+0xe6>
1004776a:	d101      	bne.n	10047770 <_update_user_timeout+0xc4>
1004776c:	4290      	cmp	r0, r2
1004776e:	d810      	bhi.n	10047792 <_update_user_timeout+0xe6>
10047770:	4b28      	ldr	r3, [pc, #160]	@ (10047814 <_update_user_timeout+0x168>)
10047772:	2261      	movs	r2, #97	@ 0x61
10047774:	5c9b      	ldrb	r3, [r3, r2]
10047776:	2b00      	cmp	r3, #0
10047778:	d00b      	beq.n	10047792 <_update_user_timeout+0xe6>
          {
            RADIO_TIMER_Context.hostIsRadioPending = 1;
1004777a:	4b26      	ldr	r3, [pc, #152]	@ (10047814 <_update_user_timeout+0x168>)
1004777c:	2295      	movs	r2, #149	@ 0x95
1004777e:	2101      	movs	r1, #1
10047780:	5499      	strb	r1, [r3, r2]
          if ((RADIO_TIMER_Context.radioTimer.expiryTime >= curr->expiryTime) && RADIO_TIMER_Context.radioTimer.active)
10047782:	e006      	b.n	10047792 <_update_user_timeout+0xe6>
          }          
        }
        else
        {
          /* It's fine to program the wakeup timer for an host wakeup */
          share = TRUE;
10047784:	230e      	movs	r3, #14
10047786:	2208      	movs	r2, #8
10047788:	189b      	adds	r3, r3, r2
1004778a:	19db      	adds	r3, r3, r7
1004778c:	2201      	movs	r2, #1
1004778e:	701a      	strb	r2, [r3, #0]
10047790:	e000      	b.n	10047794 <_update_user_timeout+0xe8>
          if ((RADIO_TIMER_Context.radioTimer.expiryTime >= curr->expiryTime) && RADIO_TIMER_Context.radioTimer.active)
10047792:	46c0      	nop			@ (mov r8, r8)
        }
        TIMER_SetRadioHostWakeupTime(delay, &share);
10047794:	6a3b      	ldr	r3, [r7, #32]
10047796:	240e      	movs	r4, #14
10047798:	2508      	movs	r5, #8
1004779a:	1962      	adds	r2, r4, r5
1004779c:	19d2      	adds	r2, r2, r7
1004779e:	0011      	movs	r1, r2
100477a0:	0018      	movs	r0, r3
100477a2:	f000 fa29 	bl	10047bf8 <TIMER_SetRadioHostWakeupTime>
        if (share == TRUE)
100477a6:	1963      	adds	r3, r4, r5
100477a8:	19db      	adds	r3, r3, r7
100477aa:	781b      	ldrb	r3, [r3, #0]
100477ac:	2b00      	cmp	r3, #0
100477ae:	d015      	beq.n	100477dc <_update_user_timeout+0x130>
        {
          RADIO_TIMER_Context.radioTimer.pending |= RADIO_TIMER_Context.radioTimer.active;
100477b0:	4b18      	ldr	r3, [pc, #96]	@ (10047814 <_update_user_timeout+0x168>)
100477b2:	2262      	movs	r2, #98	@ 0x62
100477b4:	5c9a      	ldrb	r2, [r3, r2]
100477b6:	4b17      	ldr	r3, [pc, #92]	@ (10047814 <_update_user_timeout+0x168>)
100477b8:	2161      	movs	r1, #97	@ 0x61
100477ba:	5c5b      	ldrb	r3, [r3, r1]
100477bc:	4313      	orrs	r3, r2
100477be:	b2db      	uxtb	r3, r3
100477c0:	1e5a      	subs	r2, r3, #1
100477c2:	4193      	sbcs	r3, r2
100477c4:	b2d9      	uxtb	r1, r3
100477c6:	4b13      	ldr	r3, [pc, #76]	@ (10047814 <_update_user_timeout+0x168>)
100477c8:	2262      	movs	r2, #98	@ 0x62
100477ca:	5499      	strb	r1, [r3, r2]
          RADIO_TIMER_Context.radioTimer.active = FALSE;
100477cc:	4b11      	ldr	r3, [pc, #68]	@ (10047814 <_update_user_timeout+0x168>)
100477ce:	2261      	movs	r2, #97	@ 0x61
100477d0:	2100      	movs	r1, #0
100477d2:	5499      	strb	r1, [r3, r2]
100477d4:	e002      	b.n	100477dc <_update_user_timeout+0x130>
        VTIMER_SetWakeupTime(delay, TRUE);
#endif
      }
      else
      {
        *expired = 1;
100477d6:	68bb      	ldr	r3, [r7, #8]
100477d8:	2201      	movs	r2, #1
100477da:	701a      	strb	r2, [r3, #0]
100477dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
100477de:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
100477e0:	69bb      	ldr	r3, [r7, #24]
100477e2:	f383 8810 	msr	PRIMASK, r3
}
100477e6:	46c0      	nop			@ (mov r8, r8)
      }
      ATOMIC_SECTION_END();
      break;
100477e8:	e006      	b.n	100477f8 <_update_user_timeout+0x14c>
    }
    curr = curr->next;
100477ea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
100477ec:	691b      	ldr	r3, [r3, #16]
100477ee:	637b      	str	r3, [r7, #52]	@ 0x34
  while (curr != NULL)
100477f0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
100477f2:	2b00      	cmp	r3, #0
100477f4:	d000      	beq.n	100477f8 <_update_user_timeout+0x14c>
100477f6:	e766      	b.n	100476c6 <_update_user_timeout+0x1a>
  }
  if (*expired)
100477f8:	68bb      	ldr	r3, [r7, #8]
100477fa:	781b      	ldrb	r3, [r3, #0]
100477fc:	2b00      	cmp	r3, #0
100477fe:	d001      	beq.n	10047804 <_update_user_timeout+0x158>
  {
    return rootOrig;
10047800:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
10047802:	e000      	b.n	10047806 <_update_user_timeout+0x15a>
  }

  return curr;
10047804:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
10047806:	0018      	movs	r0, r3
10047808:	46bd      	mov	sp, r7
1004780a:	b00e      	add	sp, #56	@ 0x38
1004780c:	bdb0      	pop	{r4, r5, r7, pc}
1004780e:	46c0      	nop			@ (mov r8, r8)
10047810:	20000960 	.word	0x20000960
10047814:	20000908 	.word	0x20000908

10047818 <_insert_timer_in_queue>:
  return current_time;
}
#endif

static VTIMER_HandleType *_insert_timer_in_queue(VTIMER_HandleType *rootNode, VTIMER_HandleType *handle)
{
10047818:	b580      	push	{r7, lr}
1004781a:	b086      	sub	sp, #24
1004781c:	af00      	add	r7, sp, #0
1004781e:	6078      	str	r0, [r7, #4]
10047820:	6039      	str	r1, [r7, #0]
  VTIMER_HandleType *current = rootNode;
10047822:	687b      	ldr	r3, [r7, #4]
10047824:	617b      	str	r3, [r7, #20]
  VTIMER_HandleType *prev = NULL;
10047826:	2300      	movs	r3, #0
10047828:	613b      	str	r3, [r7, #16]
  VTIMER_HandleType *returnValue = rootNode;
1004782a:	687b      	ldr	r3, [r7, #4]
1004782c:	60fb      	str	r3, [r7, #12]

  while ((current != NULL) && (current->expiryTime < handle->expiryTime))
1004782e:	e004      	b.n	1004783a <_insert_timer_in_queue+0x22>
  {
    prev = current;
10047830:	697b      	ldr	r3, [r7, #20]
10047832:	613b      	str	r3, [r7, #16]
    current = current->next;
10047834:	697b      	ldr	r3, [r7, #20]
10047836:	691b      	ldr	r3, [r3, #16]
10047838:	617b      	str	r3, [r7, #20]
  while ((current != NULL) && (current->expiryTime < handle->expiryTime))
1004783a:	697b      	ldr	r3, [r7, #20]
1004783c:	2b00      	cmp	r3, #0
1004783e:	d00a      	beq.n	10047856 <_insert_timer_in_queue+0x3e>
10047840:	697b      	ldr	r3, [r7, #20]
10047842:	681a      	ldr	r2, [r3, #0]
10047844:	685b      	ldr	r3, [r3, #4]
10047846:	6839      	ldr	r1, [r7, #0]
10047848:	6808      	ldr	r0, [r1, #0]
1004784a:	6849      	ldr	r1, [r1, #4]
1004784c:	4299      	cmp	r1, r3
1004784e:	d8ef      	bhi.n	10047830 <_insert_timer_in_queue+0x18>
10047850:	d101      	bne.n	10047856 <_insert_timer_in_queue+0x3e>
10047852:	4290      	cmp	r0, r2
10047854:	d8ec      	bhi.n	10047830 <_insert_timer_in_queue+0x18>
  }

  handle->next = current;
10047856:	683b      	ldr	r3, [r7, #0]
10047858:	697a      	ldr	r2, [r7, #20]
1004785a:	611a      	str	r2, [r3, #16]

  if (prev == NULL)
1004785c:	693b      	ldr	r3, [r7, #16]
1004785e:	2b00      	cmp	r3, #0
10047860:	d102      	bne.n	10047868 <_insert_timer_in_queue+0x50>
  {
    /* We are the new root */
    returnValue = handle;
10047862:	683b      	ldr	r3, [r7, #0]
10047864:	60fb      	str	r3, [r7, #12]
10047866:	e002      	b.n	1004786e <_insert_timer_in_queue+0x56>
  }
  else
  {
    prev->next = handle;
10047868:	693b      	ldr	r3, [r7, #16]
1004786a:	683a      	ldr	r2, [r7, #0]
1004786c:	611a      	str	r2, [r3, #16]
  }

  return returnValue;
1004786e:	68fb      	ldr	r3, [r7, #12]
}
10047870:	0018      	movs	r0, r3
10047872:	46bd      	mov	sp, r7
10047874:	b006      	add	sp, #24
10047876:	bd80      	pop	{r7, pc}

10047878 <_virtualTimeBaseEnable>:

static void _virtualTimeBaseEnable(FunctionalState state)
{
10047878:	b580      	push	{r7, lr}
1004787a:	b082      	sub	sp, #8
1004787c:	af00      	add	r7, sp, #0
1004787e:	0002      	movs	r2, r0
10047880:	1dfb      	adds	r3, r7, #7
10047882:	701a      	strb	r2, [r3, #0]
  if (state != DISABLE)
10047884:	1dfb      	adds	r3, r7, #7
10047886:	781b      	ldrb	r3, [r3, #0]
10047888:	2b00      	cmp	r3, #0
1004788a:	d010      	beq.n	100478ae <_virtualTimeBaseEnable+0x36>
  {
    if (RADIO_TIMER_Context.enableTimeBase == FALSE)
1004788c:	4b0e      	ldr	r3, [pc, #56]	@ (100478c8 <_virtualTimeBaseEnable+0x50>)
1004788e:	2290      	movs	r2, #144	@ 0x90
10047890:	5c9b      	ldrb	r3, [r3, r2]
10047892:	2201      	movs	r2, #1
10047894:	4053      	eors	r3, r2
10047896:	b2db      	uxtb	r3, r3
10047898:	2b00      	cmp	r3, #0
1004789a:	d010      	beq.n	100478be <_virtualTimeBaseEnable+0x46>
    {
      _calibration_callback(&RADIO_TIMER_Context.calibrationTimer);
1004789c:	4b0b      	ldr	r3, [pc, #44]	@ (100478cc <_virtualTimeBaseEnable+0x54>)
1004789e:	0018      	movs	r0, r3
100478a0:	f7ff fe2a 	bl	100474f8 <_calibration_callback>
      RADIO_TIMER_Context.enableTimeBase = TRUE;
100478a4:	4b08      	ldr	r3, [pc, #32]	@ (100478c8 <_virtualTimeBaseEnable+0x50>)
100478a6:	2290      	movs	r2, #144	@ 0x90
100478a8:	2101      	movs	r1, #1
100478aa:	5499      	strb	r1, [r3, r2]
  else
  {
    HAL_RADIO_TIMER_StopVirtualTimer(&RADIO_TIMER_Context.calibrationTimer);
    RADIO_TIMER_Context.enableTimeBase = FALSE;
  }
}
100478ac:	e007      	b.n	100478be <_virtualTimeBaseEnable+0x46>
    HAL_RADIO_TIMER_StopVirtualTimer(&RADIO_TIMER_Context.calibrationTimer);
100478ae:	4b07      	ldr	r3, [pc, #28]	@ (100478cc <_virtualTimeBaseEnable+0x54>)
100478b0:	0018      	movs	r0, r3
100478b2:	f7ff fbc5 	bl	10047040 <HAL_RADIO_TIMER_StopVirtualTimer>
    RADIO_TIMER_Context.enableTimeBase = FALSE;
100478b6:	4b04      	ldr	r3, [pc, #16]	@ (100478c8 <_virtualTimeBaseEnable+0x50>)
100478b8:	2290      	movs	r2, #144	@ 0x90
100478ba:	2100      	movs	r1, #0
100478bc:	5499      	strb	r1, [r3, r2]
}
100478be:	46c0      	nop			@ (mov r8, r8)
100478c0:	46bd      	mov	sp, r7
100478c2:	b002      	add	sp, #8
100478c4:	bd80      	pop	{r7, pc}
100478c6:	46c0      	nop			@ (mov r8, r8)
100478c8:	20000908 	.word	0x20000908
100478cc:	20000948 	.word	0x20000948

100478d0 <_remove_timer_in_queue>:

static VTIMER_HandleType *_remove_timer_in_queue(VTIMER_HandleType *rootNode, VTIMER_HandleType *handle)
{
100478d0:	b580      	push	{r7, lr}
100478d2:	b086      	sub	sp, #24
100478d4:	af00      	add	r7, sp, #0
100478d6:	6078      	str	r0, [r7, #4]
100478d8:	6039      	str	r1, [r7, #0]
  VTIMER_HandleType *current = rootNode;
100478da:	687b      	ldr	r3, [r7, #4]
100478dc:	617b      	str	r3, [r7, #20]
  VTIMER_HandleType *prev = NULL;
100478de:	2300      	movs	r3, #0
100478e0:	613b      	str	r3, [r7, #16]
  VTIMER_HandleType *returnValue = rootNode;
100478e2:	687b      	ldr	r3, [r7, #4]
100478e4:	60fb      	str	r3, [r7, #12]

  while ((current != NULL) && (current != handle))
100478e6:	e004      	b.n	100478f2 <_remove_timer_in_queue+0x22>
  {
    prev = current;
100478e8:	697b      	ldr	r3, [r7, #20]
100478ea:	613b      	str	r3, [r7, #16]
    current = current->next;
100478ec:	697b      	ldr	r3, [r7, #20]
100478ee:	691b      	ldr	r3, [r3, #16]
100478f0:	617b      	str	r3, [r7, #20]
  while ((current != NULL) && (current != handle))
100478f2:	697b      	ldr	r3, [r7, #20]
100478f4:	2b00      	cmp	r3, #0
100478f6:	d003      	beq.n	10047900 <_remove_timer_in_queue+0x30>
100478f8:	697a      	ldr	r2, [r7, #20]
100478fa:	683b      	ldr	r3, [r7, #0]
100478fc:	429a      	cmp	r2, r3
100478fe:	d1f3      	bne.n	100478e8 <_remove_timer_in_queue+0x18>
  }

  if (current == NULL)
10047900:	697b      	ldr	r3, [r7, #20]
10047902:	2b00      	cmp	r3, #0
10047904:	d00b      	beq.n	1004791e <_remove_timer_in_queue+0x4e>
  {
    /* Not found */
  }
  else if (current == rootNode)
10047906:	697a      	ldr	r2, [r7, #20]
10047908:	687b      	ldr	r3, [r7, #4]
1004790a:	429a      	cmp	r2, r3
1004790c:	d103      	bne.n	10047916 <_remove_timer_in_queue+0x46>
  {
    /* New root node */
    returnValue = current->next;
1004790e:	697b      	ldr	r3, [r7, #20]
10047910:	691b      	ldr	r3, [r3, #16]
10047912:	60fb      	str	r3, [r7, #12]
10047914:	e003      	b.n	1004791e <_remove_timer_in_queue+0x4e>
  }
  else
  {
    prev->next = current->next;
10047916:	697b      	ldr	r3, [r7, #20]
10047918:	691a      	ldr	r2, [r3, #16]
1004791a:	693b      	ldr	r3, [r7, #16]
1004791c:	611a      	str	r2, [r3, #16]
  }

  return returnValue;
1004791e:	68fb      	ldr	r3, [r7, #12]
}
10047920:	0018      	movs	r0, r3
10047922:	46bd      	mov	sp, r7
10047924:	b006      	add	sp, #24
10047926:	bd80      	pop	{r7, pc}

10047928 <_check_callbacks>:

/* Check the number of expired timer from rootNode (ordered list of timers) and return the list of expired timers */
static VTIMER_HandleType *_check_callbacks(VTIMER_HandleType *rootNode, VTIMER_HandleType **expiredList)
{
10047928:	b5b0      	push	{r4, r5, r7, lr}
1004792a:	b088      	sub	sp, #32
1004792c:	af00      	add	r7, sp, #0
1004792e:	6078      	str	r0, [r7, #4]
10047930:	6039      	str	r1, [r7, #0]

  VTIMER_HandleType *curr = rootNode;
10047932:	687b      	ldr	r3, [r7, #4]
10047934:	61fb      	str	r3, [r7, #28]
  VTIMER_HandleType *prev = NULL;
10047936:	2300      	movs	r3, #0
10047938:	61bb      	str	r3, [r7, #24]
  VTIMER_HandleType *returnValue = rootNode;
1004793a:	687b      	ldr	r3, [r7, #4]
1004793c:	617b      	str	r3, [r7, #20]
  *expiredList = rootNode;
1004793e:	683b      	ldr	r3, [r7, #0]
10047940:	687a      	ldr	r2, [r7, #4]
10047942:	601a      	str	r2, [r3, #0]

  int64_t delay;
  uint32_t expiredCount = 0;
10047944:	2300      	movs	r3, #0
10047946:	613b      	str	r3, [r7, #16]

  while (curr != NULL)
10047948:	e021      	b.n	1004798e <_check_callbacks+0x66>
  {

    if (curr->active)
1004794a:	69fb      	ldr	r3, [r7, #28]
1004794c:	7b1b      	ldrb	r3, [r3, #12]
1004794e:	2b00      	cmp	r3, #0
10047950:	d015      	beq.n	1004797e <_check_callbacks+0x56>
    {
      delay = curr->expiryTime - HAL_RADIO_TIMER_GetCurrentSysTime();
10047952:	69fb      	ldr	r3, [r7, #28]
10047954:	681c      	ldr	r4, [r3, #0]
10047956:	685d      	ldr	r5, [r3, #4]
10047958:	f7ff fb60 	bl	1004701c <HAL_RADIO_TIMER_GetCurrentSysTime>
1004795c:	0002      	movs	r2, r0
1004795e:	000b      	movs	r3, r1
10047960:	1aa4      	subs	r4, r4, r2
10047962:	419d      	sbcs	r5, r3
10047964:	0022      	movs	r2, r4
10047966:	002b      	movs	r3, r5
10047968:	60ba      	str	r2, [r7, #8]
1004796a:	60fb      	str	r3, [r7, #12]

      if (delay > 5)   /*TBR*/
1004796c:	68fb      	ldr	r3, [r7, #12]
1004796e:	2b00      	cmp	r3, #0
10047970:	dc11      	bgt.n	10047996 <_check_callbacks+0x6e>
10047972:	68fb      	ldr	r3, [r7, #12]
10047974:	2b00      	cmp	r3, #0
10047976:	d102      	bne.n	1004797e <_check_callbacks+0x56>
10047978:	68bb      	ldr	r3, [r7, #8]
1004797a:	2b05      	cmp	r3, #5
1004797c:	d80b      	bhi.n	10047996 <_check_callbacks+0x6e>
        /* End of expired timers list*/
        break;
      }
    }

    prev = curr;
1004797e:	69fb      	ldr	r3, [r7, #28]
10047980:	61bb      	str	r3, [r7, #24]
    curr = curr->next;
10047982:	69fb      	ldr	r3, [r7, #28]
10047984:	691b      	ldr	r3, [r3, #16]
10047986:	61fb      	str	r3, [r7, #28]
    expiredCount++;
10047988:	693b      	ldr	r3, [r7, #16]
1004798a:	3301      	adds	r3, #1
1004798c:	613b      	str	r3, [r7, #16]
  while (curr != NULL)
1004798e:	69fb      	ldr	r3, [r7, #28]
10047990:	2b00      	cmp	r3, #0
10047992:	d1da      	bne.n	1004794a <_check_callbacks+0x22>
10047994:	e000      	b.n	10047998 <_check_callbacks+0x70>
        break;
10047996:	46c0      	nop			@ (mov r8, r8)
  }

  if (expiredCount)
10047998:	693b      	ldr	r3, [r7, #16]
1004799a:	2b00      	cmp	r3, #0
1004799c:	d005      	beq.n	100479aa <_check_callbacks+0x82>
  {
    /* Some timers expired */
    prev->next = NULL;
1004799e:	69bb      	ldr	r3, [r7, #24]
100479a0:	2200      	movs	r2, #0
100479a2:	611a      	str	r2, [r3, #16]
    returnValue = curr;
100479a4:	69fb      	ldr	r3, [r7, #28]
100479a6:	617b      	str	r3, [r7, #20]
100479a8:	e002      	b.n	100479b0 <_check_callbacks+0x88>
  }
  else
  {
    /* No timer expired */
    *expiredList = NULL;
100479aa:	683b      	ldr	r3, [r7, #0]
100479ac:	2200      	movs	r2, #0
100479ae:	601a      	str	r2, [r3, #0]
  }

  return returnValue;
100479b0:	697b      	ldr	r3, [r7, #20]
}
100479b2:	0018      	movs	r0, r3
100479b4:	46bd      	mov	sp, r7
100479b6:	b008      	add	sp, #32
100479b8:	bdb0      	pop	{r4, r5, r7, pc}
	...

100479bc <_updateCalibrationData>:

static void _updateCalibrationData(void)
{
100479bc:	b580      	push	{r7, lr}
100479be:	b084      	sub	sp, #16
100479c0:	af00      	add	r7, sp, #0
  if (RADIO_TIMER_Context.calibrationSettings.periodicCalibration)
100479c2:	4b17      	ldr	r3, [pc, #92]	@ (10047a20 <_updateCalibrationData+0x64>)
100479c4:	781b      	ldrb	r3, [r3, #0]
100479c6:	2b00      	cmp	r3, #0
100479c8:	d015      	beq.n	100479f6 <_updateCalibrationData+0x3a>
  {
    _get_calibration_data(&RADIO_TIMER_Context.calibrationData);
100479ca:	4b16      	ldr	r3, [pc, #88]	@ (10047a24 <_updateCalibrationData+0x68>)
100479cc:	0018      	movs	r0, r3
100479ce:	f7ff fc39 	bl	10047244 <_get_calibration_data>
    _update_xtal_startup_time(RADIO_TIMER_Context.hs_startup_time, RADIO_TIMER_Context.calibrationData.freq1);
100479d2:	4b13      	ldr	r3, [pc, #76]	@ (10047a20 <_updateCalibrationData+0x64>)
100479d4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
100479d6:	b29a      	uxth	r2, r3
100479d8:	4b11      	ldr	r3, [pc, #68]	@ (10047a20 <_updateCalibrationData+0x64>)
100479da:	699b      	ldr	r3, [r3, #24]
100479dc:	0019      	movs	r1, r3
100479de:	0010      	movs	r0, r2
100479e0:	f7ff fd5c 	bl	1004749c <_update_xtal_startup_time>
    _configureTxRxDelay(&RADIO_TIMER_Context, FALSE);
100479e4:	4b0e      	ldr	r3, [pc, #56]	@ (10047a20 <_updateCalibrationData+0x64>)
100479e6:	2100      	movs	r1, #0
100479e8:	0018      	movs	r0, r3
100479ea:	f7ff fc93 	bl	10047314 <_configureTxRxDelay>
    RADIO_TIMER_Context.calibrationData.calibration_data_available = 1;
100479ee:	4b0c      	ldr	r3, [pc, #48]	@ (10047a20 <_updateCalibrationData+0x64>)
100479f0:	2234      	movs	r2, #52	@ 0x34
100479f2:	2101      	movs	r1, #1
100479f4:	5499      	strb	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
100479f6:	f3ef 8310 	mrs	r3, PRIMASK
100479fa:	607b      	str	r3, [r7, #4]
  return(result);
100479fc:	687b      	ldr	r3, [r7, #4]
  }
  ATOMIC_SECTION_BEGIN();
100479fe:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
10047a00:	b672      	cpsid	i
}
10047a02:	46c0      	nop			@ (mov r8, r8)
  _update_system_time(&RADIO_TIMER_Context);
10047a04:	4b06      	ldr	r3, [pc, #24]	@ (10047a20 <_updateCalibrationData+0x64>)
10047a06:	0018      	movs	r0, r3
10047a08:	f000 f80e 	bl	10047a28 <_update_system_time>
10047a0c:	68fb      	ldr	r3, [r7, #12]
10047a0e:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
10047a10:	68bb      	ldr	r3, [r7, #8]
10047a12:	f383 8810 	msr	PRIMASK, r3
}
10047a16:	46c0      	nop			@ (mov r8, r8)
  ATOMIC_SECTION_END();
}
10047a18:	46c0      	nop			@ (mov r8, r8)
10047a1a:	46bd      	mov	sp, r7
10047a1c:	b004      	add	sp, #16
10047a1e:	bd80      	pop	{r7, pc}
10047a20:	20000908 	.word	0x20000908
10047a24:	20000918 	.word	0x20000918

10047a28 <_update_system_time>:

/* This function update the system time after a calibration.
 * If the user calls too often this function, you could have rounding issues in the integer maths.
 */
static void _update_system_time(RADIO_TIMER_ContextTypeDef *context)
{
10047a28:	b5b0      	push	{r4, r5, r7, lr}
10047a2a:	b088      	sub	sp, #32
10047a2c:	af00      	add	r7, sp, #0
10047a2e:	6178      	str	r0, [r7, #20]
  uint32_t current_machine_time;
  uint32_t period;

  current_machine_time = LL_RADIO_TIMER_GetAbsoluteTime(WAKEUP);
10047a30:	4b2a      	ldr	r3, [pc, #168]	@ (10047adc <_update_system_time+0xb4>)
10047a32:	0018      	movs	r0, r3
10047a34:	f7fe fe43 	bl	100466be <LL_RADIO_TIMER_GetAbsoluteTime>
10047a38:	0003      	movs	r3, r0
10047a3a:	61fb      	str	r3, [r7, #28]
  period = context->calibrationData.last_period1;
10047a3c:	697b      	ldr	r3, [r7, #20]
10047a3e:	6a1b      	ldr	r3, [r3, #32]
10047a40:	61bb      	str	r3, [r7, #24]
  context->cumulative_time = context->calibrationData.last_calibration_time + \
10047a42:	697b      	ldr	r3, [r7, #20]
10047a44:	6a9c      	ldr	r4, [r3, #40]	@ 0x28
10047a46:	6add      	ldr	r5, [r3, #44]	@ 0x2c
                             blue_unit_conversion(TIME_ABSDIFF(current_machine_time,
10047a48:	697b      	ldr	r3, [r7, #20]
10047a4a:	2280      	movs	r2, #128	@ 0x80
10047a4c:	589b      	ldr	r3, [r3, r2]
10047a4e:	69fa      	ldr	r2, [r7, #28]
10047a50:	1ad3      	subs	r3, r2, r3
10047a52:	4a23      	ldr	r2, [pc, #140]	@ (10047ae0 <_update_system_time+0xb8>)
10047a54:	69b9      	ldr	r1, [r7, #24]
10047a56:	0018      	movs	r0, r3
10047a58:	f7f8 fb32 	bl	100400c0 <blue_unit_conversion>
10047a5c:	0003      	movs	r3, r0
10047a5e:	60bb      	str	r3, [r7, #8]
10047a60:	2300      	movs	r3, #0
10047a62:	60fb      	str	r3, [r7, #12]
  context->cumulative_time = context->calibrationData.last_calibration_time + \
10047a64:	68ba      	ldr	r2, [r7, #8]
10047a66:	68fb      	ldr	r3, [r7, #12]
10047a68:	1912      	adds	r2, r2, r4
10047a6a:	416b      	adcs	r3, r5
10047a6c:	6979      	ldr	r1, [r7, #20]
10047a6e:	670a      	str	r2, [r1, #112]	@ 0x70
10047a70:	674b      	str	r3, [r1, #116]	@ 0x74
                                                               context->last_machine_time),
                                                  period, MULT64_THR_PERIOD);

  if ((context->calibrationSettings.periodicCalibration == 0)
10047a72:	697b      	ldr	r3, [r7, #20]
10047a74:	781b      	ldrb	r3, [r3, #0]
10047a76:	2b00      	cmp	r3, #0
10047a78:	d11d      	bne.n	10047ab6 <_update_system_time+0x8e>
      && (TIME_ABSDIFF(current_machine_time,
10047a7a:	697b      	ldr	r3, [r7, #20]
10047a7c:	2280      	movs	r2, #128	@ 0x80
10047a7e:	589b      	ldr	r3, [r3, r2]
10047a80:	69fa      	ldr	r2, [r7, #28]
10047a82:	1ad2      	subs	r2, r2, r3
                       context->last_machine_time) < context->calibrationData.calibration_machine_interval))
10047a84:	697b      	ldr	r3, [r7, #20]
10047a86:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
      && (TIME_ABSDIFF(current_machine_time,
10047a88:	429a      	cmp	r2, r3
10047a8a:	d214      	bcs.n	10047ab6 <_update_system_time+0x8e>
  {
    context->cumulative_time += blue_unit_conversion(TIMER_MAX_VALUE, period, MULT64_THR_PERIOD);
10047a8c:	4a14      	ldr	r2, [pc, #80]	@ (10047ae0 <_update_system_time+0xb8>)
10047a8e:	69b9      	ldr	r1, [r7, #24]
10047a90:	2301      	movs	r3, #1
10047a92:	425b      	negs	r3, r3
10047a94:	0018      	movs	r0, r3
10047a96:	f7f8 fb13 	bl	100400c0 <blue_unit_conversion>
10047a9a:	0001      	movs	r1, r0
10047a9c:	697b      	ldr	r3, [r7, #20]
10047a9e:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
10047aa0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
10047aa2:	6039      	str	r1, [r7, #0]
10047aa4:	2100      	movs	r1, #0
10047aa6:	6079      	str	r1, [r7, #4]
10047aa8:	6838      	ldr	r0, [r7, #0]
10047aaa:	6879      	ldr	r1, [r7, #4]
10047aac:	1812      	adds	r2, r2, r0
10047aae:	414b      	adcs	r3, r1
10047ab0:	6979      	ldr	r1, [r7, #20]
10047ab2:	670a      	str	r2, [r1, #112]	@ 0x70
10047ab4:	674b      	str	r3, [r1, #116]	@ 0x74
  }
  context->last_machine_time = current_machine_time;
10047ab6:	697b      	ldr	r3, [r7, #20]
10047ab8:	2180      	movs	r1, #128	@ 0x80
10047aba:	69fa      	ldr	r2, [r7, #28]
10047abc:	505a      	str	r2, [r3, r1]
  context->calibrationData.last_calibration_time = context->cumulative_time;
10047abe:	697b      	ldr	r3, [r7, #20]
10047ac0:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
10047ac2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
10047ac4:	6979      	ldr	r1, [r7, #20]
10047ac6:	628a      	str	r2, [r1, #40]	@ 0x28
10047ac8:	62cb      	str	r3, [r1, #44]	@ 0x2c
  context->calibrationData.last_period1 = context->calibrationData.period1;
10047aca:	697b      	ldr	r3, [r7, #20]
10047acc:	69da      	ldr	r2, [r3, #28]
10047ace:	697b      	ldr	r3, [r7, #20]
10047ad0:	621a      	str	r2, [r3, #32]
}
10047ad2:	46c0      	nop			@ (mov r8, r8)
10047ad4:	46bd      	mov	sp, r7
10047ad6:	b008      	add	sp, #32
10047ad8:	bdb0      	pop	{r4, r5, r7, pc}
10047ada:	46c0      	nop			@ (mov r8, r8)
10047adc:	60001800 	.word	0x60001800
10047ae0:	00000635 	.word	0x00000635

10047ae4 <_check_radio_activity>:
   3) The radio event is after the next calibration event. Then the timer will be programmed with the latest values.
   The check on the next calibration event is made even though the calibration is disabled (max cal. interval)
   in order to avoid counter wrapping with timeouts far in the future.
*/
static void _check_radio_activity(RADIO_TIMER_RadioHandleTypeDef *timerHandle, uint8_t *expired)
{
10047ae4:	b5b0      	push	{r4, r5, r7, lr}
10047ae6:	b08a      	sub	sp, #40	@ 0x28
10047ae8:	af00      	add	r7, sp, #0
10047aea:	6078      	str	r0, [r7, #4]
10047aec:	6039      	str	r1, [r7, #0]
  uint64_t nextCalibrationEvent, currentTime;
  *expired = 0;
10047aee:	683b      	ldr	r3, [r7, #0]
10047af0:	2200      	movs	r2, #0
10047af2:	701a      	strb	r2, [r3, #0]
  if (timerHandle->pending)
10047af4:	687b      	ldr	r3, [r7, #4]
10047af6:	7a9b      	ldrb	r3, [r3, #10]
10047af8:	2b00      	cmp	r3, #0
10047afa:	d100      	bne.n	10047afe <_check_radio_activity+0x1a>
10047afc:	e075      	b.n	10047bea <_check_radio_activity+0x106>
  {
    
    nextCalibrationEvent = RADIO_TIMER_Context.calibrationData.last_calibration_time + \
10047afe:	4b3d      	ldr	r3, [pc, #244]	@ (10047bf4 <_check_radio_activity+0x110>)
10047b00:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
10047b02:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
                           RADIO_TIMER_Context.calibrationSettings.periodicCalibrationInterval;
10047b04:	493b      	ldr	r1, [pc, #236]	@ (10047bf4 <_check_radio_activity+0x110>)
10047b06:	6849      	ldr	r1, [r1, #4]
10047b08:	000c      	movs	r4, r1
10047b0a:	2100      	movs	r1, #0
10047b0c:	000d      	movs	r5, r1
    nextCalibrationEvent = RADIO_TIMER_Context.calibrationData.last_calibration_time + \
10047b0e:	1912      	adds	r2, r2, r4
10047b10:	416b      	adcs	r3, r5
10047b12:	623a      	str	r2, [r7, #32]
10047b14:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
10047b16:	f3ef 8310 	mrs	r3, PRIMASK
10047b1a:	60fb      	str	r3, [r7, #12]
  return(result);
10047b1c:	68fb      	ldr	r3, [r7, #12]

    ATOMIC_SECTION_BEGIN();
10047b1e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
10047b20:	b672      	cpsid	i
}
10047b22:	46c0      	nop			@ (mov r8, r8)
    currentTime = HAL_RADIO_TIMER_GetCurrentSysTime();
10047b24:	f7ff fa7a 	bl	1004701c <HAL_RADIO_TIMER_GetCurrentSysTime>
10047b28:	0002      	movs	r2, r0
10047b2a:	000b      	movs	r3, r1
10047b2c:	613a      	str	r2, [r7, #16]
10047b2e:	617b      	str	r3, [r7, #20]
    if ((timerHandle->expiryTime < (nextCalibrationEvent + RADIO_ACTIVITY_MARGIN)) || \
10047b30:	687b      	ldr	r3, [r7, #4]
10047b32:	681a      	ldr	r2, [r3, #0]
10047b34:	685b      	ldr	r3, [r3, #4]
10047b36:	6a38      	ldr	r0, [r7, #32]
10047b38:	6a79      	ldr	r1, [r7, #36]	@ 0x24
10047b3a:	24c8      	movs	r4, #200	@ 0xc8
10047b3c:	02a4      	lsls	r4, r4, #10
10047b3e:	2500      	movs	r5, #0
10047b40:	1900      	adds	r0, r0, r4
10047b42:	4169      	adcs	r1, r5
10047b44:	4299      	cmp	r1, r3
10047b46:	d812      	bhi.n	10047b6e <_check_radio_activity+0x8a>
10047b48:	d101      	bne.n	10047b4e <_check_radio_activity+0x6a>
10047b4a:	4290      	cmp	r0, r2
10047b4c:	d80f      	bhi.n	10047b6e <_check_radio_activity+0x8a>
        (currentTime > (nextCalibrationEvent + CALIB_SAFE_THR)))
10047b4e:	6a3a      	ldr	r2, [r7, #32]
10047b50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10047b52:	20b9      	movs	r0, #185	@ 0xb9
10047b54:	0040      	lsls	r0, r0, #1
10047b56:	2100      	movs	r1, #0
10047b58:	1812      	adds	r2, r2, r0
10047b5a:	414b      	adcs	r3, r1
    if ((timerHandle->expiryTime < (nextCalibrationEvent + RADIO_ACTIVITY_MARGIN)) || \
10047b5c:	6979      	ldr	r1, [r7, #20]
10047b5e:	4299      	cmp	r1, r3
10047b60:	d805      	bhi.n	10047b6e <_check_radio_activity+0x8a>
10047b62:	6979      	ldr	r1, [r7, #20]
10047b64:	4299      	cmp	r1, r3
10047b66:	d136      	bne.n	10047bd6 <_check_radio_activity+0xf2>
10047b68:	6939      	ldr	r1, [r7, #16]
10047b6a:	4291      	cmp	r1, r2
10047b6c:	d933      	bls.n	10047bd6 <_check_radio_activity+0xf2>
    {
      if (timerHandle->expiryTime - TIMER1_INIT_DELAY > (currentTime + TIMER1_MARGIN))
10047b6e:	687b      	ldr	r3, [r7, #4]
10047b70:	681a      	ldr	r2, [r3, #0]
10047b72:	685b      	ldr	r3, [r3, #4]
10047b74:	204c      	movs	r0, #76	@ 0x4c
10047b76:	4240      	negs	r0, r0
10047b78:	17c1      	asrs	r1, r0, #31
10047b7a:	1880      	adds	r0, r0, r2
10047b7c:	4159      	adcs	r1, r3
10047b7e:	693a      	ldr	r2, [r7, #16]
10047b80:	697b      	ldr	r3, [r7, #20]
10047b82:	240a      	movs	r4, #10
10047b84:	2500      	movs	r5, #0
10047b86:	1912      	adds	r2, r2, r4
10047b88:	416b      	adcs	r3, r5
10047b8a:	4299      	cmp	r1, r3
10047b8c:	d802      	bhi.n	10047b94 <_check_radio_activity+0xb0>
10047b8e:	d11a      	bne.n	10047bc6 <_check_radio_activity+0xe2>
10047b90:	4290      	cmp	r0, r2
10047b92:	d918      	bls.n	10047bc6 <_check_radio_activity+0xe2>
      {
        *expired = TIMER_SetRadioTimerValue(timerHandle->expiryTime, timerHandle->event_type, timerHandle->cal_req);
10047b94:	687b      	ldr	r3, [r7, #4]
10047b96:	681a      	ldr	r2, [r3, #0]
10047b98:	685b      	ldr	r3, [r3, #4]
10047b9a:	0010      	movs	r0, r2
10047b9c:	687b      	ldr	r3, [r7, #4]
10047b9e:	7b19      	ldrb	r1, [r3, #12]
10047ba0:	687b      	ldr	r3, [r7, #4]
10047ba2:	7a1b      	ldrb	r3, [r3, #8]
10047ba4:	001a      	movs	r2, r3
10047ba6:	f000 f8d5 	bl	10047d54 <TIMER_SetRadioTimerValue>
10047baa:	0003      	movs	r3, r0
10047bac:	001a      	movs	r2, r3
10047bae:	683b      	ldr	r3, [r7, #0]
10047bb0:	701a      	strb	r2, [r3, #0]
        timerHandle->pending = FALSE; /* timer has been served. No more pending */
10047bb2:	687b      	ldr	r3, [r7, #4]
10047bb4:	2200      	movs	r2, #0
10047bb6:	729a      	strb	r2, [r3, #10]
        timerHandle->active = TRUE; /* timer has been programmed and it becomes ACTIVE */
10047bb8:	687b      	ldr	r3, [r7, #4]
10047bba:	2201      	movs	r2, #1
10047bbc:	725a      	strb	r2, [r3, #9]
        timerHandle->intTxRx_to_be_served = TRUE;
10047bbe:	687b      	ldr	r3, [r7, #4]
10047bc0:	2201      	movs	r2, #1
10047bc2:	72da      	strb	r2, [r3, #11]
      if (timerHandle->expiryTime - TIMER1_INIT_DELAY > (currentTime + TIMER1_MARGIN))
10047bc4:	e00b      	b.n	10047bde <_check_radio_activity+0xfa>
      }
      else
      {
        
        RADIO_TIMER_Context.radioTimer.pending = FALSE;
10047bc6:	4b0b      	ldr	r3, [pc, #44]	@ (10047bf4 <_check_radio_activity+0x110>)
10047bc8:	2262      	movs	r2, #98	@ 0x62
10047bca:	2100      	movs	r1, #0
10047bcc:	5499      	strb	r1, [r3, r2]
        *expired = 1;
10047bce:	683b      	ldr	r3, [r7, #0]
10047bd0:	2201      	movs	r2, #1
10047bd2:	701a      	strb	r2, [r3, #0]
      if (timerHandle->expiryTime - TIMER1_INIT_DELAY > (currentTime + TIMER1_MARGIN))
10047bd4:	e003      	b.n	10047bde <_check_radio_activity+0xfa>
      }
    }
    else
    {
#if defined (STM32WB06) || defined (STM32WB07)
      RADIO_TIMER_Context.waitCal = 1;
10047bd6:	4b07      	ldr	r3, [pc, #28]	@ (10047bf4 <_check_radio_activity+0x110>)
10047bd8:	229c      	movs	r2, #156	@ 0x9c
10047bda:	2101      	movs	r1, #1
10047bdc:	5499      	strb	r1, [r3, r2]
10047bde:	69fb      	ldr	r3, [r7, #28]
10047be0:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
10047be2:	68bb      	ldr	r3, [r7, #8]
10047be4:	f383 8810 	msr	PRIMASK, r3
}
10047be8:	46c0      	nop			@ (mov r8, r8)
#endif
    }
    ATOMIC_SECTION_END();
    
  }
}
10047bea:	46c0      	nop			@ (mov r8, r8)
10047bec:	46bd      	mov	sp, r7
10047bee:	b00a      	add	sp, #40	@ 0x28
10047bf0:	bdb0      	pop	{r4, r5, r7, pc}
10047bf2:	46c0      	nop			@ (mov r8, r8)
10047bf4:	20000908 	.word	0x20000908

10047bf8 <TIMER_SetRadioHostWakeupTime>:
  *          if other code commands the system to go to deep sleep.
  * @warning The API must be called with interrupts disabled to avoid programming the timer with a value in the past.
  * @return  Current time in MTU.
  */
static uint32_t TIMER_SetRadioHostWakeupTime(uint32_t delay, bool *share)
{
10047bf8:	b580      	push	{r7, lr}
10047bfa:	b084      	sub	sp, #16
10047bfc:	af00      	add	r7, sp, #0
10047bfe:	6078      	str	r0, [r7, #4]
10047c00:	6039      	str	r1, [r7, #0]
  uint32_t current_time;

  delay = blue_unit_conversion(delay, RADIO_TIMER_Context.calibrationData.freq1, MULT64_THR_FREQ) ;
10047c02:	4b2f      	ldr	r3, [pc, #188]	@ (10047cc0 <TIMER_SetRadioHostWakeupTime+0xc8>)
10047c04:	699b      	ldr	r3, [r3, #24]
10047c06:	0019      	movs	r1, r3
10047c08:	4a2e      	ldr	r2, [pc, #184]	@ (10047cc4 <TIMER_SetRadioHostWakeupTime+0xcc>)
10047c0a:	687b      	ldr	r3, [r7, #4]
10047c0c:	0018      	movs	r0, r3
10047c0e:	f7f8 fa57 	bl	100400c0 <blue_unit_conversion>
10047c12:	0003      	movs	r3, r0
10047c14:	607b      	str	r3, [r7, #4]
  /* If the delay is too small round to minimum 2 tick */
  delay = MAX(32, delay);
10047c16:	687b      	ldr	r3, [r7, #4]
10047c18:	2b20      	cmp	r3, #32
10047c1a:	d200      	bcs.n	10047c1e <TIMER_SetRadioHostWakeupTime+0x26>
10047c1c:	2320      	movs	r3, #32
10047c1e:	607b      	str	r3, [r7, #4]
  current_time = LL_RADIO_TIMER_GetAbsoluteTime(WAKEUP);
10047c20:	4b29      	ldr	r3, [pc, #164]	@ (10047cc8 <TIMER_SetRadioHostWakeupTime+0xd0>)
10047c22:	0018      	movs	r0, r3
10047c24:	f7fe fd4b 	bl	100466be <LL_RADIO_TIMER_GetAbsoluteTime>
10047c28:	0003      	movs	r3, r0
10047c2a:	60fb      	str	r3, [r7, #12]
  /* 4 least significant bits are not taken into account. Then let's round the value */
  LL_RADIO_TIMER_SetCPUWakeupTime(WAKEUP, ((current_time + (delay + 8)) & TIMER_MAX_VALUE));
10047c2c:	687a      	ldr	r2, [r7, #4]
10047c2e:	68fb      	ldr	r3, [r7, #12]
10047c30:	18d3      	adds	r3, r2, r3
10047c32:	3308      	adds	r3, #8
10047c34:	4a24      	ldr	r2, [pc, #144]	@ (10047cc8 <TIMER_SetRadioHostWakeupTime+0xd0>)
10047c36:	0019      	movs	r1, r3
10047c38:	0010      	movs	r0, r2
10047c3a:	f7fe fd34 	bl	100466a6 <LL_RADIO_TIMER_SetCPUWakeupTime>
  LL_RADIO_TIMER_EnableWakeupTimerLowPowerMode(WAKEUP);
10047c3e:	4b22      	ldr	r3, [pc, #136]	@ (10047cc8 <TIMER_SetRadioHostWakeupTime+0xd0>)
10047c40:	0018      	movs	r0, r3
10047c42:	f7fe fd46 	bl	100466d2 <LL_RADIO_TIMER_EnableWakeupTimerLowPowerMode>
  LL_RADIO_TIMER_EnableCPUWakeupTimer(WAKEUP);
10047c46:	4b20      	ldr	r3, [pc, #128]	@ (10047cc8 <TIMER_SetRadioHostWakeupTime+0xd0>)
10047c48:	0018      	movs	r0, r3
10047c4a:	f7fe fce7 	bl	1004661c <LL_RADIO_TIMER_EnableCPUWakeupTimer>
  if ((LL_RADIO_TIMER_IsEnabledTimer1(BLUE) || LL_RADIO_TIMER_IsEnabledTimer2(BLUE) || (*share != TRUE)))
10047c4e:	23c0      	movs	r3, #192	@ 0xc0
10047c50:	05db      	lsls	r3, r3, #23
10047c52:	0018      	movs	r0, r3
10047c54:	f7fe fc67 	bl	10046526 <LL_RADIO_TIMER_IsEnabledTimer1>
10047c58:	1e03      	subs	r3, r0, #0
10047c5a:	d10d      	bne.n	10047c78 <TIMER_SetRadioHostWakeupTime+0x80>
10047c5c:	23c0      	movs	r3, #192	@ 0xc0
10047c5e:	05db      	lsls	r3, r3, #23
10047c60:	0018      	movs	r0, r3
10047c62:	f7fe fc80 	bl	10046566 <LL_RADIO_TIMER_IsEnabledTimer2>
10047c66:	1e03      	subs	r3, r0, #0
10047c68:	d106      	bne.n	10047c78 <TIMER_SetRadioHostWakeupTime+0x80>
10047c6a:	683b      	ldr	r3, [r7, #0]
10047c6c:	781b      	ldrb	r3, [r3, #0]
10047c6e:	2201      	movs	r2, #1
10047c70:	4053      	eors	r3, r2
10047c72:	b2db      	uxtb	r3, r3
10047c74:	2b00      	cmp	r3, #0
10047c76:	d004      	beq.n	10047c82 <TIMER_SetRadioHostWakeupTime+0x8a>
  {
    *share = FALSE;
10047c78:	683b      	ldr	r3, [r7, #0]
10047c7a:	2200      	movs	r2, #0
10047c7c:	701a      	strb	r2, [r3, #0]
    return current_time;
10047c7e:	68fb      	ldr	r3, [r7, #12]
10047c80:	e01a      	b.n	10047cb8 <TIMER_SetRadioHostWakeupTime+0xc0>
  }
  _set_controller_as_host();
10047c82:	f000 f823 	bl	10047ccc <_set_controller_as_host>
  /* 4 least significant bits are not taken into account. Then let's round the value */
  LL_RADIO_TIMER_SetBLEWakeupTime(WAKEUP, ((current_time + delay + 8) & 0xFFFFFFF0));
10047c86:	68fa      	ldr	r2, [r7, #12]
10047c88:	687b      	ldr	r3, [r7, #4]
10047c8a:	18d3      	adds	r3, r2, r3
10047c8c:	3308      	adds	r3, #8
10047c8e:	220f      	movs	r2, #15
10047c90:	4393      	bics	r3, r2
10047c92:	4a0d      	ldr	r2, [pc, #52]	@ (10047cc8 <TIMER_SetRadioHostWakeupTime+0xd0>)
10047c94:	0019      	movs	r1, r3
10047c96:	0010      	movs	r0, r2
10047c98:	f7fe fcef 	bl	1004667a <LL_RADIO_TIMER_SetBLEWakeupTime>
  LL_RADIO_TIMER_SetSleepRequestMode(WAKEUP, 0);
10047c9c:	4b0a      	ldr	r3, [pc, #40]	@ (10047cc8 <TIMER_SetRadioHostWakeupTime+0xd0>)
10047c9e:	2100      	movs	r1, #0
10047ca0:	0018      	movs	r0, r3
10047ca2:	f7fe fd25 	bl	100466f0 <LL_RADIO_TIMER_SetSleepRequestMode>
  LL_RADIO_TIMER_EnableBLEWakeupTimer(WAKEUP);
10047ca6:	4b08      	ldr	r3, [pc, #32]	@ (10047cc8 <TIMER_SetRadioHostWakeupTime+0xd0>)
10047ca8:	0018      	movs	r0, r3
10047caa:	f7fe fc83 	bl	100465b4 <LL_RADIO_TIMER_EnableBLEWakeupTimer>
  LL_RADIO_TIMER_EnableWakeupTimerLowPowerMode(WAKEUP);
10047cae:	4b06      	ldr	r3, [pc, #24]	@ (10047cc8 <TIMER_SetRadioHostWakeupTime+0xd0>)
10047cb0:	0018      	movs	r0, r3
10047cb2:	f7fe fd0e 	bl	100466d2 <LL_RADIO_TIMER_EnableWakeupTimerLowPowerMode>
  return current_time;
10047cb6:	68fb      	ldr	r3, [r7, #12]
}
10047cb8:	0018      	movs	r0, r3
10047cba:	46bd      	mov	sp, r7
10047cbc:	b004      	add	sp, #16
10047cbe:	bd80      	pop	{r7, pc}
10047cc0:	20000908 	.word	0x20000908
10047cc4:	00000326 	.word	0x00000326
10047cc8:	60001800 	.word	0x60001800

10047ccc <_set_controller_as_host>:

static void _set_controller_as_host(void)
{
10047ccc:	b580      	push	{r7, lr}
10047cce:	af00      	add	r7, sp, #0
  BLUEGLOB->BYTE4 &= ~(1 << 7);
10047cd0:	4b08      	ldr	r3, [pc, #32]	@ (10047cf4 <_set_controller_as_host+0x28>)
10047cd2:	791b      	ldrb	r3, [r3, #4]
10047cd4:	b2db      	uxtb	r3, r3
10047cd6:	4a07      	ldr	r2, [pc, #28]	@ (10047cf4 <_set_controller_as_host+0x28>)
10047cd8:	217f      	movs	r1, #127	@ 0x7f
10047cda:	400b      	ands	r3, r1
10047cdc:	b2db      	uxtb	r3, r3
10047cde:	7113      	strb	r3, [r2, #4]
  BLUEGLOB->BYTE22 = 0x0;
10047ce0:	4b04      	ldr	r3, [pc, #16]	@ (10047cf4 <_set_controller_as_host+0x28>)
10047ce2:	2200      	movs	r2, #0
10047ce4:	759a      	strb	r2, [r3, #22]
  BLUEGLOB->BYTE23 = 0x0;
10047ce6:	4b03      	ldr	r3, [pc, #12]	@ (10047cf4 <_set_controller_as_host+0x28>)
10047ce8:	2200      	movs	r2, #0
10047cea:	75da      	strb	r2, [r3, #23]
}
10047cec:	46c0      	nop			@ (mov r8, r8)
10047cee:	46bd      	mov	sp, r7
10047cf0:	bd80      	pop	{r7, pc}
10047cf2:	46c0      	nop			@ (mov r8, r8)
10047cf4:	200000c0 	.word	0x200000c0

10047cf8 <_check_host_activity>:

static void _check_host_activity(void)
{
10047cf8:	b580      	push	{r7, lr}
10047cfa:	b082      	sub	sp, #8
10047cfc:	af00      	add	r7, sp, #0
  uint8_t expired;
  RADIO_TIMER_Context.rootNode = _update_user_timeout(RADIO_TIMER_Context.rootNode, &expired);
10047cfe:	4b14      	ldr	r3, [pc, #80]	@ (10047d50 <_check_host_activity+0x58>)
10047d00:	228c      	movs	r2, #140	@ 0x8c
10047d02:	589b      	ldr	r3, [r3, r2]
10047d04:	1dfa      	adds	r2, r7, #7
10047d06:	0011      	movs	r1, r2
10047d08:	0018      	movs	r0, r3
10047d0a:	f7ff fccf 	bl	100476ac <_update_user_timeout>
10047d0e:	0002      	movs	r2, r0
10047d10:	4b0f      	ldr	r3, [pc, #60]	@ (10047d50 <_check_host_activity+0x58>)
10047d12:	218c      	movs	r1, #140	@ 0x8c
10047d14:	505a      	str	r2, [r3, r1]
  if (expired == 1)
10047d16:	1dfb      	adds	r3, r7, #7
10047d18:	781b      	ldrb	r3, [r3, #0]
10047d1a:	2b01      	cmp	r3, #1
10047d1c:	d114      	bne.n	10047d48 <_check_host_activity+0x50>
  {
    /* A new root timer is already expired, mimic timer expire */
    INCREMENT_EXPIRE_COUNT_ISR;
10047d1e:	4b0c      	ldr	r3, [pc, #48]	@ (10047d50 <_check_host_activity+0x58>)
10047d20:	2291      	movs	r2, #145	@ 0x91
10047d22:	5c9b      	ldrb	r3, [r3, r2]
10047d24:	3301      	adds	r3, #1
10047d26:	4a0a      	ldr	r2, [pc, #40]	@ (10047d50 <_check_host_activity+0x58>)
10047d28:	2192      	movs	r1, #146	@ 0x92
10047d2a:	5c52      	ldrb	r2, [r2, r1]
10047d2c:	4293      	cmp	r3, r2
10047d2e:	d103      	bne.n	10047d38 <_check_host_activity+0x40>
10047d30:	4b07      	ldr	r3, [pc, #28]	@ (10047d50 <_check_host_activity+0x58>)
10047d32:	2291      	movs	r2, #145	@ 0x91
10047d34:	5c9b      	ldrb	r3, [r3, r2]
10047d36:	e004      	b.n	10047d42 <_check_host_activity+0x4a>
10047d38:	4b05      	ldr	r3, [pc, #20]	@ (10047d50 <_check_host_activity+0x58>)
10047d3a:	2291      	movs	r2, #145	@ 0x91
10047d3c:	5c9b      	ldrb	r3, [r3, r2]
10047d3e:	3301      	adds	r3, #1
10047d40:	b2db      	uxtb	r3, r3
10047d42:	4a03      	ldr	r2, [pc, #12]	@ (10047d50 <_check_host_activity+0x58>)
10047d44:	2191      	movs	r1, #145	@ 0x91
10047d46:	5453      	strb	r3, [r2, r1]
  }
}
10047d48:	46c0      	nop			@ (mov r8, r8)
10047d4a:	46bd      	mov	sp, r7
10047d4c:	b002      	add	sp, #8
10047d4e:	bd80      	pop	{r7, pc}
10047d50:	20000908 	.word	0x20000908

10047d54 <TIMER_SetRadioTimerValue>:
  * @warning The API must be called with interrupts disabled to avoid programming the timer with a value in the past
  * @retval  0 if a correct timeout has been programmed in the timeout register
  * @retval  1 if a correct timeout cannot be programmed
  */
static uint8_t TIMER_SetRadioTimerValue(uint32_t timeout, bool event_type, bool cal_req)
{
10047d54:	b580      	push	{r7, lr}
10047d56:	b08a      	sub	sp, #40	@ 0x28
10047d58:	af00      	add	r7, sp, #0
10047d5a:	6078      	str	r0, [r7, #4]
10047d5c:	0008      	movs	r0, r1
10047d5e:	0011      	movs	r1, r2
10047d60:	1cfb      	adds	r3, r7, #3
10047d62:	1c02      	adds	r2, r0, #0
10047d64:	701a      	strb	r2, [r3, #0]
10047d66:	1cbb      	adds	r3, r7, #2
10047d68:	1c0a      	adds	r2, r1, #0
10047d6a:	701a      	strb	r2, [r3, #0]
  uint32_t current_time, delay, radio_init_delay, device_delay, rel_timeout, rel_timeout_mt;
  uint8_t ret_val;

  /*choose the 2nd init duration. Check the event_type and cal. request*/
  if (event_type == TX)
10047d6c:	1cfb      	adds	r3, r7, #3
10047d6e:	781b      	ldrb	r3, [r3, #0]
10047d70:	2b00      	cmp	r3, #0
10047d72:	d015      	beq.n	10047da0 <TIMER_SetRadioTimerValue+0x4c>
  {
    if (cal_req)
10047d74:	1cbb      	adds	r3, r7, #2
10047d76:	781b      	ldrb	r3, [r3, #0]
10047d78:	2b00      	cmp	r3, #0
10047d7a:	d008      	beq.n	10047d8e <TIMER_SetRadioTimerValue+0x3a>
    {
      radio_init_delay = RADIO_TIMER_Context.TxRxDelay.tx_cal_delay;
10047d7c:	4b6e      	ldr	r3, [pc, #440]	@ (10047f38 <TIMER_SetRadioTimerValue+0x1e4>)
10047d7e:	2238      	movs	r2, #56	@ 0x38
10047d80:	5c9b      	ldrb	r3, [r3, r2]
10047d82:	623b      	str	r3, [r7, #32]
      device_delay = RADIO_TIMER_Context.TxRxDelay.tx_cal_delay_st;
10047d84:	4b6c      	ldr	r3, [pc, #432]	@ (10047f38 <TIMER_SetRadioTimerValue+0x1e4>)
10047d86:	223c      	movs	r2, #60	@ 0x3c
10047d88:	5c9b      	ldrb	r3, [r3, r2]
10047d8a:	61fb      	str	r3, [r7, #28]
10047d8c:	e01d      	b.n	10047dca <TIMER_SetRadioTimerValue+0x76>
    }
    else
    {
      radio_init_delay = RADIO_TIMER_Context.TxRxDelay.tx_no_cal_delay;
10047d8e:	4b6a      	ldr	r3, [pc, #424]	@ (10047f38 <TIMER_SetRadioTimerValue+0x1e4>)
10047d90:	2239      	movs	r2, #57	@ 0x39
10047d92:	5c9b      	ldrb	r3, [r3, r2]
10047d94:	623b      	str	r3, [r7, #32]
      device_delay = RADIO_TIMER_Context.TxRxDelay.tx_cal_delay_st;
10047d96:	4b68      	ldr	r3, [pc, #416]	@ (10047f38 <TIMER_SetRadioTimerValue+0x1e4>)
10047d98:	223c      	movs	r2, #60	@ 0x3c
10047d9a:	5c9b      	ldrb	r3, [r3, r2]
10047d9c:	61fb      	str	r3, [r7, #28]
10047d9e:	e014      	b.n	10047dca <TIMER_SetRadioTimerValue+0x76>
    }
  }
  else
  {
    if (cal_req)
10047da0:	1cbb      	adds	r3, r7, #2
10047da2:	781b      	ldrb	r3, [r3, #0]
10047da4:	2b00      	cmp	r3, #0
10047da6:	d008      	beq.n	10047dba <TIMER_SetRadioTimerValue+0x66>
    {
      radio_init_delay = RADIO_TIMER_Context.TxRxDelay.rx_cal_delay;
10047da8:	4b63      	ldr	r3, [pc, #396]	@ (10047f38 <TIMER_SetRadioTimerValue+0x1e4>)
10047daa:	223a      	movs	r2, #58	@ 0x3a
10047dac:	5c9b      	ldrb	r3, [r3, r2]
10047dae:	623b      	str	r3, [r7, #32]
      device_delay = RADIO_TIMER_Context.TxRxDelay.tx_cal_delay_st;
10047db0:	4b61      	ldr	r3, [pc, #388]	@ (10047f38 <TIMER_SetRadioTimerValue+0x1e4>)
10047db2:	223c      	movs	r2, #60	@ 0x3c
10047db4:	5c9b      	ldrb	r3, [r3, r2]
10047db6:	61fb      	str	r3, [r7, #28]
10047db8:	e007      	b.n	10047dca <TIMER_SetRadioTimerValue+0x76>
    }
    else
    {
      radio_init_delay = RADIO_TIMER_Context.TxRxDelay.rx_no_cal_delay;
10047dba:	4b5f      	ldr	r3, [pc, #380]	@ (10047f38 <TIMER_SetRadioTimerValue+0x1e4>)
10047dbc:	223b      	movs	r2, #59	@ 0x3b
10047dbe:	5c9b      	ldrb	r3, [r3, r2]
10047dc0:	623b      	str	r3, [r7, #32]
      device_delay = RADIO_TIMER_Context.TxRxDelay.tx_cal_delay_st;
10047dc2:	4b5d      	ldr	r3, [pc, #372]	@ (10047f38 <TIMER_SetRadioTimerValue+0x1e4>)
10047dc4:	223c      	movs	r2, #60	@ 0x3c
10047dc6:	5c9b      	ldrb	r3, [r3, r2]
10047dc8:	61fb      	str	r3, [r7, #28]
    }
  }

  /* At this point, it is care of the upper layers to guarantee that the timeout represents an absolute time in the future */
  rel_timeout = timeout - (uint32_t)_get_system_time_and_machine(&RADIO_TIMER_Context, &current_time);
10047dca:	230c      	movs	r3, #12
10047dcc:	18fa      	adds	r2, r7, r3
10047dce:	4b5a      	ldr	r3, [pc, #360]	@ (10047f38 <TIMER_SetRadioTimerValue+0x1e4>)
10047dd0:	0011      	movs	r1, r2
10047dd2:	0018      	movs	r0, r3
10047dd4:	f7ff fc02 	bl	100475dc <_get_system_time_and_machine>
10047dd8:	0002      	movs	r2, r0
10047dda:	000b      	movs	r3, r1
10047ddc:	687b      	ldr	r3, [r7, #4]
10047dde:	1a9b      	subs	r3, r3, r2
10047de0:	617b      	str	r3, [r7, #20]

  rel_timeout_mt =  blue_unit_conversion(rel_timeout, RADIO_TIMER_Context.calibrationData.freq1, MULT64_THR_FREQ);
10047de2:	4b55      	ldr	r3, [pc, #340]	@ (10047f38 <TIMER_SetRadioTimerValue+0x1e4>)
10047de4:	699b      	ldr	r3, [r3, #24]
10047de6:	0019      	movs	r1, r3
10047de8:	4a54      	ldr	r2, [pc, #336]	@ (10047f3c <TIMER_SetRadioTimerValue+0x1e8>)
10047dea:	697b      	ldr	r3, [r7, #20]
10047dec:	0018      	movs	r0, r3
10047dee:	f7f8 f967 	bl	100400c0 <blue_unit_conversion>
10047df2:	0003      	movs	r3, r0
10047df4:	613b      	str	r3, [r7, #16]

  /*Check if the timeout is beyond the wakeup time offset. Then program either the WakeUp timer or the Timer1*/
  if (rel_timeout > (device_delay + RADIO_TIMER_Context.hs_startup_time + MARGIN_EXT))
10047df6:	4b50      	ldr	r3, [pc, #320]	@ (10047f38 <TIMER_SetRadioTimerValue+0x1e4>)
10047df8:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
10047dfa:	69fb      	ldr	r3, [r7, #28]
10047dfc:	18d3      	adds	r3, r2, r3
10047dfe:	33c8      	adds	r3, #200	@ 0xc8
10047e00:	697a      	ldr	r2, [r7, #20]
10047e02:	429a      	cmp	r2, r3
10047e04:	d92f      	bls.n	10047e66 <TIMER_SetRadioTimerValue+0x112>
  {
    /*The timeout is after the wakeup_time_offset, So it is ok to program the wakeup timer*/
    delay = rel_timeout_mt - BLUEGLOB->WAKEUPINITDELAY - radio_init_delay;
10047e06:	4b4e      	ldr	r3, [pc, #312]	@ (10047f40 <TIMER_SetRadioTimerValue+0x1ec>)
10047e08:	795b      	ldrb	r3, [r3, #5]
10047e0a:	b2db      	uxtb	r3, r3
10047e0c:	001a      	movs	r2, r3
10047e0e:	693b      	ldr	r3, [r7, #16]
10047e10:	1a9a      	subs	r2, r3, r2
10047e12:	6a3b      	ldr	r3, [r7, #32]
10047e14:	1ad3      	subs	r3, r2, r3
10047e16:	627b      	str	r3, [r7, #36]	@ 0x24
    LL_RADIO_TIMER_SetBLEWakeupTime(WAKEUP, ((current_time + delay) & TIMER_MAX_VALUE));
10047e18:	68fa      	ldr	r2, [r7, #12]
10047e1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10047e1c:	18d3      	adds	r3, r2, r3
10047e1e:	4a49      	ldr	r2, [pc, #292]	@ (10047f44 <TIMER_SetRadioTimerValue+0x1f0>)
10047e20:	0019      	movs	r1, r3
10047e22:	0010      	movs	r0, r2
10047e24:	f7fe fc29 	bl	1004667a <LL_RADIO_TIMER_SetBLEWakeupTime>
    LL_RADIO_TIMER_SetSleepRequestMode(WAKEUP, 0);
10047e28:	4b46      	ldr	r3, [pc, #280]	@ (10047f44 <TIMER_SetRadioTimerValue+0x1f0>)
10047e2a:	2100      	movs	r1, #0
10047e2c:	0018      	movs	r0, r3
10047e2e:	f7fe fc5f 	bl	100466f0 <LL_RADIO_TIMER_SetSleepRequestMode>
    LL_RADIO_TIMER_DisableTimer1(BLUE);
10047e32:	23c0      	movs	r3, #192	@ 0xc0
10047e34:	05db      	lsls	r3, r3, #23
10047e36:	0018      	movs	r0, r3
10047e38:	f7fe fb66 	bl	10046508 <LL_RADIO_TIMER_DisableTimer1>
    LL_RADIO_TIMER_DisableTimer2(BLUE);
10047e3c:	23c0      	movs	r3, #192	@ 0xc0
10047e3e:	05db      	lsls	r3, r3, #23
10047e40:	0018      	movs	r0, r3
10047e42:	f7fe fb81 	bl	10046548 <LL_RADIO_TIMER_DisableTimer2>
    LL_RADIO_TIMER_EnableBLEWakeupTimer(WAKEUP);
10047e46:	4b3f      	ldr	r3, [pc, #252]	@ (10047f44 <TIMER_SetRadioTimerValue+0x1f0>)
10047e48:	0018      	movs	r0, r3
10047e4a:	f7fe fbb3 	bl	100465b4 <LL_RADIO_TIMER_EnableBLEWakeupTimer>
    LL_RADIO_TIMER_EnableWakeupTimerLowPowerMode(WAKEUP);
10047e4e:	4b3d      	ldr	r3, [pc, #244]	@ (10047f44 <TIMER_SetRadioTimerValue+0x1f0>)
10047e50:	0018      	movs	r0, r3
10047e52:	f7fe fc3e 	bl	100466d2 <LL_RADIO_TIMER_EnableWakeupTimerLowPowerMode>
    radio_init_delay += BLUEGLOB->WAKEUPINITDELAY;
10047e56:	4b3a      	ldr	r3, [pc, #232]	@ (10047f40 <TIMER_SetRadioTimerValue+0x1ec>)
10047e58:	795b      	ldrb	r3, [r3, #5]
10047e5a:	b2db      	uxtb	r3, r3
10047e5c:	001a      	movs	r2, r3
10047e5e:	6a3b      	ldr	r3, [r7, #32]
10047e60:	189b      	adds	r3, r3, r2
10047e62:	623b      	str	r3, [r7, #32]
10047e64:	e021      	b.n	10047eaa <TIMER_SetRadioTimerValue+0x156>
  }
  else
  {
    delay = rel_timeout_mt - RADIO_TIMER_Context.TxRxDelay.tim12_delay_mt - radio_init_delay;
10047e66:	4b34      	ldr	r3, [pc, #208]	@ (10047f38 <TIMER_SetRadioTimerValue+0x1e4>)
10047e68:	223d      	movs	r2, #61	@ 0x3d
10047e6a:	5c9b      	ldrb	r3, [r3, r2]
10047e6c:	001a      	movs	r2, r3
10047e6e:	693b      	ldr	r3, [r7, #16]
10047e70:	1a9a      	subs	r2, r3, r2
10047e72:	6a3b      	ldr	r3, [r7, #32]
10047e74:	1ad3      	subs	r3, r2, r3
10047e76:	627b      	str	r3, [r7, #36]	@ 0x24
    LL_RADIO_TIMER_SetTimeout(BLUE, ((current_time + delay) & TIMER_MAX_VALUE));
10047e78:	68fa      	ldr	r2, [r7, #12]
10047e7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10047e7c:	18d2      	adds	r2, r2, r3
10047e7e:	23c0      	movs	r3, #192	@ 0xc0
10047e80:	05db      	lsls	r3, r3, #23
10047e82:	0011      	movs	r1, r2
10047e84:	0018      	movs	r0, r3
10047e86:	f7fe fb7f 	bl	10046588 <LL_RADIO_TIMER_SetTimeout>
    LL_RADIO_TIMER_DisableBLEWakeupTimer(WAKEUP);
10047e8a:	4b2e      	ldr	r3, [pc, #184]	@ (10047f44 <TIMER_SetRadioTimerValue+0x1f0>)
10047e8c:	0018      	movs	r0, r3
10047e8e:	f7fe fba1 	bl	100465d4 <LL_RADIO_TIMER_DisableBLEWakeupTimer>
    LL_RADIO_TIMER_EnableTimer1(BLUE);
10047e92:	23c0      	movs	r3, #192	@ 0xc0
10047e94:	05db      	lsls	r3, r3, #23
10047e96:	0018      	movs	r0, r3
10047e98:	f7fe fb26 	bl	100464e8 <LL_RADIO_TIMER_EnableTimer1>
    radio_init_delay += RADIO_TIMER_Context.TxRxDelay.tim12_delay_mt;
10047e9c:	4b26      	ldr	r3, [pc, #152]	@ (10047f38 <TIMER_SetRadioTimerValue+0x1e4>)
10047e9e:	223d      	movs	r2, #61	@ 0x3d
10047ea0:	5c9b      	ldrb	r3, [r3, r2]
10047ea2:	001a      	movs	r2, r3
10047ea4:	6a3b      	ldr	r3, [r7, #32]
10047ea6:	189b      	adds	r3, r3, r2
10047ea8:	623b      	str	r3, [r7, #32]
  }

  RADIO_TIMER_Context.last_anchor_mt = (current_time + rel_timeout_mt) & TIMER_MAX_VALUE;
10047eaa:	68fa      	ldr	r2, [r7, #12]
10047eac:	693b      	ldr	r3, [r7, #16]
10047eae:	18d2      	adds	r2, r2, r3
10047eb0:	4b21      	ldr	r3, [pc, #132]	@ (10047f38 <TIMER_SetRadioTimerValue+0x1e4>)
10047eb2:	2188      	movs	r1, #136	@ 0x88
10047eb4:	505a      	str	r2, [r3, r1]

#if defined (STM32WB06) || defined (STM32WB07)
  BLUEGLOB->BYTE4 |= 1 << 7;
10047eb6:	4b22      	ldr	r3, [pc, #136]	@ (10047f40 <TIMER_SetRadioTimerValue+0x1ec>)
10047eb8:	791b      	ldrb	r3, [r3, #4]
10047eba:	b2db      	uxtb	r3, r3
10047ebc:	4920      	ldr	r1, [pc, #128]	@ (10047f40 <TIMER_SetRadioTimerValue+0x1ec>)
10047ebe:	2280      	movs	r2, #128	@ 0x80
10047ec0:	4252      	negs	r2, r2
10047ec2:	4313      	orrs	r3, r2
10047ec4:	b2db      	uxtb	r3, r3
10047ec6:	710b      	strb	r3, [r1, #4]
  BLUEGLOB->BYTE22 = 0xF0;
10047ec8:	4b1d      	ldr	r3, [pc, #116]	@ (10047f40 <TIMER_SetRadioTimerValue+0x1ec>)
10047eca:	22f0      	movs	r2, #240	@ 0xf0
10047ecc:	759a      	strb	r2, [r3, #22]
  BLUEGLOB->BYTE23 = 0xFF;
10047ece:	4b1c      	ldr	r3, [pc, #112]	@ (10047f40 <TIMER_SetRadioTimerValue+0x1ec>)
10047ed0:	22ff      	movs	r2, #255	@ 0xff
10047ed2:	75da      	strb	r2, [r3, #23]
#endif

  /* Basic low level check with an extra margin of machine units */
  if ((delay + radio_init_delay) < (radio_init_delay + 5))
10047ed4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
10047ed6:	6a3b      	ldr	r3, [r7, #32]
10047ed8:	18d2      	adds	r2, r2, r3
10047eda:	6a3b      	ldr	r3, [r7, #32]
10047edc:	3305      	adds	r3, #5
10047ede:	429a      	cmp	r2, r3
10047ee0:	d212      	bcs.n	10047f08 <TIMER_SetRadioTimerValue+0x1b4>
  {
    LL_RADIO_TIMER_DisableTimer1(BLUE);
10047ee2:	23c0      	movs	r3, #192	@ 0xc0
10047ee4:	05db      	lsls	r3, r3, #23
10047ee6:	0018      	movs	r0, r3
10047ee8:	f7fe fb0e 	bl	10046508 <LL_RADIO_TIMER_DisableTimer1>
    LL_RADIO_TIMER_DisableTimer2(BLUE);
10047eec:	23c0      	movs	r3, #192	@ 0xc0
10047eee:	05db      	lsls	r3, r3, #23
10047ef0:	0018      	movs	r0, r3
10047ef2:	f7fe fb29 	bl	10046548 <LL_RADIO_TIMER_DisableTimer2>
    LL_RADIO_TIMER_DisableBLEWakeupTimer(WAKEUP);
10047ef6:	4b13      	ldr	r3, [pc, #76]	@ (10047f44 <TIMER_SetRadioTimerValue+0x1f0>)
10047ef8:	0018      	movs	r0, r3
10047efa:	f7fe fb6b 	bl	100465d4 <LL_RADIO_TIMER_DisableBLEWakeupTimer>
    ret_val =  1;
10047efe:	231b      	movs	r3, #27
10047f00:	18fb      	adds	r3, r7, r3
10047f02:	2201      	movs	r2, #1
10047f04:	701a      	strb	r2, [r3, #0]
10047f06:	e010      	b.n	10047f2a <TIMER_SetRadioTimerValue+0x1d6>
  }
  else
  {
    RADIO_TIMER_Context.last_setup_time = blue_unit_conversion(radio_init_delay, RADIO_TIMER_Context.calibrationData.period1, MULT64_THR_PERIOD);
10047f08:	4b0b      	ldr	r3, [pc, #44]	@ (10047f38 <TIMER_SetRadioTimerValue+0x1e4>)
10047f0a:	69db      	ldr	r3, [r3, #28]
10047f0c:	0019      	movs	r1, r3
10047f0e:	4a0e      	ldr	r2, [pc, #56]	@ (10047f48 <TIMER_SetRadioTimerValue+0x1f4>)
10047f10:	6a3b      	ldr	r3, [r7, #32]
10047f12:	0018      	movs	r0, r3
10047f14:	f7f8 f8d4 	bl	100400c0 <blue_unit_conversion>
10047f18:	0003      	movs	r3, r0
10047f1a:	b2d9      	uxtb	r1, r3
10047f1c:	4b06      	ldr	r3, [pc, #24]	@ (10047f38 <TIMER_SetRadioTimerValue+0x1e4>)
10047f1e:	2284      	movs	r2, #132	@ 0x84
10047f20:	5499      	strb	r1, [r3, r2]
    ret_val = 0;
10047f22:	231b      	movs	r3, #27
10047f24:	18fb      	adds	r3, r7, r3
10047f26:	2200      	movs	r2, #0
10047f28:	701a      	strb	r2, [r3, #0]
  }

  return ret_val;
10047f2a:	231b      	movs	r3, #27
10047f2c:	18fb      	adds	r3, r7, r3
10047f2e:	781b      	ldrb	r3, [r3, #0]
}
10047f30:	0018      	movs	r0, r3
10047f32:	46bd      	mov	sp, r7
10047f34:	b00a      	add	sp, #40	@ 0x28
10047f36:	bd80      	pop	{r7, pc}
10047f38:	20000908 	.word	0x20000908
10047f3c:	00000326 	.word	0x00000326
10047f40:	200000c0 	.word	0x200000c0
10047f44:	60001800 	.word	0x60001800
10047f48:	00000635 	.word	0x00000635

10047f4c <TIMER_GetPastSysTime>:
  * @param   current_system_time: Current System time
  * @warning User should guarantee that call to this function are performed in a non-interruptible context.
  * @return  STU value
  */
static uint64_t TIMER_GetPastSysTime(uint32_t time, uint64_t *current_system_time)
{
10047f4c:	b5b0      	push	{r4, r5, r7, lr}
10047f4e:	b084      	sub	sp, #16
10047f50:	af00      	add	r7, sp, #0
10047f52:	6078      	str	r0, [r7, #4]
10047f54:	6039      	str	r1, [r7, #0]
  uint32_t delta_systime, current_machine_time;

  *current_system_time = _get_system_time_and_machine(&RADIO_TIMER_Context, &current_machine_time);
10047f56:	2308      	movs	r3, #8
10047f58:	18fa      	adds	r2, r7, r3
10047f5a:	4b12      	ldr	r3, [pc, #72]	@ (10047fa4 <TIMER_GetPastSysTime+0x58>)
10047f5c:	0011      	movs	r1, r2
10047f5e:	0018      	movs	r0, r3
10047f60:	f7ff fb3c 	bl	100475dc <_get_system_time_and_machine>
10047f64:	0002      	movs	r2, r0
10047f66:	000b      	movs	r3, r1
10047f68:	6839      	ldr	r1, [r7, #0]
10047f6a:	600a      	str	r2, [r1, #0]
10047f6c:	604b      	str	r3, [r1, #4]
  delta_systime = blue_unit_conversion(TIME_DIFF(current_machine_time, time), RADIO_TIMER_Context.calibrationData.period1, MULT64_THR_PERIOD);
10047f6e:	68ba      	ldr	r2, [r7, #8]
10047f70:	687b      	ldr	r3, [r7, #4]
10047f72:	1ad0      	subs	r0, r2, r3
10047f74:	4b0b      	ldr	r3, [pc, #44]	@ (10047fa4 <TIMER_GetPastSysTime+0x58>)
10047f76:	69db      	ldr	r3, [r3, #28]
10047f78:	0019      	movs	r1, r3
10047f7a:	4b0b      	ldr	r3, [pc, #44]	@ (10047fa8 <TIMER_GetPastSysTime+0x5c>)
10047f7c:	001a      	movs	r2, r3
10047f7e:	f7f8 f89f 	bl	100400c0 <blue_unit_conversion>
10047f82:	0003      	movs	r3, r0
10047f84:	60fb      	str	r3, [r7, #12]

  return (*current_system_time - delta_systime);
10047f86:	683b      	ldr	r3, [r7, #0]
10047f88:	681a      	ldr	r2, [r3, #0]
10047f8a:	685b      	ldr	r3, [r3, #4]
10047f8c:	68f9      	ldr	r1, [r7, #12]
10047f8e:	000c      	movs	r4, r1
10047f90:	2100      	movs	r1, #0
10047f92:	000d      	movs	r5, r1
10047f94:	1b12      	subs	r2, r2, r4
10047f96:	41ab      	sbcs	r3, r5
}
10047f98:	0010      	movs	r0, r2
10047f9a:	0019      	movs	r1, r3
10047f9c:	46bd      	mov	sp, r7
10047f9e:	b004      	add	sp, #16
10047fa0:	bdb0      	pop	{r4, r5, r7, pc}
10047fa2:	46c0      	nop			@ (mov r8, r8)
10047fa4:	20000908 	.word	0x20000908
10047fa8:	00000635 	.word	0x00000635

10047fac <TIMER_GetRadioTimerValue>:
  * @retval 1 if Timer1 has been programmed.
  * @retval 2 if Timer2 has been programmed.
  * @retval 3 if Wakeup Timer has been programmed.
  */
static uint8_t TIMER_GetRadioTimerValue(uint32_t *time)
{
10047fac:	b580      	push	{r7, lr}
10047fae:	b082      	sub	sp, #8
10047fb0:	af00      	add	r7, sp, #0
10047fb2:	6078      	str	r0, [r7, #4]
  if (LL_RADIO_TIMER_IsEnabledBLEWakeupTimer(WAKEUP))
10047fb4:	4b1a      	ldr	r3, [pc, #104]	@ (10048020 <TIMER_GetRadioTimerValue+0x74>)
10047fb6:	0018      	movs	r0, r3
10047fb8:	f7fe fb1c 	bl	100465f4 <LL_RADIO_TIMER_IsEnabledBLEWakeupTimer>
10047fbc:	1e03      	subs	r3, r0, #0
10047fbe:	d008      	beq.n	10047fd2 <TIMER_GetRadioTimerValue+0x26>
  {
    *time = LL_RADIO_TIMER_GetBLEWakeupTime(WAKEUP);
10047fc0:	4b17      	ldr	r3, [pc, #92]	@ (10048020 <TIMER_GetRadioTimerValue+0x74>)
10047fc2:	0018      	movs	r0, r3
10047fc4:	f7fe fb65 	bl	10046692 <LL_RADIO_TIMER_GetBLEWakeupTime>
10047fc8:	0002      	movs	r2, r0
10047fca:	687b      	ldr	r3, [r7, #4]
10047fcc:	601a      	str	r2, [r3, #0]
    return WAKEUP_RADIO_TIMER_BUSY;
10047fce:	2303      	movs	r3, #3
10047fd0:	e022      	b.n	10048018 <TIMER_GetRadioTimerValue+0x6c>
  }
  else if (LL_RADIO_TIMER_IsEnabledTimer1(BLUE))
10047fd2:	23c0      	movs	r3, #192	@ 0xc0
10047fd4:	05db      	lsls	r3, r3, #23
10047fd6:	0018      	movs	r0, r3
10047fd8:	f7fe faa5 	bl	10046526 <LL_RADIO_TIMER_IsEnabledTimer1>
10047fdc:	1e03      	subs	r3, r0, #0
10047fde:	d009      	beq.n	10047ff4 <TIMER_GetRadioTimerValue+0x48>
  {
    *time = LL_RADIO_TIMER_GetTimeout(BLUE);
10047fe0:	23c0      	movs	r3, #192	@ 0xc0
10047fe2:	05db      	lsls	r3, r3, #23
10047fe4:	0018      	movs	r0, r3
10047fe6:	f7fe fadb 	bl	100465a0 <LL_RADIO_TIMER_GetTimeout>
10047fea:	0002      	movs	r2, r0
10047fec:	687b      	ldr	r3, [r7, #4]
10047fee:	601a      	str	r2, [r3, #0]
    return RADIO_TIMER1_BUSY;
10047ff0:	2301      	movs	r3, #1
10047ff2:	e011      	b.n	10048018 <TIMER_GetRadioTimerValue+0x6c>
  }
  else if (LL_RADIO_TIMER_IsEnabledTimer2(BLUE))
10047ff4:	23c0      	movs	r3, #192	@ 0xc0
10047ff6:	05db      	lsls	r3, r3, #23
10047ff8:	0018      	movs	r0, r3
10047ffa:	f7fe fab4 	bl	10046566 <LL_RADIO_TIMER_IsEnabledTimer2>
10047ffe:	1e03      	subs	r3, r0, #0
10048000:	d009      	beq.n	10048016 <TIMER_GetRadioTimerValue+0x6a>
  {
    *time = LL_RADIO_TIMER_GetTimeout(BLUE);
10048002:	23c0      	movs	r3, #192	@ 0xc0
10048004:	05db      	lsls	r3, r3, #23
10048006:	0018      	movs	r0, r3
10048008:	f7fe faca 	bl	100465a0 <LL_RADIO_TIMER_GetTimeout>
1004800c:	0002      	movs	r2, r0
1004800e:	687b      	ldr	r3, [r7, #4]
10048010:	601a      	str	r2, [r3, #0]
    return RADIO_TIMER2_BUSY;
10048012:	2302      	movs	r3, #2
10048014:	e000      	b.n	10048018 <TIMER_GetRadioTimerValue+0x6c>
  }
  else
  {
    return 0;
10048016:	2300      	movs	r3, #0
  }
}
10048018:	0018      	movs	r0, r3
1004801a:	46bd      	mov	sp, r7
1004801c:	b002      	add	sp, #8
1004801e:	bd80      	pop	{r7, pc}
10048020:	60001800 	.word	0x60001800

10048024 <HAL_RADIO_TIMER_CpuWakeUpCallback>:

__weak void HAL_RADIO_TIMER_CpuWakeUpCallback(void)
{
10048024:	b580      	push	{r7, lr}
10048026:	af00      	add	r7, sp, #0
}
10048028:	46c0      	nop			@ (mov r8, r8)
1004802a:	46bd      	mov	sp, r7
1004802c:	bd80      	pop	{r7, pc}

1004802e <HAL_RADIO_TIMER_TxRxWakeUpCallback>:


__weak void HAL_RADIO_TIMER_TxRxWakeUpCallback(void)
{
1004802e:	b580      	push	{r7, lr}
10048030:	af00      	add	r7, sp, #0
}
10048032:	46c0      	nop			@ (mov r8, r8)
10048034:	46bd      	mov	sp, r7
10048036:	bd80      	pop	{r7, pc}

10048038 <HAL_RADIO_TIMER_CPU_WKUP_IRQHandler>:

void HAL_RADIO_TIMER_CPU_WKUP_IRQHandler(void)
{
10048038:	b580      	push	{r7, lr}
1004803a:	af00      	add	r7, sp, #0
  HAL_RADIO_TIMER_TimeoutCallback();
1004803c:	f7ff f884 	bl	10047148 <HAL_RADIO_TIMER_TimeoutCallback>

  HAL_RADIO_TIMER_CpuWakeUpCallback();
10048040:	f7ff fff0 	bl	10048024 <HAL_RADIO_TIMER_CpuWakeUpCallback>
}
10048044:	46c0      	nop			@ (mov r8, r8)
10048046:	46bd      	mov	sp, r7
10048048:	bd80      	pop	{r7, pc}

1004804a <HAL_RADIO_TIMER_TXRX_WKUP_IRQHandler>:

void HAL_RADIO_TIMER_TXRX_WKUP_IRQHandler(void)
{
1004804a:	b580      	push	{r7, lr}
1004804c:	af00      	add	r7, sp, #0
  HAL_RADIO_TIMER_TxRxWakeUpCallback();
1004804e:	f7ff ffee 	bl	1004802e <HAL_RADIO_TIMER_TxRxWakeUpCallback>
#if defined (STM32WB06) || defined (STM32WB07)
  HAL_RADIO_TIMER_WakeUpCallback();
10048052:	f7ff f84d 	bl	100470f0 <HAL_RADIO_TIMER_WakeUpCallback>
#endif
}
10048056:	46c0      	nop			@ (mov r8, r8)
10048058:	46bd      	mov	sp, r7
1004805a:	bd80      	pop	{r7, pc}

1004805c <HAL_RADIO_TIMER_ERROR_IRQHandler>:

void HAL_RADIO_TIMER_ERROR_IRQHandler(void)
{
1004805c:	b580      	push	{r7, lr}
1004805e:	b082      	sub	sp, #8
10048060:	af00      	add	r7, sp, #0
  volatile uint32_t debug_cmd = 0;
10048062:	2300      	movs	r3, #0
10048064:	607b      	str	r3, [r7, #4]
  UNUSED(debug_cmd);
10048066:	687b      	ldr	r3, [r7, #4]
  BLUE->DEBUGCMDREG |= 1;
10048068:	23c0      	movs	r3, #192	@ 0xc0
1004806a:	05db      	lsls	r3, r3, #23
1004806c:	6f5a      	ldr	r2, [r3, #116]	@ 0x74
1004806e:	23c0      	movs	r3, #192	@ 0xc0
10048070:	05db      	lsls	r3, r3, #23
10048072:	2101      	movs	r1, #1
10048074:	430a      	orrs	r2, r1
10048076:	675a      	str	r2, [r3, #116]	@ 0x74
  /* If the device is configured with
     System clock = 64 MHz and BLE clock = 16 MHz
     a register read is necessary to end fine
     the clear interrupt register operation,
     due the AHB down converter latency */
  debug_cmd = BLUE->DEBUGCMDREG;
10048078:	23c0      	movs	r3, #192	@ 0xc0
1004807a:	05db      	lsls	r3, r3, #23
1004807c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
1004807e:	607b      	str	r3, [r7, #4]
}
10048080:	46c0      	nop			@ (mov r8, r8)
10048082:	46bd      	mov	sp, r7
10048084:	b002      	add	sp, #8
10048086:	bd80      	pop	{r7, pc}

10048088 <LL_PWR_SetNoPullB>:
{
10048088:	b580      	push	{r7, lr}
1004808a:	b082      	sub	sp, #8
1004808c:	af00      	add	r7, sp, #0
1004808e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(PWR->PUCRB, GPIONumber);
10048090:	4b08      	ldr	r3, [pc, #32]	@ (100480b4 <LL_PWR_SetNoPullB+0x2c>)
10048092:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
10048094:	687b      	ldr	r3, [r7, #4]
10048096:	43d9      	mvns	r1, r3
10048098:	4b06      	ldr	r3, [pc, #24]	@ (100480b4 <LL_PWR_SetNoPullB+0x2c>)
1004809a:	400a      	ands	r2, r1
1004809c:	629a      	str	r2, [r3, #40]	@ 0x28
  CLEAR_BIT(PWR->PDCRB, GPIONumber);
1004809e:	4b05      	ldr	r3, [pc, #20]	@ (100480b4 <LL_PWR_SetNoPullB+0x2c>)
100480a0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
100480a2:	687b      	ldr	r3, [r7, #4]
100480a4:	43d9      	mvns	r1, r3
100480a6:	4b03      	ldr	r3, [pc, #12]	@ (100480b4 <LL_PWR_SetNoPullB+0x2c>)
100480a8:	400a      	ands	r2, r1
100480aa:	62da      	str	r2, [r3, #44]	@ 0x2c
}
100480ac:	46c0      	nop			@ (mov r8, r8)
100480ae:	46bd      	mov	sp, r7
100480b0:	b002      	add	sp, #8
100480b2:	bd80      	pop	{r7, pc}
100480b4:	48500000 	.word	0x48500000

100480b8 <LL_RCC_HSE_Enable>:
  * @brief  Enable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Enable(void)
{
100480b8:	b580      	push	{r7, lr}
100480ba:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
100480bc:	4b04      	ldr	r3, [pc, #16]	@ (100480d0 <LL_RCC_HSE_Enable+0x18>)
100480be:	681a      	ldr	r2, [r3, #0]
100480c0:	4b03      	ldr	r3, [pc, #12]	@ (100480d0 <LL_RCC_HSE_Enable+0x18>)
100480c2:	2180      	movs	r1, #128	@ 0x80
100480c4:	0249      	lsls	r1, r1, #9
100480c6:	430a      	orrs	r2, r1
100480c8:	601a      	str	r2, [r3, #0]
}
100480ca:	46c0      	nop			@ (mov r8, r8)
100480cc:	46bd      	mov	sp, r7
100480ce:	bd80      	pop	{r7, pc}
100480d0:	48400000 	.word	0x48400000

100480d4 <LL_RCC_HSE_Disable>:
  * @brief  Disable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Disable(void)
{
100480d4:	b580      	push	{r7, lr}
100480d6:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
100480d8:	4b04      	ldr	r3, [pc, #16]	@ (100480ec <LL_RCC_HSE_Disable+0x18>)
100480da:	681a      	ldr	r2, [r3, #0]
100480dc:	4b03      	ldr	r3, [pc, #12]	@ (100480ec <LL_RCC_HSE_Disable+0x18>)
100480de:	4904      	ldr	r1, [pc, #16]	@ (100480f0 <LL_RCC_HSE_Disable+0x1c>)
100480e0:	400a      	ands	r2, r1
100480e2:	601a      	str	r2, [r3, #0]
}
100480e4:	46c0      	nop			@ (mov r8, r8)
100480e6:	46bd      	mov	sp, r7
100480e8:	bd80      	pop	{r7, pc}
100480ea:	46c0      	nop			@ (mov r8, r8)
100480ec:	48400000 	.word	0x48400000
100480f0:	fffeffff 	.word	0xfffeffff

100480f4 <LL_RCC_HSE_IsReady>:
  * @brief  Check if HSE oscillator Ready
  * @rmtoll CR           HSERDY        LL_RCC_HSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsReady(void)
{
100480f4:	b580      	push	{r7, lr}
100480f6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
100480f8:	4b07      	ldr	r3, [pc, #28]	@ (10048118 <LL_RCC_HSE_IsReady+0x24>)
100480fa:	681a      	ldr	r2, [r3, #0]
100480fc:	2380      	movs	r3, #128	@ 0x80
100480fe:	029b      	lsls	r3, r3, #10
10048100:	401a      	ands	r2, r3
10048102:	2380      	movs	r3, #128	@ 0x80
10048104:	029b      	lsls	r3, r3, #10
10048106:	429a      	cmp	r2, r3
10048108:	d101      	bne.n	1004810e <LL_RCC_HSE_IsReady+0x1a>
1004810a:	2301      	movs	r3, #1
1004810c:	e000      	b.n	10048110 <LL_RCC_HSE_IsReady+0x1c>
1004810e:	2300      	movs	r3, #0
}
10048110:	0018      	movs	r0, r3
10048112:	46bd      	mov	sp, r7
10048114:	bd80      	pop	{r7, pc}
10048116:	46c0      	nop			@ (mov r8, r8)
10048118:	48400000 	.word	0x48400000

1004811c <LL_RCC_HSE_SetCapacitorTuning>:
  * @rmtoll RFSWHSECR        SWXOTUNE       LL_RCC_HSE_SetCapacitorTuning
  * @param  Value Between Min_Data = 0 and Max_Data = 63
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_SetCapacitorTuning(uint32_t Value)
{
1004811c:	b580      	push	{r7, lr}
1004811e:	b082      	sub	sp, #8
10048120:	af00      	add	r7, sp, #0
10048122:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->RFSWHSECR, RCC_RFSWHSECR_SWXOTUNE, Value << RCC_RFSWHSECR_SWXOTUNE_Pos);
10048124:	4a0b      	ldr	r2, [pc, #44]	@ (10048154 <LL_RCC_HSE_SetCapacitorTuning+0x38>)
10048126:	2398      	movs	r3, #152	@ 0x98
10048128:	58d3      	ldr	r3, [r2, r3]
1004812a:	4a0b      	ldr	r2, [pc, #44]	@ (10048158 <LL_RCC_HSE_SetCapacitorTuning+0x3c>)
1004812c:	401a      	ands	r2, r3
1004812e:	687b      	ldr	r3, [r7, #4]
10048130:	021b      	lsls	r3, r3, #8
10048132:	4908      	ldr	r1, [pc, #32]	@ (10048154 <LL_RCC_HSE_SetCapacitorTuning+0x38>)
10048134:	4313      	orrs	r3, r2
10048136:	2298      	movs	r2, #152	@ 0x98
10048138:	508b      	str	r3, [r1, r2]
  SET_BIT(RCC->RFSWHSECR, RCC_RFSWHSECR_SWXOTUNEEN);
1004813a:	4a06      	ldr	r2, [pc, #24]	@ (10048154 <LL_RCC_HSE_SetCapacitorTuning+0x38>)
1004813c:	2398      	movs	r3, #152	@ 0x98
1004813e:	58d3      	ldr	r3, [r2, r3]
10048140:	4904      	ldr	r1, [pc, #16]	@ (10048154 <LL_RCC_HSE_SetCapacitorTuning+0x38>)
10048142:	2280      	movs	r2, #128	@ 0x80
10048144:	4313      	orrs	r3, r2
10048146:	2298      	movs	r2, #152	@ 0x98
10048148:	508b      	str	r3, [r1, r2]
}
1004814a:	46c0      	nop			@ (mov r8, r8)
1004814c:	46bd      	mov	sp, r7
1004814e:	b002      	add	sp, #8
10048150:	bd80      	pop	{r7, pc}
10048152:	46c0      	nop			@ (mov r8, r8)
10048154:	48400000 	.word	0x48400000
10048158:	ffffc0ff 	.word	0xffffc0ff

1004815c <LL_RCC_HSE_SetCurrentControl>:
  *         @arg @ref LL_RCC_HSE_CURRENTMAX_5
  *         @arg @ref LL_RCC_HSE_CURRENTMAX_6
  *         @arg @ref LL_RCC_HSE_CURRENTMAX_7
  */
__STATIC_INLINE void LL_RCC_HSE_SetCurrentControl(uint32_t CurrentMax)
{
1004815c:	b580      	push	{r7, lr}
1004815e:	b082      	sub	sp, #8
10048160:	af00      	add	r7, sp, #0
10048162:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->RFSWHSECR, RCC_RFSWHSECR_GMC, CurrentMax);
10048164:	4a07      	ldr	r2, [pc, #28]	@ (10048184 <LL_RCC_HSE_SetCurrentControl+0x28>)
10048166:	2398      	movs	r3, #152	@ 0x98
10048168:	58d3      	ldr	r3, [r2, r3]
1004816a:	2270      	movs	r2, #112	@ 0x70
1004816c:	4393      	bics	r3, r2
1004816e:	001a      	movs	r2, r3
10048170:	4904      	ldr	r1, [pc, #16]	@ (10048184 <LL_RCC_HSE_SetCurrentControl+0x28>)
10048172:	687b      	ldr	r3, [r7, #4]
10048174:	4313      	orrs	r3, r2
10048176:	2298      	movs	r2, #152	@ 0x98
10048178:	508b      	str	r3, [r1, r2]
}
1004817a:	46c0      	nop			@ (mov r8, r8)
1004817c:	46bd      	mov	sp, r7
1004817e:	b002      	add	sp, #8
10048180:	bd80      	pop	{r7, pc}
10048182:	46c0      	nop			@ (mov r8, r8)
10048184:	48400000 	.word	0x48400000

10048188 <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI
  * @rmtoll CFGR           STOPHSI        LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
10048188:	b580      	push	{r7, lr}
1004818a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CFGR, RCC_CFGR_STOPHSI);
1004818c:	4b07      	ldr	r3, [pc, #28]	@ (100481ac <LL_RCC_HSI_Enable+0x24>)
1004818e:	689a      	ldr	r2, [r3, #8]
10048190:	4b06      	ldr	r3, [pc, #24]	@ (100481ac <LL_RCC_HSI_Enable+0x24>)
10048192:	2104      	movs	r1, #4
10048194:	438a      	bics	r2, r1
10048196:	609a      	str	r2, [r3, #8]
  CLEAR_BIT(RCC->CFGR, RCC_CFGR_HSESEL);
10048198:	4b04      	ldr	r3, [pc, #16]	@ (100481ac <LL_RCC_HSI_Enable+0x24>)
1004819a:	689a      	ldr	r2, [r3, #8]
1004819c:	4b03      	ldr	r3, [pc, #12]	@ (100481ac <LL_RCC_HSI_Enable+0x24>)
1004819e:	2102      	movs	r1, #2
100481a0:	438a      	bics	r2, r1
100481a2:	609a      	str	r2, [r3, #8]
}
100481a4:	46c0      	nop			@ (mov r8, r8)
100481a6:	46bd      	mov	sp, r7
100481a8:	bd80      	pop	{r7, pc}
100481aa:	46c0      	nop			@ (mov r8, r8)
100481ac:	48400000 	.word	0x48400000

100481b0 <LL_RCC_HSI_Disable>:
  * @brief  Disable HSI
  * @rmtoll CFGR           STOPHSI        LL_RCC_HSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Disable(void)
{
100481b0:	b580      	push	{r7, lr}
100481b2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CFGR, RCC_CFGR_HSESEL);
100481b4:	4b07      	ldr	r3, [pc, #28]	@ (100481d4 <LL_RCC_HSI_Disable+0x24>)
100481b6:	689a      	ldr	r2, [r3, #8]
100481b8:	4b06      	ldr	r3, [pc, #24]	@ (100481d4 <LL_RCC_HSI_Disable+0x24>)
100481ba:	2102      	movs	r1, #2
100481bc:	430a      	orrs	r2, r1
100481be:	609a      	str	r2, [r3, #8]
  SET_BIT(RCC->CFGR, RCC_CFGR_STOPHSI);
100481c0:	4b04      	ldr	r3, [pc, #16]	@ (100481d4 <LL_RCC_HSI_Disable+0x24>)
100481c2:	689a      	ldr	r2, [r3, #8]
100481c4:	4b03      	ldr	r3, [pc, #12]	@ (100481d4 <LL_RCC_HSI_Disable+0x24>)
100481c6:	2104      	movs	r1, #4
100481c8:	430a      	orrs	r2, r1
100481ca:	609a      	str	r2, [r3, #8]
}
100481cc:	46c0      	nop			@ (mov r8, r8)
100481ce:	46bd      	mov	sp, r7
100481d0:	bd80      	pop	{r7, pc}
100481d2:	46c0      	nop			@ (mov r8, r8)
100481d4:	48400000 	.word	0x48400000

100481d8 <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
100481d8:	b580      	push	{r7, lr}
100481da:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
100481dc:	4b07      	ldr	r3, [pc, #28]	@ (100481fc <LL_RCC_HSI_IsReady+0x24>)
100481de:	681a      	ldr	r2, [r3, #0]
100481e0:	2380      	movs	r3, #128	@ 0x80
100481e2:	00db      	lsls	r3, r3, #3
100481e4:	401a      	ands	r2, r3
100481e6:	2380      	movs	r3, #128	@ 0x80
100481e8:	00db      	lsls	r3, r3, #3
100481ea:	429a      	cmp	r2, r3
100481ec:	d101      	bne.n	100481f2 <LL_RCC_HSI_IsReady+0x1a>
100481ee:	2301      	movs	r3, #1
100481f0:	e000      	b.n	100481f4 <LL_RCC_HSI_IsReady+0x1c>
100481f2:	2300      	movs	r3, #0
}
100481f4:	0018      	movs	r0, r3
100481f6:	46bd      	mov	sp, r7
100481f8:	bd80      	pop	{r7, pc}
100481fa:	46c0      	nop			@ (mov r8, r8)
100481fc:	48400000 	.word	0x48400000

10048200 <LL_RCC_DIRECT_HSE_Enable>:
  * @brief  Enable DIRECT_HSE mode
  * @rmtoll CFGR       HSESEL/STOPHSI         LL_RCC_HSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_DIRECT_HSE_Enable(void)
{
10048200:	b580      	push	{r7, lr}
10048202:	b082      	sub	sp, #8
10048204:	af00      	add	r7, sp, #0
  while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0);
10048206:	46c0      	nop			@ (mov r8, r8)
10048208:	4b0f      	ldr	r3, [pc, #60]	@ (10048248 <LL_RCC_DIRECT_HSE_Enable+0x48>)
1004820a:	681a      	ldr	r2, [r3, #0]
1004820c:	2380      	movs	r3, #128	@ 0x80
1004820e:	029b      	lsls	r3, r3, #10
10048210:	4013      	ands	r3, r2
10048212:	d0f9      	beq.n	10048208 <LL_RCC_DIRECT_HSE_Enable+0x8>
  SET_BIT(RCC->CFGR, RCC_CFGR_HSESEL);
10048214:	4b0c      	ldr	r3, [pc, #48]	@ (10048248 <LL_RCC_DIRECT_HSE_Enable+0x48>)
10048216:	689a      	ldr	r2, [r3, #8]
10048218:	4b0b      	ldr	r3, [pc, #44]	@ (10048248 <LL_RCC_DIRECT_HSE_Enable+0x48>)
1004821a:	2102      	movs	r1, #2
1004821c:	430a      	orrs	r2, r1
1004821e:	609a      	str	r2, [r3, #8]
  for (volatile int i = 0; i < 6; i++)
10048220:	2300      	movs	r3, #0
10048222:	607b      	str	r3, [r7, #4]
10048224:	e003      	b.n	1004822e <LL_RCC_DIRECT_HSE_Enable+0x2e>
  {
    __asm("NOP");
10048226:	46c0      	nop			@ (mov r8, r8)
  for (volatile int i = 0; i < 6; i++)
10048228:	687b      	ldr	r3, [r7, #4]
1004822a:	3301      	adds	r3, #1
1004822c:	607b      	str	r3, [r7, #4]
1004822e:	687b      	ldr	r3, [r7, #4]
10048230:	2b05      	cmp	r3, #5
10048232:	ddf8      	ble.n	10048226 <LL_RCC_DIRECT_HSE_Enable+0x26>
  }
  SET_BIT(RCC->CFGR, RCC_CFGR_STOPHSI);
10048234:	4b04      	ldr	r3, [pc, #16]	@ (10048248 <LL_RCC_DIRECT_HSE_Enable+0x48>)
10048236:	689a      	ldr	r2, [r3, #8]
10048238:	4b03      	ldr	r3, [pc, #12]	@ (10048248 <LL_RCC_DIRECT_HSE_Enable+0x48>)
1004823a:	2104      	movs	r1, #4
1004823c:	430a      	orrs	r2, r1
1004823e:	609a      	str	r2, [r3, #8]
}
10048240:	46c0      	nop			@ (mov r8, r8)
10048242:	46bd      	mov	sp, r7
10048244:	b002      	add	sp, #8
10048246:	bd80      	pop	{r7, pc}
10048248:	48400000 	.word	0x48400000

1004824c <LL_RCC_LSCO_SetSource>:
  *         @arg @ref LL_RCC_LSCO_CLKSOURCE_LSI
  *         @arg @ref LL_RCC_LSCO_CLKSOURCE_HSI64M_DIV2048
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSCO_SetSource(uint32_t Source)
{
1004824c:	b580      	push	{r7, lr}
1004824e:	b082      	sub	sp, #8
10048250:	af00      	add	r7, sp, #0
10048252:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_CLKSLOWSEL, Source);
10048254:	4b06      	ldr	r3, [pc, #24]	@ (10048270 <LL_RCC_LSCO_SetSource+0x24>)
10048256:	689b      	ldr	r3, [r3, #8]
10048258:	4a06      	ldr	r2, [pc, #24]	@ (10048274 <LL_RCC_LSCO_SetSource+0x28>)
1004825a:	4013      	ands	r3, r2
1004825c:	0019      	movs	r1, r3
1004825e:	4b04      	ldr	r3, [pc, #16]	@ (10048270 <LL_RCC_LSCO_SetSource+0x24>)
10048260:	687a      	ldr	r2, [r7, #4]
10048262:	430a      	orrs	r2, r1
10048264:	609a      	str	r2, [r3, #8]
}
10048266:	46c0      	nop			@ (mov r8, r8)
10048268:	46bd      	mov	sp, r7
1004826a:	b002      	add	sp, #8
1004826c:	bd80      	pop	{r7, pc}
1004826e:	46c0      	nop			@ (mov r8, r8)
10048270:	48400000 	.word	0x48400000
10048274:	fffe7fff 	.word	0xfffe7fff

10048278 <LL_RCC_LSE_Enable>:
  * @brief  Enable  Low Speed External (LSE) crystal.
  * @rmtoll CR         LSEON         LL_RCC_LSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_Enable(void)
{
10048278:	b580      	push	{r7, lr}
1004827a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_LSEON);
1004827c:	4b04      	ldr	r3, [pc, #16]	@ (10048290 <LL_RCC_LSE_Enable+0x18>)
1004827e:	681a      	ldr	r2, [r3, #0]
10048280:	4b03      	ldr	r3, [pc, #12]	@ (10048290 <LL_RCC_LSE_Enable+0x18>)
10048282:	2110      	movs	r1, #16
10048284:	430a      	orrs	r2, r1
10048286:	601a      	str	r2, [r3, #0]
}
10048288:	46c0      	nop			@ (mov r8, r8)
1004828a:	46bd      	mov	sp, r7
1004828c:	bd80      	pop	{r7, pc}
1004828e:	46c0      	nop			@ (mov r8, r8)
10048290:	48400000 	.word	0x48400000

10048294 <LL_RCC_LSE_Disable>:
  * @brief  Disable  Low Speed External (LSE) crystal.
  * @rmtoll CR         LSEON         LL_RCC_LSE_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_Disable(void)
{
10048294:	b580      	push	{r7, lr}
10048296:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_LSEON);
10048298:	4b04      	ldr	r3, [pc, #16]	@ (100482ac <LL_RCC_LSE_Disable+0x18>)
1004829a:	681a      	ldr	r2, [r3, #0]
1004829c:	4b03      	ldr	r3, [pc, #12]	@ (100482ac <LL_RCC_LSE_Disable+0x18>)
1004829e:	2110      	movs	r1, #16
100482a0:	438a      	bics	r2, r1
100482a2:	601a      	str	r2, [r3, #0]
}
100482a4:	46c0      	nop			@ (mov r8, r8)
100482a6:	46bd      	mov	sp, r7
100482a8:	bd80      	pop	{r7, pc}
100482aa:	46c0      	nop			@ (mov r8, r8)
100482ac:	48400000 	.word	0x48400000

100482b0 <LL_RCC_LSE_IsReady>:
  * @brief  Check if LSE oscillator Ready
  * @rmtoll CR         LSERDY        LL_RCC_LSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsReady(void)
{
100482b0:	b580      	push	{r7, lr}
100482b2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_LSERDY) == (RCC_CR_LSERDY)) ? 1UL : 0UL);
100482b4:	4b05      	ldr	r3, [pc, #20]	@ (100482cc <LL_RCC_LSE_IsReady+0x1c>)
100482b6:	681b      	ldr	r3, [r3, #0]
100482b8:	2220      	movs	r2, #32
100482ba:	4013      	ands	r3, r2
100482bc:	2b20      	cmp	r3, #32
100482be:	d101      	bne.n	100482c4 <LL_RCC_LSE_IsReady+0x14>
100482c0:	2301      	movs	r3, #1
100482c2:	e000      	b.n	100482c6 <LL_RCC_LSE_IsReady+0x16>
100482c4:	2300      	movs	r3, #0
}
100482c6:	0018      	movs	r0, r3
100482c8:	46bd      	mov	sp, r7
100482ca:	bd80      	pop	{r7, pc}
100482cc:	48400000 	.word	0x48400000

100482d0 <LL_RCC_LSE_EnableBypass>:
  * @brief  Enable external clock source (LSE bypass).
  * @rmtoll CR         LSEBYP        LL_RCC_LSE_EnableBypass
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_EnableBypass(void)
{
100482d0:	b580      	push	{r7, lr}
100482d2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_LSEBYP);
100482d4:	4b04      	ldr	r3, [pc, #16]	@ (100482e8 <LL_RCC_LSE_EnableBypass+0x18>)
100482d6:	681a      	ldr	r2, [r3, #0]
100482d8:	4b03      	ldr	r3, [pc, #12]	@ (100482e8 <LL_RCC_LSE_EnableBypass+0x18>)
100482da:	2140      	movs	r1, #64	@ 0x40
100482dc:	430a      	orrs	r2, r1
100482de:	601a      	str	r2, [r3, #0]
}
100482e0:	46c0      	nop			@ (mov r8, r8)
100482e2:	46bd      	mov	sp, r7
100482e4:	bd80      	pop	{r7, pc}
100482e6:	46c0      	nop			@ (mov r8, r8)
100482e8:	48400000 	.word	0x48400000

100482ec <LL_RCC_LSE_DisableBypass>:
  * @brief  Disable external clock source (LSE bypass).
  * @rmtoll CR         LSEBYP        LL_RCC_LSE_DisableBypass
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_DisableBypass(void)
{
100482ec:	b580      	push	{r7, lr}
100482ee:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_LSEBYP);
100482f0:	4b04      	ldr	r3, [pc, #16]	@ (10048304 <LL_RCC_LSE_DisableBypass+0x18>)
100482f2:	681a      	ldr	r2, [r3, #0]
100482f4:	4b03      	ldr	r3, [pc, #12]	@ (10048304 <LL_RCC_LSE_DisableBypass+0x18>)
100482f6:	2140      	movs	r1, #64	@ 0x40
100482f8:	438a      	bics	r2, r1
100482fa:	601a      	str	r2, [r3, #0]
}
100482fc:	46c0      	nop			@ (mov r8, r8)
100482fe:	46bd      	mov	sp, r7
10048300:	bd80      	pop	{r7, pc}
10048302:	46c0      	nop			@ (mov r8, r8)
10048304:	48400000 	.word	0x48400000

10048308 <LL_RCC_LSE_IsBypassEnabled>:
  * @brief  Check if LSE bypass configuration is enabled.
  * @rmtoll CR         LSEBYP        LL_RCC_LSE_IsBypassEnabled
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsBypassEnabled(void)
{
10048308:	b580      	push	{r7, lr}
1004830a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_LSEBYP) == (RCC_CR_LSEBYP)) ? 1UL : 0UL);
1004830c:	4b05      	ldr	r3, [pc, #20]	@ (10048324 <LL_RCC_LSE_IsBypassEnabled+0x1c>)
1004830e:	681b      	ldr	r3, [r3, #0]
10048310:	2240      	movs	r2, #64	@ 0x40
10048312:	4013      	ands	r3, r2
10048314:	2b40      	cmp	r3, #64	@ 0x40
10048316:	d101      	bne.n	1004831c <LL_RCC_LSE_IsBypassEnabled+0x14>
10048318:	2301      	movs	r3, #1
1004831a:	e000      	b.n	1004831e <LL_RCC_LSE_IsBypassEnabled+0x16>
1004831c:	2300      	movs	r3, #0
}
1004831e:	0018      	movs	r0, r3
10048320:	46bd      	mov	sp, r7
10048322:	bd80      	pop	{r7, pc}
10048324:	48400000 	.word	0x48400000

10048328 <LL_RCC_LSE_SetDriveCapability>:
  *         @arg @ref LL_RCC_LSEDRIVE_MEDIUMHIGH
  *         @arg @ref LL_RCC_LSEDRIVE_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_SetDriveCapability(uint32_t LSEDrive)
{
10048328:	b580      	push	{r7, lr}
1004832a:	b082      	sub	sp, #8
1004832c:	af00      	add	r7, sp, #0
1004832e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSSWCR, RCC_CSSWCR_LSEDRV, LSEDrive);
10048330:	4b06      	ldr	r3, [pc, #24]	@ (1004834c <LL_RCC_LSE_SetDriveCapability+0x24>)
10048332:	68db      	ldr	r3, [r3, #12]
10048334:	2260      	movs	r2, #96	@ 0x60
10048336:	4393      	bics	r3, r2
10048338:	0019      	movs	r1, r3
1004833a:	4b04      	ldr	r3, [pc, #16]	@ (1004834c <LL_RCC_LSE_SetDriveCapability+0x24>)
1004833c:	687a      	ldr	r2, [r7, #4]
1004833e:	430a      	orrs	r2, r1
10048340:	60da      	str	r2, [r3, #12]
}
10048342:	46c0      	nop			@ (mov r8, r8)
10048344:	46bd      	mov	sp, r7
10048346:	b002      	add	sp, #8
10048348:	bd80      	pop	{r7, pc}
1004834a:	46c0      	nop			@ (mov r8, r8)
1004834c:	48400000 	.word	0x48400000

10048350 <LL_RCC_LSI_Enable>:
  * @brief  Enable LSI Oscillator
  * @rmtoll CR          LSION         LL_RCC_LSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI_Enable(void)
{
10048350:	b580      	push	{r7, lr}
10048352:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_LSION);
10048354:	4b04      	ldr	r3, [pc, #16]	@ (10048368 <LL_RCC_LSI_Enable+0x18>)
10048356:	681a      	ldr	r2, [r3, #0]
10048358:	4b03      	ldr	r3, [pc, #12]	@ (10048368 <LL_RCC_LSI_Enable+0x18>)
1004835a:	2104      	movs	r1, #4
1004835c:	430a      	orrs	r2, r1
1004835e:	601a      	str	r2, [r3, #0]
}
10048360:	46c0      	nop			@ (mov r8, r8)
10048362:	46bd      	mov	sp, r7
10048364:	bd80      	pop	{r7, pc}
10048366:	46c0      	nop			@ (mov r8, r8)
10048368:	48400000 	.word	0x48400000

1004836c <LL_RCC_LSI_Disable>:
  * @brief  Disable LSI Oscillator
  * @rmtoll CR          LSION         LL_RCC_LSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI_Disable(void)
{
1004836c:	b580      	push	{r7, lr}
1004836e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_LSION);
10048370:	4b04      	ldr	r3, [pc, #16]	@ (10048384 <LL_RCC_LSI_Disable+0x18>)
10048372:	681a      	ldr	r2, [r3, #0]
10048374:	4b03      	ldr	r3, [pc, #12]	@ (10048384 <LL_RCC_LSI_Disable+0x18>)
10048376:	2104      	movs	r1, #4
10048378:	438a      	bics	r2, r1
1004837a:	601a      	str	r2, [r3, #0]
}
1004837c:	46c0      	nop			@ (mov r8, r8)
1004837e:	46bd      	mov	sp, r7
10048380:	bd80      	pop	{r7, pc}
10048382:	46c0      	nop			@ (mov r8, r8)
10048384:	48400000 	.word	0x48400000

10048388 <LL_RCC_LSI_IsReady>:
  * @brief  Check if LSI is Ready
  * @rmtoll CR          LSIRDY        LL_RCC_LSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI_IsReady(void)
{
10048388:	b580      	push	{r7, lr}
1004838a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_LSIRDY) == (RCC_CR_LSIRDY)) ? 1UL : 0UL);
1004838c:	4b05      	ldr	r3, [pc, #20]	@ (100483a4 <LL_RCC_LSI_IsReady+0x1c>)
1004838e:	681b      	ldr	r3, [r3, #0]
10048390:	2208      	movs	r2, #8
10048392:	4013      	ands	r3, r2
10048394:	2b08      	cmp	r3, #8
10048396:	d101      	bne.n	1004839c <LL_RCC_LSI_IsReady+0x14>
10048398:	2301      	movs	r3, #1
1004839a:	e000      	b.n	1004839e <LL_RCC_LSI_IsReady+0x16>
1004839c:	2300      	movs	r3, #0
}
1004839e:	0018      	movs	r0, r3
100483a0:	46bd      	mov	sp, r7
100483a2:	bd80      	pop	{r7, pc}
100483a4:	48400000 	.word	0x48400000

100483a8 <LL_RCC_RC64MPLL_Enable>:
  * @brief  Enable RC64MPLL
  * @rmtoll CR           HSIPLLON         LL_RCC_RC64MPLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_RC64MPLL_Enable(void)
{
100483a8:	b580      	push	{r7, lr}
100483aa:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSIPLLON);
100483ac:	4b04      	ldr	r3, [pc, #16]	@ (100483c0 <LL_RCC_RC64MPLL_Enable+0x18>)
100483ae:	681a      	ldr	r2, [r3, #0]
100483b0:	4b03      	ldr	r3, [pc, #12]	@ (100483c0 <LL_RCC_RC64MPLL_Enable+0x18>)
100483b2:	2180      	movs	r1, #128	@ 0x80
100483b4:	0189      	lsls	r1, r1, #6
100483b6:	430a      	orrs	r2, r1
100483b8:	601a      	str	r2, [r3, #0]
}
100483ba:	46c0      	nop			@ (mov r8, r8)
100483bc:	46bd      	mov	sp, r7
100483be:	bd80      	pop	{r7, pc}
100483c0:	48400000 	.word	0x48400000

100483c4 <LL_RCC_RC64MPLL_Disable>:
  * @note Cannot be disabled if the RC64MPLL clock is used as the system clock
  * @rmtoll CR           HSIPLLON         LL_RCC_RC64MPLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_RC64MPLL_Disable(void)
{
100483c4:	b580      	push	{r7, lr}
100483c6:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSIPLLON);
100483c8:	4b04      	ldr	r3, [pc, #16]	@ (100483dc <LL_RCC_RC64MPLL_Disable+0x18>)
100483ca:	681a      	ldr	r2, [r3, #0]
100483cc:	4b03      	ldr	r3, [pc, #12]	@ (100483dc <LL_RCC_RC64MPLL_Disable+0x18>)
100483ce:	4904      	ldr	r1, [pc, #16]	@ (100483e0 <LL_RCC_RC64MPLL_Disable+0x1c>)
100483d0:	400a      	ands	r2, r1
100483d2:	601a      	str	r2, [r3, #0]
}
100483d4:	46c0      	nop			@ (mov r8, r8)
100483d6:	46bd      	mov	sp, r7
100483d8:	bd80      	pop	{r7, pc}
100483da:	46c0      	nop			@ (mov r8, r8)
100483dc:	48400000 	.word	0x48400000
100483e0:	ffffdfff 	.word	0xffffdfff

100483e4 <LL_RCC_RC64MPLL_IsReady>:
  * @brief  Check if RC64MPLL is Ready
  * @rmtoll CR           HSIPLLRDY        LL_RCC_RC64MPLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_RC64MPLL_IsReady(void)
{
100483e4:	b580      	push	{r7, lr}
100483e6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIPLLRDY) == (RCC_CR_HSIPLLRDY)) ? 1UL : 0UL);
100483e8:	4b07      	ldr	r3, [pc, #28]	@ (10048408 <LL_RCC_RC64MPLL_IsReady+0x24>)
100483ea:	681a      	ldr	r2, [r3, #0]
100483ec:	2380      	movs	r3, #128	@ 0x80
100483ee:	01db      	lsls	r3, r3, #7
100483f0:	401a      	ands	r2, r3
100483f2:	2380      	movs	r3, #128	@ 0x80
100483f4:	01db      	lsls	r3, r3, #7
100483f6:	429a      	cmp	r2, r3
100483f8:	d101      	bne.n	100483fe <LL_RCC_RC64MPLL_IsReady+0x1a>
100483fa:	2301      	movs	r3, #1
100483fc:	e000      	b.n	10048400 <LL_RCC_RC64MPLL_IsReady+0x1c>
100483fe:	2300      	movs	r3, #0
}
10048400:	0018      	movs	r0, r3
10048402:	46bd      	mov	sp, r7
10048404:	bd80      	pop	{r7, pc}
10048406:	46c0      	nop			@ (mov r8, r8)
10048408:	48400000 	.word	0x48400000

1004840c <LL_RCC_SetRC64MPLLPrescaler>:
  *         @arg @ref LL_RCC_RC64MPLL_DIV_32
  *         @arg @ref LL_RCC_RC64MPLL_DIV_64
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetRC64MPLLPrescaler(uint32_t Prescaler)
{
1004840c:	b580      	push	{r7, lr}
1004840e:	b082      	sub	sp, #8
10048410:	af00      	add	r7, sp, #0
10048412:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_CLKSYSDIV, Prescaler);
10048414:	4b06      	ldr	r3, [pc, #24]	@ (10048430 <LL_RCC_SetRC64MPLLPrescaler+0x24>)
10048416:	689b      	ldr	r3, [r3, #8]
10048418:	22e0      	movs	r2, #224	@ 0xe0
1004841a:	4393      	bics	r3, r2
1004841c:	0019      	movs	r1, r3
1004841e:	4b04      	ldr	r3, [pc, #16]	@ (10048430 <LL_RCC_SetRC64MPLLPrescaler+0x24>)
10048420:	687a      	ldr	r2, [r7, #4]
10048422:	430a      	orrs	r2, r1
10048424:	609a      	str	r2, [r3, #8]
}
10048426:	46c0      	nop			@ (mov r8, r8)
10048428:	46bd      	mov	sp, r7
1004842a:	b002      	add	sp, #8
1004842c:	bd80      	pop	{r7, pc}
1004842e:	46c0      	nop			@ (mov r8, r8)
10048430:	48400000 	.word	0x48400000

10048434 <HAL_RCC_OscConfig>:
  * @param  RCC_OscInitStruct  pointer to a @ref RCC_OscInitTypeDef structure that
  *         contains the configuration information for the RCC Oscillators.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
10048434:	b580      	push	{r7, lr}
10048436:	b084      	sub	sp, #16
10048438:	af00      	add	r7, sp, #0
1004843a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
1004843c:	687b      	ldr	r3, [r7, #4]
1004843e:	2b00      	cmp	r3, #0
10048440:	d101      	bne.n	10048446 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
10048442:	2301      	movs	r3, #1
10048444:	e140      	b.n	100486c8 <HAL_RCC_OscConfig+0x294>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  
  /*------------------------------- HSI Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
10048446:	687b      	ldr	r3, [r7, #4]
10048448:	681b      	ldr	r3, [r3, #0]
1004844a:	2210      	movs	r2, #16
1004844c:	4013      	ands	r3, r2
1004844e:	d033      	beq.n	100484b8 <HAL_RCC_OscConfig+0x84>
  {
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
10048450:	687b      	ldr	r3, [r7, #4]
10048452:	689b      	ldr	r3, [r3, #8]
10048454:	2b00      	cmp	r3, #0
10048456:	d102      	bne.n	1004845e <HAL_RCC_OscConfig+0x2a>
10048458:	f7ff fe96 	bl	10048188 <LL_RCC_HSI_Enable>
1004845c:	e001      	b.n	10048462 <HAL_RCC_OscConfig+0x2e>
1004845e:	f7ff fea7 	bl	100481b0 <LL_RCC_HSI_Disable>

    if(RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
10048462:	687b      	ldr	r3, [r7, #4]
10048464:	689b      	ldr	r3, [r3, #8]
10048466:	2b04      	cmp	r3, #4
10048468:	d113      	bne.n	10048492 <HAL_RCC_OscConfig+0x5e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
1004846a:	f7fc fa67 	bl	1004493c <HAL_GetTick>
1004846e:	0003      	movs	r3, r0
10048470:	60fb      	str	r3, [r7, #12]

      /* Wait till HSI is disabled */
      while (LL_RCC_HSI_IsReady() == 1U)
10048472:	e008      	b.n	10048486 <HAL_RCC_OscConfig+0x52>
      {
        if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
10048474:	f7fc fa62 	bl	1004493c <HAL_GetTick>
10048478:	0002      	movs	r2, r0
1004847a:	68fb      	ldr	r3, [r7, #12]
1004847c:	1ad3      	subs	r3, r2, r3
1004847e:	2b64      	cmp	r3, #100	@ 0x64
10048480:	d901      	bls.n	10048486 <HAL_RCC_OscConfig+0x52>
        {
          return HAL_TIMEOUT;
10048482:	2303      	movs	r3, #3
10048484:	e120      	b.n	100486c8 <HAL_RCC_OscConfig+0x294>
      while (LL_RCC_HSI_IsReady() == 1U)
10048486:	f7ff fea7 	bl	100481d8 <LL_RCC_HSI_IsReady>
1004848a:	0003      	movs	r3, r0
1004848c:	2b01      	cmp	r3, #1
1004848e:	d0f1      	beq.n	10048474 <HAL_RCC_OscConfig+0x40>
10048490:	e012      	b.n	100484b8 <HAL_RCC_OscConfig+0x84>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
10048492:	f7fc fa53 	bl	1004493c <HAL_GetTick>
10048496:	0003      	movs	r3, r0
10048498:	60fb      	str	r3, [r7, #12]

      /* Wait till HSI is enabled */
      while (LL_RCC_HSI_IsReady() != 1U)
1004849a:	e008      	b.n	100484ae <HAL_RCC_OscConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
1004849c:	f7fc fa4e 	bl	1004493c <HAL_GetTick>
100484a0:	0002      	movs	r2, r0
100484a2:	68fb      	ldr	r3, [r7, #12]
100484a4:	1ad3      	subs	r3, r2, r3
100484a6:	2b64      	cmp	r3, #100	@ 0x64
100484a8:	d901      	bls.n	100484ae <HAL_RCC_OscConfig+0x7a>
        {
          return HAL_TIMEOUT;
100484aa:	2303      	movs	r3, #3
100484ac:	e10c      	b.n	100486c8 <HAL_RCC_OscConfig+0x294>
      while (LL_RCC_HSI_IsReady() != 1U)
100484ae:	f7ff fe93 	bl	100481d8 <LL_RCC_HSI_IsReady>
100484b2:	0003      	movs	r3, r0
100484b4:	2b01      	cmp	r3, #1
100484b6:	d1f1      	bne.n	1004849c <HAL_RCC_OscConfig+0x68>
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
100484b8:	687b      	ldr	r3, [r7, #4]
100484ba:	681b      	ldr	r3, [r3, #0]
100484bc:	2201      	movs	r2, #1
100484be:	4013      	ands	r3, r2
100484c0:	d039      	beq.n	10048536 <HAL_RCC_OscConfig+0x102>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* Set HSE Capacitor Tuning */
    LL_RCC_HSE_SetCapacitorTuning(CFG_HW_RCC_HSE_CAPACITOR_TUNE);
100484c2:	2020      	movs	r0, #32
100484c4:	f7ff fe2a 	bl	1004811c <LL_RCC_HSE_SetCapacitorTuning>

    /* Set HSE Current Control */
    LL_RCC_HSE_SetCurrentControl(LL_RCC_HSE_CURRENTMAX_3);
100484c8:	2030      	movs	r0, #48	@ 0x30
100484ca:	f7ff fe47 	bl	1004815c <LL_RCC_HSE_SetCurrentControl>

    /* Set the new HSE configuration ---------------------------------------*/
    __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
100484ce:	687b      	ldr	r3, [r7, #4]
100484d0:	685a      	ldr	r2, [r3, #4]
100484d2:	2380      	movs	r3, #128	@ 0x80
100484d4:	025b      	lsls	r3, r3, #9
100484d6:	429a      	cmp	r2, r3
100484d8:	d102      	bne.n	100484e0 <HAL_RCC_OscConfig+0xac>
100484da:	f7ff fded 	bl	100480b8 <LL_RCC_HSE_Enable>
100484de:	e001      	b.n	100484e4 <HAL_RCC_OscConfig+0xb0>
100484e0:	f7ff fdf8 	bl	100480d4 <LL_RCC_HSE_Disable>

    /* Check the HSE State */
    if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
100484e4:	687b      	ldr	r3, [r7, #4]
100484e6:	685b      	ldr	r3, [r3, #4]
100484e8:	2b00      	cmp	r3, #0
100484ea:	d012      	beq.n	10048512 <HAL_RCC_OscConfig+0xde>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
100484ec:	f7fc fa26 	bl	1004493c <HAL_GetTick>
100484f0:	0003      	movs	r3, r0
100484f2:	60fb      	str	r3, [r7, #12]

      /* Wait till HSE is ready */
      while (LL_RCC_HSE_IsReady() == 0U)
100484f4:	e008      	b.n	10048508 <HAL_RCC_OscConfig+0xd4>
      {
        if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
100484f6:	f7fc fa21 	bl	1004493c <HAL_GetTick>
100484fa:	0002      	movs	r2, r0
100484fc:	68fb      	ldr	r3, [r7, #12]
100484fe:	1ad3      	subs	r3, r2, r3
10048500:	2b64      	cmp	r3, #100	@ 0x64
10048502:	d901      	bls.n	10048508 <HAL_RCC_OscConfig+0xd4>
        {
          return HAL_TIMEOUT;
10048504:	2303      	movs	r3, #3
10048506:	e0df      	b.n	100486c8 <HAL_RCC_OscConfig+0x294>
      while (LL_RCC_HSE_IsReady() == 0U)
10048508:	f7ff fdf4 	bl	100480f4 <LL_RCC_HSE_IsReady>
1004850c:	1e03      	subs	r3, r0, #0
1004850e:	d0f2      	beq.n	100484f6 <HAL_RCC_OscConfig+0xc2>
10048510:	e011      	b.n	10048536 <HAL_RCC_OscConfig+0x102>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
10048512:	f7fc fa13 	bl	1004493c <HAL_GetTick>
10048516:	0003      	movs	r3, r0
10048518:	60fb      	str	r3, [r7, #12]

      /* Wait till HSE is disabled */
      while (LL_RCC_HSE_IsReady() != 0U)
1004851a:	e008      	b.n	1004852e <HAL_RCC_OscConfig+0xfa>
      {
        if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
1004851c:	f7fc fa0e 	bl	1004493c <HAL_GetTick>
10048520:	0002      	movs	r2, r0
10048522:	68fb      	ldr	r3, [r7, #12]
10048524:	1ad3      	subs	r3, r2, r3
10048526:	2b64      	cmp	r3, #100	@ 0x64
10048528:	d901      	bls.n	1004852e <HAL_RCC_OscConfig+0xfa>
        {
          return HAL_TIMEOUT;
1004852a:	2303      	movs	r3, #3
1004852c:	e0cc      	b.n	100486c8 <HAL_RCC_OscConfig+0x294>
      while (LL_RCC_HSE_IsReady() != 0U)
1004852e:	f7ff fde1 	bl	100480f4 <LL_RCC_HSE_IsReady>
10048532:	1e03      	subs	r3, r0, #0
10048534:	d1f2      	bne.n	1004851c <HAL_RCC_OscConfig+0xe8>
      }
    }
  }

  /*--------------------------------- LSI Configuration -----------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
10048536:	687b      	ldr	r3, [r7, #4]
10048538:	681b      	ldr	r3, [r3, #0]
1004853a:	2204      	movs	r2, #4
1004853c:	4013      	ands	r3, r2
1004853e:	d03a      	beq.n	100485b6 <HAL_RCC_OscConfig+0x182>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
10048540:	687b      	ldr	r3, [r7, #4]
10048542:	691b      	ldr	r3, [r3, #16]
10048544:	2b00      	cmp	r3, #0
10048546:	d022      	beq.n	1004858e <HAL_RCC_OscConfig+0x15a>
    {
      /* Disable the LSI */
      __HAL_RCC_LSI_DISABLE();
10048548:	f7ff ff10 	bl	1004836c <LL_RCC_LSI_Disable>
      while (__HAL_RCC_GET_LSI_READYFLAG() != 0U);
1004854c:	46c0      	nop			@ (mov r8, r8)
1004854e:	f7ff ff1b 	bl	10048388 <LL_RCC_LSI_IsReady>
10048552:	1e03      	subs	r3, r0, #0
10048554:	d1fb      	bne.n	1004854e <HAL_RCC_OscConfig+0x11a>

      /* Disable the LSE */
      __HAL_RCC_LSE_CONFIG(RCC_LSE_OFF);
10048556:	f7ff fe9d 	bl	10048294 <LL_RCC_LSE_Disable>

      /* Configure the Low Speed Clock to LSI */
      LL_RCC_LSCO_SetSource(LL_RCC_LSCO_CLKSOURCE_LSI);
1004855a:	2380      	movs	r3, #128	@ 0x80
1004855c:	025b      	lsls	r3, r3, #9
1004855e:	0018      	movs	r0, r3
10048560:	f7ff fe74 	bl	1004824c <LL_RCC_LSCO_SetSource>

      /*  Enable the Internal Low Speed oscillator (LSI)  */
      __HAL_RCC_LSI_ENABLE();
10048564:	f7ff fef4 	bl	10048350 <LL_RCC_LSI_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
10048568:	f7fc f9e8 	bl	1004493c <HAL_GetTick>
1004856c:	0003      	movs	r3, r0
1004856e:	60fb      	str	r3, [r7, #12]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_LSI_READYFLAG() == 0U)
10048570:	e008      	b.n	10048584 <HAL_RCC_OscConfig+0x150>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
10048572:	f7fc f9e3 	bl	1004493c <HAL_GetTick>
10048576:	0002      	movs	r2, r0
10048578:	68fb      	ldr	r3, [r7, #12]
1004857a:	1ad3      	subs	r3, r2, r3
1004857c:	2b02      	cmp	r3, #2
1004857e:	d901      	bls.n	10048584 <HAL_RCC_OscConfig+0x150>
        {
          return HAL_TIMEOUT;
10048580:	2303      	movs	r3, #3
10048582:	e0a1      	b.n	100486c8 <HAL_RCC_OscConfig+0x294>
      while (__HAL_RCC_GET_LSI_READYFLAG() == 0U)
10048584:	f7ff ff00 	bl	10048388 <LL_RCC_LSI_IsReady>
10048588:	1e03      	subs	r3, r0, #0
1004858a:	d0f2      	beq.n	10048572 <HAL_RCC_OscConfig+0x13e>
1004858c:	e013      	b.n	100485b6 <HAL_RCC_OscConfig+0x182>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
1004858e:	f7ff feed 	bl	1004836c <LL_RCC_LSI_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
10048592:	f7fc f9d3 	bl	1004493c <HAL_GetTick>
10048596:	0003      	movs	r3, r0
10048598:	60fb      	str	r3, [r7, #12]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_LSI_READYFLAG() != 0U)
1004859a:	e008      	b.n	100485ae <HAL_RCC_OscConfig+0x17a>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
1004859c:	f7fc f9ce 	bl	1004493c <HAL_GetTick>
100485a0:	0002      	movs	r2, r0
100485a2:	68fb      	ldr	r3, [r7, #12]
100485a4:	1ad3      	subs	r3, r2, r3
100485a6:	2b02      	cmp	r3, #2
100485a8:	d901      	bls.n	100485ae <HAL_RCC_OscConfig+0x17a>
        {
          return HAL_TIMEOUT;
100485aa:	2303      	movs	r3, #3
100485ac:	e08c      	b.n	100486c8 <HAL_RCC_OscConfig+0x294>
      while (__HAL_RCC_GET_LSI_READYFLAG() != 0U)
100485ae:	f7ff feeb 	bl	10048388 <LL_RCC_LSI_IsReady>
100485b2:	1e03      	subs	r3, r0, #0
100485b4:	d1f2      	bne.n	1004859c <HAL_RCC_OscConfig+0x168>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
100485b6:	687b      	ldr	r3, [r7, #4]
100485b8:	681b      	ldr	r3, [r3, #0]
100485ba:	2202      	movs	r2, #2
100485bc:	4013      	ands	r3, r2
100485be:	d049      	beq.n	10048654 <HAL_RCC_OscConfig+0x220>

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Disable LSI */
    __HAL_RCC_LSI_DISABLE();
100485c0:	f7ff fed4 	bl	1004836c <LL_RCC_LSI_Disable>

    /* Disable LSE */
    __HAL_RCC_LSE_CONFIG(RCC_LSE_OFF);
100485c4:	f7ff fe66 	bl	10048294 <LL_RCC_LSE_Disable>
    while (__HAL_RCC_GET_LSE_READYFLAG() != 0);
100485c8:	46c0      	nop			@ (mov r8, r8)
100485ca:	f7ff fe71 	bl	100482b0 <LL_RCC_LSE_IsReady>
100485ce:	1e03      	subs	r3, r0, #0
100485d0:	d1fb      	bne.n	100485ca <HAL_RCC_OscConfig+0x196>

    /* Configure the PB12 and PB13 in NO PULL mode */
    LL_PWR_SetNoPullB(LL_PWR_GPIO_BIT_12 |
100485d2:	23c0      	movs	r3, #192	@ 0xc0
100485d4:	019b      	lsls	r3, r3, #6
100485d6:	0018      	movs	r0, r3
100485d8:	f7ff fd56 	bl	10048088 <LL_PWR_SetNoPullB>
                      LL_PWR_GPIO_BIT_13);

    /* Configure the Low Speed Clock to LSE */
    LL_RCC_LSCO_SetSource(LL_RCC_LSCO_CLKSOURCE_LSE);
100485dc:	2380      	movs	r3, #128	@ 0x80
100485de:	021b      	lsls	r3, r3, #8
100485e0:	0018      	movs	r0, r3
100485e2:	f7ff fe33 	bl	1004824c <LL_RCC_LSCO_SetSource>

    /* Set LSE oscillator drive capability */
    __HAL_RCC_LSEDRIVE_CONFIG(LSE_DRIVE_LEVEL);
100485e6:	2020      	movs	r0, #32
100485e8:	f7ff fe9e 	bl	10048328 <LL_RCC_LSE_SetDriveCapability>


    /* Set the new LSE state */
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
100485ec:	687b      	ldr	r3, [r7, #4]
100485ee:	68db      	ldr	r3, [r3, #12]
100485f0:	2b10      	cmp	r3, #16
100485f2:	d102      	bne.n	100485fa <HAL_RCC_OscConfig+0x1c6>
100485f4:	f7ff fe40 	bl	10048278 <LL_RCC_LSE_Enable>
100485f8:	e001      	b.n	100485fe <HAL_RCC_OscConfig+0x1ca>
100485fa:	f7ff fe4b 	bl	10048294 <LL_RCC_LSE_Disable>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
100485fe:	687b      	ldr	r3, [r7, #4]
10048600:	68db      	ldr	r3, [r3, #12]
10048602:	2b00      	cmp	r3, #0
10048604:	d013      	beq.n	1004862e <HAL_RCC_OscConfig+0x1fa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
10048606:	f7fc f999 	bl	1004493c <HAL_GetTick>
1004860a:	0003      	movs	r3, r0
1004860c:	60fb      	str	r3, [r7, #12]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_LSE_READYFLAG() == 0U)
1004860e:	e009      	b.n	10048624 <HAL_RCC_OscConfig+0x1f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
10048610:	f7fc f994 	bl	1004493c <HAL_GetTick>
10048614:	0002      	movs	r2, r0
10048616:	68fb      	ldr	r3, [r7, #12]
10048618:	1ad3      	subs	r3, r2, r3
1004861a:	4a2d      	ldr	r2, [pc, #180]	@ (100486d0 <HAL_RCC_OscConfig+0x29c>)
1004861c:	4293      	cmp	r3, r2
1004861e:	d901      	bls.n	10048624 <HAL_RCC_OscConfig+0x1f0>
        {
          return HAL_TIMEOUT;
10048620:	2303      	movs	r3, #3
10048622:	e051      	b.n	100486c8 <HAL_RCC_OscConfig+0x294>
      while (__HAL_RCC_GET_LSE_READYFLAG() == 0U)
10048624:	f7ff fe44 	bl	100482b0 <LL_RCC_LSE_IsReady>
10048628:	1e03      	subs	r3, r0, #0
1004862a:	d0f1      	beq.n	10048610 <HAL_RCC_OscConfig+0x1dc>
1004862c:	e012      	b.n	10048654 <HAL_RCC_OscConfig+0x220>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
1004862e:	f7fc f985 	bl	1004493c <HAL_GetTick>
10048632:	0003      	movs	r3, r0
10048634:	60fb      	str	r3, [r7, #12]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_LSE_READYFLAG() != 0U)
10048636:	e009      	b.n	1004864c <HAL_RCC_OscConfig+0x218>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
10048638:	f7fc f980 	bl	1004493c <HAL_GetTick>
1004863c:	0002      	movs	r2, r0
1004863e:	68fb      	ldr	r3, [r7, #12]
10048640:	1ad3      	subs	r3, r2, r3
10048642:	4a23      	ldr	r2, [pc, #140]	@ (100486d0 <HAL_RCC_OscConfig+0x29c>)
10048644:	4293      	cmp	r3, r2
10048646:	d901      	bls.n	1004864c <HAL_RCC_OscConfig+0x218>
        {
          return HAL_TIMEOUT;
10048648:	2303      	movs	r3, #3
1004864a:	e03d      	b.n	100486c8 <HAL_RCC_OscConfig+0x294>
      while (__HAL_RCC_GET_LSE_READYFLAG() != 0U)
1004864c:	f7ff fe30 	bl	100482b0 <LL_RCC_LSE_IsReady>
10048650:	1e03      	subs	r3, r0, #0
10048652:	d1f1      	bne.n	10048638 <HAL_RCC_OscConfig+0x204>
      }
    }
  }

  /*------------------------------ LSE Bypass Configuration ------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE_BYPASS) == RCC_OSCILLATORTYPE_LSE_BYPASS)
10048654:	687b      	ldr	r3, [r7, #4]
10048656:	681b      	ldr	r3, [r3, #0]
10048658:	2208      	movs	r2, #8
1004865a:	4013      	ands	r3, r2
1004865c:	d033      	beq.n	100486c6 <HAL_RCC_OscConfig+0x292>

    /* Check the parameters */
    assert_param(IS_RCC_LSE_BYPASS(RCC_OscInitStruct->LSEBYPASSState));

    /* Set the new LSE Bypass configuration -----------------------------------------*/
    __HAL_RCC_LSE_BYPASS_CONFIG(RCC_OscInitStruct->LSEBYPASSState);
1004865e:	687b      	ldr	r3, [r7, #4]
10048660:	695b      	ldr	r3, [r3, #20]
10048662:	2b40      	cmp	r3, #64	@ 0x40
10048664:	d102      	bne.n	1004866c <HAL_RCC_OscConfig+0x238>
10048666:	f7ff fe33 	bl	100482d0 <LL_RCC_LSE_EnableBypass>
1004866a:	e001      	b.n	10048670 <HAL_RCC_OscConfig+0x23c>
1004866c:	f7ff fe3e 	bl	100482ec <LL_RCC_LSE_DisableBypass>

    /* Check the LSE Bypass State */
    if (RCC_OscInitStruct->LSEBYPASSState != RCC_LSE_OFF)
10048670:	687b      	ldr	r3, [r7, #4]
10048672:	695b      	ldr	r3, [r3, #20]
10048674:	2b00      	cmp	r3, #0
10048676:	d013      	beq.n	100486a0 <HAL_RCC_OscConfig+0x26c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
10048678:	f7fc f960 	bl	1004493c <HAL_GetTick>
1004867c:	0003      	movs	r3, r0
1004867e:	60fb      	str	r3, [r7, #12]

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsBypassEnabled() == 0U)
10048680:	e009      	b.n	10048696 <HAL_RCC_OscConfig+0x262>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
10048682:	f7fc f95b 	bl	1004493c <HAL_GetTick>
10048686:	0002      	movs	r2, r0
10048688:	68fb      	ldr	r3, [r7, #12]
1004868a:	1ad3      	subs	r3, r2, r3
1004868c:	4a10      	ldr	r2, [pc, #64]	@ (100486d0 <HAL_RCC_OscConfig+0x29c>)
1004868e:	4293      	cmp	r3, r2
10048690:	d901      	bls.n	10048696 <HAL_RCC_OscConfig+0x262>
        {
          return HAL_TIMEOUT;
10048692:	2303      	movs	r3, #3
10048694:	e018      	b.n	100486c8 <HAL_RCC_OscConfig+0x294>
      while (LL_RCC_LSE_IsBypassEnabled() == 0U)
10048696:	f7ff fe37 	bl	10048308 <LL_RCC_LSE_IsBypassEnabled>
1004869a:	1e03      	subs	r3, r0, #0
1004869c:	d0f1      	beq.n	10048682 <HAL_RCC_OscConfig+0x24e>
1004869e:	e012      	b.n	100486c6 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
100486a0:	f7fc f94c 	bl	1004493c <HAL_GetTick>
100486a4:	0003      	movs	r3, r0
100486a6:	60fb      	str	r3, [r7, #12]

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsBypassEnabled() != 0U)
100486a8:	e009      	b.n	100486be <HAL_RCC_OscConfig+0x28a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
100486aa:	f7fc f947 	bl	1004493c <HAL_GetTick>
100486ae:	0002      	movs	r2, r0
100486b0:	68fb      	ldr	r3, [r7, #12]
100486b2:	1ad3      	subs	r3, r2, r3
100486b4:	4a06      	ldr	r2, [pc, #24]	@ (100486d0 <HAL_RCC_OscConfig+0x29c>)
100486b6:	4293      	cmp	r3, r2
100486b8:	d901      	bls.n	100486be <HAL_RCC_OscConfig+0x28a>
        {
          return HAL_TIMEOUT;
100486ba:	2303      	movs	r3, #3
100486bc:	e004      	b.n	100486c8 <HAL_RCC_OscConfig+0x294>
      while (LL_RCC_LSE_IsBypassEnabled() != 0U)
100486be:	f7ff fe23 	bl	10048308 <LL_RCC_LSE_IsBypassEnabled>
100486c2:	1e03      	subs	r3, r0, #0
100486c4:	d1f1      	bne.n	100486aa <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }

  return HAL_OK;
100486c6:	2300      	movs	r3, #0
}
100486c8:	0018      	movs	r0, r3
100486ca:	46bd      	mov	sp, r7
100486cc:	b004      	add	sp, #16
100486ce:	bd80      	pop	{r7, pc}
100486d0:	00001388 	.word	0x00001388

100486d4 <HAL_RCC_ClockConfig>:
  *         currently used as system clock source.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
100486d4:	b580      	push	{r7, lr}
100486d6:	b084      	sub	sp, #16
100486d8:	af00      	add	r7, sp, #0
100486da:	6078      	str	r0, [r7, #4]
100486dc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
100486de:	687b      	ldr	r3, [r7, #4]
100486e0:	2b00      	cmp	r3, #0
100486e2:	d101      	bne.n	100486e8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
100486e4:	2301      	movs	r3, #1
100486e6:	e098      	b.n	1004881a <HAL_RCC_ClockConfig+0x146>

  /* Check the parameters */
  assert_param(IS_FLASH_WAIT_STATES(FLatency));

  /* Set FALSH_WAIT_STATES_1 */
  __HAL_FLASH_SET_WAIT_STATES(FLatency);
100486e8:	4b4e      	ldr	r3, [pc, #312]	@ (10048824 <HAL_RCC_ClockConfig+0x150>)
100486ea:	685b      	ldr	r3, [r3, #4]
100486ec:	2230      	movs	r2, #48	@ 0x30
100486ee:	4393      	bics	r3, r2
100486f0:	0019      	movs	r1, r3
100486f2:	4b4c      	ldr	r3, [pc, #304]	@ (10048824 <HAL_RCC_ClockConfig+0x150>)
100486f4:	683a      	ldr	r2, [r7, #0]
100486f6:	430a      	orrs	r2, r1
100486f8:	605a      	str	r2, [r3, #4]
  /*------------------------- SYSCLK Configuration ---------------------------*/
  assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
  assert_param(IS_RCC_SYSCLK_DIVIDER(RCC_ClkInitStruct->SYSCLKDivider));

  /* HSI is selected as System Clock Source */
  if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
100486fa:	687b      	ldr	r3, [r7, #4]
100486fc:	681b      	ldr	r3, [r3, #0]
100486fe:	2b02      	cmp	r3, #2
10048700:	d10e      	bne.n	10048720 <HAL_RCC_ClockConfig+0x4c>
  {
    LL_RCC_HSI_Enable();
10048702:	f7ff fd41 	bl	10048188 <LL_RCC_HSI_Enable>
    
    /* Check the HSI ready flag */
    if (LL_RCC_HSI_IsReady() == 0U)
10048706:	f7ff fd67 	bl	100481d8 <LL_RCC_HSI_IsReady>
1004870a:	1e03      	subs	r3, r0, #0
1004870c:	d101      	bne.n	10048712 <HAL_RCC_ClockConfig+0x3e>
    {
      return HAL_ERROR;
1004870e:	2301      	movs	r3, #1
10048710:	e083      	b.n	1004881a <HAL_RCC_ClockConfig+0x146>
    }

    /* Disable the RC64MPLL*/
    __HAL_RCC_RC64MPLL_DISABLE();
10048712:	f7ff fe57 	bl	100483c4 <LL_RCC_RC64MPLL_Disable>
    
    /* Configure the RC64MPLL multiplication factor */
    __HAL_RCC_RC64MPLL_PRESC_CONFIG(RCC_ClkInitStruct->SYSCLKDivider);
10048716:	687b      	ldr	r3, [r7, #4]
10048718:	685b      	ldr	r3, [r3, #4]
1004871a:	0018      	movs	r0, r3
1004871c:	f7ff fe76 	bl	1004840c <LL_RCC_SetRC64MPLLPrescaler>
  }

  /* RC64MPLL is selected as System Clock Source */
  if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_RC64MPLL)
10048720:	687b      	ldr	r3, [r7, #4]
10048722:	681b      	ldr	r3, [r3, #0]
10048724:	2b00      	cmp	r3, #0
10048726:	d124      	bne.n	10048772 <HAL_RCC_ClockConfig+0x9e>
  {
    /* Check the HSI ready flag */
    if (LL_RCC_HSI_IsReady() == 0U)
10048728:	f7ff fd56 	bl	100481d8 <LL_RCC_HSI_IsReady>
1004872c:	1e03      	subs	r3, r0, #0
1004872e:	d101      	bne.n	10048734 <HAL_RCC_ClockConfig+0x60>
    {
      return HAL_ERROR;
10048730:	2301      	movs	r3, #1
10048732:	e072      	b.n	1004881a <HAL_RCC_ClockConfig+0x146>
    }

    /* Check the HSE ready flag */
    if (LL_RCC_HSE_IsReady() == 0U)
10048734:	f7ff fcde 	bl	100480f4 <LL_RCC_HSE_IsReady>
10048738:	1e03      	subs	r3, r0, #0
1004873a:	d101      	bne.n	10048740 <HAL_RCC_ClockConfig+0x6c>
    {
      return HAL_ERROR;
1004873c:	2301      	movs	r3, #1
1004873e:	e06c      	b.n	1004881a <HAL_RCC_ClockConfig+0x146>
    }

    /* Enable the RC64MPLL*/
    __HAL_RCC_RC64MPLL_ENABLE();
10048740:	f7ff fe32 	bl	100483a8 <LL_RCC_RC64MPLL_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
10048744:	f7fc f8fa 	bl	1004493c <HAL_GetTick>
10048748:	0003      	movs	r3, r0
1004874a:	60fb      	str	r3, [r7, #12]

    /* Wait till RC64MPLL is ready */
    while (LL_RCC_RC64MPLL_IsReady() == 0)
1004874c:	e008      	b.n	10048760 <HAL_RCC_ClockConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
1004874e:	f7fc f8f5 	bl	1004493c <HAL_GetTick>
10048752:	0002      	movs	r2, r0
10048754:	68fb      	ldr	r3, [r7, #12]
10048756:	1ad3      	subs	r3, r2, r3
10048758:	2b02      	cmp	r3, #2
1004875a:	d901      	bls.n	10048760 <HAL_RCC_ClockConfig+0x8c>
      {
        return HAL_TIMEOUT;
1004875c:	2303      	movs	r3, #3
1004875e:	e05c      	b.n	1004881a <HAL_RCC_ClockConfig+0x146>
    while (LL_RCC_RC64MPLL_IsReady() == 0)
10048760:	f7ff fe40 	bl	100483e4 <LL_RCC_RC64MPLL_IsReady>
10048764:	1e03      	subs	r3, r0, #0
10048766:	d0f2      	beq.n	1004874e <HAL_RCC_ClockConfig+0x7a>
      }
    }

    /* Configure the RC64MPLL multiplication factor */
    __HAL_RCC_RC64MPLL_PRESC_CONFIG(RCC_ClkInitStruct->SYSCLKDivider);
10048768:	687b      	ldr	r3, [r7, #4]
1004876a:	685b      	ldr	r3, [r3, #4]
1004876c:	0018      	movs	r0, r3
1004876e:	f7ff fe4d 	bl	1004840c <LL_RCC_SetRC64MPLLPrescaler>
  }

  /* DIRECT_HSE is selected as System Clock Source */
  if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_DIRECT_HSE)
10048772:	687b      	ldr	r3, [r7, #4]
10048774:	681b      	ldr	r3, [r3, #0]
10048776:	2b01      	cmp	r3, #1
10048778:	d117      	bne.n	100487aa <HAL_RCC_ClockConfig+0xd6>
  {
    /* Enable the DIRECT_HSE configuration */
    LL_RCC_DIRECT_HSE_Enable();
1004877a:	f7ff fd41 	bl	10048200 <LL_RCC_DIRECT_HSE_Enable>

    /* Check the HSI ready flag */
    if (LL_RCC_HSI_IsReady() != 0U)
1004877e:	f7ff fd2b 	bl	100481d8 <LL_RCC_HSI_IsReady>
10048782:	1e03      	subs	r3, r0, #0
10048784:	d001      	beq.n	1004878a <HAL_RCC_ClockConfig+0xb6>
    {
      return HAL_ERROR;
10048786:	2301      	movs	r3, #1
10048788:	e047      	b.n	1004881a <HAL_RCC_ClockConfig+0x146>
    }

    /* Check the HSE ready flag */
    if (LL_RCC_HSE_IsReady() == 0U)
1004878a:	f7ff fcb3 	bl	100480f4 <LL_RCC_HSE_IsReady>
1004878e:	1e03      	subs	r3, r0, #0
10048790:	d101      	bne.n	10048796 <HAL_RCC_ClockConfig+0xc2>
    {
      return HAL_ERROR;
10048792:	2301      	movs	r3, #1
10048794:	e041      	b.n	1004881a <HAL_RCC_ClockConfig+0x146>
    }

    /* Configure the DIRECT_HSE multiplication factor */
    __HAL_RCC_DIRECT_HSE_PRESC_CONFIG(RCC_ClkInitStruct->SYSCLKDivider);
10048796:	4b24      	ldr	r3, [pc, #144]	@ (10048828 <HAL_RCC_ClockConfig+0x154>)
10048798:	689b      	ldr	r3, [r3, #8]
1004879a:	22e0      	movs	r2, #224	@ 0xe0
1004879c:	4393      	bics	r3, r2
1004879e:	0019      	movs	r1, r3
100487a0:	687b      	ldr	r3, [r7, #4]
100487a2:	685a      	ldr	r2, [r3, #4]
100487a4:	4b20      	ldr	r3, [pc, #128]	@ (10048828 <HAL_RCC_ClockConfig+0x154>)
100487a6:	430a      	orrs	r2, r1
100487a8:	609a      	str	r2, [r3, #8]
  /*----------------------- FLASH Latency Configuration ------------------------*/
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the FLASH clock */

  /* Setup flash wait states because according the system clock frequency */
  if (FLatency != __HAL_FLASH_GET_WAIT_STATES())
100487aa:	4b1e      	ldr	r3, [pc, #120]	@ (10048824 <HAL_RCC_ClockConfig+0x150>)
100487ac:	685b      	ldr	r3, [r3, #4]
100487ae:	2230      	movs	r2, #48	@ 0x30
100487b0:	4013      	ands	r3, r2
100487b2:	683a      	ldr	r2, [r7, #0]
100487b4:	429a      	cmp	r2, r3
100487b6:	d01d      	beq.n	100487f4 <HAL_RCC_ClockConfig+0x120>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_CONFIG register */
    __HAL_FLASH_SET_WAIT_STATES(FLatency);
100487b8:	4b1a      	ldr	r3, [pc, #104]	@ (10048824 <HAL_RCC_ClockConfig+0x150>)
100487ba:	685b      	ldr	r3, [r3, #4]
100487bc:	2230      	movs	r2, #48	@ 0x30
100487be:	4393      	bics	r3, r2
100487c0:	0019      	movs	r1, r3
100487c2:	4b18      	ldr	r3, [pc, #96]	@ (10048824 <HAL_RCC_ClockConfig+0x150>)
100487c4:	683a      	ldr	r2, [r7, #0]
100487c6:	430a      	orrs	r2, r1
100487c8:	605a      	str	r2, [r3, #4]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
100487ca:	f7fc f8b7 	bl	1004493c <HAL_GetTick>
100487ce:	0003      	movs	r3, r0
100487d0:	60fb      	str	r3, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_CONFIG register */
    while (__HAL_FLASH_GET_WAIT_STATES() != FLatency)
100487d2:	e008      	b.n	100487e6 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
100487d4:	f7fc f8b2 	bl	1004493c <HAL_GetTick>
100487d8:	0002      	movs	r2, r0
100487da:	68fb      	ldr	r3, [r7, #12]
100487dc:	1ad3      	subs	r3, r2, r3
100487de:	2b02      	cmp	r3, #2
100487e0:	d901      	bls.n	100487e6 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
100487e2:	2303      	movs	r3, #3
100487e4:	e019      	b.n	1004881a <HAL_RCC_ClockConfig+0x146>
    while (__HAL_FLASH_GET_WAIT_STATES() != FLatency)
100487e6:	4b0f      	ldr	r3, [pc, #60]	@ (10048824 <HAL_RCC_ClockConfig+0x150>)
100487e8:	685b      	ldr	r3, [r3, #4]
100487ea:	2230      	movs	r2, #48	@ 0x30
100487ec:	4013      	ands	r3, r2
100487ee:	683a      	ldr	r2, [r7, #0]
100487f0:	429a      	cmp	r2, r3
100487f2:	d1ef      	bne.n	100487d4 <HAL_RCC_ClockConfig+0x100>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  for (volatile int i = 0; i < 6; i++)
100487f4:	2300      	movs	r3, #0
100487f6:	60bb      	str	r3, [r7, #8]
100487f8:	e003      	b.n	10048802 <HAL_RCC_ClockConfig+0x12e>
  {
    __asm("NOP");
100487fa:	46c0      	nop			@ (mov r8, r8)
  for (volatile int i = 0; i < 6; i++)
100487fc:	68bb      	ldr	r3, [r7, #8]
100487fe:	3301      	adds	r3, #1
10048800:	60bb      	str	r3, [r7, #8]
10048802:	68bb      	ldr	r3, [r7, #8]
10048804:	2b05      	cmp	r3, #5
10048806:	ddf8      	ble.n	100487fa <HAL_RCC_ClockConfig+0x126>
  }
  SystemCoreClockUpdate();
10048808:	f7fb f806 	bl	10043818 <SystemCoreClockUpdate>

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
1004880c:	f7fc f8a0 	bl	10044950 <HAL_GetTickPrio>
10048810:	0003      	movs	r3, r0
10048812:	0018      	movs	r0, r3
10048814:	f7fc f838 	bl	10044888 <HAL_InitTick>
10048818:	0003      	movs	r3, r0
}
1004881a:	0018      	movs	r0, r3
1004881c:	46bd      	mov	sp, r7
1004881e:	b004      	add	sp, #16
10048820:	bd80      	pop	{r7, pc}
10048822:	46c0      	nop			@ (mov r8, r8)
10048824:	40001000 	.word	0x40001000
10048828:	48400000 	.word	0x48400000

1004882c <HAL_RCC_GetSysClockFreq>:
  *         content of the SystemCoreClock CMSIS variable
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
1004882c:	b580      	push	{r7, lr}
1004882e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
10048830:	4b02      	ldr	r3, [pc, #8]	@ (1004883c <HAL_RCC_GetSysClockFreq+0x10>)
10048832:	681b      	ldr	r3, [r3, #0]
}
10048834:	0018      	movs	r0, r3
10048836:	46bd      	mov	sp, r7
10048838:	bd80      	pop	{r7, pc}
1004883a:	46c0      	nop			@ (mov r8, r8)
1004883c:	20000b08 	.word	0x20000b08

10048840 <LL_RCC_LSCO_SetSource>:
{
10048840:	b580      	push	{r7, lr}
10048842:	b082      	sub	sp, #8
10048844:	af00      	add	r7, sp, #0
10048846:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_CLKSLOWSEL, Source);
10048848:	4b06      	ldr	r3, [pc, #24]	@ (10048864 <LL_RCC_LSCO_SetSource+0x24>)
1004884a:	689b      	ldr	r3, [r3, #8]
1004884c:	4a06      	ldr	r2, [pc, #24]	@ (10048868 <LL_RCC_LSCO_SetSource+0x28>)
1004884e:	4013      	ands	r3, r2
10048850:	0019      	movs	r1, r3
10048852:	4b04      	ldr	r3, [pc, #16]	@ (10048864 <LL_RCC_LSCO_SetSource+0x24>)
10048854:	687a      	ldr	r2, [r7, #4]
10048856:	430a      	orrs	r2, r1
10048858:	609a      	str	r2, [r3, #8]
}
1004885a:	46c0      	nop			@ (mov r8, r8)
1004885c:	46bd      	mov	sp, r7
1004885e:	b002      	add	sp, #8
10048860:	bd80      	pop	{r7, pc}
10048862:	46c0      	nop			@ (mov r8, r8)
10048864:	48400000 	.word	0x48400000
10048868:	fffe7fff 	.word	0xfffe7fff

1004886c <LL_RCC_SetRFClock>:
{
1004886c:	b580      	push	{r7, lr}
1004886e:	b082      	sub	sp, #8
10048870:	af00      	add	r7, sp, #0
10048872:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->APB2ENR, RCC_APB2ENR_CLKBLEDIV, Source);
10048874:	4b06      	ldr	r3, [pc, #24]	@ (10048890 <LL_RCC_SetRFClock+0x24>)
10048876:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
10048878:	2206      	movs	r2, #6
1004887a:	4393      	bics	r3, r2
1004887c:	0019      	movs	r1, r3
1004887e:	4b04      	ldr	r3, [pc, #16]	@ (10048890 <LL_RCC_SetRFClock+0x24>)
10048880:	687a      	ldr	r2, [r7, #4]
10048882:	430a      	orrs	r2, r1
10048884:	661a      	str	r2, [r3, #96]	@ 0x60
}
10048886:	46c0      	nop			@ (mov r8, r8)
10048888:	46bd      	mov	sp, r7
1004888a:	b002      	add	sp, #8
1004888c:	bd80      	pop	{r7, pc}
1004888e:	46c0      	nop			@ (mov r8, r8)
10048890:	48400000 	.word	0x48400000

10048894 <LL_RCC_SetSMPSPrescaler>:
{
10048894:	b580      	push	{r7, lr}
10048896:	b082      	sub	sp, #8
10048898:	af00      	add	r7, sp, #0
1004889a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SMPSDIV, Prescaler);
1004889c:	4b06      	ldr	r3, [pc, #24]	@ (100488b8 <LL_RCC_SetSMPSPrescaler+0x24>)
1004889e:	689b      	ldr	r3, [r3, #8]
100488a0:	4a06      	ldr	r2, [pc, #24]	@ (100488bc <LL_RCC_SetSMPSPrescaler+0x28>)
100488a2:	4013      	ands	r3, r2
100488a4:	0019      	movs	r1, r3
100488a6:	4b04      	ldr	r3, [pc, #16]	@ (100488b8 <LL_RCC_SetSMPSPrescaler+0x24>)
100488a8:	687a      	ldr	r2, [r7, #4]
100488aa:	430a      	orrs	r2, r1
100488ac:	609a      	str	r2, [r3, #8]
}
100488ae:	46c0      	nop			@ (mov r8, r8)
100488b0:	46bd      	mov	sp, r7
100488b2:	b002      	add	sp, #8
100488b4:	bd80      	pop	{r7, pc}
100488b6:	46c0      	nop			@ (mov r8, r8)
100488b8:	48400000 	.word	0x48400000
100488bc:	ffffefff 	.word	0xffffefff

100488c0 <LL_RCC_SetSPI2I2SClockSource>:
{
100488c0:	b580      	push	{r7, lr}
100488c2:	b082      	sub	sp, #8
100488c4:	af00      	add	r7, sp, #0
100488c6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SPI2I2SCLKSEL, Source);
100488c8:	4b06      	ldr	r3, [pc, #24]	@ (100488e4 <LL_RCC_SetSPI2I2SClockSource+0x24>)
100488ca:	689b      	ldr	r3, [r3, #8]
100488cc:	4a06      	ldr	r2, [pc, #24]	@ (100488e8 <LL_RCC_SetSPI2I2SClockSource+0x28>)
100488ce:	4013      	ands	r3, r2
100488d0:	0019      	movs	r1, r3
100488d2:	4b04      	ldr	r3, [pc, #16]	@ (100488e4 <LL_RCC_SetSPI2I2SClockSource+0x24>)
100488d4:	687a      	ldr	r2, [r7, #4]
100488d6:	430a      	orrs	r2, r1
100488d8:	609a      	str	r2, [r3, #8]
}
100488da:	46c0      	nop			@ (mov r8, r8)
100488dc:	46bd      	mov	sp, r7
100488de:	b002      	add	sp, #8
100488e0:	bd80      	pop	{r7, pc}
100488e2:	46c0      	nop			@ (mov r8, r8)
100488e4:	48400000 	.word	0x48400000
100488e8:	ff7fffff 	.word	0xff7fffff

100488ec <LL_RCC_SetSPI3I2SClockSource>:
{
100488ec:	b580      	push	{r7, lr}
100488ee:	b082      	sub	sp, #8
100488f0:	af00      	add	r7, sp, #0
100488f2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SPI3I2SCLKSEL, Source);
100488f4:	4b06      	ldr	r3, [pc, #24]	@ (10048910 <LL_RCC_SetSPI3I2SClockSource+0x24>)
100488f6:	689b      	ldr	r3, [r3, #8]
100488f8:	4a06      	ldr	r2, [pc, #24]	@ (10048914 <LL_RCC_SetSPI3I2SClockSource+0x28>)
100488fa:	4013      	ands	r3, r2
100488fc:	0019      	movs	r1, r3
100488fe:	4b04      	ldr	r3, [pc, #16]	@ (10048910 <LL_RCC_SetSPI3I2SClockSource+0x24>)
10048900:	687a      	ldr	r2, [r7, #4]
10048902:	430a      	orrs	r2, r1
10048904:	609a      	str	r2, [r3, #8]
}
10048906:	46c0      	nop			@ (mov r8, r8)
10048908:	46bd      	mov	sp, r7
1004890a:	b002      	add	sp, #8
1004890c:	bd80      	pop	{r7, pc}
1004890e:	46c0      	nop			@ (mov r8, r8)
10048910:	48400000 	.word	0x48400000
10048914:	ffbfffff 	.word	0xffbfffff

10048918 <HAL_RCCEx_PeriphCLKConfig>:
  *  @note   (*) Peripherals are not available on all devices
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
10048918:	b580      	push	{r7, lr}
1004891a:	b082      	sub	sp, #8
1004891c:	af00      	add	r7, sp, #0
1004891e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RF_BLE clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RF) == RCC_PERIPHCLK_RF))
10048920:	687b      	ldr	r3, [r7, #4]
10048922:	681b      	ldr	r3, [r3, #0]
10048924:	2201      	movs	r2, #1
10048926:	4013      	ands	r3, r2
10048928:	d004      	beq.n	10048934 <HAL_RCCEx_PeriphCLKConfig+0x1c>
  {
    assert_param(IS_RCC_RF_BLE_CLOCK_SOURCE(PeriphClkInit->RFClockSelection));
    __HAL_RCC_RF_CLK_SET_CONFIG(PeriphClkInit->RFClockSelection);
1004892a:	687b      	ldr	r3, [r7, #4]
1004892c:	691b      	ldr	r3, [r3, #16]
1004892e:	0018      	movs	r0, r3
10048930:	f7ff ff9c 	bl	1004886c <LL_RCC_SetRFClock>
  }

  /*-------------------------- SMPS clock configuration -------------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS))
10048934:	687b      	ldr	r3, [r7, #4]
10048936:	681b      	ldr	r3, [r3, #0]
10048938:	2202      	movs	r2, #2
1004893a:	4013      	ands	r3, r2
1004893c:	d004      	beq.n	10048948 <HAL_RCCEx_PeriphCLKConfig+0x30>
  {
    assert_param(IS_RCC_SMPS_CLOCK_PRESC(PeriphClkInit->SmpsDivSelection));
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
1004893e:	687b      	ldr	r3, [r7, #4]
10048940:	695b      	ldr	r3, [r3, #20]
10048942:	0018      	movs	r0, r3
10048944:	f7ff ffa6 	bl	10048894 <LL_RCC_SetSMPSPrescaler>
  }

#if defined(SPI2)
  /*-------------------------- SPI2_I2S clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI2_I2S) == RCC_PERIPHCLK_SPI2_I2S))
10048948:	687b      	ldr	r3, [r7, #4]
1004894a:	681b      	ldr	r3, [r3, #0]
1004894c:	2204      	movs	r2, #4
1004894e:	4013      	ands	r3, r2
10048950:	d004      	beq.n	1004895c <HAL_RCCEx_PeriphCLKConfig+0x44>
  {
    assert_param(IS_RCC_SPI2I2S_CLOCK_SOURCE(PeriphClkInit->SPI2I2SClockSelection));
    __HAL_RCC_SPI2I2S_CLK_CONFIG(PeriphClkInit->SPI2I2SClockSelection);
10048952:	687b      	ldr	r3, [r7, #4]
10048954:	685b      	ldr	r3, [r3, #4]
10048956:	0018      	movs	r0, r3
10048958:	f7ff ffb2 	bl	100488c0 <LL_RCC_SetSPI2I2SClockSource>
  }
#endif
#if defined(SPI3)
  /*-------------------------- SPI3_I2S clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI3_I2S) == RCC_PERIPHCLK_SPI3_I2S))
1004895c:	687b      	ldr	r3, [r7, #4]
1004895e:	681b      	ldr	r3, [r3, #0]
10048960:	2208      	movs	r2, #8
10048962:	4013      	ands	r3, r2
10048964:	d004      	beq.n	10048970 <HAL_RCCEx_PeriphCLKConfig+0x58>
  {
    assert_param(IS_RCC_SPI3I2S_CLOCK_SOURCE(PeriphClkInit->SPI3I2SClockSelection));
    __HAL_RCC_SPI3I2S_CLK_CONFIG(PeriphClkInit->SPI3I2SClockSelection);
10048966:	687b      	ldr	r3, [r7, #4]
10048968:	689b      	ldr	r3, [r3, #8]
1004896a:	0018      	movs	r0, r3
1004896c:	f7ff ffbe 	bl	100488ec <LL_RCC_SetSPI3I2SClockSource>
    __HAL_RCC_LPUART1_CLK_CONFIG(PeriphClkInit->LPUART1ClockSelection);
  }
#endif /* RCC_CFGR_LPUCLKSEL */

  /*-------------------------- RTC WDG BLEWKUP clock source configuration ---------------------*/
  if ((((PeriphClkInit->RTCWDGBLEWKUPClockSelection) & RCC_PERIPHCLK_RTC_WDG_BLEWKUP) == RCC_PERIPHCLK_RTC_WDG_BLEWKUP))
10048970:	687b      	ldr	r3, [r7, #4]
10048972:	68db      	ldr	r3, [r3, #12]
10048974:	2220      	movs	r2, #32
10048976:	4013      	ands	r3, r2
10048978:	d004      	beq.n	10048984 <HAL_RCCEx_PeriphCLKConfig+0x6c>
  {
    assert_param(IS_RCC_RTC_WDG_BLEWKUP_CLOCK_SOURCE(PeriphClkInit->RTCWDGBLEWKUPClockSelection));
    __HAL_RCC_RTC_WDG_BLEWKUP_CLK_CONFIG(PeriphClkInit->RTCWDGBLEWKUPClockSelection);
1004897a:	687b      	ldr	r3, [r7, #4]
1004897c:	68db      	ldr	r3, [r3, #12]
1004897e:	0018      	movs	r0, r3
10048980:	f7ff ff5e 	bl	10048840 <LL_RCC_LSCO_SetSource>
  }

  return HAL_OK;
10048984:	2300      	movs	r3, #0
}
10048986:	0018      	movs	r0, r3
10048988:	46bd      	mov	sp, r7
1004898a:	b002      	add	sp, #8
1004898c:	bd80      	pop	{r7, pc}
	...

10048990 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
10048990:	b580      	push	{r7, lr}
10048992:	b084      	sub	sp, #16
10048994:	af00      	add	r7, sp, #0
10048996:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
10048998:	687b      	ldr	r3, [r7, #4]
1004899a:	2b00      	cmp	r3, #0
1004899c:	d101      	bne.n	100489a2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
1004899e:	2301      	movs	r3, #1
100489a0:	e0a8      	b.n	10048af4 <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
100489a2:	687b      	ldr	r3, [r7, #4]
100489a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
100489a6:	2b00      	cmp	r3, #0
100489a8:	d109      	bne.n	100489be <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
100489aa:	687b      	ldr	r3, [r7, #4]
100489ac:	685a      	ldr	r2, [r3, #4]
100489ae:	2382      	movs	r3, #130	@ 0x82
100489b0:	005b      	lsls	r3, r3, #1
100489b2:	429a      	cmp	r2, r3
100489b4:	d009      	beq.n	100489ca <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
100489b6:	687b      	ldr	r3, [r7, #4]
100489b8:	2200      	movs	r2, #0
100489ba:	61da      	str	r2, [r3, #28]
100489bc:	e005      	b.n	100489ca <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
100489be:	687b      	ldr	r3, [r7, #4]
100489c0:	2200      	movs	r2, #0
100489c2:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
100489c4:	687b      	ldr	r3, [r7, #4]
100489c6:	2200      	movs	r2, #0
100489c8:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
100489ca:	687b      	ldr	r3, [r7, #4]
100489cc:	2200      	movs	r2, #0
100489ce:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
100489d0:	687b      	ldr	r3, [r7, #4]
100489d2:	225d      	movs	r2, #93	@ 0x5d
100489d4:	5c9b      	ldrb	r3, [r3, r2]
100489d6:	b2db      	uxtb	r3, r3
100489d8:	2b00      	cmp	r3, #0
100489da:	d107      	bne.n	100489ec <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
100489dc:	687b      	ldr	r3, [r7, #4]
100489de:	225c      	movs	r2, #92	@ 0x5c
100489e0:	2100      	movs	r1, #0
100489e2:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
100489e4:	687b      	ldr	r3, [r7, #4]
100489e6:	0018      	movs	r0, r3
100489e8:	f7fa fc36 	bl	10043258 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
100489ec:	687b      	ldr	r3, [r7, #4]
100489ee:	225d      	movs	r2, #93	@ 0x5d
100489f0:	2102      	movs	r1, #2
100489f2:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
100489f4:	687b      	ldr	r3, [r7, #4]
100489f6:	681b      	ldr	r3, [r3, #0]
100489f8:	681a      	ldr	r2, [r3, #0]
100489fa:	687b      	ldr	r3, [r7, #4]
100489fc:	681b      	ldr	r3, [r3, #0]
100489fe:	2140      	movs	r1, #64	@ 0x40
10048a00:	438a      	bics	r2, r1
10048a02:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
10048a04:	687b      	ldr	r3, [r7, #4]
10048a06:	68da      	ldr	r2, [r3, #12]
10048a08:	23e0      	movs	r3, #224	@ 0xe0
10048a0a:	00db      	lsls	r3, r3, #3
10048a0c:	429a      	cmp	r2, r3
10048a0e:	d902      	bls.n	10048a16 <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
10048a10:	2300      	movs	r3, #0
10048a12:	60fb      	str	r3, [r7, #12]
10048a14:	e002      	b.n	10048a1c <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
10048a16:	2380      	movs	r3, #128	@ 0x80
10048a18:	015b      	lsls	r3, r3, #5
10048a1a:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
10048a1c:	687b      	ldr	r3, [r7, #4]
10048a1e:	68da      	ldr	r2, [r3, #12]
10048a20:	23f0      	movs	r3, #240	@ 0xf0
10048a22:	011b      	lsls	r3, r3, #4
10048a24:	429a      	cmp	r2, r3
10048a26:	d008      	beq.n	10048a3a <HAL_SPI_Init+0xaa>
10048a28:	687b      	ldr	r3, [r7, #4]
10048a2a:	68da      	ldr	r2, [r3, #12]
10048a2c:	23e0      	movs	r3, #224	@ 0xe0
10048a2e:	00db      	lsls	r3, r3, #3
10048a30:	429a      	cmp	r2, r3
10048a32:	d002      	beq.n	10048a3a <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
10048a34:	687b      	ldr	r3, [r7, #4]
10048a36:	2200      	movs	r2, #0
10048a38:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
10048a3a:	687b      	ldr	r3, [r7, #4]
10048a3c:	685a      	ldr	r2, [r3, #4]
10048a3e:	2382      	movs	r3, #130	@ 0x82
10048a40:	005b      	lsls	r3, r3, #1
10048a42:	401a      	ands	r2, r3
10048a44:	687b      	ldr	r3, [r7, #4]
10048a46:	6899      	ldr	r1, [r3, #8]
10048a48:	2384      	movs	r3, #132	@ 0x84
10048a4a:	021b      	lsls	r3, r3, #8
10048a4c:	400b      	ands	r3, r1
10048a4e:	431a      	orrs	r2, r3
10048a50:	687b      	ldr	r3, [r7, #4]
10048a52:	691b      	ldr	r3, [r3, #16]
10048a54:	2102      	movs	r1, #2
10048a56:	400b      	ands	r3, r1
10048a58:	431a      	orrs	r2, r3
10048a5a:	687b      	ldr	r3, [r7, #4]
10048a5c:	695b      	ldr	r3, [r3, #20]
10048a5e:	2101      	movs	r1, #1
10048a60:	400b      	ands	r3, r1
10048a62:	431a      	orrs	r2, r3
10048a64:	687b      	ldr	r3, [r7, #4]
10048a66:	6999      	ldr	r1, [r3, #24]
10048a68:	2380      	movs	r3, #128	@ 0x80
10048a6a:	009b      	lsls	r3, r3, #2
10048a6c:	400b      	ands	r3, r1
10048a6e:	431a      	orrs	r2, r3
10048a70:	687b      	ldr	r3, [r7, #4]
10048a72:	69db      	ldr	r3, [r3, #28]
10048a74:	2138      	movs	r1, #56	@ 0x38
10048a76:	400b      	ands	r3, r1
10048a78:	431a      	orrs	r2, r3
10048a7a:	687b      	ldr	r3, [r7, #4]
10048a7c:	6a1b      	ldr	r3, [r3, #32]
10048a7e:	2180      	movs	r1, #128	@ 0x80
10048a80:	400b      	ands	r3, r1
10048a82:	431a      	orrs	r2, r3
10048a84:	0011      	movs	r1, r2
10048a86:	687b      	ldr	r3, [r7, #4]
10048a88:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
10048a8a:	2380      	movs	r3, #128	@ 0x80
10048a8c:	019b      	lsls	r3, r3, #6
10048a8e:	401a      	ands	r2, r3
10048a90:	687b      	ldr	r3, [r7, #4]
10048a92:	681b      	ldr	r3, [r3, #0]
10048a94:	430a      	orrs	r2, r1
10048a96:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
10048a98:	687b      	ldr	r3, [r7, #4]
10048a9a:	699b      	ldr	r3, [r3, #24]
10048a9c:	0c1b      	lsrs	r3, r3, #16
10048a9e:	2204      	movs	r2, #4
10048aa0:	401a      	ands	r2, r3
10048aa2:	687b      	ldr	r3, [r7, #4]
10048aa4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
10048aa6:	2110      	movs	r1, #16
10048aa8:	400b      	ands	r3, r1
10048aaa:	431a      	orrs	r2, r3
10048aac:	687b      	ldr	r3, [r7, #4]
10048aae:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
10048ab0:	2108      	movs	r1, #8
10048ab2:	400b      	ands	r3, r1
10048ab4:	431a      	orrs	r2, r3
10048ab6:	687b      	ldr	r3, [r7, #4]
10048ab8:	68d9      	ldr	r1, [r3, #12]
10048aba:	23f0      	movs	r3, #240	@ 0xf0
10048abc:	011b      	lsls	r3, r3, #4
10048abe:	400b      	ands	r3, r1
10048ac0:	431a      	orrs	r2, r3
10048ac2:	0011      	movs	r1, r2
10048ac4:	68fa      	ldr	r2, [r7, #12]
10048ac6:	2380      	movs	r3, #128	@ 0x80
10048ac8:	015b      	lsls	r3, r3, #5
10048aca:	401a      	ands	r2, r3
10048acc:	687b      	ldr	r3, [r7, #4]
10048ace:	681b      	ldr	r3, [r3, #0]
10048ad0:	430a      	orrs	r2, r1
10048ad2:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
10048ad4:	687b      	ldr	r3, [r7, #4]
10048ad6:	681b      	ldr	r3, [r3, #0]
10048ad8:	69da      	ldr	r2, [r3, #28]
10048ada:	687b      	ldr	r3, [r7, #4]
10048adc:	681b      	ldr	r3, [r3, #0]
10048ade:	4907      	ldr	r1, [pc, #28]	@ (10048afc <HAL_SPI_Init+0x16c>)
10048ae0:	400a      	ands	r2, r1
10048ae2:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
10048ae4:	687b      	ldr	r3, [r7, #4]
10048ae6:	2200      	movs	r2, #0
10048ae8:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
10048aea:	687b      	ldr	r3, [r7, #4]
10048aec:	225d      	movs	r2, #93	@ 0x5d
10048aee:	2101      	movs	r1, #1
10048af0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
10048af2:	2300      	movs	r3, #0
}
10048af4:	0018      	movs	r0, r3
10048af6:	46bd      	mov	sp, r7
10048af8:	b004      	add	sp, #16
10048afa:	bd80      	pop	{r7, pc}
10048afc:	fffff7ff 	.word	0xfffff7ff

10048b00 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
10048b00:	b580      	push	{r7, lr}
10048b02:	b082      	sub	sp, #8
10048b04:	af00      	add	r7, sp, #0
10048b06:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
10048b08:	687b      	ldr	r3, [r7, #4]
10048b0a:	2b00      	cmp	r3, #0
10048b0c:	d101      	bne.n	10048b12 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
10048b0e:	2301      	movs	r3, #1
10048b10:	e046      	b.n	10048ba0 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
10048b12:	687b      	ldr	r3, [r7, #4]
10048b14:	2288      	movs	r2, #136	@ 0x88
10048b16:	589b      	ldr	r3, [r3, r2]
10048b18:	2b00      	cmp	r3, #0
10048b1a:	d107      	bne.n	10048b2c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
10048b1c:	687b      	ldr	r3, [r7, #4]
10048b1e:	2284      	movs	r2, #132	@ 0x84
10048b20:	2100      	movs	r1, #0
10048b22:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
10048b24:	687b      	ldr	r3, [r7, #4]
10048b26:	0018      	movs	r0, r3
10048b28:	f7fa fbd0 	bl	100432cc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
10048b2c:	687b      	ldr	r3, [r7, #4]
10048b2e:	2288      	movs	r2, #136	@ 0x88
10048b30:	2124      	movs	r1, #36	@ 0x24
10048b32:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
10048b34:	687b      	ldr	r3, [r7, #4]
10048b36:	681b      	ldr	r3, [r3, #0]
10048b38:	681a      	ldr	r2, [r3, #0]
10048b3a:	687b      	ldr	r3, [r7, #4]
10048b3c:	681b      	ldr	r3, [r3, #0]
10048b3e:	2101      	movs	r1, #1
10048b40:	438a      	bics	r2, r1
10048b42:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
10048b44:	687b      	ldr	r3, [r7, #4]
10048b46:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
10048b48:	2b00      	cmp	r3, #0
10048b4a:	d003      	beq.n	10048b54 <HAL_UART_Init+0x54>
  {
    UART_AdvFeatureConfig(huart);
10048b4c:	687b      	ldr	r3, [r7, #4]
10048b4e:	0018      	movs	r0, r3
10048b50:	f000 f992 	bl	10048e78 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
10048b54:	687b      	ldr	r3, [r7, #4]
10048b56:	0018      	movs	r0, r3
10048b58:	f000 f828 	bl	10048bac <UART_SetConfig>
10048b5c:	0003      	movs	r3, r0
10048b5e:	2b01      	cmp	r3, #1
10048b60:	d101      	bne.n	10048b66 <HAL_UART_Init+0x66>
  {
    return HAL_ERROR;
10048b62:	2301      	movs	r3, #1
10048b64:	e01c      	b.n	10048ba0 <HAL_UART_Init+0xa0>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
10048b66:	687b      	ldr	r3, [r7, #4]
10048b68:	681b      	ldr	r3, [r3, #0]
10048b6a:	685a      	ldr	r2, [r3, #4]
10048b6c:	687b      	ldr	r3, [r7, #4]
10048b6e:	681b      	ldr	r3, [r3, #0]
10048b70:	490d      	ldr	r1, [pc, #52]	@ (10048ba8 <HAL_UART_Init+0xa8>)
10048b72:	400a      	ands	r2, r1
10048b74:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
10048b76:	687b      	ldr	r3, [r7, #4]
10048b78:	681b      	ldr	r3, [r3, #0]
10048b7a:	689a      	ldr	r2, [r3, #8]
10048b7c:	687b      	ldr	r3, [r7, #4]
10048b7e:	681b      	ldr	r3, [r3, #0]
10048b80:	212a      	movs	r1, #42	@ 0x2a
10048b82:	438a      	bics	r2, r1
10048b84:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
10048b86:	687b      	ldr	r3, [r7, #4]
10048b88:	681b      	ldr	r3, [r3, #0]
10048b8a:	681a      	ldr	r2, [r3, #0]
10048b8c:	687b      	ldr	r3, [r7, #4]
10048b8e:	681b      	ldr	r3, [r3, #0]
10048b90:	2101      	movs	r1, #1
10048b92:	430a      	orrs	r2, r1
10048b94:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
10048b96:	687b      	ldr	r3, [r7, #4]
10048b98:	0018      	movs	r0, r3
10048b9a:	f000 fa21 	bl	10048fe0 <UART_CheckIdleState>
10048b9e:	0003      	movs	r3, r0
}
10048ba0:	0018      	movs	r0, r3
10048ba2:	46bd      	mov	sp, r7
10048ba4:	b002      	add	sp, #8
10048ba6:	bd80      	pop	{r7, pc}
10048ba8:	ffffb7ff 	.word	0xffffb7ff

10048bac <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
10048bac:	b5b0      	push	{r4, r5, r7, lr}
10048bae:	b090      	sub	sp, #64	@ 0x40
10048bb0:	af00      	add	r7, sp, #0
10048bb2:	6278      	str	r0, [r7, #36]	@ 0x24
  uint32_t tmpreg;
  uint16_t brrtemp;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
10048bb4:	231b      	movs	r3, #27
10048bb6:	2220      	movs	r2, #32
10048bb8:	189b      	adds	r3, r3, r2
10048bba:	19db      	adds	r3, r3, r7
10048bbc:	2200      	movs	r2, #0
10048bbe:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
10048bc0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10048bc2:	689a      	ldr	r2, [r3, #8]
10048bc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10048bc6:	691b      	ldr	r3, [r3, #16]
10048bc8:	431a      	orrs	r2, r3
10048bca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10048bcc:	695b      	ldr	r3, [r3, #20]
10048bce:	431a      	orrs	r2, r3
10048bd0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10048bd2:	69db      	ldr	r3, [r3, #28]
10048bd4:	4313      	orrs	r3, r2
10048bd6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
10048bd8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10048bda:	681b      	ldr	r3, [r3, #0]
10048bdc:	681b      	ldr	r3, [r3, #0]
10048bde:	4aa0      	ldr	r2, [pc, #640]	@ (10048e60 <UART_SetConfig+0x2b4>)
10048be0:	4013      	ands	r3, r2
10048be2:	0019      	movs	r1, r3
10048be4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10048be6:	681a      	ldr	r2, [r3, #0]
10048be8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
10048bea:	430b      	orrs	r3, r1
10048bec:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
10048bee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10048bf0:	681b      	ldr	r3, [r3, #0]
10048bf2:	685b      	ldr	r3, [r3, #4]
10048bf4:	4a9b      	ldr	r2, [pc, #620]	@ (10048e64 <UART_SetConfig+0x2b8>)
10048bf6:	4013      	ands	r3, r2
10048bf8:	0018      	movs	r0, r3
10048bfa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10048bfc:	68d9      	ldr	r1, [r3, #12]
10048bfe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10048c00:	681a      	ldr	r2, [r3, #0]
10048c02:	0003      	movs	r3, r0
10048c04:	430b      	orrs	r3, r1
10048c06:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
10048c08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10048c0a:	699b      	ldr	r3, [r3, #24]
10048c0c:	63fb      	str	r3, [r7, #60]	@ 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
10048c0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10048c10:	681b      	ldr	r3, [r3, #0]
10048c12:	4a95      	ldr	r2, [pc, #596]	@ (10048e68 <UART_SetConfig+0x2bc>)
10048c14:	4293      	cmp	r3, r2
10048c16:	d004      	beq.n	10048c22 <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
10048c18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10048c1a:	6a1b      	ldr	r3, [r3, #32]
10048c1c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
10048c1e:	4313      	orrs	r3, r2
10048c20:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
10048c22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10048c24:	681b      	ldr	r3, [r3, #0]
10048c26:	689b      	ldr	r3, [r3, #8]
10048c28:	4a90      	ldr	r2, [pc, #576]	@ (10048e6c <UART_SetConfig+0x2c0>)
10048c2a:	4013      	ands	r3, r2
10048c2c:	0019      	movs	r1, r3
10048c2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10048c30:	681a      	ldr	r2, [r3, #0]
10048c32:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
10048c34:	430b      	orrs	r3, r1
10048c36:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
10048c38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10048c3a:	681b      	ldr	r3, [r3, #0]
10048c3c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
10048c3e:	220f      	movs	r2, #15
10048c40:	4393      	bics	r3, r2
10048c42:	0018      	movs	r0, r3
10048c44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10048c46:	6a59      	ldr	r1, [r3, #36]	@ 0x24
10048c48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10048c4a:	681a      	ldr	r2, [r3, #0]
10048c4c:	0003      	movs	r3, r0
10048c4e:	430b      	orrs	r3, r1
10048c50:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
10048c52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10048c54:	681b      	ldr	r3, [r3, #0]
10048c56:	4a84      	ldr	r2, [pc, #528]	@ (10048e68 <UART_SetConfig+0x2bc>)
10048c58:	4293      	cmp	r3, r2
10048c5a:	d16a      	bne.n	10048d32 <UART_SetConfig+0x186>
  {
    /* Retrieve frequency clock */
#if defined(RCC_CFGR_LPUCLKSEL)
    pclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_LPUART1);
#else
    pclk = UART_PERIPHCLK;
10048c5c:	4b84      	ldr	r3, [pc, #528]	@ (10048e70 <UART_SetConfig+0x2c4>)
10048c5e:	637b      	str	r3, [r7, #52]	@ 0x34
#endif /* RCC_CFGR_LPUCLKSEL */

    /* If proper clock source reported */
    if (pclk != 0U)
10048c60:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
10048c62:	2b00      	cmp	r3, #0
10048c64:	d100      	bne.n	10048c68 <UART_SetConfig+0xbc>
10048c66:	e0e3      	b.n	10048e30 <UART_SetConfig+0x284>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
10048c68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10048c6a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
10048c6c:	4b81      	ldr	r3, [pc, #516]	@ (10048e74 <UART_SetConfig+0x2c8>)
10048c6e:	0052      	lsls	r2, r2, #1
10048c70:	5ad3      	ldrh	r3, [r2, r3]
10048c72:	0019      	movs	r1, r3
10048c74:	6b78      	ldr	r0, [r7, #52]	@ 0x34
10048c76:	f7f7 fa61 	bl	1004013c <__udivsi3>
10048c7a:	0003      	movs	r3, r0
10048c7c:	62bb      	str	r3, [r7, #40]	@ 0x28

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
10048c7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10048c80:	685a      	ldr	r2, [r3, #4]
10048c82:	0013      	movs	r3, r2
10048c84:	005b      	lsls	r3, r3, #1
10048c86:	189b      	adds	r3, r3, r2
10048c88:	6aba      	ldr	r2, [r7, #40]	@ 0x28
10048c8a:	429a      	cmp	r2, r3
10048c8c:	d305      	bcc.n	10048c9a <UART_SetConfig+0xee>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
10048c8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10048c90:	685b      	ldr	r3, [r3, #4]
10048c92:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
10048c94:	6aba      	ldr	r2, [r7, #40]	@ 0x28
10048c96:	429a      	cmp	r2, r3
10048c98:	d906      	bls.n	10048ca8 <UART_SetConfig+0xfc>
      {
        ret = HAL_ERROR;
10048c9a:	231b      	movs	r3, #27
10048c9c:	2220      	movs	r2, #32
10048c9e:	189b      	adds	r3, r3, r2
10048ca0:	19db      	adds	r3, r3, r7
10048ca2:	2201      	movs	r2, #1
10048ca4:	701a      	strb	r2, [r3, #0]
10048ca6:	e0c3      	b.n	10048e30 <UART_SetConfig+0x284>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
10048ca8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
10048caa:	61bb      	str	r3, [r7, #24]
10048cac:	2300      	movs	r3, #0
10048cae:	61fb      	str	r3, [r7, #28]
10048cb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10048cb2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
10048cb4:	4b6f      	ldr	r3, [pc, #444]	@ (10048e74 <UART_SetConfig+0x2c8>)
10048cb6:	0052      	lsls	r2, r2, #1
10048cb8:	5ad3      	ldrh	r3, [r2, r3]
10048cba:	613b      	str	r3, [r7, #16]
10048cbc:	2300      	movs	r3, #0
10048cbe:	617b      	str	r3, [r7, #20]
10048cc0:	693a      	ldr	r2, [r7, #16]
10048cc2:	697b      	ldr	r3, [r7, #20]
10048cc4:	69b8      	ldr	r0, [r7, #24]
10048cc6:	69f9      	ldr	r1, [r7, #28]
10048cc8:	f7f7 fbec 	bl	100404a4 <__aeabi_uldivmod>
10048ccc:	0002      	movs	r2, r0
10048cce:	000b      	movs	r3, r1
10048cd0:	0e11      	lsrs	r1, r2, #24
10048cd2:	021d      	lsls	r5, r3, #8
10048cd4:	430d      	orrs	r5, r1
10048cd6:	0214      	lsls	r4, r2, #8
10048cd8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10048cda:	685b      	ldr	r3, [r3, #4]
10048cdc:	085b      	lsrs	r3, r3, #1
10048cde:	60bb      	str	r3, [r7, #8]
10048ce0:	2300      	movs	r3, #0
10048ce2:	60fb      	str	r3, [r7, #12]
10048ce4:	68b8      	ldr	r0, [r7, #8]
10048ce6:	68f9      	ldr	r1, [r7, #12]
10048ce8:	1900      	adds	r0, r0, r4
10048cea:	4169      	adcs	r1, r5
10048cec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10048cee:	685b      	ldr	r3, [r3, #4]
10048cf0:	603b      	str	r3, [r7, #0]
10048cf2:	2300      	movs	r3, #0
10048cf4:	607b      	str	r3, [r7, #4]
10048cf6:	683a      	ldr	r2, [r7, #0]
10048cf8:	687b      	ldr	r3, [r7, #4]
10048cfa:	f7f7 fbd3 	bl	100404a4 <__aeabi_uldivmod>
10048cfe:	0002      	movs	r2, r0
10048d00:	000b      	movs	r3, r1
10048d02:	0013      	movs	r3, r2
10048d04:	633b      	str	r3, [r7, #48]	@ 0x30
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
10048d06:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
10048d08:	23c0      	movs	r3, #192	@ 0xc0
10048d0a:	009b      	lsls	r3, r3, #2
10048d0c:	429a      	cmp	r2, r3
10048d0e:	d309      	bcc.n	10048d24 <UART_SetConfig+0x178>
10048d10:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
10048d12:	2380      	movs	r3, #128	@ 0x80
10048d14:	035b      	lsls	r3, r3, #13
10048d16:	429a      	cmp	r2, r3
10048d18:	d204      	bcs.n	10048d24 <UART_SetConfig+0x178>
        {
          huart->Instance->BRR = usartdiv;
10048d1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10048d1c:	681b      	ldr	r3, [r3, #0]
10048d1e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
10048d20:	60da      	str	r2, [r3, #12]
10048d22:	e085      	b.n	10048e30 <UART_SetConfig+0x284>
        }
        else
        {
          ret = HAL_ERROR;
10048d24:	231b      	movs	r3, #27
10048d26:	2220      	movs	r2, #32
10048d28:	189b      	adds	r3, r3, r2
10048d2a:	19db      	adds	r3, r3, r7
10048d2c:	2201      	movs	r2, #1
10048d2e:	701a      	strb	r2, [r3, #0]
10048d30:	e07e      	b.n	10048e30 <UART_SetConfig+0x284>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
10048d32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10048d34:	69da      	ldr	r2, [r3, #28]
10048d36:	2380      	movs	r3, #128	@ 0x80
10048d38:	021b      	lsls	r3, r3, #8
10048d3a:	429a      	cmp	r2, r3
10048d3c:	d148      	bne.n	10048dd0 <UART_SetConfig+0x224>
  {
    pclk = UART_PERIPHCLK;
10048d3e:	4b4c      	ldr	r3, [pc, #304]	@ (10048e70 <UART_SetConfig+0x2c4>)
10048d40:	637b      	str	r3, [r7, #52]	@ 0x34

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
10048d42:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
10048d44:	2b00      	cmp	r3, #0
10048d46:	d100      	bne.n	10048d4a <UART_SetConfig+0x19e>
10048d48:	e072      	b.n	10048e30 <UART_SetConfig+0x284>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
10048d4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10048d4c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
10048d4e:	4b49      	ldr	r3, [pc, #292]	@ (10048e74 <UART_SetConfig+0x2c8>)
10048d50:	0052      	lsls	r2, r2, #1
10048d52:	5ad3      	ldrh	r3, [r2, r3]
10048d54:	0019      	movs	r1, r3
10048d56:	6b78      	ldr	r0, [r7, #52]	@ 0x34
10048d58:	f7f7 f9f0 	bl	1004013c <__udivsi3>
10048d5c:	0003      	movs	r3, r0
10048d5e:	005a      	lsls	r2, r3, #1
10048d60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10048d62:	685b      	ldr	r3, [r3, #4]
10048d64:	085b      	lsrs	r3, r3, #1
10048d66:	18d2      	adds	r2, r2, r3
10048d68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10048d6a:	685b      	ldr	r3, [r3, #4]
10048d6c:	0019      	movs	r1, r3
10048d6e:	0010      	movs	r0, r2
10048d70:	f7f7 f9e4 	bl	1004013c <__udivsi3>
10048d74:	0003      	movs	r3, r0
10048d76:	633b      	str	r3, [r7, #48]	@ 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
10048d78:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
10048d7a:	2b0f      	cmp	r3, #15
10048d7c:	d921      	bls.n	10048dc2 <UART_SetConfig+0x216>
10048d7e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
10048d80:	2380      	movs	r3, #128	@ 0x80
10048d82:	025b      	lsls	r3, r3, #9
10048d84:	429a      	cmp	r2, r3
10048d86:	d21c      	bcs.n	10048dc2 <UART_SetConfig+0x216>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
10048d88:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
10048d8a:	b29a      	uxth	r2, r3
10048d8c:	200e      	movs	r0, #14
10048d8e:	2420      	movs	r4, #32
10048d90:	1903      	adds	r3, r0, r4
10048d92:	19db      	adds	r3, r3, r7
10048d94:	210f      	movs	r1, #15
10048d96:	438a      	bics	r2, r1
10048d98:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
10048d9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
10048d9c:	085b      	lsrs	r3, r3, #1
10048d9e:	b29b      	uxth	r3, r3
10048da0:	2207      	movs	r2, #7
10048da2:	4013      	ands	r3, r2
10048da4:	b299      	uxth	r1, r3
10048da6:	1903      	adds	r3, r0, r4
10048da8:	19db      	adds	r3, r3, r7
10048daa:	1902      	adds	r2, r0, r4
10048dac:	19d2      	adds	r2, r2, r7
10048dae:	8812      	ldrh	r2, [r2, #0]
10048db0:	430a      	orrs	r2, r1
10048db2:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
10048db4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10048db6:	681b      	ldr	r3, [r3, #0]
10048db8:	1902      	adds	r2, r0, r4
10048dba:	19d2      	adds	r2, r2, r7
10048dbc:	8812      	ldrh	r2, [r2, #0]
10048dbe:	60da      	str	r2, [r3, #12]
10048dc0:	e036      	b.n	10048e30 <UART_SetConfig+0x284>
      }
      else
      {
        ret = HAL_ERROR;
10048dc2:	231b      	movs	r3, #27
10048dc4:	2220      	movs	r2, #32
10048dc6:	189b      	adds	r3, r3, r2
10048dc8:	19db      	adds	r3, r3, r7
10048dca:	2201      	movs	r2, #1
10048dcc:	701a      	strb	r2, [r3, #0]
10048dce:	e02f      	b.n	10048e30 <UART_SetConfig+0x284>
      }
    }
  }
  else
  {
    pclk = UART_PERIPHCLK;
10048dd0:	4b27      	ldr	r3, [pc, #156]	@ (10048e70 <UART_SetConfig+0x2c4>)
10048dd2:	637b      	str	r3, [r7, #52]	@ 0x34

    if (pclk != 0U)
10048dd4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
10048dd6:	2b00      	cmp	r3, #0
10048dd8:	d02a      	beq.n	10048e30 <UART_SetConfig+0x284>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
10048dda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10048ddc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
10048dde:	4b25      	ldr	r3, [pc, #148]	@ (10048e74 <UART_SetConfig+0x2c8>)
10048de0:	0052      	lsls	r2, r2, #1
10048de2:	5ad3      	ldrh	r3, [r2, r3]
10048de4:	0019      	movs	r1, r3
10048de6:	6b78      	ldr	r0, [r7, #52]	@ 0x34
10048de8:	f7f7 f9a8 	bl	1004013c <__udivsi3>
10048dec:	0003      	movs	r3, r0
10048dee:	001a      	movs	r2, r3
10048df0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10048df2:	685b      	ldr	r3, [r3, #4]
10048df4:	085b      	lsrs	r3, r3, #1
10048df6:	18d2      	adds	r2, r2, r3
10048df8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10048dfa:	685b      	ldr	r3, [r3, #4]
10048dfc:	0019      	movs	r1, r3
10048dfe:	0010      	movs	r0, r2
10048e00:	f7f7 f99c 	bl	1004013c <__udivsi3>
10048e04:	0003      	movs	r3, r0
10048e06:	633b      	str	r3, [r7, #48]	@ 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
10048e08:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
10048e0a:	2b0f      	cmp	r3, #15
10048e0c:	d90a      	bls.n	10048e24 <UART_SetConfig+0x278>
10048e0e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
10048e10:	2380      	movs	r3, #128	@ 0x80
10048e12:	025b      	lsls	r3, r3, #9
10048e14:	429a      	cmp	r2, r3
10048e16:	d205      	bcs.n	10048e24 <UART_SetConfig+0x278>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
10048e18:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
10048e1a:	b29a      	uxth	r2, r3
10048e1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10048e1e:	681b      	ldr	r3, [r3, #0]
10048e20:	60da      	str	r2, [r3, #12]
10048e22:	e005      	b.n	10048e30 <UART_SetConfig+0x284>
      }
      else
      {
        ret = HAL_ERROR;
10048e24:	231b      	movs	r3, #27
10048e26:	2220      	movs	r2, #32
10048e28:	189b      	adds	r3, r3, r2
10048e2a:	19db      	adds	r3, r3, r7
10048e2c:	2201      	movs	r2, #1
10048e2e:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
10048e30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10048e32:	226a      	movs	r2, #106	@ 0x6a
10048e34:	2101      	movs	r1, #1
10048e36:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
10048e38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10048e3a:	2268      	movs	r2, #104	@ 0x68
10048e3c:	2101      	movs	r1, #1
10048e3e:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
10048e40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10048e42:	2200      	movs	r2, #0
10048e44:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
10048e46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10048e48:	2200      	movs	r2, #0
10048e4a:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
10048e4c:	231b      	movs	r3, #27
10048e4e:	2220      	movs	r2, #32
10048e50:	189b      	adds	r3, r3, r2
10048e52:	19db      	adds	r3, r3, r7
10048e54:	781b      	ldrb	r3, [r3, #0]
}
10048e56:	0018      	movs	r0, r3
10048e58:	46bd      	mov	sp, r7
10048e5a:	b010      	add	sp, #64	@ 0x40
10048e5c:	bdb0      	pop	{r4, r5, r7, pc}
10048e5e:	46c0      	nop			@ (mov r8, r8)
10048e60:	cfff69f3 	.word	0xcfff69f3
10048e64:	ffffcfff 	.word	0xffffcfff
10048e68:	41005000 	.word	0x41005000
10048e6c:	11fff4ff 	.word	0x11fff4ff
10048e70:	00f42400 	.word	0x00f42400
10048e74:	1004bfb0 	.word	0x1004bfb0

10048e78 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
10048e78:	b580      	push	{r7, lr}
10048e7a:	b082      	sub	sp, #8
10048e7c:	af00      	add	r7, sp, #0
10048e7e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
10048e80:	687b      	ldr	r3, [r7, #4]
10048e82:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
10048e84:	2208      	movs	r2, #8
10048e86:	4013      	ands	r3, r2
10048e88:	d00b      	beq.n	10048ea2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
10048e8a:	687b      	ldr	r3, [r7, #4]
10048e8c:	681b      	ldr	r3, [r3, #0]
10048e8e:	685b      	ldr	r3, [r3, #4]
10048e90:	4a4a      	ldr	r2, [pc, #296]	@ (10048fbc <UART_AdvFeatureConfig+0x144>)
10048e92:	4013      	ands	r3, r2
10048e94:	0019      	movs	r1, r3
10048e96:	687b      	ldr	r3, [r7, #4]
10048e98:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
10048e9a:	687b      	ldr	r3, [r7, #4]
10048e9c:	681b      	ldr	r3, [r3, #0]
10048e9e:	430a      	orrs	r2, r1
10048ea0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
10048ea2:	687b      	ldr	r3, [r7, #4]
10048ea4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
10048ea6:	2201      	movs	r2, #1
10048ea8:	4013      	ands	r3, r2
10048eaa:	d00b      	beq.n	10048ec4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
10048eac:	687b      	ldr	r3, [r7, #4]
10048eae:	681b      	ldr	r3, [r3, #0]
10048eb0:	685b      	ldr	r3, [r3, #4]
10048eb2:	4a43      	ldr	r2, [pc, #268]	@ (10048fc0 <UART_AdvFeatureConfig+0x148>)
10048eb4:	4013      	ands	r3, r2
10048eb6:	0019      	movs	r1, r3
10048eb8:	687b      	ldr	r3, [r7, #4]
10048eba:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
10048ebc:	687b      	ldr	r3, [r7, #4]
10048ebe:	681b      	ldr	r3, [r3, #0]
10048ec0:	430a      	orrs	r2, r1
10048ec2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
10048ec4:	687b      	ldr	r3, [r7, #4]
10048ec6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
10048ec8:	2202      	movs	r2, #2
10048eca:	4013      	ands	r3, r2
10048ecc:	d00b      	beq.n	10048ee6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
10048ece:	687b      	ldr	r3, [r7, #4]
10048ed0:	681b      	ldr	r3, [r3, #0]
10048ed2:	685b      	ldr	r3, [r3, #4]
10048ed4:	4a3b      	ldr	r2, [pc, #236]	@ (10048fc4 <UART_AdvFeatureConfig+0x14c>)
10048ed6:	4013      	ands	r3, r2
10048ed8:	0019      	movs	r1, r3
10048eda:	687b      	ldr	r3, [r7, #4]
10048edc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
10048ede:	687b      	ldr	r3, [r7, #4]
10048ee0:	681b      	ldr	r3, [r3, #0]
10048ee2:	430a      	orrs	r2, r1
10048ee4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
10048ee6:	687b      	ldr	r3, [r7, #4]
10048ee8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
10048eea:	2204      	movs	r2, #4
10048eec:	4013      	ands	r3, r2
10048eee:	d00b      	beq.n	10048f08 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
10048ef0:	687b      	ldr	r3, [r7, #4]
10048ef2:	681b      	ldr	r3, [r3, #0]
10048ef4:	685b      	ldr	r3, [r3, #4]
10048ef6:	4a34      	ldr	r2, [pc, #208]	@ (10048fc8 <UART_AdvFeatureConfig+0x150>)
10048ef8:	4013      	ands	r3, r2
10048efa:	0019      	movs	r1, r3
10048efc:	687b      	ldr	r3, [r7, #4]
10048efe:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
10048f00:	687b      	ldr	r3, [r7, #4]
10048f02:	681b      	ldr	r3, [r3, #0]
10048f04:	430a      	orrs	r2, r1
10048f06:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
10048f08:	687b      	ldr	r3, [r7, #4]
10048f0a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
10048f0c:	2210      	movs	r2, #16
10048f0e:	4013      	ands	r3, r2
10048f10:	d00b      	beq.n	10048f2a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
10048f12:	687b      	ldr	r3, [r7, #4]
10048f14:	681b      	ldr	r3, [r3, #0]
10048f16:	689b      	ldr	r3, [r3, #8]
10048f18:	4a2c      	ldr	r2, [pc, #176]	@ (10048fcc <UART_AdvFeatureConfig+0x154>)
10048f1a:	4013      	ands	r3, r2
10048f1c:	0019      	movs	r1, r3
10048f1e:	687b      	ldr	r3, [r7, #4]
10048f20:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
10048f22:	687b      	ldr	r3, [r7, #4]
10048f24:	681b      	ldr	r3, [r3, #0]
10048f26:	430a      	orrs	r2, r1
10048f28:	609a      	str	r2, [r3, #8]
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
10048f2a:	687b      	ldr	r3, [r7, #4]
10048f2c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
10048f2e:	2220      	movs	r2, #32
10048f30:	4013      	ands	r3, r2
10048f32:	d00b      	beq.n	10048f4c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
10048f34:	687b      	ldr	r3, [r7, #4]
10048f36:	681b      	ldr	r3, [r3, #0]
10048f38:	689b      	ldr	r3, [r3, #8]
10048f3a:	4a25      	ldr	r2, [pc, #148]	@ (10048fd0 <UART_AdvFeatureConfig+0x158>)
10048f3c:	4013      	ands	r3, r2
10048f3e:	0019      	movs	r1, r3
10048f40:	687b      	ldr	r3, [r7, #4]
10048f42:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
10048f44:	687b      	ldr	r3, [r7, #4]
10048f46:	681b      	ldr	r3, [r3, #0]
10048f48:	430a      	orrs	r2, r1
10048f4a:	609a      	str	r2, [r3, #8]
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
10048f4c:	687b      	ldr	r3, [r7, #4]
10048f4e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
10048f50:	2240      	movs	r2, #64	@ 0x40
10048f52:	4013      	ands	r3, r2
10048f54:	d01d      	beq.n	10048f92 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
10048f56:	687b      	ldr	r3, [r7, #4]
10048f58:	681b      	ldr	r3, [r3, #0]
10048f5a:	685b      	ldr	r3, [r3, #4]
10048f5c:	4a1d      	ldr	r2, [pc, #116]	@ (10048fd4 <UART_AdvFeatureConfig+0x15c>)
10048f5e:	4013      	ands	r3, r2
10048f60:	0019      	movs	r1, r3
10048f62:	687b      	ldr	r3, [r7, #4]
10048f64:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
10048f66:	687b      	ldr	r3, [r7, #4]
10048f68:	681b      	ldr	r3, [r3, #0]
10048f6a:	430a      	orrs	r2, r1
10048f6c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
10048f6e:	687b      	ldr	r3, [r7, #4]
10048f70:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
10048f72:	2380      	movs	r3, #128	@ 0x80
10048f74:	035b      	lsls	r3, r3, #13
10048f76:	429a      	cmp	r2, r3
10048f78:	d10b      	bne.n	10048f92 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
10048f7a:	687b      	ldr	r3, [r7, #4]
10048f7c:	681b      	ldr	r3, [r3, #0]
10048f7e:	685b      	ldr	r3, [r3, #4]
10048f80:	4a15      	ldr	r2, [pc, #84]	@ (10048fd8 <UART_AdvFeatureConfig+0x160>)
10048f82:	4013      	ands	r3, r2
10048f84:	0019      	movs	r1, r3
10048f86:	687b      	ldr	r3, [r7, #4]
10048f88:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
10048f8a:	687b      	ldr	r3, [r7, #4]
10048f8c:	681b      	ldr	r3, [r3, #0]
10048f8e:	430a      	orrs	r2, r1
10048f90:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
10048f92:	687b      	ldr	r3, [r7, #4]
10048f94:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
10048f96:	2280      	movs	r2, #128	@ 0x80
10048f98:	4013      	ands	r3, r2
10048f9a:	d00b      	beq.n	10048fb4 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
10048f9c:	687b      	ldr	r3, [r7, #4]
10048f9e:	681b      	ldr	r3, [r3, #0]
10048fa0:	685b      	ldr	r3, [r3, #4]
10048fa2:	4a0e      	ldr	r2, [pc, #56]	@ (10048fdc <UART_AdvFeatureConfig+0x164>)
10048fa4:	4013      	ands	r3, r2
10048fa6:	0019      	movs	r1, r3
10048fa8:	687b      	ldr	r3, [r7, #4]
10048faa:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
10048fac:	687b      	ldr	r3, [r7, #4]
10048fae:	681b      	ldr	r3, [r3, #0]
10048fb0:	430a      	orrs	r2, r1
10048fb2:	605a      	str	r2, [r3, #4]
  }
}
10048fb4:	46c0      	nop			@ (mov r8, r8)
10048fb6:	46bd      	mov	sp, r7
10048fb8:	b002      	add	sp, #8
10048fba:	bd80      	pop	{r7, pc}
10048fbc:	ffff7fff 	.word	0xffff7fff
10048fc0:	fffdffff 	.word	0xfffdffff
10048fc4:	fffeffff 	.word	0xfffeffff
10048fc8:	fffbffff 	.word	0xfffbffff
10048fcc:	ffffefff 	.word	0xffffefff
10048fd0:	ffffdfff 	.word	0xffffdfff
10048fd4:	ffefffff 	.word	0xffefffff
10048fd8:	ff9fffff 	.word	0xff9fffff
10048fdc:	fff7ffff 	.word	0xfff7ffff

10048fe0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
10048fe0:	b580      	push	{r7, lr}
10048fe2:	b092      	sub	sp, #72	@ 0x48
10048fe4:	af02      	add	r7, sp, #8
10048fe6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
10048fe8:	687b      	ldr	r3, [r7, #4]
10048fea:	2290      	movs	r2, #144	@ 0x90
10048fec:	2100      	movs	r1, #0
10048fee:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
10048ff0:	f7fb fca4 	bl	1004493c <HAL_GetTick>
10048ff4:	0003      	movs	r3, r0
10048ff6:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
10048ff8:	687b      	ldr	r3, [r7, #4]
10048ffa:	681b      	ldr	r3, [r3, #0]
10048ffc:	681b      	ldr	r3, [r3, #0]
10048ffe:	2208      	movs	r2, #8
10049000:	4013      	ands	r3, r2
10049002:	2b08      	cmp	r3, #8
10049004:	d12d      	bne.n	10049062 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
10049006:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
10049008:	2280      	movs	r2, #128	@ 0x80
1004900a:	0391      	lsls	r1, r2, #14
1004900c:	6878      	ldr	r0, [r7, #4]
1004900e:	4a47      	ldr	r2, [pc, #284]	@ (1004912c <UART_CheckIdleState+0x14c>)
10049010:	9200      	str	r2, [sp, #0]
10049012:	2200      	movs	r2, #0
10049014:	f000 f88e 	bl	10049134 <UART_WaitOnFlagUntilTimeout>
10049018:	1e03      	subs	r3, r0, #0
1004901a:	d022      	beq.n	10049062 <UART_CheckIdleState+0x82>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
1004901c:	f3ef 8310 	mrs	r3, PRIMASK
10049020:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
10049022:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
10049024:	63bb      	str	r3, [r7, #56]	@ 0x38
10049026:	2301      	movs	r3, #1
10049028:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
1004902a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
1004902c:	f383 8810 	msr	PRIMASK, r3
}
10049030:	46c0      	nop			@ (mov r8, r8)
10049032:	687b      	ldr	r3, [r7, #4]
10049034:	681b      	ldr	r3, [r3, #0]
10049036:	681a      	ldr	r2, [r3, #0]
10049038:	687b      	ldr	r3, [r7, #4]
1004903a:	681b      	ldr	r3, [r3, #0]
1004903c:	2180      	movs	r1, #128	@ 0x80
1004903e:	438a      	bics	r2, r1
10049040:	601a      	str	r2, [r3, #0]
10049042:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
10049044:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
10049046:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
10049048:	f383 8810 	msr	PRIMASK, r3
}
1004904c:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
1004904e:	687b      	ldr	r3, [r7, #4]
10049050:	2288      	movs	r2, #136	@ 0x88
10049052:	2120      	movs	r1, #32
10049054:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
10049056:	687b      	ldr	r3, [r7, #4]
10049058:	2284      	movs	r2, #132	@ 0x84
1004905a:	2100      	movs	r1, #0
1004905c:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
1004905e:	2303      	movs	r3, #3
10049060:	e060      	b.n	10049124 <UART_CheckIdleState+0x144>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
10049062:	687b      	ldr	r3, [r7, #4]
10049064:	681b      	ldr	r3, [r3, #0]
10049066:	681b      	ldr	r3, [r3, #0]
10049068:	2204      	movs	r2, #4
1004906a:	4013      	ands	r3, r2
1004906c:	2b04      	cmp	r3, #4
1004906e:	d146      	bne.n	100490fe <UART_CheckIdleState+0x11e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
10049070:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
10049072:	2280      	movs	r2, #128	@ 0x80
10049074:	03d1      	lsls	r1, r2, #15
10049076:	6878      	ldr	r0, [r7, #4]
10049078:	4a2c      	ldr	r2, [pc, #176]	@ (1004912c <UART_CheckIdleState+0x14c>)
1004907a:	9200      	str	r2, [sp, #0]
1004907c:	2200      	movs	r2, #0
1004907e:	f000 f859 	bl	10049134 <UART_WaitOnFlagUntilTimeout>
10049082:	1e03      	subs	r3, r0, #0
10049084:	d03b      	beq.n	100490fe <UART_CheckIdleState+0x11e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
10049086:	f3ef 8310 	mrs	r3, PRIMASK
1004908a:	60fb      	str	r3, [r7, #12]
  return(result);
1004908c:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
1004908e:	637b      	str	r3, [r7, #52]	@ 0x34
10049090:	2301      	movs	r3, #1
10049092:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
10049094:	693b      	ldr	r3, [r7, #16]
10049096:	f383 8810 	msr	PRIMASK, r3
}
1004909a:	46c0      	nop			@ (mov r8, r8)
1004909c:	687b      	ldr	r3, [r7, #4]
1004909e:	681b      	ldr	r3, [r3, #0]
100490a0:	681a      	ldr	r2, [r3, #0]
100490a2:	687b      	ldr	r3, [r7, #4]
100490a4:	681b      	ldr	r3, [r3, #0]
100490a6:	4922      	ldr	r1, [pc, #136]	@ (10049130 <UART_CheckIdleState+0x150>)
100490a8:	400a      	ands	r2, r1
100490aa:	601a      	str	r2, [r3, #0]
100490ac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
100490ae:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
100490b0:	697b      	ldr	r3, [r7, #20]
100490b2:	f383 8810 	msr	PRIMASK, r3
}
100490b6:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
100490b8:	f3ef 8310 	mrs	r3, PRIMASK
100490bc:	61bb      	str	r3, [r7, #24]
  return(result);
100490be:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
100490c0:	633b      	str	r3, [r7, #48]	@ 0x30
100490c2:	2301      	movs	r3, #1
100490c4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
100490c6:	69fb      	ldr	r3, [r7, #28]
100490c8:	f383 8810 	msr	PRIMASK, r3
}
100490cc:	46c0      	nop			@ (mov r8, r8)
100490ce:	687b      	ldr	r3, [r7, #4]
100490d0:	681b      	ldr	r3, [r3, #0]
100490d2:	689a      	ldr	r2, [r3, #8]
100490d4:	687b      	ldr	r3, [r7, #4]
100490d6:	681b      	ldr	r3, [r3, #0]
100490d8:	2101      	movs	r1, #1
100490da:	438a      	bics	r2, r1
100490dc:	609a      	str	r2, [r3, #8]
100490de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
100490e0:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
100490e2:	6a3b      	ldr	r3, [r7, #32]
100490e4:	f383 8810 	msr	PRIMASK, r3
}
100490e8:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
100490ea:	687b      	ldr	r3, [r7, #4]
100490ec:	228c      	movs	r2, #140	@ 0x8c
100490ee:	2120      	movs	r1, #32
100490f0:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
100490f2:	687b      	ldr	r3, [r7, #4]
100490f4:	2284      	movs	r2, #132	@ 0x84
100490f6:	2100      	movs	r1, #0
100490f8:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
100490fa:	2303      	movs	r3, #3
100490fc:	e012      	b.n	10049124 <UART_CheckIdleState+0x144>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
100490fe:	687b      	ldr	r3, [r7, #4]
10049100:	2288      	movs	r2, #136	@ 0x88
10049102:	2120      	movs	r1, #32
10049104:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
10049106:	687b      	ldr	r3, [r7, #4]
10049108:	228c      	movs	r2, #140	@ 0x8c
1004910a:	2120      	movs	r1, #32
1004910c:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
1004910e:	687b      	ldr	r3, [r7, #4]
10049110:	2200      	movs	r2, #0
10049112:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
10049114:	687b      	ldr	r3, [r7, #4]
10049116:	2200      	movs	r2, #0
10049118:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
1004911a:	687b      	ldr	r3, [r7, #4]
1004911c:	2284      	movs	r2, #132	@ 0x84
1004911e:	2100      	movs	r1, #0
10049120:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
10049122:	2300      	movs	r3, #0
}
10049124:	0018      	movs	r0, r3
10049126:	46bd      	mov	sp, r7
10049128:	b010      	add	sp, #64	@ 0x40
1004912a:	bd80      	pop	{r7, pc}
1004912c:	01ffffff 	.word	0x01ffffff
10049130:	fffffedf 	.word	0xfffffedf

10049134 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
10049134:	b580      	push	{r7, lr}
10049136:	b084      	sub	sp, #16
10049138:	af00      	add	r7, sp, #0
1004913a:	60f8      	str	r0, [r7, #12]
1004913c:	60b9      	str	r1, [r7, #8]
1004913e:	603b      	str	r3, [r7, #0]
10049140:	1dfb      	adds	r3, r7, #7
10049142:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
10049144:	e051      	b.n	100491ea <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
10049146:	69bb      	ldr	r3, [r7, #24]
10049148:	3301      	adds	r3, #1
1004914a:	d04e      	beq.n	100491ea <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
1004914c:	f7fb fbf6 	bl	1004493c <HAL_GetTick>
10049150:	0002      	movs	r2, r0
10049152:	683b      	ldr	r3, [r7, #0]
10049154:	1ad3      	subs	r3, r2, r3
10049156:	69ba      	ldr	r2, [r7, #24]
10049158:	429a      	cmp	r2, r3
1004915a:	d302      	bcc.n	10049162 <UART_WaitOnFlagUntilTimeout+0x2e>
1004915c:	69bb      	ldr	r3, [r7, #24]
1004915e:	2b00      	cmp	r3, #0
10049160:	d101      	bne.n	10049166 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
10049162:	2303      	movs	r3, #3
10049164:	e051      	b.n	1004920a <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
10049166:	68fb      	ldr	r3, [r7, #12]
10049168:	681b      	ldr	r3, [r3, #0]
1004916a:	681b      	ldr	r3, [r3, #0]
1004916c:	2204      	movs	r2, #4
1004916e:	4013      	ands	r3, r2
10049170:	d03b      	beq.n	100491ea <UART_WaitOnFlagUntilTimeout+0xb6>
10049172:	68bb      	ldr	r3, [r7, #8]
10049174:	2b80      	cmp	r3, #128	@ 0x80
10049176:	d038      	beq.n	100491ea <UART_WaitOnFlagUntilTimeout+0xb6>
10049178:	68bb      	ldr	r3, [r7, #8]
1004917a:	2b40      	cmp	r3, #64	@ 0x40
1004917c:	d035      	beq.n	100491ea <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
1004917e:	68fb      	ldr	r3, [r7, #12]
10049180:	681b      	ldr	r3, [r3, #0]
10049182:	69db      	ldr	r3, [r3, #28]
10049184:	2208      	movs	r2, #8
10049186:	4013      	ands	r3, r2
10049188:	2b08      	cmp	r3, #8
1004918a:	d111      	bne.n	100491b0 <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
1004918c:	68fb      	ldr	r3, [r7, #12]
1004918e:	681b      	ldr	r3, [r3, #0]
10049190:	2208      	movs	r2, #8
10049192:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
10049194:	68fb      	ldr	r3, [r7, #12]
10049196:	0018      	movs	r0, r3
10049198:	f000 f83c 	bl	10049214 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
1004919c:	68fb      	ldr	r3, [r7, #12]
1004919e:	2290      	movs	r2, #144	@ 0x90
100491a0:	2108      	movs	r1, #8
100491a2:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
100491a4:	68fb      	ldr	r3, [r7, #12]
100491a6:	2284      	movs	r2, #132	@ 0x84
100491a8:	2100      	movs	r1, #0
100491aa:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
100491ac:	2301      	movs	r3, #1
100491ae:	e02c      	b.n	1004920a <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
100491b0:	68fb      	ldr	r3, [r7, #12]
100491b2:	681b      	ldr	r3, [r3, #0]
100491b4:	69da      	ldr	r2, [r3, #28]
100491b6:	2380      	movs	r3, #128	@ 0x80
100491b8:	011b      	lsls	r3, r3, #4
100491ba:	401a      	ands	r2, r3
100491bc:	2380      	movs	r3, #128	@ 0x80
100491be:	011b      	lsls	r3, r3, #4
100491c0:	429a      	cmp	r2, r3
100491c2:	d112      	bne.n	100491ea <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
100491c4:	68fb      	ldr	r3, [r7, #12]
100491c6:	681b      	ldr	r3, [r3, #0]
100491c8:	2280      	movs	r2, #128	@ 0x80
100491ca:	0112      	lsls	r2, r2, #4
100491cc:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
100491ce:	68fb      	ldr	r3, [r7, #12]
100491d0:	0018      	movs	r0, r3
100491d2:	f000 f81f 	bl	10049214 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
100491d6:	68fb      	ldr	r3, [r7, #12]
100491d8:	2290      	movs	r2, #144	@ 0x90
100491da:	2120      	movs	r1, #32
100491dc:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
100491de:	68fb      	ldr	r3, [r7, #12]
100491e0:	2284      	movs	r2, #132	@ 0x84
100491e2:	2100      	movs	r1, #0
100491e4:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
100491e6:	2303      	movs	r3, #3
100491e8:	e00f      	b.n	1004920a <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
100491ea:	68fb      	ldr	r3, [r7, #12]
100491ec:	681b      	ldr	r3, [r3, #0]
100491ee:	69db      	ldr	r3, [r3, #28]
100491f0:	68ba      	ldr	r2, [r7, #8]
100491f2:	4013      	ands	r3, r2
100491f4:	68ba      	ldr	r2, [r7, #8]
100491f6:	1ad3      	subs	r3, r2, r3
100491f8:	425a      	negs	r2, r3
100491fa:	4153      	adcs	r3, r2
100491fc:	b2db      	uxtb	r3, r3
100491fe:	001a      	movs	r2, r3
10049200:	1dfb      	adds	r3, r7, #7
10049202:	781b      	ldrb	r3, [r3, #0]
10049204:	429a      	cmp	r2, r3
10049206:	d09e      	beq.n	10049146 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
10049208:	2300      	movs	r3, #0
}
1004920a:	0018      	movs	r0, r3
1004920c:	46bd      	mov	sp, r7
1004920e:	b004      	add	sp, #16
10049210:	bd80      	pop	{r7, pc}
	...

10049214 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
10049214:	b580      	push	{r7, lr}
10049216:	b08e      	sub	sp, #56	@ 0x38
10049218:	af00      	add	r7, sp, #0
1004921a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
1004921c:	f3ef 8310 	mrs	r3, PRIMASK
10049220:	617b      	str	r3, [r7, #20]
  return(result);
10049222:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
10049224:	637b      	str	r3, [r7, #52]	@ 0x34
10049226:	2301      	movs	r3, #1
10049228:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
1004922a:	69bb      	ldr	r3, [r7, #24]
1004922c:	f383 8810 	msr	PRIMASK, r3
}
10049230:	46c0      	nop			@ (mov r8, r8)
10049232:	687b      	ldr	r3, [r7, #4]
10049234:	681b      	ldr	r3, [r3, #0]
10049236:	681a      	ldr	r2, [r3, #0]
10049238:	687b      	ldr	r3, [r7, #4]
1004923a:	681b      	ldr	r3, [r3, #0]
1004923c:	4926      	ldr	r1, [pc, #152]	@ (100492d8 <UART_EndRxTransfer+0xc4>)
1004923e:	400a      	ands	r2, r1
10049240:	601a      	str	r2, [r3, #0]
10049242:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
10049244:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
10049246:	69fb      	ldr	r3, [r7, #28]
10049248:	f383 8810 	msr	PRIMASK, r3
}
1004924c:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
1004924e:	f3ef 8310 	mrs	r3, PRIMASK
10049252:	623b      	str	r3, [r7, #32]
  return(result);
10049254:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
10049256:	633b      	str	r3, [r7, #48]	@ 0x30
10049258:	2301      	movs	r3, #1
1004925a:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
1004925c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
1004925e:	f383 8810 	msr	PRIMASK, r3
}
10049262:	46c0      	nop			@ (mov r8, r8)
10049264:	687b      	ldr	r3, [r7, #4]
10049266:	681b      	ldr	r3, [r3, #0]
10049268:	689a      	ldr	r2, [r3, #8]
1004926a:	687b      	ldr	r3, [r7, #4]
1004926c:	681b      	ldr	r3, [r3, #0]
1004926e:	491b      	ldr	r1, [pc, #108]	@ (100492dc <UART_EndRxTransfer+0xc8>)
10049270:	400a      	ands	r2, r1
10049272:	609a      	str	r2, [r3, #8]
10049274:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
10049276:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
10049278:	6abb      	ldr	r3, [r7, #40]	@ 0x28
1004927a:	f383 8810 	msr	PRIMASK, r3
}
1004927e:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
10049280:	687b      	ldr	r3, [r7, #4]
10049282:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
10049284:	2b01      	cmp	r3, #1
10049286:	d118      	bne.n	100492ba <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
10049288:	f3ef 8310 	mrs	r3, PRIMASK
1004928c:	60bb      	str	r3, [r7, #8]
  return(result);
1004928e:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
10049290:	62fb      	str	r3, [r7, #44]	@ 0x2c
10049292:	2301      	movs	r3, #1
10049294:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
10049296:	68fb      	ldr	r3, [r7, #12]
10049298:	f383 8810 	msr	PRIMASK, r3
}
1004929c:	46c0      	nop			@ (mov r8, r8)
1004929e:	687b      	ldr	r3, [r7, #4]
100492a0:	681b      	ldr	r3, [r3, #0]
100492a2:	681a      	ldr	r2, [r3, #0]
100492a4:	687b      	ldr	r3, [r7, #4]
100492a6:	681b      	ldr	r3, [r3, #0]
100492a8:	2110      	movs	r1, #16
100492aa:	438a      	bics	r2, r1
100492ac:	601a      	str	r2, [r3, #0]
100492ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
100492b0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
100492b2:	693b      	ldr	r3, [r7, #16]
100492b4:	f383 8810 	msr	PRIMASK, r3
}
100492b8:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
100492ba:	687b      	ldr	r3, [r7, #4]
100492bc:	228c      	movs	r2, #140	@ 0x8c
100492be:	2120      	movs	r1, #32
100492c0:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
100492c2:	687b      	ldr	r3, [r7, #4]
100492c4:	2200      	movs	r2, #0
100492c6:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
100492c8:	687b      	ldr	r3, [r7, #4]
100492ca:	2200      	movs	r2, #0
100492cc:	675a      	str	r2, [r3, #116]	@ 0x74
}
100492ce:	46c0      	nop			@ (mov r8, r8)
100492d0:	46bd      	mov	sp, r7
100492d2:	b00e      	add	sp, #56	@ 0x38
100492d4:	bd80      	pop	{r7, pc}
100492d6:	46c0      	nop			@ (mov r8, r8)
100492d8:	fffffedf 	.word	0xfffffedf
100492dc:	effffffe 	.word	0xeffffffe

100492e0 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
100492e0:	b580      	push	{r7, lr}
100492e2:	b084      	sub	sp, #16
100492e4:	af00      	add	r7, sp, #0
100492e6:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
100492e8:	687b      	ldr	r3, [r7, #4]
100492ea:	2284      	movs	r2, #132	@ 0x84
100492ec:	5c9b      	ldrb	r3, [r3, r2]
100492ee:	2b01      	cmp	r3, #1
100492f0:	d101      	bne.n	100492f6 <HAL_UARTEx_DisableFifoMode+0x16>
100492f2:	2302      	movs	r3, #2
100492f4:	e027      	b.n	10049346 <HAL_UARTEx_DisableFifoMode+0x66>
100492f6:	687b      	ldr	r3, [r7, #4]
100492f8:	2284      	movs	r2, #132	@ 0x84
100492fa:	2101      	movs	r1, #1
100492fc:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
100492fe:	687b      	ldr	r3, [r7, #4]
10049300:	2288      	movs	r2, #136	@ 0x88
10049302:	2124      	movs	r1, #36	@ 0x24
10049304:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
10049306:	687b      	ldr	r3, [r7, #4]
10049308:	681b      	ldr	r3, [r3, #0]
1004930a:	681b      	ldr	r3, [r3, #0]
1004930c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
1004930e:	687b      	ldr	r3, [r7, #4]
10049310:	681b      	ldr	r3, [r3, #0]
10049312:	681a      	ldr	r2, [r3, #0]
10049314:	687b      	ldr	r3, [r7, #4]
10049316:	681b      	ldr	r3, [r3, #0]
10049318:	2101      	movs	r1, #1
1004931a:	438a      	bics	r2, r1
1004931c:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
1004931e:	68fb      	ldr	r3, [r7, #12]
10049320:	4a0b      	ldr	r2, [pc, #44]	@ (10049350 <HAL_UARTEx_DisableFifoMode+0x70>)
10049322:	4013      	ands	r3, r2
10049324:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
10049326:	687b      	ldr	r3, [r7, #4]
10049328:	2200      	movs	r2, #0
1004932a:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
1004932c:	687b      	ldr	r3, [r7, #4]
1004932e:	681b      	ldr	r3, [r3, #0]
10049330:	68fa      	ldr	r2, [r7, #12]
10049332:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
10049334:	687b      	ldr	r3, [r7, #4]
10049336:	2288      	movs	r2, #136	@ 0x88
10049338:	2120      	movs	r1, #32
1004933a:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
1004933c:	687b      	ldr	r3, [r7, #4]
1004933e:	2284      	movs	r2, #132	@ 0x84
10049340:	2100      	movs	r1, #0
10049342:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
10049344:	2300      	movs	r3, #0
}
10049346:	0018      	movs	r0, r3
10049348:	46bd      	mov	sp, r7
1004934a:	b004      	add	sp, #16
1004934c:	bd80      	pop	{r7, pc}
1004934e:	46c0      	nop			@ (mov r8, r8)
10049350:	dfffffff 	.word	0xdfffffff

10049354 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
10049354:	b580      	push	{r7, lr}
10049356:	b084      	sub	sp, #16
10049358:	af00      	add	r7, sp, #0
1004935a:	6078      	str	r0, [r7, #4]
1004935c:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
1004935e:	687b      	ldr	r3, [r7, #4]
10049360:	2284      	movs	r2, #132	@ 0x84
10049362:	5c9b      	ldrb	r3, [r3, r2]
10049364:	2b01      	cmp	r3, #1
10049366:	d101      	bne.n	1004936c <HAL_UARTEx_SetTxFifoThreshold+0x18>
10049368:	2302      	movs	r3, #2
1004936a:	e02e      	b.n	100493ca <HAL_UARTEx_SetTxFifoThreshold+0x76>
1004936c:	687b      	ldr	r3, [r7, #4]
1004936e:	2284      	movs	r2, #132	@ 0x84
10049370:	2101      	movs	r1, #1
10049372:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
10049374:	687b      	ldr	r3, [r7, #4]
10049376:	2288      	movs	r2, #136	@ 0x88
10049378:	2124      	movs	r1, #36	@ 0x24
1004937a:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
1004937c:	687b      	ldr	r3, [r7, #4]
1004937e:	681b      	ldr	r3, [r3, #0]
10049380:	681b      	ldr	r3, [r3, #0]
10049382:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
10049384:	687b      	ldr	r3, [r7, #4]
10049386:	681b      	ldr	r3, [r3, #0]
10049388:	681a      	ldr	r2, [r3, #0]
1004938a:	687b      	ldr	r3, [r7, #4]
1004938c:	681b      	ldr	r3, [r3, #0]
1004938e:	2101      	movs	r1, #1
10049390:	438a      	bics	r2, r1
10049392:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
10049394:	687b      	ldr	r3, [r7, #4]
10049396:	681b      	ldr	r3, [r3, #0]
10049398:	689b      	ldr	r3, [r3, #8]
1004939a:	00db      	lsls	r3, r3, #3
1004939c:	08d9      	lsrs	r1, r3, #3
1004939e:	687b      	ldr	r3, [r7, #4]
100493a0:	681b      	ldr	r3, [r3, #0]
100493a2:	683a      	ldr	r2, [r7, #0]
100493a4:	430a      	orrs	r2, r1
100493a6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
100493a8:	687b      	ldr	r3, [r7, #4]
100493aa:	0018      	movs	r0, r3
100493ac:	f000 f854 	bl	10049458 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
100493b0:	687b      	ldr	r3, [r7, #4]
100493b2:	681b      	ldr	r3, [r3, #0]
100493b4:	68fa      	ldr	r2, [r7, #12]
100493b6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
100493b8:	687b      	ldr	r3, [r7, #4]
100493ba:	2288      	movs	r2, #136	@ 0x88
100493bc:	2120      	movs	r1, #32
100493be:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
100493c0:	687b      	ldr	r3, [r7, #4]
100493c2:	2284      	movs	r2, #132	@ 0x84
100493c4:	2100      	movs	r1, #0
100493c6:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
100493c8:	2300      	movs	r3, #0
}
100493ca:	0018      	movs	r0, r3
100493cc:	46bd      	mov	sp, r7
100493ce:	b004      	add	sp, #16
100493d0:	bd80      	pop	{r7, pc}
	...

100493d4 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
100493d4:	b580      	push	{r7, lr}
100493d6:	b084      	sub	sp, #16
100493d8:	af00      	add	r7, sp, #0
100493da:	6078      	str	r0, [r7, #4]
100493dc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
100493de:	687b      	ldr	r3, [r7, #4]
100493e0:	2284      	movs	r2, #132	@ 0x84
100493e2:	5c9b      	ldrb	r3, [r3, r2]
100493e4:	2b01      	cmp	r3, #1
100493e6:	d101      	bne.n	100493ec <HAL_UARTEx_SetRxFifoThreshold+0x18>
100493e8:	2302      	movs	r3, #2
100493ea:	e02f      	b.n	1004944c <HAL_UARTEx_SetRxFifoThreshold+0x78>
100493ec:	687b      	ldr	r3, [r7, #4]
100493ee:	2284      	movs	r2, #132	@ 0x84
100493f0:	2101      	movs	r1, #1
100493f2:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
100493f4:	687b      	ldr	r3, [r7, #4]
100493f6:	2288      	movs	r2, #136	@ 0x88
100493f8:	2124      	movs	r1, #36	@ 0x24
100493fa:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
100493fc:	687b      	ldr	r3, [r7, #4]
100493fe:	681b      	ldr	r3, [r3, #0]
10049400:	681b      	ldr	r3, [r3, #0]
10049402:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
10049404:	687b      	ldr	r3, [r7, #4]
10049406:	681b      	ldr	r3, [r3, #0]
10049408:	681a      	ldr	r2, [r3, #0]
1004940a:	687b      	ldr	r3, [r7, #4]
1004940c:	681b      	ldr	r3, [r3, #0]
1004940e:	2101      	movs	r1, #1
10049410:	438a      	bics	r2, r1
10049412:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
10049414:	687b      	ldr	r3, [r7, #4]
10049416:	681b      	ldr	r3, [r3, #0]
10049418:	689b      	ldr	r3, [r3, #8]
1004941a:	4a0e      	ldr	r2, [pc, #56]	@ (10049454 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
1004941c:	4013      	ands	r3, r2
1004941e:	0019      	movs	r1, r3
10049420:	687b      	ldr	r3, [r7, #4]
10049422:	681b      	ldr	r3, [r3, #0]
10049424:	683a      	ldr	r2, [r7, #0]
10049426:	430a      	orrs	r2, r1
10049428:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
1004942a:	687b      	ldr	r3, [r7, #4]
1004942c:	0018      	movs	r0, r3
1004942e:	f000 f813 	bl	10049458 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
10049432:	687b      	ldr	r3, [r7, #4]
10049434:	681b      	ldr	r3, [r3, #0]
10049436:	68fa      	ldr	r2, [r7, #12]
10049438:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
1004943a:	687b      	ldr	r3, [r7, #4]
1004943c:	2288      	movs	r2, #136	@ 0x88
1004943e:	2120      	movs	r1, #32
10049440:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
10049442:	687b      	ldr	r3, [r7, #4]
10049444:	2284      	movs	r2, #132	@ 0x84
10049446:	2100      	movs	r1, #0
10049448:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
1004944a:	2300      	movs	r3, #0
}
1004944c:	0018      	movs	r0, r3
1004944e:	46bd      	mov	sp, r7
10049450:	b004      	add	sp, #16
10049452:	bd80      	pop	{r7, pc}
10049454:	f1ffffff 	.word	0xf1ffffff

10049458 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
10049458:	b5f0      	push	{r4, r5, r6, r7, lr}
1004945a:	b085      	sub	sp, #20
1004945c:	af00      	add	r7, sp, #0
1004945e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
10049460:	687b      	ldr	r3, [r7, #4]
10049462:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
10049464:	2b00      	cmp	r3, #0
10049466:	d108      	bne.n	1004947a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
10049468:	687b      	ldr	r3, [r7, #4]
1004946a:	226a      	movs	r2, #106	@ 0x6a
1004946c:	2101      	movs	r1, #1
1004946e:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
10049470:	687b      	ldr	r3, [r7, #4]
10049472:	2268      	movs	r2, #104	@ 0x68
10049474:	2101      	movs	r1, #1
10049476:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
10049478:	e043      	b.n	10049502 <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
1004947a:	260f      	movs	r6, #15
1004947c:	19bb      	adds	r3, r7, r6
1004947e:	2208      	movs	r2, #8
10049480:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
10049482:	200e      	movs	r0, #14
10049484:	183b      	adds	r3, r7, r0
10049486:	2208      	movs	r2, #8
10049488:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
1004948a:	687b      	ldr	r3, [r7, #4]
1004948c:	681b      	ldr	r3, [r3, #0]
1004948e:	689b      	ldr	r3, [r3, #8]
10049490:	0e5b      	lsrs	r3, r3, #25
10049492:	b2da      	uxtb	r2, r3
10049494:	240d      	movs	r4, #13
10049496:	193b      	adds	r3, r7, r4
10049498:	2107      	movs	r1, #7
1004949a:	400a      	ands	r2, r1
1004949c:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
1004949e:	687b      	ldr	r3, [r7, #4]
100494a0:	681b      	ldr	r3, [r3, #0]
100494a2:	689b      	ldr	r3, [r3, #8]
100494a4:	0f5b      	lsrs	r3, r3, #29
100494a6:	b2da      	uxtb	r2, r3
100494a8:	250c      	movs	r5, #12
100494aa:	197b      	adds	r3, r7, r5
100494ac:	2107      	movs	r1, #7
100494ae:	400a      	ands	r2, r1
100494b0:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
100494b2:	183b      	adds	r3, r7, r0
100494b4:	781b      	ldrb	r3, [r3, #0]
100494b6:	197a      	adds	r2, r7, r5
100494b8:	7812      	ldrb	r2, [r2, #0]
100494ba:	4914      	ldr	r1, [pc, #80]	@ (1004950c <UARTEx_SetNbDataToProcess+0xb4>)
100494bc:	5c8a      	ldrb	r2, [r1, r2]
100494be:	435a      	muls	r2, r3
100494c0:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
100494c2:	197b      	adds	r3, r7, r5
100494c4:	781b      	ldrb	r3, [r3, #0]
100494c6:	4a12      	ldr	r2, [pc, #72]	@ (10049510 <UARTEx_SetNbDataToProcess+0xb8>)
100494c8:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
100494ca:	0019      	movs	r1, r3
100494cc:	f7f6 fec0 	bl	10040250 <__divsi3>
100494d0:	0003      	movs	r3, r0
100494d2:	b299      	uxth	r1, r3
100494d4:	687b      	ldr	r3, [r7, #4]
100494d6:	226a      	movs	r2, #106	@ 0x6a
100494d8:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
100494da:	19bb      	adds	r3, r7, r6
100494dc:	781b      	ldrb	r3, [r3, #0]
100494de:	193a      	adds	r2, r7, r4
100494e0:	7812      	ldrb	r2, [r2, #0]
100494e2:	490a      	ldr	r1, [pc, #40]	@ (1004950c <UARTEx_SetNbDataToProcess+0xb4>)
100494e4:	5c8a      	ldrb	r2, [r1, r2]
100494e6:	435a      	muls	r2, r3
100494e8:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
100494ea:	193b      	adds	r3, r7, r4
100494ec:	781b      	ldrb	r3, [r3, #0]
100494ee:	4a08      	ldr	r2, [pc, #32]	@ (10049510 <UARTEx_SetNbDataToProcess+0xb8>)
100494f0:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
100494f2:	0019      	movs	r1, r3
100494f4:	f7f6 feac 	bl	10040250 <__divsi3>
100494f8:	0003      	movs	r3, r0
100494fa:	b299      	uxth	r1, r3
100494fc:	687b      	ldr	r3, [r7, #4]
100494fe:	2268      	movs	r2, #104	@ 0x68
10049500:	5299      	strh	r1, [r3, r2]
}
10049502:	46c0      	nop			@ (mov r8, r8)
10049504:	46bd      	mov	sp, r7
10049506:	b005      	add	sp, #20
10049508:	bdf0      	pop	{r4, r5, r6, r7, pc}
1004950a:	46c0      	nop			@ (mov r8, r8)
1004950c:	1004bfc8 	.word	0x1004bfc8
10049510:	1004bfd0 	.word	0x1004bfd0

10049514 <__cvt>:
10049514:	b5f0      	push	{r4, r5, r6, r7, lr}
10049516:	001f      	movs	r7, r3
10049518:	2300      	movs	r3, #0
1004951a:	0016      	movs	r6, r2
1004951c:	b08b      	sub	sp, #44	@ 0x2c
1004951e:	429f      	cmp	r7, r3
10049520:	da04      	bge.n	1004952c <__cvt+0x18>
10049522:	2180      	movs	r1, #128	@ 0x80
10049524:	0609      	lsls	r1, r1, #24
10049526:	187b      	adds	r3, r7, r1
10049528:	001f      	movs	r7, r3
1004952a:	232d      	movs	r3, #45	@ 0x2d
1004952c:	9a12      	ldr	r2, [sp, #72]	@ 0x48
1004952e:	9d14      	ldr	r5, [sp, #80]	@ 0x50
10049530:	7013      	strb	r3, [r2, #0]
10049532:	2320      	movs	r3, #32
10049534:	2203      	movs	r2, #3
10049536:	439d      	bics	r5, r3
10049538:	2d46      	cmp	r5, #70	@ 0x46
1004953a:	d007      	beq.n	1004954c <__cvt+0x38>
1004953c:	002b      	movs	r3, r5
1004953e:	3b45      	subs	r3, #69	@ 0x45
10049540:	4259      	negs	r1, r3
10049542:	414b      	adcs	r3, r1
10049544:	9910      	ldr	r1, [sp, #64]	@ 0x40
10049546:	3a01      	subs	r2, #1
10049548:	18cb      	adds	r3, r1, r3
1004954a:	9310      	str	r3, [sp, #64]	@ 0x40
1004954c:	ab09      	add	r3, sp, #36	@ 0x24
1004954e:	9304      	str	r3, [sp, #16]
10049550:	ab08      	add	r3, sp, #32
10049552:	9303      	str	r3, [sp, #12]
10049554:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
10049556:	9200      	str	r2, [sp, #0]
10049558:	9302      	str	r3, [sp, #8]
1004955a:	9b10      	ldr	r3, [sp, #64]	@ 0x40
1004955c:	0032      	movs	r2, r6
1004955e:	9301      	str	r3, [sp, #4]
10049560:	003b      	movs	r3, r7
10049562:	f000 fe53 	bl	1004a20c <_dtoa_r>
10049566:	0004      	movs	r4, r0
10049568:	2d47      	cmp	r5, #71	@ 0x47
1004956a:	d11b      	bne.n	100495a4 <__cvt+0x90>
1004956c:	9b11      	ldr	r3, [sp, #68]	@ 0x44
1004956e:	07db      	lsls	r3, r3, #31
10049570:	d511      	bpl.n	10049596 <__cvt+0x82>
10049572:	9b10      	ldr	r3, [sp, #64]	@ 0x40
10049574:	18c3      	adds	r3, r0, r3
10049576:	9307      	str	r3, [sp, #28]
10049578:	2200      	movs	r2, #0
1004957a:	2300      	movs	r3, #0
1004957c:	0030      	movs	r0, r6
1004957e:	0039      	movs	r1, r7
10049580:	f7f6 ff62 	bl	10040448 <__aeabi_dcmpeq>
10049584:	2800      	cmp	r0, #0
10049586:	d001      	beq.n	1004958c <__cvt+0x78>
10049588:	9b07      	ldr	r3, [sp, #28]
1004958a:	9309      	str	r3, [sp, #36]	@ 0x24
1004958c:	2230      	movs	r2, #48	@ 0x30
1004958e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
10049590:	9907      	ldr	r1, [sp, #28]
10049592:	428b      	cmp	r3, r1
10049594:	d320      	bcc.n	100495d8 <__cvt+0xc4>
10049596:	0020      	movs	r0, r4
10049598:	9b09      	ldr	r3, [sp, #36]	@ 0x24
1004959a:	9a15      	ldr	r2, [sp, #84]	@ 0x54
1004959c:	1b1b      	subs	r3, r3, r4
1004959e:	6013      	str	r3, [r2, #0]
100495a0:	b00b      	add	sp, #44	@ 0x2c
100495a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
100495a4:	9b10      	ldr	r3, [sp, #64]	@ 0x40
100495a6:	18c3      	adds	r3, r0, r3
100495a8:	9307      	str	r3, [sp, #28]
100495aa:	2d46      	cmp	r5, #70	@ 0x46
100495ac:	d1e4      	bne.n	10049578 <__cvt+0x64>
100495ae:	7803      	ldrb	r3, [r0, #0]
100495b0:	2b30      	cmp	r3, #48	@ 0x30
100495b2:	d10c      	bne.n	100495ce <__cvt+0xba>
100495b4:	2200      	movs	r2, #0
100495b6:	2300      	movs	r3, #0
100495b8:	0030      	movs	r0, r6
100495ba:	0039      	movs	r1, r7
100495bc:	f7f6 ff44 	bl	10040448 <__aeabi_dcmpeq>
100495c0:	2800      	cmp	r0, #0
100495c2:	d104      	bne.n	100495ce <__cvt+0xba>
100495c4:	2301      	movs	r3, #1
100495c6:	9a10      	ldr	r2, [sp, #64]	@ 0x40
100495c8:	1a9b      	subs	r3, r3, r2
100495ca:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
100495cc:	6013      	str	r3, [r2, #0]
100495ce:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
100495d0:	9a07      	ldr	r2, [sp, #28]
100495d2:	681b      	ldr	r3, [r3, #0]
100495d4:	18d3      	adds	r3, r2, r3
100495d6:	e7ce      	b.n	10049576 <__cvt+0x62>
100495d8:	1c59      	adds	r1, r3, #1
100495da:	9109      	str	r1, [sp, #36]	@ 0x24
100495dc:	701a      	strb	r2, [r3, #0]
100495de:	e7d6      	b.n	1004958e <__cvt+0x7a>

100495e0 <__exponent>:
100495e0:	b5f0      	push	{r4, r5, r6, r7, lr}
100495e2:	232b      	movs	r3, #43	@ 0x2b
100495e4:	0005      	movs	r5, r0
100495e6:	000c      	movs	r4, r1
100495e8:	b085      	sub	sp, #20
100495ea:	7002      	strb	r2, [r0, #0]
100495ec:	2900      	cmp	r1, #0
100495ee:	da01      	bge.n	100495f4 <__exponent+0x14>
100495f0:	424c      	negs	r4, r1
100495f2:	3302      	adds	r3, #2
100495f4:	706b      	strb	r3, [r5, #1]
100495f6:	2c09      	cmp	r4, #9
100495f8:	dd2c      	ble.n	10049654 <__exponent+0x74>
100495fa:	ab02      	add	r3, sp, #8
100495fc:	1dde      	adds	r6, r3, #7
100495fe:	0020      	movs	r0, r4
10049600:	210a      	movs	r1, #10
10049602:	f7f6 ff0b 	bl	1004041c <__aeabi_idivmod>
10049606:	0037      	movs	r7, r6
10049608:	3130      	adds	r1, #48	@ 0x30
1004960a:	3e01      	subs	r6, #1
1004960c:	0020      	movs	r0, r4
1004960e:	7031      	strb	r1, [r6, #0]
10049610:	210a      	movs	r1, #10
10049612:	9401      	str	r4, [sp, #4]
10049614:	f7f6 fe1c 	bl	10040250 <__divsi3>
10049618:	9b01      	ldr	r3, [sp, #4]
1004961a:	0004      	movs	r4, r0
1004961c:	2b63      	cmp	r3, #99	@ 0x63
1004961e:	dcee      	bgt.n	100495fe <__exponent+0x1e>
10049620:	1eba      	subs	r2, r7, #2
10049622:	1ca8      	adds	r0, r5, #2
10049624:	0001      	movs	r1, r0
10049626:	0013      	movs	r3, r2
10049628:	3430      	adds	r4, #48	@ 0x30
1004962a:	7014      	strb	r4, [r2, #0]
1004962c:	ac02      	add	r4, sp, #8
1004962e:	3407      	adds	r4, #7
10049630:	429c      	cmp	r4, r3
10049632:	d80a      	bhi.n	1004964a <__exponent+0x6a>
10049634:	2300      	movs	r3, #0
10049636:	42a2      	cmp	r2, r4
10049638:	d803      	bhi.n	10049642 <__exponent+0x62>
1004963a:	3309      	adds	r3, #9
1004963c:	aa02      	add	r2, sp, #8
1004963e:	189b      	adds	r3, r3, r2
10049640:	1bdb      	subs	r3, r3, r7
10049642:	18c0      	adds	r0, r0, r3
10049644:	1b40      	subs	r0, r0, r5
10049646:	b005      	add	sp, #20
10049648:	bdf0      	pop	{r4, r5, r6, r7, pc}
1004964a:	781c      	ldrb	r4, [r3, #0]
1004964c:	3301      	adds	r3, #1
1004964e:	700c      	strb	r4, [r1, #0]
10049650:	3101      	adds	r1, #1
10049652:	e7eb      	b.n	1004962c <__exponent+0x4c>
10049654:	2330      	movs	r3, #48	@ 0x30
10049656:	18e4      	adds	r4, r4, r3
10049658:	70ab      	strb	r3, [r5, #2]
1004965a:	1d28      	adds	r0, r5, #4
1004965c:	70ec      	strb	r4, [r5, #3]
1004965e:	e7f1      	b.n	10049644 <__exponent+0x64>

10049660 <_printf_float>:
10049660:	b5f0      	push	{r4, r5, r6, r7, lr}
10049662:	b097      	sub	sp, #92	@ 0x5c
10049664:	000d      	movs	r5, r1
10049666:	920a      	str	r2, [sp, #40]	@ 0x28
10049668:	9c1c      	ldr	r4, [sp, #112]	@ 0x70
1004966a:	930b      	str	r3, [sp, #44]	@ 0x2c
1004966c:	9009      	str	r0, [sp, #36]	@ 0x24
1004966e:	f000 fcd9 	bl	1004a024 <_localeconv_r>
10049672:	6803      	ldr	r3, [r0, #0]
10049674:	0018      	movs	r0, r3
10049676:	930d      	str	r3, [sp, #52]	@ 0x34
10049678:	f7f6 fd44 	bl	10040104 <strlen>
1004967c:	2300      	movs	r3, #0
1004967e:	900f      	str	r0, [sp, #60]	@ 0x3c
10049680:	9314      	str	r3, [sp, #80]	@ 0x50
10049682:	7e2b      	ldrb	r3, [r5, #24]
10049684:	2207      	movs	r2, #7
10049686:	930c      	str	r3, [sp, #48]	@ 0x30
10049688:	682b      	ldr	r3, [r5, #0]
1004968a:	930e      	str	r3, [sp, #56]	@ 0x38
1004968c:	990e      	ldr	r1, [sp, #56]	@ 0x38
1004968e:	6823      	ldr	r3, [r4, #0]
10049690:	05c9      	lsls	r1, r1, #23
10049692:	d545      	bpl.n	10049720 <_printf_float+0xc0>
10049694:	189b      	adds	r3, r3, r2
10049696:	4393      	bics	r3, r2
10049698:	001a      	movs	r2, r3
1004969a:	3208      	adds	r2, #8
1004969c:	6022      	str	r2, [r4, #0]
1004969e:	2201      	movs	r2, #1
100496a0:	681e      	ldr	r6, [r3, #0]
100496a2:	685f      	ldr	r7, [r3, #4]
100496a4:	007b      	lsls	r3, r7, #1
100496a6:	085b      	lsrs	r3, r3, #1
100496a8:	9311      	str	r3, [sp, #68]	@ 0x44
100496aa:	9610      	str	r6, [sp, #64]	@ 0x40
100496ac:	64ae      	str	r6, [r5, #72]	@ 0x48
100496ae:	64ef      	str	r7, [r5, #76]	@ 0x4c
100496b0:	9810      	ldr	r0, [sp, #64]	@ 0x40
100496b2:	9911      	ldr	r1, [sp, #68]	@ 0x44
100496b4:	4ba7      	ldr	r3, [pc, #668]	@ (10049954 <_printf_float+0x2f4>)
100496b6:	4252      	negs	r2, r2
100496b8:	f7f8 fe38 	bl	1004232c <__aeabi_dcmpun>
100496bc:	2800      	cmp	r0, #0
100496be:	d131      	bne.n	10049724 <_printf_float+0xc4>
100496c0:	9810      	ldr	r0, [sp, #64]	@ 0x40
100496c2:	9911      	ldr	r1, [sp, #68]	@ 0x44
100496c4:	2201      	movs	r2, #1
100496c6:	4ba3      	ldr	r3, [pc, #652]	@ (10049954 <_printf_float+0x2f4>)
100496c8:	4252      	negs	r2, r2
100496ca:	f7f6 fecd 	bl	10040468 <__aeabi_dcmple>
100496ce:	2800      	cmp	r0, #0
100496d0:	d128      	bne.n	10049724 <_printf_float+0xc4>
100496d2:	2200      	movs	r2, #0
100496d4:	2300      	movs	r3, #0
100496d6:	0030      	movs	r0, r6
100496d8:	0039      	movs	r1, r7
100496da:	f7f6 febb 	bl	10040454 <__aeabi_dcmplt>
100496de:	2800      	cmp	r0, #0
100496e0:	d003      	beq.n	100496ea <_printf_float+0x8a>
100496e2:	002b      	movs	r3, r5
100496e4:	222d      	movs	r2, #45	@ 0x2d
100496e6:	3343      	adds	r3, #67	@ 0x43
100496e8:	701a      	strb	r2, [r3, #0]
100496ea:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
100496ec:	4f9a      	ldr	r7, [pc, #616]	@ (10049958 <_printf_float+0x2f8>)
100496ee:	2b47      	cmp	r3, #71	@ 0x47
100496f0:	d900      	bls.n	100496f4 <_printf_float+0x94>
100496f2:	4f9a      	ldr	r7, [pc, #616]	@ (1004995c <_printf_float+0x2fc>)
100496f4:	2303      	movs	r3, #3
100496f6:	2400      	movs	r4, #0
100496f8:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
100496fa:	612b      	str	r3, [r5, #16]
100496fc:	3301      	adds	r3, #1
100496fe:	439a      	bics	r2, r3
10049700:	602a      	str	r2, [r5, #0]
10049702:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
10049704:	0029      	movs	r1, r5
10049706:	9300      	str	r3, [sp, #0]
10049708:	9809      	ldr	r0, [sp, #36]	@ 0x24
1004970a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
1004970c:	aa15      	add	r2, sp, #84	@ 0x54
1004970e:	f000 f9e5 	bl	10049adc <_printf_common>
10049712:	3001      	adds	r0, #1
10049714:	d000      	beq.n	10049718 <_printf_float+0xb8>
10049716:	e09f      	b.n	10049858 <_printf_float+0x1f8>
10049718:	2001      	movs	r0, #1
1004971a:	4240      	negs	r0, r0
1004971c:	b017      	add	sp, #92	@ 0x5c
1004971e:	bdf0      	pop	{r4, r5, r6, r7, pc}
10049720:	3307      	adds	r3, #7
10049722:	e7b8      	b.n	10049696 <_printf_float+0x36>
10049724:	0032      	movs	r2, r6
10049726:	003b      	movs	r3, r7
10049728:	0030      	movs	r0, r6
1004972a:	0039      	movs	r1, r7
1004972c:	f7f8 fdfe 	bl	1004232c <__aeabi_dcmpun>
10049730:	2800      	cmp	r0, #0
10049732:	d00b      	beq.n	1004974c <_printf_float+0xec>
10049734:	2f00      	cmp	r7, #0
10049736:	da03      	bge.n	10049740 <_printf_float+0xe0>
10049738:	002b      	movs	r3, r5
1004973a:	222d      	movs	r2, #45	@ 0x2d
1004973c:	3343      	adds	r3, #67	@ 0x43
1004973e:	701a      	strb	r2, [r3, #0]
10049740:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
10049742:	4f87      	ldr	r7, [pc, #540]	@ (10049960 <_printf_float+0x300>)
10049744:	2b47      	cmp	r3, #71	@ 0x47
10049746:	d9d5      	bls.n	100496f4 <_printf_float+0x94>
10049748:	4f86      	ldr	r7, [pc, #536]	@ (10049964 <_printf_float+0x304>)
1004974a:	e7d3      	b.n	100496f4 <_printf_float+0x94>
1004974c:	2220      	movs	r2, #32
1004974e:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
10049750:	686b      	ldr	r3, [r5, #4]
10049752:	4394      	bics	r4, r2
10049754:	1c5a      	adds	r2, r3, #1
10049756:	d146      	bne.n	100497e6 <_printf_float+0x186>
10049758:	3307      	adds	r3, #7
1004975a:	606b      	str	r3, [r5, #4]
1004975c:	2380      	movs	r3, #128	@ 0x80
1004975e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
10049760:	00db      	lsls	r3, r3, #3
10049762:	4313      	orrs	r3, r2
10049764:	2200      	movs	r2, #0
10049766:	602b      	str	r3, [r5, #0]
10049768:	9206      	str	r2, [sp, #24]
1004976a:	aa14      	add	r2, sp, #80	@ 0x50
1004976c:	9205      	str	r2, [sp, #20]
1004976e:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
10049770:	a90a      	add	r1, sp, #40	@ 0x28
10049772:	9204      	str	r2, [sp, #16]
10049774:	aa13      	add	r2, sp, #76	@ 0x4c
10049776:	9203      	str	r2, [sp, #12]
10049778:	2223      	movs	r2, #35	@ 0x23
1004977a:	1852      	adds	r2, r2, r1
1004977c:	9202      	str	r2, [sp, #8]
1004977e:	9301      	str	r3, [sp, #4]
10049780:	686b      	ldr	r3, [r5, #4]
10049782:	0032      	movs	r2, r6
10049784:	9300      	str	r3, [sp, #0]
10049786:	9809      	ldr	r0, [sp, #36]	@ 0x24
10049788:	003b      	movs	r3, r7
1004978a:	f7ff fec3 	bl	10049514 <__cvt>
1004978e:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
10049790:	0007      	movs	r7, r0
10049792:	2c47      	cmp	r4, #71	@ 0x47
10049794:	d12d      	bne.n	100497f2 <_printf_float+0x192>
10049796:	1cd3      	adds	r3, r2, #3
10049798:	db02      	blt.n	100497a0 <_printf_float+0x140>
1004979a:	686b      	ldr	r3, [r5, #4]
1004979c:	429a      	cmp	r2, r3
1004979e:	dd48      	ble.n	10049832 <_printf_float+0x1d2>
100497a0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
100497a2:	9913      	ldr	r1, [sp, #76]	@ 0x4c
100497a4:	3b02      	subs	r3, #2
100497a6:	b2db      	uxtb	r3, r3
100497a8:	930c      	str	r3, [sp, #48]	@ 0x30
100497aa:	0028      	movs	r0, r5
100497ac:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
100497ae:	3901      	subs	r1, #1
100497b0:	3050      	adds	r0, #80	@ 0x50
100497b2:	9113      	str	r1, [sp, #76]	@ 0x4c
100497b4:	f7ff ff14 	bl	100495e0 <__exponent>
100497b8:	9a14      	ldr	r2, [sp, #80]	@ 0x50
100497ba:	0004      	movs	r4, r0
100497bc:	1813      	adds	r3, r2, r0
100497be:	612b      	str	r3, [r5, #16]
100497c0:	2a01      	cmp	r2, #1
100497c2:	dc02      	bgt.n	100497ca <_printf_float+0x16a>
100497c4:	682a      	ldr	r2, [r5, #0]
100497c6:	07d2      	lsls	r2, r2, #31
100497c8:	d501      	bpl.n	100497ce <_printf_float+0x16e>
100497ca:	3301      	adds	r3, #1
100497cc:	612b      	str	r3, [r5, #16]
100497ce:	2323      	movs	r3, #35	@ 0x23
100497d0:	aa0a      	add	r2, sp, #40	@ 0x28
100497d2:	189b      	adds	r3, r3, r2
100497d4:	781b      	ldrb	r3, [r3, #0]
100497d6:	2b00      	cmp	r3, #0
100497d8:	d100      	bne.n	100497dc <_printf_float+0x17c>
100497da:	e792      	b.n	10049702 <_printf_float+0xa2>
100497dc:	002b      	movs	r3, r5
100497de:	222d      	movs	r2, #45	@ 0x2d
100497e0:	3343      	adds	r3, #67	@ 0x43
100497e2:	701a      	strb	r2, [r3, #0]
100497e4:	e78d      	b.n	10049702 <_printf_float+0xa2>
100497e6:	2c47      	cmp	r4, #71	@ 0x47
100497e8:	d1b8      	bne.n	1004975c <_printf_float+0xfc>
100497ea:	2b00      	cmp	r3, #0
100497ec:	d1b6      	bne.n	1004975c <_printf_float+0xfc>
100497ee:	3301      	adds	r3, #1
100497f0:	e7b3      	b.n	1004975a <_printf_float+0xfa>
100497f2:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
100497f4:	0011      	movs	r1, r2
100497f6:	2b65      	cmp	r3, #101	@ 0x65
100497f8:	d9d7      	bls.n	100497aa <_printf_float+0x14a>
100497fa:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
100497fc:	2b66      	cmp	r3, #102	@ 0x66
100497fe:	d11a      	bne.n	10049836 <_printf_float+0x1d6>
10049800:	686b      	ldr	r3, [r5, #4]
10049802:	2a00      	cmp	r2, #0
10049804:	dd09      	ble.n	1004981a <_printf_float+0x1ba>
10049806:	612a      	str	r2, [r5, #16]
10049808:	2b00      	cmp	r3, #0
1004980a:	d102      	bne.n	10049812 <_printf_float+0x1b2>
1004980c:	6829      	ldr	r1, [r5, #0]
1004980e:	07c9      	lsls	r1, r1, #31
10049810:	d50b      	bpl.n	1004982a <_printf_float+0x1ca>
10049812:	3301      	adds	r3, #1
10049814:	189b      	adds	r3, r3, r2
10049816:	612b      	str	r3, [r5, #16]
10049818:	e007      	b.n	1004982a <_printf_float+0x1ca>
1004981a:	2b00      	cmp	r3, #0
1004981c:	d103      	bne.n	10049826 <_printf_float+0x1c6>
1004981e:	2201      	movs	r2, #1
10049820:	6829      	ldr	r1, [r5, #0]
10049822:	4211      	tst	r1, r2
10049824:	d000      	beq.n	10049828 <_printf_float+0x1c8>
10049826:	1c9a      	adds	r2, r3, #2
10049828:	612a      	str	r2, [r5, #16]
1004982a:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
1004982c:	2400      	movs	r4, #0
1004982e:	65ab      	str	r3, [r5, #88]	@ 0x58
10049830:	e7cd      	b.n	100497ce <_printf_float+0x16e>
10049832:	2367      	movs	r3, #103	@ 0x67
10049834:	930c      	str	r3, [sp, #48]	@ 0x30
10049836:	9913      	ldr	r1, [sp, #76]	@ 0x4c
10049838:	9b14      	ldr	r3, [sp, #80]	@ 0x50
1004983a:	4299      	cmp	r1, r3
1004983c:	db06      	blt.n	1004984c <_printf_float+0x1ec>
1004983e:	682b      	ldr	r3, [r5, #0]
10049840:	6129      	str	r1, [r5, #16]
10049842:	07db      	lsls	r3, r3, #31
10049844:	d5f1      	bpl.n	1004982a <_printf_float+0x1ca>
10049846:	3101      	adds	r1, #1
10049848:	6129      	str	r1, [r5, #16]
1004984a:	e7ee      	b.n	1004982a <_printf_float+0x1ca>
1004984c:	2201      	movs	r2, #1
1004984e:	2900      	cmp	r1, #0
10049850:	dce0      	bgt.n	10049814 <_printf_float+0x1b4>
10049852:	1892      	adds	r2, r2, r2
10049854:	1a52      	subs	r2, r2, r1
10049856:	e7dd      	b.n	10049814 <_printf_float+0x1b4>
10049858:	682a      	ldr	r2, [r5, #0]
1004985a:	0553      	lsls	r3, r2, #21
1004985c:	d408      	bmi.n	10049870 <_printf_float+0x210>
1004985e:	692b      	ldr	r3, [r5, #16]
10049860:	003a      	movs	r2, r7
10049862:	990a      	ldr	r1, [sp, #40]	@ 0x28
10049864:	9809      	ldr	r0, [sp, #36]	@ 0x24
10049866:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
10049868:	47a0      	blx	r4
1004986a:	3001      	adds	r0, #1
1004986c:	d129      	bne.n	100498c2 <_printf_float+0x262>
1004986e:	e753      	b.n	10049718 <_printf_float+0xb8>
10049870:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
10049872:	2b65      	cmp	r3, #101	@ 0x65
10049874:	d800      	bhi.n	10049878 <_printf_float+0x218>
10049876:	e0da      	b.n	10049a2e <_printf_float+0x3ce>
10049878:	6ca8      	ldr	r0, [r5, #72]	@ 0x48
1004987a:	6ce9      	ldr	r1, [r5, #76]	@ 0x4c
1004987c:	2200      	movs	r2, #0
1004987e:	2300      	movs	r3, #0
10049880:	f7f6 fde2 	bl	10040448 <__aeabi_dcmpeq>
10049884:	2800      	cmp	r0, #0
10049886:	d033      	beq.n	100498f0 <_printf_float+0x290>
10049888:	2301      	movs	r3, #1
1004988a:	4a37      	ldr	r2, [pc, #220]	@ (10049968 <_printf_float+0x308>)
1004988c:	990a      	ldr	r1, [sp, #40]	@ 0x28
1004988e:	9809      	ldr	r0, [sp, #36]	@ 0x24
10049890:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
10049892:	47a0      	blx	r4
10049894:	3001      	adds	r0, #1
10049896:	d100      	bne.n	1004989a <_printf_float+0x23a>
10049898:	e73e      	b.n	10049718 <_printf_float+0xb8>
1004989a:	9e14      	ldr	r6, [sp, #80]	@ 0x50
1004989c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
1004989e:	42b3      	cmp	r3, r6
100498a0:	db02      	blt.n	100498a8 <_printf_float+0x248>
100498a2:	682b      	ldr	r3, [r5, #0]
100498a4:	07db      	lsls	r3, r3, #31
100498a6:	d50c      	bpl.n	100498c2 <_printf_float+0x262>
100498a8:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
100498aa:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
100498ac:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
100498ae:	990a      	ldr	r1, [sp, #40]	@ 0x28
100498b0:	9809      	ldr	r0, [sp, #36]	@ 0x24
100498b2:	47a0      	blx	r4
100498b4:	2400      	movs	r4, #0
100498b6:	3001      	adds	r0, #1
100498b8:	d100      	bne.n	100498bc <_printf_float+0x25c>
100498ba:	e72d      	b.n	10049718 <_printf_float+0xb8>
100498bc:	1e73      	subs	r3, r6, #1
100498be:	42a3      	cmp	r3, r4
100498c0:	dc0a      	bgt.n	100498d8 <_printf_float+0x278>
100498c2:	682b      	ldr	r3, [r5, #0]
100498c4:	079b      	lsls	r3, r3, #30
100498c6:	d500      	bpl.n	100498ca <_printf_float+0x26a>
100498c8:	e105      	b.n	10049ad6 <_printf_float+0x476>
100498ca:	9b15      	ldr	r3, [sp, #84]	@ 0x54
100498cc:	68e8      	ldr	r0, [r5, #12]
100498ce:	4298      	cmp	r0, r3
100498d0:	db00      	blt.n	100498d4 <_printf_float+0x274>
100498d2:	e723      	b.n	1004971c <_printf_float+0xbc>
100498d4:	0018      	movs	r0, r3
100498d6:	e721      	b.n	1004971c <_printf_float+0xbc>
100498d8:	002a      	movs	r2, r5
100498da:	2301      	movs	r3, #1
100498dc:	990a      	ldr	r1, [sp, #40]	@ 0x28
100498de:	9809      	ldr	r0, [sp, #36]	@ 0x24
100498e0:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
100498e2:	321a      	adds	r2, #26
100498e4:	47b8      	blx	r7
100498e6:	3001      	adds	r0, #1
100498e8:	d100      	bne.n	100498ec <_printf_float+0x28c>
100498ea:	e715      	b.n	10049718 <_printf_float+0xb8>
100498ec:	3401      	adds	r4, #1
100498ee:	e7e5      	b.n	100498bc <_printf_float+0x25c>
100498f0:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
100498f2:	2b00      	cmp	r3, #0
100498f4:	dc3a      	bgt.n	1004996c <_printf_float+0x30c>
100498f6:	2301      	movs	r3, #1
100498f8:	4a1b      	ldr	r2, [pc, #108]	@ (10049968 <_printf_float+0x308>)
100498fa:	990a      	ldr	r1, [sp, #40]	@ 0x28
100498fc:	9809      	ldr	r0, [sp, #36]	@ 0x24
100498fe:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
10049900:	47a0      	blx	r4
10049902:	3001      	adds	r0, #1
10049904:	d100      	bne.n	10049908 <_printf_float+0x2a8>
10049906:	e707      	b.n	10049718 <_printf_float+0xb8>
10049908:	9e14      	ldr	r6, [sp, #80]	@ 0x50
1004990a:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
1004990c:	4333      	orrs	r3, r6
1004990e:	d102      	bne.n	10049916 <_printf_float+0x2b6>
10049910:	682b      	ldr	r3, [r5, #0]
10049912:	07db      	lsls	r3, r3, #31
10049914:	d5d5      	bpl.n	100498c2 <_printf_float+0x262>
10049916:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
10049918:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
1004991a:	990a      	ldr	r1, [sp, #40]	@ 0x28
1004991c:	9809      	ldr	r0, [sp, #36]	@ 0x24
1004991e:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
10049920:	47a0      	blx	r4
10049922:	2300      	movs	r3, #0
10049924:	3001      	adds	r0, #1
10049926:	d100      	bne.n	1004992a <_printf_float+0x2ca>
10049928:	e6f6      	b.n	10049718 <_printf_float+0xb8>
1004992a:	930c      	str	r3, [sp, #48]	@ 0x30
1004992c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
1004992e:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
10049930:	425b      	negs	r3, r3
10049932:	4293      	cmp	r3, r2
10049934:	dc01      	bgt.n	1004993a <_printf_float+0x2da>
10049936:	0033      	movs	r3, r6
10049938:	e792      	b.n	10049860 <_printf_float+0x200>
1004993a:	002a      	movs	r2, r5
1004993c:	2301      	movs	r3, #1
1004993e:	990a      	ldr	r1, [sp, #40]	@ 0x28
10049940:	9809      	ldr	r0, [sp, #36]	@ 0x24
10049942:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
10049944:	321a      	adds	r2, #26
10049946:	47a0      	blx	r4
10049948:	3001      	adds	r0, #1
1004994a:	d100      	bne.n	1004994e <_printf_float+0x2ee>
1004994c:	e6e4      	b.n	10049718 <_printf_float+0xb8>
1004994e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
10049950:	3301      	adds	r3, #1
10049952:	e7ea      	b.n	1004992a <_printf_float+0x2ca>
10049954:	7fefffff 	.word	0x7fefffff
10049958:	1004bfd8 	.word	0x1004bfd8
1004995c:	1004bfdc 	.word	0x1004bfdc
10049960:	1004bfe0 	.word	0x1004bfe0
10049964:	1004bfe4 	.word	0x1004bfe4
10049968:	1004bfe8 	.word	0x1004bfe8
1004996c:	9b14      	ldr	r3, [sp, #80]	@ 0x50
1004996e:	6dae      	ldr	r6, [r5, #88]	@ 0x58
10049970:	930c      	str	r3, [sp, #48]	@ 0x30
10049972:	429e      	cmp	r6, r3
10049974:	dd00      	ble.n	10049978 <_printf_float+0x318>
10049976:	001e      	movs	r6, r3
10049978:	2e00      	cmp	r6, #0
1004997a:	dc31      	bgt.n	100499e0 <_printf_float+0x380>
1004997c:	43f3      	mvns	r3, r6
1004997e:	2400      	movs	r4, #0
10049980:	17db      	asrs	r3, r3, #31
10049982:	4033      	ands	r3, r6
10049984:	930e      	str	r3, [sp, #56]	@ 0x38
10049986:	6dae      	ldr	r6, [r5, #88]	@ 0x58
10049988:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
1004998a:	1af3      	subs	r3, r6, r3
1004998c:	42a3      	cmp	r3, r4
1004998e:	dc30      	bgt.n	100499f2 <_printf_float+0x392>
10049990:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
10049992:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
10049994:	429a      	cmp	r2, r3
10049996:	dc38      	bgt.n	10049a0a <_printf_float+0x3aa>
10049998:	682b      	ldr	r3, [r5, #0]
1004999a:	07db      	lsls	r3, r3, #31
1004999c:	d435      	bmi.n	10049a0a <_printf_float+0x3aa>
1004999e:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
100499a0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
100499a2:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
100499a4:	1b9b      	subs	r3, r3, r6
100499a6:	1b14      	subs	r4, r2, r4
100499a8:	429c      	cmp	r4, r3
100499aa:	dd00      	ble.n	100499ae <_printf_float+0x34e>
100499ac:	001c      	movs	r4, r3
100499ae:	2c00      	cmp	r4, #0
100499b0:	dc34      	bgt.n	10049a1c <_printf_float+0x3bc>
100499b2:	43e3      	mvns	r3, r4
100499b4:	2600      	movs	r6, #0
100499b6:	17db      	asrs	r3, r3, #31
100499b8:	401c      	ands	r4, r3
100499ba:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
100499bc:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
100499be:	1ad3      	subs	r3, r2, r3
100499c0:	1b1b      	subs	r3, r3, r4
100499c2:	42b3      	cmp	r3, r6
100499c4:	dc00      	bgt.n	100499c8 <_printf_float+0x368>
100499c6:	e77c      	b.n	100498c2 <_printf_float+0x262>
100499c8:	002a      	movs	r2, r5
100499ca:	2301      	movs	r3, #1
100499cc:	990a      	ldr	r1, [sp, #40]	@ 0x28
100499ce:	9809      	ldr	r0, [sp, #36]	@ 0x24
100499d0:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
100499d2:	321a      	adds	r2, #26
100499d4:	47b8      	blx	r7
100499d6:	3001      	adds	r0, #1
100499d8:	d100      	bne.n	100499dc <_printf_float+0x37c>
100499da:	e69d      	b.n	10049718 <_printf_float+0xb8>
100499dc:	3601      	adds	r6, #1
100499de:	e7ec      	b.n	100499ba <_printf_float+0x35a>
100499e0:	0033      	movs	r3, r6
100499e2:	003a      	movs	r2, r7
100499e4:	990a      	ldr	r1, [sp, #40]	@ 0x28
100499e6:	9809      	ldr	r0, [sp, #36]	@ 0x24
100499e8:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
100499ea:	47a0      	blx	r4
100499ec:	3001      	adds	r0, #1
100499ee:	d1c5      	bne.n	1004997c <_printf_float+0x31c>
100499f0:	e692      	b.n	10049718 <_printf_float+0xb8>
100499f2:	002a      	movs	r2, r5
100499f4:	2301      	movs	r3, #1
100499f6:	990a      	ldr	r1, [sp, #40]	@ 0x28
100499f8:	9809      	ldr	r0, [sp, #36]	@ 0x24
100499fa:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
100499fc:	321a      	adds	r2, #26
100499fe:	47b0      	blx	r6
10049a00:	3001      	adds	r0, #1
10049a02:	d100      	bne.n	10049a06 <_printf_float+0x3a6>
10049a04:	e688      	b.n	10049718 <_printf_float+0xb8>
10049a06:	3401      	adds	r4, #1
10049a08:	e7bd      	b.n	10049986 <_printf_float+0x326>
10049a0a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
10049a0c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
10049a0e:	990a      	ldr	r1, [sp, #40]	@ 0x28
10049a10:	9809      	ldr	r0, [sp, #36]	@ 0x24
10049a12:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
10049a14:	47a0      	blx	r4
10049a16:	3001      	adds	r0, #1
10049a18:	d1c1      	bne.n	1004999e <_printf_float+0x33e>
10049a1a:	e67d      	b.n	10049718 <_printf_float+0xb8>
10049a1c:	19ba      	adds	r2, r7, r6
10049a1e:	0023      	movs	r3, r4
10049a20:	990a      	ldr	r1, [sp, #40]	@ 0x28
10049a22:	9809      	ldr	r0, [sp, #36]	@ 0x24
10049a24:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
10049a26:	47b0      	blx	r6
10049a28:	3001      	adds	r0, #1
10049a2a:	d1c2      	bne.n	100499b2 <_printf_float+0x352>
10049a2c:	e674      	b.n	10049718 <_printf_float+0xb8>
10049a2e:	9b14      	ldr	r3, [sp, #80]	@ 0x50
10049a30:	930c      	str	r3, [sp, #48]	@ 0x30
10049a32:	2b01      	cmp	r3, #1
10049a34:	dc02      	bgt.n	10049a3c <_printf_float+0x3dc>
10049a36:	2301      	movs	r3, #1
10049a38:	421a      	tst	r2, r3
10049a3a:	d039      	beq.n	10049ab0 <_printf_float+0x450>
10049a3c:	2301      	movs	r3, #1
10049a3e:	003a      	movs	r2, r7
10049a40:	990a      	ldr	r1, [sp, #40]	@ 0x28
10049a42:	9809      	ldr	r0, [sp, #36]	@ 0x24
10049a44:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
10049a46:	47b0      	blx	r6
10049a48:	3001      	adds	r0, #1
10049a4a:	d100      	bne.n	10049a4e <_printf_float+0x3ee>
10049a4c:	e664      	b.n	10049718 <_printf_float+0xb8>
10049a4e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
10049a50:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
10049a52:	990a      	ldr	r1, [sp, #40]	@ 0x28
10049a54:	9809      	ldr	r0, [sp, #36]	@ 0x24
10049a56:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
10049a58:	47b0      	blx	r6
10049a5a:	3001      	adds	r0, #1
10049a5c:	d100      	bne.n	10049a60 <_printf_float+0x400>
10049a5e:	e65b      	b.n	10049718 <_printf_float+0xb8>
10049a60:	6ca8      	ldr	r0, [r5, #72]	@ 0x48
10049a62:	6ce9      	ldr	r1, [r5, #76]	@ 0x4c
10049a64:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
10049a66:	2200      	movs	r2, #0
10049a68:	3b01      	subs	r3, #1
10049a6a:	930c      	str	r3, [sp, #48]	@ 0x30
10049a6c:	2300      	movs	r3, #0
10049a6e:	f7f6 fceb 	bl	10040448 <__aeabi_dcmpeq>
10049a72:	2800      	cmp	r0, #0
10049a74:	d11a      	bne.n	10049aac <_printf_float+0x44c>
10049a76:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
10049a78:	1c7a      	adds	r2, r7, #1
10049a7a:	990a      	ldr	r1, [sp, #40]	@ 0x28
10049a7c:	9809      	ldr	r0, [sp, #36]	@ 0x24
10049a7e:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
10049a80:	47b0      	blx	r6
10049a82:	3001      	adds	r0, #1
10049a84:	d10e      	bne.n	10049aa4 <_printf_float+0x444>
10049a86:	e647      	b.n	10049718 <_printf_float+0xb8>
10049a88:	002a      	movs	r2, r5
10049a8a:	2301      	movs	r3, #1
10049a8c:	990a      	ldr	r1, [sp, #40]	@ 0x28
10049a8e:	9809      	ldr	r0, [sp, #36]	@ 0x24
10049a90:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
10049a92:	321a      	adds	r2, #26
10049a94:	47b8      	blx	r7
10049a96:	3001      	adds	r0, #1
10049a98:	d100      	bne.n	10049a9c <_printf_float+0x43c>
10049a9a:	e63d      	b.n	10049718 <_printf_float+0xb8>
10049a9c:	3601      	adds	r6, #1
10049a9e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
10049aa0:	429e      	cmp	r6, r3
10049aa2:	dbf1      	blt.n	10049a88 <_printf_float+0x428>
10049aa4:	002a      	movs	r2, r5
10049aa6:	0023      	movs	r3, r4
10049aa8:	3250      	adds	r2, #80	@ 0x50
10049aaa:	e6da      	b.n	10049862 <_printf_float+0x202>
10049aac:	2600      	movs	r6, #0
10049aae:	e7f6      	b.n	10049a9e <_printf_float+0x43e>
10049ab0:	003a      	movs	r2, r7
10049ab2:	e7e2      	b.n	10049a7a <_printf_float+0x41a>
10049ab4:	002a      	movs	r2, r5
10049ab6:	2301      	movs	r3, #1
10049ab8:	990a      	ldr	r1, [sp, #40]	@ 0x28
10049aba:	9809      	ldr	r0, [sp, #36]	@ 0x24
10049abc:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
10049abe:	3219      	adds	r2, #25
10049ac0:	47b0      	blx	r6
10049ac2:	3001      	adds	r0, #1
10049ac4:	d100      	bne.n	10049ac8 <_printf_float+0x468>
10049ac6:	e627      	b.n	10049718 <_printf_float+0xb8>
10049ac8:	3401      	adds	r4, #1
10049aca:	68eb      	ldr	r3, [r5, #12]
10049acc:	9a15      	ldr	r2, [sp, #84]	@ 0x54
10049ace:	1a9b      	subs	r3, r3, r2
10049ad0:	42a3      	cmp	r3, r4
10049ad2:	dcef      	bgt.n	10049ab4 <_printf_float+0x454>
10049ad4:	e6f9      	b.n	100498ca <_printf_float+0x26a>
10049ad6:	2400      	movs	r4, #0
10049ad8:	e7f7      	b.n	10049aca <_printf_float+0x46a>
10049ada:	46c0      	nop			@ (mov r8, r8)

10049adc <_printf_common>:
10049adc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
10049ade:	0016      	movs	r6, r2
10049ae0:	9301      	str	r3, [sp, #4]
10049ae2:	688a      	ldr	r2, [r1, #8]
10049ae4:	690b      	ldr	r3, [r1, #16]
10049ae6:	000c      	movs	r4, r1
10049ae8:	9000      	str	r0, [sp, #0]
10049aea:	4293      	cmp	r3, r2
10049aec:	da00      	bge.n	10049af0 <_printf_common+0x14>
10049aee:	0013      	movs	r3, r2
10049af0:	0022      	movs	r2, r4
10049af2:	6033      	str	r3, [r6, #0]
10049af4:	3243      	adds	r2, #67	@ 0x43
10049af6:	7812      	ldrb	r2, [r2, #0]
10049af8:	2a00      	cmp	r2, #0
10049afa:	d001      	beq.n	10049b00 <_printf_common+0x24>
10049afc:	3301      	adds	r3, #1
10049afe:	6033      	str	r3, [r6, #0]
10049b00:	6823      	ldr	r3, [r4, #0]
10049b02:	069b      	lsls	r3, r3, #26
10049b04:	d502      	bpl.n	10049b0c <_printf_common+0x30>
10049b06:	6833      	ldr	r3, [r6, #0]
10049b08:	3302      	adds	r3, #2
10049b0a:	6033      	str	r3, [r6, #0]
10049b0c:	6822      	ldr	r2, [r4, #0]
10049b0e:	2306      	movs	r3, #6
10049b10:	0015      	movs	r5, r2
10049b12:	401d      	ands	r5, r3
10049b14:	421a      	tst	r2, r3
10049b16:	d027      	beq.n	10049b68 <_printf_common+0x8c>
10049b18:	0023      	movs	r3, r4
10049b1a:	3343      	adds	r3, #67	@ 0x43
10049b1c:	781b      	ldrb	r3, [r3, #0]
10049b1e:	1e5a      	subs	r2, r3, #1
10049b20:	4193      	sbcs	r3, r2
10049b22:	6822      	ldr	r2, [r4, #0]
10049b24:	0692      	lsls	r2, r2, #26
10049b26:	d430      	bmi.n	10049b8a <_printf_common+0xae>
10049b28:	0022      	movs	r2, r4
10049b2a:	9901      	ldr	r1, [sp, #4]
10049b2c:	9800      	ldr	r0, [sp, #0]
10049b2e:	9d08      	ldr	r5, [sp, #32]
10049b30:	3243      	adds	r2, #67	@ 0x43
10049b32:	47a8      	blx	r5
10049b34:	3001      	adds	r0, #1
10049b36:	d025      	beq.n	10049b84 <_printf_common+0xa8>
10049b38:	2206      	movs	r2, #6
10049b3a:	6823      	ldr	r3, [r4, #0]
10049b3c:	2500      	movs	r5, #0
10049b3e:	4013      	ands	r3, r2
10049b40:	2b04      	cmp	r3, #4
10049b42:	d105      	bne.n	10049b50 <_printf_common+0x74>
10049b44:	6833      	ldr	r3, [r6, #0]
10049b46:	68e5      	ldr	r5, [r4, #12]
10049b48:	1aed      	subs	r5, r5, r3
10049b4a:	43eb      	mvns	r3, r5
10049b4c:	17db      	asrs	r3, r3, #31
10049b4e:	401d      	ands	r5, r3
10049b50:	68a3      	ldr	r3, [r4, #8]
10049b52:	6922      	ldr	r2, [r4, #16]
10049b54:	4293      	cmp	r3, r2
10049b56:	dd01      	ble.n	10049b5c <_printf_common+0x80>
10049b58:	1a9b      	subs	r3, r3, r2
10049b5a:	18ed      	adds	r5, r5, r3
10049b5c:	2600      	movs	r6, #0
10049b5e:	42b5      	cmp	r5, r6
10049b60:	d120      	bne.n	10049ba4 <_printf_common+0xc8>
10049b62:	2000      	movs	r0, #0
10049b64:	e010      	b.n	10049b88 <_printf_common+0xac>
10049b66:	3501      	adds	r5, #1
10049b68:	68e3      	ldr	r3, [r4, #12]
10049b6a:	6832      	ldr	r2, [r6, #0]
10049b6c:	1a9b      	subs	r3, r3, r2
10049b6e:	42ab      	cmp	r3, r5
10049b70:	ddd2      	ble.n	10049b18 <_printf_common+0x3c>
10049b72:	0022      	movs	r2, r4
10049b74:	2301      	movs	r3, #1
10049b76:	9901      	ldr	r1, [sp, #4]
10049b78:	9800      	ldr	r0, [sp, #0]
10049b7a:	9f08      	ldr	r7, [sp, #32]
10049b7c:	3219      	adds	r2, #25
10049b7e:	47b8      	blx	r7
10049b80:	3001      	adds	r0, #1
10049b82:	d1f0      	bne.n	10049b66 <_printf_common+0x8a>
10049b84:	2001      	movs	r0, #1
10049b86:	4240      	negs	r0, r0
10049b88:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
10049b8a:	2030      	movs	r0, #48	@ 0x30
10049b8c:	18e1      	adds	r1, r4, r3
10049b8e:	3143      	adds	r1, #67	@ 0x43
10049b90:	7008      	strb	r0, [r1, #0]
10049b92:	0021      	movs	r1, r4
10049b94:	1c5a      	adds	r2, r3, #1
10049b96:	3145      	adds	r1, #69	@ 0x45
10049b98:	7809      	ldrb	r1, [r1, #0]
10049b9a:	18a2      	adds	r2, r4, r2
10049b9c:	3243      	adds	r2, #67	@ 0x43
10049b9e:	3302      	adds	r3, #2
10049ba0:	7011      	strb	r1, [r2, #0]
10049ba2:	e7c1      	b.n	10049b28 <_printf_common+0x4c>
10049ba4:	0022      	movs	r2, r4
10049ba6:	2301      	movs	r3, #1
10049ba8:	9901      	ldr	r1, [sp, #4]
10049baa:	9800      	ldr	r0, [sp, #0]
10049bac:	9f08      	ldr	r7, [sp, #32]
10049bae:	321a      	adds	r2, #26
10049bb0:	47b8      	blx	r7
10049bb2:	3001      	adds	r0, #1
10049bb4:	d0e6      	beq.n	10049b84 <_printf_common+0xa8>
10049bb6:	3601      	adds	r6, #1
10049bb8:	e7d1      	b.n	10049b5e <_printf_common+0x82>
	...

10049bbc <_printf_i>:
10049bbc:	b5f0      	push	{r4, r5, r6, r7, lr}
10049bbe:	b08b      	sub	sp, #44	@ 0x2c
10049bc0:	9206      	str	r2, [sp, #24]
10049bc2:	000a      	movs	r2, r1
10049bc4:	3243      	adds	r2, #67	@ 0x43
10049bc6:	9307      	str	r3, [sp, #28]
10049bc8:	9005      	str	r0, [sp, #20]
10049bca:	9203      	str	r2, [sp, #12]
10049bcc:	7e0a      	ldrb	r2, [r1, #24]
10049bce:	000c      	movs	r4, r1
10049bd0:	9b10      	ldr	r3, [sp, #64]	@ 0x40
10049bd2:	2a78      	cmp	r2, #120	@ 0x78
10049bd4:	d809      	bhi.n	10049bea <_printf_i+0x2e>
10049bd6:	2a62      	cmp	r2, #98	@ 0x62
10049bd8:	d80b      	bhi.n	10049bf2 <_printf_i+0x36>
10049bda:	2a00      	cmp	r2, #0
10049bdc:	d100      	bne.n	10049be0 <_printf_i+0x24>
10049bde:	e0bc      	b.n	10049d5a <_printf_i+0x19e>
10049be0:	497b      	ldr	r1, [pc, #492]	@ (10049dd0 <_printf_i+0x214>)
10049be2:	9104      	str	r1, [sp, #16]
10049be4:	2a58      	cmp	r2, #88	@ 0x58
10049be6:	d100      	bne.n	10049bea <_printf_i+0x2e>
10049be8:	e090      	b.n	10049d0c <_printf_i+0x150>
10049bea:	0025      	movs	r5, r4
10049bec:	3542      	adds	r5, #66	@ 0x42
10049bee:	702a      	strb	r2, [r5, #0]
10049bf0:	e022      	b.n	10049c38 <_printf_i+0x7c>
10049bf2:	0010      	movs	r0, r2
10049bf4:	3863      	subs	r0, #99	@ 0x63
10049bf6:	2815      	cmp	r0, #21
10049bf8:	d8f7      	bhi.n	10049bea <_printf_i+0x2e>
10049bfa:	f7f6 fa95 	bl	10040128 <__gnu_thumb1_case_shi>
10049bfe:	0016      	.short	0x0016
10049c00:	fff6001f 	.word	0xfff6001f
10049c04:	fff6fff6 	.word	0xfff6fff6
10049c08:	001ffff6 	.word	0x001ffff6
10049c0c:	fff6fff6 	.word	0xfff6fff6
10049c10:	fff6fff6 	.word	0xfff6fff6
10049c14:	003600a1 	.word	0x003600a1
10049c18:	fff60080 	.word	0xfff60080
10049c1c:	00b2fff6 	.word	0x00b2fff6
10049c20:	0036fff6 	.word	0x0036fff6
10049c24:	fff6fff6 	.word	0xfff6fff6
10049c28:	0084      	.short	0x0084
10049c2a:	0025      	movs	r5, r4
10049c2c:	681a      	ldr	r2, [r3, #0]
10049c2e:	3542      	adds	r5, #66	@ 0x42
10049c30:	1d11      	adds	r1, r2, #4
10049c32:	6019      	str	r1, [r3, #0]
10049c34:	6813      	ldr	r3, [r2, #0]
10049c36:	702b      	strb	r3, [r5, #0]
10049c38:	2301      	movs	r3, #1
10049c3a:	e0a0      	b.n	10049d7e <_printf_i+0x1c2>
10049c3c:	6818      	ldr	r0, [r3, #0]
10049c3e:	6809      	ldr	r1, [r1, #0]
10049c40:	1d02      	adds	r2, r0, #4
10049c42:	060d      	lsls	r5, r1, #24
10049c44:	d50b      	bpl.n	10049c5e <_printf_i+0xa2>
10049c46:	6806      	ldr	r6, [r0, #0]
10049c48:	601a      	str	r2, [r3, #0]
10049c4a:	2e00      	cmp	r6, #0
10049c4c:	da03      	bge.n	10049c56 <_printf_i+0x9a>
10049c4e:	232d      	movs	r3, #45	@ 0x2d
10049c50:	9a03      	ldr	r2, [sp, #12]
10049c52:	4276      	negs	r6, r6
10049c54:	7013      	strb	r3, [r2, #0]
10049c56:	4b5e      	ldr	r3, [pc, #376]	@ (10049dd0 <_printf_i+0x214>)
10049c58:	270a      	movs	r7, #10
10049c5a:	9304      	str	r3, [sp, #16]
10049c5c:	e018      	b.n	10049c90 <_printf_i+0xd4>
10049c5e:	6806      	ldr	r6, [r0, #0]
10049c60:	601a      	str	r2, [r3, #0]
10049c62:	0649      	lsls	r1, r1, #25
10049c64:	d5f1      	bpl.n	10049c4a <_printf_i+0x8e>
10049c66:	b236      	sxth	r6, r6
10049c68:	e7ef      	b.n	10049c4a <_printf_i+0x8e>
10049c6a:	6808      	ldr	r0, [r1, #0]
10049c6c:	6819      	ldr	r1, [r3, #0]
10049c6e:	c940      	ldmia	r1!, {r6}
10049c70:	0605      	lsls	r5, r0, #24
10049c72:	d402      	bmi.n	10049c7a <_printf_i+0xbe>
10049c74:	0640      	lsls	r0, r0, #25
10049c76:	d500      	bpl.n	10049c7a <_printf_i+0xbe>
10049c78:	b2b6      	uxth	r6, r6
10049c7a:	6019      	str	r1, [r3, #0]
10049c7c:	4b54      	ldr	r3, [pc, #336]	@ (10049dd0 <_printf_i+0x214>)
10049c7e:	270a      	movs	r7, #10
10049c80:	9304      	str	r3, [sp, #16]
10049c82:	2a6f      	cmp	r2, #111	@ 0x6f
10049c84:	d100      	bne.n	10049c88 <_printf_i+0xcc>
10049c86:	3f02      	subs	r7, #2
10049c88:	0023      	movs	r3, r4
10049c8a:	2200      	movs	r2, #0
10049c8c:	3343      	adds	r3, #67	@ 0x43
10049c8e:	701a      	strb	r2, [r3, #0]
10049c90:	6863      	ldr	r3, [r4, #4]
10049c92:	60a3      	str	r3, [r4, #8]
10049c94:	2b00      	cmp	r3, #0
10049c96:	db03      	blt.n	10049ca0 <_printf_i+0xe4>
10049c98:	2104      	movs	r1, #4
10049c9a:	6822      	ldr	r2, [r4, #0]
10049c9c:	438a      	bics	r2, r1
10049c9e:	6022      	str	r2, [r4, #0]
10049ca0:	2e00      	cmp	r6, #0
10049ca2:	d102      	bne.n	10049caa <_printf_i+0xee>
10049ca4:	9d03      	ldr	r5, [sp, #12]
10049ca6:	2b00      	cmp	r3, #0
10049ca8:	d00c      	beq.n	10049cc4 <_printf_i+0x108>
10049caa:	9d03      	ldr	r5, [sp, #12]
10049cac:	0030      	movs	r0, r6
10049cae:	0039      	movs	r1, r7
10049cb0:	f7f6 faca 	bl	10040248 <__aeabi_uidivmod>
10049cb4:	9b04      	ldr	r3, [sp, #16]
10049cb6:	3d01      	subs	r5, #1
10049cb8:	5c5b      	ldrb	r3, [r3, r1]
10049cba:	702b      	strb	r3, [r5, #0]
10049cbc:	0033      	movs	r3, r6
10049cbe:	0006      	movs	r6, r0
10049cc0:	429f      	cmp	r7, r3
10049cc2:	d9f3      	bls.n	10049cac <_printf_i+0xf0>
10049cc4:	2f08      	cmp	r7, #8
10049cc6:	d109      	bne.n	10049cdc <_printf_i+0x120>
10049cc8:	6823      	ldr	r3, [r4, #0]
10049cca:	07db      	lsls	r3, r3, #31
10049ccc:	d506      	bpl.n	10049cdc <_printf_i+0x120>
10049cce:	6862      	ldr	r2, [r4, #4]
10049cd0:	6923      	ldr	r3, [r4, #16]
10049cd2:	429a      	cmp	r2, r3
10049cd4:	dc02      	bgt.n	10049cdc <_printf_i+0x120>
10049cd6:	2330      	movs	r3, #48	@ 0x30
10049cd8:	3d01      	subs	r5, #1
10049cda:	702b      	strb	r3, [r5, #0]
10049cdc:	9b03      	ldr	r3, [sp, #12]
10049cde:	1b5b      	subs	r3, r3, r5
10049ce0:	6123      	str	r3, [r4, #16]
10049ce2:	9b07      	ldr	r3, [sp, #28]
10049ce4:	0021      	movs	r1, r4
10049ce6:	9300      	str	r3, [sp, #0]
10049ce8:	9805      	ldr	r0, [sp, #20]
10049cea:	9b06      	ldr	r3, [sp, #24]
10049cec:	aa09      	add	r2, sp, #36	@ 0x24
10049cee:	f7ff fef5 	bl	10049adc <_printf_common>
10049cf2:	3001      	adds	r0, #1
10049cf4:	d148      	bne.n	10049d88 <_printf_i+0x1cc>
10049cf6:	2001      	movs	r0, #1
10049cf8:	4240      	negs	r0, r0
10049cfa:	b00b      	add	sp, #44	@ 0x2c
10049cfc:	bdf0      	pop	{r4, r5, r6, r7, pc}
10049cfe:	2220      	movs	r2, #32
10049d00:	6809      	ldr	r1, [r1, #0]
10049d02:	430a      	orrs	r2, r1
10049d04:	6022      	str	r2, [r4, #0]
10049d06:	2278      	movs	r2, #120	@ 0x78
10049d08:	4932      	ldr	r1, [pc, #200]	@ (10049dd4 <_printf_i+0x218>)
10049d0a:	9104      	str	r1, [sp, #16]
10049d0c:	0021      	movs	r1, r4
10049d0e:	3145      	adds	r1, #69	@ 0x45
10049d10:	700a      	strb	r2, [r1, #0]
10049d12:	6819      	ldr	r1, [r3, #0]
10049d14:	6822      	ldr	r2, [r4, #0]
10049d16:	c940      	ldmia	r1!, {r6}
10049d18:	0610      	lsls	r0, r2, #24
10049d1a:	d402      	bmi.n	10049d22 <_printf_i+0x166>
10049d1c:	0650      	lsls	r0, r2, #25
10049d1e:	d500      	bpl.n	10049d22 <_printf_i+0x166>
10049d20:	b2b6      	uxth	r6, r6
10049d22:	6019      	str	r1, [r3, #0]
10049d24:	07d3      	lsls	r3, r2, #31
10049d26:	d502      	bpl.n	10049d2e <_printf_i+0x172>
10049d28:	2320      	movs	r3, #32
10049d2a:	4313      	orrs	r3, r2
10049d2c:	6023      	str	r3, [r4, #0]
10049d2e:	2e00      	cmp	r6, #0
10049d30:	d001      	beq.n	10049d36 <_printf_i+0x17a>
10049d32:	2710      	movs	r7, #16
10049d34:	e7a8      	b.n	10049c88 <_printf_i+0xcc>
10049d36:	2220      	movs	r2, #32
10049d38:	6823      	ldr	r3, [r4, #0]
10049d3a:	4393      	bics	r3, r2
10049d3c:	6023      	str	r3, [r4, #0]
10049d3e:	e7f8      	b.n	10049d32 <_printf_i+0x176>
10049d40:	681a      	ldr	r2, [r3, #0]
10049d42:	680d      	ldr	r5, [r1, #0]
10049d44:	1d10      	adds	r0, r2, #4
10049d46:	6949      	ldr	r1, [r1, #20]
10049d48:	6018      	str	r0, [r3, #0]
10049d4a:	6813      	ldr	r3, [r2, #0]
10049d4c:	062e      	lsls	r6, r5, #24
10049d4e:	d501      	bpl.n	10049d54 <_printf_i+0x198>
10049d50:	6019      	str	r1, [r3, #0]
10049d52:	e002      	b.n	10049d5a <_printf_i+0x19e>
10049d54:	066d      	lsls	r5, r5, #25
10049d56:	d5fb      	bpl.n	10049d50 <_printf_i+0x194>
10049d58:	8019      	strh	r1, [r3, #0]
10049d5a:	2300      	movs	r3, #0
10049d5c:	9d03      	ldr	r5, [sp, #12]
10049d5e:	6123      	str	r3, [r4, #16]
10049d60:	e7bf      	b.n	10049ce2 <_printf_i+0x126>
10049d62:	681a      	ldr	r2, [r3, #0]
10049d64:	1d11      	adds	r1, r2, #4
10049d66:	6019      	str	r1, [r3, #0]
10049d68:	6815      	ldr	r5, [r2, #0]
10049d6a:	2100      	movs	r1, #0
10049d6c:	0028      	movs	r0, r5
10049d6e:	6862      	ldr	r2, [r4, #4]
10049d70:	f000 f9b3 	bl	1004a0da <memchr>
10049d74:	2800      	cmp	r0, #0
10049d76:	d001      	beq.n	10049d7c <_printf_i+0x1c0>
10049d78:	1b40      	subs	r0, r0, r5
10049d7a:	6060      	str	r0, [r4, #4]
10049d7c:	6863      	ldr	r3, [r4, #4]
10049d7e:	6123      	str	r3, [r4, #16]
10049d80:	2300      	movs	r3, #0
10049d82:	9a03      	ldr	r2, [sp, #12]
10049d84:	7013      	strb	r3, [r2, #0]
10049d86:	e7ac      	b.n	10049ce2 <_printf_i+0x126>
10049d88:	002a      	movs	r2, r5
10049d8a:	6923      	ldr	r3, [r4, #16]
10049d8c:	9906      	ldr	r1, [sp, #24]
10049d8e:	9805      	ldr	r0, [sp, #20]
10049d90:	9d07      	ldr	r5, [sp, #28]
10049d92:	47a8      	blx	r5
10049d94:	3001      	adds	r0, #1
10049d96:	d0ae      	beq.n	10049cf6 <_printf_i+0x13a>
10049d98:	6823      	ldr	r3, [r4, #0]
10049d9a:	079b      	lsls	r3, r3, #30
10049d9c:	d415      	bmi.n	10049dca <_printf_i+0x20e>
10049d9e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
10049da0:	68e0      	ldr	r0, [r4, #12]
10049da2:	4298      	cmp	r0, r3
10049da4:	daa9      	bge.n	10049cfa <_printf_i+0x13e>
10049da6:	0018      	movs	r0, r3
10049da8:	e7a7      	b.n	10049cfa <_printf_i+0x13e>
10049daa:	0022      	movs	r2, r4
10049dac:	2301      	movs	r3, #1
10049dae:	9906      	ldr	r1, [sp, #24]
10049db0:	9805      	ldr	r0, [sp, #20]
10049db2:	9e07      	ldr	r6, [sp, #28]
10049db4:	3219      	adds	r2, #25
10049db6:	47b0      	blx	r6
10049db8:	3001      	adds	r0, #1
10049dba:	d09c      	beq.n	10049cf6 <_printf_i+0x13a>
10049dbc:	3501      	adds	r5, #1
10049dbe:	68e3      	ldr	r3, [r4, #12]
10049dc0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
10049dc2:	1a9b      	subs	r3, r3, r2
10049dc4:	42ab      	cmp	r3, r5
10049dc6:	dcf0      	bgt.n	10049daa <_printf_i+0x1ee>
10049dc8:	e7e9      	b.n	10049d9e <_printf_i+0x1e2>
10049dca:	2500      	movs	r5, #0
10049dcc:	e7f7      	b.n	10049dbe <_printf_i+0x202>
10049dce:	46c0      	nop			@ (mov r8, r8)
10049dd0:	1004bfea 	.word	0x1004bfea
10049dd4:	1004bffb 	.word	0x1004bffb

10049dd8 <std>:
10049dd8:	2300      	movs	r3, #0
10049dda:	b510      	push	{r4, lr}
10049ddc:	0004      	movs	r4, r0
10049dde:	6003      	str	r3, [r0, #0]
10049de0:	6043      	str	r3, [r0, #4]
10049de2:	6083      	str	r3, [r0, #8]
10049de4:	8181      	strh	r1, [r0, #12]
10049de6:	6643      	str	r3, [r0, #100]	@ 0x64
10049de8:	81c2      	strh	r2, [r0, #14]
10049dea:	6103      	str	r3, [r0, #16]
10049dec:	6143      	str	r3, [r0, #20]
10049dee:	6183      	str	r3, [r0, #24]
10049df0:	0019      	movs	r1, r3
10049df2:	2208      	movs	r2, #8
10049df4:	305c      	adds	r0, #92	@ 0x5c
10049df6:	f000 f90d 	bl	1004a014 <memset>
10049dfa:	4b0b      	ldr	r3, [pc, #44]	@ (10049e28 <std+0x50>)
10049dfc:	6224      	str	r4, [r4, #32]
10049dfe:	6263      	str	r3, [r4, #36]	@ 0x24
10049e00:	4b0a      	ldr	r3, [pc, #40]	@ (10049e2c <std+0x54>)
10049e02:	62a3      	str	r3, [r4, #40]	@ 0x28
10049e04:	4b0a      	ldr	r3, [pc, #40]	@ (10049e30 <std+0x58>)
10049e06:	62e3      	str	r3, [r4, #44]	@ 0x2c
10049e08:	4b0a      	ldr	r3, [pc, #40]	@ (10049e34 <std+0x5c>)
10049e0a:	6323      	str	r3, [r4, #48]	@ 0x30
10049e0c:	4b0a      	ldr	r3, [pc, #40]	@ (10049e38 <std+0x60>)
10049e0e:	429c      	cmp	r4, r3
10049e10:	d005      	beq.n	10049e1e <std+0x46>
10049e12:	4b0a      	ldr	r3, [pc, #40]	@ (10049e3c <std+0x64>)
10049e14:	429c      	cmp	r4, r3
10049e16:	d002      	beq.n	10049e1e <std+0x46>
10049e18:	4b09      	ldr	r3, [pc, #36]	@ (10049e40 <std+0x68>)
10049e1a:	429c      	cmp	r4, r3
10049e1c:	d103      	bne.n	10049e26 <std+0x4e>
10049e1e:	0020      	movs	r0, r4
10049e20:	3058      	adds	r0, #88	@ 0x58
10049e22:	f000 f957 	bl	1004a0d4 <__retarget_lock_init_recursive>
10049e26:	bd10      	pop	{r4, pc}
10049e28:	10049f61 	.word	0x10049f61
10049e2c:	10049f89 	.word	0x10049f89
10049e30:	10049fc1 	.word	0x10049fc1
10049e34:	10049fed 	.word	0x10049fed
10049e38:	200009a8 	.word	0x200009a8
10049e3c:	20000a10 	.word	0x20000a10
10049e40:	20000a78 	.word	0x20000a78

10049e44 <stdio_exit_handler>:
10049e44:	b510      	push	{r4, lr}
10049e46:	4a03      	ldr	r2, [pc, #12]	@ (10049e54 <stdio_exit_handler+0x10>)
10049e48:	4903      	ldr	r1, [pc, #12]	@ (10049e58 <stdio_exit_handler+0x14>)
10049e4a:	4804      	ldr	r0, [pc, #16]	@ (10049e5c <stdio_exit_handler+0x18>)
10049e4c:	f000 f86c 	bl	10049f28 <_fwalk_sglue>
10049e50:	bd10      	pop	{r4, pc}
10049e52:	46c0      	nop			@ (mov r8, r8)
10049e54:	20000b60 	.word	0x20000b60
10049e58:	1004b855 	.word	0x1004b855
10049e5c:	20000b70 	.word	0x20000b70

10049e60 <cleanup_stdio>:
10049e60:	6841      	ldr	r1, [r0, #4]
10049e62:	4b0b      	ldr	r3, [pc, #44]	@ (10049e90 <cleanup_stdio+0x30>)
10049e64:	b510      	push	{r4, lr}
10049e66:	0004      	movs	r4, r0
10049e68:	4299      	cmp	r1, r3
10049e6a:	d001      	beq.n	10049e70 <cleanup_stdio+0x10>
10049e6c:	f001 fcf2 	bl	1004b854 <_fflush_r>
10049e70:	68a1      	ldr	r1, [r4, #8]
10049e72:	4b08      	ldr	r3, [pc, #32]	@ (10049e94 <cleanup_stdio+0x34>)
10049e74:	4299      	cmp	r1, r3
10049e76:	d002      	beq.n	10049e7e <cleanup_stdio+0x1e>
10049e78:	0020      	movs	r0, r4
10049e7a:	f001 fceb 	bl	1004b854 <_fflush_r>
10049e7e:	68e1      	ldr	r1, [r4, #12]
10049e80:	4b05      	ldr	r3, [pc, #20]	@ (10049e98 <cleanup_stdio+0x38>)
10049e82:	4299      	cmp	r1, r3
10049e84:	d002      	beq.n	10049e8c <cleanup_stdio+0x2c>
10049e86:	0020      	movs	r0, r4
10049e88:	f001 fce4 	bl	1004b854 <_fflush_r>
10049e8c:	bd10      	pop	{r4, pc}
10049e8e:	46c0      	nop			@ (mov r8, r8)
10049e90:	200009a8 	.word	0x200009a8
10049e94:	20000a10 	.word	0x20000a10
10049e98:	20000a78 	.word	0x20000a78

10049e9c <global_stdio_init.part.0>:
10049e9c:	b510      	push	{r4, lr}
10049e9e:	4b09      	ldr	r3, [pc, #36]	@ (10049ec4 <global_stdio_init.part.0+0x28>)
10049ea0:	4a09      	ldr	r2, [pc, #36]	@ (10049ec8 <global_stdio_init.part.0+0x2c>)
10049ea2:	2104      	movs	r1, #4
10049ea4:	601a      	str	r2, [r3, #0]
10049ea6:	4809      	ldr	r0, [pc, #36]	@ (10049ecc <global_stdio_init.part.0+0x30>)
10049ea8:	2200      	movs	r2, #0
10049eaa:	f7ff ff95 	bl	10049dd8 <std>
10049eae:	2201      	movs	r2, #1
10049eb0:	2109      	movs	r1, #9
10049eb2:	4807      	ldr	r0, [pc, #28]	@ (10049ed0 <global_stdio_init.part.0+0x34>)
10049eb4:	f7ff ff90 	bl	10049dd8 <std>
10049eb8:	2202      	movs	r2, #2
10049eba:	2112      	movs	r1, #18
10049ebc:	4805      	ldr	r0, [pc, #20]	@ (10049ed4 <global_stdio_init.part.0+0x38>)
10049ebe:	f7ff ff8b 	bl	10049dd8 <std>
10049ec2:	bd10      	pop	{r4, pc}
10049ec4:	20000ae0 	.word	0x20000ae0
10049ec8:	10049e45 	.word	0x10049e45
10049ecc:	200009a8 	.word	0x200009a8
10049ed0:	20000a10 	.word	0x20000a10
10049ed4:	20000a78 	.word	0x20000a78

10049ed8 <__sfp_lock_acquire>:
10049ed8:	b510      	push	{r4, lr}
10049eda:	4802      	ldr	r0, [pc, #8]	@ (10049ee4 <__sfp_lock_acquire+0xc>)
10049edc:	f000 f8fb 	bl	1004a0d6 <__retarget_lock_acquire_recursive>
10049ee0:	bd10      	pop	{r4, pc}
10049ee2:	46c0      	nop			@ (mov r8, r8)
10049ee4:	20000ae9 	.word	0x20000ae9

10049ee8 <__sfp_lock_release>:
10049ee8:	b510      	push	{r4, lr}
10049eea:	4802      	ldr	r0, [pc, #8]	@ (10049ef4 <__sfp_lock_release+0xc>)
10049eec:	f000 f8f4 	bl	1004a0d8 <__retarget_lock_release_recursive>
10049ef0:	bd10      	pop	{r4, pc}
10049ef2:	46c0      	nop			@ (mov r8, r8)
10049ef4:	20000ae9 	.word	0x20000ae9

10049ef8 <__sinit>:
10049ef8:	b510      	push	{r4, lr}
10049efa:	0004      	movs	r4, r0
10049efc:	f7ff ffec 	bl	10049ed8 <__sfp_lock_acquire>
10049f00:	6a23      	ldr	r3, [r4, #32]
10049f02:	2b00      	cmp	r3, #0
10049f04:	d002      	beq.n	10049f0c <__sinit+0x14>
10049f06:	f7ff ffef 	bl	10049ee8 <__sfp_lock_release>
10049f0a:	bd10      	pop	{r4, pc}
10049f0c:	4b04      	ldr	r3, [pc, #16]	@ (10049f20 <__sinit+0x28>)
10049f0e:	6223      	str	r3, [r4, #32]
10049f10:	4b04      	ldr	r3, [pc, #16]	@ (10049f24 <__sinit+0x2c>)
10049f12:	681b      	ldr	r3, [r3, #0]
10049f14:	2b00      	cmp	r3, #0
10049f16:	d1f6      	bne.n	10049f06 <__sinit+0xe>
10049f18:	f7ff ffc0 	bl	10049e9c <global_stdio_init.part.0>
10049f1c:	e7f3      	b.n	10049f06 <__sinit+0xe>
10049f1e:	46c0      	nop			@ (mov r8, r8)
10049f20:	10049e61 	.word	0x10049e61
10049f24:	20000ae0 	.word	0x20000ae0

10049f28 <_fwalk_sglue>:
10049f28:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
10049f2a:	0014      	movs	r4, r2
10049f2c:	2600      	movs	r6, #0
10049f2e:	9000      	str	r0, [sp, #0]
10049f30:	9101      	str	r1, [sp, #4]
10049f32:	68a5      	ldr	r5, [r4, #8]
10049f34:	6867      	ldr	r7, [r4, #4]
10049f36:	3f01      	subs	r7, #1
10049f38:	d504      	bpl.n	10049f44 <_fwalk_sglue+0x1c>
10049f3a:	6824      	ldr	r4, [r4, #0]
10049f3c:	2c00      	cmp	r4, #0
10049f3e:	d1f8      	bne.n	10049f32 <_fwalk_sglue+0xa>
10049f40:	0030      	movs	r0, r6
10049f42:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
10049f44:	89ab      	ldrh	r3, [r5, #12]
10049f46:	2b01      	cmp	r3, #1
10049f48:	d908      	bls.n	10049f5c <_fwalk_sglue+0x34>
10049f4a:	220e      	movs	r2, #14
10049f4c:	5eab      	ldrsh	r3, [r5, r2]
10049f4e:	3301      	adds	r3, #1
10049f50:	d004      	beq.n	10049f5c <_fwalk_sglue+0x34>
10049f52:	0029      	movs	r1, r5
10049f54:	9800      	ldr	r0, [sp, #0]
10049f56:	9b01      	ldr	r3, [sp, #4]
10049f58:	4798      	blx	r3
10049f5a:	4306      	orrs	r6, r0
10049f5c:	3568      	adds	r5, #104	@ 0x68
10049f5e:	e7ea      	b.n	10049f36 <_fwalk_sglue+0xe>

10049f60 <__sread>:
10049f60:	b570      	push	{r4, r5, r6, lr}
10049f62:	000c      	movs	r4, r1
10049f64:	250e      	movs	r5, #14
10049f66:	5f49      	ldrsh	r1, [r1, r5]
10049f68:	f000 f886 	bl	1004a078 <_read_r>
10049f6c:	2800      	cmp	r0, #0
10049f6e:	db03      	blt.n	10049f78 <__sread+0x18>
10049f70:	6d63      	ldr	r3, [r4, #84]	@ 0x54
10049f72:	181b      	adds	r3, r3, r0
10049f74:	6563      	str	r3, [r4, #84]	@ 0x54
10049f76:	bd70      	pop	{r4, r5, r6, pc}
10049f78:	89a3      	ldrh	r3, [r4, #12]
10049f7a:	4a02      	ldr	r2, [pc, #8]	@ (10049f84 <__sread+0x24>)
10049f7c:	4013      	ands	r3, r2
10049f7e:	81a3      	strh	r3, [r4, #12]
10049f80:	e7f9      	b.n	10049f76 <__sread+0x16>
10049f82:	46c0      	nop			@ (mov r8, r8)
10049f84:	ffffefff 	.word	0xffffefff

10049f88 <__swrite>:
10049f88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10049f8a:	001f      	movs	r7, r3
10049f8c:	898b      	ldrh	r3, [r1, #12]
10049f8e:	0005      	movs	r5, r0
10049f90:	000c      	movs	r4, r1
10049f92:	0016      	movs	r6, r2
10049f94:	05db      	lsls	r3, r3, #23
10049f96:	d505      	bpl.n	10049fa4 <__swrite+0x1c>
10049f98:	230e      	movs	r3, #14
10049f9a:	5ec9      	ldrsh	r1, [r1, r3]
10049f9c:	2200      	movs	r2, #0
10049f9e:	2302      	movs	r3, #2
10049fa0:	f000 f856 	bl	1004a050 <_lseek_r>
10049fa4:	89a3      	ldrh	r3, [r4, #12]
10049fa6:	4a05      	ldr	r2, [pc, #20]	@ (10049fbc <__swrite+0x34>)
10049fa8:	0028      	movs	r0, r5
10049faa:	4013      	ands	r3, r2
10049fac:	81a3      	strh	r3, [r4, #12]
10049fae:	0032      	movs	r2, r6
10049fb0:	230e      	movs	r3, #14
10049fb2:	5ee1      	ldrsh	r1, [r4, r3]
10049fb4:	003b      	movs	r3, r7
10049fb6:	f000 f873 	bl	1004a0a0 <_write_r>
10049fba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10049fbc:	ffffefff 	.word	0xffffefff

10049fc0 <__sseek>:
10049fc0:	b570      	push	{r4, r5, r6, lr}
10049fc2:	000c      	movs	r4, r1
10049fc4:	250e      	movs	r5, #14
10049fc6:	5f49      	ldrsh	r1, [r1, r5]
10049fc8:	f000 f842 	bl	1004a050 <_lseek_r>
10049fcc:	89a3      	ldrh	r3, [r4, #12]
10049fce:	1c42      	adds	r2, r0, #1
10049fd0:	d103      	bne.n	10049fda <__sseek+0x1a>
10049fd2:	4a05      	ldr	r2, [pc, #20]	@ (10049fe8 <__sseek+0x28>)
10049fd4:	4013      	ands	r3, r2
10049fd6:	81a3      	strh	r3, [r4, #12]
10049fd8:	bd70      	pop	{r4, r5, r6, pc}
10049fda:	2280      	movs	r2, #128	@ 0x80
10049fdc:	0152      	lsls	r2, r2, #5
10049fde:	4313      	orrs	r3, r2
10049fe0:	81a3      	strh	r3, [r4, #12]
10049fe2:	6560      	str	r0, [r4, #84]	@ 0x54
10049fe4:	e7f8      	b.n	10049fd8 <__sseek+0x18>
10049fe6:	46c0      	nop			@ (mov r8, r8)
10049fe8:	ffffefff 	.word	0xffffefff

10049fec <__sclose>:
10049fec:	b510      	push	{r4, lr}
10049fee:	230e      	movs	r3, #14
10049ff0:	5ec9      	ldrsh	r1, [r1, r3]
10049ff2:	f000 f81b 	bl	1004a02c <_close_r>
10049ff6:	bd10      	pop	{r4, pc}

10049ff8 <memcmp>:
10049ff8:	b530      	push	{r4, r5, lr}
10049ffa:	2400      	movs	r4, #0
10049ffc:	3901      	subs	r1, #1
10049ffe:	42a2      	cmp	r2, r4
1004a000:	d101      	bne.n	1004a006 <memcmp+0xe>
1004a002:	2000      	movs	r0, #0
1004a004:	e005      	b.n	1004a012 <memcmp+0x1a>
1004a006:	5d03      	ldrb	r3, [r0, r4]
1004a008:	3401      	adds	r4, #1
1004a00a:	5d0d      	ldrb	r5, [r1, r4]
1004a00c:	42ab      	cmp	r3, r5
1004a00e:	d0f6      	beq.n	10049ffe <memcmp+0x6>
1004a010:	1b58      	subs	r0, r3, r5
1004a012:	bd30      	pop	{r4, r5, pc}

1004a014 <memset>:
1004a014:	0003      	movs	r3, r0
1004a016:	1882      	adds	r2, r0, r2
1004a018:	4293      	cmp	r3, r2
1004a01a:	d100      	bne.n	1004a01e <memset+0xa>
1004a01c:	4770      	bx	lr
1004a01e:	7019      	strb	r1, [r3, #0]
1004a020:	3301      	adds	r3, #1
1004a022:	e7f9      	b.n	1004a018 <memset+0x4>

1004a024 <_localeconv_r>:
1004a024:	4800      	ldr	r0, [pc, #0]	@ (1004a028 <_localeconv_r+0x4>)
1004a026:	4770      	bx	lr
1004a028:	20000cac 	.word	0x20000cac

1004a02c <_close_r>:
1004a02c:	2300      	movs	r3, #0
1004a02e:	b570      	push	{r4, r5, r6, lr}
1004a030:	4d06      	ldr	r5, [pc, #24]	@ (1004a04c <_close_r+0x20>)
1004a032:	0004      	movs	r4, r0
1004a034:	0008      	movs	r0, r1
1004a036:	602b      	str	r3, [r5, #0]
1004a038:	f7f9 fa29 	bl	1004348e <_close>
1004a03c:	1c43      	adds	r3, r0, #1
1004a03e:	d103      	bne.n	1004a048 <_close_r+0x1c>
1004a040:	682b      	ldr	r3, [r5, #0]
1004a042:	2b00      	cmp	r3, #0
1004a044:	d000      	beq.n	1004a048 <_close_r+0x1c>
1004a046:	6023      	str	r3, [r4, #0]
1004a048:	bd70      	pop	{r4, r5, r6, pc}
1004a04a:	46c0      	nop			@ (mov r8, r8)
1004a04c:	20000ae4 	.word	0x20000ae4

1004a050 <_lseek_r>:
1004a050:	b570      	push	{r4, r5, r6, lr}
1004a052:	0004      	movs	r4, r0
1004a054:	0008      	movs	r0, r1
1004a056:	0011      	movs	r1, r2
1004a058:	001a      	movs	r2, r3
1004a05a:	2300      	movs	r3, #0
1004a05c:	4d05      	ldr	r5, [pc, #20]	@ (1004a074 <_lseek_r+0x24>)
1004a05e:	602b      	str	r3, [r5, #0]
1004a060:	f7f9 fa36 	bl	100434d0 <_lseek>
1004a064:	1c43      	adds	r3, r0, #1
1004a066:	d103      	bne.n	1004a070 <_lseek_r+0x20>
1004a068:	682b      	ldr	r3, [r5, #0]
1004a06a:	2b00      	cmp	r3, #0
1004a06c:	d000      	beq.n	1004a070 <_lseek_r+0x20>
1004a06e:	6023      	str	r3, [r4, #0]
1004a070:	bd70      	pop	{r4, r5, r6, pc}
1004a072:	46c0      	nop			@ (mov r8, r8)
1004a074:	20000ae4 	.word	0x20000ae4

1004a078 <_read_r>:
1004a078:	b570      	push	{r4, r5, r6, lr}
1004a07a:	0004      	movs	r4, r0
1004a07c:	0008      	movs	r0, r1
1004a07e:	0011      	movs	r1, r2
1004a080:	001a      	movs	r2, r3
1004a082:	2300      	movs	r3, #0
1004a084:	4d05      	ldr	r5, [pc, #20]	@ (1004a09c <_read_r+0x24>)
1004a086:	602b      	str	r3, [r5, #0]
1004a088:	f7f9 f9c8 	bl	1004341c <_read>
1004a08c:	1c43      	adds	r3, r0, #1
1004a08e:	d103      	bne.n	1004a098 <_read_r+0x20>
1004a090:	682b      	ldr	r3, [r5, #0]
1004a092:	2b00      	cmp	r3, #0
1004a094:	d000      	beq.n	1004a098 <_read_r+0x20>
1004a096:	6023      	str	r3, [r4, #0]
1004a098:	bd70      	pop	{r4, r5, r6, pc}
1004a09a:	46c0      	nop			@ (mov r8, r8)
1004a09c:	20000ae4 	.word	0x20000ae4

1004a0a0 <_write_r>:
1004a0a0:	b570      	push	{r4, r5, r6, lr}
1004a0a2:	0004      	movs	r4, r0
1004a0a4:	0008      	movs	r0, r1
1004a0a6:	0011      	movs	r1, r2
1004a0a8:	001a      	movs	r2, r3
1004a0aa:	2300      	movs	r3, #0
1004a0ac:	4d05      	ldr	r5, [pc, #20]	@ (1004a0c4 <_write_r+0x24>)
1004a0ae:	602b      	str	r3, [r5, #0]
1004a0b0:	f7f9 f9d1 	bl	10043456 <_write>
1004a0b4:	1c43      	adds	r3, r0, #1
1004a0b6:	d103      	bne.n	1004a0c0 <_write_r+0x20>
1004a0b8:	682b      	ldr	r3, [r5, #0]
1004a0ba:	2b00      	cmp	r3, #0
1004a0bc:	d000      	beq.n	1004a0c0 <_write_r+0x20>
1004a0be:	6023      	str	r3, [r4, #0]
1004a0c0:	bd70      	pop	{r4, r5, r6, pc}
1004a0c2:	46c0      	nop			@ (mov r8, r8)
1004a0c4:	20000ae4 	.word	0x20000ae4

1004a0c8 <__errno>:
1004a0c8:	4b01      	ldr	r3, [pc, #4]	@ (1004a0d0 <__errno+0x8>)
1004a0ca:	6818      	ldr	r0, [r3, #0]
1004a0cc:	4770      	bx	lr
1004a0ce:	46c0      	nop			@ (mov r8, r8)
1004a0d0:	20000b6c 	.word	0x20000b6c

1004a0d4 <__retarget_lock_init_recursive>:
1004a0d4:	4770      	bx	lr

1004a0d6 <__retarget_lock_acquire_recursive>:
1004a0d6:	4770      	bx	lr

1004a0d8 <__retarget_lock_release_recursive>:
1004a0d8:	4770      	bx	lr

1004a0da <memchr>:
1004a0da:	b2c9      	uxtb	r1, r1
1004a0dc:	1882      	adds	r2, r0, r2
1004a0de:	4290      	cmp	r0, r2
1004a0e0:	d101      	bne.n	1004a0e6 <memchr+0xc>
1004a0e2:	2000      	movs	r0, #0
1004a0e4:	4770      	bx	lr
1004a0e6:	7803      	ldrb	r3, [r0, #0]
1004a0e8:	428b      	cmp	r3, r1
1004a0ea:	d0fb      	beq.n	1004a0e4 <memchr+0xa>
1004a0ec:	3001      	adds	r0, #1
1004a0ee:	e7f6      	b.n	1004a0de <memchr+0x4>

1004a0f0 <quorem>:
1004a0f0:	b5f0      	push	{r4, r5, r6, r7, lr}
1004a0f2:	6902      	ldr	r2, [r0, #16]
1004a0f4:	690f      	ldr	r7, [r1, #16]
1004a0f6:	b087      	sub	sp, #28
1004a0f8:	0006      	movs	r6, r0
1004a0fa:	000b      	movs	r3, r1
1004a0fc:	2000      	movs	r0, #0
1004a0fe:	9102      	str	r1, [sp, #8]
1004a100:	42ba      	cmp	r2, r7
1004a102:	db6d      	blt.n	1004a1e0 <quorem+0xf0>
1004a104:	3f01      	subs	r7, #1
1004a106:	00bc      	lsls	r4, r7, #2
1004a108:	3314      	adds	r3, #20
1004a10a:	9305      	str	r3, [sp, #20]
1004a10c:	191b      	adds	r3, r3, r4
1004a10e:	9303      	str	r3, [sp, #12]
1004a110:	0033      	movs	r3, r6
1004a112:	3314      	adds	r3, #20
1004a114:	191c      	adds	r4, r3, r4
1004a116:	9301      	str	r3, [sp, #4]
1004a118:	6823      	ldr	r3, [r4, #0]
1004a11a:	9304      	str	r3, [sp, #16]
1004a11c:	9b03      	ldr	r3, [sp, #12]
1004a11e:	9804      	ldr	r0, [sp, #16]
1004a120:	681d      	ldr	r5, [r3, #0]
1004a122:	3501      	adds	r5, #1
1004a124:	0029      	movs	r1, r5
1004a126:	f7f6 f809 	bl	1004013c <__udivsi3>
1004a12a:	9b04      	ldr	r3, [sp, #16]
1004a12c:	9000      	str	r0, [sp, #0]
1004a12e:	42ab      	cmp	r3, r5
1004a130:	d32b      	bcc.n	1004a18a <quorem+0x9a>
1004a132:	9b05      	ldr	r3, [sp, #20]
1004a134:	9d01      	ldr	r5, [sp, #4]
1004a136:	469c      	mov	ip, r3
1004a138:	2300      	movs	r3, #0
1004a13a:	9305      	str	r3, [sp, #20]
1004a13c:	9304      	str	r3, [sp, #16]
1004a13e:	4662      	mov	r2, ip
1004a140:	ca08      	ldmia	r2!, {r3}
1004a142:	6828      	ldr	r0, [r5, #0]
1004a144:	4694      	mov	ip, r2
1004a146:	9a00      	ldr	r2, [sp, #0]
1004a148:	b299      	uxth	r1, r3
1004a14a:	4351      	muls	r1, r2
1004a14c:	9a05      	ldr	r2, [sp, #20]
1004a14e:	0c1b      	lsrs	r3, r3, #16
1004a150:	1889      	adds	r1, r1, r2
1004a152:	9a00      	ldr	r2, [sp, #0]
1004a154:	4353      	muls	r3, r2
1004a156:	0c0a      	lsrs	r2, r1, #16
1004a158:	189b      	adds	r3, r3, r2
1004a15a:	0c1a      	lsrs	r2, r3, #16
1004a15c:	b289      	uxth	r1, r1
1004a15e:	9205      	str	r2, [sp, #20]
1004a160:	b282      	uxth	r2, r0
1004a162:	1a52      	subs	r2, r2, r1
1004a164:	9904      	ldr	r1, [sp, #16]
1004a166:	0c00      	lsrs	r0, r0, #16
1004a168:	1852      	adds	r2, r2, r1
1004a16a:	b29b      	uxth	r3, r3
1004a16c:	1411      	asrs	r1, r2, #16
1004a16e:	1ac3      	subs	r3, r0, r3
1004a170:	185b      	adds	r3, r3, r1
1004a172:	1419      	asrs	r1, r3, #16
1004a174:	b292      	uxth	r2, r2
1004a176:	041b      	lsls	r3, r3, #16
1004a178:	431a      	orrs	r2, r3
1004a17a:	9b03      	ldr	r3, [sp, #12]
1004a17c:	9104      	str	r1, [sp, #16]
1004a17e:	c504      	stmia	r5!, {r2}
1004a180:	4563      	cmp	r3, ip
1004a182:	d2dc      	bcs.n	1004a13e <quorem+0x4e>
1004a184:	6823      	ldr	r3, [r4, #0]
1004a186:	2b00      	cmp	r3, #0
1004a188:	d030      	beq.n	1004a1ec <quorem+0xfc>
1004a18a:	0030      	movs	r0, r6
1004a18c:	9902      	ldr	r1, [sp, #8]
1004a18e:	f001 f9c5 	bl	1004b51c <__mcmp>
1004a192:	2800      	cmp	r0, #0
1004a194:	db23      	blt.n	1004a1de <quorem+0xee>
1004a196:	0034      	movs	r4, r6
1004a198:	2500      	movs	r5, #0
1004a19a:	9902      	ldr	r1, [sp, #8]
1004a19c:	3414      	adds	r4, #20
1004a19e:	3114      	adds	r1, #20
1004a1a0:	6823      	ldr	r3, [r4, #0]
1004a1a2:	c901      	ldmia	r1!, {r0}
1004a1a4:	9302      	str	r3, [sp, #8]
1004a1a6:	466b      	mov	r3, sp
1004a1a8:	891b      	ldrh	r3, [r3, #8]
1004a1aa:	b282      	uxth	r2, r0
1004a1ac:	1a9a      	subs	r2, r3, r2
1004a1ae:	9b02      	ldr	r3, [sp, #8]
1004a1b0:	1952      	adds	r2, r2, r5
1004a1b2:	0c00      	lsrs	r0, r0, #16
1004a1b4:	0c1b      	lsrs	r3, r3, #16
1004a1b6:	1a1b      	subs	r3, r3, r0
1004a1b8:	1410      	asrs	r0, r2, #16
1004a1ba:	181b      	adds	r3, r3, r0
1004a1bc:	141d      	asrs	r5, r3, #16
1004a1be:	b292      	uxth	r2, r2
1004a1c0:	041b      	lsls	r3, r3, #16
1004a1c2:	431a      	orrs	r2, r3
1004a1c4:	9b03      	ldr	r3, [sp, #12]
1004a1c6:	c404      	stmia	r4!, {r2}
1004a1c8:	428b      	cmp	r3, r1
1004a1ca:	d2e9      	bcs.n	1004a1a0 <quorem+0xb0>
1004a1cc:	9a01      	ldr	r2, [sp, #4]
1004a1ce:	00bb      	lsls	r3, r7, #2
1004a1d0:	18d3      	adds	r3, r2, r3
1004a1d2:	681a      	ldr	r2, [r3, #0]
1004a1d4:	2a00      	cmp	r2, #0
1004a1d6:	d013      	beq.n	1004a200 <quorem+0x110>
1004a1d8:	9b00      	ldr	r3, [sp, #0]
1004a1da:	3301      	adds	r3, #1
1004a1dc:	9300      	str	r3, [sp, #0]
1004a1de:	9800      	ldr	r0, [sp, #0]
1004a1e0:	b007      	add	sp, #28
1004a1e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
1004a1e4:	6823      	ldr	r3, [r4, #0]
1004a1e6:	2b00      	cmp	r3, #0
1004a1e8:	d104      	bne.n	1004a1f4 <quorem+0x104>
1004a1ea:	3f01      	subs	r7, #1
1004a1ec:	9b01      	ldr	r3, [sp, #4]
1004a1ee:	3c04      	subs	r4, #4
1004a1f0:	42a3      	cmp	r3, r4
1004a1f2:	d3f7      	bcc.n	1004a1e4 <quorem+0xf4>
1004a1f4:	6137      	str	r7, [r6, #16]
1004a1f6:	e7c8      	b.n	1004a18a <quorem+0x9a>
1004a1f8:	681a      	ldr	r2, [r3, #0]
1004a1fa:	2a00      	cmp	r2, #0
1004a1fc:	d104      	bne.n	1004a208 <quorem+0x118>
1004a1fe:	3f01      	subs	r7, #1
1004a200:	9a01      	ldr	r2, [sp, #4]
1004a202:	3b04      	subs	r3, #4
1004a204:	429a      	cmp	r2, r3
1004a206:	d3f7      	bcc.n	1004a1f8 <quorem+0x108>
1004a208:	6137      	str	r7, [r6, #16]
1004a20a:	e7e5      	b.n	1004a1d8 <quorem+0xe8>

1004a20c <_dtoa_r>:
1004a20c:	b5f0      	push	{r4, r5, r6, r7, lr}
1004a20e:	0014      	movs	r4, r2
1004a210:	001d      	movs	r5, r3
1004a212:	69c6      	ldr	r6, [r0, #28]
1004a214:	b09d      	sub	sp, #116	@ 0x74
1004a216:	940a      	str	r4, [sp, #40]	@ 0x28
1004a218:	950b      	str	r5, [sp, #44]	@ 0x2c
1004a21a:	9f25      	ldr	r7, [sp, #148]	@ 0x94
1004a21c:	9003      	str	r0, [sp, #12]
1004a21e:	2e00      	cmp	r6, #0
1004a220:	d10f      	bne.n	1004a242 <_dtoa_r+0x36>
1004a222:	2010      	movs	r0, #16
1004a224:	f000 fe30 	bl	1004ae88 <malloc>
1004a228:	9b03      	ldr	r3, [sp, #12]
1004a22a:	1e02      	subs	r2, r0, #0
1004a22c:	61d8      	str	r0, [r3, #28]
1004a22e:	d104      	bne.n	1004a23a <_dtoa_r+0x2e>
1004a230:	21ef      	movs	r1, #239	@ 0xef
1004a232:	4bc7      	ldr	r3, [pc, #796]	@ (1004a550 <_dtoa_r+0x344>)
1004a234:	48c7      	ldr	r0, [pc, #796]	@ (1004a554 <_dtoa_r+0x348>)
1004a236:	f001 fb55 	bl	1004b8e4 <__assert_func>
1004a23a:	6046      	str	r6, [r0, #4]
1004a23c:	6086      	str	r6, [r0, #8]
1004a23e:	6006      	str	r6, [r0, #0]
1004a240:	60c6      	str	r6, [r0, #12]
1004a242:	9b03      	ldr	r3, [sp, #12]
1004a244:	69db      	ldr	r3, [r3, #28]
1004a246:	6819      	ldr	r1, [r3, #0]
1004a248:	2900      	cmp	r1, #0
1004a24a:	d00b      	beq.n	1004a264 <_dtoa_r+0x58>
1004a24c:	685a      	ldr	r2, [r3, #4]
1004a24e:	2301      	movs	r3, #1
1004a250:	4093      	lsls	r3, r2
1004a252:	604a      	str	r2, [r1, #4]
1004a254:	608b      	str	r3, [r1, #8]
1004a256:	9803      	ldr	r0, [sp, #12]
1004a258:	f000 ff16 	bl	1004b088 <_Bfree>
1004a25c:	2200      	movs	r2, #0
1004a25e:	9b03      	ldr	r3, [sp, #12]
1004a260:	69db      	ldr	r3, [r3, #28]
1004a262:	601a      	str	r2, [r3, #0]
1004a264:	2d00      	cmp	r5, #0
1004a266:	da1e      	bge.n	1004a2a6 <_dtoa_r+0x9a>
1004a268:	2301      	movs	r3, #1
1004a26a:	603b      	str	r3, [r7, #0]
1004a26c:	006b      	lsls	r3, r5, #1
1004a26e:	085b      	lsrs	r3, r3, #1
1004a270:	930b      	str	r3, [sp, #44]	@ 0x2c
1004a272:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
1004a274:	4bb8      	ldr	r3, [pc, #736]	@ (1004a558 <_dtoa_r+0x34c>)
1004a276:	4ab8      	ldr	r2, [pc, #736]	@ (1004a558 <_dtoa_r+0x34c>)
1004a278:	403b      	ands	r3, r7
1004a27a:	4293      	cmp	r3, r2
1004a27c:	d116      	bne.n	1004a2ac <_dtoa_r+0xa0>
1004a27e:	4bb7      	ldr	r3, [pc, #732]	@ (1004a55c <_dtoa_r+0x350>)
1004a280:	9a24      	ldr	r2, [sp, #144]	@ 0x90
1004a282:	6013      	str	r3, [r2, #0]
1004a284:	033b      	lsls	r3, r7, #12
1004a286:	0b1b      	lsrs	r3, r3, #12
1004a288:	4323      	orrs	r3, r4
1004a28a:	d101      	bne.n	1004a290 <_dtoa_r+0x84>
1004a28c:	f000 fd83 	bl	1004ad96 <_dtoa_r+0xb8a>
1004a290:	4bb3      	ldr	r3, [pc, #716]	@ (1004a560 <_dtoa_r+0x354>)
1004a292:	9a26      	ldr	r2, [sp, #152]	@ 0x98
1004a294:	9308      	str	r3, [sp, #32]
1004a296:	2a00      	cmp	r2, #0
1004a298:	d002      	beq.n	1004a2a0 <_dtoa_r+0x94>
1004a29a:	4bb2      	ldr	r3, [pc, #712]	@ (1004a564 <_dtoa_r+0x358>)
1004a29c:	9a26      	ldr	r2, [sp, #152]	@ 0x98
1004a29e:	6013      	str	r3, [r2, #0]
1004a2a0:	9808      	ldr	r0, [sp, #32]
1004a2a2:	b01d      	add	sp, #116	@ 0x74
1004a2a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
1004a2a6:	2300      	movs	r3, #0
1004a2a8:	603b      	str	r3, [r7, #0]
1004a2aa:	e7e2      	b.n	1004a272 <_dtoa_r+0x66>
1004a2ac:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
1004a2ae:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
1004a2b0:	9212      	str	r2, [sp, #72]	@ 0x48
1004a2b2:	9313      	str	r3, [sp, #76]	@ 0x4c
1004a2b4:	9812      	ldr	r0, [sp, #72]	@ 0x48
1004a2b6:	9913      	ldr	r1, [sp, #76]	@ 0x4c
1004a2b8:	2200      	movs	r2, #0
1004a2ba:	2300      	movs	r3, #0
1004a2bc:	f7f6 f8c4 	bl	10040448 <__aeabi_dcmpeq>
1004a2c0:	1e06      	subs	r6, r0, #0
1004a2c2:	d00b      	beq.n	1004a2dc <_dtoa_r+0xd0>
1004a2c4:	2301      	movs	r3, #1
1004a2c6:	9a24      	ldr	r2, [sp, #144]	@ 0x90
1004a2c8:	6013      	str	r3, [r2, #0]
1004a2ca:	9b26      	ldr	r3, [sp, #152]	@ 0x98
1004a2cc:	2b00      	cmp	r3, #0
1004a2ce:	d002      	beq.n	1004a2d6 <_dtoa_r+0xca>
1004a2d0:	4ba5      	ldr	r3, [pc, #660]	@ (1004a568 <_dtoa_r+0x35c>)
1004a2d2:	9a26      	ldr	r2, [sp, #152]	@ 0x98
1004a2d4:	6013      	str	r3, [r2, #0]
1004a2d6:	4ba5      	ldr	r3, [pc, #660]	@ (1004a56c <_dtoa_r+0x360>)
1004a2d8:	9308      	str	r3, [sp, #32]
1004a2da:	e7e1      	b.n	1004a2a0 <_dtoa_r+0x94>
1004a2dc:	ab1a      	add	r3, sp, #104	@ 0x68
1004a2de:	9301      	str	r3, [sp, #4]
1004a2e0:	ab1b      	add	r3, sp, #108	@ 0x6c
1004a2e2:	9300      	str	r3, [sp, #0]
1004a2e4:	9803      	ldr	r0, [sp, #12]
1004a2e6:	9a12      	ldr	r2, [sp, #72]	@ 0x48
1004a2e8:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
1004a2ea:	f001 f9cd 	bl	1004b688 <__d2b>
1004a2ee:	007a      	lsls	r2, r7, #1
1004a2f0:	9005      	str	r0, [sp, #20]
1004a2f2:	0d52      	lsrs	r2, r2, #21
1004a2f4:	d100      	bne.n	1004a2f8 <_dtoa_r+0xec>
1004a2f6:	e07b      	b.n	1004a3f0 <_dtoa_r+0x1e4>
1004a2f8:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
1004a2fa:	9618      	str	r6, [sp, #96]	@ 0x60
1004a2fc:	0319      	lsls	r1, r3, #12
1004a2fe:	4b9c      	ldr	r3, [pc, #624]	@ (1004a570 <_dtoa_r+0x364>)
1004a300:	0b09      	lsrs	r1, r1, #12
1004a302:	430b      	orrs	r3, r1
1004a304:	499b      	ldr	r1, [pc, #620]	@ (1004a574 <_dtoa_r+0x368>)
1004a306:	1857      	adds	r7, r2, r1
1004a308:	9812      	ldr	r0, [sp, #72]	@ 0x48
1004a30a:	9913      	ldr	r1, [sp, #76]	@ 0x4c
1004a30c:	0019      	movs	r1, r3
1004a30e:	2200      	movs	r2, #0
1004a310:	4b99      	ldr	r3, [pc, #612]	@ (1004a578 <_dtoa_r+0x36c>)
1004a312:	f7f7 fc6f 	bl	10041bf4 <__aeabi_dsub>
1004a316:	4a99      	ldr	r2, [pc, #612]	@ (1004a57c <_dtoa_r+0x370>)
1004a318:	4b99      	ldr	r3, [pc, #612]	@ (1004a580 <_dtoa_r+0x374>)
1004a31a:	f7f7 f9a3 	bl	10041664 <__aeabi_dmul>
1004a31e:	4a99      	ldr	r2, [pc, #612]	@ (1004a584 <_dtoa_r+0x378>)
1004a320:	4b99      	ldr	r3, [pc, #612]	@ (1004a588 <_dtoa_r+0x37c>)
1004a322:	f7f6 f9f7 	bl	10040714 <__aeabi_dadd>
1004a326:	0004      	movs	r4, r0
1004a328:	0038      	movs	r0, r7
1004a32a:	000d      	movs	r5, r1
1004a32c:	f7f8 f85c 	bl	100423e8 <__aeabi_i2d>
1004a330:	4a96      	ldr	r2, [pc, #600]	@ (1004a58c <_dtoa_r+0x380>)
1004a332:	4b97      	ldr	r3, [pc, #604]	@ (1004a590 <_dtoa_r+0x384>)
1004a334:	f7f7 f996 	bl	10041664 <__aeabi_dmul>
1004a338:	0002      	movs	r2, r0
1004a33a:	000b      	movs	r3, r1
1004a33c:	0020      	movs	r0, r4
1004a33e:	0029      	movs	r1, r5
1004a340:	f7f6 f9e8 	bl	10040714 <__aeabi_dadd>
1004a344:	0004      	movs	r4, r0
1004a346:	000d      	movs	r5, r1
1004a348:	f7f8 f812 	bl	10042370 <__aeabi_d2iz>
1004a34c:	2200      	movs	r2, #0
1004a34e:	9004      	str	r0, [sp, #16]
1004a350:	2300      	movs	r3, #0
1004a352:	0020      	movs	r0, r4
1004a354:	0029      	movs	r1, r5
1004a356:	f7f6 f87d 	bl	10040454 <__aeabi_dcmplt>
1004a35a:	2800      	cmp	r0, #0
1004a35c:	d00b      	beq.n	1004a376 <_dtoa_r+0x16a>
1004a35e:	9804      	ldr	r0, [sp, #16]
1004a360:	f7f8 f842 	bl	100423e8 <__aeabi_i2d>
1004a364:	002b      	movs	r3, r5
1004a366:	0022      	movs	r2, r4
1004a368:	f7f6 f86e 	bl	10040448 <__aeabi_dcmpeq>
1004a36c:	4243      	negs	r3, r0
1004a36e:	4158      	adcs	r0, r3
1004a370:	9b04      	ldr	r3, [sp, #16]
1004a372:	1a1b      	subs	r3, r3, r0
1004a374:	9304      	str	r3, [sp, #16]
1004a376:	2301      	movs	r3, #1
1004a378:	9315      	str	r3, [sp, #84]	@ 0x54
1004a37a:	9b04      	ldr	r3, [sp, #16]
1004a37c:	2b16      	cmp	r3, #22
1004a37e:	d810      	bhi.n	1004a3a2 <_dtoa_r+0x196>
1004a380:	9812      	ldr	r0, [sp, #72]	@ 0x48
1004a382:	9913      	ldr	r1, [sp, #76]	@ 0x4c
1004a384:	9a04      	ldr	r2, [sp, #16]
1004a386:	4b83      	ldr	r3, [pc, #524]	@ (1004a594 <_dtoa_r+0x388>)
1004a388:	00d2      	lsls	r2, r2, #3
1004a38a:	189b      	adds	r3, r3, r2
1004a38c:	681a      	ldr	r2, [r3, #0]
1004a38e:	685b      	ldr	r3, [r3, #4]
1004a390:	f7f6 f860 	bl	10040454 <__aeabi_dcmplt>
1004a394:	2800      	cmp	r0, #0
1004a396:	d047      	beq.n	1004a428 <_dtoa_r+0x21c>
1004a398:	9b04      	ldr	r3, [sp, #16]
1004a39a:	3b01      	subs	r3, #1
1004a39c:	9304      	str	r3, [sp, #16]
1004a39e:	2300      	movs	r3, #0
1004a3a0:	9315      	str	r3, [sp, #84]	@ 0x54
1004a3a2:	2200      	movs	r2, #0
1004a3a4:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
1004a3a6:	9206      	str	r2, [sp, #24]
1004a3a8:	1bdb      	subs	r3, r3, r7
1004a3aa:	1e5a      	subs	r2, r3, #1
1004a3ac:	d53e      	bpl.n	1004a42c <_dtoa_r+0x220>
1004a3ae:	2201      	movs	r2, #1
1004a3b0:	1ad3      	subs	r3, r2, r3
1004a3b2:	9306      	str	r3, [sp, #24]
1004a3b4:	2300      	movs	r3, #0
1004a3b6:	930d      	str	r3, [sp, #52]	@ 0x34
1004a3b8:	9b04      	ldr	r3, [sp, #16]
1004a3ba:	2b00      	cmp	r3, #0
1004a3bc:	db38      	blt.n	1004a430 <_dtoa_r+0x224>
1004a3be:	9a04      	ldr	r2, [sp, #16]
1004a3c0:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
1004a3c2:	4694      	mov	ip, r2
1004a3c4:	4463      	add	r3, ip
1004a3c6:	930d      	str	r3, [sp, #52]	@ 0x34
1004a3c8:	2300      	movs	r3, #0
1004a3ca:	9214      	str	r2, [sp, #80]	@ 0x50
1004a3cc:	930f      	str	r3, [sp, #60]	@ 0x3c
1004a3ce:	9b22      	ldr	r3, [sp, #136]	@ 0x88
1004a3d0:	2401      	movs	r4, #1
1004a3d2:	2b09      	cmp	r3, #9
1004a3d4:	d867      	bhi.n	1004a4a6 <_dtoa_r+0x29a>
1004a3d6:	2b05      	cmp	r3, #5
1004a3d8:	dd02      	ble.n	1004a3e0 <_dtoa_r+0x1d4>
1004a3da:	2400      	movs	r4, #0
1004a3dc:	3b04      	subs	r3, #4
1004a3de:	9322      	str	r3, [sp, #136]	@ 0x88
1004a3e0:	9b22      	ldr	r3, [sp, #136]	@ 0x88
1004a3e2:	1e98      	subs	r0, r3, #2
1004a3e4:	2803      	cmp	r0, #3
1004a3e6:	d867      	bhi.n	1004a4b8 <_dtoa_r+0x2ac>
1004a3e8:	f7f5 fe94 	bl	10040114 <__gnu_thumb1_case_uqi>
1004a3ec:	5b383a2b 	.word	0x5b383a2b
1004a3f0:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
1004a3f2:	9e1a      	ldr	r6, [sp, #104]	@ 0x68
1004a3f4:	18f6      	adds	r6, r6, r3
1004a3f6:	4b68      	ldr	r3, [pc, #416]	@ (1004a598 <_dtoa_r+0x38c>)
1004a3f8:	18f2      	adds	r2, r6, r3
1004a3fa:	2a20      	cmp	r2, #32
1004a3fc:	dd0f      	ble.n	1004a41e <_dtoa_r+0x212>
1004a3fe:	2340      	movs	r3, #64	@ 0x40
1004a400:	1a9b      	subs	r3, r3, r2
1004a402:	409f      	lsls	r7, r3
1004a404:	4b65      	ldr	r3, [pc, #404]	@ (1004a59c <_dtoa_r+0x390>)
1004a406:	0038      	movs	r0, r7
1004a408:	18f3      	adds	r3, r6, r3
1004a40a:	40dc      	lsrs	r4, r3
1004a40c:	4320      	orrs	r0, r4
1004a40e:	f7f8 f819 	bl	10042444 <__aeabi_ui2d>
1004a412:	2201      	movs	r2, #1
1004a414:	4b62      	ldr	r3, [pc, #392]	@ (1004a5a0 <_dtoa_r+0x394>)
1004a416:	1e77      	subs	r7, r6, #1
1004a418:	18cb      	adds	r3, r1, r3
1004a41a:	9218      	str	r2, [sp, #96]	@ 0x60
1004a41c:	e776      	b.n	1004a30c <_dtoa_r+0x100>
1004a41e:	2320      	movs	r3, #32
1004a420:	0020      	movs	r0, r4
1004a422:	1a9b      	subs	r3, r3, r2
1004a424:	4098      	lsls	r0, r3
1004a426:	e7f2      	b.n	1004a40e <_dtoa_r+0x202>
1004a428:	9015      	str	r0, [sp, #84]	@ 0x54
1004a42a:	e7ba      	b.n	1004a3a2 <_dtoa_r+0x196>
1004a42c:	920d      	str	r2, [sp, #52]	@ 0x34
1004a42e:	e7c3      	b.n	1004a3b8 <_dtoa_r+0x1ac>
1004a430:	9b06      	ldr	r3, [sp, #24]
1004a432:	9a04      	ldr	r2, [sp, #16]
1004a434:	1a9b      	subs	r3, r3, r2
1004a436:	9306      	str	r3, [sp, #24]
1004a438:	4253      	negs	r3, r2
1004a43a:	930f      	str	r3, [sp, #60]	@ 0x3c
1004a43c:	2300      	movs	r3, #0
1004a43e:	9314      	str	r3, [sp, #80]	@ 0x50
1004a440:	e7c5      	b.n	1004a3ce <_dtoa_r+0x1c2>
1004a442:	2300      	movs	r3, #0
1004a444:	9310      	str	r3, [sp, #64]	@ 0x40
1004a446:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
1004a448:	930e      	str	r3, [sp, #56]	@ 0x38
1004a44a:	9309      	str	r3, [sp, #36]	@ 0x24
1004a44c:	2b00      	cmp	r3, #0
1004a44e:	dc13      	bgt.n	1004a478 <_dtoa_r+0x26c>
1004a450:	2301      	movs	r3, #1
1004a452:	001a      	movs	r2, r3
1004a454:	930e      	str	r3, [sp, #56]	@ 0x38
1004a456:	9309      	str	r3, [sp, #36]	@ 0x24
1004a458:	9223      	str	r2, [sp, #140]	@ 0x8c
1004a45a:	e00d      	b.n	1004a478 <_dtoa_r+0x26c>
1004a45c:	2301      	movs	r3, #1
1004a45e:	e7f1      	b.n	1004a444 <_dtoa_r+0x238>
1004a460:	2300      	movs	r3, #0
1004a462:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
1004a464:	9310      	str	r3, [sp, #64]	@ 0x40
1004a466:	4694      	mov	ip, r2
1004a468:	9b04      	ldr	r3, [sp, #16]
1004a46a:	4463      	add	r3, ip
1004a46c:	930e      	str	r3, [sp, #56]	@ 0x38
1004a46e:	3301      	adds	r3, #1
1004a470:	9309      	str	r3, [sp, #36]	@ 0x24
1004a472:	2b00      	cmp	r3, #0
1004a474:	dc00      	bgt.n	1004a478 <_dtoa_r+0x26c>
1004a476:	2301      	movs	r3, #1
1004a478:	9a03      	ldr	r2, [sp, #12]
1004a47a:	2100      	movs	r1, #0
1004a47c:	69d0      	ldr	r0, [r2, #28]
1004a47e:	2204      	movs	r2, #4
1004a480:	0015      	movs	r5, r2
1004a482:	3514      	adds	r5, #20
1004a484:	429d      	cmp	r5, r3
1004a486:	d91b      	bls.n	1004a4c0 <_dtoa_r+0x2b4>
1004a488:	6041      	str	r1, [r0, #4]
1004a48a:	9803      	ldr	r0, [sp, #12]
1004a48c:	f000 fdb8 	bl	1004b000 <_Balloc>
1004a490:	9008      	str	r0, [sp, #32]
1004a492:	2800      	cmp	r0, #0
1004a494:	d117      	bne.n	1004a4c6 <_dtoa_r+0x2ba>
1004a496:	21b0      	movs	r1, #176	@ 0xb0
1004a498:	4b42      	ldr	r3, [pc, #264]	@ (1004a5a4 <_dtoa_r+0x398>)
1004a49a:	482e      	ldr	r0, [pc, #184]	@ (1004a554 <_dtoa_r+0x348>)
1004a49c:	9a08      	ldr	r2, [sp, #32]
1004a49e:	31ff      	adds	r1, #255	@ 0xff
1004a4a0:	e6c9      	b.n	1004a236 <_dtoa_r+0x2a>
1004a4a2:	2301      	movs	r3, #1
1004a4a4:	e7dd      	b.n	1004a462 <_dtoa_r+0x256>
1004a4a6:	2300      	movs	r3, #0
1004a4a8:	9410      	str	r4, [sp, #64]	@ 0x40
1004a4aa:	9322      	str	r3, [sp, #136]	@ 0x88
1004a4ac:	3b01      	subs	r3, #1
1004a4ae:	930e      	str	r3, [sp, #56]	@ 0x38
1004a4b0:	9309      	str	r3, [sp, #36]	@ 0x24
1004a4b2:	2200      	movs	r2, #0
1004a4b4:	3313      	adds	r3, #19
1004a4b6:	e7cf      	b.n	1004a458 <_dtoa_r+0x24c>
1004a4b8:	2301      	movs	r3, #1
1004a4ba:	9310      	str	r3, [sp, #64]	@ 0x40
1004a4bc:	3b02      	subs	r3, #2
1004a4be:	e7f6      	b.n	1004a4ae <_dtoa_r+0x2a2>
1004a4c0:	3101      	adds	r1, #1
1004a4c2:	0052      	lsls	r2, r2, #1
1004a4c4:	e7dc      	b.n	1004a480 <_dtoa_r+0x274>
1004a4c6:	9b03      	ldr	r3, [sp, #12]
1004a4c8:	9a08      	ldr	r2, [sp, #32]
1004a4ca:	69db      	ldr	r3, [r3, #28]
1004a4cc:	601a      	str	r2, [r3, #0]
1004a4ce:	9b09      	ldr	r3, [sp, #36]	@ 0x24
1004a4d0:	2b0e      	cmp	r3, #14
1004a4d2:	d900      	bls.n	1004a4d6 <_dtoa_r+0x2ca>
1004a4d4:	e0d9      	b.n	1004a68a <_dtoa_r+0x47e>
1004a4d6:	2c00      	cmp	r4, #0
1004a4d8:	d100      	bne.n	1004a4dc <_dtoa_r+0x2d0>
1004a4da:	e0d6      	b.n	1004a68a <_dtoa_r+0x47e>
1004a4dc:	9b04      	ldr	r3, [sp, #16]
1004a4de:	2b00      	cmp	r3, #0
1004a4e0:	dd64      	ble.n	1004a5ac <_dtoa_r+0x3a0>
1004a4e2:	210f      	movs	r1, #15
1004a4e4:	9a04      	ldr	r2, [sp, #16]
1004a4e6:	4b2b      	ldr	r3, [pc, #172]	@ (1004a594 <_dtoa_r+0x388>)
1004a4e8:	400a      	ands	r2, r1
1004a4ea:	00d2      	lsls	r2, r2, #3
1004a4ec:	189b      	adds	r3, r3, r2
1004a4ee:	681e      	ldr	r6, [r3, #0]
1004a4f0:	685f      	ldr	r7, [r3, #4]
1004a4f2:	9b04      	ldr	r3, [sp, #16]
1004a4f4:	2402      	movs	r4, #2
1004a4f6:	111d      	asrs	r5, r3, #4
1004a4f8:	05db      	lsls	r3, r3, #23
1004a4fa:	d50a      	bpl.n	1004a512 <_dtoa_r+0x306>
1004a4fc:	4b2a      	ldr	r3, [pc, #168]	@ (1004a5a8 <_dtoa_r+0x39c>)
1004a4fe:	400d      	ands	r5, r1
1004a500:	6a1a      	ldr	r2, [r3, #32]
1004a502:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
1004a504:	9812      	ldr	r0, [sp, #72]	@ 0x48
1004a506:	9913      	ldr	r1, [sp, #76]	@ 0x4c
1004a508:	f7f6 fc68 	bl	10040ddc <__aeabi_ddiv>
1004a50c:	900a      	str	r0, [sp, #40]	@ 0x28
1004a50e:	910b      	str	r1, [sp, #44]	@ 0x2c
1004a510:	3401      	adds	r4, #1
1004a512:	4b25      	ldr	r3, [pc, #148]	@ (1004a5a8 <_dtoa_r+0x39c>)
1004a514:	930c      	str	r3, [sp, #48]	@ 0x30
1004a516:	2d00      	cmp	r5, #0
1004a518:	d108      	bne.n	1004a52c <_dtoa_r+0x320>
1004a51a:	980a      	ldr	r0, [sp, #40]	@ 0x28
1004a51c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
1004a51e:	0032      	movs	r2, r6
1004a520:	003b      	movs	r3, r7
1004a522:	f7f6 fc5b 	bl	10040ddc <__aeabi_ddiv>
1004a526:	900a      	str	r0, [sp, #40]	@ 0x28
1004a528:	910b      	str	r1, [sp, #44]	@ 0x2c
1004a52a:	e05a      	b.n	1004a5e2 <_dtoa_r+0x3d6>
1004a52c:	2301      	movs	r3, #1
1004a52e:	421d      	tst	r5, r3
1004a530:	d009      	beq.n	1004a546 <_dtoa_r+0x33a>
1004a532:	18e4      	adds	r4, r4, r3
1004a534:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
1004a536:	0030      	movs	r0, r6
1004a538:	681a      	ldr	r2, [r3, #0]
1004a53a:	685b      	ldr	r3, [r3, #4]
1004a53c:	0039      	movs	r1, r7
1004a53e:	f7f7 f891 	bl	10041664 <__aeabi_dmul>
1004a542:	0006      	movs	r6, r0
1004a544:	000f      	movs	r7, r1
1004a546:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
1004a548:	106d      	asrs	r5, r5, #1
1004a54a:	3308      	adds	r3, #8
1004a54c:	e7e2      	b.n	1004a514 <_dtoa_r+0x308>
1004a54e:	46c0      	nop			@ (mov r8, r8)
1004a550:	1004c019 	.word	0x1004c019
1004a554:	1004c030 	.word	0x1004c030
1004a558:	7ff00000 	.word	0x7ff00000
1004a55c:	0000270f 	.word	0x0000270f
1004a560:	1004c015 	.word	0x1004c015
1004a564:	1004c018 	.word	0x1004c018
1004a568:	1004bfe9 	.word	0x1004bfe9
1004a56c:	1004bfe8 	.word	0x1004bfe8
1004a570:	3ff00000 	.word	0x3ff00000
1004a574:	fffffc01 	.word	0xfffffc01
1004a578:	3ff80000 	.word	0x3ff80000
1004a57c:	636f4361 	.word	0x636f4361
1004a580:	3fd287a7 	.word	0x3fd287a7
1004a584:	8b60c8b3 	.word	0x8b60c8b3
1004a588:	3fc68a28 	.word	0x3fc68a28
1004a58c:	509f79fb 	.word	0x509f79fb
1004a590:	3fd34413 	.word	0x3fd34413
1004a594:	1004c128 	.word	0x1004c128
1004a598:	00000432 	.word	0x00000432
1004a59c:	00000412 	.word	0x00000412
1004a5a0:	fe100000 	.word	0xfe100000
1004a5a4:	1004c088 	.word	0x1004c088
1004a5a8:	1004c100 	.word	0x1004c100
1004a5ac:	9b04      	ldr	r3, [sp, #16]
1004a5ae:	2402      	movs	r4, #2
1004a5b0:	2b00      	cmp	r3, #0
1004a5b2:	d016      	beq.n	1004a5e2 <_dtoa_r+0x3d6>
1004a5b4:	9812      	ldr	r0, [sp, #72]	@ 0x48
1004a5b6:	9913      	ldr	r1, [sp, #76]	@ 0x4c
1004a5b8:	220f      	movs	r2, #15
1004a5ba:	425d      	negs	r5, r3
1004a5bc:	402a      	ands	r2, r5
1004a5be:	4bd7      	ldr	r3, [pc, #860]	@ (1004a91c <_dtoa_r+0x710>)
1004a5c0:	00d2      	lsls	r2, r2, #3
1004a5c2:	189b      	adds	r3, r3, r2
1004a5c4:	681a      	ldr	r2, [r3, #0]
1004a5c6:	685b      	ldr	r3, [r3, #4]
1004a5c8:	f7f7 f84c 	bl	10041664 <__aeabi_dmul>
1004a5cc:	2701      	movs	r7, #1
1004a5ce:	2300      	movs	r3, #0
1004a5d0:	900a      	str	r0, [sp, #40]	@ 0x28
1004a5d2:	910b      	str	r1, [sp, #44]	@ 0x2c
1004a5d4:	4ed2      	ldr	r6, [pc, #840]	@ (1004a920 <_dtoa_r+0x714>)
1004a5d6:	112d      	asrs	r5, r5, #4
1004a5d8:	2d00      	cmp	r5, #0
1004a5da:	d000      	beq.n	1004a5de <_dtoa_r+0x3d2>
1004a5dc:	e0ba      	b.n	1004a754 <_dtoa_r+0x548>
1004a5de:	2b00      	cmp	r3, #0
1004a5e0:	d1a1      	bne.n	1004a526 <_dtoa_r+0x31a>
1004a5e2:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
1004a5e4:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
1004a5e6:	9b15      	ldr	r3, [sp, #84]	@ 0x54
1004a5e8:	2b00      	cmp	r3, #0
1004a5ea:	d100      	bne.n	1004a5ee <_dtoa_r+0x3e2>
1004a5ec:	e0bd      	b.n	1004a76a <_dtoa_r+0x55e>
1004a5ee:	2200      	movs	r2, #0
1004a5f0:	0030      	movs	r0, r6
1004a5f2:	0039      	movs	r1, r7
1004a5f4:	4bcb      	ldr	r3, [pc, #812]	@ (1004a924 <_dtoa_r+0x718>)
1004a5f6:	f7f5 ff2d 	bl	10040454 <__aeabi_dcmplt>
1004a5fa:	2800      	cmp	r0, #0
1004a5fc:	d100      	bne.n	1004a600 <_dtoa_r+0x3f4>
1004a5fe:	e0b4      	b.n	1004a76a <_dtoa_r+0x55e>
1004a600:	9b09      	ldr	r3, [sp, #36]	@ 0x24
1004a602:	2b00      	cmp	r3, #0
1004a604:	d100      	bne.n	1004a608 <_dtoa_r+0x3fc>
1004a606:	e0b0      	b.n	1004a76a <_dtoa_r+0x55e>
1004a608:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
1004a60a:	2b00      	cmp	r3, #0
1004a60c:	dd39      	ble.n	1004a682 <_dtoa_r+0x476>
1004a60e:	9b04      	ldr	r3, [sp, #16]
1004a610:	2200      	movs	r2, #0
1004a612:	3b01      	subs	r3, #1
1004a614:	930c      	str	r3, [sp, #48]	@ 0x30
1004a616:	0030      	movs	r0, r6
1004a618:	4bc3      	ldr	r3, [pc, #780]	@ (1004a928 <_dtoa_r+0x71c>)
1004a61a:	0039      	movs	r1, r7
1004a61c:	f7f7 f822 	bl	10041664 <__aeabi_dmul>
1004a620:	900a      	str	r0, [sp, #40]	@ 0x28
1004a622:	910b      	str	r1, [sp, #44]	@ 0x2c
1004a624:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
1004a626:	3401      	adds	r4, #1
1004a628:	0020      	movs	r0, r4
1004a62a:	9311      	str	r3, [sp, #68]	@ 0x44
1004a62c:	f7f7 fedc 	bl	100423e8 <__aeabi_i2d>
1004a630:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
1004a632:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
1004a634:	f7f7 f816 	bl	10041664 <__aeabi_dmul>
1004a638:	4bbc      	ldr	r3, [pc, #752]	@ (1004a92c <_dtoa_r+0x720>)
1004a63a:	2200      	movs	r2, #0
1004a63c:	f7f6 f86a 	bl	10040714 <__aeabi_dadd>
1004a640:	4bbb      	ldr	r3, [pc, #748]	@ (1004a930 <_dtoa_r+0x724>)
1004a642:	0006      	movs	r6, r0
1004a644:	18cf      	adds	r7, r1, r3
1004a646:	9b11      	ldr	r3, [sp, #68]	@ 0x44
1004a648:	2b00      	cmp	r3, #0
1004a64a:	d000      	beq.n	1004a64e <_dtoa_r+0x442>
1004a64c:	e091      	b.n	1004a772 <_dtoa_r+0x566>
1004a64e:	980a      	ldr	r0, [sp, #40]	@ 0x28
1004a650:	990b      	ldr	r1, [sp, #44]	@ 0x2c
1004a652:	2200      	movs	r2, #0
1004a654:	4bb7      	ldr	r3, [pc, #732]	@ (1004a934 <_dtoa_r+0x728>)
1004a656:	f7f7 facd 	bl	10041bf4 <__aeabi_dsub>
1004a65a:	0032      	movs	r2, r6
1004a65c:	003b      	movs	r3, r7
1004a65e:	0004      	movs	r4, r0
1004a660:	000d      	movs	r5, r1
1004a662:	f7f5 ff0b 	bl	1004047c <__aeabi_dcmpgt>
1004a666:	2800      	cmp	r0, #0
1004a668:	d000      	beq.n	1004a66c <_dtoa_r+0x460>
1004a66a:	e29d      	b.n	1004aba8 <_dtoa_r+0x99c>
1004a66c:	2180      	movs	r1, #128	@ 0x80
1004a66e:	0609      	lsls	r1, r1, #24
1004a670:	187b      	adds	r3, r7, r1
1004a672:	0032      	movs	r2, r6
1004a674:	0020      	movs	r0, r4
1004a676:	0029      	movs	r1, r5
1004a678:	f7f5 feec 	bl	10040454 <__aeabi_dcmplt>
1004a67c:	2800      	cmp	r0, #0
1004a67e:	d000      	beq.n	1004a682 <_dtoa_r+0x476>
1004a680:	e130      	b.n	1004a8e4 <_dtoa_r+0x6d8>
1004a682:	9b12      	ldr	r3, [sp, #72]	@ 0x48
1004a684:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
1004a686:	930a      	str	r3, [sp, #40]	@ 0x28
1004a688:	940b      	str	r4, [sp, #44]	@ 0x2c
1004a68a:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
1004a68c:	2b00      	cmp	r3, #0
1004a68e:	da00      	bge.n	1004a692 <_dtoa_r+0x486>
1004a690:	e177      	b.n	1004a982 <_dtoa_r+0x776>
1004a692:	9a04      	ldr	r2, [sp, #16]
1004a694:	2a0e      	cmp	r2, #14
1004a696:	dd00      	ble.n	1004a69a <_dtoa_r+0x48e>
1004a698:	e173      	b.n	1004a982 <_dtoa_r+0x776>
1004a69a:	4ba0      	ldr	r3, [pc, #640]	@ (1004a91c <_dtoa_r+0x710>)
1004a69c:	00d2      	lsls	r2, r2, #3
1004a69e:	189b      	adds	r3, r3, r2
1004a6a0:	685c      	ldr	r4, [r3, #4]
1004a6a2:	681b      	ldr	r3, [r3, #0]
1004a6a4:	9306      	str	r3, [sp, #24]
1004a6a6:	9407      	str	r4, [sp, #28]
1004a6a8:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
1004a6aa:	2b00      	cmp	r3, #0
1004a6ac:	da03      	bge.n	1004a6b6 <_dtoa_r+0x4aa>
1004a6ae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
1004a6b0:	2b00      	cmp	r3, #0
1004a6b2:	dc00      	bgt.n	1004a6b6 <_dtoa_r+0x4aa>
1004a6b4:	e106      	b.n	1004a8c4 <_dtoa_r+0x6b8>
1004a6b6:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
1004a6b8:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
1004a6ba:	9b09      	ldr	r3, [sp, #36]	@ 0x24
1004a6bc:	9d08      	ldr	r5, [sp, #32]
1004a6be:	3b01      	subs	r3, #1
1004a6c0:	195b      	adds	r3, r3, r5
1004a6c2:	930a      	str	r3, [sp, #40]	@ 0x28
1004a6c4:	9a06      	ldr	r2, [sp, #24]
1004a6c6:	9b07      	ldr	r3, [sp, #28]
1004a6c8:	0030      	movs	r0, r6
1004a6ca:	0039      	movs	r1, r7
1004a6cc:	f7f6 fb86 	bl	10040ddc <__aeabi_ddiv>
1004a6d0:	f7f7 fe4e 	bl	10042370 <__aeabi_d2iz>
1004a6d4:	9009      	str	r0, [sp, #36]	@ 0x24
1004a6d6:	f7f7 fe87 	bl	100423e8 <__aeabi_i2d>
1004a6da:	9a06      	ldr	r2, [sp, #24]
1004a6dc:	9b07      	ldr	r3, [sp, #28]
1004a6de:	f7f6 ffc1 	bl	10041664 <__aeabi_dmul>
1004a6e2:	0002      	movs	r2, r0
1004a6e4:	000b      	movs	r3, r1
1004a6e6:	0030      	movs	r0, r6
1004a6e8:	0039      	movs	r1, r7
1004a6ea:	f7f7 fa83 	bl	10041bf4 <__aeabi_dsub>
1004a6ee:	002b      	movs	r3, r5
1004a6f0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
1004a6f2:	3501      	adds	r5, #1
1004a6f4:	3230      	adds	r2, #48	@ 0x30
1004a6f6:	701a      	strb	r2, [r3, #0]
1004a6f8:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
1004a6fa:	002c      	movs	r4, r5
1004a6fc:	429a      	cmp	r2, r3
1004a6fe:	d000      	beq.n	1004a702 <_dtoa_r+0x4f6>
1004a700:	e131      	b.n	1004a966 <_dtoa_r+0x75a>
1004a702:	0002      	movs	r2, r0
1004a704:	000b      	movs	r3, r1
1004a706:	f7f6 f805 	bl	10040714 <__aeabi_dadd>
1004a70a:	9a06      	ldr	r2, [sp, #24]
1004a70c:	9b07      	ldr	r3, [sp, #28]
1004a70e:	0006      	movs	r6, r0
1004a710:	000f      	movs	r7, r1
1004a712:	f7f5 feb3 	bl	1004047c <__aeabi_dcmpgt>
1004a716:	2800      	cmp	r0, #0
1004a718:	d000      	beq.n	1004a71c <_dtoa_r+0x510>
1004a71a:	e10f      	b.n	1004a93c <_dtoa_r+0x730>
1004a71c:	9a06      	ldr	r2, [sp, #24]
1004a71e:	9b07      	ldr	r3, [sp, #28]
1004a720:	0030      	movs	r0, r6
1004a722:	0039      	movs	r1, r7
1004a724:	f7f5 fe90 	bl	10040448 <__aeabi_dcmpeq>
1004a728:	2800      	cmp	r0, #0
1004a72a:	d003      	beq.n	1004a734 <_dtoa_r+0x528>
1004a72c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
1004a72e:	07dd      	lsls	r5, r3, #31
1004a730:	d500      	bpl.n	1004a734 <_dtoa_r+0x528>
1004a732:	e103      	b.n	1004a93c <_dtoa_r+0x730>
1004a734:	9905      	ldr	r1, [sp, #20]
1004a736:	9803      	ldr	r0, [sp, #12]
1004a738:	f000 fca6 	bl	1004b088 <_Bfree>
1004a73c:	2300      	movs	r3, #0
1004a73e:	7023      	strb	r3, [r4, #0]
1004a740:	9b04      	ldr	r3, [sp, #16]
1004a742:	9a24      	ldr	r2, [sp, #144]	@ 0x90
1004a744:	3301      	adds	r3, #1
1004a746:	6013      	str	r3, [r2, #0]
1004a748:	9b26      	ldr	r3, [sp, #152]	@ 0x98
1004a74a:	2b00      	cmp	r3, #0
1004a74c:	d100      	bne.n	1004a750 <_dtoa_r+0x544>
1004a74e:	e5a7      	b.n	1004a2a0 <_dtoa_r+0x94>
1004a750:	601c      	str	r4, [r3, #0]
1004a752:	e5a5      	b.n	1004a2a0 <_dtoa_r+0x94>
1004a754:	423d      	tst	r5, r7
1004a756:	d005      	beq.n	1004a764 <_dtoa_r+0x558>
1004a758:	6832      	ldr	r2, [r6, #0]
1004a75a:	6873      	ldr	r3, [r6, #4]
1004a75c:	f7f6 ff82 	bl	10041664 <__aeabi_dmul>
1004a760:	003b      	movs	r3, r7
1004a762:	3401      	adds	r4, #1
1004a764:	106d      	asrs	r5, r5, #1
1004a766:	3608      	adds	r6, #8
1004a768:	e736      	b.n	1004a5d8 <_dtoa_r+0x3cc>
1004a76a:	9b04      	ldr	r3, [sp, #16]
1004a76c:	930c      	str	r3, [sp, #48]	@ 0x30
1004a76e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
1004a770:	e75a      	b.n	1004a628 <_dtoa_r+0x41c>
1004a772:	9a11      	ldr	r2, [sp, #68]	@ 0x44
1004a774:	4b69      	ldr	r3, [pc, #420]	@ (1004a91c <_dtoa_r+0x710>)
1004a776:	3a01      	subs	r2, #1
1004a778:	00d2      	lsls	r2, r2, #3
1004a77a:	9910      	ldr	r1, [sp, #64]	@ 0x40
1004a77c:	189b      	adds	r3, r3, r2
1004a77e:	681a      	ldr	r2, [r3, #0]
1004a780:	685b      	ldr	r3, [r3, #4]
1004a782:	2900      	cmp	r1, #0
1004a784:	d04c      	beq.n	1004a820 <_dtoa_r+0x614>
1004a786:	2000      	movs	r0, #0
1004a788:	496b      	ldr	r1, [pc, #428]	@ (1004a938 <_dtoa_r+0x72c>)
1004a78a:	f7f6 fb27 	bl	10040ddc <__aeabi_ddiv>
1004a78e:	0032      	movs	r2, r6
1004a790:	003b      	movs	r3, r7
1004a792:	f7f7 fa2f 	bl	10041bf4 <__aeabi_dsub>
1004a796:	9a08      	ldr	r2, [sp, #32]
1004a798:	0006      	movs	r6, r0
1004a79a:	4694      	mov	ip, r2
1004a79c:	000f      	movs	r7, r1
1004a79e:	9b08      	ldr	r3, [sp, #32]
1004a7a0:	9316      	str	r3, [sp, #88]	@ 0x58
1004a7a2:	9b11      	ldr	r3, [sp, #68]	@ 0x44
1004a7a4:	4463      	add	r3, ip
1004a7a6:	9311      	str	r3, [sp, #68]	@ 0x44
1004a7a8:	980a      	ldr	r0, [sp, #40]	@ 0x28
1004a7aa:	990b      	ldr	r1, [sp, #44]	@ 0x2c
1004a7ac:	f7f7 fde0 	bl	10042370 <__aeabi_d2iz>
1004a7b0:	0005      	movs	r5, r0
1004a7b2:	f7f7 fe19 	bl	100423e8 <__aeabi_i2d>
1004a7b6:	0002      	movs	r2, r0
1004a7b8:	000b      	movs	r3, r1
1004a7ba:	980a      	ldr	r0, [sp, #40]	@ 0x28
1004a7bc:	990b      	ldr	r1, [sp, #44]	@ 0x2c
1004a7be:	f7f7 fa19 	bl	10041bf4 <__aeabi_dsub>
1004a7c2:	9b16      	ldr	r3, [sp, #88]	@ 0x58
1004a7c4:	3530      	adds	r5, #48	@ 0x30
1004a7c6:	1c5c      	adds	r4, r3, #1
1004a7c8:	701d      	strb	r5, [r3, #0]
1004a7ca:	0032      	movs	r2, r6
1004a7cc:	003b      	movs	r3, r7
1004a7ce:	900a      	str	r0, [sp, #40]	@ 0x28
1004a7d0:	910b      	str	r1, [sp, #44]	@ 0x2c
1004a7d2:	f7f5 fe3f 	bl	10040454 <__aeabi_dcmplt>
1004a7d6:	2800      	cmp	r0, #0
1004a7d8:	d16a      	bne.n	1004a8b0 <_dtoa_r+0x6a4>
1004a7da:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
1004a7dc:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
1004a7de:	2000      	movs	r0, #0
1004a7e0:	4950      	ldr	r1, [pc, #320]	@ (1004a924 <_dtoa_r+0x718>)
1004a7e2:	f7f7 fa07 	bl	10041bf4 <__aeabi_dsub>
1004a7e6:	0032      	movs	r2, r6
1004a7e8:	003b      	movs	r3, r7
1004a7ea:	f7f5 fe33 	bl	10040454 <__aeabi_dcmplt>
1004a7ee:	2800      	cmp	r0, #0
1004a7f0:	d000      	beq.n	1004a7f4 <_dtoa_r+0x5e8>
1004a7f2:	e0a5      	b.n	1004a940 <_dtoa_r+0x734>
1004a7f4:	9b11      	ldr	r3, [sp, #68]	@ 0x44
1004a7f6:	42a3      	cmp	r3, r4
1004a7f8:	d100      	bne.n	1004a7fc <_dtoa_r+0x5f0>
1004a7fa:	e742      	b.n	1004a682 <_dtoa_r+0x476>
1004a7fc:	2200      	movs	r2, #0
1004a7fe:	0030      	movs	r0, r6
1004a800:	0039      	movs	r1, r7
1004a802:	4b49      	ldr	r3, [pc, #292]	@ (1004a928 <_dtoa_r+0x71c>)
1004a804:	f7f6 ff2e 	bl	10041664 <__aeabi_dmul>
1004a808:	2200      	movs	r2, #0
1004a80a:	0006      	movs	r6, r0
1004a80c:	000f      	movs	r7, r1
1004a80e:	980a      	ldr	r0, [sp, #40]	@ 0x28
1004a810:	990b      	ldr	r1, [sp, #44]	@ 0x2c
1004a812:	4b45      	ldr	r3, [pc, #276]	@ (1004a928 <_dtoa_r+0x71c>)
1004a814:	f7f6 ff26 	bl	10041664 <__aeabi_dmul>
1004a818:	9416      	str	r4, [sp, #88]	@ 0x58
1004a81a:	900a      	str	r0, [sp, #40]	@ 0x28
1004a81c:	910b      	str	r1, [sp, #44]	@ 0x2c
1004a81e:	e7c3      	b.n	1004a7a8 <_dtoa_r+0x59c>
1004a820:	0030      	movs	r0, r6
1004a822:	0039      	movs	r1, r7
1004a824:	f7f6 ff1e 	bl	10041664 <__aeabi_dmul>
1004a828:	9d08      	ldr	r5, [sp, #32]
1004a82a:	9a11      	ldr	r2, [sp, #68]	@ 0x44
1004a82c:	002b      	movs	r3, r5
1004a82e:	4694      	mov	ip, r2
1004a830:	9016      	str	r0, [sp, #88]	@ 0x58
1004a832:	9117      	str	r1, [sp, #92]	@ 0x5c
1004a834:	4463      	add	r3, ip
1004a836:	9319      	str	r3, [sp, #100]	@ 0x64
1004a838:	980a      	ldr	r0, [sp, #40]	@ 0x28
1004a83a:	990b      	ldr	r1, [sp, #44]	@ 0x2c
1004a83c:	f7f7 fd98 	bl	10042370 <__aeabi_d2iz>
1004a840:	0004      	movs	r4, r0
1004a842:	f7f7 fdd1 	bl	100423e8 <__aeabi_i2d>
1004a846:	000b      	movs	r3, r1
1004a848:	0002      	movs	r2, r0
1004a84a:	980a      	ldr	r0, [sp, #40]	@ 0x28
1004a84c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
1004a84e:	f7f7 f9d1 	bl	10041bf4 <__aeabi_dsub>
1004a852:	3430      	adds	r4, #48	@ 0x30
1004a854:	9b19      	ldr	r3, [sp, #100]	@ 0x64
1004a856:	702c      	strb	r4, [r5, #0]
1004a858:	3501      	adds	r5, #1
1004a85a:	0006      	movs	r6, r0
1004a85c:	000f      	movs	r7, r1
1004a85e:	42ab      	cmp	r3, r5
1004a860:	d129      	bne.n	1004a8b6 <_dtoa_r+0x6aa>
1004a862:	9816      	ldr	r0, [sp, #88]	@ 0x58
1004a864:	9917      	ldr	r1, [sp, #92]	@ 0x5c
1004a866:	9b08      	ldr	r3, [sp, #32]
1004a868:	9c11      	ldr	r4, [sp, #68]	@ 0x44
1004a86a:	469c      	mov	ip, r3
1004a86c:	2200      	movs	r2, #0
1004a86e:	4b32      	ldr	r3, [pc, #200]	@ (1004a938 <_dtoa_r+0x72c>)
1004a870:	4464      	add	r4, ip
1004a872:	f7f5 ff4f 	bl	10040714 <__aeabi_dadd>
1004a876:	0002      	movs	r2, r0
1004a878:	000b      	movs	r3, r1
1004a87a:	0030      	movs	r0, r6
1004a87c:	0039      	movs	r1, r7
1004a87e:	f7f5 fdfd 	bl	1004047c <__aeabi_dcmpgt>
1004a882:	2800      	cmp	r0, #0
1004a884:	d15c      	bne.n	1004a940 <_dtoa_r+0x734>
1004a886:	9a16      	ldr	r2, [sp, #88]	@ 0x58
1004a888:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
1004a88a:	2000      	movs	r0, #0
1004a88c:	492a      	ldr	r1, [pc, #168]	@ (1004a938 <_dtoa_r+0x72c>)
1004a88e:	f7f7 f9b1 	bl	10041bf4 <__aeabi_dsub>
1004a892:	0002      	movs	r2, r0
1004a894:	000b      	movs	r3, r1
1004a896:	0030      	movs	r0, r6
1004a898:	0039      	movs	r1, r7
1004a89a:	f7f5 fddb 	bl	10040454 <__aeabi_dcmplt>
1004a89e:	2800      	cmp	r0, #0
1004a8a0:	d100      	bne.n	1004a8a4 <_dtoa_r+0x698>
1004a8a2:	e6ee      	b.n	1004a682 <_dtoa_r+0x476>
1004a8a4:	0023      	movs	r3, r4
1004a8a6:	3c01      	subs	r4, #1
1004a8a8:	7822      	ldrb	r2, [r4, #0]
1004a8aa:	2a30      	cmp	r2, #48	@ 0x30
1004a8ac:	d0fa      	beq.n	1004a8a4 <_dtoa_r+0x698>
1004a8ae:	001c      	movs	r4, r3
1004a8b0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
1004a8b2:	9304      	str	r3, [sp, #16]
1004a8b4:	e73e      	b.n	1004a734 <_dtoa_r+0x528>
1004a8b6:	2200      	movs	r2, #0
1004a8b8:	4b1b      	ldr	r3, [pc, #108]	@ (1004a928 <_dtoa_r+0x71c>)
1004a8ba:	f7f6 fed3 	bl	10041664 <__aeabi_dmul>
1004a8be:	900a      	str	r0, [sp, #40]	@ 0x28
1004a8c0:	910b      	str	r1, [sp, #44]	@ 0x2c
1004a8c2:	e7b9      	b.n	1004a838 <_dtoa_r+0x62c>
1004a8c4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
1004a8c6:	2b00      	cmp	r3, #0
1004a8c8:	d10c      	bne.n	1004a8e4 <_dtoa_r+0x6d8>
1004a8ca:	9806      	ldr	r0, [sp, #24]
1004a8cc:	9907      	ldr	r1, [sp, #28]
1004a8ce:	2200      	movs	r2, #0
1004a8d0:	4b18      	ldr	r3, [pc, #96]	@ (1004a934 <_dtoa_r+0x728>)
1004a8d2:	f7f6 fec7 	bl	10041664 <__aeabi_dmul>
1004a8d6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
1004a8d8:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
1004a8da:	f7f5 fdd9 	bl	10040490 <__aeabi_dcmpge>
1004a8de:	2800      	cmp	r0, #0
1004a8e0:	d100      	bne.n	1004a8e4 <_dtoa_r+0x6d8>
1004a8e2:	e164      	b.n	1004abae <_dtoa_r+0x9a2>
1004a8e4:	2600      	movs	r6, #0
1004a8e6:	0037      	movs	r7, r6
1004a8e8:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
1004a8ea:	9c08      	ldr	r4, [sp, #32]
1004a8ec:	43db      	mvns	r3, r3
1004a8ee:	930c      	str	r3, [sp, #48]	@ 0x30
1004a8f0:	2300      	movs	r3, #0
1004a8f2:	9304      	str	r3, [sp, #16]
1004a8f4:	0031      	movs	r1, r6
1004a8f6:	9803      	ldr	r0, [sp, #12]
1004a8f8:	f000 fbc6 	bl	1004b088 <_Bfree>
1004a8fc:	2f00      	cmp	r7, #0
1004a8fe:	d0d7      	beq.n	1004a8b0 <_dtoa_r+0x6a4>
1004a900:	9b04      	ldr	r3, [sp, #16]
1004a902:	2b00      	cmp	r3, #0
1004a904:	d005      	beq.n	1004a912 <_dtoa_r+0x706>
1004a906:	42bb      	cmp	r3, r7
1004a908:	d003      	beq.n	1004a912 <_dtoa_r+0x706>
1004a90a:	0019      	movs	r1, r3
1004a90c:	9803      	ldr	r0, [sp, #12]
1004a90e:	f000 fbbb 	bl	1004b088 <_Bfree>
1004a912:	0039      	movs	r1, r7
1004a914:	9803      	ldr	r0, [sp, #12]
1004a916:	f000 fbb7 	bl	1004b088 <_Bfree>
1004a91a:	e7c9      	b.n	1004a8b0 <_dtoa_r+0x6a4>
1004a91c:	1004c128 	.word	0x1004c128
1004a920:	1004c100 	.word	0x1004c100
1004a924:	3ff00000 	.word	0x3ff00000
1004a928:	40240000 	.word	0x40240000
1004a92c:	401c0000 	.word	0x401c0000
1004a930:	fcc00000 	.word	0xfcc00000
1004a934:	40140000 	.word	0x40140000
1004a938:	3fe00000 	.word	0x3fe00000
1004a93c:	9b04      	ldr	r3, [sp, #16]
1004a93e:	930c      	str	r3, [sp, #48]	@ 0x30
1004a940:	0023      	movs	r3, r4
1004a942:	001c      	movs	r4, r3
1004a944:	3b01      	subs	r3, #1
1004a946:	781a      	ldrb	r2, [r3, #0]
1004a948:	2a39      	cmp	r2, #57	@ 0x39
1004a94a:	d108      	bne.n	1004a95e <_dtoa_r+0x752>
1004a94c:	9a08      	ldr	r2, [sp, #32]
1004a94e:	429a      	cmp	r2, r3
1004a950:	d1f7      	bne.n	1004a942 <_dtoa_r+0x736>
1004a952:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
1004a954:	9908      	ldr	r1, [sp, #32]
1004a956:	3201      	adds	r2, #1
1004a958:	920c      	str	r2, [sp, #48]	@ 0x30
1004a95a:	2230      	movs	r2, #48	@ 0x30
1004a95c:	700a      	strb	r2, [r1, #0]
1004a95e:	781a      	ldrb	r2, [r3, #0]
1004a960:	3201      	adds	r2, #1
1004a962:	701a      	strb	r2, [r3, #0]
1004a964:	e7a4      	b.n	1004a8b0 <_dtoa_r+0x6a4>
1004a966:	2200      	movs	r2, #0
1004a968:	4bc6      	ldr	r3, [pc, #792]	@ (1004ac84 <_dtoa_r+0xa78>)
1004a96a:	f7f6 fe7b 	bl	10041664 <__aeabi_dmul>
1004a96e:	2200      	movs	r2, #0
1004a970:	2300      	movs	r3, #0
1004a972:	0006      	movs	r6, r0
1004a974:	000f      	movs	r7, r1
1004a976:	f7f5 fd67 	bl	10040448 <__aeabi_dcmpeq>
1004a97a:	2800      	cmp	r0, #0
1004a97c:	d100      	bne.n	1004a980 <_dtoa_r+0x774>
1004a97e:	e6a1      	b.n	1004a6c4 <_dtoa_r+0x4b8>
1004a980:	e6d8      	b.n	1004a734 <_dtoa_r+0x528>
1004a982:	9f10      	ldr	r7, [sp, #64]	@ 0x40
1004a984:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
1004a986:	9c06      	ldr	r4, [sp, #24]
1004a988:	2f00      	cmp	r7, #0
1004a98a:	d014      	beq.n	1004a9b6 <_dtoa_r+0x7aa>
1004a98c:	9a22      	ldr	r2, [sp, #136]	@ 0x88
1004a98e:	2a01      	cmp	r2, #1
1004a990:	dd00      	ble.n	1004a994 <_dtoa_r+0x788>
1004a992:	e0c8      	b.n	1004ab26 <_dtoa_r+0x91a>
1004a994:	9a18      	ldr	r2, [sp, #96]	@ 0x60
1004a996:	2a00      	cmp	r2, #0
1004a998:	d100      	bne.n	1004a99c <_dtoa_r+0x790>
1004a99a:	e0be      	b.n	1004ab1a <_dtoa_r+0x90e>
1004a99c:	4aba      	ldr	r2, [pc, #744]	@ (1004ac88 <_dtoa_r+0xa7c>)
1004a99e:	189b      	adds	r3, r3, r2
1004a9a0:	9a06      	ldr	r2, [sp, #24]
1004a9a2:	2101      	movs	r1, #1
1004a9a4:	18d2      	adds	r2, r2, r3
1004a9a6:	9206      	str	r2, [sp, #24]
1004a9a8:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
1004a9aa:	9803      	ldr	r0, [sp, #12]
1004a9ac:	18d3      	adds	r3, r2, r3
1004a9ae:	930d      	str	r3, [sp, #52]	@ 0x34
1004a9b0:	f000 fc22 	bl	1004b1f8 <__i2b>
1004a9b4:	0007      	movs	r7, r0
1004a9b6:	2c00      	cmp	r4, #0
1004a9b8:	d00e      	beq.n	1004a9d8 <_dtoa_r+0x7cc>
1004a9ba:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
1004a9bc:	2b00      	cmp	r3, #0
1004a9be:	dd0b      	ble.n	1004a9d8 <_dtoa_r+0x7cc>
1004a9c0:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
1004a9c2:	0023      	movs	r3, r4
1004a9c4:	4294      	cmp	r4, r2
1004a9c6:	dd00      	ble.n	1004a9ca <_dtoa_r+0x7be>
1004a9c8:	0013      	movs	r3, r2
1004a9ca:	9a06      	ldr	r2, [sp, #24]
1004a9cc:	1ae4      	subs	r4, r4, r3
1004a9ce:	1ad2      	subs	r2, r2, r3
1004a9d0:	9206      	str	r2, [sp, #24]
1004a9d2:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
1004a9d4:	1ad3      	subs	r3, r2, r3
1004a9d6:	930d      	str	r3, [sp, #52]	@ 0x34
1004a9d8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
1004a9da:	2b00      	cmp	r3, #0
1004a9dc:	d01f      	beq.n	1004aa1e <_dtoa_r+0x812>
1004a9de:	9b10      	ldr	r3, [sp, #64]	@ 0x40
1004a9e0:	2b00      	cmp	r3, #0
1004a9e2:	d100      	bne.n	1004a9e6 <_dtoa_r+0x7da>
1004a9e4:	e0b5      	b.n	1004ab52 <_dtoa_r+0x946>
1004a9e6:	2d00      	cmp	r5, #0
1004a9e8:	d010      	beq.n	1004aa0c <_dtoa_r+0x800>
1004a9ea:	0039      	movs	r1, r7
1004a9ec:	002a      	movs	r2, r5
1004a9ee:	9803      	ldr	r0, [sp, #12]
1004a9f0:	f000 fccc 	bl	1004b38c <__pow5mult>
1004a9f4:	9a05      	ldr	r2, [sp, #20]
1004a9f6:	0001      	movs	r1, r0
1004a9f8:	0007      	movs	r7, r0
1004a9fa:	9803      	ldr	r0, [sp, #12]
1004a9fc:	f000 fc14 	bl	1004b228 <__multiply>
1004aa00:	0006      	movs	r6, r0
1004aa02:	9905      	ldr	r1, [sp, #20]
1004aa04:	9803      	ldr	r0, [sp, #12]
1004aa06:	f000 fb3f 	bl	1004b088 <_Bfree>
1004aa0a:	9605      	str	r6, [sp, #20]
1004aa0c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
1004aa0e:	1b5a      	subs	r2, r3, r5
1004aa10:	42ab      	cmp	r3, r5
1004aa12:	d004      	beq.n	1004aa1e <_dtoa_r+0x812>
1004aa14:	9905      	ldr	r1, [sp, #20]
1004aa16:	9803      	ldr	r0, [sp, #12]
1004aa18:	f000 fcb8 	bl	1004b38c <__pow5mult>
1004aa1c:	9005      	str	r0, [sp, #20]
1004aa1e:	2101      	movs	r1, #1
1004aa20:	9803      	ldr	r0, [sp, #12]
1004aa22:	f000 fbe9 	bl	1004b1f8 <__i2b>
1004aa26:	9b14      	ldr	r3, [sp, #80]	@ 0x50
1004aa28:	0006      	movs	r6, r0
1004aa2a:	2b00      	cmp	r3, #0
1004aa2c:	d100      	bne.n	1004aa30 <_dtoa_r+0x824>
1004aa2e:	e1bc      	b.n	1004adaa <_dtoa_r+0xb9e>
1004aa30:	001a      	movs	r2, r3
1004aa32:	0001      	movs	r1, r0
1004aa34:	9803      	ldr	r0, [sp, #12]
1004aa36:	f000 fca9 	bl	1004b38c <__pow5mult>
1004aa3a:	9b22      	ldr	r3, [sp, #136]	@ 0x88
1004aa3c:	0006      	movs	r6, r0
1004aa3e:	2500      	movs	r5, #0
1004aa40:	2b01      	cmp	r3, #1
1004aa42:	dc16      	bgt.n	1004aa72 <_dtoa_r+0x866>
1004aa44:	2500      	movs	r5, #0
1004aa46:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
1004aa48:	42ab      	cmp	r3, r5
1004aa4a:	d10e      	bne.n	1004aa6a <_dtoa_r+0x85e>
1004aa4c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
1004aa4e:	031b      	lsls	r3, r3, #12
1004aa50:	42ab      	cmp	r3, r5
1004aa52:	d10a      	bne.n	1004aa6a <_dtoa_r+0x85e>
1004aa54:	4b8d      	ldr	r3, [pc, #564]	@ (1004ac8c <_dtoa_r+0xa80>)
1004aa56:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
1004aa58:	4213      	tst	r3, r2
1004aa5a:	d006      	beq.n	1004aa6a <_dtoa_r+0x85e>
1004aa5c:	9b06      	ldr	r3, [sp, #24]
1004aa5e:	3501      	adds	r5, #1
1004aa60:	3301      	adds	r3, #1
1004aa62:	9306      	str	r3, [sp, #24]
1004aa64:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
1004aa66:	3301      	adds	r3, #1
1004aa68:	930d      	str	r3, [sp, #52]	@ 0x34
1004aa6a:	9b14      	ldr	r3, [sp, #80]	@ 0x50
1004aa6c:	2001      	movs	r0, #1
1004aa6e:	2b00      	cmp	r3, #0
1004aa70:	d008      	beq.n	1004aa84 <_dtoa_r+0x878>
1004aa72:	6933      	ldr	r3, [r6, #16]
1004aa74:	3303      	adds	r3, #3
1004aa76:	009b      	lsls	r3, r3, #2
1004aa78:	18f3      	adds	r3, r6, r3
1004aa7a:	6858      	ldr	r0, [r3, #4]
1004aa7c:	f000 fb6c 	bl	1004b158 <__hi0bits>
1004aa80:	2320      	movs	r3, #32
1004aa82:	1a18      	subs	r0, r3, r0
1004aa84:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
1004aa86:	1818      	adds	r0, r3, r0
1004aa88:	0002      	movs	r2, r0
1004aa8a:	231f      	movs	r3, #31
1004aa8c:	401a      	ands	r2, r3
1004aa8e:	4218      	tst	r0, r3
1004aa90:	d065      	beq.n	1004ab5e <_dtoa_r+0x952>
1004aa92:	3301      	adds	r3, #1
1004aa94:	1a9b      	subs	r3, r3, r2
1004aa96:	2b04      	cmp	r3, #4
1004aa98:	dd5d      	ble.n	1004ab56 <_dtoa_r+0x94a>
1004aa9a:	231c      	movs	r3, #28
1004aa9c:	1a9b      	subs	r3, r3, r2
1004aa9e:	9a06      	ldr	r2, [sp, #24]
1004aaa0:	18e4      	adds	r4, r4, r3
1004aaa2:	18d2      	adds	r2, r2, r3
1004aaa4:	9206      	str	r2, [sp, #24]
1004aaa6:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
1004aaa8:	18d3      	adds	r3, r2, r3
1004aaaa:	930d      	str	r3, [sp, #52]	@ 0x34
1004aaac:	9b06      	ldr	r3, [sp, #24]
1004aaae:	2b00      	cmp	r3, #0
1004aab0:	dd05      	ble.n	1004aabe <_dtoa_r+0x8b2>
1004aab2:	001a      	movs	r2, r3
1004aab4:	9905      	ldr	r1, [sp, #20]
1004aab6:	9803      	ldr	r0, [sp, #12]
1004aab8:	f000 fcc4 	bl	1004b444 <__lshift>
1004aabc:	9005      	str	r0, [sp, #20]
1004aabe:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
1004aac0:	2b00      	cmp	r3, #0
1004aac2:	dd05      	ble.n	1004aad0 <_dtoa_r+0x8c4>
1004aac4:	0031      	movs	r1, r6
1004aac6:	001a      	movs	r2, r3
1004aac8:	9803      	ldr	r0, [sp, #12]
1004aaca:	f000 fcbb 	bl	1004b444 <__lshift>
1004aace:	0006      	movs	r6, r0
1004aad0:	9b15      	ldr	r3, [sp, #84]	@ 0x54
1004aad2:	2b00      	cmp	r3, #0
1004aad4:	d045      	beq.n	1004ab62 <_dtoa_r+0x956>
1004aad6:	0031      	movs	r1, r6
1004aad8:	9805      	ldr	r0, [sp, #20]
1004aada:	f000 fd1f 	bl	1004b51c <__mcmp>
1004aade:	2800      	cmp	r0, #0
1004aae0:	da3f      	bge.n	1004ab62 <_dtoa_r+0x956>
1004aae2:	9b04      	ldr	r3, [sp, #16]
1004aae4:	220a      	movs	r2, #10
1004aae6:	3b01      	subs	r3, #1
1004aae8:	930c      	str	r3, [sp, #48]	@ 0x30
1004aaea:	9905      	ldr	r1, [sp, #20]
1004aaec:	2300      	movs	r3, #0
1004aaee:	9803      	ldr	r0, [sp, #12]
1004aaf0:	f000 faee 	bl	1004b0d0 <__multadd>
1004aaf4:	9b10      	ldr	r3, [sp, #64]	@ 0x40
1004aaf6:	9005      	str	r0, [sp, #20]
1004aaf8:	2b00      	cmp	r3, #0
1004aafa:	d100      	bne.n	1004aafe <_dtoa_r+0x8f2>
1004aafc:	e15c      	b.n	1004adb8 <_dtoa_r+0xbac>
1004aafe:	2300      	movs	r3, #0
1004ab00:	0039      	movs	r1, r7
1004ab02:	220a      	movs	r2, #10
1004ab04:	9803      	ldr	r0, [sp, #12]
1004ab06:	f000 fae3 	bl	1004b0d0 <__multadd>
1004ab0a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
1004ab0c:	0007      	movs	r7, r0
1004ab0e:	2b00      	cmp	r3, #0
1004ab10:	dc55      	bgt.n	1004abbe <_dtoa_r+0x9b2>
1004ab12:	9b22      	ldr	r3, [sp, #136]	@ 0x88
1004ab14:	2b02      	cmp	r3, #2
1004ab16:	dc2d      	bgt.n	1004ab74 <_dtoa_r+0x968>
1004ab18:	e051      	b.n	1004abbe <_dtoa_r+0x9b2>
1004ab1a:	2336      	movs	r3, #54	@ 0x36
1004ab1c:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
1004ab1e:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
1004ab20:	9c06      	ldr	r4, [sp, #24]
1004ab22:	1a9b      	subs	r3, r3, r2
1004ab24:	e73c      	b.n	1004a9a0 <_dtoa_r+0x794>
1004ab26:	9b09      	ldr	r3, [sp, #36]	@ 0x24
1004ab28:	1e5d      	subs	r5, r3, #1
1004ab2a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
1004ab2c:	42ab      	cmp	r3, r5
1004ab2e:	db08      	blt.n	1004ab42 <_dtoa_r+0x936>
1004ab30:	1b5d      	subs	r5, r3, r5
1004ab32:	9b09      	ldr	r3, [sp, #36]	@ 0x24
1004ab34:	9c06      	ldr	r4, [sp, #24]
1004ab36:	2b00      	cmp	r3, #0
1004ab38:	db00      	blt.n	1004ab3c <_dtoa_r+0x930>
1004ab3a:	e731      	b.n	1004a9a0 <_dtoa_r+0x794>
1004ab3c:	1ae4      	subs	r4, r4, r3
1004ab3e:	2300      	movs	r3, #0
1004ab40:	e72e      	b.n	1004a9a0 <_dtoa_r+0x794>
1004ab42:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
1004ab44:	9a14      	ldr	r2, [sp, #80]	@ 0x50
1004ab46:	1aeb      	subs	r3, r5, r3
1004ab48:	18d3      	adds	r3, r2, r3
1004ab4a:	950f      	str	r5, [sp, #60]	@ 0x3c
1004ab4c:	9314      	str	r3, [sp, #80]	@ 0x50
1004ab4e:	2500      	movs	r5, #0
1004ab50:	e7ef      	b.n	1004ab32 <_dtoa_r+0x926>
1004ab52:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
1004ab54:	e75e      	b.n	1004aa14 <_dtoa_r+0x808>
1004ab56:	2b04      	cmp	r3, #4
1004ab58:	d0a8      	beq.n	1004aaac <_dtoa_r+0x8a0>
1004ab5a:	331c      	adds	r3, #28
1004ab5c:	e79f      	b.n	1004aa9e <_dtoa_r+0x892>
1004ab5e:	0013      	movs	r3, r2
1004ab60:	e7fb      	b.n	1004ab5a <_dtoa_r+0x94e>
1004ab62:	9b04      	ldr	r3, [sp, #16]
1004ab64:	930c      	str	r3, [sp, #48]	@ 0x30
1004ab66:	9b09      	ldr	r3, [sp, #36]	@ 0x24
1004ab68:	930e      	str	r3, [sp, #56]	@ 0x38
1004ab6a:	2b00      	cmp	r3, #0
1004ab6c:	dc23      	bgt.n	1004abb6 <_dtoa_r+0x9aa>
1004ab6e:	9b22      	ldr	r3, [sp, #136]	@ 0x88
1004ab70:	2b02      	cmp	r3, #2
1004ab72:	dd20      	ble.n	1004abb6 <_dtoa_r+0x9aa>
1004ab74:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
1004ab76:	2b00      	cmp	r3, #0
1004ab78:	d000      	beq.n	1004ab7c <_dtoa_r+0x970>
1004ab7a:	e6b5      	b.n	1004a8e8 <_dtoa_r+0x6dc>
1004ab7c:	0031      	movs	r1, r6
1004ab7e:	2205      	movs	r2, #5
1004ab80:	9803      	ldr	r0, [sp, #12]
1004ab82:	f000 faa5 	bl	1004b0d0 <__multadd>
1004ab86:	0006      	movs	r6, r0
1004ab88:	0001      	movs	r1, r0
1004ab8a:	9805      	ldr	r0, [sp, #20]
1004ab8c:	f000 fcc6 	bl	1004b51c <__mcmp>
1004ab90:	2800      	cmp	r0, #0
1004ab92:	dc00      	bgt.n	1004ab96 <_dtoa_r+0x98a>
1004ab94:	e6a8      	b.n	1004a8e8 <_dtoa_r+0x6dc>
1004ab96:	9b08      	ldr	r3, [sp, #32]
1004ab98:	9a08      	ldr	r2, [sp, #32]
1004ab9a:	1c5c      	adds	r4, r3, #1
1004ab9c:	2331      	movs	r3, #49	@ 0x31
1004ab9e:	7013      	strb	r3, [r2, #0]
1004aba0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
1004aba2:	3301      	adds	r3, #1
1004aba4:	930c      	str	r3, [sp, #48]	@ 0x30
1004aba6:	e6a3      	b.n	1004a8f0 <_dtoa_r+0x6e4>
1004aba8:	9e11      	ldr	r6, [sp, #68]	@ 0x44
1004abaa:	0037      	movs	r7, r6
1004abac:	e7f3      	b.n	1004ab96 <_dtoa_r+0x98a>
1004abae:	9b04      	ldr	r3, [sp, #16]
1004abb0:	9e09      	ldr	r6, [sp, #36]	@ 0x24
1004abb2:	930c      	str	r3, [sp, #48]	@ 0x30
1004abb4:	e7f9      	b.n	1004abaa <_dtoa_r+0x99e>
1004abb6:	9b10      	ldr	r3, [sp, #64]	@ 0x40
1004abb8:	2b00      	cmp	r3, #0
1004abba:	d100      	bne.n	1004abbe <_dtoa_r+0x9b2>
1004abbc:	e100      	b.n	1004adc0 <_dtoa_r+0xbb4>
1004abbe:	2c00      	cmp	r4, #0
1004abc0:	dd05      	ble.n	1004abce <_dtoa_r+0x9c2>
1004abc2:	0039      	movs	r1, r7
1004abc4:	0022      	movs	r2, r4
1004abc6:	9803      	ldr	r0, [sp, #12]
1004abc8:	f000 fc3c 	bl	1004b444 <__lshift>
1004abcc:	0007      	movs	r7, r0
1004abce:	0038      	movs	r0, r7
1004abd0:	2d00      	cmp	r5, #0
1004abd2:	d018      	beq.n	1004ac06 <_dtoa_r+0x9fa>
1004abd4:	6879      	ldr	r1, [r7, #4]
1004abd6:	9803      	ldr	r0, [sp, #12]
1004abd8:	f000 fa12 	bl	1004b000 <_Balloc>
1004abdc:	1e04      	subs	r4, r0, #0
1004abde:	d105      	bne.n	1004abec <_dtoa_r+0x9e0>
1004abe0:	0022      	movs	r2, r4
1004abe2:	4b2b      	ldr	r3, [pc, #172]	@ (1004ac90 <_dtoa_r+0xa84>)
1004abe4:	482b      	ldr	r0, [pc, #172]	@ (1004ac94 <_dtoa_r+0xa88>)
1004abe6:	492c      	ldr	r1, [pc, #176]	@ (1004ac98 <_dtoa_r+0xa8c>)
1004abe8:	f7ff fb25 	bl	1004a236 <_dtoa_r+0x2a>
1004abec:	0039      	movs	r1, r7
1004abee:	693a      	ldr	r2, [r7, #16]
1004abf0:	310c      	adds	r1, #12
1004abf2:	3202      	adds	r2, #2
1004abf4:	0092      	lsls	r2, r2, #2
1004abf6:	300c      	adds	r0, #12
1004abf8:	f000 fe6a 	bl	1004b8d0 <memcpy>
1004abfc:	2201      	movs	r2, #1
1004abfe:	0021      	movs	r1, r4
1004ac00:	9803      	ldr	r0, [sp, #12]
1004ac02:	f000 fc1f 	bl	1004b444 <__lshift>
1004ac06:	9b08      	ldr	r3, [sp, #32]
1004ac08:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
1004ac0a:	9306      	str	r3, [sp, #24]
1004ac0c:	3b01      	subs	r3, #1
1004ac0e:	189b      	adds	r3, r3, r2
1004ac10:	2201      	movs	r2, #1
1004ac12:	9704      	str	r7, [sp, #16]
1004ac14:	0007      	movs	r7, r0
1004ac16:	930f      	str	r3, [sp, #60]	@ 0x3c
1004ac18:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
1004ac1a:	4013      	ands	r3, r2
1004ac1c:	930e      	str	r3, [sp, #56]	@ 0x38
1004ac1e:	0031      	movs	r1, r6
1004ac20:	9805      	ldr	r0, [sp, #20]
1004ac22:	f7ff fa65 	bl	1004a0f0 <quorem>
1004ac26:	9904      	ldr	r1, [sp, #16]
1004ac28:	0005      	movs	r5, r0
1004ac2a:	900a      	str	r0, [sp, #40]	@ 0x28
1004ac2c:	9805      	ldr	r0, [sp, #20]
1004ac2e:	f000 fc75 	bl	1004b51c <__mcmp>
1004ac32:	003a      	movs	r2, r7
1004ac34:	900d      	str	r0, [sp, #52]	@ 0x34
1004ac36:	0031      	movs	r1, r6
1004ac38:	9803      	ldr	r0, [sp, #12]
1004ac3a:	f000 fc8b 	bl	1004b554 <__mdiff>
1004ac3e:	2201      	movs	r2, #1
1004ac40:	68c3      	ldr	r3, [r0, #12]
1004ac42:	0004      	movs	r4, r0
1004ac44:	3530      	adds	r5, #48	@ 0x30
1004ac46:	9209      	str	r2, [sp, #36]	@ 0x24
1004ac48:	2b00      	cmp	r3, #0
1004ac4a:	d104      	bne.n	1004ac56 <_dtoa_r+0xa4a>
1004ac4c:	0001      	movs	r1, r0
1004ac4e:	9805      	ldr	r0, [sp, #20]
1004ac50:	f000 fc64 	bl	1004b51c <__mcmp>
1004ac54:	9009      	str	r0, [sp, #36]	@ 0x24
1004ac56:	0021      	movs	r1, r4
1004ac58:	9803      	ldr	r0, [sp, #12]
1004ac5a:	f000 fa15 	bl	1004b088 <_Bfree>
1004ac5e:	9b06      	ldr	r3, [sp, #24]
1004ac60:	9a09      	ldr	r2, [sp, #36]	@ 0x24
1004ac62:	1c5c      	adds	r4, r3, #1
1004ac64:	9b22      	ldr	r3, [sp, #136]	@ 0x88
1004ac66:	4313      	orrs	r3, r2
1004ac68:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
1004ac6a:	4313      	orrs	r3, r2
1004ac6c:	d116      	bne.n	1004ac9c <_dtoa_r+0xa90>
1004ac6e:	2d39      	cmp	r5, #57	@ 0x39
1004ac70:	d02f      	beq.n	1004acd2 <_dtoa_r+0xac6>
1004ac72:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
1004ac74:	2b00      	cmp	r3, #0
1004ac76:	dd01      	ble.n	1004ac7c <_dtoa_r+0xa70>
1004ac78:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
1004ac7a:	3531      	adds	r5, #49	@ 0x31
1004ac7c:	9b06      	ldr	r3, [sp, #24]
1004ac7e:	701d      	strb	r5, [r3, #0]
1004ac80:	e638      	b.n	1004a8f4 <_dtoa_r+0x6e8>
1004ac82:	46c0      	nop			@ (mov r8, r8)
1004ac84:	40240000 	.word	0x40240000
1004ac88:	00000433 	.word	0x00000433
1004ac8c:	7ff00000 	.word	0x7ff00000
1004ac90:	1004c088 	.word	0x1004c088
1004ac94:	1004c030 	.word	0x1004c030
1004ac98:	000002ef 	.word	0x000002ef
1004ac9c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
1004ac9e:	2b00      	cmp	r3, #0
1004aca0:	db04      	blt.n	1004acac <_dtoa_r+0xaa0>
1004aca2:	9a22      	ldr	r2, [sp, #136]	@ 0x88
1004aca4:	4313      	orrs	r3, r2
1004aca6:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
1004aca8:	4313      	orrs	r3, r2
1004acaa:	d11e      	bne.n	1004acea <_dtoa_r+0xade>
1004acac:	9b09      	ldr	r3, [sp, #36]	@ 0x24
1004acae:	2b00      	cmp	r3, #0
1004acb0:	dde4      	ble.n	1004ac7c <_dtoa_r+0xa70>
1004acb2:	9905      	ldr	r1, [sp, #20]
1004acb4:	2201      	movs	r2, #1
1004acb6:	9803      	ldr	r0, [sp, #12]
1004acb8:	f000 fbc4 	bl	1004b444 <__lshift>
1004acbc:	0031      	movs	r1, r6
1004acbe:	9005      	str	r0, [sp, #20]
1004acc0:	f000 fc2c 	bl	1004b51c <__mcmp>
1004acc4:	2800      	cmp	r0, #0
1004acc6:	dc02      	bgt.n	1004acce <_dtoa_r+0xac2>
1004acc8:	d1d8      	bne.n	1004ac7c <_dtoa_r+0xa70>
1004acca:	07eb      	lsls	r3, r5, #31
1004accc:	d5d6      	bpl.n	1004ac7c <_dtoa_r+0xa70>
1004acce:	2d39      	cmp	r5, #57	@ 0x39
1004acd0:	d1d2      	bne.n	1004ac78 <_dtoa_r+0xa6c>
1004acd2:	2339      	movs	r3, #57	@ 0x39
1004acd4:	9a06      	ldr	r2, [sp, #24]
1004acd6:	7013      	strb	r3, [r2, #0]
1004acd8:	0023      	movs	r3, r4
1004acda:	001c      	movs	r4, r3
1004acdc:	3b01      	subs	r3, #1
1004acde:	781a      	ldrb	r2, [r3, #0]
1004ace0:	2a39      	cmp	r2, #57	@ 0x39
1004ace2:	d04f      	beq.n	1004ad84 <_dtoa_r+0xb78>
1004ace4:	3201      	adds	r2, #1
1004ace6:	701a      	strb	r2, [r3, #0]
1004ace8:	e604      	b.n	1004a8f4 <_dtoa_r+0x6e8>
1004acea:	9b09      	ldr	r3, [sp, #36]	@ 0x24
1004acec:	2b00      	cmp	r3, #0
1004acee:	dd03      	ble.n	1004acf8 <_dtoa_r+0xaec>
1004acf0:	2d39      	cmp	r5, #57	@ 0x39
1004acf2:	d0ee      	beq.n	1004acd2 <_dtoa_r+0xac6>
1004acf4:	3501      	adds	r5, #1
1004acf6:	e7c1      	b.n	1004ac7c <_dtoa_r+0xa70>
1004acf8:	9b06      	ldr	r3, [sp, #24]
1004acfa:	9a06      	ldr	r2, [sp, #24]
1004acfc:	701d      	strb	r5, [r3, #0]
1004acfe:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
1004ad00:	4293      	cmp	r3, r2
1004ad02:	d02a      	beq.n	1004ad5a <_dtoa_r+0xb4e>
1004ad04:	2300      	movs	r3, #0
1004ad06:	220a      	movs	r2, #10
1004ad08:	9905      	ldr	r1, [sp, #20]
1004ad0a:	9803      	ldr	r0, [sp, #12]
1004ad0c:	f000 f9e0 	bl	1004b0d0 <__multadd>
1004ad10:	9b04      	ldr	r3, [sp, #16]
1004ad12:	9005      	str	r0, [sp, #20]
1004ad14:	42bb      	cmp	r3, r7
1004ad16:	d109      	bne.n	1004ad2c <_dtoa_r+0xb20>
1004ad18:	2300      	movs	r3, #0
1004ad1a:	220a      	movs	r2, #10
1004ad1c:	9904      	ldr	r1, [sp, #16]
1004ad1e:	9803      	ldr	r0, [sp, #12]
1004ad20:	f000 f9d6 	bl	1004b0d0 <__multadd>
1004ad24:	9004      	str	r0, [sp, #16]
1004ad26:	0007      	movs	r7, r0
1004ad28:	9406      	str	r4, [sp, #24]
1004ad2a:	e778      	b.n	1004ac1e <_dtoa_r+0xa12>
1004ad2c:	9904      	ldr	r1, [sp, #16]
1004ad2e:	2300      	movs	r3, #0
1004ad30:	220a      	movs	r2, #10
1004ad32:	9803      	ldr	r0, [sp, #12]
1004ad34:	f000 f9cc 	bl	1004b0d0 <__multadd>
1004ad38:	2300      	movs	r3, #0
1004ad3a:	9004      	str	r0, [sp, #16]
1004ad3c:	220a      	movs	r2, #10
1004ad3e:	0039      	movs	r1, r7
1004ad40:	9803      	ldr	r0, [sp, #12]
1004ad42:	f000 f9c5 	bl	1004b0d0 <__multadd>
1004ad46:	e7ee      	b.n	1004ad26 <_dtoa_r+0xb1a>
1004ad48:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
1004ad4a:	2401      	movs	r4, #1
1004ad4c:	2b00      	cmp	r3, #0
1004ad4e:	dd00      	ble.n	1004ad52 <_dtoa_r+0xb46>
1004ad50:	001c      	movs	r4, r3
1004ad52:	9b08      	ldr	r3, [sp, #32]
1004ad54:	191c      	adds	r4, r3, r4
1004ad56:	2300      	movs	r3, #0
1004ad58:	9304      	str	r3, [sp, #16]
1004ad5a:	9905      	ldr	r1, [sp, #20]
1004ad5c:	2201      	movs	r2, #1
1004ad5e:	9803      	ldr	r0, [sp, #12]
1004ad60:	f000 fb70 	bl	1004b444 <__lshift>
1004ad64:	0031      	movs	r1, r6
1004ad66:	9005      	str	r0, [sp, #20]
1004ad68:	f000 fbd8 	bl	1004b51c <__mcmp>
1004ad6c:	2800      	cmp	r0, #0
1004ad6e:	dcb3      	bgt.n	1004acd8 <_dtoa_r+0xacc>
1004ad70:	d101      	bne.n	1004ad76 <_dtoa_r+0xb6a>
1004ad72:	07ed      	lsls	r5, r5, #31
1004ad74:	d4b0      	bmi.n	1004acd8 <_dtoa_r+0xacc>
1004ad76:	0023      	movs	r3, r4
1004ad78:	001c      	movs	r4, r3
1004ad7a:	3b01      	subs	r3, #1
1004ad7c:	781a      	ldrb	r2, [r3, #0]
1004ad7e:	2a30      	cmp	r2, #48	@ 0x30
1004ad80:	d0fa      	beq.n	1004ad78 <_dtoa_r+0xb6c>
1004ad82:	e5b7      	b.n	1004a8f4 <_dtoa_r+0x6e8>
1004ad84:	9a08      	ldr	r2, [sp, #32]
1004ad86:	429a      	cmp	r2, r3
1004ad88:	d1a7      	bne.n	1004acda <_dtoa_r+0xace>
1004ad8a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
1004ad8c:	3301      	adds	r3, #1
1004ad8e:	930c      	str	r3, [sp, #48]	@ 0x30
1004ad90:	2331      	movs	r3, #49	@ 0x31
1004ad92:	7013      	strb	r3, [r2, #0]
1004ad94:	e5ae      	b.n	1004a8f4 <_dtoa_r+0x6e8>
1004ad96:	4b15      	ldr	r3, [pc, #84]	@ (1004adec <_dtoa_r+0xbe0>)
1004ad98:	9a26      	ldr	r2, [sp, #152]	@ 0x98
1004ad9a:	9308      	str	r3, [sp, #32]
1004ad9c:	4b14      	ldr	r3, [pc, #80]	@ (1004adf0 <_dtoa_r+0xbe4>)
1004ad9e:	2a00      	cmp	r2, #0
1004ada0:	d001      	beq.n	1004ada6 <_dtoa_r+0xb9a>
1004ada2:	f7ff fa7b 	bl	1004a29c <_dtoa_r+0x90>
1004ada6:	f7ff fa7b 	bl	1004a2a0 <_dtoa_r+0x94>
1004adaa:	9b22      	ldr	r3, [sp, #136]	@ 0x88
1004adac:	2b01      	cmp	r3, #1
1004adae:	dc00      	bgt.n	1004adb2 <_dtoa_r+0xba6>
1004adb0:	e648      	b.n	1004aa44 <_dtoa_r+0x838>
1004adb2:	2001      	movs	r0, #1
1004adb4:	9d14      	ldr	r5, [sp, #80]	@ 0x50
1004adb6:	e665      	b.n	1004aa84 <_dtoa_r+0x878>
1004adb8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
1004adba:	2b00      	cmp	r3, #0
1004adbc:	dc00      	bgt.n	1004adc0 <_dtoa_r+0xbb4>
1004adbe:	e6d6      	b.n	1004ab6e <_dtoa_r+0x962>
1004adc0:	2400      	movs	r4, #0
1004adc2:	0031      	movs	r1, r6
1004adc4:	9805      	ldr	r0, [sp, #20]
1004adc6:	f7ff f993 	bl	1004a0f0 <quorem>
1004adca:	9b08      	ldr	r3, [sp, #32]
1004adcc:	3030      	adds	r0, #48	@ 0x30
1004adce:	5518      	strb	r0, [r3, r4]
1004add0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
1004add2:	3401      	adds	r4, #1
1004add4:	0005      	movs	r5, r0
1004add6:	429c      	cmp	r4, r3
1004add8:	dab6      	bge.n	1004ad48 <_dtoa_r+0xb3c>
1004adda:	2300      	movs	r3, #0
1004addc:	220a      	movs	r2, #10
1004adde:	9905      	ldr	r1, [sp, #20]
1004ade0:	9803      	ldr	r0, [sp, #12]
1004ade2:	f000 f975 	bl	1004b0d0 <__multadd>
1004ade6:	9005      	str	r0, [sp, #20]
1004ade8:	e7eb      	b.n	1004adc2 <_dtoa_r+0xbb6>
1004adea:	46c0      	nop			@ (mov r8, r8)
1004adec:	1004c00c 	.word	0x1004c00c
1004adf0:	1004c014 	.word	0x1004c014

1004adf4 <_free_r>:
1004adf4:	b570      	push	{r4, r5, r6, lr}
1004adf6:	0005      	movs	r5, r0
1004adf8:	1e0c      	subs	r4, r1, #0
1004adfa:	d010      	beq.n	1004ae1e <_free_r+0x2a>
1004adfc:	3c04      	subs	r4, #4
1004adfe:	6823      	ldr	r3, [r4, #0]
1004ae00:	2b00      	cmp	r3, #0
1004ae02:	da00      	bge.n	1004ae06 <_free_r+0x12>
1004ae04:	18e4      	adds	r4, r4, r3
1004ae06:	0028      	movs	r0, r5
1004ae08:	f000 f8ea 	bl	1004afe0 <__malloc_lock>
1004ae0c:	4a1d      	ldr	r2, [pc, #116]	@ (1004ae84 <_free_r+0x90>)
1004ae0e:	6813      	ldr	r3, [r2, #0]
1004ae10:	2b00      	cmp	r3, #0
1004ae12:	d105      	bne.n	1004ae20 <_free_r+0x2c>
1004ae14:	6063      	str	r3, [r4, #4]
1004ae16:	6014      	str	r4, [r2, #0]
1004ae18:	0028      	movs	r0, r5
1004ae1a:	f000 f8e9 	bl	1004aff0 <__malloc_unlock>
1004ae1e:	bd70      	pop	{r4, r5, r6, pc}
1004ae20:	42a3      	cmp	r3, r4
1004ae22:	d908      	bls.n	1004ae36 <_free_r+0x42>
1004ae24:	6820      	ldr	r0, [r4, #0]
1004ae26:	1821      	adds	r1, r4, r0
1004ae28:	428b      	cmp	r3, r1
1004ae2a:	d1f3      	bne.n	1004ae14 <_free_r+0x20>
1004ae2c:	6819      	ldr	r1, [r3, #0]
1004ae2e:	685b      	ldr	r3, [r3, #4]
1004ae30:	1809      	adds	r1, r1, r0
1004ae32:	6021      	str	r1, [r4, #0]
1004ae34:	e7ee      	b.n	1004ae14 <_free_r+0x20>
1004ae36:	001a      	movs	r2, r3
1004ae38:	685b      	ldr	r3, [r3, #4]
1004ae3a:	2b00      	cmp	r3, #0
1004ae3c:	d001      	beq.n	1004ae42 <_free_r+0x4e>
1004ae3e:	42a3      	cmp	r3, r4
1004ae40:	d9f9      	bls.n	1004ae36 <_free_r+0x42>
1004ae42:	6811      	ldr	r1, [r2, #0]
1004ae44:	1850      	adds	r0, r2, r1
1004ae46:	42a0      	cmp	r0, r4
1004ae48:	d10b      	bne.n	1004ae62 <_free_r+0x6e>
1004ae4a:	6820      	ldr	r0, [r4, #0]
1004ae4c:	1809      	adds	r1, r1, r0
1004ae4e:	1850      	adds	r0, r2, r1
1004ae50:	6011      	str	r1, [r2, #0]
1004ae52:	4283      	cmp	r3, r0
1004ae54:	d1e0      	bne.n	1004ae18 <_free_r+0x24>
1004ae56:	6818      	ldr	r0, [r3, #0]
1004ae58:	685b      	ldr	r3, [r3, #4]
1004ae5a:	1841      	adds	r1, r0, r1
1004ae5c:	6011      	str	r1, [r2, #0]
1004ae5e:	6053      	str	r3, [r2, #4]
1004ae60:	e7da      	b.n	1004ae18 <_free_r+0x24>
1004ae62:	42a0      	cmp	r0, r4
1004ae64:	d902      	bls.n	1004ae6c <_free_r+0x78>
1004ae66:	230c      	movs	r3, #12
1004ae68:	602b      	str	r3, [r5, #0]
1004ae6a:	e7d5      	b.n	1004ae18 <_free_r+0x24>
1004ae6c:	6820      	ldr	r0, [r4, #0]
1004ae6e:	1821      	adds	r1, r4, r0
1004ae70:	428b      	cmp	r3, r1
1004ae72:	d103      	bne.n	1004ae7c <_free_r+0x88>
1004ae74:	6819      	ldr	r1, [r3, #0]
1004ae76:	685b      	ldr	r3, [r3, #4]
1004ae78:	1809      	adds	r1, r1, r0
1004ae7a:	6021      	str	r1, [r4, #0]
1004ae7c:	6063      	str	r3, [r4, #4]
1004ae7e:	6054      	str	r4, [r2, #4]
1004ae80:	e7ca      	b.n	1004ae18 <_free_r+0x24>
1004ae82:	46c0      	nop			@ (mov r8, r8)
1004ae84:	20000af0 	.word	0x20000af0

1004ae88 <malloc>:
1004ae88:	b510      	push	{r4, lr}
1004ae8a:	4b03      	ldr	r3, [pc, #12]	@ (1004ae98 <malloc+0x10>)
1004ae8c:	0001      	movs	r1, r0
1004ae8e:	6818      	ldr	r0, [r3, #0]
1004ae90:	f000 f826 	bl	1004aee0 <_malloc_r>
1004ae94:	bd10      	pop	{r4, pc}
1004ae96:	46c0      	nop			@ (mov r8, r8)
1004ae98:	20000b6c 	.word	0x20000b6c

1004ae9c <sbrk_aligned>:
1004ae9c:	b570      	push	{r4, r5, r6, lr}
1004ae9e:	4e0f      	ldr	r6, [pc, #60]	@ (1004aedc <sbrk_aligned+0x40>)
1004aea0:	000d      	movs	r5, r1
1004aea2:	6831      	ldr	r1, [r6, #0]
1004aea4:	0004      	movs	r4, r0
1004aea6:	2900      	cmp	r1, #0
1004aea8:	d102      	bne.n	1004aeb0 <sbrk_aligned+0x14>
1004aeaa:	f000 fcff 	bl	1004b8ac <_sbrk_r>
1004aeae:	6030      	str	r0, [r6, #0]
1004aeb0:	0029      	movs	r1, r5
1004aeb2:	0020      	movs	r0, r4
1004aeb4:	f000 fcfa 	bl	1004b8ac <_sbrk_r>
1004aeb8:	1c43      	adds	r3, r0, #1
1004aeba:	d103      	bne.n	1004aec4 <sbrk_aligned+0x28>
1004aebc:	2501      	movs	r5, #1
1004aebe:	426d      	negs	r5, r5
1004aec0:	0028      	movs	r0, r5
1004aec2:	bd70      	pop	{r4, r5, r6, pc}
1004aec4:	2303      	movs	r3, #3
1004aec6:	1cc5      	adds	r5, r0, #3
1004aec8:	439d      	bics	r5, r3
1004aeca:	42a8      	cmp	r0, r5
1004aecc:	d0f8      	beq.n	1004aec0 <sbrk_aligned+0x24>
1004aece:	1a29      	subs	r1, r5, r0
1004aed0:	0020      	movs	r0, r4
1004aed2:	f000 fceb 	bl	1004b8ac <_sbrk_r>
1004aed6:	3001      	adds	r0, #1
1004aed8:	d1f2      	bne.n	1004aec0 <sbrk_aligned+0x24>
1004aeda:	e7ef      	b.n	1004aebc <sbrk_aligned+0x20>
1004aedc:	20000aec 	.word	0x20000aec

1004aee0 <_malloc_r>:
1004aee0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
1004aee2:	2203      	movs	r2, #3
1004aee4:	1ccb      	adds	r3, r1, #3
1004aee6:	4393      	bics	r3, r2
1004aee8:	3308      	adds	r3, #8
1004aeea:	0005      	movs	r5, r0
1004aeec:	001f      	movs	r7, r3
1004aeee:	2b0c      	cmp	r3, #12
1004aef0:	d234      	bcs.n	1004af5c <_malloc_r+0x7c>
1004aef2:	270c      	movs	r7, #12
1004aef4:	42b9      	cmp	r1, r7
1004aef6:	d833      	bhi.n	1004af60 <_malloc_r+0x80>
1004aef8:	0028      	movs	r0, r5
1004aefa:	f000 f871 	bl	1004afe0 <__malloc_lock>
1004aefe:	4e37      	ldr	r6, [pc, #220]	@ (1004afdc <_malloc_r+0xfc>)
1004af00:	6833      	ldr	r3, [r6, #0]
1004af02:	001c      	movs	r4, r3
1004af04:	2c00      	cmp	r4, #0
1004af06:	d12f      	bne.n	1004af68 <_malloc_r+0x88>
1004af08:	0039      	movs	r1, r7
1004af0a:	0028      	movs	r0, r5
1004af0c:	f7ff ffc6 	bl	1004ae9c <sbrk_aligned>
1004af10:	0004      	movs	r4, r0
1004af12:	1c43      	adds	r3, r0, #1
1004af14:	d15f      	bne.n	1004afd6 <_malloc_r+0xf6>
1004af16:	6834      	ldr	r4, [r6, #0]
1004af18:	9400      	str	r4, [sp, #0]
1004af1a:	9b00      	ldr	r3, [sp, #0]
1004af1c:	2b00      	cmp	r3, #0
1004af1e:	d14a      	bne.n	1004afb6 <_malloc_r+0xd6>
1004af20:	2c00      	cmp	r4, #0
1004af22:	d052      	beq.n	1004afca <_malloc_r+0xea>
1004af24:	6823      	ldr	r3, [r4, #0]
1004af26:	0028      	movs	r0, r5
1004af28:	18e3      	adds	r3, r4, r3
1004af2a:	9900      	ldr	r1, [sp, #0]
1004af2c:	9301      	str	r3, [sp, #4]
1004af2e:	f000 fcbd 	bl	1004b8ac <_sbrk_r>
1004af32:	9b01      	ldr	r3, [sp, #4]
1004af34:	4283      	cmp	r3, r0
1004af36:	d148      	bne.n	1004afca <_malloc_r+0xea>
1004af38:	6823      	ldr	r3, [r4, #0]
1004af3a:	0028      	movs	r0, r5
1004af3c:	1aff      	subs	r7, r7, r3
1004af3e:	0039      	movs	r1, r7
1004af40:	f7ff ffac 	bl	1004ae9c <sbrk_aligned>
1004af44:	3001      	adds	r0, #1
1004af46:	d040      	beq.n	1004afca <_malloc_r+0xea>
1004af48:	6823      	ldr	r3, [r4, #0]
1004af4a:	19db      	adds	r3, r3, r7
1004af4c:	6023      	str	r3, [r4, #0]
1004af4e:	6833      	ldr	r3, [r6, #0]
1004af50:	685a      	ldr	r2, [r3, #4]
1004af52:	2a00      	cmp	r2, #0
1004af54:	d133      	bne.n	1004afbe <_malloc_r+0xde>
1004af56:	9b00      	ldr	r3, [sp, #0]
1004af58:	6033      	str	r3, [r6, #0]
1004af5a:	e019      	b.n	1004af90 <_malloc_r+0xb0>
1004af5c:	2b00      	cmp	r3, #0
1004af5e:	dac9      	bge.n	1004aef4 <_malloc_r+0x14>
1004af60:	230c      	movs	r3, #12
1004af62:	602b      	str	r3, [r5, #0]
1004af64:	2000      	movs	r0, #0
1004af66:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
1004af68:	6821      	ldr	r1, [r4, #0]
1004af6a:	1bc9      	subs	r1, r1, r7
1004af6c:	d420      	bmi.n	1004afb0 <_malloc_r+0xd0>
1004af6e:	290b      	cmp	r1, #11
1004af70:	d90a      	bls.n	1004af88 <_malloc_r+0xa8>
1004af72:	19e2      	adds	r2, r4, r7
1004af74:	6027      	str	r7, [r4, #0]
1004af76:	42a3      	cmp	r3, r4
1004af78:	d104      	bne.n	1004af84 <_malloc_r+0xa4>
1004af7a:	6032      	str	r2, [r6, #0]
1004af7c:	6863      	ldr	r3, [r4, #4]
1004af7e:	6011      	str	r1, [r2, #0]
1004af80:	6053      	str	r3, [r2, #4]
1004af82:	e005      	b.n	1004af90 <_malloc_r+0xb0>
1004af84:	605a      	str	r2, [r3, #4]
1004af86:	e7f9      	b.n	1004af7c <_malloc_r+0x9c>
1004af88:	6862      	ldr	r2, [r4, #4]
1004af8a:	42a3      	cmp	r3, r4
1004af8c:	d10e      	bne.n	1004afac <_malloc_r+0xcc>
1004af8e:	6032      	str	r2, [r6, #0]
1004af90:	0028      	movs	r0, r5
1004af92:	f000 f82d 	bl	1004aff0 <__malloc_unlock>
1004af96:	0020      	movs	r0, r4
1004af98:	2207      	movs	r2, #7
1004af9a:	300b      	adds	r0, #11
1004af9c:	1d23      	adds	r3, r4, #4
1004af9e:	4390      	bics	r0, r2
1004afa0:	1ac2      	subs	r2, r0, r3
1004afa2:	4298      	cmp	r0, r3
1004afa4:	d0df      	beq.n	1004af66 <_malloc_r+0x86>
1004afa6:	1a1b      	subs	r3, r3, r0
1004afa8:	50a3      	str	r3, [r4, r2]
1004afaa:	e7dc      	b.n	1004af66 <_malloc_r+0x86>
1004afac:	605a      	str	r2, [r3, #4]
1004afae:	e7ef      	b.n	1004af90 <_malloc_r+0xb0>
1004afb0:	0023      	movs	r3, r4
1004afb2:	6864      	ldr	r4, [r4, #4]
1004afb4:	e7a6      	b.n	1004af04 <_malloc_r+0x24>
1004afb6:	9c00      	ldr	r4, [sp, #0]
1004afb8:	6863      	ldr	r3, [r4, #4]
1004afba:	9300      	str	r3, [sp, #0]
1004afbc:	e7ad      	b.n	1004af1a <_malloc_r+0x3a>
1004afbe:	001a      	movs	r2, r3
1004afc0:	685b      	ldr	r3, [r3, #4]
1004afc2:	42a3      	cmp	r3, r4
1004afc4:	d1fb      	bne.n	1004afbe <_malloc_r+0xde>
1004afc6:	2300      	movs	r3, #0
1004afc8:	e7da      	b.n	1004af80 <_malloc_r+0xa0>
1004afca:	230c      	movs	r3, #12
1004afcc:	0028      	movs	r0, r5
1004afce:	602b      	str	r3, [r5, #0]
1004afd0:	f000 f80e 	bl	1004aff0 <__malloc_unlock>
1004afd4:	e7c6      	b.n	1004af64 <_malloc_r+0x84>
1004afd6:	6007      	str	r7, [r0, #0]
1004afd8:	e7da      	b.n	1004af90 <_malloc_r+0xb0>
1004afda:	46c0      	nop			@ (mov r8, r8)
1004afdc:	20000af0 	.word	0x20000af0

1004afe0 <__malloc_lock>:
1004afe0:	b510      	push	{r4, lr}
1004afe2:	4802      	ldr	r0, [pc, #8]	@ (1004afec <__malloc_lock+0xc>)
1004afe4:	f7ff f877 	bl	1004a0d6 <__retarget_lock_acquire_recursive>
1004afe8:	bd10      	pop	{r4, pc}
1004afea:	46c0      	nop			@ (mov r8, r8)
1004afec:	20000ae8 	.word	0x20000ae8

1004aff0 <__malloc_unlock>:
1004aff0:	b510      	push	{r4, lr}
1004aff2:	4802      	ldr	r0, [pc, #8]	@ (1004affc <__malloc_unlock+0xc>)
1004aff4:	f7ff f870 	bl	1004a0d8 <__retarget_lock_release_recursive>
1004aff8:	bd10      	pop	{r4, pc}
1004affa:	46c0      	nop			@ (mov r8, r8)
1004affc:	20000ae8 	.word	0x20000ae8

1004b000 <_Balloc>:
1004b000:	b570      	push	{r4, r5, r6, lr}
1004b002:	69c5      	ldr	r5, [r0, #28]
1004b004:	0006      	movs	r6, r0
1004b006:	000c      	movs	r4, r1
1004b008:	2d00      	cmp	r5, #0
1004b00a:	d10e      	bne.n	1004b02a <_Balloc+0x2a>
1004b00c:	2010      	movs	r0, #16
1004b00e:	f7ff ff3b 	bl	1004ae88 <malloc>
1004b012:	1e02      	subs	r2, r0, #0
1004b014:	61f0      	str	r0, [r6, #28]
1004b016:	d104      	bne.n	1004b022 <_Balloc+0x22>
1004b018:	216b      	movs	r1, #107	@ 0x6b
1004b01a:	4b19      	ldr	r3, [pc, #100]	@ (1004b080 <_Balloc+0x80>)
1004b01c:	4819      	ldr	r0, [pc, #100]	@ (1004b084 <_Balloc+0x84>)
1004b01e:	f000 fc61 	bl	1004b8e4 <__assert_func>
1004b022:	6045      	str	r5, [r0, #4]
1004b024:	6085      	str	r5, [r0, #8]
1004b026:	6005      	str	r5, [r0, #0]
1004b028:	60c5      	str	r5, [r0, #12]
1004b02a:	69f5      	ldr	r5, [r6, #28]
1004b02c:	68eb      	ldr	r3, [r5, #12]
1004b02e:	2b00      	cmp	r3, #0
1004b030:	d013      	beq.n	1004b05a <_Balloc+0x5a>
1004b032:	69f3      	ldr	r3, [r6, #28]
1004b034:	00a2      	lsls	r2, r4, #2
1004b036:	68db      	ldr	r3, [r3, #12]
1004b038:	189b      	adds	r3, r3, r2
1004b03a:	6818      	ldr	r0, [r3, #0]
1004b03c:	2800      	cmp	r0, #0
1004b03e:	d118      	bne.n	1004b072 <_Balloc+0x72>
1004b040:	2101      	movs	r1, #1
1004b042:	000d      	movs	r5, r1
1004b044:	40a5      	lsls	r5, r4
1004b046:	1d6a      	adds	r2, r5, #5
1004b048:	0030      	movs	r0, r6
1004b04a:	0092      	lsls	r2, r2, #2
1004b04c:	f000 fc68 	bl	1004b920 <_calloc_r>
1004b050:	2800      	cmp	r0, #0
1004b052:	d00c      	beq.n	1004b06e <_Balloc+0x6e>
1004b054:	6044      	str	r4, [r0, #4]
1004b056:	6085      	str	r5, [r0, #8]
1004b058:	e00d      	b.n	1004b076 <_Balloc+0x76>
1004b05a:	2221      	movs	r2, #33	@ 0x21
1004b05c:	2104      	movs	r1, #4
1004b05e:	0030      	movs	r0, r6
1004b060:	f000 fc5e 	bl	1004b920 <_calloc_r>
1004b064:	69f3      	ldr	r3, [r6, #28]
1004b066:	60e8      	str	r0, [r5, #12]
1004b068:	68db      	ldr	r3, [r3, #12]
1004b06a:	2b00      	cmp	r3, #0
1004b06c:	d1e1      	bne.n	1004b032 <_Balloc+0x32>
1004b06e:	2000      	movs	r0, #0
1004b070:	bd70      	pop	{r4, r5, r6, pc}
1004b072:	6802      	ldr	r2, [r0, #0]
1004b074:	601a      	str	r2, [r3, #0]
1004b076:	2300      	movs	r3, #0
1004b078:	6103      	str	r3, [r0, #16]
1004b07a:	60c3      	str	r3, [r0, #12]
1004b07c:	e7f8      	b.n	1004b070 <_Balloc+0x70>
1004b07e:	46c0      	nop			@ (mov r8, r8)
1004b080:	1004c019 	.word	0x1004c019
1004b084:	1004c099 	.word	0x1004c099

1004b088 <_Bfree>:
1004b088:	b570      	push	{r4, r5, r6, lr}
1004b08a:	69c6      	ldr	r6, [r0, #28]
1004b08c:	0005      	movs	r5, r0
1004b08e:	000c      	movs	r4, r1
1004b090:	2e00      	cmp	r6, #0
1004b092:	d10e      	bne.n	1004b0b2 <_Bfree+0x2a>
1004b094:	2010      	movs	r0, #16
1004b096:	f7ff fef7 	bl	1004ae88 <malloc>
1004b09a:	1e02      	subs	r2, r0, #0
1004b09c:	61e8      	str	r0, [r5, #28]
1004b09e:	d104      	bne.n	1004b0aa <_Bfree+0x22>
1004b0a0:	218f      	movs	r1, #143	@ 0x8f
1004b0a2:	4b09      	ldr	r3, [pc, #36]	@ (1004b0c8 <_Bfree+0x40>)
1004b0a4:	4809      	ldr	r0, [pc, #36]	@ (1004b0cc <_Bfree+0x44>)
1004b0a6:	f000 fc1d 	bl	1004b8e4 <__assert_func>
1004b0aa:	6046      	str	r6, [r0, #4]
1004b0ac:	6086      	str	r6, [r0, #8]
1004b0ae:	6006      	str	r6, [r0, #0]
1004b0b0:	60c6      	str	r6, [r0, #12]
1004b0b2:	2c00      	cmp	r4, #0
1004b0b4:	d007      	beq.n	1004b0c6 <_Bfree+0x3e>
1004b0b6:	69eb      	ldr	r3, [r5, #28]
1004b0b8:	6862      	ldr	r2, [r4, #4]
1004b0ba:	68db      	ldr	r3, [r3, #12]
1004b0bc:	0092      	lsls	r2, r2, #2
1004b0be:	189b      	adds	r3, r3, r2
1004b0c0:	681a      	ldr	r2, [r3, #0]
1004b0c2:	6022      	str	r2, [r4, #0]
1004b0c4:	601c      	str	r4, [r3, #0]
1004b0c6:	bd70      	pop	{r4, r5, r6, pc}
1004b0c8:	1004c019 	.word	0x1004c019
1004b0cc:	1004c099 	.word	0x1004c099

1004b0d0 <__multadd>:
1004b0d0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
1004b0d2:	000f      	movs	r7, r1
1004b0d4:	9001      	str	r0, [sp, #4]
1004b0d6:	000c      	movs	r4, r1
1004b0d8:	001e      	movs	r6, r3
1004b0da:	2000      	movs	r0, #0
1004b0dc:	690d      	ldr	r5, [r1, #16]
1004b0de:	3714      	adds	r7, #20
1004b0e0:	683b      	ldr	r3, [r7, #0]
1004b0e2:	3001      	adds	r0, #1
1004b0e4:	b299      	uxth	r1, r3
1004b0e6:	4351      	muls	r1, r2
1004b0e8:	0c1b      	lsrs	r3, r3, #16
1004b0ea:	4353      	muls	r3, r2
1004b0ec:	1989      	adds	r1, r1, r6
1004b0ee:	0c0e      	lsrs	r6, r1, #16
1004b0f0:	199b      	adds	r3, r3, r6
1004b0f2:	0c1e      	lsrs	r6, r3, #16
1004b0f4:	b289      	uxth	r1, r1
1004b0f6:	041b      	lsls	r3, r3, #16
1004b0f8:	185b      	adds	r3, r3, r1
1004b0fa:	c708      	stmia	r7!, {r3}
1004b0fc:	4285      	cmp	r5, r0
1004b0fe:	dcef      	bgt.n	1004b0e0 <__multadd+0x10>
1004b100:	2e00      	cmp	r6, #0
1004b102:	d022      	beq.n	1004b14a <__multadd+0x7a>
1004b104:	68a3      	ldr	r3, [r4, #8]
1004b106:	42ab      	cmp	r3, r5
1004b108:	dc19      	bgt.n	1004b13e <__multadd+0x6e>
1004b10a:	6861      	ldr	r1, [r4, #4]
1004b10c:	9801      	ldr	r0, [sp, #4]
1004b10e:	3101      	adds	r1, #1
1004b110:	f7ff ff76 	bl	1004b000 <_Balloc>
1004b114:	1e07      	subs	r7, r0, #0
1004b116:	d105      	bne.n	1004b124 <__multadd+0x54>
1004b118:	003a      	movs	r2, r7
1004b11a:	21ba      	movs	r1, #186	@ 0xba
1004b11c:	4b0c      	ldr	r3, [pc, #48]	@ (1004b150 <__multadd+0x80>)
1004b11e:	480d      	ldr	r0, [pc, #52]	@ (1004b154 <__multadd+0x84>)
1004b120:	f000 fbe0 	bl	1004b8e4 <__assert_func>
1004b124:	0021      	movs	r1, r4
1004b126:	6922      	ldr	r2, [r4, #16]
1004b128:	310c      	adds	r1, #12
1004b12a:	3202      	adds	r2, #2
1004b12c:	0092      	lsls	r2, r2, #2
1004b12e:	300c      	adds	r0, #12
1004b130:	f000 fbce 	bl	1004b8d0 <memcpy>
1004b134:	0021      	movs	r1, r4
1004b136:	9801      	ldr	r0, [sp, #4]
1004b138:	f7ff ffa6 	bl	1004b088 <_Bfree>
1004b13c:	003c      	movs	r4, r7
1004b13e:	1d2b      	adds	r3, r5, #4
1004b140:	009b      	lsls	r3, r3, #2
1004b142:	18e3      	adds	r3, r4, r3
1004b144:	3501      	adds	r5, #1
1004b146:	605e      	str	r6, [r3, #4]
1004b148:	6125      	str	r5, [r4, #16]
1004b14a:	0020      	movs	r0, r4
1004b14c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
1004b14e:	46c0      	nop			@ (mov r8, r8)
1004b150:	1004c088 	.word	0x1004c088
1004b154:	1004c099 	.word	0x1004c099

1004b158 <__hi0bits>:
1004b158:	2280      	movs	r2, #128	@ 0x80
1004b15a:	0003      	movs	r3, r0
1004b15c:	0252      	lsls	r2, r2, #9
1004b15e:	2000      	movs	r0, #0
1004b160:	4293      	cmp	r3, r2
1004b162:	d201      	bcs.n	1004b168 <__hi0bits+0x10>
1004b164:	041b      	lsls	r3, r3, #16
1004b166:	3010      	adds	r0, #16
1004b168:	2280      	movs	r2, #128	@ 0x80
1004b16a:	0452      	lsls	r2, r2, #17
1004b16c:	4293      	cmp	r3, r2
1004b16e:	d201      	bcs.n	1004b174 <__hi0bits+0x1c>
1004b170:	3008      	adds	r0, #8
1004b172:	021b      	lsls	r3, r3, #8
1004b174:	2280      	movs	r2, #128	@ 0x80
1004b176:	0552      	lsls	r2, r2, #21
1004b178:	4293      	cmp	r3, r2
1004b17a:	d201      	bcs.n	1004b180 <__hi0bits+0x28>
1004b17c:	3004      	adds	r0, #4
1004b17e:	011b      	lsls	r3, r3, #4
1004b180:	2280      	movs	r2, #128	@ 0x80
1004b182:	05d2      	lsls	r2, r2, #23
1004b184:	4293      	cmp	r3, r2
1004b186:	d201      	bcs.n	1004b18c <__hi0bits+0x34>
1004b188:	3002      	adds	r0, #2
1004b18a:	009b      	lsls	r3, r3, #2
1004b18c:	2b00      	cmp	r3, #0
1004b18e:	db03      	blt.n	1004b198 <__hi0bits+0x40>
1004b190:	3001      	adds	r0, #1
1004b192:	4213      	tst	r3, r2
1004b194:	d100      	bne.n	1004b198 <__hi0bits+0x40>
1004b196:	2020      	movs	r0, #32
1004b198:	4770      	bx	lr

1004b19a <__lo0bits>:
1004b19a:	6803      	ldr	r3, [r0, #0]
1004b19c:	0001      	movs	r1, r0
1004b19e:	2207      	movs	r2, #7
1004b1a0:	0018      	movs	r0, r3
1004b1a2:	4010      	ands	r0, r2
1004b1a4:	4213      	tst	r3, r2
1004b1a6:	d00d      	beq.n	1004b1c4 <__lo0bits+0x2a>
1004b1a8:	3a06      	subs	r2, #6
1004b1aa:	2000      	movs	r0, #0
1004b1ac:	4213      	tst	r3, r2
1004b1ae:	d105      	bne.n	1004b1bc <__lo0bits+0x22>
1004b1b0:	3002      	adds	r0, #2
1004b1b2:	4203      	tst	r3, r0
1004b1b4:	d003      	beq.n	1004b1be <__lo0bits+0x24>
1004b1b6:	40d3      	lsrs	r3, r2
1004b1b8:	0010      	movs	r0, r2
1004b1ba:	600b      	str	r3, [r1, #0]
1004b1bc:	4770      	bx	lr
1004b1be:	089b      	lsrs	r3, r3, #2
1004b1c0:	600b      	str	r3, [r1, #0]
1004b1c2:	e7fb      	b.n	1004b1bc <__lo0bits+0x22>
1004b1c4:	b29a      	uxth	r2, r3
1004b1c6:	2a00      	cmp	r2, #0
1004b1c8:	d101      	bne.n	1004b1ce <__lo0bits+0x34>
1004b1ca:	2010      	movs	r0, #16
1004b1cc:	0c1b      	lsrs	r3, r3, #16
1004b1ce:	b2da      	uxtb	r2, r3
1004b1d0:	2a00      	cmp	r2, #0
1004b1d2:	d101      	bne.n	1004b1d8 <__lo0bits+0x3e>
1004b1d4:	3008      	adds	r0, #8
1004b1d6:	0a1b      	lsrs	r3, r3, #8
1004b1d8:	071a      	lsls	r2, r3, #28
1004b1da:	d101      	bne.n	1004b1e0 <__lo0bits+0x46>
1004b1dc:	3004      	adds	r0, #4
1004b1de:	091b      	lsrs	r3, r3, #4
1004b1e0:	079a      	lsls	r2, r3, #30
1004b1e2:	d101      	bne.n	1004b1e8 <__lo0bits+0x4e>
1004b1e4:	3002      	adds	r0, #2
1004b1e6:	089b      	lsrs	r3, r3, #2
1004b1e8:	07da      	lsls	r2, r3, #31
1004b1ea:	d4e9      	bmi.n	1004b1c0 <__lo0bits+0x26>
1004b1ec:	3001      	adds	r0, #1
1004b1ee:	085b      	lsrs	r3, r3, #1
1004b1f0:	d1e6      	bne.n	1004b1c0 <__lo0bits+0x26>
1004b1f2:	2020      	movs	r0, #32
1004b1f4:	e7e2      	b.n	1004b1bc <__lo0bits+0x22>
	...

1004b1f8 <__i2b>:
1004b1f8:	b510      	push	{r4, lr}
1004b1fa:	000c      	movs	r4, r1
1004b1fc:	2101      	movs	r1, #1
1004b1fe:	f7ff feff 	bl	1004b000 <_Balloc>
1004b202:	2800      	cmp	r0, #0
1004b204:	d107      	bne.n	1004b216 <__i2b+0x1e>
1004b206:	2146      	movs	r1, #70	@ 0x46
1004b208:	4c05      	ldr	r4, [pc, #20]	@ (1004b220 <__i2b+0x28>)
1004b20a:	0002      	movs	r2, r0
1004b20c:	4b05      	ldr	r3, [pc, #20]	@ (1004b224 <__i2b+0x2c>)
1004b20e:	0020      	movs	r0, r4
1004b210:	31ff      	adds	r1, #255	@ 0xff
1004b212:	f000 fb67 	bl	1004b8e4 <__assert_func>
1004b216:	2301      	movs	r3, #1
1004b218:	6144      	str	r4, [r0, #20]
1004b21a:	6103      	str	r3, [r0, #16]
1004b21c:	bd10      	pop	{r4, pc}
1004b21e:	46c0      	nop			@ (mov r8, r8)
1004b220:	1004c099 	.word	0x1004c099
1004b224:	1004c088 	.word	0x1004c088

1004b228 <__multiply>:
1004b228:	b5f0      	push	{r4, r5, r6, r7, lr}
1004b22a:	0014      	movs	r4, r2
1004b22c:	690a      	ldr	r2, [r1, #16]
1004b22e:	6923      	ldr	r3, [r4, #16]
1004b230:	000d      	movs	r5, r1
1004b232:	b08b      	sub	sp, #44	@ 0x2c
1004b234:	429a      	cmp	r2, r3
1004b236:	db02      	blt.n	1004b23e <__multiply+0x16>
1004b238:	0023      	movs	r3, r4
1004b23a:	000c      	movs	r4, r1
1004b23c:	001d      	movs	r5, r3
1004b23e:	6927      	ldr	r7, [r4, #16]
1004b240:	692e      	ldr	r6, [r5, #16]
1004b242:	6861      	ldr	r1, [r4, #4]
1004b244:	19bb      	adds	r3, r7, r6
1004b246:	9303      	str	r3, [sp, #12]
1004b248:	68a3      	ldr	r3, [r4, #8]
1004b24a:	19ba      	adds	r2, r7, r6
1004b24c:	4293      	cmp	r3, r2
1004b24e:	da00      	bge.n	1004b252 <__multiply+0x2a>
1004b250:	3101      	adds	r1, #1
1004b252:	f7ff fed5 	bl	1004b000 <_Balloc>
1004b256:	9002      	str	r0, [sp, #8]
1004b258:	2800      	cmp	r0, #0
1004b25a:	d106      	bne.n	1004b26a <__multiply+0x42>
1004b25c:	21b1      	movs	r1, #177	@ 0xb1
1004b25e:	4b49      	ldr	r3, [pc, #292]	@ (1004b384 <__multiply+0x15c>)
1004b260:	4849      	ldr	r0, [pc, #292]	@ (1004b388 <__multiply+0x160>)
1004b262:	9a02      	ldr	r2, [sp, #8]
1004b264:	0049      	lsls	r1, r1, #1
1004b266:	f000 fb3d 	bl	1004b8e4 <__assert_func>
1004b26a:	9b02      	ldr	r3, [sp, #8]
1004b26c:	2200      	movs	r2, #0
1004b26e:	3314      	adds	r3, #20
1004b270:	469c      	mov	ip, r3
1004b272:	19bb      	adds	r3, r7, r6
1004b274:	009b      	lsls	r3, r3, #2
1004b276:	4463      	add	r3, ip
1004b278:	9304      	str	r3, [sp, #16]
1004b27a:	4663      	mov	r3, ip
1004b27c:	9904      	ldr	r1, [sp, #16]
1004b27e:	428b      	cmp	r3, r1
1004b280:	d32a      	bcc.n	1004b2d8 <__multiply+0xb0>
1004b282:	0023      	movs	r3, r4
1004b284:	00bf      	lsls	r7, r7, #2
1004b286:	3314      	adds	r3, #20
1004b288:	3514      	adds	r5, #20
1004b28a:	9308      	str	r3, [sp, #32]
1004b28c:	00b6      	lsls	r6, r6, #2
1004b28e:	19db      	adds	r3, r3, r7
1004b290:	9305      	str	r3, [sp, #20]
1004b292:	19ab      	adds	r3, r5, r6
1004b294:	9309      	str	r3, [sp, #36]	@ 0x24
1004b296:	2304      	movs	r3, #4
1004b298:	9306      	str	r3, [sp, #24]
1004b29a:	0023      	movs	r3, r4
1004b29c:	9a05      	ldr	r2, [sp, #20]
1004b29e:	3315      	adds	r3, #21
1004b2a0:	9501      	str	r5, [sp, #4]
1004b2a2:	429a      	cmp	r2, r3
1004b2a4:	d305      	bcc.n	1004b2b2 <__multiply+0x8a>
1004b2a6:	1b13      	subs	r3, r2, r4
1004b2a8:	3b15      	subs	r3, #21
1004b2aa:	089b      	lsrs	r3, r3, #2
1004b2ac:	3301      	adds	r3, #1
1004b2ae:	009b      	lsls	r3, r3, #2
1004b2b0:	9306      	str	r3, [sp, #24]
1004b2b2:	9b01      	ldr	r3, [sp, #4]
1004b2b4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
1004b2b6:	4293      	cmp	r3, r2
1004b2b8:	d310      	bcc.n	1004b2dc <__multiply+0xb4>
1004b2ba:	9b03      	ldr	r3, [sp, #12]
1004b2bc:	2b00      	cmp	r3, #0
1004b2be:	dd05      	ble.n	1004b2cc <__multiply+0xa4>
1004b2c0:	9b04      	ldr	r3, [sp, #16]
1004b2c2:	3b04      	subs	r3, #4
1004b2c4:	9304      	str	r3, [sp, #16]
1004b2c6:	681b      	ldr	r3, [r3, #0]
1004b2c8:	2b00      	cmp	r3, #0
1004b2ca:	d056      	beq.n	1004b37a <__multiply+0x152>
1004b2cc:	9b02      	ldr	r3, [sp, #8]
1004b2ce:	9a03      	ldr	r2, [sp, #12]
1004b2d0:	0018      	movs	r0, r3
1004b2d2:	611a      	str	r2, [r3, #16]
1004b2d4:	b00b      	add	sp, #44	@ 0x2c
1004b2d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
1004b2d8:	c304      	stmia	r3!, {r2}
1004b2da:	e7cf      	b.n	1004b27c <__multiply+0x54>
1004b2dc:	9b01      	ldr	r3, [sp, #4]
1004b2de:	6818      	ldr	r0, [r3, #0]
1004b2e0:	b280      	uxth	r0, r0
1004b2e2:	2800      	cmp	r0, #0
1004b2e4:	d01e      	beq.n	1004b324 <__multiply+0xfc>
1004b2e6:	4667      	mov	r7, ip
1004b2e8:	2500      	movs	r5, #0
1004b2ea:	9e08      	ldr	r6, [sp, #32]
1004b2ec:	ce02      	ldmia	r6!, {r1}
1004b2ee:	683b      	ldr	r3, [r7, #0]
1004b2f0:	9307      	str	r3, [sp, #28]
1004b2f2:	b28b      	uxth	r3, r1
1004b2f4:	4343      	muls	r3, r0
1004b2f6:	001a      	movs	r2, r3
1004b2f8:	466b      	mov	r3, sp
1004b2fa:	0c09      	lsrs	r1, r1, #16
1004b2fc:	8b9b      	ldrh	r3, [r3, #28]
1004b2fe:	4341      	muls	r1, r0
1004b300:	18d3      	adds	r3, r2, r3
1004b302:	9a07      	ldr	r2, [sp, #28]
1004b304:	195b      	adds	r3, r3, r5
1004b306:	0c12      	lsrs	r2, r2, #16
1004b308:	1889      	adds	r1, r1, r2
1004b30a:	0c1a      	lsrs	r2, r3, #16
1004b30c:	188a      	adds	r2, r1, r2
1004b30e:	b29b      	uxth	r3, r3
1004b310:	0c15      	lsrs	r5, r2, #16
1004b312:	0412      	lsls	r2, r2, #16
1004b314:	431a      	orrs	r2, r3
1004b316:	9b05      	ldr	r3, [sp, #20]
1004b318:	c704      	stmia	r7!, {r2}
1004b31a:	42b3      	cmp	r3, r6
1004b31c:	d8e6      	bhi.n	1004b2ec <__multiply+0xc4>
1004b31e:	4663      	mov	r3, ip
1004b320:	9a06      	ldr	r2, [sp, #24]
1004b322:	509d      	str	r5, [r3, r2]
1004b324:	9b01      	ldr	r3, [sp, #4]
1004b326:	6818      	ldr	r0, [r3, #0]
1004b328:	0c00      	lsrs	r0, r0, #16
1004b32a:	d020      	beq.n	1004b36e <__multiply+0x146>
1004b32c:	4663      	mov	r3, ip
1004b32e:	0025      	movs	r5, r4
1004b330:	4661      	mov	r1, ip
1004b332:	2700      	movs	r7, #0
1004b334:	681b      	ldr	r3, [r3, #0]
1004b336:	3514      	adds	r5, #20
1004b338:	682a      	ldr	r2, [r5, #0]
1004b33a:	680e      	ldr	r6, [r1, #0]
1004b33c:	b292      	uxth	r2, r2
1004b33e:	4342      	muls	r2, r0
1004b340:	0c36      	lsrs	r6, r6, #16
1004b342:	1992      	adds	r2, r2, r6
1004b344:	19d2      	adds	r2, r2, r7
1004b346:	0416      	lsls	r6, r2, #16
1004b348:	b29b      	uxth	r3, r3
1004b34a:	431e      	orrs	r6, r3
1004b34c:	600e      	str	r6, [r1, #0]
1004b34e:	cd40      	ldmia	r5!, {r6}
1004b350:	684b      	ldr	r3, [r1, #4]
1004b352:	0c36      	lsrs	r6, r6, #16
1004b354:	4346      	muls	r6, r0
1004b356:	b29b      	uxth	r3, r3
1004b358:	0c12      	lsrs	r2, r2, #16
1004b35a:	18f3      	adds	r3, r6, r3
1004b35c:	189b      	adds	r3, r3, r2
1004b35e:	9a05      	ldr	r2, [sp, #20]
1004b360:	0c1f      	lsrs	r7, r3, #16
1004b362:	3104      	adds	r1, #4
1004b364:	42aa      	cmp	r2, r5
1004b366:	d8e7      	bhi.n	1004b338 <__multiply+0x110>
1004b368:	4662      	mov	r2, ip
1004b36a:	9906      	ldr	r1, [sp, #24]
1004b36c:	5053      	str	r3, [r2, r1]
1004b36e:	9b01      	ldr	r3, [sp, #4]
1004b370:	3304      	adds	r3, #4
1004b372:	9301      	str	r3, [sp, #4]
1004b374:	2304      	movs	r3, #4
1004b376:	449c      	add	ip, r3
1004b378:	e79b      	b.n	1004b2b2 <__multiply+0x8a>
1004b37a:	9b03      	ldr	r3, [sp, #12]
1004b37c:	3b01      	subs	r3, #1
1004b37e:	9303      	str	r3, [sp, #12]
1004b380:	e79b      	b.n	1004b2ba <__multiply+0x92>
1004b382:	46c0      	nop			@ (mov r8, r8)
1004b384:	1004c088 	.word	0x1004c088
1004b388:	1004c099 	.word	0x1004c099

1004b38c <__pow5mult>:
1004b38c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
1004b38e:	2303      	movs	r3, #3
1004b390:	0015      	movs	r5, r2
1004b392:	0007      	movs	r7, r0
1004b394:	000e      	movs	r6, r1
1004b396:	401a      	ands	r2, r3
1004b398:	421d      	tst	r5, r3
1004b39a:	d008      	beq.n	1004b3ae <__pow5mult+0x22>
1004b39c:	4925      	ldr	r1, [pc, #148]	@ (1004b434 <__pow5mult+0xa8>)
1004b39e:	3a01      	subs	r2, #1
1004b3a0:	0092      	lsls	r2, r2, #2
1004b3a2:	5852      	ldr	r2, [r2, r1]
1004b3a4:	2300      	movs	r3, #0
1004b3a6:	0031      	movs	r1, r6
1004b3a8:	f7ff fe92 	bl	1004b0d0 <__multadd>
1004b3ac:	0006      	movs	r6, r0
1004b3ae:	10ad      	asrs	r5, r5, #2
1004b3b0:	d03d      	beq.n	1004b42e <__pow5mult+0xa2>
1004b3b2:	69fc      	ldr	r4, [r7, #28]
1004b3b4:	2c00      	cmp	r4, #0
1004b3b6:	d10f      	bne.n	1004b3d8 <__pow5mult+0x4c>
1004b3b8:	2010      	movs	r0, #16
1004b3ba:	f7ff fd65 	bl	1004ae88 <malloc>
1004b3be:	1e02      	subs	r2, r0, #0
1004b3c0:	61f8      	str	r0, [r7, #28]
1004b3c2:	d105      	bne.n	1004b3d0 <__pow5mult+0x44>
1004b3c4:	21b4      	movs	r1, #180	@ 0xb4
1004b3c6:	4b1c      	ldr	r3, [pc, #112]	@ (1004b438 <__pow5mult+0xac>)
1004b3c8:	481c      	ldr	r0, [pc, #112]	@ (1004b43c <__pow5mult+0xb0>)
1004b3ca:	31ff      	adds	r1, #255	@ 0xff
1004b3cc:	f000 fa8a 	bl	1004b8e4 <__assert_func>
1004b3d0:	6044      	str	r4, [r0, #4]
1004b3d2:	6084      	str	r4, [r0, #8]
1004b3d4:	6004      	str	r4, [r0, #0]
1004b3d6:	60c4      	str	r4, [r0, #12]
1004b3d8:	69fb      	ldr	r3, [r7, #28]
1004b3da:	689c      	ldr	r4, [r3, #8]
1004b3dc:	9301      	str	r3, [sp, #4]
1004b3de:	2c00      	cmp	r4, #0
1004b3e0:	d108      	bne.n	1004b3f4 <__pow5mult+0x68>
1004b3e2:	0038      	movs	r0, r7
1004b3e4:	4916      	ldr	r1, [pc, #88]	@ (1004b440 <__pow5mult+0xb4>)
1004b3e6:	f7ff ff07 	bl	1004b1f8 <__i2b>
1004b3ea:	9b01      	ldr	r3, [sp, #4]
1004b3ec:	0004      	movs	r4, r0
1004b3ee:	6098      	str	r0, [r3, #8]
1004b3f0:	2300      	movs	r3, #0
1004b3f2:	6003      	str	r3, [r0, #0]
1004b3f4:	2301      	movs	r3, #1
1004b3f6:	421d      	tst	r5, r3
1004b3f8:	d00a      	beq.n	1004b410 <__pow5mult+0x84>
1004b3fa:	0031      	movs	r1, r6
1004b3fc:	0022      	movs	r2, r4
1004b3fe:	0038      	movs	r0, r7
1004b400:	f7ff ff12 	bl	1004b228 <__multiply>
1004b404:	0031      	movs	r1, r6
1004b406:	9001      	str	r0, [sp, #4]
1004b408:	0038      	movs	r0, r7
1004b40a:	f7ff fe3d 	bl	1004b088 <_Bfree>
1004b40e:	9e01      	ldr	r6, [sp, #4]
1004b410:	106d      	asrs	r5, r5, #1
1004b412:	d00c      	beq.n	1004b42e <__pow5mult+0xa2>
1004b414:	6820      	ldr	r0, [r4, #0]
1004b416:	2800      	cmp	r0, #0
1004b418:	d107      	bne.n	1004b42a <__pow5mult+0x9e>
1004b41a:	0022      	movs	r2, r4
1004b41c:	0021      	movs	r1, r4
1004b41e:	0038      	movs	r0, r7
1004b420:	f7ff ff02 	bl	1004b228 <__multiply>
1004b424:	2300      	movs	r3, #0
1004b426:	6020      	str	r0, [r4, #0]
1004b428:	6003      	str	r3, [r0, #0]
1004b42a:	0004      	movs	r4, r0
1004b42c:	e7e2      	b.n	1004b3f4 <__pow5mult+0x68>
1004b42e:	0030      	movs	r0, r6
1004b430:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
1004b432:	46c0      	nop			@ (mov r8, r8)
1004b434:	1004c0f4 	.word	0x1004c0f4
1004b438:	1004c019 	.word	0x1004c019
1004b43c:	1004c099 	.word	0x1004c099
1004b440:	00000271 	.word	0x00000271

1004b444 <__lshift>:
1004b444:	b5f0      	push	{r4, r5, r6, r7, lr}
1004b446:	000c      	movs	r4, r1
1004b448:	0016      	movs	r6, r2
1004b44a:	6923      	ldr	r3, [r4, #16]
1004b44c:	1157      	asrs	r7, r2, #5
1004b44e:	b085      	sub	sp, #20
1004b450:	18fb      	adds	r3, r7, r3
1004b452:	9301      	str	r3, [sp, #4]
1004b454:	3301      	adds	r3, #1
1004b456:	9300      	str	r3, [sp, #0]
1004b458:	6849      	ldr	r1, [r1, #4]
1004b45a:	68a3      	ldr	r3, [r4, #8]
1004b45c:	9002      	str	r0, [sp, #8]
1004b45e:	9a00      	ldr	r2, [sp, #0]
1004b460:	4293      	cmp	r3, r2
1004b462:	db10      	blt.n	1004b486 <__lshift+0x42>
1004b464:	9802      	ldr	r0, [sp, #8]
1004b466:	f7ff fdcb 	bl	1004b000 <_Balloc>
1004b46a:	2300      	movs	r3, #0
1004b46c:	0001      	movs	r1, r0
1004b46e:	0005      	movs	r5, r0
1004b470:	001a      	movs	r2, r3
1004b472:	3114      	adds	r1, #20
1004b474:	4298      	cmp	r0, r3
1004b476:	d10c      	bne.n	1004b492 <__lshift+0x4e>
1004b478:	21ef      	movs	r1, #239	@ 0xef
1004b47a:	002a      	movs	r2, r5
1004b47c:	4b25      	ldr	r3, [pc, #148]	@ (1004b514 <__lshift+0xd0>)
1004b47e:	4826      	ldr	r0, [pc, #152]	@ (1004b518 <__lshift+0xd4>)
1004b480:	0049      	lsls	r1, r1, #1
1004b482:	f000 fa2f 	bl	1004b8e4 <__assert_func>
1004b486:	3101      	adds	r1, #1
1004b488:	005b      	lsls	r3, r3, #1
1004b48a:	e7e8      	b.n	1004b45e <__lshift+0x1a>
1004b48c:	0098      	lsls	r0, r3, #2
1004b48e:	500a      	str	r2, [r1, r0]
1004b490:	3301      	adds	r3, #1
1004b492:	42bb      	cmp	r3, r7
1004b494:	dbfa      	blt.n	1004b48c <__lshift+0x48>
1004b496:	43fb      	mvns	r3, r7
1004b498:	17db      	asrs	r3, r3, #31
1004b49a:	401f      	ands	r7, r3
1004b49c:	00bf      	lsls	r7, r7, #2
1004b49e:	0023      	movs	r3, r4
1004b4a0:	201f      	movs	r0, #31
1004b4a2:	19c9      	adds	r1, r1, r7
1004b4a4:	0037      	movs	r7, r6
1004b4a6:	6922      	ldr	r2, [r4, #16]
1004b4a8:	3314      	adds	r3, #20
1004b4aa:	0092      	lsls	r2, r2, #2
1004b4ac:	189a      	adds	r2, r3, r2
1004b4ae:	4007      	ands	r7, r0
1004b4b0:	4206      	tst	r6, r0
1004b4b2:	d029      	beq.n	1004b508 <__lshift+0xc4>
1004b4b4:	3001      	adds	r0, #1
1004b4b6:	1bc0      	subs	r0, r0, r7
1004b4b8:	9003      	str	r0, [sp, #12]
1004b4ba:	468c      	mov	ip, r1
1004b4bc:	2000      	movs	r0, #0
1004b4be:	681e      	ldr	r6, [r3, #0]
1004b4c0:	40be      	lsls	r6, r7
1004b4c2:	4306      	orrs	r6, r0
1004b4c4:	4660      	mov	r0, ip
1004b4c6:	c040      	stmia	r0!, {r6}
1004b4c8:	4684      	mov	ip, r0
1004b4ca:	9e03      	ldr	r6, [sp, #12]
1004b4cc:	cb01      	ldmia	r3!, {r0}
1004b4ce:	40f0      	lsrs	r0, r6
1004b4d0:	429a      	cmp	r2, r3
1004b4d2:	d8f4      	bhi.n	1004b4be <__lshift+0x7a>
1004b4d4:	0026      	movs	r6, r4
1004b4d6:	3615      	adds	r6, #21
1004b4d8:	2304      	movs	r3, #4
1004b4da:	42b2      	cmp	r2, r6
1004b4dc:	d304      	bcc.n	1004b4e8 <__lshift+0xa4>
1004b4de:	1b13      	subs	r3, r2, r4
1004b4e0:	3b15      	subs	r3, #21
1004b4e2:	089b      	lsrs	r3, r3, #2
1004b4e4:	3301      	adds	r3, #1
1004b4e6:	009b      	lsls	r3, r3, #2
1004b4e8:	50c8      	str	r0, [r1, r3]
1004b4ea:	2800      	cmp	r0, #0
1004b4ec:	d002      	beq.n	1004b4f4 <__lshift+0xb0>
1004b4ee:	9b01      	ldr	r3, [sp, #4]
1004b4f0:	3302      	adds	r3, #2
1004b4f2:	9300      	str	r3, [sp, #0]
1004b4f4:	9b00      	ldr	r3, [sp, #0]
1004b4f6:	9802      	ldr	r0, [sp, #8]
1004b4f8:	3b01      	subs	r3, #1
1004b4fa:	0021      	movs	r1, r4
1004b4fc:	612b      	str	r3, [r5, #16]
1004b4fe:	f7ff fdc3 	bl	1004b088 <_Bfree>
1004b502:	0028      	movs	r0, r5
1004b504:	b005      	add	sp, #20
1004b506:	bdf0      	pop	{r4, r5, r6, r7, pc}
1004b508:	cb01      	ldmia	r3!, {r0}
1004b50a:	c101      	stmia	r1!, {r0}
1004b50c:	429a      	cmp	r2, r3
1004b50e:	d8fb      	bhi.n	1004b508 <__lshift+0xc4>
1004b510:	e7f0      	b.n	1004b4f4 <__lshift+0xb0>
1004b512:	46c0      	nop			@ (mov r8, r8)
1004b514:	1004c088 	.word	0x1004c088
1004b518:	1004c099 	.word	0x1004c099

1004b51c <__mcmp>:
1004b51c:	b530      	push	{r4, r5, lr}
1004b51e:	690b      	ldr	r3, [r1, #16]
1004b520:	6904      	ldr	r4, [r0, #16]
1004b522:	0002      	movs	r2, r0
1004b524:	1ae0      	subs	r0, r4, r3
1004b526:	429c      	cmp	r4, r3
1004b528:	d10f      	bne.n	1004b54a <__mcmp+0x2e>
1004b52a:	3214      	adds	r2, #20
1004b52c:	009b      	lsls	r3, r3, #2
1004b52e:	3114      	adds	r1, #20
1004b530:	0014      	movs	r4, r2
1004b532:	18c9      	adds	r1, r1, r3
1004b534:	18d2      	adds	r2, r2, r3
1004b536:	3a04      	subs	r2, #4
1004b538:	3904      	subs	r1, #4
1004b53a:	6815      	ldr	r5, [r2, #0]
1004b53c:	680b      	ldr	r3, [r1, #0]
1004b53e:	429d      	cmp	r5, r3
1004b540:	d004      	beq.n	1004b54c <__mcmp+0x30>
1004b542:	2001      	movs	r0, #1
1004b544:	429d      	cmp	r5, r3
1004b546:	d200      	bcs.n	1004b54a <__mcmp+0x2e>
1004b548:	3802      	subs	r0, #2
1004b54a:	bd30      	pop	{r4, r5, pc}
1004b54c:	4294      	cmp	r4, r2
1004b54e:	d3f2      	bcc.n	1004b536 <__mcmp+0x1a>
1004b550:	e7fb      	b.n	1004b54a <__mcmp+0x2e>
	...

1004b554 <__mdiff>:
1004b554:	b5f0      	push	{r4, r5, r6, r7, lr}
1004b556:	000c      	movs	r4, r1
1004b558:	b087      	sub	sp, #28
1004b55a:	9000      	str	r0, [sp, #0]
1004b55c:	0011      	movs	r1, r2
1004b55e:	0020      	movs	r0, r4
1004b560:	0017      	movs	r7, r2
1004b562:	f7ff ffdb 	bl	1004b51c <__mcmp>
1004b566:	1e05      	subs	r5, r0, #0
1004b568:	d110      	bne.n	1004b58c <__mdiff+0x38>
1004b56a:	0001      	movs	r1, r0
1004b56c:	9800      	ldr	r0, [sp, #0]
1004b56e:	f7ff fd47 	bl	1004b000 <_Balloc>
1004b572:	1e02      	subs	r2, r0, #0
1004b574:	d104      	bne.n	1004b580 <__mdiff+0x2c>
1004b576:	4b40      	ldr	r3, [pc, #256]	@ (1004b678 <__mdiff+0x124>)
1004b578:	4840      	ldr	r0, [pc, #256]	@ (1004b67c <__mdiff+0x128>)
1004b57a:	4941      	ldr	r1, [pc, #260]	@ (1004b680 <__mdiff+0x12c>)
1004b57c:	f000 f9b2 	bl	1004b8e4 <__assert_func>
1004b580:	2301      	movs	r3, #1
1004b582:	6145      	str	r5, [r0, #20]
1004b584:	6103      	str	r3, [r0, #16]
1004b586:	0010      	movs	r0, r2
1004b588:	b007      	add	sp, #28
1004b58a:	bdf0      	pop	{r4, r5, r6, r7, pc}
1004b58c:	2600      	movs	r6, #0
1004b58e:	42b0      	cmp	r0, r6
1004b590:	da03      	bge.n	1004b59a <__mdiff+0x46>
1004b592:	0023      	movs	r3, r4
1004b594:	003c      	movs	r4, r7
1004b596:	001f      	movs	r7, r3
1004b598:	3601      	adds	r6, #1
1004b59a:	6861      	ldr	r1, [r4, #4]
1004b59c:	9800      	ldr	r0, [sp, #0]
1004b59e:	f7ff fd2f 	bl	1004b000 <_Balloc>
1004b5a2:	1e02      	subs	r2, r0, #0
1004b5a4:	d103      	bne.n	1004b5ae <__mdiff+0x5a>
1004b5a6:	4b34      	ldr	r3, [pc, #208]	@ (1004b678 <__mdiff+0x124>)
1004b5a8:	4834      	ldr	r0, [pc, #208]	@ (1004b67c <__mdiff+0x128>)
1004b5aa:	4936      	ldr	r1, [pc, #216]	@ (1004b684 <__mdiff+0x130>)
1004b5ac:	e7e6      	b.n	1004b57c <__mdiff+0x28>
1004b5ae:	6923      	ldr	r3, [r4, #16]
1004b5b0:	3414      	adds	r4, #20
1004b5b2:	9300      	str	r3, [sp, #0]
1004b5b4:	009b      	lsls	r3, r3, #2
1004b5b6:	18e3      	adds	r3, r4, r3
1004b5b8:	0021      	movs	r1, r4
1004b5ba:	9401      	str	r4, [sp, #4]
1004b5bc:	003c      	movs	r4, r7
1004b5be:	9302      	str	r3, [sp, #8]
1004b5c0:	693b      	ldr	r3, [r7, #16]
1004b5c2:	3414      	adds	r4, #20
1004b5c4:	009b      	lsls	r3, r3, #2
1004b5c6:	18e3      	adds	r3, r4, r3
1004b5c8:	9303      	str	r3, [sp, #12]
1004b5ca:	0003      	movs	r3, r0
1004b5cc:	60c6      	str	r6, [r0, #12]
1004b5ce:	468c      	mov	ip, r1
1004b5d0:	2000      	movs	r0, #0
1004b5d2:	3314      	adds	r3, #20
1004b5d4:	9304      	str	r3, [sp, #16]
1004b5d6:	9305      	str	r3, [sp, #20]
1004b5d8:	4663      	mov	r3, ip
1004b5da:	cb20      	ldmia	r3!, {r5}
1004b5dc:	b2a9      	uxth	r1, r5
1004b5de:	000e      	movs	r6, r1
1004b5e0:	469c      	mov	ip, r3
1004b5e2:	cc08      	ldmia	r4!, {r3}
1004b5e4:	0c2d      	lsrs	r5, r5, #16
1004b5e6:	b299      	uxth	r1, r3
1004b5e8:	1a71      	subs	r1, r6, r1
1004b5ea:	1809      	adds	r1, r1, r0
1004b5ec:	0c1b      	lsrs	r3, r3, #16
1004b5ee:	1408      	asrs	r0, r1, #16
1004b5f0:	1aeb      	subs	r3, r5, r3
1004b5f2:	181b      	adds	r3, r3, r0
1004b5f4:	1418      	asrs	r0, r3, #16
1004b5f6:	b289      	uxth	r1, r1
1004b5f8:	041b      	lsls	r3, r3, #16
1004b5fa:	4319      	orrs	r1, r3
1004b5fc:	9b05      	ldr	r3, [sp, #20]
1004b5fe:	c302      	stmia	r3!, {r1}
1004b600:	9305      	str	r3, [sp, #20]
1004b602:	9b03      	ldr	r3, [sp, #12]
1004b604:	42a3      	cmp	r3, r4
1004b606:	d8e7      	bhi.n	1004b5d8 <__mdiff+0x84>
1004b608:	0039      	movs	r1, r7
1004b60a:	9c03      	ldr	r4, [sp, #12]
1004b60c:	3115      	adds	r1, #21
1004b60e:	2304      	movs	r3, #4
1004b610:	428c      	cmp	r4, r1
1004b612:	d304      	bcc.n	1004b61e <__mdiff+0xca>
1004b614:	1be3      	subs	r3, r4, r7
1004b616:	3b15      	subs	r3, #21
1004b618:	089b      	lsrs	r3, r3, #2
1004b61a:	3301      	adds	r3, #1
1004b61c:	009b      	lsls	r3, r3, #2
1004b61e:	9901      	ldr	r1, [sp, #4]
1004b620:	18cd      	adds	r5, r1, r3
1004b622:	9904      	ldr	r1, [sp, #16]
1004b624:	002e      	movs	r6, r5
1004b626:	18cb      	adds	r3, r1, r3
1004b628:	001f      	movs	r7, r3
1004b62a:	9902      	ldr	r1, [sp, #8]
1004b62c:	428e      	cmp	r6, r1
1004b62e:	d311      	bcc.n	1004b654 <__mdiff+0x100>
1004b630:	9c02      	ldr	r4, [sp, #8]
1004b632:	1ee9      	subs	r1, r5, #3
1004b634:	2000      	movs	r0, #0
1004b636:	428c      	cmp	r4, r1
1004b638:	d304      	bcc.n	1004b644 <__mdiff+0xf0>
1004b63a:	0021      	movs	r1, r4
1004b63c:	3103      	adds	r1, #3
1004b63e:	1b49      	subs	r1, r1, r5
1004b640:	0889      	lsrs	r1, r1, #2
1004b642:	0088      	lsls	r0, r1, #2
1004b644:	181b      	adds	r3, r3, r0
1004b646:	3b04      	subs	r3, #4
1004b648:	6819      	ldr	r1, [r3, #0]
1004b64a:	2900      	cmp	r1, #0
1004b64c:	d010      	beq.n	1004b670 <__mdiff+0x11c>
1004b64e:	9b00      	ldr	r3, [sp, #0]
1004b650:	6113      	str	r3, [r2, #16]
1004b652:	e798      	b.n	1004b586 <__mdiff+0x32>
1004b654:	4684      	mov	ip, r0
1004b656:	ce02      	ldmia	r6!, {r1}
1004b658:	b288      	uxth	r0, r1
1004b65a:	4460      	add	r0, ip
1004b65c:	1400      	asrs	r0, r0, #16
1004b65e:	0c0c      	lsrs	r4, r1, #16
1004b660:	1904      	adds	r4, r0, r4
1004b662:	4461      	add	r1, ip
1004b664:	1420      	asrs	r0, r4, #16
1004b666:	b289      	uxth	r1, r1
1004b668:	0424      	lsls	r4, r4, #16
1004b66a:	4321      	orrs	r1, r4
1004b66c:	c702      	stmia	r7!, {r1}
1004b66e:	e7dc      	b.n	1004b62a <__mdiff+0xd6>
1004b670:	9900      	ldr	r1, [sp, #0]
1004b672:	3901      	subs	r1, #1
1004b674:	9100      	str	r1, [sp, #0]
1004b676:	e7e6      	b.n	1004b646 <__mdiff+0xf2>
1004b678:	1004c088 	.word	0x1004c088
1004b67c:	1004c099 	.word	0x1004c099
1004b680:	00000237 	.word	0x00000237
1004b684:	00000245 	.word	0x00000245

1004b688 <__d2b>:
1004b688:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
1004b68a:	2101      	movs	r1, #1
1004b68c:	0016      	movs	r6, r2
1004b68e:	001f      	movs	r7, r3
1004b690:	f7ff fcb6 	bl	1004b000 <_Balloc>
1004b694:	1e04      	subs	r4, r0, #0
1004b696:	d105      	bne.n	1004b6a4 <__d2b+0x1c>
1004b698:	0022      	movs	r2, r4
1004b69a:	4b25      	ldr	r3, [pc, #148]	@ (1004b730 <__d2b+0xa8>)
1004b69c:	4825      	ldr	r0, [pc, #148]	@ (1004b734 <__d2b+0xac>)
1004b69e:	4926      	ldr	r1, [pc, #152]	@ (1004b738 <__d2b+0xb0>)
1004b6a0:	f000 f920 	bl	1004b8e4 <__assert_func>
1004b6a4:	033b      	lsls	r3, r7, #12
1004b6a6:	007d      	lsls	r5, r7, #1
1004b6a8:	0b1b      	lsrs	r3, r3, #12
1004b6aa:	0d6d      	lsrs	r5, r5, #21
1004b6ac:	d002      	beq.n	1004b6b4 <__d2b+0x2c>
1004b6ae:	2280      	movs	r2, #128	@ 0x80
1004b6b0:	0352      	lsls	r2, r2, #13
1004b6b2:	4313      	orrs	r3, r2
1004b6b4:	9301      	str	r3, [sp, #4]
1004b6b6:	2e00      	cmp	r6, #0
1004b6b8:	d025      	beq.n	1004b706 <__d2b+0x7e>
1004b6ba:	4668      	mov	r0, sp
1004b6bc:	9600      	str	r6, [sp, #0]
1004b6be:	f7ff fd6c 	bl	1004b19a <__lo0bits>
1004b6c2:	9b01      	ldr	r3, [sp, #4]
1004b6c4:	9900      	ldr	r1, [sp, #0]
1004b6c6:	2800      	cmp	r0, #0
1004b6c8:	d01b      	beq.n	1004b702 <__d2b+0x7a>
1004b6ca:	2220      	movs	r2, #32
1004b6cc:	001e      	movs	r6, r3
1004b6ce:	1a12      	subs	r2, r2, r0
1004b6d0:	4096      	lsls	r6, r2
1004b6d2:	0032      	movs	r2, r6
1004b6d4:	40c3      	lsrs	r3, r0
1004b6d6:	430a      	orrs	r2, r1
1004b6d8:	6162      	str	r2, [r4, #20]
1004b6da:	9301      	str	r3, [sp, #4]
1004b6dc:	9e01      	ldr	r6, [sp, #4]
1004b6de:	61a6      	str	r6, [r4, #24]
1004b6e0:	1e73      	subs	r3, r6, #1
1004b6e2:	419e      	sbcs	r6, r3
1004b6e4:	3601      	adds	r6, #1
1004b6e6:	6126      	str	r6, [r4, #16]
1004b6e8:	2d00      	cmp	r5, #0
1004b6ea:	d014      	beq.n	1004b716 <__d2b+0x8e>
1004b6ec:	2635      	movs	r6, #53	@ 0x35
1004b6ee:	4b13      	ldr	r3, [pc, #76]	@ (1004b73c <__d2b+0xb4>)
1004b6f0:	18ed      	adds	r5, r5, r3
1004b6f2:	9b08      	ldr	r3, [sp, #32]
1004b6f4:	182d      	adds	r5, r5, r0
1004b6f6:	601d      	str	r5, [r3, #0]
1004b6f8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
1004b6fa:	1a36      	subs	r6, r6, r0
1004b6fc:	601e      	str	r6, [r3, #0]
1004b6fe:	0020      	movs	r0, r4
1004b700:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
1004b702:	6161      	str	r1, [r4, #20]
1004b704:	e7ea      	b.n	1004b6dc <__d2b+0x54>
1004b706:	a801      	add	r0, sp, #4
1004b708:	f7ff fd47 	bl	1004b19a <__lo0bits>
1004b70c:	9b01      	ldr	r3, [sp, #4]
1004b70e:	2601      	movs	r6, #1
1004b710:	6163      	str	r3, [r4, #20]
1004b712:	3020      	adds	r0, #32
1004b714:	e7e7      	b.n	1004b6e6 <__d2b+0x5e>
1004b716:	4b0a      	ldr	r3, [pc, #40]	@ (1004b740 <__d2b+0xb8>)
1004b718:	18c0      	adds	r0, r0, r3
1004b71a:	9b08      	ldr	r3, [sp, #32]
1004b71c:	6018      	str	r0, [r3, #0]
1004b71e:	4b09      	ldr	r3, [pc, #36]	@ (1004b744 <__d2b+0xbc>)
1004b720:	18f3      	adds	r3, r6, r3
1004b722:	009b      	lsls	r3, r3, #2
1004b724:	18e3      	adds	r3, r4, r3
1004b726:	6958      	ldr	r0, [r3, #20]
1004b728:	f7ff fd16 	bl	1004b158 <__hi0bits>
1004b72c:	0176      	lsls	r6, r6, #5
1004b72e:	e7e3      	b.n	1004b6f8 <__d2b+0x70>
1004b730:	1004c088 	.word	0x1004c088
1004b734:	1004c099 	.word	0x1004c099
1004b738:	0000030f 	.word	0x0000030f
1004b73c:	fffffbcd 	.word	0xfffffbcd
1004b740:	fffffbce 	.word	0xfffffbce
1004b744:	3fffffff 	.word	0x3fffffff

1004b748 <__sflush_r>:
1004b748:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
1004b74a:	220c      	movs	r2, #12
1004b74c:	5e8b      	ldrsh	r3, [r1, r2]
1004b74e:	0005      	movs	r5, r0
1004b750:	000c      	movs	r4, r1
1004b752:	071a      	lsls	r2, r3, #28
1004b754:	d456      	bmi.n	1004b804 <__sflush_r+0xbc>
1004b756:	684a      	ldr	r2, [r1, #4]
1004b758:	2a00      	cmp	r2, #0
1004b75a:	dc02      	bgt.n	1004b762 <__sflush_r+0x1a>
1004b75c:	6c0a      	ldr	r2, [r1, #64]	@ 0x40
1004b75e:	2a00      	cmp	r2, #0
1004b760:	dd4e      	ble.n	1004b800 <__sflush_r+0xb8>
1004b762:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
1004b764:	2f00      	cmp	r7, #0
1004b766:	d04b      	beq.n	1004b800 <__sflush_r+0xb8>
1004b768:	2200      	movs	r2, #0
1004b76a:	2080      	movs	r0, #128	@ 0x80
1004b76c:	682e      	ldr	r6, [r5, #0]
1004b76e:	602a      	str	r2, [r5, #0]
1004b770:	001a      	movs	r2, r3
1004b772:	0140      	lsls	r0, r0, #5
1004b774:	6a21      	ldr	r1, [r4, #32]
1004b776:	4002      	ands	r2, r0
1004b778:	4203      	tst	r3, r0
1004b77a:	d033      	beq.n	1004b7e4 <__sflush_r+0x9c>
1004b77c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
1004b77e:	89a3      	ldrh	r3, [r4, #12]
1004b780:	075b      	lsls	r3, r3, #29
1004b782:	d506      	bpl.n	1004b792 <__sflush_r+0x4a>
1004b784:	6863      	ldr	r3, [r4, #4]
1004b786:	1ad2      	subs	r2, r2, r3
1004b788:	6b63      	ldr	r3, [r4, #52]	@ 0x34
1004b78a:	2b00      	cmp	r3, #0
1004b78c:	d001      	beq.n	1004b792 <__sflush_r+0x4a>
1004b78e:	6c23      	ldr	r3, [r4, #64]	@ 0x40
1004b790:	1ad2      	subs	r2, r2, r3
1004b792:	2300      	movs	r3, #0
1004b794:	0028      	movs	r0, r5
1004b796:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
1004b798:	6a21      	ldr	r1, [r4, #32]
1004b79a:	47b8      	blx	r7
1004b79c:	89a2      	ldrh	r2, [r4, #12]
1004b79e:	1c43      	adds	r3, r0, #1
1004b7a0:	d106      	bne.n	1004b7b0 <__sflush_r+0x68>
1004b7a2:	6829      	ldr	r1, [r5, #0]
1004b7a4:	291d      	cmp	r1, #29
1004b7a6:	d846      	bhi.n	1004b836 <__sflush_r+0xee>
1004b7a8:	4b29      	ldr	r3, [pc, #164]	@ (1004b850 <__sflush_r+0x108>)
1004b7aa:	410b      	asrs	r3, r1
1004b7ac:	07db      	lsls	r3, r3, #31
1004b7ae:	d442      	bmi.n	1004b836 <__sflush_r+0xee>
1004b7b0:	2300      	movs	r3, #0
1004b7b2:	6063      	str	r3, [r4, #4]
1004b7b4:	6923      	ldr	r3, [r4, #16]
1004b7b6:	6023      	str	r3, [r4, #0]
1004b7b8:	04d2      	lsls	r2, r2, #19
1004b7ba:	d505      	bpl.n	1004b7c8 <__sflush_r+0x80>
1004b7bc:	1c43      	adds	r3, r0, #1
1004b7be:	d102      	bne.n	1004b7c6 <__sflush_r+0x7e>
1004b7c0:	682b      	ldr	r3, [r5, #0]
1004b7c2:	2b00      	cmp	r3, #0
1004b7c4:	d100      	bne.n	1004b7c8 <__sflush_r+0x80>
1004b7c6:	6560      	str	r0, [r4, #84]	@ 0x54
1004b7c8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
1004b7ca:	602e      	str	r6, [r5, #0]
1004b7cc:	2900      	cmp	r1, #0
1004b7ce:	d017      	beq.n	1004b800 <__sflush_r+0xb8>
1004b7d0:	0023      	movs	r3, r4
1004b7d2:	3344      	adds	r3, #68	@ 0x44
1004b7d4:	4299      	cmp	r1, r3
1004b7d6:	d002      	beq.n	1004b7de <__sflush_r+0x96>
1004b7d8:	0028      	movs	r0, r5
1004b7da:	f7ff fb0b 	bl	1004adf4 <_free_r>
1004b7de:	2300      	movs	r3, #0
1004b7e0:	6363      	str	r3, [r4, #52]	@ 0x34
1004b7e2:	e00d      	b.n	1004b800 <__sflush_r+0xb8>
1004b7e4:	2301      	movs	r3, #1
1004b7e6:	0028      	movs	r0, r5
1004b7e8:	47b8      	blx	r7
1004b7ea:	0002      	movs	r2, r0
1004b7ec:	1c43      	adds	r3, r0, #1
1004b7ee:	d1c6      	bne.n	1004b77e <__sflush_r+0x36>
1004b7f0:	682b      	ldr	r3, [r5, #0]
1004b7f2:	2b00      	cmp	r3, #0
1004b7f4:	d0c3      	beq.n	1004b77e <__sflush_r+0x36>
1004b7f6:	2b1d      	cmp	r3, #29
1004b7f8:	d001      	beq.n	1004b7fe <__sflush_r+0xb6>
1004b7fa:	2b16      	cmp	r3, #22
1004b7fc:	d11a      	bne.n	1004b834 <__sflush_r+0xec>
1004b7fe:	602e      	str	r6, [r5, #0]
1004b800:	2000      	movs	r0, #0
1004b802:	e01e      	b.n	1004b842 <__sflush_r+0xfa>
1004b804:	690e      	ldr	r6, [r1, #16]
1004b806:	2e00      	cmp	r6, #0
1004b808:	d0fa      	beq.n	1004b800 <__sflush_r+0xb8>
1004b80a:	680f      	ldr	r7, [r1, #0]
1004b80c:	600e      	str	r6, [r1, #0]
1004b80e:	1bba      	subs	r2, r7, r6
1004b810:	9201      	str	r2, [sp, #4]
1004b812:	2200      	movs	r2, #0
1004b814:	079b      	lsls	r3, r3, #30
1004b816:	d100      	bne.n	1004b81a <__sflush_r+0xd2>
1004b818:	694a      	ldr	r2, [r1, #20]
1004b81a:	60a2      	str	r2, [r4, #8]
1004b81c:	9b01      	ldr	r3, [sp, #4]
1004b81e:	2b00      	cmp	r3, #0
1004b820:	ddee      	ble.n	1004b800 <__sflush_r+0xb8>
1004b822:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
1004b824:	0032      	movs	r2, r6
1004b826:	001f      	movs	r7, r3
1004b828:	0028      	movs	r0, r5
1004b82a:	9b01      	ldr	r3, [sp, #4]
1004b82c:	6a21      	ldr	r1, [r4, #32]
1004b82e:	47b8      	blx	r7
1004b830:	2800      	cmp	r0, #0
1004b832:	dc07      	bgt.n	1004b844 <__sflush_r+0xfc>
1004b834:	89a2      	ldrh	r2, [r4, #12]
1004b836:	2340      	movs	r3, #64	@ 0x40
1004b838:	2001      	movs	r0, #1
1004b83a:	4313      	orrs	r3, r2
1004b83c:	b21b      	sxth	r3, r3
1004b83e:	81a3      	strh	r3, [r4, #12]
1004b840:	4240      	negs	r0, r0
1004b842:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
1004b844:	9b01      	ldr	r3, [sp, #4]
1004b846:	1836      	adds	r6, r6, r0
1004b848:	1a1b      	subs	r3, r3, r0
1004b84a:	9301      	str	r3, [sp, #4]
1004b84c:	e7e6      	b.n	1004b81c <__sflush_r+0xd4>
1004b84e:	46c0      	nop			@ (mov r8, r8)
1004b850:	dfbffffe 	.word	0xdfbffffe

1004b854 <_fflush_r>:
1004b854:	690b      	ldr	r3, [r1, #16]
1004b856:	b570      	push	{r4, r5, r6, lr}
1004b858:	0005      	movs	r5, r0
1004b85a:	000c      	movs	r4, r1
1004b85c:	2b00      	cmp	r3, #0
1004b85e:	d102      	bne.n	1004b866 <_fflush_r+0x12>
1004b860:	2500      	movs	r5, #0
1004b862:	0028      	movs	r0, r5
1004b864:	bd70      	pop	{r4, r5, r6, pc}
1004b866:	2800      	cmp	r0, #0
1004b868:	d004      	beq.n	1004b874 <_fflush_r+0x20>
1004b86a:	6a03      	ldr	r3, [r0, #32]
1004b86c:	2b00      	cmp	r3, #0
1004b86e:	d101      	bne.n	1004b874 <_fflush_r+0x20>
1004b870:	f7fe fb42 	bl	10049ef8 <__sinit>
1004b874:	220c      	movs	r2, #12
1004b876:	5ea3      	ldrsh	r3, [r4, r2]
1004b878:	2b00      	cmp	r3, #0
1004b87a:	d0f1      	beq.n	1004b860 <_fflush_r+0xc>
1004b87c:	6e62      	ldr	r2, [r4, #100]	@ 0x64
1004b87e:	07d2      	lsls	r2, r2, #31
1004b880:	d404      	bmi.n	1004b88c <_fflush_r+0x38>
1004b882:	059b      	lsls	r3, r3, #22
1004b884:	d402      	bmi.n	1004b88c <_fflush_r+0x38>
1004b886:	6da0      	ldr	r0, [r4, #88]	@ 0x58
1004b888:	f7fe fc25 	bl	1004a0d6 <__retarget_lock_acquire_recursive>
1004b88c:	0028      	movs	r0, r5
1004b88e:	0021      	movs	r1, r4
1004b890:	f7ff ff5a 	bl	1004b748 <__sflush_r>
1004b894:	6e63      	ldr	r3, [r4, #100]	@ 0x64
1004b896:	0005      	movs	r5, r0
1004b898:	07db      	lsls	r3, r3, #31
1004b89a:	d4e2      	bmi.n	1004b862 <_fflush_r+0xe>
1004b89c:	89a3      	ldrh	r3, [r4, #12]
1004b89e:	059b      	lsls	r3, r3, #22
1004b8a0:	d4df      	bmi.n	1004b862 <_fflush_r+0xe>
1004b8a2:	6da0      	ldr	r0, [r4, #88]	@ 0x58
1004b8a4:	f7fe fc18 	bl	1004a0d8 <__retarget_lock_release_recursive>
1004b8a8:	e7db      	b.n	1004b862 <_fflush_r+0xe>
	...

1004b8ac <_sbrk_r>:
1004b8ac:	2300      	movs	r3, #0
1004b8ae:	b570      	push	{r4, r5, r6, lr}
1004b8b0:	4d06      	ldr	r5, [pc, #24]	@ (1004b8cc <_sbrk_r+0x20>)
1004b8b2:	0004      	movs	r4, r0
1004b8b4:	0008      	movs	r0, r1
1004b8b6:	602b      	str	r3, [r5, #0]
1004b8b8:	f7f7 fe16 	bl	100434e8 <_sbrk>
1004b8bc:	1c43      	adds	r3, r0, #1
1004b8be:	d103      	bne.n	1004b8c8 <_sbrk_r+0x1c>
1004b8c0:	682b      	ldr	r3, [r5, #0]
1004b8c2:	2b00      	cmp	r3, #0
1004b8c4:	d000      	beq.n	1004b8c8 <_sbrk_r+0x1c>
1004b8c6:	6023      	str	r3, [r4, #0]
1004b8c8:	bd70      	pop	{r4, r5, r6, pc}
1004b8ca:	46c0      	nop			@ (mov r8, r8)
1004b8cc:	20000ae4 	.word	0x20000ae4

1004b8d0 <memcpy>:
1004b8d0:	2300      	movs	r3, #0
1004b8d2:	b510      	push	{r4, lr}
1004b8d4:	429a      	cmp	r2, r3
1004b8d6:	d100      	bne.n	1004b8da <memcpy+0xa>
1004b8d8:	bd10      	pop	{r4, pc}
1004b8da:	5ccc      	ldrb	r4, [r1, r3]
1004b8dc:	54c4      	strb	r4, [r0, r3]
1004b8de:	3301      	adds	r3, #1
1004b8e0:	e7f8      	b.n	1004b8d4 <memcpy+0x4>
	...

1004b8e4 <__assert_func>:
1004b8e4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
1004b8e6:	0014      	movs	r4, r2
1004b8e8:	001a      	movs	r2, r3
1004b8ea:	4b09      	ldr	r3, [pc, #36]	@ (1004b910 <__assert_func+0x2c>)
1004b8ec:	0005      	movs	r5, r0
1004b8ee:	681b      	ldr	r3, [r3, #0]
1004b8f0:	000e      	movs	r6, r1
1004b8f2:	68d8      	ldr	r0, [r3, #12]
1004b8f4:	4b07      	ldr	r3, [pc, #28]	@ (1004b914 <__assert_func+0x30>)
1004b8f6:	2c00      	cmp	r4, #0
1004b8f8:	d101      	bne.n	1004b8fe <__assert_func+0x1a>
1004b8fa:	4b07      	ldr	r3, [pc, #28]	@ (1004b918 <__assert_func+0x34>)
1004b8fc:	001c      	movs	r4, r3
1004b8fe:	4907      	ldr	r1, [pc, #28]	@ (1004b91c <__assert_func+0x38>)
1004b900:	9301      	str	r3, [sp, #4]
1004b902:	9402      	str	r4, [sp, #8]
1004b904:	002b      	movs	r3, r5
1004b906:	9600      	str	r6, [sp, #0]
1004b908:	f000 f856 	bl	1004b9b8 <fiprintf>
1004b90c:	f000 f864 	bl	1004b9d8 <abort>
1004b910:	20000b6c 	.word	0x20000b6c
1004b914:	1004c1fa 	.word	0x1004c1fa
1004b918:	1004c235 	.word	0x1004c235
1004b91c:	1004c207 	.word	0x1004c207

1004b920 <_calloc_r>:
1004b920:	b570      	push	{r4, r5, r6, lr}
1004b922:	0c0b      	lsrs	r3, r1, #16
1004b924:	0c15      	lsrs	r5, r2, #16
1004b926:	2b00      	cmp	r3, #0
1004b928:	d11e      	bne.n	1004b968 <_calloc_r+0x48>
1004b92a:	2d00      	cmp	r5, #0
1004b92c:	d10c      	bne.n	1004b948 <_calloc_r+0x28>
1004b92e:	b289      	uxth	r1, r1
1004b930:	b294      	uxth	r4, r2
1004b932:	434c      	muls	r4, r1
1004b934:	0021      	movs	r1, r4
1004b936:	f7ff fad3 	bl	1004aee0 <_malloc_r>
1004b93a:	1e05      	subs	r5, r0, #0
1004b93c:	d01a      	beq.n	1004b974 <_calloc_r+0x54>
1004b93e:	0022      	movs	r2, r4
1004b940:	2100      	movs	r1, #0
1004b942:	f7fe fb67 	bl	1004a014 <memset>
1004b946:	e016      	b.n	1004b976 <_calloc_r+0x56>
1004b948:	1c2b      	adds	r3, r5, #0
1004b94a:	1c0c      	adds	r4, r1, #0
1004b94c:	b289      	uxth	r1, r1
1004b94e:	b292      	uxth	r2, r2
1004b950:	434a      	muls	r2, r1
1004b952:	b29b      	uxth	r3, r3
1004b954:	b2a1      	uxth	r1, r4
1004b956:	4359      	muls	r1, r3
1004b958:	0c14      	lsrs	r4, r2, #16
1004b95a:	190c      	adds	r4, r1, r4
1004b95c:	0c23      	lsrs	r3, r4, #16
1004b95e:	d107      	bne.n	1004b970 <_calloc_r+0x50>
1004b960:	0424      	lsls	r4, r4, #16
1004b962:	b292      	uxth	r2, r2
1004b964:	4314      	orrs	r4, r2
1004b966:	e7e5      	b.n	1004b934 <_calloc_r+0x14>
1004b968:	2d00      	cmp	r5, #0
1004b96a:	d101      	bne.n	1004b970 <_calloc_r+0x50>
1004b96c:	1c14      	adds	r4, r2, #0
1004b96e:	e7ed      	b.n	1004b94c <_calloc_r+0x2c>
1004b970:	230c      	movs	r3, #12
1004b972:	6003      	str	r3, [r0, #0]
1004b974:	2500      	movs	r5, #0
1004b976:	0028      	movs	r0, r5
1004b978:	bd70      	pop	{r4, r5, r6, pc}

1004b97a <__ascii_mbtowc>:
1004b97a:	b082      	sub	sp, #8
1004b97c:	2900      	cmp	r1, #0
1004b97e:	d100      	bne.n	1004b982 <__ascii_mbtowc+0x8>
1004b980:	a901      	add	r1, sp, #4
1004b982:	1e10      	subs	r0, r2, #0
1004b984:	d006      	beq.n	1004b994 <__ascii_mbtowc+0x1a>
1004b986:	2b00      	cmp	r3, #0
1004b988:	d006      	beq.n	1004b998 <__ascii_mbtowc+0x1e>
1004b98a:	7813      	ldrb	r3, [r2, #0]
1004b98c:	600b      	str	r3, [r1, #0]
1004b98e:	7810      	ldrb	r0, [r2, #0]
1004b990:	1e43      	subs	r3, r0, #1
1004b992:	4198      	sbcs	r0, r3
1004b994:	b002      	add	sp, #8
1004b996:	4770      	bx	lr
1004b998:	2002      	movs	r0, #2
1004b99a:	4240      	negs	r0, r0
1004b99c:	e7fa      	b.n	1004b994 <__ascii_mbtowc+0x1a>

1004b99e <__ascii_wctomb>:
1004b99e:	0003      	movs	r3, r0
1004b9a0:	1e08      	subs	r0, r1, #0
1004b9a2:	d005      	beq.n	1004b9b0 <__ascii_wctomb+0x12>
1004b9a4:	2aff      	cmp	r2, #255	@ 0xff
1004b9a6:	d904      	bls.n	1004b9b2 <__ascii_wctomb+0x14>
1004b9a8:	228a      	movs	r2, #138	@ 0x8a
1004b9aa:	2001      	movs	r0, #1
1004b9ac:	601a      	str	r2, [r3, #0]
1004b9ae:	4240      	negs	r0, r0
1004b9b0:	4770      	bx	lr
1004b9b2:	2001      	movs	r0, #1
1004b9b4:	700a      	strb	r2, [r1, #0]
1004b9b6:	e7fb      	b.n	1004b9b0 <__ascii_wctomb+0x12>

1004b9b8 <fiprintf>:
1004b9b8:	b40e      	push	{r1, r2, r3}
1004b9ba:	b517      	push	{r0, r1, r2, r4, lr}
1004b9bc:	4c05      	ldr	r4, [pc, #20]	@ (1004b9d4 <fiprintf+0x1c>)
1004b9be:	ab05      	add	r3, sp, #20
1004b9c0:	cb04      	ldmia	r3!, {r2}
1004b9c2:	0001      	movs	r1, r0
1004b9c4:	6820      	ldr	r0, [r4, #0]
1004b9c6:	9301      	str	r3, [sp, #4]
1004b9c8:	f000 f834 	bl	1004ba34 <_vfiprintf_r>
1004b9cc:	bc1e      	pop	{r1, r2, r3, r4}
1004b9ce:	bc08      	pop	{r3}
1004b9d0:	b003      	add	sp, #12
1004b9d2:	4718      	bx	r3
1004b9d4:	20000b6c 	.word	0x20000b6c

1004b9d8 <abort>:
1004b9d8:	2006      	movs	r0, #6
1004b9da:	b510      	push	{r4, lr}
1004b9dc:	f000 fa10 	bl	1004be00 <raise>
1004b9e0:	2001      	movs	r0, #1
1004b9e2:	f7f7 fd0e 	bl	10043402 <_exit>

1004b9e6 <__sfputc_r>:
1004b9e6:	6893      	ldr	r3, [r2, #8]
1004b9e8:	b510      	push	{r4, lr}
1004b9ea:	3b01      	subs	r3, #1
1004b9ec:	6093      	str	r3, [r2, #8]
1004b9ee:	2b00      	cmp	r3, #0
1004b9f0:	da04      	bge.n	1004b9fc <__sfputc_r+0x16>
1004b9f2:	6994      	ldr	r4, [r2, #24]
1004b9f4:	42a3      	cmp	r3, r4
1004b9f6:	db07      	blt.n	1004ba08 <__sfputc_r+0x22>
1004b9f8:	290a      	cmp	r1, #10
1004b9fa:	d005      	beq.n	1004ba08 <__sfputc_r+0x22>
1004b9fc:	6813      	ldr	r3, [r2, #0]
1004b9fe:	1c58      	adds	r0, r3, #1
1004ba00:	6010      	str	r0, [r2, #0]
1004ba02:	7019      	strb	r1, [r3, #0]
1004ba04:	0008      	movs	r0, r1
1004ba06:	bd10      	pop	{r4, pc}
1004ba08:	f000 f930 	bl	1004bc6c <__swbuf_r>
1004ba0c:	0001      	movs	r1, r0
1004ba0e:	e7f9      	b.n	1004ba04 <__sfputc_r+0x1e>

1004ba10 <__sfputs_r>:
1004ba10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1004ba12:	0006      	movs	r6, r0
1004ba14:	000f      	movs	r7, r1
1004ba16:	0014      	movs	r4, r2
1004ba18:	18d5      	adds	r5, r2, r3
1004ba1a:	42ac      	cmp	r4, r5
1004ba1c:	d101      	bne.n	1004ba22 <__sfputs_r+0x12>
1004ba1e:	2000      	movs	r0, #0
1004ba20:	e007      	b.n	1004ba32 <__sfputs_r+0x22>
1004ba22:	7821      	ldrb	r1, [r4, #0]
1004ba24:	003a      	movs	r2, r7
1004ba26:	0030      	movs	r0, r6
1004ba28:	f7ff ffdd 	bl	1004b9e6 <__sfputc_r>
1004ba2c:	3401      	adds	r4, #1
1004ba2e:	1c43      	adds	r3, r0, #1
1004ba30:	d1f3      	bne.n	1004ba1a <__sfputs_r+0xa>
1004ba32:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

1004ba34 <_vfiprintf_r>:
1004ba34:	b5f0      	push	{r4, r5, r6, r7, lr}
1004ba36:	b0a1      	sub	sp, #132	@ 0x84
1004ba38:	000f      	movs	r7, r1
1004ba3a:	0015      	movs	r5, r2
1004ba3c:	001e      	movs	r6, r3
1004ba3e:	9003      	str	r0, [sp, #12]
1004ba40:	2800      	cmp	r0, #0
1004ba42:	d004      	beq.n	1004ba4e <_vfiprintf_r+0x1a>
1004ba44:	6a03      	ldr	r3, [r0, #32]
1004ba46:	2b00      	cmp	r3, #0
1004ba48:	d101      	bne.n	1004ba4e <_vfiprintf_r+0x1a>
1004ba4a:	f7fe fa55 	bl	10049ef8 <__sinit>
1004ba4e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
1004ba50:	07db      	lsls	r3, r3, #31
1004ba52:	d405      	bmi.n	1004ba60 <_vfiprintf_r+0x2c>
1004ba54:	89bb      	ldrh	r3, [r7, #12]
1004ba56:	059b      	lsls	r3, r3, #22
1004ba58:	d402      	bmi.n	1004ba60 <_vfiprintf_r+0x2c>
1004ba5a:	6db8      	ldr	r0, [r7, #88]	@ 0x58
1004ba5c:	f7fe fb3b 	bl	1004a0d6 <__retarget_lock_acquire_recursive>
1004ba60:	89bb      	ldrh	r3, [r7, #12]
1004ba62:	071b      	lsls	r3, r3, #28
1004ba64:	d502      	bpl.n	1004ba6c <_vfiprintf_r+0x38>
1004ba66:	693b      	ldr	r3, [r7, #16]
1004ba68:	2b00      	cmp	r3, #0
1004ba6a:	d113      	bne.n	1004ba94 <_vfiprintf_r+0x60>
1004ba6c:	0039      	movs	r1, r7
1004ba6e:	9803      	ldr	r0, [sp, #12]
1004ba70:	f000 f93e 	bl	1004bcf0 <__swsetup_r>
1004ba74:	2800      	cmp	r0, #0
1004ba76:	d00d      	beq.n	1004ba94 <_vfiprintf_r+0x60>
1004ba78:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
1004ba7a:	07db      	lsls	r3, r3, #31
1004ba7c:	d503      	bpl.n	1004ba86 <_vfiprintf_r+0x52>
1004ba7e:	2001      	movs	r0, #1
1004ba80:	4240      	negs	r0, r0
1004ba82:	b021      	add	sp, #132	@ 0x84
1004ba84:	bdf0      	pop	{r4, r5, r6, r7, pc}
1004ba86:	89bb      	ldrh	r3, [r7, #12]
1004ba88:	059b      	lsls	r3, r3, #22
1004ba8a:	d4f8      	bmi.n	1004ba7e <_vfiprintf_r+0x4a>
1004ba8c:	6db8      	ldr	r0, [r7, #88]	@ 0x58
1004ba8e:	f7fe fb23 	bl	1004a0d8 <__retarget_lock_release_recursive>
1004ba92:	e7f4      	b.n	1004ba7e <_vfiprintf_r+0x4a>
1004ba94:	2300      	movs	r3, #0
1004ba96:	ac08      	add	r4, sp, #32
1004ba98:	6163      	str	r3, [r4, #20]
1004ba9a:	3320      	adds	r3, #32
1004ba9c:	7663      	strb	r3, [r4, #25]
1004ba9e:	3310      	adds	r3, #16
1004baa0:	76a3      	strb	r3, [r4, #26]
1004baa2:	9607      	str	r6, [sp, #28]
1004baa4:	002e      	movs	r6, r5
1004baa6:	7833      	ldrb	r3, [r6, #0]
1004baa8:	2b00      	cmp	r3, #0
1004baaa:	d001      	beq.n	1004bab0 <_vfiprintf_r+0x7c>
1004baac:	2b25      	cmp	r3, #37	@ 0x25
1004baae:	d148      	bne.n	1004bb42 <_vfiprintf_r+0x10e>
1004bab0:	1b73      	subs	r3, r6, r5
1004bab2:	9305      	str	r3, [sp, #20]
1004bab4:	42ae      	cmp	r6, r5
1004bab6:	d00b      	beq.n	1004bad0 <_vfiprintf_r+0x9c>
1004bab8:	002a      	movs	r2, r5
1004baba:	0039      	movs	r1, r7
1004babc:	9803      	ldr	r0, [sp, #12]
1004babe:	f7ff ffa7 	bl	1004ba10 <__sfputs_r>
1004bac2:	3001      	adds	r0, #1
1004bac4:	d100      	bne.n	1004bac8 <_vfiprintf_r+0x94>
1004bac6:	e0ae      	b.n	1004bc26 <_vfiprintf_r+0x1f2>
1004bac8:	6963      	ldr	r3, [r4, #20]
1004baca:	9a05      	ldr	r2, [sp, #20]
1004bacc:	189b      	adds	r3, r3, r2
1004bace:	6163      	str	r3, [r4, #20]
1004bad0:	7833      	ldrb	r3, [r6, #0]
1004bad2:	2b00      	cmp	r3, #0
1004bad4:	d100      	bne.n	1004bad8 <_vfiprintf_r+0xa4>
1004bad6:	e0a6      	b.n	1004bc26 <_vfiprintf_r+0x1f2>
1004bad8:	2201      	movs	r2, #1
1004bada:	2300      	movs	r3, #0
1004badc:	4252      	negs	r2, r2
1004bade:	6062      	str	r2, [r4, #4]
1004bae0:	a904      	add	r1, sp, #16
1004bae2:	3254      	adds	r2, #84	@ 0x54
1004bae4:	1852      	adds	r2, r2, r1
1004bae6:	1c75      	adds	r5, r6, #1
1004bae8:	6023      	str	r3, [r4, #0]
1004baea:	60e3      	str	r3, [r4, #12]
1004baec:	60a3      	str	r3, [r4, #8]
1004baee:	7013      	strb	r3, [r2, #0]
1004baf0:	65a3      	str	r3, [r4, #88]	@ 0x58
1004baf2:	4b59      	ldr	r3, [pc, #356]	@ (1004bc58 <_vfiprintf_r+0x224>)
1004baf4:	2205      	movs	r2, #5
1004baf6:	0018      	movs	r0, r3
1004baf8:	7829      	ldrb	r1, [r5, #0]
1004bafa:	9305      	str	r3, [sp, #20]
1004bafc:	f7fe faed 	bl	1004a0da <memchr>
1004bb00:	1c6e      	adds	r6, r5, #1
1004bb02:	2800      	cmp	r0, #0
1004bb04:	d11f      	bne.n	1004bb46 <_vfiprintf_r+0x112>
1004bb06:	6822      	ldr	r2, [r4, #0]
1004bb08:	06d3      	lsls	r3, r2, #27
1004bb0a:	d504      	bpl.n	1004bb16 <_vfiprintf_r+0xe2>
1004bb0c:	2353      	movs	r3, #83	@ 0x53
1004bb0e:	a904      	add	r1, sp, #16
1004bb10:	185b      	adds	r3, r3, r1
1004bb12:	2120      	movs	r1, #32
1004bb14:	7019      	strb	r1, [r3, #0]
1004bb16:	0713      	lsls	r3, r2, #28
1004bb18:	d504      	bpl.n	1004bb24 <_vfiprintf_r+0xf0>
1004bb1a:	2353      	movs	r3, #83	@ 0x53
1004bb1c:	a904      	add	r1, sp, #16
1004bb1e:	185b      	adds	r3, r3, r1
1004bb20:	212b      	movs	r1, #43	@ 0x2b
1004bb22:	7019      	strb	r1, [r3, #0]
1004bb24:	782b      	ldrb	r3, [r5, #0]
1004bb26:	2b2a      	cmp	r3, #42	@ 0x2a
1004bb28:	d016      	beq.n	1004bb58 <_vfiprintf_r+0x124>
1004bb2a:	002e      	movs	r6, r5
1004bb2c:	2100      	movs	r1, #0
1004bb2e:	200a      	movs	r0, #10
1004bb30:	68e3      	ldr	r3, [r4, #12]
1004bb32:	7832      	ldrb	r2, [r6, #0]
1004bb34:	1c75      	adds	r5, r6, #1
1004bb36:	3a30      	subs	r2, #48	@ 0x30
1004bb38:	2a09      	cmp	r2, #9
1004bb3a:	d950      	bls.n	1004bbde <_vfiprintf_r+0x1aa>
1004bb3c:	2900      	cmp	r1, #0
1004bb3e:	d111      	bne.n	1004bb64 <_vfiprintf_r+0x130>
1004bb40:	e017      	b.n	1004bb72 <_vfiprintf_r+0x13e>
1004bb42:	3601      	adds	r6, #1
1004bb44:	e7af      	b.n	1004baa6 <_vfiprintf_r+0x72>
1004bb46:	9b05      	ldr	r3, [sp, #20]
1004bb48:	6822      	ldr	r2, [r4, #0]
1004bb4a:	1ac0      	subs	r0, r0, r3
1004bb4c:	2301      	movs	r3, #1
1004bb4e:	4083      	lsls	r3, r0
1004bb50:	4313      	orrs	r3, r2
1004bb52:	0035      	movs	r5, r6
1004bb54:	6023      	str	r3, [r4, #0]
1004bb56:	e7cc      	b.n	1004baf2 <_vfiprintf_r+0xbe>
1004bb58:	9b07      	ldr	r3, [sp, #28]
1004bb5a:	1d19      	adds	r1, r3, #4
1004bb5c:	681b      	ldr	r3, [r3, #0]
1004bb5e:	9107      	str	r1, [sp, #28]
1004bb60:	2b00      	cmp	r3, #0
1004bb62:	db01      	blt.n	1004bb68 <_vfiprintf_r+0x134>
1004bb64:	930b      	str	r3, [sp, #44]	@ 0x2c
1004bb66:	e004      	b.n	1004bb72 <_vfiprintf_r+0x13e>
1004bb68:	425b      	negs	r3, r3
1004bb6a:	60e3      	str	r3, [r4, #12]
1004bb6c:	2302      	movs	r3, #2
1004bb6e:	4313      	orrs	r3, r2
1004bb70:	6023      	str	r3, [r4, #0]
1004bb72:	7833      	ldrb	r3, [r6, #0]
1004bb74:	2b2e      	cmp	r3, #46	@ 0x2e
1004bb76:	d10c      	bne.n	1004bb92 <_vfiprintf_r+0x15e>
1004bb78:	7873      	ldrb	r3, [r6, #1]
1004bb7a:	2b2a      	cmp	r3, #42	@ 0x2a
1004bb7c:	d134      	bne.n	1004bbe8 <_vfiprintf_r+0x1b4>
1004bb7e:	9b07      	ldr	r3, [sp, #28]
1004bb80:	3602      	adds	r6, #2
1004bb82:	1d1a      	adds	r2, r3, #4
1004bb84:	681b      	ldr	r3, [r3, #0]
1004bb86:	9207      	str	r2, [sp, #28]
1004bb88:	2b00      	cmp	r3, #0
1004bb8a:	da01      	bge.n	1004bb90 <_vfiprintf_r+0x15c>
1004bb8c:	2301      	movs	r3, #1
1004bb8e:	425b      	negs	r3, r3
1004bb90:	9309      	str	r3, [sp, #36]	@ 0x24
1004bb92:	4d32      	ldr	r5, [pc, #200]	@ (1004bc5c <_vfiprintf_r+0x228>)
1004bb94:	2203      	movs	r2, #3
1004bb96:	0028      	movs	r0, r5
1004bb98:	7831      	ldrb	r1, [r6, #0]
1004bb9a:	f7fe fa9e 	bl	1004a0da <memchr>
1004bb9e:	2800      	cmp	r0, #0
1004bba0:	d006      	beq.n	1004bbb0 <_vfiprintf_r+0x17c>
1004bba2:	2340      	movs	r3, #64	@ 0x40
1004bba4:	1b40      	subs	r0, r0, r5
1004bba6:	4083      	lsls	r3, r0
1004bba8:	6822      	ldr	r2, [r4, #0]
1004bbaa:	3601      	adds	r6, #1
1004bbac:	4313      	orrs	r3, r2
1004bbae:	6023      	str	r3, [r4, #0]
1004bbb0:	7831      	ldrb	r1, [r6, #0]
1004bbb2:	2206      	movs	r2, #6
1004bbb4:	482a      	ldr	r0, [pc, #168]	@ (1004bc60 <_vfiprintf_r+0x22c>)
1004bbb6:	1c75      	adds	r5, r6, #1
1004bbb8:	7621      	strb	r1, [r4, #24]
1004bbba:	f7fe fa8e 	bl	1004a0da <memchr>
1004bbbe:	2800      	cmp	r0, #0
1004bbc0:	d040      	beq.n	1004bc44 <_vfiprintf_r+0x210>
1004bbc2:	4b28      	ldr	r3, [pc, #160]	@ (1004bc64 <_vfiprintf_r+0x230>)
1004bbc4:	2b00      	cmp	r3, #0
1004bbc6:	d122      	bne.n	1004bc0e <_vfiprintf_r+0x1da>
1004bbc8:	2207      	movs	r2, #7
1004bbca:	9b07      	ldr	r3, [sp, #28]
1004bbcc:	3307      	adds	r3, #7
1004bbce:	4393      	bics	r3, r2
1004bbd0:	3308      	adds	r3, #8
1004bbd2:	9307      	str	r3, [sp, #28]
1004bbd4:	6963      	ldr	r3, [r4, #20]
1004bbd6:	9a04      	ldr	r2, [sp, #16]
1004bbd8:	189b      	adds	r3, r3, r2
1004bbda:	6163      	str	r3, [r4, #20]
1004bbdc:	e762      	b.n	1004baa4 <_vfiprintf_r+0x70>
1004bbde:	4343      	muls	r3, r0
1004bbe0:	002e      	movs	r6, r5
1004bbe2:	2101      	movs	r1, #1
1004bbe4:	189b      	adds	r3, r3, r2
1004bbe6:	e7a4      	b.n	1004bb32 <_vfiprintf_r+0xfe>
1004bbe8:	2300      	movs	r3, #0
1004bbea:	200a      	movs	r0, #10
1004bbec:	0019      	movs	r1, r3
1004bbee:	3601      	adds	r6, #1
1004bbf0:	6063      	str	r3, [r4, #4]
1004bbf2:	7832      	ldrb	r2, [r6, #0]
1004bbf4:	1c75      	adds	r5, r6, #1
1004bbf6:	3a30      	subs	r2, #48	@ 0x30
1004bbf8:	2a09      	cmp	r2, #9
1004bbfa:	d903      	bls.n	1004bc04 <_vfiprintf_r+0x1d0>
1004bbfc:	2b00      	cmp	r3, #0
1004bbfe:	d0c8      	beq.n	1004bb92 <_vfiprintf_r+0x15e>
1004bc00:	9109      	str	r1, [sp, #36]	@ 0x24
1004bc02:	e7c6      	b.n	1004bb92 <_vfiprintf_r+0x15e>
1004bc04:	4341      	muls	r1, r0
1004bc06:	002e      	movs	r6, r5
1004bc08:	2301      	movs	r3, #1
1004bc0a:	1889      	adds	r1, r1, r2
1004bc0c:	e7f1      	b.n	1004bbf2 <_vfiprintf_r+0x1be>
1004bc0e:	aa07      	add	r2, sp, #28
1004bc10:	9200      	str	r2, [sp, #0]
1004bc12:	0021      	movs	r1, r4
1004bc14:	003a      	movs	r2, r7
1004bc16:	4b14      	ldr	r3, [pc, #80]	@ (1004bc68 <_vfiprintf_r+0x234>)
1004bc18:	9803      	ldr	r0, [sp, #12]
1004bc1a:	f7fd fd21 	bl	10049660 <_printf_float>
1004bc1e:	9004      	str	r0, [sp, #16]
1004bc20:	9b04      	ldr	r3, [sp, #16]
1004bc22:	3301      	adds	r3, #1
1004bc24:	d1d6      	bne.n	1004bbd4 <_vfiprintf_r+0x1a0>
1004bc26:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
1004bc28:	07db      	lsls	r3, r3, #31
1004bc2a:	d405      	bmi.n	1004bc38 <_vfiprintf_r+0x204>
1004bc2c:	89bb      	ldrh	r3, [r7, #12]
1004bc2e:	059b      	lsls	r3, r3, #22
1004bc30:	d402      	bmi.n	1004bc38 <_vfiprintf_r+0x204>
1004bc32:	6db8      	ldr	r0, [r7, #88]	@ 0x58
1004bc34:	f7fe fa50 	bl	1004a0d8 <__retarget_lock_release_recursive>
1004bc38:	89bb      	ldrh	r3, [r7, #12]
1004bc3a:	065b      	lsls	r3, r3, #25
1004bc3c:	d500      	bpl.n	1004bc40 <_vfiprintf_r+0x20c>
1004bc3e:	e71e      	b.n	1004ba7e <_vfiprintf_r+0x4a>
1004bc40:	980d      	ldr	r0, [sp, #52]	@ 0x34
1004bc42:	e71e      	b.n	1004ba82 <_vfiprintf_r+0x4e>
1004bc44:	aa07      	add	r2, sp, #28
1004bc46:	9200      	str	r2, [sp, #0]
1004bc48:	0021      	movs	r1, r4
1004bc4a:	003a      	movs	r2, r7
1004bc4c:	4b06      	ldr	r3, [pc, #24]	@ (1004bc68 <_vfiprintf_r+0x234>)
1004bc4e:	9803      	ldr	r0, [sp, #12]
1004bc50:	f7fd ffb4 	bl	10049bbc <_printf_i>
1004bc54:	e7e3      	b.n	1004bc1e <_vfiprintf_r+0x1ea>
1004bc56:	46c0      	nop			@ (mov r8, r8)
1004bc58:	1004c337 	.word	0x1004c337
1004bc5c:	1004c33d 	.word	0x1004c33d
1004bc60:	1004c341 	.word	0x1004c341
1004bc64:	10049661 	.word	0x10049661
1004bc68:	1004ba11 	.word	0x1004ba11

1004bc6c <__swbuf_r>:
1004bc6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1004bc6e:	0006      	movs	r6, r0
1004bc70:	000d      	movs	r5, r1
1004bc72:	0014      	movs	r4, r2
1004bc74:	2800      	cmp	r0, #0
1004bc76:	d004      	beq.n	1004bc82 <__swbuf_r+0x16>
1004bc78:	6a03      	ldr	r3, [r0, #32]
1004bc7a:	2b00      	cmp	r3, #0
1004bc7c:	d101      	bne.n	1004bc82 <__swbuf_r+0x16>
1004bc7e:	f7fe f93b 	bl	10049ef8 <__sinit>
1004bc82:	69a3      	ldr	r3, [r4, #24]
1004bc84:	60a3      	str	r3, [r4, #8]
1004bc86:	89a3      	ldrh	r3, [r4, #12]
1004bc88:	071b      	lsls	r3, r3, #28
1004bc8a:	d502      	bpl.n	1004bc92 <__swbuf_r+0x26>
1004bc8c:	6923      	ldr	r3, [r4, #16]
1004bc8e:	2b00      	cmp	r3, #0
1004bc90:	d109      	bne.n	1004bca6 <__swbuf_r+0x3a>
1004bc92:	0021      	movs	r1, r4
1004bc94:	0030      	movs	r0, r6
1004bc96:	f000 f82b 	bl	1004bcf0 <__swsetup_r>
1004bc9a:	2800      	cmp	r0, #0
1004bc9c:	d003      	beq.n	1004bca6 <__swbuf_r+0x3a>
1004bc9e:	2501      	movs	r5, #1
1004bca0:	426d      	negs	r5, r5
1004bca2:	0028      	movs	r0, r5
1004bca4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1004bca6:	6923      	ldr	r3, [r4, #16]
1004bca8:	6820      	ldr	r0, [r4, #0]
1004bcaa:	b2ef      	uxtb	r7, r5
1004bcac:	1ac0      	subs	r0, r0, r3
1004bcae:	6963      	ldr	r3, [r4, #20]
1004bcb0:	b2ed      	uxtb	r5, r5
1004bcb2:	4283      	cmp	r3, r0
1004bcb4:	dc05      	bgt.n	1004bcc2 <__swbuf_r+0x56>
1004bcb6:	0021      	movs	r1, r4
1004bcb8:	0030      	movs	r0, r6
1004bcba:	f7ff fdcb 	bl	1004b854 <_fflush_r>
1004bcbe:	2800      	cmp	r0, #0
1004bcc0:	d1ed      	bne.n	1004bc9e <__swbuf_r+0x32>
1004bcc2:	68a3      	ldr	r3, [r4, #8]
1004bcc4:	3001      	adds	r0, #1
1004bcc6:	3b01      	subs	r3, #1
1004bcc8:	60a3      	str	r3, [r4, #8]
1004bcca:	6823      	ldr	r3, [r4, #0]
1004bccc:	1c5a      	adds	r2, r3, #1
1004bcce:	6022      	str	r2, [r4, #0]
1004bcd0:	701f      	strb	r7, [r3, #0]
1004bcd2:	6963      	ldr	r3, [r4, #20]
1004bcd4:	4283      	cmp	r3, r0
1004bcd6:	d004      	beq.n	1004bce2 <__swbuf_r+0x76>
1004bcd8:	89a3      	ldrh	r3, [r4, #12]
1004bcda:	07db      	lsls	r3, r3, #31
1004bcdc:	d5e1      	bpl.n	1004bca2 <__swbuf_r+0x36>
1004bcde:	2d0a      	cmp	r5, #10
1004bce0:	d1df      	bne.n	1004bca2 <__swbuf_r+0x36>
1004bce2:	0021      	movs	r1, r4
1004bce4:	0030      	movs	r0, r6
1004bce6:	f7ff fdb5 	bl	1004b854 <_fflush_r>
1004bcea:	2800      	cmp	r0, #0
1004bcec:	d0d9      	beq.n	1004bca2 <__swbuf_r+0x36>
1004bcee:	e7d6      	b.n	1004bc9e <__swbuf_r+0x32>

1004bcf0 <__swsetup_r>:
1004bcf0:	4b2d      	ldr	r3, [pc, #180]	@ (1004bda8 <__swsetup_r+0xb8>)
1004bcf2:	b570      	push	{r4, r5, r6, lr}
1004bcf4:	0005      	movs	r5, r0
1004bcf6:	6818      	ldr	r0, [r3, #0]
1004bcf8:	000c      	movs	r4, r1
1004bcfa:	2800      	cmp	r0, #0
1004bcfc:	d004      	beq.n	1004bd08 <__swsetup_r+0x18>
1004bcfe:	6a03      	ldr	r3, [r0, #32]
1004bd00:	2b00      	cmp	r3, #0
1004bd02:	d101      	bne.n	1004bd08 <__swsetup_r+0x18>
1004bd04:	f7fe f8f8 	bl	10049ef8 <__sinit>
1004bd08:	230c      	movs	r3, #12
1004bd0a:	5ee2      	ldrsh	r2, [r4, r3]
1004bd0c:	0713      	lsls	r3, r2, #28
1004bd0e:	d423      	bmi.n	1004bd58 <__swsetup_r+0x68>
1004bd10:	06d3      	lsls	r3, r2, #27
1004bd12:	d407      	bmi.n	1004bd24 <__swsetup_r+0x34>
1004bd14:	2309      	movs	r3, #9
1004bd16:	602b      	str	r3, [r5, #0]
1004bd18:	2340      	movs	r3, #64	@ 0x40
1004bd1a:	2001      	movs	r0, #1
1004bd1c:	4313      	orrs	r3, r2
1004bd1e:	81a3      	strh	r3, [r4, #12]
1004bd20:	4240      	negs	r0, r0
1004bd22:	e03a      	b.n	1004bd9a <__swsetup_r+0xaa>
1004bd24:	0752      	lsls	r2, r2, #29
1004bd26:	d513      	bpl.n	1004bd50 <__swsetup_r+0x60>
1004bd28:	6b61      	ldr	r1, [r4, #52]	@ 0x34
1004bd2a:	2900      	cmp	r1, #0
1004bd2c:	d008      	beq.n	1004bd40 <__swsetup_r+0x50>
1004bd2e:	0023      	movs	r3, r4
1004bd30:	3344      	adds	r3, #68	@ 0x44
1004bd32:	4299      	cmp	r1, r3
1004bd34:	d002      	beq.n	1004bd3c <__swsetup_r+0x4c>
1004bd36:	0028      	movs	r0, r5
1004bd38:	f7ff f85c 	bl	1004adf4 <_free_r>
1004bd3c:	2300      	movs	r3, #0
1004bd3e:	6363      	str	r3, [r4, #52]	@ 0x34
1004bd40:	2224      	movs	r2, #36	@ 0x24
1004bd42:	89a3      	ldrh	r3, [r4, #12]
1004bd44:	4393      	bics	r3, r2
1004bd46:	81a3      	strh	r3, [r4, #12]
1004bd48:	2300      	movs	r3, #0
1004bd4a:	6063      	str	r3, [r4, #4]
1004bd4c:	6923      	ldr	r3, [r4, #16]
1004bd4e:	6023      	str	r3, [r4, #0]
1004bd50:	2308      	movs	r3, #8
1004bd52:	89a2      	ldrh	r2, [r4, #12]
1004bd54:	4313      	orrs	r3, r2
1004bd56:	81a3      	strh	r3, [r4, #12]
1004bd58:	6923      	ldr	r3, [r4, #16]
1004bd5a:	2b00      	cmp	r3, #0
1004bd5c:	d10b      	bne.n	1004bd76 <__swsetup_r+0x86>
1004bd5e:	21a0      	movs	r1, #160	@ 0xa0
1004bd60:	2280      	movs	r2, #128	@ 0x80
1004bd62:	89a3      	ldrh	r3, [r4, #12]
1004bd64:	0089      	lsls	r1, r1, #2
1004bd66:	0092      	lsls	r2, r2, #2
1004bd68:	400b      	ands	r3, r1
1004bd6a:	4293      	cmp	r3, r2
1004bd6c:	d003      	beq.n	1004bd76 <__swsetup_r+0x86>
1004bd6e:	0021      	movs	r1, r4
1004bd70:	0028      	movs	r0, r5
1004bd72:	f000 f88f 	bl	1004be94 <__smakebuf_r>
1004bd76:	230c      	movs	r3, #12
1004bd78:	5ee2      	ldrsh	r2, [r4, r3]
1004bd7a:	2101      	movs	r1, #1
1004bd7c:	0013      	movs	r3, r2
1004bd7e:	400b      	ands	r3, r1
1004bd80:	420a      	tst	r2, r1
1004bd82:	d00b      	beq.n	1004bd9c <__swsetup_r+0xac>
1004bd84:	2300      	movs	r3, #0
1004bd86:	60a3      	str	r3, [r4, #8]
1004bd88:	6963      	ldr	r3, [r4, #20]
1004bd8a:	425b      	negs	r3, r3
1004bd8c:	61a3      	str	r3, [r4, #24]
1004bd8e:	2000      	movs	r0, #0
1004bd90:	6923      	ldr	r3, [r4, #16]
1004bd92:	4283      	cmp	r3, r0
1004bd94:	d101      	bne.n	1004bd9a <__swsetup_r+0xaa>
1004bd96:	0613      	lsls	r3, r2, #24
1004bd98:	d4be      	bmi.n	1004bd18 <__swsetup_r+0x28>
1004bd9a:	bd70      	pop	{r4, r5, r6, pc}
1004bd9c:	0791      	lsls	r1, r2, #30
1004bd9e:	d400      	bmi.n	1004bda2 <__swsetup_r+0xb2>
1004bda0:	6963      	ldr	r3, [r4, #20]
1004bda2:	60a3      	str	r3, [r4, #8]
1004bda4:	e7f3      	b.n	1004bd8e <__swsetup_r+0x9e>
1004bda6:	46c0      	nop			@ (mov r8, r8)
1004bda8:	20000b6c 	.word	0x20000b6c

1004bdac <_raise_r>:
1004bdac:	b570      	push	{r4, r5, r6, lr}
1004bdae:	0004      	movs	r4, r0
1004bdb0:	000d      	movs	r5, r1
1004bdb2:	291f      	cmp	r1, #31
1004bdb4:	d904      	bls.n	1004bdc0 <_raise_r+0x14>
1004bdb6:	2316      	movs	r3, #22
1004bdb8:	6003      	str	r3, [r0, #0]
1004bdba:	2001      	movs	r0, #1
1004bdbc:	4240      	negs	r0, r0
1004bdbe:	bd70      	pop	{r4, r5, r6, pc}
1004bdc0:	6bc3      	ldr	r3, [r0, #60]	@ 0x3c
1004bdc2:	2b00      	cmp	r3, #0
1004bdc4:	d004      	beq.n	1004bdd0 <_raise_r+0x24>
1004bdc6:	008a      	lsls	r2, r1, #2
1004bdc8:	189b      	adds	r3, r3, r2
1004bdca:	681a      	ldr	r2, [r3, #0]
1004bdcc:	2a00      	cmp	r2, #0
1004bdce:	d108      	bne.n	1004bde2 <_raise_r+0x36>
1004bdd0:	0020      	movs	r0, r4
1004bdd2:	f000 f831 	bl	1004be38 <_getpid_r>
1004bdd6:	002a      	movs	r2, r5
1004bdd8:	0001      	movs	r1, r0
1004bdda:	0020      	movs	r0, r4
1004bddc:	f000 f81a 	bl	1004be14 <_kill_r>
1004bde0:	e7ed      	b.n	1004bdbe <_raise_r+0x12>
1004bde2:	2a01      	cmp	r2, #1
1004bde4:	d009      	beq.n	1004bdfa <_raise_r+0x4e>
1004bde6:	1c51      	adds	r1, r2, #1
1004bde8:	d103      	bne.n	1004bdf2 <_raise_r+0x46>
1004bdea:	2316      	movs	r3, #22
1004bdec:	6003      	str	r3, [r0, #0]
1004bdee:	2001      	movs	r0, #1
1004bdf0:	e7e5      	b.n	1004bdbe <_raise_r+0x12>
1004bdf2:	2100      	movs	r1, #0
1004bdf4:	0028      	movs	r0, r5
1004bdf6:	6019      	str	r1, [r3, #0]
1004bdf8:	4790      	blx	r2
1004bdfa:	2000      	movs	r0, #0
1004bdfc:	e7df      	b.n	1004bdbe <_raise_r+0x12>
	...

1004be00 <raise>:
1004be00:	b510      	push	{r4, lr}
1004be02:	4b03      	ldr	r3, [pc, #12]	@ (1004be10 <raise+0x10>)
1004be04:	0001      	movs	r1, r0
1004be06:	6818      	ldr	r0, [r3, #0]
1004be08:	f7ff ffd0 	bl	1004bdac <_raise_r>
1004be0c:	bd10      	pop	{r4, pc}
1004be0e:	46c0      	nop			@ (mov r8, r8)
1004be10:	20000b6c 	.word	0x20000b6c

1004be14 <_kill_r>:
1004be14:	2300      	movs	r3, #0
1004be16:	b570      	push	{r4, r5, r6, lr}
1004be18:	4d06      	ldr	r5, [pc, #24]	@ (1004be34 <_kill_r+0x20>)
1004be1a:	0004      	movs	r4, r0
1004be1c:	0008      	movs	r0, r1
1004be1e:	0011      	movs	r1, r2
1004be20:	602b      	str	r3, [r5, #0]
1004be22:	f7f7 fade 	bl	100433e2 <_kill>
1004be26:	1c43      	adds	r3, r0, #1
1004be28:	d103      	bne.n	1004be32 <_kill_r+0x1e>
1004be2a:	682b      	ldr	r3, [r5, #0]
1004be2c:	2b00      	cmp	r3, #0
1004be2e:	d000      	beq.n	1004be32 <_kill_r+0x1e>
1004be30:	6023      	str	r3, [r4, #0]
1004be32:	bd70      	pop	{r4, r5, r6, pc}
1004be34:	20000ae4 	.word	0x20000ae4

1004be38 <_getpid_r>:
1004be38:	b510      	push	{r4, lr}
1004be3a:	f7f7 facc 	bl	100433d6 <_getpid>
1004be3e:	bd10      	pop	{r4, pc}

1004be40 <__swhatbuf_r>:
1004be40:	b570      	push	{r4, r5, r6, lr}
1004be42:	000e      	movs	r6, r1
1004be44:	001d      	movs	r5, r3
1004be46:	230e      	movs	r3, #14
1004be48:	5ec9      	ldrsh	r1, [r1, r3]
1004be4a:	0014      	movs	r4, r2
1004be4c:	b096      	sub	sp, #88	@ 0x58
1004be4e:	2900      	cmp	r1, #0
1004be50:	da0c      	bge.n	1004be6c <__swhatbuf_r+0x2c>
1004be52:	89b2      	ldrh	r2, [r6, #12]
1004be54:	2380      	movs	r3, #128	@ 0x80
1004be56:	0011      	movs	r1, r2
1004be58:	4019      	ands	r1, r3
1004be5a:	421a      	tst	r2, r3
1004be5c:	d114      	bne.n	1004be88 <__swhatbuf_r+0x48>
1004be5e:	2380      	movs	r3, #128	@ 0x80
1004be60:	00db      	lsls	r3, r3, #3
1004be62:	2000      	movs	r0, #0
1004be64:	6029      	str	r1, [r5, #0]
1004be66:	6023      	str	r3, [r4, #0]
1004be68:	b016      	add	sp, #88	@ 0x58
1004be6a:	bd70      	pop	{r4, r5, r6, pc}
1004be6c:	466a      	mov	r2, sp
1004be6e:	f000 f853 	bl	1004bf18 <_fstat_r>
1004be72:	2800      	cmp	r0, #0
1004be74:	dbed      	blt.n	1004be52 <__swhatbuf_r+0x12>
1004be76:	23f0      	movs	r3, #240	@ 0xf0
1004be78:	9901      	ldr	r1, [sp, #4]
1004be7a:	021b      	lsls	r3, r3, #8
1004be7c:	4019      	ands	r1, r3
1004be7e:	4b04      	ldr	r3, [pc, #16]	@ (1004be90 <__swhatbuf_r+0x50>)
1004be80:	18c9      	adds	r1, r1, r3
1004be82:	424b      	negs	r3, r1
1004be84:	4159      	adcs	r1, r3
1004be86:	e7ea      	b.n	1004be5e <__swhatbuf_r+0x1e>
1004be88:	2100      	movs	r1, #0
1004be8a:	2340      	movs	r3, #64	@ 0x40
1004be8c:	e7e9      	b.n	1004be62 <__swhatbuf_r+0x22>
1004be8e:	46c0      	nop			@ (mov r8, r8)
1004be90:	ffffe000 	.word	0xffffe000

1004be94 <__smakebuf_r>:
1004be94:	b5f0      	push	{r4, r5, r6, r7, lr}
1004be96:	2602      	movs	r6, #2
1004be98:	898b      	ldrh	r3, [r1, #12]
1004be9a:	0005      	movs	r5, r0
1004be9c:	000c      	movs	r4, r1
1004be9e:	b085      	sub	sp, #20
1004bea0:	4233      	tst	r3, r6
1004bea2:	d007      	beq.n	1004beb4 <__smakebuf_r+0x20>
1004bea4:	0023      	movs	r3, r4
1004bea6:	3347      	adds	r3, #71	@ 0x47
1004bea8:	6023      	str	r3, [r4, #0]
1004beaa:	6123      	str	r3, [r4, #16]
1004beac:	2301      	movs	r3, #1
1004beae:	6163      	str	r3, [r4, #20]
1004beb0:	b005      	add	sp, #20
1004beb2:	bdf0      	pop	{r4, r5, r6, r7, pc}
1004beb4:	ab03      	add	r3, sp, #12
1004beb6:	aa02      	add	r2, sp, #8
1004beb8:	f7ff ffc2 	bl	1004be40 <__swhatbuf_r>
1004bebc:	9f02      	ldr	r7, [sp, #8]
1004bebe:	9001      	str	r0, [sp, #4]
1004bec0:	0039      	movs	r1, r7
1004bec2:	0028      	movs	r0, r5
1004bec4:	f7ff f80c 	bl	1004aee0 <_malloc_r>
1004bec8:	2800      	cmp	r0, #0
1004beca:	d108      	bne.n	1004bede <__smakebuf_r+0x4a>
1004becc:	220c      	movs	r2, #12
1004bece:	5ea3      	ldrsh	r3, [r4, r2]
1004bed0:	059a      	lsls	r2, r3, #22
1004bed2:	d4ed      	bmi.n	1004beb0 <__smakebuf_r+0x1c>
1004bed4:	2203      	movs	r2, #3
1004bed6:	4393      	bics	r3, r2
1004bed8:	431e      	orrs	r6, r3
1004beda:	81a6      	strh	r6, [r4, #12]
1004bedc:	e7e2      	b.n	1004bea4 <__smakebuf_r+0x10>
1004bede:	2380      	movs	r3, #128	@ 0x80
1004bee0:	89a2      	ldrh	r2, [r4, #12]
1004bee2:	6020      	str	r0, [r4, #0]
1004bee4:	4313      	orrs	r3, r2
1004bee6:	81a3      	strh	r3, [r4, #12]
1004bee8:	9b03      	ldr	r3, [sp, #12]
1004beea:	6120      	str	r0, [r4, #16]
1004beec:	6167      	str	r7, [r4, #20]
1004beee:	2b00      	cmp	r3, #0
1004bef0:	d00c      	beq.n	1004bf0c <__smakebuf_r+0x78>
1004bef2:	0028      	movs	r0, r5
1004bef4:	230e      	movs	r3, #14
1004bef6:	5ee1      	ldrsh	r1, [r4, r3]
1004bef8:	f000 f820 	bl	1004bf3c <_isatty_r>
1004befc:	2800      	cmp	r0, #0
1004befe:	d005      	beq.n	1004bf0c <__smakebuf_r+0x78>
1004bf00:	2303      	movs	r3, #3
1004bf02:	89a2      	ldrh	r2, [r4, #12]
1004bf04:	439a      	bics	r2, r3
1004bf06:	3b02      	subs	r3, #2
1004bf08:	4313      	orrs	r3, r2
1004bf0a:	81a3      	strh	r3, [r4, #12]
1004bf0c:	89a3      	ldrh	r3, [r4, #12]
1004bf0e:	9a01      	ldr	r2, [sp, #4]
1004bf10:	4313      	orrs	r3, r2
1004bf12:	81a3      	strh	r3, [r4, #12]
1004bf14:	e7cc      	b.n	1004beb0 <__smakebuf_r+0x1c>
	...

1004bf18 <_fstat_r>:
1004bf18:	2300      	movs	r3, #0
1004bf1a:	b570      	push	{r4, r5, r6, lr}
1004bf1c:	4d06      	ldr	r5, [pc, #24]	@ (1004bf38 <_fstat_r+0x20>)
1004bf1e:	0004      	movs	r4, r0
1004bf20:	0008      	movs	r0, r1
1004bf22:	0011      	movs	r1, r2
1004bf24:	602b      	str	r3, [r5, #0]
1004bf26:	f7f7 fabc 	bl	100434a2 <_fstat>
1004bf2a:	1c43      	adds	r3, r0, #1
1004bf2c:	d103      	bne.n	1004bf36 <_fstat_r+0x1e>
1004bf2e:	682b      	ldr	r3, [r5, #0]
1004bf30:	2b00      	cmp	r3, #0
1004bf32:	d000      	beq.n	1004bf36 <_fstat_r+0x1e>
1004bf34:	6023      	str	r3, [r4, #0]
1004bf36:	bd70      	pop	{r4, r5, r6, pc}
1004bf38:	20000ae4 	.word	0x20000ae4

1004bf3c <_isatty_r>:
1004bf3c:	2300      	movs	r3, #0
1004bf3e:	b570      	push	{r4, r5, r6, lr}
1004bf40:	4d06      	ldr	r5, [pc, #24]	@ (1004bf5c <_isatty_r+0x20>)
1004bf42:	0004      	movs	r4, r0
1004bf44:	0008      	movs	r0, r1
1004bf46:	602b      	str	r3, [r5, #0]
1004bf48:	f7f7 fab9 	bl	100434be <_isatty>
1004bf4c:	1c43      	adds	r3, r0, #1
1004bf4e:	d103      	bne.n	1004bf58 <_isatty_r+0x1c>
1004bf50:	682b      	ldr	r3, [r5, #0]
1004bf52:	2b00      	cmp	r3, #0
1004bf54:	d000      	beq.n	1004bf58 <_isatty_r+0x1c>
1004bf56:	6023      	str	r3, [r4, #0]
1004bf58:	bd70      	pop	{r4, r5, r6, pc}
1004bf5a:	46c0      	nop			@ (mov r8, r8)
1004bf5c:	20000ae4 	.word	0x20000ae4

Disassembly of section .init:

1004bf60 <_init>:
1004bf60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1004bf62:	46c0      	nop			@ (mov r8, r8)

Disassembly of section .fini:

1004bf64 <_fini>:
1004bf64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1004bf66:	46c0      	nop			@ (mov r8, r8)
