
Clicker_Software.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .intvec       000000c0  10040000  10040000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000be08  100400c0  100400c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .init         00000004  1004bec8  1004bec8  0000cec8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .fini         00000004  1004becc  1004becc  0000cecc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  4 .rodata       000003e0  1004bed0  1004bed0  0000ced0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .ARM          00000008  1004c2b0  1004c2b0  0000d2b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000234  20000af4  1004c2b8  0000daf4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .ram_preamble 0000002c  20000004  20000004  0000e004  2**2
                  ALLOC
  8 .bss.blueRAM  000000bc  200000c0  200000c0  0000e004  2**2
                  ALLOC
  9 .bss          00000978  2000017c  2000017c  0000e004  2**2
                  ALLOC
 10 .noinit       00000000  20000d28  1004c4ec  00000000  2**0
                  ALLOC
 11 .ota_region_end 00000000  1004c4ec  1004c4ec  0000dd28  2**0
                  CONTENTS
 12 .heap         00000000  20000d28  20000d28  0000dd28  2**0
                  CONTENTS
 13 .stack        00000c00  2000f400  2000f400  0000e400  2**0
                  ALLOC
 14 .rom_info     00000000  10000000  10000000  0000dd28  2**0
                  CONTENTS
 15 .ARM.attributes 00000028  00000000  00000000  0000dd28  2**0
                  CONTENTS, READONLY
 16 .debug_line   000130f3  00000000  00000000  0000dd50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line_str 00000089  00000000  00000000  00020e43  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_info   000133fa  00000000  00000000  00020ecc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_abbrev 00002d3e  00000000  00000000  000342c6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_aranges 000011d0  00000000  00000000  00037008  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_str    000b8e09  00000000  00000000  000381d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_rnglists 00000d97  00000000  00000000  000f0fe1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_macro  0001d59f  00000000  00000000  000f1d78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 24 .comment      00000043  00000000  00000000  0010f317  2**0
                  CONTENTS, READONLY
 25 .debug_frame  000050c8  00000000  00000000  0010f35c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

100400c0 <blue_unit_conversion>:
                __CODE__
                __THUMB__
                __EXPORT__ blue_unit_conversion

EXPORT_FUNC(blue_unit_conversion)
                  PUSH    {r4, lr}
100400c0:	b510      	push	{r4, lr}
                  CMP     r0, r2
100400c2:	4290      	cmp	r0, r2
                  BLS     mul32
100400c4:	d916      	bls.n	100400f4 <mul32>
                  UXTH    r2, r1
100400c6:	b28a      	uxth	r2, r1
                  LSRS    r3, r0, #16
100400c8:	0c03      	lsrs	r3, r0, #16
                  LSRS    r1, r1, #16
100400ca:	0c09      	lsrs	r1, r1, #16
                  MOV     r4, r1
100400cc:	460c      	mov	r4, r1
                  MULS    r1, r3, r1
100400ce:	4359      	muls	r1, r3
                  UXTH    r0, r0
100400d0:	b280      	uxth	r0, r0
                  MULS    r3, r2, r3
100400d2:	4353      	muls	r3, r2
                  MULS    r4, r0, r4
100400d4:	4344      	muls	r4, r0
                  MULS    r0, r2, r0
100400d6:	4350      	muls	r0, r2
                  ADDS    r3, r3, r4
100400d8:	191b      	adds	r3, r3, r4
                  LSLS    r2, r3, #16
100400da:	041a      	lsls	r2, r3, #16
                  LSRS    r3, r3, #16
100400dc:	0c1b      	lsrs	r3, r3, #16
                  ADDS    r0, r2, r0
100400de:	1810      	adds	r0, r2, r0
                  ADCS    r1, r3
100400e0:	4159      	adcs	r1, r3

                  MOVS    r2, #128
100400e2:	2280      	movs	r2, #128	@ 0x80
                  LSLS    r2, r2, #13
100400e4:	0352      	lsls	r2, r2, #13
                  MOVS    r3, #0
100400e6:	2300      	movs	r3, #0
                  ADDS    r2, r2, r0
100400e8:	1812      	adds	r2, r2, r0
                  ADCS    r3, r1
100400ea:	414b      	adcs	r3, r1
                  LSRS    r2, r2, #21
100400ec:	0d52      	lsrs	r2, r2, #21
                  LSLS    r0, r3, #11
100400ee:	02d8      	lsls	r0, r3, #11
                  ORRS    r0, r2
100400f0:	4310      	orrs	r0, r2

                  POP {r4, pc}
100400f2:	bd10      	pop	{r4, pc}

100400f4 <mul32>:

                  ENDFUNC

EXPORT_FUNC(mul32)
                  MULS    r0, r1, r0
100400f4:	4348      	muls	r0, r1
                  MOVS    r2, #128
100400f6:	2280      	movs	r2, #128	@ 0x80
                  LSLS    r2, r2, #13
100400f8:	0352      	lsls	r2, r2, #13
                  ADDS    r2, r2, r0
100400fa:	1812      	adds	r2, r2, r0
                  LSRS    r2, r2, #21
100400fc:	0d52      	lsrs	r2, r2, #21
                  MOV     r0, r2
100400fe:	4610      	mov	r0, r2

                  POP {r4, pc}
10040100:	bd10      	pop	{r4, pc}
10040102:	46c0      	nop			@ (mov r8, r8)

10040104 <strlen>:
10040104:	2300      	movs	r3, #0
10040106:	5cc2      	ldrb	r2, [r0, r3]
10040108:	3301      	adds	r3, #1
1004010a:	2a00      	cmp	r2, #0
1004010c:	d1fb      	bne.n	10040106 <strlen+0x2>
1004010e:	1e58      	subs	r0, r3, #1
10040110:	4770      	bx	lr
	...

10040114 <__gnu_thumb1_case_uqi>:
10040114:	b402      	push	{r1}
10040116:	4671      	mov	r1, lr
10040118:	0849      	lsrs	r1, r1, #1
1004011a:	0049      	lsls	r1, r1, #1
1004011c:	5c09      	ldrb	r1, [r1, r0]
1004011e:	0049      	lsls	r1, r1, #1
10040120:	448e      	add	lr, r1
10040122:	bc02      	pop	{r1}
10040124:	4770      	bx	lr
10040126:	46c0      	nop			@ (mov r8, r8)

10040128 <__gnu_thumb1_case_shi>:
10040128:	b403      	push	{r0, r1}
1004012a:	4671      	mov	r1, lr
1004012c:	0849      	lsrs	r1, r1, #1
1004012e:	0040      	lsls	r0, r0, #1
10040130:	0049      	lsls	r1, r1, #1
10040132:	5e09      	ldrsh	r1, [r1, r0]
10040134:	0049      	lsls	r1, r1, #1
10040136:	448e      	add	lr, r1
10040138:	bc03      	pop	{r0, r1}
1004013a:	4770      	bx	lr

1004013c <__udivsi3>:
1004013c:	2200      	movs	r2, #0
1004013e:	0843      	lsrs	r3, r0, #1
10040140:	428b      	cmp	r3, r1
10040142:	d374      	bcc.n	1004022e <__udivsi3+0xf2>
10040144:	0903      	lsrs	r3, r0, #4
10040146:	428b      	cmp	r3, r1
10040148:	d35f      	bcc.n	1004020a <__udivsi3+0xce>
1004014a:	0a03      	lsrs	r3, r0, #8
1004014c:	428b      	cmp	r3, r1
1004014e:	d344      	bcc.n	100401da <__udivsi3+0x9e>
10040150:	0b03      	lsrs	r3, r0, #12
10040152:	428b      	cmp	r3, r1
10040154:	d328      	bcc.n	100401a8 <__udivsi3+0x6c>
10040156:	0c03      	lsrs	r3, r0, #16
10040158:	428b      	cmp	r3, r1
1004015a:	d30d      	bcc.n	10040178 <__udivsi3+0x3c>
1004015c:	22ff      	movs	r2, #255	@ 0xff
1004015e:	0209      	lsls	r1, r1, #8
10040160:	ba12      	rev	r2, r2
10040162:	0c03      	lsrs	r3, r0, #16
10040164:	428b      	cmp	r3, r1
10040166:	d302      	bcc.n	1004016e <__udivsi3+0x32>
10040168:	1212      	asrs	r2, r2, #8
1004016a:	0209      	lsls	r1, r1, #8
1004016c:	d065      	beq.n	1004023a <__udivsi3+0xfe>
1004016e:	0b03      	lsrs	r3, r0, #12
10040170:	428b      	cmp	r3, r1
10040172:	d319      	bcc.n	100401a8 <__udivsi3+0x6c>
10040174:	e000      	b.n	10040178 <__udivsi3+0x3c>
10040176:	0a09      	lsrs	r1, r1, #8
10040178:	0bc3      	lsrs	r3, r0, #15
1004017a:	428b      	cmp	r3, r1
1004017c:	d301      	bcc.n	10040182 <__udivsi3+0x46>
1004017e:	03cb      	lsls	r3, r1, #15
10040180:	1ac0      	subs	r0, r0, r3
10040182:	4152      	adcs	r2, r2
10040184:	0b83      	lsrs	r3, r0, #14
10040186:	428b      	cmp	r3, r1
10040188:	d301      	bcc.n	1004018e <__udivsi3+0x52>
1004018a:	038b      	lsls	r3, r1, #14
1004018c:	1ac0      	subs	r0, r0, r3
1004018e:	4152      	adcs	r2, r2
10040190:	0b43      	lsrs	r3, r0, #13
10040192:	428b      	cmp	r3, r1
10040194:	d301      	bcc.n	1004019a <__udivsi3+0x5e>
10040196:	034b      	lsls	r3, r1, #13
10040198:	1ac0      	subs	r0, r0, r3
1004019a:	4152      	adcs	r2, r2
1004019c:	0b03      	lsrs	r3, r0, #12
1004019e:	428b      	cmp	r3, r1
100401a0:	d301      	bcc.n	100401a6 <__udivsi3+0x6a>
100401a2:	030b      	lsls	r3, r1, #12
100401a4:	1ac0      	subs	r0, r0, r3
100401a6:	4152      	adcs	r2, r2
100401a8:	0ac3      	lsrs	r3, r0, #11
100401aa:	428b      	cmp	r3, r1
100401ac:	d301      	bcc.n	100401b2 <__udivsi3+0x76>
100401ae:	02cb      	lsls	r3, r1, #11
100401b0:	1ac0      	subs	r0, r0, r3
100401b2:	4152      	adcs	r2, r2
100401b4:	0a83      	lsrs	r3, r0, #10
100401b6:	428b      	cmp	r3, r1
100401b8:	d301      	bcc.n	100401be <__udivsi3+0x82>
100401ba:	028b      	lsls	r3, r1, #10
100401bc:	1ac0      	subs	r0, r0, r3
100401be:	4152      	adcs	r2, r2
100401c0:	0a43      	lsrs	r3, r0, #9
100401c2:	428b      	cmp	r3, r1
100401c4:	d301      	bcc.n	100401ca <__udivsi3+0x8e>
100401c6:	024b      	lsls	r3, r1, #9
100401c8:	1ac0      	subs	r0, r0, r3
100401ca:	4152      	adcs	r2, r2
100401cc:	0a03      	lsrs	r3, r0, #8
100401ce:	428b      	cmp	r3, r1
100401d0:	d301      	bcc.n	100401d6 <__udivsi3+0x9a>
100401d2:	020b      	lsls	r3, r1, #8
100401d4:	1ac0      	subs	r0, r0, r3
100401d6:	4152      	adcs	r2, r2
100401d8:	d2cd      	bcs.n	10040176 <__udivsi3+0x3a>
100401da:	09c3      	lsrs	r3, r0, #7
100401dc:	428b      	cmp	r3, r1
100401de:	d301      	bcc.n	100401e4 <__udivsi3+0xa8>
100401e0:	01cb      	lsls	r3, r1, #7
100401e2:	1ac0      	subs	r0, r0, r3
100401e4:	4152      	adcs	r2, r2
100401e6:	0983      	lsrs	r3, r0, #6
100401e8:	428b      	cmp	r3, r1
100401ea:	d301      	bcc.n	100401f0 <__udivsi3+0xb4>
100401ec:	018b      	lsls	r3, r1, #6
100401ee:	1ac0      	subs	r0, r0, r3
100401f0:	4152      	adcs	r2, r2
100401f2:	0943      	lsrs	r3, r0, #5
100401f4:	428b      	cmp	r3, r1
100401f6:	d301      	bcc.n	100401fc <__udivsi3+0xc0>
100401f8:	014b      	lsls	r3, r1, #5
100401fa:	1ac0      	subs	r0, r0, r3
100401fc:	4152      	adcs	r2, r2
100401fe:	0903      	lsrs	r3, r0, #4
10040200:	428b      	cmp	r3, r1
10040202:	d301      	bcc.n	10040208 <__udivsi3+0xcc>
10040204:	010b      	lsls	r3, r1, #4
10040206:	1ac0      	subs	r0, r0, r3
10040208:	4152      	adcs	r2, r2
1004020a:	08c3      	lsrs	r3, r0, #3
1004020c:	428b      	cmp	r3, r1
1004020e:	d301      	bcc.n	10040214 <__udivsi3+0xd8>
10040210:	00cb      	lsls	r3, r1, #3
10040212:	1ac0      	subs	r0, r0, r3
10040214:	4152      	adcs	r2, r2
10040216:	0883      	lsrs	r3, r0, #2
10040218:	428b      	cmp	r3, r1
1004021a:	d301      	bcc.n	10040220 <__udivsi3+0xe4>
1004021c:	008b      	lsls	r3, r1, #2
1004021e:	1ac0      	subs	r0, r0, r3
10040220:	4152      	adcs	r2, r2
10040222:	0843      	lsrs	r3, r0, #1
10040224:	428b      	cmp	r3, r1
10040226:	d301      	bcc.n	1004022c <__udivsi3+0xf0>
10040228:	004b      	lsls	r3, r1, #1
1004022a:	1ac0      	subs	r0, r0, r3
1004022c:	4152      	adcs	r2, r2
1004022e:	1a41      	subs	r1, r0, r1
10040230:	d200      	bcs.n	10040234 <__udivsi3+0xf8>
10040232:	4601      	mov	r1, r0
10040234:	4152      	adcs	r2, r2
10040236:	4610      	mov	r0, r2
10040238:	4770      	bx	lr
1004023a:	e7ff      	b.n	1004023c <__udivsi3+0x100>
1004023c:	b501      	push	{r0, lr}
1004023e:	2000      	movs	r0, #0
10040240:	f000 f8f0 	bl	10040424 <__aeabi_idiv0>
10040244:	bd02      	pop	{r1, pc}
10040246:	46c0      	nop			@ (mov r8, r8)

10040248 <__aeabi_uidivmod>:
10040248:	2900      	cmp	r1, #0
1004024a:	d0f7      	beq.n	1004023c <__udivsi3+0x100>
1004024c:	e776      	b.n	1004013c <__udivsi3>
1004024e:	4770      	bx	lr

10040250 <__divsi3>:
10040250:	4603      	mov	r3, r0
10040252:	430b      	orrs	r3, r1
10040254:	d47f      	bmi.n	10040356 <__divsi3+0x106>
10040256:	2200      	movs	r2, #0
10040258:	0843      	lsrs	r3, r0, #1
1004025a:	428b      	cmp	r3, r1
1004025c:	d374      	bcc.n	10040348 <__divsi3+0xf8>
1004025e:	0903      	lsrs	r3, r0, #4
10040260:	428b      	cmp	r3, r1
10040262:	d35f      	bcc.n	10040324 <__divsi3+0xd4>
10040264:	0a03      	lsrs	r3, r0, #8
10040266:	428b      	cmp	r3, r1
10040268:	d344      	bcc.n	100402f4 <__divsi3+0xa4>
1004026a:	0b03      	lsrs	r3, r0, #12
1004026c:	428b      	cmp	r3, r1
1004026e:	d328      	bcc.n	100402c2 <__divsi3+0x72>
10040270:	0c03      	lsrs	r3, r0, #16
10040272:	428b      	cmp	r3, r1
10040274:	d30d      	bcc.n	10040292 <__divsi3+0x42>
10040276:	22ff      	movs	r2, #255	@ 0xff
10040278:	0209      	lsls	r1, r1, #8
1004027a:	ba12      	rev	r2, r2
1004027c:	0c03      	lsrs	r3, r0, #16
1004027e:	428b      	cmp	r3, r1
10040280:	d302      	bcc.n	10040288 <__divsi3+0x38>
10040282:	1212      	asrs	r2, r2, #8
10040284:	0209      	lsls	r1, r1, #8
10040286:	d065      	beq.n	10040354 <__divsi3+0x104>
10040288:	0b03      	lsrs	r3, r0, #12
1004028a:	428b      	cmp	r3, r1
1004028c:	d319      	bcc.n	100402c2 <__divsi3+0x72>
1004028e:	e000      	b.n	10040292 <__divsi3+0x42>
10040290:	0a09      	lsrs	r1, r1, #8
10040292:	0bc3      	lsrs	r3, r0, #15
10040294:	428b      	cmp	r3, r1
10040296:	d301      	bcc.n	1004029c <__divsi3+0x4c>
10040298:	03cb      	lsls	r3, r1, #15
1004029a:	1ac0      	subs	r0, r0, r3
1004029c:	4152      	adcs	r2, r2
1004029e:	0b83      	lsrs	r3, r0, #14
100402a0:	428b      	cmp	r3, r1
100402a2:	d301      	bcc.n	100402a8 <__divsi3+0x58>
100402a4:	038b      	lsls	r3, r1, #14
100402a6:	1ac0      	subs	r0, r0, r3
100402a8:	4152      	adcs	r2, r2
100402aa:	0b43      	lsrs	r3, r0, #13
100402ac:	428b      	cmp	r3, r1
100402ae:	d301      	bcc.n	100402b4 <__divsi3+0x64>
100402b0:	034b      	lsls	r3, r1, #13
100402b2:	1ac0      	subs	r0, r0, r3
100402b4:	4152      	adcs	r2, r2
100402b6:	0b03      	lsrs	r3, r0, #12
100402b8:	428b      	cmp	r3, r1
100402ba:	d301      	bcc.n	100402c0 <__divsi3+0x70>
100402bc:	030b      	lsls	r3, r1, #12
100402be:	1ac0      	subs	r0, r0, r3
100402c0:	4152      	adcs	r2, r2
100402c2:	0ac3      	lsrs	r3, r0, #11
100402c4:	428b      	cmp	r3, r1
100402c6:	d301      	bcc.n	100402cc <__divsi3+0x7c>
100402c8:	02cb      	lsls	r3, r1, #11
100402ca:	1ac0      	subs	r0, r0, r3
100402cc:	4152      	adcs	r2, r2
100402ce:	0a83      	lsrs	r3, r0, #10
100402d0:	428b      	cmp	r3, r1
100402d2:	d301      	bcc.n	100402d8 <__divsi3+0x88>
100402d4:	028b      	lsls	r3, r1, #10
100402d6:	1ac0      	subs	r0, r0, r3
100402d8:	4152      	adcs	r2, r2
100402da:	0a43      	lsrs	r3, r0, #9
100402dc:	428b      	cmp	r3, r1
100402de:	d301      	bcc.n	100402e4 <__divsi3+0x94>
100402e0:	024b      	lsls	r3, r1, #9
100402e2:	1ac0      	subs	r0, r0, r3
100402e4:	4152      	adcs	r2, r2
100402e6:	0a03      	lsrs	r3, r0, #8
100402e8:	428b      	cmp	r3, r1
100402ea:	d301      	bcc.n	100402f0 <__divsi3+0xa0>
100402ec:	020b      	lsls	r3, r1, #8
100402ee:	1ac0      	subs	r0, r0, r3
100402f0:	4152      	adcs	r2, r2
100402f2:	d2cd      	bcs.n	10040290 <__divsi3+0x40>
100402f4:	09c3      	lsrs	r3, r0, #7
100402f6:	428b      	cmp	r3, r1
100402f8:	d301      	bcc.n	100402fe <__divsi3+0xae>
100402fa:	01cb      	lsls	r3, r1, #7
100402fc:	1ac0      	subs	r0, r0, r3
100402fe:	4152      	adcs	r2, r2
10040300:	0983      	lsrs	r3, r0, #6
10040302:	428b      	cmp	r3, r1
10040304:	d301      	bcc.n	1004030a <__divsi3+0xba>
10040306:	018b      	lsls	r3, r1, #6
10040308:	1ac0      	subs	r0, r0, r3
1004030a:	4152      	adcs	r2, r2
1004030c:	0943      	lsrs	r3, r0, #5
1004030e:	428b      	cmp	r3, r1
10040310:	d301      	bcc.n	10040316 <__divsi3+0xc6>
10040312:	014b      	lsls	r3, r1, #5
10040314:	1ac0      	subs	r0, r0, r3
10040316:	4152      	adcs	r2, r2
10040318:	0903      	lsrs	r3, r0, #4
1004031a:	428b      	cmp	r3, r1
1004031c:	d301      	bcc.n	10040322 <__divsi3+0xd2>
1004031e:	010b      	lsls	r3, r1, #4
10040320:	1ac0      	subs	r0, r0, r3
10040322:	4152      	adcs	r2, r2
10040324:	08c3      	lsrs	r3, r0, #3
10040326:	428b      	cmp	r3, r1
10040328:	d301      	bcc.n	1004032e <__divsi3+0xde>
1004032a:	00cb      	lsls	r3, r1, #3
1004032c:	1ac0      	subs	r0, r0, r3
1004032e:	4152      	adcs	r2, r2
10040330:	0883      	lsrs	r3, r0, #2
10040332:	428b      	cmp	r3, r1
10040334:	d301      	bcc.n	1004033a <__divsi3+0xea>
10040336:	008b      	lsls	r3, r1, #2
10040338:	1ac0      	subs	r0, r0, r3
1004033a:	4152      	adcs	r2, r2
1004033c:	0843      	lsrs	r3, r0, #1
1004033e:	428b      	cmp	r3, r1
10040340:	d301      	bcc.n	10040346 <__divsi3+0xf6>
10040342:	004b      	lsls	r3, r1, #1
10040344:	1ac0      	subs	r0, r0, r3
10040346:	4152      	adcs	r2, r2
10040348:	1a41      	subs	r1, r0, r1
1004034a:	d200      	bcs.n	1004034e <__divsi3+0xfe>
1004034c:	4601      	mov	r1, r0
1004034e:	4152      	adcs	r2, r2
10040350:	4610      	mov	r0, r2
10040352:	4770      	bx	lr
10040354:	e05d      	b.n	10040412 <__divsi3+0x1c2>
10040356:	0fca      	lsrs	r2, r1, #31
10040358:	d000      	beq.n	1004035c <__divsi3+0x10c>
1004035a:	4249      	negs	r1, r1
1004035c:	1003      	asrs	r3, r0, #32
1004035e:	d300      	bcc.n	10040362 <__divsi3+0x112>
10040360:	4240      	negs	r0, r0
10040362:	4053      	eors	r3, r2
10040364:	2200      	movs	r2, #0
10040366:	469c      	mov	ip, r3
10040368:	0903      	lsrs	r3, r0, #4
1004036a:	428b      	cmp	r3, r1
1004036c:	d32d      	bcc.n	100403ca <__divsi3+0x17a>
1004036e:	0a03      	lsrs	r3, r0, #8
10040370:	428b      	cmp	r3, r1
10040372:	d312      	bcc.n	1004039a <__divsi3+0x14a>
10040374:	22fc      	movs	r2, #252	@ 0xfc
10040376:	0189      	lsls	r1, r1, #6
10040378:	ba12      	rev	r2, r2
1004037a:	0a03      	lsrs	r3, r0, #8
1004037c:	428b      	cmp	r3, r1
1004037e:	d30c      	bcc.n	1004039a <__divsi3+0x14a>
10040380:	0189      	lsls	r1, r1, #6
10040382:	1192      	asrs	r2, r2, #6
10040384:	428b      	cmp	r3, r1
10040386:	d308      	bcc.n	1004039a <__divsi3+0x14a>
10040388:	0189      	lsls	r1, r1, #6
1004038a:	1192      	asrs	r2, r2, #6
1004038c:	428b      	cmp	r3, r1
1004038e:	d304      	bcc.n	1004039a <__divsi3+0x14a>
10040390:	0189      	lsls	r1, r1, #6
10040392:	d03a      	beq.n	1004040a <__divsi3+0x1ba>
10040394:	1192      	asrs	r2, r2, #6
10040396:	e000      	b.n	1004039a <__divsi3+0x14a>
10040398:	0989      	lsrs	r1, r1, #6
1004039a:	09c3      	lsrs	r3, r0, #7
1004039c:	428b      	cmp	r3, r1
1004039e:	d301      	bcc.n	100403a4 <__divsi3+0x154>
100403a0:	01cb      	lsls	r3, r1, #7
100403a2:	1ac0      	subs	r0, r0, r3
100403a4:	4152      	adcs	r2, r2
100403a6:	0983      	lsrs	r3, r0, #6
100403a8:	428b      	cmp	r3, r1
100403aa:	d301      	bcc.n	100403b0 <__divsi3+0x160>
100403ac:	018b      	lsls	r3, r1, #6
100403ae:	1ac0      	subs	r0, r0, r3
100403b0:	4152      	adcs	r2, r2
100403b2:	0943      	lsrs	r3, r0, #5
100403b4:	428b      	cmp	r3, r1
100403b6:	d301      	bcc.n	100403bc <__divsi3+0x16c>
100403b8:	014b      	lsls	r3, r1, #5
100403ba:	1ac0      	subs	r0, r0, r3
100403bc:	4152      	adcs	r2, r2
100403be:	0903      	lsrs	r3, r0, #4
100403c0:	428b      	cmp	r3, r1
100403c2:	d301      	bcc.n	100403c8 <__divsi3+0x178>
100403c4:	010b      	lsls	r3, r1, #4
100403c6:	1ac0      	subs	r0, r0, r3
100403c8:	4152      	adcs	r2, r2
100403ca:	08c3      	lsrs	r3, r0, #3
100403cc:	428b      	cmp	r3, r1
100403ce:	d301      	bcc.n	100403d4 <__divsi3+0x184>
100403d0:	00cb      	lsls	r3, r1, #3
100403d2:	1ac0      	subs	r0, r0, r3
100403d4:	4152      	adcs	r2, r2
100403d6:	0883      	lsrs	r3, r0, #2
100403d8:	428b      	cmp	r3, r1
100403da:	d301      	bcc.n	100403e0 <__divsi3+0x190>
100403dc:	008b      	lsls	r3, r1, #2
100403de:	1ac0      	subs	r0, r0, r3
100403e0:	4152      	adcs	r2, r2
100403e2:	d2d9      	bcs.n	10040398 <__divsi3+0x148>
100403e4:	0843      	lsrs	r3, r0, #1
100403e6:	428b      	cmp	r3, r1
100403e8:	d301      	bcc.n	100403ee <__divsi3+0x19e>
100403ea:	004b      	lsls	r3, r1, #1
100403ec:	1ac0      	subs	r0, r0, r3
100403ee:	4152      	adcs	r2, r2
100403f0:	1a41      	subs	r1, r0, r1
100403f2:	d200      	bcs.n	100403f6 <__divsi3+0x1a6>
100403f4:	4601      	mov	r1, r0
100403f6:	4663      	mov	r3, ip
100403f8:	4152      	adcs	r2, r2
100403fa:	105b      	asrs	r3, r3, #1
100403fc:	4610      	mov	r0, r2
100403fe:	d301      	bcc.n	10040404 <__divsi3+0x1b4>
10040400:	4240      	negs	r0, r0
10040402:	2b00      	cmp	r3, #0
10040404:	d500      	bpl.n	10040408 <__divsi3+0x1b8>
10040406:	4249      	negs	r1, r1
10040408:	4770      	bx	lr
1004040a:	4663      	mov	r3, ip
1004040c:	105b      	asrs	r3, r3, #1
1004040e:	d300      	bcc.n	10040412 <__divsi3+0x1c2>
10040410:	4240      	negs	r0, r0
10040412:	b501      	push	{r0, lr}
10040414:	2000      	movs	r0, #0
10040416:	f000 f805 	bl	10040424 <__aeabi_idiv0>
1004041a:	bd02      	pop	{r1, pc}

1004041c <__aeabi_idivmod>:
1004041c:	2900      	cmp	r1, #0
1004041e:	d0f8      	beq.n	10040412 <__divsi3+0x1c2>
10040420:	e716      	b.n	10040250 <__divsi3>
10040422:	4770      	bx	lr

10040424 <__aeabi_idiv0>:
10040424:	4770      	bx	lr
10040426:	46c0      	nop			@ (mov r8, r8)

10040428 <__aeabi_cdrcmple>:
10040428:	4684      	mov	ip, r0
1004042a:	0010      	movs	r0, r2
1004042c:	4662      	mov	r2, ip
1004042e:	468c      	mov	ip, r1
10040430:	0019      	movs	r1, r3
10040432:	4663      	mov	r3, ip
10040434:	e000      	b.n	10040438 <__aeabi_cdcmpeq>
10040436:	46c0      	nop			@ (mov r8, r8)

10040438 <__aeabi_cdcmpeq>:
10040438:	b51f      	push	{r0, r1, r2, r3, r4, lr}
1004043a:	f001 f8a1 	bl	10041580 <__ledf2>
1004043e:	2800      	cmp	r0, #0
10040440:	d401      	bmi.n	10040446 <__aeabi_cdcmpeq+0xe>
10040442:	2100      	movs	r1, #0
10040444:	42c8      	cmn	r0, r1
10040446:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

10040448 <__aeabi_dcmpeq>:
10040448:	b510      	push	{r4, lr}
1004044a:	f000 ffe1 	bl	10041410 <__eqdf2>
1004044e:	4240      	negs	r0, r0
10040450:	3001      	adds	r0, #1
10040452:	bd10      	pop	{r4, pc}

10040454 <__aeabi_dcmplt>:
10040454:	b510      	push	{r4, lr}
10040456:	f001 f893 	bl	10041580 <__ledf2>
1004045a:	2800      	cmp	r0, #0
1004045c:	db01      	blt.n	10040462 <__aeabi_dcmplt+0xe>
1004045e:	2000      	movs	r0, #0
10040460:	bd10      	pop	{r4, pc}
10040462:	2001      	movs	r0, #1
10040464:	bd10      	pop	{r4, pc}
10040466:	46c0      	nop			@ (mov r8, r8)

10040468 <__aeabi_dcmple>:
10040468:	b510      	push	{r4, lr}
1004046a:	f001 f889 	bl	10041580 <__ledf2>
1004046e:	2800      	cmp	r0, #0
10040470:	dd01      	ble.n	10040476 <__aeabi_dcmple+0xe>
10040472:	2000      	movs	r0, #0
10040474:	bd10      	pop	{r4, pc}
10040476:	2001      	movs	r0, #1
10040478:	bd10      	pop	{r4, pc}
1004047a:	46c0      	nop			@ (mov r8, r8)

1004047c <__aeabi_dcmpgt>:
1004047c:	b510      	push	{r4, lr}
1004047e:	f001 f80b 	bl	10041498 <__gedf2>
10040482:	2800      	cmp	r0, #0
10040484:	dc01      	bgt.n	1004048a <__aeabi_dcmpgt+0xe>
10040486:	2000      	movs	r0, #0
10040488:	bd10      	pop	{r4, pc}
1004048a:	2001      	movs	r0, #1
1004048c:	bd10      	pop	{r4, pc}
1004048e:	46c0      	nop			@ (mov r8, r8)

10040490 <__aeabi_dcmpge>:
10040490:	b510      	push	{r4, lr}
10040492:	f001 f801 	bl	10041498 <__gedf2>
10040496:	2800      	cmp	r0, #0
10040498:	da01      	bge.n	1004049e <__aeabi_dcmpge+0xe>
1004049a:	2000      	movs	r0, #0
1004049c:	bd10      	pop	{r4, pc}
1004049e:	2001      	movs	r0, #1
100404a0:	bd10      	pop	{r4, pc}
100404a2:	46c0      	nop			@ (mov r8, r8)

100404a4 <__aeabi_uldivmod>:
100404a4:	2b00      	cmp	r3, #0
100404a6:	d111      	bne.n	100404cc <__aeabi_uldivmod+0x28>
100404a8:	2a00      	cmp	r2, #0
100404aa:	d10f      	bne.n	100404cc <__aeabi_uldivmod+0x28>
100404ac:	2900      	cmp	r1, #0
100404ae:	d100      	bne.n	100404b2 <__aeabi_uldivmod+0xe>
100404b0:	2800      	cmp	r0, #0
100404b2:	d002      	beq.n	100404ba <__aeabi_uldivmod+0x16>
100404b4:	2100      	movs	r1, #0
100404b6:	43c9      	mvns	r1, r1
100404b8:	0008      	movs	r0, r1
100404ba:	b407      	push	{r0, r1, r2}
100404bc:	4802      	ldr	r0, [pc, #8]	@ (100404c8 <__aeabi_uldivmod+0x24>)
100404be:	a102      	add	r1, pc, #8	@ (adr r1, 100404c8 <__aeabi_uldivmod+0x24>)
100404c0:	1840      	adds	r0, r0, r1
100404c2:	9002      	str	r0, [sp, #8]
100404c4:	bd03      	pop	{r0, r1, pc}
100404c6:	46c0      	nop			@ (mov r8, r8)
100404c8:	ffffff5d 	.word	0xffffff5d
100404cc:	b403      	push	{r0, r1}
100404ce:	4668      	mov	r0, sp
100404d0:	b501      	push	{r0, lr}
100404d2:	9802      	ldr	r0, [sp, #8]
100404d4:	f000 f852 	bl	1004057c <__udivmoddi4>
100404d8:	9b01      	ldr	r3, [sp, #4]
100404da:	469e      	mov	lr, r3
100404dc:	b002      	add	sp, #8
100404de:	bc0c      	pop	{r2, r3}
100404e0:	4770      	bx	lr
100404e2:	46c0      	nop			@ (mov r8, r8)

100404e4 <__aeabi_lmul>:
100404e4:	b5f0      	push	{r4, r5, r6, r7, lr}
100404e6:	46ce      	mov	lr, r9
100404e8:	4699      	mov	r9, r3
100404ea:	0c03      	lsrs	r3, r0, #16
100404ec:	469c      	mov	ip, r3
100404ee:	0413      	lsls	r3, r2, #16
100404f0:	4647      	mov	r7, r8
100404f2:	0c1b      	lsrs	r3, r3, #16
100404f4:	001d      	movs	r5, r3
100404f6:	000e      	movs	r6, r1
100404f8:	4661      	mov	r1, ip
100404fa:	0404      	lsls	r4, r0, #16
100404fc:	0c24      	lsrs	r4, r4, #16
100404fe:	b580      	push	{r7, lr}
10040500:	0007      	movs	r7, r0
10040502:	0c10      	lsrs	r0, r2, #16
10040504:	434b      	muls	r3, r1
10040506:	4365      	muls	r5, r4
10040508:	4341      	muls	r1, r0
1004050a:	4360      	muls	r0, r4
1004050c:	0c2c      	lsrs	r4, r5, #16
1004050e:	18c0      	adds	r0, r0, r3
10040510:	1824      	adds	r4, r4, r0
10040512:	468c      	mov	ip, r1
10040514:	42a3      	cmp	r3, r4
10040516:	d903      	bls.n	10040520 <__aeabi_lmul+0x3c>
10040518:	2380      	movs	r3, #128	@ 0x80
1004051a:	025b      	lsls	r3, r3, #9
1004051c:	4698      	mov	r8, r3
1004051e:	44c4      	add	ip, r8
10040520:	4649      	mov	r1, r9
10040522:	4379      	muls	r1, r7
10040524:	4356      	muls	r6, r2
10040526:	0c23      	lsrs	r3, r4, #16
10040528:	042d      	lsls	r5, r5, #16
1004052a:	0c2d      	lsrs	r5, r5, #16
1004052c:	1989      	adds	r1, r1, r6
1004052e:	4463      	add	r3, ip
10040530:	0424      	lsls	r4, r4, #16
10040532:	1960      	adds	r0, r4, r5
10040534:	18c9      	adds	r1, r1, r3
10040536:	bcc0      	pop	{r6, r7}
10040538:	46b9      	mov	r9, r7
1004053a:	46b0      	mov	r8, r6
1004053c:	bdf0      	pop	{r4, r5, r6, r7, pc}
1004053e:	46c0      	nop			@ (mov r8, r8)

10040540 <__aeabi_d2uiz>:
10040540:	b570      	push	{r4, r5, r6, lr}
10040542:	2200      	movs	r2, #0
10040544:	4b0c      	ldr	r3, [pc, #48]	@ (10040578 <__aeabi_d2uiz+0x38>)
10040546:	0004      	movs	r4, r0
10040548:	000d      	movs	r5, r1
1004054a:	f7ff ffa1 	bl	10040490 <__aeabi_dcmpge>
1004054e:	2800      	cmp	r0, #0
10040550:	d104      	bne.n	1004055c <__aeabi_d2uiz+0x1c>
10040552:	0020      	movs	r0, r4
10040554:	0029      	movs	r1, r5
10040556:	f001 ff0b 	bl	10042370 <__aeabi_d2iz>
1004055a:	bd70      	pop	{r4, r5, r6, pc}
1004055c:	4b06      	ldr	r3, [pc, #24]	@ (10040578 <__aeabi_d2uiz+0x38>)
1004055e:	2200      	movs	r2, #0
10040560:	0020      	movs	r0, r4
10040562:	0029      	movs	r1, r5
10040564:	f001 fb46 	bl	10041bf4 <__aeabi_dsub>
10040568:	f001 ff02 	bl	10042370 <__aeabi_d2iz>
1004056c:	2380      	movs	r3, #128	@ 0x80
1004056e:	061b      	lsls	r3, r3, #24
10040570:	469c      	mov	ip, r3
10040572:	4460      	add	r0, ip
10040574:	e7f1      	b.n	1004055a <__aeabi_d2uiz+0x1a>
10040576:	46c0      	nop			@ (mov r8, r8)
10040578:	41e00000 	.word	0x41e00000

1004057c <__udivmoddi4>:
1004057c:	b5f0      	push	{r4, r5, r6, r7, lr}
1004057e:	4657      	mov	r7, sl
10040580:	464e      	mov	r6, r9
10040582:	4645      	mov	r5, r8
10040584:	46de      	mov	lr, fp
10040586:	b5e0      	push	{r5, r6, r7, lr}
10040588:	0004      	movs	r4, r0
1004058a:	000d      	movs	r5, r1
1004058c:	4692      	mov	sl, r2
1004058e:	4699      	mov	r9, r3
10040590:	b083      	sub	sp, #12
10040592:	428b      	cmp	r3, r1
10040594:	d830      	bhi.n	100405f8 <__udivmoddi4+0x7c>
10040596:	d02d      	beq.n	100405f4 <__udivmoddi4+0x78>
10040598:	4649      	mov	r1, r9
1004059a:	4650      	mov	r0, sl
1004059c:	f001 ff94 	bl	100424c8 <__clzdi2>
100405a0:	0029      	movs	r1, r5
100405a2:	0006      	movs	r6, r0
100405a4:	0020      	movs	r0, r4
100405a6:	f001 ff8f 	bl	100424c8 <__clzdi2>
100405aa:	1a33      	subs	r3, r6, r0
100405ac:	4698      	mov	r8, r3
100405ae:	3b20      	subs	r3, #32
100405b0:	d434      	bmi.n	1004061c <__udivmoddi4+0xa0>
100405b2:	469b      	mov	fp, r3
100405b4:	4653      	mov	r3, sl
100405b6:	465a      	mov	r2, fp
100405b8:	4093      	lsls	r3, r2
100405ba:	4642      	mov	r2, r8
100405bc:	001f      	movs	r7, r3
100405be:	4653      	mov	r3, sl
100405c0:	4093      	lsls	r3, r2
100405c2:	001e      	movs	r6, r3
100405c4:	42af      	cmp	r7, r5
100405c6:	d83b      	bhi.n	10040640 <__udivmoddi4+0xc4>
100405c8:	42af      	cmp	r7, r5
100405ca:	d100      	bne.n	100405ce <__udivmoddi4+0x52>
100405cc:	e079      	b.n	100406c2 <__udivmoddi4+0x146>
100405ce:	465b      	mov	r3, fp
100405d0:	1ba4      	subs	r4, r4, r6
100405d2:	41bd      	sbcs	r5, r7
100405d4:	2b00      	cmp	r3, #0
100405d6:	da00      	bge.n	100405da <__udivmoddi4+0x5e>
100405d8:	e076      	b.n	100406c8 <__udivmoddi4+0x14c>
100405da:	2200      	movs	r2, #0
100405dc:	2300      	movs	r3, #0
100405de:	9200      	str	r2, [sp, #0]
100405e0:	9301      	str	r3, [sp, #4]
100405e2:	2301      	movs	r3, #1
100405e4:	465a      	mov	r2, fp
100405e6:	4093      	lsls	r3, r2
100405e8:	9301      	str	r3, [sp, #4]
100405ea:	2301      	movs	r3, #1
100405ec:	4642      	mov	r2, r8
100405ee:	4093      	lsls	r3, r2
100405f0:	9300      	str	r3, [sp, #0]
100405f2:	e029      	b.n	10040648 <__udivmoddi4+0xcc>
100405f4:	4282      	cmp	r2, r0
100405f6:	d9cf      	bls.n	10040598 <__udivmoddi4+0x1c>
100405f8:	2200      	movs	r2, #0
100405fa:	2300      	movs	r3, #0
100405fc:	9200      	str	r2, [sp, #0]
100405fe:	9301      	str	r3, [sp, #4]
10040600:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
10040602:	2b00      	cmp	r3, #0
10040604:	d001      	beq.n	1004060a <__udivmoddi4+0x8e>
10040606:	601c      	str	r4, [r3, #0]
10040608:	605d      	str	r5, [r3, #4]
1004060a:	9800      	ldr	r0, [sp, #0]
1004060c:	9901      	ldr	r1, [sp, #4]
1004060e:	b003      	add	sp, #12
10040610:	bcf0      	pop	{r4, r5, r6, r7}
10040612:	46bb      	mov	fp, r7
10040614:	46b2      	mov	sl, r6
10040616:	46a9      	mov	r9, r5
10040618:	46a0      	mov	r8, r4
1004061a:	bdf0      	pop	{r4, r5, r6, r7, pc}
1004061c:	4642      	mov	r2, r8
1004061e:	469b      	mov	fp, r3
10040620:	2320      	movs	r3, #32
10040622:	1a9b      	subs	r3, r3, r2
10040624:	4652      	mov	r2, sl
10040626:	40da      	lsrs	r2, r3
10040628:	4641      	mov	r1, r8
1004062a:	0013      	movs	r3, r2
1004062c:	464a      	mov	r2, r9
1004062e:	408a      	lsls	r2, r1
10040630:	0017      	movs	r7, r2
10040632:	4642      	mov	r2, r8
10040634:	431f      	orrs	r7, r3
10040636:	4653      	mov	r3, sl
10040638:	4093      	lsls	r3, r2
1004063a:	001e      	movs	r6, r3
1004063c:	42af      	cmp	r7, r5
1004063e:	d9c3      	bls.n	100405c8 <__udivmoddi4+0x4c>
10040640:	2200      	movs	r2, #0
10040642:	2300      	movs	r3, #0
10040644:	9200      	str	r2, [sp, #0]
10040646:	9301      	str	r3, [sp, #4]
10040648:	4643      	mov	r3, r8
1004064a:	2b00      	cmp	r3, #0
1004064c:	d0d8      	beq.n	10040600 <__udivmoddi4+0x84>
1004064e:	07fb      	lsls	r3, r7, #31
10040650:	0872      	lsrs	r2, r6, #1
10040652:	431a      	orrs	r2, r3
10040654:	4646      	mov	r6, r8
10040656:	087b      	lsrs	r3, r7, #1
10040658:	e00e      	b.n	10040678 <__udivmoddi4+0xfc>
1004065a:	42ab      	cmp	r3, r5
1004065c:	d101      	bne.n	10040662 <__udivmoddi4+0xe6>
1004065e:	42a2      	cmp	r2, r4
10040660:	d80c      	bhi.n	1004067c <__udivmoddi4+0x100>
10040662:	1aa4      	subs	r4, r4, r2
10040664:	419d      	sbcs	r5, r3
10040666:	2001      	movs	r0, #1
10040668:	1924      	adds	r4, r4, r4
1004066a:	416d      	adcs	r5, r5
1004066c:	2100      	movs	r1, #0
1004066e:	3e01      	subs	r6, #1
10040670:	1824      	adds	r4, r4, r0
10040672:	414d      	adcs	r5, r1
10040674:	2e00      	cmp	r6, #0
10040676:	d006      	beq.n	10040686 <__udivmoddi4+0x10a>
10040678:	42ab      	cmp	r3, r5
1004067a:	d9ee      	bls.n	1004065a <__udivmoddi4+0xde>
1004067c:	3e01      	subs	r6, #1
1004067e:	1924      	adds	r4, r4, r4
10040680:	416d      	adcs	r5, r5
10040682:	2e00      	cmp	r6, #0
10040684:	d1f8      	bne.n	10040678 <__udivmoddi4+0xfc>
10040686:	9800      	ldr	r0, [sp, #0]
10040688:	9901      	ldr	r1, [sp, #4]
1004068a:	465b      	mov	r3, fp
1004068c:	1900      	adds	r0, r0, r4
1004068e:	4169      	adcs	r1, r5
10040690:	2b00      	cmp	r3, #0
10040692:	db24      	blt.n	100406de <__udivmoddi4+0x162>
10040694:	002b      	movs	r3, r5
10040696:	465a      	mov	r2, fp
10040698:	4644      	mov	r4, r8
1004069a:	40d3      	lsrs	r3, r2
1004069c:	002a      	movs	r2, r5
1004069e:	40e2      	lsrs	r2, r4
100406a0:	001c      	movs	r4, r3
100406a2:	465b      	mov	r3, fp
100406a4:	0015      	movs	r5, r2
100406a6:	2b00      	cmp	r3, #0
100406a8:	db2a      	blt.n	10040700 <__udivmoddi4+0x184>
100406aa:	0026      	movs	r6, r4
100406ac:	409e      	lsls	r6, r3
100406ae:	0033      	movs	r3, r6
100406b0:	0026      	movs	r6, r4
100406b2:	4647      	mov	r7, r8
100406b4:	40be      	lsls	r6, r7
100406b6:	0032      	movs	r2, r6
100406b8:	1a80      	subs	r0, r0, r2
100406ba:	4199      	sbcs	r1, r3
100406bc:	9000      	str	r0, [sp, #0]
100406be:	9101      	str	r1, [sp, #4]
100406c0:	e79e      	b.n	10040600 <__udivmoddi4+0x84>
100406c2:	42a3      	cmp	r3, r4
100406c4:	d8bc      	bhi.n	10040640 <__udivmoddi4+0xc4>
100406c6:	e782      	b.n	100405ce <__udivmoddi4+0x52>
100406c8:	4642      	mov	r2, r8
100406ca:	2320      	movs	r3, #32
100406cc:	2100      	movs	r1, #0
100406ce:	1a9b      	subs	r3, r3, r2
100406d0:	2200      	movs	r2, #0
100406d2:	9100      	str	r1, [sp, #0]
100406d4:	9201      	str	r2, [sp, #4]
100406d6:	2201      	movs	r2, #1
100406d8:	40da      	lsrs	r2, r3
100406da:	9201      	str	r2, [sp, #4]
100406dc:	e785      	b.n	100405ea <__udivmoddi4+0x6e>
100406de:	4642      	mov	r2, r8
100406e0:	2320      	movs	r3, #32
100406e2:	1a9b      	subs	r3, r3, r2
100406e4:	002a      	movs	r2, r5
100406e6:	4646      	mov	r6, r8
100406e8:	409a      	lsls	r2, r3
100406ea:	0023      	movs	r3, r4
100406ec:	40f3      	lsrs	r3, r6
100406ee:	4644      	mov	r4, r8
100406f0:	4313      	orrs	r3, r2
100406f2:	002a      	movs	r2, r5
100406f4:	40e2      	lsrs	r2, r4
100406f6:	001c      	movs	r4, r3
100406f8:	465b      	mov	r3, fp
100406fa:	0015      	movs	r5, r2
100406fc:	2b00      	cmp	r3, #0
100406fe:	dad4      	bge.n	100406aa <__udivmoddi4+0x12e>
10040700:	4642      	mov	r2, r8
10040702:	002f      	movs	r7, r5
10040704:	2320      	movs	r3, #32
10040706:	0026      	movs	r6, r4
10040708:	4097      	lsls	r7, r2
1004070a:	1a9b      	subs	r3, r3, r2
1004070c:	40de      	lsrs	r6, r3
1004070e:	003b      	movs	r3, r7
10040710:	4333      	orrs	r3, r6
10040712:	e7cd      	b.n	100406b0 <__udivmoddi4+0x134>

10040714 <__aeabi_dadd>:
10040714:	b5f0      	push	{r4, r5, r6, r7, lr}
10040716:	4657      	mov	r7, sl
10040718:	464e      	mov	r6, r9
1004071a:	4645      	mov	r5, r8
1004071c:	46de      	mov	lr, fp
1004071e:	b5e0      	push	{r5, r6, r7, lr}
10040720:	b083      	sub	sp, #12
10040722:	9000      	str	r0, [sp, #0]
10040724:	9101      	str	r1, [sp, #4]
10040726:	030c      	lsls	r4, r1, #12
10040728:	004f      	lsls	r7, r1, #1
1004072a:	0fce      	lsrs	r6, r1, #31
1004072c:	0a61      	lsrs	r1, r4, #9
1004072e:	9c00      	ldr	r4, [sp, #0]
10040730:	031d      	lsls	r5, r3, #12
10040732:	0f64      	lsrs	r4, r4, #29
10040734:	430c      	orrs	r4, r1
10040736:	9900      	ldr	r1, [sp, #0]
10040738:	9200      	str	r2, [sp, #0]
1004073a:	9301      	str	r3, [sp, #4]
1004073c:	00c8      	lsls	r0, r1, #3
1004073e:	0059      	lsls	r1, r3, #1
10040740:	0d4b      	lsrs	r3, r1, #21
10040742:	4699      	mov	r9, r3
10040744:	9a00      	ldr	r2, [sp, #0]
10040746:	9b01      	ldr	r3, [sp, #4]
10040748:	0a6d      	lsrs	r5, r5, #9
1004074a:	0fd9      	lsrs	r1, r3, #31
1004074c:	0f53      	lsrs	r3, r2, #29
1004074e:	432b      	orrs	r3, r5
10040750:	469a      	mov	sl, r3
10040752:	9b00      	ldr	r3, [sp, #0]
10040754:	0d7f      	lsrs	r7, r7, #21
10040756:	00da      	lsls	r2, r3, #3
10040758:	4694      	mov	ip, r2
1004075a:	464a      	mov	r2, r9
1004075c:	46b0      	mov	r8, r6
1004075e:	1aba      	subs	r2, r7, r2
10040760:	428e      	cmp	r6, r1
10040762:	d100      	bne.n	10040766 <__aeabi_dadd+0x52>
10040764:	e0b0      	b.n	100408c8 <__aeabi_dadd+0x1b4>
10040766:	2a00      	cmp	r2, #0
10040768:	dc00      	bgt.n	1004076c <__aeabi_dadd+0x58>
1004076a:	e078      	b.n	1004085e <__aeabi_dadd+0x14a>
1004076c:	4649      	mov	r1, r9
1004076e:	2900      	cmp	r1, #0
10040770:	d100      	bne.n	10040774 <__aeabi_dadd+0x60>
10040772:	e0e9      	b.n	10040948 <__aeabi_dadd+0x234>
10040774:	49c9      	ldr	r1, [pc, #804]	@ (10040a9c <__aeabi_dadd+0x388>)
10040776:	428f      	cmp	r7, r1
10040778:	d100      	bne.n	1004077c <__aeabi_dadd+0x68>
1004077a:	e195      	b.n	10040aa8 <__aeabi_dadd+0x394>
1004077c:	2501      	movs	r5, #1
1004077e:	2a38      	cmp	r2, #56	@ 0x38
10040780:	dc16      	bgt.n	100407b0 <__aeabi_dadd+0x9c>
10040782:	2180      	movs	r1, #128	@ 0x80
10040784:	4653      	mov	r3, sl
10040786:	0409      	lsls	r1, r1, #16
10040788:	430b      	orrs	r3, r1
1004078a:	469a      	mov	sl, r3
1004078c:	2a1f      	cmp	r2, #31
1004078e:	dd00      	ble.n	10040792 <__aeabi_dadd+0x7e>
10040790:	e1e7      	b.n	10040b62 <__aeabi_dadd+0x44e>
10040792:	2120      	movs	r1, #32
10040794:	4655      	mov	r5, sl
10040796:	1a8b      	subs	r3, r1, r2
10040798:	4661      	mov	r1, ip
1004079a:	409d      	lsls	r5, r3
1004079c:	40d1      	lsrs	r1, r2
1004079e:	430d      	orrs	r5, r1
100407a0:	4661      	mov	r1, ip
100407a2:	4099      	lsls	r1, r3
100407a4:	1e4b      	subs	r3, r1, #1
100407a6:	4199      	sbcs	r1, r3
100407a8:	4653      	mov	r3, sl
100407aa:	40d3      	lsrs	r3, r2
100407ac:	430d      	orrs	r5, r1
100407ae:	1ae4      	subs	r4, r4, r3
100407b0:	1b45      	subs	r5, r0, r5
100407b2:	42a8      	cmp	r0, r5
100407b4:	4180      	sbcs	r0, r0
100407b6:	4240      	negs	r0, r0
100407b8:	1a24      	subs	r4, r4, r0
100407ba:	0223      	lsls	r3, r4, #8
100407bc:	d400      	bmi.n	100407c0 <__aeabi_dadd+0xac>
100407be:	e10f      	b.n	100409e0 <__aeabi_dadd+0x2cc>
100407c0:	0264      	lsls	r4, r4, #9
100407c2:	0a64      	lsrs	r4, r4, #9
100407c4:	2c00      	cmp	r4, #0
100407c6:	d100      	bne.n	100407ca <__aeabi_dadd+0xb6>
100407c8:	e139      	b.n	10040a3e <__aeabi_dadd+0x32a>
100407ca:	0020      	movs	r0, r4
100407cc:	f001 fe5e 	bl	1004248c <__clzsi2>
100407d0:	0003      	movs	r3, r0
100407d2:	3b08      	subs	r3, #8
100407d4:	2120      	movs	r1, #32
100407d6:	0028      	movs	r0, r5
100407d8:	1aca      	subs	r2, r1, r3
100407da:	40d0      	lsrs	r0, r2
100407dc:	409c      	lsls	r4, r3
100407de:	0002      	movs	r2, r0
100407e0:	409d      	lsls	r5, r3
100407e2:	4322      	orrs	r2, r4
100407e4:	429f      	cmp	r7, r3
100407e6:	dd00      	ble.n	100407ea <__aeabi_dadd+0xd6>
100407e8:	e173      	b.n	10040ad2 <__aeabi_dadd+0x3be>
100407ea:	1bd8      	subs	r0, r3, r7
100407ec:	3001      	adds	r0, #1
100407ee:	1a09      	subs	r1, r1, r0
100407f0:	002c      	movs	r4, r5
100407f2:	408d      	lsls	r5, r1
100407f4:	40c4      	lsrs	r4, r0
100407f6:	1e6b      	subs	r3, r5, #1
100407f8:	419d      	sbcs	r5, r3
100407fa:	0013      	movs	r3, r2
100407fc:	40c2      	lsrs	r2, r0
100407fe:	408b      	lsls	r3, r1
10040800:	4325      	orrs	r5, r4
10040802:	2700      	movs	r7, #0
10040804:	0014      	movs	r4, r2
10040806:	431d      	orrs	r5, r3
10040808:	076b      	lsls	r3, r5, #29
1004080a:	d009      	beq.n	10040820 <__aeabi_dadd+0x10c>
1004080c:	230f      	movs	r3, #15
1004080e:	402b      	ands	r3, r5
10040810:	2b04      	cmp	r3, #4
10040812:	d005      	beq.n	10040820 <__aeabi_dadd+0x10c>
10040814:	1d2b      	adds	r3, r5, #4
10040816:	42ab      	cmp	r3, r5
10040818:	41ad      	sbcs	r5, r5
1004081a:	426d      	negs	r5, r5
1004081c:	1964      	adds	r4, r4, r5
1004081e:	001d      	movs	r5, r3
10040820:	0223      	lsls	r3, r4, #8
10040822:	d400      	bmi.n	10040826 <__aeabi_dadd+0x112>
10040824:	e12d      	b.n	10040a82 <__aeabi_dadd+0x36e>
10040826:	4a9d      	ldr	r2, [pc, #628]	@ (10040a9c <__aeabi_dadd+0x388>)
10040828:	3701      	adds	r7, #1
1004082a:	4297      	cmp	r7, r2
1004082c:	d100      	bne.n	10040830 <__aeabi_dadd+0x11c>
1004082e:	e0d3      	b.n	100409d8 <__aeabi_dadd+0x2c4>
10040830:	4646      	mov	r6, r8
10040832:	499b      	ldr	r1, [pc, #620]	@ (10040aa0 <__aeabi_dadd+0x38c>)
10040834:	08ed      	lsrs	r5, r5, #3
10040836:	4021      	ands	r1, r4
10040838:	074a      	lsls	r2, r1, #29
1004083a:	432a      	orrs	r2, r5
1004083c:	057c      	lsls	r4, r7, #21
1004083e:	024d      	lsls	r5, r1, #9
10040840:	0b2d      	lsrs	r5, r5, #12
10040842:	0d64      	lsrs	r4, r4, #21
10040844:	0524      	lsls	r4, r4, #20
10040846:	432c      	orrs	r4, r5
10040848:	07f6      	lsls	r6, r6, #31
1004084a:	4334      	orrs	r4, r6
1004084c:	0010      	movs	r0, r2
1004084e:	0021      	movs	r1, r4
10040850:	b003      	add	sp, #12
10040852:	bcf0      	pop	{r4, r5, r6, r7}
10040854:	46bb      	mov	fp, r7
10040856:	46b2      	mov	sl, r6
10040858:	46a9      	mov	r9, r5
1004085a:	46a0      	mov	r8, r4
1004085c:	bdf0      	pop	{r4, r5, r6, r7, pc}
1004085e:	2a00      	cmp	r2, #0
10040860:	d100      	bne.n	10040864 <__aeabi_dadd+0x150>
10040862:	e084      	b.n	1004096e <__aeabi_dadd+0x25a>
10040864:	464a      	mov	r2, r9
10040866:	1bd2      	subs	r2, r2, r7
10040868:	2f00      	cmp	r7, #0
1004086a:	d000      	beq.n	1004086e <__aeabi_dadd+0x15a>
1004086c:	e16d      	b.n	10040b4a <__aeabi_dadd+0x436>
1004086e:	0025      	movs	r5, r4
10040870:	4305      	orrs	r5, r0
10040872:	d100      	bne.n	10040876 <__aeabi_dadd+0x162>
10040874:	e127      	b.n	10040ac6 <__aeabi_dadd+0x3b2>
10040876:	1e56      	subs	r6, r2, #1
10040878:	2a01      	cmp	r2, #1
1004087a:	d100      	bne.n	1004087e <__aeabi_dadd+0x16a>
1004087c:	e23b      	b.n	10040cf6 <__aeabi_dadd+0x5e2>
1004087e:	4d87      	ldr	r5, [pc, #540]	@ (10040a9c <__aeabi_dadd+0x388>)
10040880:	42aa      	cmp	r2, r5
10040882:	d100      	bne.n	10040886 <__aeabi_dadd+0x172>
10040884:	e26a      	b.n	10040d5c <__aeabi_dadd+0x648>
10040886:	2501      	movs	r5, #1
10040888:	2e38      	cmp	r6, #56	@ 0x38
1004088a:	dc12      	bgt.n	100408b2 <__aeabi_dadd+0x19e>
1004088c:	0032      	movs	r2, r6
1004088e:	2a1f      	cmp	r2, #31
10040890:	dd00      	ble.n	10040894 <__aeabi_dadd+0x180>
10040892:	e1f8      	b.n	10040c86 <__aeabi_dadd+0x572>
10040894:	2620      	movs	r6, #32
10040896:	0025      	movs	r5, r4
10040898:	1ab6      	subs	r6, r6, r2
1004089a:	0007      	movs	r7, r0
1004089c:	4653      	mov	r3, sl
1004089e:	40b0      	lsls	r0, r6
100408a0:	40d4      	lsrs	r4, r2
100408a2:	40b5      	lsls	r5, r6
100408a4:	40d7      	lsrs	r7, r2
100408a6:	1e46      	subs	r6, r0, #1
100408a8:	41b0      	sbcs	r0, r6
100408aa:	1b1b      	subs	r3, r3, r4
100408ac:	469a      	mov	sl, r3
100408ae:	433d      	orrs	r5, r7
100408b0:	4305      	orrs	r5, r0
100408b2:	4662      	mov	r2, ip
100408b4:	1b55      	subs	r5, r2, r5
100408b6:	45ac      	cmp	ip, r5
100408b8:	4192      	sbcs	r2, r2
100408ba:	4653      	mov	r3, sl
100408bc:	4252      	negs	r2, r2
100408be:	000e      	movs	r6, r1
100408c0:	464f      	mov	r7, r9
100408c2:	4688      	mov	r8, r1
100408c4:	1a9c      	subs	r4, r3, r2
100408c6:	e778      	b.n	100407ba <__aeabi_dadd+0xa6>
100408c8:	2a00      	cmp	r2, #0
100408ca:	dc00      	bgt.n	100408ce <__aeabi_dadd+0x1ba>
100408cc:	e08e      	b.n	100409ec <__aeabi_dadd+0x2d8>
100408ce:	4649      	mov	r1, r9
100408d0:	2900      	cmp	r1, #0
100408d2:	d175      	bne.n	100409c0 <__aeabi_dadd+0x2ac>
100408d4:	4661      	mov	r1, ip
100408d6:	4653      	mov	r3, sl
100408d8:	4319      	orrs	r1, r3
100408da:	d100      	bne.n	100408de <__aeabi_dadd+0x1ca>
100408dc:	e0f6      	b.n	10040acc <__aeabi_dadd+0x3b8>
100408de:	1e51      	subs	r1, r2, #1
100408e0:	2a01      	cmp	r2, #1
100408e2:	d100      	bne.n	100408e6 <__aeabi_dadd+0x1d2>
100408e4:	e191      	b.n	10040c0a <__aeabi_dadd+0x4f6>
100408e6:	4d6d      	ldr	r5, [pc, #436]	@ (10040a9c <__aeabi_dadd+0x388>)
100408e8:	42aa      	cmp	r2, r5
100408ea:	d100      	bne.n	100408ee <__aeabi_dadd+0x1da>
100408ec:	e0dc      	b.n	10040aa8 <__aeabi_dadd+0x394>
100408ee:	2501      	movs	r5, #1
100408f0:	2938      	cmp	r1, #56	@ 0x38
100408f2:	dc14      	bgt.n	1004091e <__aeabi_dadd+0x20a>
100408f4:	000a      	movs	r2, r1
100408f6:	2a1f      	cmp	r2, #31
100408f8:	dd00      	ble.n	100408fc <__aeabi_dadd+0x1e8>
100408fa:	e1a2      	b.n	10040c42 <__aeabi_dadd+0x52e>
100408fc:	2120      	movs	r1, #32
100408fe:	4653      	mov	r3, sl
10040900:	1a89      	subs	r1, r1, r2
10040902:	408b      	lsls	r3, r1
10040904:	001d      	movs	r5, r3
10040906:	4663      	mov	r3, ip
10040908:	40d3      	lsrs	r3, r2
1004090a:	431d      	orrs	r5, r3
1004090c:	4663      	mov	r3, ip
1004090e:	408b      	lsls	r3, r1
10040910:	0019      	movs	r1, r3
10040912:	1e4b      	subs	r3, r1, #1
10040914:	4199      	sbcs	r1, r3
10040916:	4653      	mov	r3, sl
10040918:	40d3      	lsrs	r3, r2
1004091a:	430d      	orrs	r5, r1
1004091c:	18e4      	adds	r4, r4, r3
1004091e:	182d      	adds	r5, r5, r0
10040920:	4285      	cmp	r5, r0
10040922:	4180      	sbcs	r0, r0
10040924:	4240      	negs	r0, r0
10040926:	1824      	adds	r4, r4, r0
10040928:	0223      	lsls	r3, r4, #8
1004092a:	d559      	bpl.n	100409e0 <__aeabi_dadd+0x2cc>
1004092c:	4b5b      	ldr	r3, [pc, #364]	@ (10040a9c <__aeabi_dadd+0x388>)
1004092e:	3701      	adds	r7, #1
10040930:	429f      	cmp	r7, r3
10040932:	d051      	beq.n	100409d8 <__aeabi_dadd+0x2c4>
10040934:	2101      	movs	r1, #1
10040936:	4b5a      	ldr	r3, [pc, #360]	@ (10040aa0 <__aeabi_dadd+0x38c>)
10040938:	086a      	lsrs	r2, r5, #1
1004093a:	401c      	ands	r4, r3
1004093c:	4029      	ands	r1, r5
1004093e:	430a      	orrs	r2, r1
10040940:	07e5      	lsls	r5, r4, #31
10040942:	4315      	orrs	r5, r2
10040944:	0864      	lsrs	r4, r4, #1
10040946:	e75f      	b.n	10040808 <__aeabi_dadd+0xf4>
10040948:	4661      	mov	r1, ip
1004094a:	4653      	mov	r3, sl
1004094c:	4319      	orrs	r1, r3
1004094e:	d100      	bne.n	10040952 <__aeabi_dadd+0x23e>
10040950:	e0bc      	b.n	10040acc <__aeabi_dadd+0x3b8>
10040952:	1e51      	subs	r1, r2, #1
10040954:	2a01      	cmp	r2, #1
10040956:	d100      	bne.n	1004095a <__aeabi_dadd+0x246>
10040958:	e164      	b.n	10040c24 <__aeabi_dadd+0x510>
1004095a:	4d50      	ldr	r5, [pc, #320]	@ (10040a9c <__aeabi_dadd+0x388>)
1004095c:	42aa      	cmp	r2, r5
1004095e:	d100      	bne.n	10040962 <__aeabi_dadd+0x24e>
10040960:	e16a      	b.n	10040c38 <__aeabi_dadd+0x524>
10040962:	2501      	movs	r5, #1
10040964:	2938      	cmp	r1, #56	@ 0x38
10040966:	dd00      	ble.n	1004096a <__aeabi_dadd+0x256>
10040968:	e722      	b.n	100407b0 <__aeabi_dadd+0x9c>
1004096a:	000a      	movs	r2, r1
1004096c:	e70e      	b.n	1004078c <__aeabi_dadd+0x78>
1004096e:	4a4d      	ldr	r2, [pc, #308]	@ (10040aa4 <__aeabi_dadd+0x390>)
10040970:	1c7d      	adds	r5, r7, #1
10040972:	4215      	tst	r5, r2
10040974:	d000      	beq.n	10040978 <__aeabi_dadd+0x264>
10040976:	e0d0      	b.n	10040b1a <__aeabi_dadd+0x406>
10040978:	0025      	movs	r5, r4
1004097a:	4662      	mov	r2, ip
1004097c:	4653      	mov	r3, sl
1004097e:	4305      	orrs	r5, r0
10040980:	431a      	orrs	r2, r3
10040982:	2f00      	cmp	r7, #0
10040984:	d000      	beq.n	10040988 <__aeabi_dadd+0x274>
10040986:	e137      	b.n	10040bf8 <__aeabi_dadd+0x4e4>
10040988:	2d00      	cmp	r5, #0
1004098a:	d100      	bne.n	1004098e <__aeabi_dadd+0x27a>
1004098c:	e1a8      	b.n	10040ce0 <__aeabi_dadd+0x5cc>
1004098e:	2a00      	cmp	r2, #0
10040990:	d100      	bne.n	10040994 <__aeabi_dadd+0x280>
10040992:	e16a      	b.n	10040c6a <__aeabi_dadd+0x556>
10040994:	4663      	mov	r3, ip
10040996:	1ac5      	subs	r5, r0, r3
10040998:	4653      	mov	r3, sl
1004099a:	1ae2      	subs	r2, r4, r3
1004099c:	42a8      	cmp	r0, r5
1004099e:	419b      	sbcs	r3, r3
100409a0:	425b      	negs	r3, r3
100409a2:	1ad3      	subs	r3, r2, r3
100409a4:	021a      	lsls	r2, r3, #8
100409a6:	d400      	bmi.n	100409aa <__aeabi_dadd+0x296>
100409a8:	e203      	b.n	10040db2 <__aeabi_dadd+0x69e>
100409aa:	4663      	mov	r3, ip
100409ac:	1a1d      	subs	r5, r3, r0
100409ae:	45ac      	cmp	ip, r5
100409b0:	4192      	sbcs	r2, r2
100409b2:	4653      	mov	r3, sl
100409b4:	4252      	negs	r2, r2
100409b6:	1b1c      	subs	r4, r3, r4
100409b8:	000e      	movs	r6, r1
100409ba:	4688      	mov	r8, r1
100409bc:	1aa4      	subs	r4, r4, r2
100409be:	e723      	b.n	10040808 <__aeabi_dadd+0xf4>
100409c0:	4936      	ldr	r1, [pc, #216]	@ (10040a9c <__aeabi_dadd+0x388>)
100409c2:	428f      	cmp	r7, r1
100409c4:	d070      	beq.n	10040aa8 <__aeabi_dadd+0x394>
100409c6:	2501      	movs	r5, #1
100409c8:	2a38      	cmp	r2, #56	@ 0x38
100409ca:	dca8      	bgt.n	1004091e <__aeabi_dadd+0x20a>
100409cc:	2180      	movs	r1, #128	@ 0x80
100409ce:	4653      	mov	r3, sl
100409d0:	0409      	lsls	r1, r1, #16
100409d2:	430b      	orrs	r3, r1
100409d4:	469a      	mov	sl, r3
100409d6:	e78e      	b.n	100408f6 <__aeabi_dadd+0x1e2>
100409d8:	003c      	movs	r4, r7
100409da:	2500      	movs	r5, #0
100409dc:	2200      	movs	r2, #0
100409de:	e731      	b.n	10040844 <__aeabi_dadd+0x130>
100409e0:	2307      	movs	r3, #7
100409e2:	402b      	ands	r3, r5
100409e4:	2b00      	cmp	r3, #0
100409e6:	d000      	beq.n	100409ea <__aeabi_dadd+0x2d6>
100409e8:	e710      	b.n	1004080c <__aeabi_dadd+0xf8>
100409ea:	e093      	b.n	10040b14 <__aeabi_dadd+0x400>
100409ec:	2a00      	cmp	r2, #0
100409ee:	d074      	beq.n	10040ada <__aeabi_dadd+0x3c6>
100409f0:	464a      	mov	r2, r9
100409f2:	1bd2      	subs	r2, r2, r7
100409f4:	2f00      	cmp	r7, #0
100409f6:	d100      	bne.n	100409fa <__aeabi_dadd+0x2e6>
100409f8:	e0c7      	b.n	10040b8a <__aeabi_dadd+0x476>
100409fa:	4928      	ldr	r1, [pc, #160]	@ (10040a9c <__aeabi_dadd+0x388>)
100409fc:	4589      	cmp	r9, r1
100409fe:	d100      	bne.n	10040a02 <__aeabi_dadd+0x2ee>
10040a00:	e185      	b.n	10040d0e <__aeabi_dadd+0x5fa>
10040a02:	2501      	movs	r5, #1
10040a04:	2a38      	cmp	r2, #56	@ 0x38
10040a06:	dc12      	bgt.n	10040a2e <__aeabi_dadd+0x31a>
10040a08:	2180      	movs	r1, #128	@ 0x80
10040a0a:	0409      	lsls	r1, r1, #16
10040a0c:	430c      	orrs	r4, r1
10040a0e:	2a1f      	cmp	r2, #31
10040a10:	dd00      	ble.n	10040a14 <__aeabi_dadd+0x300>
10040a12:	e1ab      	b.n	10040d6c <__aeabi_dadd+0x658>
10040a14:	2120      	movs	r1, #32
10040a16:	0025      	movs	r5, r4
10040a18:	1a89      	subs	r1, r1, r2
10040a1a:	0007      	movs	r7, r0
10040a1c:	4088      	lsls	r0, r1
10040a1e:	408d      	lsls	r5, r1
10040a20:	40d7      	lsrs	r7, r2
10040a22:	1e41      	subs	r1, r0, #1
10040a24:	4188      	sbcs	r0, r1
10040a26:	40d4      	lsrs	r4, r2
10040a28:	433d      	orrs	r5, r7
10040a2a:	4305      	orrs	r5, r0
10040a2c:	44a2      	add	sl, r4
10040a2e:	4465      	add	r5, ip
10040a30:	4565      	cmp	r5, ip
10040a32:	4192      	sbcs	r2, r2
10040a34:	4252      	negs	r2, r2
10040a36:	4452      	add	r2, sl
10040a38:	0014      	movs	r4, r2
10040a3a:	464f      	mov	r7, r9
10040a3c:	e774      	b.n	10040928 <__aeabi_dadd+0x214>
10040a3e:	0028      	movs	r0, r5
10040a40:	f001 fd24 	bl	1004248c <__clzsi2>
10040a44:	0003      	movs	r3, r0
10040a46:	3318      	adds	r3, #24
10040a48:	2b1f      	cmp	r3, #31
10040a4a:	dc00      	bgt.n	10040a4e <__aeabi_dadd+0x33a>
10040a4c:	e6c2      	b.n	100407d4 <__aeabi_dadd+0xc0>
10040a4e:	002a      	movs	r2, r5
10040a50:	3808      	subs	r0, #8
10040a52:	4082      	lsls	r2, r0
10040a54:	429f      	cmp	r7, r3
10040a56:	dd00      	ble.n	10040a5a <__aeabi_dadd+0x346>
10040a58:	e0a9      	b.n	10040bae <__aeabi_dadd+0x49a>
10040a5a:	1bdb      	subs	r3, r3, r7
10040a5c:	1c58      	adds	r0, r3, #1
10040a5e:	281f      	cmp	r0, #31
10040a60:	dc00      	bgt.n	10040a64 <__aeabi_dadd+0x350>
10040a62:	e1ac      	b.n	10040dbe <__aeabi_dadd+0x6aa>
10040a64:	0015      	movs	r5, r2
10040a66:	3b1f      	subs	r3, #31
10040a68:	40dd      	lsrs	r5, r3
10040a6a:	2820      	cmp	r0, #32
10040a6c:	d005      	beq.n	10040a7a <__aeabi_dadd+0x366>
10040a6e:	2340      	movs	r3, #64	@ 0x40
10040a70:	1a1b      	subs	r3, r3, r0
10040a72:	409a      	lsls	r2, r3
10040a74:	1e53      	subs	r3, r2, #1
10040a76:	419a      	sbcs	r2, r3
10040a78:	4315      	orrs	r5, r2
10040a7a:	2307      	movs	r3, #7
10040a7c:	2700      	movs	r7, #0
10040a7e:	402b      	ands	r3, r5
10040a80:	e7b0      	b.n	100409e4 <__aeabi_dadd+0x2d0>
10040a82:	08ed      	lsrs	r5, r5, #3
10040a84:	4b05      	ldr	r3, [pc, #20]	@ (10040a9c <__aeabi_dadd+0x388>)
10040a86:	0762      	lsls	r2, r4, #29
10040a88:	432a      	orrs	r2, r5
10040a8a:	08e4      	lsrs	r4, r4, #3
10040a8c:	429f      	cmp	r7, r3
10040a8e:	d00f      	beq.n	10040ab0 <__aeabi_dadd+0x39c>
10040a90:	0324      	lsls	r4, r4, #12
10040a92:	0b25      	lsrs	r5, r4, #12
10040a94:	057c      	lsls	r4, r7, #21
10040a96:	0d64      	lsrs	r4, r4, #21
10040a98:	e6d4      	b.n	10040844 <__aeabi_dadd+0x130>
10040a9a:	46c0      	nop			@ (mov r8, r8)
10040a9c:	000007ff 	.word	0x000007ff
10040aa0:	ff7fffff 	.word	0xff7fffff
10040aa4:	000007fe 	.word	0x000007fe
10040aa8:	08c0      	lsrs	r0, r0, #3
10040aaa:	0762      	lsls	r2, r4, #29
10040aac:	4302      	orrs	r2, r0
10040aae:	08e4      	lsrs	r4, r4, #3
10040ab0:	0013      	movs	r3, r2
10040ab2:	4323      	orrs	r3, r4
10040ab4:	d100      	bne.n	10040ab8 <__aeabi_dadd+0x3a4>
10040ab6:	e186      	b.n	10040dc6 <__aeabi_dadd+0x6b2>
10040ab8:	2580      	movs	r5, #128	@ 0x80
10040aba:	032d      	lsls	r5, r5, #12
10040abc:	4325      	orrs	r5, r4
10040abe:	032d      	lsls	r5, r5, #12
10040ac0:	4cc3      	ldr	r4, [pc, #780]	@ (10040dd0 <__aeabi_dadd+0x6bc>)
10040ac2:	0b2d      	lsrs	r5, r5, #12
10040ac4:	e6be      	b.n	10040844 <__aeabi_dadd+0x130>
10040ac6:	4660      	mov	r0, ip
10040ac8:	4654      	mov	r4, sl
10040aca:	000e      	movs	r6, r1
10040acc:	0017      	movs	r7, r2
10040ace:	08c5      	lsrs	r5, r0, #3
10040ad0:	e7d8      	b.n	10040a84 <__aeabi_dadd+0x370>
10040ad2:	4cc0      	ldr	r4, [pc, #768]	@ (10040dd4 <__aeabi_dadd+0x6c0>)
10040ad4:	1aff      	subs	r7, r7, r3
10040ad6:	4014      	ands	r4, r2
10040ad8:	e696      	b.n	10040808 <__aeabi_dadd+0xf4>
10040ada:	4abf      	ldr	r2, [pc, #764]	@ (10040dd8 <__aeabi_dadd+0x6c4>)
10040adc:	1c79      	adds	r1, r7, #1
10040ade:	4211      	tst	r1, r2
10040ae0:	d16b      	bne.n	10040bba <__aeabi_dadd+0x4a6>
10040ae2:	0022      	movs	r2, r4
10040ae4:	4302      	orrs	r2, r0
10040ae6:	2f00      	cmp	r7, #0
10040ae8:	d000      	beq.n	10040aec <__aeabi_dadd+0x3d8>
10040aea:	e0db      	b.n	10040ca4 <__aeabi_dadd+0x590>
10040aec:	2a00      	cmp	r2, #0
10040aee:	d100      	bne.n	10040af2 <__aeabi_dadd+0x3de>
10040af0:	e12d      	b.n	10040d4e <__aeabi_dadd+0x63a>
10040af2:	4662      	mov	r2, ip
10040af4:	4653      	mov	r3, sl
10040af6:	431a      	orrs	r2, r3
10040af8:	d100      	bne.n	10040afc <__aeabi_dadd+0x3e8>
10040afa:	e0b6      	b.n	10040c6a <__aeabi_dadd+0x556>
10040afc:	4663      	mov	r3, ip
10040afe:	18c5      	adds	r5, r0, r3
10040b00:	4285      	cmp	r5, r0
10040b02:	4180      	sbcs	r0, r0
10040b04:	4454      	add	r4, sl
10040b06:	4240      	negs	r0, r0
10040b08:	1824      	adds	r4, r4, r0
10040b0a:	0223      	lsls	r3, r4, #8
10040b0c:	d502      	bpl.n	10040b14 <__aeabi_dadd+0x400>
10040b0e:	000f      	movs	r7, r1
10040b10:	4bb0      	ldr	r3, [pc, #704]	@ (10040dd4 <__aeabi_dadd+0x6c0>)
10040b12:	401c      	ands	r4, r3
10040b14:	003a      	movs	r2, r7
10040b16:	0028      	movs	r0, r5
10040b18:	e7d8      	b.n	10040acc <__aeabi_dadd+0x3b8>
10040b1a:	4662      	mov	r2, ip
10040b1c:	1a85      	subs	r5, r0, r2
10040b1e:	42a8      	cmp	r0, r5
10040b20:	4192      	sbcs	r2, r2
10040b22:	4653      	mov	r3, sl
10040b24:	4252      	negs	r2, r2
10040b26:	4691      	mov	r9, r2
10040b28:	1ae3      	subs	r3, r4, r3
10040b2a:	001a      	movs	r2, r3
10040b2c:	464b      	mov	r3, r9
10040b2e:	1ad2      	subs	r2, r2, r3
10040b30:	0013      	movs	r3, r2
10040b32:	4691      	mov	r9, r2
10040b34:	021a      	lsls	r2, r3, #8
10040b36:	d454      	bmi.n	10040be2 <__aeabi_dadd+0x4ce>
10040b38:	464a      	mov	r2, r9
10040b3a:	464c      	mov	r4, r9
10040b3c:	432a      	orrs	r2, r5
10040b3e:	d000      	beq.n	10040b42 <__aeabi_dadd+0x42e>
10040b40:	e640      	b.n	100407c4 <__aeabi_dadd+0xb0>
10040b42:	2600      	movs	r6, #0
10040b44:	2400      	movs	r4, #0
10040b46:	2500      	movs	r5, #0
10040b48:	e67c      	b.n	10040844 <__aeabi_dadd+0x130>
10040b4a:	4da1      	ldr	r5, [pc, #644]	@ (10040dd0 <__aeabi_dadd+0x6bc>)
10040b4c:	45a9      	cmp	r9, r5
10040b4e:	d100      	bne.n	10040b52 <__aeabi_dadd+0x43e>
10040b50:	e090      	b.n	10040c74 <__aeabi_dadd+0x560>
10040b52:	2501      	movs	r5, #1
10040b54:	2a38      	cmp	r2, #56	@ 0x38
10040b56:	dd00      	ble.n	10040b5a <__aeabi_dadd+0x446>
10040b58:	e6ab      	b.n	100408b2 <__aeabi_dadd+0x19e>
10040b5a:	2580      	movs	r5, #128	@ 0x80
10040b5c:	042d      	lsls	r5, r5, #16
10040b5e:	432c      	orrs	r4, r5
10040b60:	e695      	b.n	1004088e <__aeabi_dadd+0x17a>
10040b62:	0011      	movs	r1, r2
10040b64:	4655      	mov	r5, sl
10040b66:	3920      	subs	r1, #32
10040b68:	40cd      	lsrs	r5, r1
10040b6a:	46a9      	mov	r9, r5
10040b6c:	2a20      	cmp	r2, #32
10040b6e:	d006      	beq.n	10040b7e <__aeabi_dadd+0x46a>
10040b70:	2140      	movs	r1, #64	@ 0x40
10040b72:	4653      	mov	r3, sl
10040b74:	1a8a      	subs	r2, r1, r2
10040b76:	4093      	lsls	r3, r2
10040b78:	4662      	mov	r2, ip
10040b7a:	431a      	orrs	r2, r3
10040b7c:	4694      	mov	ip, r2
10040b7e:	4665      	mov	r5, ip
10040b80:	1e6b      	subs	r3, r5, #1
10040b82:	419d      	sbcs	r5, r3
10040b84:	464b      	mov	r3, r9
10040b86:	431d      	orrs	r5, r3
10040b88:	e612      	b.n	100407b0 <__aeabi_dadd+0x9c>
10040b8a:	0021      	movs	r1, r4
10040b8c:	4301      	orrs	r1, r0
10040b8e:	d100      	bne.n	10040b92 <__aeabi_dadd+0x47e>
10040b90:	e0c4      	b.n	10040d1c <__aeabi_dadd+0x608>
10040b92:	1e51      	subs	r1, r2, #1
10040b94:	2a01      	cmp	r2, #1
10040b96:	d100      	bne.n	10040b9a <__aeabi_dadd+0x486>
10040b98:	e0fb      	b.n	10040d92 <__aeabi_dadd+0x67e>
10040b9a:	4d8d      	ldr	r5, [pc, #564]	@ (10040dd0 <__aeabi_dadd+0x6bc>)
10040b9c:	42aa      	cmp	r2, r5
10040b9e:	d100      	bne.n	10040ba2 <__aeabi_dadd+0x48e>
10040ba0:	e0b5      	b.n	10040d0e <__aeabi_dadd+0x5fa>
10040ba2:	2501      	movs	r5, #1
10040ba4:	2938      	cmp	r1, #56	@ 0x38
10040ba6:	dd00      	ble.n	10040baa <__aeabi_dadd+0x496>
10040ba8:	e741      	b.n	10040a2e <__aeabi_dadd+0x31a>
10040baa:	000a      	movs	r2, r1
10040bac:	e72f      	b.n	10040a0e <__aeabi_dadd+0x2fa>
10040bae:	4c89      	ldr	r4, [pc, #548]	@ (10040dd4 <__aeabi_dadd+0x6c0>)
10040bb0:	1aff      	subs	r7, r7, r3
10040bb2:	4014      	ands	r4, r2
10040bb4:	0762      	lsls	r2, r4, #29
10040bb6:	08e4      	lsrs	r4, r4, #3
10040bb8:	e76a      	b.n	10040a90 <__aeabi_dadd+0x37c>
10040bba:	4a85      	ldr	r2, [pc, #532]	@ (10040dd0 <__aeabi_dadd+0x6bc>)
10040bbc:	4291      	cmp	r1, r2
10040bbe:	d100      	bne.n	10040bc2 <__aeabi_dadd+0x4ae>
10040bc0:	e0e3      	b.n	10040d8a <__aeabi_dadd+0x676>
10040bc2:	4663      	mov	r3, ip
10040bc4:	18c2      	adds	r2, r0, r3
10040bc6:	4282      	cmp	r2, r0
10040bc8:	4180      	sbcs	r0, r0
10040bca:	0023      	movs	r3, r4
10040bcc:	4240      	negs	r0, r0
10040bce:	4453      	add	r3, sl
10040bd0:	181b      	adds	r3, r3, r0
10040bd2:	07dd      	lsls	r5, r3, #31
10040bd4:	085c      	lsrs	r4, r3, #1
10040bd6:	2307      	movs	r3, #7
10040bd8:	0852      	lsrs	r2, r2, #1
10040bda:	4315      	orrs	r5, r2
10040bdc:	000f      	movs	r7, r1
10040bde:	402b      	ands	r3, r5
10040be0:	e700      	b.n	100409e4 <__aeabi_dadd+0x2d0>
10040be2:	4663      	mov	r3, ip
10040be4:	1a1d      	subs	r5, r3, r0
10040be6:	45ac      	cmp	ip, r5
10040be8:	4192      	sbcs	r2, r2
10040bea:	4653      	mov	r3, sl
10040bec:	4252      	negs	r2, r2
10040bee:	1b1c      	subs	r4, r3, r4
10040bf0:	000e      	movs	r6, r1
10040bf2:	4688      	mov	r8, r1
10040bf4:	1aa4      	subs	r4, r4, r2
10040bf6:	e5e5      	b.n	100407c4 <__aeabi_dadd+0xb0>
10040bf8:	2d00      	cmp	r5, #0
10040bfa:	d000      	beq.n	10040bfe <__aeabi_dadd+0x4ea>
10040bfc:	e091      	b.n	10040d22 <__aeabi_dadd+0x60e>
10040bfe:	2a00      	cmp	r2, #0
10040c00:	d138      	bne.n	10040c74 <__aeabi_dadd+0x560>
10040c02:	2480      	movs	r4, #128	@ 0x80
10040c04:	2600      	movs	r6, #0
10040c06:	0324      	lsls	r4, r4, #12
10040c08:	e756      	b.n	10040ab8 <__aeabi_dadd+0x3a4>
10040c0a:	4663      	mov	r3, ip
10040c0c:	18c5      	adds	r5, r0, r3
10040c0e:	4285      	cmp	r5, r0
10040c10:	4180      	sbcs	r0, r0
10040c12:	4454      	add	r4, sl
10040c14:	4240      	negs	r0, r0
10040c16:	1824      	adds	r4, r4, r0
10040c18:	2701      	movs	r7, #1
10040c1a:	0223      	lsls	r3, r4, #8
10040c1c:	d400      	bmi.n	10040c20 <__aeabi_dadd+0x50c>
10040c1e:	e6df      	b.n	100409e0 <__aeabi_dadd+0x2cc>
10040c20:	2702      	movs	r7, #2
10040c22:	e687      	b.n	10040934 <__aeabi_dadd+0x220>
10040c24:	4663      	mov	r3, ip
10040c26:	1ac5      	subs	r5, r0, r3
10040c28:	42a8      	cmp	r0, r5
10040c2a:	4180      	sbcs	r0, r0
10040c2c:	4653      	mov	r3, sl
10040c2e:	4240      	negs	r0, r0
10040c30:	1ae4      	subs	r4, r4, r3
10040c32:	2701      	movs	r7, #1
10040c34:	1a24      	subs	r4, r4, r0
10040c36:	e5c0      	b.n	100407ba <__aeabi_dadd+0xa6>
10040c38:	0762      	lsls	r2, r4, #29
10040c3a:	08c0      	lsrs	r0, r0, #3
10040c3c:	4302      	orrs	r2, r0
10040c3e:	08e4      	lsrs	r4, r4, #3
10040c40:	e736      	b.n	10040ab0 <__aeabi_dadd+0x39c>
10040c42:	0011      	movs	r1, r2
10040c44:	4653      	mov	r3, sl
10040c46:	3920      	subs	r1, #32
10040c48:	40cb      	lsrs	r3, r1
10040c4a:	4699      	mov	r9, r3
10040c4c:	2a20      	cmp	r2, #32
10040c4e:	d006      	beq.n	10040c5e <__aeabi_dadd+0x54a>
10040c50:	2140      	movs	r1, #64	@ 0x40
10040c52:	4653      	mov	r3, sl
10040c54:	1a8a      	subs	r2, r1, r2
10040c56:	4093      	lsls	r3, r2
10040c58:	4662      	mov	r2, ip
10040c5a:	431a      	orrs	r2, r3
10040c5c:	4694      	mov	ip, r2
10040c5e:	4665      	mov	r5, ip
10040c60:	1e6b      	subs	r3, r5, #1
10040c62:	419d      	sbcs	r5, r3
10040c64:	464b      	mov	r3, r9
10040c66:	431d      	orrs	r5, r3
10040c68:	e659      	b.n	1004091e <__aeabi_dadd+0x20a>
10040c6a:	0762      	lsls	r2, r4, #29
10040c6c:	08c0      	lsrs	r0, r0, #3
10040c6e:	4302      	orrs	r2, r0
10040c70:	08e4      	lsrs	r4, r4, #3
10040c72:	e70d      	b.n	10040a90 <__aeabi_dadd+0x37c>
10040c74:	4653      	mov	r3, sl
10040c76:	075a      	lsls	r2, r3, #29
10040c78:	4663      	mov	r3, ip
10040c7a:	08d8      	lsrs	r0, r3, #3
10040c7c:	4653      	mov	r3, sl
10040c7e:	000e      	movs	r6, r1
10040c80:	4302      	orrs	r2, r0
10040c82:	08dc      	lsrs	r4, r3, #3
10040c84:	e714      	b.n	10040ab0 <__aeabi_dadd+0x39c>
10040c86:	0015      	movs	r5, r2
10040c88:	0026      	movs	r6, r4
10040c8a:	3d20      	subs	r5, #32
10040c8c:	40ee      	lsrs	r6, r5
10040c8e:	2a20      	cmp	r2, #32
10040c90:	d003      	beq.n	10040c9a <__aeabi_dadd+0x586>
10040c92:	2540      	movs	r5, #64	@ 0x40
10040c94:	1aaa      	subs	r2, r5, r2
10040c96:	4094      	lsls	r4, r2
10040c98:	4320      	orrs	r0, r4
10040c9a:	1e42      	subs	r2, r0, #1
10040c9c:	4190      	sbcs	r0, r2
10040c9e:	0005      	movs	r5, r0
10040ca0:	4335      	orrs	r5, r6
10040ca2:	e606      	b.n	100408b2 <__aeabi_dadd+0x19e>
10040ca4:	2a00      	cmp	r2, #0
10040ca6:	d07c      	beq.n	10040da2 <__aeabi_dadd+0x68e>
10040ca8:	4662      	mov	r2, ip
10040caa:	4653      	mov	r3, sl
10040cac:	08c0      	lsrs	r0, r0, #3
10040cae:	431a      	orrs	r2, r3
10040cb0:	d100      	bne.n	10040cb4 <__aeabi_dadd+0x5a0>
10040cb2:	e6fa      	b.n	10040aaa <__aeabi_dadd+0x396>
10040cb4:	0762      	lsls	r2, r4, #29
10040cb6:	4310      	orrs	r0, r2
10040cb8:	2280      	movs	r2, #128	@ 0x80
10040cba:	08e4      	lsrs	r4, r4, #3
10040cbc:	0312      	lsls	r2, r2, #12
10040cbe:	4214      	tst	r4, r2
10040cc0:	d008      	beq.n	10040cd4 <__aeabi_dadd+0x5c0>
10040cc2:	08d9      	lsrs	r1, r3, #3
10040cc4:	4211      	tst	r1, r2
10040cc6:	d105      	bne.n	10040cd4 <__aeabi_dadd+0x5c0>
10040cc8:	4663      	mov	r3, ip
10040cca:	08d8      	lsrs	r0, r3, #3
10040ccc:	4653      	mov	r3, sl
10040cce:	000c      	movs	r4, r1
10040cd0:	075b      	lsls	r3, r3, #29
10040cd2:	4318      	orrs	r0, r3
10040cd4:	0f42      	lsrs	r2, r0, #29
10040cd6:	00c0      	lsls	r0, r0, #3
10040cd8:	08c0      	lsrs	r0, r0, #3
10040cda:	0752      	lsls	r2, r2, #29
10040cdc:	4302      	orrs	r2, r0
10040cde:	e6e7      	b.n	10040ab0 <__aeabi_dadd+0x39c>
10040ce0:	2a00      	cmp	r2, #0
10040ce2:	d100      	bne.n	10040ce6 <__aeabi_dadd+0x5d2>
10040ce4:	e72d      	b.n	10040b42 <__aeabi_dadd+0x42e>
10040ce6:	4663      	mov	r3, ip
10040ce8:	08d8      	lsrs	r0, r3, #3
10040cea:	4653      	mov	r3, sl
10040cec:	075a      	lsls	r2, r3, #29
10040cee:	000e      	movs	r6, r1
10040cf0:	4302      	orrs	r2, r0
10040cf2:	08dc      	lsrs	r4, r3, #3
10040cf4:	e6cc      	b.n	10040a90 <__aeabi_dadd+0x37c>
10040cf6:	4663      	mov	r3, ip
10040cf8:	1a1d      	subs	r5, r3, r0
10040cfa:	45ac      	cmp	ip, r5
10040cfc:	4192      	sbcs	r2, r2
10040cfe:	4653      	mov	r3, sl
10040d00:	4252      	negs	r2, r2
10040d02:	1b1c      	subs	r4, r3, r4
10040d04:	000e      	movs	r6, r1
10040d06:	4688      	mov	r8, r1
10040d08:	1aa4      	subs	r4, r4, r2
10040d0a:	3701      	adds	r7, #1
10040d0c:	e555      	b.n	100407ba <__aeabi_dadd+0xa6>
10040d0e:	4663      	mov	r3, ip
10040d10:	08d9      	lsrs	r1, r3, #3
10040d12:	4653      	mov	r3, sl
10040d14:	075a      	lsls	r2, r3, #29
10040d16:	430a      	orrs	r2, r1
10040d18:	08dc      	lsrs	r4, r3, #3
10040d1a:	e6c9      	b.n	10040ab0 <__aeabi_dadd+0x39c>
10040d1c:	4660      	mov	r0, ip
10040d1e:	4654      	mov	r4, sl
10040d20:	e6d4      	b.n	10040acc <__aeabi_dadd+0x3b8>
10040d22:	08c0      	lsrs	r0, r0, #3
10040d24:	2a00      	cmp	r2, #0
10040d26:	d100      	bne.n	10040d2a <__aeabi_dadd+0x616>
10040d28:	e6bf      	b.n	10040aaa <__aeabi_dadd+0x396>
10040d2a:	0762      	lsls	r2, r4, #29
10040d2c:	4310      	orrs	r0, r2
10040d2e:	2280      	movs	r2, #128	@ 0x80
10040d30:	08e4      	lsrs	r4, r4, #3
10040d32:	0312      	lsls	r2, r2, #12
10040d34:	4214      	tst	r4, r2
10040d36:	d0cd      	beq.n	10040cd4 <__aeabi_dadd+0x5c0>
10040d38:	08dd      	lsrs	r5, r3, #3
10040d3a:	4215      	tst	r5, r2
10040d3c:	d1ca      	bne.n	10040cd4 <__aeabi_dadd+0x5c0>
10040d3e:	4663      	mov	r3, ip
10040d40:	08d8      	lsrs	r0, r3, #3
10040d42:	4653      	mov	r3, sl
10040d44:	075b      	lsls	r3, r3, #29
10040d46:	000e      	movs	r6, r1
10040d48:	002c      	movs	r4, r5
10040d4a:	4318      	orrs	r0, r3
10040d4c:	e7c2      	b.n	10040cd4 <__aeabi_dadd+0x5c0>
10040d4e:	4663      	mov	r3, ip
10040d50:	08d9      	lsrs	r1, r3, #3
10040d52:	4653      	mov	r3, sl
10040d54:	075a      	lsls	r2, r3, #29
10040d56:	430a      	orrs	r2, r1
10040d58:	08dc      	lsrs	r4, r3, #3
10040d5a:	e699      	b.n	10040a90 <__aeabi_dadd+0x37c>
10040d5c:	4663      	mov	r3, ip
10040d5e:	08d8      	lsrs	r0, r3, #3
10040d60:	4653      	mov	r3, sl
10040d62:	075a      	lsls	r2, r3, #29
10040d64:	000e      	movs	r6, r1
10040d66:	4302      	orrs	r2, r0
10040d68:	08dc      	lsrs	r4, r3, #3
10040d6a:	e6a1      	b.n	10040ab0 <__aeabi_dadd+0x39c>
10040d6c:	0011      	movs	r1, r2
10040d6e:	0027      	movs	r7, r4
10040d70:	3920      	subs	r1, #32
10040d72:	40cf      	lsrs	r7, r1
10040d74:	2a20      	cmp	r2, #32
10040d76:	d003      	beq.n	10040d80 <__aeabi_dadd+0x66c>
10040d78:	2140      	movs	r1, #64	@ 0x40
10040d7a:	1a8a      	subs	r2, r1, r2
10040d7c:	4094      	lsls	r4, r2
10040d7e:	4320      	orrs	r0, r4
10040d80:	1e42      	subs	r2, r0, #1
10040d82:	4190      	sbcs	r0, r2
10040d84:	0005      	movs	r5, r0
10040d86:	433d      	orrs	r5, r7
10040d88:	e651      	b.n	10040a2e <__aeabi_dadd+0x31a>
10040d8a:	000c      	movs	r4, r1
10040d8c:	2500      	movs	r5, #0
10040d8e:	2200      	movs	r2, #0
10040d90:	e558      	b.n	10040844 <__aeabi_dadd+0x130>
10040d92:	4460      	add	r0, ip
10040d94:	4560      	cmp	r0, ip
10040d96:	4192      	sbcs	r2, r2
10040d98:	4454      	add	r4, sl
10040d9a:	4252      	negs	r2, r2
10040d9c:	0005      	movs	r5, r0
10040d9e:	18a4      	adds	r4, r4, r2
10040da0:	e73a      	b.n	10040c18 <__aeabi_dadd+0x504>
10040da2:	4653      	mov	r3, sl
10040da4:	075a      	lsls	r2, r3, #29
10040da6:	4663      	mov	r3, ip
10040da8:	08d9      	lsrs	r1, r3, #3
10040daa:	4653      	mov	r3, sl
10040dac:	430a      	orrs	r2, r1
10040dae:	08dc      	lsrs	r4, r3, #3
10040db0:	e67e      	b.n	10040ab0 <__aeabi_dadd+0x39c>
10040db2:	001a      	movs	r2, r3
10040db4:	001c      	movs	r4, r3
10040db6:	432a      	orrs	r2, r5
10040db8:	d000      	beq.n	10040dbc <__aeabi_dadd+0x6a8>
10040dba:	e6ab      	b.n	10040b14 <__aeabi_dadd+0x400>
10040dbc:	e6c1      	b.n	10040b42 <__aeabi_dadd+0x42e>
10040dbe:	2120      	movs	r1, #32
10040dc0:	2500      	movs	r5, #0
10040dc2:	1a09      	subs	r1, r1, r0
10040dc4:	e519      	b.n	100407fa <__aeabi_dadd+0xe6>
10040dc6:	2200      	movs	r2, #0
10040dc8:	2500      	movs	r5, #0
10040dca:	4c01      	ldr	r4, [pc, #4]	@ (10040dd0 <__aeabi_dadd+0x6bc>)
10040dcc:	e53a      	b.n	10040844 <__aeabi_dadd+0x130>
10040dce:	46c0      	nop			@ (mov r8, r8)
10040dd0:	000007ff 	.word	0x000007ff
10040dd4:	ff7fffff 	.word	0xff7fffff
10040dd8:	000007fe 	.word	0x000007fe

10040ddc <__aeabi_ddiv>:
10040ddc:	b5f0      	push	{r4, r5, r6, r7, lr}
10040dde:	46de      	mov	lr, fp
10040de0:	4645      	mov	r5, r8
10040de2:	4657      	mov	r7, sl
10040de4:	464e      	mov	r6, r9
10040de6:	b5e0      	push	{r5, r6, r7, lr}
10040de8:	b087      	sub	sp, #28
10040dea:	9200      	str	r2, [sp, #0]
10040dec:	9301      	str	r3, [sp, #4]
10040dee:	030b      	lsls	r3, r1, #12
10040df0:	0b1b      	lsrs	r3, r3, #12
10040df2:	469b      	mov	fp, r3
10040df4:	0fca      	lsrs	r2, r1, #31
10040df6:	004b      	lsls	r3, r1, #1
10040df8:	0004      	movs	r4, r0
10040dfa:	4680      	mov	r8, r0
10040dfc:	0d5b      	lsrs	r3, r3, #21
10040dfe:	9202      	str	r2, [sp, #8]
10040e00:	d100      	bne.n	10040e04 <__aeabi_ddiv+0x28>
10040e02:	e16a      	b.n	100410da <__aeabi_ddiv+0x2fe>
10040e04:	4ad4      	ldr	r2, [pc, #848]	@ (10041158 <__aeabi_ddiv+0x37c>)
10040e06:	4293      	cmp	r3, r2
10040e08:	d100      	bne.n	10040e0c <__aeabi_ddiv+0x30>
10040e0a:	e18c      	b.n	10041126 <__aeabi_ddiv+0x34a>
10040e0c:	4659      	mov	r1, fp
10040e0e:	0f42      	lsrs	r2, r0, #29
10040e10:	00c9      	lsls	r1, r1, #3
10040e12:	430a      	orrs	r2, r1
10040e14:	2180      	movs	r1, #128	@ 0x80
10040e16:	0409      	lsls	r1, r1, #16
10040e18:	4311      	orrs	r1, r2
10040e1a:	00c2      	lsls	r2, r0, #3
10040e1c:	4690      	mov	r8, r2
10040e1e:	4acf      	ldr	r2, [pc, #828]	@ (1004115c <__aeabi_ddiv+0x380>)
10040e20:	4689      	mov	r9, r1
10040e22:	4692      	mov	sl, r2
10040e24:	449a      	add	sl, r3
10040e26:	2300      	movs	r3, #0
10040e28:	2400      	movs	r4, #0
10040e2a:	9303      	str	r3, [sp, #12]
10040e2c:	9e00      	ldr	r6, [sp, #0]
10040e2e:	9f01      	ldr	r7, [sp, #4]
10040e30:	033b      	lsls	r3, r7, #12
10040e32:	0b1b      	lsrs	r3, r3, #12
10040e34:	469b      	mov	fp, r3
10040e36:	007b      	lsls	r3, r7, #1
10040e38:	0030      	movs	r0, r6
10040e3a:	0d5b      	lsrs	r3, r3, #21
10040e3c:	0ffd      	lsrs	r5, r7, #31
10040e3e:	2b00      	cmp	r3, #0
10040e40:	d100      	bne.n	10040e44 <__aeabi_ddiv+0x68>
10040e42:	e128      	b.n	10041096 <__aeabi_ddiv+0x2ba>
10040e44:	4ac4      	ldr	r2, [pc, #784]	@ (10041158 <__aeabi_ddiv+0x37c>)
10040e46:	4293      	cmp	r3, r2
10040e48:	d100      	bne.n	10040e4c <__aeabi_ddiv+0x70>
10040e4a:	e177      	b.n	1004113c <__aeabi_ddiv+0x360>
10040e4c:	4659      	mov	r1, fp
10040e4e:	0f72      	lsrs	r2, r6, #29
10040e50:	00c9      	lsls	r1, r1, #3
10040e52:	430a      	orrs	r2, r1
10040e54:	2180      	movs	r1, #128	@ 0x80
10040e56:	0409      	lsls	r1, r1, #16
10040e58:	4311      	orrs	r1, r2
10040e5a:	468b      	mov	fp, r1
10040e5c:	49bf      	ldr	r1, [pc, #764]	@ (1004115c <__aeabi_ddiv+0x380>)
10040e5e:	00f2      	lsls	r2, r6, #3
10040e60:	468c      	mov	ip, r1
10040e62:	4651      	mov	r1, sl
10040e64:	4463      	add	r3, ip
10040e66:	1acb      	subs	r3, r1, r3
10040e68:	469a      	mov	sl, r3
10040e6a:	2300      	movs	r3, #0
10040e6c:	9e02      	ldr	r6, [sp, #8]
10040e6e:	406e      	eors	r6, r5
10040e70:	2c0f      	cmp	r4, #15
10040e72:	d827      	bhi.n	10040ec4 <__aeabi_ddiv+0xe8>
10040e74:	49ba      	ldr	r1, [pc, #744]	@ (10041160 <__aeabi_ddiv+0x384>)
10040e76:	00a4      	lsls	r4, r4, #2
10040e78:	5909      	ldr	r1, [r1, r4]
10040e7a:	468f      	mov	pc, r1
10040e7c:	46cb      	mov	fp, r9
10040e7e:	4642      	mov	r2, r8
10040e80:	9e02      	ldr	r6, [sp, #8]
10040e82:	9b03      	ldr	r3, [sp, #12]
10040e84:	2b02      	cmp	r3, #2
10040e86:	d016      	beq.n	10040eb6 <__aeabi_ddiv+0xda>
10040e88:	2b03      	cmp	r3, #3
10040e8a:	d100      	bne.n	10040e8e <__aeabi_ddiv+0xb2>
10040e8c:	e2a6      	b.n	100413dc <__aeabi_ddiv+0x600>
10040e8e:	2b01      	cmp	r3, #1
10040e90:	d000      	beq.n	10040e94 <__aeabi_ddiv+0xb8>
10040e92:	e0df      	b.n	10041054 <__aeabi_ddiv+0x278>
10040e94:	2200      	movs	r2, #0
10040e96:	2300      	movs	r3, #0
10040e98:	2400      	movs	r4, #0
10040e9a:	4690      	mov	r8, r2
10040e9c:	051b      	lsls	r3, r3, #20
10040e9e:	4323      	orrs	r3, r4
10040ea0:	07f6      	lsls	r6, r6, #31
10040ea2:	4333      	orrs	r3, r6
10040ea4:	4640      	mov	r0, r8
10040ea6:	0019      	movs	r1, r3
10040ea8:	b007      	add	sp, #28
10040eaa:	bcf0      	pop	{r4, r5, r6, r7}
10040eac:	46bb      	mov	fp, r7
10040eae:	46b2      	mov	sl, r6
10040eb0:	46a9      	mov	r9, r5
10040eb2:	46a0      	mov	r8, r4
10040eb4:	bdf0      	pop	{r4, r5, r6, r7, pc}
10040eb6:	2200      	movs	r2, #0
10040eb8:	2400      	movs	r4, #0
10040eba:	4690      	mov	r8, r2
10040ebc:	4ba6      	ldr	r3, [pc, #664]	@ (10041158 <__aeabi_ddiv+0x37c>)
10040ebe:	e7ed      	b.n	10040e9c <__aeabi_ddiv+0xc0>
10040ec0:	002e      	movs	r6, r5
10040ec2:	e7df      	b.n	10040e84 <__aeabi_ddiv+0xa8>
10040ec4:	45cb      	cmp	fp, r9
10040ec6:	d200      	bcs.n	10040eca <__aeabi_ddiv+0xee>
10040ec8:	e1d4      	b.n	10041274 <__aeabi_ddiv+0x498>
10040eca:	d100      	bne.n	10040ece <__aeabi_ddiv+0xf2>
10040ecc:	e1cf      	b.n	1004126e <__aeabi_ddiv+0x492>
10040ece:	2301      	movs	r3, #1
10040ed0:	425b      	negs	r3, r3
10040ed2:	469c      	mov	ip, r3
10040ed4:	4644      	mov	r4, r8
10040ed6:	4648      	mov	r0, r9
10040ed8:	2700      	movs	r7, #0
10040eda:	44e2      	add	sl, ip
10040edc:	465b      	mov	r3, fp
10040ede:	0e15      	lsrs	r5, r2, #24
10040ee0:	021b      	lsls	r3, r3, #8
10040ee2:	431d      	orrs	r5, r3
10040ee4:	0c19      	lsrs	r1, r3, #16
10040ee6:	042b      	lsls	r3, r5, #16
10040ee8:	0212      	lsls	r2, r2, #8
10040eea:	9500      	str	r5, [sp, #0]
10040eec:	0c1d      	lsrs	r5, r3, #16
10040eee:	4691      	mov	r9, r2
10040ef0:	9102      	str	r1, [sp, #8]
10040ef2:	9503      	str	r5, [sp, #12]
10040ef4:	f7ff f9a8 	bl	10040248 <__aeabi_uidivmod>
10040ef8:	0002      	movs	r2, r0
10040efa:	436a      	muls	r2, r5
10040efc:	040b      	lsls	r3, r1, #16
10040efe:	0c21      	lsrs	r1, r4, #16
10040f00:	4680      	mov	r8, r0
10040f02:	4319      	orrs	r1, r3
10040f04:	428a      	cmp	r2, r1
10040f06:	d909      	bls.n	10040f1c <__aeabi_ddiv+0x140>
10040f08:	9d00      	ldr	r5, [sp, #0]
10040f0a:	2301      	movs	r3, #1
10040f0c:	46ac      	mov	ip, r5
10040f0e:	425b      	negs	r3, r3
10040f10:	4461      	add	r1, ip
10040f12:	469c      	mov	ip, r3
10040f14:	44e0      	add	r8, ip
10040f16:	428d      	cmp	r5, r1
10040f18:	d800      	bhi.n	10040f1c <__aeabi_ddiv+0x140>
10040f1a:	e1fb      	b.n	10041314 <__aeabi_ddiv+0x538>
10040f1c:	1a88      	subs	r0, r1, r2
10040f1e:	9902      	ldr	r1, [sp, #8]
10040f20:	f7ff f992 	bl	10040248 <__aeabi_uidivmod>
10040f24:	9a03      	ldr	r2, [sp, #12]
10040f26:	0424      	lsls	r4, r4, #16
10040f28:	4342      	muls	r2, r0
10040f2a:	0409      	lsls	r1, r1, #16
10040f2c:	0c24      	lsrs	r4, r4, #16
10040f2e:	0003      	movs	r3, r0
10040f30:	430c      	orrs	r4, r1
10040f32:	42a2      	cmp	r2, r4
10040f34:	d906      	bls.n	10040f44 <__aeabi_ddiv+0x168>
10040f36:	9900      	ldr	r1, [sp, #0]
10040f38:	3b01      	subs	r3, #1
10040f3a:	468c      	mov	ip, r1
10040f3c:	4464      	add	r4, ip
10040f3e:	42a1      	cmp	r1, r4
10040f40:	d800      	bhi.n	10040f44 <__aeabi_ddiv+0x168>
10040f42:	e1e1      	b.n	10041308 <__aeabi_ddiv+0x52c>
10040f44:	1aa0      	subs	r0, r4, r2
10040f46:	4642      	mov	r2, r8
10040f48:	0412      	lsls	r2, r2, #16
10040f4a:	431a      	orrs	r2, r3
10040f4c:	4693      	mov	fp, r2
10040f4e:	464b      	mov	r3, r9
10040f50:	4659      	mov	r1, fp
10040f52:	0c1b      	lsrs	r3, r3, #16
10040f54:	001d      	movs	r5, r3
10040f56:	9304      	str	r3, [sp, #16]
10040f58:	040b      	lsls	r3, r1, #16
10040f5a:	4649      	mov	r1, r9
10040f5c:	0409      	lsls	r1, r1, #16
10040f5e:	0c09      	lsrs	r1, r1, #16
10040f60:	000c      	movs	r4, r1
10040f62:	0c1b      	lsrs	r3, r3, #16
10040f64:	435c      	muls	r4, r3
10040f66:	0c12      	lsrs	r2, r2, #16
10040f68:	436b      	muls	r3, r5
10040f6a:	4688      	mov	r8, r1
10040f6c:	4351      	muls	r1, r2
10040f6e:	436a      	muls	r2, r5
10040f70:	0c25      	lsrs	r5, r4, #16
10040f72:	46ac      	mov	ip, r5
10040f74:	185b      	adds	r3, r3, r1
10040f76:	4463      	add	r3, ip
10040f78:	4299      	cmp	r1, r3
10040f7a:	d903      	bls.n	10040f84 <__aeabi_ddiv+0x1a8>
10040f7c:	2180      	movs	r1, #128	@ 0x80
10040f7e:	0249      	lsls	r1, r1, #9
10040f80:	468c      	mov	ip, r1
10040f82:	4462      	add	r2, ip
10040f84:	0c19      	lsrs	r1, r3, #16
10040f86:	0424      	lsls	r4, r4, #16
10040f88:	041b      	lsls	r3, r3, #16
10040f8a:	0c24      	lsrs	r4, r4, #16
10040f8c:	188a      	adds	r2, r1, r2
10040f8e:	191c      	adds	r4, r3, r4
10040f90:	4290      	cmp	r0, r2
10040f92:	d302      	bcc.n	10040f9a <__aeabi_ddiv+0x1be>
10040f94:	d116      	bne.n	10040fc4 <__aeabi_ddiv+0x1e8>
10040f96:	42a7      	cmp	r7, r4
10040f98:	d214      	bcs.n	10040fc4 <__aeabi_ddiv+0x1e8>
10040f9a:	465b      	mov	r3, fp
10040f9c:	9d00      	ldr	r5, [sp, #0]
10040f9e:	3b01      	subs	r3, #1
10040fa0:	444f      	add	r7, r9
10040fa2:	9305      	str	r3, [sp, #20]
10040fa4:	454f      	cmp	r7, r9
10040fa6:	419b      	sbcs	r3, r3
10040fa8:	46ac      	mov	ip, r5
10040faa:	425b      	negs	r3, r3
10040fac:	4463      	add	r3, ip
10040fae:	18c0      	adds	r0, r0, r3
10040fb0:	4285      	cmp	r5, r0
10040fb2:	d300      	bcc.n	10040fb6 <__aeabi_ddiv+0x1da>
10040fb4:	e1a1      	b.n	100412fa <__aeabi_ddiv+0x51e>
10040fb6:	4282      	cmp	r2, r0
10040fb8:	d900      	bls.n	10040fbc <__aeabi_ddiv+0x1e0>
10040fba:	e1f6      	b.n	100413aa <__aeabi_ddiv+0x5ce>
10040fbc:	d100      	bne.n	10040fc0 <__aeabi_ddiv+0x1e4>
10040fbe:	e1f1      	b.n	100413a4 <__aeabi_ddiv+0x5c8>
10040fc0:	9b05      	ldr	r3, [sp, #20]
10040fc2:	469b      	mov	fp, r3
10040fc4:	1b3c      	subs	r4, r7, r4
10040fc6:	42a7      	cmp	r7, r4
10040fc8:	41bf      	sbcs	r7, r7
10040fca:	9d00      	ldr	r5, [sp, #0]
10040fcc:	1a80      	subs	r0, r0, r2
10040fce:	427f      	negs	r7, r7
10040fd0:	1bc0      	subs	r0, r0, r7
10040fd2:	4285      	cmp	r5, r0
10040fd4:	d100      	bne.n	10040fd8 <__aeabi_ddiv+0x1fc>
10040fd6:	e1d0      	b.n	1004137a <__aeabi_ddiv+0x59e>
10040fd8:	9902      	ldr	r1, [sp, #8]
10040fda:	f7ff f935 	bl	10040248 <__aeabi_uidivmod>
10040fde:	9a03      	ldr	r2, [sp, #12]
10040fe0:	040b      	lsls	r3, r1, #16
10040fe2:	4342      	muls	r2, r0
10040fe4:	0c21      	lsrs	r1, r4, #16
10040fe6:	0007      	movs	r7, r0
10040fe8:	4319      	orrs	r1, r3
10040fea:	428a      	cmp	r2, r1
10040fec:	d900      	bls.n	10040ff0 <__aeabi_ddiv+0x214>
10040fee:	e178      	b.n	100412e2 <__aeabi_ddiv+0x506>
10040ff0:	1a88      	subs	r0, r1, r2
10040ff2:	9902      	ldr	r1, [sp, #8]
10040ff4:	f7ff f928 	bl	10040248 <__aeabi_uidivmod>
10040ff8:	9a03      	ldr	r2, [sp, #12]
10040ffa:	0424      	lsls	r4, r4, #16
10040ffc:	4342      	muls	r2, r0
10040ffe:	0409      	lsls	r1, r1, #16
10041000:	0c24      	lsrs	r4, r4, #16
10041002:	0003      	movs	r3, r0
10041004:	430c      	orrs	r4, r1
10041006:	42a2      	cmp	r2, r4
10041008:	d900      	bls.n	1004100c <__aeabi_ddiv+0x230>
1004100a:	e15d      	b.n	100412c8 <__aeabi_ddiv+0x4ec>
1004100c:	4641      	mov	r1, r8
1004100e:	1aa4      	subs	r4, r4, r2
10041010:	043a      	lsls	r2, r7, #16
10041012:	431a      	orrs	r2, r3
10041014:	9d04      	ldr	r5, [sp, #16]
10041016:	0413      	lsls	r3, r2, #16
10041018:	0c1b      	lsrs	r3, r3, #16
1004101a:	4359      	muls	r1, r3
1004101c:	4647      	mov	r7, r8
1004101e:	436b      	muls	r3, r5
10041020:	469c      	mov	ip, r3
10041022:	0c10      	lsrs	r0, r2, #16
10041024:	4347      	muls	r7, r0
10041026:	0c0b      	lsrs	r3, r1, #16
10041028:	44bc      	add	ip, r7
1004102a:	4463      	add	r3, ip
1004102c:	4368      	muls	r0, r5
1004102e:	429f      	cmp	r7, r3
10041030:	d903      	bls.n	1004103a <__aeabi_ddiv+0x25e>
10041032:	2580      	movs	r5, #128	@ 0x80
10041034:	026d      	lsls	r5, r5, #9
10041036:	46ac      	mov	ip, r5
10041038:	4460      	add	r0, ip
1004103a:	0c1f      	lsrs	r7, r3, #16
1004103c:	0409      	lsls	r1, r1, #16
1004103e:	041b      	lsls	r3, r3, #16
10041040:	0c09      	lsrs	r1, r1, #16
10041042:	183f      	adds	r7, r7, r0
10041044:	185b      	adds	r3, r3, r1
10041046:	42bc      	cmp	r4, r7
10041048:	d200      	bcs.n	1004104c <__aeabi_ddiv+0x270>
1004104a:	e102      	b.n	10041252 <__aeabi_ddiv+0x476>
1004104c:	d100      	bne.n	10041050 <__aeabi_ddiv+0x274>
1004104e:	e0fd      	b.n	1004124c <__aeabi_ddiv+0x470>
10041050:	2301      	movs	r3, #1
10041052:	431a      	orrs	r2, r3
10041054:	4b43      	ldr	r3, [pc, #268]	@ (10041164 <__aeabi_ddiv+0x388>)
10041056:	4453      	add	r3, sl
10041058:	2b00      	cmp	r3, #0
1004105a:	dc00      	bgt.n	1004105e <__aeabi_ddiv+0x282>
1004105c:	e0ae      	b.n	100411bc <__aeabi_ddiv+0x3e0>
1004105e:	0751      	lsls	r1, r2, #29
10041060:	d000      	beq.n	10041064 <__aeabi_ddiv+0x288>
10041062:	e198      	b.n	10041396 <__aeabi_ddiv+0x5ba>
10041064:	4659      	mov	r1, fp
10041066:	01c9      	lsls	r1, r1, #7
10041068:	d506      	bpl.n	10041078 <__aeabi_ddiv+0x29c>
1004106a:	4659      	mov	r1, fp
1004106c:	4b3e      	ldr	r3, [pc, #248]	@ (10041168 <__aeabi_ddiv+0x38c>)
1004106e:	4019      	ands	r1, r3
10041070:	2380      	movs	r3, #128	@ 0x80
10041072:	468b      	mov	fp, r1
10041074:	00db      	lsls	r3, r3, #3
10041076:	4453      	add	r3, sl
10041078:	493c      	ldr	r1, [pc, #240]	@ (1004116c <__aeabi_ddiv+0x390>)
1004107a:	428b      	cmp	r3, r1
1004107c:	dd00      	ble.n	10041080 <__aeabi_ddiv+0x2a4>
1004107e:	e71a      	b.n	10040eb6 <__aeabi_ddiv+0xda>
10041080:	4659      	mov	r1, fp
10041082:	08d2      	lsrs	r2, r2, #3
10041084:	0749      	lsls	r1, r1, #29
10041086:	4311      	orrs	r1, r2
10041088:	465a      	mov	r2, fp
1004108a:	055b      	lsls	r3, r3, #21
1004108c:	0254      	lsls	r4, r2, #9
1004108e:	4688      	mov	r8, r1
10041090:	0b24      	lsrs	r4, r4, #12
10041092:	0d5b      	lsrs	r3, r3, #21
10041094:	e702      	b.n	10040e9c <__aeabi_ddiv+0xc0>
10041096:	465a      	mov	r2, fp
10041098:	9b00      	ldr	r3, [sp, #0]
1004109a:	431a      	orrs	r2, r3
1004109c:	d100      	bne.n	100410a0 <__aeabi_ddiv+0x2c4>
1004109e:	e07e      	b.n	1004119e <__aeabi_ddiv+0x3c2>
100410a0:	465b      	mov	r3, fp
100410a2:	2b00      	cmp	r3, #0
100410a4:	d100      	bne.n	100410a8 <__aeabi_ddiv+0x2cc>
100410a6:	e100      	b.n	100412aa <__aeabi_ddiv+0x4ce>
100410a8:	4658      	mov	r0, fp
100410aa:	f001 f9ef 	bl	1004248c <__clzsi2>
100410ae:	0002      	movs	r2, r0
100410b0:	0003      	movs	r3, r0
100410b2:	3a0b      	subs	r2, #11
100410b4:	271d      	movs	r7, #29
100410b6:	9e00      	ldr	r6, [sp, #0]
100410b8:	1aba      	subs	r2, r7, r2
100410ba:	0019      	movs	r1, r3
100410bc:	4658      	mov	r0, fp
100410be:	40d6      	lsrs	r6, r2
100410c0:	3908      	subs	r1, #8
100410c2:	4088      	lsls	r0, r1
100410c4:	0032      	movs	r2, r6
100410c6:	4302      	orrs	r2, r0
100410c8:	4693      	mov	fp, r2
100410ca:	9a00      	ldr	r2, [sp, #0]
100410cc:	408a      	lsls	r2, r1
100410ce:	4928      	ldr	r1, [pc, #160]	@ (10041170 <__aeabi_ddiv+0x394>)
100410d0:	4453      	add	r3, sl
100410d2:	468a      	mov	sl, r1
100410d4:	449a      	add	sl, r3
100410d6:	2300      	movs	r3, #0
100410d8:	e6c8      	b.n	10040e6c <__aeabi_ddiv+0x90>
100410da:	465b      	mov	r3, fp
100410dc:	4303      	orrs	r3, r0
100410de:	4699      	mov	r9, r3
100410e0:	d056      	beq.n	10041190 <__aeabi_ddiv+0x3b4>
100410e2:	465b      	mov	r3, fp
100410e4:	2b00      	cmp	r3, #0
100410e6:	d100      	bne.n	100410ea <__aeabi_ddiv+0x30e>
100410e8:	e0cd      	b.n	10041286 <__aeabi_ddiv+0x4aa>
100410ea:	4658      	mov	r0, fp
100410ec:	f001 f9ce 	bl	1004248c <__clzsi2>
100410f0:	230b      	movs	r3, #11
100410f2:	425b      	negs	r3, r3
100410f4:	469c      	mov	ip, r3
100410f6:	0002      	movs	r2, r0
100410f8:	4484      	add	ip, r0
100410fa:	4666      	mov	r6, ip
100410fc:	231d      	movs	r3, #29
100410fe:	1b9b      	subs	r3, r3, r6
10041100:	0026      	movs	r6, r4
10041102:	0011      	movs	r1, r2
10041104:	4658      	mov	r0, fp
10041106:	40de      	lsrs	r6, r3
10041108:	3908      	subs	r1, #8
1004110a:	4088      	lsls	r0, r1
1004110c:	0033      	movs	r3, r6
1004110e:	4303      	orrs	r3, r0
10041110:	4699      	mov	r9, r3
10041112:	0023      	movs	r3, r4
10041114:	408b      	lsls	r3, r1
10041116:	4698      	mov	r8, r3
10041118:	4b16      	ldr	r3, [pc, #88]	@ (10041174 <__aeabi_ddiv+0x398>)
1004111a:	2400      	movs	r4, #0
1004111c:	1a9b      	subs	r3, r3, r2
1004111e:	469a      	mov	sl, r3
10041120:	2300      	movs	r3, #0
10041122:	9303      	str	r3, [sp, #12]
10041124:	e682      	b.n	10040e2c <__aeabi_ddiv+0x50>
10041126:	465a      	mov	r2, fp
10041128:	4302      	orrs	r2, r0
1004112a:	4691      	mov	r9, r2
1004112c:	d12a      	bne.n	10041184 <__aeabi_ddiv+0x3a8>
1004112e:	2200      	movs	r2, #0
10041130:	469a      	mov	sl, r3
10041132:	2302      	movs	r3, #2
10041134:	4690      	mov	r8, r2
10041136:	2408      	movs	r4, #8
10041138:	9303      	str	r3, [sp, #12]
1004113a:	e677      	b.n	10040e2c <__aeabi_ddiv+0x50>
1004113c:	465a      	mov	r2, fp
1004113e:	9b00      	ldr	r3, [sp, #0]
10041140:	431a      	orrs	r2, r3
10041142:	4b0d      	ldr	r3, [pc, #52]	@ (10041178 <__aeabi_ddiv+0x39c>)
10041144:	469c      	mov	ip, r3
10041146:	44e2      	add	sl, ip
10041148:	2a00      	cmp	r2, #0
1004114a:	d117      	bne.n	1004117c <__aeabi_ddiv+0x3a0>
1004114c:	2302      	movs	r3, #2
1004114e:	431c      	orrs	r4, r3
10041150:	2300      	movs	r3, #0
10041152:	469b      	mov	fp, r3
10041154:	3302      	adds	r3, #2
10041156:	e689      	b.n	10040e6c <__aeabi_ddiv+0x90>
10041158:	000007ff 	.word	0x000007ff
1004115c:	fffffc01 	.word	0xfffffc01
10041160:	1004bed8 	.word	0x1004bed8
10041164:	000003ff 	.word	0x000003ff
10041168:	feffffff 	.word	0xfeffffff
1004116c:	000007fe 	.word	0x000007fe
10041170:	000003f3 	.word	0x000003f3
10041174:	fffffc0d 	.word	0xfffffc0d
10041178:	fffff801 	.word	0xfffff801
1004117c:	2303      	movs	r3, #3
1004117e:	0032      	movs	r2, r6
10041180:	431c      	orrs	r4, r3
10041182:	e673      	b.n	10040e6c <__aeabi_ddiv+0x90>
10041184:	469a      	mov	sl, r3
10041186:	2303      	movs	r3, #3
10041188:	46d9      	mov	r9, fp
1004118a:	240c      	movs	r4, #12
1004118c:	9303      	str	r3, [sp, #12]
1004118e:	e64d      	b.n	10040e2c <__aeabi_ddiv+0x50>
10041190:	2300      	movs	r3, #0
10041192:	4698      	mov	r8, r3
10041194:	469a      	mov	sl, r3
10041196:	3301      	adds	r3, #1
10041198:	2404      	movs	r4, #4
1004119a:	9303      	str	r3, [sp, #12]
1004119c:	e646      	b.n	10040e2c <__aeabi_ddiv+0x50>
1004119e:	2301      	movs	r3, #1
100411a0:	431c      	orrs	r4, r3
100411a2:	2300      	movs	r3, #0
100411a4:	469b      	mov	fp, r3
100411a6:	3301      	adds	r3, #1
100411a8:	e660      	b.n	10040e6c <__aeabi_ddiv+0x90>
100411aa:	2300      	movs	r3, #0
100411ac:	2480      	movs	r4, #128	@ 0x80
100411ae:	4698      	mov	r8, r3
100411b0:	2600      	movs	r6, #0
100411b2:	4b92      	ldr	r3, [pc, #584]	@ (100413fc <__aeabi_ddiv+0x620>)
100411b4:	0324      	lsls	r4, r4, #12
100411b6:	e671      	b.n	10040e9c <__aeabi_ddiv+0xc0>
100411b8:	2201      	movs	r2, #1
100411ba:	4252      	negs	r2, r2
100411bc:	2101      	movs	r1, #1
100411be:	1ac9      	subs	r1, r1, r3
100411c0:	2938      	cmp	r1, #56	@ 0x38
100411c2:	dd00      	ble.n	100411c6 <__aeabi_ddiv+0x3ea>
100411c4:	e666      	b.n	10040e94 <__aeabi_ddiv+0xb8>
100411c6:	291f      	cmp	r1, #31
100411c8:	dc00      	bgt.n	100411cc <__aeabi_ddiv+0x3f0>
100411ca:	e0ab      	b.n	10041324 <__aeabi_ddiv+0x548>
100411cc:	201f      	movs	r0, #31
100411ce:	4240      	negs	r0, r0
100411d0:	1ac3      	subs	r3, r0, r3
100411d2:	4658      	mov	r0, fp
100411d4:	40d8      	lsrs	r0, r3
100411d6:	0003      	movs	r3, r0
100411d8:	2920      	cmp	r1, #32
100411da:	d004      	beq.n	100411e6 <__aeabi_ddiv+0x40a>
100411dc:	4658      	mov	r0, fp
100411de:	4988      	ldr	r1, [pc, #544]	@ (10041400 <__aeabi_ddiv+0x624>)
100411e0:	4451      	add	r1, sl
100411e2:	4088      	lsls	r0, r1
100411e4:	4302      	orrs	r2, r0
100411e6:	1e51      	subs	r1, r2, #1
100411e8:	418a      	sbcs	r2, r1
100411ea:	431a      	orrs	r2, r3
100411ec:	2307      	movs	r3, #7
100411ee:	0019      	movs	r1, r3
100411f0:	2400      	movs	r4, #0
100411f2:	4011      	ands	r1, r2
100411f4:	4213      	tst	r3, r2
100411f6:	d00c      	beq.n	10041212 <__aeabi_ddiv+0x436>
100411f8:	230f      	movs	r3, #15
100411fa:	4013      	ands	r3, r2
100411fc:	2b04      	cmp	r3, #4
100411fe:	d100      	bne.n	10041202 <__aeabi_ddiv+0x426>
10041200:	e0f9      	b.n	100413f6 <__aeabi_ddiv+0x61a>
10041202:	1d11      	adds	r1, r2, #4
10041204:	4291      	cmp	r1, r2
10041206:	419b      	sbcs	r3, r3
10041208:	000a      	movs	r2, r1
1004120a:	425b      	negs	r3, r3
1004120c:	0759      	lsls	r1, r3, #29
1004120e:	025b      	lsls	r3, r3, #9
10041210:	0b1c      	lsrs	r4, r3, #12
10041212:	08d2      	lsrs	r2, r2, #3
10041214:	430a      	orrs	r2, r1
10041216:	4690      	mov	r8, r2
10041218:	2300      	movs	r3, #0
1004121a:	e63f      	b.n	10040e9c <__aeabi_ddiv+0xc0>
1004121c:	2480      	movs	r4, #128	@ 0x80
1004121e:	464b      	mov	r3, r9
10041220:	0324      	lsls	r4, r4, #12
10041222:	4223      	tst	r3, r4
10041224:	d009      	beq.n	1004123a <__aeabi_ddiv+0x45e>
10041226:	465b      	mov	r3, fp
10041228:	4223      	tst	r3, r4
1004122a:	d106      	bne.n	1004123a <__aeabi_ddiv+0x45e>
1004122c:	431c      	orrs	r4, r3
1004122e:	0324      	lsls	r4, r4, #12
10041230:	002e      	movs	r6, r5
10041232:	4690      	mov	r8, r2
10041234:	4b71      	ldr	r3, [pc, #452]	@ (100413fc <__aeabi_ddiv+0x620>)
10041236:	0b24      	lsrs	r4, r4, #12
10041238:	e630      	b.n	10040e9c <__aeabi_ddiv+0xc0>
1004123a:	2480      	movs	r4, #128	@ 0x80
1004123c:	464b      	mov	r3, r9
1004123e:	0324      	lsls	r4, r4, #12
10041240:	431c      	orrs	r4, r3
10041242:	0324      	lsls	r4, r4, #12
10041244:	9e02      	ldr	r6, [sp, #8]
10041246:	4b6d      	ldr	r3, [pc, #436]	@ (100413fc <__aeabi_ddiv+0x620>)
10041248:	0b24      	lsrs	r4, r4, #12
1004124a:	e627      	b.n	10040e9c <__aeabi_ddiv+0xc0>
1004124c:	2b00      	cmp	r3, #0
1004124e:	d100      	bne.n	10041252 <__aeabi_ddiv+0x476>
10041250:	e700      	b.n	10041054 <__aeabi_ddiv+0x278>
10041252:	9800      	ldr	r0, [sp, #0]
10041254:	1e51      	subs	r1, r2, #1
10041256:	4684      	mov	ip, r0
10041258:	4464      	add	r4, ip
1004125a:	4284      	cmp	r4, r0
1004125c:	d200      	bcs.n	10041260 <__aeabi_ddiv+0x484>
1004125e:	e084      	b.n	1004136a <__aeabi_ddiv+0x58e>
10041260:	42bc      	cmp	r4, r7
10041262:	d200      	bcs.n	10041266 <__aeabi_ddiv+0x48a>
10041264:	e0ae      	b.n	100413c4 <__aeabi_ddiv+0x5e8>
10041266:	d100      	bne.n	1004126a <__aeabi_ddiv+0x48e>
10041268:	e0c1      	b.n	100413ee <__aeabi_ddiv+0x612>
1004126a:	000a      	movs	r2, r1
1004126c:	e6f0      	b.n	10041050 <__aeabi_ddiv+0x274>
1004126e:	4542      	cmp	r2, r8
10041270:	d900      	bls.n	10041274 <__aeabi_ddiv+0x498>
10041272:	e62c      	b.n	10040ece <__aeabi_ddiv+0xf2>
10041274:	464b      	mov	r3, r9
10041276:	07dc      	lsls	r4, r3, #31
10041278:	0858      	lsrs	r0, r3, #1
1004127a:	4643      	mov	r3, r8
1004127c:	085b      	lsrs	r3, r3, #1
1004127e:	431c      	orrs	r4, r3
10041280:	4643      	mov	r3, r8
10041282:	07df      	lsls	r7, r3, #31
10041284:	e62a      	b.n	10040edc <__aeabi_ddiv+0x100>
10041286:	f001 f901 	bl	1004248c <__clzsi2>
1004128a:	2315      	movs	r3, #21
1004128c:	469c      	mov	ip, r3
1004128e:	4484      	add	ip, r0
10041290:	0002      	movs	r2, r0
10041292:	4663      	mov	r3, ip
10041294:	3220      	adds	r2, #32
10041296:	2b1c      	cmp	r3, #28
10041298:	dc00      	bgt.n	1004129c <__aeabi_ddiv+0x4c0>
1004129a:	e72e      	b.n	100410fa <__aeabi_ddiv+0x31e>
1004129c:	0023      	movs	r3, r4
1004129e:	3808      	subs	r0, #8
100412a0:	4083      	lsls	r3, r0
100412a2:	4699      	mov	r9, r3
100412a4:	2300      	movs	r3, #0
100412a6:	4698      	mov	r8, r3
100412a8:	e736      	b.n	10041118 <__aeabi_ddiv+0x33c>
100412aa:	f001 f8ef 	bl	1004248c <__clzsi2>
100412ae:	0002      	movs	r2, r0
100412b0:	0003      	movs	r3, r0
100412b2:	3215      	adds	r2, #21
100412b4:	3320      	adds	r3, #32
100412b6:	2a1c      	cmp	r2, #28
100412b8:	dc00      	bgt.n	100412bc <__aeabi_ddiv+0x4e0>
100412ba:	e6fb      	b.n	100410b4 <__aeabi_ddiv+0x2d8>
100412bc:	9900      	ldr	r1, [sp, #0]
100412be:	3808      	subs	r0, #8
100412c0:	4081      	lsls	r1, r0
100412c2:	2200      	movs	r2, #0
100412c4:	468b      	mov	fp, r1
100412c6:	e702      	b.n	100410ce <__aeabi_ddiv+0x2f2>
100412c8:	9900      	ldr	r1, [sp, #0]
100412ca:	3b01      	subs	r3, #1
100412cc:	468c      	mov	ip, r1
100412ce:	4464      	add	r4, ip
100412d0:	42a1      	cmp	r1, r4
100412d2:	d900      	bls.n	100412d6 <__aeabi_ddiv+0x4fa>
100412d4:	e69a      	b.n	1004100c <__aeabi_ddiv+0x230>
100412d6:	42a2      	cmp	r2, r4
100412d8:	d800      	bhi.n	100412dc <__aeabi_ddiv+0x500>
100412da:	e697      	b.n	1004100c <__aeabi_ddiv+0x230>
100412dc:	1e83      	subs	r3, r0, #2
100412de:	4464      	add	r4, ip
100412e0:	e694      	b.n	1004100c <__aeabi_ddiv+0x230>
100412e2:	46ac      	mov	ip, r5
100412e4:	4461      	add	r1, ip
100412e6:	3f01      	subs	r7, #1
100412e8:	428d      	cmp	r5, r1
100412ea:	d900      	bls.n	100412ee <__aeabi_ddiv+0x512>
100412ec:	e680      	b.n	10040ff0 <__aeabi_ddiv+0x214>
100412ee:	428a      	cmp	r2, r1
100412f0:	d800      	bhi.n	100412f4 <__aeabi_ddiv+0x518>
100412f2:	e67d      	b.n	10040ff0 <__aeabi_ddiv+0x214>
100412f4:	1e87      	subs	r7, r0, #2
100412f6:	4461      	add	r1, ip
100412f8:	e67a      	b.n	10040ff0 <__aeabi_ddiv+0x214>
100412fa:	4285      	cmp	r5, r0
100412fc:	d000      	beq.n	10041300 <__aeabi_ddiv+0x524>
100412fe:	e65f      	b.n	10040fc0 <__aeabi_ddiv+0x1e4>
10041300:	45b9      	cmp	r9, r7
10041302:	d900      	bls.n	10041306 <__aeabi_ddiv+0x52a>
10041304:	e65c      	b.n	10040fc0 <__aeabi_ddiv+0x1e4>
10041306:	e656      	b.n	10040fb6 <__aeabi_ddiv+0x1da>
10041308:	42a2      	cmp	r2, r4
1004130a:	d800      	bhi.n	1004130e <__aeabi_ddiv+0x532>
1004130c:	e61a      	b.n	10040f44 <__aeabi_ddiv+0x168>
1004130e:	1e83      	subs	r3, r0, #2
10041310:	4464      	add	r4, ip
10041312:	e617      	b.n	10040f44 <__aeabi_ddiv+0x168>
10041314:	428a      	cmp	r2, r1
10041316:	d800      	bhi.n	1004131a <__aeabi_ddiv+0x53e>
10041318:	e600      	b.n	10040f1c <__aeabi_ddiv+0x140>
1004131a:	46ac      	mov	ip, r5
1004131c:	1e83      	subs	r3, r0, #2
1004131e:	4698      	mov	r8, r3
10041320:	4461      	add	r1, ip
10041322:	e5fb      	b.n	10040f1c <__aeabi_ddiv+0x140>
10041324:	4837      	ldr	r0, [pc, #220]	@ (10041404 <__aeabi_ddiv+0x628>)
10041326:	0014      	movs	r4, r2
10041328:	4450      	add	r0, sl
1004132a:	4082      	lsls	r2, r0
1004132c:	465b      	mov	r3, fp
1004132e:	0017      	movs	r7, r2
10041330:	4083      	lsls	r3, r0
10041332:	40cc      	lsrs	r4, r1
10041334:	1e7a      	subs	r2, r7, #1
10041336:	4197      	sbcs	r7, r2
10041338:	4323      	orrs	r3, r4
1004133a:	433b      	orrs	r3, r7
1004133c:	001a      	movs	r2, r3
1004133e:	465b      	mov	r3, fp
10041340:	40cb      	lsrs	r3, r1
10041342:	0751      	lsls	r1, r2, #29
10041344:	d009      	beq.n	1004135a <__aeabi_ddiv+0x57e>
10041346:	210f      	movs	r1, #15
10041348:	4011      	ands	r1, r2
1004134a:	2904      	cmp	r1, #4
1004134c:	d005      	beq.n	1004135a <__aeabi_ddiv+0x57e>
1004134e:	1d11      	adds	r1, r2, #4
10041350:	4291      	cmp	r1, r2
10041352:	4192      	sbcs	r2, r2
10041354:	4252      	negs	r2, r2
10041356:	189b      	adds	r3, r3, r2
10041358:	000a      	movs	r2, r1
1004135a:	0219      	lsls	r1, r3, #8
1004135c:	d400      	bmi.n	10041360 <__aeabi_ddiv+0x584>
1004135e:	e755      	b.n	1004120c <__aeabi_ddiv+0x430>
10041360:	2200      	movs	r2, #0
10041362:	2301      	movs	r3, #1
10041364:	2400      	movs	r4, #0
10041366:	4690      	mov	r8, r2
10041368:	e598      	b.n	10040e9c <__aeabi_ddiv+0xc0>
1004136a:	000a      	movs	r2, r1
1004136c:	42bc      	cmp	r4, r7
1004136e:	d000      	beq.n	10041372 <__aeabi_ddiv+0x596>
10041370:	e66e      	b.n	10041050 <__aeabi_ddiv+0x274>
10041372:	454b      	cmp	r3, r9
10041374:	d000      	beq.n	10041378 <__aeabi_ddiv+0x59c>
10041376:	e66b      	b.n	10041050 <__aeabi_ddiv+0x274>
10041378:	e66c      	b.n	10041054 <__aeabi_ddiv+0x278>
1004137a:	4b23      	ldr	r3, [pc, #140]	@ (10041408 <__aeabi_ddiv+0x62c>)
1004137c:	4a23      	ldr	r2, [pc, #140]	@ (1004140c <__aeabi_ddiv+0x630>)
1004137e:	4453      	add	r3, sl
10041380:	4592      	cmp	sl, r2
10041382:	da00      	bge.n	10041386 <__aeabi_ddiv+0x5aa>
10041384:	e718      	b.n	100411b8 <__aeabi_ddiv+0x3dc>
10041386:	2101      	movs	r1, #1
10041388:	4249      	negs	r1, r1
1004138a:	1d0a      	adds	r2, r1, #4
1004138c:	428a      	cmp	r2, r1
1004138e:	4189      	sbcs	r1, r1
10041390:	4249      	negs	r1, r1
10041392:	448b      	add	fp, r1
10041394:	e666      	b.n	10041064 <__aeabi_ddiv+0x288>
10041396:	210f      	movs	r1, #15
10041398:	4011      	ands	r1, r2
1004139a:	2904      	cmp	r1, #4
1004139c:	d100      	bne.n	100413a0 <__aeabi_ddiv+0x5c4>
1004139e:	e661      	b.n	10041064 <__aeabi_ddiv+0x288>
100413a0:	0011      	movs	r1, r2
100413a2:	e7f2      	b.n	1004138a <__aeabi_ddiv+0x5ae>
100413a4:	42bc      	cmp	r4, r7
100413a6:	d800      	bhi.n	100413aa <__aeabi_ddiv+0x5ce>
100413a8:	e60a      	b.n	10040fc0 <__aeabi_ddiv+0x1e4>
100413aa:	2302      	movs	r3, #2
100413ac:	425b      	negs	r3, r3
100413ae:	469c      	mov	ip, r3
100413b0:	9900      	ldr	r1, [sp, #0]
100413b2:	444f      	add	r7, r9
100413b4:	454f      	cmp	r7, r9
100413b6:	419b      	sbcs	r3, r3
100413b8:	44e3      	add	fp, ip
100413ba:	468c      	mov	ip, r1
100413bc:	425b      	negs	r3, r3
100413be:	4463      	add	r3, ip
100413c0:	18c0      	adds	r0, r0, r3
100413c2:	e5ff      	b.n	10040fc4 <__aeabi_ddiv+0x1e8>
100413c4:	4649      	mov	r1, r9
100413c6:	9d00      	ldr	r5, [sp, #0]
100413c8:	0048      	lsls	r0, r1, #1
100413ca:	4548      	cmp	r0, r9
100413cc:	4189      	sbcs	r1, r1
100413ce:	46ac      	mov	ip, r5
100413d0:	4249      	negs	r1, r1
100413d2:	4461      	add	r1, ip
100413d4:	4681      	mov	r9, r0
100413d6:	3a02      	subs	r2, #2
100413d8:	1864      	adds	r4, r4, r1
100413da:	e7c7      	b.n	1004136c <__aeabi_ddiv+0x590>
100413dc:	2480      	movs	r4, #128	@ 0x80
100413de:	465b      	mov	r3, fp
100413e0:	0324      	lsls	r4, r4, #12
100413e2:	431c      	orrs	r4, r3
100413e4:	0324      	lsls	r4, r4, #12
100413e6:	4690      	mov	r8, r2
100413e8:	4b04      	ldr	r3, [pc, #16]	@ (100413fc <__aeabi_ddiv+0x620>)
100413ea:	0b24      	lsrs	r4, r4, #12
100413ec:	e556      	b.n	10040e9c <__aeabi_ddiv+0xc0>
100413ee:	4599      	cmp	r9, r3
100413f0:	d3e8      	bcc.n	100413c4 <__aeabi_ddiv+0x5e8>
100413f2:	000a      	movs	r2, r1
100413f4:	e7bd      	b.n	10041372 <__aeabi_ddiv+0x596>
100413f6:	2300      	movs	r3, #0
100413f8:	e708      	b.n	1004120c <__aeabi_ddiv+0x430>
100413fa:	46c0      	nop			@ (mov r8, r8)
100413fc:	000007ff 	.word	0x000007ff
10041400:	0000043e 	.word	0x0000043e
10041404:	0000041e 	.word	0x0000041e
10041408:	000003ff 	.word	0x000003ff
1004140c:	fffffc02 	.word	0xfffffc02

10041410 <__eqdf2>:
10041410:	b5f0      	push	{r4, r5, r6, r7, lr}
10041412:	4657      	mov	r7, sl
10041414:	46de      	mov	lr, fp
10041416:	464e      	mov	r6, r9
10041418:	4645      	mov	r5, r8
1004141a:	b5e0      	push	{r5, r6, r7, lr}
1004141c:	000d      	movs	r5, r1
1004141e:	0004      	movs	r4, r0
10041420:	0fe8      	lsrs	r0, r5, #31
10041422:	4683      	mov	fp, r0
10041424:	0309      	lsls	r1, r1, #12
10041426:	0fd8      	lsrs	r0, r3, #31
10041428:	0b09      	lsrs	r1, r1, #12
1004142a:	4682      	mov	sl, r0
1004142c:	4819      	ldr	r0, [pc, #100]	@ (10041494 <__eqdf2+0x84>)
1004142e:	468c      	mov	ip, r1
10041430:	031f      	lsls	r7, r3, #12
10041432:	0069      	lsls	r1, r5, #1
10041434:	005e      	lsls	r6, r3, #1
10041436:	0d49      	lsrs	r1, r1, #21
10041438:	0b3f      	lsrs	r7, r7, #12
1004143a:	0d76      	lsrs	r6, r6, #21
1004143c:	4281      	cmp	r1, r0
1004143e:	d018      	beq.n	10041472 <__eqdf2+0x62>
10041440:	4286      	cmp	r6, r0
10041442:	d00f      	beq.n	10041464 <__eqdf2+0x54>
10041444:	2001      	movs	r0, #1
10041446:	42b1      	cmp	r1, r6
10041448:	d10d      	bne.n	10041466 <__eqdf2+0x56>
1004144a:	45bc      	cmp	ip, r7
1004144c:	d10b      	bne.n	10041466 <__eqdf2+0x56>
1004144e:	4294      	cmp	r4, r2
10041450:	d109      	bne.n	10041466 <__eqdf2+0x56>
10041452:	45d3      	cmp	fp, sl
10041454:	d01c      	beq.n	10041490 <__eqdf2+0x80>
10041456:	2900      	cmp	r1, #0
10041458:	d105      	bne.n	10041466 <__eqdf2+0x56>
1004145a:	4660      	mov	r0, ip
1004145c:	4320      	orrs	r0, r4
1004145e:	1e43      	subs	r3, r0, #1
10041460:	4198      	sbcs	r0, r3
10041462:	e000      	b.n	10041466 <__eqdf2+0x56>
10041464:	2001      	movs	r0, #1
10041466:	bcf0      	pop	{r4, r5, r6, r7}
10041468:	46bb      	mov	fp, r7
1004146a:	46b2      	mov	sl, r6
1004146c:	46a9      	mov	r9, r5
1004146e:	46a0      	mov	r8, r4
10041470:	bdf0      	pop	{r4, r5, r6, r7, pc}
10041472:	2001      	movs	r0, #1
10041474:	428e      	cmp	r6, r1
10041476:	d1f6      	bne.n	10041466 <__eqdf2+0x56>
10041478:	4661      	mov	r1, ip
1004147a:	4339      	orrs	r1, r7
1004147c:	000f      	movs	r7, r1
1004147e:	4317      	orrs	r7, r2
10041480:	4327      	orrs	r7, r4
10041482:	d1f0      	bne.n	10041466 <__eqdf2+0x56>
10041484:	465b      	mov	r3, fp
10041486:	4652      	mov	r2, sl
10041488:	1a98      	subs	r0, r3, r2
1004148a:	1e43      	subs	r3, r0, #1
1004148c:	4198      	sbcs	r0, r3
1004148e:	e7ea      	b.n	10041466 <__eqdf2+0x56>
10041490:	2000      	movs	r0, #0
10041492:	e7e8      	b.n	10041466 <__eqdf2+0x56>
10041494:	000007ff 	.word	0x000007ff

10041498 <__gedf2>:
10041498:	b5f0      	push	{r4, r5, r6, r7, lr}
1004149a:	4657      	mov	r7, sl
1004149c:	464e      	mov	r6, r9
1004149e:	4645      	mov	r5, r8
100414a0:	46de      	mov	lr, fp
100414a2:	b5e0      	push	{r5, r6, r7, lr}
100414a4:	000d      	movs	r5, r1
100414a6:	030f      	lsls	r7, r1, #12
100414a8:	0b39      	lsrs	r1, r7, #12
100414aa:	b083      	sub	sp, #12
100414ac:	0004      	movs	r4, r0
100414ae:	4680      	mov	r8, r0
100414b0:	9101      	str	r1, [sp, #4]
100414b2:	0058      	lsls	r0, r3, #1
100414b4:	0fe9      	lsrs	r1, r5, #31
100414b6:	4f31      	ldr	r7, [pc, #196]	@ (1004157c <__gedf2+0xe4>)
100414b8:	0d40      	lsrs	r0, r0, #21
100414ba:	468c      	mov	ip, r1
100414bc:	006e      	lsls	r6, r5, #1
100414be:	0319      	lsls	r1, r3, #12
100414c0:	4682      	mov	sl, r0
100414c2:	4691      	mov	r9, r2
100414c4:	0d76      	lsrs	r6, r6, #21
100414c6:	0b09      	lsrs	r1, r1, #12
100414c8:	0fd8      	lsrs	r0, r3, #31
100414ca:	42be      	cmp	r6, r7
100414cc:	d01f      	beq.n	1004150e <__gedf2+0x76>
100414ce:	45ba      	cmp	sl, r7
100414d0:	d00f      	beq.n	100414f2 <__gedf2+0x5a>
100414d2:	2e00      	cmp	r6, #0
100414d4:	d12f      	bne.n	10041536 <__gedf2+0x9e>
100414d6:	4655      	mov	r5, sl
100414d8:	9e01      	ldr	r6, [sp, #4]
100414da:	4334      	orrs	r4, r6
100414dc:	2d00      	cmp	r5, #0
100414de:	d127      	bne.n	10041530 <__gedf2+0x98>
100414e0:	430a      	orrs	r2, r1
100414e2:	d03a      	beq.n	1004155a <__gedf2+0xc2>
100414e4:	2c00      	cmp	r4, #0
100414e6:	d145      	bne.n	10041574 <__gedf2+0xdc>
100414e8:	2800      	cmp	r0, #0
100414ea:	d11a      	bne.n	10041522 <__gedf2+0x8a>
100414ec:	2001      	movs	r0, #1
100414ee:	4240      	negs	r0, r0
100414f0:	e017      	b.n	10041522 <__gedf2+0x8a>
100414f2:	4311      	orrs	r1, r2
100414f4:	d13b      	bne.n	1004156e <__gedf2+0xd6>
100414f6:	2e00      	cmp	r6, #0
100414f8:	d102      	bne.n	10041500 <__gedf2+0x68>
100414fa:	9f01      	ldr	r7, [sp, #4]
100414fc:	4327      	orrs	r7, r4
100414fe:	d0f3      	beq.n	100414e8 <__gedf2+0x50>
10041500:	4584      	cmp	ip, r0
10041502:	d109      	bne.n	10041518 <__gedf2+0x80>
10041504:	4663      	mov	r3, ip
10041506:	2b00      	cmp	r3, #0
10041508:	d0f0      	beq.n	100414ec <__gedf2+0x54>
1004150a:	4660      	mov	r0, ip
1004150c:	e009      	b.n	10041522 <__gedf2+0x8a>
1004150e:	9f01      	ldr	r7, [sp, #4]
10041510:	4327      	orrs	r7, r4
10041512:	d12c      	bne.n	1004156e <__gedf2+0xd6>
10041514:	45b2      	cmp	sl, r6
10041516:	d024      	beq.n	10041562 <__gedf2+0xca>
10041518:	4663      	mov	r3, ip
1004151a:	2002      	movs	r0, #2
1004151c:	3b01      	subs	r3, #1
1004151e:	4018      	ands	r0, r3
10041520:	3801      	subs	r0, #1
10041522:	b003      	add	sp, #12
10041524:	bcf0      	pop	{r4, r5, r6, r7}
10041526:	46bb      	mov	fp, r7
10041528:	46b2      	mov	sl, r6
1004152a:	46a9      	mov	r9, r5
1004152c:	46a0      	mov	r8, r4
1004152e:	bdf0      	pop	{r4, r5, r6, r7, pc}
10041530:	2c00      	cmp	r4, #0
10041532:	d0d9      	beq.n	100414e8 <__gedf2+0x50>
10041534:	e7e4      	b.n	10041500 <__gedf2+0x68>
10041536:	4654      	mov	r4, sl
10041538:	2c00      	cmp	r4, #0
1004153a:	d0ed      	beq.n	10041518 <__gedf2+0x80>
1004153c:	4584      	cmp	ip, r0
1004153e:	d1eb      	bne.n	10041518 <__gedf2+0x80>
10041540:	4556      	cmp	r6, sl
10041542:	dce9      	bgt.n	10041518 <__gedf2+0x80>
10041544:	dbde      	blt.n	10041504 <__gedf2+0x6c>
10041546:	9b01      	ldr	r3, [sp, #4]
10041548:	428b      	cmp	r3, r1
1004154a:	d8e5      	bhi.n	10041518 <__gedf2+0x80>
1004154c:	d1da      	bne.n	10041504 <__gedf2+0x6c>
1004154e:	45c8      	cmp	r8, r9
10041550:	d8e2      	bhi.n	10041518 <__gedf2+0x80>
10041552:	2000      	movs	r0, #0
10041554:	45c8      	cmp	r8, r9
10041556:	d2e4      	bcs.n	10041522 <__gedf2+0x8a>
10041558:	e7d4      	b.n	10041504 <__gedf2+0x6c>
1004155a:	2000      	movs	r0, #0
1004155c:	2c00      	cmp	r4, #0
1004155e:	d0e0      	beq.n	10041522 <__gedf2+0x8a>
10041560:	e7da      	b.n	10041518 <__gedf2+0x80>
10041562:	4311      	orrs	r1, r2
10041564:	d103      	bne.n	1004156e <__gedf2+0xd6>
10041566:	4584      	cmp	ip, r0
10041568:	d1d6      	bne.n	10041518 <__gedf2+0x80>
1004156a:	2000      	movs	r0, #0
1004156c:	e7d9      	b.n	10041522 <__gedf2+0x8a>
1004156e:	2002      	movs	r0, #2
10041570:	4240      	negs	r0, r0
10041572:	e7d6      	b.n	10041522 <__gedf2+0x8a>
10041574:	4584      	cmp	ip, r0
10041576:	d0e6      	beq.n	10041546 <__gedf2+0xae>
10041578:	e7ce      	b.n	10041518 <__gedf2+0x80>
1004157a:	46c0      	nop			@ (mov r8, r8)
1004157c:	000007ff 	.word	0x000007ff

10041580 <__ledf2>:
10041580:	b5f0      	push	{r4, r5, r6, r7, lr}
10041582:	4657      	mov	r7, sl
10041584:	464e      	mov	r6, r9
10041586:	4645      	mov	r5, r8
10041588:	46de      	mov	lr, fp
1004158a:	b5e0      	push	{r5, r6, r7, lr}
1004158c:	000d      	movs	r5, r1
1004158e:	030f      	lsls	r7, r1, #12
10041590:	0004      	movs	r4, r0
10041592:	4680      	mov	r8, r0
10041594:	0fe8      	lsrs	r0, r5, #31
10041596:	0b39      	lsrs	r1, r7, #12
10041598:	4684      	mov	ip, r0
1004159a:	b083      	sub	sp, #12
1004159c:	0058      	lsls	r0, r3, #1
1004159e:	4f30      	ldr	r7, [pc, #192]	@ (10041660 <__ledf2+0xe0>)
100415a0:	0d40      	lsrs	r0, r0, #21
100415a2:	9101      	str	r1, [sp, #4]
100415a4:	031e      	lsls	r6, r3, #12
100415a6:	0069      	lsls	r1, r5, #1
100415a8:	4682      	mov	sl, r0
100415aa:	4691      	mov	r9, r2
100415ac:	0d49      	lsrs	r1, r1, #21
100415ae:	0b36      	lsrs	r6, r6, #12
100415b0:	0fd8      	lsrs	r0, r3, #31
100415b2:	42b9      	cmp	r1, r7
100415b4:	d020      	beq.n	100415f8 <__ledf2+0x78>
100415b6:	45ba      	cmp	sl, r7
100415b8:	d00f      	beq.n	100415da <__ledf2+0x5a>
100415ba:	2900      	cmp	r1, #0
100415bc:	d12b      	bne.n	10041616 <__ledf2+0x96>
100415be:	9901      	ldr	r1, [sp, #4]
100415c0:	430c      	orrs	r4, r1
100415c2:	4651      	mov	r1, sl
100415c4:	2900      	cmp	r1, #0
100415c6:	d137      	bne.n	10041638 <__ledf2+0xb8>
100415c8:	4332      	orrs	r2, r6
100415ca:	d038      	beq.n	1004163e <__ledf2+0xbe>
100415cc:	2c00      	cmp	r4, #0
100415ce:	d144      	bne.n	1004165a <__ledf2+0xda>
100415d0:	2800      	cmp	r0, #0
100415d2:	d119      	bne.n	10041608 <__ledf2+0x88>
100415d4:	2001      	movs	r0, #1
100415d6:	4240      	negs	r0, r0
100415d8:	e016      	b.n	10041608 <__ledf2+0x88>
100415da:	4316      	orrs	r6, r2
100415dc:	d113      	bne.n	10041606 <__ledf2+0x86>
100415de:	2900      	cmp	r1, #0
100415e0:	d102      	bne.n	100415e8 <__ledf2+0x68>
100415e2:	9f01      	ldr	r7, [sp, #4]
100415e4:	4327      	orrs	r7, r4
100415e6:	d0f3      	beq.n	100415d0 <__ledf2+0x50>
100415e8:	4584      	cmp	ip, r0
100415ea:	d020      	beq.n	1004162e <__ledf2+0xae>
100415ec:	4663      	mov	r3, ip
100415ee:	2002      	movs	r0, #2
100415f0:	3b01      	subs	r3, #1
100415f2:	4018      	ands	r0, r3
100415f4:	3801      	subs	r0, #1
100415f6:	e007      	b.n	10041608 <__ledf2+0x88>
100415f8:	9f01      	ldr	r7, [sp, #4]
100415fa:	4327      	orrs	r7, r4
100415fc:	d103      	bne.n	10041606 <__ledf2+0x86>
100415fe:	458a      	cmp	sl, r1
10041600:	d1f4      	bne.n	100415ec <__ledf2+0x6c>
10041602:	4316      	orrs	r6, r2
10041604:	d01f      	beq.n	10041646 <__ledf2+0xc6>
10041606:	2002      	movs	r0, #2
10041608:	b003      	add	sp, #12
1004160a:	bcf0      	pop	{r4, r5, r6, r7}
1004160c:	46bb      	mov	fp, r7
1004160e:	46b2      	mov	sl, r6
10041610:	46a9      	mov	r9, r5
10041612:	46a0      	mov	r8, r4
10041614:	bdf0      	pop	{r4, r5, r6, r7, pc}
10041616:	4654      	mov	r4, sl
10041618:	2c00      	cmp	r4, #0
1004161a:	d0e7      	beq.n	100415ec <__ledf2+0x6c>
1004161c:	4584      	cmp	ip, r0
1004161e:	d1e5      	bne.n	100415ec <__ledf2+0x6c>
10041620:	4551      	cmp	r1, sl
10041622:	dce3      	bgt.n	100415ec <__ledf2+0x6c>
10041624:	db03      	blt.n	1004162e <__ledf2+0xae>
10041626:	9b01      	ldr	r3, [sp, #4]
10041628:	42b3      	cmp	r3, r6
1004162a:	d8df      	bhi.n	100415ec <__ledf2+0x6c>
1004162c:	d00f      	beq.n	1004164e <__ledf2+0xce>
1004162e:	4663      	mov	r3, ip
10041630:	2b00      	cmp	r3, #0
10041632:	d0cf      	beq.n	100415d4 <__ledf2+0x54>
10041634:	4660      	mov	r0, ip
10041636:	e7e7      	b.n	10041608 <__ledf2+0x88>
10041638:	2c00      	cmp	r4, #0
1004163a:	d0c9      	beq.n	100415d0 <__ledf2+0x50>
1004163c:	e7d4      	b.n	100415e8 <__ledf2+0x68>
1004163e:	2000      	movs	r0, #0
10041640:	2c00      	cmp	r4, #0
10041642:	d0e1      	beq.n	10041608 <__ledf2+0x88>
10041644:	e7d2      	b.n	100415ec <__ledf2+0x6c>
10041646:	4584      	cmp	ip, r0
10041648:	d1d0      	bne.n	100415ec <__ledf2+0x6c>
1004164a:	2000      	movs	r0, #0
1004164c:	e7dc      	b.n	10041608 <__ledf2+0x88>
1004164e:	45c8      	cmp	r8, r9
10041650:	d8cc      	bhi.n	100415ec <__ledf2+0x6c>
10041652:	2000      	movs	r0, #0
10041654:	45c8      	cmp	r8, r9
10041656:	d2d7      	bcs.n	10041608 <__ledf2+0x88>
10041658:	e7e9      	b.n	1004162e <__ledf2+0xae>
1004165a:	4584      	cmp	ip, r0
1004165c:	d0e3      	beq.n	10041626 <__ledf2+0xa6>
1004165e:	e7c5      	b.n	100415ec <__ledf2+0x6c>
10041660:	000007ff 	.word	0x000007ff

10041664 <__aeabi_dmul>:
10041664:	b5f0      	push	{r4, r5, r6, r7, lr}
10041666:	4657      	mov	r7, sl
10041668:	46de      	mov	lr, fp
1004166a:	464e      	mov	r6, r9
1004166c:	4645      	mov	r5, r8
1004166e:	b5e0      	push	{r5, r6, r7, lr}
10041670:	001f      	movs	r7, r3
10041672:	030b      	lsls	r3, r1, #12
10041674:	0b1b      	lsrs	r3, r3, #12
10041676:	0016      	movs	r6, r2
10041678:	469a      	mov	sl, r3
1004167a:	0fca      	lsrs	r2, r1, #31
1004167c:	004b      	lsls	r3, r1, #1
1004167e:	0004      	movs	r4, r0
10041680:	4693      	mov	fp, r2
10041682:	b087      	sub	sp, #28
10041684:	0d5b      	lsrs	r3, r3, #21
10041686:	d100      	bne.n	1004168a <__aeabi_dmul+0x26>
10041688:	e0d5      	b.n	10041836 <__aeabi_dmul+0x1d2>
1004168a:	4abb      	ldr	r2, [pc, #748]	@ (10041978 <__aeabi_dmul+0x314>)
1004168c:	4293      	cmp	r3, r2
1004168e:	d100      	bne.n	10041692 <__aeabi_dmul+0x2e>
10041690:	e0f8      	b.n	10041884 <__aeabi_dmul+0x220>
10041692:	4651      	mov	r1, sl
10041694:	0f42      	lsrs	r2, r0, #29
10041696:	00c9      	lsls	r1, r1, #3
10041698:	430a      	orrs	r2, r1
1004169a:	2180      	movs	r1, #128	@ 0x80
1004169c:	0409      	lsls	r1, r1, #16
1004169e:	4311      	orrs	r1, r2
100416a0:	00c2      	lsls	r2, r0, #3
100416a2:	4691      	mov	r9, r2
100416a4:	4ab5      	ldr	r2, [pc, #724]	@ (1004197c <__aeabi_dmul+0x318>)
100416a6:	468a      	mov	sl, r1
100416a8:	189d      	adds	r5, r3, r2
100416aa:	2300      	movs	r3, #0
100416ac:	4698      	mov	r8, r3
100416ae:	9302      	str	r3, [sp, #8]
100416b0:	033c      	lsls	r4, r7, #12
100416b2:	007b      	lsls	r3, r7, #1
100416b4:	0ffa      	lsrs	r2, r7, #31
100416b6:	0030      	movs	r0, r6
100416b8:	0b24      	lsrs	r4, r4, #12
100416ba:	0d5b      	lsrs	r3, r3, #21
100416bc:	9200      	str	r2, [sp, #0]
100416be:	d100      	bne.n	100416c2 <__aeabi_dmul+0x5e>
100416c0:	e096      	b.n	100417f0 <__aeabi_dmul+0x18c>
100416c2:	4aad      	ldr	r2, [pc, #692]	@ (10041978 <__aeabi_dmul+0x314>)
100416c4:	4293      	cmp	r3, r2
100416c6:	d031      	beq.n	1004172c <__aeabi_dmul+0xc8>
100416c8:	0f72      	lsrs	r2, r6, #29
100416ca:	00e4      	lsls	r4, r4, #3
100416cc:	4322      	orrs	r2, r4
100416ce:	2480      	movs	r4, #128	@ 0x80
100416d0:	0424      	lsls	r4, r4, #16
100416d2:	4314      	orrs	r4, r2
100416d4:	4aa9      	ldr	r2, [pc, #676]	@ (1004197c <__aeabi_dmul+0x318>)
100416d6:	00f0      	lsls	r0, r6, #3
100416d8:	4694      	mov	ip, r2
100416da:	4463      	add	r3, ip
100416dc:	195b      	adds	r3, r3, r5
100416de:	1c5a      	adds	r2, r3, #1
100416e0:	9201      	str	r2, [sp, #4]
100416e2:	4642      	mov	r2, r8
100416e4:	2600      	movs	r6, #0
100416e6:	2a0a      	cmp	r2, #10
100416e8:	dc42      	bgt.n	10041770 <__aeabi_dmul+0x10c>
100416ea:	465a      	mov	r2, fp
100416ec:	9900      	ldr	r1, [sp, #0]
100416ee:	404a      	eors	r2, r1
100416f0:	4693      	mov	fp, r2
100416f2:	4642      	mov	r2, r8
100416f4:	2a02      	cmp	r2, #2
100416f6:	dc32      	bgt.n	1004175e <__aeabi_dmul+0xfa>
100416f8:	3a01      	subs	r2, #1
100416fa:	2a01      	cmp	r2, #1
100416fc:	d900      	bls.n	10041700 <__aeabi_dmul+0x9c>
100416fe:	e149      	b.n	10041994 <__aeabi_dmul+0x330>
10041700:	2e02      	cmp	r6, #2
10041702:	d100      	bne.n	10041706 <__aeabi_dmul+0xa2>
10041704:	e0ca      	b.n	1004189c <__aeabi_dmul+0x238>
10041706:	2e01      	cmp	r6, #1
10041708:	d13d      	bne.n	10041786 <__aeabi_dmul+0x122>
1004170a:	2300      	movs	r3, #0
1004170c:	2400      	movs	r4, #0
1004170e:	2200      	movs	r2, #0
10041710:	0010      	movs	r0, r2
10041712:	465a      	mov	r2, fp
10041714:	051b      	lsls	r3, r3, #20
10041716:	4323      	orrs	r3, r4
10041718:	07d2      	lsls	r2, r2, #31
1004171a:	4313      	orrs	r3, r2
1004171c:	0019      	movs	r1, r3
1004171e:	b007      	add	sp, #28
10041720:	bcf0      	pop	{r4, r5, r6, r7}
10041722:	46bb      	mov	fp, r7
10041724:	46b2      	mov	sl, r6
10041726:	46a9      	mov	r9, r5
10041728:	46a0      	mov	r8, r4
1004172a:	bdf0      	pop	{r4, r5, r6, r7, pc}
1004172c:	4b92      	ldr	r3, [pc, #584]	@ (10041978 <__aeabi_dmul+0x314>)
1004172e:	4326      	orrs	r6, r4
10041730:	18eb      	adds	r3, r5, r3
10041732:	2e00      	cmp	r6, #0
10041734:	d100      	bne.n	10041738 <__aeabi_dmul+0xd4>
10041736:	e0bb      	b.n	100418b0 <__aeabi_dmul+0x24c>
10041738:	2203      	movs	r2, #3
1004173a:	4641      	mov	r1, r8
1004173c:	4311      	orrs	r1, r2
1004173e:	465a      	mov	r2, fp
10041740:	4688      	mov	r8, r1
10041742:	9900      	ldr	r1, [sp, #0]
10041744:	404a      	eors	r2, r1
10041746:	2180      	movs	r1, #128	@ 0x80
10041748:	0109      	lsls	r1, r1, #4
1004174a:	468c      	mov	ip, r1
1004174c:	0029      	movs	r1, r5
1004174e:	4461      	add	r1, ip
10041750:	9101      	str	r1, [sp, #4]
10041752:	4641      	mov	r1, r8
10041754:	290a      	cmp	r1, #10
10041756:	dd00      	ble.n	1004175a <__aeabi_dmul+0xf6>
10041758:	e233      	b.n	10041bc2 <__aeabi_dmul+0x55e>
1004175a:	4693      	mov	fp, r2
1004175c:	2603      	movs	r6, #3
1004175e:	4642      	mov	r2, r8
10041760:	2701      	movs	r7, #1
10041762:	4097      	lsls	r7, r2
10041764:	21a6      	movs	r1, #166	@ 0xa6
10041766:	003a      	movs	r2, r7
10041768:	00c9      	lsls	r1, r1, #3
1004176a:	400a      	ands	r2, r1
1004176c:	420f      	tst	r7, r1
1004176e:	d031      	beq.n	100417d4 <__aeabi_dmul+0x170>
10041770:	9e02      	ldr	r6, [sp, #8]
10041772:	2e02      	cmp	r6, #2
10041774:	d100      	bne.n	10041778 <__aeabi_dmul+0x114>
10041776:	e235      	b.n	10041be4 <__aeabi_dmul+0x580>
10041778:	2e03      	cmp	r6, #3
1004177a:	d100      	bne.n	1004177e <__aeabi_dmul+0x11a>
1004177c:	e1d2      	b.n	10041b24 <__aeabi_dmul+0x4c0>
1004177e:	4654      	mov	r4, sl
10041780:	4648      	mov	r0, r9
10041782:	2e01      	cmp	r6, #1
10041784:	d0c1      	beq.n	1004170a <__aeabi_dmul+0xa6>
10041786:	9a01      	ldr	r2, [sp, #4]
10041788:	4b7d      	ldr	r3, [pc, #500]	@ (10041980 <__aeabi_dmul+0x31c>)
1004178a:	4694      	mov	ip, r2
1004178c:	4463      	add	r3, ip
1004178e:	2b00      	cmp	r3, #0
10041790:	dc00      	bgt.n	10041794 <__aeabi_dmul+0x130>
10041792:	e0c0      	b.n	10041916 <__aeabi_dmul+0x2b2>
10041794:	0742      	lsls	r2, r0, #29
10041796:	d009      	beq.n	100417ac <__aeabi_dmul+0x148>
10041798:	220f      	movs	r2, #15
1004179a:	4002      	ands	r2, r0
1004179c:	2a04      	cmp	r2, #4
1004179e:	d005      	beq.n	100417ac <__aeabi_dmul+0x148>
100417a0:	1d02      	adds	r2, r0, #4
100417a2:	4282      	cmp	r2, r0
100417a4:	4180      	sbcs	r0, r0
100417a6:	4240      	negs	r0, r0
100417a8:	1824      	adds	r4, r4, r0
100417aa:	0010      	movs	r0, r2
100417ac:	01e2      	lsls	r2, r4, #7
100417ae:	d506      	bpl.n	100417be <__aeabi_dmul+0x15a>
100417b0:	4b74      	ldr	r3, [pc, #464]	@ (10041984 <__aeabi_dmul+0x320>)
100417b2:	9a01      	ldr	r2, [sp, #4]
100417b4:	401c      	ands	r4, r3
100417b6:	2380      	movs	r3, #128	@ 0x80
100417b8:	4694      	mov	ip, r2
100417ba:	00db      	lsls	r3, r3, #3
100417bc:	4463      	add	r3, ip
100417be:	4a72      	ldr	r2, [pc, #456]	@ (10041988 <__aeabi_dmul+0x324>)
100417c0:	4293      	cmp	r3, r2
100417c2:	dc6b      	bgt.n	1004189c <__aeabi_dmul+0x238>
100417c4:	0762      	lsls	r2, r4, #29
100417c6:	08c0      	lsrs	r0, r0, #3
100417c8:	0264      	lsls	r4, r4, #9
100417ca:	055b      	lsls	r3, r3, #21
100417cc:	4302      	orrs	r2, r0
100417ce:	0b24      	lsrs	r4, r4, #12
100417d0:	0d5b      	lsrs	r3, r3, #21
100417d2:	e79d      	b.n	10041710 <__aeabi_dmul+0xac>
100417d4:	2190      	movs	r1, #144	@ 0x90
100417d6:	0089      	lsls	r1, r1, #2
100417d8:	420f      	tst	r7, r1
100417da:	d163      	bne.n	100418a4 <__aeabi_dmul+0x240>
100417dc:	2288      	movs	r2, #136	@ 0x88
100417de:	423a      	tst	r2, r7
100417e0:	d100      	bne.n	100417e4 <__aeabi_dmul+0x180>
100417e2:	e0d7      	b.n	10041994 <__aeabi_dmul+0x330>
100417e4:	9b00      	ldr	r3, [sp, #0]
100417e6:	46a2      	mov	sl, r4
100417e8:	469b      	mov	fp, r3
100417ea:	4681      	mov	r9, r0
100417ec:	9602      	str	r6, [sp, #8]
100417ee:	e7bf      	b.n	10041770 <__aeabi_dmul+0x10c>
100417f0:	0023      	movs	r3, r4
100417f2:	4333      	orrs	r3, r6
100417f4:	d100      	bne.n	100417f8 <__aeabi_dmul+0x194>
100417f6:	e07f      	b.n	100418f8 <__aeabi_dmul+0x294>
100417f8:	2c00      	cmp	r4, #0
100417fa:	d100      	bne.n	100417fe <__aeabi_dmul+0x19a>
100417fc:	e1ad      	b.n	10041b5a <__aeabi_dmul+0x4f6>
100417fe:	0020      	movs	r0, r4
10041800:	f000 fe44 	bl	1004248c <__clzsi2>
10041804:	0002      	movs	r2, r0
10041806:	0003      	movs	r3, r0
10041808:	3a0b      	subs	r2, #11
1004180a:	201d      	movs	r0, #29
1004180c:	0019      	movs	r1, r3
1004180e:	1a82      	subs	r2, r0, r2
10041810:	0030      	movs	r0, r6
10041812:	3908      	subs	r1, #8
10041814:	40d0      	lsrs	r0, r2
10041816:	408c      	lsls	r4, r1
10041818:	4304      	orrs	r4, r0
1004181a:	0030      	movs	r0, r6
1004181c:	4088      	lsls	r0, r1
1004181e:	4a5b      	ldr	r2, [pc, #364]	@ (1004198c <__aeabi_dmul+0x328>)
10041820:	1aeb      	subs	r3, r5, r3
10041822:	4694      	mov	ip, r2
10041824:	4463      	add	r3, ip
10041826:	1c5a      	adds	r2, r3, #1
10041828:	9201      	str	r2, [sp, #4]
1004182a:	4642      	mov	r2, r8
1004182c:	2600      	movs	r6, #0
1004182e:	2a0a      	cmp	r2, #10
10041830:	dc00      	bgt.n	10041834 <__aeabi_dmul+0x1d0>
10041832:	e75a      	b.n	100416ea <__aeabi_dmul+0x86>
10041834:	e79c      	b.n	10041770 <__aeabi_dmul+0x10c>
10041836:	4653      	mov	r3, sl
10041838:	4303      	orrs	r3, r0
1004183a:	4699      	mov	r9, r3
1004183c:	d054      	beq.n	100418e8 <__aeabi_dmul+0x284>
1004183e:	4653      	mov	r3, sl
10041840:	2b00      	cmp	r3, #0
10041842:	d100      	bne.n	10041846 <__aeabi_dmul+0x1e2>
10041844:	e177      	b.n	10041b36 <__aeabi_dmul+0x4d2>
10041846:	4650      	mov	r0, sl
10041848:	f000 fe20 	bl	1004248c <__clzsi2>
1004184c:	230b      	movs	r3, #11
1004184e:	425b      	negs	r3, r3
10041850:	469c      	mov	ip, r3
10041852:	0002      	movs	r2, r0
10041854:	4484      	add	ip, r0
10041856:	0011      	movs	r1, r2
10041858:	4650      	mov	r0, sl
1004185a:	3908      	subs	r1, #8
1004185c:	4088      	lsls	r0, r1
1004185e:	231d      	movs	r3, #29
10041860:	4680      	mov	r8, r0
10041862:	4660      	mov	r0, ip
10041864:	1a1b      	subs	r3, r3, r0
10041866:	0020      	movs	r0, r4
10041868:	40d8      	lsrs	r0, r3
1004186a:	0003      	movs	r3, r0
1004186c:	4640      	mov	r0, r8
1004186e:	4303      	orrs	r3, r0
10041870:	469a      	mov	sl, r3
10041872:	0023      	movs	r3, r4
10041874:	408b      	lsls	r3, r1
10041876:	4699      	mov	r9, r3
10041878:	2300      	movs	r3, #0
1004187a:	4d44      	ldr	r5, [pc, #272]	@ (1004198c <__aeabi_dmul+0x328>)
1004187c:	4698      	mov	r8, r3
1004187e:	1aad      	subs	r5, r5, r2
10041880:	9302      	str	r3, [sp, #8]
10041882:	e715      	b.n	100416b0 <__aeabi_dmul+0x4c>
10041884:	4652      	mov	r2, sl
10041886:	4302      	orrs	r2, r0
10041888:	4691      	mov	r9, r2
1004188a:	d126      	bne.n	100418da <__aeabi_dmul+0x276>
1004188c:	2200      	movs	r2, #0
1004188e:	001d      	movs	r5, r3
10041890:	2302      	movs	r3, #2
10041892:	4692      	mov	sl, r2
10041894:	3208      	adds	r2, #8
10041896:	4690      	mov	r8, r2
10041898:	9302      	str	r3, [sp, #8]
1004189a:	e709      	b.n	100416b0 <__aeabi_dmul+0x4c>
1004189c:	2400      	movs	r4, #0
1004189e:	2200      	movs	r2, #0
100418a0:	4b35      	ldr	r3, [pc, #212]	@ (10041978 <__aeabi_dmul+0x314>)
100418a2:	e735      	b.n	10041710 <__aeabi_dmul+0xac>
100418a4:	2300      	movs	r3, #0
100418a6:	2480      	movs	r4, #128	@ 0x80
100418a8:	469b      	mov	fp, r3
100418aa:	0324      	lsls	r4, r4, #12
100418ac:	4b32      	ldr	r3, [pc, #200]	@ (10041978 <__aeabi_dmul+0x314>)
100418ae:	e72f      	b.n	10041710 <__aeabi_dmul+0xac>
100418b0:	2202      	movs	r2, #2
100418b2:	4641      	mov	r1, r8
100418b4:	4311      	orrs	r1, r2
100418b6:	2280      	movs	r2, #128	@ 0x80
100418b8:	0112      	lsls	r2, r2, #4
100418ba:	4694      	mov	ip, r2
100418bc:	002a      	movs	r2, r5
100418be:	4462      	add	r2, ip
100418c0:	4688      	mov	r8, r1
100418c2:	9201      	str	r2, [sp, #4]
100418c4:	290a      	cmp	r1, #10
100418c6:	dd00      	ble.n	100418ca <__aeabi_dmul+0x266>
100418c8:	e752      	b.n	10041770 <__aeabi_dmul+0x10c>
100418ca:	465a      	mov	r2, fp
100418cc:	2000      	movs	r0, #0
100418ce:	9900      	ldr	r1, [sp, #0]
100418d0:	0004      	movs	r4, r0
100418d2:	404a      	eors	r2, r1
100418d4:	4693      	mov	fp, r2
100418d6:	2602      	movs	r6, #2
100418d8:	e70b      	b.n	100416f2 <__aeabi_dmul+0x8e>
100418da:	220c      	movs	r2, #12
100418dc:	001d      	movs	r5, r3
100418de:	2303      	movs	r3, #3
100418e0:	4681      	mov	r9, r0
100418e2:	4690      	mov	r8, r2
100418e4:	9302      	str	r3, [sp, #8]
100418e6:	e6e3      	b.n	100416b0 <__aeabi_dmul+0x4c>
100418e8:	2300      	movs	r3, #0
100418ea:	469a      	mov	sl, r3
100418ec:	3304      	adds	r3, #4
100418ee:	4698      	mov	r8, r3
100418f0:	3b03      	subs	r3, #3
100418f2:	2500      	movs	r5, #0
100418f4:	9302      	str	r3, [sp, #8]
100418f6:	e6db      	b.n	100416b0 <__aeabi_dmul+0x4c>
100418f8:	4642      	mov	r2, r8
100418fa:	3301      	adds	r3, #1
100418fc:	431a      	orrs	r2, r3
100418fe:	002b      	movs	r3, r5
10041900:	4690      	mov	r8, r2
10041902:	1c5a      	adds	r2, r3, #1
10041904:	9201      	str	r2, [sp, #4]
10041906:	4642      	mov	r2, r8
10041908:	2400      	movs	r4, #0
1004190a:	2000      	movs	r0, #0
1004190c:	2601      	movs	r6, #1
1004190e:	2a0a      	cmp	r2, #10
10041910:	dc00      	bgt.n	10041914 <__aeabi_dmul+0x2b0>
10041912:	e6ea      	b.n	100416ea <__aeabi_dmul+0x86>
10041914:	e72c      	b.n	10041770 <__aeabi_dmul+0x10c>
10041916:	2201      	movs	r2, #1
10041918:	1ad2      	subs	r2, r2, r3
1004191a:	2a38      	cmp	r2, #56	@ 0x38
1004191c:	dd00      	ble.n	10041920 <__aeabi_dmul+0x2bc>
1004191e:	e6f4      	b.n	1004170a <__aeabi_dmul+0xa6>
10041920:	2a1f      	cmp	r2, #31
10041922:	dc00      	bgt.n	10041926 <__aeabi_dmul+0x2c2>
10041924:	e12a      	b.n	10041b7c <__aeabi_dmul+0x518>
10041926:	211f      	movs	r1, #31
10041928:	4249      	negs	r1, r1
1004192a:	1acb      	subs	r3, r1, r3
1004192c:	0021      	movs	r1, r4
1004192e:	40d9      	lsrs	r1, r3
10041930:	000b      	movs	r3, r1
10041932:	2a20      	cmp	r2, #32
10041934:	d005      	beq.n	10041942 <__aeabi_dmul+0x2de>
10041936:	4a16      	ldr	r2, [pc, #88]	@ (10041990 <__aeabi_dmul+0x32c>)
10041938:	9d01      	ldr	r5, [sp, #4]
1004193a:	4694      	mov	ip, r2
1004193c:	4465      	add	r5, ip
1004193e:	40ac      	lsls	r4, r5
10041940:	4320      	orrs	r0, r4
10041942:	1e42      	subs	r2, r0, #1
10041944:	4190      	sbcs	r0, r2
10041946:	4318      	orrs	r0, r3
10041948:	2307      	movs	r3, #7
1004194a:	0019      	movs	r1, r3
1004194c:	2400      	movs	r4, #0
1004194e:	4001      	ands	r1, r0
10041950:	4203      	tst	r3, r0
10041952:	d00c      	beq.n	1004196e <__aeabi_dmul+0x30a>
10041954:	230f      	movs	r3, #15
10041956:	4003      	ands	r3, r0
10041958:	2b04      	cmp	r3, #4
1004195a:	d100      	bne.n	1004195e <__aeabi_dmul+0x2fa>
1004195c:	e140      	b.n	10041be0 <__aeabi_dmul+0x57c>
1004195e:	1d03      	adds	r3, r0, #4
10041960:	4283      	cmp	r3, r0
10041962:	41a4      	sbcs	r4, r4
10041964:	0018      	movs	r0, r3
10041966:	4264      	negs	r4, r4
10041968:	0761      	lsls	r1, r4, #29
1004196a:	0264      	lsls	r4, r4, #9
1004196c:	0b24      	lsrs	r4, r4, #12
1004196e:	08c2      	lsrs	r2, r0, #3
10041970:	2300      	movs	r3, #0
10041972:	430a      	orrs	r2, r1
10041974:	e6cc      	b.n	10041710 <__aeabi_dmul+0xac>
10041976:	46c0      	nop			@ (mov r8, r8)
10041978:	000007ff 	.word	0x000007ff
1004197c:	fffffc01 	.word	0xfffffc01
10041980:	000003ff 	.word	0x000003ff
10041984:	feffffff 	.word	0xfeffffff
10041988:	000007fe 	.word	0x000007fe
1004198c:	fffffc0d 	.word	0xfffffc0d
10041990:	0000043e 	.word	0x0000043e
10041994:	4649      	mov	r1, r9
10041996:	464a      	mov	r2, r9
10041998:	0409      	lsls	r1, r1, #16
1004199a:	0c09      	lsrs	r1, r1, #16
1004199c:	000d      	movs	r5, r1
1004199e:	0c16      	lsrs	r6, r2, #16
100419a0:	0c02      	lsrs	r2, r0, #16
100419a2:	0400      	lsls	r0, r0, #16
100419a4:	0c00      	lsrs	r0, r0, #16
100419a6:	4345      	muls	r5, r0
100419a8:	46ac      	mov	ip, r5
100419aa:	0005      	movs	r5, r0
100419ac:	4375      	muls	r5, r6
100419ae:	46a8      	mov	r8, r5
100419b0:	0015      	movs	r5, r2
100419b2:	000f      	movs	r7, r1
100419b4:	4375      	muls	r5, r6
100419b6:	9200      	str	r2, [sp, #0]
100419b8:	9502      	str	r5, [sp, #8]
100419ba:	002a      	movs	r2, r5
100419bc:	9d00      	ldr	r5, [sp, #0]
100419be:	436f      	muls	r7, r5
100419c0:	4665      	mov	r5, ip
100419c2:	0c2d      	lsrs	r5, r5, #16
100419c4:	46a9      	mov	r9, r5
100419c6:	4447      	add	r7, r8
100419c8:	444f      	add	r7, r9
100419ca:	45b8      	cmp	r8, r7
100419cc:	d905      	bls.n	100419da <__aeabi_dmul+0x376>
100419ce:	0015      	movs	r5, r2
100419d0:	2280      	movs	r2, #128	@ 0x80
100419d2:	0252      	lsls	r2, r2, #9
100419d4:	4690      	mov	r8, r2
100419d6:	4445      	add	r5, r8
100419d8:	9502      	str	r5, [sp, #8]
100419da:	0c3d      	lsrs	r5, r7, #16
100419dc:	9503      	str	r5, [sp, #12]
100419de:	4665      	mov	r5, ip
100419e0:	042d      	lsls	r5, r5, #16
100419e2:	043f      	lsls	r7, r7, #16
100419e4:	0c2d      	lsrs	r5, r5, #16
100419e6:	46ac      	mov	ip, r5
100419e8:	003d      	movs	r5, r7
100419ea:	4465      	add	r5, ip
100419ec:	9504      	str	r5, [sp, #16]
100419ee:	0c25      	lsrs	r5, r4, #16
100419f0:	0424      	lsls	r4, r4, #16
100419f2:	0c24      	lsrs	r4, r4, #16
100419f4:	46ac      	mov	ip, r5
100419f6:	0025      	movs	r5, r4
100419f8:	4375      	muls	r5, r6
100419fa:	46a8      	mov	r8, r5
100419fc:	4665      	mov	r5, ip
100419fe:	000f      	movs	r7, r1
10041a00:	4369      	muls	r1, r5
10041a02:	4441      	add	r1, r8
10041a04:	4689      	mov	r9, r1
10041a06:	4367      	muls	r7, r4
10041a08:	0c39      	lsrs	r1, r7, #16
10041a0a:	4449      	add	r1, r9
10041a0c:	436e      	muls	r6, r5
10041a0e:	4588      	cmp	r8, r1
10041a10:	d903      	bls.n	10041a1a <__aeabi_dmul+0x3b6>
10041a12:	2280      	movs	r2, #128	@ 0x80
10041a14:	0252      	lsls	r2, r2, #9
10041a16:	4690      	mov	r8, r2
10041a18:	4446      	add	r6, r8
10041a1a:	0c0d      	lsrs	r5, r1, #16
10041a1c:	46a8      	mov	r8, r5
10041a1e:	0035      	movs	r5, r6
10041a20:	4445      	add	r5, r8
10041a22:	9505      	str	r5, [sp, #20]
10041a24:	9d03      	ldr	r5, [sp, #12]
10041a26:	043f      	lsls	r7, r7, #16
10041a28:	46a8      	mov	r8, r5
10041a2a:	0c3f      	lsrs	r7, r7, #16
10041a2c:	0409      	lsls	r1, r1, #16
10041a2e:	19c9      	adds	r1, r1, r7
10041a30:	4488      	add	r8, r1
10041a32:	4645      	mov	r5, r8
10041a34:	9503      	str	r5, [sp, #12]
10041a36:	4655      	mov	r5, sl
10041a38:	042e      	lsls	r6, r5, #16
10041a3a:	0c36      	lsrs	r6, r6, #16
10041a3c:	0c2f      	lsrs	r7, r5, #16
10041a3e:	0035      	movs	r5, r6
10041a40:	4345      	muls	r5, r0
10041a42:	4378      	muls	r0, r7
10041a44:	4681      	mov	r9, r0
10041a46:	0038      	movs	r0, r7
10041a48:	46a8      	mov	r8, r5
10041a4a:	0c2d      	lsrs	r5, r5, #16
10041a4c:	46aa      	mov	sl, r5
10041a4e:	9a00      	ldr	r2, [sp, #0]
10041a50:	4350      	muls	r0, r2
10041a52:	4372      	muls	r2, r6
10041a54:	444a      	add	r2, r9
10041a56:	4452      	add	r2, sl
10041a58:	4591      	cmp	r9, r2
10041a5a:	d903      	bls.n	10041a64 <__aeabi_dmul+0x400>
10041a5c:	2580      	movs	r5, #128	@ 0x80
10041a5e:	026d      	lsls	r5, r5, #9
10041a60:	46a9      	mov	r9, r5
10041a62:	4448      	add	r0, r9
10041a64:	0c15      	lsrs	r5, r2, #16
10041a66:	46a9      	mov	r9, r5
10041a68:	4645      	mov	r5, r8
10041a6a:	042d      	lsls	r5, r5, #16
10041a6c:	0c2d      	lsrs	r5, r5, #16
10041a6e:	46a8      	mov	r8, r5
10041a70:	4665      	mov	r5, ip
10041a72:	437d      	muls	r5, r7
10041a74:	0412      	lsls	r2, r2, #16
10041a76:	4448      	add	r0, r9
10041a78:	4490      	add	r8, r2
10041a7a:	46a9      	mov	r9, r5
10041a7c:	0032      	movs	r2, r6
10041a7e:	4665      	mov	r5, ip
10041a80:	4362      	muls	r2, r4
10041a82:	436e      	muls	r6, r5
10041a84:	437c      	muls	r4, r7
10041a86:	0c17      	lsrs	r7, r2, #16
10041a88:	1936      	adds	r6, r6, r4
10041a8a:	19bf      	adds	r7, r7, r6
10041a8c:	42bc      	cmp	r4, r7
10041a8e:	d903      	bls.n	10041a98 <__aeabi_dmul+0x434>
10041a90:	2480      	movs	r4, #128	@ 0x80
10041a92:	0264      	lsls	r4, r4, #9
10041a94:	46a4      	mov	ip, r4
10041a96:	44e1      	add	r9, ip
10041a98:	9c02      	ldr	r4, [sp, #8]
10041a9a:	9e03      	ldr	r6, [sp, #12]
10041a9c:	46a4      	mov	ip, r4
10041a9e:	9d05      	ldr	r5, [sp, #20]
10041aa0:	4466      	add	r6, ip
10041aa2:	428e      	cmp	r6, r1
10041aa4:	4189      	sbcs	r1, r1
10041aa6:	46ac      	mov	ip, r5
10041aa8:	0412      	lsls	r2, r2, #16
10041aaa:	043c      	lsls	r4, r7, #16
10041aac:	0c12      	lsrs	r2, r2, #16
10041aae:	18a2      	adds	r2, r4, r2
10041ab0:	4462      	add	r2, ip
10041ab2:	4249      	negs	r1, r1
10041ab4:	1854      	adds	r4, r2, r1
10041ab6:	4446      	add	r6, r8
10041ab8:	46a4      	mov	ip, r4
10041aba:	4546      	cmp	r6, r8
10041abc:	41a4      	sbcs	r4, r4
10041abe:	4682      	mov	sl, r0
10041ac0:	4264      	negs	r4, r4
10041ac2:	46a0      	mov	r8, r4
10041ac4:	42aa      	cmp	r2, r5
10041ac6:	4192      	sbcs	r2, r2
10041ac8:	458c      	cmp	ip, r1
10041aca:	4189      	sbcs	r1, r1
10041acc:	44e2      	add	sl, ip
10041ace:	44d0      	add	r8, sl
10041ad0:	4249      	negs	r1, r1
10041ad2:	4252      	negs	r2, r2
10041ad4:	430a      	orrs	r2, r1
10041ad6:	45a0      	cmp	r8, r4
10041ad8:	41a4      	sbcs	r4, r4
10041ada:	4582      	cmp	sl, r0
10041adc:	4189      	sbcs	r1, r1
10041ade:	4264      	negs	r4, r4
10041ae0:	4249      	negs	r1, r1
10041ae2:	430c      	orrs	r4, r1
10041ae4:	4641      	mov	r1, r8
10041ae6:	0c3f      	lsrs	r7, r7, #16
10041ae8:	19d2      	adds	r2, r2, r7
10041aea:	1912      	adds	r2, r2, r4
10041aec:	0dcc      	lsrs	r4, r1, #23
10041aee:	9904      	ldr	r1, [sp, #16]
10041af0:	0270      	lsls	r0, r6, #9
10041af2:	4308      	orrs	r0, r1
10041af4:	1e41      	subs	r1, r0, #1
10041af6:	4188      	sbcs	r0, r1
10041af8:	4641      	mov	r1, r8
10041afa:	444a      	add	r2, r9
10041afc:	0df6      	lsrs	r6, r6, #23
10041afe:	0252      	lsls	r2, r2, #9
10041b00:	4330      	orrs	r0, r6
10041b02:	0249      	lsls	r1, r1, #9
10041b04:	4314      	orrs	r4, r2
10041b06:	4308      	orrs	r0, r1
10041b08:	01d2      	lsls	r2, r2, #7
10041b0a:	d535      	bpl.n	10041b78 <__aeabi_dmul+0x514>
10041b0c:	2201      	movs	r2, #1
10041b0e:	0843      	lsrs	r3, r0, #1
10041b10:	4002      	ands	r2, r0
10041b12:	4313      	orrs	r3, r2
10041b14:	07e0      	lsls	r0, r4, #31
10041b16:	4318      	orrs	r0, r3
10041b18:	0864      	lsrs	r4, r4, #1
10041b1a:	e634      	b.n	10041786 <__aeabi_dmul+0x122>
10041b1c:	9b00      	ldr	r3, [sp, #0]
10041b1e:	46a2      	mov	sl, r4
10041b20:	469b      	mov	fp, r3
10041b22:	4681      	mov	r9, r0
10041b24:	2480      	movs	r4, #128	@ 0x80
10041b26:	4653      	mov	r3, sl
10041b28:	0324      	lsls	r4, r4, #12
10041b2a:	431c      	orrs	r4, r3
10041b2c:	0324      	lsls	r4, r4, #12
10041b2e:	464a      	mov	r2, r9
10041b30:	4b2e      	ldr	r3, [pc, #184]	@ (10041bec <__aeabi_dmul+0x588>)
10041b32:	0b24      	lsrs	r4, r4, #12
10041b34:	e5ec      	b.n	10041710 <__aeabi_dmul+0xac>
10041b36:	f000 fca9 	bl	1004248c <__clzsi2>
10041b3a:	2315      	movs	r3, #21
10041b3c:	469c      	mov	ip, r3
10041b3e:	4484      	add	ip, r0
10041b40:	0002      	movs	r2, r0
10041b42:	4663      	mov	r3, ip
10041b44:	3220      	adds	r2, #32
10041b46:	2b1c      	cmp	r3, #28
10041b48:	dc00      	bgt.n	10041b4c <__aeabi_dmul+0x4e8>
10041b4a:	e684      	b.n	10041856 <__aeabi_dmul+0x1f2>
10041b4c:	2300      	movs	r3, #0
10041b4e:	4699      	mov	r9, r3
10041b50:	0023      	movs	r3, r4
10041b52:	3808      	subs	r0, #8
10041b54:	4083      	lsls	r3, r0
10041b56:	469a      	mov	sl, r3
10041b58:	e68e      	b.n	10041878 <__aeabi_dmul+0x214>
10041b5a:	f000 fc97 	bl	1004248c <__clzsi2>
10041b5e:	0002      	movs	r2, r0
10041b60:	0003      	movs	r3, r0
10041b62:	3215      	adds	r2, #21
10041b64:	3320      	adds	r3, #32
10041b66:	2a1c      	cmp	r2, #28
10041b68:	dc00      	bgt.n	10041b6c <__aeabi_dmul+0x508>
10041b6a:	e64e      	b.n	1004180a <__aeabi_dmul+0x1a6>
10041b6c:	0002      	movs	r2, r0
10041b6e:	0034      	movs	r4, r6
10041b70:	3a08      	subs	r2, #8
10041b72:	2000      	movs	r0, #0
10041b74:	4094      	lsls	r4, r2
10041b76:	e652      	b.n	1004181e <__aeabi_dmul+0x1ba>
10041b78:	9301      	str	r3, [sp, #4]
10041b7a:	e604      	b.n	10041786 <__aeabi_dmul+0x122>
10041b7c:	4b1c      	ldr	r3, [pc, #112]	@ (10041bf0 <__aeabi_dmul+0x58c>)
10041b7e:	0021      	movs	r1, r4
10041b80:	469c      	mov	ip, r3
10041b82:	0003      	movs	r3, r0
10041b84:	9d01      	ldr	r5, [sp, #4]
10041b86:	40d3      	lsrs	r3, r2
10041b88:	4465      	add	r5, ip
10041b8a:	40a9      	lsls	r1, r5
10041b8c:	4319      	orrs	r1, r3
10041b8e:	0003      	movs	r3, r0
10041b90:	40ab      	lsls	r3, r5
10041b92:	1e58      	subs	r0, r3, #1
10041b94:	4183      	sbcs	r3, r0
10041b96:	4319      	orrs	r1, r3
10041b98:	0008      	movs	r0, r1
10041b9a:	40d4      	lsrs	r4, r2
10041b9c:	074b      	lsls	r3, r1, #29
10041b9e:	d009      	beq.n	10041bb4 <__aeabi_dmul+0x550>
10041ba0:	230f      	movs	r3, #15
10041ba2:	400b      	ands	r3, r1
10041ba4:	2b04      	cmp	r3, #4
10041ba6:	d005      	beq.n	10041bb4 <__aeabi_dmul+0x550>
10041ba8:	1d0b      	adds	r3, r1, #4
10041baa:	428b      	cmp	r3, r1
10041bac:	4180      	sbcs	r0, r0
10041bae:	4240      	negs	r0, r0
10041bb0:	1824      	adds	r4, r4, r0
10041bb2:	0018      	movs	r0, r3
10041bb4:	0223      	lsls	r3, r4, #8
10041bb6:	d400      	bmi.n	10041bba <__aeabi_dmul+0x556>
10041bb8:	e6d6      	b.n	10041968 <__aeabi_dmul+0x304>
10041bba:	2301      	movs	r3, #1
10041bbc:	2400      	movs	r4, #0
10041bbe:	2200      	movs	r2, #0
10041bc0:	e5a6      	b.n	10041710 <__aeabi_dmul+0xac>
10041bc2:	290f      	cmp	r1, #15
10041bc4:	d1aa      	bne.n	10041b1c <__aeabi_dmul+0x4b8>
10041bc6:	2380      	movs	r3, #128	@ 0x80
10041bc8:	4652      	mov	r2, sl
10041bca:	031b      	lsls	r3, r3, #12
10041bcc:	421a      	tst	r2, r3
10041bce:	d0a9      	beq.n	10041b24 <__aeabi_dmul+0x4c0>
10041bd0:	421c      	tst	r4, r3
10041bd2:	d1a7      	bne.n	10041b24 <__aeabi_dmul+0x4c0>
10041bd4:	431c      	orrs	r4, r3
10041bd6:	9b00      	ldr	r3, [sp, #0]
10041bd8:	0002      	movs	r2, r0
10041bda:	469b      	mov	fp, r3
10041bdc:	4b03      	ldr	r3, [pc, #12]	@ (10041bec <__aeabi_dmul+0x588>)
10041bde:	e597      	b.n	10041710 <__aeabi_dmul+0xac>
10041be0:	2400      	movs	r4, #0
10041be2:	e6c1      	b.n	10041968 <__aeabi_dmul+0x304>
10041be4:	2400      	movs	r4, #0
10041be6:	4b01      	ldr	r3, [pc, #4]	@ (10041bec <__aeabi_dmul+0x588>)
10041be8:	0022      	movs	r2, r4
10041bea:	e591      	b.n	10041710 <__aeabi_dmul+0xac>
10041bec:	000007ff 	.word	0x000007ff
10041bf0:	0000041e 	.word	0x0000041e

10041bf4 <__aeabi_dsub>:
10041bf4:	b5f0      	push	{r4, r5, r6, r7, lr}
10041bf6:	464e      	mov	r6, r9
10041bf8:	4645      	mov	r5, r8
10041bfa:	46de      	mov	lr, fp
10041bfc:	4657      	mov	r7, sl
10041bfe:	b5e0      	push	{r5, r6, r7, lr}
10041c00:	b085      	sub	sp, #20
10041c02:	9000      	str	r0, [sp, #0]
10041c04:	9101      	str	r1, [sp, #4]
10041c06:	030c      	lsls	r4, r1, #12
10041c08:	004f      	lsls	r7, r1, #1
10041c0a:	0fce      	lsrs	r6, r1, #31
10041c0c:	0a61      	lsrs	r1, r4, #9
10041c0e:	9c00      	ldr	r4, [sp, #0]
10041c10:	46b0      	mov	r8, r6
10041c12:	0f64      	lsrs	r4, r4, #29
10041c14:	430c      	orrs	r4, r1
10041c16:	9900      	ldr	r1, [sp, #0]
10041c18:	0d7f      	lsrs	r7, r7, #21
10041c1a:	00c8      	lsls	r0, r1, #3
10041c1c:	0011      	movs	r1, r2
10041c1e:	001a      	movs	r2, r3
10041c20:	031b      	lsls	r3, r3, #12
10041c22:	469c      	mov	ip, r3
10041c24:	9100      	str	r1, [sp, #0]
10041c26:	9201      	str	r2, [sp, #4]
10041c28:	0051      	lsls	r1, r2, #1
10041c2a:	0d4b      	lsrs	r3, r1, #21
10041c2c:	4699      	mov	r9, r3
10041c2e:	9b01      	ldr	r3, [sp, #4]
10041c30:	9d00      	ldr	r5, [sp, #0]
10041c32:	0fd9      	lsrs	r1, r3, #31
10041c34:	4663      	mov	r3, ip
10041c36:	0f6a      	lsrs	r2, r5, #29
10041c38:	0a5b      	lsrs	r3, r3, #9
10041c3a:	4313      	orrs	r3, r2
10041c3c:	00ea      	lsls	r2, r5, #3
10041c3e:	4694      	mov	ip, r2
10041c40:	4693      	mov	fp, r2
10041c42:	4ac1      	ldr	r2, [pc, #772]	@ (10041f48 <__aeabi_dsub+0x354>)
10041c44:	9003      	str	r0, [sp, #12]
10041c46:	9302      	str	r3, [sp, #8]
10041c48:	4591      	cmp	r9, r2
10041c4a:	d100      	bne.n	10041c4e <__aeabi_dsub+0x5a>
10041c4c:	e0cd      	b.n	10041dea <__aeabi_dsub+0x1f6>
10041c4e:	2501      	movs	r5, #1
10041c50:	4069      	eors	r1, r5
10041c52:	464d      	mov	r5, r9
10041c54:	1b7d      	subs	r5, r7, r5
10041c56:	46aa      	mov	sl, r5
10041c58:	428e      	cmp	r6, r1
10041c5a:	d100      	bne.n	10041c5e <__aeabi_dsub+0x6a>
10041c5c:	e080      	b.n	10041d60 <__aeabi_dsub+0x16c>
10041c5e:	2d00      	cmp	r5, #0
10041c60:	dc00      	bgt.n	10041c64 <__aeabi_dsub+0x70>
10041c62:	e335      	b.n	100422d0 <__aeabi_dsub+0x6dc>
10041c64:	4649      	mov	r1, r9
10041c66:	2900      	cmp	r1, #0
10041c68:	d100      	bne.n	10041c6c <__aeabi_dsub+0x78>
10041c6a:	e0df      	b.n	10041e2c <__aeabi_dsub+0x238>
10041c6c:	4297      	cmp	r7, r2
10041c6e:	d100      	bne.n	10041c72 <__aeabi_dsub+0x7e>
10041c70:	e194      	b.n	10041f9c <__aeabi_dsub+0x3a8>
10041c72:	4652      	mov	r2, sl
10041c74:	2501      	movs	r5, #1
10041c76:	2a38      	cmp	r2, #56	@ 0x38
10041c78:	dc19      	bgt.n	10041cae <__aeabi_dsub+0xba>
10041c7a:	2280      	movs	r2, #128	@ 0x80
10041c7c:	9b02      	ldr	r3, [sp, #8]
10041c7e:	0412      	lsls	r2, r2, #16
10041c80:	4313      	orrs	r3, r2
10041c82:	9302      	str	r3, [sp, #8]
10041c84:	4652      	mov	r2, sl
10041c86:	2a1f      	cmp	r2, #31
10041c88:	dd00      	ble.n	10041c8c <__aeabi_dsub+0x98>
10041c8a:	e1e3      	b.n	10042054 <__aeabi_dsub+0x460>
10041c8c:	4653      	mov	r3, sl
10041c8e:	2220      	movs	r2, #32
10041c90:	4661      	mov	r1, ip
10041c92:	9d02      	ldr	r5, [sp, #8]
10041c94:	1ad2      	subs	r2, r2, r3
10041c96:	4095      	lsls	r5, r2
10041c98:	40d9      	lsrs	r1, r3
10041c9a:	430d      	orrs	r5, r1
10041c9c:	4661      	mov	r1, ip
10041c9e:	4091      	lsls	r1, r2
10041ca0:	000a      	movs	r2, r1
10041ca2:	1e51      	subs	r1, r2, #1
10041ca4:	418a      	sbcs	r2, r1
10041ca6:	4315      	orrs	r5, r2
10041ca8:	9a02      	ldr	r2, [sp, #8]
10041caa:	40da      	lsrs	r2, r3
10041cac:	1aa4      	subs	r4, r4, r2
10041cae:	1b45      	subs	r5, r0, r5
10041cb0:	42a8      	cmp	r0, r5
10041cb2:	4180      	sbcs	r0, r0
10041cb4:	4240      	negs	r0, r0
10041cb6:	1a24      	subs	r4, r4, r0
10041cb8:	0223      	lsls	r3, r4, #8
10041cba:	d400      	bmi.n	10041cbe <__aeabi_dsub+0xca>
10041cbc:	e13d      	b.n	10041f3a <__aeabi_dsub+0x346>
10041cbe:	0264      	lsls	r4, r4, #9
10041cc0:	0a64      	lsrs	r4, r4, #9
10041cc2:	2c00      	cmp	r4, #0
10041cc4:	d100      	bne.n	10041cc8 <__aeabi_dsub+0xd4>
10041cc6:	e147      	b.n	10041f58 <__aeabi_dsub+0x364>
10041cc8:	0020      	movs	r0, r4
10041cca:	f000 fbdf 	bl	1004248c <__clzsi2>
10041cce:	0003      	movs	r3, r0
10041cd0:	3b08      	subs	r3, #8
10041cd2:	2120      	movs	r1, #32
10041cd4:	0028      	movs	r0, r5
10041cd6:	1aca      	subs	r2, r1, r3
10041cd8:	40d0      	lsrs	r0, r2
10041cda:	409c      	lsls	r4, r3
10041cdc:	0002      	movs	r2, r0
10041cde:	409d      	lsls	r5, r3
10041ce0:	4322      	orrs	r2, r4
10041ce2:	429f      	cmp	r7, r3
10041ce4:	dd00      	ble.n	10041ce8 <__aeabi_dsub+0xf4>
10041ce6:	e177      	b.n	10041fd8 <__aeabi_dsub+0x3e4>
10041ce8:	1bd8      	subs	r0, r3, r7
10041cea:	3001      	adds	r0, #1
10041cec:	1a09      	subs	r1, r1, r0
10041cee:	002c      	movs	r4, r5
10041cf0:	408d      	lsls	r5, r1
10041cf2:	40c4      	lsrs	r4, r0
10041cf4:	1e6b      	subs	r3, r5, #1
10041cf6:	419d      	sbcs	r5, r3
10041cf8:	0013      	movs	r3, r2
10041cfa:	40c2      	lsrs	r2, r0
10041cfc:	408b      	lsls	r3, r1
10041cfe:	4325      	orrs	r5, r4
10041d00:	2700      	movs	r7, #0
10041d02:	0014      	movs	r4, r2
10041d04:	431d      	orrs	r5, r3
10041d06:	076b      	lsls	r3, r5, #29
10041d08:	d009      	beq.n	10041d1e <__aeabi_dsub+0x12a>
10041d0a:	230f      	movs	r3, #15
10041d0c:	402b      	ands	r3, r5
10041d0e:	2b04      	cmp	r3, #4
10041d10:	d005      	beq.n	10041d1e <__aeabi_dsub+0x12a>
10041d12:	1d2b      	adds	r3, r5, #4
10041d14:	42ab      	cmp	r3, r5
10041d16:	41ad      	sbcs	r5, r5
10041d18:	426d      	negs	r5, r5
10041d1a:	1964      	adds	r4, r4, r5
10041d1c:	001d      	movs	r5, r3
10041d1e:	0223      	lsls	r3, r4, #8
10041d20:	d400      	bmi.n	10041d24 <__aeabi_dsub+0x130>
10041d22:	e140      	b.n	10041fa6 <__aeabi_dsub+0x3b2>
10041d24:	4a88      	ldr	r2, [pc, #544]	@ (10041f48 <__aeabi_dsub+0x354>)
10041d26:	3701      	adds	r7, #1
10041d28:	4297      	cmp	r7, r2
10041d2a:	d100      	bne.n	10041d2e <__aeabi_dsub+0x13a>
10041d2c:	e101      	b.n	10041f32 <__aeabi_dsub+0x33e>
10041d2e:	2601      	movs	r6, #1
10041d30:	4643      	mov	r3, r8
10041d32:	4986      	ldr	r1, [pc, #536]	@ (10041f4c <__aeabi_dsub+0x358>)
10041d34:	08ed      	lsrs	r5, r5, #3
10041d36:	4021      	ands	r1, r4
10041d38:	074a      	lsls	r2, r1, #29
10041d3a:	432a      	orrs	r2, r5
10041d3c:	057c      	lsls	r4, r7, #21
10041d3e:	024d      	lsls	r5, r1, #9
10041d40:	0b2d      	lsrs	r5, r5, #12
10041d42:	0d64      	lsrs	r4, r4, #21
10041d44:	401e      	ands	r6, r3
10041d46:	0524      	lsls	r4, r4, #20
10041d48:	432c      	orrs	r4, r5
10041d4a:	07f6      	lsls	r6, r6, #31
10041d4c:	4334      	orrs	r4, r6
10041d4e:	0010      	movs	r0, r2
10041d50:	0021      	movs	r1, r4
10041d52:	b005      	add	sp, #20
10041d54:	bcf0      	pop	{r4, r5, r6, r7}
10041d56:	46bb      	mov	fp, r7
10041d58:	46b2      	mov	sl, r6
10041d5a:	46a9      	mov	r9, r5
10041d5c:	46a0      	mov	r8, r4
10041d5e:	bdf0      	pop	{r4, r5, r6, r7, pc}
10041d60:	2d00      	cmp	r5, #0
10041d62:	dc00      	bgt.n	10041d66 <__aeabi_dsub+0x172>
10041d64:	e2d0      	b.n	10042308 <__aeabi_dsub+0x714>
10041d66:	4649      	mov	r1, r9
10041d68:	2900      	cmp	r1, #0
10041d6a:	d000      	beq.n	10041d6e <__aeabi_dsub+0x17a>
10041d6c:	e0d4      	b.n	10041f18 <__aeabi_dsub+0x324>
10041d6e:	4661      	mov	r1, ip
10041d70:	9b02      	ldr	r3, [sp, #8]
10041d72:	4319      	orrs	r1, r3
10041d74:	d100      	bne.n	10041d78 <__aeabi_dsub+0x184>
10041d76:	e12b      	b.n	10041fd0 <__aeabi_dsub+0x3dc>
10041d78:	1e69      	subs	r1, r5, #1
10041d7a:	2d01      	cmp	r5, #1
10041d7c:	d100      	bne.n	10041d80 <__aeabi_dsub+0x18c>
10041d7e:	e1d9      	b.n	10042134 <__aeabi_dsub+0x540>
10041d80:	4295      	cmp	r5, r2
10041d82:	d100      	bne.n	10041d86 <__aeabi_dsub+0x192>
10041d84:	e10a      	b.n	10041f9c <__aeabi_dsub+0x3a8>
10041d86:	2501      	movs	r5, #1
10041d88:	2938      	cmp	r1, #56	@ 0x38
10041d8a:	dc17      	bgt.n	10041dbc <__aeabi_dsub+0x1c8>
10041d8c:	468a      	mov	sl, r1
10041d8e:	4653      	mov	r3, sl
10041d90:	2b1f      	cmp	r3, #31
10041d92:	dd00      	ble.n	10041d96 <__aeabi_dsub+0x1a2>
10041d94:	e1e7      	b.n	10042166 <__aeabi_dsub+0x572>
10041d96:	2220      	movs	r2, #32
10041d98:	1ad2      	subs	r2, r2, r3
10041d9a:	9b02      	ldr	r3, [sp, #8]
10041d9c:	4661      	mov	r1, ip
10041d9e:	4093      	lsls	r3, r2
10041da0:	001d      	movs	r5, r3
10041da2:	4653      	mov	r3, sl
10041da4:	40d9      	lsrs	r1, r3
10041da6:	4663      	mov	r3, ip
10041da8:	4093      	lsls	r3, r2
10041daa:	001a      	movs	r2, r3
10041dac:	430d      	orrs	r5, r1
10041dae:	1e51      	subs	r1, r2, #1
10041db0:	418a      	sbcs	r2, r1
10041db2:	4653      	mov	r3, sl
10041db4:	4315      	orrs	r5, r2
10041db6:	9a02      	ldr	r2, [sp, #8]
10041db8:	40da      	lsrs	r2, r3
10041dba:	18a4      	adds	r4, r4, r2
10041dbc:	182d      	adds	r5, r5, r0
10041dbe:	4285      	cmp	r5, r0
10041dc0:	4180      	sbcs	r0, r0
10041dc2:	4240      	negs	r0, r0
10041dc4:	1824      	adds	r4, r4, r0
10041dc6:	0223      	lsls	r3, r4, #8
10041dc8:	d400      	bmi.n	10041dcc <__aeabi_dsub+0x1d8>
10041dca:	e0b6      	b.n	10041f3a <__aeabi_dsub+0x346>
10041dcc:	4b5e      	ldr	r3, [pc, #376]	@ (10041f48 <__aeabi_dsub+0x354>)
10041dce:	3701      	adds	r7, #1
10041dd0:	429f      	cmp	r7, r3
10041dd2:	d100      	bne.n	10041dd6 <__aeabi_dsub+0x1e2>
10041dd4:	e0ad      	b.n	10041f32 <__aeabi_dsub+0x33e>
10041dd6:	2101      	movs	r1, #1
10041dd8:	4b5c      	ldr	r3, [pc, #368]	@ (10041f4c <__aeabi_dsub+0x358>)
10041dda:	086a      	lsrs	r2, r5, #1
10041ddc:	401c      	ands	r4, r3
10041dde:	4029      	ands	r1, r5
10041de0:	430a      	orrs	r2, r1
10041de2:	07e5      	lsls	r5, r4, #31
10041de4:	4315      	orrs	r5, r2
10041de6:	0864      	lsrs	r4, r4, #1
10041de8:	e78d      	b.n	10041d06 <__aeabi_dsub+0x112>
10041dea:	4a59      	ldr	r2, [pc, #356]	@ (10041f50 <__aeabi_dsub+0x35c>)
10041dec:	9b02      	ldr	r3, [sp, #8]
10041dee:	4692      	mov	sl, r2
10041df0:	4662      	mov	r2, ip
10041df2:	44ba      	add	sl, r7
10041df4:	431a      	orrs	r2, r3
10041df6:	d02c      	beq.n	10041e52 <__aeabi_dsub+0x25e>
10041df8:	428e      	cmp	r6, r1
10041dfa:	d02e      	beq.n	10041e5a <__aeabi_dsub+0x266>
10041dfc:	4652      	mov	r2, sl
10041dfe:	2a00      	cmp	r2, #0
10041e00:	d060      	beq.n	10041ec4 <__aeabi_dsub+0x2d0>
10041e02:	2f00      	cmp	r7, #0
10041e04:	d100      	bne.n	10041e08 <__aeabi_dsub+0x214>
10041e06:	e0db      	b.n	10041fc0 <__aeabi_dsub+0x3cc>
10041e08:	4663      	mov	r3, ip
10041e0a:	000e      	movs	r6, r1
10041e0c:	9c02      	ldr	r4, [sp, #8]
10041e0e:	08d8      	lsrs	r0, r3, #3
10041e10:	0762      	lsls	r2, r4, #29
10041e12:	4302      	orrs	r2, r0
10041e14:	08e4      	lsrs	r4, r4, #3
10041e16:	0013      	movs	r3, r2
10041e18:	4323      	orrs	r3, r4
10041e1a:	d100      	bne.n	10041e1e <__aeabi_dsub+0x22a>
10041e1c:	e254      	b.n	100422c8 <__aeabi_dsub+0x6d4>
10041e1e:	2580      	movs	r5, #128	@ 0x80
10041e20:	032d      	lsls	r5, r5, #12
10041e22:	4325      	orrs	r5, r4
10041e24:	032d      	lsls	r5, r5, #12
10041e26:	4c48      	ldr	r4, [pc, #288]	@ (10041f48 <__aeabi_dsub+0x354>)
10041e28:	0b2d      	lsrs	r5, r5, #12
10041e2a:	e78c      	b.n	10041d46 <__aeabi_dsub+0x152>
10041e2c:	4661      	mov	r1, ip
10041e2e:	9b02      	ldr	r3, [sp, #8]
10041e30:	4319      	orrs	r1, r3
10041e32:	d100      	bne.n	10041e36 <__aeabi_dsub+0x242>
10041e34:	e0cc      	b.n	10041fd0 <__aeabi_dsub+0x3dc>
10041e36:	0029      	movs	r1, r5
10041e38:	3901      	subs	r1, #1
10041e3a:	2d01      	cmp	r5, #1
10041e3c:	d100      	bne.n	10041e40 <__aeabi_dsub+0x24c>
10041e3e:	e188      	b.n	10042152 <__aeabi_dsub+0x55e>
10041e40:	4295      	cmp	r5, r2
10041e42:	d100      	bne.n	10041e46 <__aeabi_dsub+0x252>
10041e44:	e0aa      	b.n	10041f9c <__aeabi_dsub+0x3a8>
10041e46:	2501      	movs	r5, #1
10041e48:	2938      	cmp	r1, #56	@ 0x38
10041e4a:	dd00      	ble.n	10041e4e <__aeabi_dsub+0x25a>
10041e4c:	e72f      	b.n	10041cae <__aeabi_dsub+0xba>
10041e4e:	468a      	mov	sl, r1
10041e50:	e718      	b.n	10041c84 <__aeabi_dsub+0x90>
10041e52:	2201      	movs	r2, #1
10041e54:	4051      	eors	r1, r2
10041e56:	428e      	cmp	r6, r1
10041e58:	d1d0      	bne.n	10041dfc <__aeabi_dsub+0x208>
10041e5a:	4653      	mov	r3, sl
10041e5c:	2b00      	cmp	r3, #0
10041e5e:	d100      	bne.n	10041e62 <__aeabi_dsub+0x26e>
10041e60:	e0be      	b.n	10041fe0 <__aeabi_dsub+0x3ec>
10041e62:	2f00      	cmp	r7, #0
10041e64:	d000      	beq.n	10041e68 <__aeabi_dsub+0x274>
10041e66:	e138      	b.n	100420da <__aeabi_dsub+0x4e6>
10041e68:	46ca      	mov	sl, r9
10041e6a:	0022      	movs	r2, r4
10041e6c:	4302      	orrs	r2, r0
10041e6e:	d100      	bne.n	10041e72 <__aeabi_dsub+0x27e>
10041e70:	e1e2      	b.n	10042238 <__aeabi_dsub+0x644>
10041e72:	4653      	mov	r3, sl
10041e74:	1e59      	subs	r1, r3, #1
10041e76:	2b01      	cmp	r3, #1
10041e78:	d100      	bne.n	10041e7c <__aeabi_dsub+0x288>
10041e7a:	e20d      	b.n	10042298 <__aeabi_dsub+0x6a4>
10041e7c:	4a32      	ldr	r2, [pc, #200]	@ (10041f48 <__aeabi_dsub+0x354>)
10041e7e:	4592      	cmp	sl, r2
10041e80:	d100      	bne.n	10041e84 <__aeabi_dsub+0x290>
10041e82:	e1d2      	b.n	1004222a <__aeabi_dsub+0x636>
10041e84:	2701      	movs	r7, #1
10041e86:	2938      	cmp	r1, #56	@ 0x38
10041e88:	dc13      	bgt.n	10041eb2 <__aeabi_dsub+0x2be>
10041e8a:	291f      	cmp	r1, #31
10041e8c:	dd00      	ble.n	10041e90 <__aeabi_dsub+0x29c>
10041e8e:	e1ee      	b.n	1004226e <__aeabi_dsub+0x67a>
10041e90:	2220      	movs	r2, #32
10041e92:	9b02      	ldr	r3, [sp, #8]
10041e94:	1a52      	subs	r2, r2, r1
10041e96:	0025      	movs	r5, r4
10041e98:	0007      	movs	r7, r0
10041e9a:	469a      	mov	sl, r3
10041e9c:	40cc      	lsrs	r4, r1
10041e9e:	4090      	lsls	r0, r2
10041ea0:	4095      	lsls	r5, r2
10041ea2:	40cf      	lsrs	r7, r1
10041ea4:	44a2      	add	sl, r4
10041ea6:	1e42      	subs	r2, r0, #1
10041ea8:	4190      	sbcs	r0, r2
10041eaa:	4653      	mov	r3, sl
10041eac:	432f      	orrs	r7, r5
10041eae:	4307      	orrs	r7, r0
10041eb0:	9302      	str	r3, [sp, #8]
10041eb2:	003d      	movs	r5, r7
10041eb4:	4465      	add	r5, ip
10041eb6:	4565      	cmp	r5, ip
10041eb8:	4192      	sbcs	r2, r2
10041eba:	9b02      	ldr	r3, [sp, #8]
10041ebc:	4252      	negs	r2, r2
10041ebe:	464f      	mov	r7, r9
10041ec0:	18d4      	adds	r4, r2, r3
10041ec2:	e780      	b.n	10041dc6 <__aeabi_dsub+0x1d2>
10041ec4:	4a23      	ldr	r2, [pc, #140]	@ (10041f54 <__aeabi_dsub+0x360>)
10041ec6:	1c7d      	adds	r5, r7, #1
10041ec8:	4215      	tst	r5, r2
10041eca:	d000      	beq.n	10041ece <__aeabi_dsub+0x2da>
10041ecc:	e0aa      	b.n	10042024 <__aeabi_dsub+0x430>
10041ece:	4662      	mov	r2, ip
10041ed0:	0025      	movs	r5, r4
10041ed2:	9b02      	ldr	r3, [sp, #8]
10041ed4:	4305      	orrs	r5, r0
10041ed6:	431a      	orrs	r2, r3
10041ed8:	2f00      	cmp	r7, #0
10041eda:	d000      	beq.n	10041ede <__aeabi_dsub+0x2ea>
10041edc:	e0f5      	b.n	100420ca <__aeabi_dsub+0x4d6>
10041ede:	2d00      	cmp	r5, #0
10041ee0:	d100      	bne.n	10041ee4 <__aeabi_dsub+0x2f0>
10041ee2:	e16b      	b.n	100421bc <__aeabi_dsub+0x5c8>
10041ee4:	2a00      	cmp	r2, #0
10041ee6:	d100      	bne.n	10041eea <__aeabi_dsub+0x2f6>
10041ee8:	e152      	b.n	10042190 <__aeabi_dsub+0x59c>
10041eea:	4663      	mov	r3, ip
10041eec:	1ac5      	subs	r5, r0, r3
10041eee:	9b02      	ldr	r3, [sp, #8]
10041ef0:	1ae2      	subs	r2, r4, r3
10041ef2:	42a8      	cmp	r0, r5
10041ef4:	419b      	sbcs	r3, r3
10041ef6:	425b      	negs	r3, r3
10041ef8:	1ad3      	subs	r3, r2, r3
10041efa:	021a      	lsls	r2, r3, #8
10041efc:	d400      	bmi.n	10041f00 <__aeabi_dsub+0x30c>
10041efe:	e1d5      	b.n	100422ac <__aeabi_dsub+0x6b8>
10041f00:	4663      	mov	r3, ip
10041f02:	1a1d      	subs	r5, r3, r0
10041f04:	45ac      	cmp	ip, r5
10041f06:	4192      	sbcs	r2, r2
10041f08:	2601      	movs	r6, #1
10041f0a:	9b02      	ldr	r3, [sp, #8]
10041f0c:	4252      	negs	r2, r2
10041f0e:	1b1c      	subs	r4, r3, r4
10041f10:	4688      	mov	r8, r1
10041f12:	1aa4      	subs	r4, r4, r2
10041f14:	400e      	ands	r6, r1
10041f16:	e6f6      	b.n	10041d06 <__aeabi_dsub+0x112>
10041f18:	4297      	cmp	r7, r2
10041f1a:	d03f      	beq.n	10041f9c <__aeabi_dsub+0x3a8>
10041f1c:	4652      	mov	r2, sl
10041f1e:	2501      	movs	r5, #1
10041f20:	2a38      	cmp	r2, #56	@ 0x38
10041f22:	dd00      	ble.n	10041f26 <__aeabi_dsub+0x332>
10041f24:	e74a      	b.n	10041dbc <__aeabi_dsub+0x1c8>
10041f26:	2280      	movs	r2, #128	@ 0x80
10041f28:	9b02      	ldr	r3, [sp, #8]
10041f2a:	0412      	lsls	r2, r2, #16
10041f2c:	4313      	orrs	r3, r2
10041f2e:	9302      	str	r3, [sp, #8]
10041f30:	e72d      	b.n	10041d8e <__aeabi_dsub+0x19a>
10041f32:	003c      	movs	r4, r7
10041f34:	2500      	movs	r5, #0
10041f36:	2200      	movs	r2, #0
10041f38:	e705      	b.n	10041d46 <__aeabi_dsub+0x152>
10041f3a:	2307      	movs	r3, #7
10041f3c:	402b      	ands	r3, r5
10041f3e:	2b00      	cmp	r3, #0
10041f40:	d000      	beq.n	10041f44 <__aeabi_dsub+0x350>
10041f42:	e6e2      	b.n	10041d0a <__aeabi_dsub+0x116>
10041f44:	e06b      	b.n	1004201e <__aeabi_dsub+0x42a>
10041f46:	46c0      	nop			@ (mov r8, r8)
10041f48:	000007ff 	.word	0x000007ff
10041f4c:	ff7fffff 	.word	0xff7fffff
10041f50:	fffff801 	.word	0xfffff801
10041f54:	000007fe 	.word	0x000007fe
10041f58:	0028      	movs	r0, r5
10041f5a:	f000 fa97 	bl	1004248c <__clzsi2>
10041f5e:	0003      	movs	r3, r0
10041f60:	3318      	adds	r3, #24
10041f62:	2b1f      	cmp	r3, #31
10041f64:	dc00      	bgt.n	10041f68 <__aeabi_dsub+0x374>
10041f66:	e6b4      	b.n	10041cd2 <__aeabi_dsub+0xde>
10041f68:	002a      	movs	r2, r5
10041f6a:	3808      	subs	r0, #8
10041f6c:	4082      	lsls	r2, r0
10041f6e:	429f      	cmp	r7, r3
10041f70:	dd00      	ble.n	10041f74 <__aeabi_dsub+0x380>
10041f72:	e0b9      	b.n	100420e8 <__aeabi_dsub+0x4f4>
10041f74:	1bdb      	subs	r3, r3, r7
10041f76:	1c58      	adds	r0, r3, #1
10041f78:	281f      	cmp	r0, #31
10041f7a:	dc00      	bgt.n	10041f7e <__aeabi_dsub+0x38a>
10041f7c:	e1a0      	b.n	100422c0 <__aeabi_dsub+0x6cc>
10041f7e:	0015      	movs	r5, r2
10041f80:	3b1f      	subs	r3, #31
10041f82:	40dd      	lsrs	r5, r3
10041f84:	2820      	cmp	r0, #32
10041f86:	d005      	beq.n	10041f94 <__aeabi_dsub+0x3a0>
10041f88:	2340      	movs	r3, #64	@ 0x40
10041f8a:	1a1b      	subs	r3, r3, r0
10041f8c:	409a      	lsls	r2, r3
10041f8e:	1e53      	subs	r3, r2, #1
10041f90:	419a      	sbcs	r2, r3
10041f92:	4315      	orrs	r5, r2
10041f94:	2307      	movs	r3, #7
10041f96:	2700      	movs	r7, #0
10041f98:	402b      	ands	r3, r5
10041f9a:	e7d0      	b.n	10041f3e <__aeabi_dsub+0x34a>
10041f9c:	08c0      	lsrs	r0, r0, #3
10041f9e:	0762      	lsls	r2, r4, #29
10041fa0:	4302      	orrs	r2, r0
10041fa2:	08e4      	lsrs	r4, r4, #3
10041fa4:	e737      	b.n	10041e16 <__aeabi_dsub+0x222>
10041fa6:	08ea      	lsrs	r2, r5, #3
10041fa8:	0763      	lsls	r3, r4, #29
10041faa:	431a      	orrs	r2, r3
10041fac:	4bd3      	ldr	r3, [pc, #844]	@ (100422fc <__aeabi_dsub+0x708>)
10041fae:	08e4      	lsrs	r4, r4, #3
10041fb0:	429f      	cmp	r7, r3
10041fb2:	d100      	bne.n	10041fb6 <__aeabi_dsub+0x3c2>
10041fb4:	e72f      	b.n	10041e16 <__aeabi_dsub+0x222>
10041fb6:	0324      	lsls	r4, r4, #12
10041fb8:	0b25      	lsrs	r5, r4, #12
10041fba:	057c      	lsls	r4, r7, #21
10041fbc:	0d64      	lsrs	r4, r4, #21
10041fbe:	e6c2      	b.n	10041d46 <__aeabi_dsub+0x152>
10041fc0:	46ca      	mov	sl, r9
10041fc2:	0022      	movs	r2, r4
10041fc4:	4302      	orrs	r2, r0
10041fc6:	d158      	bne.n	1004207a <__aeabi_dsub+0x486>
10041fc8:	4663      	mov	r3, ip
10041fca:	000e      	movs	r6, r1
10041fcc:	9c02      	ldr	r4, [sp, #8]
10041fce:	9303      	str	r3, [sp, #12]
10041fd0:	9b03      	ldr	r3, [sp, #12]
10041fd2:	4657      	mov	r7, sl
10041fd4:	08da      	lsrs	r2, r3, #3
10041fd6:	e7e7      	b.n	10041fa8 <__aeabi_dsub+0x3b4>
10041fd8:	4cc9      	ldr	r4, [pc, #804]	@ (10042300 <__aeabi_dsub+0x70c>)
10041fda:	1aff      	subs	r7, r7, r3
10041fdc:	4014      	ands	r4, r2
10041fde:	e692      	b.n	10041d06 <__aeabi_dsub+0x112>
10041fe0:	4dc8      	ldr	r5, [pc, #800]	@ (10042304 <__aeabi_dsub+0x710>)
10041fe2:	1c7a      	adds	r2, r7, #1
10041fe4:	422a      	tst	r2, r5
10041fe6:	d000      	beq.n	10041fea <__aeabi_dsub+0x3f6>
10041fe8:	e084      	b.n	100420f4 <__aeabi_dsub+0x500>
10041fea:	0022      	movs	r2, r4
10041fec:	4302      	orrs	r2, r0
10041fee:	2f00      	cmp	r7, #0
10041ff0:	d000      	beq.n	10041ff4 <__aeabi_dsub+0x400>
10041ff2:	e0ef      	b.n	100421d4 <__aeabi_dsub+0x5e0>
10041ff4:	2a00      	cmp	r2, #0
10041ff6:	d100      	bne.n	10041ffa <__aeabi_dsub+0x406>
10041ff8:	e0e5      	b.n	100421c6 <__aeabi_dsub+0x5d2>
10041ffa:	4662      	mov	r2, ip
10041ffc:	9902      	ldr	r1, [sp, #8]
10041ffe:	430a      	orrs	r2, r1
10042000:	d100      	bne.n	10042004 <__aeabi_dsub+0x410>
10042002:	e0c5      	b.n	10042190 <__aeabi_dsub+0x59c>
10042004:	4663      	mov	r3, ip
10042006:	18c5      	adds	r5, r0, r3
10042008:	468c      	mov	ip, r1
1004200a:	4285      	cmp	r5, r0
1004200c:	4180      	sbcs	r0, r0
1004200e:	4464      	add	r4, ip
10042010:	4240      	negs	r0, r0
10042012:	1824      	adds	r4, r4, r0
10042014:	0223      	lsls	r3, r4, #8
10042016:	d502      	bpl.n	1004201e <__aeabi_dsub+0x42a>
10042018:	4bb9      	ldr	r3, [pc, #740]	@ (10042300 <__aeabi_dsub+0x70c>)
1004201a:	3701      	adds	r7, #1
1004201c:	401c      	ands	r4, r3
1004201e:	46ba      	mov	sl, r7
10042020:	9503      	str	r5, [sp, #12]
10042022:	e7d5      	b.n	10041fd0 <__aeabi_dsub+0x3dc>
10042024:	4662      	mov	r2, ip
10042026:	1a85      	subs	r5, r0, r2
10042028:	42a8      	cmp	r0, r5
1004202a:	4192      	sbcs	r2, r2
1004202c:	4252      	negs	r2, r2
1004202e:	4691      	mov	r9, r2
10042030:	9b02      	ldr	r3, [sp, #8]
10042032:	1ae3      	subs	r3, r4, r3
10042034:	001a      	movs	r2, r3
10042036:	464b      	mov	r3, r9
10042038:	1ad2      	subs	r2, r2, r3
1004203a:	0013      	movs	r3, r2
1004203c:	4691      	mov	r9, r2
1004203e:	021a      	lsls	r2, r3, #8
10042040:	d46c      	bmi.n	1004211c <__aeabi_dsub+0x528>
10042042:	464a      	mov	r2, r9
10042044:	464c      	mov	r4, r9
10042046:	432a      	orrs	r2, r5
10042048:	d000      	beq.n	1004204c <__aeabi_dsub+0x458>
1004204a:	e63a      	b.n	10041cc2 <__aeabi_dsub+0xce>
1004204c:	2600      	movs	r6, #0
1004204e:	2400      	movs	r4, #0
10042050:	2500      	movs	r5, #0
10042052:	e678      	b.n	10041d46 <__aeabi_dsub+0x152>
10042054:	9902      	ldr	r1, [sp, #8]
10042056:	4653      	mov	r3, sl
10042058:	000d      	movs	r5, r1
1004205a:	3a20      	subs	r2, #32
1004205c:	40d5      	lsrs	r5, r2
1004205e:	2b20      	cmp	r3, #32
10042060:	d006      	beq.n	10042070 <__aeabi_dsub+0x47c>
10042062:	2240      	movs	r2, #64	@ 0x40
10042064:	1ad2      	subs	r2, r2, r3
10042066:	000b      	movs	r3, r1
10042068:	4093      	lsls	r3, r2
1004206a:	4662      	mov	r2, ip
1004206c:	431a      	orrs	r2, r3
1004206e:	4693      	mov	fp, r2
10042070:	465b      	mov	r3, fp
10042072:	1e5a      	subs	r2, r3, #1
10042074:	4193      	sbcs	r3, r2
10042076:	431d      	orrs	r5, r3
10042078:	e619      	b.n	10041cae <__aeabi_dsub+0xba>
1004207a:	4653      	mov	r3, sl
1004207c:	1e5a      	subs	r2, r3, #1
1004207e:	2b01      	cmp	r3, #1
10042080:	d100      	bne.n	10042084 <__aeabi_dsub+0x490>
10042082:	e0c6      	b.n	10042212 <__aeabi_dsub+0x61e>
10042084:	4e9d      	ldr	r6, [pc, #628]	@ (100422fc <__aeabi_dsub+0x708>)
10042086:	45b2      	cmp	sl, r6
10042088:	d100      	bne.n	1004208c <__aeabi_dsub+0x498>
1004208a:	e6bd      	b.n	10041e08 <__aeabi_dsub+0x214>
1004208c:	4688      	mov	r8, r1
1004208e:	000e      	movs	r6, r1
10042090:	2501      	movs	r5, #1
10042092:	2a38      	cmp	r2, #56	@ 0x38
10042094:	dc10      	bgt.n	100420b8 <__aeabi_dsub+0x4c4>
10042096:	2a1f      	cmp	r2, #31
10042098:	dc7f      	bgt.n	1004219a <__aeabi_dsub+0x5a6>
1004209a:	2120      	movs	r1, #32
1004209c:	0025      	movs	r5, r4
1004209e:	1a89      	subs	r1, r1, r2
100420a0:	0007      	movs	r7, r0
100420a2:	4088      	lsls	r0, r1
100420a4:	408d      	lsls	r5, r1
100420a6:	40d7      	lsrs	r7, r2
100420a8:	40d4      	lsrs	r4, r2
100420aa:	1e41      	subs	r1, r0, #1
100420ac:	4188      	sbcs	r0, r1
100420ae:	9b02      	ldr	r3, [sp, #8]
100420b0:	433d      	orrs	r5, r7
100420b2:	1b1b      	subs	r3, r3, r4
100420b4:	4305      	orrs	r5, r0
100420b6:	9302      	str	r3, [sp, #8]
100420b8:	4662      	mov	r2, ip
100420ba:	1b55      	subs	r5, r2, r5
100420bc:	45ac      	cmp	ip, r5
100420be:	4192      	sbcs	r2, r2
100420c0:	9b02      	ldr	r3, [sp, #8]
100420c2:	4252      	negs	r2, r2
100420c4:	464f      	mov	r7, r9
100420c6:	1a9c      	subs	r4, r3, r2
100420c8:	e5f6      	b.n	10041cb8 <__aeabi_dsub+0xc4>
100420ca:	2d00      	cmp	r5, #0
100420cc:	d000      	beq.n	100420d0 <__aeabi_dsub+0x4dc>
100420ce:	e0b7      	b.n	10042240 <__aeabi_dsub+0x64c>
100420d0:	2a00      	cmp	r2, #0
100420d2:	d100      	bne.n	100420d6 <__aeabi_dsub+0x4e2>
100420d4:	e0f0      	b.n	100422b8 <__aeabi_dsub+0x6c4>
100420d6:	2601      	movs	r6, #1
100420d8:	400e      	ands	r6, r1
100420da:	4663      	mov	r3, ip
100420dc:	9802      	ldr	r0, [sp, #8]
100420de:	08d9      	lsrs	r1, r3, #3
100420e0:	0742      	lsls	r2, r0, #29
100420e2:	430a      	orrs	r2, r1
100420e4:	08c4      	lsrs	r4, r0, #3
100420e6:	e696      	b.n	10041e16 <__aeabi_dsub+0x222>
100420e8:	4c85      	ldr	r4, [pc, #532]	@ (10042300 <__aeabi_dsub+0x70c>)
100420ea:	1aff      	subs	r7, r7, r3
100420ec:	4014      	ands	r4, r2
100420ee:	0762      	lsls	r2, r4, #29
100420f0:	08e4      	lsrs	r4, r4, #3
100420f2:	e760      	b.n	10041fb6 <__aeabi_dsub+0x3c2>
100420f4:	4981      	ldr	r1, [pc, #516]	@ (100422fc <__aeabi_dsub+0x708>)
100420f6:	428a      	cmp	r2, r1
100420f8:	d100      	bne.n	100420fc <__aeabi_dsub+0x508>
100420fa:	e0c9      	b.n	10042290 <__aeabi_dsub+0x69c>
100420fc:	4663      	mov	r3, ip
100420fe:	18c1      	adds	r1, r0, r3
10042100:	4281      	cmp	r1, r0
10042102:	4180      	sbcs	r0, r0
10042104:	9b02      	ldr	r3, [sp, #8]
10042106:	4240      	negs	r0, r0
10042108:	18e3      	adds	r3, r4, r3
1004210a:	181b      	adds	r3, r3, r0
1004210c:	07dd      	lsls	r5, r3, #31
1004210e:	085c      	lsrs	r4, r3, #1
10042110:	2307      	movs	r3, #7
10042112:	0849      	lsrs	r1, r1, #1
10042114:	430d      	orrs	r5, r1
10042116:	0017      	movs	r7, r2
10042118:	402b      	ands	r3, r5
1004211a:	e710      	b.n	10041f3e <__aeabi_dsub+0x34a>
1004211c:	4663      	mov	r3, ip
1004211e:	1a1d      	subs	r5, r3, r0
10042120:	45ac      	cmp	ip, r5
10042122:	4192      	sbcs	r2, r2
10042124:	2601      	movs	r6, #1
10042126:	9b02      	ldr	r3, [sp, #8]
10042128:	4252      	negs	r2, r2
1004212a:	1b1c      	subs	r4, r3, r4
1004212c:	4688      	mov	r8, r1
1004212e:	1aa4      	subs	r4, r4, r2
10042130:	400e      	ands	r6, r1
10042132:	e5c6      	b.n	10041cc2 <__aeabi_dsub+0xce>
10042134:	4663      	mov	r3, ip
10042136:	18c5      	adds	r5, r0, r3
10042138:	9b02      	ldr	r3, [sp, #8]
1004213a:	4285      	cmp	r5, r0
1004213c:	4180      	sbcs	r0, r0
1004213e:	469c      	mov	ip, r3
10042140:	4240      	negs	r0, r0
10042142:	4464      	add	r4, ip
10042144:	1824      	adds	r4, r4, r0
10042146:	2701      	movs	r7, #1
10042148:	0223      	lsls	r3, r4, #8
1004214a:	d400      	bmi.n	1004214e <__aeabi_dsub+0x55a>
1004214c:	e6f5      	b.n	10041f3a <__aeabi_dsub+0x346>
1004214e:	2702      	movs	r7, #2
10042150:	e641      	b.n	10041dd6 <__aeabi_dsub+0x1e2>
10042152:	4663      	mov	r3, ip
10042154:	1ac5      	subs	r5, r0, r3
10042156:	42a8      	cmp	r0, r5
10042158:	4180      	sbcs	r0, r0
1004215a:	9b02      	ldr	r3, [sp, #8]
1004215c:	4240      	negs	r0, r0
1004215e:	1ae4      	subs	r4, r4, r3
10042160:	2701      	movs	r7, #1
10042162:	1a24      	subs	r4, r4, r0
10042164:	e5a8      	b.n	10041cb8 <__aeabi_dsub+0xc4>
10042166:	9d02      	ldr	r5, [sp, #8]
10042168:	4652      	mov	r2, sl
1004216a:	002b      	movs	r3, r5
1004216c:	3a20      	subs	r2, #32
1004216e:	40d3      	lsrs	r3, r2
10042170:	0019      	movs	r1, r3
10042172:	4653      	mov	r3, sl
10042174:	2b20      	cmp	r3, #32
10042176:	d006      	beq.n	10042186 <__aeabi_dsub+0x592>
10042178:	2240      	movs	r2, #64	@ 0x40
1004217a:	1ad2      	subs	r2, r2, r3
1004217c:	002b      	movs	r3, r5
1004217e:	4093      	lsls	r3, r2
10042180:	4662      	mov	r2, ip
10042182:	431a      	orrs	r2, r3
10042184:	4693      	mov	fp, r2
10042186:	465d      	mov	r5, fp
10042188:	1e6b      	subs	r3, r5, #1
1004218a:	419d      	sbcs	r5, r3
1004218c:	430d      	orrs	r5, r1
1004218e:	e615      	b.n	10041dbc <__aeabi_dsub+0x1c8>
10042190:	0762      	lsls	r2, r4, #29
10042192:	08c0      	lsrs	r0, r0, #3
10042194:	4302      	orrs	r2, r0
10042196:	08e4      	lsrs	r4, r4, #3
10042198:	e70d      	b.n	10041fb6 <__aeabi_dsub+0x3c2>
1004219a:	0011      	movs	r1, r2
1004219c:	0027      	movs	r7, r4
1004219e:	3920      	subs	r1, #32
100421a0:	40cf      	lsrs	r7, r1
100421a2:	2a20      	cmp	r2, #32
100421a4:	d005      	beq.n	100421b2 <__aeabi_dsub+0x5be>
100421a6:	2140      	movs	r1, #64	@ 0x40
100421a8:	1a8a      	subs	r2, r1, r2
100421aa:	4094      	lsls	r4, r2
100421ac:	0025      	movs	r5, r4
100421ae:	4305      	orrs	r5, r0
100421b0:	9503      	str	r5, [sp, #12]
100421b2:	9d03      	ldr	r5, [sp, #12]
100421b4:	1e6a      	subs	r2, r5, #1
100421b6:	4195      	sbcs	r5, r2
100421b8:	433d      	orrs	r5, r7
100421ba:	e77d      	b.n	100420b8 <__aeabi_dsub+0x4c4>
100421bc:	2a00      	cmp	r2, #0
100421be:	d100      	bne.n	100421c2 <__aeabi_dsub+0x5ce>
100421c0:	e744      	b.n	1004204c <__aeabi_dsub+0x458>
100421c2:	2601      	movs	r6, #1
100421c4:	400e      	ands	r6, r1
100421c6:	4663      	mov	r3, ip
100421c8:	08d9      	lsrs	r1, r3, #3
100421ca:	9b02      	ldr	r3, [sp, #8]
100421cc:	075a      	lsls	r2, r3, #29
100421ce:	430a      	orrs	r2, r1
100421d0:	08dc      	lsrs	r4, r3, #3
100421d2:	e6f0      	b.n	10041fb6 <__aeabi_dsub+0x3c2>
100421d4:	2a00      	cmp	r2, #0
100421d6:	d028      	beq.n	1004222a <__aeabi_dsub+0x636>
100421d8:	4662      	mov	r2, ip
100421da:	9f02      	ldr	r7, [sp, #8]
100421dc:	08c0      	lsrs	r0, r0, #3
100421de:	433a      	orrs	r2, r7
100421e0:	d100      	bne.n	100421e4 <__aeabi_dsub+0x5f0>
100421e2:	e6dc      	b.n	10041f9e <__aeabi_dsub+0x3aa>
100421e4:	0762      	lsls	r2, r4, #29
100421e6:	4310      	orrs	r0, r2
100421e8:	2280      	movs	r2, #128	@ 0x80
100421ea:	08e4      	lsrs	r4, r4, #3
100421ec:	0312      	lsls	r2, r2, #12
100421ee:	4214      	tst	r4, r2
100421f0:	d009      	beq.n	10042206 <__aeabi_dsub+0x612>
100421f2:	08fd      	lsrs	r5, r7, #3
100421f4:	4215      	tst	r5, r2
100421f6:	d106      	bne.n	10042206 <__aeabi_dsub+0x612>
100421f8:	4663      	mov	r3, ip
100421fa:	2601      	movs	r6, #1
100421fc:	002c      	movs	r4, r5
100421fe:	08d8      	lsrs	r0, r3, #3
10042200:	077b      	lsls	r3, r7, #29
10042202:	4318      	orrs	r0, r3
10042204:	400e      	ands	r6, r1
10042206:	0f42      	lsrs	r2, r0, #29
10042208:	00c0      	lsls	r0, r0, #3
1004220a:	08c0      	lsrs	r0, r0, #3
1004220c:	0752      	lsls	r2, r2, #29
1004220e:	4302      	orrs	r2, r0
10042210:	e601      	b.n	10041e16 <__aeabi_dsub+0x222>
10042212:	4663      	mov	r3, ip
10042214:	1a1d      	subs	r5, r3, r0
10042216:	45ac      	cmp	ip, r5
10042218:	4192      	sbcs	r2, r2
1004221a:	9b02      	ldr	r3, [sp, #8]
1004221c:	4252      	negs	r2, r2
1004221e:	1b1c      	subs	r4, r3, r4
10042220:	000e      	movs	r6, r1
10042222:	4688      	mov	r8, r1
10042224:	2701      	movs	r7, #1
10042226:	1aa4      	subs	r4, r4, r2
10042228:	e546      	b.n	10041cb8 <__aeabi_dsub+0xc4>
1004222a:	4663      	mov	r3, ip
1004222c:	08d9      	lsrs	r1, r3, #3
1004222e:	9b02      	ldr	r3, [sp, #8]
10042230:	075a      	lsls	r2, r3, #29
10042232:	430a      	orrs	r2, r1
10042234:	08dc      	lsrs	r4, r3, #3
10042236:	e5ee      	b.n	10041e16 <__aeabi_dsub+0x222>
10042238:	4663      	mov	r3, ip
1004223a:	9c02      	ldr	r4, [sp, #8]
1004223c:	9303      	str	r3, [sp, #12]
1004223e:	e6c7      	b.n	10041fd0 <__aeabi_dsub+0x3dc>
10042240:	08c0      	lsrs	r0, r0, #3
10042242:	2a00      	cmp	r2, #0
10042244:	d100      	bne.n	10042248 <__aeabi_dsub+0x654>
10042246:	e6aa      	b.n	10041f9e <__aeabi_dsub+0x3aa>
10042248:	0762      	lsls	r2, r4, #29
1004224a:	4310      	orrs	r0, r2
1004224c:	2280      	movs	r2, #128	@ 0x80
1004224e:	08e4      	lsrs	r4, r4, #3
10042250:	0312      	lsls	r2, r2, #12
10042252:	4214      	tst	r4, r2
10042254:	d0d7      	beq.n	10042206 <__aeabi_dsub+0x612>
10042256:	9f02      	ldr	r7, [sp, #8]
10042258:	08fd      	lsrs	r5, r7, #3
1004225a:	4215      	tst	r5, r2
1004225c:	d1d3      	bne.n	10042206 <__aeabi_dsub+0x612>
1004225e:	4663      	mov	r3, ip
10042260:	2601      	movs	r6, #1
10042262:	08d8      	lsrs	r0, r3, #3
10042264:	077b      	lsls	r3, r7, #29
10042266:	002c      	movs	r4, r5
10042268:	4318      	orrs	r0, r3
1004226a:	400e      	ands	r6, r1
1004226c:	e7cb      	b.n	10042206 <__aeabi_dsub+0x612>
1004226e:	000a      	movs	r2, r1
10042270:	0027      	movs	r7, r4
10042272:	3a20      	subs	r2, #32
10042274:	40d7      	lsrs	r7, r2
10042276:	2920      	cmp	r1, #32
10042278:	d005      	beq.n	10042286 <__aeabi_dsub+0x692>
1004227a:	2240      	movs	r2, #64	@ 0x40
1004227c:	1a52      	subs	r2, r2, r1
1004227e:	4094      	lsls	r4, r2
10042280:	0025      	movs	r5, r4
10042282:	4305      	orrs	r5, r0
10042284:	9503      	str	r5, [sp, #12]
10042286:	9d03      	ldr	r5, [sp, #12]
10042288:	1e6a      	subs	r2, r5, #1
1004228a:	4195      	sbcs	r5, r2
1004228c:	432f      	orrs	r7, r5
1004228e:	e610      	b.n	10041eb2 <__aeabi_dsub+0x2be>
10042290:	0014      	movs	r4, r2
10042292:	2500      	movs	r5, #0
10042294:	2200      	movs	r2, #0
10042296:	e556      	b.n	10041d46 <__aeabi_dsub+0x152>
10042298:	9b02      	ldr	r3, [sp, #8]
1004229a:	4460      	add	r0, ip
1004229c:	4699      	mov	r9, r3
1004229e:	4560      	cmp	r0, ip
100422a0:	4192      	sbcs	r2, r2
100422a2:	444c      	add	r4, r9
100422a4:	4252      	negs	r2, r2
100422a6:	0005      	movs	r5, r0
100422a8:	18a4      	adds	r4, r4, r2
100422aa:	e74c      	b.n	10042146 <__aeabi_dsub+0x552>
100422ac:	001a      	movs	r2, r3
100422ae:	001c      	movs	r4, r3
100422b0:	432a      	orrs	r2, r5
100422b2:	d000      	beq.n	100422b6 <__aeabi_dsub+0x6c2>
100422b4:	e6b3      	b.n	1004201e <__aeabi_dsub+0x42a>
100422b6:	e6c9      	b.n	1004204c <__aeabi_dsub+0x458>
100422b8:	2480      	movs	r4, #128	@ 0x80
100422ba:	2600      	movs	r6, #0
100422bc:	0324      	lsls	r4, r4, #12
100422be:	e5ae      	b.n	10041e1e <__aeabi_dsub+0x22a>
100422c0:	2120      	movs	r1, #32
100422c2:	2500      	movs	r5, #0
100422c4:	1a09      	subs	r1, r1, r0
100422c6:	e517      	b.n	10041cf8 <__aeabi_dsub+0x104>
100422c8:	2200      	movs	r2, #0
100422ca:	2500      	movs	r5, #0
100422cc:	4c0b      	ldr	r4, [pc, #44]	@ (100422fc <__aeabi_dsub+0x708>)
100422ce:	e53a      	b.n	10041d46 <__aeabi_dsub+0x152>
100422d0:	2d00      	cmp	r5, #0
100422d2:	d100      	bne.n	100422d6 <__aeabi_dsub+0x6e2>
100422d4:	e5f6      	b.n	10041ec4 <__aeabi_dsub+0x2d0>
100422d6:	464b      	mov	r3, r9
100422d8:	1bda      	subs	r2, r3, r7
100422da:	4692      	mov	sl, r2
100422dc:	2f00      	cmp	r7, #0
100422de:	d100      	bne.n	100422e2 <__aeabi_dsub+0x6ee>
100422e0:	e66f      	b.n	10041fc2 <__aeabi_dsub+0x3ce>
100422e2:	2a38      	cmp	r2, #56	@ 0x38
100422e4:	dc05      	bgt.n	100422f2 <__aeabi_dsub+0x6fe>
100422e6:	2680      	movs	r6, #128	@ 0x80
100422e8:	0436      	lsls	r6, r6, #16
100422ea:	4334      	orrs	r4, r6
100422ec:	4688      	mov	r8, r1
100422ee:	000e      	movs	r6, r1
100422f0:	e6d1      	b.n	10042096 <__aeabi_dsub+0x4a2>
100422f2:	4688      	mov	r8, r1
100422f4:	000e      	movs	r6, r1
100422f6:	2501      	movs	r5, #1
100422f8:	e6de      	b.n	100420b8 <__aeabi_dsub+0x4c4>
100422fa:	46c0      	nop			@ (mov r8, r8)
100422fc:	000007ff 	.word	0x000007ff
10042300:	ff7fffff 	.word	0xff7fffff
10042304:	000007fe 	.word	0x000007fe
10042308:	2d00      	cmp	r5, #0
1004230a:	d100      	bne.n	1004230e <__aeabi_dsub+0x71a>
1004230c:	e668      	b.n	10041fe0 <__aeabi_dsub+0x3ec>
1004230e:	464b      	mov	r3, r9
10042310:	1bd9      	subs	r1, r3, r7
10042312:	2f00      	cmp	r7, #0
10042314:	d101      	bne.n	1004231a <__aeabi_dsub+0x726>
10042316:	468a      	mov	sl, r1
10042318:	e5a7      	b.n	10041e6a <__aeabi_dsub+0x276>
1004231a:	2701      	movs	r7, #1
1004231c:	2938      	cmp	r1, #56	@ 0x38
1004231e:	dd00      	ble.n	10042322 <__aeabi_dsub+0x72e>
10042320:	e5c7      	b.n	10041eb2 <__aeabi_dsub+0x2be>
10042322:	2280      	movs	r2, #128	@ 0x80
10042324:	0412      	lsls	r2, r2, #16
10042326:	4314      	orrs	r4, r2
10042328:	e5af      	b.n	10041e8a <__aeabi_dsub+0x296>
1004232a:	46c0      	nop			@ (mov r8, r8)

1004232c <__aeabi_dcmpun>:
1004232c:	b5f0      	push	{r4, r5, r6, r7, lr}
1004232e:	46c6      	mov	lr, r8
10042330:	031e      	lsls	r6, r3, #12
10042332:	0b36      	lsrs	r6, r6, #12
10042334:	46b0      	mov	r8, r6
10042336:	4e0d      	ldr	r6, [pc, #52]	@ (1004236c <__aeabi_dcmpun+0x40>)
10042338:	030c      	lsls	r4, r1, #12
1004233a:	004d      	lsls	r5, r1, #1
1004233c:	005f      	lsls	r7, r3, #1
1004233e:	b500      	push	{lr}
10042340:	0b24      	lsrs	r4, r4, #12
10042342:	0d6d      	lsrs	r5, r5, #21
10042344:	0d7f      	lsrs	r7, r7, #21
10042346:	42b5      	cmp	r5, r6
10042348:	d00b      	beq.n	10042362 <__aeabi_dcmpun+0x36>
1004234a:	4908      	ldr	r1, [pc, #32]	@ (1004236c <__aeabi_dcmpun+0x40>)
1004234c:	2000      	movs	r0, #0
1004234e:	428f      	cmp	r7, r1
10042350:	d104      	bne.n	1004235c <__aeabi_dcmpun+0x30>
10042352:	4646      	mov	r6, r8
10042354:	4316      	orrs	r6, r2
10042356:	0030      	movs	r0, r6
10042358:	1e43      	subs	r3, r0, #1
1004235a:	4198      	sbcs	r0, r3
1004235c:	bc80      	pop	{r7}
1004235e:	46b8      	mov	r8, r7
10042360:	bdf0      	pop	{r4, r5, r6, r7, pc}
10042362:	4304      	orrs	r4, r0
10042364:	2001      	movs	r0, #1
10042366:	2c00      	cmp	r4, #0
10042368:	d1f8      	bne.n	1004235c <__aeabi_dcmpun+0x30>
1004236a:	e7ee      	b.n	1004234a <__aeabi_dcmpun+0x1e>
1004236c:	000007ff 	.word	0x000007ff

10042370 <__aeabi_d2iz>:
10042370:	000b      	movs	r3, r1
10042372:	0002      	movs	r2, r0
10042374:	b570      	push	{r4, r5, r6, lr}
10042376:	4d16      	ldr	r5, [pc, #88]	@ (100423d0 <__aeabi_d2iz+0x60>)
10042378:	030c      	lsls	r4, r1, #12
1004237a:	b082      	sub	sp, #8
1004237c:	0049      	lsls	r1, r1, #1
1004237e:	2000      	movs	r0, #0
10042380:	9200      	str	r2, [sp, #0]
10042382:	9301      	str	r3, [sp, #4]
10042384:	0b24      	lsrs	r4, r4, #12
10042386:	0d49      	lsrs	r1, r1, #21
10042388:	0fde      	lsrs	r6, r3, #31
1004238a:	42a9      	cmp	r1, r5
1004238c:	dd04      	ble.n	10042398 <__aeabi_d2iz+0x28>
1004238e:	4811      	ldr	r0, [pc, #68]	@ (100423d4 <__aeabi_d2iz+0x64>)
10042390:	4281      	cmp	r1, r0
10042392:	dd03      	ble.n	1004239c <__aeabi_d2iz+0x2c>
10042394:	4b10      	ldr	r3, [pc, #64]	@ (100423d8 <__aeabi_d2iz+0x68>)
10042396:	18f0      	adds	r0, r6, r3
10042398:	b002      	add	sp, #8
1004239a:	bd70      	pop	{r4, r5, r6, pc}
1004239c:	2080      	movs	r0, #128	@ 0x80
1004239e:	0340      	lsls	r0, r0, #13
100423a0:	4320      	orrs	r0, r4
100423a2:	4c0e      	ldr	r4, [pc, #56]	@ (100423dc <__aeabi_d2iz+0x6c>)
100423a4:	1a64      	subs	r4, r4, r1
100423a6:	2c1f      	cmp	r4, #31
100423a8:	dd08      	ble.n	100423bc <__aeabi_d2iz+0x4c>
100423aa:	4b0d      	ldr	r3, [pc, #52]	@ (100423e0 <__aeabi_d2iz+0x70>)
100423ac:	1a5b      	subs	r3, r3, r1
100423ae:	40d8      	lsrs	r0, r3
100423b0:	0003      	movs	r3, r0
100423b2:	4258      	negs	r0, r3
100423b4:	2e00      	cmp	r6, #0
100423b6:	d1ef      	bne.n	10042398 <__aeabi_d2iz+0x28>
100423b8:	0018      	movs	r0, r3
100423ba:	e7ed      	b.n	10042398 <__aeabi_d2iz+0x28>
100423bc:	4b09      	ldr	r3, [pc, #36]	@ (100423e4 <__aeabi_d2iz+0x74>)
100423be:	9a00      	ldr	r2, [sp, #0]
100423c0:	469c      	mov	ip, r3
100423c2:	0003      	movs	r3, r0
100423c4:	4461      	add	r1, ip
100423c6:	408b      	lsls	r3, r1
100423c8:	40e2      	lsrs	r2, r4
100423ca:	4313      	orrs	r3, r2
100423cc:	e7f1      	b.n	100423b2 <__aeabi_d2iz+0x42>
100423ce:	46c0      	nop			@ (mov r8, r8)
100423d0:	000003fe 	.word	0x000003fe
100423d4:	0000041d 	.word	0x0000041d
100423d8:	7fffffff 	.word	0x7fffffff
100423dc:	00000433 	.word	0x00000433
100423e0:	00000413 	.word	0x00000413
100423e4:	fffffbed 	.word	0xfffffbed

100423e8 <__aeabi_i2d>:
100423e8:	b570      	push	{r4, r5, r6, lr}
100423ea:	2800      	cmp	r0, #0
100423ec:	d016      	beq.n	1004241c <__aeabi_i2d+0x34>
100423ee:	17c3      	asrs	r3, r0, #31
100423f0:	18c5      	adds	r5, r0, r3
100423f2:	405d      	eors	r5, r3
100423f4:	0fc4      	lsrs	r4, r0, #31
100423f6:	0028      	movs	r0, r5
100423f8:	f000 f848 	bl	1004248c <__clzsi2>
100423fc:	4b10      	ldr	r3, [pc, #64]	@ (10042440 <__aeabi_i2d+0x58>)
100423fe:	1a1b      	subs	r3, r3, r0
10042400:	055b      	lsls	r3, r3, #21
10042402:	0d5b      	lsrs	r3, r3, #21
10042404:	280a      	cmp	r0, #10
10042406:	dc14      	bgt.n	10042432 <__aeabi_i2d+0x4a>
10042408:	0002      	movs	r2, r0
1004240a:	002e      	movs	r6, r5
1004240c:	3215      	adds	r2, #21
1004240e:	4096      	lsls	r6, r2
10042410:	220b      	movs	r2, #11
10042412:	1a12      	subs	r2, r2, r0
10042414:	40d5      	lsrs	r5, r2
10042416:	032d      	lsls	r5, r5, #12
10042418:	0b2d      	lsrs	r5, r5, #12
1004241a:	e003      	b.n	10042424 <__aeabi_i2d+0x3c>
1004241c:	2400      	movs	r4, #0
1004241e:	2300      	movs	r3, #0
10042420:	2500      	movs	r5, #0
10042422:	2600      	movs	r6, #0
10042424:	051b      	lsls	r3, r3, #20
10042426:	432b      	orrs	r3, r5
10042428:	07e4      	lsls	r4, r4, #31
1004242a:	4323      	orrs	r3, r4
1004242c:	0030      	movs	r0, r6
1004242e:	0019      	movs	r1, r3
10042430:	bd70      	pop	{r4, r5, r6, pc}
10042432:	380b      	subs	r0, #11
10042434:	4085      	lsls	r5, r0
10042436:	032d      	lsls	r5, r5, #12
10042438:	2600      	movs	r6, #0
1004243a:	0b2d      	lsrs	r5, r5, #12
1004243c:	e7f2      	b.n	10042424 <__aeabi_i2d+0x3c>
1004243e:	46c0      	nop			@ (mov r8, r8)
10042440:	0000041e 	.word	0x0000041e

10042444 <__aeabi_ui2d>:
10042444:	b510      	push	{r4, lr}
10042446:	1e04      	subs	r4, r0, #0
10042448:	d010      	beq.n	1004246c <__aeabi_ui2d+0x28>
1004244a:	f000 f81f 	bl	1004248c <__clzsi2>
1004244e:	4b0e      	ldr	r3, [pc, #56]	@ (10042488 <__aeabi_ui2d+0x44>)
10042450:	1a1b      	subs	r3, r3, r0
10042452:	055b      	lsls	r3, r3, #21
10042454:	0d5b      	lsrs	r3, r3, #21
10042456:	280a      	cmp	r0, #10
10042458:	dc0f      	bgt.n	1004247a <__aeabi_ui2d+0x36>
1004245a:	220b      	movs	r2, #11
1004245c:	0021      	movs	r1, r4
1004245e:	1a12      	subs	r2, r2, r0
10042460:	40d1      	lsrs	r1, r2
10042462:	3015      	adds	r0, #21
10042464:	030a      	lsls	r2, r1, #12
10042466:	4084      	lsls	r4, r0
10042468:	0b12      	lsrs	r2, r2, #12
1004246a:	e001      	b.n	10042470 <__aeabi_ui2d+0x2c>
1004246c:	2300      	movs	r3, #0
1004246e:	2200      	movs	r2, #0
10042470:	051b      	lsls	r3, r3, #20
10042472:	4313      	orrs	r3, r2
10042474:	0020      	movs	r0, r4
10042476:	0019      	movs	r1, r3
10042478:	bd10      	pop	{r4, pc}
1004247a:	0022      	movs	r2, r4
1004247c:	380b      	subs	r0, #11
1004247e:	4082      	lsls	r2, r0
10042480:	0312      	lsls	r2, r2, #12
10042482:	2400      	movs	r4, #0
10042484:	0b12      	lsrs	r2, r2, #12
10042486:	e7f3      	b.n	10042470 <__aeabi_ui2d+0x2c>
10042488:	0000041e 	.word	0x0000041e

1004248c <__clzsi2>:
1004248c:	211c      	movs	r1, #28
1004248e:	2301      	movs	r3, #1
10042490:	041b      	lsls	r3, r3, #16
10042492:	4298      	cmp	r0, r3
10042494:	d301      	bcc.n	1004249a <__clzsi2+0xe>
10042496:	0c00      	lsrs	r0, r0, #16
10042498:	3910      	subs	r1, #16
1004249a:	0a1b      	lsrs	r3, r3, #8
1004249c:	4298      	cmp	r0, r3
1004249e:	d301      	bcc.n	100424a4 <__clzsi2+0x18>
100424a0:	0a00      	lsrs	r0, r0, #8
100424a2:	3908      	subs	r1, #8
100424a4:	091b      	lsrs	r3, r3, #4
100424a6:	4298      	cmp	r0, r3
100424a8:	d301      	bcc.n	100424ae <__clzsi2+0x22>
100424aa:	0900      	lsrs	r0, r0, #4
100424ac:	3904      	subs	r1, #4
100424ae:	a202      	add	r2, pc, #8	@ (adr r2, 100424b8 <__clzsi2+0x2c>)
100424b0:	5c10      	ldrb	r0, [r2, r0]
100424b2:	1840      	adds	r0, r0, r1
100424b4:	4770      	bx	lr
100424b6:	46c0      	nop			@ (mov r8, r8)
100424b8:	02020304 	.word	0x02020304
100424bc:	01010101 	.word	0x01010101
	...

100424c8 <__clzdi2>:
100424c8:	b510      	push	{r4, lr}
100424ca:	2900      	cmp	r1, #0
100424cc:	d103      	bne.n	100424d6 <__clzdi2+0xe>
100424ce:	f7ff ffdd 	bl	1004248c <__clzsi2>
100424d2:	3020      	adds	r0, #32
100424d4:	e002      	b.n	100424dc <__clzdi2+0x14>
100424d6:	0008      	movs	r0, r1
100424d8:	f7ff ffd8 	bl	1004248c <__clzsi2>
100424dc:	bd10      	pop	{r4, pc}
100424de:	46c0      	nop			@ (mov r8, r8)

100424e0 <LL_PWR_EnableGPIOPullUp>:
  *         @arg @ref LL_PWR_GPIO_BIT_14
  *         @arg @ref LL_PWR_GPIO_BIT_15
  * @retval None
  */
__STATIC_INLINE void LL_PWR_EnableGPIOPullUp(uint32_t GPIO, uint32_t GPIONumber)
{
100424e0:	b580      	push	{r7, lr}
100424e2:	b082      	sub	sp, #8
100424e4:	af00      	add	r7, sp, #0
100424e6:	6078      	str	r0, [r7, #4]
100424e8:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(*((__IO uint32_t *)(GPIO + 4UL)), GPIONumber);
100424ea:	687b      	ldr	r3, [r7, #4]
100424ec:	3304      	adds	r3, #4
100424ee:	681a      	ldr	r2, [r3, #0]
100424f0:	683b      	ldr	r3, [r7, #0]
100424f2:	43d9      	mvns	r1, r3
100424f4:	687b      	ldr	r3, [r7, #4]
100424f6:	3304      	adds	r3, #4
100424f8:	400a      	ands	r2, r1
100424fa:	601a      	str	r2, [r3, #0]
  SET_BIT(*((__IO uint32_t *)GPIO), GPIONumber);
100424fc:	687b      	ldr	r3, [r7, #4]
100424fe:	6819      	ldr	r1, [r3, #0]
10042500:	687b      	ldr	r3, [r7, #4]
10042502:	683a      	ldr	r2, [r7, #0]
10042504:	430a      	orrs	r2, r1
10042506:	601a      	str	r2, [r3, #0]
}
10042508:	46c0      	nop			@ (mov r8, r8)
1004250a:	46bd      	mov	sp, r7
1004250c:	b002      	add	sp, #8
1004250e:	bd80      	pop	{r7, pc}

10042510 <LL_PWR_SetNoPullA>:
  *         @arg @ref LL_PWR_GPIO_BIT_15(*)
  *         (*) available only on STM32WB06 and STM32WB07 devices
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SetNoPullA(uint32_t GPIONumber)
{
10042510:	b580      	push	{r7, lr}
10042512:	b082      	sub	sp, #8
10042514:	af00      	add	r7, sp, #0
10042516:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(PWR->PUCRA, GPIONumber);
10042518:	4b08      	ldr	r3, [pc, #32]	@ (1004253c <LL_PWR_SetNoPullA+0x2c>)
1004251a:	6a1a      	ldr	r2, [r3, #32]
1004251c:	687b      	ldr	r3, [r7, #4]
1004251e:	43d9      	mvns	r1, r3
10042520:	4b06      	ldr	r3, [pc, #24]	@ (1004253c <LL_PWR_SetNoPullA+0x2c>)
10042522:	400a      	ands	r2, r1
10042524:	621a      	str	r2, [r3, #32]
  CLEAR_BIT(PWR->PDCRA, GPIONumber);
10042526:	4b05      	ldr	r3, [pc, #20]	@ (1004253c <LL_PWR_SetNoPullA+0x2c>)
10042528:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
1004252a:	687b      	ldr	r3, [r7, #4]
1004252c:	43d9      	mvns	r1, r3
1004252e:	4b03      	ldr	r3, [pc, #12]	@ (1004253c <LL_PWR_SetNoPullA+0x2c>)
10042530:	400a      	ands	r2, r1
10042532:	625a      	str	r2, [r3, #36]	@ 0x24
}
10042534:	46c0      	nop			@ (mov r8, r8)
10042536:	46bd      	mov	sp, r7
10042538:	b002      	add	sp, #8
1004253a:	bd80      	pop	{r7, pc}
1004253c:	48500000 	.word	0x48500000

10042540 <LL_PWR_SetNoPullB>:
  *         @arg @ref LL_PWR_GPIO_BIT_15
  *         (*) available only oon STM32WB06 and STM32WB07 devices
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SetNoPullB(uint32_t GPIONumber)
{
10042540:	b580      	push	{r7, lr}
10042542:	b082      	sub	sp, #8
10042544:	af00      	add	r7, sp, #0
10042546:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(PWR->PUCRB, GPIONumber);
10042548:	4b08      	ldr	r3, [pc, #32]	@ (1004256c <LL_PWR_SetNoPullB+0x2c>)
1004254a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
1004254c:	687b      	ldr	r3, [r7, #4]
1004254e:	43d9      	mvns	r1, r3
10042550:	4b06      	ldr	r3, [pc, #24]	@ (1004256c <LL_PWR_SetNoPullB+0x2c>)
10042552:	400a      	ands	r2, r1
10042554:	629a      	str	r2, [r3, #40]	@ 0x28
  CLEAR_BIT(PWR->PDCRB, GPIONumber);
10042556:	4b05      	ldr	r3, [pc, #20]	@ (1004256c <LL_PWR_SetNoPullB+0x2c>)
10042558:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
1004255a:	687b      	ldr	r3, [r7, #4]
1004255c:	43d9      	mvns	r1, r3
1004255e:	4b03      	ldr	r3, [pc, #12]	@ (1004256c <LL_PWR_SetNoPullB+0x2c>)
10042560:	400a      	ands	r2, r1
10042562:	62da      	str	r2, [r3, #44]	@ 0x2c
}
10042564:	46c0      	nop			@ (mov r8, r8)
10042566:	46bd      	mov	sp, r7
10042568:	b002      	add	sp, #8
1004256a:	bd80      	pop	{r7, pc}
1004256c:	48500000 	.word	0x48500000

10042570 <LL_RADIO_TIMER_GetAbsoluteTime>:
  * @brief  Get the Absolute Time of the wakeup timer (Granularity unit is 16 x slow clock period).
  * @param  WAKEUPx Radio Timer instance
  * @retval Absolute Time of Wakeup Timer
  */
__STATIC_INLINE uint32_t LL_RADIO_TIMER_GetAbsoluteTime(WAKEUP_TypeDef *WAKEUPx)
{
10042570:	b580      	push	{r7, lr}
10042572:	b082      	sub	sp, #8
10042574:	af00      	add	r7, sp, #0
10042576:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_REG(WAKEUPx->ABSOLUTE_TIME));
10042578:	687b      	ldr	r3, [r7, #4]
1004257a:	691b      	ldr	r3, [r3, #16]
}
1004257c:	0018      	movs	r0, r3
1004257e:	46bd      	mov	sp, r7
10042580:	b002      	add	sp, #8
10042582:	bd80      	pop	{r7, pc}

10042584 <LL_AHB1_GRP1_EnableClock>:
  * @arg LL_AHB1_GRP1_PERIPH_RNG
  * @retval None
  * @note   LL_AHB1_GRP1_PERIPH_PKA
  */
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
10042584:	b580      	push	{r7, lr}
10042586:	b084      	sub	sp, #16
10042588:	af00      	add	r7, sp, #0
1004258a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHBENR, Periphs);
1004258c:	4b07      	ldr	r3, [pc, #28]	@ (100425ac <LL_AHB1_GRP1_EnableClock+0x28>)
1004258e:	6d19      	ldr	r1, [r3, #80]	@ 0x50
10042590:	4b06      	ldr	r3, [pc, #24]	@ (100425ac <LL_AHB1_GRP1_EnableClock+0x28>)
10042592:	687a      	ldr	r2, [r7, #4]
10042594:	430a      	orrs	r2, r1
10042596:	651a      	str	r2, [r3, #80]	@ 0x50
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
10042598:	4b04      	ldr	r3, [pc, #16]	@ (100425ac <LL_AHB1_GRP1_EnableClock+0x28>)
1004259a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
1004259c:	687a      	ldr	r2, [r7, #4]
1004259e:	4013      	ands	r3, r2
100425a0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
100425a2:	68fb      	ldr	r3, [r7, #12]
}
100425a4:	46c0      	nop			@ (mov r8, r8)
100425a6:	46bd      	mov	sp, r7
100425a8:	b004      	add	sp, #16
100425aa:	bd80      	pop	{r7, pc}
100425ac:	48400000 	.word	0x48400000

100425b0 <LL_APB2_GRP1_EnableClock>:
  * @arg LL_APB2_GRP1_PERIPH_MRBLE
  * @retval None
  * @note   LL_APB2_GRP1_PERIPH_MRBLE
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
100425b0:	b580      	push	{r7, lr}
100425b2:	b084      	sub	sp, #16
100425b4:	af00      	add	r7, sp, #0
100425b6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
100425b8:	4b07      	ldr	r3, [pc, #28]	@ (100425d8 <LL_APB2_GRP1_EnableClock+0x28>)
100425ba:	6e19      	ldr	r1, [r3, #96]	@ 0x60
100425bc:	4b06      	ldr	r3, [pc, #24]	@ (100425d8 <LL_APB2_GRP1_EnableClock+0x28>)
100425be:	687a      	ldr	r2, [r7, #4]
100425c0:	430a      	orrs	r2, r1
100425c2:	661a      	str	r2, [r3, #96]	@ 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
100425c4:	4b04      	ldr	r3, [pc, #16]	@ (100425d8 <LL_APB2_GRP1_EnableClock+0x28>)
100425c6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
100425c8:	687a      	ldr	r2, [r7, #4]
100425ca:	4013      	ands	r3, r2
100425cc:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
100425ce:	68fb      	ldr	r3, [r7, #12]
}
100425d0:	46c0      	nop			@ (mov r8, r8)
100425d2:	46bd      	mov	sp, r7
100425d4:	b004      	add	sp, #16
100425d6:	bd80      	pop	{r7, pc}
100425d8:	48400000 	.word	0x48400000

100425dc <LL_APB2_GRP1_IsEnabledClock>:
  * @arg LL_APB2_GRP1_PERIPH_MRBLE
  * @retval uint32_t
  * @note   LL_APB2_GRP1_PERIPH_MRBLE
  */
__STATIC_INLINE uint32_t LL_APB2_GRP1_IsEnabledClock(uint32_t Periphs)
{
100425dc:	b580      	push	{r7, lr}
100425de:	b082      	sub	sp, #8
100425e0:	af00      	add	r7, sp, #0
100425e2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(RCC->APB2ENR, Periphs) == (Periphs)) ? 1UL : 0UL);
100425e4:	4b06      	ldr	r3, [pc, #24]	@ (10042600 <LL_APB2_GRP1_IsEnabledClock+0x24>)
100425e6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
100425e8:	687a      	ldr	r2, [r7, #4]
100425ea:	4013      	ands	r3, r2
100425ec:	687a      	ldr	r2, [r7, #4]
100425ee:	429a      	cmp	r2, r3
100425f0:	d101      	bne.n	100425f6 <LL_APB2_GRP1_IsEnabledClock+0x1a>
100425f2:	2301      	movs	r3, #1
100425f4:	e000      	b.n	100425f8 <LL_APB2_GRP1_IsEnabledClock+0x1c>
100425f6:	2300      	movs	r3, #0
}
100425f8:	0018      	movs	r0, r3
100425fa:	46bd      	mov	sp, r7
100425fc:	b002      	add	sp, #8
100425fe:	bd80      	pop	{r7, pc}
10042600:	48400000 	.word	0x48400000

10042604 <LL_APB2_GRP1_ForceReset>:
  * @arg LL_APB2_GRP1_PERIPH_MRBLE
  * @retval None
  * @note   LL_APB2_GRP1_PERIPH_MRBLE
  */
__STATIC_INLINE void LL_APB2_GRP1_ForceReset(uint32_t Periphs)
{
10042604:	b580      	push	{r7, lr}
10042606:	b082      	sub	sp, #8
10042608:	af00      	add	r7, sp, #0
1004260a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2RSTR, Periphs);
1004260c:	4b04      	ldr	r3, [pc, #16]	@ (10042620 <LL_APB2_GRP1_ForceReset+0x1c>)
1004260e:	6c19      	ldr	r1, [r3, #64]	@ 0x40
10042610:	4b03      	ldr	r3, [pc, #12]	@ (10042620 <LL_APB2_GRP1_ForceReset+0x1c>)
10042612:	687a      	ldr	r2, [r7, #4]
10042614:	430a      	orrs	r2, r1
10042616:	641a      	str	r2, [r3, #64]	@ 0x40
}
10042618:	46c0      	nop			@ (mov r8, r8)
1004261a:	46bd      	mov	sp, r7
1004261c:	b002      	add	sp, #8
1004261e:	bd80      	pop	{r7, pc}
10042620:	48400000 	.word	0x48400000

10042624 <LL_APB2_GRP1_ReleaseReset>:
  * @arg LL_APB2_GRP1_PERIPH_MRBLE
  * @retval None
  * @note   LL_APB2_GRP1_PERIPH_MRBLE
  */
__STATIC_INLINE void LL_APB2_GRP1_ReleaseReset(uint32_t Periphs)
{
10042624:	b580      	push	{r7, lr}
10042626:	b082      	sub	sp, #8
10042628:	af00      	add	r7, sp, #0
1004262a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB2RSTR, Periphs);
1004262c:	4b05      	ldr	r3, [pc, #20]	@ (10042644 <LL_APB2_GRP1_ReleaseReset+0x20>)
1004262e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
10042630:	687b      	ldr	r3, [r7, #4]
10042632:	43d9      	mvns	r1, r3
10042634:	4b03      	ldr	r3, [pc, #12]	@ (10042644 <LL_APB2_GRP1_ReleaseReset+0x20>)
10042636:	400a      	ands	r2, r1
10042638:	641a      	str	r2, [r3, #64]	@ 0x40
}
1004263a:	46c0      	nop			@ (mov r8, r8)
1004263c:	46bd      	mov	sp, r7
1004263e:	b002      	add	sp, #8
10042640:	bd80      	pop	{r7, pc}
10042642:	46c0      	nop			@ (mov r8, r8)
10042644:	48400000 	.word	0x48400000

10042648 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
10042648:	b5f0      	push	{r4, r5, r6, r7, lr}
1004264a:	b08b      	sub	sp, #44	@ 0x2c
1004264c:	af04      	add	r7, sp, #16
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
1004264e:	f002 f8b7 	bl	100447c0 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
10042652:	f000 f979 	bl	10042948 <SystemClock_Config>

	/* Configure the peripherals common clocks */
	PeriphCommonClock_Config();
10042656:	f000 f9ae 	bl	100429b6 <PeriphCommonClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
1004265a:	f000 fa99 	bl	10042b90 <MX_GPIO_Init>
	MX_SPI2_Init();
1004265e:	f000 fa0b 	bl	10042a78 <MX_SPI2_Init>
	MX_USART1_UART_Init();
10042662:	f000 fa47 	bl	10042af4 <MX_USART1_UART_Init>
	MX_RADIO_Init();
10042666:	f000 f9c3 	bl	100429f0 <MX_RADIO_Init>
	MX_RADIO_TIMER_Init();
1004266a:	f000 f9d1 	bl	10042a10 <MX_RADIO_TIMER_Init>
	/* USER CODE BEGIN 2 */
	DW1000_init(&dw1000);
1004266e:	4ba7      	ldr	r3, [pc, #668]	@ (1004290c <main+0x2c4>)
10042670:	0018      	movs	r0, r3
10042672:	f001 f9b3 	bl	100439dc <DW1000_init>
	uint8_t pll_lock = DW1000_config(&dw1000, &dw1000_cfg);
10042676:	230a      	movs	r3, #10
10042678:	18fe      	adds	r6, r7, r3
1004267a:	4aa5      	ldr	r2, [pc, #660]	@ (10042910 <main+0x2c8>)
1004267c:	4ba3      	ldr	r3, [pc, #652]	@ (1004290c <main+0x2c4>)
1004267e:	0011      	movs	r1, r2
10042680:	0018      	movs	r0, r3
10042682:	f001 fb0b 	bl	10043c9c <DW1000_config>
10042686:	0003      	movs	r3, r0
10042688:	7033      	strb	r3, [r6, #0]
	if (pll_lock) {
1004268a:	230a      	movs	r3, #10
1004268c:	18fb      	adds	r3, r7, r3
1004268e:	781b      	ldrb	r3, [r3, #0]
10042690:	2b00      	cmp	r3, #0
10042692:	d006      	beq.n	100426a2 <main+0x5a>
		hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
10042694:	4b9f      	ldr	r3, [pc, #636]	@ (10042914 <main+0x2cc>)
10042696:	2208      	movs	r2, #8
10042698:	61da      	str	r2, [r3, #28]
		HAL_SPI_Init(&hspi2);
1004269a:	4b9e      	ldr	r3, [pc, #632]	@ (10042914 <main+0x2cc>)
1004269c:	0018      	movs	r0, r3
1004269e:	f006 f92b 	bl	100488f8 <HAL_SPI_Init>
	}
	uint64_t ID = *((uint64_t*) UID64_BASE);
100426a2:	4b9d      	ldr	r3, [pc, #628]	@ (10042918 <main+0x2d0>)
100426a4:	681a      	ldr	r2, [r3, #0]
100426a6:	685b      	ldr	r3, [r3, #4]
100426a8:	613a      	str	r2, [r7, #16]
100426aa:	617b      	str	r3, [r7, #20]
	uint8_t i = 2;
100426ac:	230f      	movs	r3, #15
100426ae:	18fb      	adds	r3, r7, r3
100426b0:	2202      	movs	r2, #2
100426b2:	701a      	strb	r2, [r3, #0]
	sendData[1] = 8;
100426b4:	4b99      	ldr	r3, [pc, #612]	@ (1004291c <main+0x2d4>)
100426b6:	2208      	movs	r2, #8
100426b8:	705a      	strb	r2, [r3, #1]
	do {
		sendData[i++] = ID & 0xFF;
100426ba:	220f      	movs	r2, #15
100426bc:	18bb      	adds	r3, r7, r2
100426be:	781b      	ldrb	r3, [r3, #0]
100426c0:	18ba      	adds	r2, r7, r2
100426c2:	1c59      	adds	r1, r3, #1
100426c4:	7011      	strb	r1, [r2, #0]
100426c6:	0019      	movs	r1, r3
100426c8:	693a      	ldr	r2, [r7, #16]
100426ca:	697b      	ldr	r3, [r7, #20]
100426cc:	1c13      	adds	r3, r2, #0
100426ce:	b2da      	uxtb	r2, r3
100426d0:	4b92      	ldr	r3, [pc, #584]	@ (1004291c <main+0x2d4>)
100426d2:	545a      	strb	r2, [r3, r1]
	} while (ID >>= 8);
100426d4:	697b      	ldr	r3, [r7, #20]
100426d6:	061b      	lsls	r3, r3, #24
100426d8:	693a      	ldr	r2, [r7, #16]
100426da:	0a14      	lsrs	r4, r2, #8
100426dc:	431c      	orrs	r4, r3
100426de:	697b      	ldr	r3, [r7, #20]
100426e0:	0a1d      	lsrs	r5, r3, #8
100426e2:	613c      	str	r4, [r7, #16]
100426e4:	617d      	str	r5, [r7, #20]
100426e6:	693b      	ldr	r3, [r7, #16]
100426e8:	697a      	ldr	r2, [r7, #20]
100426ea:	4313      	orrs	r3, r2
100426ec:	d1e5      	bne.n	100426ba <main+0x72>
	HAL_RADIO_SetNetworkID(0x88DF88DF);
100426ee:	4b8c      	ldr	r3, [pc, #560]	@ (10042920 <main+0x2d8>)
100426f0:	0018      	movs	r0, r3
100426f2:	f003 fd9d 	bl	10046230 <HAL_RADIO_SetNetworkID>
	HAL_RADIO_SetTxPower(0x18);
100426f6:	2018      	movs	r0, #24
100426f8:	f003 fd70 	bl	100461dc <HAL_RADIO_SetTxPower>
	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
		HAL_RADIO_TIMER_Tick();
100426fc:	f004 f97a 	bl	100469f4 <HAL_RADIO_TIMER_Tick>
		if (sendNewPacket) {
10042700:	4b88      	ldr	r3, [pc, #544]	@ (10042924 <main+0x2dc>)
10042702:	781b      	ldrb	r3, [r3, #0]
10042704:	2b00      	cmp	r3, #0
10042706:	d0f9      	beq.n	100426fc <main+0xb4>
			sendNewPacket = FALSE;
10042708:	4b86      	ldr	r3, [pc, #536]	@ (10042924 <main+0x2dc>)
1004270a:	2200      	movs	r2, #0
1004270c:	701a      	strb	r2, [r3, #0]
			for (current_channel = 0; current_channel + 1 < MAX_BEACON_COUNT;
1004270e:	4b86      	ldr	r3, [pc, #536]	@ (10042928 <main+0x2e0>)
10042710:	2200      	movs	r2, #0
10042712:	701a      	strb	r2, [r3, #0]
10042714:	e044      	b.n	100427a0 <main+0x158>
					current_channel++) {
				sendData[0] = 0xDD;
10042716:	4b81      	ldr	r3, [pc, #516]	@ (1004291c <main+0x2d4>)
10042718:	22dd      	movs	r2, #221	@ 0xdd
1004271a:	701a      	strb	r2, [r3, #0]
				HAL_RADIO_SendPacketWithAck(current_channel, TX_WAKEUP_TIME,
1004271c:	4b82      	ldr	r3, [pc, #520]	@ (10042928 <main+0x2e0>)
1004271e:	7818      	ldrb	r0, [r3, #0]
10042720:	4c82      	ldr	r4, [pc, #520]	@ (1004292c <main+0x2e4>)
10042722:	4a7e      	ldr	r2, [pc, #504]	@ (1004291c <main+0x2d4>)
10042724:	23c8      	movs	r3, #200	@ 0xc8
10042726:	0059      	lsls	r1, r3, #1
10042728:	4b81      	ldr	r3, [pc, #516]	@ (10042930 <main+0x2e8>)
1004272a:	9302      	str	r3, [sp, #8]
1004272c:	23ff      	movs	r3, #255	@ 0xff
1004272e:	9301      	str	r3, [sp, #4]
10042730:	4b80      	ldr	r3, [pc, #512]	@ (10042934 <main+0x2ec>)
10042732:	9300      	str	r3, [sp, #0]
10042734:	0023      	movs	r3, r4
10042736:	f003 fd89 	bl	1004624c <HAL_RADIO_SendPacketWithAck>
						sendData, receivedData, RX_TIMEOUT_ACK,
						MAX_LL_PACKET_LENGTH, HAL_RADIO_Callback);
				HAL_Delay(40);
1004273a:	2028      	movs	r0, #40	@ 0x28
1004273c:	f002 f8c6 	bl	100448cc <HAL_Delay>
				HAL_RADIO_TIMER_Tick();
10042740:	f004 f958 	bl	100469f4 <HAL_RADIO_TIMER_Tick>
				if (beacon_ID[current_channel] != 0) {
10042744:	4b78      	ldr	r3, [pc, #480]	@ (10042928 <main+0x2e0>)
10042746:	781b      	ldrb	r3, [r3, #0]
10042748:	4a7b      	ldr	r2, [pc, #492]	@ (10042938 <main+0x2f0>)
1004274a:	00db      	lsls	r3, r3, #3
1004274c:	18d3      	adds	r3, r2, r3
1004274e:	681a      	ldr	r2, [r3, #0]
10042750:	685b      	ldr	r3, [r3, #4]
10042752:	0011      	movs	r1, r2
10042754:	4319      	orrs	r1, r3
10042756:	d01d      	beq.n	10042794 <main+0x14c>
					DW1000_initiator(&dw1000, current_channel);
10042758:	4b73      	ldr	r3, [pc, #460]	@ (10042928 <main+0x2e0>)
1004275a:	781a      	ldrb	r2, [r3, #0]
1004275c:	4b6b      	ldr	r3, [pc, #428]	@ (1004290c <main+0x2c4>)
1004275e:	0011      	movs	r1, r2
10042760:	0018      	movs	r0, r3
10042762:	f001 fd71 	bl	10044248 <DW1000_initiator>
					sendData[0] = 0xD1;
10042766:	4b6d      	ldr	r3, [pc, #436]	@ (1004291c <main+0x2d4>)
10042768:	22d1      	movs	r2, #209	@ 0xd1
1004276a:	701a      	strb	r2, [r3, #0]
					HAL_RADIO_SendPacketWithAck(current_channel,
1004276c:	4b6e      	ldr	r3, [pc, #440]	@ (10042928 <main+0x2e0>)
1004276e:	7818      	ldrb	r0, [r3, #0]
10042770:	4c6e      	ldr	r4, [pc, #440]	@ (1004292c <main+0x2e4>)
10042772:	4a6a      	ldr	r2, [pc, #424]	@ (1004291c <main+0x2d4>)
10042774:	23c8      	movs	r3, #200	@ 0xc8
10042776:	0059      	lsls	r1, r3, #1
10042778:	4b6d      	ldr	r3, [pc, #436]	@ (10042930 <main+0x2e8>)
1004277a:	9302      	str	r3, [sp, #8]
1004277c:	23ff      	movs	r3, #255	@ 0xff
1004277e:	9301      	str	r3, [sp, #4]
10042780:	4b6c      	ldr	r3, [pc, #432]	@ (10042934 <main+0x2ec>)
10042782:	9300      	str	r3, [sp, #0]
10042784:	0023      	movs	r3, r4
10042786:	f003 fd61 	bl	1004624c <HAL_RADIO_SendPacketWithAck>
					TX_WAKEUP_TIME, sendData, receivedData,
					RX_TIMEOUT_ACK,
					MAX_LL_PACKET_LENGTH, HAL_RADIO_Callback);
					HAL_Delay(40);
1004278a:	2028      	movs	r0, #40	@ 0x28
1004278c:	f002 f89e 	bl	100448cc <HAL_Delay>
					HAL_RADIO_TIMER_Tick();
10042790:	f004 f930 	bl	100469f4 <HAL_RADIO_TIMER_Tick>
					current_channel++) {
10042794:	4b64      	ldr	r3, [pc, #400]	@ (10042928 <main+0x2e0>)
10042796:	781b      	ldrb	r3, [r3, #0]
10042798:	3301      	adds	r3, #1
1004279a:	b2da      	uxtb	r2, r3
1004279c:	4b62      	ldr	r3, [pc, #392]	@ (10042928 <main+0x2e0>)
1004279e:	701a      	strb	r2, [r3, #0]
			for (current_channel = 0; current_channel + 1 < MAX_BEACON_COUNT;
100427a0:	4b61      	ldr	r3, [pc, #388]	@ (10042928 <main+0x2e0>)
100427a2:	781b      	ldrb	r3, [r3, #0]
100427a4:	2b26      	cmp	r3, #38	@ 0x26
100427a6:	d9b6      	bls.n	10042716 <main+0xce>

				}
			}
			if (beacon_count > 0) {
100427a8:	4b64      	ldr	r3, [pc, #400]	@ (1004293c <main+0x2f4>)
100427aa:	781b      	ldrb	r3, [r3, #0]
100427ac:	2b00      	cmp	r3, #0
100427ae:	d0a5      	beq.n	100426fc <main+0xb4>
				receivedDistanceData[0] = 0xFF;
100427b0:	4b63      	ldr	r3, [pc, #396]	@ (10042940 <main+0x2f8>)
100427b2:	22ff      	movs	r2, #255	@ 0xff
100427b4:	701a      	strb	r2, [r3, #0]
				receivedDistanceData[1] = 10 * beacon_count;
100427b6:	4b61      	ldr	r3, [pc, #388]	@ (1004293c <main+0x2f4>)
100427b8:	781b      	ldrb	r3, [r3, #0]
100427ba:	1c1a      	adds	r2, r3, #0
100427bc:	0092      	lsls	r2, r2, #2
100427be:	18d3      	adds	r3, r2, r3
100427c0:	18db      	adds	r3, r3, r3
100427c2:	b2da      	uxtb	r2, r3
100427c4:	4b5e      	ldr	r3, [pc, #376]	@ (10042940 <main+0x2f8>)
100427c6:	705a      	strb	r2, [r3, #1]
				for (uint8_t i = 2, j = 0; j + 1 < MAX_BEACON_COUNT; j++) {
100427c8:	230e      	movs	r3, #14
100427ca:	18fb      	adds	r3, r7, r3
100427cc:	2202      	movs	r2, #2
100427ce:	701a      	strb	r2, [r3, #0]
100427d0:	230d      	movs	r3, #13
100427d2:	18fb      	adds	r3, r7, r3
100427d4:	2200      	movs	r2, #0
100427d6:	701a      	strb	r2, [r3, #0]
100427d8:	e07e      	b.n	100428d8 <main+0x290>
					if (distance_to_beacon[j] != 0 && beacon_ID[j] != 0) {
100427da:	200d      	movs	r0, #13
100427dc:	183b      	adds	r3, r7, r0
100427de:	781b      	ldrb	r3, [r3, #0]
100427e0:	4a58      	ldr	r2, [pc, #352]	@ (10042944 <main+0x2fc>)
100427e2:	00db      	lsls	r3, r3, #3
100427e4:	18d3      	adds	r3, r2, r3
100427e6:	681a      	ldr	r2, [r3, #0]
100427e8:	685b      	ldr	r3, [r3, #4]
100427ea:	0011      	movs	r1, r2
100427ec:	4319      	orrs	r1, r3
100427ee:	d06d      	beq.n	100428cc <main+0x284>
100427f0:	183b      	adds	r3, r7, r0
100427f2:	781b      	ldrb	r3, [r3, #0]
100427f4:	4a50      	ldr	r2, [pc, #320]	@ (10042938 <main+0x2f0>)
100427f6:	00db      	lsls	r3, r3, #3
100427f8:	18d3      	adds	r3, r2, r3
100427fa:	681a      	ldr	r2, [r3, #0]
100427fc:	685b      	ldr	r3, [r3, #4]
100427fe:	0011      	movs	r1, r2
10042800:	4319      	orrs	r1, r3
10042802:	d063      	beq.n	100428cc <main+0x284>
						uint8_t uuid[8];
						split_from_uint64(beacon_ID[j], uuid);
10042804:	183b      	adds	r3, r7, r0
10042806:	781b      	ldrb	r3, [r3, #0]
10042808:	4a4b      	ldr	r2, [pc, #300]	@ (10042938 <main+0x2f0>)
1004280a:	00db      	lsls	r3, r3, #3
1004280c:	18d3      	adds	r3, r2, r3
1004280e:	6818      	ldr	r0, [r3, #0]
10042810:	6859      	ldr	r1, [r3, #4]
10042812:	003b      	movs	r3, r7
10042814:	001a      	movs	r2, r3
10042816:	f000 fa43 	bl	10042ca0 <split_from_uint64>
						for (uint8_t k = i, l = 0; k < i + 8; k++, l++) {
1004281a:	230c      	movs	r3, #12
1004281c:	18fb      	adds	r3, r7, r3
1004281e:	220e      	movs	r2, #14
10042820:	18ba      	adds	r2, r7, r2
10042822:	7812      	ldrb	r2, [r2, #0]
10042824:	701a      	strb	r2, [r3, #0]
10042826:	230b      	movs	r3, #11
10042828:	18fb      	adds	r3, r7, r3
1004282a:	2200      	movs	r2, #0
1004282c:	701a      	strb	r2, [r3, #0]
1004282e:	e013      	b.n	10042858 <main+0x210>
							receivedDistanceData[k] = uuid[l];
10042830:	200b      	movs	r0, #11
10042832:	183b      	adds	r3, r7, r0
10042834:	781a      	ldrb	r2, [r3, #0]
10042836:	240c      	movs	r4, #12
10042838:	193b      	adds	r3, r7, r4
1004283a:	781b      	ldrb	r3, [r3, #0]
1004283c:	0039      	movs	r1, r7
1004283e:	5c89      	ldrb	r1, [r1, r2]
10042840:	4a3f      	ldr	r2, [pc, #252]	@ (10042940 <main+0x2f8>)
10042842:	54d1      	strb	r1, [r2, r3]
						for (uint8_t k = i, l = 0; k < i + 8; k++, l++) {
10042844:	193b      	adds	r3, r7, r4
10042846:	781a      	ldrb	r2, [r3, #0]
10042848:	193b      	adds	r3, r7, r4
1004284a:	3201      	adds	r2, #1
1004284c:	701a      	strb	r2, [r3, #0]
1004284e:	183b      	adds	r3, r7, r0
10042850:	781a      	ldrb	r2, [r3, #0]
10042852:	183b      	adds	r3, r7, r0
10042854:	3201      	adds	r2, #1
10042856:	701a      	strb	r2, [r3, #0]
10042858:	250e      	movs	r5, #14
1004285a:	197b      	adds	r3, r7, r5
1004285c:	781b      	ldrb	r3, [r3, #0]
1004285e:	1dda      	adds	r2, r3, #7
10042860:	230c      	movs	r3, #12
10042862:	18fb      	adds	r3, r7, r3
10042864:	781b      	ldrb	r3, [r3, #0]
10042866:	429a      	cmp	r2, r3
10042868:	dae2      	bge.n	10042830 <main+0x1e8>
						}
						receivedDistanceData[i + 8] =
								(uint8_t) distance_to_beacon[j] / 100;
1004286a:	260d      	movs	r6, #13
1004286c:	19bb      	adds	r3, r7, r6
1004286e:	781b      	ldrb	r3, [r3, #0]
10042870:	4a34      	ldr	r2, [pc, #208]	@ (10042944 <main+0x2fc>)
10042872:	00db      	lsls	r3, r3, #3
10042874:	18d3      	adds	r3, r2, r3
10042876:	681a      	ldr	r2, [r3, #0]
10042878:	685b      	ldr	r3, [r3, #4]
1004287a:	b2d2      	uxtb	r2, r2
						receivedDistanceData[i + 8] =
1004287c:	197b      	adds	r3, r7, r5
1004287e:	781b      	ldrb	r3, [r3, #0]
10042880:	3308      	adds	r3, #8
10042882:	001c      	movs	r4, r3
10042884:	2164      	movs	r1, #100	@ 0x64
10042886:	0010      	movs	r0, r2
10042888:	f7fd fc58 	bl	1004013c <__udivsi3>
1004288c:	0003      	movs	r3, r0
1004288e:	b2da      	uxtb	r2, r3
10042890:	4b2b      	ldr	r3, [pc, #172]	@ (10042940 <main+0x2f8>)
10042892:	551a      	strb	r2, [r3, r4]
						receivedDistanceData[i + 9] = distance_to_beacon[j]
10042894:	19bb      	adds	r3, r7, r6
10042896:	781b      	ldrb	r3, [r3, #0]
10042898:	4a2a      	ldr	r2, [pc, #168]	@ (10042944 <main+0x2fc>)
1004289a:	00db      	lsls	r3, r3, #3
1004289c:	18d3      	adds	r3, r2, r3
1004289e:	681a      	ldr	r2, [r3, #0]
100428a0:	685b      	ldr	r3, [r3, #4]
								- (receivedDistanceData[i + 8] * 100);
100428a2:	b2d1      	uxtb	r1, r2
100428a4:	197b      	adds	r3, r7, r5
100428a6:	781b      	ldrb	r3, [r3, #0]
100428a8:	3308      	adds	r3, #8
100428aa:	4a25      	ldr	r2, [pc, #148]	@ (10042940 <main+0x2f8>)
100428ac:	5cd3      	ldrb	r3, [r2, r3]
100428ae:	2264      	movs	r2, #100	@ 0x64
100428b0:	4353      	muls	r3, r2
100428b2:	b2da      	uxtb	r2, r3
						receivedDistanceData[i + 9] = distance_to_beacon[j]
100428b4:	197b      	adds	r3, r7, r5
100428b6:	781b      	ldrb	r3, [r3, #0]
100428b8:	3309      	adds	r3, #9
								- (receivedDistanceData[i + 8] * 100);
100428ba:	1a8a      	subs	r2, r1, r2
100428bc:	b2d1      	uxtb	r1, r2
						receivedDistanceData[i + 9] = distance_to_beacon[j]
100428be:	4a20      	ldr	r2, [pc, #128]	@ (10042940 <main+0x2f8>)
100428c0:	54d1      	strb	r1, [r2, r3]
						i += 10;
100428c2:	197b      	adds	r3, r7, r5
100428c4:	197a      	adds	r2, r7, r5
100428c6:	7812      	ldrb	r2, [r2, #0]
100428c8:	320a      	adds	r2, #10
100428ca:	701a      	strb	r2, [r3, #0]
				for (uint8_t i = 2, j = 0; j + 1 < MAX_BEACON_COUNT; j++) {
100428cc:	210d      	movs	r1, #13
100428ce:	187b      	adds	r3, r7, r1
100428d0:	781a      	ldrb	r2, [r3, #0]
100428d2:	187b      	adds	r3, r7, r1
100428d4:	3201      	adds	r2, #1
100428d6:	701a      	strb	r2, [r3, #0]
100428d8:	230d      	movs	r3, #13
100428da:	18fb      	adds	r3, r7, r3
100428dc:	781b      	ldrb	r3, [r3, #0]
100428de:	2b26      	cmp	r3, #38	@ 0x26
100428e0:	d800      	bhi.n	100428e4 <main+0x29c>
100428e2:	e77a      	b.n	100427da <main+0x192>
					}
				}
				HAL_RADIO_SendPacketWithAck(SERVER_CHANNEL,
100428e4:	4811      	ldr	r0, [pc, #68]	@ (1004292c <main+0x2e4>)
100428e6:	4a16      	ldr	r2, [pc, #88]	@ (10042940 <main+0x2f8>)
100428e8:	23c8      	movs	r3, #200	@ 0xc8
100428ea:	0059      	lsls	r1, r3, #1
100428ec:	4b10      	ldr	r3, [pc, #64]	@ (10042930 <main+0x2e8>)
100428ee:	9302      	str	r3, [sp, #8]
100428f0:	23ff      	movs	r3, #255	@ 0xff
100428f2:	9301      	str	r3, [sp, #4]
100428f4:	4b0f      	ldr	r3, [pc, #60]	@ (10042934 <main+0x2ec>)
100428f6:	9300      	str	r3, [sp, #0]
100428f8:	0003      	movs	r3, r0
100428fa:	2000      	movs	r0, #0
100428fc:	f003 fca6 	bl	1004624c <HAL_RADIO_SendPacketWithAck>
				TX_WAKEUP_TIME, receivedDistanceData, receivedData,
				RX_TIMEOUT_ACK,
				MAX_LL_PACKET_LENGTH, HAL_RADIO_Callback);
				HAL_Delay(40);
10042900:	2028      	movs	r0, #40	@ 0x28
10042902:	f001 ffe3 	bl	100448cc <HAL_Delay>
				HAL_RADIO_TIMER_Tick();
10042906:	f004 f875 	bl	100469f4 <HAL_RADIO_TIMER_Tick>
		HAL_RADIO_TIMER_Tick();
1004290a:	e6f7      	b.n	100426fc <main+0xb4>
1004290c:	20000af4 	.word	0x20000af4
10042910:	20000b0c 	.word	0x20000b0c
10042914:	2000017c 	.word	0x2000017c
10042918:	10001ef0 	.word	0x10001ef0
1004291c:	20000274 	.word	0x20000274
10042920:	88df88df 	.word	0x88df88df
10042924:	2000057d 	.word	0x2000057d
10042928:	2000057f 	.word	0x2000057f
1004292c:	20000378 	.word	0x20000378
10042930:	10045891 	.word	0x10045891
10042934:	00009c40 	.word	0x00009c40
10042938:	20000580 	.word	0x20000580
1004293c:	2000057e 	.word	0x2000057e
10042940:	2000047c 	.word	0x2000047c
10042944:	200006c0 	.word	0x200006c0

10042948 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
10042948:	b590      	push	{r4, r7, lr}
1004294a:	b089      	sub	sp, #36	@ 0x24
1004294c:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
1004294e:	2408      	movs	r4, #8
10042950:	193b      	adds	r3, r7, r4
10042952:	0018      	movs	r0, r3
10042954:	2318      	movs	r3, #24
10042956:	001a      	movs	r2, r3
10042958:	2100      	movs	r1, #0
1004295a:	f007 fb0f 	bl	10049f7c <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
1004295e:	003b      	movs	r3, r7
10042960:	0018      	movs	r0, r3
10042962:	2308      	movs	r3, #8
10042964:	001a      	movs	r2, r3
10042966:	2100      	movs	r1, #0
10042968:	f007 fb08 	bl	10049f7c <memset>

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE
1004296c:	193b      	adds	r3, r7, r4
1004296e:	2203      	movs	r2, #3
10042970:	601a      	str	r2, [r3, #0]
			| RCC_OSCILLATORTYPE_LSE;
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
10042972:	193b      	adds	r3, r7, r4
10042974:	2280      	movs	r2, #128	@ 0x80
10042976:	0252      	lsls	r2, r2, #9
10042978:	605a      	str	r2, [r3, #4]
	RCC_OscInitStruct.LSEState = RCC_LSE_ON;
1004297a:	193b      	adds	r3, r7, r4
1004297c:	2210      	movs	r2, #16
1004297e:	60da      	str	r2, [r3, #12]
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
10042980:	193b      	adds	r3, r7, r4
10042982:	0018      	movs	r0, r3
10042984:	f005 fd0a 	bl	1004839c <HAL_RCC_OscConfig>
10042988:	1e03      	subs	r3, r0, #0
1004298a:	d001      	beq.n	10042990 <SystemClock_Config+0x48>
		Error_Handler();
1004298c:	f000 fb20 	bl	10042fd0 <Error_Handler>
	}

	/** Configure the SYSCLKSource and SYSCLKDivider
	 */
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_RC64MPLL;
10042990:	003b      	movs	r3, r7
10042992:	2200      	movs	r2, #0
10042994:	601a      	str	r2, [r3, #0]
	RCC_ClkInitStruct.SYSCLKDivider = RCC_RC64MPLL_DIV2;
10042996:	003b      	movs	r3, r7
10042998:	2220      	movs	r2, #32
1004299a:	605a      	str	r2, [r3, #4]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_WAIT_STATES_0)
1004299c:	003b      	movs	r3, r7
1004299e:	2100      	movs	r1, #0
100429a0:	0018      	movs	r0, r3
100429a2:	f005 fe4b 	bl	1004863c <HAL_RCC_ClockConfig>
100429a6:	1e03      	subs	r3, r0, #0
100429a8:	d001      	beq.n	100429ae <SystemClock_Config+0x66>
			!= HAL_OK) {
		Error_Handler();
100429aa:	f000 fb11 	bl	10042fd0 <Error_Handler>
	}
}
100429ae:	46c0      	nop			@ (mov r8, r8)
100429b0:	46bd      	mov	sp, r7
100429b2:	b009      	add	sp, #36	@ 0x24
100429b4:	bd90      	pop	{r4, r7, pc}

100429b6 <PeriphCommonClock_Config>:

/**
 * @brief Peripherals Common Clock Configuration
 * @retval None
 */
void PeriphCommonClock_Config(void) {
100429b6:	b580      	push	{r7, lr}
100429b8:	b086      	sub	sp, #24
100429ba:	af00      	add	r7, sp, #0
	RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = { 0 };
100429bc:	003b      	movs	r3, r7
100429be:	0018      	movs	r0, r3
100429c0:	2318      	movs	r3, #24
100429c2:	001a      	movs	r2, r3
100429c4:	2100      	movs	r1, #0
100429c6:	f007 fad9 	bl	10049f7c <memset>

	/** Initializes the peripherals clock
	 */
	PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS;
100429ca:	003b      	movs	r3, r7
100429cc:	2202      	movs	r2, #2
100429ce:	601a      	str	r2, [r3, #0]
	PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLK_DIV4;
100429d0:	003b      	movs	r3, r7
100429d2:	2280      	movs	r2, #128	@ 0x80
100429d4:	0152      	lsls	r2, r2, #5
100429d6:	615a      	str	r2, [r3, #20]

	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK) {
100429d8:	003b      	movs	r3, r7
100429da:	0018      	movs	r0, r3
100429dc:	f005 ff50 	bl	10048880 <HAL_RCCEx_PeriphCLKConfig>
100429e0:	1e03      	subs	r3, r0, #0
100429e2:	d001      	beq.n	100429e8 <PeriphCommonClock_Config+0x32>
		Error_Handler();
100429e4:	f000 faf4 	bl	10042fd0 <Error_Handler>
	}
}
100429e8:	46c0      	nop			@ (mov r8, r8)
100429ea:	46bd      	mov	sp, r7
100429ec:	b006      	add	sp, #24
100429ee:	bd80      	pop	{r7, pc}

100429f0 <MX_RADIO_Init>:
/**
 * @brief RADIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_RADIO_Init(void) {
100429f0:	b580      	push	{r7, lr}
100429f2:	b082      	sub	sp, #8
100429f4:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN RADIO_Init 0 */

	/* USER CODE END RADIO_Init 0 */

	RADIO_HandleTypeDef hradio = { 0 };
100429f6:	2300      	movs	r3, #0
100429f8:	607b      	str	r3, [r7, #4]

	/* USER CODE BEGIN RADIO_Init 1 */

	/* USER CODE END RADIO_Init 1 */
	hradio.Instance = RADIO;
100429fa:	23c0      	movs	r3, #192	@ 0xc0
100429fc:	05db      	lsls	r3, r3, #23
100429fe:	607b      	str	r3, [r7, #4]
	HAL_RADIO_Init(&hradio);
10042a00:	1d3b      	adds	r3, r7, #4
10042a02:	0018      	movs	r0, r3
10042a04:	f002 fc0c 	bl	10045220 <HAL_RADIO_Init>
	/* USER CODE BEGIN RADIO_Init 2 */

	/* USER CODE END RADIO_Init 2 */

}
10042a08:	46c0      	nop			@ (mov r8, r8)
10042a0a:	46bd      	mov	sp, r7
10042a0c:	b002      	add	sp, #8
10042a0e:	bd80      	pop	{r7, pc}

10042a10 <MX_RADIO_TIMER_Init>:
/**
 * @brief RADIO_TIMER Initialization Function
 * @param None
 * @retval None
 */
static void MX_RADIO_TIMER_Init(void) {
10042a10:	b580      	push	{r7, lr}
10042a12:	b082      	sub	sp, #8
10042a14:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN RADIO_TIMER_Init 0 */

	/* USER CODE END RADIO_TIMER_Init 0 */

	RADIO_TIMER_InitTypeDef RADIO_TIMER_InitStruct = { 0 };
10042a16:	003b      	movs	r3, r7
10042a18:	0018      	movs	r0, r3
10042a1a:	2308      	movs	r3, #8
10042a1c:	001a      	movs	r2, r3
10042a1e:	2100      	movs	r1, #0
10042a20:	f007 faac 	bl	10049f7c <memset>

	/* USER CODE BEGIN RADIO_TIMER_Init 1 */

	/* USER CODE END RADIO_TIMER_Init 1 */

	if (__HAL_RCC_RADIO_IS_CLK_DISABLED()) {
10042a24:	2001      	movs	r0, #1
10042a26:	f7ff fdd9 	bl	100425dc <LL_APB2_GRP1_IsEnabledClock>
10042a2a:	1e03      	subs	r3, r0, #0
10042a2c:	d108      	bne.n	10042a40 <MX_RADIO_TIMER_Init+0x30>
		/* Radio Peripheral reset */
		__HAL_RCC_RADIO_FORCE_RESET();
10042a2e:	2001      	movs	r0, #1
10042a30:	f7ff fde8 	bl	10042604 <LL_APB2_GRP1_ForceReset>
		__HAL_RCC_RADIO_RELEASE_RESET();
10042a34:	2001      	movs	r0, #1
10042a36:	f7ff fdf5 	bl	10042624 <LL_APB2_GRP1_ReleaseReset>

		/* Enable Radio peripheral clock */
		__HAL_RCC_RADIO_CLK_ENABLE();
10042a3a:	2001      	movs	r0, #1
10042a3c:	f7ff fdb8 	bl	100425b0 <LL_APB2_GRP1_EnableClock>
	}
	/* Wait to be sure that the Radio Timer is active */
	while (LL_RADIO_TIMER_GetAbsoluteTime(WAKEUP) < 0x10)
10042a40:	46c0      	nop			@ (mov r8, r8)
10042a42:	4b0c      	ldr	r3, [pc, #48]	@ (10042a74 <MX_RADIO_TIMER_Init+0x64>)
10042a44:	0018      	movs	r0, r3
10042a46:	f7ff fd93 	bl	10042570 <LL_RADIO_TIMER_GetAbsoluteTime>
10042a4a:	0003      	movs	r3, r0
10042a4c:	2b0f      	cmp	r3, #15
10042a4e:	d9f8      	bls.n	10042a42 <MX_RADIO_TIMER_Init+0x32>
		;
	RADIO_TIMER_InitStruct.XTAL_StartupTime = 320;
10042a50:	003b      	movs	r3, r7
10042a52:	22a0      	movs	r2, #160	@ 0xa0
10042a54:	0052      	lsls	r2, r2, #1
10042a56:	801a      	strh	r2, [r3, #0]
	RADIO_TIMER_InitStruct.enableInitialCalibration = FALSE;
10042a58:	003b      	movs	r3, r7
10042a5a:	2200      	movs	r2, #0
10042a5c:	709a      	strb	r2, [r3, #2]
	RADIO_TIMER_InitStruct.periodicCalibrationInterval = 0;
10042a5e:	003b      	movs	r3, r7
10042a60:	2200      	movs	r2, #0
10042a62:	605a      	str	r2, [r3, #4]
	HAL_RADIO_TIMER_Init(&RADIO_TIMER_InitStruct);
10042a64:	003b      	movs	r3, r7
10042a66:	0018      	movs	r0, r3
10042a68:	f003 feb4 	bl	100467d4 <HAL_RADIO_TIMER_Init>
	/* USER CODE BEGIN RADIO_TIMER_Init 2 */

	/* USER CODE END RADIO_TIMER_Init 2 */

}
10042a6c:	46c0      	nop			@ (mov r8, r8)
10042a6e:	46bd      	mov	sp, r7
10042a70:	b002      	add	sp, #8
10042a72:	bd80      	pop	{r7, pc}
10042a74:	60001800 	.word	0x60001800

10042a78 <MX_SPI2_Init>:
/**
 * @brief SPI2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI2_Init(void) {
10042a78:	b580      	push	{r7, lr}
10042a7a:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI2_Init 1 */

	/* USER CODE END SPI2_Init 1 */
	/* SPI2 parameter configuration*/
	hspi2.Instance = SPI2;
10042a7c:	4b1b      	ldr	r3, [pc, #108]	@ (10042aec <MX_SPI2_Init+0x74>)
10042a7e:	4a1c      	ldr	r2, [pc, #112]	@ (10042af0 <MX_SPI2_Init+0x78>)
10042a80:	601a      	str	r2, [r3, #0]
	hspi2.Init.Mode = SPI_MODE_MASTER;
10042a82:	4b1a      	ldr	r3, [pc, #104]	@ (10042aec <MX_SPI2_Init+0x74>)
10042a84:	2282      	movs	r2, #130	@ 0x82
10042a86:	0052      	lsls	r2, r2, #1
10042a88:	605a      	str	r2, [r3, #4]
	hspi2.Init.Direction = SPI_DIRECTION_2LINES;
10042a8a:	4b18      	ldr	r3, [pc, #96]	@ (10042aec <MX_SPI2_Init+0x74>)
10042a8c:	2200      	movs	r2, #0
10042a8e:	609a      	str	r2, [r3, #8]
	hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
10042a90:	4b16      	ldr	r3, [pc, #88]	@ (10042aec <MX_SPI2_Init+0x74>)
10042a92:	22e0      	movs	r2, #224	@ 0xe0
10042a94:	00d2      	lsls	r2, r2, #3
10042a96:	60da      	str	r2, [r3, #12]
	hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
10042a98:	4b14      	ldr	r3, [pc, #80]	@ (10042aec <MX_SPI2_Init+0x74>)
10042a9a:	2200      	movs	r2, #0
10042a9c:	611a      	str	r2, [r3, #16]
	hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
10042a9e:	4b13      	ldr	r3, [pc, #76]	@ (10042aec <MX_SPI2_Init+0x74>)
10042aa0:	2200      	movs	r2, #0
10042aa2:	615a      	str	r2, [r3, #20]
	hspi2.Init.NSS = SPI_NSS_SOFT;
10042aa4:	4b11      	ldr	r3, [pc, #68]	@ (10042aec <MX_SPI2_Init+0x74>)
10042aa6:	2280      	movs	r2, #128	@ 0x80
10042aa8:	0092      	lsls	r2, r2, #2
10042aaa:	619a      	str	r2, [r3, #24]
	hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
10042aac:	4b0f      	ldr	r3, [pc, #60]	@ (10042aec <MX_SPI2_Init+0x74>)
10042aae:	2218      	movs	r2, #24
10042ab0:	61da      	str	r2, [r3, #28]
	hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
10042ab2:	4b0e      	ldr	r3, [pc, #56]	@ (10042aec <MX_SPI2_Init+0x74>)
10042ab4:	2200      	movs	r2, #0
10042ab6:	621a      	str	r2, [r3, #32]
	hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
10042ab8:	4b0c      	ldr	r3, [pc, #48]	@ (10042aec <MX_SPI2_Init+0x74>)
10042aba:	2200      	movs	r2, #0
10042abc:	625a      	str	r2, [r3, #36]	@ 0x24
	hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
10042abe:	4b0b      	ldr	r3, [pc, #44]	@ (10042aec <MX_SPI2_Init+0x74>)
10042ac0:	2200      	movs	r2, #0
10042ac2:	629a      	str	r2, [r3, #40]	@ 0x28
	hspi2.Init.CRCPolynomial = 7;
10042ac4:	4b09      	ldr	r3, [pc, #36]	@ (10042aec <MX_SPI2_Init+0x74>)
10042ac6:	2207      	movs	r2, #7
10042ac8:	62da      	str	r2, [r3, #44]	@ 0x2c
	hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
10042aca:	4b08      	ldr	r3, [pc, #32]	@ (10042aec <MX_SPI2_Init+0x74>)
10042acc:	2200      	movs	r2, #0
10042ace:	631a      	str	r2, [r3, #48]	@ 0x30
	hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
10042ad0:	4b06      	ldr	r3, [pc, #24]	@ (10042aec <MX_SPI2_Init+0x74>)
10042ad2:	2208      	movs	r2, #8
10042ad4:	635a      	str	r2, [r3, #52]	@ 0x34
	if (HAL_SPI_Init(&hspi2) != HAL_OK) {
10042ad6:	4b05      	ldr	r3, [pc, #20]	@ (10042aec <MX_SPI2_Init+0x74>)
10042ad8:	0018      	movs	r0, r3
10042ada:	f005 ff0d 	bl	100488f8 <HAL_SPI_Init>
10042ade:	1e03      	subs	r3, r0, #0
10042ae0:	d001      	beq.n	10042ae6 <MX_SPI2_Init+0x6e>
		Error_Handler();
10042ae2:	f000 fa75 	bl	10042fd0 <Error_Handler>
	}
	/* USER CODE BEGIN SPI2_Init 2 */

	/* USER CODE END SPI2_Init 2 */

}
10042ae6:	46c0      	nop			@ (mov r8, r8)
10042ae8:	46bd      	mov	sp, r7
10042aea:	bd80      	pop	{r7, pc}
10042aec:	2000017c 	.word	0x2000017c
10042af0:	41003000 	.word	0x41003000

10042af4 <MX_USART1_UART_Init>:
/**
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void) {
10042af4:	b580      	push	{r7, lr}
10042af6:	af00      	add	r7, sp, #0
	/* USER CODE END USART1_Init 0 */

	/* USER CODE BEGIN USART1_Init 1 */

	/* USER CODE END USART1_Init 1 */
	huart1.Instance = USART1;
10042af8:	4b23      	ldr	r3, [pc, #140]	@ (10042b88 <MX_USART1_UART_Init+0x94>)
10042afa:	4a24      	ldr	r2, [pc, #144]	@ (10042b8c <MX_USART1_UART_Init+0x98>)
10042afc:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 115200;
10042afe:	4b22      	ldr	r3, [pc, #136]	@ (10042b88 <MX_USART1_UART_Init+0x94>)
10042b00:	22e1      	movs	r2, #225	@ 0xe1
10042b02:	0252      	lsls	r2, r2, #9
10042b04:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
10042b06:	4b20      	ldr	r3, [pc, #128]	@ (10042b88 <MX_USART1_UART_Init+0x94>)
10042b08:	2200      	movs	r2, #0
10042b0a:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
10042b0c:	4b1e      	ldr	r3, [pc, #120]	@ (10042b88 <MX_USART1_UART_Init+0x94>)
10042b0e:	2200      	movs	r2, #0
10042b10:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
10042b12:	4b1d      	ldr	r3, [pc, #116]	@ (10042b88 <MX_USART1_UART_Init+0x94>)
10042b14:	2200      	movs	r2, #0
10042b16:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
10042b18:	4b1b      	ldr	r3, [pc, #108]	@ (10042b88 <MX_USART1_UART_Init+0x94>)
10042b1a:	220c      	movs	r2, #12
10042b1c:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
10042b1e:	4b1a      	ldr	r3, [pc, #104]	@ (10042b88 <MX_USART1_UART_Init+0x94>)
10042b20:	2200      	movs	r2, #0
10042b22:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
10042b24:	4b18      	ldr	r3, [pc, #96]	@ (10042b88 <MX_USART1_UART_Init+0x94>)
10042b26:	2200      	movs	r2, #0
10042b28:	61da      	str	r2, [r3, #28]
	huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
10042b2a:	4b17      	ldr	r3, [pc, #92]	@ (10042b88 <MX_USART1_UART_Init+0x94>)
10042b2c:	2200      	movs	r2, #0
10042b2e:	621a      	str	r2, [r3, #32]
	huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
10042b30:	4b15      	ldr	r3, [pc, #84]	@ (10042b88 <MX_USART1_UART_Init+0x94>)
10042b32:	2200      	movs	r2, #0
10042b34:	625a      	str	r2, [r3, #36]	@ 0x24
	huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
10042b36:	4b14      	ldr	r3, [pc, #80]	@ (10042b88 <MX_USART1_UART_Init+0x94>)
10042b38:	2200      	movs	r2, #0
10042b3a:	629a      	str	r2, [r3, #40]	@ 0x28
	if (HAL_UART_Init(&huart1) != HAL_OK) {
10042b3c:	4b12      	ldr	r3, [pc, #72]	@ (10042b88 <MX_USART1_UART_Init+0x94>)
10042b3e:	0018      	movs	r0, r3
10042b40:	f005 ff92 	bl	10048a68 <HAL_UART_Init>
10042b44:	1e03      	subs	r3, r0, #0
10042b46:	d001      	beq.n	10042b4c <MX_USART1_UART_Init+0x58>
		Error_Handler();
10042b48:	f000 fa42 	bl	10042fd0 <Error_Handler>
	}
	if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8)
10042b4c:	4b0e      	ldr	r3, [pc, #56]	@ (10042b88 <MX_USART1_UART_Init+0x94>)
10042b4e:	2100      	movs	r1, #0
10042b50:	0018      	movs	r0, r3
10042b52:	f006 fbb3 	bl	100492bc <HAL_UARTEx_SetTxFifoThreshold>
10042b56:	1e03      	subs	r3, r0, #0
10042b58:	d001      	beq.n	10042b5e <MX_USART1_UART_Init+0x6a>
			!= HAL_OK) {
		Error_Handler();
10042b5a:	f000 fa39 	bl	10042fd0 <Error_Handler>
	}
	if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8)
10042b5e:	4b0a      	ldr	r3, [pc, #40]	@ (10042b88 <MX_USART1_UART_Init+0x94>)
10042b60:	2100      	movs	r1, #0
10042b62:	0018      	movs	r0, r3
10042b64:	f006 fbea 	bl	1004933c <HAL_UARTEx_SetRxFifoThreshold>
10042b68:	1e03      	subs	r3, r0, #0
10042b6a:	d001      	beq.n	10042b70 <MX_USART1_UART_Init+0x7c>
			!= HAL_OK) {
		Error_Handler();
10042b6c:	f000 fa30 	bl	10042fd0 <Error_Handler>
	}
	if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK) {
10042b70:	4b05      	ldr	r3, [pc, #20]	@ (10042b88 <MX_USART1_UART_Init+0x94>)
10042b72:	0018      	movs	r0, r3
10042b74:	f006 fb68 	bl	10049248 <HAL_UARTEx_DisableFifoMode>
10042b78:	1e03      	subs	r3, r0, #0
10042b7a:	d001      	beq.n	10042b80 <MX_USART1_UART_Init+0x8c>
		Error_Handler();
10042b7c:	f000 fa28 	bl	10042fd0 <Error_Handler>
	}
	/* USER CODE BEGIN USART1_Init 2 */

	/* USER CODE END USART1_Init 2 */

}
10042b80:	46c0      	nop			@ (mov r8, r8)
10042b82:	46bd      	mov	sp, r7
10042b84:	bd80      	pop	{r7, pc}
10042b86:	46c0      	nop			@ (mov r8, r8)
10042b88:	200001e0 	.word	0x200001e0
10042b8c:	41004000 	.word	0x41004000

10042b90 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
10042b90:	b580      	push	{r7, lr}
10042b92:	b086      	sub	sp, #24
10042b94:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
10042b96:	1d3b      	adds	r3, r7, #4
10042b98:	0018      	movs	r0, r3
10042b9a:	2314      	movs	r3, #20
10042b9c:	001a      	movs	r2, r3
10042b9e:	2100      	movs	r1, #0
10042ba0:	f007 f9ec 	bl	10049f7c <memset>
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOA_CLK_ENABLE();
10042ba4:	2004      	movs	r0, #4
10042ba6:	f7ff fced 	bl	10042584 <LL_AHB1_GRP1_EnableClock>
	__HAL_RCC_GPIOB_CLK_ENABLE();
10042baa:	2008      	movs	r0, #8
10042bac:	f7ff fcea 	bl	10042584 <LL_AHB1_GRP1_EnableClock>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
10042bb0:	2390      	movs	r3, #144	@ 0x90
10042bb2:	05db      	lsls	r3, r3, #23
10042bb4:	2200      	movs	r2, #0
10042bb6:	2110      	movs	r1, #16
10042bb8:	0018      	movs	r0, r3
10042bba:	f002 f932 	bl	10044e22 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_RESET);
10042bbe:	2380      	movs	r3, #128	@ 0x80
10042bc0:	00db      	lsls	r3, r3, #3
10042bc2:	4835      	ldr	r0, [pc, #212]	@ (10042c98 <MX_GPIO_Init+0x108>)
10042bc4:	2200      	movs	r2, #0
10042bc6:	0019      	movs	r1, r3
10042bc8:	f002 f92b 	bl	10044e22 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : PA2 */
	GPIO_InitStruct.Pin = GPIO_PIN_2;
10042bcc:	1d3b      	adds	r3, r7, #4
10042bce:	2204      	movs	r2, #4
10042bd0:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
10042bd2:	1d3b      	adds	r3, r7, #4
10042bd4:	2202      	movs	r2, #2
10042bd6:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
10042bd8:	1d3b      	adds	r3, r7, #4
10042bda:	2201      	movs	r2, #1
10042bdc:	609a      	str	r2, [r3, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
10042bde:	1d3b      	adds	r3, r7, #4
10042be0:	2200      	movs	r2, #0
10042be2:	60da      	str	r2, [r3, #12]
	GPIO_InitStruct.Alternate = GPIO_AF5_SWDIO;
10042be4:	1d3b      	adds	r3, r7, #4
10042be6:	2205      	movs	r2, #5
10042be8:	611a      	str	r2, [r3, #16]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
10042bea:	1d3a      	adds	r2, r7, #4
10042bec:	2390      	movs	r3, #144	@ 0x90
10042bee:	05db      	lsls	r3, r3, #23
10042bf0:	0011      	movs	r1, r2
10042bf2:	0018      	movs	r0, r3
10042bf4:	f001 ff6c 	bl	10044ad0 <HAL_GPIO_Init>

	/*Configure GPIO pin : PA4 */
	GPIO_InitStruct.Pin = GPIO_PIN_4;
10042bf8:	1d3b      	adds	r3, r7, #4
10042bfa:	2210      	movs	r2, #16
10042bfc:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
10042bfe:	1d3b      	adds	r3, r7, #4
10042c00:	2201      	movs	r2, #1
10042c02:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
10042c04:	1d3b      	adds	r3, r7, #4
10042c06:	2200      	movs	r2, #0
10042c08:	609a      	str	r2, [r3, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
10042c0a:	1d3b      	adds	r3, r7, #4
10042c0c:	2200      	movs	r2, #0
10042c0e:	60da      	str	r2, [r3, #12]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
10042c10:	1d3a      	adds	r2, r7, #4
10042c12:	2390      	movs	r3, #144	@ 0x90
10042c14:	05db      	lsls	r3, r3, #23
10042c16:	0011      	movs	r1, r2
10042c18:	0018      	movs	r0, r3
10042c1a:	f001 ff59 	bl	10044ad0 <HAL_GPIO_Init>

	/*Configure GPIO pin : PB10 */
	GPIO_InitStruct.Pin = GPIO_PIN_10;
10042c1e:	1d3b      	adds	r3, r7, #4
10042c20:	2280      	movs	r2, #128	@ 0x80
10042c22:	00d2      	lsls	r2, r2, #3
10042c24:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
10042c26:	1d3b      	adds	r3, r7, #4
10042c28:	2201      	movs	r2, #1
10042c2a:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
10042c2c:	1d3b      	adds	r3, r7, #4
10042c2e:	2200      	movs	r2, #0
10042c30:	609a      	str	r2, [r3, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
10042c32:	1d3b      	adds	r3, r7, #4
10042c34:	2200      	movs	r2, #0
10042c36:	60da      	str	r2, [r3, #12]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
10042c38:	1d3b      	adds	r3, r7, #4
10042c3a:	4a17      	ldr	r2, [pc, #92]	@ (10042c98 <MX_GPIO_Init+0x108>)
10042c3c:	0019      	movs	r1, r3
10042c3e:	0010      	movs	r0, r2
10042c40:	f001 ff46 	bl	10044ad0 <HAL_GPIO_Init>

	/*Configure GPIO pin : PB5 */
	GPIO_InitStruct.Pin = GPIO_PIN_5;
10042c44:	1d3b      	adds	r3, r7, #4
10042c46:	2220      	movs	r2, #32
10042c48:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
10042c4a:	1d3b      	adds	r3, r7, #4
10042c4c:	2280      	movs	r2, #128	@ 0x80
10042c4e:	0252      	lsls	r2, r2, #9
10042c50:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
10042c52:	1d3b      	adds	r3, r7, #4
10042c54:	2201      	movs	r2, #1
10042c56:	609a      	str	r2, [r3, #8]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
10042c58:	1d3b      	adds	r3, r7, #4
10042c5a:	4a0f      	ldr	r2, [pc, #60]	@ (10042c98 <MX_GPIO_Init+0x108>)
10042c5c:	0019      	movs	r1, r3
10042c5e:	0010      	movs	r0, r2
10042c60:	f001 ff36 	bl	10044ad0 <HAL_GPIO_Init>

	/**/
	LL_PWR_EnableGPIOPullUp(LL_PWR_GPIO_A, LL_PWR_GPIO_BIT_2);
10042c64:	4b0d      	ldr	r3, [pc, #52]	@ (10042c9c <MX_GPIO_Init+0x10c>)
10042c66:	2104      	movs	r1, #4
10042c68:	0018      	movs	r0, r3
10042c6a:	f7ff fc39 	bl	100424e0 <LL_PWR_EnableGPIOPullUp>

	/**/
	LL_PWR_SetNoPullA(LL_PWR_GPIO_BIT_4);
10042c6e:	2010      	movs	r0, #16
10042c70:	f7ff fc4e 	bl	10042510 <LL_PWR_SetNoPullA>

	/**/
	LL_PWR_SetNoPullB(LL_PWR_GPIO_BIT_10);
10042c74:	2380      	movs	r3, #128	@ 0x80
10042c76:	00db      	lsls	r3, r3, #3
10042c78:	0018      	movs	r0, r3
10042c7a:	f7ff fc61 	bl	10042540 <LL_PWR_SetNoPullB>

	/* EXTI interrupt init*/
	HAL_NVIC_SetPriority(GPIOB_IRQn, 1, 0);
10042c7e:	2200      	movs	r2, #0
10042c80:	2101      	movs	r1, #1
10042c82:	2010      	movs	r0, #16
10042c84:	f001 fef2 	bl	10044a6c <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(GPIOB_IRQn);
10042c88:	2010      	movs	r0, #16
10042c8a:	f001 ff04 	bl	10044a96 <HAL_NVIC_EnableIRQ>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
10042c8e:	46c0      	nop			@ (mov r8, r8)
10042c90:	46bd      	mov	sp, r7
10042c92:	b006      	add	sp, #24
10042c94:	bd80      	pop	{r7, pc}
10042c96:	46c0      	nop			@ (mov r8, r8)
10042c98:	48100000 	.word	0x48100000
10042c9c:	48500020 	.word	0x48500020

10042ca0 <split_from_uint64>:

/* USER CODE BEGIN 4 */
void split_from_uint64(uint64_t id, uint8_t *array) {
10042ca0:	b5b0      	push	{r4, r5, r7, lr}
10042ca2:	b086      	sub	sp, #24
10042ca4:	af00      	add	r7, sp, #0
10042ca6:	60b8      	str	r0, [r7, #8]
10042ca8:	60f9      	str	r1, [r7, #12]
10042caa:	607a      	str	r2, [r7, #4]
	for (uint8_t i = 0; i < 8; i++) {
10042cac:	2317      	movs	r3, #23
10042cae:	18fb      	adds	r3, r7, r3
10042cb0:	2200      	movs	r2, #0
10042cb2:	701a      	strb	r2, [r3, #0]
10042cb4:	e025      	b.n	10042d02 <split_from_uint64+0x62>
		array[i] = (id >> (8 * (7 - i))) & 0xFF;
10042cb6:	2317      	movs	r3, #23
10042cb8:	18fb      	adds	r3, r7, r3
10042cba:	781b      	ldrb	r3, [r3, #0]
10042cbc:	2207      	movs	r2, #7
10042cbe:	1ad3      	subs	r3, r2, r3
10042cc0:	00db      	lsls	r3, r3, #3
10042cc2:	001a      	movs	r2, r3
10042cc4:	3a20      	subs	r2, #32
10042cc6:	2a00      	cmp	r2, #0
10042cc8:	db03      	blt.n	10042cd2 <split_from_uint64+0x32>
10042cca:	68f9      	ldr	r1, [r7, #12]
10042ccc:	40d1      	lsrs	r1, r2
10042cce:	000c      	movs	r4, r1
10042cd0:	e008      	b.n	10042ce4 <split_from_uint64+0x44>
10042cd2:	2220      	movs	r2, #32
10042cd4:	1ad2      	subs	r2, r2, r3
10042cd6:	68f9      	ldr	r1, [r7, #12]
10042cd8:	4091      	lsls	r1, r2
10042cda:	000a      	movs	r2, r1
10042cdc:	68b9      	ldr	r1, [r7, #8]
10042cde:	40d9      	lsrs	r1, r3
10042ce0:	000c      	movs	r4, r1
10042ce2:	4314      	orrs	r4, r2
10042ce4:	68fa      	ldr	r2, [r7, #12]
10042ce6:	40da      	lsrs	r2, r3
10042ce8:	0015      	movs	r5, r2
10042cea:	2117      	movs	r1, #23
10042cec:	187b      	adds	r3, r7, r1
10042cee:	781b      	ldrb	r3, [r3, #0]
10042cf0:	687a      	ldr	r2, [r7, #4]
10042cf2:	18d3      	adds	r3, r2, r3
10042cf4:	b2e2      	uxtb	r2, r4
10042cf6:	701a      	strb	r2, [r3, #0]
	for (uint8_t i = 0; i < 8; i++) {
10042cf8:	187b      	adds	r3, r7, r1
10042cfa:	781a      	ldrb	r2, [r3, #0]
10042cfc:	187b      	adds	r3, r7, r1
10042cfe:	3201      	adds	r2, #1
10042d00:	701a      	strb	r2, [r3, #0]
10042d02:	2317      	movs	r3, #23
10042d04:	18fb      	adds	r3, r7, r3
10042d06:	781b      	ldrb	r3, [r3, #0]
10042d08:	2b07      	cmp	r3, #7
10042d0a:	d9d4      	bls.n	10042cb6 <split_from_uint64+0x16>
	}
}
10042d0c:	46c0      	nop			@ (mov r8, r8)
10042d0e:	46c0      	nop			@ (mov r8, r8)
10042d10:	46bd      	mov	sp, r7
10042d12:	b006      	add	sp, #24
10042d14:	bdb0      	pop	{r4, r5, r7, pc}

10042d16 <combine_to_uint64>:
uint64_t combine_to_uint64(uint8_t *array, uint8_t start_index) {
10042d16:	b5f0      	push	{r4, r5, r6, r7, lr}
10042d18:	b089      	sub	sp, #36	@ 0x24
10042d1a:	af00      	add	r7, sp, #0
10042d1c:	60f8      	str	r0, [r7, #12]
10042d1e:	0008      	movs	r0, r1
10042d20:	210b      	movs	r1, #11
10042d22:	1879      	adds	r1, r7, r1
10042d24:	7008      	strb	r0, [r1, #0]
	uint64_t result = 0;
10042d26:	2000      	movs	r0, #0
10042d28:	2100      	movs	r1, #0
10042d2a:	61b8      	str	r0, [r7, #24]
10042d2c:	61f9      	str	r1, [r7, #28]

	for (uint8_t i = 0; i < 8; i++) {
10042d2e:	210f      	movs	r1, #15
10042d30:	2008      	movs	r0, #8
10042d32:	1809      	adds	r1, r1, r0
10042d34:	19c9      	adds	r1, r1, r7
10042d36:	2000      	movs	r0, #0
10042d38:	7008      	strb	r0, [r1, #0]
10042d3a:	e03e      	b.n	10042dba <combine_to_uint64+0xa4>
		result |= ((uint64_t) array[start_index + i]) << (8 * (7 - i));
10042d3c:	210b      	movs	r1, #11
10042d3e:	1879      	adds	r1, r7, r1
10042d40:	7808      	ldrb	r0, [r1, #0]
10042d42:	260f      	movs	r6, #15
10042d44:	2108      	movs	r1, #8
10042d46:	1871      	adds	r1, r6, r1
10042d48:	19c9      	adds	r1, r1, r7
10042d4a:	7809      	ldrb	r1, [r1, #0]
10042d4c:	1841      	adds	r1, r0, r1
10042d4e:	0008      	movs	r0, r1
10042d50:	68f9      	ldr	r1, [r7, #12]
10042d52:	1809      	adds	r1, r1, r0
10042d54:	7809      	ldrb	r1, [r1, #0]
10042d56:	000c      	movs	r4, r1
10042d58:	2100      	movs	r1, #0
10042d5a:	000d      	movs	r5, r1
10042d5c:	2108      	movs	r1, #8
10042d5e:	1871      	adds	r1, r6, r1
10042d60:	19c9      	adds	r1, r1, r7
10042d62:	7809      	ldrb	r1, [r1, #0]
10042d64:	2007      	movs	r0, #7
10042d66:	1a41      	subs	r1, r0, r1
10042d68:	00c9      	lsls	r1, r1, #3
10042d6a:	0008      	movs	r0, r1
10042d6c:	3820      	subs	r0, #32
10042d6e:	2800      	cmp	r0, #0
10042d70:	db03      	blt.n	10042d7a <combine_to_uint64+0x64>
10042d72:	0026      	movs	r6, r4
10042d74:	4086      	lsls	r6, r0
10042d76:	0033      	movs	r3, r6
10042d78:	e008      	b.n	10042d8c <combine_to_uint64+0x76>
10042d7a:	2020      	movs	r0, #32
10042d7c:	1a40      	subs	r0, r0, r1
10042d7e:	0026      	movs	r6, r4
10042d80:	40c6      	lsrs	r6, r0
10042d82:	0030      	movs	r0, r6
10042d84:	002e      	movs	r6, r5
10042d86:	408e      	lsls	r6, r1
10042d88:	0033      	movs	r3, r6
10042d8a:	4303      	orrs	r3, r0
10042d8c:	0020      	movs	r0, r4
10042d8e:	4088      	lsls	r0, r1
10042d90:	0002      	movs	r2, r0
10042d92:	69b9      	ldr	r1, [r7, #24]
10042d94:	4311      	orrs	r1, r2
10042d96:	6039      	str	r1, [r7, #0]
10042d98:	69f9      	ldr	r1, [r7, #28]
10042d9a:	4319      	orrs	r1, r3
10042d9c:	6079      	str	r1, [r7, #4]
10042d9e:	6838      	ldr	r0, [r7, #0]
10042da0:	6879      	ldr	r1, [r7, #4]
10042da2:	61b8      	str	r0, [r7, #24]
10042da4:	61f9      	str	r1, [r7, #28]
	for (uint8_t i = 0; i < 8; i++) {
10042da6:	260f      	movs	r6, #15
10042da8:	2108      	movs	r1, #8
10042daa:	1870      	adds	r0, r6, r1
10042dac:	19c1      	adds	r1, r0, r7
10042dae:	7808      	ldrb	r0, [r1, #0]
10042db0:	2108      	movs	r1, #8
10042db2:	1871      	adds	r1, r6, r1
10042db4:	19c9      	adds	r1, r1, r7
10042db6:	3001      	adds	r0, #1
10042db8:	7008      	strb	r0, [r1, #0]
10042dba:	210f      	movs	r1, #15
10042dbc:	2008      	movs	r0, #8
10042dbe:	1809      	adds	r1, r1, r0
10042dc0:	19c9      	adds	r1, r1, r7
10042dc2:	7809      	ldrb	r1, [r1, #0]
10042dc4:	2907      	cmp	r1, #7
10042dc6:	d9b9      	bls.n	10042d3c <combine_to_uint64+0x26>
	}

	return result;
10042dc8:	69ba      	ldr	r2, [r7, #24]
10042dca:	69fb      	ldr	r3, [r7, #28]
}
10042dcc:	0010      	movs	r0, r2
10042dce:	0019      	movs	r1, r3
10042dd0:	46bd      	mov	sp, r7
10042dd2:	b009      	add	sp, #36	@ 0x24
10042dd4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

10042dd8 <HAL_RADIO_CallbackRcvOk>:

void HAL_RADIO_CallbackRcvOk(RxStats_t *rxPacketStats) {
10042dd8:	b5b0      	push	{r4, r5, r7, lr}
10042dda:	b08c      	sub	sp, #48	@ 0x30
10042ddc:	af00      	add	r7, sp, #0
10042dde:	6178      	str	r0, [r7, #20]
	if (receivedData[0] == 0x1D) {
10042de0:	4b68      	ldr	r3, [pc, #416]	@ (10042f84 <HAL_RADIO_CallbackRcvOk+0x1ac>)
10042de2:	781b      	ldrb	r3, [r3, #0]
10042de4:	2b1d      	cmp	r3, #29
10042de6:	d000      	beq.n	10042dea <HAL_RADIO_CallbackRcvOk+0x12>
10042de8:	e079      	b.n	10042ede <HAL_RADIO_CallbackRcvOk+0x106>
		uint64_t ID = combine_to_uint64(receivedData, 2U);
10042dea:	4b66      	ldr	r3, [pc, #408]	@ (10042f84 <HAL_RADIO_CallbackRcvOk+0x1ac>)
10042dec:	2102      	movs	r1, #2
10042dee:	0018      	movs	r0, r3
10042df0:	f7ff ff91 	bl	10042d16 <combine_to_uint64>
10042df4:	0002      	movs	r2, r0
10042df6:	000b      	movs	r3, r1
10042df8:	61ba      	str	r2, [r7, #24]
10042dfa:	61fb      	str	r3, [r7, #28]
		uint8_t duplicate = 0;
10042dfc:	231f      	movs	r3, #31
10042dfe:	2110      	movs	r1, #16
10042e00:	185b      	adds	r3, r3, r1
10042e02:	19db      	adds	r3, r3, r7
10042e04:	2200      	movs	r2, #0
10042e06:	701a      	strb	r2, [r3, #0]
		for (uint8_t i = 0; i < 39; i++) {
10042e08:	231e      	movs	r3, #30
10042e0a:	185b      	adds	r3, r3, r1
10042e0c:	19db      	adds	r3, r3, r7
10042e0e:	2200      	movs	r2, #0
10042e10:	701a      	strb	r2, [r3, #0]
10042e12:	e020      	b.n	10042e56 <HAL_RADIO_CallbackRcvOk+0x7e>
			if (beacon_ID[i] == ID) {
10042e14:	231e      	movs	r3, #30
10042e16:	2010      	movs	r0, #16
10042e18:	181b      	adds	r3, r3, r0
10042e1a:	19db      	adds	r3, r3, r7
10042e1c:	781b      	ldrb	r3, [r3, #0]
10042e1e:	4a5a      	ldr	r2, [pc, #360]	@ (10042f88 <HAL_RADIO_CallbackRcvOk+0x1b0>)
10042e20:	00db      	lsls	r3, r3, #3
10042e22:	18d3      	adds	r3, r2, r3
10042e24:	681a      	ldr	r2, [r3, #0]
10042e26:	685b      	ldr	r3, [r3, #4]
10042e28:	69b9      	ldr	r1, [r7, #24]
10042e2a:	4291      	cmp	r1, r2
10042e2c:	d10a      	bne.n	10042e44 <HAL_RADIO_CallbackRcvOk+0x6c>
10042e2e:	69f9      	ldr	r1, [r7, #28]
10042e30:	4299      	cmp	r1, r3
10042e32:	d107      	bne.n	10042e44 <HAL_RADIO_CallbackRcvOk+0x6c>
				duplicate++;
10042e34:	211f      	movs	r1, #31
10042e36:	180b      	adds	r3, r1, r0
10042e38:	19db      	adds	r3, r3, r7
10042e3a:	781a      	ldrb	r2, [r3, #0]
10042e3c:	180b      	adds	r3, r1, r0
10042e3e:	19db      	adds	r3, r3, r7
10042e40:	3201      	adds	r2, #1
10042e42:	701a      	strb	r2, [r3, #0]
		for (uint8_t i = 0; i < 39; i++) {
10042e44:	211e      	movs	r1, #30
10042e46:	2010      	movs	r0, #16
10042e48:	180b      	adds	r3, r1, r0
10042e4a:	19db      	adds	r3, r3, r7
10042e4c:	781a      	ldrb	r2, [r3, #0]
10042e4e:	180b      	adds	r3, r1, r0
10042e50:	19db      	adds	r3, r3, r7
10042e52:	3201      	adds	r2, #1
10042e54:	701a      	strb	r2, [r3, #0]
10042e56:	231e      	movs	r3, #30
10042e58:	2210      	movs	r2, #16
10042e5a:	189b      	adds	r3, r3, r2
10042e5c:	19db      	adds	r3, r3, r7
10042e5e:	781b      	ldrb	r3, [r3, #0]
10042e60:	2b26      	cmp	r3, #38	@ 0x26
10042e62:	d9d7      	bls.n	10042e14 <HAL_RADIO_CallbackRcvOk+0x3c>
			}
		}
		if (duplicate == 0) {
10042e64:	231f      	movs	r3, #31
10042e66:	189b      	adds	r3, r3, r2
10042e68:	19db      	adds	r3, r3, r7
10042e6a:	781b      	ldrb	r3, [r3, #0]
10042e6c:	2b00      	cmp	r3, #0
10042e6e:	d108      	bne.n	10042e82 <HAL_RADIO_CallbackRcvOk+0xaa>
			beacon_ID[current_channel] = ID;
10042e70:	4b46      	ldr	r3, [pc, #280]	@ (10042f8c <HAL_RADIO_CallbackRcvOk+0x1b4>)
10042e72:	781b      	ldrb	r3, [r3, #0]
10042e74:	4a44      	ldr	r2, [pc, #272]	@ (10042f88 <HAL_RADIO_CallbackRcvOk+0x1b0>)
10042e76:	00db      	lsls	r3, r3, #3
10042e78:	18d1      	adds	r1, r2, r3
10042e7a:	69ba      	ldr	r2, [r7, #24]
10042e7c:	69fb      	ldr	r3, [r7, #28]
10042e7e:	600a      	str	r2, [r1, #0]
10042e80:	604b      	str	r3, [r1, #4]
		}
		beacon_count = 0;
10042e82:	4b43      	ldr	r3, [pc, #268]	@ (10042f90 <HAL_RADIO_CallbackRcvOk+0x1b8>)
10042e84:	2200      	movs	r2, #0
10042e86:	701a      	strb	r2, [r3, #0]
		for (uint8_t i = 0; i < 39; i++) {
10042e88:	231d      	movs	r3, #29
10042e8a:	2210      	movs	r2, #16
10042e8c:	189b      	adds	r3, r3, r2
10042e8e:	19db      	adds	r3, r3, r7
10042e90:	2200      	movs	r2, #0
10042e92:	701a      	strb	r2, [r3, #0]
10042e94:	e01b      	b.n	10042ece <HAL_RADIO_CallbackRcvOk+0xf6>
			if (beacon_ID[i] != 0) {
10042e96:	231d      	movs	r3, #29
10042e98:	2210      	movs	r2, #16
10042e9a:	189b      	adds	r3, r3, r2
10042e9c:	19db      	adds	r3, r3, r7
10042e9e:	781b      	ldrb	r3, [r3, #0]
10042ea0:	4a39      	ldr	r2, [pc, #228]	@ (10042f88 <HAL_RADIO_CallbackRcvOk+0x1b0>)
10042ea2:	00db      	lsls	r3, r3, #3
10042ea4:	18d3      	adds	r3, r2, r3
10042ea6:	681a      	ldr	r2, [r3, #0]
10042ea8:	685b      	ldr	r3, [r3, #4]
10042eaa:	0011      	movs	r1, r2
10042eac:	4319      	orrs	r1, r3
10042eae:	d005      	beq.n	10042ebc <HAL_RADIO_CallbackRcvOk+0xe4>
				beacon_count++;
10042eb0:	4b37      	ldr	r3, [pc, #220]	@ (10042f90 <HAL_RADIO_CallbackRcvOk+0x1b8>)
10042eb2:	781b      	ldrb	r3, [r3, #0]
10042eb4:	3301      	adds	r3, #1
10042eb6:	b2da      	uxtb	r2, r3
10042eb8:	4b35      	ldr	r3, [pc, #212]	@ (10042f90 <HAL_RADIO_CallbackRcvOk+0x1b8>)
10042eba:	701a      	strb	r2, [r3, #0]
		for (uint8_t i = 0; i < 39; i++) {
10042ebc:	211d      	movs	r1, #29
10042ebe:	2010      	movs	r0, #16
10042ec0:	180b      	adds	r3, r1, r0
10042ec2:	19db      	adds	r3, r3, r7
10042ec4:	781a      	ldrb	r2, [r3, #0]
10042ec6:	180b      	adds	r3, r1, r0
10042ec8:	19db      	adds	r3, r3, r7
10042eca:	3201      	adds	r2, #1
10042ecc:	701a      	strb	r2, [r3, #0]
10042ece:	231d      	movs	r3, #29
10042ed0:	2210      	movs	r2, #16
10042ed2:	189b      	adds	r3, r3, r2
10042ed4:	19db      	adds	r3, r3, r7
10042ed6:	781b      	ldrb	r3, [r3, #0]
10042ed8:	2b26      	cmp	r3, #38	@ 0x26
10042eda:	d9dc      	bls.n	10042e96 <HAL_RADIO_CallbackRcvOk+0xbe>
		uint32_t distance = measured_distance
				* (0.5316 + 0.0259 * measured_distance
						+ -0.0001 * (measured_distance * measured_distance));
		distance_to_beacon[current_channel] = distance;
	}
}
10042edc:	e04e      	b.n	10042f7c <HAL_RADIO_CallbackRcvOk+0x1a4>
	} else if (receivedData[0] == 0xAE) {
10042ede:	4b29      	ldr	r3, [pc, #164]	@ (10042f84 <HAL_RADIO_CallbackRcvOk+0x1ac>)
10042ee0:	781b      	ldrb	r3, [r3, #0]
10042ee2:	2bae      	cmp	r3, #174	@ 0xae
10042ee4:	d14a      	bne.n	10042f7c <HAL_RADIO_CallbackRcvOk+0x1a4>
		uint32_t measured_distance = (receivedData[10] * 100)
10042ee6:	4b27      	ldr	r3, [pc, #156]	@ (10042f84 <HAL_RADIO_CallbackRcvOk+0x1ac>)
10042ee8:	7a9b      	ldrb	r3, [r3, #10]
10042eea:	001a      	movs	r2, r3
10042eec:	2364      	movs	r3, #100	@ 0x64
10042eee:	4353      	muls	r3, r2
				+ receivedData[11];
10042ef0:	4a24      	ldr	r2, [pc, #144]	@ (10042f84 <HAL_RADIO_CallbackRcvOk+0x1ac>)
10042ef2:	7ad2      	ldrb	r2, [r2, #11]
10042ef4:	189b      	adds	r3, r3, r2
		uint32_t measured_distance = (receivedData[10] * 100)
10042ef6:	62bb      	str	r3, [r7, #40]	@ 0x28
				* (0.5316 + 0.0259 * measured_distance
10042ef8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
10042efa:	f7ff faa3 	bl	10042444 <__aeabi_ui2d>
10042efe:	0004      	movs	r4, r0
10042f00:	000d      	movs	r5, r1
10042f02:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
10042f04:	f7ff fa9e 	bl	10042444 <__aeabi_ui2d>
10042f08:	4a22      	ldr	r2, [pc, #136]	@ (10042f94 <HAL_RADIO_CallbackRcvOk+0x1bc>)
10042f0a:	4b23      	ldr	r3, [pc, #140]	@ (10042f98 <HAL_RADIO_CallbackRcvOk+0x1c0>)
10042f0c:	f7fe fbaa 	bl	10041664 <__aeabi_dmul>
10042f10:	0002      	movs	r2, r0
10042f12:	000b      	movs	r3, r1
10042f14:	0010      	movs	r0, r2
10042f16:	0019      	movs	r1, r3
10042f18:	4a20      	ldr	r2, [pc, #128]	@ (10042f9c <HAL_RADIO_CallbackRcvOk+0x1c4>)
10042f1a:	4b21      	ldr	r3, [pc, #132]	@ (10042fa0 <HAL_RADIO_CallbackRcvOk+0x1c8>)
10042f1c:	f7fd fbfa 	bl	10040714 <__aeabi_dadd>
10042f20:	0002      	movs	r2, r0
10042f22:	000b      	movs	r3, r1
10042f24:	603a      	str	r2, [r7, #0]
10042f26:	607b      	str	r3, [r7, #4]
						+ -0.0001 * (measured_distance * measured_distance));
10042f28:	6abb      	ldr	r3, [r7, #40]	@ 0x28
10042f2a:	435b      	muls	r3, r3
10042f2c:	0018      	movs	r0, r3
10042f2e:	f7ff fa89 	bl	10042444 <__aeabi_ui2d>
10042f32:	4a1c      	ldr	r2, [pc, #112]	@ (10042fa4 <HAL_RADIO_CallbackRcvOk+0x1cc>)
10042f34:	4b1c      	ldr	r3, [pc, #112]	@ (10042fa8 <HAL_RADIO_CallbackRcvOk+0x1d0>)
10042f36:	f7fe fb95 	bl	10041664 <__aeabi_dmul>
10042f3a:	0002      	movs	r2, r0
10042f3c:	000b      	movs	r3, r1
10042f3e:	6838      	ldr	r0, [r7, #0]
10042f40:	6879      	ldr	r1, [r7, #4]
10042f42:	f7fd fbe7 	bl	10040714 <__aeabi_dadd>
10042f46:	0002      	movs	r2, r0
10042f48:	000b      	movs	r3, r1
				* (0.5316 + 0.0259 * measured_distance
10042f4a:	0020      	movs	r0, r4
10042f4c:	0029      	movs	r1, r5
10042f4e:	f7fe fb89 	bl	10041664 <__aeabi_dmul>
10042f52:	0002      	movs	r2, r0
10042f54:	000b      	movs	r3, r1
		uint32_t distance = measured_distance
10042f56:	0010      	movs	r0, r2
10042f58:	0019      	movs	r1, r3
10042f5a:	f7fd faf1 	bl	10040540 <__aeabi_d2uiz>
10042f5e:	0003      	movs	r3, r0
10042f60:	627b      	str	r3, [r7, #36]	@ 0x24
		distance_to_beacon[current_channel] = distance;
10042f62:	4b0a      	ldr	r3, [pc, #40]	@ (10042f8c <HAL_RADIO_CallbackRcvOk+0x1b4>)
10042f64:	781b      	ldrb	r3, [r3, #0]
10042f66:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
10042f68:	60ba      	str	r2, [r7, #8]
10042f6a:	2200      	movs	r2, #0
10042f6c:	60fa      	str	r2, [r7, #12]
10042f6e:	4a0f      	ldr	r2, [pc, #60]	@ (10042fac <HAL_RADIO_CallbackRcvOk+0x1d4>)
10042f70:	00db      	lsls	r3, r3, #3
10042f72:	18d3      	adds	r3, r2, r3
10042f74:	68b9      	ldr	r1, [r7, #8]
10042f76:	68fa      	ldr	r2, [r7, #12]
10042f78:	6019      	str	r1, [r3, #0]
10042f7a:	605a      	str	r2, [r3, #4]
}
10042f7c:	46c0      	nop			@ (mov r8, r8)
10042f7e:	46bd      	mov	sp, r7
10042f80:	b00c      	add	sp, #48	@ 0x30
10042f82:	bdb0      	pop	{r4, r5, r7, pc}
10042f84:	20000378 	.word	0x20000378
10042f88:	20000580 	.word	0x20000580
10042f8c:	2000057f 	.word	0x2000057f
10042f90:	2000057e 	.word	0x2000057e
10042f94:	93dd97f6 	.word	0x93dd97f6
10042f98:	3f9a8587 	.word	0x3f9a8587
10042f9c:	00d1b717 	.word	0x00d1b717
10042fa0:	3fe102de 	.word	0x3fe102de
10042fa4:	eb1c432d 	.word	0xeb1c432d
10042fa8:	bf1a36e2 	.word	0xbf1a36e2
10042fac:	200006c0 	.word	0x200006c0

10042fb0 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin) {
10042fb0:	b580      	push	{r7, lr}
10042fb2:	b082      	sub	sp, #8
10042fb4:	af00      	add	r7, sp, #0
10042fb6:	6078      	str	r0, [r7, #4]
10042fb8:	000a      	movs	r2, r1
10042fba:	1cbb      	adds	r3, r7, #2
10042fbc:	801a      	strh	r2, [r3, #0]
	sendNewPacket = TRUE;
10042fbe:	4b03      	ldr	r3, [pc, #12]	@ (10042fcc <HAL_GPIO_EXTI_Callback+0x1c>)
10042fc0:	2201      	movs	r2, #1
10042fc2:	701a      	strb	r2, [r3, #0]

}
10042fc4:	46c0      	nop			@ (mov r8, r8)
10042fc6:	46bd      	mov	sp, r7
10042fc8:	b002      	add	sp, #8
10042fca:	bd80      	pop	{r7, pc}
10042fcc:	2000057d 	.word	0x2000057d

10042fd0 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
10042fd0:	b580      	push	{r7, lr}
10042fd2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
10042fd4:	b672      	cpsid	i
}
10042fd6:	46c0      	nop			@ (mov r8, r8)
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
10042fd8:	46c0      	nop			@ (mov r8, r8)
10042fda:	e7fd      	b.n	10042fd8 <Error_Handler+0x8>

10042fdc <LL_PWR_SetNoPullA>:
{
10042fdc:	b580      	push	{r7, lr}
10042fde:	b082      	sub	sp, #8
10042fe0:	af00      	add	r7, sp, #0
10042fe2:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(PWR->PUCRA, GPIONumber);
10042fe4:	4b08      	ldr	r3, [pc, #32]	@ (10043008 <LL_PWR_SetNoPullA+0x2c>)
10042fe6:	6a1a      	ldr	r2, [r3, #32]
10042fe8:	687b      	ldr	r3, [r7, #4]
10042fea:	43d9      	mvns	r1, r3
10042fec:	4b06      	ldr	r3, [pc, #24]	@ (10043008 <LL_PWR_SetNoPullA+0x2c>)
10042fee:	400a      	ands	r2, r1
10042ff0:	621a      	str	r2, [r3, #32]
  CLEAR_BIT(PWR->PDCRA, GPIONumber);
10042ff2:	4b05      	ldr	r3, [pc, #20]	@ (10043008 <LL_PWR_SetNoPullA+0x2c>)
10042ff4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
10042ff6:	687b      	ldr	r3, [r7, #4]
10042ff8:	43d9      	mvns	r1, r3
10042ffa:	4b03      	ldr	r3, [pc, #12]	@ (10043008 <LL_PWR_SetNoPullA+0x2c>)
10042ffc:	400a      	ands	r2, r1
10042ffe:	625a      	str	r2, [r3, #36]	@ 0x24
}
10043000:	46c0      	nop			@ (mov r8, r8)
10043002:	46bd      	mov	sp, r7
10043004:	b002      	add	sp, #8
10043006:	bd80      	pop	{r7, pc}
10043008:	48500000 	.word	0x48500000

1004300c <LL_AHB1_GRP1_EnableClock>:
{
1004300c:	b580      	push	{r7, lr}
1004300e:	b084      	sub	sp, #16
10043010:	af00      	add	r7, sp, #0
10043012:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHBENR, Periphs);
10043014:	4b07      	ldr	r3, [pc, #28]	@ (10043034 <LL_AHB1_GRP1_EnableClock+0x28>)
10043016:	6d19      	ldr	r1, [r3, #80]	@ 0x50
10043018:	4b06      	ldr	r3, [pc, #24]	@ (10043034 <LL_AHB1_GRP1_EnableClock+0x28>)
1004301a:	687a      	ldr	r2, [r7, #4]
1004301c:	430a      	orrs	r2, r1
1004301e:	651a      	str	r2, [r3, #80]	@ 0x50
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
10043020:	4b04      	ldr	r3, [pc, #16]	@ (10043034 <LL_AHB1_GRP1_EnableClock+0x28>)
10043022:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
10043024:	687a      	ldr	r2, [r7, #4]
10043026:	4013      	ands	r3, r2
10043028:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
1004302a:	68fb      	ldr	r3, [r7, #12]
}
1004302c:	46c0      	nop			@ (mov r8, r8)
1004302e:	46bd      	mov	sp, r7
10043030:	b004      	add	sp, #16
10043032:	bd80      	pop	{r7, pc}
10043034:	48400000 	.word	0x48400000

10043038 <LL_APB0_GRP1_EnableClock>:
{
10043038:	b580      	push	{r7, lr}
1004303a:	b084      	sub	sp, #16
1004303c:	af00      	add	r7, sp, #0
1004303e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB0ENR, Periphs);
10043040:	4b07      	ldr	r3, [pc, #28]	@ (10043060 <LL_APB0_GRP1_EnableClock+0x28>)
10043042:	6d59      	ldr	r1, [r3, #84]	@ 0x54
10043044:	4b06      	ldr	r3, [pc, #24]	@ (10043060 <LL_APB0_GRP1_EnableClock+0x28>)
10043046:	687a      	ldr	r2, [r7, #4]
10043048:	430a      	orrs	r2, r1
1004304a:	655a      	str	r2, [r3, #84]	@ 0x54
  tmpreg = READ_BIT(RCC->APB0ENR, Periphs);
1004304c:	4b04      	ldr	r3, [pc, #16]	@ (10043060 <LL_APB0_GRP1_EnableClock+0x28>)
1004304e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
10043050:	687a      	ldr	r2, [r7, #4]
10043052:	4013      	ands	r3, r2
10043054:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
10043056:	68fb      	ldr	r3, [r7, #12]
}
10043058:	46c0      	nop			@ (mov r8, r8)
1004305a:	46bd      	mov	sp, r7
1004305c:	b004      	add	sp, #16
1004305e:	bd80      	pop	{r7, pc}
10043060:	48400000 	.word	0x48400000

10043064 <LL_APB1_GRP1_EnableClock>:
{
10043064:	b580      	push	{r7, lr}
10043066:	b084      	sub	sp, #16
10043068:	af00      	add	r7, sp, #0
1004306a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
1004306c:	4b07      	ldr	r3, [pc, #28]	@ (1004308c <LL_APB1_GRP1_EnableClock+0x28>)
1004306e:	6d99      	ldr	r1, [r3, #88]	@ 0x58
10043070:	4b06      	ldr	r3, [pc, #24]	@ (1004308c <LL_APB1_GRP1_EnableClock+0x28>)
10043072:	687a      	ldr	r2, [r7, #4]
10043074:	430a      	orrs	r2, r1
10043076:	659a      	str	r2, [r3, #88]	@ 0x58
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
10043078:	4b04      	ldr	r3, [pc, #16]	@ (1004308c <LL_APB1_GRP1_EnableClock+0x28>)
1004307a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
1004307c:	687a      	ldr	r2, [r7, #4]
1004307e:	4013      	ands	r3, r2
10043080:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
10043082:	68fb      	ldr	r3, [r7, #12]
}
10043084:	46c0      	nop			@ (mov r8, r8)
10043086:	46bd      	mov	sp, r7
10043088:	b004      	add	sp, #16
1004308a:	bd80      	pop	{r7, pc}
1004308c:	48400000 	.word	0x48400000

10043090 <LL_APB2_GRP1_EnableClock>:
{
10043090:	b580      	push	{r7, lr}
10043092:	b084      	sub	sp, #16
10043094:	af00      	add	r7, sp, #0
10043096:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
10043098:	4b07      	ldr	r3, [pc, #28]	@ (100430b8 <LL_APB2_GRP1_EnableClock+0x28>)
1004309a:	6e19      	ldr	r1, [r3, #96]	@ 0x60
1004309c:	4b06      	ldr	r3, [pc, #24]	@ (100430b8 <LL_APB2_GRP1_EnableClock+0x28>)
1004309e:	687a      	ldr	r2, [r7, #4]
100430a0:	430a      	orrs	r2, r1
100430a2:	661a      	str	r2, [r3, #96]	@ 0x60
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
100430a4:	4b04      	ldr	r3, [pc, #16]	@ (100430b8 <LL_APB2_GRP1_EnableClock+0x28>)
100430a6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
100430a8:	687a      	ldr	r2, [r7, #4]
100430aa:	4013      	ands	r3, r2
100430ac:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
100430ae:	68fb      	ldr	r3, [r7, #12]
}
100430b0:	46c0      	nop			@ (mov r8, r8)
100430b2:	46bd      	mov	sp, r7
100430b4:	b004      	add	sp, #16
100430b6:	bd80      	pop	{r7, pc}
100430b8:	48400000 	.word	0x48400000

100430bc <LL_APB2_GRP1_IsEnabledClock>:
{
100430bc:	b580      	push	{r7, lr}
100430be:	b082      	sub	sp, #8
100430c0:	af00      	add	r7, sp, #0
100430c2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(RCC->APB2ENR, Periphs) == (Periphs)) ? 1UL : 0UL);
100430c4:	4b06      	ldr	r3, [pc, #24]	@ (100430e0 <LL_APB2_GRP1_IsEnabledClock+0x24>)
100430c6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
100430c8:	687a      	ldr	r2, [r7, #4]
100430ca:	4013      	ands	r3, r2
100430cc:	687a      	ldr	r2, [r7, #4]
100430ce:	429a      	cmp	r2, r3
100430d0:	d101      	bne.n	100430d6 <LL_APB2_GRP1_IsEnabledClock+0x1a>
100430d2:	2301      	movs	r3, #1
100430d4:	e000      	b.n	100430d8 <LL_APB2_GRP1_IsEnabledClock+0x1c>
100430d6:	2300      	movs	r3, #0
}
100430d8:	0018      	movs	r0, r3
100430da:	46bd      	mov	sp, r7
100430dc:	b002      	add	sp, #8
100430de:	bd80      	pop	{r7, pc}
100430e0:	48400000 	.word	0x48400000

100430e4 <LL_APB2_GRP1_ForceReset>:
{
100430e4:	b580      	push	{r7, lr}
100430e6:	b082      	sub	sp, #8
100430e8:	af00      	add	r7, sp, #0
100430ea:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2RSTR, Periphs);
100430ec:	4b04      	ldr	r3, [pc, #16]	@ (10043100 <LL_APB2_GRP1_ForceReset+0x1c>)
100430ee:	6c19      	ldr	r1, [r3, #64]	@ 0x40
100430f0:	4b03      	ldr	r3, [pc, #12]	@ (10043100 <LL_APB2_GRP1_ForceReset+0x1c>)
100430f2:	687a      	ldr	r2, [r7, #4]
100430f4:	430a      	orrs	r2, r1
100430f6:	641a      	str	r2, [r3, #64]	@ 0x40
}
100430f8:	46c0      	nop			@ (mov r8, r8)
100430fa:	46bd      	mov	sp, r7
100430fc:	b002      	add	sp, #8
100430fe:	bd80      	pop	{r7, pc}
10043100:	48400000 	.word	0x48400000

10043104 <LL_APB2_GRP1_ReleaseReset>:
{
10043104:	b580      	push	{r7, lr}
10043106:	b082      	sub	sp, #8
10043108:	af00      	add	r7, sp, #0
1004310a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB2RSTR, Periphs);
1004310c:	4b05      	ldr	r3, [pc, #20]	@ (10043124 <LL_APB2_GRP1_ReleaseReset+0x20>)
1004310e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
10043110:	687b      	ldr	r3, [r7, #4]
10043112:	43d9      	mvns	r1, r3
10043114:	4b03      	ldr	r3, [pc, #12]	@ (10043124 <LL_APB2_GRP1_ReleaseReset+0x20>)
10043116:	400a      	ands	r2, r1
10043118:	641a      	str	r2, [r3, #64]	@ 0x40
}
1004311a:	46c0      	nop			@ (mov r8, r8)
1004311c:	46bd      	mov	sp, r7
1004311e:	b002      	add	sp, #8
10043120:	bd80      	pop	{r7, pc}
10043122:	46c0      	nop			@ (mov r8, r8)
10043124:	48400000 	.word	0x48400000

10043128 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
10043128:	b580      	push	{r7, lr}
1004312a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
1004312c:	2380      	movs	r3, #128	@ 0x80
1004312e:	005b      	lsls	r3, r3, #1
10043130:	0018      	movs	r0, r3
10043132:	f7ff ff81 	bl	10043038 <LL_APB0_GRP1_EnableClock>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
10043136:	46c0      	nop			@ (mov r8, r8)
10043138:	46bd      	mov	sp, r7
1004313a:	bd80      	pop	{r7, pc}

1004313c <HAL_RADIO_MspInit>:
* This function configures the hardware resources used in this example
* @param hradio: RADIO handle pointer
* @retval None
*/
void HAL_RADIO_MspInit(RADIO_HandleTypeDef* hradio)
{
1004313c:	b590      	push	{r4, r7, lr}
1004313e:	b089      	sub	sp, #36	@ 0x24
10043140:	af00      	add	r7, sp, #0
10043142:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
10043144:	2408      	movs	r4, #8
10043146:	193b      	adds	r3, r7, r4
10043148:	0018      	movs	r0, r3
1004314a:	2318      	movs	r3, #24
1004314c:	001a      	movs	r2, r3
1004314e:	2100      	movs	r1, #0
10043150:	f006 ff14 	bl	10049f7c <memset>
  if(hradio->Instance==RADIO)
10043154:	687b      	ldr	r3, [r7, #4]
10043156:	681a      	ldr	r2, [r3, #0]
10043158:	23c0      	movs	r3, #192	@ 0xc0
1004315a:	05db      	lsls	r3, r3, #23
1004315c:	429a      	cmp	r2, r3
1004315e:	d12b      	bne.n	100431b8 <HAL_RADIO_MspInit+0x7c>

  /* USER CODE END RADIO_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RF;
10043160:	193b      	adds	r3, r7, r4
10043162:	2201      	movs	r2, #1
10043164:	601a      	str	r2, [r3, #0]
    PeriphClkInitStruct.RFClockSelection = RCC_RF_CLK_32M;
10043166:	193b      	adds	r3, r7, r4
10043168:	2202      	movs	r2, #2
1004316a:	611a      	str	r2, [r3, #16]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
1004316c:	193b      	adds	r3, r7, r4
1004316e:	0018      	movs	r0, r3
10043170:	f005 fb86 	bl	10048880 <HAL_RCCEx_PeriphCLKConfig>
10043174:	1e03      	subs	r3, r0, #0
10043176:	d001      	beq.n	1004317c <HAL_RADIO_MspInit+0x40>
    {
      Error_Handler();
10043178:	f7ff ff2a 	bl	10042fd0 <Error_Handler>
    }

    /* Peripheral clock enable */
    if (__HAL_RCC_RADIO_IS_CLK_DISABLED())
1004317c:	2001      	movs	r0, #1
1004317e:	f7ff ff9d 	bl	100430bc <LL_APB2_GRP1_IsEnabledClock>
10043182:	1e03      	subs	r3, r0, #0
10043184:	d108      	bne.n	10043198 <HAL_RADIO_MspInit+0x5c>
    {
      /* Radio reset */
      __HAL_RCC_RADIO_FORCE_RESET();
10043186:	2001      	movs	r0, #1
10043188:	f7ff ffac 	bl	100430e4 <LL_APB2_GRP1_ForceReset>
      __HAL_RCC_RADIO_RELEASE_RESET();
1004318c:	2001      	movs	r0, #1
1004318e:	f7ff ffb9 	bl	10043104 <LL_APB2_GRP1_ReleaseReset>

      /* Enable Radio peripheral clock */
      __HAL_RCC_RADIO_CLK_ENABLE();
10043192:	2001      	movs	r0, #1
10043194:	f7ff ff7c 	bl	10043090 <LL_APB2_GRP1_EnableClock>
    }

    /* RADIO interrupt Init */
    HAL_NVIC_SetPriority(RADIO_TXRX_IRQn, 0, 0);
10043198:	2200      	movs	r2, #0
1004319a:	2100      	movs	r1, #0
1004319c:	2012      	movs	r0, #18
1004319e:	f001 fc65 	bl	10044a6c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RADIO_TXRX_IRQn);
100431a2:	2012      	movs	r0, #18
100431a4:	f001 fc77 	bl	10044a96 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(RADIO_TXRX_SEQ_IRQn, 0, 0);
100431a8:	2200      	movs	r2, #0
100431aa:	2100      	movs	r1, #0
100431ac:	2019      	movs	r0, #25
100431ae:	f001 fc5d 	bl	10044a6c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RADIO_TXRX_SEQ_IRQn);
100431b2:	2019      	movs	r0, #25
100431b4:	f001 fc6f 	bl	10044a96 <HAL_NVIC_EnableIRQ>

  /* USER CODE END RADIO_MspInit 1 */

  }

}
100431b8:	46c0      	nop			@ (mov r8, r8)
100431ba:	46bd      	mov	sp, r7
100431bc:	b009      	add	sp, #36	@ 0x24
100431be:	bd90      	pop	{r4, r7, pc}

100431c0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
100431c0:	b590      	push	{r4, r7, lr}
100431c2:	b089      	sub	sp, #36	@ 0x24
100431c4:	af00      	add	r7, sp, #0
100431c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
100431c8:	240c      	movs	r4, #12
100431ca:	193b      	adds	r3, r7, r4
100431cc:	0018      	movs	r0, r3
100431ce:	2314      	movs	r3, #20
100431d0:	001a      	movs	r2, r3
100431d2:	2100      	movs	r1, #0
100431d4:	f006 fed2 	bl	10049f7c <memset>
  if(hspi->Instance==SPI2)
100431d8:	687b      	ldr	r3, [r7, #4]
100431da:	681b      	ldr	r3, [r3, #0]
100431dc:	4a14      	ldr	r2, [pc, #80]	@ (10043230 <HAL_SPI_MspInit+0x70>)
100431de:	4293      	cmp	r3, r2
100431e0:	d121      	bne.n	10043226 <HAL_SPI_MspInit+0x66>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
100431e2:	2380      	movs	r3, #128	@ 0x80
100431e4:	015b      	lsls	r3, r3, #5
100431e6:	0018      	movs	r0, r3
100431e8:	f7ff ff3c 	bl	10043064 <LL_APB1_GRP1_EnableClock>

    __HAL_RCC_GPIOA_CLK_ENABLE();
100431ec:	2004      	movs	r0, #4
100431ee:	f7ff ff0d 	bl	1004300c <LL_AHB1_GRP1_EnableClock>
    /**SPI2 GPIO Configuration
    PA5     ------> SPI2_SCK
    PA6     ------> SPI2_MOSI
    PA7     ------> SPI2_MISO
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
100431f2:	0021      	movs	r1, r4
100431f4:	187b      	adds	r3, r7, r1
100431f6:	22e0      	movs	r2, #224	@ 0xe0
100431f8:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
100431fa:	187b      	adds	r3, r7, r1
100431fc:	2202      	movs	r2, #2
100431fe:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
10043200:	187b      	adds	r3, r7, r1
10043202:	2200      	movs	r2, #0
10043204:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
10043206:	187b      	adds	r3, r7, r1
10043208:	2200      	movs	r2, #0
1004320a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_SPI2;
1004320c:	187b      	adds	r3, r7, r1
1004320e:	2201      	movs	r2, #1
10043210:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
10043212:	187a      	adds	r2, r7, r1
10043214:	2390      	movs	r3, #144	@ 0x90
10043216:	05db      	lsls	r3, r3, #23
10043218:	0011      	movs	r1, r2
1004321a:	0018      	movs	r0, r3
1004321c:	f001 fc58 	bl	10044ad0 <HAL_GPIO_Init>

    LL_PWR_SetNoPullA(LL_PWR_GPIO_BIT_5|LL_PWR_GPIO_BIT_6|LL_PWR_GPIO_BIT_7);
10043220:	20e0      	movs	r0, #224	@ 0xe0
10043222:	f7ff fedb 	bl	10042fdc <LL_PWR_SetNoPullA>

  /* USER CODE END SPI2_MspInit 1 */

  }

}
10043226:	46c0      	nop			@ (mov r8, r8)
10043228:	46bd      	mov	sp, r7
1004322a:	b009      	add	sp, #36	@ 0x24
1004322c:	bd90      	pop	{r4, r7, pc}
1004322e:	46c0      	nop			@ (mov r8, r8)
10043230:	41003000 	.word	0x41003000

10043234 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
10043234:	b590      	push	{r4, r7, lr}
10043236:	b089      	sub	sp, #36	@ 0x24
10043238:	af00      	add	r7, sp, #0
1004323a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
1004323c:	240c      	movs	r4, #12
1004323e:	193b      	adds	r3, r7, r4
10043240:	0018      	movs	r0, r3
10043242:	2314      	movs	r3, #20
10043244:	001a      	movs	r2, r3
10043246:	2100      	movs	r1, #0
10043248:	f006 fe98 	bl	10049f7c <memset>
  if(huart->Instance==USART1)
1004324c:	687b      	ldr	r3, [r7, #4]
1004324e:	681b      	ldr	r3, [r3, #0]
10043250:	4a15      	ldr	r2, [pc, #84]	@ (100432a8 <HAL_UART_MspInit+0x74>)
10043252:	4293      	cmp	r3, r2
10043254:	d124      	bne.n	100432a0 <HAL_UART_MspInit+0x6c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
10043256:	2380      	movs	r3, #128	@ 0x80
10043258:	00db      	lsls	r3, r3, #3
1004325a:	0018      	movs	r0, r3
1004325c:	f7ff ff02 	bl	10043064 <LL_APB1_GRP1_EnableClock>

    __HAL_RCC_GPIOA_CLK_ENABLE();
10043260:	2004      	movs	r0, #4
10043262:	f7ff fed3 	bl	1004300c <LL_AHB1_GRP1_EnableClock>
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA8     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_8;
10043266:	193b      	adds	r3, r7, r4
10043268:	22c0      	movs	r2, #192	@ 0xc0
1004326a:	0092      	lsls	r2, r2, #2
1004326c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
1004326e:	0021      	movs	r1, r4
10043270:	187b      	adds	r3, r7, r1
10043272:	2202      	movs	r2, #2
10043274:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
10043276:	187b      	adds	r3, r7, r1
10043278:	2200      	movs	r2, #0
1004327a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
1004327c:	187b      	adds	r3, r7, r1
1004327e:	2200      	movs	r2, #0
10043280:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_USART1;
10043282:	187b      	adds	r3, r7, r1
10043284:	2200      	movs	r2, #0
10043286:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
10043288:	187a      	adds	r2, r7, r1
1004328a:	2390      	movs	r3, #144	@ 0x90
1004328c:	05db      	lsls	r3, r3, #23
1004328e:	0011      	movs	r1, r2
10043290:	0018      	movs	r0, r3
10043292:	f001 fc1d 	bl	10044ad0 <HAL_GPIO_Init>

    LL_PWR_SetNoPullA(LL_PWR_GPIO_BIT_9|LL_PWR_GPIO_BIT_8);
10043296:	23c0      	movs	r3, #192	@ 0xc0
10043298:	009b      	lsls	r3, r3, #2
1004329a:	0018      	movs	r0, r3
1004329c:	f7ff fe9e 	bl	10042fdc <LL_PWR_SetNoPullA>

  /* USER CODE END USART1_MspInit 1 */

  }

}
100432a0:	46c0      	nop			@ (mov r8, r8)
100432a2:	46bd      	mov	sp, r7
100432a4:	b009      	add	sp, #36	@ 0x24
100432a6:	bd90      	pop	{r4, r7, pc}
100432a8:	41004000 	.word	0x41004000

100432ac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
100432ac:	b580      	push	{r7, lr}
100432ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
100432b0:	46c0      	nop			@ (mov r8, r8)
100432b2:	e7fd      	b.n	100432b0 <NMI_Handler+0x4>

100432b4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
100432b4:	b580      	push	{r7, lr}
100432b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
100432b8:	46c0      	nop			@ (mov r8, r8)
100432ba:	e7fd      	b.n	100432b8 <HardFault_Handler+0x4>

100432bc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
100432bc:	b580      	push	{r7, lr}
100432be:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
100432c0:	46c0      	nop			@ (mov r8, r8)
100432c2:	46bd      	mov	sp, r7
100432c4:	bd80      	pop	{r7, pc}

100432c6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
100432c6:	b580      	push	{r7, lr}
100432c8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
100432ca:	46c0      	nop			@ (mov r8, r8)
100432cc:	46bd      	mov	sp, r7
100432ce:	bd80      	pop	{r7, pc}

100432d0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
100432d0:	b580      	push	{r7, lr}
100432d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
100432d4:	f001 fad4 	bl	10044880 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
100432d8:	46c0      	nop			@ (mov r8, r8)
100432da:	46bd      	mov	sp, r7
100432dc:	bd80      	pop	{r7, pc}
	...

100432e0 <GPIOB_IRQHandler>:

/**
  * @brief This function handles GPIOB interrupt.
  */
void GPIOB_IRQHandler(void)
{
100432e0:	b580      	push	{r7, lr}
100432e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GPIOB_IRQn 0 */

  /* USER CODE END GPIOB_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIOB,GPIO_PIN_5);
100432e4:	4b03      	ldr	r3, [pc, #12]	@ (100432f4 <GPIOB_IRQHandler+0x14>)
100432e6:	2120      	movs	r1, #32
100432e8:	0018      	movs	r0, r3
100432ea:	f001 fdb7 	bl	10044e5c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN GPIOB_IRQn 1 */

  /* USER CODE END GPIOB_IRQn 1 */
}
100432ee:	46c0      	nop			@ (mov r8, r8)
100432f0:	46bd      	mov	sp, r7
100432f2:	bd80      	pop	{r7, pc}
100432f4:	48100000 	.word	0x48100000

100432f8 <RADIO_TIMER_CPU_WKUP_IRQHandler>:

/**
  * @brief This function handles RADIO_TIMER_CPU_WKUP global interrupt.
  */
void RADIO_TIMER_CPU_WKUP_IRQHandler(void)
{
100432f8:	b580      	push	{r7, lr}
100432fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RADIO_TIMER_CPU_WKUP_IRQn 0 */

  /* USER CODE END RADIO_TIMER_CPU_WKUP_IRQn 0 */
  HAL_RADIO_TIMER_CPU_WKUP_IRQHandler();
100432fc:	f004 fe50 	bl	10047fa0 <HAL_RADIO_TIMER_CPU_WKUP_IRQHandler>
  /* USER CODE BEGIN RADIO_TIMER_CPU_WKUP_IRQn 1 */

  /* USER CODE END RADIO_TIMER_CPU_WKUP_IRQn 1 */
}
10043300:	46c0      	nop			@ (mov r8, r8)
10043302:	46bd      	mov	sp, r7
10043304:	bd80      	pop	{r7, pc}

10043306 <RADIO_TIMER_TXRX_WKUP_IRQHandler>:

/**
  * @brief This function handles RADIO_TIMER_TXRX_WKUP global interrupt.
  */
void RADIO_TIMER_TXRX_WKUP_IRQHandler(void)
{
10043306:	b580      	push	{r7, lr}
10043308:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RADIO_TIMER_TXRX_WKUP_IRQn 0 */

  /* USER CODE END RADIO_TIMER_TXRX_WKUP_IRQn 0 */
  HAL_RADIO_TIMER_TXRX_WKUP_IRQHandler();
1004330a:	f004 fe52 	bl	10047fb2 <HAL_RADIO_TIMER_TXRX_WKUP_IRQHandler>
  /* USER CODE BEGIN RADIO_TIMER_TXRX_WKUP_IRQn 1 */

  /* USER CODE END RADIO_TIMER_TXRX_WKUP_IRQn 1 */
}
1004330e:	46c0      	nop			@ (mov r8, r8)
10043310:	46bd      	mov	sp, r7
10043312:	bd80      	pop	{r7, pc}

10043314 <RADIO_TIMER_ERROR_IRQHandler>:

/**
  * @brief This function handles RADIO_TIMER_ERROR global interrupt.
  */
void RADIO_TIMER_ERROR_IRQHandler(void)
{
10043314:	b580      	push	{r7, lr}
10043316:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RADIO_TIMER_ERROR_IRQn 0 */

  /* USER CODE END RADIO_TIMER_ERROR_IRQn 0 */
  HAL_RADIO_TIMER_ERROR_IRQHandler();
10043318:	f004 fe54 	bl	10047fc4 <HAL_RADIO_TIMER_ERROR_IRQHandler>
  /* USER CODE BEGIN RADIO_TIMER_ERROR_IRQn 1 */

  /* USER CODE END RADIO_TIMER_ERROR_IRQn 1 */
}
1004331c:	46c0      	nop			@ (mov r8, r8)
1004331e:	46bd      	mov	sp, r7
10043320:	bd80      	pop	{r7, pc}

10043322 <RADIO_TXRX_IRQHandler>:

/**
  * @brief This function handles RADIO_TXRX global interrupt.
  */
void RADIO_TXRX_IRQHandler(void)
{
10043322:	b580      	push	{r7, lr}
10043324:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RADIO_TXRX_IRQn 0 */

  /* USER CODE END RADIO_TXRX_IRQn 0 */
  HAL_RADIO_TXRX_IRQHandler();
10043326:	f003 f84a 	bl	100463be <HAL_RADIO_TXRX_IRQHandler>
  /* USER CODE BEGIN RADIO_TXRX_IRQn 1 */

  /* USER CODE END RADIO_TXRX_IRQn 1 */
}
1004332a:	46c0      	nop			@ (mov r8, r8)
1004332c:	46bd      	mov	sp, r7
1004332e:	bd80      	pop	{r7, pc}

10043330 <RADIO_TXRX_SEQ_IRQHandler>:

/**
  * @brief This function handles RADIO_TXRX_SEQ global interrupt.
  */
void RADIO_TXRX_SEQ_IRQHandler(void)
{
10043330:	b580      	push	{r7, lr}
10043332:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RADIO_TXRX_SEQ_IRQn 0 */

  /* USER CODE END RADIO_TXRX_SEQ_IRQn 0 */
  HAL_RADIO_TXRX_SEQ_IRQHandler();
10043334:	f003 f86a 	bl	1004640c <HAL_RADIO_TXRX_SEQ_IRQHandler>
  /* USER CODE BEGIN RADIO_TXRX_SEQ_IRQn 1 */

  /* USER CODE END RADIO_TXRX_SEQ_IRQn 1 */
}
10043338:	46c0      	nop			@ (mov r8, r8)
1004333a:	46bd      	mov	sp, r7
1004333c:	bd80      	pop	{r7, pc}

1004333e <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
1004333e:	b580      	push	{r7, lr}
10043340:	af00      	add	r7, sp, #0
  return 1;
10043342:	2301      	movs	r3, #1
}
10043344:	0018      	movs	r0, r3
10043346:	46bd      	mov	sp, r7
10043348:	bd80      	pop	{r7, pc}

1004334a <_kill>:

int _kill(int pid, int sig)
{
1004334a:	b580      	push	{r7, lr}
1004334c:	b082      	sub	sp, #8
1004334e:	af00      	add	r7, sp, #0
10043350:	6078      	str	r0, [r7, #4]
10043352:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
10043354:	f006 fe6c 	bl	1004a030 <__errno>
10043358:	0003      	movs	r3, r0
1004335a:	2216      	movs	r2, #22
1004335c:	601a      	str	r2, [r3, #0]
  return -1;
1004335e:	2301      	movs	r3, #1
10043360:	425b      	negs	r3, r3
}
10043362:	0018      	movs	r0, r3
10043364:	46bd      	mov	sp, r7
10043366:	b002      	add	sp, #8
10043368:	bd80      	pop	{r7, pc}

1004336a <_exit>:

void _exit (int status)
{
1004336a:	b580      	push	{r7, lr}
1004336c:	b082      	sub	sp, #8
1004336e:	af00      	add	r7, sp, #0
10043370:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
10043372:	2301      	movs	r3, #1
10043374:	425a      	negs	r2, r3
10043376:	687b      	ldr	r3, [r7, #4]
10043378:	0011      	movs	r1, r2
1004337a:	0018      	movs	r0, r3
1004337c:	f7ff ffe5 	bl	1004334a <_kill>
  while (1) {}    /* Make sure we hang here */
10043380:	46c0      	nop			@ (mov r8, r8)
10043382:	e7fd      	b.n	10043380 <_exit+0x16>

10043384 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
10043384:	b580      	push	{r7, lr}
10043386:	b086      	sub	sp, #24
10043388:	af00      	add	r7, sp, #0
1004338a:	60f8      	str	r0, [r7, #12]
1004338c:	60b9      	str	r1, [r7, #8]
1004338e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
10043390:	2300      	movs	r3, #0
10043392:	617b      	str	r3, [r7, #20]
10043394:	e00a      	b.n	100433ac <_read+0x28>
  {
    *ptr++ = __io_getchar();
10043396:	e000      	b.n	1004339a <_read+0x16>
10043398:	bf00      	nop
1004339a:	0001      	movs	r1, r0
1004339c:	68bb      	ldr	r3, [r7, #8]
1004339e:	1c5a      	adds	r2, r3, #1
100433a0:	60ba      	str	r2, [r7, #8]
100433a2:	b2ca      	uxtb	r2, r1
100433a4:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
100433a6:	697b      	ldr	r3, [r7, #20]
100433a8:	3301      	adds	r3, #1
100433aa:	617b      	str	r3, [r7, #20]
100433ac:	697a      	ldr	r2, [r7, #20]
100433ae:	687b      	ldr	r3, [r7, #4]
100433b0:	429a      	cmp	r2, r3
100433b2:	dbf0      	blt.n	10043396 <_read+0x12>
  }

  return len;
100433b4:	687b      	ldr	r3, [r7, #4]
}
100433b6:	0018      	movs	r0, r3
100433b8:	46bd      	mov	sp, r7
100433ba:	b006      	add	sp, #24
100433bc:	bd80      	pop	{r7, pc}

100433be <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
100433be:	b580      	push	{r7, lr}
100433c0:	b086      	sub	sp, #24
100433c2:	af00      	add	r7, sp, #0
100433c4:	60f8      	str	r0, [r7, #12]
100433c6:	60b9      	str	r1, [r7, #8]
100433c8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
100433ca:	2300      	movs	r3, #0
100433cc:	617b      	str	r3, [r7, #20]
100433ce:	e009      	b.n	100433e4 <_write+0x26>
  {
    __io_putchar(*ptr++);
100433d0:	68bb      	ldr	r3, [r7, #8]
100433d2:	1c5a      	adds	r2, r3, #1
100433d4:	60ba      	str	r2, [r7, #8]
100433d6:	781b      	ldrb	r3, [r3, #0]
100433d8:	0018      	movs	r0, r3
100433da:	e000      	b.n	100433de <_write+0x20>
100433dc:	bf00      	nop
  for (DataIdx = 0; DataIdx < len; DataIdx++)
100433de:	697b      	ldr	r3, [r7, #20]
100433e0:	3301      	adds	r3, #1
100433e2:	617b      	str	r3, [r7, #20]
100433e4:	697a      	ldr	r2, [r7, #20]
100433e6:	687b      	ldr	r3, [r7, #4]
100433e8:	429a      	cmp	r2, r3
100433ea:	dbf1      	blt.n	100433d0 <_write+0x12>
  }
  return len;
100433ec:	687b      	ldr	r3, [r7, #4]
}
100433ee:	0018      	movs	r0, r3
100433f0:	46bd      	mov	sp, r7
100433f2:	b006      	add	sp, #24
100433f4:	bd80      	pop	{r7, pc}

100433f6 <_close>:

int _close(int file)
{
100433f6:	b580      	push	{r7, lr}
100433f8:	b082      	sub	sp, #8
100433fa:	af00      	add	r7, sp, #0
100433fc:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
100433fe:	2301      	movs	r3, #1
10043400:	425b      	negs	r3, r3
}
10043402:	0018      	movs	r0, r3
10043404:	46bd      	mov	sp, r7
10043406:	b002      	add	sp, #8
10043408:	bd80      	pop	{r7, pc}

1004340a <_fstat>:


int _fstat(int file, struct stat *st)
{
1004340a:	b580      	push	{r7, lr}
1004340c:	b082      	sub	sp, #8
1004340e:	af00      	add	r7, sp, #0
10043410:	6078      	str	r0, [r7, #4]
10043412:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
10043414:	683b      	ldr	r3, [r7, #0]
10043416:	2280      	movs	r2, #128	@ 0x80
10043418:	0192      	lsls	r2, r2, #6
1004341a:	605a      	str	r2, [r3, #4]
  return 0;
1004341c:	2300      	movs	r3, #0
}
1004341e:	0018      	movs	r0, r3
10043420:	46bd      	mov	sp, r7
10043422:	b002      	add	sp, #8
10043424:	bd80      	pop	{r7, pc}

10043426 <_isatty>:

int _isatty(int file)
{
10043426:	b580      	push	{r7, lr}
10043428:	b082      	sub	sp, #8
1004342a:	af00      	add	r7, sp, #0
1004342c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
1004342e:	2301      	movs	r3, #1
}
10043430:	0018      	movs	r0, r3
10043432:	46bd      	mov	sp, r7
10043434:	b002      	add	sp, #8
10043436:	bd80      	pop	{r7, pc}

10043438 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
10043438:	b580      	push	{r7, lr}
1004343a:	b084      	sub	sp, #16
1004343c:	af00      	add	r7, sp, #0
1004343e:	60f8      	str	r0, [r7, #12]
10043440:	60b9      	str	r1, [r7, #8]
10043442:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
10043444:	2300      	movs	r3, #0
}
10043446:	0018      	movs	r0, r3
10043448:	46bd      	mov	sp, r7
1004344a:	b004      	add	sp, #16
1004344c:	bd80      	pop	{r7, pc}
	...

10043450 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
10043450:	b580      	push	{r7, lr}
10043452:	b086      	sub	sp, #24
10043454:	af00      	add	r7, sp, #0
10043456:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
10043458:	4a14      	ldr	r2, [pc, #80]	@ (100434ac <_sbrk+0x5c>)
1004345a:	4b15      	ldr	r3, [pc, #84]	@ (100434b0 <_sbrk+0x60>)
1004345c:	1ad3      	subs	r3, r2, r3
1004345e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
10043460:	697b      	ldr	r3, [r7, #20]
10043462:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
10043464:	4b13      	ldr	r3, [pc, #76]	@ (100434b4 <_sbrk+0x64>)
10043466:	681b      	ldr	r3, [r3, #0]
10043468:	2b00      	cmp	r3, #0
1004346a:	d102      	bne.n	10043472 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
1004346c:	4b11      	ldr	r3, [pc, #68]	@ (100434b4 <_sbrk+0x64>)
1004346e:	4a12      	ldr	r2, [pc, #72]	@ (100434b8 <_sbrk+0x68>)
10043470:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
10043472:	4b10      	ldr	r3, [pc, #64]	@ (100434b4 <_sbrk+0x64>)
10043474:	681a      	ldr	r2, [r3, #0]
10043476:	687b      	ldr	r3, [r7, #4]
10043478:	18d3      	adds	r3, r2, r3
1004347a:	693a      	ldr	r2, [r7, #16]
1004347c:	429a      	cmp	r2, r3
1004347e:	d207      	bcs.n	10043490 <_sbrk+0x40>
  {
    errno = ENOMEM;
10043480:	f006 fdd6 	bl	1004a030 <__errno>
10043484:	0003      	movs	r3, r0
10043486:	220c      	movs	r2, #12
10043488:	601a      	str	r2, [r3, #0]
    return (void *)-1;
1004348a:	2301      	movs	r3, #1
1004348c:	425b      	negs	r3, r3
1004348e:	e009      	b.n	100434a4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
10043490:	4b08      	ldr	r3, [pc, #32]	@ (100434b4 <_sbrk+0x64>)
10043492:	681b      	ldr	r3, [r3, #0]
10043494:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
10043496:	4b07      	ldr	r3, [pc, #28]	@ (100434b4 <_sbrk+0x64>)
10043498:	681a      	ldr	r2, [r3, #0]
1004349a:	687b      	ldr	r3, [r7, #4]
1004349c:	18d2      	adds	r2, r2, r3
1004349e:	4b05      	ldr	r3, [pc, #20]	@ (100434b4 <_sbrk+0x64>)
100434a0:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
100434a2:	68fb      	ldr	r3, [r7, #12]
}
100434a4:	0018      	movs	r0, r3
100434a6:	46bd      	mov	sp, r7
100434a8:	b006      	add	sp, #24
100434aa:	bd80      	pop	{r7, pc}
100434ac:	20010000 	.word	0x20010000
100434b0:	00000c00 	.word	0x00000c00
100434b4:	20000800 	.word	0x20000800
100434b8:	20000d28 	.word	0x20000d28

100434bc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
100434bc:	b590      	push	{r4, r7, lr}
100434be:	b083      	sub	sp, #12
100434c0:	af00      	add	r7, sp, #0
100434c2:	0002      	movs	r2, r0
100434c4:	6039      	str	r1, [r7, #0]
100434c6:	1dfb      	adds	r3, r7, #7
100434c8:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
100434ca:	1dfb      	adds	r3, r7, #7
100434cc:	781b      	ldrb	r3, [r3, #0]
100434ce:	2b7f      	cmp	r3, #127	@ 0x7f
100434d0:	d828      	bhi.n	10043524 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
100434d2:	4a2f      	ldr	r2, [pc, #188]	@ (10043590 <__NVIC_SetPriority+0xd4>)
100434d4:	1dfb      	adds	r3, r7, #7
100434d6:	781b      	ldrb	r3, [r3, #0]
100434d8:	b25b      	sxtb	r3, r3
100434da:	089b      	lsrs	r3, r3, #2
100434dc:	33c0      	adds	r3, #192	@ 0xc0
100434de:	009b      	lsls	r3, r3, #2
100434e0:	589b      	ldr	r3, [r3, r2]
100434e2:	1dfa      	adds	r2, r7, #7
100434e4:	7812      	ldrb	r2, [r2, #0]
100434e6:	0011      	movs	r1, r2
100434e8:	2203      	movs	r2, #3
100434ea:	400a      	ands	r2, r1
100434ec:	00d2      	lsls	r2, r2, #3
100434ee:	21ff      	movs	r1, #255	@ 0xff
100434f0:	4091      	lsls	r1, r2
100434f2:	000a      	movs	r2, r1
100434f4:	43d2      	mvns	r2, r2
100434f6:	401a      	ands	r2, r3
100434f8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
100434fa:	683b      	ldr	r3, [r7, #0]
100434fc:	019b      	lsls	r3, r3, #6
100434fe:	22ff      	movs	r2, #255	@ 0xff
10043500:	401a      	ands	r2, r3
10043502:	1dfb      	adds	r3, r7, #7
10043504:	781b      	ldrb	r3, [r3, #0]
10043506:	0018      	movs	r0, r3
10043508:	2303      	movs	r3, #3
1004350a:	4003      	ands	r3, r0
1004350c:	00db      	lsls	r3, r3, #3
1004350e:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
10043510:	481f      	ldr	r0, [pc, #124]	@ (10043590 <__NVIC_SetPriority+0xd4>)
10043512:	1dfb      	adds	r3, r7, #7
10043514:	781b      	ldrb	r3, [r3, #0]
10043516:	b25b      	sxtb	r3, r3
10043518:	089b      	lsrs	r3, r3, #2
1004351a:	430a      	orrs	r2, r1
1004351c:	33c0      	adds	r3, #192	@ 0xc0
1004351e:	009b      	lsls	r3, r3, #2
10043520:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
10043522:	e031      	b.n	10043588 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
10043524:	4a1b      	ldr	r2, [pc, #108]	@ (10043594 <__NVIC_SetPriority+0xd8>)
10043526:	1dfb      	adds	r3, r7, #7
10043528:	781b      	ldrb	r3, [r3, #0]
1004352a:	0019      	movs	r1, r3
1004352c:	230f      	movs	r3, #15
1004352e:	400b      	ands	r3, r1
10043530:	3b08      	subs	r3, #8
10043532:	089b      	lsrs	r3, r3, #2
10043534:	3306      	adds	r3, #6
10043536:	009b      	lsls	r3, r3, #2
10043538:	18d3      	adds	r3, r2, r3
1004353a:	3304      	adds	r3, #4
1004353c:	681b      	ldr	r3, [r3, #0]
1004353e:	1dfa      	adds	r2, r7, #7
10043540:	7812      	ldrb	r2, [r2, #0]
10043542:	0011      	movs	r1, r2
10043544:	2203      	movs	r2, #3
10043546:	400a      	ands	r2, r1
10043548:	00d2      	lsls	r2, r2, #3
1004354a:	21ff      	movs	r1, #255	@ 0xff
1004354c:	4091      	lsls	r1, r2
1004354e:	000a      	movs	r2, r1
10043550:	43d2      	mvns	r2, r2
10043552:	401a      	ands	r2, r3
10043554:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
10043556:	683b      	ldr	r3, [r7, #0]
10043558:	019b      	lsls	r3, r3, #6
1004355a:	22ff      	movs	r2, #255	@ 0xff
1004355c:	401a      	ands	r2, r3
1004355e:	1dfb      	adds	r3, r7, #7
10043560:	781b      	ldrb	r3, [r3, #0]
10043562:	0018      	movs	r0, r3
10043564:	2303      	movs	r3, #3
10043566:	4003      	ands	r3, r0
10043568:	00db      	lsls	r3, r3, #3
1004356a:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
1004356c:	4809      	ldr	r0, [pc, #36]	@ (10043594 <__NVIC_SetPriority+0xd8>)
1004356e:	1dfb      	adds	r3, r7, #7
10043570:	781b      	ldrb	r3, [r3, #0]
10043572:	001c      	movs	r4, r3
10043574:	230f      	movs	r3, #15
10043576:	4023      	ands	r3, r4
10043578:	3b08      	subs	r3, #8
1004357a:	089b      	lsrs	r3, r3, #2
1004357c:	430a      	orrs	r2, r1
1004357e:	3306      	adds	r3, #6
10043580:	009b      	lsls	r3, r3, #2
10043582:	18c3      	adds	r3, r0, r3
10043584:	3304      	adds	r3, #4
10043586:	601a      	str	r2, [r3, #0]
}
10043588:	46c0      	nop			@ (mov r8, r8)
1004358a:	46bd      	mov	sp, r7
1004358c:	b003      	add	sp, #12
1004358e:	bd90      	pop	{r4, r7, pc}
10043590:	e000e100 	.word	0xe000e100
10043594:	e000ed00 	.word	0xe000ed00

10043598 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
10043598:	b580      	push	{r7, lr}
1004359a:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
1004359c:	f3bf 8f4f 	dsb	sy
}
100435a0:	46c0      	nop			@ (mov r8, r8)
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = ((0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
100435a2:	4b04      	ldr	r3, [pc, #16]	@ (100435b4 <__NVIC_SystemReset+0x1c>)
100435a4:	4a04      	ldr	r2, [pc, #16]	@ (100435b8 <__NVIC_SystemReset+0x20>)
100435a6:	60da      	str	r2, [r3, #12]
  __ASM volatile ("dsb 0xF":::"memory");
100435a8:	f3bf 8f4f 	dsb	sy
}
100435ac:	46c0      	nop			@ (mov r8, r8)
                 SCB_AIRCR_SYSRESETREQ_Msk);
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
100435ae:	46c0      	nop			@ (mov r8, r8)
100435b0:	e7fd      	b.n	100435ae <__NVIC_SystemReset+0x16>
100435b2:	46c0      	nop			@ (mov r8, r8)
100435b4:	e000ed00 	.word	0xe000ed00
100435b8:	05fa0004 	.word	0x05fa0004

100435bc <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
100435bc:	b590      	push	{r4, r7, lr}
100435be:	b087      	sub	sp, #28
100435c0:	af00      	add	r7, sp, #0
  uint32_t lsiBw;
#endif
  uint8_t i;
  
  /* If the reset reason is a wakeup from power save restore the context */
  if ((RCC->CSR == 0) && ((PWR->SR1 != 0)||(PWR->SR3 != 0))) {
100435c2:	4a64      	ldr	r2, [pc, #400]	@ (10043754 <SystemInit+0x198>)
100435c4:	2394      	movs	r3, #148	@ 0x94
100435c6:	58d3      	ldr	r3, [r2, r3]
100435c8:	2b00      	cmp	r3, #0
100435ca:	d10e      	bne.n	100435ea <SystemInit+0x2e>
100435cc:	4b62      	ldr	r3, [pc, #392]	@ (10043758 <SystemInit+0x19c>)
100435ce:	691b      	ldr	r3, [r3, #16]
100435d0:	2b00      	cmp	r3, #0
100435d2:	d103      	bne.n	100435dc <SystemInit+0x20>
100435d4:	4b60      	ldr	r3, [pc, #384]	@ (10043758 <SystemInit+0x19c>)
100435d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
100435d8:	2b00      	cmp	r3, #0
100435da:	d006      	beq.n	100435ea <SystemInit+0x2e>
    RAM_VR.WakeupFromSleepFlag = 1; /* A wakeup from power save occurred */
100435dc:	4b5f      	ldr	r3, [pc, #380]	@ (1004375c <SystemInit+0x1a0>)
100435de:	2201      	movs	r2, #1
100435e0:	609a      	str	r2, [r3, #8]
    CPUcontextRestore();            /* Restore the context */
100435e2:	f000 f8ff 	bl	100437e4 <CPUcontextRestore>
    /* if the context restore worked properly, we should never return here */
    while(1) { 
      NVIC_SystemReset(); 
100435e6:	f7ff ffd7 	bl	10043598 <__NVIC_SystemReset>

  /* Configure the Vector Table location */
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#else
  SCB->VTOR = (uint32_t) (__vector_table);
100435ea:	4b5d      	ldr	r3, [pc, #372]	@ (10043760 <SystemInit+0x1a4>)
100435ec:	4a5d      	ldr	r2, [pc, #372]	@ (10043764 <SystemInit+0x1a8>)
100435ee:	609a      	str	r2, [r3, #8]
#endif /* USER_VECT_TAB_ADDRESS */

  /* Store in RAM the AppBase information */
  RAM_VR.AppBase = (uint32_t) SCB->VTOR;
100435f0:	4b5b      	ldr	r3, [pc, #364]	@ (10043760 <SystemInit+0x1a4>)
100435f2:	689a      	ldr	r2, [r3, #8]
100435f4:	4b59      	ldr	r3, [pc, #356]	@ (1004375c <SystemInit+0x1a0>)
100435f6:	611a      	str	r2, [r3, #16]

  /* Enable all the RAM banks in retention during power save */
#if defined(PWR_CR2_RAMRET1)
  SET_BIT(PWR->CR2, PWR_CR2_RAMRET1);
100435f8:	4b57      	ldr	r3, [pc, #348]	@ (10043758 <SystemInit+0x19c>)
100435fa:	685a      	ldr	r2, [r3, #4]
100435fc:	4b56      	ldr	r3, [pc, #344]	@ (10043758 <SystemInit+0x19c>)
100435fe:	2120      	movs	r1, #32
10043600:	430a      	orrs	r2, r1
10043602:	605a      	str	r2, [r3, #4]
#endif /* PWR_CR2_RAMRET1 */
  
#if defined(PWR_CR2_RAMRET2)
  SET_BIT(PWR->CR2, PWR_CR2_RAMRET2);
10043604:	4b54      	ldr	r3, [pc, #336]	@ (10043758 <SystemInit+0x19c>)
10043606:	685a      	ldr	r2, [r3, #4]
10043608:	4b53      	ldr	r3, [pc, #332]	@ (10043758 <SystemInit+0x19c>)
1004360a:	2140      	movs	r1, #64	@ 0x40
1004360c:	430a      	orrs	r2, r1
1004360e:	605a      	str	r2, [r3, #4]
#endif /* PWR_CR2_RAMRET2 */
  
#if defined(PWR_CR2_RAMRET3)
  SET_BIT(PWR->CR2, PWR_CR2_RAMRET3);
10043610:	4b51      	ldr	r3, [pc, #324]	@ (10043758 <SystemInit+0x19c>)
10043612:	685a      	ldr	r2, [r3, #4]
10043614:	4b50      	ldr	r3, [pc, #320]	@ (10043758 <SystemInit+0x19c>)
10043616:	2180      	movs	r1, #128	@ 0x80
10043618:	430a      	orrs	r2, r1
1004361a:	605a      	str	r2, [r3, #4]
#endif /* PWR_CR2_GPIORET */
   
  /* SMPS setup */
  if ((CFG_HW_SMPS == SMPS_ON) || (CFG_HW_SMPS == SMPS_BYPAPSS))
  {
    while(READ_BIT(PWR->SR2, PWR_SR2_SMPSRDY) != PWR_SR2_SMPSRDY); // Wait until SMPS is ready
1004361c:	46c0      	nop			@ (mov r8, r8)
1004361e:	4b4e      	ldr	r3, [pc, #312]	@ (10043758 <SystemInit+0x19c>)
10043620:	695b      	ldr	r3, [r3, #20]
10043622:	2204      	movs	r2, #4
10043624:	4013      	ands	r3, r2
10043626:	2b04      	cmp	r3, #4
10043628:	d1f9      	bne.n	1004361e <SystemInit+0x62>
    MODIFY_REG(PWR->CR5, PWR_CR5_SMPSBOMSEL, (CFG_HW_SMPS_BOM<<PWR_CR5_SMPSBOMSEL_Pos)); // Configure the SMPS BOM
1004362a:	4b4b      	ldr	r3, [pc, #300]	@ (10043758 <SystemInit+0x19c>)
1004362c:	69db      	ldr	r3, [r3, #28]
1004362e:	2230      	movs	r2, #48	@ 0x30
10043630:	4393      	bics	r3, r2
10043632:	001a      	movs	r2, r3
10043634:	4b48      	ldr	r3, [pc, #288]	@ (10043758 <SystemInit+0x19c>)
10043636:	2120      	movs	r1, #32
10043638:	430a      	orrs	r2, r1
1004363a:	61da      	str	r2, [r3, #28]
  }
  if ((CFG_HW_SMPS == SMPS_ON) || (CFG_HW_SMPS == SMPS_OFF))
  {
    MODIFY_REG(PWR->CR5, PWR_CR5_NOSMPS, (CFG_HW_SMPS<<PWR_CR5_NOSMPS_Pos)); // SMPS ON/OFF Configuration
1004363c:	4b46      	ldr	r3, [pc, #280]	@ (10043758 <SystemInit+0x19c>)
1004363e:	69da      	ldr	r2, [r3, #28]
10043640:	4b45      	ldr	r3, [pc, #276]	@ (10043758 <SystemInit+0x19c>)
10043642:	4949      	ldr	r1, [pc, #292]	@ (10043768 <SystemInit+0x1ac>)
10043644:	400a      	ands	r2, r1
10043646:	61da      	str	r2, [r3, #28]
  }
  else
  {
    MODIFY_REG(PWR->CR5, PWR_CR5_SMPSFBYP, (1<<PWR_CR5_SMPSFBYP_Pos)); // SMPS BYPASS Configuration
  }
  MODIFY_REG(PWR->CR5, PWR_CR5_SMPSLPOPEN, (CFG_HW_SMPS_LOW_POWER<<PWR_CR5_SMPSLPOPEN_Pos)); // SMPS configuration during power save
10043648:	4b43      	ldr	r3, [pc, #268]	@ (10043758 <SystemInit+0x19c>)
1004364a:	69da      	ldr	r2, [r3, #28]
1004364c:	4b42      	ldr	r3, [pc, #264]	@ (10043758 <SystemInit+0x19c>)
1004364e:	2180      	movs	r1, #128	@ 0x80
10043650:	0049      	lsls	r1, r1, #1
10043652:	430a      	orrs	r2, r1
10043654:	61da      	str	r2, [r3, #28]
  
  /* If Trimming values from engineering in flash locations are not present load default values */
  if (*(volatile uint32_t*)VALIDITY_LOCATION != VALIDITY_TAG)
10043656:	4b45      	ldr	r3, [pc, #276]	@ (1004376c <SystemInit+0x1b0>)
10043658:	681b      	ldr	r3, [r3, #0]
1004365a:	4a45      	ldr	r2, [pc, #276]	@ (10043770 <SystemInit+0x1b4>)
1004365c:	4293      	cmp	r3, r2
1004365e:	d05b      	beq.n	10043718 <SystemInit+0x15c>
  {
#if defined(STM32WB06) || defined(STM32WB07)
    hsiCalib       = 0x1E;
10043660:	231e      	movs	r3, #30
10043662:	613b      	str	r3, [r7, #16]
    mainRegulator  = 0x08;
10043664:	2308      	movs	r3, #8
10043666:	60fb      	str	r3, [r7, #12]
    smpsOutVoltage = 0x03;
10043668:	2303      	movs	r3, #3
1004366a:	60bb      	str	r3, [r7, #8]
    lsiLpmu        = 0x08;
1004366c:	2308      	movs	r3, #8
1004366e:	607b      	str	r3, [r7, #4]

    /* Set Low Speed Internal oscillator LPMU trimming value. */
    MODIFY_REG(PWR->ENGTRIM, PWR_ENGTRIM_TRIM_LSI_LPMU, ((lsiLpmu << PWR_ENGTRIM_TRIM_LSI_LPMU_Pos) & PWR_ENGTRIM_TRIM_LSI_LPMU));
10043670:	4a39      	ldr	r2, [pc, #228]	@ (10043758 <SystemInit+0x19c>)
10043672:	2394      	movs	r3, #148	@ 0x94
10043674:	58d3      	ldr	r3, [r2, r3]
10043676:	221e      	movs	r2, #30
10043678:	4393      	bics	r3, r2
1004367a:	001a      	movs	r2, r3
1004367c:	687b      	ldr	r3, [r7, #4]
1004367e:	005b      	lsls	r3, r3, #1
10043680:	211e      	movs	r1, #30
10043682:	400b      	ands	r3, r1
10043684:	4934      	ldr	r1, [pc, #208]	@ (10043758 <SystemInit+0x19c>)
10043686:	4313      	orrs	r3, r2
10043688:	2294      	movs	r2, #148	@ 0x94
1004368a:	508b      	str	r3, [r1, r2]
    SET_BIT(PWR->ENGTRIM, PWR_ENGTRIM_TRIMLSILPMUEN);
1004368c:	4a32      	ldr	r2, [pc, #200]	@ (10043758 <SystemInit+0x19c>)
1004368e:	2394      	movs	r3, #148	@ 0x94
10043690:	58d3      	ldr	r3, [r2, r3]
10043692:	4931      	ldr	r1, [pc, #196]	@ (10043758 <SystemInit+0x19c>)
10043694:	2201      	movs	r2, #1
10043696:	4313      	orrs	r3, r2
10043698:	2294      	movs	r2, #148	@ 0x94
1004369a:	508b      	str	r3, [r1, r2]
    MODIFY_REG(RCC->CSSWCR, RCC_CSSWCR_LSISWBW, lsiBw << RCC_CSSWCR_LSISWBW_Pos);
    SET_BIT(RCC->CSSWCR, RCC_CSSWCR_LSISWTRIMEN);
#endif
    
    /* Set HSI Calibration Trimming value */
    MODIFY_REG(RCC->CSSWCR, RCC_CSSWCR_HSITRIMSW, hsiCalib << RCC_CSSWCR_HSITRIMSW_Pos);
1004369c:	4b2d      	ldr	r3, [pc, #180]	@ (10043754 <SystemInit+0x198>)
1004369e:	68db      	ldr	r3, [r3, #12]
100436a0:	4a34      	ldr	r2, [pc, #208]	@ (10043774 <SystemInit+0x1b8>)
100436a2:	4013      	ands	r3, r2
100436a4:	0019      	movs	r1, r3
100436a6:	693b      	ldr	r3, [r7, #16]
100436a8:	061a      	lsls	r2, r3, #24
100436aa:	4b2a      	ldr	r3, [pc, #168]	@ (10043754 <SystemInit+0x198>)
100436ac:	430a      	orrs	r2, r1
100436ae:	60da      	str	r2, [r3, #12]
    SET_BIT(RCC->CSSWCR, RCC_CSSWCR_HSISWTRIMEN);
100436b0:	4b28      	ldr	r3, [pc, #160]	@ (10043754 <SystemInit+0x198>)
100436b2:	68da      	ldr	r2, [r3, #12]
100436b4:	4b27      	ldr	r3, [pc, #156]	@ (10043754 <SystemInit+0x198>)
100436b6:	2180      	movs	r1, #128	@ 0x80
100436b8:	0409      	lsls	r1, r1, #16
100436ba:	430a      	orrs	r2, r1
100436bc:	60da      	str	r2, [r3, #12]
              
    /* Set Main Regulator voltage Trimming value */ 
    MODIFY_REG(PWR->ENGTRIM, PWR_ENGTRIM_TRIM_MR, ((mainRegulator << PWR_ENGTRIM_TRIM_MR_Pos) & PWR_ENGTRIM_TRIM_MR));
100436be:	4a26      	ldr	r2, [pc, #152]	@ (10043758 <SystemInit+0x19c>)
100436c0:	2394      	movs	r3, #148	@ 0x94
100436c2:	58d3      	ldr	r3, [r2, r3]
100436c4:	4a2c      	ldr	r2, [pc, #176]	@ (10043778 <SystemInit+0x1bc>)
100436c6:	401a      	ands	r2, r3
100436c8:	68fb      	ldr	r3, [r7, #12]
100436ca:	0199      	lsls	r1, r3, #6
100436cc:	23f0      	movs	r3, #240	@ 0xf0
100436ce:	009b      	lsls	r3, r3, #2
100436d0:	400b      	ands	r3, r1
100436d2:	4921      	ldr	r1, [pc, #132]	@ (10043758 <SystemInit+0x19c>)
100436d4:	4313      	orrs	r3, r2
100436d6:	2294      	movs	r2, #148	@ 0x94
100436d8:	508b      	str	r3, [r1, r2]
    SET_BIT(PWR->ENGTRIM, PWR_ENGTRIM_TRIMMREN);
100436da:	4a1f      	ldr	r2, [pc, #124]	@ (10043758 <SystemInit+0x19c>)
100436dc:	2394      	movs	r3, #148	@ 0x94
100436de:	58d3      	ldr	r3, [r2, r3]
100436e0:	491d      	ldr	r1, [pc, #116]	@ (10043758 <SystemInit+0x19c>)
100436e2:	2220      	movs	r2, #32
100436e4:	4313      	orrs	r3, r2
100436e6:	2294      	movs	r2, #148	@ 0x94
100436e8:	508b      	str	r3, [r1, r2]

    /* Set SMPS output voltage Trimming value */
    MODIFY_REG(PWR->ENGTRIM, PWR_ENGTRIM_SMPS_TRIM, ((smpsOutVoltage << PWR_ENGTRIM_SMPS_TRIM_Pos) & PWR_ENGTRIM_SMPS_TRIM));
100436ea:	4a1b      	ldr	r2, [pc, #108]	@ (10043758 <SystemInit+0x19c>)
100436ec:	2394      	movs	r3, #148	@ 0x94
100436ee:	58d3      	ldr	r3, [r2, r3]
100436f0:	4a22      	ldr	r2, [pc, #136]	@ (1004377c <SystemInit+0x1c0>)
100436f2:	401a      	ands	r2, r3
100436f4:	68bb      	ldr	r3, [r7, #8]
100436f6:	02d9      	lsls	r1, r3, #11
100436f8:	23e0      	movs	r3, #224	@ 0xe0
100436fa:	019b      	lsls	r3, r3, #6
100436fc:	400b      	ands	r3, r1
100436fe:	4916      	ldr	r1, [pc, #88]	@ (10043758 <SystemInit+0x19c>)
10043700:	4313      	orrs	r3, r2
10043702:	2294      	movs	r2, #148	@ 0x94
10043704:	508b      	str	r3, [r1, r2]
    SET_BIT(PWR->ENGTRIM, PWR_ENGTRIM_SMPSTRIMEN);    
10043706:	4a14      	ldr	r2, [pc, #80]	@ (10043758 <SystemInit+0x19c>)
10043708:	2394      	movs	r3, #148	@ 0x94
1004370a:	58d3      	ldr	r3, [r2, r3]
1004370c:	4912      	ldr	r1, [pc, #72]	@ (10043758 <SystemInit+0x19c>)
1004370e:	2280      	movs	r2, #128	@ 0x80
10043710:	00d2      	lsls	r2, r2, #3
10043712:	4313      	orrs	r3, r2
10043714:	2294      	movs	r2, #148	@ 0x94
10043716:	508b      	str	r3, [r1, r2]
  }

  /* Set all the interrupt with low priprity */
  for (i=0; i<32; i++)
10043718:	2317      	movs	r3, #23
1004371a:	18fb      	adds	r3, r7, r3
1004371c:	2200      	movs	r2, #0
1004371e:	701a      	strb	r2, [r3, #0]
10043720:	e00d      	b.n	1004373e <SystemInit+0x182>
  {
    NVIC_SetPriority((IRQn_Type)i, IRQ_LOW_PRIORITY);
10043722:	2417      	movs	r4, #23
10043724:	193b      	adds	r3, r7, r4
10043726:	781b      	ldrb	r3, [r3, #0]
10043728:	b25b      	sxtb	r3, r3
1004372a:	2103      	movs	r1, #3
1004372c:	0018      	movs	r0, r3
1004372e:	f7ff fec5 	bl	100434bc <__NVIC_SetPriority>
  for (i=0; i<32; i++)
10043732:	0021      	movs	r1, r4
10043734:	187b      	adds	r3, r7, r1
10043736:	781a      	ldrb	r2, [r3, #0]
10043738:	187b      	adds	r3, r7, r1
1004373a:	3201      	adds	r2, #1
1004373c:	701a      	strb	r2, [r3, #0]
1004373e:	2317      	movs	r3, #23
10043740:	18fb      	adds	r3, r7, r3
10043742:	781b      	ldrb	r3, [r3, #0]
10043744:	2b1f      	cmp	r3, #31
10043746:	d9ec      	bls.n	10043722 <SystemInit+0x166>
  __ASM volatile ("cpsie i" : : : "memory");
10043748:	b662      	cpsie	i
}
1004374a:	46c0      	nop			@ (mov r8, r8)
  }
  
  /* Enable all the irqs */
  __enable_irq();
}
1004374c:	46c0      	nop			@ (mov r8, r8)
1004374e:	46bd      	mov	sp, r7
10043750:	b007      	add	sp, #28
10043752:	bd90      	pop	{r4, r7, pc}
10043754:	48400000 	.word	0x48400000
10043758:	48500000 	.word	0x48500000
1004375c:	20000004 	.word	0x20000004
10043760:	e000ed00 	.word	0xe000ed00
10043764:	10040000 	.word	0x10040000
10043768:	fffffbff 	.word	0xfffffbff
1004376c:	10001ef8 	.word	0x10001ef8
10043770:	fcbceccc 	.word	0xfcbceccc
10043774:	c0ffffff 	.word	0xc0ffffff
10043778:	fffffc3f 	.word	0xfffffc3f
1004377c:	ffffc7ff 	.word	0xffffc7ff

10043780 <SystemCoreClockUpdate>:
  *
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
10043780:	b580      	push	{r7, lr}
10043782:	b082      	sub	sp, #8
10043784:	af00      	add	r7, sp, #0
  uint8_t directHSE_enabled;
  uint8_t divPrescaler;

  /* Get SYSCLK source HSE or HSI+PLL64MHz */
  directHSE_enabled = (RCC->CFGR & RCC_CFGR_HSESEL) >> RCC_CFGR_HSESEL_Pos;
10043786:	4b13      	ldr	r3, [pc, #76]	@ (100437d4 <SystemCoreClockUpdate+0x54>)
10043788:	689b      	ldr	r3, [r3, #8]
1004378a:	085b      	lsrs	r3, r3, #1
1004378c:	b2da      	uxtb	r2, r3
1004378e:	1dfb      	adds	r3, r7, #7
10043790:	2101      	movs	r1, #1
10043792:	400a      	ands	r2, r1
10043794:	701a      	strb	r2, [r3, #0]

#if defined(STM32WB06) || defined(STM32WB07)
  /* Get the clock divider */
    divPrescaler = (RCC->CFGR & RCC_CFGR_CLKSYSDIV) >> RCC_CFGR_CLKSYSDIV_Pos;
10043796:	4b0f      	ldr	r3, [pc, #60]	@ (100437d4 <SystemCoreClockUpdate+0x54>)
10043798:	689b      	ldr	r3, [r3, #8]
1004379a:	095b      	lsrs	r3, r3, #5
1004379c:	b2da      	uxtb	r2, r3
1004379e:	1dbb      	adds	r3, r7, #6
100437a0:	2107      	movs	r1, #7
100437a2:	400a      	ands	r2, r1
100437a4:	701a      	strb	r2, [r3, #0]
#else
  /* Get the clock divider */
  divPrescaler = (RCC->CFGR & RCC_CFGR_CLKSYSDIV_STATUS) >> RCC_CFGR_CLKSYSDIV_STATUS_Pos;
#endif

  if (directHSE_enabled)
100437a6:	1dfb      	adds	r3, r7, #7
100437a8:	781b      	ldrb	r3, [r3, #0]
100437aa:	2b00      	cmp	r3, #0
100437ac:	d007      	beq.n	100437be <SystemCoreClockUpdate+0x3e>
  {
    SystemCoreClock = HSE_VALUE >> (divPrescaler - 1U);
100437ae:	1dbb      	adds	r3, r7, #6
100437b0:	781b      	ldrb	r3, [r3, #0]
100437b2:	3b01      	subs	r3, #1
100437b4:	4a08      	ldr	r2, [pc, #32]	@ (100437d8 <SystemCoreClockUpdate+0x58>)
100437b6:	40da      	lsrs	r2, r3
100437b8:	4b08      	ldr	r3, [pc, #32]	@ (100437dc <SystemCoreClockUpdate+0x5c>)
100437ba:	601a      	str	r2, [r3, #0]
  }
  else
  {
    SystemCoreClock = HSI_VALUE >> divPrescaler;
  }  
}
100437bc:	e005      	b.n	100437ca <SystemCoreClockUpdate+0x4a>
    SystemCoreClock = HSI_VALUE >> divPrescaler;
100437be:	1dbb      	adds	r3, r7, #6
100437c0:	781b      	ldrb	r3, [r3, #0]
100437c2:	4a07      	ldr	r2, [pc, #28]	@ (100437e0 <SystemCoreClockUpdate+0x60>)
100437c4:	40da      	lsrs	r2, r3
100437c6:	4b05      	ldr	r3, [pc, #20]	@ (100437dc <SystemCoreClockUpdate+0x5c>)
100437c8:	601a      	str	r2, [r3, #0]
}
100437ca:	46c0      	nop			@ (mov r8, r8)
100437cc:	46bd      	mov	sp, r7
100437ce:	b002      	add	sp, #8
100437d0:	bd80      	pop	{r7, pc}
100437d2:	46c0      	nop			@ (mov r8, r8)
100437d4:	48400000 	.word	0x48400000
100437d8:	01e84800 	.word	0x01e84800
100437dc:	20000b08 	.word	0x20000b08
100437e0:	03d09000 	.word	0x03d09000

100437e4 <CPUcontextRestore>:
  *         by popping it from the stack 
  * @param  None
  * @retval None
  */
__WEAK void CPUcontextRestore(void)
{
100437e4:	b580      	push	{r7, lr}
100437e6:	af00      	add	r7, sp, #0
}
100437e8:	46c0      	nop			@ (mov r8, r8)
100437ea:	46bd      	mov	sp, r7
100437ec:	bd80      	pop	{r7, pc}
	...

100437f0 <Reset_Handler>:

	.section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
100437f0:	4810      	ldr	r0, [pc, #64]	@ (10043834 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
100437f2:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
100437f4:	f7ff fee2 	bl	100435bc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs  r1, #0
100437f8:	2100      	movs	r1, #0
  b  LoopCopyDataInit
100437fa:	e003      	b.n	10043804 <LoopCopyDataInit>

100437fc <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
100437fc:	4b0e      	ldr	r3, [pc, #56]	@ (10043838 <LoopForever+0x6>)
  ldr  r3, [r3, r1]
100437fe:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
10043800:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
10043802:	3104      	adds	r1, #4

10043804 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr  r0, =_sdata
10043804:	480d      	ldr	r0, [pc, #52]	@ (1004383c <LoopForever+0xa>)
  ldr  r3, =_edata
10043806:	4b0e      	ldr	r3, [pc, #56]	@ (10043840 <LoopForever+0xe>)
  adds  r2, r0, r1
10043808:	1842      	adds	r2, r0, r1
  cmp  r2, r3
1004380a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
1004380c:	d3f6      	bcc.n	100437fc <CopyDataInit>
  ldr  r2, =_sbss
1004380e:	4a0d      	ldr	r2, [pc, #52]	@ (10043844 <LoopForever+0x12>)
  b  LoopFillZerobss
10043810:	e002      	b.n	10043818 <LoopFillZerobss>

10043812 <FillZerobss>:

/* Zero fill the bss segment. */
FillZerobss:
  movs  r3, #0
10043812:	2300      	movs	r3, #0
  str  r3, [r2]
10043814:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
10043816:	3204      	adds	r2, #4

10043818 <LoopFillZerobss>:

LoopFillZerobss:
  ldr  r3, = _ebss
10043818:	4b0b      	ldr	r3, [pc, #44]	@ (10043848 <LoopForever+0x16>)
  cmp  r2, r3
1004381a:	429a      	cmp	r2, r3
  bcc  FillZerobss
1004381c:	d3f9      	bcc.n	10043812 <FillZerobss>
  ldr  r2, =_sbssblue
1004381e:	4a0b      	ldr	r2, [pc, #44]	@ (1004384c <LoopForever+0x1a>)
  b  LoopFillZeroBlueRam
10043820:	e002      	b.n	10043828 <LoopFillZeroBlueRam>

10043822 <FillZerobssram>:


FillZerobssram:
  movs  r3, #0
10043822:	2300      	movs	r3, #0
  str  r3, [r2]
10043824:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
10043826:	3204      	adds	r2, #4

10043828 <LoopFillZeroBlueRam>:

LoopFillZeroBlueRam:
  ldr  r3, = _ebssblue
10043828:	4b09      	ldr	r3, [pc, #36]	@ (10043850 <LoopForever+0x1e>)
  cmp  r2, r3
1004382a:	429a      	cmp	r2, r3
  bcc  FillZerobssram
1004382c:	d3f9      	bcc.n	10043822 <FillZerobssram>

/* Call the application's entry point.*/
  bl  main
1004382e:	f7fe ff0b 	bl	10042648 <main>

10043832 <LoopForever>:

LoopForever:
    b LoopForever
10043832:	e7fe      	b.n	10043832 <LoopForever>
   ldr   r0, =_estack
10043834:	20010000 	.word	0x20010000
  ldr  r3, =_sidata
10043838:	1004c2b8 	.word	0x1004c2b8
  ldr  r0, =_sdata
1004383c:	20000af4 	.word	0x20000af4
  ldr  r3, =_edata
10043840:	20000d28 	.word	0x20000d28
  ldr  r2, =_sbss
10043844:	2000017c 	.word	0x2000017c
  ldr  r3, = _ebss
10043848:	20000af4 	.word	0x20000af4
  ldr  r2, =_sbssblue
1004384c:	200000c0 	.word	0x200000c0
  ldr  r3, = _ebssblue
10043850:	2000017c 	.word	0x2000017c

10043854 <ADC_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
10043854:	e7fe      	b.n	10043854 <ADC_IRQHandler>
	...

10043858 <DW1000_read_reg>:
/*!<
 * LL functions
 * */

static inline void DW1000_read_reg(DW1000_t *dw1000, uint32_t reg,
		uint16_t offset, uint8_t *buffer, uint32_t size) {
10043858:	b580      	push	{r7, lr}
1004385a:	b084      	sub	sp, #16
1004385c:	af00      	add	r7, sp, #0
1004385e:	60f8      	str	r0, [r7, #12]
10043860:	60b9      	str	r1, [r7, #8]
10043862:	603b      	str	r3, [r7, #0]
10043864:	1dbb      	adds	r3, r7, #6
10043866:	801a      	strh	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
10043868:	b672      	cpsid	i
}
1004386a:	46c0      	nop			@ (mov r8, r8)
	__disable_irq();
	reg &= 0x3FU;
1004386c:	68bb      	ldr	r3, [r7, #8]
1004386e:	223f      	movs	r2, #63	@ 0x3f
10043870:	4013      	ands	r3, r2
10043872:	60bb      	str	r3, [r7, #8]
	HAL_GPIO_WritePin(dw1000->NSS_port, dw1000->NSS_pin, 0);
10043874:	68fb      	ldr	r3, [r7, #12]
10043876:	6858      	ldr	r0, [r3, #4]
10043878:	68fb      	ldr	r3, [r7, #12]
1004387a:	899b      	ldrh	r3, [r3, #12]
1004387c:	2200      	movs	r2, #0
1004387e:	0019      	movs	r1, r3
10043880:	f001 facf 	bl	10044e22 <HAL_GPIO_WritePin>
	if (offset & 0xFF00) {
10043884:	1dbb      	adds	r3, r7, #6
10043886:	881a      	ldrh	r2, [r3, #0]
10043888:	23ff      	movs	r3, #255	@ 0xff
1004388a:	021b      	lsls	r3, r3, #8
1004388c:	4013      	ands	r3, r2
1004388e:	d010      	beq.n	100438b2 <DW1000_read_reg+0x5a>
		reg |= 0x8040U | (offset << 8);
10043890:	1dbb      	adds	r3, r7, #6
10043892:	881b      	ldrh	r3, [r3, #0]
10043894:	021a      	lsls	r2, r3, #8
10043896:	68bb      	ldr	r3, [r7, #8]
10043898:	4313      	orrs	r3, r2
1004389a:	4a1f      	ldr	r2, [pc, #124]	@ (10043918 <DW1000_read_reg+0xc0>)
1004389c:	4313      	orrs	r3, r2
1004389e:	60bb      	str	r3, [r7, #8]
		SPI_write8(dw1000->spi, (void*) &reg, 3, DW1000_TIMEOUT);
100438a0:	68fb      	ldr	r3, [r7, #12]
100438a2:	6818      	ldr	r0, [r3, #0]
100438a4:	2308      	movs	r3, #8
100438a6:	18f9      	adds	r1, r7, r3
100438a8:	230a      	movs	r3, #10
100438aa:	2203      	movs	r2, #3
100438ac:	f000 fe5a 	bl	10044564 <SPI_write8>
100438b0:	e01c      	b.n	100438ec <DW1000_read_reg+0x94>
	} else if (offset) {
100438b2:	1dbb      	adds	r3, r7, #6
100438b4:	881b      	ldrh	r3, [r3, #0]
100438b6:	2b00      	cmp	r3, #0
100438b8:	d010      	beq.n	100438dc <DW1000_read_reg+0x84>
		reg |= 0x40U | (offset << 8);
100438ba:	1dbb      	adds	r3, r7, #6
100438bc:	881b      	ldrh	r3, [r3, #0]
100438be:	021a      	lsls	r2, r3, #8
100438c0:	68bb      	ldr	r3, [r7, #8]
100438c2:	4313      	orrs	r3, r2
100438c4:	2240      	movs	r2, #64	@ 0x40
100438c6:	4313      	orrs	r3, r2
100438c8:	60bb      	str	r3, [r7, #8]
		SPI_write8(dw1000->spi, (void*) &reg, 2, DW1000_TIMEOUT);
100438ca:	68fb      	ldr	r3, [r7, #12]
100438cc:	6818      	ldr	r0, [r3, #0]
100438ce:	2308      	movs	r3, #8
100438d0:	18f9      	adds	r1, r7, r3
100438d2:	230a      	movs	r3, #10
100438d4:	2202      	movs	r2, #2
100438d6:	f000 fe45 	bl	10044564 <SPI_write8>
100438da:	e007      	b.n	100438ec <DW1000_read_reg+0x94>
	} else {
		SPI_write8(dw1000->spi, (void*) &reg, 1, DW1000_TIMEOUT);
100438dc:	68fb      	ldr	r3, [r7, #12]
100438de:	6818      	ldr	r0, [r3, #0]
100438e0:	2308      	movs	r3, #8
100438e2:	18f9      	adds	r1, r7, r3
100438e4:	230a      	movs	r3, #10
100438e6:	2201      	movs	r2, #1
100438e8:	f000 fe3c 	bl	10044564 <SPI_write8>
	}
	SPI_read8(dw1000->spi, buffer, size, DW1000_TIMEOUT);
100438ec:	68fb      	ldr	r3, [r7, #12]
100438ee:	6818      	ldr	r0, [r3, #0]
100438f0:	69ba      	ldr	r2, [r7, #24]
100438f2:	6839      	ldr	r1, [r7, #0]
100438f4:	230a      	movs	r3, #10
100438f6:	f000 feb1 	bl	1004465c <SPI_read8>
	HAL_GPIO_WritePin(dw1000->NSS_port, dw1000->NSS_pin, 1);
100438fa:	68fb      	ldr	r3, [r7, #12]
100438fc:	6858      	ldr	r0, [r3, #4]
100438fe:	68fb      	ldr	r3, [r7, #12]
10043900:	899b      	ldrh	r3, [r3, #12]
10043902:	2201      	movs	r2, #1
10043904:	0019      	movs	r1, r3
10043906:	f001 fa8c 	bl	10044e22 <HAL_GPIO_WritePin>
  __ASM volatile ("cpsie i" : : : "memory");
1004390a:	b662      	cpsie	i
}
1004390c:	46c0      	nop			@ (mov r8, r8)
	__enable_irq();
}
1004390e:	46c0      	nop			@ (mov r8, r8)
10043910:	46bd      	mov	sp, r7
10043912:	b004      	add	sp, #16
10043914:	bd80      	pop	{r7, pc}
10043916:	46c0      	nop			@ (mov r8, r8)
10043918:	00008040 	.word	0x00008040

1004391c <DW1000_write_reg>:

static inline void DW1000_write_reg(DW1000_t *dw1000, uint32_t reg,
		uint16_t offset, uint8_t *buffer, uint32_t size) {
1004391c:	b580      	push	{r7, lr}
1004391e:	b084      	sub	sp, #16
10043920:	af00      	add	r7, sp, #0
10043922:	60f8      	str	r0, [r7, #12]
10043924:	60b9      	str	r1, [r7, #8]
10043926:	603b      	str	r3, [r7, #0]
10043928:	1dbb      	adds	r3, r7, #6
1004392a:	801a      	strh	r2, [r3, #0]
	reg = (reg & 0x3FU) | 0x80;
1004392c:	68bb      	ldr	r3, [r7, #8]
1004392e:	223f      	movs	r2, #63	@ 0x3f
10043930:	4013      	ands	r3, r2
10043932:	2280      	movs	r2, #128	@ 0x80
10043934:	4313      	orrs	r3, r2
10043936:	60bb      	str	r3, [r7, #8]
	HAL_GPIO_WritePin(dw1000->NSS_port, dw1000->NSS_pin, 0);
10043938:	68fb      	ldr	r3, [r7, #12]
1004393a:	6858      	ldr	r0, [r3, #4]
1004393c:	68fb      	ldr	r3, [r7, #12]
1004393e:	899b      	ldrh	r3, [r3, #12]
10043940:	2200      	movs	r2, #0
10043942:	0019      	movs	r1, r3
10043944:	f001 fa6d 	bl	10044e22 <HAL_GPIO_WritePin>
	if (offset & 0xFF00) {
10043948:	1dbb      	adds	r3, r7, #6
1004394a:	881a      	ldrh	r2, [r3, #0]
1004394c:	23ff      	movs	r3, #255	@ 0xff
1004394e:	021b      	lsls	r3, r3, #8
10043950:	4013      	ands	r3, r2
10043952:	d010      	beq.n	10043976 <DW1000_write_reg+0x5a>
		reg |= 0x8040U | (offset << 8);
10043954:	1dbb      	adds	r3, r7, #6
10043956:	881b      	ldrh	r3, [r3, #0]
10043958:	021a      	lsls	r2, r3, #8
1004395a:	68bb      	ldr	r3, [r7, #8]
1004395c:	4313      	orrs	r3, r2
1004395e:	4a1e      	ldr	r2, [pc, #120]	@ (100439d8 <DW1000_write_reg+0xbc>)
10043960:	4313      	orrs	r3, r2
10043962:	60bb      	str	r3, [r7, #8]
		SPI_write8(dw1000->spi, (void*) &reg, 3, DW1000_TIMEOUT);
10043964:	68fb      	ldr	r3, [r7, #12]
10043966:	6818      	ldr	r0, [r3, #0]
10043968:	2308      	movs	r3, #8
1004396a:	18f9      	adds	r1, r7, r3
1004396c:	230a      	movs	r3, #10
1004396e:	2203      	movs	r2, #3
10043970:	f000 fdf8 	bl	10044564 <SPI_write8>
10043974:	e01c      	b.n	100439b0 <DW1000_write_reg+0x94>
	} else if (offset) {
10043976:	1dbb      	adds	r3, r7, #6
10043978:	881b      	ldrh	r3, [r3, #0]
1004397a:	2b00      	cmp	r3, #0
1004397c:	d010      	beq.n	100439a0 <DW1000_write_reg+0x84>
		reg |= 0x40U | (offset << 8);
1004397e:	1dbb      	adds	r3, r7, #6
10043980:	881b      	ldrh	r3, [r3, #0]
10043982:	021a      	lsls	r2, r3, #8
10043984:	68bb      	ldr	r3, [r7, #8]
10043986:	4313      	orrs	r3, r2
10043988:	2240      	movs	r2, #64	@ 0x40
1004398a:	4313      	orrs	r3, r2
1004398c:	60bb      	str	r3, [r7, #8]
		SPI_write8(dw1000->spi, (void*) &reg, 2, DW1000_TIMEOUT);
1004398e:	68fb      	ldr	r3, [r7, #12]
10043990:	6818      	ldr	r0, [r3, #0]
10043992:	2308      	movs	r3, #8
10043994:	18f9      	adds	r1, r7, r3
10043996:	230a      	movs	r3, #10
10043998:	2202      	movs	r2, #2
1004399a:	f000 fde3 	bl	10044564 <SPI_write8>
1004399e:	e007      	b.n	100439b0 <DW1000_write_reg+0x94>
	} else {
		SPI_write8(dw1000->spi, (void*) &reg, 1, DW1000_TIMEOUT);
100439a0:	68fb      	ldr	r3, [r7, #12]
100439a2:	6818      	ldr	r0, [r3, #0]
100439a4:	2308      	movs	r3, #8
100439a6:	18f9      	adds	r1, r7, r3
100439a8:	230a      	movs	r3, #10
100439aa:	2201      	movs	r2, #1
100439ac:	f000 fdda 	bl	10044564 <SPI_write8>
	}
	SPI_write8(dw1000->spi, buffer, size, DW1000_TIMEOUT);
100439b0:	68fb      	ldr	r3, [r7, #12]
100439b2:	6818      	ldr	r0, [r3, #0]
100439b4:	69ba      	ldr	r2, [r7, #24]
100439b6:	6839      	ldr	r1, [r7, #0]
100439b8:	230a      	movs	r3, #10
100439ba:	f000 fdd3 	bl	10044564 <SPI_write8>
	HAL_GPIO_WritePin(dw1000->NSS_port, dw1000->NSS_pin, 1);
100439be:	68fb      	ldr	r3, [r7, #12]
100439c0:	6858      	ldr	r0, [r3, #4]
100439c2:	68fb      	ldr	r3, [r7, #12]
100439c4:	899b      	ldrh	r3, [r3, #12]
100439c6:	2201      	movs	r2, #1
100439c8:	0019      	movs	r1, r3
100439ca:	f001 fa2a 	bl	10044e22 <HAL_GPIO_WritePin>
}
100439ce:	46c0      	nop			@ (mov r8, r8)
100439d0:	46bd      	mov	sp, r7
100439d2:	b004      	add	sp, #16
100439d4:	bd80      	pop	{r7, pc}
100439d6:	46c0      	nop			@ (mov r8, r8)
100439d8:	00008040 	.word	0x00008040

100439dc <DW1000_init>:

/*!<
 * functions
 * */
void DW1000_init(DW1000_t *dw1000) {
100439dc:	b590      	push	{r4, r7, lr}
100439de:	b087      	sub	sp, #28
100439e0:	af02      	add	r7, sp, #8
100439e2:	6078      	str	r0, [r7, #4]
	uint32_t tmp;
	// reset
	HAL_GPIO_WritePin(dw1000->NRST_port, dw1000->NRST_pin, 0);
100439e4:	687b      	ldr	r3, [r7, #4]
100439e6:	6898      	ldr	r0, [r3, #8]
100439e8:	687b      	ldr	r3, [r7, #4]
100439ea:	89db      	ldrh	r3, [r3, #14]
100439ec:	2200      	movs	r2, #0
100439ee:	0019      	movs	r1, r3
100439f0:	f001 fa17 	bl	10044e22 <HAL_GPIO_WritePin>
	HAL_Delay(1);
100439f4:	2001      	movs	r0, #1
100439f6:	f000 ff69 	bl	100448cc <HAL_Delay>

	HAL_GPIO_WritePin(dw1000->NRST_port, dw1000->NRST_pin, 1);
100439fa:	687b      	ldr	r3, [r7, #4]
100439fc:	6898      	ldr	r0, [r3, #8]
100439fe:	687b      	ldr	r3, [r7, #4]
10043a00:	89db      	ldrh	r3, [r3, #14]
10043a02:	2201      	movs	r2, #1
10043a04:	0019      	movs	r1, r3
10043a06:	f001 fa0c 	bl	10044e22 <HAL_GPIO_WritePin>

	// check devid
	DW1000_read_reg(dw1000, DEV_ID_ID, 0, (void*) &tmp, 4);
10043a0a:	230c      	movs	r3, #12
10043a0c:	18fb      	adds	r3, r7, r3
10043a0e:	6878      	ldr	r0, [r7, #4]
10043a10:	2204      	movs	r2, #4
10043a12:	9200      	str	r2, [sp, #0]
10043a14:	2200      	movs	r2, #0
10043a16:	2100      	movs	r1, #0
10043a18:	f7ff ff1e 	bl	10043858 <DW1000_read_reg>
	if (tmp != 0xDECA0130UL) {
10043a1c:	68fb      	ldr	r3, [r7, #12]
10043a1e:	4a9c      	ldr	r2, [pc, #624]	@ (10043c90 <DW1000_init+0x2b4>)
10043a20:	4293      	cmp	r3, r2
10043a22:	d001      	beq.n	10043a28 <DW1000_init+0x4c>
		for (;;)
10043a24:	46c0      	nop			@ (mov r8, r8)
10043a26:	e7fd      	b.n	10043a24 <DW1000_init+0x48>
			;
	}

	// enable clock
	DW1000_read_reg(dw1000, PMSC_ID, PMSC_CTRL0_OFFSET, (void*) &tmp, 2);
10043a28:	240c      	movs	r4, #12
10043a2a:	193b      	adds	r3, r7, r4
10043a2c:	6878      	ldr	r0, [r7, #4]
10043a2e:	2202      	movs	r2, #2
10043a30:	9200      	str	r2, [sp, #0]
10043a32:	2200      	movs	r2, #0
10043a34:	2136      	movs	r1, #54	@ 0x36
10043a36:	f7ff ff0f 	bl	10043858 <DW1000_read_reg>
	tmp &= 0xFFFCU;	// reset sys_clk select
10043a3a:	68fb      	ldr	r3, [r7, #12]
10043a3c:	4a95      	ldr	r2, [pc, #596]	@ (10043c94 <DW1000_init+0x2b8>)
10043a3e:	4013      	ands	r3, r2
10043a40:	60fb      	str	r3, [r7, #12]
	tmp |= 0x0001U;	// select XTI as sys_clk
10043a42:	68fb      	ldr	r3, [r7, #12]
10043a44:	2201      	movs	r2, #1
10043a46:	4313      	orrs	r3, r2
10043a48:	60fb      	str	r3, [r7, #12]
	DW1000_write_reg(dw1000, PMSC_ID, PMSC_CTRL0_OFFSET, (void*) &tmp, 2);
10043a4a:	193b      	adds	r3, r7, r4
10043a4c:	6878      	ldr	r0, [r7, #4]
10043a4e:	2202      	movs	r2, #2
10043a50:	9200      	str	r2, [sp, #0]
10043a52:	2200      	movs	r2, #0
10043a54:	2136      	movs	r1, #54	@ 0x36
10043a56:	f7ff ff61 	bl	1004391c <DW1000_write_reg>

	tmp = PMSC_CTRL1_PKTSEQ_DISABLE;
10043a5a:	2300      	movs	r3, #0
10043a5c:	60fb      	str	r3, [r7, #12]
	DW1000_write_reg(dw1000, PMSC_ID, PMSC_CTRL1_OFFSET, (void*) &tmp, 2); // Disable PMSC ctrl of RF and RX clk blocks
10043a5e:	193b      	adds	r3, r7, r4
10043a60:	6878      	ldr	r0, [r7, #4]
10043a62:	2202      	movs	r2, #2
10043a64:	9200      	str	r2, [sp, #0]
10043a66:	2204      	movs	r2, #4
10043a68:	2136      	movs	r1, #54	@ 0x36
10043a6a:	f7ff ff57 	bl	1004391c <DW1000_write_reg>

	// Clear any AON auto download bits (as reset will trigger AON download)
	tmp = 0x00;
10043a6e:	2300      	movs	r3, #0
10043a70:	60fb      	str	r3, [r7, #12]
	DW1000_write_reg(dw1000, AON_ID, AON_WCFG_OFFSET, (void*) &tmp, 2);
10043a72:	193b      	adds	r3, r7, r4
10043a74:	6878      	ldr	r0, [r7, #4]
10043a76:	2202      	movs	r2, #2
10043a78:	9200      	str	r2, [sp, #0]
10043a7a:	2200      	movs	r2, #0
10043a7c:	212c      	movs	r1, #44	@ 0x2c
10043a7e:	f7ff ff4d 	bl	1004391c <DW1000_write_reg>
	// Clear the wake-up configuration
	DW1000_write_reg(dw1000, AON_ID, AON_CFG0_OFFSET, (void*) &tmp, 1);
10043a82:	193b      	adds	r3, r7, r4
10043a84:	6878      	ldr	r0, [r7, #4]
10043a86:	2201      	movs	r2, #1
10043a88:	9200      	str	r2, [sp, #0]
10043a8a:	2206      	movs	r2, #6
10043a8c:	212c      	movs	r1, #44	@ 0x2c
10043a8e:	f7ff ff45 	bl	1004391c <DW1000_write_reg>
	// Upload the new configuration
	DW1000_write_reg(dw1000, AON_ID, AON_CTRL_OFFSET, (void*) &tmp, 1); // Clear the register
10043a92:	193b      	adds	r3, r7, r4
10043a94:	6878      	ldr	r0, [r7, #4]
10043a96:	2201      	movs	r2, #1
10043a98:	9200      	str	r2, [sp, #0]
10043a9a:	2202      	movs	r2, #2
10043a9c:	212c      	movs	r1, #44	@ 0x2c
10043a9e:	f7ff ff3d 	bl	1004391c <DW1000_write_reg>
	tmp = AON_CTRL_SAVE;
10043aa2:	2302      	movs	r3, #2
10043aa4:	60fb      	str	r3, [r7, #12]
	DW1000_write_reg(dw1000, AON_ID, AON_CTRL_OFFSET, (void*) &tmp, 1);
10043aa6:	193b      	adds	r3, r7, r4
10043aa8:	6878      	ldr	r0, [r7, #4]
10043aaa:	2201      	movs	r2, #1
10043aac:	9200      	str	r2, [sp, #0]
10043aae:	2202      	movs	r2, #2
10043ab0:	212c      	movs	r1, #44	@ 0x2c
10043ab2:	f7ff ff33 	bl	1004391c <DW1000_write_reg>

	// Reset HIF, TX, RX and PMSC (set the reset bits)
	tmp = PMSC_CTRL0_RESET_ALL;
10043ab6:	2300      	movs	r3, #0
10043ab8:	60fb      	str	r3, [r7, #12]
	DW1000_write_reg(dw1000, PMSC_ID, PMSC_CTRL0_SOFTRESET_OFFSET, (void*) &tmp,
10043aba:	193b      	adds	r3, r7, r4
10043abc:	6878      	ldr	r0, [r7, #4]
10043abe:	2201      	movs	r2, #1
10043ac0:	9200      	str	r2, [sp, #0]
10043ac2:	2203      	movs	r2, #3
10043ac4:	2136      	movs	r1, #54	@ 0x36
10043ac6:	f7ff ff29 	bl	1004391c <DW1000_write_reg>
			1);

	// DW1000 needs a 10us sleep to let clk PLL lock after reset - the PLL will automatically lock after the reset
	// Could also have polled the PLL lock flag, but then the SPI needs to be < 3MHz !! So a simple delay is easier
	HAL_Delay(1);
10043aca:	2001      	movs	r0, #1
10043acc:	f000 fefe 	bl	100448cc <HAL_Delay>

	// Clear the reset bits
	tmp = PMSC_CTRL0_RESET_CLEAR;
10043ad0:	23f0      	movs	r3, #240	@ 0xf0
10043ad2:	60fb      	str	r3, [r7, #12]
	DW1000_write_reg(dw1000, PMSC_ID, PMSC_CTRL0_SOFTRESET_OFFSET, (void*) &tmp,
10043ad4:	193b      	adds	r3, r7, r4
10043ad6:	6878      	ldr	r0, [r7, #4]
10043ad8:	2201      	movs	r2, #1
10043ada:	9200      	str	r2, [sp, #0]
10043adc:	2203      	movs	r2, #3
10043ade:	2136      	movs	r1, #54	@ 0x36
10043ae0:	f7ff ff1c 	bl	1004391c <DW1000_write_reg>
			1);

	// enable clock
	DW1000_read_reg(dw1000, PMSC_ID, PMSC_CTRL0_OFFSET, (void*) &tmp, 2);
10043ae4:	193b      	adds	r3, r7, r4
10043ae6:	6878      	ldr	r0, [r7, #4]
10043ae8:	2202      	movs	r2, #2
10043aea:	9200      	str	r2, [sp, #0]
10043aec:	2200      	movs	r2, #0
10043aee:	2136      	movs	r1, #54	@ 0x36
10043af0:	f7ff feb2 	bl	10043858 <DW1000_read_reg>
	tmp &= 0xFFFCU;	// reset sys_clk select
10043af4:	68fb      	ldr	r3, [r7, #12]
10043af6:	4a67      	ldr	r2, [pc, #412]	@ (10043c94 <DW1000_init+0x2b8>)
10043af8:	4013      	ands	r3, r2
10043afa:	60fb      	str	r3, [r7, #12]
	tmp |= 0x0001U;	// select XTI as sys_clk
10043afc:	68fb      	ldr	r3, [r7, #12]
10043afe:	2201      	movs	r2, #1
10043b00:	4313      	orrs	r3, r2
10043b02:	60fb      	str	r3, [r7, #12]
	DW1000_write_reg(dw1000, PMSC_ID, PMSC_CTRL0_OFFSET, (void*) &tmp, 2);
10043b04:	193b      	adds	r3, r7, r4
10043b06:	6878      	ldr	r0, [r7, #4]
10043b08:	2202      	movs	r2, #2
10043b0a:	9200      	str	r2, [sp, #0]
10043b0c:	2200      	movs	r2, #0
10043b0e:	2136      	movs	r1, #54	@ 0x36
10043b10:	f7ff ff04 	bl	1004391c <DW1000_write_reg>

	// configure the CPLL lock detect
	tmp = EC_CTRL_PLLLCK;
10043b14:	2304      	movs	r3, #4
10043b16:	60fb      	str	r3, [r7, #12]
	DW1000_write_reg(dw1000, EXT_SYNC_ID, EC_CTRL_OFFSET, (void*) &tmp, 1);
10043b18:	193b      	adds	r3, r7, r4
10043b1a:	6878      	ldr	r0, [r7, #4]
10043b1c:	2201      	movs	r2, #1
10043b1e:	9200      	str	r2, [sp, #0]
10043b20:	2200      	movs	r2, #0
10043b22:	2124      	movs	r1, #36	@ 0x24
10043b24:	f7ff fefa 	bl	1004391c <DW1000_write_reg>

	// LDO tune config
	// Write the address
	tmp = LDOTUNE_ADDRESS;
10043b28:	2304      	movs	r3, #4
10043b2a:	60fb      	str	r3, [r7, #12]
	DW1000_write_reg(dw1000, OTP_IF_ID, OTP_ADDR, (void*) &tmp, 2);
10043b2c:	193b      	adds	r3, r7, r4
10043b2e:	6878      	ldr	r0, [r7, #4]
10043b30:	2202      	movs	r2, #2
10043b32:	9200      	str	r2, [sp, #0]
10043b34:	2204      	movs	r2, #4
10043b36:	212d      	movs	r1, #45	@ 0x2d
10043b38:	f7ff fef0 	bl	1004391c <DW1000_write_reg>

	// Perform OTP Read - Manual read mode has to be set
	tmp = OTP_CTRL_OTPREAD | OTP_CTRL_OTPRDEN;
10043b3c:	2303      	movs	r3, #3
10043b3e:	60fb      	str	r3, [r7, #12]
	DW1000_write_reg(dw1000, OTP_IF_ID, OTP_CTRL, (void*) &tmp, 1);
10043b40:	193b      	adds	r3, r7, r4
10043b42:	6878      	ldr	r0, [r7, #4]
10043b44:	2201      	movs	r2, #1
10043b46:	9200      	str	r2, [sp, #0]
10043b48:	2206      	movs	r2, #6
10043b4a:	212d      	movs	r1, #45	@ 0x2d
10043b4c:	f7ff fee6 	bl	1004391c <DW1000_write_reg>
	tmp = 0;
10043b50:	2300      	movs	r3, #0
10043b52:	60fb      	str	r3, [r7, #12]
	DW1000_write_reg(dw1000, OTP_IF_ID, OTP_CTRL, (void*) &tmp, 1);
10043b54:	193b      	adds	r3, r7, r4
10043b56:	6878      	ldr	r0, [r7, #4]
10043b58:	2201      	movs	r2, #1
10043b5a:	9200      	str	r2, [sp, #0]
10043b5c:	2206      	movs	r2, #6
10043b5e:	212d      	movs	r1, #45	@ 0x2d
10043b60:	f7ff fedc 	bl	1004391c <DW1000_write_reg>
	DW1000_read_reg(dw1000, OTP_IF_ID, OTP_RDAT, (void*) &tmp, 4);
10043b64:	193b      	adds	r3, r7, r4
10043b66:	6878      	ldr	r0, [r7, #4]
10043b68:	2204      	movs	r2, #4
10043b6a:	9200      	str	r2, [sp, #0]
10043b6c:	220a      	movs	r2, #10
10043b6e:	212d      	movs	r1, #45	@ 0x2d
10043b70:	f7ff fe72 	bl	10043858 <DW1000_read_reg>
	if ((tmp & 0xFF) != 0) {
10043b74:	68fb      	ldr	r3, [r7, #12]
10043b76:	22ff      	movs	r2, #255	@ 0xff
10043b78:	4013      	ands	r3, r2
10043b7a:	d009      	beq.n	10043b90 <DW1000_init+0x1b4>
		tmp = OTP_SF_LDO_KICK;
10043b7c:	2302      	movs	r3, #2
10043b7e:	60fb      	str	r3, [r7, #12]
		DW1000_write_reg(dw1000, OTP_IF_ID, OTP_SF, (void*) &tmp, 1); // Set load LDO kick bit
10043b80:	193b      	adds	r3, r7, r4
10043b82:	6878      	ldr	r0, [r7, #4]
10043b84:	2201      	movs	r2, #1
10043b86:	9200      	str	r2, [sp, #0]
10043b88:	2212      	movs	r2, #18
10043b8a:	212d      	movs	r1, #45	@ 0x2d
10043b8c:	f7ff fec6 	bl	1004391c <DW1000_write_reg>
	}

	// xtrim OTP
	// Write the address
	tmp = XTRIM_ADDRESS;
10043b90:	231e      	movs	r3, #30
10043b92:	60fb      	str	r3, [r7, #12]
	DW1000_write_reg(dw1000, OTP_IF_ID, OTP_ADDR, (void*) &tmp, 2);
10043b94:	240c      	movs	r4, #12
10043b96:	193b      	adds	r3, r7, r4
10043b98:	6878      	ldr	r0, [r7, #4]
10043b9a:	2202      	movs	r2, #2
10043b9c:	9200      	str	r2, [sp, #0]
10043b9e:	2204      	movs	r2, #4
10043ba0:	212d      	movs	r1, #45	@ 0x2d
10043ba2:	f7ff febb 	bl	1004391c <DW1000_write_reg>

	// Perform OTP Read - Manual read mode has to be set
	tmp = OTP_CTRL_OTPREAD | OTP_CTRL_OTPRDEN;
10043ba6:	2303      	movs	r3, #3
10043ba8:	60fb      	str	r3, [r7, #12]
	DW1000_write_reg(dw1000, OTP_IF_ID, OTP_CTRL, (void*) &tmp, 1);
10043baa:	193b      	adds	r3, r7, r4
10043bac:	6878      	ldr	r0, [r7, #4]
10043bae:	2201      	movs	r2, #1
10043bb0:	9200      	str	r2, [sp, #0]
10043bb2:	2206      	movs	r2, #6
10043bb4:	212d      	movs	r1, #45	@ 0x2d
10043bb6:	f7ff feb1 	bl	1004391c <DW1000_write_reg>
	tmp = 0x00;
10043bba:	2300      	movs	r3, #0
10043bbc:	60fb      	str	r3, [r7, #12]
	DW1000_write_reg(dw1000, OTP_IF_ID, OTP_CTRL, (void*) &tmp, 1); // OTPREAD is self clearing but OTPRDEN is not
10043bbe:	193b      	adds	r3, r7, r4
10043bc0:	6878      	ldr	r0, [r7, #4]
10043bc2:	2201      	movs	r2, #1
10043bc4:	9200      	str	r2, [sp, #0]
10043bc6:	2206      	movs	r2, #6
10043bc8:	212d      	movs	r1, #45	@ 0x2d
10043bca:	f7ff fea7 	bl	1004391c <DW1000_write_reg>

	// Read read data, available 40ns after rising edge of OTP_READ

	DW1000_read_reg(dw1000, OTP_IF_ID, OTP_RDAT, (void*) &tmp, 4);
10043bce:	193b      	adds	r3, r7, r4
10043bd0:	6878      	ldr	r0, [r7, #4]
10043bd2:	2204      	movs	r2, #4
10043bd4:	9200      	str	r2, [sp, #0]
10043bd6:	220a      	movs	r2, #10
10043bd8:	212d      	movs	r1, #45	@ 0x2d
10043bda:	f7ff fe3d 	bl	10043858 <DW1000_read_reg>
	tmp &= 0xffff;
10043bde:	68fb      	ldr	r3, [r7, #12]
10043be0:	041b      	lsls	r3, r3, #16
10043be2:	0c1b      	lsrs	r3, r3, #16
10043be4:	60fb      	str	r3, [r7, #12]

	if ((tmp & 0x1F) == 0) // A value of 0 means that the crystal has not been trimmed
10043be6:	68fb      	ldr	r3, [r7, #12]
10043be8:	221f      	movs	r2, #31
10043bea:	4013      	ands	r3, r2
10043bec:	d101      	bne.n	10043bf2 <DW1000_init+0x216>
			{
		tmp = FS_XTALT_MIDRANGE; // Set to mid-range if no calibration value inside
10043bee:	2310      	movs	r3, #16
10043bf0:	60fb      	str	r3, [r7, #12]
	}
	// Configure XTAL trim
	uint8_t reg_val = (3 << 5) | (tmp & FS_XTALT_MASK);
10043bf2:	68fb      	ldr	r3, [r7, #12]
10043bf4:	b2db      	uxtb	r3, r3
10043bf6:	221f      	movs	r2, #31
10043bf8:	4013      	ands	r3, r2
10043bfa:	b2db      	uxtb	r3, r3
10043bfc:	2260      	movs	r2, #96	@ 0x60
10043bfe:	4313      	orrs	r3, r2
10043c00:	b2da      	uxtb	r2, r3
10043c02:	210b      	movs	r1, #11
10043c04:	187b      	adds	r3, r7, r1
10043c06:	701a      	strb	r2, [r3, #0]
	DW1000_write_reg(dw1000, FS_CTRL_ID, FS_XTALT_OFFSET, (void*) &reg_val, 1);
10043c08:	187b      	adds	r3, r7, r1
10043c0a:	6878      	ldr	r0, [r7, #4]
10043c0c:	2201      	movs	r2, #1
10043c0e:	9200      	str	r2, [sp, #0]
10043c10:	220e      	movs	r2, #14
10043c12:	212b      	movs	r1, #43	@ 0x2b
10043c14:	f7ff fe82 	bl	1004391c <DW1000_write_reg>

	// force enable LDE
	tmp = 0x0301U;
10043c18:	4b1f      	ldr	r3, [pc, #124]	@ (10043c98 <DW1000_init+0x2bc>)
10043c1a:	60fb      	str	r3, [r7, #12]
	DW1000_write_reg(dw1000, PMSC_ID, PMSC_CTRL0_OFFSET, (void*) &tmp, 2);
10043c1c:	240c      	movs	r4, #12
10043c1e:	193b      	adds	r3, r7, r4
10043c20:	6878      	ldr	r0, [r7, #4]
10043c22:	2202      	movs	r2, #2
10043c24:	9200      	str	r2, [sp, #0]
10043c26:	2200      	movs	r2, #0
10043c28:	2136      	movs	r1, #54	@ 0x36
10043c2a:	f7ff fe77 	bl	1004391c <DW1000_write_reg>
	tmp = OTP_CTRL_LDELOAD;
10043c2e:	2380      	movs	r3, #128	@ 0x80
10043c30:	021b      	lsls	r3, r3, #8
10043c32:	60fb      	str	r3, [r7, #12]
	DW1000_write_reg(dw1000, OTP_IF_ID, OTP_CTRL, (void*) &tmp, 2); // Set load LDE kick bit
10043c34:	193b      	adds	r3, r7, r4
10043c36:	6878      	ldr	r0, [r7, #4]
10043c38:	2202      	movs	r2, #2
10043c3a:	9200      	str	r2, [sp, #0]
10043c3c:	2206      	movs	r2, #6
10043c3e:	212d      	movs	r1, #45	@ 0x2d
10043c40:	f7ff fe6c 	bl	1004391c <DW1000_write_reg>
	HAL_Delay(1);
10043c44:	2001      	movs	r0, #1
10043c46:	f000 fe41 	bl	100448cc <HAL_Delay>
	DW1000_read_reg(dw1000, PMSC_ID, PMSC_CTRL0_OFFSET, (void*) &tmp, 2);
10043c4a:	193b      	adds	r3, r7, r4
10043c4c:	6878      	ldr	r0, [r7, #4]
10043c4e:	2202      	movs	r2, #2
10043c50:	9200      	str	r2, [sp, #0]
10043c52:	2200      	movs	r2, #0
10043c54:	2136      	movs	r1, #54	@ 0x36
10043c56:	f7ff fdff 	bl	10043858 <DW1000_read_reg>
	tmp &= 0xFE00U;
10043c5a:	68fa      	ldr	r2, [r7, #12]
10043c5c:	23fe      	movs	r3, #254	@ 0xfe
10043c5e:	021b      	lsls	r3, r3, #8
10043c60:	4013      	ands	r3, r2
10043c62:	60fb      	str	r3, [r7, #12]
	DW1000_write_reg(dw1000, PMSC_ID, PMSC_CTRL0_OFFSET, (void*) &tmp, 2);
10043c64:	193b      	adds	r3, r7, r4
10043c66:	6878      	ldr	r0, [r7, #4]
10043c68:	2202      	movs	r2, #2
10043c6a:	9200      	str	r2, [sp, #0]
10043c6c:	2200      	movs	r2, #0
10043c6e:	2136      	movs	r1, #54	@ 0x36
10043c70:	f7ff fe54 	bl	1004391c <DW1000_write_reg>

	// AON
	tmp = 0x00;
10043c74:	2300      	movs	r3, #0
10043c76:	60fb      	str	r3, [r7, #12]
	DW1000_write_reg(dw1000, AON_ID, AON_CFG1_OFFSET, (void*) &tmp, 1);
10043c78:	193b      	adds	r3, r7, r4
10043c7a:	6878      	ldr	r0, [r7, #4]
10043c7c:	2201      	movs	r2, #1
10043c7e:	9200      	str	r2, [sp, #0]
10043c80:	220a      	movs	r2, #10
10043c82:	212c      	movs	r1, #44	@ 0x2c
10043c84:	f7ff fe4a 	bl	1004391c <DW1000_write_reg>
}
10043c88:	46c0      	nop			@ (mov r8, r8)
10043c8a:	46bd      	mov	sp, r7
10043c8c:	b005      	add	sp, #20
10043c8e:	bd90      	pop	{r4, r7, pc}
10043c90:	deca0130 	.word	0xdeca0130
10043c94:	0000fffc 	.word	0x0000fffc
10043c98:	00000301 	.word	0x00000301

10043c9c <DW1000_config>:

uint8_t DW1000_config(DW1000_t *dw1000, DW1000_config_t *cfg) {
10043c9c:	b5f0      	push	{r4, r5, r6, r7, lr}
10043c9e:	b08d      	sub	sp, #52	@ 0x34
10043ca0:	af02      	add	r7, sp, #8
10043ca2:	6078      	str	r0, [r7, #4]
10043ca4:	6039      	str	r1, [r7, #0]
	uint32_t tmp = 0;
10043ca6:	2300      	movs	r3, #0
10043ca8:	623b      	str	r3, [r7, #32]
	uint32_t sysCFGreg;
	uint16_t reg16 = 0x28F4; // rx code 9 (lde_replicaCoeff)
10043caa:	241a      	movs	r4, #26
10043cac:	193b      	adds	r3, r7, r4
10043cae:	4ae5      	ldr	r2, [pc, #916]	@ (10044044 <DW1000_config+0x3a8>)
10043cb0:	801a      	strh	r2, [r3, #0]

	DW1000_read_reg(dw1000, SYS_CFG_ID, 0x00, (void*) &sysCFGreg, 4);
10043cb2:	231c      	movs	r3, #28
10043cb4:	18fb      	adds	r3, r7, r3
10043cb6:	6878      	ldr	r0, [r7, #4]
10043cb8:	2204      	movs	r2, #4
10043cba:	9200      	str	r2, [sp, #0]
10043cbc:	2200      	movs	r2, #0
10043cbe:	2104      	movs	r1, #4
10043cc0:	f7ff fdca 	bl	10043858 <DW1000_read_reg>
	if (DWT_BR_110K == cfg->dataRate) {
10043cc4:	683b      	ldr	r3, [r7, #0]
10043cc6:	79db      	ldrb	r3, [r3, #7]
10043cc8:	2b00      	cmp	r3, #0
10043cca:	d10b      	bne.n	10043ce4 <DW1000_config+0x48>
		sysCFGreg |= SYS_CFG_RXM110K;
10043ccc:	69fb      	ldr	r3, [r7, #28]
10043cce:	2280      	movs	r2, #128	@ 0x80
10043cd0:	03d2      	lsls	r2, r2, #15
10043cd2:	4313      	orrs	r3, r2
10043cd4:	61fb      	str	r3, [r7, #28]
		reg16 >>= 3; // lde_replicaCoeff must be divided by 8
10043cd6:	193b      	adds	r3, r7, r4
10043cd8:	881b      	ldrh	r3, [r3, #0]
10043cda:	08db      	lsrs	r3, r3, #3
10043cdc:	b29a      	uxth	r2, r3
10043cde:	193b      	adds	r3, r7, r4
10043ce0:	801a      	strh	r2, [r3, #0]
10043ce2:	e003      	b.n	10043cec <DW1000_config+0x50>
	} else {
		sysCFGreg &= (~SYS_CFG_RXM110K);
10043ce4:	69fb      	ldr	r3, [r7, #28]
10043ce6:	4ad8      	ldr	r2, [pc, #864]	@ (10044048 <DW1000_config+0x3ac>)
10043ce8:	4013      	ands	r3, r2
10043cea:	61fb      	str	r3, [r7, #28]
	}

	sysCFGreg &= ~SYS_CFG_PHR_MODE_11;
10043cec:	69fb      	ldr	r3, [r7, #28]
10043cee:	4ad7      	ldr	r2, [pc, #860]	@ (1004404c <DW1000_config+0x3b0>)
10043cf0:	4013      	ands	r3, r2
10043cf2:	61fb      	str	r3, [r7, #28]
	sysCFGreg |= (SYS_CFG_PHR_MODE_11
			& ((uint32_t) cfg->phrMode << SYS_CFG_PHR_MODE_SHFT));
10043cf4:	683b      	ldr	r3, [r7, #0]
10043cf6:	7a1b      	ldrb	r3, [r3, #8]
10043cf8:	041a      	lsls	r2, r3, #16
10043cfa:	23c0      	movs	r3, #192	@ 0xc0
10043cfc:	029b      	lsls	r3, r3, #10
10043cfe:	401a      	ands	r2, r3
	sysCFGreg |= (SYS_CFG_PHR_MODE_11
10043d00:	69fb      	ldr	r3, [r7, #28]
10043d02:	4313      	orrs	r3, r2
10043d04:	61fb      	str	r3, [r7, #28]

	DW1000_write_reg(dw1000, SYS_CFG_ID, 0x00, (void*) &sysCFGreg, 4);
10043d06:	231c      	movs	r3, #28
10043d08:	18fb      	adds	r3, r7, r3
10043d0a:	6878      	ldr	r0, [r7, #4]
10043d0c:	2204      	movs	r2, #4
10043d0e:	9200      	str	r2, [sp, #0]
10043d10:	2200      	movs	r2, #0
10043d12:	2104      	movs	r1, #4
10043d14:	f7ff fe02 	bl	1004391c <DW1000_write_reg>

	// Set the lde_replicaCoeff
	DW1000_write_reg(dw1000, LDE_IF_ID, LDE_REPC_OFFSET, (void*) &reg16, 2);
10043d18:	231a      	movs	r3, #26
10043d1a:	18fb      	adds	r3, r7, r3
10043d1c:	49cc      	ldr	r1, [pc, #816]	@ (10044050 <DW1000_config+0x3b4>)
10043d1e:	6878      	ldr	r0, [r7, #4]
10043d20:	2202      	movs	r2, #2
10043d22:	9200      	str	r2, [sp, #0]
10043d24:	000a      	movs	r2, r1
10043d26:	212e      	movs	r1, #46	@ 0x2e
10043d28:	f7ff fdf8 	bl	1004391c <DW1000_write_reg>

	tmp = LDE_PARAM1;
10043d2c:	236d      	movs	r3, #109	@ 0x6d
10043d2e:	623b      	str	r3, [r7, #32]
	DW1000_write_reg(dw1000, LDE_IF_ID, LDE_CFG1_OFFSET, (void*) &tmp, 1); // 8-bit configuration register
10043d30:	2420      	movs	r4, #32
10043d32:	193b      	adds	r3, r7, r4
10043d34:	49c7      	ldr	r1, [pc, #796]	@ (10044054 <DW1000_config+0x3b8>)
10043d36:	6878      	ldr	r0, [r7, #4]
10043d38:	2201      	movs	r2, #1
10043d3a:	9200      	str	r2, [sp, #0]
10043d3c:	000a      	movs	r2, r1
10043d3e:	212e      	movs	r1, #46	@ 0x2e
10043d40:	f7ff fdec 	bl	1004391c <DW1000_write_reg>

	if (dw1000_cfg.prf - DWT_PRF_16M) {
10043d44:	4bc4      	ldr	r3, [pc, #784]	@ (10044058 <DW1000_config+0x3bc>)
10043d46:	785b      	ldrb	r3, [r3, #1]
10043d48:	2b01      	cmp	r3, #1
10043d4a:	d00b      	beq.n	10043d64 <DW1000_config+0xc8>
		tmp = LDE_PARAM3_64;
10043d4c:	4bc3      	ldr	r3, [pc, #780]	@ (1004405c <DW1000_config+0x3c0>)
10043d4e:	623b      	str	r3, [r7, #32]
		DW1000_write_reg(dw1000, LDE_IF_ID, LDE_CFG2_OFFSET, (void*) &tmp, 2); // 16-bit LDE configuration tuning register
10043d50:	193b      	adds	r3, r7, r4
10043d52:	49c3      	ldr	r1, [pc, #780]	@ (10044060 <DW1000_config+0x3c4>)
10043d54:	6878      	ldr	r0, [r7, #4]
10043d56:	2202      	movs	r2, #2
10043d58:	9200      	str	r2, [sp, #0]
10043d5a:	000a      	movs	r2, r1
10043d5c:	212e      	movs	r1, #46	@ 0x2e
10043d5e:	f7ff fddd 	bl	1004391c <DW1000_write_reg>
10043d62:	e00b      	b.n	10043d7c <DW1000_config+0xe0>
	} else {
		tmp = LDE_PARAM3_16;
10043d64:	4bbf      	ldr	r3, [pc, #764]	@ (10044064 <DW1000_config+0x3c8>)
10043d66:	623b      	str	r3, [r7, #32]
		DW1000_write_reg(dw1000, LDE_IF_ID, LDE_CFG2_OFFSET, (void*) &tmp, 2);
10043d68:	2320      	movs	r3, #32
10043d6a:	18fb      	adds	r3, r7, r3
10043d6c:	49bc      	ldr	r1, [pc, #752]	@ (10044060 <DW1000_config+0x3c4>)
10043d6e:	6878      	ldr	r0, [r7, #4]
10043d70:	2202      	movs	r2, #2
10043d72:	9200      	str	r2, [sp, #0]
10043d74:	000a      	movs	r2, r1
10043d76:	212e      	movs	r1, #46	@ 0x2e
10043d78:	f7ff fdd0 	bl	1004391c <DW1000_write_reg>
	}

	// Configure PLL2/RF PLL block CFG/TUNE (for a given channel)
	tmp = FS_PLLCFG_CH2;
10043d7c:	4bba      	ldr	r3, [pc, #744]	@ (10044068 <DW1000_config+0x3cc>)
10043d7e:	623b      	str	r3, [r7, #32]
	DW1000_write_reg(dw1000, FS_CTRL_ID, FS_PLLCFG_OFFSET, (void*) &tmp, 4);
10043d80:	2420      	movs	r4, #32
10043d82:	193b      	adds	r3, r7, r4
10043d84:	6878      	ldr	r0, [r7, #4]
10043d86:	2204      	movs	r2, #4
10043d88:	9200      	str	r2, [sp, #0]
10043d8a:	2207      	movs	r2, #7
10043d8c:	212b      	movs	r1, #43	@ 0x2b
10043d8e:	f7ff fdc5 	bl	1004391c <DW1000_write_reg>
	tmp = FS_PLLTUNE_CH2;
10043d92:	2326      	movs	r3, #38	@ 0x26
10043d94:	623b      	str	r3, [r7, #32]
	DW1000_write_reg(dw1000, FS_CTRL_ID, FS_PLLTUNE_OFFSET, (void*) &tmp, 1);
10043d96:	193b      	adds	r3, r7, r4
10043d98:	6878      	ldr	r0, [r7, #4]
10043d9a:	2201      	movs	r2, #1
10043d9c:	9200      	str	r2, [sp, #0]
10043d9e:	220b      	movs	r2, #11
10043da0:	212b      	movs	r1, #43	@ 0x2b
10043da2:	f7ff fdbb 	bl	1004391c <DW1000_write_reg>

	// Configure RF RX blocks (for specified channel/bandwidth)
	tmp = RF_RXCTRLH_NBW;
10043da6:	23d8      	movs	r3, #216	@ 0xd8
10043da8:	623b      	str	r3, [r7, #32]
	DW1000_write_reg(dw1000, RF_CONF_ID, RF_RXCTRLH_OFFSET, (void*) &tmp, 1);
10043daa:	193b      	adds	r3, r7, r4
10043dac:	6878      	ldr	r0, [r7, #4]
10043dae:	2201      	movs	r2, #1
10043db0:	9200      	str	r2, [sp, #0]
10043db2:	220b      	movs	r2, #11
10043db4:	2128      	movs	r1, #40	@ 0x28
10043db6:	f7ff fdb1 	bl	1004391c <DW1000_write_reg>

	// Configure RF TX blocks (for specified channel and PRF)
	// Configure RF TX control
	tmp = RF_TXCTRL_CH2;
10043dba:	4bac      	ldr	r3, [pc, #688]	@ (1004406c <DW1000_config+0x3d0>)
10043dbc:	623b      	str	r3, [r7, #32]
	DW1000_write_reg(dw1000, RF_CONF_ID, RF_TXCTRL_OFFSET, (void*) &tmp, 4);
10043dbe:	193b      	adds	r3, r7, r4
10043dc0:	6878      	ldr	r0, [r7, #4]
10043dc2:	2204      	movs	r2, #4
10043dc4:	9200      	str	r2, [sp, #0]
10043dc6:	220c      	movs	r2, #12
10043dc8:	2128      	movs	r1, #40	@ 0x28
10043dca:	f7ff fda7 	bl	1004391c <DW1000_write_reg>

	// Configure the baseband parameters (for specified PRF, bit rate, PAC, and SFD settings)
	// DTUNE0
	tmp = DRX_TUNE0b_110K_NSTD;
10043dce:	2316      	movs	r3, #22
10043dd0:	623b      	str	r3, [r7, #32]
	DW1000_write_reg(dw1000, DRX_CONF_ID, DRX_TUNE0b_OFFSET, (void*) &tmp, 2);
10043dd2:	193b      	adds	r3, r7, r4
10043dd4:	6878      	ldr	r0, [r7, #4]
10043dd6:	2202      	movs	r2, #2
10043dd8:	9200      	str	r2, [sp, #0]
10043dda:	2202      	movs	r2, #2
10043ddc:	2127      	movs	r1, #39	@ 0x27
10043dde:	f7ff fd9d 	bl	1004391c <DW1000_write_reg>

	// DTUNE1
	tmp = DRX_TUNE1a_PRF64;
10043de2:	238d      	movs	r3, #141	@ 0x8d
10043de4:	623b      	str	r3, [r7, #32]
	DW1000_write_reg(dw1000, DRX_CONF_ID, DRX_TUNE1a_OFFSET, (void*) &tmp, 2);
10043de6:	193b      	adds	r3, r7, r4
10043de8:	6878      	ldr	r0, [r7, #4]
10043dea:	2202      	movs	r2, #2
10043dec:	9200      	str	r2, [sp, #0]
10043dee:	2204      	movs	r2, #4
10043df0:	2127      	movs	r1, #39	@ 0x27
10043df2:	f7ff fd93 	bl	1004391c <DW1000_write_reg>
	tmp = DRX_TUNE1b_110K;
10043df6:	2364      	movs	r3, #100	@ 0x64
10043df8:	623b      	str	r3, [r7, #32]
	DW1000_write_reg(dw1000, DRX_CONF_ID, DRX_TUNE1b_OFFSET, (void*) &tmp, 2);
10043dfa:	193b      	adds	r3, r7, r4
10043dfc:	6878      	ldr	r0, [r7, #4]
10043dfe:	2202      	movs	r2, #2
10043e00:	9200      	str	r2, [sp, #0]
10043e02:	2206      	movs	r2, #6
10043e04:	2127      	movs	r1, #39	@ 0x27
10043e06:	f7ff fd89 	bl	1004391c <DW1000_write_reg>

	// DTUNE2
	tmp = DRX_TUNE2_PRF64_PAC32;
10043e0a:	4b99      	ldr	r3, [pc, #612]	@ (10044070 <DW1000_config+0x3d4>)
10043e0c:	623b      	str	r3, [r7, #32]
	DW1000_write_reg(dw1000, DRX_CONF_ID, DRX_TUNE2_OFFSET, (void*) &tmp, 4);
10043e0e:	193b      	adds	r3, r7, r4
10043e10:	6878      	ldr	r0, [r7, #4]
10043e12:	2204      	movs	r2, #4
10043e14:	9200      	str	r2, [sp, #0]
10043e16:	2208      	movs	r2, #8
10043e18:	2127      	movs	r1, #39	@ 0x27
10043e1a:	f7ff fd7f 	bl	1004391c <DW1000_write_reg>

	// DTUNE3 (SFD timeout)
	// Don't allow 0 - SFD timeout will always be enabled
	if (cfg->sfdTO == 0) {
10043e1e:	683b      	ldr	r3, [r7, #0]
10043e20:	895b      	ldrh	r3, [r3, #10]
10043e22:	2b00      	cmp	r3, #0
10043e24:	d102      	bne.n	10043e2c <DW1000_config+0x190>
		cfg->sfdTO = DWT_SFDTOC_DEF;
10043e26:	683b      	ldr	r3, [r7, #0]
10043e28:	4a92      	ldr	r2, [pc, #584]	@ (10044074 <DW1000_config+0x3d8>)
10043e2a:	815a      	strh	r2, [r3, #10]
	}
	tmp = cfg->sfdTO;
10043e2c:	683b      	ldr	r3, [r7, #0]
10043e2e:	895b      	ldrh	r3, [r3, #10]
10043e30:	623b      	str	r3, [r7, #32]
	DW1000_write_reg(dw1000, DRX_CONF_ID, DRX_SFDTOC_OFFSET, (void*) &tmp, 2);
10043e32:	2420      	movs	r4, #32
10043e34:	193b      	adds	r3, r7, r4
10043e36:	6878      	ldr	r0, [r7, #4]
10043e38:	2202      	movs	r2, #2
10043e3a:	9200      	str	r2, [sp, #0]
10043e3c:	2220      	movs	r2, #32
10043e3e:	2127      	movs	r1, #39	@ 0x27
10043e40:	f7ff fd6c 	bl	1004391c <DW1000_write_reg>

	// Configure AGC parameters
	tmp = AGC_TUNE2_VAL;
10043e44:	4b8c      	ldr	r3, [pc, #560]	@ (10044078 <DW1000_config+0x3dc>)
10043e46:	623b      	str	r3, [r7, #32]
	DW1000_write_reg(dw1000, AGC_CFG_STS_ID, 0xC, (void*) &tmp, 4);
10043e48:	193b      	adds	r3, r7, r4
10043e4a:	6878      	ldr	r0, [r7, #4]
10043e4c:	2204      	movs	r2, #4
10043e4e:	9200      	str	r2, [sp, #0]
10043e50:	220c      	movs	r2, #12
10043e52:	2123      	movs	r1, #35	@ 0x23
10043e54:	f7ff fd62 	bl	1004391c <DW1000_write_reg>
	tmp = AGC_TUNE1_64M;
10043e58:	4b88      	ldr	r3, [pc, #544]	@ (1004407c <DW1000_config+0x3e0>)
10043e5a:	623b      	str	r3, [r7, #32]
	DW1000_write_reg(dw1000, AGC_CFG_STS_ID, 0x4, (void*) &tmp, 2);
10043e5c:	193b      	adds	r3, r7, r4
10043e5e:	6878      	ldr	r0, [r7, #4]
10043e60:	2202      	movs	r2, #2
10043e62:	9200      	str	r2, [sp, #0]
10043e64:	2204      	movs	r2, #4
10043e66:	2123      	movs	r1, #35	@ 0x23
10043e68:	f7ff fd58 	bl	1004391c <DW1000_write_reg>

	// Set (non-standard) user SFD for improved performance,
	uint8_t nsSfd_result = 0;
10043e6c:	2527      	movs	r5, #39	@ 0x27
10043e6e:	197b      	adds	r3, r7, r5
10043e70:	2200      	movs	r2, #0
10043e72:	701a      	strb	r2, [r3, #0]
	uint8_t useDWnsSFD = 0;
10043e74:	2626      	movs	r6, #38	@ 0x26
10043e76:	19bb      	adds	r3, r7, r6
10043e78:	2200      	movs	r2, #0
10043e7a:	701a      	strb	r2, [r3, #0]
	if (cfg->nsSFD) {
10043e7c:	683b      	ldr	r3, [r7, #0]
10043e7e:	799b      	ldrb	r3, [r3, #6]
10043e80:	2b00      	cmp	r3, #0
10043e82:	d00f      	beq.n	10043ea4 <DW1000_config+0x208>
		// Write non standard (DW) SFD length
		tmp = DW_NS_SFD_LEN_110K;
10043e84:	2340      	movs	r3, #64	@ 0x40
10043e86:	623b      	str	r3, [r7, #32]
		DW1000_write_reg(dw1000, USR_SFD_ID, 0x00, (void*) &tmp, 1);
10043e88:	193b      	adds	r3, r7, r4
10043e8a:	6878      	ldr	r0, [r7, #4]
10043e8c:	2201      	movs	r2, #1
10043e8e:	9200      	str	r2, [sp, #0]
10043e90:	2200      	movs	r2, #0
10043e92:	2121      	movs	r1, #33	@ 0x21
10043e94:	f7ff fd42 	bl	1004391c <DW1000_write_reg>
		nsSfd_result = 3;
10043e98:	197b      	adds	r3, r7, r5
10043e9a:	2203      	movs	r2, #3
10043e9c:	701a      	strb	r2, [r3, #0]
		useDWnsSFD = 1;
10043e9e:	19bb      	adds	r3, r7, r6
10043ea0:	2201      	movs	r2, #1
10043ea2:	701a      	strb	r2, [r3, #0]
	}

	uint8_t chan = cfg->chan;
10043ea4:	2125      	movs	r1, #37	@ 0x25
10043ea6:	187b      	adds	r3, r7, r1
10043ea8:	683a      	ldr	r2, [r7, #0]
10043eaa:	7812      	ldrb	r2, [r2, #0]
10043eac:	701a      	strb	r2, [r3, #0]
	uint32_t regval = (CHAN_CTRL_TX_CHAN_MASK
			& (chan << CHAN_CTRL_TX_CHAN_SHIFT))
10043eae:	187b      	adds	r3, r7, r1
10043eb0:	781b      	ldrb	r3, [r3, #0]
10043eb2:	220f      	movs	r2, #15
10043eb4:	401a      	ands	r2, r3
			| // Transmit Channel
			(CHAN_CTRL_RX_CHAN_MASK & (chan << CHAN_CTRL_RX_CHAN_SHIFT))
10043eb6:	187b      	adds	r3, r7, r1
10043eb8:	781b      	ldrb	r3, [r3, #0]
10043eba:	011b      	lsls	r3, r3, #4
10043ebc:	21ff      	movs	r1, #255	@ 0xff
10043ebe:	400b      	ands	r3, r1
			| // Transmit Channel
10043ec0:	431a      	orrs	r2, r3
			| // Receive Channel
			(CHAN_CTRL_RXFPRF_MASK
					& ((uint32_t) cfg->prf << CHAN_CTRL_RXFPRF_SHIFT))
10043ec2:	683b      	ldr	r3, [r7, #0]
10043ec4:	785b      	ldrb	r3, [r3, #1]
10043ec6:	0499      	lsls	r1, r3, #18
10043ec8:	23c0      	movs	r3, #192	@ 0xc0
10043eca:	031b      	lsls	r3, r3, #12
10043ecc:	400b      	ands	r3, r1
			| // Receive Channel
10043ece:	431a      	orrs	r2, r3
			| // RX PRF
			((CHAN_CTRL_TNSSFD | CHAN_CTRL_RNSSFD)
					& ((uint32_t) nsSfd_result << CHAN_CTRL_TNSSFD_SHIFT))
10043ed0:	2327      	movs	r3, #39	@ 0x27
10043ed2:	18fb      	adds	r3, r7, r3
10043ed4:	781b      	ldrb	r3, [r3, #0]
10043ed6:	0519      	lsls	r1, r3, #20
10043ed8:	23c0      	movs	r3, #192	@ 0xc0
10043eda:	039b      	lsls	r3, r3, #14
10043edc:	400b      	ands	r3, r1
			| // RX PRF
10043ede:	431a      	orrs	r2, r3
			| // nsSFD enable RX&TX
			(CHAN_CTRL_DWSFD & ((uint32_t) useDWnsSFD << CHAN_CTRL_DWSFD_SHIFT))
10043ee0:	2326      	movs	r3, #38	@ 0x26
10043ee2:	18fb      	adds	r3, r7, r3
10043ee4:	781b      	ldrb	r3, [r3, #0]
10043ee6:	0459      	lsls	r1, r3, #17
10043ee8:	2380      	movs	r3, #128	@ 0x80
10043eea:	029b      	lsls	r3, r3, #10
10043eec:	400b      	ands	r3, r1
			| // nsSFD enable RX&TX
10043eee:	431a      	orrs	r2, r3
			| // Use DW nsSFD
			(CHAN_CTRL_TX_PCOD_MASK
					& ((uint32_t) cfg->txCode << CHAN_CTRL_TX_PCOD_SHIFT)) | // TX Preamble Code
10043ef0:	683b      	ldr	r3, [r7, #0]
10043ef2:	791b      	ldrb	r3, [r3, #4]
10043ef4:	0599      	lsls	r1, r3, #22
10043ef6:	23f8      	movs	r3, #248	@ 0xf8
10043ef8:	04db      	lsls	r3, r3, #19
10043efa:	400b      	ands	r3, r1
			| // Use DW nsSFD
10043efc:	431a      	orrs	r2, r3
			(CHAN_CTRL_RX_PCOD_MASK
					& ((uint32_t) cfg->rxCode << CHAN_CTRL_RX_PCOD_SHIFT)); // RX Preamble Code
10043efe:	683b      	ldr	r3, [r7, #0]
10043f00:	795b      	ldrb	r3, [r3, #5]
10043f02:	06db      	lsls	r3, r3, #27
					& ((uint32_t) cfg->txCode << CHAN_CTRL_TX_PCOD_SHIFT)) | // TX Preamble Code
10043f04:	4313      	orrs	r3, r2
	uint32_t regval = (CHAN_CTRL_TX_CHAN_MASK
10043f06:	617b      	str	r3, [r7, #20]

	DW1000_write_reg(dw1000, CHAN_CTRL_ID, 0x00, (void*) &regval, 4);
10043f08:	2314      	movs	r3, #20
10043f0a:	18fb      	adds	r3, r7, r3
10043f0c:	6878      	ldr	r0, [r7, #4]
10043f0e:	2204      	movs	r2, #4
10043f10:	9200      	str	r2, [sp, #0]
10043f12:	2200      	movs	r2, #0
10043f14:	211f      	movs	r1, #31
10043f16:	f7ff fd01 	bl	1004391c <DW1000_write_reg>

	// Set up TX Preamble Size, PRF and Data Rate
	txFCTRL = ((uint32_t) (cfg->txPreambLength | cfg->prf)
10043f1a:	683b      	ldr	r3, [r7, #0]
10043f1c:	789a      	ldrb	r2, [r3, #2]
10043f1e:	683b      	ldr	r3, [r7, #0]
10043f20:	785b      	ldrb	r3, [r3, #1]
10043f22:	4313      	orrs	r3, r2
10043f24:	b2db      	uxtb	r3, r3
			<< TX_FCTRL_TXPRF_SHFT)
10043f26:	041a      	lsls	r2, r3, #16
			| ((uint32_t) cfg->dataRate << TX_FCTRL_TXBR_SHFT);
10043f28:	683b      	ldr	r3, [r7, #0]
10043f2a:	79db      	ldrb	r3, [r3, #7]
10043f2c:	035b      	lsls	r3, r3, #13
10043f2e:	431a      	orrs	r2, r3
	txFCTRL = ((uint32_t) (cfg->txPreambLength | cfg->prf)
10043f30:	4b53      	ldr	r3, [pc, #332]	@ (10044080 <DW1000_config+0x3e4>)
10043f32:	601a      	str	r2, [r3, #0]

	DW1000_write_reg(dw1000, TX_FCTRL_ID, 0x00, (void*) &txFCTRL, 4);
10043f34:	4b52      	ldr	r3, [pc, #328]	@ (10044080 <DW1000_config+0x3e4>)
10043f36:	6878      	ldr	r0, [r7, #4]
10043f38:	2204      	movs	r2, #4
10043f3a:	9200      	str	r2, [sp, #0]
10043f3c:	2200      	movs	r2, #0
10043f3e:	2108      	movs	r1, #8
10043f40:	f7ff fcec 	bl	1004391c <DW1000_write_reg>

	// Request TX start and TRX off at the same time
	tmp = SYS_CTRL_TXSTRT | SYS_CTRL_TRXOFF;
10043f44:	2342      	movs	r3, #66	@ 0x42
10043f46:	623b      	str	r3, [r7, #32]
	DW1000_write_reg(dw1000, SYS_CTRL_ID, SYS_CTRL_OFFSET, (void*) &tmp, 1);
10043f48:	2420      	movs	r4, #32
10043f4a:	193b      	adds	r3, r7, r4
10043f4c:	6878      	ldr	r0, [r7, #4]
10043f4e:	2201      	movs	r2, #1
10043f50:	9200      	str	r2, [sp, #0]
10043f52:	2200      	movs	r2, #0
10043f54:	210d      	movs	r1, #13
10043f56:	f7ff fce1 	bl	1004391c <DW1000_write_reg>

	// set rx antenna delay
	tmp = RX_ANT_DLY;
10043f5a:	4b4a      	ldr	r3, [pc, #296]	@ (10044084 <DW1000_config+0x3e8>)
10043f5c:	623b      	str	r3, [r7, #32]
	DW1000_write_reg(dw1000, LDE_IF_ID, LDE_RXANTD_OFFSET, (void*) &tmp, 2);
10043f5e:	193b      	adds	r3, r7, r4
10043f60:	4949      	ldr	r1, [pc, #292]	@ (10044088 <DW1000_config+0x3ec>)
10043f62:	6878      	ldr	r0, [r7, #4]
10043f64:	2202      	movs	r2, #2
10043f66:	9200      	str	r2, [sp, #0]
10043f68:	000a      	movs	r2, r1
10043f6a:	212e      	movs	r1, #46	@ 0x2e
10043f6c:	f7ff fcd6 	bl	1004391c <DW1000_write_reg>
	// set tx antenna delay
	tmp = TX_ANT_DLY;
10043f70:	4b44      	ldr	r3, [pc, #272]	@ (10044084 <DW1000_config+0x3e8>)
10043f72:	623b      	str	r3, [r7, #32]
	DW1000_write_reg(dw1000, LDE_IF_ID, TX_ANTD_OFFSET, (void*) &tmp, 2);
10043f74:	193b      	adds	r3, r7, r4
10043f76:	6878      	ldr	r0, [r7, #4]
10043f78:	2202      	movs	r2, #2
10043f7a:	9200      	str	r2, [sp, #0]
10043f7c:	2200      	movs	r2, #0
10043f7e:	212e      	movs	r1, #46	@ 0x2e
10043f80:	f7ff fccc 	bl	1004391c <DW1000_write_reg>

	/* tx specific functions */
	if (dw1000->tx) {
10043f84:	687b      	ldr	r3, [r7, #4]
10043f86:	7c1b      	ldrb	r3, [r3, #16]
10043f88:	2201      	movs	r2, #1
10043f8a:	4013      	ands	r3, r2
10043f8c:	b2db      	uxtb	r3, r3
10043f8e:	2b00      	cmp	r3, #0
10043f90:	d038      	beq.n	10044004 <DW1000_config+0x368>
		// set rx after tx delay
		uint32_t val;
		DW1000_read_reg(dw1000, ACK_RESP_T_ID, 0x00, (void*) &val, 4); // Read ACK_RESP_T_ID register
10043f92:	250c      	movs	r5, #12
10043f94:	197b      	adds	r3, r7, r5
10043f96:	6878      	ldr	r0, [r7, #4]
10043f98:	2204      	movs	r2, #4
10043f9a:	9200      	str	r2, [sp, #0]
10043f9c:	2200      	movs	r2, #0
10043f9e:	211a      	movs	r1, #26
10043fa0:	f7ff fc5a 	bl	10043858 <DW1000_read_reg>
		val &= ~(ACK_RESP_T_W4R_TIM_MASK); // Clear the timer (19:0)
10043fa4:	68fb      	ldr	r3, [r7, #12]
10043fa6:	0d1b      	lsrs	r3, r3, #20
10043fa8:	051b      	lsls	r3, r3, #20
10043faa:	60fb      	str	r3, [r7, #12]
		val |= (POLL_TX_TO_RESP_RX_DLY_UUS & ACK_RESP_T_W4R_TIM_MASK); // In UWB microseconds (e.g. turn the receiver on 20uus after TX)
10043fac:	68fb      	ldr	r3, [r7, #12]
10043fae:	2296      	movs	r2, #150	@ 0x96
10043fb0:	0052      	lsls	r2, r2, #1
10043fb2:	4313      	orrs	r3, r2
10043fb4:	60fb      	str	r3, [r7, #12]
		DW1000_write_reg(dw1000, ACK_RESP_T_ID, 0x00, (void*) &val, 4);
10043fb6:	197b      	adds	r3, r7, r5
10043fb8:	6878      	ldr	r0, [r7, #4]
10043fba:	2204      	movs	r2, #4
10043fbc:	9200      	str	r2, [sp, #0]
10043fbe:	2200      	movs	r2, #0
10043fc0:	211a      	movs	r1, #26
10043fc2:	f7ff fcab 	bl	1004391c <DW1000_write_reg>

		uint32_t time = RESP_RX_TIMEOUT_UUS;
10043fc6:	4b31      	ldr	r3, [pc, #196]	@ (1004408c <DW1000_config+0x3f0>)
10043fc8:	60bb      	str	r3, [r7, #8]
		// set tx timeout
		DW1000_write_reg(dw1000, RX_FWTO_ID, RX_FWTO_OFFSET, (void*) &time, 2);
10043fca:	2308      	movs	r3, #8
10043fcc:	18fb      	adds	r3, r7, r3
10043fce:	6878      	ldr	r0, [r7, #4]
10043fd0:	2202      	movs	r2, #2
10043fd2:	9200      	str	r2, [sp, #0]
10043fd4:	2200      	movs	r2, #0
10043fd6:	210c      	movs	r1, #12
10043fd8:	f7ff fca0 	bl	1004391c <DW1000_write_reg>
		DW1000_read_reg(dw1000, SYS_CFG_ID, 0x03, (void*) &tmp, 1); // Read at offset 3 to get the upper byte only
10043fdc:	193b      	adds	r3, r7, r4
10043fde:	6878      	ldr	r0, [r7, #4]
10043fe0:	2201      	movs	r2, #1
10043fe2:	9200      	str	r2, [sp, #0]
10043fe4:	2203      	movs	r2, #3
10043fe6:	2104      	movs	r1, #4
10043fe8:	f7ff fc36 	bl	10043858 <DW1000_read_reg>
		tmp |= (SYS_CFG_RXWTOE >> 24); // Shift RXWTOE mask as we read the upper byte only
10043fec:	6a3b      	ldr	r3, [r7, #32]
10043fee:	2210      	movs	r2, #16
10043ff0:	4313      	orrs	r3, r2
10043ff2:	623b      	str	r3, [r7, #32]
		// OR in 32bit value (1 bit set), I know this is in high byte.

		DW1000_write_reg(dw1000, SYS_CFG_ID, 0x03, (void*) &tmp, 1); // Write at offset 3 to write the upper byte only
10043ff4:	193b      	adds	r3, r7, r4
10043ff6:	6878      	ldr	r0, [r7, #4]
10043ff8:	2201      	movs	r2, #1
10043ffa:	9200      	str	r2, [sp, #0]
10043ffc:	2203      	movs	r2, #3
10043ffe:	2104      	movs	r1, #4
10044000:	f7ff fc8c 	bl	1004391c <DW1000_write_reg>

	}
	/* end of tx specific functions */

	// set preamble timeout
	tmp = PRE_TIMEOUT;
10044004:	2320      	movs	r3, #32
10044006:	623b      	str	r3, [r7, #32]
	DW1000_write_reg(dw1000, DRX_CONF_ID, DRX_PRETOC_OFFSET, (void*) &tmp, 2);
10044008:	2320      	movs	r3, #32
1004400a:	18fb      	adds	r3, r7, r3
1004400c:	6878      	ldr	r0, [r7, #4]
1004400e:	2202      	movs	r2, #2
10044010:	9200      	str	r2, [sp, #0]
10044012:	2224      	movs	r2, #36	@ 0x24
10044014:	2127      	movs	r1, #39	@ 0x27
10044016:	f7ff fc81 	bl	1004391c <DW1000_write_reg>

	uint32_t sys_status;
	DW1000_read_reg(dw1000, SYS_STATUS_ID, 0x00, (void*) &sys_status, 4); // Read at offset 3 to get the upper 2 bytes out of 5
1004401a:	2310      	movs	r3, #16
1004401c:	18fb      	adds	r3, r7, r3
1004401e:	6878      	ldr	r0, [r7, #4]
10044020:	2204      	movs	r2, #4
10044022:	9200      	str	r2, [sp, #0]
10044024:	2200      	movs	r2, #0
10044026:	210f      	movs	r1, #15
10044028:	f7ff fc16 	bl	10043858 <DW1000_read_reg>
	if (sys_status & 0x2) {
1004402c:	693b      	ldr	r3, [r7, #16]
1004402e:	2202      	movs	r2, #2
10044030:	4013      	ands	r3, r2
10044032:	d001      	beq.n	10044038 <DW1000_config+0x39c>
		return 1;
10044034:	2301      	movs	r3, #1
10044036:	e000      	b.n	1004403a <DW1000_config+0x39e>
	} else {
		return 0;
10044038:	2300      	movs	r3, #0
	}

}
1004403a:	0018      	movs	r0, r3
1004403c:	46bd      	mov	sp, r7
1004403e:	b00b      	add	sp, #44	@ 0x2c
10044040:	bdf0      	pop	{r4, r5, r6, r7, pc}
10044042:	46c0      	nop			@ (mov r8, r8)
10044044:	000028f4 	.word	0x000028f4
10044048:	ffbfffff 	.word	0xffbfffff
1004404c:	fffcffff 	.word	0xfffcffff
10044050:	00002804 	.word	0x00002804
10044054:	00000806 	.word	0x00000806
10044058:	20000b0c 	.word	0x20000b0c
1004405c:	00000607 	.word	0x00000607
10044060:	00001806 	.word	0x00001806
10044064:	00001607 	.word	0x00001607
10044068:	08400508 	.word	0x08400508
1004406c:	00045ca0 	.word	0x00045ca0
10044070:	353b015e 	.word	0x353b015e
10044074:	00001041 	.word	0x00001041
10044078:	2502a907 	.word	0x2502a907
1004407c:	0000889b 	.word	0x0000889b
10044080:	20000804 	.word	0x20000804
10044084:	00004034 	.word	0x00004034
10044088:	00001804 	.word	0x00001804
1004408c:	00001388 	.word	0x00001388

10044090 <get_tx_timestamp_u64>:

static uint64_t get_tx_timestamp_u64(DW1000_t *dw1000) {
10044090:	b5f0      	push	{r4, r5, r6, r7, lr}
10044092:	b08d      	sub	sp, #52	@ 0x34
10044094:	af02      	add	r7, sp, #8
10044096:	6178      	str	r0, [r7, #20]
	uint8_t ts_tab[5];
	uint64_t ts = 0;
10044098:	2200      	movs	r2, #0
1004409a:	2300      	movs	r3, #0
1004409c:	623a      	str	r2, [r7, #32]
1004409e:	627b      	str	r3, [r7, #36]	@ 0x24
	int8_t i;
	DW1000_read_reg(dw1000, TX_TIME_ID, TX_TIME_TX_STAMP_OFFSET,
100440a0:	2308      	movs	r3, #8
100440a2:	2610      	movs	r6, #16
100440a4:	199b      	adds	r3, r3, r6
100440a6:	19db      	adds	r3, r3, r7
100440a8:	6978      	ldr	r0, [r7, #20]
100440aa:	2205      	movs	r2, #5
100440ac:	9200      	str	r2, [sp, #0]
100440ae:	2200      	movs	r2, #0
100440b0:	2117      	movs	r1, #23
100440b2:	f7ff fbd1 	bl	10043858 <DW1000_read_reg>
			(void*) &ts_tab, TX_TIME_TX_STAMP_LEN);
	for (i = 4; i >= 0; i--) {
100440b6:	230f      	movs	r3, #15
100440b8:	199b      	adds	r3, r3, r6
100440ba:	19db      	adds	r3, r3, r7
100440bc:	2204      	movs	r2, #4
100440be:	701a      	strb	r2, [r3, #0]
100440c0:	e02d      	b.n	1004411e <get_tx_timestamp_u64+0x8e>
		ts <<= 8;
100440c2:	6a3b      	ldr	r3, [r7, #32]
100440c4:	0e1b      	lsrs	r3, r3, #24
100440c6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
100440c8:	0215      	lsls	r5, r2, #8
100440ca:	431d      	orrs	r5, r3
100440cc:	6a3b      	ldr	r3, [r7, #32]
100440ce:	021c      	lsls	r4, r3, #8
100440d0:	623c      	str	r4, [r7, #32]
100440d2:	627d      	str	r5, [r7, #36]	@ 0x24
		ts |= ts_tab[i];
100440d4:	200f      	movs	r0, #15
100440d6:	2110      	movs	r1, #16
100440d8:	1843      	adds	r3, r0, r1
100440da:	19db      	adds	r3, r3, r7
100440dc:	781b      	ldrb	r3, [r3, #0]
100440de:	b25b      	sxtb	r3, r3
100440e0:	2208      	movs	r2, #8
100440e2:	1852      	adds	r2, r2, r1
100440e4:	19d2      	adds	r2, r2, r7
100440e6:	5cd3      	ldrb	r3, [r2, r3]
100440e8:	60bb      	str	r3, [r7, #8]
100440ea:	2300      	movs	r3, #0
100440ec:	60fb      	str	r3, [r7, #12]
100440ee:	6a3b      	ldr	r3, [r7, #32]
100440f0:	68b9      	ldr	r1, [r7, #8]
100440f2:	68fa      	ldr	r2, [r7, #12]
100440f4:	000e      	movs	r6, r1
100440f6:	431e      	orrs	r6, r3
100440f8:	603e      	str	r6, [r7, #0]
100440fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
100440fc:	431a      	orrs	r2, r3
100440fe:	607a      	str	r2, [r7, #4]
10044100:	683a      	ldr	r2, [r7, #0]
10044102:	687b      	ldr	r3, [r7, #4]
10044104:	623a      	str	r2, [r7, #32]
10044106:	627b      	str	r3, [r7, #36]	@ 0x24
	for (i = 4; i >= 0; i--) {
10044108:	2110      	movs	r1, #16
1004410a:	1843      	adds	r3, r0, r1
1004410c:	19db      	adds	r3, r3, r7
1004410e:	781b      	ldrb	r3, [r3, #0]
10044110:	b25b      	sxtb	r3, r3
10044112:	b2db      	uxtb	r3, r3
10044114:	3b01      	subs	r3, #1
10044116:	b2da      	uxtb	r2, r3
10044118:	1843      	adds	r3, r0, r1
1004411a:	19db      	adds	r3, r3, r7
1004411c:	701a      	strb	r2, [r3, #0]
1004411e:	230f      	movs	r3, #15
10044120:	2210      	movs	r2, #16
10044122:	189b      	adds	r3, r3, r2
10044124:	19db      	adds	r3, r3, r7
10044126:	781b      	ldrb	r3, [r3, #0]
10044128:	2b7f      	cmp	r3, #127	@ 0x7f
1004412a:	d9ca      	bls.n	100440c2 <get_tx_timestamp_u64+0x32>
	}
	return ts;
1004412c:	6a3a      	ldr	r2, [r7, #32]
1004412e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
10044130:	0010      	movs	r0, r2
10044132:	0019      	movs	r1, r3
10044134:	46bd      	mov	sp, r7
10044136:	b00b      	add	sp, #44	@ 0x2c
10044138:	bdf0      	pop	{r4, r5, r6, r7, pc}

1004413a <get_rx_timestamp_u64>:

static uint64_t get_rx_timestamp_u64(DW1000_t *dw1000) {
1004413a:	b5f0      	push	{r4, r5, r6, r7, lr}
1004413c:	b08d      	sub	sp, #52	@ 0x34
1004413e:	af02      	add	r7, sp, #8
10044140:	6178      	str	r0, [r7, #20]
	uint8_t ts_tab[5];
	uint64_t ts = 0;
10044142:	2200      	movs	r2, #0
10044144:	2300      	movs	r3, #0
10044146:	623a      	str	r2, [r7, #32]
10044148:	627b      	str	r3, [r7, #36]	@ 0x24
	int8_t i;
	DW1000_read_reg(dw1000, RX_TIME_ID, RX_TIME_RX_STAMP_OFFSET,
1004414a:	2308      	movs	r3, #8
1004414c:	2610      	movs	r6, #16
1004414e:	199b      	adds	r3, r3, r6
10044150:	19db      	adds	r3, r3, r7
10044152:	6978      	ldr	r0, [r7, #20]
10044154:	2205      	movs	r2, #5
10044156:	9200      	str	r2, [sp, #0]
10044158:	2200      	movs	r2, #0
1004415a:	2115      	movs	r1, #21
1004415c:	f7ff fb7c 	bl	10043858 <DW1000_read_reg>
			(void*) &ts_tab, RX_TIME_RX_STAMP_LEN);
	for (i = 4; i >= 0; i--) {
10044160:	230f      	movs	r3, #15
10044162:	199b      	adds	r3, r3, r6
10044164:	19db      	adds	r3, r3, r7
10044166:	2204      	movs	r2, #4
10044168:	701a      	strb	r2, [r3, #0]
1004416a:	e02d      	b.n	100441c8 <get_rx_timestamp_u64+0x8e>
		ts <<= 8;
1004416c:	6a3b      	ldr	r3, [r7, #32]
1004416e:	0e1b      	lsrs	r3, r3, #24
10044170:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
10044172:	0215      	lsls	r5, r2, #8
10044174:	431d      	orrs	r5, r3
10044176:	6a3b      	ldr	r3, [r7, #32]
10044178:	021c      	lsls	r4, r3, #8
1004417a:	623c      	str	r4, [r7, #32]
1004417c:	627d      	str	r5, [r7, #36]	@ 0x24
		ts |= ts_tab[i];
1004417e:	200f      	movs	r0, #15
10044180:	2110      	movs	r1, #16
10044182:	1843      	adds	r3, r0, r1
10044184:	19db      	adds	r3, r3, r7
10044186:	781b      	ldrb	r3, [r3, #0]
10044188:	b25b      	sxtb	r3, r3
1004418a:	2208      	movs	r2, #8
1004418c:	1852      	adds	r2, r2, r1
1004418e:	19d2      	adds	r2, r2, r7
10044190:	5cd3      	ldrb	r3, [r2, r3]
10044192:	60bb      	str	r3, [r7, #8]
10044194:	2300      	movs	r3, #0
10044196:	60fb      	str	r3, [r7, #12]
10044198:	6a3b      	ldr	r3, [r7, #32]
1004419a:	68b9      	ldr	r1, [r7, #8]
1004419c:	68fa      	ldr	r2, [r7, #12]
1004419e:	000e      	movs	r6, r1
100441a0:	431e      	orrs	r6, r3
100441a2:	603e      	str	r6, [r7, #0]
100441a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
100441a6:	431a      	orrs	r2, r3
100441a8:	607a      	str	r2, [r7, #4]
100441aa:	683a      	ldr	r2, [r7, #0]
100441ac:	687b      	ldr	r3, [r7, #4]
100441ae:	623a      	str	r2, [r7, #32]
100441b0:	627b      	str	r3, [r7, #36]	@ 0x24
	for (i = 4; i >= 0; i--) {
100441b2:	2110      	movs	r1, #16
100441b4:	1843      	adds	r3, r0, r1
100441b6:	19db      	adds	r3, r3, r7
100441b8:	781b      	ldrb	r3, [r3, #0]
100441ba:	b25b      	sxtb	r3, r3
100441bc:	b2db      	uxtb	r3, r3
100441be:	3b01      	subs	r3, #1
100441c0:	b2da      	uxtb	r2, r3
100441c2:	1843      	adds	r3, r0, r1
100441c4:	19db      	adds	r3, r3, r7
100441c6:	701a      	strb	r2, [r3, #0]
100441c8:	230f      	movs	r3, #15
100441ca:	2210      	movs	r2, #16
100441cc:	189b      	adds	r3, r3, r2
100441ce:	19db      	adds	r3, r3, r7
100441d0:	781b      	ldrb	r3, [r3, #0]
100441d2:	2b7f      	cmp	r3, #127	@ 0x7f
100441d4:	d9ca      	bls.n	1004416c <get_rx_timestamp_u64+0x32>
	}
	return ts;
100441d6:	6a3a      	ldr	r2, [r7, #32]
100441d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
100441da:	0010      	movs	r0, r2
100441dc:	0019      	movs	r1, r3
100441de:	46bd      	mov	sp, r7
100441e0:	b00b      	add	sp, #44	@ 0x2c
100441e2:	bdf0      	pop	{r4, r5, r6, r7, pc}

100441e4 <final_msg_set_ts>:

static void final_msg_set_ts(uint8_t *ts_field, uint64_t ts) {
100441e4:	b5b0      	push	{r4, r5, r7, lr}
100441e6:	b086      	sub	sp, #24
100441e8:	af00      	add	r7, sp, #0
100441ea:	60f8      	str	r0, [r7, #12]
100441ec:	603a      	str	r2, [r7, #0]
100441ee:	607b      	str	r3, [r7, #4]
	int8_t i;
	for (i = 0; i < FINAL_MSG_TS_LEN; i++) {
100441f0:	2317      	movs	r3, #23
100441f2:	18fb      	adds	r3, r7, r3
100441f4:	2200      	movs	r2, #0
100441f6:	701a      	strb	r2, [r3, #0]
100441f8:	e01b      	b.n	10044232 <final_msg_set_ts+0x4e>
		ts_field[i] = (uint8_t) ts;
100441fa:	2017      	movs	r0, #23
100441fc:	183b      	adds	r3, r7, r0
100441fe:	781b      	ldrb	r3, [r3, #0]
10044200:	b25b      	sxtb	r3, r3
10044202:	68fa      	ldr	r2, [r7, #12]
10044204:	18d1      	adds	r1, r2, r3
10044206:	683a      	ldr	r2, [r7, #0]
10044208:	687b      	ldr	r3, [r7, #4]
1004420a:	1c13      	adds	r3, r2, #0
1004420c:	b2db      	uxtb	r3, r3
1004420e:	700b      	strb	r3, [r1, #0]
		ts >>= 8;
10044210:	687b      	ldr	r3, [r7, #4]
10044212:	061b      	lsls	r3, r3, #24
10044214:	683a      	ldr	r2, [r7, #0]
10044216:	0a14      	lsrs	r4, r2, #8
10044218:	431c      	orrs	r4, r3
1004421a:	687b      	ldr	r3, [r7, #4]
1004421c:	0a1d      	lsrs	r5, r3, #8
1004421e:	603c      	str	r4, [r7, #0]
10044220:	607d      	str	r5, [r7, #4]
	for (i = 0; i < FINAL_MSG_TS_LEN; i++) {
10044222:	183b      	adds	r3, r7, r0
10044224:	781b      	ldrb	r3, [r3, #0]
10044226:	b25b      	sxtb	r3, r3
10044228:	b2db      	uxtb	r3, r3
1004422a:	3301      	adds	r3, #1
1004422c:	b2da      	uxtb	r2, r3
1004422e:	183b      	adds	r3, r7, r0
10044230:	701a      	strb	r2, [r3, #0]
10044232:	2317      	movs	r3, #23
10044234:	18fb      	adds	r3, r7, r3
10044236:	781b      	ldrb	r3, [r3, #0]
10044238:	b25b      	sxtb	r3, r3
1004423a:	2b03      	cmp	r3, #3
1004423c:	dddd      	ble.n	100441fa <final_msg_set_ts+0x16>
	}
}
1004423e:	46c0      	nop			@ (mov r8, r8)
10044240:	46c0      	nop			@ (mov r8, r8)
10044242:	46bd      	mov	sp, r7
10044244:	b006      	add	sp, #24
10044246:	bdb0      	pop	{r4, r5, r7, pc}

10044248 <DW1000_initiator>:
	for (i = 0; i < FINAL_MSG_TS_LEN; i++) {
		*ts += ts_field[i] << (i * 8);
	}
}

void DW1000_initiator(DW1000_t *dw1000, uint8_t channel) {
10044248:	b5f0      	push	{r4, r5, r6, r7, lr}
1004424a:	b08f      	sub	sp, #60	@ 0x3c
1004424c:	af02      	add	r7, sp, #8
1004424e:	61f8      	str	r0, [r7, #28]
10044250:	000a      	movs	r2, r1
10044252:	211b      	movs	r1, #27
10044254:	187b      	adds	r3, r7, r1
10044256:	701a      	strb	r2, [r3, #0]
	/* Write frame data to DW1000 and prepare transmission. See NOTE 8 below. */
	tx_poll_msg[ALL_MSG_SN_IDX] = frame_seq_nb;
10044258:	4bb0      	ldr	r3, [pc, #704]	@ (1004451c <DW1000_initiator+0x2d4>)
1004425a:	781a      	ldrb	r2, [r3, #0]
1004425c:	4bb0      	ldr	r3, [pc, #704]	@ (10044520 <DW1000_initiator+0x2d8>)
1004425e:	709a      	strb	r2, [r3, #2]
	tx_poll_msg[10] = channel;
10044260:	4baf      	ldr	r3, [pc, #700]	@ (10044520 <DW1000_initiator+0x2d8>)
10044262:	187a      	adds	r2, r7, r1
10044264:	7812      	ldrb	r2, [r2, #0]
10044266:	729a      	strb	r2, [r3, #10]
	DW1000_write_reg(dw1000, TX_BUFFER_ID, 0, tx_poll_msg,
10044268:	4bad      	ldr	r3, [pc, #692]	@ (10044520 <DW1000_initiator+0x2d8>)
1004426a:	69f8      	ldr	r0, [r7, #28]
1004426c:	220b      	movs	r2, #11
1004426e:	9200      	str	r2, [sp, #0]
10044270:	2200      	movs	r2, #0
10044272:	2109      	movs	r1, #9
10044274:	f7ff fb52 	bl	1004391c <DW1000_write_reg>
			sizeof(tx_poll_msg) - 2);
	uint32_t tmp = 0;
10044278:	2300      	movs	r3, #0
1004427a:	62fb      	str	r3, [r7, #44]	@ 0x2c
	tmp = txFCTRL | sizeof(tx_poll_msg)
			| ((uint32_t) 0x0U << TX_FCTRL_TXBOFFS_SHFT)
			| ((uint32_t) 0x1U << TX_FCTRL_TR_SHFT);
1004427c:	4ba9      	ldr	r3, [pc, #676]	@ (10044524 <DW1000_initiator+0x2dc>)
1004427e:	681b      	ldr	r3, [r3, #0]
10044280:	4aa9      	ldr	r2, [pc, #676]	@ (10044528 <DW1000_initiator+0x2e0>)
10044282:	4313      	orrs	r3, r2
	tmp = txFCTRL | sizeof(tx_poll_msg)
10044284:	62fb      	str	r3, [r7, #44]	@ 0x2c
	DW1000_write_reg(dw1000, TX_FCTRL_ID, 0x00, (void*) &tmp, 4);
10044286:	2614      	movs	r6, #20
10044288:	2318      	movs	r3, #24
1004428a:	18f2      	adds	r2, r6, r3
1004428c:	19d3      	adds	r3, r2, r7
1004428e:	69f8      	ldr	r0, [r7, #28]
10044290:	2204      	movs	r2, #4
10044292:	9200      	str	r2, [sp, #0]
10044294:	2200      	movs	r2, #0
10044296:	2108      	movs	r1, #8
10044298:	f7ff fb40 	bl	1004391c <DW1000_write_reg>

	// start TX
	tmp = SYS_CTRL_WAIT4RESP | SYS_CTRL_TXSTRT;
1004429c:	2382      	movs	r3, #130	@ 0x82
1004429e:	62fb      	str	r3, [r7, #44]	@ 0x2c
	DW1000_write_reg(dw1000, SYS_CTRL_ID, SYS_CTRL_OFFSET, (void*) &tmp, 1);
100442a0:	2318      	movs	r3, #24
100442a2:	18f3      	adds	r3, r6, r3
100442a4:	19db      	adds	r3, r3, r7
100442a6:	69f8      	ldr	r0, [r7, #28]
100442a8:	2201      	movs	r2, #1
100442aa:	9200      	str	r2, [sp, #0]
100442ac:	2200      	movs	r2, #0
100442ae:	210d      	movs	r1, #13
100442b0:	f7ff fb34 	bl	1004391c <DW1000_write_reg>

	// poll for reception
	do {
		DW1000_read_reg(dw1000, SYS_STATUS_ID, 0x0, (void*) &status_reg, 4);
100442b4:	4b9d      	ldr	r3, [pc, #628]	@ (1004452c <DW1000_initiator+0x2e4>)
100442b6:	69f8      	ldr	r0, [r7, #28]
100442b8:	2204      	movs	r2, #4
100442ba:	9200      	str	r2, [sp, #0]
100442bc:	2200      	movs	r2, #0
100442be:	210f      	movs	r1, #15
100442c0:	f7ff faca 	bl	10043858 <DW1000_read_reg>

	} while (!(status_reg
			& (SYS_STATUS_RXFCG | SYS_STATUS_ALL_RX_TO | SYS_STATUS_ALL_RX_ERR)));
100442c4:	4b99      	ldr	r3, [pc, #612]	@ (1004452c <DW1000_initiator+0x2e4>)
100442c6:	681b      	ldr	r3, [r3, #0]
100442c8:	4a99      	ldr	r2, [pc, #612]	@ (10044530 <DW1000_initiator+0x2e8>)
100442ca:	4013      	ands	r3, r2
	} while (!(status_reg
100442cc:	d0f2      	beq.n	100442b4 <DW1000_initiator+0x6c>

	frame_seq_nb++;
100442ce:	4b93      	ldr	r3, [pc, #588]	@ (1004451c <DW1000_initiator+0x2d4>)
100442d0:	781b      	ldrb	r3, [r3, #0]
100442d2:	3301      	adds	r3, #1
100442d4:	b2da      	uxtb	r2, r3
100442d6:	4b91      	ldr	r3, [pc, #580]	@ (1004451c <DW1000_initiator+0x2d4>)
100442d8:	701a      	strb	r2, [r3, #0]

	if (status_reg & SYS_STATUS_RXFCG) {
100442da:	4b94      	ldr	r3, [pc, #592]	@ (1004452c <DW1000_initiator+0x2e4>)
100442dc:	681a      	ldr	r2, [r3, #0]
100442de:	2380      	movs	r3, #128	@ 0x80
100442e0:	01db      	lsls	r3, r3, #7
100442e2:	4013      	ands	r3, r2
100442e4:	d100      	bne.n	100442e8 <DW1000_initiator+0xa0>
100442e6:	e0f1      	b.n	100444cc <DW1000_initiator+0x284>
		uint32_t frame_len;

		/* Clear good RX frame event and TX frame sent in the DW1000 status register. */
		tmp = SYS_STATUS_RXFCG | SYS_STATUS_TXFRS;
100442e8:	2381      	movs	r3, #129	@ 0x81
100442ea:	01db      	lsls	r3, r3, #7
100442ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
		DW1000_write_reg(dw1000, SYS_STATUS_ID, 0x00, (void*) &tmp, 4);
100442ee:	2314      	movs	r3, #20
100442f0:	2618      	movs	r6, #24
100442f2:	199b      	adds	r3, r3, r6
100442f4:	19db      	adds	r3, r3, r7
100442f6:	69f8      	ldr	r0, [r7, #28]
100442f8:	2204      	movs	r2, #4
100442fa:	9200      	str	r2, [sp, #0]
100442fc:	2200      	movs	r2, #0
100442fe:	210f      	movs	r1, #15
10044300:	f7ff fb0c 	bl	1004391c <DW1000_write_reg>

		/* A frame has been received, read it into the local buffer. */
		DW1000_read_reg(dw1000, RX_FINFO_ID, 0x00, (void*) &frame_len, 4);
10044304:	2310      	movs	r3, #16
10044306:	199b      	adds	r3, r3, r6
10044308:	19db      	adds	r3, r3, r7
1004430a:	69f8      	ldr	r0, [r7, #28]
1004430c:	2204      	movs	r2, #4
1004430e:	9200      	str	r2, [sp, #0]
10044310:	2200      	movs	r2, #0
10044312:	2110      	movs	r1, #16
10044314:	f7ff faa0 	bl	10043858 <DW1000_read_reg>
		frame_len &= RX_FINFO_RXFLEN_MASK;
10044318:	6abb      	ldr	r3, [r7, #40]	@ 0x28
1004431a:	227f      	movs	r2, #127	@ 0x7f
1004431c:	4013      	ands	r3, r2
1004431e:	62bb      	str	r3, [r7, #40]	@ 0x28
		if (frame_len <= RX_BUF_LEN) {
10044320:	6abb      	ldr	r3, [r7, #40]	@ 0x28
10044322:	2b19      	cmp	r3, #25
10044324:	d808      	bhi.n	10044338 <DW1000_initiator+0xf0>
			DW1000_read_reg(dw1000, RX_BUFFER_ID, 0x00, (void*) &rx_buffer,
10044326:	6abb      	ldr	r3, [r7, #40]	@ 0x28
10044328:	4a82      	ldr	r2, [pc, #520]	@ (10044534 <DW1000_initiator+0x2ec>)
1004432a:	69f8      	ldr	r0, [r7, #28]
1004432c:	9300      	str	r3, [sp, #0]
1004432e:	0013      	movs	r3, r2
10044330:	2200      	movs	r2, #0
10044332:	2111      	movs	r1, #17
10044334:	f7ff fa90 	bl	10043858 <DW1000_read_reg>
					frame_len);
		}
		rx_buffer[ALL_MSG_SN_IDX] = 0;
10044338:	4b7e      	ldr	r3, [pc, #504]	@ (10044534 <DW1000_initiator+0x2ec>)
1004433a:	2200      	movs	r2, #0
1004433c:	709a      	strb	r2, [r3, #2]
		if (memcmp(rx_buffer, rx_resp_msg, ALL_MSG_COMMON_LEN) == 0
1004433e:	497e      	ldr	r1, [pc, #504]	@ (10044538 <DW1000_initiator+0x2f0>)
10044340:	4b7c      	ldr	r3, [pc, #496]	@ (10044534 <DW1000_initiator+0x2ec>)
10044342:	220a      	movs	r2, #10
10044344:	0018      	movs	r0, r3
10044346:	f005 fe0b 	bl	10049f60 <memcmp>
1004434a:	1e03      	subs	r3, r0, #0
1004434c:	d000      	beq.n	10044350 <DW1000_initiator+0x108>
1004434e:	e0e0      	b.n	10044512 <DW1000_initiator+0x2ca>
				&& rx_buffer[13] == channel) {
10044350:	4b78      	ldr	r3, [pc, #480]	@ (10044534 <DW1000_initiator+0x2ec>)
10044352:	7b5b      	ldrb	r3, [r3, #13]
10044354:	221b      	movs	r2, #27
10044356:	18ba      	adds	r2, r7, r2
10044358:	7812      	ldrb	r2, [r2, #0]
1004435a:	429a      	cmp	r2, r3
1004435c:	d000      	beq.n	10044360 <DW1000_initiator+0x118>
1004435e:	e0d8      	b.n	10044512 <DW1000_initiator+0x2ca>
			uint32_t final_tx_time;

			/* Retrieve poll transmission and response reception timestamp. */
			poll_tx_ts = get_tx_timestamp_u64(dw1000);
10044360:	69fb      	ldr	r3, [r7, #28]
10044362:	0018      	movs	r0, r3
10044364:	f7ff fe94 	bl	10044090 <get_tx_timestamp_u64>
10044368:	0002      	movs	r2, r0
1004436a:	000b      	movs	r3, r1
1004436c:	4973      	ldr	r1, [pc, #460]	@ (1004453c <DW1000_initiator+0x2f4>)
1004436e:	600a      	str	r2, [r1, #0]
10044370:	604b      	str	r3, [r1, #4]
			resp_rx_ts = get_rx_timestamp_u64(dw1000);
10044372:	69fb      	ldr	r3, [r7, #28]
10044374:	0018      	movs	r0, r3
10044376:	f7ff fee0 	bl	1004413a <get_rx_timestamp_u64>
1004437a:	0002      	movs	r2, r0
1004437c:	000b      	movs	r3, r1
1004437e:	4970      	ldr	r1, [pc, #448]	@ (10044540 <DW1000_initiator+0x2f8>)
10044380:	600a      	str	r2, [r1, #0]
10044382:	604b      	str	r3, [r1, #4]

			/* Compute final message transmission time. See NOTE 10 below. */
			final_tx_time = (resp_rx_ts
					+ (RESP_RX_TO_FINAL_TX_DLY_UUS * UUS_TO_DWT_TIME)) >> 8;
10044384:	4b6e      	ldr	r3, [pc, #440]	@ (10044540 <DW1000_initiator+0x2f8>)
10044386:	681a      	ldr	r2, [r3, #0]
10044388:	685b      	ldr	r3, [r3, #4]
1004438a:	20fa      	movs	r0, #250	@ 0xfa
1004438c:	0500      	lsls	r0, r0, #20
1004438e:	2100      	movs	r1, #0
10044390:	1812      	adds	r2, r2, r0
10044392:	414b      	adcs	r3, r1
10044394:	0619      	lsls	r1, r3, #24
10044396:	0a14      	lsrs	r4, r2, #8
10044398:	430c      	orrs	r4, r1
1004439a:	0a1d      	lsrs	r5, r3, #8
			final_tx_time = (resp_rx_ts
1004439c:	0023      	movs	r3, r4
1004439e:	627b      	str	r3, [r7, #36]	@ 0x24
			DW1000_write_reg(dw1000, DX_TIME_ID, 0x01, (void*) &final_tx_time,
100443a0:	230c      	movs	r3, #12
100443a2:	2518      	movs	r5, #24
100443a4:	195b      	adds	r3, r3, r5
100443a6:	19db      	adds	r3, r3, r7
100443a8:	69f8      	ldr	r0, [r7, #28]
100443aa:	2204      	movs	r2, #4
100443ac:	9200      	str	r2, [sp, #0]
100443ae:	2201      	movs	r2, #1
100443b0:	210a      	movs	r1, #10
100443b2:	f7ff fab3 	bl	1004391c <DW1000_write_reg>
					4);

			/* Final TX timestamp is the transmission time we programmed plus the TX antenna delay. */
			final_tx_ts = (((uint64_t) (final_tx_time & 0xFFFFFFFEUL)) << 8)
100443b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
100443b8:	613b      	str	r3, [r7, #16]
100443ba:	2300      	movs	r3, #0
100443bc:	617b      	str	r3, [r7, #20]
100443be:	693b      	ldr	r3, [r7, #16]
100443c0:	697c      	ldr	r4, [r7, #20]
100443c2:	001a      	movs	r2, r3
100443c4:	0e12      	lsrs	r2, r2, #24
100443c6:	60fa      	str	r2, [r7, #12]
100443c8:	021b      	lsls	r3, r3, #8
100443ca:	60bb      	str	r3, [r7, #8]
100443cc:	68b9      	ldr	r1, [r7, #8]
100443ce:	68fa      	ldr	r2, [r7, #12]
100443d0:	000b      	movs	r3, r1
100443d2:	0a5b      	lsrs	r3, r3, #9
100443d4:	025b      	lsls	r3, r3, #9
100443d6:	603b      	str	r3, [r7, #0]
100443d8:	23ff      	movs	r3, #255	@ 0xff
100443da:	401a      	ands	r2, r3
100443dc:	607a      	str	r2, [r7, #4]
					+ TX_ANT_DLY;
100443de:	4a59      	ldr	r2, [pc, #356]	@ (10044544 <DW1000_initiator+0x2fc>)
100443e0:	2300      	movs	r3, #0
100443e2:	6838      	ldr	r0, [r7, #0]
100443e4:	6879      	ldr	r1, [r7, #4]
100443e6:	1880      	adds	r0, r0, r2
100443e8:	4159      	adcs	r1, r3
100443ea:	0002      	movs	r2, r0
100443ec:	000b      	movs	r3, r1
			final_tx_ts = (((uint64_t) (final_tx_time & 0xFFFFFFFEUL)) << 8)
100443ee:	4956      	ldr	r1, [pc, #344]	@ (10044548 <DW1000_initiator+0x300>)
100443f0:	600a      	str	r2, [r1, #0]
100443f2:	604b      	str	r3, [r1, #4]

			/* Write all timestamps in the final message. See NOTE 11 below. */
			final_msg_set_ts(&tx_final_msg[FINAL_MSG_POLL_TX_TS_IDX],
100443f4:	4b51      	ldr	r3, [pc, #324]	@ (1004453c <DW1000_initiator+0x2f4>)
100443f6:	681a      	ldr	r2, [r3, #0]
100443f8:	685b      	ldr	r3, [r3, #4]
100443fa:	4954      	ldr	r1, [pc, #336]	@ (1004454c <DW1000_initiator+0x304>)
100443fc:	0008      	movs	r0, r1
100443fe:	f7ff fef1 	bl	100441e4 <final_msg_set_ts>
					poll_tx_ts);
			final_msg_set_ts(&tx_final_msg[FINAL_MSG_RESP_RX_TS_IDX],
10044402:	4b4f      	ldr	r3, [pc, #316]	@ (10044540 <DW1000_initiator+0x2f8>)
10044404:	681a      	ldr	r2, [r3, #0]
10044406:	685b      	ldr	r3, [r3, #4]
10044408:	4951      	ldr	r1, [pc, #324]	@ (10044550 <DW1000_initiator+0x308>)
1004440a:	0008      	movs	r0, r1
1004440c:	f7ff feea 	bl	100441e4 <final_msg_set_ts>
					resp_rx_ts);
			final_msg_set_ts(&tx_final_msg[FINAL_MSG_FINAL_TX_TS_IDX],
10044410:	4b4d      	ldr	r3, [pc, #308]	@ (10044548 <DW1000_initiator+0x300>)
10044412:	681a      	ldr	r2, [r3, #0]
10044414:	685b      	ldr	r3, [r3, #4]
10044416:	494f      	ldr	r1, [pc, #316]	@ (10044554 <DW1000_initiator+0x30c>)
10044418:	0008      	movs	r0, r1
1004441a:	f7ff fee3 	bl	100441e4 <final_msg_set_ts>
					final_tx_ts);

			/* Write and send final message. See NOTE 8 below. */
			tx_final_msg[ALL_MSG_SN_IDX] = frame_seq_nb;
1004441e:	4b3f      	ldr	r3, [pc, #252]	@ (1004451c <DW1000_initiator+0x2d4>)
10044420:	781a      	ldrb	r2, [r3, #0]
10044422:	4b4d      	ldr	r3, [pc, #308]	@ (10044558 <DW1000_initiator+0x310>)
10044424:	709a      	strb	r2, [r3, #2]
			DW1000_write_reg(dw1000, TX_BUFFER_ID, 0, tx_final_msg,
10044426:	4b4c      	ldr	r3, [pc, #304]	@ (10044558 <DW1000_initiator+0x310>)
10044428:	69f8      	ldr	r0, [r7, #28]
1004442a:	2217      	movs	r2, #23
1004442c:	9200      	str	r2, [sp, #0]
1004442e:	2200      	movs	r2, #0
10044430:	2109      	movs	r1, #9
10044432:	f7ff fa73 	bl	1004391c <DW1000_write_reg>
					sizeof(tx_final_msg) - 2);
			tmp = txFCTRL | sizeof(tx_final_msg)
					| ((uint32_t) 0x0U << TX_FCTRL_TXBOFFS_SHFT)
					| ((uint32_t) 0x1U << TX_FCTRL_TR_SHFT);
10044436:	4b3b      	ldr	r3, [pc, #236]	@ (10044524 <DW1000_initiator+0x2dc>)
10044438:	681b      	ldr	r3, [r3, #0]
1004443a:	4a48      	ldr	r2, [pc, #288]	@ (1004455c <DW1000_initiator+0x314>)
1004443c:	4313      	orrs	r3, r2
			tmp = txFCTRL | sizeof(tx_final_msg)
1004443e:	62fb      	str	r3, [r7, #44]	@ 0x2c
			DW1000_write_reg(dw1000, TX_FCTRL_ID, 0x00, (void*) &tmp, 4);
10044440:	2414      	movs	r4, #20
10044442:	1963      	adds	r3, r4, r5
10044444:	19db      	adds	r3, r3, r7
10044446:	69f8      	ldr	r0, [r7, #28]
10044448:	2204      	movs	r2, #4
1004444a:	9200      	str	r2, [sp, #0]
1004444c:	2200      	movs	r2, #0
1004444e:	2108      	movs	r1, #8
10044450:	f7ff fa64 	bl	1004391c <DW1000_write_reg>

			tmp |= (SYS_CTRL_TXDLYS | SYS_CTRL_TXSTRT);
10044454:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
10044456:	2206      	movs	r2, #6
10044458:	4313      	orrs	r3, r2
1004445a:	62fb      	str	r3, [r7, #44]	@ 0x2c
			DW1000_write_reg(dw1000, SYS_CTRL_ID, SYS_CTRL_OFFSET, (void*) &tmp,
1004445c:	1963      	adds	r3, r4, r5
1004445e:	19db      	adds	r3, r3, r7
10044460:	69f8      	ldr	r0, [r7, #28]
10044462:	2201      	movs	r2, #1
10044464:	9200      	str	r2, [sp, #0]
10044466:	2200      	movs	r2, #0
10044468:	210d      	movs	r1, #13
1004446a:	f7ff fa57 	bl	1004391c <DW1000_write_reg>
					1);

			DW1000_read_reg(dw1000, SYS_STATUS_ID, 0x03, (void*) &tmp, 2); // Read at offset 3 to get the upper 2 bytes out of 5
1004446e:	1963      	adds	r3, r4, r5
10044470:	19db      	adds	r3, r3, r7
10044472:	69f8      	ldr	r0, [r7, #28]
10044474:	2202      	movs	r2, #2
10044476:	9200      	str	r2, [sp, #0]
10044478:	2203      	movs	r2, #3
1004447a:	210f      	movs	r1, #15
1004447c:	f7ff f9ec 	bl	10043858 <DW1000_read_reg>

			if ((tmp & SYS_STATUS_TXERR) == 0) {
10044480:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
10044482:	2381      	movs	r3, #129	@ 0x81
10044484:	00db      	lsls	r3, r3, #3
10044486:	4013      	ands	r3, r2
10044488:	d143      	bne.n	10044512 <DW1000_initiator+0x2ca>
				/* Poll DW1000 until TX frame sent event set. See NOTE 9 below. */
				do {
					DW1000_read_reg(dw1000, SYS_STATUS_ID, 0x00,
1004448a:	4b28      	ldr	r3, [pc, #160]	@ (1004452c <DW1000_initiator+0x2e4>)
1004448c:	69f8      	ldr	r0, [r7, #28]
1004448e:	2204      	movs	r2, #4
10044490:	9200      	str	r2, [sp, #0]
10044492:	2200      	movs	r2, #0
10044494:	210f      	movs	r1, #15
10044496:	f7ff f9df 	bl	10043858 <DW1000_read_reg>
							(void*) &status_reg, 4);
				} while (!(status_reg & SYS_STATUS_TXFRS));
1004449a:	4b24      	ldr	r3, [pc, #144]	@ (1004452c <DW1000_initiator+0x2e4>)
1004449c:	681b      	ldr	r3, [r3, #0]
1004449e:	2280      	movs	r2, #128	@ 0x80
100444a0:	4013      	ands	r3, r2
100444a2:	d0f2      	beq.n	1004448a <DW1000_initiator+0x242>

				/* Clear TXFRS event. */
				tmp = SYS_STATUS_TXFRS;
100444a4:	2380      	movs	r3, #128	@ 0x80
100444a6:	62fb      	str	r3, [r7, #44]	@ 0x2c
				DW1000_write_reg(dw1000, SYS_STATUS_ID, 0x00, (void*) &tmp, 4);
100444a8:	2314      	movs	r3, #20
100444aa:	2218      	movs	r2, #24
100444ac:	189b      	adds	r3, r3, r2
100444ae:	19db      	adds	r3, r3, r7
100444b0:	69f8      	ldr	r0, [r7, #28]
100444b2:	2204      	movs	r2, #4
100444b4:	9200      	str	r2, [sp, #0]
100444b6:	2200      	movs	r2, #0
100444b8:	210f      	movs	r1, #15
100444ba:	f7ff fa2f 	bl	1004391c <DW1000_write_reg>

				/* Increment frame sequence number after transmission of the final message (modulo 256). */
				frame_seq_nb++;
100444be:	4b17      	ldr	r3, [pc, #92]	@ (1004451c <DW1000_initiator+0x2d4>)
100444c0:	781b      	ldrb	r3, [r3, #0]
100444c2:	3301      	adds	r3, #1
100444c4:	b2da      	uxtb	r2, r3
100444c6:	4b15      	ldr	r3, [pc, #84]	@ (1004451c <DW1000_initiator+0x2d4>)
100444c8:	701a      	strb	r2, [r3, #0]
		tmp = PMSC_CTRL0_RESET_CLEAR;
		DW1000_write_reg(dw1000, PMSC_ID, PMSC_CTRL0_SOFTRESET_OFFSET,
				(void*) &tmp, 1);
	}

}
100444ca:	e022      	b.n	10044512 <DW1000_initiator+0x2ca>
		tmp = SYS_STATUS_ALL_RX_TO | SYS_STATUS_ALL_RX_ERR;
100444cc:	4b24      	ldr	r3, [pc, #144]	@ (10044560 <DW1000_initiator+0x318>)
100444ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
		DW1000_write_reg(dw1000, SYS_STATUS_ID, 0x00, (void*) &tmp, 4);
100444d0:	2414      	movs	r4, #20
100444d2:	2518      	movs	r5, #24
100444d4:	1963      	adds	r3, r4, r5
100444d6:	19db      	adds	r3, r3, r7
100444d8:	69f8      	ldr	r0, [r7, #28]
100444da:	2204      	movs	r2, #4
100444dc:	9200      	str	r2, [sp, #0]
100444de:	2200      	movs	r2, #0
100444e0:	210f      	movs	r1, #15
100444e2:	f7ff fa1b 	bl	1004391c <DW1000_write_reg>
		tmp = PMSC_CTRL0_RESET_RX;
100444e6:	23e0      	movs	r3, #224	@ 0xe0
100444e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
		DW1000_write_reg(dw1000, PMSC_ID, PMSC_CTRL0_SOFTRESET_OFFSET,
100444ea:	1963      	adds	r3, r4, r5
100444ec:	19db      	adds	r3, r3, r7
100444ee:	69f8      	ldr	r0, [r7, #28]
100444f0:	2201      	movs	r2, #1
100444f2:	9200      	str	r2, [sp, #0]
100444f4:	2203      	movs	r2, #3
100444f6:	2136      	movs	r1, #54	@ 0x36
100444f8:	f7ff fa10 	bl	1004391c <DW1000_write_reg>
		tmp = PMSC_CTRL0_RESET_CLEAR;
100444fc:	23f0      	movs	r3, #240	@ 0xf0
100444fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
		DW1000_write_reg(dw1000, PMSC_ID, PMSC_CTRL0_SOFTRESET_OFFSET,
10044500:	1963      	adds	r3, r4, r5
10044502:	19db      	adds	r3, r3, r7
10044504:	69f8      	ldr	r0, [r7, #28]
10044506:	2201      	movs	r2, #1
10044508:	9200      	str	r2, [sp, #0]
1004450a:	2203      	movs	r2, #3
1004450c:	2136      	movs	r1, #54	@ 0x36
1004450e:	f7ff fa05 	bl	1004391c <DW1000_write_reg>
}
10044512:	46c0      	nop			@ (mov r8, r8)
10044514:	46bd      	mov	sp, r7
10044516:	b00d      	add	sp, #52	@ 0x34
10044518:	bdf0      	pop	{r4, r5, r6, r7, pc}
1004451a:	46c0      	nop			@ (mov r8, r8)
1004451c:	20000840 	.word	0x20000840
10044520:	20000b18 	.word	0x20000b18
10044524:	20000804 	.word	0x20000804
10044528:	0000800d 	.word	0x0000800d
1004452c:	20000808 	.word	0x20000808
10044530:	2427d000 	.word	0x2427d000
10044534:	2000080c 	.word	0x2000080c
10044538:	20000b28 	.word	0x20000b28
1004453c:	20000828 	.word	0x20000828
10044540:	20000830 	.word	0x20000830
10044544:	00004034 	.word	0x00004034
10044548:	20000838 	.word	0x20000838
1004454c:	20000b42 	.word	0x20000b42
10044550:	20000b46 	.word	0x20000b46
10044554:	20000b4a 	.word	0x20000b4a
10044558:	20000b38 	.word	0x20000b38
1004455c:	00008019 	.word	0x00008019
10044560:	24279000 	.word	0x24279000

10044564 <SPI_write8>:


/*!<
 * usage
 * */
uint32_t SPI_write8(SPI_HandleTypeDef* spi, const uint8_t* buffer, uint32_t size, uint32_t timeout) {
10044564:	b5f0      	push	{r4, r5, r6, r7, lr}
10044566:	b08f      	sub	sp, #60	@ 0x3c
10044568:	af00      	add	r7, sp, #0
1004456a:	6278      	str	r0, [r7, #36]	@ 0x24
1004456c:	6239      	str	r1, [r7, #32]
1004456e:	61fa      	str	r2, [r7, #28]
10044570:	61bb      	str	r3, [r7, #24]
	spi->Instance->CR1 |= 0x00000040UL;
10044572:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10044574:	681b      	ldr	r3, [r3, #0]
10044576:	681a      	ldr	r2, [r3, #0]
10044578:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
1004457a:	681b      	ldr	r3, [r3, #0]
1004457c:	2140      	movs	r1, #64	@ 0x40
1004457e:	430a      	orrs	r2, r1
10044580:	601a      	str	r2, [r3, #0]
	uint64_t start = uwTick;
10044582:	4b35      	ldr	r3, [pc, #212]	@ (10044658 <SPI_write8+0xf4>)
10044584:	681b      	ldr	r3, [r3, #0]
10044586:	62bb      	str	r3, [r7, #40]	@ 0x28
10044588:	2300      	movs	r3, #0
1004458a:	62fb      	str	r3, [r7, #44]	@ 0x2c
	uint32_t i = 0;
1004458c:	2300      	movs	r3, #0
1004458e:	637b      	str	r3, [r7, #52]	@ 0x34
	for (; i < size; i++) {
10044590:	e02c      	b.n	100445ec <SPI_write8+0x88>
		while (!(spi->Instance->SR & 0x00000002UL))	{ if ( uwTick - start > timeout) { goto SPI_master_write8_end; } }
10044592:	4b31      	ldr	r3, [pc, #196]	@ (10044658 <SPI_write8+0xf4>)
10044594:	681b      	ldr	r3, [r3, #0]
10044596:	613b      	str	r3, [r7, #16]
10044598:	2300      	movs	r3, #0
1004459a:	617b      	str	r3, [r7, #20]
1004459c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
1004459e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
100445a0:	6938      	ldr	r0, [r7, #16]
100445a2:	6979      	ldr	r1, [r7, #20]
100445a4:	1a80      	subs	r0, r0, r2
100445a6:	4199      	sbcs	r1, r3
100445a8:	0002      	movs	r2, r0
100445aa:	000b      	movs	r3, r1
100445ac:	69b9      	ldr	r1, [r7, #24]
100445ae:	60b9      	str	r1, [r7, #8]
100445b0:	2100      	movs	r1, #0
100445b2:	60f9      	str	r1, [r7, #12]
100445b4:	68b8      	ldr	r0, [r7, #8]
100445b6:	68f9      	ldr	r1, [r7, #12]
100445b8:	000e      	movs	r6, r1
100445ba:	42b3      	cmp	r3, r6
100445bc:	d83b      	bhi.n	10044636 <SPI_write8+0xd2>
100445be:	000e      	movs	r6, r1
100445c0:	42b3      	cmp	r3, r6
100445c2:	d102      	bne.n	100445ca <SPI_write8+0x66>
100445c4:	0001      	movs	r1, r0
100445c6:	428a      	cmp	r2, r1
100445c8:	d835      	bhi.n	10044636 <SPI_write8+0xd2>
100445ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
100445cc:	681b      	ldr	r3, [r3, #0]
100445ce:	689b      	ldr	r3, [r3, #8]
100445d0:	2202      	movs	r2, #2
100445d2:	4013      	ands	r3, r2
100445d4:	d0dd      	beq.n	10044592 <SPI_write8+0x2e>
		*((volatile uint8_t*)&spi->Instance->DR) = buffer[i];
100445d6:	6a3a      	ldr	r2, [r7, #32]
100445d8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
100445da:	18d2      	adds	r2, r2, r3
100445dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
100445de:	681b      	ldr	r3, [r3, #0]
100445e0:	330c      	adds	r3, #12
100445e2:	7812      	ldrb	r2, [r2, #0]
100445e4:	701a      	strb	r2, [r3, #0]
	for (; i < size; i++) {
100445e6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
100445e8:	3301      	adds	r3, #1
100445ea:	637b      	str	r3, [r7, #52]	@ 0x34
100445ec:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
100445ee:	69fb      	ldr	r3, [r7, #28]
100445f0:	429a      	cmp	r2, r3
100445f2:	d3ea      	bcc.n	100445ca <SPI_write8+0x66>
	}
	while (spi->Instance->SR & 0x00000080UL)			{ if ( uwTick - start > timeout) { goto SPI_master_write8_end; } }
100445f4:	e015      	b.n	10044622 <SPI_write8+0xbe>
100445f6:	4b18      	ldr	r3, [pc, #96]	@ (10044658 <SPI_write8+0xf4>)
100445f8:	681b      	ldr	r3, [r3, #0]
100445fa:	603b      	str	r3, [r7, #0]
100445fc:	2300      	movs	r3, #0
100445fe:	607b      	str	r3, [r7, #4]
10044600:	6aba      	ldr	r2, [r7, #40]	@ 0x28
10044602:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
10044604:	6838      	ldr	r0, [r7, #0]
10044606:	6879      	ldr	r1, [r7, #4]
10044608:	1a80      	subs	r0, r0, r2
1004460a:	4199      	sbcs	r1, r3
1004460c:	0002      	movs	r2, r0
1004460e:	000b      	movs	r3, r1
10044610:	69b9      	ldr	r1, [r7, #24]
10044612:	000c      	movs	r4, r1
10044614:	2100      	movs	r1, #0
10044616:	000d      	movs	r5, r1
10044618:	42ab      	cmp	r3, r5
1004461a:	d80e      	bhi.n	1004463a <SPI_write8+0xd6>
1004461c:	d101      	bne.n	10044622 <SPI_write8+0xbe>
1004461e:	42a2      	cmp	r2, r4
10044620:	d80b      	bhi.n	1004463a <SPI_write8+0xd6>
10044622:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10044624:	681b      	ldr	r3, [r3, #0]
10044626:	689b      	ldr	r3, [r3, #8]
10044628:	2280      	movs	r2, #128	@ 0x80
1004462a:	4013      	ands	r3, r2
1004462c:	d1e3      	bne.n	100445f6 <SPI_write8+0x92>
	i++; SPI_master_write8_end:
1004462e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
10044630:	3301      	adds	r3, #1
10044632:	637b      	str	r3, [r7, #52]	@ 0x34
10044634:	e002      	b.n	1004463c <SPI_write8+0xd8>
		while (!(spi->Instance->SR & 0x00000002UL))	{ if ( uwTick - start > timeout) { goto SPI_master_write8_end; } }
10044636:	46c0      	nop			@ (mov r8, r8)
10044638:	e000      	b.n	1004463c <SPI_write8+0xd8>
	while (spi->Instance->SR & 0x00000080UL)			{ if ( uwTick - start > timeout) { goto SPI_master_write8_end; } }
1004463a:	46c0      	nop			@ (mov r8, r8)
	spi->Instance->CR1 &= ~0x00000040UL;
1004463c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
1004463e:	681b      	ldr	r3, [r3, #0]
10044640:	681a      	ldr	r2, [r3, #0]
10044642:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10044644:	681b      	ldr	r3, [r3, #0]
10044646:	2140      	movs	r1, #64	@ 0x40
10044648:	438a      	bics	r2, r1
1004464a:	601a      	str	r2, [r3, #0]
	return i;
1004464c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
1004464e:	0018      	movs	r0, r3
10044650:	46bd      	mov	sp, r7
10044652:	b00f      	add	sp, #60	@ 0x3c
10044654:	bdf0      	pop	{r4, r5, r6, r7, pc}
10044656:	46c0      	nop			@ (mov r8, r8)
10044658:	20000844 	.word	0x20000844

1004465c <SPI_read8>:

uint32_t SPI_read8(SPI_HandleTypeDef* spi, uint8_t* buffer, uint32_t size, uint32_t timeout) {
1004465c:	b5f0      	push	{r4, r5, r6, r7, lr}
1004465e:	b093      	sub	sp, #76	@ 0x4c
10044660:	af00      	add	r7, sp, #0
10044662:	6378      	str	r0, [r7, #52]	@ 0x34
10044664:	6339      	str	r1, [r7, #48]	@ 0x30
10044666:	62fa      	str	r2, [r7, #44]	@ 0x2c
10044668:	62bb      	str	r3, [r7, #40]	@ 0x28
	spi->Instance->CR1 |= 0x00000040UL;
1004466a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
1004466c:	681b      	ldr	r3, [r3, #0]
1004466e:	6819      	ldr	r1, [r3, #0]
10044670:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
10044672:	681a      	ldr	r2, [r3, #0]
10044674:	2340      	movs	r3, #64	@ 0x40
10044676:	430b      	orrs	r3, r1
10044678:	6013      	str	r3, [r2, #0]
	uint64_t start = uwTick;
1004467a:	4b50      	ldr	r3, [pc, #320]	@ (100447bc <SPI_read8+0x160>)
1004467c:	681b      	ldr	r3, [r3, #0]
1004467e:	63bb      	str	r3, [r7, #56]	@ 0x38
10044680:	2300      	movs	r3, #0
10044682:	63fb      	str	r3, [r7, #60]	@ 0x3c
	uint32_t i = 0;
10044684:	2300      	movs	r3, #0
10044686:	647b      	str	r3, [r7, #68]	@ 0x44

	while (spi->Instance->SR & 0x00000001UL) {
10044688:	e002      	b.n	10044690 <SPI_read8+0x34>
		(void)(volatile uint8_t)spi->Instance->DR;  // flush buffer
1004468a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
1004468c:	681b      	ldr	r3, [r3, #0]
1004468e:	68db      	ldr	r3, [r3, #12]
	while (spi->Instance->SR & 0x00000001UL) {
10044690:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
10044692:	681b      	ldr	r3, [r3, #0]
10044694:	689a      	ldr	r2, [r3, #8]
10044696:	2301      	movs	r3, #1
10044698:	4013      	ands	r3, r2
1004469a:	d1f6      	bne.n	1004468a <SPI_read8+0x2e>
	}

	for (; i < size; i++) {
1004469c:	e056      	b.n	1004474c <SPI_read8+0xf0>
		while (!(spi->Instance->SR & 0x00000002UL))	{ if ( uwTick - start > timeout) { goto SPI_master_read8_end; } }
1004469e:	4b47      	ldr	r3, [pc, #284]	@ (100447bc <SPI_read8+0x160>)
100446a0:	681b      	ldr	r3, [r3, #0]
100446a2:	623b      	str	r3, [r7, #32]
100446a4:	2300      	movs	r3, #0
100446a6:	627b      	str	r3, [r7, #36]	@ 0x24
100446a8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
100446aa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
100446ac:	6a38      	ldr	r0, [r7, #32]
100446ae:	6a79      	ldr	r1, [r7, #36]	@ 0x24
100446b0:	1a80      	subs	r0, r0, r2
100446b2:	4199      	sbcs	r1, r3
100446b4:	0002      	movs	r2, r0
100446b6:	000b      	movs	r3, r1
100446b8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
100446ba:	61b9      	str	r1, [r7, #24]
100446bc:	2100      	movs	r1, #0
100446be:	61f9      	str	r1, [r7, #28]
100446c0:	69b8      	ldr	r0, [r7, #24]
100446c2:	69f9      	ldr	r1, [r7, #28]
100446c4:	000e      	movs	r6, r1
100446c6:	42b3      	cmp	r3, r6
100446c8:	d900      	bls.n	100446cc <SPI_read8+0x70>
100446ca:	e064      	b.n	10044796 <SPI_read8+0x13a>
100446cc:	000e      	movs	r6, r1
100446ce:	42b3      	cmp	r3, r6
100446d0:	d102      	bne.n	100446d8 <SPI_read8+0x7c>
100446d2:	0001      	movs	r1, r0
100446d4:	428a      	cmp	r2, r1
100446d6:	d85e      	bhi.n	10044796 <SPI_read8+0x13a>
100446d8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
100446da:	681b      	ldr	r3, [r3, #0]
100446dc:	689a      	ldr	r2, [r3, #8]
100446de:	2302      	movs	r3, #2
100446e0:	4013      	ands	r3, r2
100446e2:	d0dc      	beq.n	1004469e <SPI_read8+0x42>
		*((volatile uint8_t*)&spi->Instance->DR) = 0;
100446e4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
100446e6:	681b      	ldr	r3, [r3, #0]
100446e8:	330c      	adds	r3, #12
100446ea:	001a      	movs	r2, r3
100446ec:	2300      	movs	r3, #0
100446ee:	7013      	strb	r3, [r2, #0]
		while (!(spi->Instance->SR & 0x00000001UL))	{ if ( uwTick - start > timeout) { goto SPI_master_read8_end; } }
100446f0:	e01b      	b.n	1004472a <SPI_read8+0xce>
100446f2:	4b32      	ldr	r3, [pc, #200]	@ (100447bc <SPI_read8+0x160>)
100446f4:	681b      	ldr	r3, [r3, #0]
100446f6:	613b      	str	r3, [r7, #16]
100446f8:	2300      	movs	r3, #0
100446fa:	617b      	str	r3, [r7, #20]
100446fc:	6bba      	ldr	r2, [r7, #56]	@ 0x38
100446fe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
10044700:	6938      	ldr	r0, [r7, #16]
10044702:	6979      	ldr	r1, [r7, #20]
10044704:	1a80      	subs	r0, r0, r2
10044706:	4199      	sbcs	r1, r3
10044708:	0002      	movs	r2, r0
1004470a:	000b      	movs	r3, r1
1004470c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
1004470e:	60b9      	str	r1, [r7, #8]
10044710:	2100      	movs	r1, #0
10044712:	60f9      	str	r1, [r7, #12]
10044714:	68b8      	ldr	r0, [r7, #8]
10044716:	68f9      	ldr	r1, [r7, #12]
10044718:	000e      	movs	r6, r1
1004471a:	42b3      	cmp	r3, r6
1004471c:	d83d      	bhi.n	1004479a <SPI_read8+0x13e>
1004471e:	000e      	movs	r6, r1
10044720:	42b3      	cmp	r3, r6
10044722:	d102      	bne.n	1004472a <SPI_read8+0xce>
10044724:	0001      	movs	r1, r0
10044726:	428a      	cmp	r2, r1
10044728:	d837      	bhi.n	1004479a <SPI_read8+0x13e>
1004472a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
1004472c:	681b      	ldr	r3, [r3, #0]
1004472e:	689a      	ldr	r2, [r3, #8]
10044730:	2301      	movs	r3, #1
10044732:	4013      	ands	r3, r2
10044734:	d0dd      	beq.n	100446f2 <SPI_read8+0x96>
		buffer[i] = (volatile uint8_t)spi->Instance->DR;
10044736:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
10044738:	681b      	ldr	r3, [r3, #0]
1004473a:	68d9      	ldr	r1, [r3, #12]
1004473c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
1004473e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
10044740:	18d2      	adds	r2, r2, r3
10044742:	b2cb      	uxtb	r3, r1
10044744:	7013      	strb	r3, [r2, #0]
	for (; i < size; i++) {
10044746:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
10044748:	3301      	adds	r3, #1
1004474a:	647b      	str	r3, [r7, #68]	@ 0x44
1004474c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
1004474e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
10044750:	429a      	cmp	r2, r3
10044752:	d3c1      	bcc.n	100446d8 <SPI_read8+0x7c>
	}
	while (spi->Instance->SR & 0x00000080UL)			{ if ( uwTick - start > timeout) { goto SPI_master_read8_end; } }
10044754:	e015      	b.n	10044782 <SPI_read8+0x126>
10044756:	4b19      	ldr	r3, [pc, #100]	@ (100447bc <SPI_read8+0x160>)
10044758:	681b      	ldr	r3, [r3, #0]
1004475a:	603b      	str	r3, [r7, #0]
1004475c:	2300      	movs	r3, #0
1004475e:	607b      	str	r3, [r7, #4]
10044760:	6bba      	ldr	r2, [r7, #56]	@ 0x38
10044762:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
10044764:	6838      	ldr	r0, [r7, #0]
10044766:	6879      	ldr	r1, [r7, #4]
10044768:	1a80      	subs	r0, r0, r2
1004476a:	4199      	sbcs	r1, r3
1004476c:	0002      	movs	r2, r0
1004476e:	000b      	movs	r3, r1
10044770:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
10044772:	000c      	movs	r4, r1
10044774:	2100      	movs	r1, #0
10044776:	000d      	movs	r5, r1
10044778:	42ab      	cmp	r3, r5
1004477a:	d810      	bhi.n	1004479e <SPI_read8+0x142>
1004477c:	d101      	bne.n	10044782 <SPI_read8+0x126>
1004477e:	42a2      	cmp	r2, r4
10044780:	d80d      	bhi.n	1004479e <SPI_read8+0x142>
10044782:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
10044784:	681b      	ldr	r3, [r3, #0]
10044786:	689b      	ldr	r3, [r3, #8]
10044788:	2280      	movs	r2, #128	@ 0x80
1004478a:	4013      	ands	r3, r2
1004478c:	d1e3      	bne.n	10044756 <SPI_read8+0xfa>
	i++; SPI_master_read8_end:
1004478e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
10044790:	3301      	adds	r3, #1
10044792:	647b      	str	r3, [r7, #68]	@ 0x44
10044794:	e004      	b.n	100447a0 <SPI_read8+0x144>
		while (!(spi->Instance->SR & 0x00000002UL))	{ if ( uwTick - start > timeout) { goto SPI_master_read8_end; } }
10044796:	46c0      	nop			@ (mov r8, r8)
10044798:	e002      	b.n	100447a0 <SPI_read8+0x144>
		while (!(spi->Instance->SR & 0x00000001UL))	{ if ( uwTick - start > timeout) { goto SPI_master_read8_end; } }
1004479a:	46c0      	nop			@ (mov r8, r8)
1004479c:	e000      	b.n	100447a0 <SPI_read8+0x144>
	while (spi->Instance->SR & 0x00000080UL)			{ if ( uwTick - start > timeout) { goto SPI_master_read8_end; } }
1004479e:	46c0      	nop			@ (mov r8, r8)
	spi->Instance->CR1 &= ~0x00000040UL;
100447a0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
100447a2:	681b      	ldr	r3, [r3, #0]
100447a4:	681a      	ldr	r2, [r3, #0]
100447a6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
100447a8:	681b      	ldr	r3, [r3, #0]
100447aa:	2140      	movs	r1, #64	@ 0x40
100447ac:	438a      	bics	r2, r1
100447ae:	601a      	str	r2, [r3, #0]
	return i;
100447b0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
}
100447b2:	0018      	movs	r0, r3
100447b4:	46bd      	mov	sp, r7
100447b6:	b013      	add	sp, #76	@ 0x4c
100447b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
100447ba:	46c0      	nop			@ (mov r8, r8)
100447bc:	20000844 	.word	0x20000844

100447c0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
100447c0:	b580      	push	{r7, lr}
100447c2:	b082      	sub	sp, #8
100447c4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
100447c6:	1dfb      	adds	r3, r7, #7
100447c8:	2200      	movs	r2, #0
100447ca:	701a      	strb	r2, [r3, #0]

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
100447cc:	2003      	movs	r0, #3
100447ce:	f000 f80f 	bl	100447f0 <HAL_InitTick>
100447d2:	1e03      	subs	r3, r0, #0
100447d4:	d003      	beq.n	100447de <HAL_Init+0x1e>
  {
    status = HAL_ERROR;
100447d6:	1dfb      	adds	r3, r7, #7
100447d8:	2201      	movs	r2, #1
100447da:	701a      	strb	r2, [r3, #0]
100447dc:	e001      	b.n	100447e2 <HAL_Init+0x22>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
100447de:	f7fe fca3 	bl	10043128 <HAL_MspInit>
  }

  /* Return function status */
  return status;
100447e2:	1dfb      	adds	r3, r7, #7
100447e4:	781b      	ldrb	r3, [r3, #0]
}
100447e6:	0018      	movs	r0, r3
100447e8:	46bd      	mov	sp, r7
100447ea:	b002      	add	sp, #8
100447ec:	bd80      	pop	{r7, pc}
	...

100447f0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
100447f0:	b590      	push	{r4, r7, lr}
100447f2:	b085      	sub	sp, #20
100447f4:	af00      	add	r7, sp, #0
100447f6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
100447f8:	230f      	movs	r3, #15
100447fa:	18fb      	adds	r3, r7, r3
100447fc:	2200      	movs	r2, #0
100447fe:	701a      	strb	r2, [r3, #0]

  if (uwTickFreq != 0U)
10044800:	4b1d      	ldr	r3, [pc, #116]	@ (10044878 <HAL_InitTick+0x88>)
10044802:	781b      	ldrb	r3, [r3, #0]
10044804:	2b00      	cmp	r3, #0
10044806:	d02c      	beq.n	10044862 <HAL_InitTick+0x72>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(HAL_RCC_GetSysClockFreq() / (1000U / uwTickFreq)) == 0U)
10044808:	f003 ffc4 	bl	10048794 <HAL_RCC_GetSysClockFreq>
1004480c:	0004      	movs	r4, r0
1004480e:	4b1a      	ldr	r3, [pc, #104]	@ (10044878 <HAL_InitTick+0x88>)
10044810:	781b      	ldrb	r3, [r3, #0]
10044812:	0019      	movs	r1, r3
10044814:	23fa      	movs	r3, #250	@ 0xfa
10044816:	0098      	lsls	r0, r3, #2
10044818:	f7fb fc90 	bl	1004013c <__udivsi3>
1004481c:	0003      	movs	r3, r0
1004481e:	0019      	movs	r1, r3
10044820:	0020      	movs	r0, r4
10044822:	f7fb fc8b 	bl	1004013c <__udivsi3>
10044826:	0003      	movs	r3, r0
10044828:	0018      	movs	r0, r3
1004482a:	f000 f944 	bl	10044ab6 <HAL_SYSTICK_Config>
1004482e:	1e03      	subs	r3, r0, #0
10044830:	d112      	bne.n	10044858 <HAL_InitTick+0x68>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
10044832:	687b      	ldr	r3, [r7, #4]
10044834:	2b03      	cmp	r3, #3
10044836:	d80a      	bhi.n	1004484e <HAL_InitTick+0x5e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0);
10044838:	6879      	ldr	r1, [r7, #4]
1004483a:	2301      	movs	r3, #1
1004483c:	425b      	negs	r3, r3
1004483e:	2200      	movs	r2, #0
10044840:	0018      	movs	r0, r3
10044842:	f000 f913 	bl	10044a6c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
10044846:	4b0d      	ldr	r3, [pc, #52]	@ (1004487c <HAL_InitTick+0x8c>)
10044848:	687a      	ldr	r2, [r7, #4]
1004484a:	601a      	str	r2, [r3, #0]
1004484c:	e00d      	b.n	1004486a <HAL_InitTick+0x7a>
      }
      else
      {
        status = HAL_ERROR;
1004484e:	230f      	movs	r3, #15
10044850:	18fb      	adds	r3, r7, r3
10044852:	2201      	movs	r2, #1
10044854:	701a      	strb	r2, [r3, #0]
10044856:	e008      	b.n	1004486a <HAL_InitTick+0x7a>
      }
    }
    else
    {
      status = HAL_ERROR;
10044858:	230f      	movs	r3, #15
1004485a:	18fb      	adds	r3, r7, r3
1004485c:	2201      	movs	r2, #1
1004485e:	701a      	strb	r2, [r3, #0]
10044860:	e003      	b.n	1004486a <HAL_InitTick+0x7a>
    }
  }
  else
  {
    status = HAL_ERROR;
10044862:	230f      	movs	r3, #15
10044864:	18fb      	adds	r3, r7, r3
10044866:	2201      	movs	r2, #1
10044868:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
1004486a:	230f      	movs	r3, #15
1004486c:	18fb      	adds	r3, r7, r3
1004486e:	781b      	ldrb	r3, [r3, #0]
}
10044870:	0018      	movs	r0, r3
10044872:	46bd      	mov	sp, r7
10044874:	b005      	add	sp, #20
10044876:	bd90      	pop	{r4, r7, pc}
10044878:	20000b58 	.word	0x20000b58
1004487c:	20000b54 	.word	0x20000b54

10044880 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
10044880:	b580      	push	{r7, lr}
10044882:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
10044884:	4b05      	ldr	r3, [pc, #20]	@ (1004489c <HAL_IncTick+0x1c>)
10044886:	781b      	ldrb	r3, [r3, #0]
10044888:	001a      	movs	r2, r3
1004488a:	4b05      	ldr	r3, [pc, #20]	@ (100448a0 <HAL_IncTick+0x20>)
1004488c:	681b      	ldr	r3, [r3, #0]
1004488e:	18d2      	adds	r2, r2, r3
10044890:	4b03      	ldr	r3, [pc, #12]	@ (100448a0 <HAL_IncTick+0x20>)
10044892:	601a      	str	r2, [r3, #0]
}
10044894:	46c0      	nop			@ (mov r8, r8)
10044896:	46bd      	mov	sp, r7
10044898:	bd80      	pop	{r7, pc}
1004489a:	46c0      	nop			@ (mov r8, r8)
1004489c:	20000b58 	.word	0x20000b58
100448a0:	20000844 	.word	0x20000844

100448a4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
100448a4:	b580      	push	{r7, lr}
100448a6:	af00      	add	r7, sp, #0
  return uwTick;
100448a8:	4b02      	ldr	r3, [pc, #8]	@ (100448b4 <HAL_GetTick+0x10>)
100448aa:	681b      	ldr	r3, [r3, #0]
}
100448ac:	0018      	movs	r0, r3
100448ae:	46bd      	mov	sp, r7
100448b0:	bd80      	pop	{r7, pc}
100448b2:	46c0      	nop			@ (mov r8, r8)
100448b4:	20000844 	.word	0x20000844

100448b8 <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
100448b8:	b580      	push	{r7, lr}
100448ba:	af00      	add	r7, sp, #0
  return uwTickPrio;
100448bc:	4b02      	ldr	r3, [pc, #8]	@ (100448c8 <HAL_GetTickPrio+0x10>)
100448be:	681b      	ldr	r3, [r3, #0]
}
100448c0:	0018      	movs	r0, r3
100448c2:	46bd      	mov	sp, r7
100448c4:	bd80      	pop	{r7, pc}
100448c6:	46c0      	nop			@ (mov r8, r8)
100448c8:	20000b54 	.word	0x20000b54

100448cc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
100448cc:	b580      	push	{r7, lr}
100448ce:	b084      	sub	sp, #16
100448d0:	af00      	add	r7, sp, #0
100448d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
100448d4:	f7ff ffe6 	bl	100448a4 <HAL_GetTick>
100448d8:	0003      	movs	r3, r0
100448da:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
100448dc:	687b      	ldr	r3, [r7, #4]
100448de:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
100448e0:	68fb      	ldr	r3, [r7, #12]
100448e2:	3301      	adds	r3, #1
100448e4:	d005      	beq.n	100448f2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
100448e6:	4b0a      	ldr	r3, [pc, #40]	@ (10044910 <HAL_Delay+0x44>)
100448e8:	781b      	ldrb	r3, [r3, #0]
100448ea:	001a      	movs	r2, r3
100448ec:	68fb      	ldr	r3, [r7, #12]
100448ee:	189b      	adds	r3, r3, r2
100448f0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
100448f2:	46c0      	nop			@ (mov r8, r8)
100448f4:	f7ff ffd6 	bl	100448a4 <HAL_GetTick>
100448f8:	0002      	movs	r2, r0
100448fa:	68bb      	ldr	r3, [r7, #8]
100448fc:	1ad3      	subs	r3, r2, r3
100448fe:	68fa      	ldr	r2, [r7, #12]
10044900:	429a      	cmp	r2, r3
10044902:	d8f7      	bhi.n	100448f4 <HAL_Delay+0x28>
  {
  }
}
10044904:	46c0      	nop			@ (mov r8, r8)
10044906:	46c0      	nop			@ (mov r8, r8)
10044908:	46bd      	mov	sp, r7
1004490a:	b004      	add	sp, #16
1004490c:	bd80      	pop	{r7, pc}
1004490e:	46c0      	nop			@ (mov r8, r8)
10044910:	20000b58 	.word	0x20000b58

10044914 <__NVIC_EnableIRQ>:
{
10044914:	b580      	push	{r7, lr}
10044916:	b082      	sub	sp, #8
10044918:	af00      	add	r7, sp, #0
1004491a:	0002      	movs	r2, r0
1004491c:	1dfb      	adds	r3, r7, #7
1004491e:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
10044920:	1dfb      	adds	r3, r7, #7
10044922:	781b      	ldrb	r3, [r3, #0]
10044924:	2b7f      	cmp	r3, #127	@ 0x7f
10044926:	d809      	bhi.n	1004493c <__NVIC_EnableIRQ+0x28>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
10044928:	1dfb      	adds	r3, r7, #7
1004492a:	781b      	ldrb	r3, [r3, #0]
1004492c:	001a      	movs	r2, r3
1004492e:	231f      	movs	r3, #31
10044930:	401a      	ands	r2, r3
10044932:	4b04      	ldr	r3, [pc, #16]	@ (10044944 <__NVIC_EnableIRQ+0x30>)
10044934:	2101      	movs	r1, #1
10044936:	4091      	lsls	r1, r2
10044938:	000a      	movs	r2, r1
1004493a:	601a      	str	r2, [r3, #0]
}
1004493c:	46c0      	nop			@ (mov r8, r8)
1004493e:	46bd      	mov	sp, r7
10044940:	b002      	add	sp, #8
10044942:	bd80      	pop	{r7, pc}
10044944:	e000e100 	.word	0xe000e100

10044948 <__NVIC_SetPriority>:
{
10044948:	b590      	push	{r4, r7, lr}
1004494a:	b083      	sub	sp, #12
1004494c:	af00      	add	r7, sp, #0
1004494e:	0002      	movs	r2, r0
10044950:	6039      	str	r1, [r7, #0]
10044952:	1dfb      	adds	r3, r7, #7
10044954:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
10044956:	1dfb      	adds	r3, r7, #7
10044958:	781b      	ldrb	r3, [r3, #0]
1004495a:	2b7f      	cmp	r3, #127	@ 0x7f
1004495c:	d828      	bhi.n	100449b0 <__NVIC_SetPriority+0x68>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
1004495e:	4a2f      	ldr	r2, [pc, #188]	@ (10044a1c <__NVIC_SetPriority+0xd4>)
10044960:	1dfb      	adds	r3, r7, #7
10044962:	781b      	ldrb	r3, [r3, #0]
10044964:	b25b      	sxtb	r3, r3
10044966:	089b      	lsrs	r3, r3, #2
10044968:	33c0      	adds	r3, #192	@ 0xc0
1004496a:	009b      	lsls	r3, r3, #2
1004496c:	589b      	ldr	r3, [r3, r2]
1004496e:	1dfa      	adds	r2, r7, #7
10044970:	7812      	ldrb	r2, [r2, #0]
10044972:	0011      	movs	r1, r2
10044974:	2203      	movs	r2, #3
10044976:	400a      	ands	r2, r1
10044978:	00d2      	lsls	r2, r2, #3
1004497a:	21ff      	movs	r1, #255	@ 0xff
1004497c:	4091      	lsls	r1, r2
1004497e:	000a      	movs	r2, r1
10044980:	43d2      	mvns	r2, r2
10044982:	401a      	ands	r2, r3
10044984:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
10044986:	683b      	ldr	r3, [r7, #0]
10044988:	019b      	lsls	r3, r3, #6
1004498a:	22ff      	movs	r2, #255	@ 0xff
1004498c:	401a      	ands	r2, r3
1004498e:	1dfb      	adds	r3, r7, #7
10044990:	781b      	ldrb	r3, [r3, #0]
10044992:	0018      	movs	r0, r3
10044994:	2303      	movs	r3, #3
10044996:	4003      	ands	r3, r0
10044998:	00db      	lsls	r3, r3, #3
1004499a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
1004499c:	481f      	ldr	r0, [pc, #124]	@ (10044a1c <__NVIC_SetPriority+0xd4>)
1004499e:	1dfb      	adds	r3, r7, #7
100449a0:	781b      	ldrb	r3, [r3, #0]
100449a2:	b25b      	sxtb	r3, r3
100449a4:	089b      	lsrs	r3, r3, #2
100449a6:	430a      	orrs	r2, r1
100449a8:	33c0      	adds	r3, #192	@ 0xc0
100449aa:	009b      	lsls	r3, r3, #2
100449ac:	501a      	str	r2, [r3, r0]
}
100449ae:	e031      	b.n	10044a14 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
100449b0:	4a1b      	ldr	r2, [pc, #108]	@ (10044a20 <__NVIC_SetPriority+0xd8>)
100449b2:	1dfb      	adds	r3, r7, #7
100449b4:	781b      	ldrb	r3, [r3, #0]
100449b6:	0019      	movs	r1, r3
100449b8:	230f      	movs	r3, #15
100449ba:	400b      	ands	r3, r1
100449bc:	3b08      	subs	r3, #8
100449be:	089b      	lsrs	r3, r3, #2
100449c0:	3306      	adds	r3, #6
100449c2:	009b      	lsls	r3, r3, #2
100449c4:	18d3      	adds	r3, r2, r3
100449c6:	3304      	adds	r3, #4
100449c8:	681b      	ldr	r3, [r3, #0]
100449ca:	1dfa      	adds	r2, r7, #7
100449cc:	7812      	ldrb	r2, [r2, #0]
100449ce:	0011      	movs	r1, r2
100449d0:	2203      	movs	r2, #3
100449d2:	400a      	ands	r2, r1
100449d4:	00d2      	lsls	r2, r2, #3
100449d6:	21ff      	movs	r1, #255	@ 0xff
100449d8:	4091      	lsls	r1, r2
100449da:	000a      	movs	r2, r1
100449dc:	43d2      	mvns	r2, r2
100449de:	401a      	ands	r2, r3
100449e0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
100449e2:	683b      	ldr	r3, [r7, #0]
100449e4:	019b      	lsls	r3, r3, #6
100449e6:	22ff      	movs	r2, #255	@ 0xff
100449e8:	401a      	ands	r2, r3
100449ea:	1dfb      	adds	r3, r7, #7
100449ec:	781b      	ldrb	r3, [r3, #0]
100449ee:	0018      	movs	r0, r3
100449f0:	2303      	movs	r3, #3
100449f2:	4003      	ands	r3, r0
100449f4:	00db      	lsls	r3, r3, #3
100449f6:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
100449f8:	4809      	ldr	r0, [pc, #36]	@ (10044a20 <__NVIC_SetPriority+0xd8>)
100449fa:	1dfb      	adds	r3, r7, #7
100449fc:	781b      	ldrb	r3, [r3, #0]
100449fe:	001c      	movs	r4, r3
10044a00:	230f      	movs	r3, #15
10044a02:	4023      	ands	r3, r4
10044a04:	3b08      	subs	r3, #8
10044a06:	089b      	lsrs	r3, r3, #2
10044a08:	430a      	orrs	r2, r1
10044a0a:	3306      	adds	r3, #6
10044a0c:	009b      	lsls	r3, r3, #2
10044a0e:	18c3      	adds	r3, r0, r3
10044a10:	3304      	adds	r3, #4
10044a12:	601a      	str	r2, [r3, #0]
}
10044a14:	46c0      	nop			@ (mov r8, r8)
10044a16:	46bd      	mov	sp, r7
10044a18:	b003      	add	sp, #12
10044a1a:	bd90      	pop	{r4, r7, pc}
10044a1c:	e000e100 	.word	0xe000e100
10044a20:	e000ed00 	.word	0xe000ed00

10044a24 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
10044a24:	b580      	push	{r7, lr}
10044a26:	b082      	sub	sp, #8
10044a28:	af00      	add	r7, sp, #0
10044a2a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
10044a2c:	687b      	ldr	r3, [r7, #4]
10044a2e:	1e5a      	subs	r2, r3, #1
10044a30:	2380      	movs	r3, #128	@ 0x80
10044a32:	045b      	lsls	r3, r3, #17
10044a34:	429a      	cmp	r2, r3
10044a36:	d301      	bcc.n	10044a3c <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
10044a38:	2301      	movs	r3, #1
10044a3a:	e010      	b.n	10044a5e <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
10044a3c:	4b0a      	ldr	r3, [pc, #40]	@ (10044a68 <SysTick_Config+0x44>)
10044a3e:	687a      	ldr	r2, [r7, #4]
10044a40:	3a01      	subs	r2, #1
10044a42:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
10044a44:	2301      	movs	r3, #1
10044a46:	425b      	negs	r3, r3
10044a48:	2103      	movs	r1, #3
10044a4a:	0018      	movs	r0, r3
10044a4c:	f7ff ff7c 	bl	10044948 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
10044a50:	4b05      	ldr	r3, [pc, #20]	@ (10044a68 <SysTick_Config+0x44>)
10044a52:	2200      	movs	r2, #0
10044a54:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
10044a56:	4b04      	ldr	r3, [pc, #16]	@ (10044a68 <SysTick_Config+0x44>)
10044a58:	2207      	movs	r2, #7
10044a5a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
10044a5c:	2300      	movs	r3, #0
}
10044a5e:	0018      	movs	r0, r3
10044a60:	46bd      	mov	sp, r7
10044a62:	b002      	add	sp, #8
10044a64:	bd80      	pop	{r7, pc}
10044a66:	46c0      	nop			@ (mov r8, r8)
10044a68:	e000e010 	.word	0xe000e010

10044a6c <HAL_NVIC_SetPriority>:
  *         with stm32wb0x devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
10044a6c:	b580      	push	{r7, lr}
10044a6e:	b084      	sub	sp, #16
10044a70:	af00      	add	r7, sp, #0
10044a72:	60b9      	str	r1, [r7, #8]
10044a74:	607a      	str	r2, [r7, #4]
10044a76:	210f      	movs	r1, #15
10044a78:	187b      	adds	r3, r7, r1
10044a7a:	1c02      	adds	r2, r0, #0
10044a7c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
10044a7e:	68ba      	ldr	r2, [r7, #8]
10044a80:	187b      	adds	r3, r7, r1
10044a82:	781b      	ldrb	r3, [r3, #0]
10044a84:	b25b      	sxtb	r3, r3
10044a86:	0011      	movs	r1, r2
10044a88:	0018      	movs	r0, r3
10044a8a:	f7ff ff5d 	bl	10044948 <__NVIC_SetPriority>
}
10044a8e:	46c0      	nop			@ (mov r8, r8)
10044a90:	46bd      	mov	sp, r7
10044a92:	b004      	add	sp, #16
10044a94:	bd80      	pop	{r7, pc}

10044a96 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file)
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
10044a96:	b580      	push	{r7, lr}
10044a98:	b082      	sub	sp, #8
10044a9a:	af00      	add	r7, sp, #0
10044a9c:	0002      	movs	r2, r0
10044a9e:	1dfb      	adds	r3, r7, #7
10044aa0:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
10044aa2:	1dfb      	adds	r3, r7, #7
10044aa4:	781b      	ldrb	r3, [r3, #0]
10044aa6:	b25b      	sxtb	r3, r3
10044aa8:	0018      	movs	r0, r3
10044aaa:	f7ff ff33 	bl	10044914 <__NVIC_EnableIRQ>
}
10044aae:	46c0      	nop			@ (mov r8, r8)
10044ab0:	46bd      	mov	sp, r7
10044ab2:	b002      	add	sp, #8
10044ab4:	bd80      	pop	{r7, pc}

10044ab6 <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
10044ab6:	b580      	push	{r7, lr}
10044ab8:	b082      	sub	sp, #8
10044aba:	af00      	add	r7, sp, #0
10044abc:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
10044abe:	687b      	ldr	r3, [r7, #4]
10044ac0:	0018      	movs	r0, r3
10044ac2:	f7ff ffaf 	bl	10044a24 <SysTick_Config>
10044ac6:	0003      	movs	r3, r0
}
10044ac8:	0018      	movs	r0, r3
10044aca:	46bd      	mov	sp, r7
10044acc:	b002      	add	sp, #8
10044ace:	bd80      	pop	{r7, pc}

10044ad0 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
10044ad0:	b580      	push	{r7, lr}
10044ad2:	b086      	sub	sp, #24
10044ad4:	af00      	add	r7, sp, #0
10044ad6:	6078      	str	r0, [r7, #4]
10044ad8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
10044ada:	2300      	movs	r3, #0
10044adc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
10044ade:	e194      	b.n	10044e0a <HAL_GPIO_Init+0x33a>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
10044ae0:	683b      	ldr	r3, [r7, #0]
10044ae2:	681b      	ldr	r3, [r3, #0]
10044ae4:	2101      	movs	r1, #1
10044ae6:	697a      	ldr	r2, [r7, #20]
10044ae8:	4091      	lsls	r1, r2
10044aea:	000a      	movs	r2, r1
10044aec:	4013      	ands	r3, r2
10044aee:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
10044af0:	68fb      	ldr	r3, [r7, #12]
10044af2:	2b00      	cmp	r3, #0
10044af4:	d100      	bne.n	10044af8 <HAL_GPIO_Init+0x28>
10044af6:	e185      	b.n	10044e04 <HAL_GPIO_Init+0x334>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
10044af8:	683b      	ldr	r3, [r7, #0]
10044afa:	685b      	ldr	r3, [r3, #4]
10044afc:	2203      	movs	r2, #3
10044afe:	4013      	ands	r3, r2
10044b00:	2b01      	cmp	r3, #1
10044b02:	d005      	beq.n	10044b10 <HAL_GPIO_Init+0x40>
10044b04:	683b      	ldr	r3, [r7, #0]
10044b06:	685b      	ldr	r3, [r3, #4]
10044b08:	2203      	movs	r2, #3
10044b0a:	4013      	ands	r3, r2
10044b0c:	2b02      	cmp	r3, #2
10044b0e:	d130      	bne.n	10044b72 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
10044b10:	687b      	ldr	r3, [r7, #4]
10044b12:	689b      	ldr	r3, [r3, #8]
10044b14:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
10044b16:	697b      	ldr	r3, [r7, #20]
10044b18:	005b      	lsls	r3, r3, #1
10044b1a:	2203      	movs	r2, #3
10044b1c:	409a      	lsls	r2, r3
10044b1e:	0013      	movs	r3, r2
10044b20:	43da      	mvns	r2, r3
10044b22:	693b      	ldr	r3, [r7, #16]
10044b24:	4013      	ands	r3, r2
10044b26:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
10044b28:	683b      	ldr	r3, [r7, #0]
10044b2a:	68da      	ldr	r2, [r3, #12]
10044b2c:	697b      	ldr	r3, [r7, #20]
10044b2e:	005b      	lsls	r3, r3, #1
10044b30:	409a      	lsls	r2, r3
10044b32:	0013      	movs	r3, r2
10044b34:	693a      	ldr	r2, [r7, #16]
10044b36:	4313      	orrs	r3, r2
10044b38:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
10044b3a:	687b      	ldr	r3, [r7, #4]
10044b3c:	693a      	ldr	r2, [r7, #16]
10044b3e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
10044b40:	687b      	ldr	r3, [r7, #4]
10044b42:	685b      	ldr	r3, [r3, #4]
10044b44:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
10044b46:	2201      	movs	r2, #1
10044b48:	697b      	ldr	r3, [r7, #20]
10044b4a:	409a      	lsls	r2, r3
10044b4c:	0013      	movs	r3, r2
10044b4e:	43da      	mvns	r2, r3
10044b50:	693b      	ldr	r3, [r7, #16]
10044b52:	4013      	ands	r3, r2
10044b54:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
10044b56:	683b      	ldr	r3, [r7, #0]
10044b58:	685b      	ldr	r3, [r3, #4]
10044b5a:	091b      	lsrs	r3, r3, #4
10044b5c:	2201      	movs	r2, #1
10044b5e:	401a      	ands	r2, r3
10044b60:	697b      	ldr	r3, [r7, #20]
10044b62:	409a      	lsls	r2, r3
10044b64:	0013      	movs	r3, r2
10044b66:	693a      	ldr	r2, [r7, #16]
10044b68:	4313      	orrs	r3, r2
10044b6a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
10044b6c:	687b      	ldr	r3, [r7, #4]
10044b6e:	693a      	ldr	r2, [r7, #16]
10044b70:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
10044b72:	683b      	ldr	r3, [r7, #0]
10044b74:	685b      	ldr	r3, [r3, #4]
10044b76:	2203      	movs	r2, #3
10044b78:	4013      	ands	r3, r2
10044b7a:	2b03      	cmp	r3, #3
10044b7c:	d017      	beq.n	10044bae <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
10044b7e:	687b      	ldr	r3, [r7, #4]
10044b80:	68db      	ldr	r3, [r3, #12]
10044b82:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
10044b84:	697b      	ldr	r3, [r7, #20]
10044b86:	005b      	lsls	r3, r3, #1
10044b88:	2203      	movs	r2, #3
10044b8a:	409a      	lsls	r2, r3
10044b8c:	0013      	movs	r3, r2
10044b8e:	43da      	mvns	r2, r3
10044b90:	693b      	ldr	r3, [r7, #16]
10044b92:	4013      	ands	r3, r2
10044b94:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
10044b96:	683b      	ldr	r3, [r7, #0]
10044b98:	689a      	ldr	r2, [r3, #8]
10044b9a:	697b      	ldr	r3, [r7, #20]
10044b9c:	005b      	lsls	r3, r3, #1
10044b9e:	409a      	lsls	r2, r3
10044ba0:	0013      	movs	r3, r2
10044ba2:	693a      	ldr	r2, [r7, #16]
10044ba4:	4313      	orrs	r3, r2
10044ba6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
10044ba8:	687b      	ldr	r3, [r7, #4]
10044baa:	693a      	ldr	r2, [r7, #16]
10044bac:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
10044bae:	683b      	ldr	r3, [r7, #0]
10044bb0:	685b      	ldr	r3, [r3, #4]
10044bb2:	2203      	movs	r2, #3
10044bb4:	4013      	ands	r3, r2
10044bb6:	2b02      	cmp	r3, #2
10044bb8:	d123      	bne.n	10044c02 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
10044bba:	697b      	ldr	r3, [r7, #20]
10044bbc:	08da      	lsrs	r2, r3, #3
10044bbe:	687b      	ldr	r3, [r7, #4]
10044bc0:	3208      	adds	r2, #8
10044bc2:	0092      	lsls	r2, r2, #2
10044bc4:	58d3      	ldr	r3, [r2, r3]
10044bc6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
10044bc8:	697b      	ldr	r3, [r7, #20]
10044bca:	2207      	movs	r2, #7
10044bcc:	4013      	ands	r3, r2
10044bce:	009b      	lsls	r3, r3, #2
10044bd0:	220f      	movs	r2, #15
10044bd2:	409a      	lsls	r2, r3
10044bd4:	0013      	movs	r3, r2
10044bd6:	43da      	mvns	r2, r3
10044bd8:	693b      	ldr	r3, [r7, #16]
10044bda:	4013      	ands	r3, r2
10044bdc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
10044bde:	683b      	ldr	r3, [r7, #0]
10044be0:	691a      	ldr	r2, [r3, #16]
10044be2:	697b      	ldr	r3, [r7, #20]
10044be4:	2107      	movs	r1, #7
10044be6:	400b      	ands	r3, r1
10044be8:	009b      	lsls	r3, r3, #2
10044bea:	409a      	lsls	r2, r3
10044bec:	0013      	movs	r3, r2
10044bee:	693a      	ldr	r2, [r7, #16]
10044bf0:	4313      	orrs	r3, r2
10044bf2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
10044bf4:	697b      	ldr	r3, [r7, #20]
10044bf6:	08da      	lsrs	r2, r3, #3
10044bf8:	687b      	ldr	r3, [r7, #4]
10044bfa:	3208      	adds	r2, #8
10044bfc:	0092      	lsls	r2, r2, #2
10044bfe:	6939      	ldr	r1, [r7, #16]
10044c00:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
10044c02:	687b      	ldr	r3, [r7, #4]
10044c04:	681b      	ldr	r3, [r3, #0]
10044c06:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
10044c08:	697b      	ldr	r3, [r7, #20]
10044c0a:	005b      	lsls	r3, r3, #1
10044c0c:	2203      	movs	r2, #3
10044c0e:	409a      	lsls	r2, r3
10044c10:	0013      	movs	r3, r2
10044c12:	43da      	mvns	r2, r3
10044c14:	693b      	ldr	r3, [r7, #16]
10044c16:	4013      	ands	r3, r2
10044c18:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
10044c1a:	683b      	ldr	r3, [r7, #0]
10044c1c:	685b      	ldr	r3, [r3, #4]
10044c1e:	2203      	movs	r2, #3
10044c20:	401a      	ands	r2, r3
10044c22:	697b      	ldr	r3, [r7, #20]
10044c24:	005b      	lsls	r3, r3, #1
10044c26:	409a      	lsls	r2, r3
10044c28:	0013      	movs	r3, r2
10044c2a:	693a      	ldr	r2, [r7, #16]
10044c2c:	4313      	orrs	r3, r2
10044c2e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
10044c30:	687b      	ldr	r3, [r7, #4]
10044c32:	693a      	ldr	r2, [r7, #16]
10044c34:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
10044c36:	683b      	ldr	r3, [r7, #0]
10044c38:	685a      	ldr	r2, [r3, #4]
10044c3a:	23c0      	movs	r3, #192	@ 0xc0
10044c3c:	029b      	lsls	r3, r3, #10
10044c3e:	4013      	ands	r3, r2
10044c40:	d100      	bne.n	10044c44 <HAL_GPIO_Init+0x174>
10044c42:	e0df      	b.n	10044e04 <HAL_GPIO_Init+0x334>
      {

        /* Edge/Level line configuration */
        if ((GPIO_Init->Mode & DETECTION_TYPE) != 0x00u)
10044c44:	683b      	ldr	r3, [r7, #0]
10044c46:	685a      	ldr	r2, [r3, #4]
10044c48:	2380      	movs	r3, #128	@ 0x80
10044c4a:	02db      	lsls	r3, r3, #11
10044c4c:	4013      	ands	r3, r2
10044c4e:	d031      	beq.n	10044cb4 <HAL_GPIO_Init+0x1e4>
        {
          temp = SYSCFG->IO_DTR;
10044c50:	2380      	movs	r3, #128	@ 0x80
10044c52:	05db      	lsls	r3, r3, #23
10044c54:	68db      	ldr	r3, [r3, #12]
10044c56:	613b      	str	r3, [r7, #16]
          if (GPIOx == GPIOA)
10044c58:	687a      	ldr	r2, [r7, #4]
10044c5a:	2390      	movs	r3, #144	@ 0x90
10044c5c:	05db      	lsls	r3, r3, #23
10044c5e:	429a      	cmp	r2, r3
10044c60:	d111      	bne.n	10044c86 <HAL_GPIO_Init+0x1b6>
          {
            temp &= ~(1 << position);
10044c62:	2201      	movs	r2, #1
10044c64:	697b      	ldr	r3, [r7, #20]
10044c66:	409a      	lsls	r2, r3
10044c68:	0013      	movs	r3, r2
10044c6a:	43db      	mvns	r3, r3
10044c6c:	001a      	movs	r2, r3
10044c6e:	693b      	ldr	r3, [r7, #16]
10044c70:	4013      	ands	r3, r2
10044c72:	613b      	str	r3, [r7, #16]
            temp |= (1 << position);
10044c74:	2201      	movs	r2, #1
10044c76:	697b      	ldr	r3, [r7, #20]
10044c78:	409a      	lsls	r2, r3
10044c7a:	0013      	movs	r3, r2
10044c7c:	001a      	movs	r2, r3
10044c7e:	693b      	ldr	r3, [r7, #16]
10044c80:	4313      	orrs	r3, r2
10044c82:	613b      	str	r3, [r7, #16]
10044c84:	e012      	b.n	10044cac <HAL_GPIO_Init+0x1dc>
          }
          else
          {
            temp &= ~((1 << position) << 16);
10044c86:	2201      	movs	r2, #1
10044c88:	697b      	ldr	r3, [r7, #20]
10044c8a:	409a      	lsls	r2, r3
10044c8c:	0013      	movs	r3, r2
10044c8e:	041b      	lsls	r3, r3, #16
10044c90:	43db      	mvns	r3, r3
10044c92:	001a      	movs	r2, r3
10044c94:	693b      	ldr	r3, [r7, #16]
10044c96:	4013      	ands	r3, r2
10044c98:	613b      	str	r3, [r7, #16]
            temp |= ((1 << position) << 16);
10044c9a:	2201      	movs	r2, #1
10044c9c:	697b      	ldr	r3, [r7, #20]
10044c9e:	409a      	lsls	r2, r3
10044ca0:	0013      	movs	r3, r2
10044ca2:	041b      	lsls	r3, r3, #16
10044ca4:	001a      	movs	r2, r3
10044ca6:	693b      	ldr	r3, [r7, #16]
10044ca8:	4313      	orrs	r3, r2
10044caa:	613b      	str	r3, [r7, #16]
          }
          SYSCFG->IO_DTR = temp;
10044cac:	2380      	movs	r3, #128	@ 0x80
10044cae:	05db      	lsls	r3, r3, #23
10044cb0:	693a      	ldr	r2, [r7, #16]
10044cb2:	60da      	str	r2, [r3, #12]
        }

		/* Edge selection configuration */
		if ((GPIO_Init->Mode & EDGE_SELECTION) != 0x00u)
10044cb4:	683b      	ldr	r3, [r7, #0]
10044cb6:	685a      	ldr	r2, [r3, #4]
10044cb8:	2380      	movs	r3, #128	@ 0x80
10044cba:	035b      	lsls	r3, r3, #13
10044cbc:	4013      	ands	r3, r2
10044cbe:	d031      	beq.n	10044d24 <HAL_GPIO_Init+0x254>
        {
          temp = SYSCFG->IO_IBER;
10044cc0:	2380      	movs	r3, #128	@ 0x80
10044cc2:	05db      	lsls	r3, r3, #23
10044cc4:	691b      	ldr	r3, [r3, #16]
10044cc6:	613b      	str	r3, [r7, #16]

          if (GPIOx == GPIOA)
10044cc8:	687a      	ldr	r2, [r7, #4]
10044cca:	2390      	movs	r3, #144	@ 0x90
10044ccc:	05db      	lsls	r3, r3, #23
10044cce:	429a      	cmp	r2, r3
10044cd0:	d111      	bne.n	10044cf6 <HAL_GPIO_Init+0x226>
          {
            temp &= ~(1 << position);
10044cd2:	2201      	movs	r2, #1
10044cd4:	697b      	ldr	r3, [r7, #20]
10044cd6:	409a      	lsls	r2, r3
10044cd8:	0013      	movs	r3, r2
10044cda:	43db      	mvns	r3, r3
10044cdc:	001a      	movs	r2, r3
10044cde:	693b      	ldr	r3, [r7, #16]
10044ce0:	4013      	ands	r3, r2
10044ce2:	613b      	str	r3, [r7, #16]
            temp |= (1 << position);
10044ce4:	2201      	movs	r2, #1
10044ce6:	697b      	ldr	r3, [r7, #20]
10044ce8:	409a      	lsls	r2, r3
10044cea:	0013      	movs	r3, r2
10044cec:	001a      	movs	r2, r3
10044cee:	693b      	ldr	r3, [r7, #16]
10044cf0:	4313      	orrs	r3, r2
10044cf2:	613b      	str	r3, [r7, #16]
10044cf4:	e012      	b.n	10044d1c <HAL_GPIO_Init+0x24c>
          }
          else
          {
            temp &= ~((1 << position) << 16);
10044cf6:	2201      	movs	r2, #1
10044cf8:	697b      	ldr	r3, [r7, #20]
10044cfa:	409a      	lsls	r2, r3
10044cfc:	0013      	movs	r3, r2
10044cfe:	041b      	lsls	r3, r3, #16
10044d00:	43db      	mvns	r3, r3
10044d02:	001a      	movs	r2, r3
10044d04:	693b      	ldr	r3, [r7, #16]
10044d06:	4013      	ands	r3, r2
10044d08:	613b      	str	r3, [r7, #16]
            temp |= ((1 << position) << 16);
10044d0a:	2201      	movs	r2, #1
10044d0c:	697b      	ldr	r3, [r7, #20]
10044d0e:	409a      	lsls	r2, r3
10044d10:	0013      	movs	r3, r2
10044d12:	041b      	lsls	r3, r3, #16
10044d14:	001a      	movs	r2, r3
10044d16:	693b      	ldr	r3, [r7, #16]
10044d18:	4313      	orrs	r3, r2
10044d1a:	613b      	str	r3, [r7, #16]
          }
          SYSCFG->IO_IBER= temp;
10044d1c:	2380      	movs	r3, #128	@ 0x80
10044d1e:	05db      	lsls	r3, r3, #23
10044d20:	693a      	ldr	r2, [r7, #16]
10044d22:	611a      	str	r2, [r3, #16]
        }

        /* Trigger mode configuration */
		if ((GPIO_Init->Mode & TRIGGER_MODE) != 0x00u)
10044d24:	683b      	ldr	r3, [r7, #0]
10044d26:	685a      	ldr	r2, [r3, #4]
10044d28:	2380      	movs	r3, #128	@ 0x80
10044d2a:	03db      	lsls	r3, r3, #15
10044d2c:	4013      	ands	r3, r2
10044d2e:	d031      	beq.n	10044d94 <HAL_GPIO_Init+0x2c4>
        {
          temp = SYSCFG->IO_IEVR;
10044d30:	2380      	movs	r3, #128	@ 0x80
10044d32:	05db      	lsls	r3, r3, #23
10044d34:	695b      	ldr	r3, [r3, #20]
10044d36:	613b      	str	r3, [r7, #16]

          if (GPIOx == GPIOA)
10044d38:	687a      	ldr	r2, [r7, #4]
10044d3a:	2390      	movs	r3, #144	@ 0x90
10044d3c:	05db      	lsls	r3, r3, #23
10044d3e:	429a      	cmp	r2, r3
10044d40:	d111      	bne.n	10044d66 <HAL_GPIO_Init+0x296>
          {
            temp &= ~(1 << position);
10044d42:	2201      	movs	r2, #1
10044d44:	697b      	ldr	r3, [r7, #20]
10044d46:	409a      	lsls	r2, r3
10044d48:	0013      	movs	r3, r2
10044d4a:	43db      	mvns	r3, r3
10044d4c:	001a      	movs	r2, r3
10044d4e:	693b      	ldr	r3, [r7, #16]
10044d50:	4013      	ands	r3, r2
10044d52:	613b      	str	r3, [r7, #16]
            temp |= (1 << position);
10044d54:	2201      	movs	r2, #1
10044d56:	697b      	ldr	r3, [r7, #20]
10044d58:	409a      	lsls	r2, r3
10044d5a:	0013      	movs	r3, r2
10044d5c:	001a      	movs	r2, r3
10044d5e:	693b      	ldr	r3, [r7, #16]
10044d60:	4313      	orrs	r3, r2
10044d62:	613b      	str	r3, [r7, #16]
10044d64:	e012      	b.n	10044d8c <HAL_GPIO_Init+0x2bc>
          }
          else
          {
            temp &= ~((1 << position) << 16);
10044d66:	2201      	movs	r2, #1
10044d68:	697b      	ldr	r3, [r7, #20]
10044d6a:	409a      	lsls	r2, r3
10044d6c:	0013      	movs	r3, r2
10044d6e:	041b      	lsls	r3, r3, #16
10044d70:	43db      	mvns	r3, r3
10044d72:	001a      	movs	r2, r3
10044d74:	693b      	ldr	r3, [r7, #16]
10044d76:	4013      	ands	r3, r2
10044d78:	613b      	str	r3, [r7, #16]
            temp |= ((1 << position) << 16);
10044d7a:	2201      	movs	r2, #1
10044d7c:	697b      	ldr	r3, [r7, #20]
10044d7e:	409a      	lsls	r2, r3
10044d80:	0013      	movs	r3, r2
10044d82:	041b      	lsls	r3, r3, #16
10044d84:	001a      	movs	r2, r3
10044d86:	693b      	ldr	r3, [r7, #16]
10044d88:	4313      	orrs	r3, r2
10044d8a:	613b      	str	r3, [r7, #16]
          }
          SYSCFG->IO_IEVR= temp;
10044d8c:	2380      	movs	r3, #128	@ 0x80
10044d8e:	05db      	lsls	r3, r3, #23
10044d90:	693a      	ldr	r2, [r7, #16]
10044d92:	615a      	str	r2, [r3, #20]
        }

        /* Enable the specified EXTI interrupt line */
        if ((GPIO_Init->Mode & EXTI_IT) == EXTI_IT)
10044d94:	683b      	ldr	r3, [r7, #0]
10044d96:	685a      	ldr	r2, [r3, #4]
10044d98:	2380      	movs	r3, #128	@ 0x80
10044d9a:	025b      	lsls	r3, r3, #9
10044d9c:	4013      	ands	r3, r2
10044d9e:	d031      	beq.n	10044e04 <HAL_GPIO_Init+0x334>
        {
          temp = SYSCFG->IO_IER;
10044da0:	2380      	movs	r3, #128	@ 0x80
10044da2:	05db      	lsls	r3, r3, #23
10044da4:	699b      	ldr	r3, [r3, #24]
10044da6:	613b      	str	r3, [r7, #16]

          if (GPIOx == GPIOA)
10044da8:	687a      	ldr	r2, [r7, #4]
10044daa:	2390      	movs	r3, #144	@ 0x90
10044dac:	05db      	lsls	r3, r3, #23
10044dae:	429a      	cmp	r2, r3
10044db0:	d111      	bne.n	10044dd6 <HAL_GPIO_Init+0x306>
          {
            temp &= ~(1 << position);
10044db2:	2201      	movs	r2, #1
10044db4:	697b      	ldr	r3, [r7, #20]
10044db6:	409a      	lsls	r2, r3
10044db8:	0013      	movs	r3, r2
10044dba:	43db      	mvns	r3, r3
10044dbc:	001a      	movs	r2, r3
10044dbe:	693b      	ldr	r3, [r7, #16]
10044dc0:	4013      	ands	r3, r2
10044dc2:	613b      	str	r3, [r7, #16]
            temp |= (1 << position);
10044dc4:	2201      	movs	r2, #1
10044dc6:	697b      	ldr	r3, [r7, #20]
10044dc8:	409a      	lsls	r2, r3
10044dca:	0013      	movs	r3, r2
10044dcc:	001a      	movs	r2, r3
10044dce:	693b      	ldr	r3, [r7, #16]
10044dd0:	4313      	orrs	r3, r2
10044dd2:	613b      	str	r3, [r7, #16]
10044dd4:	e012      	b.n	10044dfc <HAL_GPIO_Init+0x32c>
          }
          else
          {
            temp &= ~((1 << position) << 16);
10044dd6:	2201      	movs	r2, #1
10044dd8:	697b      	ldr	r3, [r7, #20]
10044dda:	409a      	lsls	r2, r3
10044ddc:	0013      	movs	r3, r2
10044dde:	041b      	lsls	r3, r3, #16
10044de0:	43db      	mvns	r3, r3
10044de2:	001a      	movs	r2, r3
10044de4:	693b      	ldr	r3, [r7, #16]
10044de6:	4013      	ands	r3, r2
10044de8:	613b      	str	r3, [r7, #16]
            temp |= ((1 << position) << 16);
10044dea:	2201      	movs	r2, #1
10044dec:	697b      	ldr	r3, [r7, #20]
10044dee:	409a      	lsls	r2, r3
10044df0:	0013      	movs	r3, r2
10044df2:	041b      	lsls	r3, r3, #16
10044df4:	001a      	movs	r2, r3
10044df6:	693b      	ldr	r3, [r7, #16]
10044df8:	4313      	orrs	r3, r2
10044dfa:	613b      	str	r3, [r7, #16]
          }
          SYSCFG->IO_IER= temp;
10044dfc:	2380      	movs	r3, #128	@ 0x80
10044dfe:	05db      	lsls	r3, r3, #23
10044e00:	693a      	ldr	r2, [r7, #16]
10044e02:	619a      	str	r2, [r3, #24]
        }
      }
    }

    position++;
10044e04:	697b      	ldr	r3, [r7, #20]
10044e06:	3301      	adds	r3, #1
10044e08:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
10044e0a:	683b      	ldr	r3, [r7, #0]
10044e0c:	681a      	ldr	r2, [r3, #0]
10044e0e:	697b      	ldr	r3, [r7, #20]
10044e10:	40da      	lsrs	r2, r3
10044e12:	1e13      	subs	r3, r2, #0
10044e14:	d000      	beq.n	10044e18 <HAL_GPIO_Init+0x348>
10044e16:	e663      	b.n	10044ae0 <HAL_GPIO_Init+0x10>
  }
}
10044e18:	46c0      	nop			@ (mov r8, r8)
10044e1a:	46c0      	nop			@ (mov r8, r8)
10044e1c:	46bd      	mov	sp, r7
10044e1e:	b006      	add	sp, #24
10044e20:	bd80      	pop	{r7, pc}

10044e22 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
10044e22:	b580      	push	{r7, lr}
10044e24:	b082      	sub	sp, #8
10044e26:	af00      	add	r7, sp, #0
10044e28:	6078      	str	r0, [r7, #4]
10044e2a:	0008      	movs	r0, r1
10044e2c:	0011      	movs	r1, r2
10044e2e:	1cbb      	adds	r3, r7, #2
10044e30:	1c02      	adds	r2, r0, #0
10044e32:	801a      	strh	r2, [r3, #0]
10044e34:	1c7b      	adds	r3, r7, #1
10044e36:	1c0a      	adds	r2, r1, #0
10044e38:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
10044e3a:	1c7b      	adds	r3, r7, #1
10044e3c:	781b      	ldrb	r3, [r3, #0]
10044e3e:	2b00      	cmp	r3, #0
10044e40:	d004      	beq.n	10044e4c <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
10044e42:	1cbb      	adds	r3, r7, #2
10044e44:	881a      	ldrh	r2, [r3, #0]
10044e46:	687b      	ldr	r3, [r7, #4]
10044e48:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
10044e4a:	e003      	b.n	10044e54 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
10044e4c:	1cbb      	adds	r3, r7, #2
10044e4e:	881a      	ldrh	r2, [r3, #0]
10044e50:	687b      	ldr	r3, [r7, #4]
10044e52:	629a      	str	r2, [r3, #40]	@ 0x28
}
10044e54:	46c0      	nop			@ (mov r8, r8)
10044e56:	46bd      	mov	sp, r7
10044e58:	b002      	add	sp, #8
10044e5a:	bd80      	pop	{r7, pc}

10044e5c <HAL_GPIO_EXTI_IRQHandler>:
  * @param GPIOx where x can be (A..B) to select the GPIO peripheral
  * @param GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
10044e5c:	b580      	push	{r7, lr}
10044e5e:	b082      	sub	sp, #8
10044e60:	af00      	add	r7, sp, #0
10044e62:	6078      	str	r0, [r7, #4]
10044e64:	000a      	movs	r2, r1
10044e66:	1cbb      	adds	r3, r7, #2
10044e68:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIOx, GPIO_Pin) != 0x00u)
10044e6a:	687a      	ldr	r2, [r7, #4]
10044e6c:	2390      	movs	r3, #144	@ 0x90
10044e6e:	05db      	lsls	r3, r3, #23
10044e70:	429a      	cmp	r2, r3
10044e72:	d109      	bne.n	10044e88 <HAL_GPIO_EXTI_IRQHandler+0x2c>
10044e74:	2380      	movs	r3, #128	@ 0x80
10044e76:	05db      	lsls	r3, r3, #23
10044e78:	69db      	ldr	r3, [r3, #28]
10044e7a:	1cba      	adds	r2, r7, #2
10044e7c:	8812      	ldrh	r2, [r2, #0]
10044e7e:	4013      	ands	r3, r2
10044e80:	1e5a      	subs	r2, r3, #1
10044e82:	4193      	sbcs	r3, r2
10044e84:	b2db      	uxtb	r3, r3
10044e86:	e009      	b.n	10044e9c <HAL_GPIO_EXTI_IRQHandler+0x40>
10044e88:	2380      	movs	r3, #128	@ 0x80
10044e8a:	05db      	lsls	r3, r3, #23
10044e8c:	69db      	ldr	r3, [r3, #28]
10044e8e:	1cba      	adds	r2, r7, #2
10044e90:	8812      	ldrh	r2, [r2, #0]
10044e92:	0412      	lsls	r2, r2, #16
10044e94:	4013      	ands	r3, r2
10044e96:	1e5a      	subs	r2, r3, #1
10044e98:	4193      	sbcs	r3, r2
10044e9a:	b2db      	uxtb	r3, r3
10044e9c:	2b00      	cmp	r3, #0
10044e9e:	d017      	beq.n	10044ed0 <HAL_GPIO_EXTI_IRQHandler+0x74>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIOx, GPIO_Pin);
10044ea0:	687a      	ldr	r2, [r7, #4]
10044ea2:	2390      	movs	r3, #144	@ 0x90
10044ea4:	05db      	lsls	r3, r3, #23
10044ea6:	429a      	cmp	r2, r3
10044ea8:	d105      	bne.n	10044eb6 <HAL_GPIO_EXTI_IRQHandler+0x5a>
10044eaa:	2380      	movs	r3, #128	@ 0x80
10044eac:	05db      	lsls	r3, r3, #23
10044eae:	1cba      	adds	r2, r7, #2
10044eb0:	8812      	ldrh	r2, [r2, #0]
10044eb2:	61da      	str	r2, [r3, #28]
10044eb4:	e005      	b.n	10044ec2 <HAL_GPIO_EXTI_IRQHandler+0x66>
10044eb6:	1cbb      	adds	r3, r7, #2
10044eb8:	881a      	ldrh	r2, [r3, #0]
10044eba:	2380      	movs	r3, #128	@ 0x80
10044ebc:	05db      	lsls	r3, r3, #23
10044ebe:	0412      	lsls	r2, r2, #16
10044ec0:	61da      	str	r2, [r3, #28]
    HAL_GPIO_EXTI_Callback(GPIOx, GPIO_Pin);
10044ec2:	1cbb      	adds	r3, r7, #2
10044ec4:	881a      	ldrh	r2, [r3, #0]
10044ec6:	687b      	ldr	r3, [r7, #4]
10044ec8:	0011      	movs	r1, r2
10044eca:	0018      	movs	r0, r3
10044ecc:	f7fe f870 	bl	10042fb0 <HAL_GPIO_EXTI_Callback>
  }
}
10044ed0:	46c0      	nop			@ (mov r8, r8)
10044ed2:	46bd      	mov	sp, r7
10044ed4:	b002      	add	sp, #8
10044ed6:	bd80      	pop	{r7, pc}

10044ed8 <LL_RADIO_SetRadioConfigurationAddressPointer>:
  * @rmtoll WORD0          RADIOCONFIGPTR       LL_RADIO_SetRadioConfigurationAddressPointer
  * @param  value
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_SetRadioConfigurationAddressPointer(uint32_t value)
{
10044ed8:	b580      	push	{r7, lr}
10044eda:	b082      	sub	sp, #8
10044edc:	af00      	add	r7, sp, #0
10044ede:	6078      	str	r0, [r7, #4]
  MODIFY_REG_FIELD(BLUEGLOBWORD->WORD0, GLOBAL_WORD0_RADIOCONFIGPTR, value);
10044ee0:	4b04      	ldr	r3, [pc, #16]	@ (10044ef4 <LL_RADIO_SetRadioConfigurationAddressPointer+0x1c>)
10044ee2:	681b      	ldr	r3, [r3, #0]
10044ee4:	4b03      	ldr	r3, [pc, #12]	@ (10044ef4 <LL_RADIO_SetRadioConfigurationAddressPointer+0x1c>)
10044ee6:	687a      	ldr	r2, [r7, #4]
10044ee8:	601a      	str	r2, [r3, #0]
}
10044eea:	46c0      	nop			@ (mov r8, r8)
10044eec:	46bd      	mov	sp, r7
10044eee:	b002      	add	sp, #8
10044ef0:	bd80      	pop	{r7, pc}
10044ef2:	46c0      	nop			@ (mov r8, r8)
10044ef4:	200000c0 	.word	0x200000c0

10044ef8 <LL_RADIO_SetWakeupInitDelay>:
  * @rmtoll WORD1          WAKEUPINITDELAY       LL_RADIO_SetWakeupInitDelay
  * @param  value
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_SetWakeupInitDelay(uint32_t value)
{
10044ef8:	b580      	push	{r7, lr}
10044efa:	b082      	sub	sp, #8
10044efc:	af00      	add	r7, sp, #0
10044efe:	6078      	str	r0, [r7, #4]
  MODIFY_REG_FIELD(BLUEGLOBWORD->WORD1, GLOBAL_WORD1_WAKEUPINITDELAY, value);
10044f00:	4b07      	ldr	r3, [pc, #28]	@ (10044f20 <LL_RADIO_SetWakeupInitDelay+0x28>)
10044f02:	685b      	ldr	r3, [r3, #4]
10044f04:	4a07      	ldr	r2, [pc, #28]	@ (10044f24 <LL_RADIO_SetWakeupInitDelay+0x2c>)
10044f06:	4013      	ands	r3, r2
10044f08:	0019      	movs	r1, r3
10044f0a:	687b      	ldr	r3, [r7, #4]
10044f0c:	021b      	lsls	r3, r3, #8
10044f0e:	041b      	lsls	r3, r3, #16
10044f10:	0c1a      	lsrs	r2, r3, #16
10044f12:	4b03      	ldr	r3, [pc, #12]	@ (10044f20 <LL_RADIO_SetWakeupInitDelay+0x28>)
10044f14:	430a      	orrs	r2, r1
10044f16:	605a      	str	r2, [r3, #4]
}
10044f18:	46c0      	nop			@ (mov r8, r8)
10044f1a:	46bd      	mov	sp, r7
10044f1c:	b002      	add	sp, #8
10044f1e:	bd80      	pop	{r7, pc}
10044f20:	200000c0 	.word	0x200000c0
10044f24:	ffff00ff 	.word	0xffff00ff

10044f28 <LL_RADIO_SetTimer12InitDelayCal>:
  * @rmtoll WORD1          TIMER12INITDELAYCAL       LL_RADIO_SetTimer12InitDelayCal
  * @param  value
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_SetTimer12InitDelayCal(uint32_t value)
{
10044f28:	b580      	push	{r7, lr}
10044f2a:	b082      	sub	sp, #8
10044f2c:	af00      	add	r7, sp, #0
10044f2e:	6078      	str	r0, [r7, #4]
  MODIFY_REG_FIELD(BLUEGLOBWORD->WORD1, GLOBAL_WORD1_TIMER12INITDELAYCAL, value);
10044f30:	4b08      	ldr	r3, [pc, #32]	@ (10044f54 <LL_RADIO_SetTimer12InitDelayCal+0x2c>)
10044f32:	685b      	ldr	r3, [r3, #4]
10044f34:	4a08      	ldr	r2, [pc, #32]	@ (10044f58 <LL_RADIO_SetTimer12InitDelayCal+0x30>)
10044f36:	4013      	ands	r3, r2
10044f38:	0019      	movs	r1, r3
10044f3a:	687b      	ldr	r3, [r7, #4]
10044f3c:	041a      	lsls	r2, r3, #16
10044f3e:	23ff      	movs	r3, #255	@ 0xff
10044f40:	041b      	lsls	r3, r3, #16
10044f42:	401a      	ands	r2, r3
10044f44:	4b03      	ldr	r3, [pc, #12]	@ (10044f54 <LL_RADIO_SetTimer12InitDelayCal+0x2c>)
10044f46:	430a      	orrs	r2, r1
10044f48:	605a      	str	r2, [r3, #4]
}
10044f4a:	46c0      	nop			@ (mov r8, r8)
10044f4c:	46bd      	mov	sp, r7
10044f4e:	b002      	add	sp, #8
10044f50:	bd80      	pop	{r7, pc}
10044f52:	46c0      	nop			@ (mov r8, r8)
10044f54:	200000c0 	.word	0x200000c0
10044f58:	ff00ffff 	.word	0xff00ffff

10044f5c <LL_RADIO_SetTimer12InitDelayNoCal>:
  * @rmtoll WORD1          TIMER2INITDELAYNOCAL       LL_RADIO_SetTimer12InitDelayNoCal
  * @param  value
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_SetTimer12InitDelayNoCal(uint32_t value)
{
10044f5c:	b580      	push	{r7, lr}
10044f5e:	b082      	sub	sp, #8
10044f60:	af00      	add	r7, sp, #0
10044f62:	6078      	str	r0, [r7, #4]
  MODIFY_REG_FIELD(BLUEGLOBWORD->WORD1, GLOBAL_WORD1_TIMER2INITDELAYNOCAL, value);
10044f64:	4b06      	ldr	r3, [pc, #24]	@ (10044f80 <LL_RADIO_SetTimer12InitDelayNoCal+0x24>)
10044f66:	685b      	ldr	r3, [r3, #4]
10044f68:	021b      	lsls	r3, r3, #8
10044f6a:	0a19      	lsrs	r1, r3, #8
10044f6c:	687b      	ldr	r3, [r7, #4]
10044f6e:	061a      	lsls	r2, r3, #24
10044f70:	4b03      	ldr	r3, [pc, #12]	@ (10044f80 <LL_RADIO_SetTimer12InitDelayNoCal+0x24>)
10044f72:	430a      	orrs	r2, r1
10044f74:	605a      	str	r2, [r3, #4]
}
10044f76:	46c0      	nop			@ (mov r8, r8)
10044f78:	46bd      	mov	sp, r7
10044f7a:	b002      	add	sp, #8
10044f7c:	bd80      	pop	{r7, pc}
10044f7e:	46c0      	nop			@ (mov r8, r8)
10044f80:	200000c0 	.word	0x200000c0

10044f84 <LL_RADIO_SetTransmitCalDelayChk>:
  * @rmtoll WORD2          TRANSMITCALDELAYCHK       LL_RADIO_SetTransmitCalDelayChk
  * @param  value
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_SetTransmitCalDelayChk(uint32_t value)
{
10044f84:	b580      	push	{r7, lr}
10044f86:	b082      	sub	sp, #8
10044f88:	af00      	add	r7, sp, #0
10044f8a:	6078      	str	r0, [r7, #4]
  MODIFY_REG_FIELD(BLUEGLOBWORD->WORD2, GLOBAL_WORD2_TRANSMITCALDELAYCHK, value);
10044f8c:	4b07      	ldr	r3, [pc, #28]	@ (10044fac <LL_RADIO_SetTransmitCalDelayChk+0x28>)
10044f8e:	689b      	ldr	r3, [r3, #8]
10044f90:	22ff      	movs	r2, #255	@ 0xff
10044f92:	4393      	bics	r3, r2
10044f94:	0019      	movs	r1, r3
10044f96:	687b      	ldr	r3, [r7, #4]
10044f98:	22ff      	movs	r2, #255	@ 0xff
10044f9a:	401a      	ands	r2, r3
10044f9c:	4b03      	ldr	r3, [pc, #12]	@ (10044fac <LL_RADIO_SetTransmitCalDelayChk+0x28>)
10044f9e:	430a      	orrs	r2, r1
10044fa0:	609a      	str	r2, [r3, #8]
}
10044fa2:	46c0      	nop			@ (mov r8, r8)
10044fa4:	46bd      	mov	sp, r7
10044fa6:	b002      	add	sp, #8
10044fa8:	bd80      	pop	{r7, pc}
10044faa:	46c0      	nop			@ (mov r8, r8)
10044fac:	200000c0 	.word	0x200000c0

10044fb0 <LL_RADIO_SetTransmitNoCalDelayChk>:
  * @rmtoll WORD2          TRANSMITNOCALDELAYCHK       LL_RADIO_SetTransmitNoCalDelayChk
  * @param  value
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_SetTransmitNoCalDelayChk(uint32_t value)
{
10044fb0:	b580      	push	{r7, lr}
10044fb2:	b082      	sub	sp, #8
10044fb4:	af00      	add	r7, sp, #0
10044fb6:	6078      	str	r0, [r7, #4]
  MODIFY_REG_FIELD(BLUEGLOBWORD->WORD2, GLOBAL_WORD2_TRANSMITNOCALDELAYCHK, value);
10044fb8:	4b07      	ldr	r3, [pc, #28]	@ (10044fd8 <LL_RADIO_SetTransmitNoCalDelayChk+0x28>)
10044fba:	689b      	ldr	r3, [r3, #8]
10044fbc:	4a07      	ldr	r2, [pc, #28]	@ (10044fdc <LL_RADIO_SetTransmitNoCalDelayChk+0x2c>)
10044fbe:	4013      	ands	r3, r2
10044fc0:	0019      	movs	r1, r3
10044fc2:	687b      	ldr	r3, [r7, #4]
10044fc4:	021b      	lsls	r3, r3, #8
10044fc6:	041b      	lsls	r3, r3, #16
10044fc8:	0c1a      	lsrs	r2, r3, #16
10044fca:	4b03      	ldr	r3, [pc, #12]	@ (10044fd8 <LL_RADIO_SetTransmitNoCalDelayChk+0x28>)
10044fcc:	430a      	orrs	r2, r1
10044fce:	609a      	str	r2, [r3, #8]
}
10044fd0:	46c0      	nop			@ (mov r8, r8)
10044fd2:	46bd      	mov	sp, r7
10044fd4:	b002      	add	sp, #8
10044fd6:	bd80      	pop	{r7, pc}
10044fd8:	200000c0 	.word	0x200000c0
10044fdc:	ffff00ff 	.word	0xffff00ff

10044fe0 <LL_RADIO_SetReceivedCalDelayChk>:
  * @rmtoll WORD2          RECEIVECALDELAYCHK       LL_RADIO_SetReceivedCalDelayChk
  * @param  value
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_SetReceivedCalDelayChk(uint32_t value)
{
10044fe0:	b580      	push	{r7, lr}
10044fe2:	b082      	sub	sp, #8
10044fe4:	af00      	add	r7, sp, #0
10044fe6:	6078      	str	r0, [r7, #4]
  MODIFY_REG_FIELD(BLUEGLOBWORD->WORD2, GLOBAL_WORD2_RECEIVECALDELAYCHK, value);
10044fe8:	4b08      	ldr	r3, [pc, #32]	@ (1004500c <LL_RADIO_SetReceivedCalDelayChk+0x2c>)
10044fea:	689b      	ldr	r3, [r3, #8]
10044fec:	4a08      	ldr	r2, [pc, #32]	@ (10045010 <LL_RADIO_SetReceivedCalDelayChk+0x30>)
10044fee:	4013      	ands	r3, r2
10044ff0:	0019      	movs	r1, r3
10044ff2:	687b      	ldr	r3, [r7, #4]
10044ff4:	041a      	lsls	r2, r3, #16
10044ff6:	23ff      	movs	r3, #255	@ 0xff
10044ff8:	041b      	lsls	r3, r3, #16
10044ffa:	401a      	ands	r2, r3
10044ffc:	4b03      	ldr	r3, [pc, #12]	@ (1004500c <LL_RADIO_SetReceivedCalDelayChk+0x2c>)
10044ffe:	430a      	orrs	r2, r1
10045000:	609a      	str	r2, [r3, #8]
}
10045002:	46c0      	nop			@ (mov r8, r8)
10045004:	46bd      	mov	sp, r7
10045006:	b002      	add	sp, #8
10045008:	bd80      	pop	{r7, pc}
1004500a:	46c0      	nop			@ (mov r8, r8)
1004500c:	200000c0 	.word	0x200000c0
10045010:	ff00ffff 	.word	0xff00ffff

10045014 <LL_RADIO_SetReceivedNoCalDelayChk>:
  * @rmtoll WORD2          RECEIVENOCALDELAYCHK       LL_RADIO_SetReceivedNoCalDelayChk
  * @param  value
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_SetReceivedNoCalDelayChk(uint32_t value)
{
10045014:	b580      	push	{r7, lr}
10045016:	b082      	sub	sp, #8
10045018:	af00      	add	r7, sp, #0
1004501a:	6078      	str	r0, [r7, #4]
  MODIFY_REG_FIELD(BLUEGLOBWORD->WORD2, GLOBAL_WORD2_RECEIVENOCALDELAYCHK, value);
1004501c:	4b06      	ldr	r3, [pc, #24]	@ (10045038 <LL_RADIO_SetReceivedNoCalDelayChk+0x24>)
1004501e:	689b      	ldr	r3, [r3, #8]
10045020:	021b      	lsls	r3, r3, #8
10045022:	0a19      	lsrs	r1, r3, #8
10045024:	687b      	ldr	r3, [r7, #4]
10045026:	061a      	lsls	r2, r3, #24
10045028:	4b03      	ldr	r3, [pc, #12]	@ (10045038 <LL_RADIO_SetReceivedNoCalDelayChk+0x24>)
1004502a:	430a      	orrs	r2, r1
1004502c:	609a      	str	r2, [r3, #8]
}
1004502e:	46c0      	nop			@ (mov r8, r8)
10045030:	46bd      	mov	sp, r7
10045032:	b002      	add	sp, #8
10045034:	bd80      	pop	{r7, pc}
10045036:	46c0      	nop			@ (mov r8, r8)
10045038:	200000c0 	.word	0x200000c0

1004503c <LL_RADIO_SetConfigurationEndDuration>:
  * @rmtoll WORD3          CONFIGENDDURATION       LL_RADIO_SetConfigurationEndDuration
  * @param  value
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_SetConfigurationEndDuration(uint32_t value)
{
1004503c:	b580      	push	{r7, lr}
1004503e:	b082      	sub	sp, #8
10045040:	af00      	add	r7, sp, #0
10045042:	6078      	str	r0, [r7, #4]
  MODIFY_REG_FIELD(BLUEGLOBWORD->WORD3, GLOBAL_WORD3_CONFIGENDDURATION, value);
10045044:	4b07      	ldr	r3, [pc, #28]	@ (10045064 <LL_RADIO_SetConfigurationEndDuration+0x28>)
10045046:	68db      	ldr	r3, [r3, #12]
10045048:	22ff      	movs	r2, #255	@ 0xff
1004504a:	4393      	bics	r3, r2
1004504c:	0019      	movs	r1, r3
1004504e:	687b      	ldr	r3, [r7, #4]
10045050:	22ff      	movs	r2, #255	@ 0xff
10045052:	401a      	ands	r2, r3
10045054:	4b03      	ldr	r3, [pc, #12]	@ (10045064 <LL_RADIO_SetConfigurationEndDuration+0x28>)
10045056:	430a      	orrs	r2, r1
10045058:	60da      	str	r2, [r3, #12]
}
1004505a:	46c0      	nop			@ (mov r8, r8)
1004505c:	46bd      	mov	sp, r7
1004505e:	b002      	add	sp, #8
10045060:	bd80      	pop	{r7, pc}
10045062:	46c0      	nop			@ (mov r8, r8)
10045064:	200000c0 	.word	0x200000c0

10045068 <LL_RADIO_SetTxDataReadyCheck>:
  * @rmtoll WORD3          TXDATAREADYCHECK       LL_RADIO_SetTxDataReadyCheck
  * @param  value
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_SetTxDataReadyCheck(uint32_t value)
{
10045068:	b580      	push	{r7, lr}
1004506a:	b082      	sub	sp, #8
1004506c:	af00      	add	r7, sp, #0
1004506e:	6078      	str	r0, [r7, #4]
  MODIFY_REG_FIELD(BLUEGLOBWORD->WORD3, GLOBAL_WORD3_TXDATAREADYCHECK, value);
10045070:	4b07      	ldr	r3, [pc, #28]	@ (10045090 <LL_RADIO_SetTxDataReadyCheck+0x28>)
10045072:	68db      	ldr	r3, [r3, #12]
10045074:	4a07      	ldr	r2, [pc, #28]	@ (10045094 <LL_RADIO_SetTxDataReadyCheck+0x2c>)
10045076:	4013      	ands	r3, r2
10045078:	0019      	movs	r1, r3
1004507a:	687b      	ldr	r3, [r7, #4]
1004507c:	021b      	lsls	r3, r3, #8
1004507e:	041b      	lsls	r3, r3, #16
10045080:	0c1a      	lsrs	r2, r3, #16
10045082:	4b03      	ldr	r3, [pc, #12]	@ (10045090 <LL_RADIO_SetTxDataReadyCheck+0x28>)
10045084:	430a      	orrs	r2, r1
10045086:	60da      	str	r2, [r3, #12]
}
10045088:	46c0      	nop			@ (mov r8, r8)
1004508a:	46bd      	mov	sp, r7
1004508c:	b002      	add	sp, #8
1004508e:	bd80      	pop	{r7, pc}
10045090:	200000c0 	.word	0x200000c0
10045094:	ffff00ff 	.word	0xffff00ff

10045098 <LL_RADIO_SetTxDelayStart>:
  * @rmtoll WORD3          TXDELAYSTART       LL_RADIO_SetTxDelayStart
  * @param  value
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_SetTxDelayStart(uint32_t value)
{
10045098:	b580      	push	{r7, lr}
1004509a:	b082      	sub	sp, #8
1004509c:	af00      	add	r7, sp, #0
1004509e:	6078      	str	r0, [r7, #4]
  MODIFY_REG_FIELD(BLUEGLOBWORD->WORD3, GLOBAL_WORD3_TXDELAYSTART, value);
100450a0:	4b08      	ldr	r3, [pc, #32]	@ (100450c4 <LL_RADIO_SetTxDelayStart+0x2c>)
100450a2:	68db      	ldr	r3, [r3, #12]
100450a4:	4a08      	ldr	r2, [pc, #32]	@ (100450c8 <LL_RADIO_SetTxDelayStart+0x30>)
100450a6:	4013      	ands	r3, r2
100450a8:	0019      	movs	r1, r3
100450aa:	687b      	ldr	r3, [r7, #4]
100450ac:	041a      	lsls	r2, r3, #16
100450ae:	23ff      	movs	r3, #255	@ 0xff
100450b0:	041b      	lsls	r3, r3, #16
100450b2:	401a      	ands	r2, r3
100450b4:	4b03      	ldr	r3, [pc, #12]	@ (100450c4 <LL_RADIO_SetTxDelayStart+0x2c>)
100450b6:	430a      	orrs	r2, r1
100450b8:	60da      	str	r2, [r3, #12]
}
100450ba:	46c0      	nop			@ (mov r8, r8)
100450bc:	46bd      	mov	sp, r7
100450be:	b002      	add	sp, #8
100450c0:	bd80      	pop	{r7, pc}
100450c2:	46c0      	nop			@ (mov r8, r8)
100450c4:	200000c0 	.word	0x200000c0
100450c8:	ff00ffff 	.word	0xff00ffff

100450cc <LL_RADIO_SetTxDelayEnd>:
  * @rmtoll WORD3          TXDELAYEND       LL_RADIO_SetTxDelayEnd
  * @param  value
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_SetTxDelayEnd(uint32_t value)
{
100450cc:	b580      	push	{r7, lr}
100450ce:	b082      	sub	sp, #8
100450d0:	af00      	add	r7, sp, #0
100450d2:	6078      	str	r0, [r7, #4]
  MODIFY_REG_FIELD(BLUEGLOBWORD->WORD3, GLOBAL_WORD3_TXDELAYEND, value);
100450d4:	4b08      	ldr	r3, [pc, #32]	@ (100450f8 <LL_RADIO_SetTxDelayEnd+0x2c>)
100450d6:	68db      	ldr	r3, [r3, #12]
100450d8:	4a08      	ldr	r2, [pc, #32]	@ (100450fc <LL_RADIO_SetTxDelayEnd+0x30>)
100450da:	4013      	ands	r3, r2
100450dc:	0019      	movs	r1, r3
100450de:	687b      	ldr	r3, [r7, #4]
100450e0:	061a      	lsls	r2, r3, #24
100450e2:	23fc      	movs	r3, #252	@ 0xfc
100450e4:	059b      	lsls	r3, r3, #22
100450e6:	401a      	ands	r2, r3
100450e8:	4b03      	ldr	r3, [pc, #12]	@ (100450f8 <LL_RADIO_SetTxDelayEnd+0x2c>)
100450ea:	430a      	orrs	r2, r1
100450ec:	60da      	str	r2, [r3, #12]
}
100450ee:	46c0      	nop			@ (mov r8, r8)
100450f0:	46bd      	mov	sp, r7
100450f2:	b002      	add	sp, #8
100450f4:	bd80      	pop	{r7, pc}
100450f6:	46c0      	nop			@ (mov r8, r8)
100450f8:	200000c0 	.word	0x200000c0
100450fc:	c0ffffff 	.word	0xc0ffffff

10045100 <LL_RADIO_SetTransmissionReadyTimeout>:
  * @rmtoll WORD4          TXREADYTIMEOUT       LL_RADIO_SetTransmissionReadyTimeout
  * @param  value
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_SetTransmissionReadyTimeout(uint32_t value)
{
10045100:	b580      	push	{r7, lr}
10045102:	b082      	sub	sp, #8
10045104:	af00      	add	r7, sp, #0
10045106:	6078      	str	r0, [r7, #4]
  MODIFY_REG_FIELD(BLUEGLOBWORD->WORD4, GLOBAL_WORD4_TXREADYTIMEOUT, value);
10045108:	4b07      	ldr	r3, [pc, #28]	@ (10045128 <LL_RADIO_SetTransmissionReadyTimeout+0x28>)
1004510a:	691b      	ldr	r3, [r3, #16]
1004510c:	22ff      	movs	r2, #255	@ 0xff
1004510e:	4393      	bics	r3, r2
10045110:	0019      	movs	r1, r3
10045112:	687b      	ldr	r3, [r7, #4]
10045114:	22ff      	movs	r2, #255	@ 0xff
10045116:	401a      	ands	r2, r3
10045118:	4b03      	ldr	r3, [pc, #12]	@ (10045128 <LL_RADIO_SetTransmissionReadyTimeout+0x28>)
1004511a:	430a      	orrs	r2, r1
1004511c:	611a      	str	r2, [r3, #16]
}
1004511e:	46c0      	nop			@ (mov r8, r8)
10045120:	46bd      	mov	sp, r7
10045122:	b002      	add	sp, #8
10045124:	bd80      	pop	{r7, pc}
10045126:	46c0      	nop			@ (mov r8, r8)
10045128:	200000c0 	.word	0x200000c0

1004512c <LL_RADIO_ChkFlagAutoclearEnable_Enable>:
  * @brief  RADIO Enable
  * @rmtoll WORD5          CHKFLAGAUTOCLEARENA            LL_RADIO_ChkFlagAutoclearEnable_Enable
  * @retval uint32_t
  */
__STATIC_INLINE void LL_RADIO_ChkFlagAutoclearEnable_Enable(void)
{
1004512c:	b580      	push	{r7, lr}
1004512e:	af00      	add	r7, sp, #0
  SET_BIT(BLUEGLOBWORD->WORD5, GLOBAL_WORD5_CHKFLAGAUTOCLEARENA);
10045130:	4b04      	ldr	r3, [pc, #16]	@ (10045144 <LL_RADIO_ChkFlagAutoclearEnable_Enable+0x18>)
10045132:	695a      	ldr	r2, [r3, #20]
10045134:	4b03      	ldr	r3, [pc, #12]	@ (10045144 <LL_RADIO_ChkFlagAutoclearEnable_Enable+0x18>)
10045136:	2104      	movs	r1, #4
10045138:	430a      	orrs	r2, r1
1004513a:	615a      	str	r2, [r3, #20]
}
1004513c:	46c0      	nop			@ (mov r8, r8)
1004513e:	46bd      	mov	sp, r7
10045140:	bd80      	pop	{r7, pc}
10045142:	46c0      	nop			@ (mov r8, r8)
10045144:	200000c0 	.word	0x200000c0

10045148 <LL_RADIO_NoActiveLErrorInterrupt_Enable>:
  * @brief  Indicate if INTNOACTIVELERROR is enabled
  * @rmtoll WORD5          INTNOACTIVELERROR            LL_RADIO_NoActiveLErrorInterrupt_Enable
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE void LL_RADIO_NoActiveLErrorInterrupt_Enable(void)
{
10045148:	b580      	push	{r7, lr}
1004514a:	af00      	add	r7, sp, #0
  SET_BIT(BLUEGLOBWORD->WORD5, GLOBAL_WORD5_INTNOACTIVELERROR);
1004514c:	4b04      	ldr	r3, [pc, #16]	@ (10045160 <LL_RADIO_NoActiveLErrorInterrupt_Enable+0x18>)
1004514e:	695a      	ldr	r2, [r3, #20]
10045150:	4b03      	ldr	r3, [pc, #12]	@ (10045160 <LL_RADIO_NoActiveLErrorInterrupt_Enable+0x18>)
10045152:	2180      	movs	r1, #128	@ 0x80
10045154:	0409      	lsls	r1, r1, #16
10045156:	430a      	orrs	r2, r1
10045158:	615a      	str	r2, [r3, #20]
}
1004515a:	46c0      	nop			@ (mov r8, r8)
1004515c:	46bd      	mov	sp, r7
1004515e:	bd80      	pop	{r7, pc}
10045160:	200000c0 	.word	0x200000c0

10045164 <LL_RADIO_TxRxSkipInterrupt_Enable>:
  * @brief  RADIO Enable
  * @rmtoll WORD5          INTTXRXSKIP            LL_RADIO_TxRxSkipInterrupt_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_TxRxSkipInterrupt_Enable(void)
{
10045164:	b580      	push	{r7, lr}
10045166:	af00      	add	r7, sp, #0
  SET_BIT(BLUEGLOBWORD->WORD5, GLOBAL_WORD5_INTTXRXSKIP);
10045168:	4b04      	ldr	r3, [pc, #16]	@ (1004517c <LL_RADIO_TxRxSkipInterrupt_Enable+0x18>)
1004516a:	695a      	ldr	r2, [r3, #20]
1004516c:	4b03      	ldr	r3, [pc, #12]	@ (1004517c <LL_RADIO_TxRxSkipInterrupt_Enable+0x18>)
1004516e:	2180      	movs	r1, #128	@ 0x80
10045170:	0589      	lsls	r1, r1, #22
10045172:	430a      	orrs	r2, r1
10045174:	615a      	str	r2, [r3, #20]
}
10045176:	46c0      	nop			@ (mov r8, r8)
10045178:	46bd      	mov	sp, r7
1004517a:	bd80      	pop	{r7, pc}
1004517c:	200000c0 	.word	0x200000c0

10045180 <LL_RADIO_Active2ErrorInterrupt_Enable>:
  * @brief  RADIO Enable
  * @rmtoll WORD5          INTACTIVE2ERR            LL_RADIO_Active2ErrorInterrupt_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_Active2ErrorInterrupt_Enable(void)
{
10045180:	b580      	push	{r7, lr}
10045182:	af00      	add	r7, sp, #0
  SET_BIT(BLUEGLOBWORD->WORD5, GLOBAL_WORD5_INTACTIVE2ERR);
10045184:	4b04      	ldr	r3, [pc, #16]	@ (10045198 <LL_RADIO_Active2ErrorInterrupt_Enable+0x18>)
10045186:	695a      	ldr	r2, [r3, #20]
10045188:	4b03      	ldr	r3, [pc, #12]	@ (10045198 <LL_RADIO_Active2ErrorInterrupt_Enable+0x18>)
1004518a:	2180      	movs	r1, #128	@ 0x80
1004518c:	05c9      	lsls	r1, r1, #23
1004518e:	430a      	orrs	r2, r1
10045190:	615a      	str	r2, [r3, #20]
}
10045192:	46c0      	nop			@ (mov r8, r8)
10045194:	46bd      	mov	sp, r7
10045196:	bd80      	pop	{r7, pc}
10045198:	200000c0 	.word	0x200000c0

1004519c <LL_RADIO_TIMER_DisableTimer1>:
{
1004519c:	b580      	push	{r7, lr}
1004519e:	b082      	sub	sp, #8
100451a0:	af00      	add	r7, sp, #0
100451a2:	6078      	str	r0, [r7, #4]
  MODIFY_REG_FIELD(BLUEx->TIMEOUTDESTREG, BLUE_TIMEOUTDESTREG_DESTINATION, 0);
100451a4:	687b      	ldr	r3, [r7, #4]
100451a6:	68db      	ldr	r3, [r3, #12]
100451a8:	2203      	movs	r2, #3
100451aa:	4393      	bics	r3, r2
100451ac:	001a      	movs	r2, r3
100451ae:	687b      	ldr	r3, [r7, #4]
100451b0:	60da      	str	r2, [r3, #12]
}
100451b2:	46c0      	nop			@ (mov r8, r8)
100451b4:	46bd      	mov	sp, r7
100451b6:	b002      	add	sp, #8
100451b8:	bd80      	pop	{r7, pc}

100451ba <LL_RADIO_TIMER_DisableTimer2>:
{
100451ba:	b580      	push	{r7, lr}
100451bc:	b082      	sub	sp, #8
100451be:	af00      	add	r7, sp, #0
100451c0:	6078      	str	r0, [r7, #4]
  MODIFY_REG_FIELD(BLUEx->TIMEOUTDESTREG, BLUE_TIMEOUTDESTREG_DESTINATION, 0);
100451c2:	687b      	ldr	r3, [r7, #4]
100451c4:	68db      	ldr	r3, [r3, #12]
100451c6:	2203      	movs	r2, #3
100451c8:	4393      	bics	r3, r2
100451ca:	001a      	movs	r2, r3
100451cc:	687b      	ldr	r3, [r7, #4]
100451ce:	60da      	str	r2, [r3, #12]
}
100451d0:	46c0      	nop			@ (mov r8, r8)
100451d2:	46bd      	mov	sp, r7
100451d4:	b002      	add	sp, #8
100451d6:	bd80      	pop	{r7, pc}

100451d8 <LL_RADIO_TIMER_DisableBLEWakeupTimer>:
{
100451d8:	b580      	push	{r7, lr}
100451da:	b082      	sub	sp, #8
100451dc:	af00      	add	r7, sp, #0
100451de:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(WAKEUPx->BLUE_SLEEP_REQUEST_MODE, WAKEUP_BLUE_SLEEP_REQUEST_MODE_BLE_WAKEUP_EN);
100451e0:	687b      	ldr	r3, [r7, #4]
100451e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
100451e4:	4a03      	ldr	r2, [pc, #12]	@ (100451f4 <LL_RADIO_TIMER_DisableBLEWakeupTimer+0x1c>)
100451e6:	401a      	ands	r2, r3
100451e8:	687b      	ldr	r3, [r7, #4]
100451ea:	629a      	str	r2, [r3, #40]	@ 0x28
}
100451ec:	46c0      	nop			@ (mov r8, r8)
100451ee:	46bd      	mov	sp, r7
100451f0:	b002      	add	sp, #8
100451f2:	bd80      	pop	{r7, pc}
100451f4:	bfffffff 	.word	0xbfffffff

100451f8 <CondRoutineTrue>:
  */

#if USE_RADIO_PROPRIETARY_DRIVER

static uint8_t CondRoutineTrue(ActionPacket *p)
{
100451f8:	b580      	push	{r7, lr}
100451fa:	b082      	sub	sp, #8
100451fc:	af00      	add	r7, sp, #0
100451fe:	6078      	str	r0, [r7, #4]
  return TRUE;
10045200:	2301      	movs	r3, #1
}
10045202:	0018      	movs	r0, r3
10045204:	46bd      	mov	sp, r7
10045206:	b002      	add	sp, #8
10045208:	bd80      	pop	{r7, pc}

1004520a <DataRoutineNull>:

static uint8_t DataRoutineNull(ActionPacket *current_action_packet, ActionPacket *next)
{
1004520a:	b580      	push	{r7, lr}
1004520c:	b082      	sub	sp, #8
1004520e:	af00      	add	r7, sp, #0
10045210:	6078      	str	r0, [r7, #4]
10045212:	6039      	str	r1, [r7, #0]
  return TRUE;
10045214:	2301      	movs	r3, #1
}
10045216:	0018      	movs	r0, r3
10045218:	46bd      	mov	sp, r7
1004521a:	b002      	add	sp, #8
1004521c:	bd80      	pop	{r7, pc}
	...

10045220 <HAL_RADIO_Init>:
/**
  * @brief  Initializes the radio.
  * @retval None
  */
void HAL_RADIO_Init(RADIO_HandleTypeDef *hradio)
{
10045220:	b590      	push	{r4, r7, lr}
10045222:	b08d      	sub	sp, #52	@ 0x34
10045224:	af00      	add	r7, sp, #0
10045226:	6078      	str	r0, [r7, #4]
  uint32_t mr_ble_iptat;
  uint32_t mr_ble_vbg;
  uint32_t mr_ble_rxadc_delay_i;
  uint32_t mr_ble_rxadc_delay_q;
  uint8_t mr_ble_rxadc_delay_flag;
  uint8_t *hot_table_radio_config = (uint8_t *)&hot_table_radio_config_u32[4];
10045228:	4b14      	ldr	r3, [pc, #80]	@ (1004527c <HAL_RADIO_Init+0x5c>)
1004522a:	617b      	str	r3, [r7, #20]
  uint8_t index;

  /* Retrieve Trimming values from engineering flash locations */
  if (*(volatile uint32_t *)VALIDITY_LOCATION == VALIDITY_TAG)
1004522c:	4b14      	ldr	r3, [pc, #80]	@ (10045280 <HAL_RADIO_Init+0x60>)
1004522e:	681b      	ldr	r3, [r3, #0]
10045230:	4a14      	ldr	r2, [pc, #80]	@ (10045284 <HAL_RADIO_Init+0x64>)
10045232:	4293      	cmp	r3, r2
10045234:	d12a      	bne.n	1004528c <HAL_RADIO_Init+0x6c>
  {
    mr_ble_ibias            = ((*(volatile uint32_t *)MR_TRIMMING_LOCATION) & MR_BLE_IBIAS_TRIM_Msk) >> MR_BLE_IBIAS_TRIM_Pos;
10045236:	4b14      	ldr	r3, [pc, #80]	@ (10045288 <HAL_RADIO_Init+0x68>)
10045238:	681b      	ldr	r3, [r3, #0]
1004523a:	0a1b      	lsrs	r3, r3, #8
1004523c:	220f      	movs	r2, #15
1004523e:	4013      	ands	r3, r2
10045240:	62fb      	str	r3, [r7, #44]	@ 0x2c
    mr_ble_iptat            = ((*(volatile uint32_t *)MR_TRIMMING_LOCATION) & MR_BLE_IPTAT_TRIM_Msk) >> MR_BLE_IPTAT_TRIM_Pos;
10045242:	4b11      	ldr	r3, [pc, #68]	@ (10045288 <HAL_RADIO_Init+0x68>)
10045244:	681b      	ldr	r3, [r3, #0]
10045246:	0b1b      	lsrs	r3, r3, #12
10045248:	220f      	movs	r2, #15
1004524a:	4013      	ands	r3, r2
1004524c:	62bb      	str	r3, [r7, #40]	@ 0x28
    mr_ble_vbg              = ((*(volatile uint32_t *)MR_TRIMMING_LOCATION) & MR_BLE_VBG_TRIM_Msk) >> MR_BLE_VBG_TRIM_Pos;
1004524e:	4b0e      	ldr	r3, [pc, #56]	@ (10045288 <HAL_RADIO_Init+0x68>)
10045250:	681b      	ldr	r3, [r3, #0]
10045252:	0c1b      	lsrs	r3, r3, #16
10045254:	220f      	movs	r2, #15
10045256:	4013      	ands	r3, r2
10045258:	627b      	str	r3, [r7, #36]	@ 0x24
    mr_ble_rxadc_delay_i    = ((*(volatile uint32_t *)MR_TRIMMING_LOCATION) & MR_BLE_RXADC_DELAY_I_TRIM_Msk) >> MR_BLE_RXADC_DELAY_I_TRIM_Pos;
1004525a:	4b0b      	ldr	r3, [pc, #44]	@ (10045288 <HAL_RADIO_Init+0x68>)
1004525c:	681b      	ldr	r3, [r3, #0]
1004525e:	0d1b      	lsrs	r3, r3, #20
10045260:	2207      	movs	r2, #7
10045262:	4013      	ands	r3, r2
10045264:	623b      	str	r3, [r7, #32]
    mr_ble_rxadc_delay_q    = ((*(volatile uint32_t *)MR_TRIMMING_LOCATION) & MR_BLE_RXADC_DELAY_Q_TRIM_Msk) >> MR_BLE_RXADC_DELAY_Q_TRIM_Pos;
10045266:	4b08      	ldr	r3, [pc, #32]	@ (10045288 <HAL_RADIO_Init+0x68>)
10045268:	681b      	ldr	r3, [r3, #0]
1004526a:	0e1b      	lsrs	r3, r3, #24
1004526c:	2207      	movs	r2, #7
1004526e:	4013      	ands	r3, r2
10045270:	61fb      	str	r3, [r7, #28]
    mr_ble_rxadc_delay_flag = TRUE;
10045272:	231b      	movs	r3, #27
10045274:	18fb      	adds	r3, r7, r3
10045276:	2201      	movs	r2, #1
10045278:	701a      	strb	r2, [r3, #0]
1004527a:	e011      	b.n	100452a0 <HAL_RADIO_Init+0x80>
1004527c:	200008e4 	.word	0x200008e4
10045280:	10001ef8 	.word	0x10001ef8
10045284:	fcbceccc 	.word	0xfcbceccc
10045288:	10001ee8 	.word	0x10001ee8
  }
  else
  {
    mr_ble_ibias = 0x08;
1004528c:	2308      	movs	r3, #8
1004528e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    mr_ble_iptat = 0x07;
10045290:	2307      	movs	r3, #7
10045292:	62bb      	str	r3, [r7, #40]	@ 0x28
    mr_ble_vbg   = 0x08;
10045294:	2308      	movs	r3, #8
10045296:	627b      	str	r3, [r7, #36]	@ 0x24
    mr_ble_rxadc_delay_flag = FALSE;
10045298:	231b      	movs	r3, #27
1004529a:	18fb      	adds	r3, r7, r3
1004529c:	2200      	movs	r2, #0
1004529e:	701a      	strb	r2, [r3, #0]
    mr_ble_rxadc_delay_q    = 3;
    mr_ble_rxadc_delay_flag = TRUE;
#endif /* STM32WB05 or STM32WB09 */
  }

  BLUEGLOB->BYTE4 = BLUE_IDLE_0;
100452a0:	4bfc      	ldr	r3, [pc, #1008]	@ (10045694 <HAL_RADIO_Init+0x474>)
100452a2:	2200      	movs	r2, #0
100452a4:	711a      	strb	r2, [r3, #4]
  if (hradio != NULL)
100452a6:	687b      	ldr	r3, [r7, #4]
100452a8:	2b00      	cmp	r3, #0
100452aa:	d003      	beq.n	100452b4 <HAL_RADIO_Init+0x94>
  {
    HAL_RADIO_MspInit(hradio);
100452ac:	687b      	ldr	r3, [r7, #4]
100452ae:	0018      	movs	r0, r3
100452b0:	f7fd ff44 	bl	1004313c <HAL_RADIO_MspInit>
  }
  LL_RADIO_TIMER_DisableTimer1(BLUE);
100452b4:	23c0      	movs	r3, #192	@ 0xc0
100452b6:	05db      	lsls	r3, r3, #23
100452b8:	0018      	movs	r0, r3
100452ba:	f7ff ff6f 	bl	1004519c <LL_RADIO_TIMER_DisableTimer1>
  LL_RADIO_TIMER_DisableTimer2(BLUE);
100452be:	23c0      	movs	r3, #192	@ 0xc0
100452c0:	05db      	lsls	r3, r3, #23
100452c2:	0018      	movs	r0, r3
100452c4:	f7ff ff79 	bl	100451ba <LL_RADIO_TIMER_DisableTimer2>
  LL_RADIO_TIMER_DisableBLEWakeupTimer(WAKEUP);
100452c8:	4bf3      	ldr	r3, [pc, #972]	@ (10045698 <HAL_RADIO_Init+0x478>)
100452ca:	0018      	movs	r0, r3
100452cc:	f7ff ff84 	bl	100451d8 <LL_RADIO_TIMER_DisableBLEWakeupTimer>

  /* Write Radio Trimming values in the registers: Cbias' VBG, Cbias' IPTAT, Cbias' IBIAS, RxAnaUsr Delay Trim I & Q */
  MODIFY_REG_FIELD(RRM->CBIAS1_ANA_ENG, RRM_CBIAS1_ANA_ENG_RFD_CBIAS_VBG_TRIM, mr_ble_vbg);
100452d0:	4af2      	ldr	r2, [pc, #968]	@ (1004569c <HAL_RADIO_Init+0x47c>)
100452d2:	239e      	movs	r3, #158	@ 0x9e
100452d4:	009b      	lsls	r3, r3, #2
100452d6:	58d3      	ldr	r3, [r2, r3]
100452d8:	220f      	movs	r2, #15
100452da:	4393      	bics	r3, r2
100452dc:	001a      	movs	r2, r3
100452de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
100452e0:	210f      	movs	r1, #15
100452e2:	400b      	ands	r3, r1
100452e4:	49ed      	ldr	r1, [pc, #948]	@ (1004569c <HAL_RADIO_Init+0x47c>)
100452e6:	431a      	orrs	r2, r3
100452e8:	239e      	movs	r3, #158	@ 0x9e
100452ea:	009b      	lsls	r3, r3, #2
100452ec:	50ca      	str	r2, [r1, r3]
  MODIFY_REG_FIELD(RRM->CBIAS0_ANA_ENG, RRM_CBIAS0_ANA_ENG_RFD_CBIAS_IPTAT_TRIM, mr_ble_iptat);
100452ee:	4aeb      	ldr	r2, [pc, #940]	@ (1004569c <HAL_RADIO_Init+0x47c>)
100452f0:	239d      	movs	r3, #157	@ 0x9d
100452f2:	009b      	lsls	r3, r3, #2
100452f4:	58d3      	ldr	r3, [r2, r3]
100452f6:	22f0      	movs	r2, #240	@ 0xf0
100452f8:	4393      	bics	r3, r2
100452fa:	001a      	movs	r2, r3
100452fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
100452fe:	011b      	lsls	r3, r3, #4
10045300:	21ff      	movs	r1, #255	@ 0xff
10045302:	400b      	ands	r3, r1
10045304:	49e5      	ldr	r1, [pc, #916]	@ (1004569c <HAL_RADIO_Init+0x47c>)
10045306:	431a      	orrs	r2, r3
10045308:	239d      	movs	r3, #157	@ 0x9d
1004530a:	009b      	lsls	r3, r3, #2
1004530c:	50ca      	str	r2, [r1, r3]
  MODIFY_REG_FIELD(RRM->CBIAS0_ANA_ENG, RRM_CBIAS0_ANA_ENG_RFD_CBIAS_IBIAS_TRIM, mr_ble_ibias);
1004530e:	4ae3      	ldr	r2, [pc, #908]	@ (1004569c <HAL_RADIO_Init+0x47c>)
10045310:	239d      	movs	r3, #157	@ 0x9d
10045312:	009b      	lsls	r3, r3, #2
10045314:	58d3      	ldr	r3, [r2, r3]
10045316:	220f      	movs	r2, #15
10045318:	4393      	bics	r3, r2
1004531a:	001a      	movs	r2, r3
1004531c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
1004531e:	210f      	movs	r1, #15
10045320:	400b      	ands	r3, r1
10045322:	49de      	ldr	r1, [pc, #888]	@ (1004569c <HAL_RADIO_Init+0x47c>)
10045324:	431a      	orrs	r2, r3
10045326:	239d      	movs	r3, #157	@ 0x9d
10045328:	009b      	lsls	r3, r3, #2
1004532a:	50ca      	str	r2, [r1, r3]
  if (mr_ble_rxadc_delay_flag)
1004532c:	231b      	movs	r3, #27
1004532e:	18fb      	adds	r3, r7, r3
10045330:	781b      	ldrb	r3, [r3, #0]
10045332:	2b00      	cmp	r3, #0
10045334:	d01e      	beq.n	10045374 <HAL_RADIO_Init+0x154>
  {
    MODIFY_REG_FIELD(RRM->RXADC_ANA_USR, RRM_RXADC_ANA_USR_RFD_RXADC_DELAYTRIM_I, mr_ble_rxadc_delay_i);
10045336:	4ad9      	ldr	r2, [pc, #868]	@ (1004569c <HAL_RADIO_Init+0x47c>)
10045338:	2392      	movs	r3, #146	@ 0x92
1004533a:	009b      	lsls	r3, r3, #2
1004533c:	58d3      	ldr	r3, [r2, r3]
1004533e:	2207      	movs	r2, #7
10045340:	4393      	bics	r3, r2
10045342:	001a      	movs	r2, r3
10045344:	6a3b      	ldr	r3, [r7, #32]
10045346:	2107      	movs	r1, #7
10045348:	400b      	ands	r3, r1
1004534a:	49d4      	ldr	r1, [pc, #848]	@ (1004569c <HAL_RADIO_Init+0x47c>)
1004534c:	431a      	orrs	r2, r3
1004534e:	2392      	movs	r3, #146	@ 0x92
10045350:	009b      	lsls	r3, r3, #2
10045352:	50ca      	str	r2, [r1, r3]
    MODIFY_REG_FIELD(RRM->RXADC_ANA_USR, RRM_RXADC_ANA_USR_RFD_RXADC_DELAYTRIM_Q, mr_ble_rxadc_delay_q);
10045354:	4ad1      	ldr	r2, [pc, #836]	@ (1004569c <HAL_RADIO_Init+0x47c>)
10045356:	2392      	movs	r3, #146	@ 0x92
10045358:	009b      	lsls	r3, r3, #2
1004535a:	58d3      	ldr	r3, [r2, r3]
1004535c:	2238      	movs	r2, #56	@ 0x38
1004535e:	4393      	bics	r3, r2
10045360:	001a      	movs	r2, r3
10045362:	69fb      	ldr	r3, [r7, #28]
10045364:	00db      	lsls	r3, r3, #3
10045366:	2138      	movs	r1, #56	@ 0x38
10045368:	400b      	ands	r3, r1
1004536a:	49cc      	ldr	r1, [pc, #816]	@ (1004569c <HAL_RADIO_Init+0x47c>)
1004536c:	431a      	orrs	r2, r3
1004536e:	2392      	movs	r3, #146	@ 0x92
10045370:	009b      	lsls	r3, r3, #2
10045372:	50ca      	str	r2, [r1, r3]
  }

  /* Radio AFC configuration */
  MODIFY_REG(RRM->AFC1_DIG_ENG, RRM_AFC1_DIG_ENG_AFC_DELAY_AFTER | RRM_AFC1_DIG_ENG_AFC_DELAY_BEFORE,
10045374:	4ac9      	ldr	r2, [pc, #804]	@ (1004569c <HAL_RADIO_Init+0x47c>)
10045376:	23a4      	movs	r3, #164	@ 0xa4
10045378:	005b      	lsls	r3, r3, #1
1004537a:	58d3      	ldr	r3, [r2, r3]
1004537c:	22ff      	movs	r2, #255	@ 0xff
1004537e:	4393      	bics	r3, r2
10045380:	49c6      	ldr	r1, [pc, #792]	@ (1004569c <HAL_RADIO_Init+0x47c>)
10045382:	2255      	movs	r2, #85	@ 0x55
10045384:	431a      	orrs	r2, r3
10045386:	23a4      	movs	r3, #164	@ 0xa4
10045388:	005b      	lsls	r3, r3, #1
1004538a:	50ca      	str	r2, [r1, r3]
             ((AFC_DELAY_BEFORE << RRM_AFC1_DIG_ENG_AFC_DELAY_BEFORE_Pos) & RRM_AFC1_DIG_ENG_AFC_DELAY_BEFORE_Msk) |
             ((AFC_DELAY_AFTER << RRM_AFC1_DIG_ENG_AFC_DELAY_AFTER_Pos) & RRM_AFC1_DIG_ENG_AFC_DELAY_AFTER_Msk));
  MODIFY_REG(RRM->CR0_DIG_ENG, RRM_CR0_DIG_ENG_CR_GAIN_BEFORE | RRM_CR0_DIG_ENG_CR_GAIN_AFTER,
1004538c:	4ac3      	ldr	r2, [pc, #780]	@ (1004569c <HAL_RADIO_Init+0x47c>)
1004538e:	23aa      	movs	r3, #170	@ 0xaa
10045390:	005b      	lsls	r3, r3, #1
10045392:	58d3      	ldr	r3, [r2, r3]
10045394:	22ff      	movs	r2, #255	@ 0xff
10045396:	4393      	bics	r3, r2
10045398:	49c0      	ldr	r1, [pc, #768]	@ (1004569c <HAL_RADIO_Init+0x47c>)
1004539a:	2266      	movs	r2, #102	@ 0x66
1004539c:	431a      	orrs	r2, r3
1004539e:	23aa      	movs	r3, #170	@ 0xaa
100453a0:	005b      	lsls	r3, r3, #1
100453a2:	50ca      	str	r2, [r1, r3]
             ((CR_GAIN_BEFORE << RRM_CR0_DIG_ENG_CR_GAIN_BEFORE_Pos) & RRM_CR0_DIG_ENG_CR_GAIN_BEFORE_Msk) |
             ((CR_GAIN_AFTER << RRM_CR0_DIG_ENG_CR_GAIN_AFTER_Pos) & RRM_CR0_DIG_ENG_CR_GAIN_AFTER_Msk));
  MODIFY_REG(RRM->CR0_LR, RRM_CR0_LR_CR_LR_GAIN_BEFORE | RRM_CR0_LR_CR_LR_GAIN_AFTER,
100453a4:	4abd      	ldr	r2, [pc, #756]	@ (1004569c <HAL_RADIO_Init+0x47c>)
100453a6:	23b4      	movs	r3, #180	@ 0xb4
100453a8:	005b      	lsls	r3, r3, #1
100453aa:	58d3      	ldr	r3, [r2, r3]
100453ac:	22ff      	movs	r2, #255	@ 0xff
100453ae:	4393      	bics	r3, r2
100453b0:	49ba      	ldr	r1, [pc, #744]	@ (1004569c <HAL_RADIO_Init+0x47c>)
100453b2:	2255      	movs	r2, #85	@ 0x55
100453b4:	431a      	orrs	r2, r3
100453b6:	23b4      	movs	r3, #180	@ 0xb4
100453b8:	005b      	lsls	r3, r3, #1
100453ba:	50ca      	str	r2, [r1, r3]
             ((CR_LR_GAIN_BEFORE << RRM_CR0_LR_CR_LR_GAIN_BEFORE_Pos) & RRM_CR0_LR_CR_LR_GAIN_BEFORE_Msk) |
             ((CR_LR_GAIN_AFTER << RRM_CR0_LR_CR_LR_GAIN_AFTER_Pos) & RRM_CR0_LR_CR_LR_GAIN_AFTER_Msk));

  /* Radio RSSI Threshold configuration */
  MODIFY_REG_FIELD(RRM->LR_RSSI_THR_DIG_ENG, RRM_LR_RSSI_THR_DIG_ENG_LR_RSSI_THR, LR_RSSI_THR);
100453bc:	4ab7      	ldr	r2, [pc, #732]	@ (1004569c <HAL_RADIO_Init+0x47c>)
100453be:	23c4      	movs	r3, #196	@ 0xc4
100453c0:	005b      	lsls	r3, r3, #1
100453c2:	58d3      	ldr	r3, [r2, r3]
100453c4:	22ff      	movs	r2, #255	@ 0xff
100453c6:	4393      	bics	r3, r2
100453c8:	49b4      	ldr	r1, [pc, #720]	@ (1004569c <HAL_RADIO_Init+0x47c>)
100453ca:	221d      	movs	r2, #29
100453cc:	431a      	orrs	r2, r3
100453ce:	23c4      	movs	r3, #196	@ 0xc4
100453d0:	005b      	lsls	r3, r3, #1
100453d2:	50ca      	str	r2, [r1, r3]
  MODIFY_REG_FIELD(RRM->LR_PD_THR_DIG_ENG, RRM_LR_PD_THR_DIG_ENG_LR_PD_THR, LR_PD_THR);
100453d4:	4ab1      	ldr	r2, [pc, #708]	@ (1004569c <HAL_RADIO_Init+0x47c>)
100453d6:	23c2      	movs	r3, #194	@ 0xc2
100453d8:	005b      	lsls	r3, r3, #1
100453da:	58d3      	ldr	r3, [r2, r3]
100453dc:	22ff      	movs	r2, #255	@ 0xff
100453de:	4393      	bics	r3, r2
100453e0:	49ae      	ldr	r1, [pc, #696]	@ (1004569c <HAL_RADIO_Init+0x47c>)
100453e2:	2259      	movs	r2, #89	@ 0x59
100453e4:	431a      	orrs	r2, r3
100453e6:	23c2      	movs	r3, #194	@ 0xc2
100453e8:	005b      	lsls	r3, r3, #1
100453ea:	50ca      	str	r2, [r1, r3]
  MODIFY_REG_FIELD(RRM->LR_AAC_THR_DIG_ENG, RRM_LR_AAC_THR_DIG_ENG_LR_AAC_THR, LR_AAC_THR);
100453ec:	4aab      	ldr	r2, [pc, #684]	@ (1004569c <HAL_RADIO_Init+0x47c>)
100453ee:	23c6      	movs	r3, #198	@ 0xc6
100453f0:	005b      	lsls	r3, r3, #1
100453f2:	58d3      	ldr	r3, [r2, r3]
100453f4:	22ff      	movs	r2, #255	@ 0xff
100453f6:	4393      	bics	r3, r2
100453f8:	49a8      	ldr	r1, [pc, #672]	@ (1004569c <HAL_RADIO_Init+0x47c>)
100453fa:	2232      	movs	r2, #50	@ 0x32
100453fc:	431a      	orrs	r2, r3
100453fe:	23c6      	movs	r3, #198	@ 0xc6
10045400:	005b      	lsls	r3, r3, #1
10045402:	50ca      	str	r2, [r1, r3]

  /* Enable Viterbi */
  SET_BIT(RRM->VIT_CONF_DIG_ENG, RRM_VIT_CONF_DIG_ENG_VIT_CONF_0);
10045404:	4aa5      	ldr	r2, [pc, #660]	@ (1004569c <HAL_RADIO_Init+0x47c>)
10045406:	23b6      	movs	r3, #182	@ 0xb6
10045408:	005b      	lsls	r3, r3, #1
1004540a:	58d3      	ldr	r3, [r2, r3]
1004540c:	49a3      	ldr	r1, [pc, #652]	@ (1004569c <HAL_RADIO_Init+0x47c>)
1004540e:	2201      	movs	r2, #1
10045410:	431a      	orrs	r2, r3
10045412:	23b6      	movs	r3, #182	@ 0xb6
10045414:	005b      	lsls	r3, r3, #1
10045416:	50ca      	str	r2, [r1, r3]
  MODIFY_REG_FIELD(RRM->ANTSW_DIG0_USR, RRM_ANTSW0_DIG_USR_RX_TIME_TO_SAMPLE, RX_TIME_TO_SAMPLE);
  MODIFY_REG_FIELD(RRM->ANTSW_DIG1_USR, RRM_ANTSW1_DIG_USR_RX_TIME_TO_SWITCH, RX_TIME_TO_SWITCH);
#endif /* STM32WB05 or STM32WB09 */

  /*Set InitDelay*/
  LL_RADIO_SetWakeupInitDelay(INITDELAY_WAKEUP);
10045418:	2040      	movs	r0, #64	@ 0x40
1004541a:	f7ff fd6d 	bl	10044ef8 <LL_RADIO_SetWakeupInitDelay>
  LL_RADIO_SetTimer12InitDelayCal(INITDELAY_TIMER12_CAL);
1004541e:	203f      	movs	r0, #63	@ 0x3f
10045420:	f7ff fd82 	bl	10044f28 <LL_RADIO_SetTimer12InitDelayCal>
  LL_RADIO_SetTimer12InitDelayNoCal(INITDELAY_TIMER2_NOCAL);
10045424:	2009      	movs	r0, #9
10045426:	f7ff fd99 	bl	10044f5c <LL_RADIO_SetTimer12InitDelayNoCal>

  /*Set Init_radio_delay*/
  LL_RADIO_SetReceivedCalDelayChk(DELAYCHK_RECEIVE_CAL);
1004542a:	2074      	movs	r0, #116	@ 0x74
1004542c:	f7ff fdd8 	bl	10044fe0 <LL_RADIO_SetReceivedCalDelayChk>
  LL_RADIO_SetReceivedNoCalDelayChk(DELAYCHK_RECEIVE_NOCAL);
10045430:	2038      	movs	r0, #56	@ 0x38
10045432:	f7ff fdef 	bl	10045014 <LL_RADIO_SetReceivedNoCalDelayChk>
  LL_RADIO_SetTransmitCalDelayChk(DELAYCHK_TRANSMIT_CAL);
10045436:	2076      	movs	r0, #118	@ 0x76
10045438:	f7ff fda4 	bl	10044f84 <LL_RADIO_SetTransmitCalDelayChk>
  LL_RADIO_SetTransmitNoCalDelayChk(DELAYCHK_TRANSMIT_NOCAL);
1004543c:	203a      	movs	r0, #58	@ 0x3a
1004543e:	f7ff fdb7 	bl	10044fb0 <LL_RADIO_SetTransmitNoCalDelayChk>

  /* Initial and final TX delays: control the on-air start time of the TX packet
  *  and the length of the packet "tail" after last bit is transmitted
  */
  LL_RADIO_SetTxDelayStart(TXDELAY_START);
10045442:	2010      	movs	r0, #16
10045444:	f7ff fe28 	bl	10045098 <LL_RADIO_SetTxDelayStart>
  LL_RADIO_SetTxDelayEnd(TXDELAY_END);
10045448:	2010      	movs	r0, #16
1004544a:	f7ff fe3f 	bl	100450cc <LL_RADIO_SetTxDelayEnd>

  /* Timeout for TX ready signal from the radio FSM after the 2nd init phase
  *  has expired
  */
  LL_RADIO_SetTransmissionReadyTimeout(TXREADY_TIMEOUT);
1004544e:	2005      	movs	r0, #5
10045450:	f7ff fe56 	bl	10045100 <LL_RADIO_SetTransmissionReadyTimeout>

  /* Timing for the various programming phases of the radio, modem and memory
  *  pointers.
  */
  LL_RADIO_SetConfigurationEndDuration(CONFIG_END_DURATION);
10045454:	2014      	movs	r0, #20
10045456:	f7ff fdf1 	bl	1004503c <LL_RADIO_SetConfigurationEndDuration>
  LL_RADIO_SetTxDataReadyCheck(CHECK_TXDATAREADY);
1004545a:	2005      	movs	r0, #5
1004545c:	f7ff fe04 	bl	10045068 <LL_RADIO_SetTxDataReadyCheck>

  LL_RADIO_ChkFlagAutoclearEnable_Enable();
10045460:	f7ff fe64 	bl	1004512c <LL_RADIO_ChkFlagAutoclearEnable_Enable>
  LL_RADIO_NoActiveLErrorInterrupt_Enable();
10045464:	f7ff fe70 	bl	10045148 <LL_RADIO_NoActiveLErrorInterrupt_Enable>
  LL_RADIO_TxRxSkipInterrupt_Enable();
10045468:	f7ff fe7c 	bl	10045164 <LL_RADIO_TxRxSkipInterrupt_Enable>
  /* The commands in the hot table start at word 4
  * The words 0 to 2 are used to point to the command list
  * for the various trigger events, word 3 is a null command
  * (see function BLEPLAT_CNTR_SetRadioConfigData)
  */
  index = 0;
1004546c:	2013      	movs	r0, #19
1004546e:	183b      	adds	r3, r7, r0
10045470:	2200      	movs	r2, #0
10045472:	701a      	strb	r2, [r3, #0]
  hot_table_radio_config[index++] = 0x01;
10045474:	183b      	adds	r3, r7, r0
10045476:	781b      	ldrb	r3, [r3, #0]
10045478:	183a      	adds	r2, r7, r0
1004547a:	1c59      	adds	r1, r3, #1
1004547c:	7011      	strb	r1, [r2, #0]
1004547e:	001a      	movs	r2, r3
10045480:	697b      	ldr	r3, [r7, #20]
10045482:	189b      	adds	r3, r3, r2
10045484:	2201      	movs	r2, #1
10045486:	701a      	strb	r2, [r3, #0]
  hot_table_radio_config[index++] = RRM_CBIAS1_ANA_ENG;
10045488:	183b      	adds	r3, r7, r0
1004548a:	781b      	ldrb	r3, [r3, #0]
1004548c:	183a      	adds	r2, r7, r0
1004548e:	1c59      	adds	r1, r3, #1
10045490:	7011      	strb	r1, [r2, #0]
10045492:	001a      	movs	r2, r3
10045494:	697b      	ldr	r3, [r7, #20]
10045496:	189b      	adds	r3, r3, r2
10045498:	225e      	movs	r2, #94	@ 0x5e
1004549a:	701a      	strb	r2, [r3, #0]
  hot_table_radio_config[index++] = RRM->CBIAS1_ANA_ENG;
1004549c:	4a7f      	ldr	r2, [pc, #508]	@ (1004569c <HAL_RADIO_Init+0x47c>)
1004549e:	239e      	movs	r3, #158	@ 0x9e
100454a0:	009b      	lsls	r3, r3, #2
100454a2:	58d1      	ldr	r1, [r2, r3]
100454a4:	183b      	adds	r3, r7, r0
100454a6:	781b      	ldrb	r3, [r3, #0]
100454a8:	0004      	movs	r4, r0
100454aa:	183a      	adds	r2, r7, r0
100454ac:	1c58      	adds	r0, r3, #1
100454ae:	7010      	strb	r0, [r2, #0]
100454b0:	001a      	movs	r2, r3
100454b2:	697b      	ldr	r3, [r7, #20]
100454b4:	189b      	adds	r3, r3, r2
100454b6:	b2ca      	uxtb	r2, r1
100454b8:	701a      	strb	r2, [r3, #0]
  hot_table_radio_config[index++] = 0x01;
100454ba:	0020      	movs	r0, r4
100454bc:	183b      	adds	r3, r7, r0
100454be:	781b      	ldrb	r3, [r3, #0]
100454c0:	183a      	adds	r2, r7, r0
100454c2:	1c59      	adds	r1, r3, #1
100454c4:	7011      	strb	r1, [r2, #0]
100454c6:	001a      	movs	r2, r3
100454c8:	697b      	ldr	r3, [r7, #20]
100454ca:	189b      	adds	r3, r3, r2
100454cc:	2201      	movs	r2, #1
100454ce:	701a      	strb	r2, [r3, #0]
  hot_table_radio_config[index++] = RRM_CBIAS0_ANA_ENG;
100454d0:	183b      	adds	r3, r7, r0
100454d2:	781b      	ldrb	r3, [r3, #0]
100454d4:	183a      	adds	r2, r7, r0
100454d6:	1c59      	adds	r1, r3, #1
100454d8:	7011      	strb	r1, [r2, #0]
100454da:	001a      	movs	r2, r3
100454dc:	697b      	ldr	r3, [r7, #20]
100454de:	189b      	adds	r3, r3, r2
100454e0:	225d      	movs	r2, #93	@ 0x5d
100454e2:	701a      	strb	r2, [r3, #0]
  hot_table_radio_config[index++] = RRM->CBIAS0_ANA_ENG;
100454e4:	4a6d      	ldr	r2, [pc, #436]	@ (1004569c <HAL_RADIO_Init+0x47c>)
100454e6:	239d      	movs	r3, #157	@ 0x9d
100454e8:	009b      	lsls	r3, r3, #2
100454ea:	58d1      	ldr	r1, [r2, r3]
100454ec:	183b      	adds	r3, r7, r0
100454ee:	781b      	ldrb	r3, [r3, #0]
100454f0:	0004      	movs	r4, r0
100454f2:	183a      	adds	r2, r7, r0
100454f4:	1c58      	adds	r0, r3, #1
100454f6:	7010      	strb	r0, [r2, #0]
100454f8:	001a      	movs	r2, r3
100454fa:	697b      	ldr	r3, [r7, #20]
100454fc:	189b      	adds	r3, r3, r2
100454fe:	b2ca      	uxtb	r2, r1
10045500:	701a      	strb	r2, [r3, #0]

  hot_table_radio_config[index++] = 0x01;
10045502:	0020      	movs	r0, r4
10045504:	183b      	adds	r3, r7, r0
10045506:	781b      	ldrb	r3, [r3, #0]
10045508:	183a      	adds	r2, r7, r0
1004550a:	1c59      	adds	r1, r3, #1
1004550c:	7011      	strb	r1, [r2, #0]
1004550e:	001a      	movs	r2, r3
10045510:	697b      	ldr	r3, [r7, #20]
10045512:	189b      	adds	r3, r3, r2
10045514:	2201      	movs	r2, #1
10045516:	701a      	strb	r2, [r3, #0]
  hot_table_radio_config[index++] = RRM_RXADC_ANA_USR;
10045518:	183b      	adds	r3, r7, r0
1004551a:	781b      	ldrb	r3, [r3, #0]
1004551c:	183a      	adds	r2, r7, r0
1004551e:	1c59      	adds	r1, r3, #1
10045520:	7011      	strb	r1, [r2, #0]
10045522:	001a      	movs	r2, r3
10045524:	697b      	ldr	r3, [r7, #20]
10045526:	189b      	adds	r3, r3, r2
10045528:	2252      	movs	r2, #82	@ 0x52
1004552a:	701a      	strb	r2, [r3, #0]
  hot_table_radio_config[index++] = RRM->RXADC_ANA_USR;
1004552c:	4a5b      	ldr	r2, [pc, #364]	@ (1004569c <HAL_RADIO_Init+0x47c>)
1004552e:	2392      	movs	r3, #146	@ 0x92
10045530:	009b      	lsls	r3, r3, #2
10045532:	58d1      	ldr	r1, [r2, r3]
10045534:	183b      	adds	r3, r7, r0
10045536:	781b      	ldrb	r3, [r3, #0]
10045538:	0004      	movs	r4, r0
1004553a:	183a      	adds	r2, r7, r0
1004553c:	1c58      	adds	r0, r3, #1
1004553e:	7010      	strb	r0, [r2, #0]
10045540:	001a      	movs	r2, r3
10045542:	697b      	ldr	r3, [r7, #20]
10045544:	189b      	adds	r3, r3, r2
10045546:	b2ca      	uxtb	r2, r1
10045548:	701a      	strb	r2, [r3, #0]

  hot_table_radio_config[index++] = 0x01;
1004554a:	0020      	movs	r0, r4
1004554c:	183b      	adds	r3, r7, r0
1004554e:	781b      	ldrb	r3, [r3, #0]
10045550:	183a      	adds	r2, r7, r0
10045552:	1c59      	adds	r1, r3, #1
10045554:	7011      	strb	r1, [r2, #0]
10045556:	001a      	movs	r2, r3
10045558:	697b      	ldr	r3, [r7, #20]
1004555a:	189b      	adds	r3, r3, r2
1004555c:	2201      	movs	r2, #1
1004555e:	701a      	strb	r2, [r3, #0]
  hot_table_radio_config[index++] = RRM_AFC1_DIG_ENG;
10045560:	183b      	adds	r3, r7, r0
10045562:	781b      	ldrb	r3, [r3, #0]
10045564:	183a      	adds	r2, r7, r0
10045566:	1c59      	adds	r1, r3, #1
10045568:	7011      	strb	r1, [r2, #0]
1004556a:	001a      	movs	r2, r3
1004556c:	697b      	ldr	r3, [r7, #20]
1004556e:	189b      	adds	r3, r3, r2
10045570:	2212      	movs	r2, #18
10045572:	701a      	strb	r2, [r3, #0]
  hot_table_radio_config[index++] = RRM->AFC1_DIG_ENG;
10045574:	4a49      	ldr	r2, [pc, #292]	@ (1004569c <HAL_RADIO_Init+0x47c>)
10045576:	23a4      	movs	r3, #164	@ 0xa4
10045578:	005b      	lsls	r3, r3, #1
1004557a:	58d1      	ldr	r1, [r2, r3]
1004557c:	183b      	adds	r3, r7, r0
1004557e:	781b      	ldrb	r3, [r3, #0]
10045580:	0004      	movs	r4, r0
10045582:	183a      	adds	r2, r7, r0
10045584:	1c58      	adds	r0, r3, #1
10045586:	7010      	strb	r0, [r2, #0]
10045588:	001a      	movs	r2, r3
1004558a:	697b      	ldr	r3, [r7, #20]
1004558c:	189b      	adds	r3, r3, r2
1004558e:	b2ca      	uxtb	r2, r1
10045590:	701a      	strb	r2, [r3, #0]
  hot_table_radio_config[index++] = 0x01;
10045592:	0020      	movs	r0, r4
10045594:	183b      	adds	r3, r7, r0
10045596:	781b      	ldrb	r3, [r3, #0]
10045598:	183a      	adds	r2, r7, r0
1004559a:	1c59      	adds	r1, r3, #1
1004559c:	7011      	strb	r1, [r2, #0]
1004559e:	001a      	movs	r2, r3
100455a0:	697b      	ldr	r3, [r7, #20]
100455a2:	189b      	adds	r3, r3, r2
100455a4:	2201      	movs	r2, #1
100455a6:	701a      	strb	r2, [r3, #0]
  hot_table_radio_config[index++] = RRM_CR0_DIG_ENG;
100455a8:	183b      	adds	r3, r7, r0
100455aa:	781b      	ldrb	r3, [r3, #0]
100455ac:	183a      	adds	r2, r7, r0
100455ae:	1c59      	adds	r1, r3, #1
100455b0:	7011      	strb	r1, [r2, #0]
100455b2:	001a      	movs	r2, r3
100455b4:	697b      	ldr	r3, [r7, #20]
100455b6:	189b      	adds	r3, r3, r2
100455b8:	2215      	movs	r2, #21
100455ba:	701a      	strb	r2, [r3, #0]
  hot_table_radio_config[index++] = RRM->CR0_DIG_ENG;
100455bc:	4a37      	ldr	r2, [pc, #220]	@ (1004569c <HAL_RADIO_Init+0x47c>)
100455be:	23aa      	movs	r3, #170	@ 0xaa
100455c0:	005b      	lsls	r3, r3, #1
100455c2:	58d1      	ldr	r1, [r2, r3]
100455c4:	183b      	adds	r3, r7, r0
100455c6:	781b      	ldrb	r3, [r3, #0]
100455c8:	0004      	movs	r4, r0
100455ca:	183a      	adds	r2, r7, r0
100455cc:	1c58      	adds	r0, r3, #1
100455ce:	7010      	strb	r0, [r2, #0]
100455d0:	001a      	movs	r2, r3
100455d2:	697b      	ldr	r3, [r7, #20]
100455d4:	189b      	adds	r3, r3, r2
100455d6:	b2ca      	uxtb	r2, r1
100455d8:	701a      	strb	r2, [r3, #0]
  hot_table_radio_config[index++] = 0x01;
100455da:	0020      	movs	r0, r4
100455dc:	183b      	adds	r3, r7, r0
100455de:	781b      	ldrb	r3, [r3, #0]
100455e0:	183a      	adds	r2, r7, r0
100455e2:	1c59      	adds	r1, r3, #1
100455e4:	7011      	strb	r1, [r2, #0]
100455e6:	001a      	movs	r2, r3
100455e8:	697b      	ldr	r3, [r7, #20]
100455ea:	189b      	adds	r3, r3, r2
100455ec:	2201      	movs	r2, #1
100455ee:	701a      	strb	r2, [r3, #0]
  hot_table_radio_config[index++] = RRM_CR0_LR;
100455f0:	183b      	adds	r3, r7, r0
100455f2:	781b      	ldrb	r3, [r3, #0]
100455f4:	183a      	adds	r2, r7, r0
100455f6:	1c59      	adds	r1, r3, #1
100455f8:	7011      	strb	r1, [r2, #0]
100455fa:	001a      	movs	r2, r3
100455fc:	697b      	ldr	r3, [r7, #20]
100455fe:	189b      	adds	r3, r3, r2
10045600:	221a      	movs	r2, #26
10045602:	701a      	strb	r2, [r3, #0]
  hot_table_radio_config[index++] = RRM->CR0_LR;
10045604:	4a25      	ldr	r2, [pc, #148]	@ (1004569c <HAL_RADIO_Init+0x47c>)
10045606:	23b4      	movs	r3, #180	@ 0xb4
10045608:	005b      	lsls	r3, r3, #1
1004560a:	58d1      	ldr	r1, [r2, r3]
1004560c:	183b      	adds	r3, r7, r0
1004560e:	781b      	ldrb	r3, [r3, #0]
10045610:	0004      	movs	r4, r0
10045612:	183a      	adds	r2, r7, r0
10045614:	1c58      	adds	r0, r3, #1
10045616:	7010      	strb	r0, [r2, #0]
10045618:	001a      	movs	r2, r3
1004561a:	697b      	ldr	r3, [r7, #20]
1004561c:	189b      	adds	r3, r3, r2
1004561e:	b2ca      	uxtb	r2, r1
10045620:	701a      	strb	r2, [r3, #0]
  hot_table_radio_config[index++] = 0x01;
10045622:	0020      	movs	r0, r4
10045624:	183b      	adds	r3, r7, r0
10045626:	781b      	ldrb	r3, [r3, #0]
10045628:	183a      	adds	r2, r7, r0
1004562a:	1c59      	adds	r1, r3, #1
1004562c:	7011      	strb	r1, [r2, #0]
1004562e:	001a      	movs	r2, r3
10045630:	697b      	ldr	r3, [r7, #20]
10045632:	189b      	adds	r3, r3, r2
10045634:	2201      	movs	r2, #1
10045636:	701a      	strb	r2, [r3, #0]
  hot_table_radio_config[index++] = RRM_LR_RSSI_THR_DIG_ENG;
10045638:	183b      	adds	r3, r7, r0
1004563a:	781b      	ldrb	r3, [r3, #0]
1004563c:	183a      	adds	r2, r7, r0
1004563e:	1c59      	adds	r1, r3, #1
10045640:	7011      	strb	r1, [r2, #0]
10045642:	001a      	movs	r2, r3
10045644:	697b      	ldr	r3, [r7, #20]
10045646:	189b      	adds	r3, r3, r2
10045648:	2222      	movs	r2, #34	@ 0x22
1004564a:	701a      	strb	r2, [r3, #0]
  hot_table_radio_config[index++] = RRM->LR_RSSI_THR_DIG_ENG;
1004564c:	4a13      	ldr	r2, [pc, #76]	@ (1004569c <HAL_RADIO_Init+0x47c>)
1004564e:	23c4      	movs	r3, #196	@ 0xc4
10045650:	005b      	lsls	r3, r3, #1
10045652:	58d1      	ldr	r1, [r2, r3]
10045654:	183b      	adds	r3, r7, r0
10045656:	781b      	ldrb	r3, [r3, #0]
10045658:	0004      	movs	r4, r0
1004565a:	183a      	adds	r2, r7, r0
1004565c:	1c58      	adds	r0, r3, #1
1004565e:	7010      	strb	r0, [r2, #0]
10045660:	001a      	movs	r2, r3
10045662:	697b      	ldr	r3, [r7, #20]
10045664:	189b      	adds	r3, r3, r2
10045666:	b2ca      	uxtb	r2, r1
10045668:	701a      	strb	r2, [r3, #0]
  hot_table_radio_config[index++] = 0x01;
1004566a:	0020      	movs	r0, r4
1004566c:	183b      	adds	r3, r7, r0
1004566e:	781b      	ldrb	r3, [r3, #0]
10045670:	183a      	adds	r2, r7, r0
10045672:	1c59      	adds	r1, r3, #1
10045674:	7011      	strb	r1, [r2, #0]
10045676:	001a      	movs	r2, r3
10045678:	697b      	ldr	r3, [r7, #20]
1004567a:	189b      	adds	r3, r3, r2
1004567c:	2201      	movs	r2, #1
1004567e:	701a      	strb	r2, [r3, #0]
  hot_table_radio_config[index++] = RRM_LR_PD_THR_DIG_ENG;
10045680:	183b      	adds	r3, r7, r0
10045682:	781b      	ldrb	r3, [r3, #0]
10045684:	183a      	adds	r2, r7, r0
10045686:	1c59      	adds	r1, r3, #1
10045688:	7011      	strb	r1, [r2, #0]
1004568a:	001a      	movs	r2, r3
1004568c:	697b      	ldr	r3, [r7, #20]
1004568e:	189b      	adds	r3, r3, r2
10045690:	e006      	b.n	100456a0 <HAL_RADIO_Init+0x480>
10045692:	46c0      	nop			@ (mov r8, r8)
10045694:	200000c0 	.word	0x200000c0
10045698:	60001800 	.word	0x60001800
1004569c:	60001400 	.word	0x60001400
100456a0:	2221      	movs	r2, #33	@ 0x21
100456a2:	701a      	strb	r2, [r3, #0]
  hot_table_radio_config[index++] = RRM->LR_PD_THR_DIG_ENG;
100456a4:	4a4c      	ldr	r2, [pc, #304]	@ (100457d8 <HAL_RADIO_Init+0x5b8>)
100456a6:	23c2      	movs	r3, #194	@ 0xc2
100456a8:	005b      	lsls	r3, r3, #1
100456aa:	58d1      	ldr	r1, [r2, r3]
100456ac:	183b      	adds	r3, r7, r0
100456ae:	781b      	ldrb	r3, [r3, #0]
100456b0:	0004      	movs	r4, r0
100456b2:	183a      	adds	r2, r7, r0
100456b4:	1c58      	adds	r0, r3, #1
100456b6:	7010      	strb	r0, [r2, #0]
100456b8:	001a      	movs	r2, r3
100456ba:	697b      	ldr	r3, [r7, #20]
100456bc:	189b      	adds	r3, r3, r2
100456be:	b2ca      	uxtb	r2, r1
100456c0:	701a      	strb	r2, [r3, #0]
  hot_table_radio_config[index++] = 0x01;
100456c2:	0020      	movs	r0, r4
100456c4:	183b      	adds	r3, r7, r0
100456c6:	781b      	ldrb	r3, [r3, #0]
100456c8:	183a      	adds	r2, r7, r0
100456ca:	1c59      	adds	r1, r3, #1
100456cc:	7011      	strb	r1, [r2, #0]
100456ce:	001a      	movs	r2, r3
100456d0:	697b      	ldr	r3, [r7, #20]
100456d2:	189b      	adds	r3, r3, r2
100456d4:	2201      	movs	r2, #1
100456d6:	701a      	strb	r2, [r3, #0]
  hot_table_radio_config[index++] = RRM_LR_AAC_THR_DIG_ENG;
100456d8:	183b      	adds	r3, r7, r0
100456da:	781b      	ldrb	r3, [r3, #0]
100456dc:	183a      	adds	r2, r7, r0
100456de:	1c59      	adds	r1, r3, #1
100456e0:	7011      	strb	r1, [r2, #0]
100456e2:	001a      	movs	r2, r3
100456e4:	697b      	ldr	r3, [r7, #20]
100456e6:	189b      	adds	r3, r3, r2
100456e8:	2223      	movs	r2, #35	@ 0x23
100456ea:	701a      	strb	r2, [r3, #0]
  hot_table_radio_config[index++] = RRM->LR_AAC_THR_DIG_ENG;
100456ec:	4a3a      	ldr	r2, [pc, #232]	@ (100457d8 <HAL_RADIO_Init+0x5b8>)
100456ee:	23c6      	movs	r3, #198	@ 0xc6
100456f0:	005b      	lsls	r3, r3, #1
100456f2:	58d1      	ldr	r1, [r2, r3]
100456f4:	183b      	adds	r3, r7, r0
100456f6:	781b      	ldrb	r3, [r3, #0]
100456f8:	0004      	movs	r4, r0
100456fa:	183a      	adds	r2, r7, r0
100456fc:	1c58      	adds	r0, r3, #1
100456fe:	7010      	strb	r0, [r2, #0]
10045700:	001a      	movs	r2, r3
10045702:	697b      	ldr	r3, [r7, #20]
10045704:	189b      	adds	r3, r3, r2
10045706:	b2ca      	uxtb	r2, r1
10045708:	701a      	strb	r2, [r3, #0]
  hot_table_radio_config[index++] = 0x01;
1004570a:	0020      	movs	r0, r4
1004570c:	183b      	adds	r3, r7, r0
1004570e:	781b      	ldrb	r3, [r3, #0]
10045710:	183a      	adds	r2, r7, r0
10045712:	1c59      	adds	r1, r3, #1
10045714:	7011      	strb	r1, [r2, #0]
10045716:	001a      	movs	r2, r3
10045718:	697b      	ldr	r3, [r7, #20]
1004571a:	189b      	adds	r3, r3, r2
1004571c:	2201      	movs	r2, #1
1004571e:	701a      	strb	r2, [r3, #0]
  hot_table_radio_config[index++] = RRM_VIT_CONF_DIG_ENG;
10045720:	183b      	adds	r3, r7, r0
10045722:	781b      	ldrb	r3, [r3, #0]
10045724:	183a      	adds	r2, r7, r0
10045726:	1c59      	adds	r1, r3, #1
10045728:	7011      	strb	r1, [r2, #0]
1004572a:	001a      	movs	r2, r3
1004572c:	697b      	ldr	r3, [r7, #20]
1004572e:	189b      	adds	r3, r3, r2
10045730:	221b      	movs	r2, #27
10045732:	701a      	strb	r2, [r3, #0]
  hot_table_radio_config[index++] = RRM->VIT_CONF_DIG_ENG;
10045734:	4a28      	ldr	r2, [pc, #160]	@ (100457d8 <HAL_RADIO_Init+0x5b8>)
10045736:	23b6      	movs	r3, #182	@ 0xb6
10045738:	005b      	lsls	r3, r3, #1
1004573a:	58d1      	ldr	r1, [r2, r3]
1004573c:	183b      	adds	r3, r7, r0
1004573e:	781b      	ldrb	r3, [r3, #0]
10045740:	0004      	movs	r4, r0
10045742:	183a      	adds	r2, r7, r0
10045744:	1c58      	adds	r0, r3, #1
10045746:	7010      	strb	r0, [r2, #0]
10045748:	001a      	movs	r2, r3
1004574a:	697b      	ldr	r3, [r7, #20]
1004574c:	189b      	adds	r3, r3, r2
1004574e:	b2ca      	uxtb	r2, r1
10045750:	701a      	strb	r2, [r3, #0]
  hot_table_radio_config[index++] = RRM->ANTSW_DIG0_USR;
  hot_table_radio_config[index++] = 0x01;
  hot_table_radio_config[index++] = RRM_ANTSW_DIG1_USR;
  hot_table_radio_config[index++] = RRM->ANTSW_DIG1_USR;
#endif
  hot_table_radio_config[index++] = 0x00;
10045752:	193b      	adds	r3, r7, r4
10045754:	781b      	ldrb	r3, [r3, #0]
10045756:	193a      	adds	r2, r7, r4
10045758:	1c59      	adds	r1, r3, #1
1004575a:	7011      	strb	r1, [r2, #0]
1004575c:	001a      	movs	r2, r3
1004575e:	697b      	ldr	r3, [r7, #20]
10045760:	189b      	adds	r3, r3, r2
10045762:	2200      	movs	r2, #0
10045764:	701a      	strb	r2, [r3, #0]

  hot_table_radio_config_u32[0] = (uint32_t)(&hot_table_radio_config_u32[4]); /* Point to Port 0 command list 1 executed when Wakeup timer triggers */
10045766:	4a1d      	ldr	r2, [pc, #116]	@ (100457dc <HAL_RADIO_Init+0x5bc>)
10045768:	4b1d      	ldr	r3, [pc, #116]	@ (100457e0 <HAL_RADIO_Init+0x5c0>)
1004576a:	601a      	str	r2, [r3, #0]
  hot_table_radio_config_u32[1] = (uint32_t)(&hot_table_radio_config_u32[4]); /* Point to Port 0 command list 2 executed when Timer1 triggers       */
1004576c:	4a1b      	ldr	r2, [pc, #108]	@ (100457dc <HAL_RADIO_Init+0x5bc>)
1004576e:	4b1c      	ldr	r3, [pc, #112]	@ (100457e0 <HAL_RADIO_Init+0x5c0>)
10045770:	605a      	str	r2, [r3, #4]
  hot_table_radio_config_u32[2] = (uint32_t)(&hot_table_radio_config_u32[3]); /* Point to Port 0 command list 3 executed when Timer2 triggers       */
10045772:	4a1c      	ldr	r2, [pc, #112]	@ (100457e4 <HAL_RADIO_Init+0x5c4>)
10045774:	4b1a      	ldr	r3, [pc, #104]	@ (100457e0 <HAL_RADIO_Init+0x5c0>)
10045776:	609a      	str	r2, [r3, #8]
  hot_table_radio_config_u32[3] = 0x00000000;                /* Null command */
10045778:	4b19      	ldr	r3, [pc, #100]	@ (100457e0 <HAL_RADIO_Init+0x5c0>)
1004577a:	2200      	movs	r2, #0
1004577c:	60da      	str	r2, [r3, #12]

  LL_RADIO_SetRadioConfigurationAddressPointer(hot_table_radio_config_u32[0]);
1004577e:	4b18      	ldr	r3, [pc, #96]	@ (100457e0 <HAL_RADIO_Init+0x5c0>)
10045780:	681b      	ldr	r3, [r3, #0]
10045782:	0018      	movs	r0, r3
10045784:	f7ff fba8 	bl	10044ed8 <LL_RADIO_SetRadioConfigurationAddressPointer>
  /* Reload radio config pointer */
  RRM->UDRA_CTRL0 = RRM_UDRA_CTRL0_RELOAD_RDCFGPTR;
10045788:	4b13      	ldr	r3, [pc, #76]	@ (100457d8 <HAL_RADIO_Init+0x5b8>)
1004578a:	2201      	movs	r2, #1
1004578c:	611a      	str	r2, [r3, #16]
  LL_RADIO_Active2ErrorInterrupt_Enable();
1004578e:	f7ff fcf7 	bl	10045180 <LL_RADIO_Active2ErrorInterrupt_Enable>

#if USE_RADIO_PROPRIETARY_DRIVER
  globalParameters.back2backTime = BACK_TO_BACK_TIME;
10045792:	4b15      	ldr	r3, [pc, #84]	@ (100457e8 <HAL_RADIO_Init+0x5c8>)
10045794:	2296      	movs	r2, #150	@ 0x96
10045796:	601a      	str	r2, [r3, #0]
  globalParameters.tone_start_stop_flag = 0;
10045798:	4b13      	ldr	r3, [pc, #76]	@ (100457e8 <HAL_RADIO_Init+0x5c8>)
1004579a:	2200      	movs	r2, #0
1004579c:	711a      	strb	r2, [r3, #4]
#endif

  /*Clear all interrupts of the BLUE Controller*/
  uint32_t int_val_tmp = BLUE->INTERRUPT1REG;
1004579e:	23c0      	movs	r3, #192	@ 0xc0
100457a0:	05db      	lsls	r3, r3, #23
100457a2:	685b      	ldr	r3, [r3, #4]
100457a4:	60fb      	str	r3, [r7, #12]
  BLUE->INTERRUPT1REG = int_val_tmp;
100457a6:	23c0      	movs	r3, #192	@ 0xc0
100457a8:	05db      	lsls	r3, r3, #23
100457aa:	68fa      	ldr	r2, [r7, #12]
100457ac:	605a      	str	r2, [r3, #4]

  /*BLE wake up IRQ Status clearing and enable*/
  WAKEUP->WAKEUP_BLE_IRQ_STATUS |= 1;
100457ae:	4b0f      	ldr	r3, [pc, #60]	@ (100457ec <HAL_RADIO_Init+0x5cc>)
100457b0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
100457b2:	4b0e      	ldr	r3, [pc, #56]	@ (100457ec <HAL_RADIO_Init+0x5cc>)
100457b4:	2101      	movs	r1, #1
100457b6:	430a      	orrs	r2, r1
100457b8:	645a      	str	r2, [r3, #68]	@ 0x44
  WAKEUP->WAKEUP_BLE_IRQ_ENABLE |= 1;
100457ba:	4b0c      	ldr	r3, [pc, #48]	@ (100457ec <HAL_RADIO_Init+0x5cc>)
100457bc:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
100457be:	4b0b      	ldr	r3, [pc, #44]	@ (100457ec <HAL_RADIO_Init+0x5cc>)
100457c0:	2101      	movs	r1, #1
100457c2:	430a      	orrs	r2, r1
100457c4:	641a      	str	r2, [r3, #64]	@ 0x40
  /* If the device is configured with
     System clock = 64 MHz and BLE clock = 16 MHz
     a register read is necessary to end fine
     the clear interrupt register operation,
     due the AHB down converter latency */
  int_val_tmp = BLUE->INTERRUPT1REG;
100457c6:	23c0      	movs	r3, #192	@ 0xc0
100457c8:	05db      	lsls	r3, r3, #23
100457ca:	685b      	ldr	r3, [r3, #4]
100457cc:	60fb      	str	r3, [r7, #12]

  return;
100457ce:	46c0      	nop			@ (mov r8, r8)
}
100457d0:	46bd      	mov	sp, r7
100457d2:	b00d      	add	sp, #52	@ 0x34
100457d4:	bd90      	pop	{r4, r7, pc}
100457d6:	46c0      	nop			@ (mov r8, r8)
100457d8:	60001400 	.word	0x60001400
100457dc:	200008e4 	.word	0x200008e4
100457e0:	200008d4 	.word	0x200008d4
100457e4:	200008e0 	.word	0x200008e0
100457e8:	20000848 	.word	0x20000848
100457ec:	60001800 	.word	0x60001800

100457f0 <HAL_RADIO_ReadRSSI>:
/**
  * @brief  Read RSSI
  * @retval int8_t: RSSI in dBm
  */
int8_t HAL_RADIO_ReadRSSI(void)
{
100457f0:	b580      	push	{r7, lr}
100457f2:	b086      	sub	sp, #24
100457f4:	af00      	add	r7, sp, #0
  int32_t rssi_dbm;
  uint32_t rssi0 = RRM->RSSI0_DIG_OUT;
100457f6:	4a24      	ldr	r2, [pc, #144]	@ (10045888 <HAL_RADIO_ReadRSSI+0x98>)
100457f8:	23a9      	movs	r3, #169	@ 0xa9
100457fa:	009b      	lsls	r3, r3, #2
100457fc:	58d3      	ldr	r3, [r2, r3]
100457fe:	60fb      	str	r3, [r7, #12]
  uint32_t rssi1 = RRM->RSSI1_DIG_OUT;
10045800:	4a21      	ldr	r2, [pc, #132]	@ (10045888 <HAL_RADIO_ReadRSSI+0x98>)
10045802:	23aa      	movs	r3, #170	@ 0xaa
10045804:	009b      	lsls	r3, r3, #2
10045806:	58d3      	ldr	r3, [r2, r3]
10045808:	60bb      	str	r3, [r7, #8]

  uint32_t rssi_int16 = ((rssi1 & 0xFF) << 8) | (rssi0 & 0xFF);
1004580a:	68bb      	ldr	r3, [r7, #8]
1004580c:	021b      	lsls	r3, r3, #8
1004580e:	041b      	lsls	r3, r3, #16
10045810:	0c1a      	lsrs	r2, r3, #16
10045812:	68fb      	ldr	r3, [r7, #12]
10045814:	21ff      	movs	r1, #255	@ 0xff
10045816:	400b      	ands	r3, r1
10045818:	4313      	orrs	r3, r2
1004581a:	613b      	str	r3, [r7, #16]
  uint32_t reg_agc = RRM->AGC_DIG_OUT;
1004581c:	4a1a      	ldr	r2, [pc, #104]	@ (10045888 <HAL_RADIO_ReadRSSI+0x98>)
1004581e:	23ab      	movs	r3, #171	@ 0xab
10045820:	009b      	lsls	r3, r3, #2
10045822:	58d3      	ldr	r3, [r2, r3]
10045824:	607b      	str	r3, [r7, #4]

  if ((rssi_int16 == 0U) || (reg_agc > 0xbU))
10045826:	693b      	ldr	r3, [r7, #16]
10045828:	2b00      	cmp	r3, #0
1004582a:	d002      	beq.n	10045832 <HAL_RADIO_ReadRSSI+0x42>
1004582c:	687b      	ldr	r3, [r7, #4]
1004582e:	2b0b      	cmp	r3, #11
10045830:	d902      	bls.n	10045838 <HAL_RADIO_ReadRSSI+0x48>
  {
    rssi_dbm = 127 ;
10045832:	237f      	movs	r3, #127	@ 0x7f
10045834:	617b      	str	r3, [r7, #20]
10045836:	e020      	b.n	1004587a <HAL_RADIO_ReadRSSI+0x8a>
  }
  else
  {
    rssi_dbm = (int32_t)reg_agc * 6 - RSSI_OFFSET;//127 ;
10045838:	687a      	ldr	r2, [r7, #4]
1004583a:	0013      	movs	r3, r2
1004583c:	005b      	lsls	r3, r3, #1
1004583e:	189b      	adds	r3, r3, r2
10045840:	005b      	lsls	r3, r3, #1
10045842:	3b77      	subs	r3, #119	@ 0x77
10045844:	617b      	str	r3, [r7, #20]
    while (rssi_int16 > 30U)
10045846:	e005      	b.n	10045854 <HAL_RADIO_ReadRSSI+0x64>
    {
      rssi_dbm = rssi_dbm + 6 ;
10045848:	697b      	ldr	r3, [r7, #20]
1004584a:	3306      	adds	r3, #6
1004584c:	617b      	str	r3, [r7, #20]
      rssi_int16 = (rssi_int16 >> 1) ;
1004584e:	693b      	ldr	r3, [r7, #16]
10045850:	085b      	lsrs	r3, r3, #1
10045852:	613b      	str	r3, [r7, #16]
    while (rssi_int16 > 30U)
10045854:	693b      	ldr	r3, [r7, #16]
10045856:	2b1e      	cmp	r3, #30
10045858:	d8f6      	bhi.n	10045848 <HAL_RADIO_ReadRSSI+0x58>
    }
    rssi_dbm = rssi_dbm + (int32_t)(uint32_t)((417U * rssi_int16 + 18080U) >> 10);
1004585a:	693a      	ldr	r2, [r7, #16]
1004585c:	0013      	movs	r3, r2
1004585e:	005b      	lsls	r3, r3, #1
10045860:	189b      	adds	r3, r3, r2
10045862:	009b      	lsls	r3, r3, #2
10045864:	189b      	adds	r3, r3, r2
10045866:	015b      	lsls	r3, r3, #5
10045868:	189b      	adds	r3, r3, r2
1004586a:	4a08      	ldr	r2, [pc, #32]	@ (1004588c <HAL_RADIO_ReadRSSI+0x9c>)
1004586c:	4694      	mov	ip, r2
1004586e:	4463      	add	r3, ip
10045870:	0a9b      	lsrs	r3, r3, #10
10045872:	001a      	movs	r2, r3
10045874:	697b      	ldr	r3, [r7, #20]
10045876:	189b      	adds	r3, r3, r2
10045878:	617b      	str	r3, [r7, #20]
  }
  return (int8_t)rssi_dbm;
1004587a:	697b      	ldr	r3, [r7, #20]
1004587c:	b25b      	sxtb	r3, r3
}
1004587e:	0018      	movs	r0, r3
10045880:	46bd      	mov	sp, r7
10045882:	b006      	add	sp, #24
10045884:	bd80      	pop	{r7, pc}
10045886:	46c0      	nop			@ (mov r8, r8)
10045888:	60001400 	.word	0x60001400
1004588c:	000046a0 	.word	0x000046a0

10045890 <HAL_RADIO_Callback>:
  * @param  p: Current action packet which its transaction has been completed.
  * @param  next: Next action packet which is going to be scheduled.
  * @retval return value: TRUE
  */
uint8_t HAL_RADIO_Callback(ActionPacket *p, ActionPacket *next)
{
10045890:	b590      	push	{r4, r7, lr}
10045892:	b085      	sub	sp, #20
10045894:	af00      	add	r7, sp, #0
10045896:	6078      	str	r0, [r7, #4]
10045898:	6039      	str	r1, [r7, #0]
  /* Event is a reception */
  if ((p->status & BLUE_STATUSREG_PREVTRANSMIT) == 0)
1004589a:	687b      	ldr	r3, [r7, #4]
1004589c:	68db      	ldr	r3, [r3, #12]
1004589e:	2240      	movs	r2, #64	@ 0x40
100458a0:	4013      	ands	r3, r2
100458a2:	d153      	bne.n	1004594c <HAL_RADIO_Callback+0xbc>
  {
    RxStats_t receivedStats = {0};
100458a4:	2408      	movs	r4, #8
100458a6:	193b      	adds	r3, r7, r4
100458a8:	0018      	movs	r0, r3
100458aa:	2308      	movs	r3, #8
100458ac:	001a      	movs	r2, r3
100458ae:	2100      	movs	r1, #0
100458b0:	f004 fb64 	bl	10049f7c <memset>
    /* Reception ends with no errors */
    if ((p->status & BLUE_INTERRUPT1REG_RCVOK) != 0)
100458b4:	687b      	ldr	r3, [r7, #4]
100458b6:	68db      	ldr	r3, [r3, #12]
100458b8:	2b00      	cmp	r3, #0
100458ba:	da20      	bge.n	100458fe <HAL_RADIO_Callback+0x6e>
    {
      if ((p->status & BLUE_INTERRUPT1REG_ENCERROR) != 0)
100458bc:	687b      	ldr	r3, [r7, #4]
100458be:	68da      	ldr	r2, [r3, #12]
100458c0:	2380      	movs	r3, #128	@ 0x80
100458c2:	019b      	lsls	r3, r3, #6
100458c4:	4013      	ands	r3, r2
100458c6:	d00c      	beq.n	100458e2 <HAL_RADIO_Callback+0x52>
      {
        receivedStats.rssi = p->rssi;
100458c8:	687b      	ldr	r3, [r7, #4]
100458ca:	695a      	ldr	r2, [r3, #20]
100458cc:	193b      	adds	r3, r7, r4
100458ce:	601a      	str	r2, [r3, #0]
        receivedStats.timestamp_receive = p->timestamp_receive;
100458d0:	687b      	ldr	r3, [r7, #4]
100458d2:	691a      	ldr	r2, [r3, #16]
100458d4:	193b      	adds	r3, r7, r4
100458d6:	605a      	str	r2, [r3, #4]
        HAL_RADIO_CallbackRcvEncryptErr(&receivedStats);
100458d8:	193b      	adds	r3, r7, r4
100458da:	0018      	movs	r0, r3
100458dc:	f000 f853 	bl	10045986 <HAL_RADIO_CallbackRcvEncryptErr>
100458e0:	e03c      	b.n	1004595c <HAL_RADIO_Callback+0xcc>
      }
      else
      {
        receivedStats.rssi = p->rssi;
100458e2:	687b      	ldr	r3, [r7, #4]
100458e4:	695a      	ldr	r2, [r3, #20]
100458e6:	2108      	movs	r1, #8
100458e8:	187b      	adds	r3, r7, r1
100458ea:	601a      	str	r2, [r3, #0]
        receivedStats.timestamp_receive = p->timestamp_receive;
100458ec:	687b      	ldr	r3, [r7, #4]
100458ee:	691a      	ldr	r2, [r3, #16]
100458f0:	187b      	adds	r3, r7, r1
100458f2:	605a      	str	r2, [r3, #4]
        HAL_RADIO_CallbackRcvOk(&receivedStats);
100458f4:	187b      	adds	r3, r7, r1
100458f6:	0018      	movs	r0, r3
100458f8:	f7fd fa6e 	bl	10042dd8 <HAL_RADIO_CallbackRcvOk>
100458fc:	e02e      	b.n	1004595c <HAL_RADIO_Callback+0xcc>
      }
    }
    /* Reception ends with timeout */
    else if ((p->status & BLUE_INTERRUPT1REG_RCVTIMEOUT) != 0)
100458fe:	687b      	ldr	r3, [r7, #4]
10045900:	68da      	ldr	r2, [r3, #12]
10045902:	2380      	movs	r3, #128	@ 0x80
10045904:	04db      	lsls	r3, r3, #19
10045906:	4013      	ands	r3, r2
10045908:	d00c      	beq.n	10045924 <HAL_RADIO_Callback+0x94>
    {
      receivedStats.rssi = p->rssi;
1004590a:	687b      	ldr	r3, [r7, #4]
1004590c:	695a      	ldr	r2, [r3, #20]
1004590e:	2108      	movs	r1, #8
10045910:	187b      	adds	r3, r7, r1
10045912:	601a      	str	r2, [r3, #0]
      receivedStats.timestamp_receive = 0;
10045914:	187b      	adds	r3, r7, r1
10045916:	2200      	movs	r2, #0
10045918:	605a      	str	r2, [r3, #4]
      HAL_RADIO_CallbackRcvTimeout(&receivedStats);
1004591a:	187b      	adds	r3, r7, r1
1004591c:	0018      	movs	r0, r3
1004591e:	f000 f82a 	bl	10045976 <HAL_RADIO_CallbackRcvTimeout>
10045922:	e01b      	b.n	1004595c <HAL_RADIO_Callback+0xcc>
    }
    /* Reception ends with errors */
    else if ((p->status & BLUE_INTERRUPT1REG_RCVCRCERR) != 0)
10045924:	687b      	ldr	r3, [r7, #4]
10045926:	68da      	ldr	r2, [r3, #12]
10045928:	2380      	movs	r3, #128	@ 0x80
1004592a:	05db      	lsls	r3, r3, #23
1004592c:	4013      	ands	r3, r2
1004592e:	d015      	beq.n	1004595c <HAL_RADIO_Callback+0xcc>
    {
      receivedStats.rssi = p->rssi;
10045930:	687b      	ldr	r3, [r7, #4]
10045932:	695a      	ldr	r2, [r3, #20]
10045934:	2108      	movs	r1, #8
10045936:	187b      	adds	r3, r7, r1
10045938:	601a      	str	r2, [r3, #0]
      receivedStats.timestamp_receive = p->timestamp_receive;
1004593a:	687b      	ldr	r3, [r7, #4]
1004593c:	691a      	ldr	r2, [r3, #16]
1004593e:	187b      	adds	r3, r7, r1
10045940:	605a      	str	r2, [r3, #4]
      HAL_RADIO_CallbackRcvError(&receivedStats);
10045942:	187b      	adds	r3, r7, r1
10045944:	0018      	movs	r0, r3
10045946:	f000 f80e 	bl	10045966 <HAL_RADIO_CallbackRcvError>
1004594a:	e007      	b.n	1004595c <HAL_RADIO_Callback+0xcc>
    }
  }
  /* Event is a transmission */
  else if ((p->status & BLUE_INTERRUPT1REG_DONE) != 0)
1004594c:	687b      	ldr	r3, [r7, #4]
1004594e:	68da      	ldr	r2, [r3, #12]
10045950:	2380      	movs	r3, #128	@ 0x80
10045952:	049b      	lsls	r3, r3, #18
10045954:	4013      	ands	r3, r2
10045956:	d001      	beq.n	1004595c <HAL_RADIO_Callback+0xcc>
  {
    /* RADIO TX operation done */
    HAL_RADIO_CallbackTxDone();
10045958:	f000 f81d 	bl	10045996 <HAL_RADIO_CallbackTxDone>
  }
  return TRUE;
1004595c:	2301      	movs	r3, #1
}
1004595e:	0018      	movs	r0, r3
10045960:	46bd      	mov	sp, r7
10045962:	b005      	add	sp, #20
10045964:	bd90      	pop	{r4, r7, pc}

10045966 <HAL_RADIO_CallbackRcvError>:

__weak void HAL_RADIO_CallbackRcvError(RxStats_t *rxPacketStats) {}
10045966:	b580      	push	{r7, lr}
10045968:	b082      	sub	sp, #8
1004596a:	af00      	add	r7, sp, #0
1004596c:	6078      	str	r0, [r7, #4]
1004596e:	46c0      	nop			@ (mov r8, r8)
10045970:	46bd      	mov	sp, r7
10045972:	b002      	add	sp, #8
10045974:	bd80      	pop	{r7, pc}

10045976 <HAL_RADIO_CallbackRcvTimeout>:
__weak void HAL_RADIO_CallbackRcvTimeout(RxStats_t *rxPacketStats) {}
10045976:	b580      	push	{r7, lr}
10045978:	b082      	sub	sp, #8
1004597a:	af00      	add	r7, sp, #0
1004597c:	6078      	str	r0, [r7, #4]
1004597e:	46c0      	nop			@ (mov r8, r8)
10045980:	46bd      	mov	sp, r7
10045982:	b002      	add	sp, #8
10045984:	bd80      	pop	{r7, pc}

10045986 <HAL_RADIO_CallbackRcvEncryptErr>:
__weak void HAL_RADIO_CallbackRcvEncryptErr(RxStats_t *rxPacketStats) {}
10045986:	b580      	push	{r7, lr}
10045988:	b082      	sub	sp, #8
1004598a:	af00      	add	r7, sp, #0
1004598c:	6078      	str	r0, [r7, #4]
1004598e:	46c0      	nop			@ (mov r8, r8)
10045990:	46bd      	mov	sp, r7
10045992:	b002      	add	sp, #8
10045994:	bd80      	pop	{r7, pc}

10045996 <HAL_RADIO_CallbackTxDone>:
__weak void HAL_RADIO_CallbackRcvOk(RxStats_t *rxPacketStats) {}
__weak void HAL_RADIO_CallbackTxDone(void) {}
10045996:	b580      	push	{r7, lr}
10045998:	af00      	add	r7, sp, #0
1004599a:	46c0      	nop			@ (mov r8, r8)
1004599c:	46bd      	mov	sp, r7
1004599e:	bd80      	pop	{r7, pc}

100459a0 <HAL_RADIO_ActionPacketIsr>:
  * @brief  Radio ISR.
  *         Besides, next packet is scheduled here.
  * @retval None
  */
static void HAL_RADIO_ActionPacketIsr(uint32_t int_flags)
{
100459a0:	b590      	push	{r4, r7, lr}
100459a2:	b089      	sub	sp, #36	@ 0x24
100459a4:	af00      	add	r7, sp, #0
100459a6:	6078      	str	r0, [r7, #4]
  if ((int_flags & BLUE_INTERRUPT1REG_DONE) != 0)
100459a8:	687a      	ldr	r2, [r7, #4]
100459aa:	2380      	movs	r3, #128	@ 0x80
100459ac:	049b      	lsls	r3, r3, #18
100459ae:	4013      	ands	r3, r2
100459b0:	d100      	bne.n	100459b4 <HAL_RADIO_ActionPacketIsr+0x14>
100459b2:	e105      	b.n	10045bc0 <HAL_RADIO_ActionPacketIsr+0x220>
    BlueTransStruct *p;
    uint32_t time;

    /* Copy status in order for callback to access it. */
    globalParameters.current_action_packet->status = int_flags | \
                                                     (BLUE->STATUSREG & BLUE_STATUSREG_PREVTRANSMIT_Msk);
100459b4:	23c0      	movs	r3, #192	@ 0xc0
100459b6:	05db      	lsls	r3, r3, #23
100459b8:	69db      	ldr	r3, [r3, #28]
100459ba:	2240      	movs	r2, #64	@ 0x40
100459bc:	4013      	ands	r3, r2
100459be:	0019      	movs	r1, r3
    globalParameters.current_action_packet->status = int_flags | \
100459c0:	4b81      	ldr	r3, [pc, #516]	@ (10045bc8 <HAL_RADIO_ActionPacketIsr+0x228>)
100459c2:	689b      	ldr	r3, [r3, #8]
100459c4:	687a      	ldr	r2, [r7, #4]
100459c6:	430a      	orrs	r2, r1
100459c8:	60da      	str	r2, [r3, #12]

    if ((globalParameters.current_action_packet->condRoutine(globalParameters.current_action_packet)) == TRUE)
100459ca:	4b7f      	ldr	r3, [pc, #508]	@ (10045bc8 <HAL_RADIO_ActionPacketIsr+0x228>)
100459cc:	689b      	ldr	r3, [r3, #8]
100459ce:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
100459d0:	4b7d      	ldr	r3, [pc, #500]	@ (10045bc8 <HAL_RADIO_ActionPacketIsr+0x228>)
100459d2:	689b      	ldr	r3, [r3, #8]
100459d4:	0018      	movs	r0, r3
100459d6:	4790      	blx	r2
100459d8:	0003      	movs	r3, r0
100459da:	2b01      	cmp	r3, #1
100459dc:	d104      	bne.n	100459e8 <HAL_RADIO_ActionPacketIsr+0x48>
    {
      next = globalParameters.current_action_packet->next_true;
100459de:	4b7a      	ldr	r3, [pc, #488]	@ (10045bc8 <HAL_RADIO_ActionPacketIsr+0x228>)
100459e0:	689b      	ldr	r3, [r3, #8]
100459e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
100459e4:	61fb      	str	r3, [r7, #28]
100459e6:	e003      	b.n	100459f0 <HAL_RADIO_ActionPacketIsr+0x50>
    }
    else
    {
      next = globalParameters.current_action_packet->next_false;
100459e8:	4b77      	ldr	r3, [pc, #476]	@ (10045bc8 <HAL_RADIO_ActionPacketIsr+0x228>)
100459ea:	689b      	ldr	r3, [r3, #8]
100459ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
100459ee:	61fb      	str	r3, [r7, #28]
    }
    /*The radio event is started. So here a check on the next packet of the event is made*/
    if (next == NULL_0)
100459f0:	69fb      	ldr	r3, [r7, #28]
100459f2:	2b00      	cmp	r3, #0
100459f4:	d116      	bne.n	10045a24 <HAL_RADIO_ActionPacketIsr+0x84>
    {
      /* timer2 off */
      LL_RADIO_TIMER_DisableTimer1(BLUE);
100459f6:	23c0      	movs	r3, #192	@ 0xc0
100459f8:	05db      	lsls	r3, r3, #23
100459fa:	0018      	movs	r0, r3
100459fc:	f7ff fbce 	bl	1004519c <LL_RADIO_TIMER_DisableTimer1>
      LL_RADIO_TIMER_DisableTimer2(BLUE);
10045a00:	23c0      	movs	r3, #192	@ 0xc0
10045a02:	05db      	lsls	r3, r3, #23
10045a04:	0018      	movs	r0, r3
10045a06:	f7ff fbd8 	bl	100451ba <LL_RADIO_TIMER_DisableTimer2>
      LL_RADIO_TIMER_DisableBLEWakeupTimer(WAKEUP);
10045a0a:	4b70      	ldr	r3, [pc, #448]	@ (10045bcc <HAL_RADIO_ActionPacketIsr+0x22c>)
10045a0c:	0018      	movs	r0, r3
10045a0e:	f7ff fbe3 	bl	100451d8 <LL_RADIO_TIMER_DisableBLEWakeupTimer>
      MODIFY_REG(BLUEGLOB->BYTE4, GLOBAL_BYTE4_ACTIVE_Msk, BLUE_IDLE_0);
10045a12:	4b6f      	ldr	r3, [pc, #444]	@ (10045bd0 <HAL_RADIO_ActionPacketIsr+0x230>)
10045a14:	791b      	ldrb	r3, [r3, #4]
10045a16:	b2db      	uxtb	r3, r3
10045a18:	4a6d      	ldr	r2, [pc, #436]	@ (10045bd0 <HAL_RADIO_ActionPacketIsr+0x230>)
10045a1a:	217f      	movs	r1, #127	@ 0x7f
10045a1c:	400b      	ands	r3, r1
10045a1e:	b2db      	uxtb	r3, r3
10045a20:	7113      	strb	r3, [r2, #4]
10045a22:	e099      	b.n	10045b58 <HAL_RADIO_ActionPacketIsr+0x1b8>
    }
    else
    {
      BLUEGLOB->BYTE4 = (next->StateMachineNo | GLOBAL_BYTE4_ACTIVE_Msk);
10045a24:	69fb      	ldr	r3, [r7, #28]
10045a26:	781b      	ldrb	r3, [r3, #0]
10045a28:	4969      	ldr	r1, [pc, #420]	@ (10045bd0 <HAL_RADIO_ActionPacketIsr+0x230>)
10045a2a:	2280      	movs	r2, #128	@ 0x80
10045a2c:	4252      	negs	r2, r2
10045a2e:	4313      	orrs	r3, r2
10045a30:	b2db      	uxtb	r3, r3
10045a32:	710b      	strb	r3, [r1, #4]
      p = &next->trans_packet;
10045a34:	69fb      	ldr	r3, [r7, #28]
10045a36:	3318      	adds	r3, #24
10045a38:	61bb      	str	r3, [r7, #24]
      MODIFY_REG((bluedata + next->StateMachineNo)->BYTE0, STATEMACH_BYTE0_TXMODE_Msk,
10045a3a:	69fb      	ldr	r3, [r7, #28]
10045a3c:	781b      	ldrb	r3, [r3, #0]
10045a3e:	001a      	movs	r2, r3
10045a40:	0013      	movs	r3, r2
10045a42:	009b      	lsls	r3, r3, #2
10045a44:	189b      	adds	r3, r3, r2
10045a46:	011b      	lsls	r3, r3, #4
10045a48:	4a62      	ldr	r2, [pc, #392]	@ (10045bd4 <HAL_RADIO_ActionPacketIsr+0x234>)
10045a4a:	4694      	mov	ip, r2
10045a4c:	4463      	add	r3, ip
10045a4e:	781b      	ldrb	r3, [r3, #0]
10045a50:	b2db      	uxtb	r3, r3
10045a52:	b25b      	sxtb	r3, r3
10045a54:	227f      	movs	r2, #127	@ 0x7f
10045a56:	4013      	ands	r3, r2
10045a58:	b25a      	sxtb	r2, r3
10045a5a:	69fb      	ldr	r3, [r7, #28]
10045a5c:	213c      	movs	r1, #60	@ 0x3c
10045a5e:	5c5b      	ldrb	r3, [r3, r1]
10045a60:	b25b      	sxtb	r3, r3
10045a62:	4313      	orrs	r3, r2
10045a64:	b259      	sxtb	r1, r3
10045a66:	69fb      	ldr	r3, [r7, #28]
10045a68:	781b      	ldrb	r3, [r3, #0]
10045a6a:	001a      	movs	r2, r3
10045a6c:	0013      	movs	r3, r2
10045a6e:	009b      	lsls	r3, r3, #2
10045a70:	189b      	adds	r3, r3, r2
10045a72:	011b      	lsls	r3, r3, #4
10045a74:	4a57      	ldr	r2, [pc, #348]	@ (10045bd4 <HAL_RADIO_ActionPacketIsr+0x234>)
10045a76:	4694      	mov	ip, r2
10045a78:	4463      	add	r3, ip
10045a7a:	b2ca      	uxtb	r2, r1
10045a7c:	701a      	strb	r2, [r3, #0]
                 next->trans_config);/* Transmission or reception*/
      (bluedata + next->StateMachineNo)->TXPOINT = BLUE_STRUCT_PTR_CAST(p);
10045a7e:	69fb      	ldr	r3, [r7, #28]
10045a80:	781b      	ldrb	r3, [r3, #0]
10045a82:	001a      	movs	r2, r3
10045a84:	0013      	movs	r3, r2
10045a86:	009b      	lsls	r3, r3, #2
10045a88:	189b      	adds	r3, r3, r2
10045a8a:	011b      	lsls	r3, r3, #4
10045a8c:	4a51      	ldr	r2, [pc, #324]	@ (10045bd4 <HAL_RADIO_ActionPacketIsr+0x234>)
10045a8e:	4694      	mov	ip, r2
10045a90:	4463      	add	r3, ip
10045a92:	69ba      	ldr	r2, [r7, #24]
10045a94:	605a      	str	r2, [r3, #4]
      (bluedata + next->StateMachineNo)->RCVPOINT = BLUE_STRUCT_PTR_CAST(p);
10045a96:	69fb      	ldr	r3, [r7, #28]
10045a98:	781b      	ldrb	r3, [r3, #0]
10045a9a:	001a      	movs	r2, r3
10045a9c:	0013      	movs	r3, r2
10045a9e:	009b      	lsls	r3, r3, #2
10045aa0:	189b      	adds	r3, r3, r2
10045aa2:	011b      	lsls	r3, r3, #4
10045aa4:	4a4b      	ldr	r2, [pc, #300]	@ (10045bd4 <HAL_RADIO_ActionPacketIsr+0x234>)
10045aa6:	4694      	mov	ip, r2
10045aa8:	4463      	add	r3, ip
10045aaa:	69ba      	ldr	r2, [r7, #24]
10045aac:	609a      	str	r2, [r3, #8]
      (bluedata + next->StateMachineNo)->MAXRECEIVEDLENGTH = next->MaxReceiveLength;
10045aae:	69fb      	ldr	r3, [r7, #28]
10045ab0:	781b      	ldrb	r3, [r3, #0]
10045ab2:	001a      	movs	r2, r3
10045ab4:	0013      	movs	r3, r2
10045ab6:	009b      	lsls	r3, r3, #2
10045ab8:	189b      	adds	r3, r3, r2
10045aba:	011b      	lsls	r3, r3, #4
10045abc:	4a45      	ldr	r2, [pc, #276]	@ (10045bd4 <HAL_RADIO_ActionPacketIsr+0x234>)
10045abe:	4694      	mov	ip, r2
10045ac0:	4463      	add	r3, ip
10045ac2:	69fa      	ldr	r2, [r7, #28]
10045ac4:	7891      	ldrb	r1, [r2, #2]
10045ac6:	222b      	movs	r2, #43	@ 0x2b
10045ac8:	5499      	strb	r1, [r3, r2]

      /* Packet will execute on time specified by WakeupTime */
      if ((next->ActionTag & TIMER_WAKEUP) != 0)
10045aca:	69fb      	ldr	r3, [r7, #28]
10045acc:	785b      	ldrb	r3, [r3, #1]
10045ace:	001a      	movs	r2, r3
10045ad0:	2304      	movs	r3, #4
10045ad2:	4013      	ands	r3, r2
10045ad4:	d040      	beq.n	10045b58 <HAL_RADIO_ActionPacketIsr+0x1b8>
      {
        /* timer1/2 off */
        LL_RADIO_TIMER_DisableTimer1(BLUE);
10045ad6:	23c0      	movs	r3, #192	@ 0xc0
10045ad8:	05db      	lsls	r3, r3, #23
10045ada:	0018      	movs	r0, r3
10045adc:	f7ff fb5e 	bl	1004519c <LL_RADIO_TIMER_DisableTimer1>
        LL_RADIO_TIMER_DisableTimer2(BLUE);
10045ae0:	23c0      	movs	r3, #192	@ 0xc0
10045ae2:	05db      	lsls	r3, r3, #23
10045ae4:	0018      	movs	r0, r3
10045ae6:	f7ff fb68 	bl	100451ba <LL_RADIO_TIMER_DisableTimer2>

        /* program timer at next->wakeuptime */
        if ((next->ActionTag & RELATIVE) != 0)
10045aea:	69fb      	ldr	r3, [r7, #28]
10045aec:	785b      	ldrb	r3, [r3, #1]
10045aee:	001a      	movs	r2, r3
10045af0:	2320      	movs	r3, #32
10045af2:	4013      	ands	r3, r2
10045af4:	d01e      	beq.n	10045b34 <HAL_RADIO_ActionPacketIsr+0x194>
        {
          time = HAL_RADIO_TIMER_GetCurrentSysTime() + HAL_RADIO_TIMER_UsToSystime(next->WakeupTime);
10045af6:	f001 fa45 	bl	10046f84 <HAL_RADIO_TIMER_GetCurrentSysTime>
10045afa:	0002      	movs	r2, r0
10045afc:	000b      	movs	r3, r1
10045afe:	0014      	movs	r4, r2
10045b00:	69fb      	ldr	r3, [r7, #28]
10045b02:	685b      	ldr	r3, [r3, #4]
10045b04:	0018      	movs	r0, r3
10045b06:	f001 fa19 	bl	10046f3c <HAL_RADIO_TIMER_UsToSystime>
10045b0a:	0003      	movs	r3, r0
10045b0c:	18e3      	adds	r3, r4, r3
10045b0e:	617b      	str	r3, [r7, #20]
          HAL_RADIO_TIMER_SetRadioTimerValue(time, (next->trans_config == STATEMACH_BYTE0_TXMODE_Msk), (next->ActionTag & PLL_TRIG));
10045b10:	69fb      	ldr	r3, [r7, #28]
10045b12:	223c      	movs	r2, #60	@ 0x3c
10045b14:	5c9b      	ldrb	r3, [r3, r2]
10045b16:	3b80      	subs	r3, #128	@ 0x80
10045b18:	425a      	negs	r2, r3
10045b1a:	4153      	adcs	r3, r2
10045b1c:	b2db      	uxtb	r3, r3
10045b1e:	0019      	movs	r1, r3
10045b20:	69fb      	ldr	r3, [r7, #28]
10045b22:	785b      	ldrb	r3, [r3, #1]
10045b24:	2201      	movs	r2, #1
10045b26:	4013      	ands	r3, r2
10045b28:	b2da      	uxtb	r2, r3
10045b2a:	697b      	ldr	r3, [r7, #20]
10045b2c:	0018      	movs	r0, r3
10045b2e:	f001 f911 	bl	10046d54 <HAL_RADIO_TIMER_SetRadioTimerValue>
10045b32:	e011      	b.n	10045b58 <HAL_RADIO_ActionPacketIsr+0x1b8>
        }
        else
        {
          HAL_RADIO_TIMER_SetRadioTimerValue(next->WakeupTime, (next->trans_config == STATEMACH_BYTE0_TXMODE_Msk), (next->ActionTag & PLL_TRIG));
10045b34:	69fb      	ldr	r3, [r7, #28]
10045b36:	6858      	ldr	r0, [r3, #4]
10045b38:	69fb      	ldr	r3, [r7, #28]
10045b3a:	223c      	movs	r2, #60	@ 0x3c
10045b3c:	5c9b      	ldrb	r3, [r3, r2]
10045b3e:	3b80      	subs	r3, #128	@ 0x80
10045b40:	425a      	negs	r2, r3
10045b42:	4153      	adcs	r3, r2
10045b44:	b2db      	uxtb	r3, r3
10045b46:	0019      	movs	r1, r3
10045b48:	69fb      	ldr	r3, [r7, #28]
10045b4a:	785b      	ldrb	r3, [r3, #1]
10045b4c:	2201      	movs	r2, #1
10045b4e:	4013      	ands	r3, r2
10045b50:	b2db      	uxtb	r3, r3
10045b52:	001a      	movs	r2, r3
10045b54:	f001 f8fe 	bl	10046d54 <HAL_RADIO_TIMER_SetRadioTimerValue>
        /* back to back */
      }
    }

    /* Accept the packet even with CRC Error */
    if (((int_flags & BLUE_INTERRUPT1REG_RCVOK) != 0) || ((int_flags & BLUE_INTERRUPT1REG_RCVCRCERR) != 0))
10045b58:	687b      	ldr	r3, [r7, #4]
10045b5a:	2b00      	cmp	r3, #0
10045b5c:	db04      	blt.n	10045b68 <HAL_RADIO_ActionPacketIsr+0x1c8>
10045b5e:	687a      	ldr	r2, [r7, #4]
10045b60:	2380      	movs	r3, #128	@ 0x80
10045b62:	05db      	lsls	r3, r3, #23
10045b64:	4013      	ands	r3, r2
10045b66:	d012      	beq.n	10045b8e <HAL_RADIO_ActionPacketIsr+0x1ee>
    {

      uint64_t current_system_time;
      /* read RSSI */
      globalParameters.current_action_packet->rssi =  HAL_RADIO_ReadRSSI();
10045b68:	f7ff fe42 	bl	100457f0 <HAL_RADIO_ReadRSSI>
10045b6c:	0003      	movs	r3, r0
10045b6e:	001a      	movs	r2, r3
10045b70:	4b15      	ldr	r3, [pc, #84]	@ (10045bc8 <HAL_RADIO_ActionPacketIsr+0x228>)
10045b72:	689b      	ldr	r3, [r3, #8]
10045b74:	615a      	str	r2, [r3, #20]

      /* bluedata->config = bluedata->config ^ 0x80 ;  toggle NESN bit
      bluedata->config = bluedata->config & 0x7F ;  //reset NESN bit */

      /* read time stamp */
      globalParameters.current_action_packet->timestamp_receive = HAL_RADIO_TIMER_GetAnchorPoint(&current_system_time);
10045b76:	2308      	movs	r3, #8
10045b78:	18fb      	adds	r3, r7, r3
10045b7a:	0018      	movs	r0, r3
10045b7c:	f001 f8d6 	bl	10046d2c <HAL_RADIO_TIMER_GetAnchorPoint>
10045b80:	0002      	movs	r2, r0
10045b82:	000b      	movs	r3, r1
10045b84:	4910      	ldr	r1, [pc, #64]	@ (10045bc8 <HAL_RADIO_ActionPacketIsr+0x228>)
10045b86:	6889      	ldr	r1, [r1, #8]
10045b88:	0013      	movs	r3, r2
10045b8a:	610b      	str	r3, [r1, #16]
    {
10045b8c:	e00b      	b.n	10045ba6 <HAL_RADIO_ActionPacketIsr+0x206>
    }
    else if ((int_flags & BLUE_INTERRUPT1REG_RCVTIMEOUT) != 0)
10045b8e:	687a      	ldr	r2, [r7, #4]
10045b90:	2380      	movs	r3, #128	@ 0x80
10045b92:	04db      	lsls	r3, r3, #19
10045b94:	4013      	ands	r3, r2
10045b96:	d006      	beq.n	10045ba6 <HAL_RADIO_ActionPacketIsr+0x206>
    {
      /* read RSSI even if a timeout happens */
      globalParameters.current_action_packet->rssi =  HAL_RADIO_ReadRSSI();
10045b98:	f7ff fe2a 	bl	100457f0 <HAL_RADIO_ReadRSSI>
10045b9c:	0003      	movs	r3, r0
10045b9e:	001a      	movs	r2, r3
10045ba0:	4b09      	ldr	r3, [pc, #36]	@ (10045bc8 <HAL_RADIO_ActionPacketIsr+0x228>)
10045ba2:	689b      	ldr	r3, [r3, #8]
10045ba4:	615a      	str	r2, [r3, #20]
    }

    actionPacketBackup = globalParameters.current_action_packet;
10045ba6:	4b08      	ldr	r3, [pc, #32]	@ (10045bc8 <HAL_RADIO_ActionPacketIsr+0x228>)
10045ba8:	689b      	ldr	r3, [r3, #8]
10045baa:	613b      	str	r3, [r7, #16]
    globalParameters.current_action_packet = next;
10045bac:	4b06      	ldr	r3, [pc, #24]	@ (10045bc8 <HAL_RADIO_ActionPacketIsr+0x228>)
10045bae:	69fa      	ldr	r2, [r7, #28]
10045bb0:	609a      	str	r2, [r3, #8]
    actionPacketBackup->dataRoutine(actionPacketBackup, next);
10045bb2:	693b      	ldr	r3, [r7, #16]
10045bb4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
10045bb6:	69f9      	ldr	r1, [r7, #28]
10045bb8:	693a      	ldr	r2, [r7, #16]
10045bba:	0010      	movs	r0, r2
10045bbc:	4798      	blx	r3
  }

  return ;
10045bbe:	46c0      	nop			@ (mov r8, r8)
10045bc0:	46c0      	nop			@ (mov r8, r8)
}
10045bc2:	46bd      	mov	sp, r7
10045bc4:	b009      	add	sp, #36	@ 0x24
10045bc6:	bd90      	pop	{r4, r7, pc}
10045bc8:	20000848 	.word	0x20000848
10045bcc:	60001800 	.word	0x60001800
10045bd0:	200000c0 	.word	0x200000c0
10045bd4:	200000dc 	.word	0x200000dc

10045bd8 <HAL_RADIO_SetChannelMap>:
  * @param  StateMachineNo: state machine number in multi state.
  * @param  chan_remap: a 37-bit vector, one bit per channel from 0 to 36, with the LSB corresponding to the channel 0
  * @retval None
  */
void HAL_RADIO_SetChannelMap(uint8_t StateMachineNo, uint8_t *chan_remap)
{
10045bd8:	b590      	push	{r4, r7, lr}
10045bda:	b085      	sub	sp, #20
10045bdc:	af00      	add	r7, sp, #0
10045bde:	0002      	movs	r2, r0
10045be0:	6039      	str	r1, [r7, #0]
10045be2:	1dfb      	adds	r3, r7, #7
10045be4:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_STATE_VALID(StateMachineNo));

  for (uint8_t i = 0; i < 5; i++)
10045be6:	230f      	movs	r3, #15
10045be8:	18fb      	adds	r3, r7, r3
10045bea:	2200      	movs	r2, #0
10045bec:	701a      	strb	r2, [r3, #0]
10045bee:	e01a      	b.n	10045c26 <HAL_RADIO_SetChannelMap+0x4e>
  {
    (bluedata + StateMachineNo)->USEDCHANNELFLAGS[i] = chan_remap[i];
10045bf0:	200f      	movs	r0, #15
10045bf2:	183b      	adds	r3, r7, r0
10045bf4:	781b      	ldrb	r3, [r3, #0]
10045bf6:	683a      	ldr	r2, [r7, #0]
10045bf8:	18d1      	adds	r1, r2, r3
10045bfa:	1dfb      	adds	r3, r7, #7
10045bfc:	781a      	ldrb	r2, [r3, #0]
10045bfe:	0013      	movs	r3, r2
10045c00:	009b      	lsls	r3, r3, #2
10045c02:	189b      	adds	r3, r3, r2
10045c04:	011b      	lsls	r3, r3, #4
10045c06:	4a19      	ldr	r2, [pc, #100]	@ (10045c6c <HAL_RADIO_SetChannelMap+0x94>)
10045c08:	189a      	adds	r2, r3, r2
10045c0a:	0004      	movs	r4, r0
10045c0c:	183b      	adds	r3, r7, r0
10045c0e:	781b      	ldrb	r3, [r3, #0]
10045c10:	7808      	ldrb	r0, [r1, #0]
10045c12:	212e      	movs	r1, #46	@ 0x2e
10045c14:	18d3      	adds	r3, r2, r3
10045c16:	185b      	adds	r3, r3, r1
10045c18:	1c02      	adds	r2, r0, #0
10045c1a:	701a      	strb	r2, [r3, #0]
  for (uint8_t i = 0; i < 5; i++)
10045c1c:	193b      	adds	r3, r7, r4
10045c1e:	781a      	ldrb	r2, [r3, #0]
10045c20:	193b      	adds	r3, r7, r4
10045c22:	3201      	adds	r2, #1
10045c24:	701a      	strb	r2, [r3, #0]
10045c26:	230f      	movs	r3, #15
10045c28:	18fb      	adds	r3, r7, r3
10045c2a:	781b      	ldrb	r3, [r3, #0]
10045c2c:	2b04      	cmp	r3, #4
10045c2e:	d9df      	bls.n	10045bf0 <HAL_RADIO_SetChannelMap+0x18>
  }
  (bluedata + StateMachineNo)->USEDCHANNELFLAGS[4] &= 0x1F;
10045c30:	1dfb      	adds	r3, r7, #7
10045c32:	781a      	ldrb	r2, [r3, #0]
10045c34:	0013      	movs	r3, r2
10045c36:	009b      	lsls	r3, r3, #2
10045c38:	189b      	adds	r3, r3, r2
10045c3a:	011b      	lsls	r3, r3, #4
10045c3c:	4a0b      	ldr	r2, [pc, #44]	@ (10045c6c <HAL_RADIO_SetChannelMap+0x94>)
10045c3e:	4694      	mov	ip, r2
10045c40:	4463      	add	r3, ip
10045c42:	2232      	movs	r2, #50	@ 0x32
10045c44:	5c9b      	ldrb	r3, [r3, r2]
10045c46:	b2d9      	uxtb	r1, r3
10045c48:	1dfb      	adds	r3, r7, #7
10045c4a:	781a      	ldrb	r2, [r3, #0]
10045c4c:	0013      	movs	r3, r2
10045c4e:	009b      	lsls	r3, r3, #2
10045c50:	189b      	adds	r3, r3, r2
10045c52:	011b      	lsls	r3, r3, #4
10045c54:	4a05      	ldr	r2, [pc, #20]	@ (10045c6c <HAL_RADIO_SetChannelMap+0x94>)
10045c56:	4694      	mov	ip, r2
10045c58:	4463      	add	r3, ip
10045c5a:	221f      	movs	r2, #31
10045c5c:	400a      	ands	r2, r1
10045c5e:	b2d1      	uxtb	r1, r2
10045c60:	2232      	movs	r2, #50	@ 0x32
10045c62:	5499      	strb	r1, [r3, r2]
  return;
10045c64:	46c0      	nop			@ (mov r8, r8)
}
10045c66:	46bd      	mov	sp, r7
10045c68:	b005      	add	sp, #20
10045c6a:	bd90      	pop	{r4, r7, pc}
10045c6c:	200000dc 	.word	0x200000dc

10045c70 <HAL_RADIO_SetChannel>:
  * @param  channel: ble channel index. From 0 to 39.
  * @param  channel_increment: determines the hoping value.
  * @retval None
  */
void HAL_RADIO_SetChannel(uint8_t StateMachineNo, uint8_t channel, uint8_t channel_increment)
{
10045c70:	b590      	push	{r4, r7, lr}
10045c72:	b083      	sub	sp, #12
10045c74:	af00      	add	r7, sp, #0
10045c76:	0004      	movs	r4, r0
10045c78:	0008      	movs	r0, r1
10045c7a:	0011      	movs	r1, r2
10045c7c:	1dfb      	adds	r3, r7, #7
10045c7e:	1c22      	adds	r2, r4, #0
10045c80:	701a      	strb	r2, [r3, #0]
10045c82:	1dbb      	adds	r3, r7, #6
10045c84:	1c02      	adds	r2, r0, #0
10045c86:	701a      	strb	r2, [r3, #0]
10045c88:	1d7b      	adds	r3, r7, #5
10045c8a:	1c0a      	adds	r2, r1, #0
10045c8c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_STATE_VALID(StateMachineNo));
  assert_param(IS_RFCHANNEL_VALID(channel));

  MODIFY_REG((bluedata + StateMachineNo)->BYTE0, STATEMACH_BYTE0_UCHAN_Msk, channel);
10045c8e:	1dfb      	adds	r3, r7, #7
10045c90:	781a      	ldrb	r2, [r3, #0]
10045c92:	0013      	movs	r3, r2
10045c94:	009b      	lsls	r3, r3, #2
10045c96:	189b      	adds	r3, r3, r2
10045c98:	011b      	lsls	r3, r3, #4
10045c9a:	4a24      	ldr	r2, [pc, #144]	@ (10045d2c <HAL_RADIO_SetChannel+0xbc>)
10045c9c:	4694      	mov	ip, r2
10045c9e:	4463      	add	r3, ip
10045ca0:	781b      	ldrb	r3, [r3, #0]
10045ca2:	b2db      	uxtb	r3, r3
10045ca4:	b25b      	sxtb	r3, r3
10045ca6:	223f      	movs	r2, #63	@ 0x3f
10045ca8:	4393      	bics	r3, r2
10045caa:	b25a      	sxtb	r2, r3
10045cac:	1dbb      	adds	r3, r7, #6
10045cae:	781b      	ldrb	r3, [r3, #0]
10045cb0:	b25b      	sxtb	r3, r3
10045cb2:	4313      	orrs	r3, r2
10045cb4:	b259      	sxtb	r1, r3
10045cb6:	1dfb      	adds	r3, r7, #7
10045cb8:	781a      	ldrb	r2, [r3, #0]
10045cba:	0013      	movs	r3, r2
10045cbc:	009b      	lsls	r3, r3, #2
10045cbe:	189b      	adds	r3, r3, r2
10045cc0:	011b      	lsls	r3, r3, #4
10045cc2:	4a1a      	ldr	r2, [pc, #104]	@ (10045d2c <HAL_RADIO_SetChannel+0xbc>)
10045cc4:	4694      	mov	ip, r2
10045cc6:	4463      	add	r3, ip
10045cc8:	b2ca      	uxtb	r2, r1
10045cca:	701a      	strb	r2, [r3, #0]
  /*if TxRxPack.incchan = 0, then remap_chan is used as physical channel*/
  MODIFY_REG((bluedata + StateMachineNo)->BYTE1, STATEMACH_BYTE1_REMAP_CHAN_Msk, channel);
10045ccc:	1dfb      	adds	r3, r7, #7
10045cce:	781a      	ldrb	r2, [r3, #0]
10045cd0:	0013      	movs	r3, r2
10045cd2:	009b      	lsls	r3, r3, #2
10045cd4:	189b      	adds	r3, r3, r2
10045cd6:	011b      	lsls	r3, r3, #4
10045cd8:	4a14      	ldr	r2, [pc, #80]	@ (10045d2c <HAL_RADIO_SetChannel+0xbc>)
10045cda:	4694      	mov	ip, r2
10045cdc:	4463      	add	r3, ip
10045cde:	785b      	ldrb	r3, [r3, #1]
10045ce0:	b2db      	uxtb	r3, r3
10045ce2:	b25b      	sxtb	r3, r3
10045ce4:	223f      	movs	r2, #63	@ 0x3f
10045ce6:	4393      	bics	r3, r2
10045ce8:	b25a      	sxtb	r2, r3
10045cea:	1dbb      	adds	r3, r7, #6
10045cec:	781b      	ldrb	r3, [r3, #0]
10045cee:	b25b      	sxtb	r3, r3
10045cf0:	4313      	orrs	r3, r2
10045cf2:	b259      	sxtb	r1, r3
10045cf4:	1dfb      	adds	r3, r7, #7
10045cf6:	781a      	ldrb	r2, [r3, #0]
10045cf8:	0013      	movs	r3, r2
10045cfa:	009b      	lsls	r3, r3, #2
10045cfc:	189b      	adds	r3, r3, r2
10045cfe:	011b      	lsls	r3, r3, #4
10045d00:	4a0a      	ldr	r2, [pc, #40]	@ (10045d2c <HAL_RADIO_SetChannel+0xbc>)
10045d02:	4694      	mov	ip, r2
10045d04:	4463      	add	r3, ip
10045d06:	b2ca      	uxtb	r2, r1
10045d08:	705a      	strb	r2, [r3, #1]
  (bluedata + StateMachineNo)->HOPINCR = channel_increment;
10045d0a:	1dfb      	adds	r3, r7, #7
10045d0c:	781a      	ldrb	r2, [r3, #0]
10045d0e:	0013      	movs	r3, r2
10045d10:	009b      	lsls	r3, r3, #2
10045d12:	189b      	adds	r3, r3, r2
10045d14:	011b      	lsls	r3, r3, #4
10045d16:	4a05      	ldr	r2, [pc, #20]	@ (10045d2c <HAL_RADIO_SetChannel+0xbc>)
10045d18:	4694      	mov	ip, r2
10045d1a:	4463      	add	r3, ip
10045d1c:	1d7a      	adds	r2, r7, #5
10045d1e:	212d      	movs	r1, #45	@ 0x2d
10045d20:	7812      	ldrb	r2, [r2, #0]
10045d22:	545a      	strb	r2, [r3, r1]
  return;
10045d24:	46c0      	nop			@ (mov r8, r8)
}
10045d26:	46bd      	mov	sp, r7
10045d28:	b003      	add	sp, #12
10045d2a:	bd90      	pop	{r4, r7, pc}
10045d2c:	200000dc 	.word	0x200000dc

10045d30 <HAL_RADIO_SetTxAttributes>:
  * @param  crc_init: CRC initialization value.
  *         This value must be 0x555555 when channel frequency is one of these values: 37, 38, 39.
  * @retval None
  */
void HAL_RADIO_SetTxAttributes(uint8_t StateMachineNo, uint32_t NetworkID, uint32_t crc_init)
{
10045d30:	b580      	push	{r7, lr}
10045d32:	b084      	sub	sp, #16
10045d34:	af00      	add	r7, sp, #0
10045d36:	60b9      	str	r1, [r7, #8]
10045d38:	607a      	str	r2, [r7, #4]
10045d3a:	210f      	movs	r1, #15
10045d3c:	187b      	adds	r3, r7, r1
10045d3e:	1c02      	adds	r2, r0, #0
10045d40:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_STATE_VALID(StateMachineNo));

  (bluedata + StateMachineNo)->ACCADDR = NetworkID;
10045d42:	0008      	movs	r0, r1
10045d44:	183b      	adds	r3, r7, r0
10045d46:	781a      	ldrb	r2, [r3, #0]
10045d48:	0013      	movs	r3, r2
10045d4a:	009b      	lsls	r3, r3, #2
10045d4c:	189b      	adds	r3, r3, r2
10045d4e:	011b      	lsls	r3, r3, #4
10045d50:	4a18      	ldr	r2, [pc, #96]	@ (10045db4 <HAL_RADIO_SetTxAttributes+0x84>)
10045d52:	4694      	mov	ip, r2
10045d54:	4463      	add	r3, ip
10045d56:	68ba      	ldr	r2, [r7, #8]
10045d58:	625a      	str	r2, [r3, #36]	@ 0x24
  (bluedata + StateMachineNo)->CRCINIT[0] = crc_init;
10045d5a:	183b      	adds	r3, r7, r0
10045d5c:	781a      	ldrb	r2, [r3, #0]
10045d5e:	0013      	movs	r3, r2
10045d60:	009b      	lsls	r3, r3, #2
10045d62:	189b      	adds	r3, r3, r2
10045d64:	011b      	lsls	r3, r3, #4
10045d66:	4a13      	ldr	r2, [pc, #76]	@ (10045db4 <HAL_RADIO_SetTxAttributes+0x84>)
10045d68:	4694      	mov	ip, r2
10045d6a:	4463      	add	r3, ip
10045d6c:	687a      	ldr	r2, [r7, #4]
10045d6e:	b2d1      	uxtb	r1, r2
10045d70:	2228      	movs	r2, #40	@ 0x28
10045d72:	5499      	strb	r1, [r3, r2]
  (bluedata + StateMachineNo)->CRCINIT[1] = crc_init >> 8;
10045d74:	687b      	ldr	r3, [r7, #4]
10045d76:	0a19      	lsrs	r1, r3, #8
10045d78:	183b      	adds	r3, r7, r0
10045d7a:	781a      	ldrb	r2, [r3, #0]
10045d7c:	0013      	movs	r3, r2
10045d7e:	009b      	lsls	r3, r3, #2
10045d80:	189b      	adds	r3, r3, r2
10045d82:	011b      	lsls	r3, r3, #4
10045d84:	4a0b      	ldr	r2, [pc, #44]	@ (10045db4 <HAL_RADIO_SetTxAttributes+0x84>)
10045d86:	4694      	mov	ip, r2
10045d88:	4463      	add	r3, ip
10045d8a:	b2c9      	uxtb	r1, r1
10045d8c:	2229      	movs	r2, #41	@ 0x29
10045d8e:	5499      	strb	r1, [r3, r2]
  (bluedata + StateMachineNo)->CRCINIT[2] = crc_init >> 16;
10045d90:	687b      	ldr	r3, [r7, #4]
10045d92:	0c19      	lsrs	r1, r3, #16
10045d94:	183b      	adds	r3, r7, r0
10045d96:	781a      	ldrb	r2, [r3, #0]
10045d98:	0013      	movs	r3, r2
10045d9a:	009b      	lsls	r3, r3, #2
10045d9c:	189b      	adds	r3, r3, r2
10045d9e:	011b      	lsls	r3, r3, #4
10045da0:	4a04      	ldr	r2, [pc, #16]	@ (10045db4 <HAL_RADIO_SetTxAttributes+0x84>)
10045da2:	4694      	mov	ip, r2
10045da4:	4463      	add	r3, ip
10045da6:	b2c9      	uxtb	r1, r1
10045da8:	222a      	movs	r2, #42	@ 0x2a
10045daa:	5499      	strb	r1, [r3, r2]
  return;
10045dac:	46c0      	nop			@ (mov r8, r8)
}
10045dae:	46bd      	mov	sp, r7
10045db0:	b004      	add	sp, #16
10045db2:	bd80      	pop	{r7, pc}
10045db4:	200000dc 	.word	0x200000dc

10045db8 <HAL_RADIO_SetGlobalReceiveTimeout>:
  *         and access address detection.
  * @param  ReceiveTimeout: receive window length in microseconds.
  * @retval None
  */
void HAL_RADIO_SetGlobalReceiveTimeout(uint32_t ReceiveTimeout)
{
10045db8:	b580      	push	{r7, lr}
10045dba:	b082      	sub	sp, #8
10045dbc:	af00      	add	r7, sp, #0
10045dbe:	6078      	str	r0, [r7, #4]
  /* Set the Rx window Timeout expressed as: 4^(RCVTIMEOUT_19_18)*RCVTIMEOUT_17_0 */
  if (ReceiveTimeout < 0x40000)
10045dc0:	687a      	ldr	r2, [r7, #4]
10045dc2:	2380      	movs	r3, #128	@ 0x80
10045dc4:	02db      	lsls	r3, r3, #11
10045dc6:	429a      	cmp	r2, r3
10045dc8:	d211      	bcs.n	10045dee <HAL_RADIO_SetGlobalReceiveTimeout+0x36>
  {
    BLUEGLOB->RCVTIMEOUT[0] = (ReceiveTimeout)       & 0x000000FF;
10045dca:	4b3a      	ldr	r3, [pc, #232]	@ (10045eb4 <HAL_RADIO_SetGlobalReceiveTimeout+0xfc>)
10045dcc:	687a      	ldr	r2, [r7, #4]
10045dce:	b2d2      	uxtb	r2, r2
10045dd0:	745a      	strb	r2, [r3, #17]
    BLUEGLOB->RCVTIMEOUT[1] = (ReceiveTimeout >> 8)  & 0x000000FF;
10045dd2:	687b      	ldr	r3, [r7, #4]
10045dd4:	0a1a      	lsrs	r2, r3, #8
10045dd6:	4b37      	ldr	r3, [pc, #220]	@ (10045eb4 <HAL_RADIO_SetGlobalReceiveTimeout+0xfc>)
10045dd8:	b2d2      	uxtb	r2, r2
10045dda:	749a      	strb	r2, [r3, #18]
    BLUEGLOB->RCVTIMEOUT[2] = (ReceiveTimeout >> 16) & 0x00000003;
10045ddc:	687b      	ldr	r3, [r7, #4]
10045dde:	0c1b      	lsrs	r3, r3, #16
10045de0:	b2db      	uxtb	r3, r3
10045de2:	4a34      	ldr	r2, [pc, #208]	@ (10045eb4 <HAL_RADIO_SetGlobalReceiveTimeout+0xfc>)
10045de4:	2103      	movs	r1, #3
10045de6:	400b      	ands	r3, r1
10045de8:	b2db      	uxtb	r3, r3
10045dea:	74d3      	strb	r3, [r2, #19]
  }
  else
  {
    /* error */
  }
}
10045dec:	e05e      	b.n	10045eac <HAL_RADIO_SetGlobalReceiveTimeout+0xf4>
  else if (ReceiveTimeout < 0x100000)
10045dee:	687a      	ldr	r2, [r7, #4]
10045df0:	2380      	movs	r3, #128	@ 0x80
10045df2:	035b      	lsls	r3, r3, #13
10045df4:	429a      	cmp	r2, r3
10045df6:	d21a      	bcs.n	10045e2e <HAL_RADIO_SetGlobalReceiveTimeout+0x76>
    BLUEGLOB->RCVTIMEOUT[0] = (ReceiveTimeout >> 2)  & 0x000000FF;
10045df8:	687b      	ldr	r3, [r7, #4]
10045dfa:	089a      	lsrs	r2, r3, #2
10045dfc:	4b2d      	ldr	r3, [pc, #180]	@ (10045eb4 <HAL_RADIO_SetGlobalReceiveTimeout+0xfc>)
10045dfe:	b2d2      	uxtb	r2, r2
10045e00:	745a      	strb	r2, [r3, #17]
    BLUEGLOB->RCVTIMEOUT[1] = (ReceiveTimeout >> 10) & 0x000000FF;
10045e02:	687b      	ldr	r3, [r7, #4]
10045e04:	0a9a      	lsrs	r2, r3, #10
10045e06:	4b2b      	ldr	r3, [pc, #172]	@ (10045eb4 <HAL_RADIO_SetGlobalReceiveTimeout+0xfc>)
10045e08:	b2d2      	uxtb	r2, r2
10045e0a:	749a      	strb	r2, [r3, #18]
    BLUEGLOB->RCVTIMEOUT[2] = (ReceiveTimeout >> 18) & 0x00000003;
10045e0c:	687b      	ldr	r3, [r7, #4]
10045e0e:	0c9b      	lsrs	r3, r3, #18
10045e10:	b2db      	uxtb	r3, r3
10045e12:	4a28      	ldr	r2, [pc, #160]	@ (10045eb4 <HAL_RADIO_SetGlobalReceiveTimeout+0xfc>)
10045e14:	2103      	movs	r1, #3
10045e16:	400b      	ands	r3, r1
10045e18:	b2db      	uxtb	r3, r3
10045e1a:	74d3      	strb	r3, [r2, #19]
    BLUEGLOB->RCVTIMEOUT[2] |= 0x04;
10045e1c:	4b25      	ldr	r3, [pc, #148]	@ (10045eb4 <HAL_RADIO_SetGlobalReceiveTimeout+0xfc>)
10045e1e:	7cdb      	ldrb	r3, [r3, #19]
10045e20:	b2db      	uxtb	r3, r3
10045e22:	4a24      	ldr	r2, [pc, #144]	@ (10045eb4 <HAL_RADIO_SetGlobalReceiveTimeout+0xfc>)
10045e24:	2104      	movs	r1, #4
10045e26:	430b      	orrs	r3, r1
10045e28:	b2db      	uxtb	r3, r3
10045e2a:	74d3      	strb	r3, [r2, #19]
}
10045e2c:	e03e      	b.n	10045eac <HAL_RADIO_SetGlobalReceiveTimeout+0xf4>
  else if (ReceiveTimeout < 0x400000)
10045e2e:	687a      	ldr	r2, [r7, #4]
10045e30:	2380      	movs	r3, #128	@ 0x80
10045e32:	03db      	lsls	r3, r3, #15
10045e34:	429a      	cmp	r2, r3
10045e36:	d21a      	bcs.n	10045e6e <HAL_RADIO_SetGlobalReceiveTimeout+0xb6>
    BLUEGLOB->RCVTIMEOUT[0] = (ReceiveTimeout >> 4)  & 0x000000FF;
10045e38:	687b      	ldr	r3, [r7, #4]
10045e3a:	091a      	lsrs	r2, r3, #4
10045e3c:	4b1d      	ldr	r3, [pc, #116]	@ (10045eb4 <HAL_RADIO_SetGlobalReceiveTimeout+0xfc>)
10045e3e:	b2d2      	uxtb	r2, r2
10045e40:	745a      	strb	r2, [r3, #17]
    BLUEGLOB->RCVTIMEOUT[1] = (ReceiveTimeout >> 12) & 0x000000FF;
10045e42:	687b      	ldr	r3, [r7, #4]
10045e44:	0b1a      	lsrs	r2, r3, #12
10045e46:	4b1b      	ldr	r3, [pc, #108]	@ (10045eb4 <HAL_RADIO_SetGlobalReceiveTimeout+0xfc>)
10045e48:	b2d2      	uxtb	r2, r2
10045e4a:	749a      	strb	r2, [r3, #18]
    BLUEGLOB->RCVTIMEOUT[2] = (ReceiveTimeout >> 20) & 0x00000003;
10045e4c:	687b      	ldr	r3, [r7, #4]
10045e4e:	0d1b      	lsrs	r3, r3, #20
10045e50:	b2db      	uxtb	r3, r3
10045e52:	4a18      	ldr	r2, [pc, #96]	@ (10045eb4 <HAL_RADIO_SetGlobalReceiveTimeout+0xfc>)
10045e54:	2103      	movs	r1, #3
10045e56:	400b      	ands	r3, r1
10045e58:	b2db      	uxtb	r3, r3
10045e5a:	74d3      	strb	r3, [r2, #19]
    BLUEGLOB->RCVTIMEOUT[2] |= 0x08;
10045e5c:	4b15      	ldr	r3, [pc, #84]	@ (10045eb4 <HAL_RADIO_SetGlobalReceiveTimeout+0xfc>)
10045e5e:	7cdb      	ldrb	r3, [r3, #19]
10045e60:	b2db      	uxtb	r3, r3
10045e62:	4a14      	ldr	r2, [pc, #80]	@ (10045eb4 <HAL_RADIO_SetGlobalReceiveTimeout+0xfc>)
10045e64:	2108      	movs	r1, #8
10045e66:	430b      	orrs	r3, r1
10045e68:	b2db      	uxtb	r3, r3
10045e6a:	74d3      	strb	r3, [r2, #19]
}
10045e6c:	e01e      	b.n	10045eac <HAL_RADIO_SetGlobalReceiveTimeout+0xf4>
  else if (ReceiveTimeout < 0x1000000)
10045e6e:	687a      	ldr	r2, [r7, #4]
10045e70:	2380      	movs	r3, #128	@ 0x80
10045e72:	045b      	lsls	r3, r3, #17
10045e74:	429a      	cmp	r2, r3
10045e76:	d219      	bcs.n	10045eac <HAL_RADIO_SetGlobalReceiveTimeout+0xf4>
    BLUEGLOB->RCVTIMEOUT[0] = (ReceiveTimeout >> 6)  & 0x000000FF ;
10045e78:	687b      	ldr	r3, [r7, #4]
10045e7a:	099a      	lsrs	r2, r3, #6
10045e7c:	4b0d      	ldr	r3, [pc, #52]	@ (10045eb4 <HAL_RADIO_SetGlobalReceiveTimeout+0xfc>)
10045e7e:	b2d2      	uxtb	r2, r2
10045e80:	745a      	strb	r2, [r3, #17]
    BLUEGLOB->RCVTIMEOUT[1] = (ReceiveTimeout >> 14) & 0x000000FF ;
10045e82:	687b      	ldr	r3, [r7, #4]
10045e84:	0b9a      	lsrs	r2, r3, #14
10045e86:	4b0b      	ldr	r3, [pc, #44]	@ (10045eb4 <HAL_RADIO_SetGlobalReceiveTimeout+0xfc>)
10045e88:	b2d2      	uxtb	r2, r2
10045e8a:	749a      	strb	r2, [r3, #18]
    BLUEGLOB->RCVTIMEOUT[2] = (ReceiveTimeout >> 22) & 0x00000003 ;
10045e8c:	687b      	ldr	r3, [r7, #4]
10045e8e:	0d9b      	lsrs	r3, r3, #22
10045e90:	b2db      	uxtb	r3, r3
10045e92:	4a08      	ldr	r2, [pc, #32]	@ (10045eb4 <HAL_RADIO_SetGlobalReceiveTimeout+0xfc>)
10045e94:	2103      	movs	r1, #3
10045e96:	400b      	ands	r3, r1
10045e98:	b2db      	uxtb	r3, r3
10045e9a:	74d3      	strb	r3, [r2, #19]
    BLUEGLOB->RCVTIMEOUT[2] |= 0x0C;
10045e9c:	4b05      	ldr	r3, [pc, #20]	@ (10045eb4 <HAL_RADIO_SetGlobalReceiveTimeout+0xfc>)
10045e9e:	7cdb      	ldrb	r3, [r3, #19]
10045ea0:	b2db      	uxtb	r3, r3
10045ea2:	4a04      	ldr	r2, [pc, #16]	@ (10045eb4 <HAL_RADIO_SetGlobalReceiveTimeout+0xfc>)
10045ea4:	210c      	movs	r1, #12
10045ea6:	430b      	orrs	r3, r1
10045ea8:	b2db      	uxtb	r3, r3
10045eaa:	74d3      	strb	r3, [r2, #19]
}
10045eac:	46c0      	nop			@ (mov r8, r8)
10045eae:	46bd      	mov	sp, r7
10045eb0:	b002      	add	sp, #8
10045eb2:	bd80      	pop	{r7, pc}
10045eb4:	200000c0 	.word	0x200000c0

10045eb8 <HAL_RADIO_SetReservedArea>:
  *         is executed via either the API mechanism, or the next mechanism.
  * @param  p: pointer to action packet.
  * @retval None
  */
void HAL_RADIO_SetReservedArea(ActionPacket *p)
{
10045eb8:	b580      	push	{r7, lr}
10045eba:	b084      	sub	sp, #16
10045ebc:	af00      	add	r7, sp, #0
10045ebe:	6078      	str	r0, [r7, #4]
  uint32_t relTimeout;
  uint32_t cnt;

  /*Init to 0 the TxRxPack*/
  for (cnt = 0; cnt < sizeof(p->trans_packet); cnt++)
10045ec0:	2300      	movs	r3, #0
10045ec2:	60fb      	str	r3, [r7, #12]
10045ec4:	e009      	b.n	10045eda <HAL_RADIO_SetReservedArea+0x22>
  {
    ((uint8_t *)(&(p->trans_packet)))[cnt] = 0;
10045ec6:	687b      	ldr	r3, [r7, #4]
10045ec8:	3318      	adds	r3, #24
10045eca:	001a      	movs	r2, r3
10045ecc:	68fb      	ldr	r3, [r7, #12]
10045ece:	18d3      	adds	r3, r2, r3
10045ed0:	2200      	movs	r2, #0
10045ed2:	701a      	strb	r2, [r3, #0]
  for (cnt = 0; cnt < sizeof(p->trans_packet); cnt++)
10045ed4:	68fb      	ldr	r3, [r7, #12]
10045ed6:	3301      	adds	r3, #1
10045ed8:	60fb      	str	r3, [r7, #12]
10045eda:	68fb      	ldr	r3, [r7, #12]
10045edc:	2b13      	cmp	r3, #19
10045ede:	d9f2      	bls.n	10045ec6 <HAL_RADIO_SetReservedArea+0xe>
  }

  /*Set the TxRxPack for the next transaction. The list cannot be empty.
  At least,it can be composed by one only packet that points to itself*/
  p->trans_packet.NEXTPTR = BLUE_STRUCT_PTR_CAST(&(p->trans_packet));
10045ee0:	687b      	ldr	r3, [r7, #4]
10045ee2:	3318      	adds	r3, #24
10045ee4:	001a      	movs	r2, r3
10045ee6:	687b      	ldr	r3, [r7, #4]
10045ee8:	619a      	str	r2, [r3, #24]

  /* Set the buffer that contains the values to send or that stores
  the data received */
  p->trans_packet.DATAPTR = BLUE_DATA_PTR_CAST(p->data);
10045eea:	687b      	ldr	r3, [r7, #4]
10045eec:	689b      	ldr	r3, [r3, #8]
10045eee:	001a      	movs	r2, r3
10045ef0:	687b      	ldr	r3, [r7, #4]
10045ef2:	621a      	str	r2, [r3, #32]

  /* Compensate the radio setup time from the back2back time */
  relTimeout = globalParameters.back2backTime - 70;
10045ef4:	4b46      	ldr	r3, [pc, #280]	@ (10046010 <HAL_RADIO_SetReservedArea+0x158>)
10045ef6:	681b      	ldr	r3, [r3, #0]
10045ef8:	3b46      	subs	r3, #70	@ 0x46
10045efa:	60bb      	str	r3, [r7, #8]

  /*Check if there is some action to perform next*/
//  if (p->next_false || p->next_true){ /* Host timer workaround */
  /* Set the Timeout for the Timer2 */
  p->trans_packet.TIMER2[0] = relTimeout & 0xFF;
10045efc:	68bb      	ldr	r3, [r7, #8]
10045efe:	b2d9      	uxtb	r1, r3
10045f00:	687b      	ldr	r3, [r7, #4]
10045f02:	2224      	movs	r2, #36	@ 0x24
10045f04:	5499      	strb	r1, [r3, r2]
  p->trans_packet.TIMER2[1] = (relTimeout >> 8) & 0xFF;
10045f06:	68bb      	ldr	r3, [r7, #8]
10045f08:	0a1b      	lsrs	r3, r3, #8
10045f0a:	b2d9      	uxtb	r1, r3
10045f0c:	687b      	ldr	r3, [r7, #4]
10045f0e:	2225      	movs	r2, #37	@ 0x25
10045f10:	5499      	strb	r1, [r3, r2]
  p->trans_packet.BYTE14 = (relTimeout >> 16) & TXRXPACK_BYTE14_TIMER2_19_16_Msk;
10045f12:	68bb      	ldr	r3, [r7, #8]
10045f14:	0c1b      	lsrs	r3, r3, #16
10045f16:	b2db      	uxtb	r3, r3
10045f18:	220f      	movs	r2, #15
10045f1a:	4013      	ands	r3, r2
10045f1c:	b2d9      	uxtb	r1, r3
10045f1e:	687b      	ldr	r3, [r7, #4]
10045f20:	2226      	movs	r2, #38	@ 0x26
10045f22:	5499      	strb	r1, [r3, r2]
  /*Enable relative timer*/
  p->trans_packet.BYTE14 |= TXRXPACK_BYTE14_TIMER2EN_Msk;
10045f24:	687b      	ldr	r3, [r7, #4]
10045f26:	2226      	movs	r2, #38	@ 0x26
10045f28:	5c9b      	ldrb	r3, [r3, r2]
10045f2a:	b2db      	uxtb	r3, r3
10045f2c:	2210      	movs	r2, #16
10045f2e:	4313      	orrs	r3, r2
10045f30:	b2d9      	uxtb	r1, r3
10045f32:	687b      	ldr	r3, [r7, #4]
10045f34:	2226      	movs	r2, #38	@ 0x26
10045f36:	5499      	strb	r1, [r3, r2]
//  }

  /* TrigDone or TrigReceive */
  if ((p->ActionTag & TIMESTAMP_POSITION) == 0)
10045f38:	687b      	ldr	r3, [r7, #4]
10045f3a:	785b      	ldrb	r3, [r3, #1]
10045f3c:	001a      	movs	r2, r3
10045f3e:	2340      	movs	r3, #64	@ 0x40
10045f40:	4013      	ands	r3, r2
10045f42:	d10b      	bne.n	10045f5c <HAL_RADIO_SetReservedArea+0xa4>
  {
    p->trans_packet.BYTE14 |= TIMESTAMP_POSITION_LASTBIT;
10045f44:	687b      	ldr	r3, [r7, #4]
10045f46:	2226      	movs	r2, #38	@ 0x26
10045f48:	5c9b      	ldrb	r3, [r3, r2]
10045f4a:	b2db      	uxtb	r3, r3
10045f4c:	2280      	movs	r2, #128	@ 0x80
10045f4e:	4252      	negs	r2, r2
10045f50:	4313      	orrs	r3, r2
10045f52:	b2d9      	uxtb	r1, r3
10045f54:	687b      	ldr	r3, [r7, #4]
10045f56:	2226      	movs	r2, #38	@ 0x26
10045f58:	5499      	strb	r1, [r3, r2]
10045f5a:	e009      	b.n	10045f70 <HAL_RADIO_SetReservedArea+0xb8>
  }
  else
  {
    p->trans_packet.BYTE14 |= TIMESTAMP_POSITION_ACCESSADDRESS;
10045f5c:	687b      	ldr	r3, [r7, #4]
10045f5e:	2226      	movs	r2, #38	@ 0x26
10045f60:	5c9b      	ldrb	r3, [r3, r2]
10045f62:	b2db      	uxtb	r3, r3
10045f64:	2240      	movs	r2, #64	@ 0x40
10045f66:	4313      	orrs	r3, r2
10045f68:	b2d9      	uxtb	r1, r3
10045f6a:	687b      	ldr	r3, [r7, #4]
10045f6c:	2226      	movs	r2, #38	@ 0x26
10045f6e:	5499      	strb	r1, [r3, r2]
  }

  p->trans_packet.BYTE4 |= TXRXPACK_BYTE4_KEEPSEMAREQ_Msk | \
10045f70:	687b      	ldr	r3, [r7, #4]
10045f72:	7f1b      	ldrb	r3, [r3, #28]
10045f74:	b2db      	uxtb	r3, r3
10045f76:	b25a      	sxtb	r2, r3
                           (p->ActionTag & INC_CHAN) | \
10045f78:	687b      	ldr	r3, [r7, #4]
10045f7a:	785b      	ldrb	r3, [r3, #1]
10045f7c:	b25b      	sxtb	r3, r3
10045f7e:	217f      	movs	r1, #127	@ 0x7f
10045f80:	438b      	bics	r3, r1
10045f82:	b25b      	sxtb	r3, r3
  p->trans_packet.BYTE4 |= TXRXPACK_BYTE4_KEEPSEMAREQ_Msk | \
10045f84:	2104      	movs	r1, #4
10045f86:	430b      	orrs	r3, r1
10045f88:	b259      	sxtb	r1, r3
                           (p->ActionTag & PLL_TRIG);
10045f8a:	687b      	ldr	r3, [r7, #4]
10045f8c:	785b      	ldrb	r3, [r3, #1]
10045f8e:	b25b      	sxtb	r3, r3
10045f90:	2001      	movs	r0, #1
10045f92:	4003      	ands	r3, r0
10045f94:	b25b      	sxtb	r3, r3
                           (p->ActionTag & INC_CHAN) | \
10045f96:	430b      	orrs	r3, r1
10045f98:	b25b      	sxtb	r3, r3
  p->trans_packet.BYTE4 |= TXRXPACK_BYTE4_KEEPSEMAREQ_Msk | \
10045f9a:	4313      	orrs	r3, r2
10045f9c:	b25b      	sxtb	r3, r3
10045f9e:	b2da      	uxtb	r2, r3
10045fa0:	687b      	ldr	r3, [r7, #4]
10045fa2:	771a      	strb	r2, [r3, #28]

  p->trans_packet.BYTE5 |= (p->ActionTag & WHITENING_DISABLE) | \
10045fa4:	687b      	ldr	r3, [r7, #4]
10045fa6:	7f5b      	ldrb	r3, [r3, #29]
10045fa8:	b2da      	uxtb	r2, r3
10045faa:	687b      	ldr	r3, [r7, #4]
10045fac:	785b      	ldrb	r3, [r3, #1]
10045fae:	2110      	movs	r1, #16
10045fb0:	400b      	ands	r3, r1
10045fb2:	b2db      	uxtb	r3, r3
10045fb4:	4313      	orrs	r3, r2
10045fb6:	b2db      	uxtb	r3, r3
10045fb8:	2206      	movs	r2, #6
10045fba:	4313      	orrs	r3, r2
10045fbc:	b2da      	uxtb	r2, r3
10045fbe:	687b      	ldr	r3, [r7, #4]
10045fc0:	775a      	strb	r2, [r3, #29]
                           TXRXPACK_BYTE5_TXDATAREADY_Msk | \
                           TXRXPACK_BYTE5_ALLTABLEREADY_Msk;

  /* Enable all interrupts */
  p->trans_packet.BYTE15 = TXRXPACK_BYTE15_INT_EN_Msk;
10045fc2:	687b      	ldr	r3, [r7, #4]
10045fc4:	2227      	movs	r2, #39	@ 0x27
10045fc6:	21ff      	movs	r1, #255	@ 0xff
10045fc8:	5499      	strb	r1, [r3, r2]

  /* By Default the next action is considered as next_true */
  if ((p->next_true->ActionTag & TXRX) != 0)
10045fca:	687b      	ldr	r3, [r7, #4]
10045fcc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
10045fce:	785b      	ldrb	r3, [r3, #1]
10045fd0:	001a      	movs	r2, r3
10045fd2:	2302      	movs	r3, #2
10045fd4:	4013      	ands	r3, r2
10045fd6:	d007      	beq.n	10045fe8 <HAL_RADIO_SetReservedArea+0x130>
  {
    /* Set the type of the next activity */
    p->trans_packet.BYTE5 |= TXRXPACK_BYTE5_NEXTTXMODE_Msk;
10045fd8:	687b      	ldr	r3, [r7, #4]
10045fda:	7f5b      	ldrb	r3, [r3, #29]
10045fdc:	b2db      	uxtb	r3, r3
10045fde:	2201      	movs	r2, #1
10045fe0:	4313      	orrs	r3, r2
10045fe2:	b2da      	uxtb	r2, r3
10045fe4:	687b      	ldr	r3, [r7, #4]
10045fe6:	775a      	strb	r2, [r3, #29]
  }

  p->trans_config = 0; // Rx
10045fe8:	687b      	ldr	r3, [r7, #4]
10045fea:	223c      	movs	r2, #60	@ 0x3c
10045fec:	2100      	movs	r1, #0
10045fee:	5499      	strb	r1, [r3, r2]
  if ((p->ActionTag & TXRX) != 0)
10045ff0:	687b      	ldr	r3, [r7, #4]
10045ff2:	785b      	ldrb	r3, [r3, #1]
10045ff4:	001a      	movs	r2, r3
10045ff6:	2302      	movs	r3, #2
10045ff8:	4013      	ands	r3, r2
10045ffa:	d004      	beq.n	10046006 <HAL_RADIO_SetReservedArea+0x14e>
  {
    p->trans_config = STATEMACH_BYTE0_TXMODE_Msk; // Tx
10045ffc:	687b      	ldr	r3, [r7, #4]
10045ffe:	223c      	movs	r2, #60	@ 0x3c
10046000:	2180      	movs	r1, #128	@ 0x80
10046002:	5499      	strb	r1, [r3, r2]
  }
  return ;
10046004:	46c0      	nop			@ (mov r8, r8)
10046006:	46c0      	nop			@ (mov r8, r8)
}
10046008:	46bd      	mov	sp, r7
1004600a:	b004      	add	sp, #16
1004600c:	bd80      	pop	{r7, pc}
1004600e:	46c0      	nop			@ (mov r8, r8)
10046010:	20000848 	.word	0x20000848

10046014 <HAL_RADIO_MakeActionPacketPending>:
  * @retval uint8_t with following values:
  *          - 0x00 : Success.
  *          - 0xC4 : Radio is busy, action packet has not been executed.
  */
uint8_t HAL_RADIO_MakeActionPacketPending(ActionPacket *p)
{
10046014:	b5b0      	push	{r4, r5, r7, lr}
10046016:	b086      	sub	sp, #24
10046018:	af00      	add	r7, sp, #0
1004601a:	6078      	str	r0, [r7, #4]
  uint8_t returnValue = SUCCESS_0;
1004601c:	2517      	movs	r5, #23
1004601e:	197b      	adds	r3, r7, r5
10046020:	2200      	movs	r2, #0
10046022:	701a      	strb	r2, [r3, #0]
  uint32_t time;
  uint32_t dummyTime;
  if (HAL_RADIO_GetStatus(&dummyTime) == BLUE_IDLE_0)
10046024:	2308      	movs	r3, #8
10046026:	18fb      	adds	r3, r7, r3
10046028:	0018      	movs	r0, r3
1004602a:	f000 f8b9 	bl	100461a0 <HAL_RADIO_GetStatus>
1004602e:	1e03      	subs	r3, r0, #0
10046030:	d000      	beq.n	10046034 <HAL_RADIO_MakeActionPacketPending+0x20>
10046032:	e0a3      	b.n	1004617c <HAL_RADIO_MakeActionPacketPending+0x168>
  {
    uint8_t  statemachineNo;
    BlueTransStruct *p1 ;

    /* timer1/2 off */
    LL_RADIO_TIMER_DisableTimer1(BLUE);
10046034:	23c0      	movs	r3, #192	@ 0xc0
10046036:	05db      	lsls	r3, r3, #23
10046038:	0018      	movs	r0, r3
1004603a:	f7ff f8af 	bl	1004519c <LL_RADIO_TIMER_DisableTimer1>
    LL_RADIO_TIMER_DisableTimer2(BLUE);
1004603e:	23c0      	movs	r3, #192	@ 0xc0
10046040:	05db      	lsls	r3, r3, #23
10046042:	0018      	movs	r0, r3
10046044:	f7ff f8b9 	bl	100451ba <LL_RADIO_TIMER_DisableTimer2>

    statemachineNo = 0x7F & p->StateMachineNo;
10046048:	687b      	ldr	r3, [r7, #4]
1004604a:	781a      	ldrb	r2, [r3, #0]
1004604c:	2016      	movs	r0, #22
1004604e:	183b      	adds	r3, r7, r0
10046050:	217f      	movs	r1, #127	@ 0x7f
10046052:	400a      	ands	r2, r1
10046054:	701a      	strb	r2, [r3, #0]

    BLUEGLOB->BYTE4 = (p->StateMachineNo | GLOBAL_BYTE4_ACTIVE_Msk);
10046056:	687b      	ldr	r3, [r7, #4]
10046058:	781b      	ldrb	r3, [r3, #0]
1004605a:	494e      	ldr	r1, [pc, #312]	@ (10046194 <HAL_RADIO_MakeActionPacketPending+0x180>)
1004605c:	2280      	movs	r2, #128	@ 0x80
1004605e:	4252      	negs	r2, r2
10046060:	4313      	orrs	r3, r2
10046062:	b2db      	uxtb	r3, r3
10046064:	710b      	strb	r3, [r1, #4]

    p1 = &p->trans_packet;
10046066:	687b      	ldr	r3, [r7, #4]
10046068:	3318      	adds	r3, #24
1004606a:	613b      	str	r3, [r7, #16]
    (bluedata + statemachineNo)->RCVPOINT = BLUE_STRUCT_PTR_CAST(p1);
1004606c:	183b      	adds	r3, r7, r0
1004606e:	781a      	ldrb	r2, [r3, #0]
10046070:	0013      	movs	r3, r2
10046072:	009b      	lsls	r3, r3, #2
10046074:	189b      	adds	r3, r3, r2
10046076:	011b      	lsls	r3, r3, #4
10046078:	4a47      	ldr	r2, [pc, #284]	@ (10046198 <HAL_RADIO_MakeActionPacketPending+0x184>)
1004607a:	4694      	mov	ip, r2
1004607c:	4463      	add	r3, ip
1004607e:	693a      	ldr	r2, [r7, #16]
10046080:	609a      	str	r2, [r3, #8]
    (bluedata + statemachineNo)->TXPOINT = BLUE_STRUCT_PTR_CAST(p1);
10046082:	183b      	adds	r3, r7, r0
10046084:	781a      	ldrb	r2, [r3, #0]
10046086:	0013      	movs	r3, r2
10046088:	009b      	lsls	r3, r3, #2
1004608a:	189b      	adds	r3, r3, r2
1004608c:	011b      	lsls	r3, r3, #4
1004608e:	4a42      	ldr	r2, [pc, #264]	@ (10046198 <HAL_RADIO_MakeActionPacketPending+0x184>)
10046090:	4694      	mov	ip, r2
10046092:	4463      	add	r3, ip
10046094:	693a      	ldr	r2, [r7, #16]
10046096:	605a      	str	r2, [r3, #4]
    (bluedata + statemachineNo)->MAXRECEIVEDLENGTH = p->MaxReceiveLength;
10046098:	183b      	adds	r3, r7, r0
1004609a:	781a      	ldrb	r2, [r3, #0]
1004609c:	0013      	movs	r3, r2
1004609e:	009b      	lsls	r3, r3, #2
100460a0:	189b      	adds	r3, r3, r2
100460a2:	011b      	lsls	r3, r3, #4
100460a4:	4a3c      	ldr	r2, [pc, #240]	@ (10046198 <HAL_RADIO_MakeActionPacketPending+0x184>)
100460a6:	4694      	mov	ip, r2
100460a8:	4463      	add	r3, ip
100460aa:	687a      	ldr	r2, [r7, #4]
100460ac:	7891      	ldrb	r1, [r2, #2]
100460ae:	222b      	movs	r2, #43	@ 0x2b
100460b0:	5499      	strb	r1, [r3, r2]

#if defined (STM32WB05) || defined(STM32WB09 )
    (bluedata + statemachineNo)->BYTE3 |= 1 << 3;
#endif

    globalParameters.current_action_packet = p;
100460b2:	4b3a      	ldr	r3, [pc, #232]	@ (1004619c <HAL_RADIO_MakeActionPacketPending+0x188>)
100460b4:	687a      	ldr	r2, [r7, #4]
100460b6:	609a      	str	r2, [r3, #8]

    MODIFY_REG((bluedata + statemachineNo)->BYTE0, STATEMACH_BYTE0_TXMODE_Msk,
100460b8:	183b      	adds	r3, r7, r0
100460ba:	781a      	ldrb	r2, [r3, #0]
100460bc:	0013      	movs	r3, r2
100460be:	009b      	lsls	r3, r3, #2
100460c0:	189b      	adds	r3, r3, r2
100460c2:	011b      	lsls	r3, r3, #4
100460c4:	4a34      	ldr	r2, [pc, #208]	@ (10046198 <HAL_RADIO_MakeActionPacketPending+0x184>)
100460c6:	4694      	mov	ip, r2
100460c8:	4463      	add	r3, ip
100460ca:	781b      	ldrb	r3, [r3, #0]
100460cc:	b2db      	uxtb	r3, r3
100460ce:	b25b      	sxtb	r3, r3
100460d0:	227f      	movs	r2, #127	@ 0x7f
100460d2:	4013      	ands	r3, r2
100460d4:	b25a      	sxtb	r2, r3
100460d6:	687b      	ldr	r3, [r7, #4]
100460d8:	213c      	movs	r1, #60	@ 0x3c
100460da:	5c5b      	ldrb	r3, [r3, r1]
100460dc:	b25b      	sxtb	r3, r3
100460de:	4313      	orrs	r3, r2
100460e0:	b259      	sxtb	r1, r3
100460e2:	183b      	adds	r3, r7, r0
100460e4:	781a      	ldrb	r2, [r3, #0]
100460e6:	0013      	movs	r3, r2
100460e8:	009b      	lsls	r3, r3, #2
100460ea:	189b      	adds	r3, r3, r2
100460ec:	011b      	lsls	r3, r3, #4
100460ee:	4a2a      	ldr	r2, [pc, #168]	@ (10046198 <HAL_RADIO_MakeActionPacketPending+0x184>)
100460f0:	4694      	mov	ip, r2
100460f2:	4463      	add	r3, ip
100460f4:	b2ca      	uxtb	r2, r1
100460f6:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
100460f8:	b672      	cpsid	i
}
100460fa:	46c0      	nop			@ (mov r8, r8)
               p->trans_config); /* Transmission or reception */

    /* program timer at next->wakeuptime */
    MASK_INTERRUPTS();
    if ((p->ActionTag & RELATIVE) != 0)
100460fc:	687b      	ldr	r3, [r7, #4]
100460fe:	785b      	ldrb	r3, [r3, #1]
10046100:	001a      	movs	r2, r3
10046102:	2320      	movs	r3, #32
10046104:	4013      	ands	r3, r2
10046106:	d021      	beq.n	1004614c <HAL_RADIO_MakeActionPacketPending+0x138>
    {
      time = HAL_RADIO_TIMER_GetCurrentSysTime() + HAL_RADIO_TIMER_UsToSystime(p->WakeupTime);
10046108:	f000 ff3c 	bl	10046f84 <HAL_RADIO_TIMER_GetCurrentSysTime>
1004610c:	0002      	movs	r2, r0
1004610e:	000b      	movs	r3, r1
10046110:	0014      	movs	r4, r2
10046112:	687b      	ldr	r3, [r7, #4]
10046114:	685b      	ldr	r3, [r3, #4]
10046116:	0018      	movs	r0, r3
10046118:	f000 ff10 	bl	10046f3c <HAL_RADIO_TIMER_UsToSystime>
1004611c:	0003      	movs	r3, r0
1004611e:	18e3      	adds	r3, r4, r3
10046120:	60fb      	str	r3, [r7, #12]
      returnValue = HAL_RADIO_TIMER_SetRadioTimerValue(time, (p->trans_config == STATEMACH_BYTE0_TXMODE_Msk), (p->ActionTag & PLL_TRIG));
10046122:	687b      	ldr	r3, [r7, #4]
10046124:	223c      	movs	r2, #60	@ 0x3c
10046126:	5c9b      	ldrb	r3, [r3, r2]
10046128:	3b80      	subs	r3, #128	@ 0x80
1004612a:	425a      	negs	r2, r3
1004612c:	4153      	adcs	r3, r2
1004612e:	b2db      	uxtb	r3, r3
10046130:	0019      	movs	r1, r3
10046132:	687b      	ldr	r3, [r7, #4]
10046134:	785b      	ldrb	r3, [r3, #1]
10046136:	2201      	movs	r2, #1
10046138:	4013      	ands	r3, r2
1004613a:	b2da      	uxtb	r2, r3
1004613c:	68fb      	ldr	r3, [r7, #12]
1004613e:	0018      	movs	r0, r3
10046140:	f000 fe08 	bl	10046d54 <HAL_RADIO_TIMER_SetRadioTimerValue>
10046144:	0002      	movs	r2, r0
10046146:	197b      	adds	r3, r7, r5
10046148:	701a      	strb	r2, [r3, #0]
1004614a:	e015      	b.n	10046178 <HAL_RADIO_MakeActionPacketPending+0x164>
    }
    else /*absolute time*/
    {
      returnValue = HAL_RADIO_TIMER_SetRadioTimerValue(p->WakeupTime, (p->trans_config == STATEMACH_BYTE0_TXMODE_Msk), (p->ActionTag & PLL_TRIG));
1004614c:	687b      	ldr	r3, [r7, #4]
1004614e:	6858      	ldr	r0, [r3, #4]
10046150:	687b      	ldr	r3, [r7, #4]
10046152:	223c      	movs	r2, #60	@ 0x3c
10046154:	5c9b      	ldrb	r3, [r3, r2]
10046156:	3b80      	subs	r3, #128	@ 0x80
10046158:	425a      	negs	r2, r3
1004615a:	4153      	adcs	r3, r2
1004615c:	b2db      	uxtb	r3, r3
1004615e:	0019      	movs	r1, r3
10046160:	687b      	ldr	r3, [r7, #4]
10046162:	785b      	ldrb	r3, [r3, #1]
10046164:	2201      	movs	r2, #1
10046166:	4013      	ands	r3, r2
10046168:	b2db      	uxtb	r3, r3
1004616a:	001a      	movs	r2, r3
1004616c:	f000 fdf2 	bl	10046d54 <HAL_RADIO_TIMER_SetRadioTimerValue>
10046170:	0002      	movs	r2, r0
10046172:	2317      	movs	r3, #23
10046174:	18fb      	adds	r3, r7, r3
10046176:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
10046178:	b662      	cpsie	i
}
1004617a:	e003      	b.n	10046184 <HAL_RADIO_MakeActionPacketPending+0x170>

    UNMASK_INTERRUPTS();
  }
  else
  {
    returnValue = RADIO_BUSY_C4;
1004617c:	2317      	movs	r3, #23
1004617e:	18fb      	adds	r3, r7, r3
10046180:	22c4      	movs	r2, #196	@ 0xc4
10046182:	701a      	strb	r2, [r3, #0]
  }
  return returnValue;
10046184:	2317      	movs	r3, #23
10046186:	18fb      	adds	r3, r7, r3
10046188:	781b      	ldrb	r3, [r3, #0]
}
1004618a:	0018      	movs	r0, r3
1004618c:	46bd      	mov	sp, r7
1004618e:	b006      	add	sp, #24
10046190:	bdb0      	pop	{r4, r5, r7, pc}
10046192:	46c0      	nop			@ (mov r8, r8)
10046194:	200000c0 	.word	0x200000c0
10046198:	200000dc 	.word	0x200000dc
1004619c:	20000848 	.word	0x20000848

100461a0 <HAL_RADIO_GetStatus>:
  * @param  time: where to store the last value programmed.
  * @retval 0 if the radio controller is IDLE or no timer has been programmed
  * @retval 1 if the radio is ACTIVE and a radio timer has been programmed
  */
uint8_t HAL_RADIO_GetStatus(uint32_t *time)
{
100461a0:	b590      	push	{r4, r7, lr}
100461a2:	b085      	sub	sp, #20
100461a4:	af00      	add	r7, sp, #0
100461a6:	6078      	str	r0, [r7, #4]
  uint8_t retValue = BLUE_IDLE_0;
100461a8:	210f      	movs	r1, #15
100461aa:	187b      	adds	r3, r7, r1
100461ac:	2200      	movs	r2, #0
100461ae:	701a      	strb	r2, [r3, #0]
  if ((BLUEGLOB->BYTE4 & GLOBAL_BYTE4_ACTIVE_Msk) != 0)
100461b0:	4b09      	ldr	r3, [pc, #36]	@ (100461d8 <HAL_RADIO_GetStatus+0x38>)
100461b2:	791b      	ldrb	r3, [r3, #4]
100461b4:	b2db      	uxtb	r3, r3
100461b6:	b25b      	sxtb	r3, r3
100461b8:	2b00      	cmp	r3, #0
100461ba:	da06      	bge.n	100461ca <HAL_RADIO_GetStatus+0x2a>
  {
    retValue = HAL_RADIO_TIMER_GetRadioTimerValue(time);
100461bc:	187c      	adds	r4, r7, r1
100461be:	687b      	ldr	r3, [r7, #4]
100461c0:	0018      	movs	r0, r3
100461c2:	f000 fe8d 	bl	10046ee0 <HAL_RADIO_TIMER_GetRadioTimerValue>
100461c6:	0003      	movs	r3, r0
100461c8:	7023      	strb	r3, [r4, #0]
  }
  return retValue;
100461ca:	230f      	movs	r3, #15
100461cc:	18fb      	adds	r3, r7, r3
100461ce:	781b      	ldrb	r3, [r3, #0]
}
100461d0:	0018      	movs	r0, r3
100461d2:	46bd      	mov	sp, r7
100461d4:	b005      	add	sp, #20
100461d6:	bd90      	pop	{r4, r7, pc}
100461d8:	200000c0 	.word	0x200000c0

100461dc <HAL_RADIO_SetTxPower>:
  * @param  PowerLevel: power level which should set to this value.
  *         See the documentation inside the datasheet.
  * @retval None
  */
void HAL_RADIO_SetTxPower(uint8_t PowerLevel)
{
100461dc:	b580      	push	{r7, lr}
100461de:	b084      	sub	sp, #16
100461e0:	af00      	add	r7, sp, #0
100461e2:	0002      	movs	r2, r0
100461e4:	1dfb      	adds	r3, r7, #7
100461e6:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_POWERLEVEL_VALID(PowerLevel));

  for (uint8_t n = 0; n < STATEMACHINE_COUNT ; n++)
100461e8:	230f      	movs	r3, #15
100461ea:	18fb      	adds	r3, r7, r3
100461ec:	2200      	movs	r2, #0
100461ee:	701a      	strb	r2, [r3, #0]
100461f0:	e012      	b.n	10046218 <HAL_RADIO_SetTxPower+0x3c>
  {
    (bluedata + n)->PAPOWER = PowerLevel;
100461f2:	200f      	movs	r0, #15
100461f4:	183b      	adds	r3, r7, r0
100461f6:	781a      	ldrb	r2, [r3, #0]
100461f8:	0013      	movs	r3, r2
100461fa:	009b      	lsls	r3, r3, #2
100461fc:	189b      	adds	r3, r3, r2
100461fe:	011b      	lsls	r3, r3, #4
10046200:	4a0a      	ldr	r2, [pc, #40]	@ (1004622c <HAL_RADIO_SetTxPower+0x50>)
10046202:	4694      	mov	ip, r2
10046204:	4463      	add	r3, ip
10046206:	1dfa      	adds	r2, r7, #7
10046208:	212c      	movs	r1, #44	@ 0x2c
1004620a:	7812      	ldrb	r2, [r2, #0]
1004620c:	545a      	strb	r2, [r3, r1]
  for (uint8_t n = 0; n < STATEMACHINE_COUNT ; n++)
1004620e:	183b      	adds	r3, r7, r0
10046210:	781a      	ldrb	r2, [r3, #0]
10046212:	183b      	adds	r3, r7, r0
10046214:	3201      	adds	r2, #1
10046216:	701a      	strb	r2, [r3, #0]
10046218:	230f      	movs	r3, #15
1004621a:	18fb      	adds	r3, r7, r3
1004621c:	781b      	ldrb	r3, [r3, #0]
1004621e:	2b01      	cmp	r3, #1
10046220:	d9e7      	bls.n	100461f2 <HAL_RADIO_SetTxPower+0x16>
  }
  return;
10046222:	46c0      	nop			@ (mov r8, r8)
}
10046224:	46bd      	mov	sp, r7
10046226:	b004      	add	sp, #16
10046228:	bd80      	pop	{r7, pc}
1004622a:	46c0      	nop			@ (mov r8, r8)
1004622c:	200000dc 	.word	0x200000dc

10046230 <HAL_RADIO_SetNetworkID>:
  * @retval uint8_t: return value
  *           - 0x00 : Success.
  *           - 0xC0 : Invalid parameter.
  */
uint8_t HAL_RADIO_SetNetworkID(uint32_t ID)
{
10046230:	b580      	push	{r7, lr}
10046232:	b082      	sub	sp, #8
10046234:	af00      	add	r7, sp, #0
10046236:	6078      	str	r0, [r7, #4]
  networkID = ID;
10046238:	4b03      	ldr	r3, [pc, #12]	@ (10046248 <HAL_RADIO_SetNetworkID+0x18>)
1004623a:	687a      	ldr	r2, [r7, #4]
1004623c:	601a      	str	r2, [r3, #0]
  return 0;
1004623e:	2300      	movs	r3, #0
}
10046240:	0018      	movs	r0, r3
10046242:	46bd      	mov	sp, r7
10046244:	b002      	add	sp, #8
10046246:	bd80      	pop	{r7, pc}
10046248:	20000b5c 	.word	0x20000b5c

1004624c <HAL_RADIO_SendPacketWithAck>:
  */
uint8_t HAL_RADIO_SendPacketWithAck(uint8_t channel, uint32_t wakeup_time, uint8_t *txBuffer, uint8_t *rxBuffer,
                                    uint32_t receive_timeout,
                                    uint8_t receive_length,
                                    uint8_t (*Callback)(ActionPacket *, ActionPacket *))
{
1004624c:	b5f0      	push	{r4, r5, r6, r7, lr}
1004624e:	b08b      	sub	sp, #44	@ 0x2c
10046250:	af00      	add	r7, sp, #0
10046252:	60b9      	str	r1, [r7, #8]
10046254:	607a      	str	r2, [r7, #4]
10046256:	603b      	str	r3, [r7, #0]
10046258:	250f      	movs	r5, #15
1004625a:	197b      	adds	r3, r7, r5
1004625c:	1c02      	adds	r2, r0, #0
1004625e:	701a      	strb	r2, [r3, #0]
  uint8_t returnValue = SUCCESS_0;
10046260:	2627      	movs	r6, #39	@ 0x27
10046262:	19bb      	adds	r3, r7, r6
10046264:	2200      	movs	r2, #0
10046266:	701a      	strb	r2, [r3, #0]
  uint32_t dummy;
  uint32_t time;

  time = (uint32_t)HAL_RADIO_TIMER_GetCurrentSysTime() + HAL_RADIO_TIMER_UsToSystime(wakeup_time);
10046268:	f000 fe8c 	bl	10046f84 <HAL_RADIO_TIMER_GetCurrentSysTime>
1004626c:	0002      	movs	r2, r0
1004626e:	000b      	movs	r3, r1
10046270:	0014      	movs	r4, r2
10046272:	68bb      	ldr	r3, [r7, #8]
10046274:	0018      	movs	r0, r3
10046276:	f000 fe61 	bl	10046f3c <HAL_RADIO_TIMER_UsToSystime>
1004627a:	0003      	movs	r3, r0
1004627c:	18e3      	adds	r3, r4, r3
1004627e:	623b      	str	r3, [r7, #32]

  if (channel > 39)
10046280:	197b      	adds	r3, r7, r5
10046282:	781b      	ldrb	r3, [r3, #0]
10046284:	2b27      	cmp	r3, #39	@ 0x27
10046286:	d902      	bls.n	1004628e <HAL_RADIO_SendPacketWithAck+0x42>
  {
    returnValue = INVALID_PARAMETER_C0;
10046288:	19bb      	adds	r3, r7, r6
1004628a:	22c0      	movs	r2, #192	@ 0xc0
1004628c:	701a      	strb	r2, [r3, #0]
  }

  if (HAL_RADIO_GetStatus(&dummy) != BLUE_IDLE_0)
1004628e:	231c      	movs	r3, #28
10046290:	18fb      	adds	r3, r7, r3
10046292:	0018      	movs	r0, r3
10046294:	f7ff ff84 	bl	100461a0 <HAL_RADIO_GetStatus>
10046298:	1e03      	subs	r3, r0, #0
1004629a:	d003      	beq.n	100462a4 <HAL_RADIO_SendPacketWithAck+0x58>
  {
    returnValue = RADIO_BUSY_C4;
1004629c:	2327      	movs	r3, #39	@ 0x27
1004629e:	18fb      	adds	r3, r7, r3
100462a0:	22c4      	movs	r2, #196	@ 0xc4
100462a2:	701a      	strb	r2, [r3, #0]
  }

  uint8_t map[5] = {0xFFU, 0xFFU, 0xFFU, 0xFFU, 0xFFU};
100462a4:	2014      	movs	r0, #20
100462a6:	183b      	adds	r3, r7, r0
100462a8:	4a37      	ldr	r2, [pc, #220]	@ (10046388 <HAL_RADIO_SendPacketWithAck+0x13c>)
100462aa:	6811      	ldr	r1, [r2, #0]
100462ac:	6019      	str	r1, [r3, #0]
100462ae:	7912      	ldrb	r2, [r2, #4]
100462b0:	711a      	strb	r2, [r3, #4]
  HAL_RADIO_SetChannelMap(0, &map[0]);
100462b2:	183b      	adds	r3, r7, r0
100462b4:	0019      	movs	r1, r3
100462b6:	2000      	movs	r0, #0
100462b8:	f7ff fc8e 	bl	10045bd8 <HAL_RADIO_SetChannelMap>
  HAL_RADIO_SetChannel(0, channel, 0);
100462bc:	230f      	movs	r3, #15
100462be:	18fb      	adds	r3, r7, r3
100462c0:	781b      	ldrb	r3, [r3, #0]
100462c2:	2200      	movs	r2, #0
100462c4:	0019      	movs	r1, r3
100462c6:	2000      	movs	r0, #0
100462c8:	f7ff fcd2 	bl	10045c70 <HAL_RADIO_SetChannel>
  HAL_RADIO_SetTxAttributes(0, networkID, 0x555555);
100462cc:	4b2f      	ldr	r3, [pc, #188]	@ (1004638c <HAL_RADIO_SendPacketWithAck+0x140>)
100462ce:	681b      	ldr	r3, [r3, #0]
100462d0:	4a2f      	ldr	r2, [pc, #188]	@ (10046390 <HAL_RADIO_SendPacketWithAck+0x144>)
100462d2:	0019      	movs	r1, r3
100462d4:	2000      	movs	r0, #0
100462d6:	f7ff fd2b 	bl	10045d30 <HAL_RADIO_SetTxAttributes>
  HAL_RADIO_SetGlobalReceiveTimeout(receive_timeout);
100462da:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
100462dc:	0018      	movs	r0, r3
100462de:	f7ff fd6b 	bl	10045db8 <HAL_RADIO_SetGlobalReceiveTimeout>

  aPacket[0].StateMachineNo = 0;
100462e2:	4b2c      	ldr	r3, [pc, #176]	@ (10046394 <HAL_RADIO_SendPacketWithAck+0x148>)
100462e4:	2200      	movs	r2, #0
100462e6:	701a      	strb	r2, [r3, #0]
  aPacket[0].ActionTag = TXRX | PLL_TRIG;
100462e8:	4b2a      	ldr	r3, [pc, #168]	@ (10046394 <HAL_RADIO_SendPacketWithAck+0x148>)
100462ea:	2203      	movs	r2, #3
100462ec:	705a      	strb	r2, [r3, #1]
  aPacket[0].WakeupTime = time;
100462ee:	4b29      	ldr	r3, [pc, #164]	@ (10046394 <HAL_RADIO_SendPacketWithAck+0x148>)
100462f0:	6a3a      	ldr	r2, [r7, #32]
100462f2:	605a      	str	r2, [r3, #4]
  aPacket[0].MaxReceiveLength = 0; /* does not affect for Tx */
100462f4:	4b27      	ldr	r3, [pc, #156]	@ (10046394 <HAL_RADIO_SendPacketWithAck+0x148>)
100462f6:	2200      	movs	r2, #0
100462f8:	709a      	strb	r2, [r3, #2]
  aPacket[0].data = txBuffer;
100462fa:	4b26      	ldr	r3, [pc, #152]	@ (10046394 <HAL_RADIO_SendPacketWithAck+0x148>)
100462fc:	687a      	ldr	r2, [r7, #4]
100462fe:	609a      	str	r2, [r3, #8]
  aPacket[0].next_true = &aPacket[1];
10046300:	4b24      	ldr	r3, [pc, #144]	@ (10046394 <HAL_RADIO_SendPacketWithAck+0x148>)
10046302:	4a25      	ldr	r2, [pc, #148]	@ (10046398 <HAL_RADIO_SendPacketWithAck+0x14c>)
10046304:	62da      	str	r2, [r3, #44]	@ 0x2c
  aPacket[0].next_false = &aPacket[1];
10046306:	4b23      	ldr	r3, [pc, #140]	@ (10046394 <HAL_RADIO_SendPacketWithAck+0x148>)
10046308:	4a23      	ldr	r2, [pc, #140]	@ (10046398 <HAL_RADIO_SendPacketWithAck+0x14c>)
1004630a:	631a      	str	r2, [r3, #48]	@ 0x30
  aPacket[0].condRoutine = CondRoutineTrue;
1004630c:	4b21      	ldr	r3, [pc, #132]	@ (10046394 <HAL_RADIO_SendPacketWithAck+0x148>)
1004630e:	4a23      	ldr	r2, [pc, #140]	@ (1004639c <HAL_RADIO_SendPacketWithAck+0x150>)
10046310:	635a      	str	r2, [r3, #52]	@ 0x34
  aPacket[0].dataRoutine = DataRoutineNull;
10046312:	4b20      	ldr	r3, [pc, #128]	@ (10046394 <HAL_RADIO_SendPacketWithAck+0x148>)
10046314:	4a22      	ldr	r2, [pc, #136]	@ (100463a0 <HAL_RADIO_SendPacketWithAck+0x154>)
10046316:	639a      	str	r2, [r3, #56]	@ 0x38

  aPacket[1].StateMachineNo = 0;
10046318:	4b1e      	ldr	r3, [pc, #120]	@ (10046394 <HAL_RADIO_SendPacketWithAck+0x148>)
1004631a:	2240      	movs	r2, #64	@ 0x40
1004631c:	2100      	movs	r1, #0
1004631e:	5499      	strb	r1, [r3, r2]
  aPacket[1].ActionTag = 0;
10046320:	4b1c      	ldr	r3, [pc, #112]	@ (10046394 <HAL_RADIO_SendPacketWithAck+0x148>)
10046322:	2241      	movs	r2, #65	@ 0x41
10046324:	2100      	movs	r1, #0
10046326:	5499      	strb	r1, [r3, r2]
  aPacket[1].WakeupTime = time;
10046328:	4b1a      	ldr	r3, [pc, #104]	@ (10046394 <HAL_RADIO_SendPacketWithAck+0x148>)
1004632a:	6a3a      	ldr	r2, [r7, #32]
1004632c:	645a      	str	r2, [r3, #68]	@ 0x44
  aPacket[1].MaxReceiveLength = receive_length;
1004632e:	4b19      	ldr	r3, [pc, #100]	@ (10046394 <HAL_RADIO_SendPacketWithAck+0x148>)
10046330:	223c      	movs	r2, #60	@ 0x3c
10046332:	2108      	movs	r1, #8
10046334:	1852      	adds	r2, r2, r1
10046336:	19d2      	adds	r2, r2, r7
10046338:	2142      	movs	r1, #66	@ 0x42
1004633a:	7812      	ldrb	r2, [r2, #0]
1004633c:	545a      	strb	r2, [r3, r1]
  aPacket[1].data = rxBuffer;
1004633e:	4b15      	ldr	r3, [pc, #84]	@ (10046394 <HAL_RADIO_SendPacketWithAck+0x148>)
10046340:	683a      	ldr	r2, [r7, #0]
10046342:	649a      	str	r2, [r3, #72]	@ 0x48
  aPacket[1].next_true = NULL_0;
10046344:	4b13      	ldr	r3, [pc, #76]	@ (10046394 <HAL_RADIO_SendPacketWithAck+0x148>)
10046346:	2200      	movs	r2, #0
10046348:	66da      	str	r2, [r3, #108]	@ 0x6c
  aPacket[1].next_false = NULL_0;
1004634a:	4b12      	ldr	r3, [pc, #72]	@ (10046394 <HAL_RADIO_SendPacketWithAck+0x148>)
1004634c:	2200      	movs	r2, #0
1004634e:	671a      	str	r2, [r3, #112]	@ 0x70
  aPacket[1].condRoutine = CondRoutineTrue;
10046350:	4b10      	ldr	r3, [pc, #64]	@ (10046394 <HAL_RADIO_SendPacketWithAck+0x148>)
10046352:	4a12      	ldr	r2, [pc, #72]	@ (1004639c <HAL_RADIO_SendPacketWithAck+0x150>)
10046354:	675a      	str	r2, [r3, #116]	@ 0x74
  aPacket[1].dataRoutine = Callback;
10046356:	4b0f      	ldr	r3, [pc, #60]	@ (10046394 <HAL_RADIO_SendPacketWithAck+0x148>)
10046358:	6cba      	ldr	r2, [r7, #72]	@ 0x48
1004635a:	679a      	str	r2, [r3, #120]	@ 0x78

  HAL_RADIO_SetReservedArea(&aPacket[0]);
1004635c:	4b0d      	ldr	r3, [pc, #52]	@ (10046394 <HAL_RADIO_SendPacketWithAck+0x148>)
1004635e:	0018      	movs	r0, r3
10046360:	f7ff fdaa 	bl	10045eb8 <HAL_RADIO_SetReservedArea>
  HAL_RADIO_SetReservedArea(&aPacket[1]);
10046364:	4b0c      	ldr	r3, [pc, #48]	@ (10046398 <HAL_RADIO_SendPacketWithAck+0x14c>)
10046366:	0018      	movs	r0, r3
10046368:	f7ff fda6 	bl	10045eb8 <HAL_RADIO_SetReservedArea>
  returnValue = HAL_RADIO_MakeActionPacketPending(&aPacket[0]);
1004636c:	2527      	movs	r5, #39	@ 0x27
1004636e:	197c      	adds	r4, r7, r5
10046370:	4b08      	ldr	r3, [pc, #32]	@ (10046394 <HAL_RADIO_SendPacketWithAck+0x148>)
10046372:	0018      	movs	r0, r3
10046374:	f7ff fe4e 	bl	10046014 <HAL_RADIO_MakeActionPacketPending>
10046378:	0003      	movs	r3, r0
1004637a:	7023      	strb	r3, [r4, #0]

  return returnValue;
1004637c:	197b      	adds	r3, r7, r5
1004637e:	781b      	ldrb	r3, [r3, #0]
}
10046380:	0018      	movs	r0, r3
10046382:	46bd      	mov	sp, r7
10046384:	b00b      	add	sp, #44	@ 0x2c
10046386:	bdf0      	pop	{r4, r5, r6, r7, pc}
10046388:	1004bed0 	.word	0x1004bed0
1004638c:	20000b5c 	.word	0x20000b5c
10046390:	00555555 	.word	0x00555555
10046394:	20000854 	.word	0x20000854
10046398:	20000894 	.word	0x20000894
1004639c:	100451f9 	.word	0x100451f9
100463a0:	1004520b 	.word	0x1004520b

100463a4 <HAL_RADIO_TxRxCallback>:
}

#endif /* USE_RADIO_PROPRIETARY_DRIVER */

__weak void HAL_RADIO_TxRxCallback(uint32_t flags)
{
100463a4:	b580      	push	{r7, lr}
100463a6:	b082      	sub	sp, #8
100463a8:	af00      	add	r7, sp, #0
100463aa:	6078      	str	r0, [r7, #4]
}
100463ac:	46c0      	nop			@ (mov r8, r8)
100463ae:	46bd      	mov	sp, r7
100463b0:	b002      	add	sp, #8
100463b2:	bd80      	pop	{r7, pc}

100463b4 <HAL_RADIO_TxRxSeqCallback>:


__weak void HAL_RADIO_TxRxSeqCallback(void)
{
100463b4:	b580      	push	{r7, lr}
100463b6:	af00      	add	r7, sp, #0
}
100463b8:	46c0      	nop			@ (mov r8, r8)
100463ba:	46bd      	mov	sp, r7
100463bc:	bd80      	pop	{r7, pc}

100463be <HAL_RADIO_TXRX_IRQHandler>:

void HAL_RADIO_TXRX_IRQHandler(void)
{
100463be:	b580      	push	{r7, lr}
100463c0:	b082      	sub	sp, #8
100463c2:	af00      	add	r7, sp, #0
  uint32_t blue_status = BLUE->STATUSREG;
100463c4:	23c0      	movs	r3, #192	@ 0xc0
100463c6:	05db      	lsls	r3, r3, #23
100463c8:	69db      	ldr	r3, [r3, #28]
100463ca:	607b      	str	r3, [r7, #4]
  uint32_t blue_interrupt = BLUE->INTERRUPT1REG;
100463cc:	23c0      	movs	r3, #192	@ 0xc0
100463ce:	05db      	lsls	r3, r3, #23
100463d0:	685b      	ldr	r3, [r3, #4]
100463d2:	603b      	str	r3, [r7, #0]

  /** clear all pending interrupts */
  BLUE->INTERRUPT1REG = blue_interrupt;
100463d4:	23c0      	movs	r3, #192	@ 0xc0
100463d6:	05db      	lsls	r3, r3, #23
100463d8:	683a      	ldr	r2, [r7, #0]
100463da:	605a      	str	r2, [r3, #4]

  HAL_RADIO_TIMER_EndOfRadioActivityIsr();
100463dc:	f000 fda2 	bl	10046f24 <HAL_RADIO_TIMER_EndOfRadioActivityIsr>

#if (USE_RADIO_PROPRIETARY_DRIVER == 1)
  HAL_RADIO_ActionPacketIsr(blue_status | blue_interrupt);
100463e0:	687a      	ldr	r2, [r7, #4]
100463e2:	683b      	ldr	r3, [r7, #0]
100463e4:	4313      	orrs	r3, r2
100463e6:	0018      	movs	r0, r3
100463e8:	f7ff fada 	bl	100459a0 <HAL_RADIO_ActionPacketIsr>
#endif

  HAL_RADIO_TxRxCallback(blue_status | blue_interrupt);
100463ec:	687a      	ldr	r2, [r7, #4]
100463ee:	683b      	ldr	r3, [r7, #0]
100463f0:	4313      	orrs	r3, r2
100463f2:	0018      	movs	r0, r3
100463f4:	f7ff ffd6 	bl	100463a4 <HAL_RADIO_TxRxCallback>

  HAL_RADIO_TIMER_RadioTimerIsr();
100463f8:	f000 fd7f 	bl	10046efa <HAL_RADIO_TIMER_RadioTimerIsr>
  /* If the device is configured with
     System clock = 64 MHz and BLE clock = 16 MHz
     a register read is necessary to end fine
     the clear interrupt register operation,
     due the AHB down converter latency */
  blue_interrupt = BLUE->INTERRUPT1REG;
100463fc:	23c0      	movs	r3, #192	@ 0xc0
100463fe:	05db      	lsls	r3, r3, #23
10046400:	685b      	ldr	r3, [r3, #4]
10046402:	603b      	str	r3, [r7, #0]
}
10046404:	46c0      	nop			@ (mov r8, r8)
10046406:	46bd      	mov	sp, r7
10046408:	b002      	add	sp, #8
1004640a:	bd80      	pop	{r7, pc}

1004640c <HAL_RADIO_TXRX_SEQ_IRQHandler>:


void HAL_RADIO_TXRX_SEQ_IRQHandler(void)
{
1004640c:	b580      	push	{r7, lr}
1004640e:	af00      	add	r7, sp, #0
  HAL_RADIO_TxRxSeqCallback();
10046410:	f7ff ffd0 	bl	100463b4 <HAL_RADIO_TxRxSeqCallback>
}
10046414:	46c0      	nop			@ (mov r8, r8)
10046416:	46bd      	mov	sp, r7
10046418:	bd80      	pop	{r7, pc}
	...

1004641c <__NVIC_EnableIRQ>:
{
1004641c:	b580      	push	{r7, lr}
1004641e:	b082      	sub	sp, #8
10046420:	af00      	add	r7, sp, #0
10046422:	0002      	movs	r2, r0
10046424:	1dfb      	adds	r3, r7, #7
10046426:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
10046428:	1dfb      	adds	r3, r7, #7
1004642a:	781b      	ldrb	r3, [r3, #0]
1004642c:	2b7f      	cmp	r3, #127	@ 0x7f
1004642e:	d809      	bhi.n	10046444 <__NVIC_EnableIRQ+0x28>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
10046430:	1dfb      	adds	r3, r7, #7
10046432:	781b      	ldrb	r3, [r3, #0]
10046434:	001a      	movs	r2, r3
10046436:	231f      	movs	r3, #31
10046438:	401a      	ands	r2, r3
1004643a:	4b04      	ldr	r3, [pc, #16]	@ (1004644c <__NVIC_EnableIRQ+0x30>)
1004643c:	2101      	movs	r1, #1
1004643e:	4091      	lsls	r1, r2
10046440:	000a      	movs	r2, r1
10046442:	601a      	str	r2, [r3, #0]
}
10046444:	46c0      	nop			@ (mov r8, r8)
10046446:	46bd      	mov	sp, r7
10046448:	b002      	add	sp, #8
1004644a:	bd80      	pop	{r7, pc}
1004644c:	e000e100 	.word	0xe000e100

10046450 <LL_RADIO_TIMER_EnableTimer1>:
{
10046450:	b580      	push	{r7, lr}
10046452:	b082      	sub	sp, #8
10046454:	af00      	add	r7, sp, #0
10046456:	6078      	str	r0, [r7, #4]
  MODIFY_REG_FIELD(BLUEx->TIMEOUTDESTREG, BLUE_TIMEOUTDESTREG_DESTINATION, LL_RADIO_TIMER_1);
10046458:	687b      	ldr	r3, [r7, #4]
1004645a:	68db      	ldr	r3, [r3, #12]
1004645c:	2203      	movs	r2, #3
1004645e:	4393      	bics	r3, r2
10046460:	2202      	movs	r2, #2
10046462:	431a      	orrs	r2, r3
10046464:	687b      	ldr	r3, [r7, #4]
10046466:	60da      	str	r2, [r3, #12]
}
10046468:	46c0      	nop			@ (mov r8, r8)
1004646a:	46bd      	mov	sp, r7
1004646c:	b002      	add	sp, #8
1004646e:	bd80      	pop	{r7, pc}

10046470 <LL_RADIO_TIMER_DisableTimer1>:
{
10046470:	b580      	push	{r7, lr}
10046472:	b082      	sub	sp, #8
10046474:	af00      	add	r7, sp, #0
10046476:	6078      	str	r0, [r7, #4]
  MODIFY_REG_FIELD(BLUEx->TIMEOUTDESTREG, BLUE_TIMEOUTDESTREG_DESTINATION, 0);
10046478:	687b      	ldr	r3, [r7, #4]
1004647a:	68db      	ldr	r3, [r3, #12]
1004647c:	2203      	movs	r2, #3
1004647e:	4393      	bics	r3, r2
10046480:	001a      	movs	r2, r3
10046482:	687b      	ldr	r3, [r7, #4]
10046484:	60da      	str	r2, [r3, #12]
}
10046486:	46c0      	nop			@ (mov r8, r8)
10046488:	46bd      	mov	sp, r7
1004648a:	b002      	add	sp, #8
1004648c:	bd80      	pop	{r7, pc}

1004648e <LL_RADIO_TIMER_IsEnabledTimer1>:
{
1004648e:	b580      	push	{r7, lr}
10046490:	b082      	sub	sp, #8
10046492:	af00      	add	r7, sp, #0
10046494:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(BLUEx->TIMEOUTDESTREG, BLUE_TIMEOUTDESTREG_DESTINATION) == (LL_RADIO_TIMER_1)) ? 1UL : 0UL);
10046496:	687b      	ldr	r3, [r7, #4]
10046498:	68db      	ldr	r3, [r3, #12]
1004649a:	2203      	movs	r2, #3
1004649c:	4013      	ands	r3, r2
1004649e:	2b02      	cmp	r3, #2
100464a0:	d101      	bne.n	100464a6 <LL_RADIO_TIMER_IsEnabledTimer1+0x18>
100464a2:	2301      	movs	r3, #1
100464a4:	e000      	b.n	100464a8 <LL_RADIO_TIMER_IsEnabledTimer1+0x1a>
100464a6:	2300      	movs	r3, #0
}
100464a8:	0018      	movs	r0, r3
100464aa:	46bd      	mov	sp, r7
100464ac:	b002      	add	sp, #8
100464ae:	bd80      	pop	{r7, pc}

100464b0 <LL_RADIO_TIMER_DisableTimer2>:
{
100464b0:	b580      	push	{r7, lr}
100464b2:	b082      	sub	sp, #8
100464b4:	af00      	add	r7, sp, #0
100464b6:	6078      	str	r0, [r7, #4]
  MODIFY_REG_FIELD(BLUEx->TIMEOUTDESTREG, BLUE_TIMEOUTDESTREG_DESTINATION, 0);
100464b8:	687b      	ldr	r3, [r7, #4]
100464ba:	68db      	ldr	r3, [r3, #12]
100464bc:	2203      	movs	r2, #3
100464be:	4393      	bics	r3, r2
100464c0:	001a      	movs	r2, r3
100464c2:	687b      	ldr	r3, [r7, #4]
100464c4:	60da      	str	r2, [r3, #12]
}
100464c6:	46c0      	nop			@ (mov r8, r8)
100464c8:	46bd      	mov	sp, r7
100464ca:	b002      	add	sp, #8
100464cc:	bd80      	pop	{r7, pc}

100464ce <LL_RADIO_TIMER_IsEnabledTimer2>:
{
100464ce:	b580      	push	{r7, lr}
100464d0:	b082      	sub	sp, #8
100464d2:	af00      	add	r7, sp, #0
100464d4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(BLUEx->TIMEOUTDESTREG, BLUE_TIMEOUTDESTREG_DESTINATION) == (LL_RADIO_TIMER_2)) ? 1UL : 0UL);
100464d6:	687b      	ldr	r3, [r7, #4]
100464d8:	68db      	ldr	r3, [r3, #12]
100464da:	2203      	movs	r2, #3
100464dc:	4013      	ands	r3, r2
100464de:	2b03      	cmp	r3, #3
100464e0:	d101      	bne.n	100464e6 <LL_RADIO_TIMER_IsEnabledTimer2+0x18>
100464e2:	2301      	movs	r3, #1
100464e4:	e000      	b.n	100464e8 <LL_RADIO_TIMER_IsEnabledTimer2+0x1a>
100464e6:	2300      	movs	r3, #0
}
100464e8:	0018      	movs	r0, r3
100464ea:	46bd      	mov	sp, r7
100464ec:	b002      	add	sp, #8
100464ee:	bd80      	pop	{r7, pc}

100464f0 <LL_RADIO_TIMER_SetTimeout>:
{
100464f0:	b580      	push	{r7, lr}
100464f2:	b082      	sub	sp, #8
100464f4:	af00      	add	r7, sp, #0
100464f6:	6078      	str	r0, [r7, #4]
100464f8:	6039      	str	r1, [r7, #0]
  WRITE_REG(BLUEx->TIMEOUTREG, timeout);
100464fa:	687b      	ldr	r3, [r7, #4]
100464fc:	683a      	ldr	r2, [r7, #0]
100464fe:	611a      	str	r2, [r3, #16]
}
10046500:	46c0      	nop			@ (mov r8, r8)
10046502:	46bd      	mov	sp, r7
10046504:	b002      	add	sp, #8
10046506:	bd80      	pop	{r7, pc}

10046508 <LL_RADIO_TIMER_GetTimeout>:
{
10046508:	b580      	push	{r7, lr}
1004650a:	b082      	sub	sp, #8
1004650c:	af00      	add	r7, sp, #0
1004650e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_REG(BLUEx->TIMEOUTREG));
10046510:	687b      	ldr	r3, [r7, #4]
10046512:	691b      	ldr	r3, [r3, #16]
}
10046514:	0018      	movs	r0, r3
10046516:	46bd      	mov	sp, r7
10046518:	b002      	add	sp, #8
1004651a:	bd80      	pop	{r7, pc}

1004651c <LL_RADIO_TIMER_EnableBLEWakeupTimer>:
{
1004651c:	b580      	push	{r7, lr}
1004651e:	b082      	sub	sp, #8
10046520:	af00      	add	r7, sp, #0
10046522:	6078      	str	r0, [r7, #4]
  SET_BIT(WAKEUPx->BLUE_SLEEP_REQUEST_MODE, WAKEUP_BLUE_SLEEP_REQUEST_MODE_BLE_WAKEUP_EN);
10046524:	687b      	ldr	r3, [r7, #4]
10046526:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
10046528:	2280      	movs	r2, #128	@ 0x80
1004652a:	05d2      	lsls	r2, r2, #23
1004652c:	431a      	orrs	r2, r3
1004652e:	687b      	ldr	r3, [r7, #4]
10046530:	629a      	str	r2, [r3, #40]	@ 0x28
}
10046532:	46c0      	nop			@ (mov r8, r8)
10046534:	46bd      	mov	sp, r7
10046536:	b002      	add	sp, #8
10046538:	bd80      	pop	{r7, pc}
	...

1004653c <LL_RADIO_TIMER_DisableBLEWakeupTimer>:
{
1004653c:	b580      	push	{r7, lr}
1004653e:	b082      	sub	sp, #8
10046540:	af00      	add	r7, sp, #0
10046542:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(WAKEUPx->BLUE_SLEEP_REQUEST_MODE, WAKEUP_BLUE_SLEEP_REQUEST_MODE_BLE_WAKEUP_EN);
10046544:	687b      	ldr	r3, [r7, #4]
10046546:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
10046548:	4a03      	ldr	r2, [pc, #12]	@ (10046558 <LL_RADIO_TIMER_DisableBLEWakeupTimer+0x1c>)
1004654a:	401a      	ands	r2, r3
1004654c:	687b      	ldr	r3, [r7, #4]
1004654e:	629a      	str	r2, [r3, #40]	@ 0x28
}
10046550:	46c0      	nop			@ (mov r8, r8)
10046552:	46bd      	mov	sp, r7
10046554:	b002      	add	sp, #8
10046556:	bd80      	pop	{r7, pc}
10046558:	bfffffff 	.word	0xbfffffff

1004655c <LL_RADIO_TIMER_IsEnabledBLEWakeupTimer>:
{
1004655c:	b580      	push	{r7, lr}
1004655e:	b082      	sub	sp, #8
10046560:	af00      	add	r7, sp, #0
10046562:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(WAKEUPx->BLUE_SLEEP_REQUEST_MODE, WAKEUP_BLUE_SLEEP_REQUEST_MODE_BLE_WAKEUP_EN) == (WAKEUP_BLUE_SLEEP_REQUEST_MODE_BLE_WAKEUP_EN)) ? 1UL : 0UL);
10046564:	687b      	ldr	r3, [r7, #4]
10046566:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
10046568:	2380      	movs	r3, #128	@ 0x80
1004656a:	05db      	lsls	r3, r3, #23
1004656c:	401a      	ands	r2, r3
1004656e:	2380      	movs	r3, #128	@ 0x80
10046570:	05db      	lsls	r3, r3, #23
10046572:	429a      	cmp	r2, r3
10046574:	d101      	bne.n	1004657a <LL_RADIO_TIMER_IsEnabledBLEWakeupTimer+0x1e>
10046576:	2301      	movs	r3, #1
10046578:	e000      	b.n	1004657c <LL_RADIO_TIMER_IsEnabledBLEWakeupTimer+0x20>
1004657a:	2300      	movs	r3, #0
}
1004657c:	0018      	movs	r0, r3
1004657e:	46bd      	mov	sp, r7
10046580:	b002      	add	sp, #8
10046582:	bd80      	pop	{r7, pc}

10046584 <LL_RADIO_TIMER_EnableCPUWakeupTimer>:
{
10046584:	b580      	push	{r7, lr}
10046586:	b082      	sub	sp, #8
10046588:	af00      	add	r7, sp, #0
1004658a:	6078      	str	r0, [r7, #4]
  SET_BIT(WAKEUPx->CM0_SLEEP_REQUEST_MODE, WAKEUP_CM0_SLEEP_REQUEST_MODE_CPU_WAKEUP_EN);
1004658c:	687b      	ldr	r3, [r7, #4]
1004658e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
10046590:	2280      	movs	r2, #128	@ 0x80
10046592:	05d2      	lsls	r2, r2, #23
10046594:	431a      	orrs	r2, r3
10046596:	687b      	ldr	r3, [r7, #4]
10046598:	631a      	str	r2, [r3, #48]	@ 0x30
}
1004659a:	46c0      	nop			@ (mov r8, r8)
1004659c:	46bd      	mov	sp, r7
1004659e:	b002      	add	sp, #8
100465a0:	bd80      	pop	{r7, pc}
	...

100465a4 <LL_RADIO_TIMER_DisableCPUWakeupTimer>:
{
100465a4:	b580      	push	{r7, lr}
100465a6:	b082      	sub	sp, #8
100465a8:	af00      	add	r7, sp, #0
100465aa:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(WAKEUPx->CM0_SLEEP_REQUEST_MODE, WAKEUP_CM0_SLEEP_REQUEST_MODE_CPU_WAKEUP_EN);
100465ac:	687b      	ldr	r3, [r7, #4]
100465ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
100465b0:	4a03      	ldr	r2, [pc, #12]	@ (100465c0 <LL_RADIO_TIMER_DisableCPUWakeupTimer+0x1c>)
100465b2:	401a      	ands	r2, r3
100465b4:	687b      	ldr	r3, [r7, #4]
100465b6:	631a      	str	r2, [r3, #48]	@ 0x30
}
100465b8:	46c0      	nop			@ (mov r8, r8)
100465ba:	46bd      	mov	sp, r7
100465bc:	b002      	add	sp, #8
100465be:	bd80      	pop	{r7, pc}
100465c0:	bfffffff 	.word	0xbfffffff

100465c4 <LL_RADIO_TIMER_SetWakeupOffset>:
{
100465c4:	b580      	push	{r7, lr}
100465c6:	b082      	sub	sp, #8
100465c8:	af00      	add	r7, sp, #0
100465ca:	6078      	str	r0, [r7, #4]
100465cc:	000a      	movs	r2, r1
100465ce:	1cfb      	adds	r3, r7, #3
100465d0:	701a      	strb	r2, [r3, #0]
  WRITE_REG(WAKEUPx->WAKEUP_OFFSET[0], (Time & 0xFF));
100465d2:	1cfb      	adds	r3, r7, #3
100465d4:	781a      	ldrb	r2, [r3, #0]
100465d6:	687b      	ldr	r3, [r7, #4]
100465d8:	609a      	str	r2, [r3, #8]
}
100465da:	46c0      	nop			@ (mov r8, r8)
100465dc:	46bd      	mov	sp, r7
100465de:	b002      	add	sp, #8
100465e0:	bd80      	pop	{r7, pc}

100465e2 <LL_RADIO_TIMER_SetBLEWakeupTime>:
{
100465e2:	b580      	push	{r7, lr}
100465e4:	b082      	sub	sp, #8
100465e6:	af00      	add	r7, sp, #0
100465e8:	6078      	str	r0, [r7, #4]
100465ea:	6039      	str	r1, [r7, #0]
  WRITE_REG(WAKEUPx->BLUE_WAKEUP_TIME, Time);
100465ec:	687b      	ldr	r3, [r7, #4]
100465ee:	683a      	ldr	r2, [r7, #0]
100465f0:	625a      	str	r2, [r3, #36]	@ 0x24
}
100465f2:	46c0      	nop			@ (mov r8, r8)
100465f4:	46bd      	mov	sp, r7
100465f6:	b002      	add	sp, #8
100465f8:	bd80      	pop	{r7, pc}

100465fa <LL_RADIO_TIMER_GetBLEWakeupTime>:
{
100465fa:	b580      	push	{r7, lr}
100465fc:	b082      	sub	sp, #8
100465fe:	af00      	add	r7, sp, #0
10046600:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_REG(WAKEUPx->BLUE_WAKEUP_TIME));
10046602:	687b      	ldr	r3, [r7, #4]
10046604:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
}
10046606:	0018      	movs	r0, r3
10046608:	46bd      	mov	sp, r7
1004660a:	b002      	add	sp, #8
1004660c:	bd80      	pop	{r7, pc}

1004660e <LL_RADIO_TIMER_SetCPUWakeupTime>:
{
1004660e:	b580      	push	{r7, lr}
10046610:	b082      	sub	sp, #8
10046612:	af00      	add	r7, sp, #0
10046614:	6078      	str	r0, [r7, #4]
10046616:	6039      	str	r1, [r7, #0]
  WRITE_REG(WAKEUPx->CM0_WAKEUP_TIME, Time);
10046618:	687b      	ldr	r3, [r7, #4]
1004661a:	683a      	ldr	r2, [r7, #0]
1004661c:	62da      	str	r2, [r3, #44]	@ 0x2c
}
1004661e:	46c0      	nop			@ (mov r8, r8)
10046620:	46bd      	mov	sp, r7
10046622:	b002      	add	sp, #8
10046624:	bd80      	pop	{r7, pc}

10046626 <LL_RADIO_TIMER_GetAbsoluteTime>:
{
10046626:	b580      	push	{r7, lr}
10046628:	b082      	sub	sp, #8
1004662a:	af00      	add	r7, sp, #0
1004662c:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_REG(WAKEUPx->ABSOLUTE_TIME));
1004662e:	687b      	ldr	r3, [r7, #4]
10046630:	691b      	ldr	r3, [r3, #16]
}
10046632:	0018      	movs	r0, r3
10046634:	46bd      	mov	sp, r7
10046636:	b002      	add	sp, #8
10046638:	bd80      	pop	{r7, pc}

1004663a <LL_RADIO_TIMER_EnableWakeupTimerLowPowerMode>:
  * @rmtoll BLUE_SLEEP_REQUEST_MODE    SLEEP_EN   LL_RADIO_TIMER_EnableWakeupTimerLowPowerMode
  * @param  WAKEUPx Radio Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_TIMER_EnableWakeupTimerLowPowerMode(WAKEUP_TypeDef *WAKEUPx)
{
1004663a:	b580      	push	{r7, lr}
1004663c:	b082      	sub	sp, #8
1004663e:	af00      	add	r7, sp, #0
10046640:	6078      	str	r0, [r7, #4]
  SET_BIT(WAKEUPx->BLUE_SLEEP_REQUEST_MODE, WAKEUP_BLUE_SLEEP_REQUEST_MODE_SLEEP_EN);
10046642:	687b      	ldr	r3, [r7, #4]
10046644:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
10046646:	2280      	movs	r2, #128	@ 0x80
10046648:	0592      	lsls	r2, r2, #22
1004664a:	431a      	orrs	r2, r3
1004664c:	687b      	ldr	r3, [r7, #4]
1004664e:	629a      	str	r2, [r3, #40]	@ 0x28
}
10046650:	46c0      	nop			@ (mov r8, r8)
10046652:	46bd      	mov	sp, r7
10046654:	b002      	add	sp, #8
10046656:	bd80      	pop	{r7, pc}

10046658 <LL_RADIO_TIMER_SetSleepRequestMode>:
  * @param  WAKEUPx Radio Timer instance
  * @param  mode Sleep mode value in range 0-7
  * @retval None.
  */
__STATIC_INLINE void LL_RADIO_TIMER_SetSleepRequestMode(WAKEUP_TypeDef *WAKEUPx, uint8_t mode)
{
10046658:	b580      	push	{r7, lr}
1004665a:	b082      	sub	sp, #8
1004665c:	af00      	add	r7, sp, #0
1004665e:	6078      	str	r0, [r7, #4]
10046660:	000a      	movs	r2, r1
10046662:	1cfb      	adds	r3, r7, #3
10046664:	701a      	strb	r2, [r3, #0]
#if defined(STM32WB09)
  return;
#else
  MODIFY_REG_FIELD(WAKEUP->BLUE_SLEEP_REQUEST_MODE, WAKEUP_BLUE_SLEEP_REQUEST_MODE_SLEEP_REQ_MODE, (mode & 0x7));
10046666:	4b08      	ldr	r3, [pc, #32]	@ (10046688 <LL_RADIO_TIMER_SetSleepRequestMode+0x30>)
10046668:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
1004666a:	2207      	movs	r2, #7
1004666c:	4393      	bics	r3, r2
1004666e:	0019      	movs	r1, r3
10046670:	1cfb      	adds	r3, r7, #3
10046672:	781b      	ldrb	r3, [r3, #0]
10046674:	2207      	movs	r2, #7
10046676:	401a      	ands	r2, r3
10046678:	4b03      	ldr	r3, [pc, #12]	@ (10046688 <LL_RADIO_TIMER_SetSleepRequestMode+0x30>)
1004667a:	430a      	orrs	r2, r1
1004667c:	629a      	str	r2, [r3, #40]	@ 0x28
#endif
}
1004667e:	46c0      	nop			@ (mov r8, r8)
10046680:	46bd      	mov	sp, r7
10046682:	b002      	add	sp, #8
10046684:	bd80      	pop	{r7, pc}
10046686:	46c0      	nop			@ (mov r8, r8)
10046688:	60001800 	.word	0x60001800

1004668c <LL_RADIO_TIMER_EnableBLEWakeupIT>:
  * @rmtoll WAKEUP_BLE_IRQ_ENABLE    WAKEUP_IT   LL_RADIO_TIMER_EnableBLEWakeupIT
  * @param  WAKEUPx Radio Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_TIMER_EnableBLEWakeupIT(WAKEUP_TypeDef *WAKEUPx)
{
1004668c:	b580      	push	{r7, lr}
1004668e:	b082      	sub	sp, #8
10046690:	af00      	add	r7, sp, #0
10046692:	6078      	str	r0, [r7, #4]
  SET_BIT(WAKEUPx->WAKEUP_BLE_IRQ_ENABLE, WAKEUP_WAKEUP_BLE_IRQ_ENABLE_WAKEUP_IT);
10046694:	687b      	ldr	r3, [r7, #4]
10046696:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
10046698:	2201      	movs	r2, #1
1004669a:	431a      	orrs	r2, r3
1004669c:	687b      	ldr	r3, [r7, #4]
1004669e:	641a      	str	r2, [r3, #64]	@ 0x40
}
100466a0:	46c0      	nop			@ (mov r8, r8)
100466a2:	46bd      	mov	sp, r7
100466a4:	b002      	add	sp, #8
100466a6:	bd80      	pop	{r7, pc}

100466a8 <LL_RADIO_TIMER_EnableCPUWakeupIT>:
  * @rmtoll WAKEUP_CM0_IRQ_ENABLE    WAKEUP_IT   LL_RADIO_TIMER_EnableCPUWakeupIT
  * @param  WAKEUPx Radio Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_TIMER_EnableCPUWakeupIT(WAKEUP_TypeDef *WAKEUPx)
{
100466a8:	b580      	push	{r7, lr}
100466aa:	b082      	sub	sp, #8
100466ac:	af00      	add	r7, sp, #0
100466ae:	6078      	str	r0, [r7, #4]
  SET_BIT(WAKEUPx->WAKEUP_CM0_IRQ_ENABLE, WAKEUP_WAKEUP_CM0_IRQ_ENABLE_WAKEUP_IT);
100466b0:	687b      	ldr	r3, [r7, #4]
100466b2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
100466b4:	2201      	movs	r2, #1
100466b6:	431a      	orrs	r2, r3
100466b8:	687b      	ldr	r3, [r7, #4]
100466ba:	649a      	str	r2, [r3, #72]	@ 0x48
}
100466bc:	46c0      	nop			@ (mov r8, r8)
100466be:	46bd      	mov	sp, r7
100466c0:	b002      	add	sp, #8
100466c2:	bd80      	pop	{r7, pc}

100466c4 <LL_RADIO_TIMER_ClearFlag_BLEWakeup>:
  * @rmtoll WAKEUP_BLE_IRQ_STATUS   WAKEUP_IT   LL_RADIO_TIMER_ClearFlag_BLEWakeup
  * @param  WAKEUPx Radio Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_TIMER_ClearFlag_BLEWakeup(WAKEUP_TypeDef *WAKEUPx)
{
100466c4:	b580      	push	{r7, lr}
100466c6:	b082      	sub	sp, #8
100466c8:	af00      	add	r7, sp, #0
100466ca:	6078      	str	r0, [r7, #4]
  SET_BIT(WAKEUPx->WAKEUP_BLE_IRQ_STATUS, WAKEUP_WAKEUP_BLE_IRQ_STATUS_WAKEUP_IT);
100466cc:	687b      	ldr	r3, [r7, #4]
100466ce:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
100466d0:	2201      	movs	r2, #1
100466d2:	431a      	orrs	r2, r3
100466d4:	687b      	ldr	r3, [r7, #4]
100466d6:	645a      	str	r2, [r3, #68]	@ 0x44
}
100466d8:	46c0      	nop			@ (mov r8, r8)
100466da:	46bd      	mov	sp, r7
100466dc:	b002      	add	sp, #8
100466de:	bd80      	pop	{r7, pc}

100466e0 <LL_RADIO_TIMER_IsActiveFlag_BLEWakeup>:
  * @rmtoll WAKEUP_BLE_IRQ_STATUS   WAKEUP_IT   LL_RADIO_TIMER_IsActiveFlag_BLEWakeup
  * @param  WAKEUPx Radio Timer instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RADIO_TIMER_IsActiveFlag_BLEWakeup(WAKEUP_TypeDef *WAKEUPx)
{
100466e0:	b580      	push	{r7, lr}
100466e2:	b082      	sub	sp, #8
100466e4:	af00      	add	r7, sp, #0
100466e6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(WAKEUPx->WAKEUP_BLE_IRQ_STATUS, WAKEUP_WAKEUP_BLE_IRQ_STATUS_WAKEUP_IT) == (WAKEUP_WAKEUP_BLE_IRQ_STATUS_WAKEUP_IT)) ? 1UL : 0UL);
100466e8:	687b      	ldr	r3, [r7, #4]
100466ea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
100466ec:	2201      	movs	r2, #1
100466ee:	4013      	ands	r3, r2
100466f0:	2b01      	cmp	r3, #1
100466f2:	d101      	bne.n	100466f8 <LL_RADIO_TIMER_IsActiveFlag_BLEWakeup+0x18>
100466f4:	2301      	movs	r3, #1
100466f6:	e000      	b.n	100466fa <LL_RADIO_TIMER_IsActiveFlag_BLEWakeup+0x1a>
100466f8:	2300      	movs	r3, #0
}
100466fa:	0018      	movs	r0, r3
100466fc:	46bd      	mov	sp, r7
100466fe:	b002      	add	sp, #8
10046700:	bd80      	pop	{r7, pc}

10046702 <LL_RADIO_TIMER_ClearFlag_CPUWakeup>:
  * @rmtoll WAKEUP_CM0_IRQ_STATUS   WAKEUP_IT   LL_RADIO_TIMER_ClearFlag_CPUWakeup
  * @param  WAKEUPx Radio Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_TIMER_ClearFlag_CPUWakeup(WAKEUP_TypeDef *WAKEUPx)
{
10046702:	b580      	push	{r7, lr}
10046704:	b082      	sub	sp, #8
10046706:	af00      	add	r7, sp, #0
10046708:	6078      	str	r0, [r7, #4]
  SET_BIT(WAKEUPx->WAKEUP_CM0_IRQ_STATUS, WAKEUP_WAKEUP_CM0_IRQ_STATUS_WAKEUP_IT);
1004670a:	687b      	ldr	r3, [r7, #4]
1004670c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
1004670e:	2201      	movs	r2, #1
10046710:	431a      	orrs	r2, r3
10046712:	687b      	ldr	r3, [r7, #4]
10046714:	64da      	str	r2, [r3, #76]	@ 0x4c
}
10046716:	46c0      	nop			@ (mov r8, r8)
10046718:	46bd      	mov	sp, r7
1004671a:	b002      	add	sp, #8
1004671c:	bd80      	pop	{r7, pc}

1004671e <LL_RADIO_TIMER_IsActiveFlag_CPUWakeup>:
  * @rmtoll WAKEUP_CM0_IRQ_STATUS   WAKEUP_IT   LL_RADIO_TIMER_IsActiveFlag_CPUWakeup
  * @param  WAKEUPx Radio Timer instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RADIO_TIMER_IsActiveFlag_CPUWakeup(WAKEUP_TypeDef *WAKEUPx)
{
1004671e:	b580      	push	{r7, lr}
10046720:	b082      	sub	sp, #8
10046722:	af00      	add	r7, sp, #0
10046724:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(WAKEUPx->WAKEUP_CM0_IRQ_STATUS, WAKEUP_WAKEUP_CM0_IRQ_STATUS_WAKEUP_IT) == (WAKEUP_WAKEUP_CM0_IRQ_STATUS_WAKEUP_IT)) ? 1UL : 0UL);
10046726:	687b      	ldr	r3, [r7, #4]
10046728:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
1004672a:	2201      	movs	r2, #1
1004672c:	4013      	ands	r3, r2
1004672e:	2b01      	cmp	r3, #1
10046730:	d101      	bne.n	10046736 <LL_RADIO_TIMER_IsActiveFlag_CPUWakeup+0x18>
10046732:	2301      	movs	r3, #1
10046734:	e000      	b.n	10046738 <LL_RADIO_TIMER_IsActiveFlag_CPUWakeup+0x1a>
10046736:	2300      	movs	r3, #0
}
10046738:	0018      	movs	r0, r3
1004673a:	46bd      	mov	sp, r7
1004673c:	b002      	add	sp, #8
1004673e:	bd80      	pop	{r7, pc}

10046740 <LL_RADIO_TIMER_SetLSIWindowCalibrationLength>:
  * @param RADIO_CTRLx: Radio Control instance
  * @param  Count Slow clock is measured in a window of SLOW_COUNT+1 slow clock cycles
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_TIMER_SetLSIWindowCalibrationLength(RADIO_CTRL_TypeDef *RADIO_CTRLx, uint32_t Count)
{
10046740:	b580      	push	{r7, lr}
10046742:	b082      	sub	sp, #8
10046744:	af00      	add	r7, sp, #0
10046746:	6078      	str	r0, [r7, #4]
10046748:	6039      	str	r1, [r7, #0]
  WRITE_REG(RADIO_CTRLx->CLK32COUNT_REG, Count);
1004674a:	687b      	ldr	r3, [r7, #4]
1004674c:	683a      	ldr	r2, [r7, #0]
1004674e:	605a      	str	r2, [r3, #4]
}
10046750:	46c0      	nop			@ (mov r8, r8)
10046752:	46bd      	mov	sp, r7
10046754:	b002      	add	sp, #8
10046756:	bd80      	pop	{r7, pc}

10046758 <LL_RADIO_TIMER_StartLSICalibration>:
  * @brief  Start the LSI calibration procedure.
  * @param RADIO_CTRLx: Radio Control instance
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_TIMER_StartLSICalibration(RADIO_CTRL_TypeDef *RADIO_CTRLx)
{
10046758:	b580      	push	{r7, lr}
1004675a:	b082      	sub	sp, #8
1004675c:	af00      	add	r7, sp, #0
1004675e:	6078      	str	r0, [r7, #4]
  WRITE_REG(RADIO_CTRLx->CLK32PERIOD_REG, 0);
10046760:	687b      	ldr	r3, [r7, #4]
10046762:	2200      	movs	r2, #0
10046764:	609a      	str	r2, [r3, #8]
}
10046766:	46c0      	nop			@ (mov r8, r8)
10046768:	46bd      	mov	sp, r7
1004676a:	b002      	add	sp, #8
1004676c:	bd80      	pop	{r7, pc}

1004676e <LL_RADIO_TIMER_GetLSIPeriod>:
  * @brief  Get the LSI clock Period calibrated.
  * @param RADIO_CTRLx: Radio Control instance
  * @retval The LSI clock period calibrated
  */
__STATIC_INLINE uint32_t LL_RADIO_TIMER_GetLSIPeriod(RADIO_CTRL_TypeDef *RADIO_CTRLx)
{
1004676e:	b580      	push	{r7, lr}
10046770:	b082      	sub	sp, #8
10046772:	af00      	add	r7, sp, #0
10046774:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_REG(RADIO_CTRLx->CLK32PERIOD_REG));
10046776:	687b      	ldr	r3, [r7, #4]
10046778:	689b      	ldr	r3, [r3, #8]
}
1004677a:	0018      	movs	r0, r3
1004677c:	46bd      	mov	sp, r7
1004677e:	b002      	add	sp, #8
10046780:	bd80      	pop	{r7, pc}

10046782 <LL_RADIO_TIMER_GetLSIFrequency>:
  * @brief  Get the LSI clock Frequency calibrated.
  * @param RADIO_CTRLx: Radio Control instance
  * @retval The LSI clock frequency calibrated
  */
__STATIC_INLINE uint32_t LL_RADIO_TIMER_GetLSIFrequency(RADIO_CTRL_TypeDef *RADIO_CTRLx)
{
10046782:	b580      	push	{r7, lr}
10046784:	b082      	sub	sp, #8
10046786:	af00      	add	r7, sp, #0
10046788:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_REG(RADIO_CTRLx->CLK32FREQUENCY_REG));
1004678a:	687b      	ldr	r3, [r7, #4]
1004678c:	68db      	ldr	r3, [r3, #12]
}
1004678e:	0018      	movs	r0, r3
10046790:	46bd      	mov	sp, r7
10046792:	b002      	add	sp, #8
10046794:	bd80      	pop	{r7, pc}

10046796 <LL_RADIO_TIMER_ClearFlag_LSICalibrationEnded>:
  * @brief  Clear the LSI calibration ended flag.
  * @param RADIO_CTRLx: Radio Control instance
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_TIMER_ClearFlag_LSICalibrationEnded(RADIO_CTRL_TypeDef *RADIO_CTRLx)
{
10046796:	b580      	push	{r7, lr}
10046798:	b082      	sub	sp, #8
1004679a:	af00      	add	r7, sp, #0
1004679c:	6078      	str	r0, [r7, #4]
  SET_BIT(RADIO_CTRLx->RADIO_CONTROL_IRQ_STATUS, RADIO_CTRL_RADIO_CONTROL_IRQ_STATUS_SLOW_CLK_IRQ);
1004679e:	687b      	ldr	r3, [r7, #4]
100467a0:	691b      	ldr	r3, [r3, #16]
100467a2:	2201      	movs	r2, #1
100467a4:	431a      	orrs	r2, r3
100467a6:	687b      	ldr	r3, [r7, #4]
100467a8:	611a      	str	r2, [r3, #16]
}
100467aa:	46c0      	nop			@ (mov r8, r8)
100467ac:	46bd      	mov	sp, r7
100467ae:	b002      	add	sp, #8
100467b0:	bd80      	pop	{r7, pc}

100467b2 <LL_RADIO_TIMER_IsActiveFlag_LSICalibrationEnded>:
  * @brief  Check if the LSI calibration ended flag is set or not.
  * @param RADIO_CTRLx: Radio Control instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RADIO_TIMER_IsActiveFlag_LSICalibrationEnded(RADIO_CTRL_TypeDef *RADIO_CTRLx)
{
100467b2:	b580      	push	{r7, lr}
100467b4:	b082      	sub	sp, #8
100467b6:	af00      	add	r7, sp, #0
100467b8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(RADIO_CTRLx->RADIO_CONTROL_IRQ_STATUS, RADIO_CTRL_RADIO_CONTROL_IRQ_STATUS_SLOW_CLK_IRQ) == (RADIO_CTRL_RADIO_CONTROL_IRQ_STATUS_SLOW_CLK_IRQ)) ? 1UL : 0UL);
100467ba:	687b      	ldr	r3, [r7, #4]
100467bc:	691b      	ldr	r3, [r3, #16]
100467be:	2201      	movs	r2, #1
100467c0:	4013      	ands	r3, r2
100467c2:	2b01      	cmp	r3, #1
100467c4:	d101      	bne.n	100467ca <LL_RADIO_TIMER_IsActiveFlag_LSICalibrationEnded+0x18>
100467c6:	2301      	movs	r3, #1
100467c8:	e000      	b.n	100467cc <LL_RADIO_TIMER_IsActiveFlag_LSICalibrationEnded+0x1a>
100467ca:	2300      	movs	r3, #0
}
100467cc:	0018      	movs	r0, r3
100467ce:	46bd      	mov	sp, r7
100467d0:	b002      	add	sp, #8
100467d2:	bd80      	pop	{r7, pc}

100467d4 <HAL_RADIO_TIMER_Init>:
  *         section of the application.
  * @param RADIO_TIMER_InitStruct Radio Timer Initialization parameters
  * @retval None
  */
void HAL_RADIO_TIMER_Init(RADIO_TIMER_InitTypeDef *RADIO_TIMER_InitStruct)
{
100467d4:	b5f0      	push	{r4, r5, r6, r7, lr}
100467d6:	b083      	sub	sp, #12
100467d8:	af00      	add	r7, sp, #0
100467da:	6078      	str	r0, [r7, #4]
  /* Interrupt Configuration */
  LL_RADIO_TIMER_ClearFlag_CPUWakeup(WAKEUP);
100467dc:	4b7c      	ldr	r3, [pc, #496]	@ (100469d0 <HAL_RADIO_TIMER_Init+0x1fc>)
100467de:	0018      	movs	r0, r3
100467e0:	f7ff ff8f 	bl	10046702 <LL_RADIO_TIMER_ClearFlag_CPUWakeup>
  LL_RADIO_TIMER_EnableCPUWakeupIT(WAKEUP);
100467e4:	4b7a      	ldr	r3, [pc, #488]	@ (100469d0 <HAL_RADIO_TIMER_Init+0x1fc>)
100467e6:	0018      	movs	r0, r3
100467e8:	f7ff ff5e 	bl	100466a8 <LL_RADIO_TIMER_EnableCPUWakeupIT>
  NVIC_EnableIRQ(RADIO_TIMER_CPU_WKUP_IRQn);
100467ec:	2017      	movs	r0, #23
100467ee:	f7ff fe15 	bl	1004641c <__NVIC_EnableIRQ>
  NVIC_EnableIRQ(RADIO_TIMER_ERROR_IRQn);
100467f2:	2014      	movs	r0, #20
100467f4:	f7ff fe12 	bl	1004641c <__NVIC_EnableIRQ>

#if defined (STM32WB06) || defined (STM32WB07)
  LL_RADIO_TIMER_ClearFlag_BLEWakeup(WAKEUP);
100467f8:	4b75      	ldr	r3, [pc, #468]	@ (100469d0 <HAL_RADIO_TIMER_Init+0x1fc>)
100467fa:	0018      	movs	r0, r3
100467fc:	f7ff ff62 	bl	100466c4 <LL_RADIO_TIMER_ClearFlag_BLEWakeup>
  LL_RADIO_TIMER_EnableBLEWakeupIT(WAKEUP);
10046800:	4b73      	ldr	r3, [pc, #460]	@ (100469d0 <HAL_RADIO_TIMER_Init+0x1fc>)
10046802:	0018      	movs	r0, r3
10046804:	f7ff ff42 	bl	1004668c <LL_RADIO_TIMER_EnableBLEWakeupIT>
  NVIC_EnableIRQ(RADIO_TIMER_TXRX_WKUP_IRQn);
10046808:	2018      	movs	r0, #24
1004680a:	f7ff fe07 	bl	1004641c <__NVIC_EnableIRQ>
  RADIO_TIMER_Context.hostMargin = MAX(HOST_MARGIN, RADIO_TIMER_InitStruct->XTAL_StartupTime);
1004680e:	687b      	ldr	r3, [r7, #4]
10046810:	881b      	ldrh	r3, [r3, #0]
10046812:	1c1a      	adds	r2, r3, #0
10046814:	b293      	uxth	r3, r2
10046816:	2bc8      	cmp	r3, #200	@ 0xc8
10046818:	d201      	bcs.n	1004681e <HAL_RADIO_TIMER_Init+0x4a>
1004681a:	23c8      	movs	r3, #200	@ 0xc8
1004681c:	1c1a      	adds	r2, r3, #0
1004681e:	b293      	uxth	r3, r2
10046820:	0019      	movs	r1, r3
10046822:	4b6c      	ldr	r3, [pc, #432]	@ (100469d4 <HAL_RADIO_TIMER_Init+0x200>)
10046824:	2298      	movs	r2, #152	@ 0x98
10046826:	5099      	str	r1, [r3, r2]
#endif

  /* Calibration Setting */
  RADIO_TIMER_Context.calibrationSettings.periodicCalibration = (RADIO_TIMER_InitStruct->periodicCalibrationInterval != 0);
10046828:	687b      	ldr	r3, [r7, #4]
1004682a:	685b      	ldr	r3, [r3, #4]
1004682c:	1e5a      	subs	r2, r3, #1
1004682e:	4193      	sbcs	r3, r2
10046830:	b2db      	uxtb	r3, r3
10046832:	001a      	movs	r2, r3
10046834:	4b67      	ldr	r3, [pc, #412]	@ (100469d4 <HAL_RADIO_TIMER_Init+0x200>)
10046836:	701a      	strb	r2, [r3, #0]
  if (RADIO_TIMER_Context.calibrationSettings.periodicCalibration || RADIO_TIMER_InitStruct->enableInitialCalibration)
10046838:	4b66      	ldr	r3, [pc, #408]	@ (100469d4 <HAL_RADIO_TIMER_Init+0x200>)
1004683a:	781b      	ldrb	r3, [r3, #0]
1004683c:	2b00      	cmp	r3, #0
1004683e:	d103      	bne.n	10046848 <HAL_RADIO_TIMER_Init+0x74>
10046840:	687b      	ldr	r3, [r7, #4]
10046842:	789b      	ldrb	r3, [r3, #2]
10046844:	2b00      	cmp	r3, #0
10046846:	d002      	beq.n	1004684e <HAL_RADIO_TIMER_Init+0x7a>
  {
    _calibrationProcedure();
10046848:	f000 fc68 	bl	1004711c <_calibrationProcedure>
1004684c:	e010      	b.n	10046870 <HAL_RADIO_TIMER_Init+0x9c>
  }
  else
  {
    /* Assume fix frequency at 32.768 kHz */
    RADIO_TIMER_Context.calibrationData.last_period1 = 0x00190000;
1004684e:	4b61      	ldr	r3, [pc, #388]	@ (100469d4 <HAL_RADIO_TIMER_Init+0x200>)
10046850:	22c8      	movs	r2, #200	@ 0xc8
10046852:	0352      	lsls	r2, r2, #13
10046854:	621a      	str	r2, [r3, #32]
    RADIO_TIMER_Context.calibrationData.period1 = 0x00190000 ;
10046856:	4b5f      	ldr	r3, [pc, #380]	@ (100469d4 <HAL_RADIO_TIMER_Init+0x200>)
10046858:	22c8      	movs	r2, #200	@ 0xc8
1004685a:	0352      	lsls	r2, r2, #13
1004685c:	61da      	str	r2, [r3, #28]
    RADIO_TIMER_Context.calibrationData.freq1 = 0x0028F5C2 ;
1004685e:	4b5d      	ldr	r3, [pc, #372]	@ (100469d4 <HAL_RADIO_TIMER_Init+0x200>)
10046860:	4a5d      	ldr	r2, [pc, #372]	@ (100469d8 <HAL_RADIO_TIMER_Init+0x204>)
10046862:	619a      	str	r2, [r3, #24]
    RADIO_TIMER_Context.calibrationData.period = 23437;
10046864:	4b5b      	ldr	r3, [pc, #364]	@ (100469d4 <HAL_RADIO_TIMER_Init+0x200>)
10046866:	4a5d      	ldr	r2, [pc, #372]	@ (100469dc <HAL_RADIO_TIMER_Init+0x208>)
10046868:	611a      	str	r2, [r3, #16]
    RADIO_TIMER_Context.calibrationData.freq = 23456748;
1004686a:	4b5a      	ldr	r3, [pc, #360]	@ (100469d4 <HAL_RADIO_TIMER_Init+0x200>)
1004686c:	4a5c      	ldr	r2, [pc, #368]	@ (100469e0 <HAL_RADIO_TIMER_Init+0x20c>)
1004686e:	615a      	str	r2, [r3, #20]
  }
  if (RADIO_TIMER_InitStruct->periodicCalibrationInterval == 0)
10046870:	687b      	ldr	r3, [r7, #4]
10046872:	685b      	ldr	r3, [r3, #4]
10046874:	2b00      	cmp	r3, #0
10046876:	d108      	bne.n	1004688a <HAL_RADIO_TIMER_Init+0xb6>
  {
    RADIO_TIMER_Context.calibrationSettings.periodicCalibrationInterval = HAL_RADIO_TIMER_MachineTimeToSysTime(0x50000000);
10046878:	23a0      	movs	r3, #160	@ 0xa0
1004687a:	05db      	lsls	r3, r3, #23
1004687c:	0018      	movs	r0, r3
1004687e:	f000 fb6b 	bl	10046f58 <HAL_RADIO_TIMER_MachineTimeToSysTime>
10046882:	0002      	movs	r2, r0
10046884:	4b53      	ldr	r3, [pc, #332]	@ (100469d4 <HAL_RADIO_TIMER_Init+0x200>)
10046886:	605a      	str	r2, [r3, #4]
10046888:	e01d      	b.n	100468c6 <HAL_RADIO_TIMER_Init+0xf2>
  }
  else
  {
    RADIO_TIMER_Context.calibrationSettings.periodicCalibrationInterval = (TIMER_SYSTICK_PER_10MS * RADIO_TIMER_InitStruct->periodicCalibrationInterval) / 10;
1004688a:	687b      	ldr	r3, [r7, #4]
1004688c:	685b      	ldr	r3, [r3, #4]
1004688e:	031b      	lsls	r3, r3, #12
10046890:	210a      	movs	r1, #10
10046892:	0018      	movs	r0, r3
10046894:	f7f9 fc52 	bl	1004013c <__udivsi3>
10046898:	0003      	movs	r3, r0
1004689a:	001a      	movs	r2, r3
1004689c:	4b4d      	ldr	r3, [pc, #308]	@ (100469d4 <HAL_RADIO_TIMER_Init+0x200>)
1004689e:	605a      	str	r2, [r3, #4]
    RADIO_TIMER_Context.calibrationSettings.periodicCalibrationInterval = MIN(RADIO_TIMER_Context.calibrationSettings.periodicCalibrationInterval,
100468a0:	4b4c      	ldr	r3, [pc, #304]	@ (100469d4 <HAL_RADIO_TIMER_Init+0x200>)
100468a2:	685e      	ldr	r6, [r3, #4]
100468a4:	4b4f      	ldr	r3, [pc, #316]	@ (100469e4 <HAL_RADIO_TIMER_Init+0x210>)
100468a6:	0018      	movs	r0, r3
100468a8:	f000 fb56 	bl	10046f58 <HAL_RADIO_TIMER_MachineTimeToSysTime>
100468ac:	0003      	movs	r3, r0
100468ae:	429e      	cmp	r6, r3
100468b0:	d202      	bcs.n	100468b8 <HAL_RADIO_TIMER_Init+0xe4>
100468b2:	4b48      	ldr	r3, [pc, #288]	@ (100469d4 <HAL_RADIO_TIMER_Init+0x200>)
100468b4:	685a      	ldr	r2, [r3, #4]
100468b6:	e004      	b.n	100468c2 <HAL_RADIO_TIMER_Init+0xee>
100468b8:	4b4a      	ldr	r3, [pc, #296]	@ (100469e4 <HAL_RADIO_TIMER_Init+0x210>)
100468ba:	0018      	movs	r0, r3
100468bc:	f000 fb4c 	bl	10046f58 <HAL_RADIO_TIMER_MachineTimeToSysTime>
100468c0:	0002      	movs	r2, r0
100468c2:	4b44      	ldr	r3, [pc, #272]	@ (100469d4 <HAL_RADIO_TIMER_Init+0x200>)
100468c4:	605a      	str	r2, [r3, #4]
                                                                              HAL_RADIO_TIMER_MachineTimeToSysTime(TIMER_MAX_VALUE - TIMER_WRAPPING_MARGIN));
  }
  RADIO_TIMER_Context.calibrationSettings.calibration_in_progress = FALSE;
100468c6:	4b43      	ldr	r3, [pc, #268]	@ (100469d4 <HAL_RADIO_TIMER_Init+0x200>)
100468c8:	2200      	movs	r2, #0
100468ca:	721a      	strb	r2, [r3, #8]

  /* XTAL startup time configuration */
  RADIO_TIMER_Context.hs_startup_time = RADIO_TIMER_InitStruct->XTAL_StartupTime;
100468cc:	687b      	ldr	r3, [r7, #4]
100468ce:	881b      	ldrh	r3, [r3, #0]
100468d0:	001a      	movs	r2, r3
100468d2:	4b40      	ldr	r3, [pc, #256]	@ (100469d4 <HAL_RADIO_TIMER_Init+0x200>)
100468d4:	669a      	str	r2, [r3, #104]	@ 0x68
  _update_xtal_startup_time(RADIO_TIMER_Context.hs_startup_time, RADIO_TIMER_Context.calibrationData.freq1);
100468d6:	4b3f      	ldr	r3, [pc, #252]	@ (100469d4 <HAL_RADIO_TIMER_Init+0x200>)
100468d8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
100468da:	b29a      	uxth	r2, r3
100468dc:	4b3d      	ldr	r3, [pc, #244]	@ (100469d4 <HAL_RADIO_TIMER_Init+0x200>)
100468de:	699b      	ldr	r3, [r3, #24]
100468e0:	0019      	movs	r1, r3
100468e2:	0010      	movs	r0, r2
100468e4:	f000 fd8e 	bl	10047404 <_update_xtal_startup_time>

  /* Init Radio Timer Context */
  RADIO_TIMER_Context.last_setup_time = 0;
100468e8:	4b3a      	ldr	r3, [pc, #232]	@ (100469d4 <HAL_RADIO_TIMER_Init+0x200>)
100468ea:	2284      	movs	r2, #132	@ 0x84
100468ec:	2100      	movs	r1, #0
100468ee:	5499      	strb	r1, [r3, r2]
  RADIO_TIMER_Context.cumulative_time = 0;
100468f0:	4938      	ldr	r1, [pc, #224]	@ (100469d4 <HAL_RADIO_TIMER_Init+0x200>)
100468f2:	2200      	movs	r2, #0
100468f4:	2300      	movs	r3, #0
100468f6:	670a      	str	r2, [r1, #112]	@ 0x70
100468f8:	674b      	str	r3, [r1, #116]	@ 0x74
  RADIO_TIMER_Context.last_machine_time = LL_RADIO_TIMER_GetAbsoluteTime(WAKEUP);
100468fa:	4b35      	ldr	r3, [pc, #212]	@ (100469d0 <HAL_RADIO_TIMER_Init+0x1fc>)
100468fc:	0018      	movs	r0, r3
100468fe:	f7ff fe92 	bl	10046626 <LL_RADIO_TIMER_GetAbsoluteTime>
10046902:	0002      	movs	r2, r0
10046904:	4b33      	ldr	r3, [pc, #204]	@ (100469d4 <HAL_RADIO_TIMER_Init+0x200>)
10046906:	2180      	movs	r1, #128	@ 0x80
10046908:	505a      	str	r2, [r3, r1]
  RADIO_TIMER_Context.last_system_time = 0;
1004690a:	4932      	ldr	r1, [pc, #200]	@ (100469d4 <HAL_RADIO_TIMER_Init+0x200>)
1004690c:	2200      	movs	r2, #0
1004690e:	2300      	movs	r3, #0
10046910:	678a      	str	r2, [r1, #120]	@ 0x78
10046912:	67cb      	str	r3, [r1, #124]	@ 0x7c
  RADIO_TIMER_Context.calibrationData.last_calibration_time = 0;
10046914:	492f      	ldr	r1, [pc, #188]	@ (100469d4 <HAL_RADIO_TIMER_Init+0x200>)
10046916:	2200      	movs	r2, #0
10046918:	2300      	movs	r3, #0
1004691a:	628a      	str	r2, [r1, #40]	@ 0x28
1004691c:	62cb      	str	r3, [r1, #44]	@ 0x2c
  RADIO_TIMER_Context.calibrationData.calibration_data_available = 0;
1004691e:	4b2d      	ldr	r3, [pc, #180]	@ (100469d4 <HAL_RADIO_TIMER_Init+0x200>)
10046920:	2234      	movs	r2, #52	@ 0x34
10046922:	2100      	movs	r1, #0
10046924:	5499      	strb	r1, [r3, r2]
  RADIO_TIMER_Context.calibrationData.calibration_machine_interval = blue_unit_conversion(RADIO_TIMER_Context.calibrationSettings.periodicCalibrationInterval,
10046926:	4b2b      	ldr	r3, [pc, #172]	@ (100469d4 <HAL_RADIO_TIMER_Init+0x200>)
10046928:	6858      	ldr	r0, [r3, #4]
                                                                     RADIO_TIMER_Context.calibrationData.freq1, MULT64_THR_FREQ);
1004692a:	4b2a      	ldr	r3, [pc, #168]	@ (100469d4 <HAL_RADIO_TIMER_Init+0x200>)
1004692c:	699b      	ldr	r3, [r3, #24]
  RADIO_TIMER_Context.calibrationData.calibration_machine_interval = blue_unit_conversion(RADIO_TIMER_Context.calibrationSettings.periodicCalibrationInterval,
1004692e:	0019      	movs	r1, r3
10046930:	4b2d      	ldr	r3, [pc, #180]	@ (100469e8 <HAL_RADIO_TIMER_Init+0x214>)
10046932:	001a      	movs	r2, r3
10046934:	f7f9 fbc4 	bl	100400c0 <blue_unit_conversion>
10046938:	0002      	movs	r2, r0
1004693a:	4b26      	ldr	r3, [pc, #152]	@ (100469d4 <HAL_RADIO_TIMER_Init+0x200>)
1004693c:	631a      	str	r2, [r3, #48]	@ 0x30
  RADIO_TIMER_Context.wakeup_calibration = RADIO_TIMER_Context.calibrationSettings.periodicCalibration;
1004693e:	4b25      	ldr	r3, [pc, #148]	@ (100469d4 <HAL_RADIO_TIMER_Init+0x200>)
10046940:	7819      	ldrb	r1, [r3, #0]
10046942:	4b24      	ldr	r3, [pc, #144]	@ (100469d4 <HAL_RADIO_TIMER_Init+0x200>)
10046944:	2294      	movs	r2, #148	@ 0x94
10046946:	5499      	strb	r1, [r3, r2]

  /* Init the Virtual Timer queue */
  RADIO_TIMER_Context.rootNode = NULL;
10046948:	4b22      	ldr	r3, [pc, #136]	@ (100469d4 <HAL_RADIO_TIMER_Init+0x200>)
1004694a:	228c      	movs	r2, #140	@ 0x8c
1004694c:	2100      	movs	r1, #0
1004694e:	5099      	str	r1, [r3, r2]
  RADIO_TIMER_Context.enableTimeBase = TRUE;
10046950:	4b20      	ldr	r3, [pc, #128]	@ (100469d4 <HAL_RADIO_TIMER_Init+0x200>)
10046952:	2290      	movs	r2, #144	@ 0x90
10046954:	2101      	movs	r1, #1
10046956:	5499      	strb	r1, [r3, r2]
  RADIO_TIMER_Context.stop_notimer_action = FALSE;
10046958:	4b1e      	ldr	r3, [pc, #120]	@ (100469d4 <HAL_RADIO_TIMER_Init+0x200>)
1004695a:	2293      	movs	r2, #147	@ 0x93
1004695c:	2100      	movs	r1, #0
1004695e:	5499      	strb	r1, [r3, r2]
  RADIO_TIMER_Context.expired_count = 0;
10046960:	4b1c      	ldr	r3, [pc, #112]	@ (100469d4 <HAL_RADIO_TIMER_Init+0x200>)
10046962:	2291      	movs	r2, #145	@ 0x91
10046964:	2100      	movs	r1, #0
10046966:	5499      	strb	r1, [r3, r2]
  RADIO_TIMER_Context.served_count = 0;
10046968:	4b1a      	ldr	r3, [pc, #104]	@ (100469d4 <HAL_RADIO_TIMER_Init+0x200>)
1004696a:	2292      	movs	r2, #146	@ 0x92
1004696c:	2100      	movs	r1, #0
1004696e:	5499      	strb	r1, [r3, r2]

  /* Init Radio Timer queue */
  RADIO_TIMER_Context.radioTimer.active = FALSE;
10046970:	4b18      	ldr	r3, [pc, #96]	@ (100469d4 <HAL_RADIO_TIMER_Init+0x200>)
10046972:	2261      	movs	r2, #97	@ 0x61
10046974:	2100      	movs	r1, #0
10046976:	5499      	strb	r1, [r3, r2]
  RADIO_TIMER_Context.radioTimer.pending = FALSE;
10046978:	4b16      	ldr	r3, [pc, #88]	@ (100469d4 <HAL_RADIO_TIMER_Init+0x200>)
1004697a:	2262      	movs	r2, #98	@ 0x62
1004697c:	2100      	movs	r1, #0
1004697e:	5499      	strb	r1, [r3, r2]
  RADIO_TIMER_Context.radioTimer.intTxRx_to_be_served = FALSE;
10046980:	4b14      	ldr	r3, [pc, #80]	@ (100469d4 <HAL_RADIO_TIMER_Init+0x200>)
10046982:	2263      	movs	r2, #99	@ 0x63
10046984:	2100      	movs	r1, #0
10046986:	5499      	strb	r1, [r3, r2]
  RADIO_TIMER_Context.radioTimer.expiryTime = 0;
10046988:	4912      	ldr	r1, [pc, #72]	@ (100469d4 <HAL_RADIO_TIMER_Init+0x200>)
1004698a:	2200      	movs	r2, #0
1004698c:	2300      	movs	r3, #0
1004698e:	658a      	str	r2, [r1, #88]	@ 0x58
10046990:	65cb      	str	r3, [r1, #92]	@ 0x5c

  /* Configure the Calibration callback and schedule the next calibration */
  RADIO_TIMER_Context.calibrationTimer.callback = _calibration_callback;
10046992:	4b10      	ldr	r3, [pc, #64]	@ (100469d4 <HAL_RADIO_TIMER_Init+0x200>)
10046994:	4a15      	ldr	r2, [pc, #84]	@ (100469ec <HAL_RADIO_TIMER_Init+0x218>)
10046996:	649a      	str	r2, [r3, #72]	@ 0x48
  RADIO_TIMER_Context.calibrationTimer.userData = NULL;
10046998:	4b0e      	ldr	r3, [pc, #56]	@ (100469d4 <HAL_RADIO_TIMER_Init+0x200>)
1004699a:	2200      	movs	r2, #0
1004699c:	655a      	str	r2, [r3, #84]	@ 0x54
  _start_timer(&RADIO_TIMER_Context.calibrationTimer,
               HAL_RADIO_TIMER_GetCurrentSysTime() + RADIO_TIMER_Context.calibrationSettings.periodicCalibrationInterval);
1004699e:	f000 faf1 	bl	10046f84 <HAL_RADIO_TIMER_GetCurrentSysTime>
100469a2:	0002      	movs	r2, r0
100469a4:	000b      	movs	r3, r1
100469a6:	490b      	ldr	r1, [pc, #44]	@ (100469d4 <HAL_RADIO_TIMER_Init+0x200>)
100469a8:	6849      	ldr	r1, [r1, #4]
100469aa:	000c      	movs	r4, r1
100469ac:	2100      	movs	r1, #0
100469ae:	000d      	movs	r5, r1
  _start_timer(&RADIO_TIMER_Context.calibrationTimer,
100469b0:	1912      	adds	r2, r2, r4
100469b2:	416b      	adcs	r3, r5
100469b4:	490e      	ldr	r1, [pc, #56]	@ (100469f0 <HAL_RADIO_TIMER_Init+0x21c>)
100469b6:	0008      	movs	r0, r1
100469b8:	f000 fd66 	bl	10047488 <_start_timer>

  /* Tx & Rx delay configuration */
  _configureTxRxDelay(&RADIO_TIMER_Context, TRUE);
100469bc:	4b05      	ldr	r3, [pc, #20]	@ (100469d4 <HAL_RADIO_TIMER_Init+0x200>)
100469be:	2101      	movs	r1, #1
100469c0:	0018      	movs	r0, r3
100469c2:	f000 fc5b 	bl	1004727c <_configureTxRxDelay>
}
100469c6:	46c0      	nop			@ (mov r8, r8)
100469c8:	46bd      	mov	sp, r7
100469ca:	b003      	add	sp, #12
100469cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
100469ce:	46c0      	nop			@ (mov r8, r8)
100469d0:	60001800 	.word	0x60001800
100469d4:	20000908 	.word	0x20000908
100469d8:	0028f5c2 	.word	0x0028f5c2
100469dc:	00005b8d 	.word	0x00005b8d
100469e0:	0165ebec 	.word	0x0165ebec
100469e4:	ffffefff 	.word	0xffffefff
100469e8:	00000326 	.word	0x00000326
100469ec:	10047461 	.word	0x10047461
100469f0:	20000948 	.word	0x20000948

100469f4 <HAL_RADIO_TIMER_Tick>:
  * Check expired timers and execute user callback.
  * It must be placed inside the infinite loop.
  * @retval None
  */
void HAL_RADIO_TIMER_Tick(void)
{
100469f4:	b5b0      	push	{r4, r5, r7, lr}
100469f6:	b094      	sub	sp, #80	@ 0x50
100469f8:	af00      	add	r7, sp, #0
  uint8_t expired = 0;
100469fa:	230b      	movs	r3, #11
100469fc:	2208      	movs	r2, #8
100469fe:	189b      	adds	r3, r3, r2
10046a00:	19db      	adds	r3, r3, r7
10046a02:	2200      	movs	r2, #0
10046a04:	701a      	strb	r2, [r3, #0]
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
10046a06:	f3ef 8310 	mrs	r3, PRIMASK
10046a0a:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
10046a0c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30

  ATOMIC_SECTION_BEGIN();
10046a0e:	64bb      	str	r3, [r7, #72]	@ 0x48
  __ASM volatile ("cpsid i" : : : "memory");
10046a10:	b672      	cpsid	i
}
10046a12:	46c0      	nop			@ (mov r8, r8)
  if (RADIO_TIMER_Context.radioTimer.active)
10046a14:	4bc1      	ldr	r3, [pc, #772]	@ (10046d1c <HAL_RADIO_TIMER_Tick+0x328>)
10046a16:	2261      	movs	r2, #97	@ 0x61
10046a18:	5c9b      	ldrb	r3, [r3, r2]
10046a1a:	2b00      	cmp	r3, #0
10046a1c:	d00f      	beq.n	10046a3e <HAL_RADIO_TIMER_Tick+0x4a>
  {
    if (RADIO_TIMER_Context.radioTimer.expiryTime < HAL_RADIO_TIMER_GetCurrentSysTime())
10046a1e:	4bbf      	ldr	r3, [pc, #764]	@ (10046d1c <HAL_RADIO_TIMER_Tick+0x328>)
10046a20:	6d9c      	ldr	r4, [r3, #88]	@ 0x58
10046a22:	6ddd      	ldr	r5, [r3, #92]	@ 0x5c
10046a24:	f000 faae 	bl	10046f84 <HAL_RADIO_TIMER_GetCurrentSysTime>
10046a28:	0002      	movs	r2, r0
10046a2a:	000b      	movs	r3, r1
10046a2c:	42ab      	cmp	r3, r5
10046a2e:	d802      	bhi.n	10046a36 <HAL_RADIO_TIMER_Tick+0x42>
10046a30:	d105      	bne.n	10046a3e <HAL_RADIO_TIMER_Tick+0x4a>
10046a32:	42a2      	cmp	r2, r4
10046a34:	d903      	bls.n	10046a3e <HAL_RADIO_TIMER_Tick+0x4a>
    {
      RADIO_TIMER_Context.radioTimer.active = FALSE;
10046a36:	4bb9      	ldr	r3, [pc, #740]	@ (10046d1c <HAL_RADIO_TIMER_Tick+0x328>)
10046a38:	2261      	movs	r2, #97	@ 0x61
10046a3a:	2100      	movs	r1, #0
10046a3c:	5499      	strb	r1, [r3, r2]
10046a3e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
10046a40:	62fb      	str	r3, [r7, #44]	@ 0x2c
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
10046a42:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
10046a44:	f383 8810 	msr	PRIMASK, r3
}
10046a48:	46c0      	nop			@ (mov r8, r8)
    }
  }
  ATOMIC_SECTION_END();

  /* Check for expired timers */
  while (DIFF8(RADIO_TIMER_Context.expired_count, RADIO_TIMER_Context.served_count))
10046a4a:	e072      	b.n	10046b32 <HAL_RADIO_TIMER_Tick+0x13e>
  {
    VTIMER_HandleType *expiredList, *curr;
    uint8_t to_be_served = DIFF8(RADIO_TIMER_Context.expired_count, RADIO_TIMER_Context.served_count);
10046a4c:	4bb3      	ldr	r3, [pc, #716]	@ (10046d1c <HAL_RADIO_TIMER_Tick+0x328>)
10046a4e:	2291      	movs	r2, #145	@ 0x91
10046a50:	5c99      	ldrb	r1, [r3, r2]
10046a52:	4bb2      	ldr	r3, [pc, #712]	@ (10046d1c <HAL_RADIO_TIMER_Tick+0x328>)
10046a54:	2292      	movs	r2, #146	@ 0x92
10046a56:	5c9a      	ldrb	r2, [r3, r2]
10046a58:	2337      	movs	r3, #55	@ 0x37
10046a5a:	2008      	movs	r0, #8
10046a5c:	181b      	adds	r3, r3, r0
10046a5e:	19db      	adds	r3, r3, r7
10046a60:	1a8a      	subs	r2, r1, r2
10046a62:	701a      	strb	r2, [r3, #0]

    RADIO_TIMER_Context.rootNode = _check_callbacks(RADIO_TIMER_Context.rootNode, &expiredList);
10046a64:	4bad      	ldr	r3, [pc, #692]	@ (10046d1c <HAL_RADIO_TIMER_Tick+0x328>)
10046a66:	228c      	movs	r2, #140	@ 0x8c
10046a68:	589b      	ldr	r3, [r3, r2]
10046a6a:	220c      	movs	r2, #12
10046a6c:	18ba      	adds	r2, r7, r2
10046a6e:	0011      	movs	r1, r2
10046a70:	0018      	movs	r0, r3
10046a72:	f000 ff0d 	bl	10047890 <_check_callbacks>
10046a76:	0002      	movs	r2, r0
10046a78:	4ba8      	ldr	r3, [pc, #672]	@ (10046d1c <HAL_RADIO_TIMER_Tick+0x328>)
10046a7a:	218c      	movs	r1, #140	@ 0x8c
10046a7c:	505a      	str	r2, [r3, r1]

    /* Call all the user callbacks */
    curr = expiredList;
10046a7e:	68fb      	ldr	r3, [r7, #12]
10046a80:	64fb      	str	r3, [r7, #76]	@ 0x4c
    while (curr != NULL)
10046a82:	e010      	b.n	10046aa6 <HAL_RADIO_TIMER_Tick+0xb2>
    {
      /* Save next pointer, in case callback start the timer again */
      VTIMER_HandleType *next = curr->next;
10046a84:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
10046a86:	691b      	ldr	r3, [r3, #16]
10046a88:	637b      	str	r3, [r7, #52]	@ 0x34
      curr->active = FALSE;
10046a8a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
10046a8c:	2200      	movs	r2, #0
10046a8e:	731a      	strb	r2, [r3, #12]
      if (curr->callback)
10046a90:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
10046a92:	689b      	ldr	r3, [r3, #8]
10046a94:	2b00      	cmp	r3, #0
10046a96:	d004      	beq.n	10046aa2 <HAL_RADIO_TIMER_Tick+0xae>
      {
        curr->callback(curr); /* we are sure a callback is set?*/
10046a98:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
10046a9a:	689b      	ldr	r3, [r3, #8]
10046a9c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
10046a9e:	0010      	movs	r0, r2
10046aa0:	4798      	blx	r3
      }
      curr = next;
10046aa2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
10046aa4:	64fb      	str	r3, [r7, #76]	@ 0x4c
    while (curr != NULL)
10046aa6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
10046aa8:	2b00      	cmp	r3, #0
10046aaa:	d1eb      	bne.n	10046a84 <HAL_RADIO_TIMER_Tick+0x90>
    }

    RADIO_TIMER_Context.rootNode = _update_user_timeout(RADIO_TIMER_Context.rootNode, &expired);
10046aac:	4b9b      	ldr	r3, [pc, #620]	@ (10046d1c <HAL_RADIO_TIMER_Tick+0x328>)
10046aae:	228c      	movs	r2, #140	@ 0x8c
10046ab0:	589b      	ldr	r3, [r3, r2]
10046ab2:	240b      	movs	r4, #11
10046ab4:	2508      	movs	r5, #8
10046ab6:	1962      	adds	r2, r4, r5
10046ab8:	19d2      	adds	r2, r2, r7
10046aba:	0011      	movs	r1, r2
10046abc:	0018      	movs	r0, r3
10046abe:	f000 fda9 	bl	10047614 <_update_user_timeout>
10046ac2:	0002      	movs	r2, r0
10046ac4:	4b95      	ldr	r3, [pc, #596]	@ (10046d1c <HAL_RADIO_TIMER_Tick+0x328>)
10046ac6:	218c      	movs	r1, #140	@ 0x8c
10046ac8:	505a      	str	r2, [r3, r1]
    if (expired == 1)
10046aca:	1963      	adds	r3, r4, r5
10046acc:	19db      	adds	r3, r3, r7
10046ace:	781b      	ldrb	r3, [r3, #0]
10046ad0:	2b01      	cmp	r3, #1
10046ad2:	d121      	bne.n	10046b18 <HAL_RADIO_TIMER_Tick+0x124>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
10046ad4:	f3ef 8310 	mrs	r3, PRIMASK
10046ad8:	62bb      	str	r3, [r7, #40]	@ 0x28
  return(result);
10046ada:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    {
      /* A new root timer is already expired, mimic timer expire */
      INCREMENT_EXPIRE_COUNT;
10046adc:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("cpsid i" : : : "memory");
10046ade:	b672      	cpsid	i
}
10046ae0:	46c0      	nop			@ (mov r8, r8)
10046ae2:	4b8e      	ldr	r3, [pc, #568]	@ (10046d1c <HAL_RADIO_TIMER_Tick+0x328>)
10046ae4:	2291      	movs	r2, #145	@ 0x91
10046ae6:	5c9b      	ldrb	r3, [r3, r2]
10046ae8:	3301      	adds	r3, #1
10046aea:	4a8c      	ldr	r2, [pc, #560]	@ (10046d1c <HAL_RADIO_TIMER_Tick+0x328>)
10046aec:	2192      	movs	r1, #146	@ 0x92
10046aee:	5c52      	ldrb	r2, [r2, r1]
10046af0:	4293      	cmp	r3, r2
10046af2:	d103      	bne.n	10046afc <HAL_RADIO_TIMER_Tick+0x108>
10046af4:	4b89      	ldr	r3, [pc, #548]	@ (10046d1c <HAL_RADIO_TIMER_Tick+0x328>)
10046af6:	2291      	movs	r2, #145	@ 0x91
10046af8:	5c9b      	ldrb	r3, [r3, r2]
10046afa:	e004      	b.n	10046b06 <HAL_RADIO_TIMER_Tick+0x112>
10046afc:	4b87      	ldr	r3, [pc, #540]	@ (10046d1c <HAL_RADIO_TIMER_Tick+0x328>)
10046afe:	2291      	movs	r2, #145	@ 0x91
10046b00:	5c9b      	ldrb	r3, [r3, r2]
10046b02:	3301      	adds	r3, #1
10046b04:	b2db      	uxtb	r3, r3
10046b06:	4a85      	ldr	r2, [pc, #532]	@ (10046d1c <HAL_RADIO_TIMER_Tick+0x328>)
10046b08:	2191      	movs	r1, #145	@ 0x91
10046b0a:	5453      	strb	r3, [r2, r1]
10046b0c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
10046b0e:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
10046b10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10046b12:	f383 8810 	msr	PRIMASK, r3
}
10046b16:	46c0      	nop			@ (mov r8, r8)
    }
    RADIO_TIMER_Context.served_count += to_be_served;
10046b18:	4b80      	ldr	r3, [pc, #512]	@ (10046d1c <HAL_RADIO_TIMER_Tick+0x328>)
10046b1a:	2292      	movs	r2, #146	@ 0x92
10046b1c:	5c9a      	ldrb	r2, [r3, r2]
10046b1e:	2337      	movs	r3, #55	@ 0x37
10046b20:	2108      	movs	r1, #8
10046b22:	185b      	adds	r3, r3, r1
10046b24:	19db      	adds	r3, r3, r7
10046b26:	781b      	ldrb	r3, [r3, #0]
10046b28:	18d3      	adds	r3, r2, r3
10046b2a:	b2d9      	uxtb	r1, r3
10046b2c:	4b7b      	ldr	r3, [pc, #492]	@ (10046d1c <HAL_RADIO_TIMER_Tick+0x328>)
10046b2e:	2292      	movs	r2, #146	@ 0x92
10046b30:	5499      	strb	r1, [r3, r2]
  while (DIFF8(RADIO_TIMER_Context.expired_count, RADIO_TIMER_Context.served_count))
10046b32:	4b7a      	ldr	r3, [pc, #488]	@ (10046d1c <HAL_RADIO_TIMER_Tick+0x328>)
10046b34:	2291      	movs	r2, #145	@ 0x91
10046b36:	5c9a      	ldrb	r2, [r3, r2]
10046b38:	4b78      	ldr	r3, [pc, #480]	@ (10046d1c <HAL_RADIO_TIMER_Tick+0x328>)
10046b3a:	2192      	movs	r1, #146	@ 0x92
10046b3c:	5c5b      	ldrb	r3, [r3, r1]
10046b3e:	429a      	cmp	r2, r3
10046b40:	d30a      	bcc.n	10046b58 <HAL_RADIO_TIMER_Tick+0x164>
10046b42:	4b76      	ldr	r3, [pc, #472]	@ (10046d1c <HAL_RADIO_TIMER_Tick+0x328>)
10046b44:	2291      	movs	r2, #145	@ 0x91
10046b46:	5c9a      	ldrb	r2, [r3, r2]
10046b48:	4b74      	ldr	r3, [pc, #464]	@ (10046d1c <HAL_RADIO_TIMER_Tick+0x328>)
10046b4a:	2192      	movs	r1, #146	@ 0x92
10046b4c:	5c5b      	ldrb	r3, [r3, r1]
10046b4e:	1ad3      	subs	r3, r2, r3
10046b50:	1e5a      	subs	r2, r3, #1
10046b52:	4193      	sbcs	r3, r2
10046b54:	b2db      	uxtb	r3, r3
10046b56:	e00c      	b.n	10046b72 <HAL_RADIO_TIMER_Tick+0x17e>
10046b58:	4b70      	ldr	r3, [pc, #448]	@ (10046d1c <HAL_RADIO_TIMER_Tick+0x328>)
10046b5a:	2291      	movs	r2, #145	@ 0x91
10046b5c:	5c9b      	ldrb	r3, [r3, r2]
10046b5e:	0019      	movs	r1, r3
10046b60:	4b6e      	ldr	r3, [pc, #440]	@ (10046d1c <HAL_RADIO_TIMER_Tick+0x328>)
10046b62:	2292      	movs	r2, #146	@ 0x92
10046b64:	5c9b      	ldrb	r3, [r3, r2]
10046b66:	1acb      	subs	r3, r1, r3
10046b68:	3301      	adds	r3, #1
10046b6a:	33ff      	adds	r3, #255	@ 0xff
10046b6c:	1e5a      	subs	r2, r3, #1
10046b6e:	4193      	sbcs	r3, r2
10046b70:	b2db      	uxtb	r3, r3
10046b72:	2b00      	cmp	r3, #0
10046b74:	d000      	beq.n	10046b78 <HAL_RADIO_TIMER_Tick+0x184>
10046b76:	e769      	b.n	10046a4c <HAL_RADIO_TIMER_Tick+0x58>
  }

  /* Check for periodic calibration */
  if (RADIO_TIMER_Context.calibrationSettings.calibration_in_progress)
10046b78:	4b68      	ldr	r3, [pc, #416]	@ (10046d1c <HAL_RADIO_TIMER_Tick+0x328>)
10046b7a:	7a1b      	ldrb	r3, [r3, #8]
10046b7c:	2b00      	cmp	r3, #0
10046b7e:	d100      	bne.n	10046b82 <HAL_RADIO_TIMER_Tick+0x18e>
10046b80:	e0b0      	b.n	10046ce4 <HAL_RADIO_TIMER_Tick+0x2f0>
  {
    if (LL_RADIO_TIMER_IsActiveFlag_LSICalibrationEnded(RADIO_CTRL))
10046b82:	4b67      	ldr	r3, [pc, #412]	@ (10046d20 <HAL_RADIO_TIMER_Tick+0x32c>)
10046b84:	0018      	movs	r0, r3
10046b86:	f7ff fe14 	bl	100467b2 <LL_RADIO_TIMER_IsActiveFlag_LSICalibrationEnded>
10046b8a:	1e03      	subs	r3, r0, #0
10046b8c:	d100      	bne.n	10046b90 <HAL_RADIO_TIMER_Tick+0x19c>
10046b8e:	e0c1      	b.n	10046d14 <HAL_RADIO_TIMER_Tick+0x320>
    {
      /* Calibration is completed */
      RADIO_TIMER_Context.calibrationSettings.calibration_in_progress = FALSE;
10046b90:	4b62      	ldr	r3, [pc, #392]	@ (10046d1c <HAL_RADIO_TIMER_Tick+0x328>)
10046b92:	2200      	movs	r2, #0
10046b94:	721a      	strb	r2, [r3, #8]
      if ((RADIO_TIMER_Context.wakeup_calibration == FALSE) && RADIO_TIMER_Context.stop_notimer_action)
10046b96:	4b61      	ldr	r3, [pc, #388]	@ (10046d1c <HAL_RADIO_TIMER_Tick+0x328>)
10046b98:	2294      	movs	r2, #148	@ 0x94
10046b9a:	5c9b      	ldrb	r3, [r3, r2]
10046b9c:	2b00      	cmp	r3, #0
10046b9e:	d109      	bne.n	10046bb4 <HAL_RADIO_TIMER_Tick+0x1c0>
10046ba0:	4b5e      	ldr	r3, [pc, #376]	@ (10046d1c <HAL_RADIO_TIMER_Tick+0x328>)
10046ba2:	2293      	movs	r2, #147	@ 0x93
10046ba4:	5c9b      	ldrb	r3, [r3, r2]
10046ba6:	2b00      	cmp	r3, #0
10046ba8:	d004      	beq.n	10046bb4 <HAL_RADIO_TIMER_Tick+0x1c0>
      {
        RADIO_TIMER_Context.stop_notimer_action = FALSE;
10046baa:	4b5c      	ldr	r3, [pc, #368]	@ (10046d1c <HAL_RADIO_TIMER_Tick+0x328>)
10046bac:	2293      	movs	r2, #147	@ 0x93
10046bae:	2100      	movs	r1, #0
10046bb0:	5499      	strb	r1, [r3, r2]
10046bb2:	e037      	b.n	10046c24 <HAL_RADIO_TIMER_Tick+0x230>
      }
      else
      {
        /* Collect calibration data */
        _updateCalibrationData();
10046bb4:	f000 feb6 	bl	10047924 <_updateCalibrationData>
        RADIO_TIMER_Context.rootNode = _update_user_timeout(RADIO_TIMER_Context.rootNode, &expired);
10046bb8:	4b58      	ldr	r3, [pc, #352]	@ (10046d1c <HAL_RADIO_TIMER_Tick+0x328>)
10046bba:	228c      	movs	r2, #140	@ 0x8c
10046bbc:	589b      	ldr	r3, [r3, r2]
10046bbe:	240b      	movs	r4, #11
10046bc0:	2508      	movs	r5, #8
10046bc2:	1962      	adds	r2, r4, r5
10046bc4:	19d2      	adds	r2, r2, r7
10046bc6:	0011      	movs	r1, r2
10046bc8:	0018      	movs	r0, r3
10046bca:	f000 fd23 	bl	10047614 <_update_user_timeout>
10046bce:	0002      	movs	r2, r0
10046bd0:	4b52      	ldr	r3, [pc, #328]	@ (10046d1c <HAL_RADIO_TIMER_Tick+0x328>)
10046bd2:	218c      	movs	r1, #140	@ 0x8c
10046bd4:	505a      	str	r2, [r3, r1]
        if (expired == 1)
10046bd6:	1963      	adds	r3, r4, r5
10046bd8:	19db      	adds	r3, r3, r7
10046bda:	781b      	ldrb	r3, [r3, #0]
10046bdc:	2b01      	cmp	r3, #1
10046bde:	d121      	bne.n	10046c24 <HAL_RADIO_TIMER_Tick+0x230>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
10046be0:	f3ef 8310 	mrs	r3, PRIMASK
10046be4:	623b      	str	r3, [r7, #32]
  return(result);
10046be6:	6a3b      	ldr	r3, [r7, #32]
        {
          /* A new root timer is already expired, mimic timer expire */
          INCREMENT_EXPIRE_COUNT;
10046be8:	647b      	str	r3, [r7, #68]	@ 0x44
  __ASM volatile ("cpsid i" : : : "memory");
10046bea:	b672      	cpsid	i
}
10046bec:	46c0      	nop			@ (mov r8, r8)
10046bee:	4b4b      	ldr	r3, [pc, #300]	@ (10046d1c <HAL_RADIO_TIMER_Tick+0x328>)
10046bf0:	2291      	movs	r2, #145	@ 0x91
10046bf2:	5c9b      	ldrb	r3, [r3, r2]
10046bf4:	3301      	adds	r3, #1
10046bf6:	4a49      	ldr	r2, [pc, #292]	@ (10046d1c <HAL_RADIO_TIMER_Tick+0x328>)
10046bf8:	2192      	movs	r1, #146	@ 0x92
10046bfa:	5c52      	ldrb	r2, [r2, r1]
10046bfc:	4293      	cmp	r3, r2
10046bfe:	d103      	bne.n	10046c08 <HAL_RADIO_TIMER_Tick+0x214>
10046c00:	4b46      	ldr	r3, [pc, #280]	@ (10046d1c <HAL_RADIO_TIMER_Tick+0x328>)
10046c02:	2291      	movs	r2, #145	@ 0x91
10046c04:	5c9b      	ldrb	r3, [r3, r2]
10046c06:	e004      	b.n	10046c12 <HAL_RADIO_TIMER_Tick+0x21e>
10046c08:	4b44      	ldr	r3, [pc, #272]	@ (10046d1c <HAL_RADIO_TIMER_Tick+0x328>)
10046c0a:	2291      	movs	r2, #145	@ 0x91
10046c0c:	5c9b      	ldrb	r3, [r3, r2]
10046c0e:	3301      	adds	r3, #1
10046c10:	b2db      	uxtb	r3, r3
10046c12:	4a42      	ldr	r2, [pc, #264]	@ (10046d1c <HAL_RADIO_TIMER_Tick+0x328>)
10046c14:	2191      	movs	r1, #145	@ 0x91
10046c16:	5453      	strb	r3, [r2, r1]
10046c18:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
10046c1a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
10046c1c:	69fb      	ldr	r3, [r7, #28]
10046c1e:	f383 8810 	msr	PRIMASK, r3
}
10046c22:	46c0      	nop			@ (mov r8, r8)
        }
      }

#if defined (STM32WB06) || defined (STM32WB07)
      if (RADIO_TIMER_Context.waitCal)
10046c24:	4b3d      	ldr	r3, [pc, #244]	@ (10046d1c <HAL_RADIO_TIMER_Tick+0x328>)
10046c26:	229c      	movs	r2, #156	@ 0x9c
10046c28:	5c9b      	ldrb	r3, [r3, r2]
10046c2a:	2b00      	cmp	r3, #0
10046c2c:	d044      	beq.n	10046cb8 <HAL_RADIO_TIMER_Tick+0x2c4>
      {
        RADIO_TIMER_Context.waitCal = 0;
10046c2e:	4b3b      	ldr	r3, [pc, #236]	@ (10046d1c <HAL_RADIO_TIMER_Tick+0x328>)
10046c30:	229c      	movs	r2, #156	@ 0x9c
10046c32:	2100      	movs	r1, #0
10046c34:	5499      	strb	r1, [r3, r2]
        RADIO_TIMER_Context.radioTimer.pending = TRUE;
10046c36:	4b39      	ldr	r3, [pc, #228]	@ (10046d1c <HAL_RADIO_TIMER_Tick+0x328>)
10046c38:	2262      	movs	r2, #98	@ 0x62
10046c3a:	2101      	movs	r1, #1
10046c3c:	5499      	strb	r1, [r3, r2]
        _check_radio_activity(&RADIO_TIMER_Context.radioTimer, &expired);
10046c3e:	240b      	movs	r4, #11
10046c40:	2508      	movs	r5, #8
10046c42:	1963      	adds	r3, r4, r5
10046c44:	19da      	adds	r2, r3, r7
10046c46:	4b37      	ldr	r3, [pc, #220]	@ (10046d24 <HAL_RADIO_TIMER_Tick+0x330>)
10046c48:	0011      	movs	r1, r2
10046c4a:	0018      	movs	r0, r3
10046c4c:	f000 fefe 	bl	10047a4c <_check_radio_activity>
        RADIO_TIMER_Context.rootNode = _update_user_timeout(RADIO_TIMER_Context.rootNode, &expired);
10046c50:	4b32      	ldr	r3, [pc, #200]	@ (10046d1c <HAL_RADIO_TIMER_Tick+0x328>)
10046c52:	228c      	movs	r2, #140	@ 0x8c
10046c54:	589b      	ldr	r3, [r3, r2]
10046c56:	1962      	adds	r2, r4, r5
10046c58:	19d2      	adds	r2, r2, r7
10046c5a:	0011      	movs	r1, r2
10046c5c:	0018      	movs	r0, r3
10046c5e:	f000 fcd9 	bl	10047614 <_update_user_timeout>
10046c62:	0002      	movs	r2, r0
10046c64:	4b2d      	ldr	r3, [pc, #180]	@ (10046d1c <HAL_RADIO_TIMER_Tick+0x328>)
10046c66:	218c      	movs	r1, #140	@ 0x8c
10046c68:	505a      	str	r2, [r3, r1]
        if (expired == 1)
10046c6a:	1963      	adds	r3, r4, r5
10046c6c:	19db      	adds	r3, r3, r7
10046c6e:	781b      	ldrb	r3, [r3, #0]
10046c70:	2b01      	cmp	r3, #1
10046c72:	d121      	bne.n	10046cb8 <HAL_RADIO_TIMER_Tick+0x2c4>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
10046c74:	f3ef 8310 	mrs	r3, PRIMASK
10046c78:	61bb      	str	r3, [r7, #24]
  return(result);
10046c7a:	69bb      	ldr	r3, [r7, #24]
        {
          /* A new root timer is already expired, mimic timer expire */
          INCREMENT_EXPIRE_COUNT;
10046c7c:	643b      	str	r3, [r7, #64]	@ 0x40
  __ASM volatile ("cpsid i" : : : "memory");
10046c7e:	b672      	cpsid	i
}
10046c80:	46c0      	nop			@ (mov r8, r8)
10046c82:	4b26      	ldr	r3, [pc, #152]	@ (10046d1c <HAL_RADIO_TIMER_Tick+0x328>)
10046c84:	2291      	movs	r2, #145	@ 0x91
10046c86:	5c9b      	ldrb	r3, [r3, r2]
10046c88:	3301      	adds	r3, #1
10046c8a:	4a24      	ldr	r2, [pc, #144]	@ (10046d1c <HAL_RADIO_TIMER_Tick+0x328>)
10046c8c:	2192      	movs	r1, #146	@ 0x92
10046c8e:	5c52      	ldrb	r2, [r2, r1]
10046c90:	4293      	cmp	r3, r2
10046c92:	d103      	bne.n	10046c9c <HAL_RADIO_TIMER_Tick+0x2a8>
10046c94:	4b21      	ldr	r3, [pc, #132]	@ (10046d1c <HAL_RADIO_TIMER_Tick+0x328>)
10046c96:	2291      	movs	r2, #145	@ 0x91
10046c98:	5c9b      	ldrb	r3, [r3, r2]
10046c9a:	e004      	b.n	10046ca6 <HAL_RADIO_TIMER_Tick+0x2b2>
10046c9c:	4b1f      	ldr	r3, [pc, #124]	@ (10046d1c <HAL_RADIO_TIMER_Tick+0x328>)
10046c9e:	2291      	movs	r2, #145	@ 0x91
10046ca0:	5c9b      	ldrb	r3, [r3, r2]
10046ca2:	3301      	adds	r3, #1
10046ca4:	b2db      	uxtb	r3, r3
10046ca6:	4a1d      	ldr	r2, [pc, #116]	@ (10046d1c <HAL_RADIO_TIMER_Tick+0x328>)
10046ca8:	2191      	movs	r1, #145	@ 0x91
10046caa:	5453      	strb	r3, [r2, r1]
10046cac:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
10046cae:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
10046cb0:	697b      	ldr	r3, [r7, #20]
10046cb2:	f383 8810 	msr	PRIMASK, r3
}
10046cb6:	46c0      	nop			@ (mov r8, r8)
      }
#else
      _check_radio_activity(&RADIO_TIMER_Context.radioTimer, &expired);
#endif

      HAL_RADIO_TIMER_StopVirtualTimer(&RADIO_TIMER_Context.calibrationTimer);
10046cb8:	4b1b      	ldr	r3, [pc, #108]	@ (10046d28 <HAL_RADIO_TIMER_Tick+0x334>)
10046cba:	0018      	movs	r0, r3
10046cbc:	f000 f974 	bl	10046fa8 <HAL_RADIO_TIMER_StopVirtualTimer>
      /* Schedule next calibration event */
      _start_timer(&RADIO_TIMER_Context.calibrationTimer,
                   HAL_RADIO_TIMER_GetCurrentSysTime() + RADIO_TIMER_Context.calibrationSettings.periodicCalibrationInterval);
10046cc0:	f000 f960 	bl	10046f84 <HAL_RADIO_TIMER_GetCurrentSysTime>
10046cc4:	0002      	movs	r2, r0
10046cc6:	000b      	movs	r3, r1
10046cc8:	4914      	ldr	r1, [pc, #80]	@ (10046d1c <HAL_RADIO_TIMER_Tick+0x328>)
10046cca:	6849      	ldr	r1, [r1, #4]
10046ccc:	6039      	str	r1, [r7, #0]
10046cce:	2100      	movs	r1, #0
10046cd0:	6079      	str	r1, [r7, #4]
      _start_timer(&RADIO_TIMER_Context.calibrationTimer,
10046cd2:	6838      	ldr	r0, [r7, #0]
10046cd4:	6879      	ldr	r1, [r7, #4]
10046cd6:	1812      	adds	r2, r2, r0
10046cd8:	414b      	adcs	r3, r1
10046cda:	4913      	ldr	r1, [pc, #76]	@ (10046d28 <HAL_RADIO_TIMER_Tick+0x334>)
10046cdc:	0008      	movs	r0, r1
10046cde:	f000 fbd3 	bl	10047488 <_start_timer>
      {
        _calibration_callback(&RADIO_TIMER_Context.calibrationTimer);
      }
    }
  }
}
10046ce2:	e017      	b.n	10046d14 <HAL_RADIO_TIMER_Tick+0x320>
    if (RADIO_TIMER_Context.calibrationSettings.periodicCalibration)
10046ce4:	4b0d      	ldr	r3, [pc, #52]	@ (10046d1c <HAL_RADIO_TIMER_Tick+0x328>)
10046ce6:	781b      	ldrb	r3, [r3, #0]
10046ce8:	2b00      	cmp	r3, #0
10046cea:	d013      	beq.n	10046d14 <HAL_RADIO_TIMER_Tick+0x320>
      if (HAL_RADIO_TIMER_GetCurrentSysTime() > (RADIO_TIMER_Context.calibrationData.last_calibration_time +
10046cec:	f000 f94a 	bl	10046f84 <HAL_RADIO_TIMER_GetCurrentSysTime>
10046cf0:	4b0a      	ldr	r3, [pc, #40]	@ (10046d1c <HAL_RADIO_TIMER_Tick+0x328>)
10046cf2:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
10046cf4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
10046cf6:	24fa      	movs	r4, #250	@ 0xfa
10046cf8:	0364      	lsls	r4, r4, #13
10046cfa:	2500      	movs	r5, #0
10046cfc:	1912      	adds	r2, r2, r4
10046cfe:	416b      	adcs	r3, r5
10046d00:	4299      	cmp	r1, r3
10046d02:	d803      	bhi.n	10046d0c <HAL_RADIO_TIMER_Tick+0x318>
10046d04:	d106      	bne.n	10046d14 <HAL_RADIO_TIMER_Tick+0x320>
10046d06:	4290      	cmp	r0, r2
10046d08:	d800      	bhi.n	10046d0c <HAL_RADIO_TIMER_Tick+0x318>
}
10046d0a:	e003      	b.n	10046d14 <HAL_RADIO_TIMER_Tick+0x320>
        _calibration_callback(&RADIO_TIMER_Context.calibrationTimer);
10046d0c:	4b06      	ldr	r3, [pc, #24]	@ (10046d28 <HAL_RADIO_TIMER_Tick+0x334>)
10046d0e:	0018      	movs	r0, r3
10046d10:	f000 fba6 	bl	10047460 <_calibration_callback>
}
10046d14:	46c0      	nop			@ (mov r8, r8)
10046d16:	46bd      	mov	sp, r7
10046d18:	b014      	add	sp, #80	@ 0x50
10046d1a:	bdb0      	pop	{r4, r5, r7, pc}
10046d1c:	20000908 	.word	0x20000908
10046d20:	60001000 	.word	0x60001000
10046d24:	20000960 	.word	0x20000960
10046d28:	20000948 	.word	0x20000948

10046d2c <HAL_RADIO_TIMER_GetAnchorPoint>:
  * @brief Get the last anchorPoint in system time unit.
  * @param current_system_time: Current System Time
  * @return TimerCapture register in system time unit.
  */
uint64_t HAL_RADIO_TIMER_GetAnchorPoint(uint64_t *current_system_time)
{
10046d2c:	b580      	push	{r7, lr}
10046d2e:	b082      	sub	sp, #8
10046d30:	af00      	add	r7, sp, #0
10046d32:	6078      	str	r0, [r7, #4]
  return TIMER_GetPastSysTime(BLUE->TIMERCAPTUREREG, current_system_time);
10046d34:	23c0      	movs	r3, #192	@ 0xc0
10046d36:	05db      	lsls	r3, r3, #23
10046d38:	695b      	ldr	r3, [r3, #20]
10046d3a:	687a      	ldr	r2, [r7, #4]
10046d3c:	0011      	movs	r1, r2
10046d3e:	0018      	movs	r0, r3
10046d40:	f001 f8b8 	bl	10047eb4 <TIMER_GetPastSysTime>
10046d44:	0002      	movs	r2, r0
10046d46:	000b      	movs	r3, r1
}
10046d48:	0010      	movs	r0, r2
10046d4a:	0019      	movs	r1, r3
10046d4c:	46bd      	mov	sp, r7
10046d4e:	b002      	add	sp, #8
10046d50:	bd80      	pop	{r7, pc}
	...

10046d54 <HAL_RADIO_TIMER_SetRadioTimerValue>:
  * @param  cal_req: Specify if PLL calibration is requested (1) or not (0).
  * @retval 0 if radio activity has been scheduled successfully.
  * @retval 1 if radio activity has been rejected (it is too close or in the past).
  */
uint32_t HAL_RADIO_TIMER_SetRadioTimerValue(uint32_t time, uint8_t event_type, uint8_t cal_req)
{
10046d54:	b5f0      	push	{r4, r5, r6, r7, lr}
10046d56:	b089      	sub	sp, #36	@ 0x24
10046d58:	af00      	add	r7, sp, #0
10046d5a:	60f8      	str	r0, [r7, #12]
10046d5c:	0008      	movs	r0, r1
10046d5e:	0011      	movs	r1, r2
10046d60:	230b      	movs	r3, #11
10046d62:	18fb      	adds	r3, r7, r3
10046d64:	1c02      	adds	r2, r0, #0
10046d66:	701a      	strb	r2, [r3, #0]
10046d68:	230a      	movs	r3, #10
10046d6a:	18fb      	adds	r3, r7, r3
10046d6c:	1c0a      	adds	r2, r1, #0
10046d6e:	701a      	strb	r2, [r3, #0]
  uint8_t retVal = 0;
10046d70:	260f      	movs	r6, #15
10046d72:	2308      	movs	r3, #8
10046d74:	18f3      	adds	r3, r6, r3
10046d76:	19db      	adds	r3, r3, r7
10046d78:	2200      	movs	r2, #0
10046d7a:	701a      	strb	r2, [r3, #0]
#if defined (STM32WB06) || defined (STM32WB07)
  uint64_t current_time;
#endif

  RADIO_TIMER_Context.radioTimer.event_type = event_type;
10046d7c:	230b      	movs	r3, #11
10046d7e:	18fb      	adds	r3, r7, r3
10046d80:	781b      	ldrb	r3, [r3, #0]
10046d82:	1e5a      	subs	r2, r3, #1
10046d84:	4193      	sbcs	r3, r2
10046d86:	b2d9      	uxtb	r1, r3
10046d88:	4b53      	ldr	r3, [pc, #332]	@ (10046ed8 <HAL_RADIO_TIMER_SetRadioTimerValue+0x184>)
10046d8a:	2264      	movs	r2, #100	@ 0x64
10046d8c:	5499      	strb	r1, [r3, r2]
  RADIO_TIMER_Context.radioTimer.cal_req = cal_req;
10046d8e:	230a      	movs	r3, #10
10046d90:	18fb      	adds	r3, r7, r3
10046d92:	781b      	ldrb	r3, [r3, #0]
10046d94:	1e5a      	subs	r2, r3, #1
10046d96:	4193      	sbcs	r3, r2
10046d98:	b2d9      	uxtb	r1, r3
10046d9a:	4b4f      	ldr	r3, [pc, #316]	@ (10046ed8 <HAL_RADIO_TIMER_SetRadioTimerValue+0x184>)
10046d9c:	2260      	movs	r2, #96	@ 0x60
10046d9e:	5499      	strb	r1, [r3, r2]
  RADIO_TIMER_Context.radioTimer.expiryTime = RADIO_TIMER_Context.calibrationData.last_calibration_time + (uint32_t)(time - (uint32_t)RADIO_TIMER_Context.calibrationData.last_calibration_time);
10046da0:	4b4d      	ldr	r3, [pc, #308]	@ (10046ed8 <HAL_RADIO_TIMER_SetRadioTimerValue+0x184>)
10046da2:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
10046da4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
10046da6:	494c      	ldr	r1, [pc, #304]	@ (10046ed8 <HAL_RADIO_TIMER_SetRadioTimerValue+0x184>)
10046da8:	6a88      	ldr	r0, [r1, #40]	@ 0x28
10046daa:	6ac9      	ldr	r1, [r1, #44]	@ 0x2c
10046dac:	68f9      	ldr	r1, [r7, #12]
10046dae:	1a09      	subs	r1, r1, r0
10046db0:	6039      	str	r1, [r7, #0]
10046db2:	2100      	movs	r1, #0
10046db4:	6079      	str	r1, [r7, #4]
10046db6:	6838      	ldr	r0, [r7, #0]
10046db8:	6879      	ldr	r1, [r7, #4]
10046dba:	1812      	adds	r2, r2, r0
10046dbc:	414b      	adcs	r3, r1
10046dbe:	4946      	ldr	r1, [pc, #280]	@ (10046ed8 <HAL_RADIO_TIMER_SetRadioTimerValue+0x184>)
10046dc0:	658a      	str	r2, [r1, #88]	@ 0x58
10046dc2:	65cb      	str	r3, [r1, #92]	@ 0x5c
  RADIO_TIMER_Context.radioTimer.active = FALSE;
10046dc4:	4b44      	ldr	r3, [pc, #272]	@ (10046ed8 <HAL_RADIO_TIMER_SetRadioTimerValue+0x184>)
10046dc6:	2261      	movs	r2, #97	@ 0x61
10046dc8:	2100      	movs	r1, #0
10046dca:	5499      	strb	r1, [r3, r2]
  RADIO_TIMER_Context.radioTimer.intTxRx_to_be_served = FALSE;
10046dcc:	4b42      	ldr	r3, [pc, #264]	@ (10046ed8 <HAL_RADIO_TIMER_SetRadioTimerValue+0x184>)
10046dce:	2263      	movs	r2, #99	@ 0x63
10046dd0:	2100      	movs	r1, #0
10046dd2:	5499      	strb	r1, [r3, r2]
  RADIO_TIMER_Context.radioTimer.pending = TRUE;
10046dd4:	4b40      	ldr	r3, [pc, #256]	@ (10046ed8 <HAL_RADIO_TIMER_SetRadioTimerValue+0x184>)
10046dd6:	2262      	movs	r2, #98	@ 0x62
10046dd8:	2101      	movs	r1, #1
10046dda:	5499      	strb	r1, [r3, r2]

#if defined (STM32WB06) || defined (STM32WB07)
  current_time = HAL_RADIO_TIMER_GetCurrentSysTime();
10046ddc:	f000 f8d2 	bl	10046f84 <HAL_RADIO_TIMER_GetCurrentSysTime>
10046de0:	0002      	movs	r2, r0
10046de2:	000b      	movs	r3, r1
10046de4:	61ba      	str	r2, [r7, #24]
10046de6:	61fb      	str	r3, [r7, #28]

  if (RADIO_TIMER_Context.rootNode == NULL)
10046de8:	4b3b      	ldr	r3, [pc, #236]	@ (10046ed8 <HAL_RADIO_TIMER_SetRadioTimerValue+0x184>)
10046dea:	228c      	movs	r2, #140	@ 0x8c
10046dec:	589b      	ldr	r3, [r3, r2]
10046dee:	2b00      	cmp	r3, #0
10046df0:	d108      	bne.n	10046e04 <HAL_RADIO_TIMER_SetRadioTimerValue+0xb0>
  {
    _check_radio_activity(&RADIO_TIMER_Context.radioTimer, &retVal);
10046df2:	2308      	movs	r3, #8
10046df4:	18f3      	adds	r3, r6, r3
10046df6:	19da      	adds	r2, r3, r7
10046df8:	4b38      	ldr	r3, [pc, #224]	@ (10046edc <HAL_RADIO_TIMER_SetRadioTimerValue+0x188>)
10046dfa:	0011      	movs	r1, r2
10046dfc:	0018      	movs	r0, r3
10046dfe:	f000 fe25 	bl	10047a4c <_check_radio_activity>
10046e02:	e05c      	b.n	10046ebe <HAL_RADIO_TIMER_SetRadioTimerValue+0x16a>
  }
  else
  {
    if (RADIO_TIMER_Context.rootNode->expiryTime < current_time ||
10046e04:	4b34      	ldr	r3, [pc, #208]	@ (10046ed8 <HAL_RADIO_TIMER_SetRadioTimerValue+0x184>)
10046e06:	228c      	movs	r2, #140	@ 0x8c
10046e08:	589b      	ldr	r3, [r3, r2]
10046e0a:	681a      	ldr	r2, [r3, #0]
10046e0c:	685b      	ldr	r3, [r3, #4]
10046e0e:	69f9      	ldr	r1, [r7, #28]
10046e10:	4299      	cmp	r1, r3
10046e12:	d82f      	bhi.n	10046e74 <HAL_RADIO_TIMER_SetRadioTimerValue+0x120>
10046e14:	69f9      	ldr	r1, [r7, #28]
10046e16:	4299      	cmp	r1, r3
10046e18:	d102      	bne.n	10046e20 <HAL_RADIO_TIMER_SetRadioTimerValue+0xcc>
10046e1a:	69b9      	ldr	r1, [r7, #24]
10046e1c:	4291      	cmp	r1, r2
10046e1e:	d829      	bhi.n	10046e74 <HAL_RADIO_TIMER_SetRadioTimerValue+0x120>
        ((RADIO_TIMER_Context.radioTimer.expiryTime < (RADIO_TIMER_Context.rootNode->expiryTime +
10046e20:	4b2d      	ldr	r3, [pc, #180]	@ (10046ed8 <HAL_RADIO_TIMER_SetRadioTimerValue+0x184>)
10046e22:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
10046e24:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
10046e26:	492c      	ldr	r1, [pc, #176]	@ (10046ed8 <HAL_RADIO_TIMER_SetRadioTimerValue+0x184>)
10046e28:	208c      	movs	r0, #140	@ 0x8c
10046e2a:	5809      	ldr	r1, [r1, r0]
10046e2c:	6808      	ldr	r0, [r1, #0]
10046e2e:	6849      	ldr	r1, [r1, #4]
10046e30:	6038      	str	r0, [r7, #0]
10046e32:	6079      	str	r1, [r7, #4]
                                                       RADIO_TIMER_Context.hostMargin)) && RADIO_TIMER_Context.rootNode->active) || !RADIO_TIMER_Context.rootNode->active)
10046e34:	4e28      	ldr	r6, [pc, #160]	@ (10046ed8 <HAL_RADIO_TIMER_SetRadioTimerValue+0x184>)
10046e36:	2198      	movs	r1, #152	@ 0x98
10046e38:	468c      	mov	ip, r1
10046e3a:	4661      	mov	r1, ip
10046e3c:	5876      	ldr	r6, [r6, r1]
10046e3e:	0034      	movs	r4, r6
10046e40:	2600      	movs	r6, #0
10046e42:	0035      	movs	r5, r6
        ((RADIO_TIMER_Context.radioTimer.expiryTime < (RADIO_TIMER_Context.rootNode->expiryTime +
10046e44:	6838      	ldr	r0, [r7, #0]
10046e46:	6879      	ldr	r1, [r7, #4]
10046e48:	1900      	adds	r0, r0, r4
10046e4a:	4169      	adcs	r1, r5
    if (RADIO_TIMER_Context.rootNode->expiryTime < current_time ||
10046e4c:	4299      	cmp	r1, r3
10046e4e:	d802      	bhi.n	10046e56 <HAL_RADIO_TIMER_SetRadioTimerValue+0x102>
10046e50:	d107      	bne.n	10046e62 <HAL_RADIO_TIMER_SetRadioTimerValue+0x10e>
10046e52:	4290      	cmp	r0, r2
10046e54:	d905      	bls.n	10046e62 <HAL_RADIO_TIMER_SetRadioTimerValue+0x10e>
                                                       RADIO_TIMER_Context.hostMargin)) && RADIO_TIMER_Context.rootNode->active) || !RADIO_TIMER_Context.rootNode->active)
10046e56:	4b20      	ldr	r3, [pc, #128]	@ (10046ed8 <HAL_RADIO_TIMER_SetRadioTimerValue+0x184>)
10046e58:	228c      	movs	r2, #140	@ 0x8c
10046e5a:	589b      	ldr	r3, [r3, r2]
10046e5c:	7b1b      	ldrb	r3, [r3, #12]
10046e5e:	2b00      	cmp	r3, #0
10046e60:	d108      	bne.n	10046e74 <HAL_RADIO_TIMER_SetRadioTimerValue+0x120>
10046e62:	4b1d      	ldr	r3, [pc, #116]	@ (10046ed8 <HAL_RADIO_TIMER_SetRadioTimerValue+0x184>)
10046e64:	228c      	movs	r2, #140	@ 0x8c
10046e66:	589b      	ldr	r3, [r3, r2]
10046e68:	7b1b      	ldrb	r3, [r3, #12]
10046e6a:	2201      	movs	r2, #1
10046e6c:	4053      	eors	r3, r2
10046e6e:	b2db      	uxtb	r3, r3
10046e70:	2b00      	cmp	r3, #0
10046e72:	d020      	beq.n	10046eb6 <HAL_RADIO_TIMER_SetRadioTimerValue+0x162>
    {
      /* Program the radio timer */
      _check_radio_activity(&RADIO_TIMER_Context.radioTimer, &retVal);
10046e74:	230f      	movs	r3, #15
10046e76:	2208      	movs	r2, #8
10046e78:	189b      	adds	r3, r3, r2
10046e7a:	19da      	adds	r2, r3, r7
10046e7c:	4b17      	ldr	r3, [pc, #92]	@ (10046edc <HAL_RADIO_TIMER_SetRadioTimerValue+0x188>)
10046e7e:	0011      	movs	r1, r2
10046e80:	0018      	movs	r0, r3
10046e82:	f000 fde3 	bl	10047a4c <_check_radio_activity>
      if ((RADIO_TIMER_Context.radioTimer.expiryTime >= RADIO_TIMER_Context.rootNode->expiryTime)
10046e86:	4b14      	ldr	r3, [pc, #80]	@ (10046ed8 <HAL_RADIO_TIMER_SetRadioTimerValue+0x184>)
10046e88:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
10046e8a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
10046e8c:	4912      	ldr	r1, [pc, #72]	@ (10046ed8 <HAL_RADIO_TIMER_SetRadioTimerValue+0x184>)
10046e8e:	208c      	movs	r0, #140	@ 0x8c
10046e90:	5809      	ldr	r1, [r1, r0]
10046e92:	6808      	ldr	r0, [r1, #0]
10046e94:	6849      	ldr	r1, [r1, #4]
10046e96:	4299      	cmp	r1, r3
10046e98:	d810      	bhi.n	10046ebc <HAL_RADIO_TIMER_SetRadioTimerValue+0x168>
10046e9a:	d101      	bne.n	10046ea0 <HAL_RADIO_TIMER_SetRadioTimerValue+0x14c>
10046e9c:	4290      	cmp	r0, r2
10046e9e:	d80d      	bhi.n	10046ebc <HAL_RADIO_TIMER_SetRadioTimerValue+0x168>
          && RADIO_TIMER_Context.rootNode->active)
10046ea0:	4b0d      	ldr	r3, [pc, #52]	@ (10046ed8 <HAL_RADIO_TIMER_SetRadioTimerValue+0x184>)
10046ea2:	228c      	movs	r2, #140	@ 0x8c
10046ea4:	589b      	ldr	r3, [r3, r2]
10046ea6:	7b1b      	ldrb	r3, [r3, #12]
10046ea8:	2b00      	cmp	r3, #0
10046eaa:	d007      	beq.n	10046ebc <HAL_RADIO_TIMER_SetRadioTimerValue+0x168>
      {
        /*The radio operation is before or too close the host timeout*/
        RADIO_TIMER_Context.hostIsRadioPending = 1;
10046eac:	4b0a      	ldr	r3, [pc, #40]	@ (10046ed8 <HAL_RADIO_TIMER_SetRadioTimerValue+0x184>)
10046eae:	2295      	movs	r2, #149	@ 0x95
10046eb0:	2101      	movs	r1, #1
10046eb2:	5499      	strb	r1, [r3, r2]
      if ((RADIO_TIMER_Context.radioTimer.expiryTime >= RADIO_TIMER_Context.rootNode->expiryTime)
10046eb4:	e002      	b.n	10046ebc <HAL_RADIO_TIMER_SetRadioTimerValue+0x168>
    else
    {
      /* If radio timer is not programmed, an emulated host timer is already programmed.
      Make sure radio errors are disabled.
      This call is not needed if radio errors are not enabled by the BLE stack. */
      _set_controller_as_host();
10046eb6:	f000 febd 	bl	10047c34 <_set_controller_as_host>
10046eba:	e000      	b.n	10046ebe <HAL_RADIO_TIMER_SetRadioTimerValue+0x16a>
      if ((RADIO_TIMER_Context.radioTimer.expiryTime >= RADIO_TIMER_Context.rootNode->expiryTime)
10046ebc:	46c0      	nop			@ (mov r8, r8)
  }
#else
  _check_radio_activity(&RADIO_TIMER_Context.radioTimer, &retVal);
#endif

  _virtualTimeBaseEnable(ENABLE);
10046ebe:	2001      	movs	r0, #1
10046ec0:	f000 fc8e 	bl	100477e0 <_virtualTimeBaseEnable>

  return retVal;
10046ec4:	230f      	movs	r3, #15
10046ec6:	2208      	movs	r2, #8
10046ec8:	189b      	adds	r3, r3, r2
10046eca:	19db      	adds	r3, r3, r7
10046ecc:	781b      	ldrb	r3, [r3, #0]
}
10046ece:	0018      	movs	r0, r3
10046ed0:	46bd      	mov	sp, r7
10046ed2:	b009      	add	sp, #36	@ 0x24
10046ed4:	bdf0      	pop	{r4, r5, r6, r7, pc}
10046ed6:	46c0      	nop			@ (mov r8, r8)
10046ed8:	20000908 	.word	0x20000908
10046edc:	20000960 	.word	0x20000960

10046ee0 <HAL_RADIO_TIMER_GetRadioTimerValue>:
  * @retval 1 if Timer1 has been programmed.
  * @retval 2 if Timer2 has been programmed.
  * @retval 3 if Wakeup Timer has been programmed.
  */
uint8_t HAL_RADIO_TIMER_GetRadioTimerValue(uint32_t *time)
{
10046ee0:	b580      	push	{r7, lr}
10046ee2:	b082      	sub	sp, #8
10046ee4:	af00      	add	r7, sp, #0
10046ee6:	6078      	str	r0, [r7, #4]
  return TIMER_GetRadioTimerValue(time);
10046ee8:	687b      	ldr	r3, [r7, #4]
10046eea:	0018      	movs	r0, r3
10046eec:	f001 f812 	bl	10047f14 <TIMER_GetRadioTimerValue>
10046ef0:	0003      	movs	r3, r0
}
10046ef2:	0018      	movs	r0, r3
10046ef4:	46bd      	mov	sp, r7
10046ef6:	b002      	add	sp, #8
10046ef8:	bd80      	pop	{r7, pc}

10046efa <HAL_RADIO_TIMER_RadioTimerIsr>:
/**
  * @brief  Radio activity finished.
  * @retval None
  */
void HAL_RADIO_TIMER_RadioTimerIsr(void)
{
10046efa:	b580      	push	{r7, lr}
10046efc:	af00      	add	r7, sp, #0
#if defined (STM32WB06) || defined (STM32WB07)
  if (!(LL_RADIO_TIMER_IsEnabledTimer1(BLUE) || LL_RADIO_TIMER_IsEnabledTimer2(BLUE)))
10046efe:	23c0      	movs	r3, #192	@ 0xc0
10046f00:	05db      	lsls	r3, r3, #23
10046f02:	0018      	movs	r0, r3
10046f04:	f7ff fac3 	bl	1004648e <LL_RADIO_TIMER_IsEnabledTimer1>
10046f08:	1e03      	subs	r3, r0, #0
10046f0a:	d108      	bne.n	10046f1e <HAL_RADIO_TIMER_RadioTimerIsr+0x24>
10046f0c:	23c0      	movs	r3, #192	@ 0xc0
10046f0e:	05db      	lsls	r3, r3, #23
10046f10:	0018      	movs	r0, r3
10046f12:	f7ff fadc 	bl	100464ce <LL_RADIO_TIMER_IsEnabledTimer2>
10046f16:	1e03      	subs	r3, r0, #0
10046f18:	d101      	bne.n	10046f1e <HAL_RADIO_TIMER_RadioTimerIsr+0x24>
  {
    _check_host_activity();
10046f1a:	f000 fea1 	bl	10047c60 <_check_host_activity>
  }
#endif
}
10046f1e:	46c0      	nop			@ (mov r8, r8)
10046f20:	46bd      	mov	sp, r7
10046f22:	bd80      	pop	{r7, pc}

10046f24 <HAL_RADIO_TIMER_EndOfRadioActivityIsr>:
/**
  * @brief  Timer State machine semaphore to signal the radio activity finished.
  * @retval None
  */
void HAL_RADIO_TIMER_EndOfRadioActivityIsr(void)
{
10046f24:	b580      	push	{r7, lr}
10046f26:	af00      	add	r7, sp, #0
  RADIO_TIMER_Context.radioTimer.intTxRx_to_be_served = FALSE;
10046f28:	4b03      	ldr	r3, [pc, #12]	@ (10046f38 <HAL_RADIO_TIMER_EndOfRadioActivityIsr+0x14>)
10046f2a:	2263      	movs	r2, #99	@ 0x63
10046f2c:	2100      	movs	r1, #0
10046f2e:	5499      	strb	r1, [r3, r2]
}
10046f30:	46c0      	nop			@ (mov r8, r8)
10046f32:	46bd      	mov	sp, r7
10046f34:	bd80      	pop	{r7, pc}
10046f36:	46c0      	nop			@ (mov r8, r8)
10046f38:	20000908 	.word	0x20000908

10046f3c <HAL_RADIO_TIMER_UsToSystime>:
  * @brief  Translate time in microseconds into sys time units.
  * @param  time: Microseconds to be converted in STU
  * @return STU value
  */
uint32_t HAL_RADIO_TIMER_UsToSystime(uint32_t time)
{
10046f3c:	b580      	push	{r7, lr}
10046f3e:	b082      	sub	sp, #8
10046f40:	af00      	add	r7, sp, #0
10046f42:	6078      	str	r0, [r7, #4]
  return _us_to_systime(time);
10046f44:	687b      	ldr	r3, [r7, #4]
10046f46:	0018      	movs	r0, r3
10046f48:	f000 fa14 	bl	10047374 <_us_to_systime>
10046f4c:	0003      	movs	r3, r0
}
10046f4e:	0018      	movs	r0, r3
10046f50:	46bd      	mov	sp, r7
10046f52:	b002      	add	sp, #8
10046f54:	bd80      	pop	{r7, pc}
	...

10046f58 <HAL_RADIO_TIMER_MachineTimeToSysTime>:
  *          storing the system time. It should be called only in
  *          user context and not in interrupt context.
  * @return  STU value
  */
uint32_t HAL_RADIO_TIMER_MachineTimeToSysTime(uint32_t time)
{
10046f58:	b580      	push	{r7, lr}
10046f5a:	b082      	sub	sp, #8
10046f5c:	af00      	add	r7, sp, #0
10046f5e:	6078      	str	r0, [r7, #4]
  return blue_unit_conversion(time, RADIO_TIMER_Context.calibrationData.period1, MULT64_THR_PERIOD);
10046f60:	4b06      	ldr	r3, [pc, #24]	@ (10046f7c <HAL_RADIO_TIMER_MachineTimeToSysTime+0x24>)
10046f62:	69db      	ldr	r3, [r3, #28]
10046f64:	0019      	movs	r1, r3
10046f66:	4a06      	ldr	r2, [pc, #24]	@ (10046f80 <HAL_RADIO_TIMER_MachineTimeToSysTime+0x28>)
10046f68:	687b      	ldr	r3, [r7, #4]
10046f6a:	0018      	movs	r0, r3
10046f6c:	f7f9 f8a8 	bl	100400c0 <blue_unit_conversion>
10046f70:	0003      	movs	r3, r0
}
10046f72:	0018      	movs	r0, r3
10046f74:	46bd      	mov	sp, r7
10046f76:	b002      	add	sp, #8
10046f78:	bd80      	pop	{r7, pc}
10046f7a:	46c0      	nop			@ (mov r8, r8)
10046f7c:	20000908 	.word	0x20000908
10046f80:	00000635 	.word	0x00000635

10046f84 <HAL_RADIO_TIMER_GetCurrentSysTime>:
  *         The returned value can be used as absolute time parameter where needed in the other
  *         HAL_RADIO_TIMER* APIs
  * @return absolute current time expressed in system time units.
  */
uint64_t HAL_RADIO_TIMER_GetCurrentSysTime(void)
{
10046f84:	b580      	push	{r7, lr}
10046f86:	b082      	sub	sp, #8
10046f88:	af00      	add	r7, sp, #0
  uint32_t current_machine_time;
  return _get_system_time_and_machine(&RADIO_TIMER_Context, &current_machine_time);
10046f8a:	1d3a      	adds	r2, r7, #4
10046f8c:	4b05      	ldr	r3, [pc, #20]	@ (10046fa4 <HAL_RADIO_TIMER_GetCurrentSysTime+0x20>)
10046f8e:	0011      	movs	r1, r2
10046f90:	0018      	movs	r0, r3
10046f92:	f000 fad7 	bl	10047544 <_get_system_time_and_machine>
10046f96:	0002      	movs	r2, r0
10046f98:	000b      	movs	r3, r1
}
10046f9a:	0010      	movs	r0, r2
10046f9c:	0019      	movs	r1, r3
10046f9e:	46bd      	mov	sp, r7
10046fa0:	b002      	add	sp, #8
10046fa2:	bd80      	pop	{r7, pc}
10046fa4:	20000908 	.word	0x20000908

10046fa8 <HAL_RADIO_TIMER_StopVirtualTimer>:
  * @brief  Stops the one-shot virtual timer specified if found
  * @param  timerHandle: The virtual timer
  * @retval None
  */
void HAL_RADIO_TIMER_StopVirtualTimer(VTIMER_HandleType *timerHandle)
{
10046fa8:	b590      	push	{r4, r7, lr}
10046faa:	b089      	sub	sp, #36	@ 0x24
10046fac:	af00      	add	r7, sp, #0
10046fae:	6078      	str	r0, [r7, #4]
  VTIMER_HandleType *rootNode = _remove_timer_in_queue(RADIO_TIMER_Context.rootNode, timerHandle);
10046fb0:	4b28      	ldr	r3, [pc, #160]	@ (10047054 <HAL_RADIO_TIMER_StopVirtualTimer+0xac>)
10046fb2:	228c      	movs	r2, #140	@ 0x8c
10046fb4:	589b      	ldr	r3, [r3, r2]
10046fb6:	687a      	ldr	r2, [r7, #4]
10046fb8:	0011      	movs	r1, r2
10046fba:	0018      	movs	r0, r3
10046fbc:	f000 fc3c 	bl	10047838 <_remove_timer_in_queue>
10046fc0:	0003      	movs	r3, r0
10046fc2:	61fb      	str	r3, [r7, #28]
  uint8_t expired = 0;
10046fc4:	210f      	movs	r1, #15
10046fc6:	187b      	adds	r3, r7, r1
10046fc8:	2200      	movs	r2, #0
10046fca:	701a      	strb	r2, [r3, #0]
  timerHandle->active = FALSE;
10046fcc:	687b      	ldr	r3, [r7, #4]
10046fce:	2200      	movs	r2, #0
10046fd0:	731a      	strb	r2, [r3, #12]
  if (RADIO_TIMER_Context.rootNode != rootNode)
10046fd2:	4b20      	ldr	r3, [pc, #128]	@ (10047054 <HAL_RADIO_TIMER_StopVirtualTimer+0xac>)
10046fd4:	228c      	movs	r2, #140	@ 0x8c
10046fd6:	589b      	ldr	r3, [r3, r2]
10046fd8:	69fa      	ldr	r2, [r7, #28]
10046fda:	429a      	cmp	r2, r3
10046fdc:	d031      	beq.n	10047042 <HAL_RADIO_TIMER_StopVirtualTimer+0x9a>
  {
    RADIO_TIMER_Context.rootNode = _update_user_timeout(rootNode, &expired);
10046fde:	000c      	movs	r4, r1
10046fe0:	187a      	adds	r2, r7, r1
10046fe2:	69fb      	ldr	r3, [r7, #28]
10046fe4:	0011      	movs	r1, r2
10046fe6:	0018      	movs	r0, r3
10046fe8:	f000 fb14 	bl	10047614 <_update_user_timeout>
10046fec:	0002      	movs	r2, r0
10046fee:	4b19      	ldr	r3, [pc, #100]	@ (10047054 <HAL_RADIO_TIMER_StopVirtualTimer+0xac>)
10046ff0:	218c      	movs	r1, #140	@ 0x8c
10046ff2:	505a      	str	r2, [r3, r1]
    if (expired)
10046ff4:	193b      	adds	r3, r7, r4
10046ff6:	781b      	ldrb	r3, [r3, #0]
10046ff8:	2b00      	cmp	r3, #0
10046ffa:	d026      	beq.n	1004704a <HAL_RADIO_TIMER_StopVirtualTimer+0xa2>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
10046ffc:	f3ef 8310 	mrs	r3, PRIMASK
10047000:	617b      	str	r3, [r7, #20]
  return(result);
10047002:	697b      	ldr	r3, [r7, #20]
    {
      /* A new root timer is already expired, mimic timer expire */
      INCREMENT_EXPIRE_COUNT;
10047004:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("cpsid i" : : : "memory");
10047006:	b672      	cpsid	i
}
10047008:	46c0      	nop			@ (mov r8, r8)
1004700a:	4b12      	ldr	r3, [pc, #72]	@ (10047054 <HAL_RADIO_TIMER_StopVirtualTimer+0xac>)
1004700c:	2291      	movs	r2, #145	@ 0x91
1004700e:	5c9b      	ldrb	r3, [r3, r2]
10047010:	3301      	adds	r3, #1
10047012:	4a10      	ldr	r2, [pc, #64]	@ (10047054 <HAL_RADIO_TIMER_StopVirtualTimer+0xac>)
10047014:	2192      	movs	r1, #146	@ 0x92
10047016:	5c52      	ldrb	r2, [r2, r1]
10047018:	4293      	cmp	r3, r2
1004701a:	d103      	bne.n	10047024 <HAL_RADIO_TIMER_StopVirtualTimer+0x7c>
1004701c:	4b0d      	ldr	r3, [pc, #52]	@ (10047054 <HAL_RADIO_TIMER_StopVirtualTimer+0xac>)
1004701e:	2291      	movs	r2, #145	@ 0x91
10047020:	5c9b      	ldrb	r3, [r3, r2]
10047022:	e004      	b.n	1004702e <HAL_RADIO_TIMER_StopVirtualTimer+0x86>
10047024:	4b0b      	ldr	r3, [pc, #44]	@ (10047054 <HAL_RADIO_TIMER_StopVirtualTimer+0xac>)
10047026:	2291      	movs	r2, #145	@ 0x91
10047028:	5c9b      	ldrb	r3, [r3, r2]
1004702a:	3301      	adds	r3, #1
1004702c:	b2db      	uxtb	r3, r3
1004702e:	4a09      	ldr	r2, [pc, #36]	@ (10047054 <HAL_RADIO_TIMER_StopVirtualTimer+0xac>)
10047030:	2191      	movs	r1, #145	@ 0x91
10047032:	5453      	strb	r3, [r2, r1]
10047034:	69bb      	ldr	r3, [r7, #24]
10047036:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
10047038:	693b      	ldr	r3, [r7, #16]
1004703a:	f383 8810 	msr	PRIMASK, r3
}
1004703e:	46c0      	nop			@ (mov r8, r8)
  }
  else
  {
    RADIO_TIMER_Context.rootNode = rootNode;
  }
}
10047040:	e003      	b.n	1004704a <HAL_RADIO_TIMER_StopVirtualTimer+0xa2>
    RADIO_TIMER_Context.rootNode = rootNode;
10047042:	4b04      	ldr	r3, [pc, #16]	@ (10047054 <HAL_RADIO_TIMER_StopVirtualTimer+0xac>)
10047044:	218c      	movs	r1, #140	@ 0x8c
10047046:	69fa      	ldr	r2, [r7, #28]
10047048:	505a      	str	r2, [r3, r1]
}
1004704a:	46c0      	nop			@ (mov r8, r8)
1004704c:	46bd      	mov	sp, r7
1004704e:	b009      	add	sp, #36	@ 0x24
10047050:	bd90      	pop	{r4, r7, pc}
10047052:	46c0      	nop			@ (mov r8, r8)
10047054:	20000908 	.word	0x20000908

10047058 <HAL_RADIO_TIMER_WakeUpCallback>:
  * @brief   If the wakeup timer triggers for a host wakeup, a pending radio activity is programmed.
  *          If the wakeup timer triggers for a radio activity, a pending virtual timer callback is executed.
  * @retval  None
  */
void HAL_RADIO_TIMER_WakeUpCallback(void)
{
10047058:	b580      	push	{r7, lr}
1004705a:	b082      	sub	sp, #8
1004705c:	af00      	add	r7, sp, #0
  volatile uint32_t status = 0;
1004705e:	2300      	movs	r3, #0
10047060:	607b      	str	r3, [r7, #4]
  uint8_t expired;
  UNUSED(status);
10047062:	687b      	ldr	r3, [r7, #4]
  _check_radio_activity(&RADIO_TIMER_Context.radioTimer, &expired);
10047064:	1cfa      	adds	r2, r7, #3
10047066:	4b0f      	ldr	r3, [pc, #60]	@ (100470a4 <HAL_RADIO_TIMER_WakeUpCallback+0x4c>)
10047068:	0011      	movs	r1, r2
1004706a:	0018      	movs	r0, r3
1004706c:	f000 fcee 	bl	10047a4c <_check_radio_activity>
  if (RADIO_TIMER_Context.hostIsRadioPending)
10047070:	4b0d      	ldr	r3, [pc, #52]	@ (100470a8 <HAL_RADIO_TIMER_WakeUpCallback+0x50>)
10047072:	2295      	movs	r2, #149	@ 0x95
10047074:	5c9b      	ldrb	r3, [r3, r2]
10047076:	2b00      	cmp	r3, #0
10047078:	d005      	beq.n	10047086 <HAL_RADIO_TIMER_WakeUpCallback+0x2e>
  {
    RADIO_TIMER_Context.hostIsRadioPending = 0;
1004707a:	4b0b      	ldr	r3, [pc, #44]	@ (100470a8 <HAL_RADIO_TIMER_WakeUpCallback+0x50>)
1004707c:	2295      	movs	r2, #149	@ 0x95
1004707e:	2100      	movs	r1, #0
10047080:	5499      	strb	r1, [r3, r2]
    HAL_RADIO_TIMER_TimeoutCallback();
10047082:	f000 f815 	bl	100470b0 <HAL_RADIO_TIMER_TimeoutCallback>
  }

  LL_RADIO_TIMER_ClearFlag_BLEWakeup(WAKEUP);
10047086:	4b09      	ldr	r3, [pc, #36]	@ (100470ac <HAL_RADIO_TIMER_WakeUpCallback+0x54>)
10047088:	0018      	movs	r0, r3
1004708a:	f7ff fb1b 	bl	100466c4 <LL_RADIO_TIMER_ClearFlag_BLEWakeup>
  status = LL_RADIO_TIMER_IsActiveFlag_BLEWakeup(WAKEUP);
1004708e:	4b07      	ldr	r3, [pc, #28]	@ (100470ac <HAL_RADIO_TIMER_WakeUpCallback+0x54>)
10047090:	0018      	movs	r0, r3
10047092:	f7ff fb25 	bl	100466e0 <LL_RADIO_TIMER_IsActiveFlag_BLEWakeup>
10047096:	0003      	movs	r3, r0
10047098:	607b      	str	r3, [r7, #4]
}
1004709a:	46c0      	nop			@ (mov r8, r8)
1004709c:	46bd      	mov	sp, r7
1004709e:	b002      	add	sp, #8
100470a0:	bd80      	pop	{r7, pc}
100470a2:	46c0      	nop			@ (mov r8, r8)
100470a4:	20000960 	.word	0x20000960
100470a8:	20000908 	.word	0x20000908
100470ac:	60001800 	.word	0x60001800

100470b0 <HAL_RADIO_TIMER_TimeoutCallback>:
/**
  * @brief  Virtual timer Timeout Callback. It signals that a host timeout occurred.
  * @retval None
  */
void HAL_RADIO_TIMER_TimeoutCallback(void)
{
100470b0:	b580      	push	{r7, lr}
100470b2:	b082      	sub	sp, #8
100470b4:	af00      	add	r7, sp, #0
  volatile uint32_t status = 0;
100470b6:	2300      	movs	r3, #0
100470b8:	607b      	str	r3, [r7, #4]
  UNUSED(status);
100470ba:	687b      	ldr	r3, [r7, #4]
#if defined (STM32WB06) || defined (STM32WB07)
  RADIO_TIMER_Context.hostIsRadioPending = 0;
100470bc:	4b15      	ldr	r3, [pc, #84]	@ (10047114 <HAL_RADIO_TIMER_TimeoutCallback+0x64>)
100470be:	2295      	movs	r2, #149	@ 0x95
100470c0:	2100      	movs	r1, #0
100470c2:	5499      	strb	r1, [r3, r2]
#endif

  /* Disable host timer */
  LL_RADIO_TIMER_DisableCPUWakeupTimer(WAKEUP);
100470c4:	4b14      	ldr	r3, [pc, #80]	@ (10047118 <HAL_RADIO_TIMER_TimeoutCallback+0x68>)
100470c6:	0018      	movs	r0, r3
100470c8:	f7ff fa6c 	bl	100465a4 <LL_RADIO_TIMER_DisableCPUWakeupTimer>
  INCREMENT_EXPIRE_COUNT_ISR;
100470cc:	4b11      	ldr	r3, [pc, #68]	@ (10047114 <HAL_RADIO_TIMER_TimeoutCallback+0x64>)
100470ce:	2291      	movs	r2, #145	@ 0x91
100470d0:	5c9b      	ldrb	r3, [r3, r2]
100470d2:	3301      	adds	r3, #1
100470d4:	4a0f      	ldr	r2, [pc, #60]	@ (10047114 <HAL_RADIO_TIMER_TimeoutCallback+0x64>)
100470d6:	2192      	movs	r1, #146	@ 0x92
100470d8:	5c52      	ldrb	r2, [r2, r1]
100470da:	4293      	cmp	r3, r2
100470dc:	d103      	bne.n	100470e6 <HAL_RADIO_TIMER_TimeoutCallback+0x36>
100470de:	4b0d      	ldr	r3, [pc, #52]	@ (10047114 <HAL_RADIO_TIMER_TimeoutCallback+0x64>)
100470e0:	2291      	movs	r2, #145	@ 0x91
100470e2:	5c9b      	ldrb	r3, [r3, r2]
100470e4:	e004      	b.n	100470f0 <HAL_RADIO_TIMER_TimeoutCallback+0x40>
100470e6:	4b0b      	ldr	r3, [pc, #44]	@ (10047114 <HAL_RADIO_TIMER_TimeoutCallback+0x64>)
100470e8:	2291      	movs	r2, #145	@ 0x91
100470ea:	5c9b      	ldrb	r3, [r3, r2]
100470ec:	3301      	adds	r3, #1
100470ee:	b2db      	uxtb	r3, r3
100470f0:	4a08      	ldr	r2, [pc, #32]	@ (10047114 <HAL_RADIO_TIMER_TimeoutCallback+0x64>)
100470f2:	2191      	movs	r1, #145	@ 0x91
100470f4:	5453      	strb	r3, [r2, r1]
  /* Clear the interrupt */
  LL_RADIO_TIMER_ClearFlag_CPUWakeup(WAKEUP);
100470f6:	4b08      	ldr	r3, [pc, #32]	@ (10047118 <HAL_RADIO_TIMER_TimeoutCallback+0x68>)
100470f8:	0018      	movs	r0, r3
100470fa:	f7ff fb02 	bl	10046702 <LL_RADIO_TIMER_ClearFlag_CPUWakeup>
  status = LL_RADIO_TIMER_IsActiveFlag_CPUWakeup(WAKEUP);
100470fe:	4b06      	ldr	r3, [pc, #24]	@ (10047118 <HAL_RADIO_TIMER_TimeoutCallback+0x68>)
10047100:	0018      	movs	r0, r3
10047102:	f7ff fb0c 	bl	1004671e <LL_RADIO_TIMER_IsActiveFlag_CPUWakeup>
10047106:	0003      	movs	r3, r0
10047108:	607b      	str	r3, [r7, #4]
}
1004710a:	46c0      	nop			@ (mov r8, r8)
1004710c:	46bd      	mov	sp, r7
1004710e:	b002      	add	sp, #8
10047110:	bd80      	pop	{r7, pc}
10047112:	46c0      	nop			@ (mov r8, r8)
10047114:	20000908 	.word	0x20000908
10047118:	60001800 	.word	0x60001800

1004711c <_calibrationProcedure>:
/** @defgroup RADIO_TIMER_Private_Functions  RADIO TIMER Private Functions
  * @{
  */

static void _calibrationProcedure(void)
{
1004711c:	b580      	push	{r7, lr}
1004711e:	af00      	add	r7, sp, #0
  /* Make sure any pending calibration is over */
  while (LL_RADIO_TIMER_IsActiveFlag_LSICalibrationEnded(RADIO_CTRL) == 0);
10047120:	46c0      	nop			@ (mov r8, r8)
10047122:	4b0b      	ldr	r3, [pc, #44]	@ (10047150 <_calibrationProcedure+0x34>)
10047124:	0018      	movs	r0, r3
10047126:	f7ff fb44 	bl	100467b2 <LL_RADIO_TIMER_IsActiveFlag_LSICalibrationEnded>
1004712a:	1e03      	subs	r3, r0, #0
1004712c:	d0f9      	beq.n	10047122 <_calibrationProcedure+0x6>

  /* Set SLOW_COUNT to 23, that is calibrate over 24 clock periods, this number
  cannot be changed without changing all the integer maths function in the
  file  */
  LL_RADIO_TIMER_SetLSIWindowCalibrationLength(RADIO_CTRL, 23);
1004712e:	4b08      	ldr	r3, [pc, #32]	@ (10047150 <_calibrationProcedure+0x34>)
10047130:	2117      	movs	r1, #23
10047132:	0018      	movs	r0, r3
10047134:	f7ff fb04 	bl	10046740 <LL_RADIO_TIMER_SetLSIWindowCalibrationLength>

  /* Start a calibration and take the correct freq */
  _timer_calibrate(&RADIO_TIMER_Context.calibrationData);
10047138:	4b06      	ldr	r3, [pc, #24]	@ (10047154 <_calibrationProcedure+0x38>)
1004713a:	0018      	movs	r0, r3
1004713c:	f000 f81e 	bl	1004717c <_timer_calibrate>
  /* For first time set last to current */
  RADIO_TIMER_Context.calibrationData.last_period1 = RADIO_TIMER_Context.calibrationData.period1;
10047140:	4b05      	ldr	r3, [pc, #20]	@ (10047158 <_calibrationProcedure+0x3c>)
10047142:	69da      	ldr	r2, [r3, #28]
10047144:	4b04      	ldr	r3, [pc, #16]	@ (10047158 <_calibrationProcedure+0x3c>)
10047146:	621a      	str	r2, [r3, #32]

}
10047148:	46c0      	nop			@ (mov r8, r8)
1004714a:	46bd      	mov	sp, r7
1004714c:	bd80      	pop	{r7, pc}
1004714e:	46c0      	nop			@ (mov r8, r8)
10047150:	60001000 	.word	0x60001000
10047154:	20000918 	.word	0x20000918
10047158:	20000908 	.word	0x20000908

1004715c <_timer_start_calibration>:

static void _timer_start_calibration(void)
{
1004715c:	b580      	push	{r7, lr}
1004715e:	af00      	add	r7, sp, #0
  /* Clear any pending interrupt */
  LL_RADIO_TIMER_ClearFlag_LSICalibrationEnded(RADIO_CTRL);
10047160:	4b05      	ldr	r3, [pc, #20]	@ (10047178 <_timer_start_calibration+0x1c>)
10047162:	0018      	movs	r0, r3
10047164:	f7ff fb17 	bl	10046796 <LL_RADIO_TIMER_ClearFlag_LSICalibrationEnded>
  /* Start calibration */
  LL_RADIO_TIMER_StartLSICalibration(RADIO_CTRL);
10047168:	4b03      	ldr	r3, [pc, #12]	@ (10047178 <_timer_start_calibration+0x1c>)
1004716a:	0018      	movs	r0, r3
1004716c:	f7ff faf4 	bl	10046758 <LL_RADIO_TIMER_StartLSICalibration>
}
10047170:	46c0      	nop			@ (mov r8, r8)
10047172:	46bd      	mov	sp, r7
10047174:	bd80      	pop	{r7, pc}
10047176:	46c0      	nop			@ (mov r8, r8)
10047178:	60001000 	.word	0x60001000

1004717c <_timer_calibrate>:

static void _timer_calibrate(CalibrationDataTypeDef *calibrationData)
{
1004717c:	b580      	push	{r7, lr}
1004717e:	b082      	sub	sp, #8
10047180:	af00      	add	r7, sp, #0
10047182:	6078      	str	r0, [r7, #4]
  _timer_start_calibration();
10047184:	f7ff ffea 	bl	1004715c <_timer_start_calibration>
  while (LL_RADIO_TIMER_IsActiveFlag_LSICalibrationEnded(RADIO_CTRL) == 0);
10047188:	46c0      	nop			@ (mov r8, r8)
1004718a:	4b07      	ldr	r3, [pc, #28]	@ (100471a8 <_timer_calibrate+0x2c>)
1004718c:	0018      	movs	r0, r3
1004718e:	f7ff fb10 	bl	100467b2 <LL_RADIO_TIMER_IsActiveFlag_LSICalibrationEnded>
10047192:	1e03      	subs	r3, r0, #0
10047194:	d0f9      	beq.n	1004718a <_timer_calibrate+0xe>
  _get_calibration_data(calibrationData);
10047196:	687b      	ldr	r3, [r7, #4]
10047198:	0018      	movs	r0, r3
1004719a:	f000 f807 	bl	100471ac <_get_calibration_data>
}
1004719e:	46c0      	nop			@ (mov r8, r8)
100471a0:	46bd      	mov	sp, r7
100471a2:	b002      	add	sp, #8
100471a4:	bd80      	pop	{r7, pc}
100471a6:	46c0      	nop			@ (mov r8, r8)
100471a8:	60001000 	.word	0x60001000

100471ac <_get_calibration_data>:

static void _get_calibration_data(CalibrationDataTypeDef *calibrationData)
{
100471ac:	b580      	push	{r7, lr}
100471ae:	b08a      	sub	sp, #40	@ 0x28
100471b0:	af00      	add	r7, sp, #0
100471b2:	6078      	str	r0, [r7, #4]
  int32_t b2;
  int32_t mult;
  int32_t a1;
  int32_t a2;

  period =  LL_RADIO_TIMER_GetLSIPeriod(RADIO_CTRL);
100471b4:	4b2e      	ldr	r3, [pc, #184]	@ (10047270 <_get_calibration_data+0xc4>)
100471b6:	0018      	movs	r0, r3
100471b8:	f7ff fad9 	bl	1004676e <LL_RADIO_TIMER_GetLSIPeriod>
100471bc:	0003      	movs	r3, r0
100471be:	627b      	str	r3, [r7, #36]	@ 0x24
  while (period != LL_RADIO_TIMER_GetLSIPeriod(RADIO_CTRL) || period == 0)
100471c0:	e005      	b.n	100471ce <_get_calibration_data+0x22>
  {
    period = LL_RADIO_TIMER_GetLSIPeriod(RADIO_CTRL);
100471c2:	4b2b      	ldr	r3, [pc, #172]	@ (10047270 <_get_calibration_data+0xc4>)
100471c4:	0018      	movs	r0, r3
100471c6:	f7ff fad2 	bl	1004676e <LL_RADIO_TIMER_GetLSIPeriod>
100471ca:	0003      	movs	r3, r0
100471cc:	627b      	str	r3, [r7, #36]	@ 0x24
  while (period != LL_RADIO_TIMER_GetLSIPeriod(RADIO_CTRL) || period == 0)
100471ce:	4b28      	ldr	r3, [pc, #160]	@ (10047270 <_get_calibration_data+0xc4>)
100471d0:	0018      	movs	r0, r3
100471d2:	f7ff facc 	bl	1004676e <LL_RADIO_TIMER_GetLSIPeriod>
100471d6:	0002      	movs	r2, r0
100471d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
100471da:	429a      	cmp	r2, r3
100471dc:	d1f1      	bne.n	100471c2 <_get_calibration_data+0x16>
100471de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
100471e0:	2b00      	cmp	r3, #0
100471e2:	d0ee      	beq.n	100471c2 <_get_calibration_data+0x16>
  }

  mul1 = 0x8BCF6 ;
100471e4:	4b23      	ldr	r3, [pc, #140]	@ (10047274 <_get_calibration_data+0xc8>)
100471e6:	61fb      	str	r3, [r7, #28]
  b1 = period >> 8 ;
100471e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
100471ea:	121b      	asrs	r3, r3, #8
100471ec:	61bb      	str	r3, [r7, #24]
  b2 = period & 0xff ;
100471ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
100471f0:	22ff      	movs	r2, #255	@ 0xff
100471f2:	4013      	ands	r3, r2
100471f4:	617b      	str	r3, [r7, #20]
  calibrationData->period1 = ((mul1 * b1) + ((b2 * mul1) >> 8) + 16) >> 5;
100471f6:	69fb      	ldr	r3, [r7, #28]
100471f8:	69ba      	ldr	r2, [r7, #24]
100471fa:	435a      	muls	r2, r3
100471fc:	697b      	ldr	r3, [r7, #20]
100471fe:	69f9      	ldr	r1, [r7, #28]
10047200:	434b      	muls	r3, r1
10047202:	121b      	asrs	r3, r3, #8
10047204:	18d3      	adds	r3, r2, r3
10047206:	3310      	adds	r3, #16
10047208:	115a      	asrs	r2, r3, #5
1004720a:	687b      	ldr	r3, [r7, #4]
1004720c:	60da      	str	r2, [r3, #12]
  calibrationData->period = period;
1004720e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
10047210:	687b      	ldr	r3, [r7, #4]
10047212:	601a      	str	r2, [r3, #0]

  mult = 0x753 ;
10047214:	4b18      	ldr	r3, [pc, #96]	@ (10047278 <_get_calibration_data+0xcc>)
10047216:	613b      	str	r3, [r7, #16]
  freq = LL_RADIO_TIMER_GetLSIFrequency(RADIO_CTRL);
10047218:	4b15      	ldr	r3, [pc, #84]	@ (10047270 <_get_calibration_data+0xc4>)
1004721a:	0018      	movs	r0, r3
1004721c:	f7ff fab1 	bl	10046782 <LL_RADIO_TIMER_GetLSIFrequency>
10047220:	0003      	movs	r3, r0
10047222:	623b      	str	r3, [r7, #32]

  while (freq != LL_RADIO_TIMER_GetLSIFrequency(RADIO_CTRL) || freq == 0)
10047224:	e005      	b.n	10047232 <_get_calibration_data+0x86>
  {
    freq = LL_RADIO_TIMER_GetLSIFrequency(RADIO_CTRL);
10047226:	4b12      	ldr	r3, [pc, #72]	@ (10047270 <_get_calibration_data+0xc4>)
10047228:	0018      	movs	r0, r3
1004722a:	f7ff faaa 	bl	10046782 <LL_RADIO_TIMER_GetLSIFrequency>
1004722e:	0003      	movs	r3, r0
10047230:	623b      	str	r3, [r7, #32]
  while (freq != LL_RADIO_TIMER_GetLSIFrequency(RADIO_CTRL) || freq == 0)
10047232:	4b0f      	ldr	r3, [pc, #60]	@ (10047270 <_get_calibration_data+0xc4>)
10047234:	0018      	movs	r0, r3
10047236:	f7ff faa4 	bl	10046782 <LL_RADIO_TIMER_GetLSIFrequency>
1004723a:	0002      	movs	r2, r0
1004723c:	6a3b      	ldr	r3, [r7, #32]
1004723e:	429a      	cmp	r2, r3
10047240:	d1f1      	bne.n	10047226 <_get_calibration_data+0x7a>
10047242:	6a3b      	ldr	r3, [r7, #32]
10047244:	2b00      	cmp	r3, #0
10047246:	d0ee      	beq.n	10047226 <_get_calibration_data+0x7a>
  }
  a1 = freq >> 6 ;
10047248:	6a3b      	ldr	r3, [r7, #32]
1004724a:	119b      	asrs	r3, r3, #6
1004724c:	60fb      	str	r3, [r7, #12]
  a2 = a1 * mult ;
1004724e:	68fb      	ldr	r3, [r7, #12]
10047250:	693a      	ldr	r2, [r7, #16]
10047252:	4353      	muls	r3, r2
10047254:	60bb      	str	r3, [r7, #8]
  calibrationData->freq1 = (a2 + 128) >> 8 ;
10047256:	68bb      	ldr	r3, [r7, #8]
10047258:	3380      	adds	r3, #128	@ 0x80
1004725a:	121a      	asrs	r2, r3, #8
1004725c:	687b      	ldr	r3, [r7, #4]
1004725e:	609a      	str	r2, [r3, #8]
  calibrationData->freq = freq;
10047260:	6a3a      	ldr	r2, [r7, #32]
10047262:	687b      	ldr	r3, [r7, #4]
10047264:	605a      	str	r2, [r3, #4]
}
10047266:	46c0      	nop			@ (mov r8, r8)
10047268:	46bd      	mov	sp, r7
1004726a:	b00a      	add	sp, #40	@ 0x28
1004726c:	bd80      	pop	{r7, pc}
1004726e:	46c0      	nop			@ (mov r8, r8)
10047270:	60001000 	.word	0x60001000
10047274:	0008bcf6 	.word	0x0008bcf6
10047278:	00000753 	.word	0x00000753

1004727c <_configureTxRxDelay>:

static void _configureTxRxDelay(RADIO_TIMER_ContextTypeDef *context, uint8_t calculate_st)
{
1004727c:	b590      	push	{r4, r7, lr}
1004727e:	b085      	sub	sp, #20
10047280:	af00      	add	r7, sp, #0
10047282:	6078      	str	r0, [r7, #4]
10047284:	000a      	movs	r2, r1
10047286:	1cfb      	adds	r3, r7, #3
10047288:	701a      	strb	r2, [r3, #0]
  uint8_t tx_delay_start;

  tx_delay_start = (BLUEGLOB->TXDELAYSTART * 125 / 1000) + 1;
1004728a:	4b38      	ldr	r3, [pc, #224]	@ (1004736c <_configureTxRxDelay+0xf0>)
1004728c:	7b9b      	ldrb	r3, [r3, #14]
1004728e:	b2db      	uxtb	r3, r3
10047290:	2b00      	cmp	r3, #0
10047292:	da00      	bge.n	10047296 <_configureTxRxDelay+0x1a>
10047294:	3307      	adds	r3, #7
10047296:	10db      	asrs	r3, r3, #3
10047298:	b2da      	uxtb	r2, r3
1004729a:	240f      	movs	r4, #15
1004729c:	193b      	adds	r3, r7, r4
1004729e:	3201      	adds	r2, #1
100472a0:	701a      	strb	r2, [r3, #0]

  BLUEGLOB->WAKEUPINITDELAY =  blue_unit_conversion(WAKEUP_INIT_DELAY, context->calibrationData.freq1, MULT64_THR_FREQ);
100472a2:	687b      	ldr	r3, [r7, #4]
100472a4:	699b      	ldr	r3, [r3, #24]
100472a6:	0019      	movs	r1, r3
100472a8:	4b31      	ldr	r3, [pc, #196]	@ (10047370 <_configureTxRxDelay+0xf4>)
100472aa:	001a      	movs	r2, r3
100472ac:	201b      	movs	r0, #27
100472ae:	f7f8 ff07 	bl	100400c0 <blue_unit_conversion>
100472b2:	0002      	movs	r2, r0
100472b4:	4b2d      	ldr	r3, [pc, #180]	@ (1004736c <_configureTxRxDelay+0xf0>)
100472b6:	b2d2      	uxtb	r2, r2
100472b8:	715a      	strb	r2, [r3, #5]
  context->TxRxDelay.tim12_delay_mt = _us_to_machinetime(BLUEGLOB->TIMER12INITDELAYCAL);
100472ba:	4b2c      	ldr	r3, [pc, #176]	@ (1004736c <_configureTxRxDelay+0xf0>)
100472bc:	799b      	ldrb	r3, [r3, #6]
100472be:	b2db      	uxtb	r3, r3
100472c0:	0018      	movs	r0, r3
100472c2:	f000 f86d 	bl	100473a0 <_us_to_machinetime>
100472c6:	0003      	movs	r3, r0
100472c8:	b2d9      	uxtb	r1, r3
100472ca:	687b      	ldr	r3, [r7, #4]
100472cc:	223d      	movs	r2, #61	@ 0x3d
100472ce:	5499      	strb	r1, [r3, r2]
  context->TxRxDelay.tx_cal_delay = _us_to_machinetime(BLUEGLOB->TRANSMITCALDELAYCHK + tx_delay_start);
100472d0:	4b26      	ldr	r3, [pc, #152]	@ (1004736c <_configureTxRxDelay+0xf0>)
100472d2:	7a1b      	ldrb	r3, [r3, #8]
100472d4:	b2db      	uxtb	r3, r3
100472d6:	001a      	movs	r2, r3
100472d8:	193b      	adds	r3, r7, r4
100472da:	781b      	ldrb	r3, [r3, #0]
100472dc:	18d3      	adds	r3, r2, r3
100472de:	0018      	movs	r0, r3
100472e0:	f000 f85e 	bl	100473a0 <_us_to_machinetime>
100472e4:	0003      	movs	r3, r0
100472e6:	b2d9      	uxtb	r1, r3
100472e8:	687b      	ldr	r3, [r7, #4]
100472ea:	2238      	movs	r2, #56	@ 0x38
100472ec:	5499      	strb	r1, [r3, r2]
  context->TxRxDelay.tx_no_cal_delay = _us_to_machinetime(BLUEGLOB->TRANSMITNOCALDELAYCHK + tx_delay_start);
100472ee:	4b1f      	ldr	r3, [pc, #124]	@ (1004736c <_configureTxRxDelay+0xf0>)
100472f0:	7a5b      	ldrb	r3, [r3, #9]
100472f2:	b2db      	uxtb	r3, r3
100472f4:	001a      	movs	r2, r3
100472f6:	193b      	adds	r3, r7, r4
100472f8:	781b      	ldrb	r3, [r3, #0]
100472fa:	18d3      	adds	r3, r2, r3
100472fc:	0018      	movs	r0, r3
100472fe:	f000 f84f 	bl	100473a0 <_us_to_machinetime>
10047302:	0003      	movs	r3, r0
10047304:	b2d9      	uxtb	r1, r3
10047306:	687b      	ldr	r3, [r7, #4]
10047308:	2239      	movs	r2, #57	@ 0x39
1004730a:	5499      	strb	r1, [r3, r2]
  context->TxRxDelay.rx_cal_delay = _us_to_machinetime(BLUEGLOB->RECEIVECALDELAYCHK);
1004730c:	4b17      	ldr	r3, [pc, #92]	@ (1004736c <_configureTxRxDelay+0xf0>)
1004730e:	7a9b      	ldrb	r3, [r3, #10]
10047310:	b2db      	uxtb	r3, r3
10047312:	0018      	movs	r0, r3
10047314:	f000 f844 	bl	100473a0 <_us_to_machinetime>
10047318:	0003      	movs	r3, r0
1004731a:	b2d9      	uxtb	r1, r3
1004731c:	687b      	ldr	r3, [r7, #4]
1004731e:	223a      	movs	r2, #58	@ 0x3a
10047320:	5499      	strb	r1, [r3, r2]
  context->TxRxDelay.rx_no_cal_delay = _us_to_machinetime(BLUEGLOB->RECEIVENOCALDELAYCHK);
10047322:	4b12      	ldr	r3, [pc, #72]	@ (1004736c <_configureTxRxDelay+0xf0>)
10047324:	7adb      	ldrb	r3, [r3, #11]
10047326:	b2db      	uxtb	r3, r3
10047328:	0018      	movs	r0, r3
1004732a:	f000 f839 	bl	100473a0 <_us_to_machinetime>
1004732e:	0003      	movs	r3, r0
10047330:	b2d9      	uxtb	r1, r3
10047332:	687b      	ldr	r3, [r7, #4]
10047334:	223b      	movs	r2, #59	@ 0x3b
10047336:	5499      	strb	r1, [r3, r2]

  if (calculate_st)
10047338:	1cfb      	adds	r3, r7, #3
1004733a:	781b      	ldrb	r3, [r3, #0]
1004733c:	2b00      	cmp	r3, #0
1004733e:	d010      	beq.n	10047362 <_configureTxRxDelay+0xe6>
  {
    context->TxRxDelay.tx_cal_delay_st    = _us_to_systime(BLUEGLOB->TRANSMITCALDELAYCHK + tx_delay_start) + WAKEUP_INIT_DELAY;
10047340:	4b0a      	ldr	r3, [pc, #40]	@ (1004736c <_configureTxRxDelay+0xf0>)
10047342:	7a1b      	ldrb	r3, [r3, #8]
10047344:	b2db      	uxtb	r3, r3
10047346:	001a      	movs	r2, r3
10047348:	193b      	adds	r3, r7, r4
1004734a:	781b      	ldrb	r3, [r3, #0]
1004734c:	18d3      	adds	r3, r2, r3
1004734e:	0018      	movs	r0, r3
10047350:	f000 f810 	bl	10047374 <_us_to_systime>
10047354:	0003      	movs	r3, r0
10047356:	b2db      	uxtb	r3, r3
10047358:	331b      	adds	r3, #27
1004735a:	b2d9      	uxtb	r1, r3
1004735c:	687b      	ldr	r3, [r7, #4]
1004735e:	223c      	movs	r2, #60	@ 0x3c
10047360:	5499      	strb	r1, [r3, r2]
  }

}
10047362:	46c0      	nop			@ (mov r8, r8)
10047364:	46bd      	mov	sp, r7
10047366:	b005      	add	sp, #20
10047368:	bd90      	pop	{r4, r7, pc}
1004736a:	46c0      	nop			@ (mov r8, r8)
1004736c:	200000c0 	.word	0x200000c0
10047370:	00000326 	.word	0x00000326

10047374 <_us_to_systime>:

static uint32_t _us_to_systime(uint32_t time)
{
10047374:	b580      	push	{r7, lr}
10047376:	b084      	sub	sp, #16
10047378:	af00      	add	r7, sp, #0
1004737a:	6078      	str	r0, [r7, #4]
  uint32_t t1, t2;
  t1 = time * 0x68;
1004737c:	687b      	ldr	r3, [r7, #4]
1004737e:	2268      	movs	r2, #104	@ 0x68
10047380:	4353      	muls	r3, r2
10047382:	60fb      	str	r3, [r7, #12]
  t2 = time * 0xDB;
10047384:	687b      	ldr	r3, [r7, #4]
10047386:	22db      	movs	r2, #219	@ 0xdb
10047388:	4353      	muls	r3, r2
1004738a:	60bb      	str	r3, [r7, #8]
  return (t1 >> 8) + (t2 >> 16);
1004738c:	68fb      	ldr	r3, [r7, #12]
1004738e:	0a1a      	lsrs	r2, r3, #8
10047390:	68bb      	ldr	r3, [r7, #8]
10047392:	0c1b      	lsrs	r3, r3, #16
10047394:	18d3      	adds	r3, r2, r3
}
10047396:	0018      	movs	r0, r3
10047398:	46bd      	mov	sp, r7
1004739a:	b004      	add	sp, #16
1004739c:	bd80      	pop	{r7, pc}
	...

100473a0 <_us_to_machinetime>:

static uint32_t _us_to_machinetime(uint32_t time)
{
100473a0:	b5b0      	push	{r4, r5, r7, lr}
100473a2:	b088      	sub	sp, #32
100473a4:	af00      	add	r7, sp, #0
100473a6:	60f8      	str	r0, [r7, #12]
  uint64_t tmp = (uint64_t)RADIO_TIMER_Context.calibrationData.freq * (uint64_t)time * (uint64_t)3U;
100473a8:	4915      	ldr	r1, [pc, #84]	@ (10047400 <_us_to_machinetime+0x60>)
100473aa:	6949      	ldr	r1, [r1, #20]
100473ac:	6039      	str	r1, [r7, #0]
100473ae:	2100      	movs	r1, #0
100473b0:	6079      	str	r1, [r7, #4]
100473b2:	68f9      	ldr	r1, [r7, #12]
100473b4:	000a      	movs	r2, r1
100473b6:	2100      	movs	r1, #0
100473b8:	000b      	movs	r3, r1
100473ba:	6838      	ldr	r0, [r7, #0]
100473bc:	6879      	ldr	r1, [r7, #4]
100473be:	f7f9 f891 	bl	100404e4 <__aeabi_lmul>
100473c2:	0002      	movs	r2, r0
100473c4:	000b      	movs	r3, r1
100473c6:	0010      	movs	r0, r2
100473c8:	0019      	movs	r1, r3
100473ca:	0002      	movs	r2, r0
100473cc:	000b      	movs	r3, r1
100473ce:	1892      	adds	r2, r2, r2
100473d0:	415b      	adcs	r3, r3
100473d2:	1812      	adds	r2, r2, r0
100473d4:	414b      	adcs	r3, r1
100473d6:	61ba      	str	r2, [r7, #24]
100473d8:	61fb      	str	r3, [r7, #28]
  uint32_t time_mt = ((tmp + (1 << 26)) >> 27) & TIMER_MAX_VALUE;
100473da:	69ba      	ldr	r2, [r7, #24]
100473dc:	69fb      	ldr	r3, [r7, #28]
100473de:	2080      	movs	r0, #128	@ 0x80
100473e0:	04c0      	lsls	r0, r0, #19
100473e2:	2100      	movs	r1, #0
100473e4:	1812      	adds	r2, r2, r0
100473e6:	414b      	adcs	r3, r1
100473e8:	0159      	lsls	r1, r3, #5
100473ea:	0ed4      	lsrs	r4, r2, #27
100473ec:	430c      	orrs	r4, r1
100473ee:	0edd      	lsrs	r5, r3, #27
100473f0:	0023      	movs	r3, r4
100473f2:	617b      	str	r3, [r7, #20]

  return time_mt;
100473f4:	697b      	ldr	r3, [r7, #20]
}
100473f6:	0018      	movs	r0, r3
100473f8:	46bd      	mov	sp, r7
100473fa:	b008      	add	sp, #32
100473fc:	bdb0      	pop	{r4, r5, r7, pc}
100473fe:	46c0      	nop			@ (mov r8, r8)
10047400:	20000908 	.word	0x20000908

10047404 <_update_xtal_startup_time>:

static void _update_xtal_startup_time(uint16_t hs_startup_time, int32_t freq1)
{
10047404:	b580      	push	{r7, lr}
10047406:	b084      	sub	sp, #16
10047408:	af00      	add	r7, sp, #0
1004740a:	0002      	movs	r2, r0
1004740c:	6039      	str	r1, [r7, #0]
1004740e:	1dbb      	adds	r3, r7, #6
10047410:	801a      	strh	r2, [r3, #0]
  int32_t time1;

  time1 = blue_unit_conversion(hs_startup_time, freq1, MULT64_THR_FREQ);
10047412:	1dbb      	adds	r3, r7, #6
10047414:	881b      	ldrh	r3, [r3, #0]
10047416:	6839      	ldr	r1, [r7, #0]
10047418:	4a0e      	ldr	r2, [pc, #56]	@ (10047454 <_update_xtal_startup_time+0x50>)
1004741a:	0018      	movs	r0, r3
1004741c:	f7f8 fe50 	bl	100400c0 <blue_unit_conversion>
10047420:	0003      	movs	r3, r0
10047422:	60fb      	str	r3, [r7, #12]
  if (time1 >= 4096)
10047424:	68fa      	ldr	r2, [r7, #12]
10047426:	2380      	movs	r3, #128	@ 0x80
10047428:	015b      	lsls	r3, r3, #5
1004742a:	429a      	cmp	r2, r3
1004742c:	db01      	blt.n	10047432 <_update_xtal_startup_time+0x2e>
  {
    time1 = 4095;
1004742e:	4b0a      	ldr	r3, [pc, #40]	@ (10047458 <_update_xtal_startup_time+0x54>)
10047430:	60fb      	str	r3, [r7, #12]
  }
  if (time1 < 16)
10047432:	68fb      	ldr	r3, [r7, #12]
10047434:	2b0f      	cmp	r3, #15
10047436:	dc01      	bgt.n	1004743c <_update_xtal_startup_time+0x38>
  {
    time1 = 16;
10047438:	2310      	movs	r3, #16
1004743a:	60fb      	str	r3, [r7, #12]
  }
  LL_RADIO_TIMER_SetWakeupOffset(WAKEUP, (time1 >> 4));
1004743c:	68fb      	ldr	r3, [r7, #12]
1004743e:	111b      	asrs	r3, r3, #4
10047440:	b2db      	uxtb	r3, r3
10047442:	4a06      	ldr	r2, [pc, #24]	@ (1004745c <_update_xtal_startup_time+0x58>)
10047444:	0019      	movs	r1, r3
10047446:	0010      	movs	r0, r2
10047448:	f7ff f8bc 	bl	100465c4 <LL_RADIO_TIMER_SetWakeupOffset>
}
1004744c:	46c0      	nop			@ (mov r8, r8)
1004744e:	46bd      	mov	sp, r7
10047450:	b004      	add	sp, #16
10047452:	bd80      	pop	{r7, pc}
10047454:	00000326 	.word	0x00000326
10047458:	00000fff 	.word	0x00000fff
1004745c:	60001800 	.word	0x60001800

10047460 <_calibration_callback>:

static void _calibration_callback(void *handle)
{
10047460:	b580      	push	{r7, lr}
10047462:	b082      	sub	sp, #8
10047464:	af00      	add	r7, sp, #0
10047466:	6078      	str	r0, [r7, #4]
  if (RADIO_TIMER_Context.calibrationSettings.periodicCalibration)
10047468:	4b06      	ldr	r3, [pc, #24]	@ (10047484 <_calibration_callback+0x24>)
1004746a:	781b      	ldrb	r3, [r3, #0]
1004746c:	2b00      	cmp	r3, #0
1004746e:	d001      	beq.n	10047474 <_calibration_callback+0x14>
  {
    _timer_start_calibration();
10047470:	f7ff fe74 	bl	1004715c <_timer_start_calibration>
  }
  RADIO_TIMER_Context.calibrationSettings.calibration_in_progress = TRUE;
10047474:	4b03      	ldr	r3, [pc, #12]	@ (10047484 <_calibration_callback+0x24>)
10047476:	2201      	movs	r2, #1
10047478:	721a      	strb	r2, [r3, #8]
}
1004747a:	46c0      	nop			@ (mov r8, r8)
1004747c:	46bd      	mov	sp, r7
1004747e:	b002      	add	sp, #8
10047480:	bd80      	pop	{r7, pc}
10047482:	46c0      	nop			@ (mov r8, r8)
10047484:	20000908 	.word	0x20000908

10047488 <_start_timer>:

static int32_t _start_timer(VTIMER_HandleType *timerHandle, uint64_t time)
{
10047488:	b590      	push	{r4, r7, lr}
1004748a:	b089      	sub	sp, #36	@ 0x24
1004748c:	af00      	add	r7, sp, #0
1004748e:	60f8      	str	r0, [r7, #12]
10047490:	603a      	str	r2, [r7, #0]
10047492:	607b      	str	r3, [r7, #4]
  uint8_t expired = 0;
10047494:	2313      	movs	r3, #19
10047496:	18fb      	adds	r3, r7, r3
10047498:	2200      	movs	r2, #0
1004749a:	701a      	strb	r2, [r3, #0]

  /* The timer is already started*/
  if (timerHandle->active)
1004749c:	68fb      	ldr	r3, [r7, #12]
1004749e:	7b1b      	ldrb	r3, [r3, #12]
100474a0:	2b00      	cmp	r3, #0
100474a2:	d001      	beq.n	100474a8 <_start_timer+0x20>
  {
    return 1;
100474a4:	2301      	movs	r3, #1
100474a6:	e047      	b.n	10047538 <_start_timer+0xb0>
  }
  timerHandle->expiryTime = time;
100474a8:	68f9      	ldr	r1, [r7, #12]
100474aa:	683a      	ldr	r2, [r7, #0]
100474ac:	687b      	ldr	r3, [r7, #4]
100474ae:	600a      	str	r2, [r1, #0]
100474b0:	604b      	str	r3, [r1, #4]
  timerHandle->active = TRUE;
100474b2:	68fb      	ldr	r3, [r7, #12]
100474b4:	2201      	movs	r2, #1
100474b6:	731a      	strb	r2, [r3, #12]
  if (_insert_timer_in_queue(RADIO_TIMER_Context.rootNode, timerHandle) == timerHandle)
100474b8:	4b21      	ldr	r3, [pc, #132]	@ (10047540 <_start_timer+0xb8>)
100474ba:	228c      	movs	r2, #140	@ 0x8c
100474bc:	589b      	ldr	r3, [r3, r2]
100474be:	68fa      	ldr	r2, [r7, #12]
100474c0:	0011      	movs	r1, r2
100474c2:	0018      	movs	r0, r3
100474c4:	f000 f95c 	bl	10047780 <_insert_timer_in_queue>
100474c8:	0002      	movs	r2, r0
100474ca:	68fb      	ldr	r3, [r7, #12]
100474cc:	4293      	cmp	r3, r2
100474ce:	d130      	bne.n	10047532 <_start_timer+0xaa>
  {
    RADIO_TIMER_Context.rootNode = _update_user_timeout(timerHandle, &expired);
100474d0:	2413      	movs	r4, #19
100474d2:	193a      	adds	r2, r7, r4
100474d4:	68fb      	ldr	r3, [r7, #12]
100474d6:	0011      	movs	r1, r2
100474d8:	0018      	movs	r0, r3
100474da:	f000 f89b 	bl	10047614 <_update_user_timeout>
100474de:	0002      	movs	r2, r0
100474e0:	4b17      	ldr	r3, [pc, #92]	@ (10047540 <_start_timer+0xb8>)
100474e2:	218c      	movs	r1, #140	@ 0x8c
100474e4:	505a      	str	r2, [r3, r1]
    if (expired)
100474e6:	193b      	adds	r3, r7, r4
100474e8:	781b      	ldrb	r3, [r3, #0]
100474ea:	2b00      	cmp	r3, #0
100474ec:	d021      	beq.n	10047532 <_start_timer+0xaa>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
100474ee:	f3ef 8310 	mrs	r3, PRIMASK
100474f2:	61bb      	str	r3, [r7, #24]
  return(result);
100474f4:	69bb      	ldr	r3, [r7, #24]
    {
      /* A new root timer is already expired, mimic timer expire that is normally signaled
       through the interrupt handler that increase the number of expired timers*/
      INCREMENT_EXPIRE_COUNT;
100474f6:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
100474f8:	b672      	cpsid	i
}
100474fa:	46c0      	nop			@ (mov r8, r8)
100474fc:	4b10      	ldr	r3, [pc, #64]	@ (10047540 <_start_timer+0xb8>)
100474fe:	2291      	movs	r2, #145	@ 0x91
10047500:	5c9b      	ldrb	r3, [r3, r2]
10047502:	3301      	adds	r3, #1
10047504:	4a0e      	ldr	r2, [pc, #56]	@ (10047540 <_start_timer+0xb8>)
10047506:	2192      	movs	r1, #146	@ 0x92
10047508:	5c52      	ldrb	r2, [r2, r1]
1004750a:	4293      	cmp	r3, r2
1004750c:	d103      	bne.n	10047516 <_start_timer+0x8e>
1004750e:	4b0c      	ldr	r3, [pc, #48]	@ (10047540 <_start_timer+0xb8>)
10047510:	2291      	movs	r2, #145	@ 0x91
10047512:	5c9b      	ldrb	r3, [r3, r2]
10047514:	e004      	b.n	10047520 <_start_timer+0x98>
10047516:	4b0a      	ldr	r3, [pc, #40]	@ (10047540 <_start_timer+0xb8>)
10047518:	2291      	movs	r2, #145	@ 0x91
1004751a:	5c9b      	ldrb	r3, [r3, r2]
1004751c:	3301      	adds	r3, #1
1004751e:	b2db      	uxtb	r3, r3
10047520:	4a07      	ldr	r2, [pc, #28]	@ (10047540 <_start_timer+0xb8>)
10047522:	2191      	movs	r1, #145	@ 0x91
10047524:	5453      	strb	r3, [r2, r1]
10047526:	69fb      	ldr	r3, [r7, #28]
10047528:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
1004752a:	697b      	ldr	r3, [r7, #20]
1004752c:	f383 8810 	msr	PRIMASK, r3
}
10047530:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return expired;
10047532:	2313      	movs	r3, #19
10047534:	18fb      	adds	r3, r7, r3
10047536:	781b      	ldrb	r3, [r3, #0]
}
10047538:	0018      	movs	r0, r3
1004753a:	46bd      	mov	sp, r7
1004753c:	b009      	add	sp, #36	@ 0x24
1004753e:	bd90      	pop	{r4, r7, pc}
10047540:	20000908 	.word	0x20000908

10047544 <_get_system_time_and_machine>:

static uint64_t _get_system_time_and_machine(RADIO_TIMER_ContextTypeDef *context, uint32_t *current_machine_time)
{
10047544:	b5b0      	push	{r4, r5, r7, lr}
10047546:	b08a      	sub	sp, #40	@ 0x28
10047548:	af00      	add	r7, sp, #0
1004754a:	60f8      	str	r0, [r7, #12]
1004754c:	60b9      	str	r1, [r7, #8]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
1004754e:	f3ef 8310 	mrs	r3, PRIMASK
10047552:	617b      	str	r3, [r7, #20]
  return(result);
10047554:	697b      	ldr	r3, [r7, #20]
  uint32_t difftime;
  uint64_t new_time;

  ATOMIC_SECTION_BEGIN();
10047556:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
10047558:	b672      	cpsid	i
}
1004755a:	46c0      	nop			@ (mov r8, r8)
  new_time = context->cumulative_time;
1004755c:	68fb      	ldr	r3, [r7, #12]
1004755e:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
10047560:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
10047562:	623a      	str	r2, [r7, #32]
10047564:	627b      	str	r3, [r7, #36]	@ 0x24
  *current_machine_time =  LL_RADIO_TIMER_GetAbsoluteTime(WAKEUP);
10047566:	4b29      	ldr	r3, [pc, #164]	@ (1004760c <_get_system_time_and_machine+0xc8>)
10047568:	0018      	movs	r0, r3
1004756a:	f7ff f85c 	bl	10046626 <LL_RADIO_TIMER_GetAbsoluteTime>
1004756e:	0002      	movs	r2, r0
10047570:	68bb      	ldr	r3, [r7, #8]
10047572:	601a      	str	r2, [r3, #0]
  difftime = TIME_ABSDIFF(*current_machine_time, context->last_machine_time);
10047574:	68bb      	ldr	r3, [r7, #8]
10047576:	681a      	ldr	r2, [r3, #0]
10047578:	68fb      	ldr	r3, [r7, #12]
1004757a:	2180      	movs	r1, #128	@ 0x80
1004757c:	585b      	ldr	r3, [r3, r1]
1004757e:	1ad3      	subs	r3, r2, r3
10047580:	61bb      	str	r3, [r7, #24]
  new_time += blue_unit_conversion(difftime, context->calibrationData.period1, MULT64_THR_PERIOD);
10047582:	68fb      	ldr	r3, [r7, #12]
10047584:	69db      	ldr	r3, [r3, #28]
10047586:	0019      	movs	r1, r3
10047588:	4a21      	ldr	r2, [pc, #132]	@ (10047610 <_get_system_time_and_machine+0xcc>)
1004758a:	69bb      	ldr	r3, [r7, #24]
1004758c:	0018      	movs	r0, r3
1004758e:	f7f8 fd97 	bl	100400c0 <blue_unit_conversion>
10047592:	0003      	movs	r3, r0
10047594:	603b      	str	r3, [r7, #0]
10047596:	2300      	movs	r3, #0
10047598:	607b      	str	r3, [r7, #4]
1004759a:	6a3a      	ldr	r2, [r7, #32]
1004759c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
1004759e:	6838      	ldr	r0, [r7, #0]
100475a0:	6879      	ldr	r1, [r7, #4]
100475a2:	1812      	adds	r2, r2, r0
100475a4:	414b      	adcs	r3, r1
100475a6:	623a      	str	r2, [r7, #32]
100475a8:	627b      	str	r3, [r7, #36]	@ 0x24
  if (new_time < context->last_system_time)
100475aa:	68fb      	ldr	r3, [r7, #12]
100475ac:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
100475ae:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
100475b0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
100475b2:	4299      	cmp	r1, r3
100475b4:	d305      	bcc.n	100475c2 <_get_system_time_and_machine+0x7e>
100475b6:	6a79      	ldr	r1, [r7, #36]	@ 0x24
100475b8:	4299      	cmp	r1, r3
100475ba:	d115      	bne.n	100475e8 <_get_system_time_and_machine+0xa4>
100475bc:	6a39      	ldr	r1, [r7, #32]
100475be:	4291      	cmp	r1, r2
100475c0:	d212      	bcs.n	100475e8 <_get_system_time_and_machine+0xa4>
  {
    new_time += blue_unit_conversion(TIMER_MAX_VALUE, context->calibrationData.period1, MULT64_THR_PERIOD);
100475c2:	68fb      	ldr	r3, [r7, #12]
100475c4:	69db      	ldr	r3, [r3, #28]
100475c6:	0019      	movs	r1, r3
100475c8:	4a11      	ldr	r2, [pc, #68]	@ (10047610 <_get_system_time_and_machine+0xcc>)
100475ca:	2301      	movs	r3, #1
100475cc:	425b      	negs	r3, r3
100475ce:	0018      	movs	r0, r3
100475d0:	f7f8 fd76 	bl	100400c0 <blue_unit_conversion>
100475d4:	0003      	movs	r3, r0
100475d6:	001c      	movs	r4, r3
100475d8:	2300      	movs	r3, #0
100475da:	001d      	movs	r5, r3
100475dc:	6a3a      	ldr	r2, [r7, #32]
100475de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
100475e0:	1912      	adds	r2, r2, r4
100475e2:	416b      	adcs	r3, r5
100475e4:	623a      	str	r2, [r7, #32]
100475e6:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  context->last_system_time = new_time;
100475e8:	68f9      	ldr	r1, [r7, #12]
100475ea:	6a3a      	ldr	r2, [r7, #32]
100475ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
100475ee:	678a      	str	r2, [r1, #120]	@ 0x78
100475f0:	67cb      	str	r3, [r1, #124]	@ 0x7c
100475f2:	69fb      	ldr	r3, [r7, #28]
100475f4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
100475f6:	693b      	ldr	r3, [r7, #16]
100475f8:	f383 8810 	msr	PRIMASK, r3
}
100475fc:	46c0      	nop			@ (mov r8, r8)
  ATOMIC_SECTION_END();

  return new_time;
100475fe:	6a3a      	ldr	r2, [r7, #32]
10047600:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
10047602:	0010      	movs	r0, r2
10047604:	0019      	movs	r1, r3
10047606:	46bd      	mov	sp, r7
10047608:	b00a      	add	sp, #40	@ 0x28
1004760a:	bdb0      	pop	{r4, r5, r7, pc}
1004760c:	60001800 	.word	0x60001800
10047610:	00000635 	.word	0x00000635

10047614 <_update_user_timeout>:

/* Set timeout and skip non active timers */
static VTIMER_HandleType *_update_user_timeout(VTIMER_HandleType *rootNode, uint8_t *expired)
{
10047614:	b5b0      	push	{r4, r5, r7, lr}
10047616:	b08e      	sub	sp, #56	@ 0x38
10047618:	af00      	add	r7, sp, #0
1004761a:	60f8      	str	r0, [r7, #12]
1004761c:	60b9      	str	r1, [r7, #8]
  VTIMER_HandleType *curr = rootNode;
1004761e:	68fb      	ldr	r3, [r7, #12]
10047620:	637b      	str	r3, [r7, #52]	@ 0x34
  VTIMER_HandleType *rootOrig = rootNode;
10047622:	68fb      	ldr	r3, [r7, #12]
10047624:	633b      	str	r3, [r7, #48]	@ 0x30
  int64_t delay;
  *expired = 0;
10047626:	68bb      	ldr	r3, [r7, #8]
10047628:	2200      	movs	r2, #0
1004762a:	701a      	strb	r2, [r3, #0]
  while (curr != NULL)
1004762c:	e094      	b.n	10047758 <_update_user_timeout+0x144>
  {
    if (curr->active)
1004762e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
10047630:	7b1b      	ldrb	r3, [r3, #12]
10047632:	2b00      	cmp	r3, #0
10047634:	d100      	bne.n	10047638 <_update_user_timeout+0x24>
10047636:	e08c      	b.n	10047752 <_update_user_timeout+0x13e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
10047638:	f3ef 8310 	mrs	r3, PRIMASK
1004763c:	61fb      	str	r3, [r7, #28]
  return(result);
1004763e:	69fb      	ldr	r3, [r7, #28]
    {
      ATOMIC_SECTION_BEGIN();
10047640:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("cpsid i" : : : "memory");
10047642:	b672      	cpsid	i
}
10047644:	46c0      	nop			@ (mov r8, r8)
#if defined (STM32WB06) || defined (STM32WB07)
      uint8_t dummy;
      bool share = FALSE;
10047646:	230e      	movs	r3, #14
10047648:	2108      	movs	r1, #8
1004764a:	185b      	adds	r3, r3, r1
1004764c:	19db      	adds	r3, r3, r7
1004764e:	2200      	movs	r2, #0
10047650:	701a      	strb	r2, [r3, #0]
      _check_radio_activity(&RADIO_TIMER_Context.radioTimer, &dummy);
10047652:	230f      	movs	r3, #15
10047654:	185b      	adds	r3, r3, r1
10047656:	19da      	adds	r2, r3, r7
10047658:	4b47      	ldr	r3, [pc, #284]	@ (10047778 <_update_user_timeout+0x164>)
1004765a:	0011      	movs	r1, r2
1004765c:	0018      	movs	r0, r3
1004765e:	f000 f9f5 	bl	10047a4c <_check_radio_activity>
#endif
      delay = curr->expiryTime - HAL_RADIO_TIMER_GetCurrentSysTime();
10047662:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
10047664:	681c      	ldr	r4, [r3, #0]
10047666:	685d      	ldr	r5, [r3, #4]
10047668:	f7ff fc8c 	bl	10046f84 <HAL_RADIO_TIMER_GetCurrentSysTime>
1004766c:	0002      	movs	r2, r0
1004766e:	000b      	movs	r3, r1
10047670:	1aa4      	subs	r4, r4, r2
10047672:	419d      	sbcs	r5, r3
10047674:	0022      	movs	r2, r4
10047676:	002b      	movs	r3, r5
10047678:	623a      	str	r2, [r7, #32]
1004767a:	627b      	str	r3, [r7, #36]	@ 0x24
      if (delay > 0)
1004767c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
1004767e:	2b00      	cmp	r3, #0
10047680:	dc05      	bgt.n	1004768e <_update_user_timeout+0x7a>
10047682:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10047684:	2b00      	cmp	r3, #0
10047686:	d15a      	bne.n	1004773e <_update_user_timeout+0x12a>
10047688:	6a3b      	ldr	r3, [r7, #32]
1004768a:	2b00      	cmp	r3, #0
1004768c:	d057      	beq.n	1004773e <_update_user_timeout+0x12a>
         /* Protection against interrupt must be used to avoid that the called function will be interrupted
          and so the timer programming will happen after the target time is already passed
          leading to a timer expiring after timer wraps, instead of the expected delay */
#if defined (STM32WB06) || defined (STM32WB07)
        /* Is the active radio operation before or too close the host timeout? */
        if (((RADIO_TIMER_Context.radioTimer.expiryTime) < (curr->expiryTime + RADIO_TIMER_Context.hostMargin))
1004768e:	4b3b      	ldr	r3, [pc, #236]	@ (1004777c <_update_user_timeout+0x168>)
10047690:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
10047692:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
10047694:	6b79      	ldr	r1, [r7, #52]	@ 0x34
10047696:	6808      	ldr	r0, [r1, #0]
10047698:	6849      	ldr	r1, [r1, #4]
1004769a:	4c38      	ldr	r4, [pc, #224]	@ (1004777c <_update_user_timeout+0x168>)
1004769c:	2598      	movs	r5, #152	@ 0x98
1004769e:	5964      	ldr	r4, [r4, r5]
100476a0:	603c      	str	r4, [r7, #0]
100476a2:	2400      	movs	r4, #0
100476a4:	607c      	str	r4, [r7, #4]
100476a6:	683c      	ldr	r4, [r7, #0]
100476a8:	687d      	ldr	r5, [r7, #4]
100476aa:	1900      	adds	r0, r0, r4
100476ac:	4169      	adcs	r1, r5
100476ae:	4299      	cmp	r1, r3
100476b0:	d802      	bhi.n	100476b8 <_update_user_timeout+0xa4>
100476b2:	d11b      	bne.n	100476ec <_update_user_timeout+0xd8>
100476b4:	4290      	cmp	r0, r2
100476b6:	d919      	bls.n	100476ec <_update_user_timeout+0xd8>
            && RADIO_TIMER_Context.radioTimer.active)
100476b8:	4b30      	ldr	r3, [pc, #192]	@ (1004777c <_update_user_timeout+0x168>)
100476ba:	2261      	movs	r2, #97	@ 0x61
100476bc:	5c9b      	ldrb	r3, [r3, r2]
100476be:	2b00      	cmp	r3, #0
100476c0:	d014      	beq.n	100476ec <_update_user_timeout+0xd8>
        {
          if ((RADIO_TIMER_Context.radioTimer.expiryTime >= curr->expiryTime) && RADIO_TIMER_Context.radioTimer.active)
100476c2:	4b2e      	ldr	r3, [pc, #184]	@ (1004777c <_update_user_timeout+0x168>)
100476c4:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
100476c6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
100476c8:	6b79      	ldr	r1, [r7, #52]	@ 0x34
100476ca:	6808      	ldr	r0, [r1, #0]
100476cc:	6849      	ldr	r1, [r1, #4]
100476ce:	4299      	cmp	r1, r3
100476d0:	d813      	bhi.n	100476fa <_update_user_timeout+0xe6>
100476d2:	d101      	bne.n	100476d8 <_update_user_timeout+0xc4>
100476d4:	4290      	cmp	r0, r2
100476d6:	d810      	bhi.n	100476fa <_update_user_timeout+0xe6>
100476d8:	4b28      	ldr	r3, [pc, #160]	@ (1004777c <_update_user_timeout+0x168>)
100476da:	2261      	movs	r2, #97	@ 0x61
100476dc:	5c9b      	ldrb	r3, [r3, r2]
100476de:	2b00      	cmp	r3, #0
100476e0:	d00b      	beq.n	100476fa <_update_user_timeout+0xe6>
          {
            RADIO_TIMER_Context.hostIsRadioPending = 1;
100476e2:	4b26      	ldr	r3, [pc, #152]	@ (1004777c <_update_user_timeout+0x168>)
100476e4:	2295      	movs	r2, #149	@ 0x95
100476e6:	2101      	movs	r1, #1
100476e8:	5499      	strb	r1, [r3, r2]
          if ((RADIO_TIMER_Context.radioTimer.expiryTime >= curr->expiryTime) && RADIO_TIMER_Context.radioTimer.active)
100476ea:	e006      	b.n	100476fa <_update_user_timeout+0xe6>
          }          
        }
        else
        {
          /* It's fine to program the wakeup timer for an host wakeup */
          share = TRUE;
100476ec:	230e      	movs	r3, #14
100476ee:	2208      	movs	r2, #8
100476f0:	189b      	adds	r3, r3, r2
100476f2:	19db      	adds	r3, r3, r7
100476f4:	2201      	movs	r2, #1
100476f6:	701a      	strb	r2, [r3, #0]
100476f8:	e000      	b.n	100476fc <_update_user_timeout+0xe8>
          if ((RADIO_TIMER_Context.radioTimer.expiryTime >= curr->expiryTime) && RADIO_TIMER_Context.radioTimer.active)
100476fa:	46c0      	nop			@ (mov r8, r8)
        }
        TIMER_SetRadioHostWakeupTime(delay, &share);
100476fc:	6a3b      	ldr	r3, [r7, #32]
100476fe:	240e      	movs	r4, #14
10047700:	2508      	movs	r5, #8
10047702:	1962      	adds	r2, r4, r5
10047704:	19d2      	adds	r2, r2, r7
10047706:	0011      	movs	r1, r2
10047708:	0018      	movs	r0, r3
1004770a:	f000 fa29 	bl	10047b60 <TIMER_SetRadioHostWakeupTime>
        if (share == TRUE)
1004770e:	1963      	adds	r3, r4, r5
10047710:	19db      	adds	r3, r3, r7
10047712:	781b      	ldrb	r3, [r3, #0]
10047714:	2b00      	cmp	r3, #0
10047716:	d015      	beq.n	10047744 <_update_user_timeout+0x130>
        {
          RADIO_TIMER_Context.radioTimer.pending |= RADIO_TIMER_Context.radioTimer.active;
10047718:	4b18      	ldr	r3, [pc, #96]	@ (1004777c <_update_user_timeout+0x168>)
1004771a:	2262      	movs	r2, #98	@ 0x62
1004771c:	5c9a      	ldrb	r2, [r3, r2]
1004771e:	4b17      	ldr	r3, [pc, #92]	@ (1004777c <_update_user_timeout+0x168>)
10047720:	2161      	movs	r1, #97	@ 0x61
10047722:	5c5b      	ldrb	r3, [r3, r1]
10047724:	4313      	orrs	r3, r2
10047726:	b2db      	uxtb	r3, r3
10047728:	1e5a      	subs	r2, r3, #1
1004772a:	4193      	sbcs	r3, r2
1004772c:	b2d9      	uxtb	r1, r3
1004772e:	4b13      	ldr	r3, [pc, #76]	@ (1004777c <_update_user_timeout+0x168>)
10047730:	2262      	movs	r2, #98	@ 0x62
10047732:	5499      	strb	r1, [r3, r2]
          RADIO_TIMER_Context.radioTimer.active = FALSE;
10047734:	4b11      	ldr	r3, [pc, #68]	@ (1004777c <_update_user_timeout+0x168>)
10047736:	2261      	movs	r2, #97	@ 0x61
10047738:	2100      	movs	r1, #0
1004773a:	5499      	strb	r1, [r3, r2]
1004773c:	e002      	b.n	10047744 <_update_user_timeout+0x130>
        VTIMER_SetWakeupTime(delay, TRUE);
#endif
      }
      else
      {
        *expired = 1;
1004773e:	68bb      	ldr	r3, [r7, #8]
10047740:	2201      	movs	r2, #1
10047742:	701a      	strb	r2, [r3, #0]
10047744:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
10047746:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
10047748:	69bb      	ldr	r3, [r7, #24]
1004774a:	f383 8810 	msr	PRIMASK, r3
}
1004774e:	46c0      	nop			@ (mov r8, r8)
      }
      ATOMIC_SECTION_END();
      break;
10047750:	e006      	b.n	10047760 <_update_user_timeout+0x14c>
    }
    curr = curr->next;
10047752:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
10047754:	691b      	ldr	r3, [r3, #16]
10047756:	637b      	str	r3, [r7, #52]	@ 0x34
  while (curr != NULL)
10047758:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
1004775a:	2b00      	cmp	r3, #0
1004775c:	d000      	beq.n	10047760 <_update_user_timeout+0x14c>
1004775e:	e766      	b.n	1004762e <_update_user_timeout+0x1a>
  }
  if (*expired)
10047760:	68bb      	ldr	r3, [r7, #8]
10047762:	781b      	ldrb	r3, [r3, #0]
10047764:	2b00      	cmp	r3, #0
10047766:	d001      	beq.n	1004776c <_update_user_timeout+0x158>
  {
    return rootOrig;
10047768:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
1004776a:	e000      	b.n	1004776e <_update_user_timeout+0x15a>
  }

  return curr;
1004776c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
1004776e:	0018      	movs	r0, r3
10047770:	46bd      	mov	sp, r7
10047772:	b00e      	add	sp, #56	@ 0x38
10047774:	bdb0      	pop	{r4, r5, r7, pc}
10047776:	46c0      	nop			@ (mov r8, r8)
10047778:	20000960 	.word	0x20000960
1004777c:	20000908 	.word	0x20000908

10047780 <_insert_timer_in_queue>:
  return current_time;
}
#endif

static VTIMER_HandleType *_insert_timer_in_queue(VTIMER_HandleType *rootNode, VTIMER_HandleType *handle)
{
10047780:	b580      	push	{r7, lr}
10047782:	b086      	sub	sp, #24
10047784:	af00      	add	r7, sp, #0
10047786:	6078      	str	r0, [r7, #4]
10047788:	6039      	str	r1, [r7, #0]
  VTIMER_HandleType *current = rootNode;
1004778a:	687b      	ldr	r3, [r7, #4]
1004778c:	617b      	str	r3, [r7, #20]
  VTIMER_HandleType *prev = NULL;
1004778e:	2300      	movs	r3, #0
10047790:	613b      	str	r3, [r7, #16]
  VTIMER_HandleType *returnValue = rootNode;
10047792:	687b      	ldr	r3, [r7, #4]
10047794:	60fb      	str	r3, [r7, #12]

  while ((current != NULL) && (current->expiryTime < handle->expiryTime))
10047796:	e004      	b.n	100477a2 <_insert_timer_in_queue+0x22>
  {
    prev = current;
10047798:	697b      	ldr	r3, [r7, #20]
1004779a:	613b      	str	r3, [r7, #16]
    current = current->next;
1004779c:	697b      	ldr	r3, [r7, #20]
1004779e:	691b      	ldr	r3, [r3, #16]
100477a0:	617b      	str	r3, [r7, #20]
  while ((current != NULL) && (current->expiryTime < handle->expiryTime))
100477a2:	697b      	ldr	r3, [r7, #20]
100477a4:	2b00      	cmp	r3, #0
100477a6:	d00a      	beq.n	100477be <_insert_timer_in_queue+0x3e>
100477a8:	697b      	ldr	r3, [r7, #20]
100477aa:	681a      	ldr	r2, [r3, #0]
100477ac:	685b      	ldr	r3, [r3, #4]
100477ae:	6839      	ldr	r1, [r7, #0]
100477b0:	6808      	ldr	r0, [r1, #0]
100477b2:	6849      	ldr	r1, [r1, #4]
100477b4:	4299      	cmp	r1, r3
100477b6:	d8ef      	bhi.n	10047798 <_insert_timer_in_queue+0x18>
100477b8:	d101      	bne.n	100477be <_insert_timer_in_queue+0x3e>
100477ba:	4290      	cmp	r0, r2
100477bc:	d8ec      	bhi.n	10047798 <_insert_timer_in_queue+0x18>
  }

  handle->next = current;
100477be:	683b      	ldr	r3, [r7, #0]
100477c0:	697a      	ldr	r2, [r7, #20]
100477c2:	611a      	str	r2, [r3, #16]

  if (prev == NULL)
100477c4:	693b      	ldr	r3, [r7, #16]
100477c6:	2b00      	cmp	r3, #0
100477c8:	d102      	bne.n	100477d0 <_insert_timer_in_queue+0x50>
  {
    /* We are the new root */
    returnValue = handle;
100477ca:	683b      	ldr	r3, [r7, #0]
100477cc:	60fb      	str	r3, [r7, #12]
100477ce:	e002      	b.n	100477d6 <_insert_timer_in_queue+0x56>
  }
  else
  {
    prev->next = handle;
100477d0:	693b      	ldr	r3, [r7, #16]
100477d2:	683a      	ldr	r2, [r7, #0]
100477d4:	611a      	str	r2, [r3, #16]
  }

  return returnValue;
100477d6:	68fb      	ldr	r3, [r7, #12]
}
100477d8:	0018      	movs	r0, r3
100477da:	46bd      	mov	sp, r7
100477dc:	b006      	add	sp, #24
100477de:	bd80      	pop	{r7, pc}

100477e0 <_virtualTimeBaseEnable>:

static void _virtualTimeBaseEnable(FunctionalState state)
{
100477e0:	b580      	push	{r7, lr}
100477e2:	b082      	sub	sp, #8
100477e4:	af00      	add	r7, sp, #0
100477e6:	0002      	movs	r2, r0
100477e8:	1dfb      	adds	r3, r7, #7
100477ea:	701a      	strb	r2, [r3, #0]
  if (state != DISABLE)
100477ec:	1dfb      	adds	r3, r7, #7
100477ee:	781b      	ldrb	r3, [r3, #0]
100477f0:	2b00      	cmp	r3, #0
100477f2:	d010      	beq.n	10047816 <_virtualTimeBaseEnable+0x36>
  {
    if (RADIO_TIMER_Context.enableTimeBase == FALSE)
100477f4:	4b0e      	ldr	r3, [pc, #56]	@ (10047830 <_virtualTimeBaseEnable+0x50>)
100477f6:	2290      	movs	r2, #144	@ 0x90
100477f8:	5c9b      	ldrb	r3, [r3, r2]
100477fa:	2201      	movs	r2, #1
100477fc:	4053      	eors	r3, r2
100477fe:	b2db      	uxtb	r3, r3
10047800:	2b00      	cmp	r3, #0
10047802:	d010      	beq.n	10047826 <_virtualTimeBaseEnable+0x46>
    {
      _calibration_callback(&RADIO_TIMER_Context.calibrationTimer);
10047804:	4b0b      	ldr	r3, [pc, #44]	@ (10047834 <_virtualTimeBaseEnable+0x54>)
10047806:	0018      	movs	r0, r3
10047808:	f7ff fe2a 	bl	10047460 <_calibration_callback>
      RADIO_TIMER_Context.enableTimeBase = TRUE;
1004780c:	4b08      	ldr	r3, [pc, #32]	@ (10047830 <_virtualTimeBaseEnable+0x50>)
1004780e:	2290      	movs	r2, #144	@ 0x90
10047810:	2101      	movs	r1, #1
10047812:	5499      	strb	r1, [r3, r2]
  else
  {
    HAL_RADIO_TIMER_StopVirtualTimer(&RADIO_TIMER_Context.calibrationTimer);
    RADIO_TIMER_Context.enableTimeBase = FALSE;
  }
}
10047814:	e007      	b.n	10047826 <_virtualTimeBaseEnable+0x46>
    HAL_RADIO_TIMER_StopVirtualTimer(&RADIO_TIMER_Context.calibrationTimer);
10047816:	4b07      	ldr	r3, [pc, #28]	@ (10047834 <_virtualTimeBaseEnable+0x54>)
10047818:	0018      	movs	r0, r3
1004781a:	f7ff fbc5 	bl	10046fa8 <HAL_RADIO_TIMER_StopVirtualTimer>
    RADIO_TIMER_Context.enableTimeBase = FALSE;
1004781e:	4b04      	ldr	r3, [pc, #16]	@ (10047830 <_virtualTimeBaseEnable+0x50>)
10047820:	2290      	movs	r2, #144	@ 0x90
10047822:	2100      	movs	r1, #0
10047824:	5499      	strb	r1, [r3, r2]
}
10047826:	46c0      	nop			@ (mov r8, r8)
10047828:	46bd      	mov	sp, r7
1004782a:	b002      	add	sp, #8
1004782c:	bd80      	pop	{r7, pc}
1004782e:	46c0      	nop			@ (mov r8, r8)
10047830:	20000908 	.word	0x20000908
10047834:	20000948 	.word	0x20000948

10047838 <_remove_timer_in_queue>:

static VTIMER_HandleType *_remove_timer_in_queue(VTIMER_HandleType *rootNode, VTIMER_HandleType *handle)
{
10047838:	b580      	push	{r7, lr}
1004783a:	b086      	sub	sp, #24
1004783c:	af00      	add	r7, sp, #0
1004783e:	6078      	str	r0, [r7, #4]
10047840:	6039      	str	r1, [r7, #0]
  VTIMER_HandleType *current = rootNode;
10047842:	687b      	ldr	r3, [r7, #4]
10047844:	617b      	str	r3, [r7, #20]
  VTIMER_HandleType *prev = NULL;
10047846:	2300      	movs	r3, #0
10047848:	613b      	str	r3, [r7, #16]
  VTIMER_HandleType *returnValue = rootNode;
1004784a:	687b      	ldr	r3, [r7, #4]
1004784c:	60fb      	str	r3, [r7, #12]

  while ((current != NULL) && (current != handle))
1004784e:	e004      	b.n	1004785a <_remove_timer_in_queue+0x22>
  {
    prev = current;
10047850:	697b      	ldr	r3, [r7, #20]
10047852:	613b      	str	r3, [r7, #16]
    current = current->next;
10047854:	697b      	ldr	r3, [r7, #20]
10047856:	691b      	ldr	r3, [r3, #16]
10047858:	617b      	str	r3, [r7, #20]
  while ((current != NULL) && (current != handle))
1004785a:	697b      	ldr	r3, [r7, #20]
1004785c:	2b00      	cmp	r3, #0
1004785e:	d003      	beq.n	10047868 <_remove_timer_in_queue+0x30>
10047860:	697a      	ldr	r2, [r7, #20]
10047862:	683b      	ldr	r3, [r7, #0]
10047864:	429a      	cmp	r2, r3
10047866:	d1f3      	bne.n	10047850 <_remove_timer_in_queue+0x18>
  }

  if (current == NULL)
10047868:	697b      	ldr	r3, [r7, #20]
1004786a:	2b00      	cmp	r3, #0
1004786c:	d00b      	beq.n	10047886 <_remove_timer_in_queue+0x4e>
  {
    /* Not found */
  }
  else if (current == rootNode)
1004786e:	697a      	ldr	r2, [r7, #20]
10047870:	687b      	ldr	r3, [r7, #4]
10047872:	429a      	cmp	r2, r3
10047874:	d103      	bne.n	1004787e <_remove_timer_in_queue+0x46>
  {
    /* New root node */
    returnValue = current->next;
10047876:	697b      	ldr	r3, [r7, #20]
10047878:	691b      	ldr	r3, [r3, #16]
1004787a:	60fb      	str	r3, [r7, #12]
1004787c:	e003      	b.n	10047886 <_remove_timer_in_queue+0x4e>
  }
  else
  {
    prev->next = current->next;
1004787e:	697b      	ldr	r3, [r7, #20]
10047880:	691a      	ldr	r2, [r3, #16]
10047882:	693b      	ldr	r3, [r7, #16]
10047884:	611a      	str	r2, [r3, #16]
  }

  return returnValue;
10047886:	68fb      	ldr	r3, [r7, #12]
}
10047888:	0018      	movs	r0, r3
1004788a:	46bd      	mov	sp, r7
1004788c:	b006      	add	sp, #24
1004788e:	bd80      	pop	{r7, pc}

10047890 <_check_callbacks>:

/* Check the number of expired timer from rootNode (ordered list of timers) and return the list of expired timers */
static VTIMER_HandleType *_check_callbacks(VTIMER_HandleType *rootNode, VTIMER_HandleType **expiredList)
{
10047890:	b5b0      	push	{r4, r5, r7, lr}
10047892:	b088      	sub	sp, #32
10047894:	af00      	add	r7, sp, #0
10047896:	6078      	str	r0, [r7, #4]
10047898:	6039      	str	r1, [r7, #0]

  VTIMER_HandleType *curr = rootNode;
1004789a:	687b      	ldr	r3, [r7, #4]
1004789c:	61fb      	str	r3, [r7, #28]
  VTIMER_HandleType *prev = NULL;
1004789e:	2300      	movs	r3, #0
100478a0:	61bb      	str	r3, [r7, #24]
  VTIMER_HandleType *returnValue = rootNode;
100478a2:	687b      	ldr	r3, [r7, #4]
100478a4:	617b      	str	r3, [r7, #20]
  *expiredList = rootNode;
100478a6:	683b      	ldr	r3, [r7, #0]
100478a8:	687a      	ldr	r2, [r7, #4]
100478aa:	601a      	str	r2, [r3, #0]

  int64_t delay;
  uint32_t expiredCount = 0;
100478ac:	2300      	movs	r3, #0
100478ae:	613b      	str	r3, [r7, #16]

  while (curr != NULL)
100478b0:	e021      	b.n	100478f6 <_check_callbacks+0x66>
  {

    if (curr->active)
100478b2:	69fb      	ldr	r3, [r7, #28]
100478b4:	7b1b      	ldrb	r3, [r3, #12]
100478b6:	2b00      	cmp	r3, #0
100478b8:	d015      	beq.n	100478e6 <_check_callbacks+0x56>
    {
      delay = curr->expiryTime - HAL_RADIO_TIMER_GetCurrentSysTime();
100478ba:	69fb      	ldr	r3, [r7, #28]
100478bc:	681c      	ldr	r4, [r3, #0]
100478be:	685d      	ldr	r5, [r3, #4]
100478c0:	f7ff fb60 	bl	10046f84 <HAL_RADIO_TIMER_GetCurrentSysTime>
100478c4:	0002      	movs	r2, r0
100478c6:	000b      	movs	r3, r1
100478c8:	1aa4      	subs	r4, r4, r2
100478ca:	419d      	sbcs	r5, r3
100478cc:	0022      	movs	r2, r4
100478ce:	002b      	movs	r3, r5
100478d0:	60ba      	str	r2, [r7, #8]
100478d2:	60fb      	str	r3, [r7, #12]

      if (delay > 5)   /*TBR*/
100478d4:	68fb      	ldr	r3, [r7, #12]
100478d6:	2b00      	cmp	r3, #0
100478d8:	dc11      	bgt.n	100478fe <_check_callbacks+0x6e>
100478da:	68fb      	ldr	r3, [r7, #12]
100478dc:	2b00      	cmp	r3, #0
100478de:	d102      	bne.n	100478e6 <_check_callbacks+0x56>
100478e0:	68bb      	ldr	r3, [r7, #8]
100478e2:	2b05      	cmp	r3, #5
100478e4:	d80b      	bhi.n	100478fe <_check_callbacks+0x6e>
        /* End of expired timers list*/
        break;
      }
    }

    prev = curr;
100478e6:	69fb      	ldr	r3, [r7, #28]
100478e8:	61bb      	str	r3, [r7, #24]
    curr = curr->next;
100478ea:	69fb      	ldr	r3, [r7, #28]
100478ec:	691b      	ldr	r3, [r3, #16]
100478ee:	61fb      	str	r3, [r7, #28]
    expiredCount++;
100478f0:	693b      	ldr	r3, [r7, #16]
100478f2:	3301      	adds	r3, #1
100478f4:	613b      	str	r3, [r7, #16]
  while (curr != NULL)
100478f6:	69fb      	ldr	r3, [r7, #28]
100478f8:	2b00      	cmp	r3, #0
100478fa:	d1da      	bne.n	100478b2 <_check_callbacks+0x22>
100478fc:	e000      	b.n	10047900 <_check_callbacks+0x70>
        break;
100478fe:	46c0      	nop			@ (mov r8, r8)
  }

  if (expiredCount)
10047900:	693b      	ldr	r3, [r7, #16]
10047902:	2b00      	cmp	r3, #0
10047904:	d005      	beq.n	10047912 <_check_callbacks+0x82>
  {
    /* Some timers expired */
    prev->next = NULL;
10047906:	69bb      	ldr	r3, [r7, #24]
10047908:	2200      	movs	r2, #0
1004790a:	611a      	str	r2, [r3, #16]
    returnValue = curr;
1004790c:	69fb      	ldr	r3, [r7, #28]
1004790e:	617b      	str	r3, [r7, #20]
10047910:	e002      	b.n	10047918 <_check_callbacks+0x88>
  }
  else
  {
    /* No timer expired */
    *expiredList = NULL;
10047912:	683b      	ldr	r3, [r7, #0]
10047914:	2200      	movs	r2, #0
10047916:	601a      	str	r2, [r3, #0]
  }

  return returnValue;
10047918:	697b      	ldr	r3, [r7, #20]
}
1004791a:	0018      	movs	r0, r3
1004791c:	46bd      	mov	sp, r7
1004791e:	b008      	add	sp, #32
10047920:	bdb0      	pop	{r4, r5, r7, pc}
	...

10047924 <_updateCalibrationData>:

static void _updateCalibrationData(void)
{
10047924:	b580      	push	{r7, lr}
10047926:	b084      	sub	sp, #16
10047928:	af00      	add	r7, sp, #0
  if (RADIO_TIMER_Context.calibrationSettings.periodicCalibration)
1004792a:	4b17      	ldr	r3, [pc, #92]	@ (10047988 <_updateCalibrationData+0x64>)
1004792c:	781b      	ldrb	r3, [r3, #0]
1004792e:	2b00      	cmp	r3, #0
10047930:	d015      	beq.n	1004795e <_updateCalibrationData+0x3a>
  {
    _get_calibration_data(&RADIO_TIMER_Context.calibrationData);
10047932:	4b16      	ldr	r3, [pc, #88]	@ (1004798c <_updateCalibrationData+0x68>)
10047934:	0018      	movs	r0, r3
10047936:	f7ff fc39 	bl	100471ac <_get_calibration_data>
    _update_xtal_startup_time(RADIO_TIMER_Context.hs_startup_time, RADIO_TIMER_Context.calibrationData.freq1);
1004793a:	4b13      	ldr	r3, [pc, #76]	@ (10047988 <_updateCalibrationData+0x64>)
1004793c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
1004793e:	b29a      	uxth	r2, r3
10047940:	4b11      	ldr	r3, [pc, #68]	@ (10047988 <_updateCalibrationData+0x64>)
10047942:	699b      	ldr	r3, [r3, #24]
10047944:	0019      	movs	r1, r3
10047946:	0010      	movs	r0, r2
10047948:	f7ff fd5c 	bl	10047404 <_update_xtal_startup_time>
    _configureTxRxDelay(&RADIO_TIMER_Context, FALSE);
1004794c:	4b0e      	ldr	r3, [pc, #56]	@ (10047988 <_updateCalibrationData+0x64>)
1004794e:	2100      	movs	r1, #0
10047950:	0018      	movs	r0, r3
10047952:	f7ff fc93 	bl	1004727c <_configureTxRxDelay>
    RADIO_TIMER_Context.calibrationData.calibration_data_available = 1;
10047956:	4b0c      	ldr	r3, [pc, #48]	@ (10047988 <_updateCalibrationData+0x64>)
10047958:	2234      	movs	r2, #52	@ 0x34
1004795a:	2101      	movs	r1, #1
1004795c:	5499      	strb	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
1004795e:	f3ef 8310 	mrs	r3, PRIMASK
10047962:	607b      	str	r3, [r7, #4]
  return(result);
10047964:	687b      	ldr	r3, [r7, #4]
  }
  ATOMIC_SECTION_BEGIN();
10047966:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
10047968:	b672      	cpsid	i
}
1004796a:	46c0      	nop			@ (mov r8, r8)
  _update_system_time(&RADIO_TIMER_Context);
1004796c:	4b06      	ldr	r3, [pc, #24]	@ (10047988 <_updateCalibrationData+0x64>)
1004796e:	0018      	movs	r0, r3
10047970:	f000 f80e 	bl	10047990 <_update_system_time>
10047974:	68fb      	ldr	r3, [r7, #12]
10047976:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
10047978:	68bb      	ldr	r3, [r7, #8]
1004797a:	f383 8810 	msr	PRIMASK, r3
}
1004797e:	46c0      	nop			@ (mov r8, r8)
  ATOMIC_SECTION_END();
}
10047980:	46c0      	nop			@ (mov r8, r8)
10047982:	46bd      	mov	sp, r7
10047984:	b004      	add	sp, #16
10047986:	bd80      	pop	{r7, pc}
10047988:	20000908 	.word	0x20000908
1004798c:	20000918 	.word	0x20000918

10047990 <_update_system_time>:

/* This function update the system time after a calibration.
 * If the user calls too often this function, you could have rounding issues in the integer maths.
 */
static void _update_system_time(RADIO_TIMER_ContextTypeDef *context)
{
10047990:	b5b0      	push	{r4, r5, r7, lr}
10047992:	b088      	sub	sp, #32
10047994:	af00      	add	r7, sp, #0
10047996:	6178      	str	r0, [r7, #20]
  uint32_t current_machine_time;
  uint32_t period;

  current_machine_time = LL_RADIO_TIMER_GetAbsoluteTime(WAKEUP);
10047998:	4b2a      	ldr	r3, [pc, #168]	@ (10047a44 <_update_system_time+0xb4>)
1004799a:	0018      	movs	r0, r3
1004799c:	f7fe fe43 	bl	10046626 <LL_RADIO_TIMER_GetAbsoluteTime>
100479a0:	0003      	movs	r3, r0
100479a2:	61fb      	str	r3, [r7, #28]
  period = context->calibrationData.last_period1;
100479a4:	697b      	ldr	r3, [r7, #20]
100479a6:	6a1b      	ldr	r3, [r3, #32]
100479a8:	61bb      	str	r3, [r7, #24]
  context->cumulative_time = context->calibrationData.last_calibration_time + \
100479aa:	697b      	ldr	r3, [r7, #20]
100479ac:	6a9c      	ldr	r4, [r3, #40]	@ 0x28
100479ae:	6add      	ldr	r5, [r3, #44]	@ 0x2c
                             blue_unit_conversion(TIME_ABSDIFF(current_machine_time,
100479b0:	697b      	ldr	r3, [r7, #20]
100479b2:	2280      	movs	r2, #128	@ 0x80
100479b4:	589b      	ldr	r3, [r3, r2]
100479b6:	69fa      	ldr	r2, [r7, #28]
100479b8:	1ad3      	subs	r3, r2, r3
100479ba:	4a23      	ldr	r2, [pc, #140]	@ (10047a48 <_update_system_time+0xb8>)
100479bc:	69b9      	ldr	r1, [r7, #24]
100479be:	0018      	movs	r0, r3
100479c0:	f7f8 fb7e 	bl	100400c0 <blue_unit_conversion>
100479c4:	0003      	movs	r3, r0
100479c6:	60bb      	str	r3, [r7, #8]
100479c8:	2300      	movs	r3, #0
100479ca:	60fb      	str	r3, [r7, #12]
  context->cumulative_time = context->calibrationData.last_calibration_time + \
100479cc:	68ba      	ldr	r2, [r7, #8]
100479ce:	68fb      	ldr	r3, [r7, #12]
100479d0:	1912      	adds	r2, r2, r4
100479d2:	416b      	adcs	r3, r5
100479d4:	6979      	ldr	r1, [r7, #20]
100479d6:	670a      	str	r2, [r1, #112]	@ 0x70
100479d8:	674b      	str	r3, [r1, #116]	@ 0x74
                                                               context->last_machine_time),
                                                  period, MULT64_THR_PERIOD);

  if ((context->calibrationSettings.periodicCalibration == 0)
100479da:	697b      	ldr	r3, [r7, #20]
100479dc:	781b      	ldrb	r3, [r3, #0]
100479de:	2b00      	cmp	r3, #0
100479e0:	d11d      	bne.n	10047a1e <_update_system_time+0x8e>
      && (TIME_ABSDIFF(current_machine_time,
100479e2:	697b      	ldr	r3, [r7, #20]
100479e4:	2280      	movs	r2, #128	@ 0x80
100479e6:	589b      	ldr	r3, [r3, r2]
100479e8:	69fa      	ldr	r2, [r7, #28]
100479ea:	1ad2      	subs	r2, r2, r3
                       context->last_machine_time) < context->calibrationData.calibration_machine_interval))
100479ec:	697b      	ldr	r3, [r7, #20]
100479ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
      && (TIME_ABSDIFF(current_machine_time,
100479f0:	429a      	cmp	r2, r3
100479f2:	d214      	bcs.n	10047a1e <_update_system_time+0x8e>
  {
    context->cumulative_time += blue_unit_conversion(TIMER_MAX_VALUE, period, MULT64_THR_PERIOD);
100479f4:	4a14      	ldr	r2, [pc, #80]	@ (10047a48 <_update_system_time+0xb8>)
100479f6:	69b9      	ldr	r1, [r7, #24]
100479f8:	2301      	movs	r3, #1
100479fa:	425b      	negs	r3, r3
100479fc:	0018      	movs	r0, r3
100479fe:	f7f8 fb5f 	bl	100400c0 <blue_unit_conversion>
10047a02:	0001      	movs	r1, r0
10047a04:	697b      	ldr	r3, [r7, #20]
10047a06:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
10047a08:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
10047a0a:	6039      	str	r1, [r7, #0]
10047a0c:	2100      	movs	r1, #0
10047a0e:	6079      	str	r1, [r7, #4]
10047a10:	6838      	ldr	r0, [r7, #0]
10047a12:	6879      	ldr	r1, [r7, #4]
10047a14:	1812      	adds	r2, r2, r0
10047a16:	414b      	adcs	r3, r1
10047a18:	6979      	ldr	r1, [r7, #20]
10047a1a:	670a      	str	r2, [r1, #112]	@ 0x70
10047a1c:	674b      	str	r3, [r1, #116]	@ 0x74
  }
  context->last_machine_time = current_machine_time;
10047a1e:	697b      	ldr	r3, [r7, #20]
10047a20:	2180      	movs	r1, #128	@ 0x80
10047a22:	69fa      	ldr	r2, [r7, #28]
10047a24:	505a      	str	r2, [r3, r1]
  context->calibrationData.last_calibration_time = context->cumulative_time;
10047a26:	697b      	ldr	r3, [r7, #20]
10047a28:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
10047a2a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
10047a2c:	6979      	ldr	r1, [r7, #20]
10047a2e:	628a      	str	r2, [r1, #40]	@ 0x28
10047a30:	62cb      	str	r3, [r1, #44]	@ 0x2c
  context->calibrationData.last_period1 = context->calibrationData.period1;
10047a32:	697b      	ldr	r3, [r7, #20]
10047a34:	69da      	ldr	r2, [r3, #28]
10047a36:	697b      	ldr	r3, [r7, #20]
10047a38:	621a      	str	r2, [r3, #32]
}
10047a3a:	46c0      	nop			@ (mov r8, r8)
10047a3c:	46bd      	mov	sp, r7
10047a3e:	b008      	add	sp, #32
10047a40:	bdb0      	pop	{r4, r5, r7, pc}
10047a42:	46c0      	nop			@ (mov r8, r8)
10047a44:	60001800 	.word	0x60001800
10047a48:	00000635 	.word	0x00000635

10047a4c <_check_radio_activity>:
   3) The radio event is after the next calibration event. Then the timer will be programmed with the latest values.
   The check on the next calibration event is made even though the calibration is disabled (max cal. interval)
   in order to avoid counter wrapping with timeouts far in the future.
*/
static void _check_radio_activity(RADIO_TIMER_RadioHandleTypeDef *timerHandle, uint8_t *expired)
{
10047a4c:	b5b0      	push	{r4, r5, r7, lr}
10047a4e:	b08a      	sub	sp, #40	@ 0x28
10047a50:	af00      	add	r7, sp, #0
10047a52:	6078      	str	r0, [r7, #4]
10047a54:	6039      	str	r1, [r7, #0]
  uint64_t nextCalibrationEvent, currentTime;
  *expired = 0;
10047a56:	683b      	ldr	r3, [r7, #0]
10047a58:	2200      	movs	r2, #0
10047a5a:	701a      	strb	r2, [r3, #0]
  if (timerHandle->pending)
10047a5c:	687b      	ldr	r3, [r7, #4]
10047a5e:	7a9b      	ldrb	r3, [r3, #10]
10047a60:	2b00      	cmp	r3, #0
10047a62:	d100      	bne.n	10047a66 <_check_radio_activity+0x1a>
10047a64:	e075      	b.n	10047b52 <_check_radio_activity+0x106>
  {
    
    nextCalibrationEvent = RADIO_TIMER_Context.calibrationData.last_calibration_time + \
10047a66:	4b3d      	ldr	r3, [pc, #244]	@ (10047b5c <_check_radio_activity+0x110>)
10047a68:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
10047a6a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
                           RADIO_TIMER_Context.calibrationSettings.periodicCalibrationInterval;
10047a6c:	493b      	ldr	r1, [pc, #236]	@ (10047b5c <_check_radio_activity+0x110>)
10047a6e:	6849      	ldr	r1, [r1, #4]
10047a70:	000c      	movs	r4, r1
10047a72:	2100      	movs	r1, #0
10047a74:	000d      	movs	r5, r1
    nextCalibrationEvent = RADIO_TIMER_Context.calibrationData.last_calibration_time + \
10047a76:	1912      	adds	r2, r2, r4
10047a78:	416b      	adcs	r3, r5
10047a7a:	623a      	str	r2, [r7, #32]
10047a7c:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
10047a7e:	f3ef 8310 	mrs	r3, PRIMASK
10047a82:	60fb      	str	r3, [r7, #12]
  return(result);
10047a84:	68fb      	ldr	r3, [r7, #12]

    ATOMIC_SECTION_BEGIN();
10047a86:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
10047a88:	b672      	cpsid	i
}
10047a8a:	46c0      	nop			@ (mov r8, r8)
    currentTime = HAL_RADIO_TIMER_GetCurrentSysTime();
10047a8c:	f7ff fa7a 	bl	10046f84 <HAL_RADIO_TIMER_GetCurrentSysTime>
10047a90:	0002      	movs	r2, r0
10047a92:	000b      	movs	r3, r1
10047a94:	613a      	str	r2, [r7, #16]
10047a96:	617b      	str	r3, [r7, #20]
    if ((timerHandle->expiryTime < (nextCalibrationEvent + RADIO_ACTIVITY_MARGIN)) || \
10047a98:	687b      	ldr	r3, [r7, #4]
10047a9a:	681a      	ldr	r2, [r3, #0]
10047a9c:	685b      	ldr	r3, [r3, #4]
10047a9e:	6a38      	ldr	r0, [r7, #32]
10047aa0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
10047aa2:	24c8      	movs	r4, #200	@ 0xc8
10047aa4:	02a4      	lsls	r4, r4, #10
10047aa6:	2500      	movs	r5, #0
10047aa8:	1900      	adds	r0, r0, r4
10047aaa:	4169      	adcs	r1, r5
10047aac:	4299      	cmp	r1, r3
10047aae:	d812      	bhi.n	10047ad6 <_check_radio_activity+0x8a>
10047ab0:	d101      	bne.n	10047ab6 <_check_radio_activity+0x6a>
10047ab2:	4290      	cmp	r0, r2
10047ab4:	d80f      	bhi.n	10047ad6 <_check_radio_activity+0x8a>
        (currentTime > (nextCalibrationEvent + CALIB_SAFE_THR)))
10047ab6:	6a3a      	ldr	r2, [r7, #32]
10047ab8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10047aba:	20b9      	movs	r0, #185	@ 0xb9
10047abc:	0040      	lsls	r0, r0, #1
10047abe:	2100      	movs	r1, #0
10047ac0:	1812      	adds	r2, r2, r0
10047ac2:	414b      	adcs	r3, r1
    if ((timerHandle->expiryTime < (nextCalibrationEvent + RADIO_ACTIVITY_MARGIN)) || \
10047ac4:	6979      	ldr	r1, [r7, #20]
10047ac6:	4299      	cmp	r1, r3
10047ac8:	d805      	bhi.n	10047ad6 <_check_radio_activity+0x8a>
10047aca:	6979      	ldr	r1, [r7, #20]
10047acc:	4299      	cmp	r1, r3
10047ace:	d136      	bne.n	10047b3e <_check_radio_activity+0xf2>
10047ad0:	6939      	ldr	r1, [r7, #16]
10047ad2:	4291      	cmp	r1, r2
10047ad4:	d933      	bls.n	10047b3e <_check_radio_activity+0xf2>
    {
      if (timerHandle->expiryTime - TIMER1_INIT_DELAY > (currentTime + TIMER1_MARGIN))
10047ad6:	687b      	ldr	r3, [r7, #4]
10047ad8:	681a      	ldr	r2, [r3, #0]
10047ada:	685b      	ldr	r3, [r3, #4]
10047adc:	204c      	movs	r0, #76	@ 0x4c
10047ade:	4240      	negs	r0, r0
10047ae0:	17c1      	asrs	r1, r0, #31
10047ae2:	1880      	adds	r0, r0, r2
10047ae4:	4159      	adcs	r1, r3
10047ae6:	693a      	ldr	r2, [r7, #16]
10047ae8:	697b      	ldr	r3, [r7, #20]
10047aea:	240a      	movs	r4, #10
10047aec:	2500      	movs	r5, #0
10047aee:	1912      	adds	r2, r2, r4
10047af0:	416b      	adcs	r3, r5
10047af2:	4299      	cmp	r1, r3
10047af4:	d802      	bhi.n	10047afc <_check_radio_activity+0xb0>
10047af6:	d11a      	bne.n	10047b2e <_check_radio_activity+0xe2>
10047af8:	4290      	cmp	r0, r2
10047afa:	d918      	bls.n	10047b2e <_check_radio_activity+0xe2>
      {
        *expired = TIMER_SetRadioTimerValue(timerHandle->expiryTime, timerHandle->event_type, timerHandle->cal_req);
10047afc:	687b      	ldr	r3, [r7, #4]
10047afe:	681a      	ldr	r2, [r3, #0]
10047b00:	685b      	ldr	r3, [r3, #4]
10047b02:	0010      	movs	r0, r2
10047b04:	687b      	ldr	r3, [r7, #4]
10047b06:	7b19      	ldrb	r1, [r3, #12]
10047b08:	687b      	ldr	r3, [r7, #4]
10047b0a:	7a1b      	ldrb	r3, [r3, #8]
10047b0c:	001a      	movs	r2, r3
10047b0e:	f000 f8d5 	bl	10047cbc <TIMER_SetRadioTimerValue>
10047b12:	0003      	movs	r3, r0
10047b14:	001a      	movs	r2, r3
10047b16:	683b      	ldr	r3, [r7, #0]
10047b18:	701a      	strb	r2, [r3, #0]
        timerHandle->pending = FALSE; /* timer has been served. No more pending */
10047b1a:	687b      	ldr	r3, [r7, #4]
10047b1c:	2200      	movs	r2, #0
10047b1e:	729a      	strb	r2, [r3, #10]
        timerHandle->active = TRUE; /* timer has been programmed and it becomes ACTIVE */
10047b20:	687b      	ldr	r3, [r7, #4]
10047b22:	2201      	movs	r2, #1
10047b24:	725a      	strb	r2, [r3, #9]
        timerHandle->intTxRx_to_be_served = TRUE;
10047b26:	687b      	ldr	r3, [r7, #4]
10047b28:	2201      	movs	r2, #1
10047b2a:	72da      	strb	r2, [r3, #11]
      if (timerHandle->expiryTime - TIMER1_INIT_DELAY > (currentTime + TIMER1_MARGIN))
10047b2c:	e00b      	b.n	10047b46 <_check_radio_activity+0xfa>
      }
      else
      {
        
        RADIO_TIMER_Context.radioTimer.pending = FALSE;
10047b2e:	4b0b      	ldr	r3, [pc, #44]	@ (10047b5c <_check_radio_activity+0x110>)
10047b30:	2262      	movs	r2, #98	@ 0x62
10047b32:	2100      	movs	r1, #0
10047b34:	5499      	strb	r1, [r3, r2]
        *expired = 1;
10047b36:	683b      	ldr	r3, [r7, #0]
10047b38:	2201      	movs	r2, #1
10047b3a:	701a      	strb	r2, [r3, #0]
      if (timerHandle->expiryTime - TIMER1_INIT_DELAY > (currentTime + TIMER1_MARGIN))
10047b3c:	e003      	b.n	10047b46 <_check_radio_activity+0xfa>
      }
    }
    else
    {
#if defined (STM32WB06) || defined (STM32WB07)
      RADIO_TIMER_Context.waitCal = 1;
10047b3e:	4b07      	ldr	r3, [pc, #28]	@ (10047b5c <_check_radio_activity+0x110>)
10047b40:	229c      	movs	r2, #156	@ 0x9c
10047b42:	2101      	movs	r1, #1
10047b44:	5499      	strb	r1, [r3, r2]
10047b46:	69fb      	ldr	r3, [r7, #28]
10047b48:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
10047b4a:	68bb      	ldr	r3, [r7, #8]
10047b4c:	f383 8810 	msr	PRIMASK, r3
}
10047b50:	46c0      	nop			@ (mov r8, r8)
#endif
    }
    ATOMIC_SECTION_END();
    
  }
}
10047b52:	46c0      	nop			@ (mov r8, r8)
10047b54:	46bd      	mov	sp, r7
10047b56:	b00a      	add	sp, #40	@ 0x28
10047b58:	bdb0      	pop	{r4, r5, r7, pc}
10047b5a:	46c0      	nop			@ (mov r8, r8)
10047b5c:	20000908 	.word	0x20000908

10047b60 <TIMER_SetRadioHostWakeupTime>:
  *          if other code commands the system to go to deep sleep.
  * @warning The API must be called with interrupts disabled to avoid programming the timer with a value in the past.
  * @return  Current time in MTU.
  */
static uint32_t TIMER_SetRadioHostWakeupTime(uint32_t delay, bool *share)
{
10047b60:	b580      	push	{r7, lr}
10047b62:	b084      	sub	sp, #16
10047b64:	af00      	add	r7, sp, #0
10047b66:	6078      	str	r0, [r7, #4]
10047b68:	6039      	str	r1, [r7, #0]
  uint32_t current_time;

  delay = blue_unit_conversion(delay, RADIO_TIMER_Context.calibrationData.freq1, MULT64_THR_FREQ) ;
10047b6a:	4b2f      	ldr	r3, [pc, #188]	@ (10047c28 <TIMER_SetRadioHostWakeupTime+0xc8>)
10047b6c:	699b      	ldr	r3, [r3, #24]
10047b6e:	0019      	movs	r1, r3
10047b70:	4a2e      	ldr	r2, [pc, #184]	@ (10047c2c <TIMER_SetRadioHostWakeupTime+0xcc>)
10047b72:	687b      	ldr	r3, [r7, #4]
10047b74:	0018      	movs	r0, r3
10047b76:	f7f8 faa3 	bl	100400c0 <blue_unit_conversion>
10047b7a:	0003      	movs	r3, r0
10047b7c:	607b      	str	r3, [r7, #4]
  /* If the delay is too small round to minimum 2 tick */
  delay = MAX(32, delay);
10047b7e:	687b      	ldr	r3, [r7, #4]
10047b80:	2b20      	cmp	r3, #32
10047b82:	d200      	bcs.n	10047b86 <TIMER_SetRadioHostWakeupTime+0x26>
10047b84:	2320      	movs	r3, #32
10047b86:	607b      	str	r3, [r7, #4]
  current_time = LL_RADIO_TIMER_GetAbsoluteTime(WAKEUP);
10047b88:	4b29      	ldr	r3, [pc, #164]	@ (10047c30 <TIMER_SetRadioHostWakeupTime+0xd0>)
10047b8a:	0018      	movs	r0, r3
10047b8c:	f7fe fd4b 	bl	10046626 <LL_RADIO_TIMER_GetAbsoluteTime>
10047b90:	0003      	movs	r3, r0
10047b92:	60fb      	str	r3, [r7, #12]
  /* 4 least significant bits are not taken into account. Then let's round the value */
  LL_RADIO_TIMER_SetCPUWakeupTime(WAKEUP, ((current_time + (delay + 8)) & TIMER_MAX_VALUE));
10047b94:	687a      	ldr	r2, [r7, #4]
10047b96:	68fb      	ldr	r3, [r7, #12]
10047b98:	18d3      	adds	r3, r2, r3
10047b9a:	3308      	adds	r3, #8
10047b9c:	4a24      	ldr	r2, [pc, #144]	@ (10047c30 <TIMER_SetRadioHostWakeupTime+0xd0>)
10047b9e:	0019      	movs	r1, r3
10047ba0:	0010      	movs	r0, r2
10047ba2:	f7fe fd34 	bl	1004660e <LL_RADIO_TIMER_SetCPUWakeupTime>
  LL_RADIO_TIMER_EnableWakeupTimerLowPowerMode(WAKEUP);
10047ba6:	4b22      	ldr	r3, [pc, #136]	@ (10047c30 <TIMER_SetRadioHostWakeupTime+0xd0>)
10047ba8:	0018      	movs	r0, r3
10047baa:	f7fe fd46 	bl	1004663a <LL_RADIO_TIMER_EnableWakeupTimerLowPowerMode>
  LL_RADIO_TIMER_EnableCPUWakeupTimer(WAKEUP);
10047bae:	4b20      	ldr	r3, [pc, #128]	@ (10047c30 <TIMER_SetRadioHostWakeupTime+0xd0>)
10047bb0:	0018      	movs	r0, r3
10047bb2:	f7fe fce7 	bl	10046584 <LL_RADIO_TIMER_EnableCPUWakeupTimer>
  if ((LL_RADIO_TIMER_IsEnabledTimer1(BLUE) || LL_RADIO_TIMER_IsEnabledTimer2(BLUE) || (*share != TRUE)))
10047bb6:	23c0      	movs	r3, #192	@ 0xc0
10047bb8:	05db      	lsls	r3, r3, #23
10047bba:	0018      	movs	r0, r3
10047bbc:	f7fe fc67 	bl	1004648e <LL_RADIO_TIMER_IsEnabledTimer1>
10047bc0:	1e03      	subs	r3, r0, #0
10047bc2:	d10d      	bne.n	10047be0 <TIMER_SetRadioHostWakeupTime+0x80>
10047bc4:	23c0      	movs	r3, #192	@ 0xc0
10047bc6:	05db      	lsls	r3, r3, #23
10047bc8:	0018      	movs	r0, r3
10047bca:	f7fe fc80 	bl	100464ce <LL_RADIO_TIMER_IsEnabledTimer2>
10047bce:	1e03      	subs	r3, r0, #0
10047bd0:	d106      	bne.n	10047be0 <TIMER_SetRadioHostWakeupTime+0x80>
10047bd2:	683b      	ldr	r3, [r7, #0]
10047bd4:	781b      	ldrb	r3, [r3, #0]
10047bd6:	2201      	movs	r2, #1
10047bd8:	4053      	eors	r3, r2
10047bda:	b2db      	uxtb	r3, r3
10047bdc:	2b00      	cmp	r3, #0
10047bde:	d004      	beq.n	10047bea <TIMER_SetRadioHostWakeupTime+0x8a>
  {
    *share = FALSE;
10047be0:	683b      	ldr	r3, [r7, #0]
10047be2:	2200      	movs	r2, #0
10047be4:	701a      	strb	r2, [r3, #0]
    return current_time;
10047be6:	68fb      	ldr	r3, [r7, #12]
10047be8:	e01a      	b.n	10047c20 <TIMER_SetRadioHostWakeupTime+0xc0>
  }
  _set_controller_as_host();
10047bea:	f000 f823 	bl	10047c34 <_set_controller_as_host>
  /* 4 least significant bits are not taken into account. Then let's round the value */
  LL_RADIO_TIMER_SetBLEWakeupTime(WAKEUP, ((current_time + delay + 8) & 0xFFFFFFF0));
10047bee:	68fa      	ldr	r2, [r7, #12]
10047bf0:	687b      	ldr	r3, [r7, #4]
10047bf2:	18d3      	adds	r3, r2, r3
10047bf4:	3308      	adds	r3, #8
10047bf6:	220f      	movs	r2, #15
10047bf8:	4393      	bics	r3, r2
10047bfa:	4a0d      	ldr	r2, [pc, #52]	@ (10047c30 <TIMER_SetRadioHostWakeupTime+0xd0>)
10047bfc:	0019      	movs	r1, r3
10047bfe:	0010      	movs	r0, r2
10047c00:	f7fe fcef 	bl	100465e2 <LL_RADIO_TIMER_SetBLEWakeupTime>
  LL_RADIO_TIMER_SetSleepRequestMode(WAKEUP, 0);
10047c04:	4b0a      	ldr	r3, [pc, #40]	@ (10047c30 <TIMER_SetRadioHostWakeupTime+0xd0>)
10047c06:	2100      	movs	r1, #0
10047c08:	0018      	movs	r0, r3
10047c0a:	f7fe fd25 	bl	10046658 <LL_RADIO_TIMER_SetSleepRequestMode>
  LL_RADIO_TIMER_EnableBLEWakeupTimer(WAKEUP);
10047c0e:	4b08      	ldr	r3, [pc, #32]	@ (10047c30 <TIMER_SetRadioHostWakeupTime+0xd0>)
10047c10:	0018      	movs	r0, r3
10047c12:	f7fe fc83 	bl	1004651c <LL_RADIO_TIMER_EnableBLEWakeupTimer>
  LL_RADIO_TIMER_EnableWakeupTimerLowPowerMode(WAKEUP);
10047c16:	4b06      	ldr	r3, [pc, #24]	@ (10047c30 <TIMER_SetRadioHostWakeupTime+0xd0>)
10047c18:	0018      	movs	r0, r3
10047c1a:	f7fe fd0e 	bl	1004663a <LL_RADIO_TIMER_EnableWakeupTimerLowPowerMode>
  return current_time;
10047c1e:	68fb      	ldr	r3, [r7, #12]
}
10047c20:	0018      	movs	r0, r3
10047c22:	46bd      	mov	sp, r7
10047c24:	b004      	add	sp, #16
10047c26:	bd80      	pop	{r7, pc}
10047c28:	20000908 	.word	0x20000908
10047c2c:	00000326 	.word	0x00000326
10047c30:	60001800 	.word	0x60001800

10047c34 <_set_controller_as_host>:

static void _set_controller_as_host(void)
{
10047c34:	b580      	push	{r7, lr}
10047c36:	af00      	add	r7, sp, #0
  BLUEGLOB->BYTE4 &= ~(1 << 7);
10047c38:	4b08      	ldr	r3, [pc, #32]	@ (10047c5c <_set_controller_as_host+0x28>)
10047c3a:	791b      	ldrb	r3, [r3, #4]
10047c3c:	b2db      	uxtb	r3, r3
10047c3e:	4a07      	ldr	r2, [pc, #28]	@ (10047c5c <_set_controller_as_host+0x28>)
10047c40:	217f      	movs	r1, #127	@ 0x7f
10047c42:	400b      	ands	r3, r1
10047c44:	b2db      	uxtb	r3, r3
10047c46:	7113      	strb	r3, [r2, #4]
  BLUEGLOB->BYTE22 = 0x0;
10047c48:	4b04      	ldr	r3, [pc, #16]	@ (10047c5c <_set_controller_as_host+0x28>)
10047c4a:	2200      	movs	r2, #0
10047c4c:	759a      	strb	r2, [r3, #22]
  BLUEGLOB->BYTE23 = 0x0;
10047c4e:	4b03      	ldr	r3, [pc, #12]	@ (10047c5c <_set_controller_as_host+0x28>)
10047c50:	2200      	movs	r2, #0
10047c52:	75da      	strb	r2, [r3, #23]
}
10047c54:	46c0      	nop			@ (mov r8, r8)
10047c56:	46bd      	mov	sp, r7
10047c58:	bd80      	pop	{r7, pc}
10047c5a:	46c0      	nop			@ (mov r8, r8)
10047c5c:	200000c0 	.word	0x200000c0

10047c60 <_check_host_activity>:

static void _check_host_activity(void)
{
10047c60:	b580      	push	{r7, lr}
10047c62:	b082      	sub	sp, #8
10047c64:	af00      	add	r7, sp, #0
  uint8_t expired;
  RADIO_TIMER_Context.rootNode = _update_user_timeout(RADIO_TIMER_Context.rootNode, &expired);
10047c66:	4b14      	ldr	r3, [pc, #80]	@ (10047cb8 <_check_host_activity+0x58>)
10047c68:	228c      	movs	r2, #140	@ 0x8c
10047c6a:	589b      	ldr	r3, [r3, r2]
10047c6c:	1dfa      	adds	r2, r7, #7
10047c6e:	0011      	movs	r1, r2
10047c70:	0018      	movs	r0, r3
10047c72:	f7ff fccf 	bl	10047614 <_update_user_timeout>
10047c76:	0002      	movs	r2, r0
10047c78:	4b0f      	ldr	r3, [pc, #60]	@ (10047cb8 <_check_host_activity+0x58>)
10047c7a:	218c      	movs	r1, #140	@ 0x8c
10047c7c:	505a      	str	r2, [r3, r1]
  if (expired == 1)
10047c7e:	1dfb      	adds	r3, r7, #7
10047c80:	781b      	ldrb	r3, [r3, #0]
10047c82:	2b01      	cmp	r3, #1
10047c84:	d114      	bne.n	10047cb0 <_check_host_activity+0x50>
  {
    /* A new root timer is already expired, mimic timer expire */
    INCREMENT_EXPIRE_COUNT_ISR;
10047c86:	4b0c      	ldr	r3, [pc, #48]	@ (10047cb8 <_check_host_activity+0x58>)
10047c88:	2291      	movs	r2, #145	@ 0x91
10047c8a:	5c9b      	ldrb	r3, [r3, r2]
10047c8c:	3301      	adds	r3, #1
10047c8e:	4a0a      	ldr	r2, [pc, #40]	@ (10047cb8 <_check_host_activity+0x58>)
10047c90:	2192      	movs	r1, #146	@ 0x92
10047c92:	5c52      	ldrb	r2, [r2, r1]
10047c94:	4293      	cmp	r3, r2
10047c96:	d103      	bne.n	10047ca0 <_check_host_activity+0x40>
10047c98:	4b07      	ldr	r3, [pc, #28]	@ (10047cb8 <_check_host_activity+0x58>)
10047c9a:	2291      	movs	r2, #145	@ 0x91
10047c9c:	5c9b      	ldrb	r3, [r3, r2]
10047c9e:	e004      	b.n	10047caa <_check_host_activity+0x4a>
10047ca0:	4b05      	ldr	r3, [pc, #20]	@ (10047cb8 <_check_host_activity+0x58>)
10047ca2:	2291      	movs	r2, #145	@ 0x91
10047ca4:	5c9b      	ldrb	r3, [r3, r2]
10047ca6:	3301      	adds	r3, #1
10047ca8:	b2db      	uxtb	r3, r3
10047caa:	4a03      	ldr	r2, [pc, #12]	@ (10047cb8 <_check_host_activity+0x58>)
10047cac:	2191      	movs	r1, #145	@ 0x91
10047cae:	5453      	strb	r3, [r2, r1]
  }
}
10047cb0:	46c0      	nop			@ (mov r8, r8)
10047cb2:	46bd      	mov	sp, r7
10047cb4:	b002      	add	sp, #8
10047cb6:	bd80      	pop	{r7, pc}
10047cb8:	20000908 	.word	0x20000908

10047cbc <TIMER_SetRadioTimerValue>:
  * @warning The API must be called with interrupts disabled to avoid programming the timer with a value in the past
  * @retval  0 if a correct timeout has been programmed in the timeout register
  * @retval  1 if a correct timeout cannot be programmed
  */
static uint8_t TIMER_SetRadioTimerValue(uint32_t timeout, bool event_type, bool cal_req)
{
10047cbc:	b580      	push	{r7, lr}
10047cbe:	b08a      	sub	sp, #40	@ 0x28
10047cc0:	af00      	add	r7, sp, #0
10047cc2:	6078      	str	r0, [r7, #4]
10047cc4:	0008      	movs	r0, r1
10047cc6:	0011      	movs	r1, r2
10047cc8:	1cfb      	adds	r3, r7, #3
10047cca:	1c02      	adds	r2, r0, #0
10047ccc:	701a      	strb	r2, [r3, #0]
10047cce:	1cbb      	adds	r3, r7, #2
10047cd0:	1c0a      	adds	r2, r1, #0
10047cd2:	701a      	strb	r2, [r3, #0]
  uint32_t current_time, delay, radio_init_delay, device_delay, rel_timeout, rel_timeout_mt;
  uint8_t ret_val;

  /*choose the 2nd init duration. Check the event_type and cal. request*/
  if (event_type == TX)
10047cd4:	1cfb      	adds	r3, r7, #3
10047cd6:	781b      	ldrb	r3, [r3, #0]
10047cd8:	2b00      	cmp	r3, #0
10047cda:	d015      	beq.n	10047d08 <TIMER_SetRadioTimerValue+0x4c>
  {
    if (cal_req)
10047cdc:	1cbb      	adds	r3, r7, #2
10047cde:	781b      	ldrb	r3, [r3, #0]
10047ce0:	2b00      	cmp	r3, #0
10047ce2:	d008      	beq.n	10047cf6 <TIMER_SetRadioTimerValue+0x3a>
    {
      radio_init_delay = RADIO_TIMER_Context.TxRxDelay.tx_cal_delay;
10047ce4:	4b6e      	ldr	r3, [pc, #440]	@ (10047ea0 <TIMER_SetRadioTimerValue+0x1e4>)
10047ce6:	2238      	movs	r2, #56	@ 0x38
10047ce8:	5c9b      	ldrb	r3, [r3, r2]
10047cea:	623b      	str	r3, [r7, #32]
      device_delay = RADIO_TIMER_Context.TxRxDelay.tx_cal_delay_st;
10047cec:	4b6c      	ldr	r3, [pc, #432]	@ (10047ea0 <TIMER_SetRadioTimerValue+0x1e4>)
10047cee:	223c      	movs	r2, #60	@ 0x3c
10047cf0:	5c9b      	ldrb	r3, [r3, r2]
10047cf2:	61fb      	str	r3, [r7, #28]
10047cf4:	e01d      	b.n	10047d32 <TIMER_SetRadioTimerValue+0x76>
    }
    else
    {
      radio_init_delay = RADIO_TIMER_Context.TxRxDelay.tx_no_cal_delay;
10047cf6:	4b6a      	ldr	r3, [pc, #424]	@ (10047ea0 <TIMER_SetRadioTimerValue+0x1e4>)
10047cf8:	2239      	movs	r2, #57	@ 0x39
10047cfa:	5c9b      	ldrb	r3, [r3, r2]
10047cfc:	623b      	str	r3, [r7, #32]
      device_delay = RADIO_TIMER_Context.TxRxDelay.tx_cal_delay_st;
10047cfe:	4b68      	ldr	r3, [pc, #416]	@ (10047ea0 <TIMER_SetRadioTimerValue+0x1e4>)
10047d00:	223c      	movs	r2, #60	@ 0x3c
10047d02:	5c9b      	ldrb	r3, [r3, r2]
10047d04:	61fb      	str	r3, [r7, #28]
10047d06:	e014      	b.n	10047d32 <TIMER_SetRadioTimerValue+0x76>
    }
  }
  else
  {
    if (cal_req)
10047d08:	1cbb      	adds	r3, r7, #2
10047d0a:	781b      	ldrb	r3, [r3, #0]
10047d0c:	2b00      	cmp	r3, #0
10047d0e:	d008      	beq.n	10047d22 <TIMER_SetRadioTimerValue+0x66>
    {
      radio_init_delay = RADIO_TIMER_Context.TxRxDelay.rx_cal_delay;
10047d10:	4b63      	ldr	r3, [pc, #396]	@ (10047ea0 <TIMER_SetRadioTimerValue+0x1e4>)
10047d12:	223a      	movs	r2, #58	@ 0x3a
10047d14:	5c9b      	ldrb	r3, [r3, r2]
10047d16:	623b      	str	r3, [r7, #32]
      device_delay = RADIO_TIMER_Context.TxRxDelay.tx_cal_delay_st;
10047d18:	4b61      	ldr	r3, [pc, #388]	@ (10047ea0 <TIMER_SetRadioTimerValue+0x1e4>)
10047d1a:	223c      	movs	r2, #60	@ 0x3c
10047d1c:	5c9b      	ldrb	r3, [r3, r2]
10047d1e:	61fb      	str	r3, [r7, #28]
10047d20:	e007      	b.n	10047d32 <TIMER_SetRadioTimerValue+0x76>
    }
    else
    {
      radio_init_delay = RADIO_TIMER_Context.TxRxDelay.rx_no_cal_delay;
10047d22:	4b5f      	ldr	r3, [pc, #380]	@ (10047ea0 <TIMER_SetRadioTimerValue+0x1e4>)
10047d24:	223b      	movs	r2, #59	@ 0x3b
10047d26:	5c9b      	ldrb	r3, [r3, r2]
10047d28:	623b      	str	r3, [r7, #32]
      device_delay = RADIO_TIMER_Context.TxRxDelay.tx_cal_delay_st;
10047d2a:	4b5d      	ldr	r3, [pc, #372]	@ (10047ea0 <TIMER_SetRadioTimerValue+0x1e4>)
10047d2c:	223c      	movs	r2, #60	@ 0x3c
10047d2e:	5c9b      	ldrb	r3, [r3, r2]
10047d30:	61fb      	str	r3, [r7, #28]
    }
  }

  /* At this point, it is care of the upper layers to guarantee that the timeout represents an absolute time in the future */
  rel_timeout = timeout - (uint32_t)_get_system_time_and_machine(&RADIO_TIMER_Context, &current_time);
10047d32:	230c      	movs	r3, #12
10047d34:	18fa      	adds	r2, r7, r3
10047d36:	4b5a      	ldr	r3, [pc, #360]	@ (10047ea0 <TIMER_SetRadioTimerValue+0x1e4>)
10047d38:	0011      	movs	r1, r2
10047d3a:	0018      	movs	r0, r3
10047d3c:	f7ff fc02 	bl	10047544 <_get_system_time_and_machine>
10047d40:	0002      	movs	r2, r0
10047d42:	000b      	movs	r3, r1
10047d44:	687b      	ldr	r3, [r7, #4]
10047d46:	1a9b      	subs	r3, r3, r2
10047d48:	617b      	str	r3, [r7, #20]

  rel_timeout_mt =  blue_unit_conversion(rel_timeout, RADIO_TIMER_Context.calibrationData.freq1, MULT64_THR_FREQ);
10047d4a:	4b55      	ldr	r3, [pc, #340]	@ (10047ea0 <TIMER_SetRadioTimerValue+0x1e4>)
10047d4c:	699b      	ldr	r3, [r3, #24]
10047d4e:	0019      	movs	r1, r3
10047d50:	4a54      	ldr	r2, [pc, #336]	@ (10047ea4 <TIMER_SetRadioTimerValue+0x1e8>)
10047d52:	697b      	ldr	r3, [r7, #20]
10047d54:	0018      	movs	r0, r3
10047d56:	f7f8 f9b3 	bl	100400c0 <blue_unit_conversion>
10047d5a:	0003      	movs	r3, r0
10047d5c:	613b      	str	r3, [r7, #16]

  /*Check if the timeout is beyond the wakeup time offset. Then program either the WakeUp timer or the Timer1*/
  if (rel_timeout > (device_delay + RADIO_TIMER_Context.hs_startup_time + MARGIN_EXT))
10047d5e:	4b50      	ldr	r3, [pc, #320]	@ (10047ea0 <TIMER_SetRadioTimerValue+0x1e4>)
10047d60:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
10047d62:	69fb      	ldr	r3, [r7, #28]
10047d64:	18d3      	adds	r3, r2, r3
10047d66:	33c8      	adds	r3, #200	@ 0xc8
10047d68:	697a      	ldr	r2, [r7, #20]
10047d6a:	429a      	cmp	r2, r3
10047d6c:	d92f      	bls.n	10047dce <TIMER_SetRadioTimerValue+0x112>
  {
    /*The timeout is after the wakeup_time_offset, So it is ok to program the wakeup timer*/
    delay = rel_timeout_mt - BLUEGLOB->WAKEUPINITDELAY - radio_init_delay;
10047d6e:	4b4e      	ldr	r3, [pc, #312]	@ (10047ea8 <TIMER_SetRadioTimerValue+0x1ec>)
10047d70:	795b      	ldrb	r3, [r3, #5]
10047d72:	b2db      	uxtb	r3, r3
10047d74:	001a      	movs	r2, r3
10047d76:	693b      	ldr	r3, [r7, #16]
10047d78:	1a9a      	subs	r2, r3, r2
10047d7a:	6a3b      	ldr	r3, [r7, #32]
10047d7c:	1ad3      	subs	r3, r2, r3
10047d7e:	627b      	str	r3, [r7, #36]	@ 0x24
    LL_RADIO_TIMER_SetBLEWakeupTime(WAKEUP, ((current_time + delay) & TIMER_MAX_VALUE));
10047d80:	68fa      	ldr	r2, [r7, #12]
10047d82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10047d84:	18d3      	adds	r3, r2, r3
10047d86:	4a49      	ldr	r2, [pc, #292]	@ (10047eac <TIMER_SetRadioTimerValue+0x1f0>)
10047d88:	0019      	movs	r1, r3
10047d8a:	0010      	movs	r0, r2
10047d8c:	f7fe fc29 	bl	100465e2 <LL_RADIO_TIMER_SetBLEWakeupTime>
    LL_RADIO_TIMER_SetSleepRequestMode(WAKEUP, 0);
10047d90:	4b46      	ldr	r3, [pc, #280]	@ (10047eac <TIMER_SetRadioTimerValue+0x1f0>)
10047d92:	2100      	movs	r1, #0
10047d94:	0018      	movs	r0, r3
10047d96:	f7fe fc5f 	bl	10046658 <LL_RADIO_TIMER_SetSleepRequestMode>
    LL_RADIO_TIMER_DisableTimer1(BLUE);
10047d9a:	23c0      	movs	r3, #192	@ 0xc0
10047d9c:	05db      	lsls	r3, r3, #23
10047d9e:	0018      	movs	r0, r3
10047da0:	f7fe fb66 	bl	10046470 <LL_RADIO_TIMER_DisableTimer1>
    LL_RADIO_TIMER_DisableTimer2(BLUE);
10047da4:	23c0      	movs	r3, #192	@ 0xc0
10047da6:	05db      	lsls	r3, r3, #23
10047da8:	0018      	movs	r0, r3
10047daa:	f7fe fb81 	bl	100464b0 <LL_RADIO_TIMER_DisableTimer2>
    LL_RADIO_TIMER_EnableBLEWakeupTimer(WAKEUP);
10047dae:	4b3f      	ldr	r3, [pc, #252]	@ (10047eac <TIMER_SetRadioTimerValue+0x1f0>)
10047db0:	0018      	movs	r0, r3
10047db2:	f7fe fbb3 	bl	1004651c <LL_RADIO_TIMER_EnableBLEWakeupTimer>
    LL_RADIO_TIMER_EnableWakeupTimerLowPowerMode(WAKEUP);
10047db6:	4b3d      	ldr	r3, [pc, #244]	@ (10047eac <TIMER_SetRadioTimerValue+0x1f0>)
10047db8:	0018      	movs	r0, r3
10047dba:	f7fe fc3e 	bl	1004663a <LL_RADIO_TIMER_EnableWakeupTimerLowPowerMode>
    radio_init_delay += BLUEGLOB->WAKEUPINITDELAY;
10047dbe:	4b3a      	ldr	r3, [pc, #232]	@ (10047ea8 <TIMER_SetRadioTimerValue+0x1ec>)
10047dc0:	795b      	ldrb	r3, [r3, #5]
10047dc2:	b2db      	uxtb	r3, r3
10047dc4:	001a      	movs	r2, r3
10047dc6:	6a3b      	ldr	r3, [r7, #32]
10047dc8:	189b      	adds	r3, r3, r2
10047dca:	623b      	str	r3, [r7, #32]
10047dcc:	e021      	b.n	10047e12 <TIMER_SetRadioTimerValue+0x156>
  }
  else
  {
    delay = rel_timeout_mt - RADIO_TIMER_Context.TxRxDelay.tim12_delay_mt - radio_init_delay;
10047dce:	4b34      	ldr	r3, [pc, #208]	@ (10047ea0 <TIMER_SetRadioTimerValue+0x1e4>)
10047dd0:	223d      	movs	r2, #61	@ 0x3d
10047dd2:	5c9b      	ldrb	r3, [r3, r2]
10047dd4:	001a      	movs	r2, r3
10047dd6:	693b      	ldr	r3, [r7, #16]
10047dd8:	1a9a      	subs	r2, r3, r2
10047dda:	6a3b      	ldr	r3, [r7, #32]
10047ddc:	1ad3      	subs	r3, r2, r3
10047dde:	627b      	str	r3, [r7, #36]	@ 0x24
    LL_RADIO_TIMER_SetTimeout(BLUE, ((current_time + delay) & TIMER_MAX_VALUE));
10047de0:	68fa      	ldr	r2, [r7, #12]
10047de2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10047de4:	18d2      	adds	r2, r2, r3
10047de6:	23c0      	movs	r3, #192	@ 0xc0
10047de8:	05db      	lsls	r3, r3, #23
10047dea:	0011      	movs	r1, r2
10047dec:	0018      	movs	r0, r3
10047dee:	f7fe fb7f 	bl	100464f0 <LL_RADIO_TIMER_SetTimeout>
    LL_RADIO_TIMER_DisableBLEWakeupTimer(WAKEUP);
10047df2:	4b2e      	ldr	r3, [pc, #184]	@ (10047eac <TIMER_SetRadioTimerValue+0x1f0>)
10047df4:	0018      	movs	r0, r3
10047df6:	f7fe fba1 	bl	1004653c <LL_RADIO_TIMER_DisableBLEWakeupTimer>
    LL_RADIO_TIMER_EnableTimer1(BLUE);
10047dfa:	23c0      	movs	r3, #192	@ 0xc0
10047dfc:	05db      	lsls	r3, r3, #23
10047dfe:	0018      	movs	r0, r3
10047e00:	f7fe fb26 	bl	10046450 <LL_RADIO_TIMER_EnableTimer1>
    radio_init_delay += RADIO_TIMER_Context.TxRxDelay.tim12_delay_mt;
10047e04:	4b26      	ldr	r3, [pc, #152]	@ (10047ea0 <TIMER_SetRadioTimerValue+0x1e4>)
10047e06:	223d      	movs	r2, #61	@ 0x3d
10047e08:	5c9b      	ldrb	r3, [r3, r2]
10047e0a:	001a      	movs	r2, r3
10047e0c:	6a3b      	ldr	r3, [r7, #32]
10047e0e:	189b      	adds	r3, r3, r2
10047e10:	623b      	str	r3, [r7, #32]
  }

  RADIO_TIMER_Context.last_anchor_mt = (current_time + rel_timeout_mt) & TIMER_MAX_VALUE;
10047e12:	68fa      	ldr	r2, [r7, #12]
10047e14:	693b      	ldr	r3, [r7, #16]
10047e16:	18d2      	adds	r2, r2, r3
10047e18:	4b21      	ldr	r3, [pc, #132]	@ (10047ea0 <TIMER_SetRadioTimerValue+0x1e4>)
10047e1a:	2188      	movs	r1, #136	@ 0x88
10047e1c:	505a      	str	r2, [r3, r1]

#if defined (STM32WB06) || defined (STM32WB07)
  BLUEGLOB->BYTE4 |= 1 << 7;
10047e1e:	4b22      	ldr	r3, [pc, #136]	@ (10047ea8 <TIMER_SetRadioTimerValue+0x1ec>)
10047e20:	791b      	ldrb	r3, [r3, #4]
10047e22:	b2db      	uxtb	r3, r3
10047e24:	4920      	ldr	r1, [pc, #128]	@ (10047ea8 <TIMER_SetRadioTimerValue+0x1ec>)
10047e26:	2280      	movs	r2, #128	@ 0x80
10047e28:	4252      	negs	r2, r2
10047e2a:	4313      	orrs	r3, r2
10047e2c:	b2db      	uxtb	r3, r3
10047e2e:	710b      	strb	r3, [r1, #4]
  BLUEGLOB->BYTE22 = 0xF0;
10047e30:	4b1d      	ldr	r3, [pc, #116]	@ (10047ea8 <TIMER_SetRadioTimerValue+0x1ec>)
10047e32:	22f0      	movs	r2, #240	@ 0xf0
10047e34:	759a      	strb	r2, [r3, #22]
  BLUEGLOB->BYTE23 = 0xFF;
10047e36:	4b1c      	ldr	r3, [pc, #112]	@ (10047ea8 <TIMER_SetRadioTimerValue+0x1ec>)
10047e38:	22ff      	movs	r2, #255	@ 0xff
10047e3a:	75da      	strb	r2, [r3, #23]
#endif

  /* Basic low level check with an extra margin of machine units */
  if ((delay + radio_init_delay) < (radio_init_delay + 5))
10047e3c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
10047e3e:	6a3b      	ldr	r3, [r7, #32]
10047e40:	18d2      	adds	r2, r2, r3
10047e42:	6a3b      	ldr	r3, [r7, #32]
10047e44:	3305      	adds	r3, #5
10047e46:	429a      	cmp	r2, r3
10047e48:	d212      	bcs.n	10047e70 <TIMER_SetRadioTimerValue+0x1b4>
  {
    LL_RADIO_TIMER_DisableTimer1(BLUE);
10047e4a:	23c0      	movs	r3, #192	@ 0xc0
10047e4c:	05db      	lsls	r3, r3, #23
10047e4e:	0018      	movs	r0, r3
10047e50:	f7fe fb0e 	bl	10046470 <LL_RADIO_TIMER_DisableTimer1>
    LL_RADIO_TIMER_DisableTimer2(BLUE);
10047e54:	23c0      	movs	r3, #192	@ 0xc0
10047e56:	05db      	lsls	r3, r3, #23
10047e58:	0018      	movs	r0, r3
10047e5a:	f7fe fb29 	bl	100464b0 <LL_RADIO_TIMER_DisableTimer2>
    LL_RADIO_TIMER_DisableBLEWakeupTimer(WAKEUP);
10047e5e:	4b13      	ldr	r3, [pc, #76]	@ (10047eac <TIMER_SetRadioTimerValue+0x1f0>)
10047e60:	0018      	movs	r0, r3
10047e62:	f7fe fb6b 	bl	1004653c <LL_RADIO_TIMER_DisableBLEWakeupTimer>
    ret_val =  1;
10047e66:	231b      	movs	r3, #27
10047e68:	18fb      	adds	r3, r7, r3
10047e6a:	2201      	movs	r2, #1
10047e6c:	701a      	strb	r2, [r3, #0]
10047e6e:	e010      	b.n	10047e92 <TIMER_SetRadioTimerValue+0x1d6>
  }
  else
  {
    RADIO_TIMER_Context.last_setup_time = blue_unit_conversion(radio_init_delay, RADIO_TIMER_Context.calibrationData.period1, MULT64_THR_PERIOD);
10047e70:	4b0b      	ldr	r3, [pc, #44]	@ (10047ea0 <TIMER_SetRadioTimerValue+0x1e4>)
10047e72:	69db      	ldr	r3, [r3, #28]
10047e74:	0019      	movs	r1, r3
10047e76:	4a0e      	ldr	r2, [pc, #56]	@ (10047eb0 <TIMER_SetRadioTimerValue+0x1f4>)
10047e78:	6a3b      	ldr	r3, [r7, #32]
10047e7a:	0018      	movs	r0, r3
10047e7c:	f7f8 f920 	bl	100400c0 <blue_unit_conversion>
10047e80:	0003      	movs	r3, r0
10047e82:	b2d9      	uxtb	r1, r3
10047e84:	4b06      	ldr	r3, [pc, #24]	@ (10047ea0 <TIMER_SetRadioTimerValue+0x1e4>)
10047e86:	2284      	movs	r2, #132	@ 0x84
10047e88:	5499      	strb	r1, [r3, r2]
    ret_val = 0;
10047e8a:	231b      	movs	r3, #27
10047e8c:	18fb      	adds	r3, r7, r3
10047e8e:	2200      	movs	r2, #0
10047e90:	701a      	strb	r2, [r3, #0]
  }

  return ret_val;
10047e92:	231b      	movs	r3, #27
10047e94:	18fb      	adds	r3, r7, r3
10047e96:	781b      	ldrb	r3, [r3, #0]
}
10047e98:	0018      	movs	r0, r3
10047e9a:	46bd      	mov	sp, r7
10047e9c:	b00a      	add	sp, #40	@ 0x28
10047e9e:	bd80      	pop	{r7, pc}
10047ea0:	20000908 	.word	0x20000908
10047ea4:	00000326 	.word	0x00000326
10047ea8:	200000c0 	.word	0x200000c0
10047eac:	60001800 	.word	0x60001800
10047eb0:	00000635 	.word	0x00000635

10047eb4 <TIMER_GetPastSysTime>:
  * @param   current_system_time: Current System time
  * @warning User should guarantee that call to this function are performed in a non-interruptible context.
  * @return  STU value
  */
static uint64_t TIMER_GetPastSysTime(uint32_t time, uint64_t *current_system_time)
{
10047eb4:	b5b0      	push	{r4, r5, r7, lr}
10047eb6:	b084      	sub	sp, #16
10047eb8:	af00      	add	r7, sp, #0
10047eba:	6078      	str	r0, [r7, #4]
10047ebc:	6039      	str	r1, [r7, #0]
  uint32_t delta_systime, current_machine_time;

  *current_system_time = _get_system_time_and_machine(&RADIO_TIMER_Context, &current_machine_time);
10047ebe:	2308      	movs	r3, #8
10047ec0:	18fa      	adds	r2, r7, r3
10047ec2:	4b12      	ldr	r3, [pc, #72]	@ (10047f0c <TIMER_GetPastSysTime+0x58>)
10047ec4:	0011      	movs	r1, r2
10047ec6:	0018      	movs	r0, r3
10047ec8:	f7ff fb3c 	bl	10047544 <_get_system_time_and_machine>
10047ecc:	0002      	movs	r2, r0
10047ece:	000b      	movs	r3, r1
10047ed0:	6839      	ldr	r1, [r7, #0]
10047ed2:	600a      	str	r2, [r1, #0]
10047ed4:	604b      	str	r3, [r1, #4]
  delta_systime = blue_unit_conversion(TIME_DIFF(current_machine_time, time), RADIO_TIMER_Context.calibrationData.period1, MULT64_THR_PERIOD);
10047ed6:	68ba      	ldr	r2, [r7, #8]
10047ed8:	687b      	ldr	r3, [r7, #4]
10047eda:	1ad0      	subs	r0, r2, r3
10047edc:	4b0b      	ldr	r3, [pc, #44]	@ (10047f0c <TIMER_GetPastSysTime+0x58>)
10047ede:	69db      	ldr	r3, [r3, #28]
10047ee0:	0019      	movs	r1, r3
10047ee2:	4b0b      	ldr	r3, [pc, #44]	@ (10047f10 <TIMER_GetPastSysTime+0x5c>)
10047ee4:	001a      	movs	r2, r3
10047ee6:	f7f8 f8eb 	bl	100400c0 <blue_unit_conversion>
10047eea:	0003      	movs	r3, r0
10047eec:	60fb      	str	r3, [r7, #12]

  return (*current_system_time - delta_systime);
10047eee:	683b      	ldr	r3, [r7, #0]
10047ef0:	681a      	ldr	r2, [r3, #0]
10047ef2:	685b      	ldr	r3, [r3, #4]
10047ef4:	68f9      	ldr	r1, [r7, #12]
10047ef6:	000c      	movs	r4, r1
10047ef8:	2100      	movs	r1, #0
10047efa:	000d      	movs	r5, r1
10047efc:	1b12      	subs	r2, r2, r4
10047efe:	41ab      	sbcs	r3, r5
}
10047f00:	0010      	movs	r0, r2
10047f02:	0019      	movs	r1, r3
10047f04:	46bd      	mov	sp, r7
10047f06:	b004      	add	sp, #16
10047f08:	bdb0      	pop	{r4, r5, r7, pc}
10047f0a:	46c0      	nop			@ (mov r8, r8)
10047f0c:	20000908 	.word	0x20000908
10047f10:	00000635 	.word	0x00000635

10047f14 <TIMER_GetRadioTimerValue>:
  * @retval 1 if Timer1 has been programmed.
  * @retval 2 if Timer2 has been programmed.
  * @retval 3 if Wakeup Timer has been programmed.
  */
static uint8_t TIMER_GetRadioTimerValue(uint32_t *time)
{
10047f14:	b580      	push	{r7, lr}
10047f16:	b082      	sub	sp, #8
10047f18:	af00      	add	r7, sp, #0
10047f1a:	6078      	str	r0, [r7, #4]
  if (LL_RADIO_TIMER_IsEnabledBLEWakeupTimer(WAKEUP))
10047f1c:	4b1a      	ldr	r3, [pc, #104]	@ (10047f88 <TIMER_GetRadioTimerValue+0x74>)
10047f1e:	0018      	movs	r0, r3
10047f20:	f7fe fb1c 	bl	1004655c <LL_RADIO_TIMER_IsEnabledBLEWakeupTimer>
10047f24:	1e03      	subs	r3, r0, #0
10047f26:	d008      	beq.n	10047f3a <TIMER_GetRadioTimerValue+0x26>
  {
    *time = LL_RADIO_TIMER_GetBLEWakeupTime(WAKEUP);
10047f28:	4b17      	ldr	r3, [pc, #92]	@ (10047f88 <TIMER_GetRadioTimerValue+0x74>)
10047f2a:	0018      	movs	r0, r3
10047f2c:	f7fe fb65 	bl	100465fa <LL_RADIO_TIMER_GetBLEWakeupTime>
10047f30:	0002      	movs	r2, r0
10047f32:	687b      	ldr	r3, [r7, #4]
10047f34:	601a      	str	r2, [r3, #0]
    return WAKEUP_RADIO_TIMER_BUSY;
10047f36:	2303      	movs	r3, #3
10047f38:	e022      	b.n	10047f80 <TIMER_GetRadioTimerValue+0x6c>
  }
  else if (LL_RADIO_TIMER_IsEnabledTimer1(BLUE))
10047f3a:	23c0      	movs	r3, #192	@ 0xc0
10047f3c:	05db      	lsls	r3, r3, #23
10047f3e:	0018      	movs	r0, r3
10047f40:	f7fe faa5 	bl	1004648e <LL_RADIO_TIMER_IsEnabledTimer1>
10047f44:	1e03      	subs	r3, r0, #0
10047f46:	d009      	beq.n	10047f5c <TIMER_GetRadioTimerValue+0x48>
  {
    *time = LL_RADIO_TIMER_GetTimeout(BLUE);
10047f48:	23c0      	movs	r3, #192	@ 0xc0
10047f4a:	05db      	lsls	r3, r3, #23
10047f4c:	0018      	movs	r0, r3
10047f4e:	f7fe fadb 	bl	10046508 <LL_RADIO_TIMER_GetTimeout>
10047f52:	0002      	movs	r2, r0
10047f54:	687b      	ldr	r3, [r7, #4]
10047f56:	601a      	str	r2, [r3, #0]
    return RADIO_TIMER1_BUSY;
10047f58:	2301      	movs	r3, #1
10047f5a:	e011      	b.n	10047f80 <TIMER_GetRadioTimerValue+0x6c>
  }
  else if (LL_RADIO_TIMER_IsEnabledTimer2(BLUE))
10047f5c:	23c0      	movs	r3, #192	@ 0xc0
10047f5e:	05db      	lsls	r3, r3, #23
10047f60:	0018      	movs	r0, r3
10047f62:	f7fe fab4 	bl	100464ce <LL_RADIO_TIMER_IsEnabledTimer2>
10047f66:	1e03      	subs	r3, r0, #0
10047f68:	d009      	beq.n	10047f7e <TIMER_GetRadioTimerValue+0x6a>
  {
    *time = LL_RADIO_TIMER_GetTimeout(BLUE);
10047f6a:	23c0      	movs	r3, #192	@ 0xc0
10047f6c:	05db      	lsls	r3, r3, #23
10047f6e:	0018      	movs	r0, r3
10047f70:	f7fe faca 	bl	10046508 <LL_RADIO_TIMER_GetTimeout>
10047f74:	0002      	movs	r2, r0
10047f76:	687b      	ldr	r3, [r7, #4]
10047f78:	601a      	str	r2, [r3, #0]
    return RADIO_TIMER2_BUSY;
10047f7a:	2302      	movs	r3, #2
10047f7c:	e000      	b.n	10047f80 <TIMER_GetRadioTimerValue+0x6c>
  }
  else
  {
    return 0;
10047f7e:	2300      	movs	r3, #0
  }
}
10047f80:	0018      	movs	r0, r3
10047f82:	46bd      	mov	sp, r7
10047f84:	b002      	add	sp, #8
10047f86:	bd80      	pop	{r7, pc}
10047f88:	60001800 	.word	0x60001800

10047f8c <HAL_RADIO_TIMER_CpuWakeUpCallback>:

__weak void HAL_RADIO_TIMER_CpuWakeUpCallback(void)
{
10047f8c:	b580      	push	{r7, lr}
10047f8e:	af00      	add	r7, sp, #0
}
10047f90:	46c0      	nop			@ (mov r8, r8)
10047f92:	46bd      	mov	sp, r7
10047f94:	bd80      	pop	{r7, pc}

10047f96 <HAL_RADIO_TIMER_TxRxWakeUpCallback>:


__weak void HAL_RADIO_TIMER_TxRxWakeUpCallback(void)
{
10047f96:	b580      	push	{r7, lr}
10047f98:	af00      	add	r7, sp, #0
}
10047f9a:	46c0      	nop			@ (mov r8, r8)
10047f9c:	46bd      	mov	sp, r7
10047f9e:	bd80      	pop	{r7, pc}

10047fa0 <HAL_RADIO_TIMER_CPU_WKUP_IRQHandler>:

void HAL_RADIO_TIMER_CPU_WKUP_IRQHandler(void)
{
10047fa0:	b580      	push	{r7, lr}
10047fa2:	af00      	add	r7, sp, #0
  HAL_RADIO_TIMER_TimeoutCallback();
10047fa4:	f7ff f884 	bl	100470b0 <HAL_RADIO_TIMER_TimeoutCallback>

  HAL_RADIO_TIMER_CpuWakeUpCallback();
10047fa8:	f7ff fff0 	bl	10047f8c <HAL_RADIO_TIMER_CpuWakeUpCallback>
}
10047fac:	46c0      	nop			@ (mov r8, r8)
10047fae:	46bd      	mov	sp, r7
10047fb0:	bd80      	pop	{r7, pc}

10047fb2 <HAL_RADIO_TIMER_TXRX_WKUP_IRQHandler>:

void HAL_RADIO_TIMER_TXRX_WKUP_IRQHandler(void)
{
10047fb2:	b580      	push	{r7, lr}
10047fb4:	af00      	add	r7, sp, #0
  HAL_RADIO_TIMER_TxRxWakeUpCallback();
10047fb6:	f7ff ffee 	bl	10047f96 <HAL_RADIO_TIMER_TxRxWakeUpCallback>
#if defined (STM32WB06) || defined (STM32WB07)
  HAL_RADIO_TIMER_WakeUpCallback();
10047fba:	f7ff f84d 	bl	10047058 <HAL_RADIO_TIMER_WakeUpCallback>
#endif
}
10047fbe:	46c0      	nop			@ (mov r8, r8)
10047fc0:	46bd      	mov	sp, r7
10047fc2:	bd80      	pop	{r7, pc}

10047fc4 <HAL_RADIO_TIMER_ERROR_IRQHandler>:

void HAL_RADIO_TIMER_ERROR_IRQHandler(void)
{
10047fc4:	b580      	push	{r7, lr}
10047fc6:	b082      	sub	sp, #8
10047fc8:	af00      	add	r7, sp, #0
  volatile uint32_t debug_cmd = 0;
10047fca:	2300      	movs	r3, #0
10047fcc:	607b      	str	r3, [r7, #4]
  UNUSED(debug_cmd);
10047fce:	687b      	ldr	r3, [r7, #4]
  BLUE->DEBUGCMDREG |= 1;
10047fd0:	23c0      	movs	r3, #192	@ 0xc0
10047fd2:	05db      	lsls	r3, r3, #23
10047fd4:	6f5a      	ldr	r2, [r3, #116]	@ 0x74
10047fd6:	23c0      	movs	r3, #192	@ 0xc0
10047fd8:	05db      	lsls	r3, r3, #23
10047fda:	2101      	movs	r1, #1
10047fdc:	430a      	orrs	r2, r1
10047fde:	675a      	str	r2, [r3, #116]	@ 0x74
  /* If the device is configured with
     System clock = 64 MHz and BLE clock = 16 MHz
     a register read is necessary to end fine
     the clear interrupt register operation,
     due the AHB down converter latency */
  debug_cmd = BLUE->DEBUGCMDREG;
10047fe0:	23c0      	movs	r3, #192	@ 0xc0
10047fe2:	05db      	lsls	r3, r3, #23
10047fe4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
10047fe6:	607b      	str	r3, [r7, #4]
}
10047fe8:	46c0      	nop			@ (mov r8, r8)
10047fea:	46bd      	mov	sp, r7
10047fec:	b002      	add	sp, #8
10047fee:	bd80      	pop	{r7, pc}

10047ff0 <LL_PWR_SetNoPullB>:
{
10047ff0:	b580      	push	{r7, lr}
10047ff2:	b082      	sub	sp, #8
10047ff4:	af00      	add	r7, sp, #0
10047ff6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(PWR->PUCRB, GPIONumber);
10047ff8:	4b08      	ldr	r3, [pc, #32]	@ (1004801c <LL_PWR_SetNoPullB+0x2c>)
10047ffa:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
10047ffc:	687b      	ldr	r3, [r7, #4]
10047ffe:	43d9      	mvns	r1, r3
10048000:	4b06      	ldr	r3, [pc, #24]	@ (1004801c <LL_PWR_SetNoPullB+0x2c>)
10048002:	400a      	ands	r2, r1
10048004:	629a      	str	r2, [r3, #40]	@ 0x28
  CLEAR_BIT(PWR->PDCRB, GPIONumber);
10048006:	4b05      	ldr	r3, [pc, #20]	@ (1004801c <LL_PWR_SetNoPullB+0x2c>)
10048008:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
1004800a:	687b      	ldr	r3, [r7, #4]
1004800c:	43d9      	mvns	r1, r3
1004800e:	4b03      	ldr	r3, [pc, #12]	@ (1004801c <LL_PWR_SetNoPullB+0x2c>)
10048010:	400a      	ands	r2, r1
10048012:	62da      	str	r2, [r3, #44]	@ 0x2c
}
10048014:	46c0      	nop			@ (mov r8, r8)
10048016:	46bd      	mov	sp, r7
10048018:	b002      	add	sp, #8
1004801a:	bd80      	pop	{r7, pc}
1004801c:	48500000 	.word	0x48500000

10048020 <LL_RCC_HSE_Enable>:
  * @brief  Enable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Enable(void)
{
10048020:	b580      	push	{r7, lr}
10048022:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
10048024:	4b04      	ldr	r3, [pc, #16]	@ (10048038 <LL_RCC_HSE_Enable+0x18>)
10048026:	681a      	ldr	r2, [r3, #0]
10048028:	4b03      	ldr	r3, [pc, #12]	@ (10048038 <LL_RCC_HSE_Enable+0x18>)
1004802a:	2180      	movs	r1, #128	@ 0x80
1004802c:	0249      	lsls	r1, r1, #9
1004802e:	430a      	orrs	r2, r1
10048030:	601a      	str	r2, [r3, #0]
}
10048032:	46c0      	nop			@ (mov r8, r8)
10048034:	46bd      	mov	sp, r7
10048036:	bd80      	pop	{r7, pc}
10048038:	48400000 	.word	0x48400000

1004803c <LL_RCC_HSE_Disable>:
  * @brief  Disable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Disable(void)
{
1004803c:	b580      	push	{r7, lr}
1004803e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
10048040:	4b04      	ldr	r3, [pc, #16]	@ (10048054 <LL_RCC_HSE_Disable+0x18>)
10048042:	681a      	ldr	r2, [r3, #0]
10048044:	4b03      	ldr	r3, [pc, #12]	@ (10048054 <LL_RCC_HSE_Disable+0x18>)
10048046:	4904      	ldr	r1, [pc, #16]	@ (10048058 <LL_RCC_HSE_Disable+0x1c>)
10048048:	400a      	ands	r2, r1
1004804a:	601a      	str	r2, [r3, #0]
}
1004804c:	46c0      	nop			@ (mov r8, r8)
1004804e:	46bd      	mov	sp, r7
10048050:	bd80      	pop	{r7, pc}
10048052:	46c0      	nop			@ (mov r8, r8)
10048054:	48400000 	.word	0x48400000
10048058:	fffeffff 	.word	0xfffeffff

1004805c <LL_RCC_HSE_IsReady>:
  * @brief  Check if HSE oscillator Ready
  * @rmtoll CR           HSERDY        LL_RCC_HSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsReady(void)
{
1004805c:	b580      	push	{r7, lr}
1004805e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
10048060:	4b07      	ldr	r3, [pc, #28]	@ (10048080 <LL_RCC_HSE_IsReady+0x24>)
10048062:	681a      	ldr	r2, [r3, #0]
10048064:	2380      	movs	r3, #128	@ 0x80
10048066:	029b      	lsls	r3, r3, #10
10048068:	401a      	ands	r2, r3
1004806a:	2380      	movs	r3, #128	@ 0x80
1004806c:	029b      	lsls	r3, r3, #10
1004806e:	429a      	cmp	r2, r3
10048070:	d101      	bne.n	10048076 <LL_RCC_HSE_IsReady+0x1a>
10048072:	2301      	movs	r3, #1
10048074:	e000      	b.n	10048078 <LL_RCC_HSE_IsReady+0x1c>
10048076:	2300      	movs	r3, #0
}
10048078:	0018      	movs	r0, r3
1004807a:	46bd      	mov	sp, r7
1004807c:	bd80      	pop	{r7, pc}
1004807e:	46c0      	nop			@ (mov r8, r8)
10048080:	48400000 	.word	0x48400000

10048084 <LL_RCC_HSE_SetCapacitorTuning>:
  * @rmtoll RFSWHSECR        SWXOTUNE       LL_RCC_HSE_SetCapacitorTuning
  * @param  Value Between Min_Data = 0 and Max_Data = 63
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_SetCapacitorTuning(uint32_t Value)
{
10048084:	b580      	push	{r7, lr}
10048086:	b082      	sub	sp, #8
10048088:	af00      	add	r7, sp, #0
1004808a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->RFSWHSECR, RCC_RFSWHSECR_SWXOTUNE, Value << RCC_RFSWHSECR_SWXOTUNE_Pos);
1004808c:	4a0b      	ldr	r2, [pc, #44]	@ (100480bc <LL_RCC_HSE_SetCapacitorTuning+0x38>)
1004808e:	2398      	movs	r3, #152	@ 0x98
10048090:	58d3      	ldr	r3, [r2, r3]
10048092:	4a0b      	ldr	r2, [pc, #44]	@ (100480c0 <LL_RCC_HSE_SetCapacitorTuning+0x3c>)
10048094:	401a      	ands	r2, r3
10048096:	687b      	ldr	r3, [r7, #4]
10048098:	021b      	lsls	r3, r3, #8
1004809a:	4908      	ldr	r1, [pc, #32]	@ (100480bc <LL_RCC_HSE_SetCapacitorTuning+0x38>)
1004809c:	4313      	orrs	r3, r2
1004809e:	2298      	movs	r2, #152	@ 0x98
100480a0:	508b      	str	r3, [r1, r2]
  SET_BIT(RCC->RFSWHSECR, RCC_RFSWHSECR_SWXOTUNEEN);
100480a2:	4a06      	ldr	r2, [pc, #24]	@ (100480bc <LL_RCC_HSE_SetCapacitorTuning+0x38>)
100480a4:	2398      	movs	r3, #152	@ 0x98
100480a6:	58d3      	ldr	r3, [r2, r3]
100480a8:	4904      	ldr	r1, [pc, #16]	@ (100480bc <LL_RCC_HSE_SetCapacitorTuning+0x38>)
100480aa:	2280      	movs	r2, #128	@ 0x80
100480ac:	4313      	orrs	r3, r2
100480ae:	2298      	movs	r2, #152	@ 0x98
100480b0:	508b      	str	r3, [r1, r2]
}
100480b2:	46c0      	nop			@ (mov r8, r8)
100480b4:	46bd      	mov	sp, r7
100480b6:	b002      	add	sp, #8
100480b8:	bd80      	pop	{r7, pc}
100480ba:	46c0      	nop			@ (mov r8, r8)
100480bc:	48400000 	.word	0x48400000
100480c0:	ffffc0ff 	.word	0xffffc0ff

100480c4 <LL_RCC_HSE_SetCurrentControl>:
  *         @arg @ref LL_RCC_HSE_CURRENTMAX_5
  *         @arg @ref LL_RCC_HSE_CURRENTMAX_6
  *         @arg @ref LL_RCC_HSE_CURRENTMAX_7
  */
__STATIC_INLINE void LL_RCC_HSE_SetCurrentControl(uint32_t CurrentMax)
{
100480c4:	b580      	push	{r7, lr}
100480c6:	b082      	sub	sp, #8
100480c8:	af00      	add	r7, sp, #0
100480ca:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->RFSWHSECR, RCC_RFSWHSECR_GMC, CurrentMax);
100480cc:	4a07      	ldr	r2, [pc, #28]	@ (100480ec <LL_RCC_HSE_SetCurrentControl+0x28>)
100480ce:	2398      	movs	r3, #152	@ 0x98
100480d0:	58d3      	ldr	r3, [r2, r3]
100480d2:	2270      	movs	r2, #112	@ 0x70
100480d4:	4393      	bics	r3, r2
100480d6:	001a      	movs	r2, r3
100480d8:	4904      	ldr	r1, [pc, #16]	@ (100480ec <LL_RCC_HSE_SetCurrentControl+0x28>)
100480da:	687b      	ldr	r3, [r7, #4]
100480dc:	4313      	orrs	r3, r2
100480de:	2298      	movs	r2, #152	@ 0x98
100480e0:	508b      	str	r3, [r1, r2]
}
100480e2:	46c0      	nop			@ (mov r8, r8)
100480e4:	46bd      	mov	sp, r7
100480e6:	b002      	add	sp, #8
100480e8:	bd80      	pop	{r7, pc}
100480ea:	46c0      	nop			@ (mov r8, r8)
100480ec:	48400000 	.word	0x48400000

100480f0 <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI
  * @rmtoll CFGR           STOPHSI        LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
100480f0:	b580      	push	{r7, lr}
100480f2:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CFGR, RCC_CFGR_STOPHSI);
100480f4:	4b07      	ldr	r3, [pc, #28]	@ (10048114 <LL_RCC_HSI_Enable+0x24>)
100480f6:	689a      	ldr	r2, [r3, #8]
100480f8:	4b06      	ldr	r3, [pc, #24]	@ (10048114 <LL_RCC_HSI_Enable+0x24>)
100480fa:	2104      	movs	r1, #4
100480fc:	438a      	bics	r2, r1
100480fe:	609a      	str	r2, [r3, #8]
  CLEAR_BIT(RCC->CFGR, RCC_CFGR_HSESEL);
10048100:	4b04      	ldr	r3, [pc, #16]	@ (10048114 <LL_RCC_HSI_Enable+0x24>)
10048102:	689a      	ldr	r2, [r3, #8]
10048104:	4b03      	ldr	r3, [pc, #12]	@ (10048114 <LL_RCC_HSI_Enable+0x24>)
10048106:	2102      	movs	r1, #2
10048108:	438a      	bics	r2, r1
1004810a:	609a      	str	r2, [r3, #8]
}
1004810c:	46c0      	nop			@ (mov r8, r8)
1004810e:	46bd      	mov	sp, r7
10048110:	bd80      	pop	{r7, pc}
10048112:	46c0      	nop			@ (mov r8, r8)
10048114:	48400000 	.word	0x48400000

10048118 <LL_RCC_HSI_Disable>:
  * @brief  Disable HSI
  * @rmtoll CFGR           STOPHSI        LL_RCC_HSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Disable(void)
{
10048118:	b580      	push	{r7, lr}
1004811a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CFGR, RCC_CFGR_HSESEL);
1004811c:	4b07      	ldr	r3, [pc, #28]	@ (1004813c <LL_RCC_HSI_Disable+0x24>)
1004811e:	689a      	ldr	r2, [r3, #8]
10048120:	4b06      	ldr	r3, [pc, #24]	@ (1004813c <LL_RCC_HSI_Disable+0x24>)
10048122:	2102      	movs	r1, #2
10048124:	430a      	orrs	r2, r1
10048126:	609a      	str	r2, [r3, #8]
  SET_BIT(RCC->CFGR, RCC_CFGR_STOPHSI);
10048128:	4b04      	ldr	r3, [pc, #16]	@ (1004813c <LL_RCC_HSI_Disable+0x24>)
1004812a:	689a      	ldr	r2, [r3, #8]
1004812c:	4b03      	ldr	r3, [pc, #12]	@ (1004813c <LL_RCC_HSI_Disable+0x24>)
1004812e:	2104      	movs	r1, #4
10048130:	430a      	orrs	r2, r1
10048132:	609a      	str	r2, [r3, #8]
}
10048134:	46c0      	nop			@ (mov r8, r8)
10048136:	46bd      	mov	sp, r7
10048138:	bd80      	pop	{r7, pc}
1004813a:	46c0      	nop			@ (mov r8, r8)
1004813c:	48400000 	.word	0x48400000

10048140 <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
10048140:	b580      	push	{r7, lr}
10048142:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
10048144:	4b07      	ldr	r3, [pc, #28]	@ (10048164 <LL_RCC_HSI_IsReady+0x24>)
10048146:	681a      	ldr	r2, [r3, #0]
10048148:	2380      	movs	r3, #128	@ 0x80
1004814a:	00db      	lsls	r3, r3, #3
1004814c:	401a      	ands	r2, r3
1004814e:	2380      	movs	r3, #128	@ 0x80
10048150:	00db      	lsls	r3, r3, #3
10048152:	429a      	cmp	r2, r3
10048154:	d101      	bne.n	1004815a <LL_RCC_HSI_IsReady+0x1a>
10048156:	2301      	movs	r3, #1
10048158:	e000      	b.n	1004815c <LL_RCC_HSI_IsReady+0x1c>
1004815a:	2300      	movs	r3, #0
}
1004815c:	0018      	movs	r0, r3
1004815e:	46bd      	mov	sp, r7
10048160:	bd80      	pop	{r7, pc}
10048162:	46c0      	nop			@ (mov r8, r8)
10048164:	48400000 	.word	0x48400000

10048168 <LL_RCC_DIRECT_HSE_Enable>:
  * @brief  Enable DIRECT_HSE mode
  * @rmtoll CFGR       HSESEL/STOPHSI         LL_RCC_HSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_DIRECT_HSE_Enable(void)
{
10048168:	b580      	push	{r7, lr}
1004816a:	b082      	sub	sp, #8
1004816c:	af00      	add	r7, sp, #0
  while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0);
1004816e:	46c0      	nop			@ (mov r8, r8)
10048170:	4b0f      	ldr	r3, [pc, #60]	@ (100481b0 <LL_RCC_DIRECT_HSE_Enable+0x48>)
10048172:	681a      	ldr	r2, [r3, #0]
10048174:	2380      	movs	r3, #128	@ 0x80
10048176:	029b      	lsls	r3, r3, #10
10048178:	4013      	ands	r3, r2
1004817a:	d0f9      	beq.n	10048170 <LL_RCC_DIRECT_HSE_Enable+0x8>
  SET_BIT(RCC->CFGR, RCC_CFGR_HSESEL);
1004817c:	4b0c      	ldr	r3, [pc, #48]	@ (100481b0 <LL_RCC_DIRECT_HSE_Enable+0x48>)
1004817e:	689a      	ldr	r2, [r3, #8]
10048180:	4b0b      	ldr	r3, [pc, #44]	@ (100481b0 <LL_RCC_DIRECT_HSE_Enable+0x48>)
10048182:	2102      	movs	r1, #2
10048184:	430a      	orrs	r2, r1
10048186:	609a      	str	r2, [r3, #8]
  for (volatile int i = 0; i < 6; i++)
10048188:	2300      	movs	r3, #0
1004818a:	607b      	str	r3, [r7, #4]
1004818c:	e003      	b.n	10048196 <LL_RCC_DIRECT_HSE_Enable+0x2e>
  {
    __asm("NOP");
1004818e:	46c0      	nop			@ (mov r8, r8)
  for (volatile int i = 0; i < 6; i++)
10048190:	687b      	ldr	r3, [r7, #4]
10048192:	3301      	adds	r3, #1
10048194:	607b      	str	r3, [r7, #4]
10048196:	687b      	ldr	r3, [r7, #4]
10048198:	2b05      	cmp	r3, #5
1004819a:	ddf8      	ble.n	1004818e <LL_RCC_DIRECT_HSE_Enable+0x26>
  }
  SET_BIT(RCC->CFGR, RCC_CFGR_STOPHSI);
1004819c:	4b04      	ldr	r3, [pc, #16]	@ (100481b0 <LL_RCC_DIRECT_HSE_Enable+0x48>)
1004819e:	689a      	ldr	r2, [r3, #8]
100481a0:	4b03      	ldr	r3, [pc, #12]	@ (100481b0 <LL_RCC_DIRECT_HSE_Enable+0x48>)
100481a2:	2104      	movs	r1, #4
100481a4:	430a      	orrs	r2, r1
100481a6:	609a      	str	r2, [r3, #8]
}
100481a8:	46c0      	nop			@ (mov r8, r8)
100481aa:	46bd      	mov	sp, r7
100481ac:	b002      	add	sp, #8
100481ae:	bd80      	pop	{r7, pc}
100481b0:	48400000 	.word	0x48400000

100481b4 <LL_RCC_LSCO_SetSource>:
  *         @arg @ref LL_RCC_LSCO_CLKSOURCE_LSI
  *         @arg @ref LL_RCC_LSCO_CLKSOURCE_HSI64M_DIV2048
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSCO_SetSource(uint32_t Source)
{
100481b4:	b580      	push	{r7, lr}
100481b6:	b082      	sub	sp, #8
100481b8:	af00      	add	r7, sp, #0
100481ba:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_CLKSLOWSEL, Source);
100481bc:	4b06      	ldr	r3, [pc, #24]	@ (100481d8 <LL_RCC_LSCO_SetSource+0x24>)
100481be:	689b      	ldr	r3, [r3, #8]
100481c0:	4a06      	ldr	r2, [pc, #24]	@ (100481dc <LL_RCC_LSCO_SetSource+0x28>)
100481c2:	4013      	ands	r3, r2
100481c4:	0019      	movs	r1, r3
100481c6:	4b04      	ldr	r3, [pc, #16]	@ (100481d8 <LL_RCC_LSCO_SetSource+0x24>)
100481c8:	687a      	ldr	r2, [r7, #4]
100481ca:	430a      	orrs	r2, r1
100481cc:	609a      	str	r2, [r3, #8]
}
100481ce:	46c0      	nop			@ (mov r8, r8)
100481d0:	46bd      	mov	sp, r7
100481d2:	b002      	add	sp, #8
100481d4:	bd80      	pop	{r7, pc}
100481d6:	46c0      	nop			@ (mov r8, r8)
100481d8:	48400000 	.word	0x48400000
100481dc:	fffe7fff 	.word	0xfffe7fff

100481e0 <LL_RCC_LSE_Enable>:
  * @brief  Enable  Low Speed External (LSE) crystal.
  * @rmtoll CR         LSEON         LL_RCC_LSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_Enable(void)
{
100481e0:	b580      	push	{r7, lr}
100481e2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_LSEON);
100481e4:	4b04      	ldr	r3, [pc, #16]	@ (100481f8 <LL_RCC_LSE_Enable+0x18>)
100481e6:	681a      	ldr	r2, [r3, #0]
100481e8:	4b03      	ldr	r3, [pc, #12]	@ (100481f8 <LL_RCC_LSE_Enable+0x18>)
100481ea:	2110      	movs	r1, #16
100481ec:	430a      	orrs	r2, r1
100481ee:	601a      	str	r2, [r3, #0]
}
100481f0:	46c0      	nop			@ (mov r8, r8)
100481f2:	46bd      	mov	sp, r7
100481f4:	bd80      	pop	{r7, pc}
100481f6:	46c0      	nop			@ (mov r8, r8)
100481f8:	48400000 	.word	0x48400000

100481fc <LL_RCC_LSE_Disable>:
  * @brief  Disable  Low Speed External (LSE) crystal.
  * @rmtoll CR         LSEON         LL_RCC_LSE_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_Disable(void)
{
100481fc:	b580      	push	{r7, lr}
100481fe:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_LSEON);
10048200:	4b04      	ldr	r3, [pc, #16]	@ (10048214 <LL_RCC_LSE_Disable+0x18>)
10048202:	681a      	ldr	r2, [r3, #0]
10048204:	4b03      	ldr	r3, [pc, #12]	@ (10048214 <LL_RCC_LSE_Disable+0x18>)
10048206:	2110      	movs	r1, #16
10048208:	438a      	bics	r2, r1
1004820a:	601a      	str	r2, [r3, #0]
}
1004820c:	46c0      	nop			@ (mov r8, r8)
1004820e:	46bd      	mov	sp, r7
10048210:	bd80      	pop	{r7, pc}
10048212:	46c0      	nop			@ (mov r8, r8)
10048214:	48400000 	.word	0x48400000

10048218 <LL_RCC_LSE_IsReady>:
  * @brief  Check if LSE oscillator Ready
  * @rmtoll CR         LSERDY        LL_RCC_LSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsReady(void)
{
10048218:	b580      	push	{r7, lr}
1004821a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_LSERDY) == (RCC_CR_LSERDY)) ? 1UL : 0UL);
1004821c:	4b05      	ldr	r3, [pc, #20]	@ (10048234 <LL_RCC_LSE_IsReady+0x1c>)
1004821e:	681b      	ldr	r3, [r3, #0]
10048220:	2220      	movs	r2, #32
10048222:	4013      	ands	r3, r2
10048224:	2b20      	cmp	r3, #32
10048226:	d101      	bne.n	1004822c <LL_RCC_LSE_IsReady+0x14>
10048228:	2301      	movs	r3, #1
1004822a:	e000      	b.n	1004822e <LL_RCC_LSE_IsReady+0x16>
1004822c:	2300      	movs	r3, #0
}
1004822e:	0018      	movs	r0, r3
10048230:	46bd      	mov	sp, r7
10048232:	bd80      	pop	{r7, pc}
10048234:	48400000 	.word	0x48400000

10048238 <LL_RCC_LSE_EnableBypass>:
  * @brief  Enable external clock source (LSE bypass).
  * @rmtoll CR         LSEBYP        LL_RCC_LSE_EnableBypass
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_EnableBypass(void)
{
10048238:	b580      	push	{r7, lr}
1004823a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_LSEBYP);
1004823c:	4b04      	ldr	r3, [pc, #16]	@ (10048250 <LL_RCC_LSE_EnableBypass+0x18>)
1004823e:	681a      	ldr	r2, [r3, #0]
10048240:	4b03      	ldr	r3, [pc, #12]	@ (10048250 <LL_RCC_LSE_EnableBypass+0x18>)
10048242:	2140      	movs	r1, #64	@ 0x40
10048244:	430a      	orrs	r2, r1
10048246:	601a      	str	r2, [r3, #0]
}
10048248:	46c0      	nop			@ (mov r8, r8)
1004824a:	46bd      	mov	sp, r7
1004824c:	bd80      	pop	{r7, pc}
1004824e:	46c0      	nop			@ (mov r8, r8)
10048250:	48400000 	.word	0x48400000

10048254 <LL_RCC_LSE_DisableBypass>:
  * @brief  Disable external clock source (LSE bypass).
  * @rmtoll CR         LSEBYP        LL_RCC_LSE_DisableBypass
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_DisableBypass(void)
{
10048254:	b580      	push	{r7, lr}
10048256:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_LSEBYP);
10048258:	4b04      	ldr	r3, [pc, #16]	@ (1004826c <LL_RCC_LSE_DisableBypass+0x18>)
1004825a:	681a      	ldr	r2, [r3, #0]
1004825c:	4b03      	ldr	r3, [pc, #12]	@ (1004826c <LL_RCC_LSE_DisableBypass+0x18>)
1004825e:	2140      	movs	r1, #64	@ 0x40
10048260:	438a      	bics	r2, r1
10048262:	601a      	str	r2, [r3, #0]
}
10048264:	46c0      	nop			@ (mov r8, r8)
10048266:	46bd      	mov	sp, r7
10048268:	bd80      	pop	{r7, pc}
1004826a:	46c0      	nop			@ (mov r8, r8)
1004826c:	48400000 	.word	0x48400000

10048270 <LL_RCC_LSE_IsBypassEnabled>:
  * @brief  Check if LSE bypass configuration is enabled.
  * @rmtoll CR         LSEBYP        LL_RCC_LSE_IsBypassEnabled
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsBypassEnabled(void)
{
10048270:	b580      	push	{r7, lr}
10048272:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_LSEBYP) == (RCC_CR_LSEBYP)) ? 1UL : 0UL);
10048274:	4b05      	ldr	r3, [pc, #20]	@ (1004828c <LL_RCC_LSE_IsBypassEnabled+0x1c>)
10048276:	681b      	ldr	r3, [r3, #0]
10048278:	2240      	movs	r2, #64	@ 0x40
1004827a:	4013      	ands	r3, r2
1004827c:	2b40      	cmp	r3, #64	@ 0x40
1004827e:	d101      	bne.n	10048284 <LL_RCC_LSE_IsBypassEnabled+0x14>
10048280:	2301      	movs	r3, #1
10048282:	e000      	b.n	10048286 <LL_RCC_LSE_IsBypassEnabled+0x16>
10048284:	2300      	movs	r3, #0
}
10048286:	0018      	movs	r0, r3
10048288:	46bd      	mov	sp, r7
1004828a:	bd80      	pop	{r7, pc}
1004828c:	48400000 	.word	0x48400000

10048290 <LL_RCC_LSE_SetDriveCapability>:
  *         @arg @ref LL_RCC_LSEDRIVE_MEDIUMHIGH
  *         @arg @ref LL_RCC_LSEDRIVE_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_SetDriveCapability(uint32_t LSEDrive)
{
10048290:	b580      	push	{r7, lr}
10048292:	b082      	sub	sp, #8
10048294:	af00      	add	r7, sp, #0
10048296:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSSWCR, RCC_CSSWCR_LSEDRV, LSEDrive);
10048298:	4b06      	ldr	r3, [pc, #24]	@ (100482b4 <LL_RCC_LSE_SetDriveCapability+0x24>)
1004829a:	68db      	ldr	r3, [r3, #12]
1004829c:	2260      	movs	r2, #96	@ 0x60
1004829e:	4393      	bics	r3, r2
100482a0:	0019      	movs	r1, r3
100482a2:	4b04      	ldr	r3, [pc, #16]	@ (100482b4 <LL_RCC_LSE_SetDriveCapability+0x24>)
100482a4:	687a      	ldr	r2, [r7, #4]
100482a6:	430a      	orrs	r2, r1
100482a8:	60da      	str	r2, [r3, #12]
}
100482aa:	46c0      	nop			@ (mov r8, r8)
100482ac:	46bd      	mov	sp, r7
100482ae:	b002      	add	sp, #8
100482b0:	bd80      	pop	{r7, pc}
100482b2:	46c0      	nop			@ (mov r8, r8)
100482b4:	48400000 	.word	0x48400000

100482b8 <LL_RCC_LSI_Enable>:
  * @brief  Enable LSI Oscillator
  * @rmtoll CR          LSION         LL_RCC_LSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI_Enable(void)
{
100482b8:	b580      	push	{r7, lr}
100482ba:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_LSION);
100482bc:	4b04      	ldr	r3, [pc, #16]	@ (100482d0 <LL_RCC_LSI_Enable+0x18>)
100482be:	681a      	ldr	r2, [r3, #0]
100482c0:	4b03      	ldr	r3, [pc, #12]	@ (100482d0 <LL_RCC_LSI_Enable+0x18>)
100482c2:	2104      	movs	r1, #4
100482c4:	430a      	orrs	r2, r1
100482c6:	601a      	str	r2, [r3, #0]
}
100482c8:	46c0      	nop			@ (mov r8, r8)
100482ca:	46bd      	mov	sp, r7
100482cc:	bd80      	pop	{r7, pc}
100482ce:	46c0      	nop			@ (mov r8, r8)
100482d0:	48400000 	.word	0x48400000

100482d4 <LL_RCC_LSI_Disable>:
  * @brief  Disable LSI Oscillator
  * @rmtoll CR          LSION         LL_RCC_LSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI_Disable(void)
{
100482d4:	b580      	push	{r7, lr}
100482d6:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_LSION);
100482d8:	4b04      	ldr	r3, [pc, #16]	@ (100482ec <LL_RCC_LSI_Disable+0x18>)
100482da:	681a      	ldr	r2, [r3, #0]
100482dc:	4b03      	ldr	r3, [pc, #12]	@ (100482ec <LL_RCC_LSI_Disable+0x18>)
100482de:	2104      	movs	r1, #4
100482e0:	438a      	bics	r2, r1
100482e2:	601a      	str	r2, [r3, #0]
}
100482e4:	46c0      	nop			@ (mov r8, r8)
100482e6:	46bd      	mov	sp, r7
100482e8:	bd80      	pop	{r7, pc}
100482ea:	46c0      	nop			@ (mov r8, r8)
100482ec:	48400000 	.word	0x48400000

100482f0 <LL_RCC_LSI_IsReady>:
  * @brief  Check if LSI is Ready
  * @rmtoll CR          LSIRDY        LL_RCC_LSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI_IsReady(void)
{
100482f0:	b580      	push	{r7, lr}
100482f2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_LSIRDY) == (RCC_CR_LSIRDY)) ? 1UL : 0UL);
100482f4:	4b05      	ldr	r3, [pc, #20]	@ (1004830c <LL_RCC_LSI_IsReady+0x1c>)
100482f6:	681b      	ldr	r3, [r3, #0]
100482f8:	2208      	movs	r2, #8
100482fa:	4013      	ands	r3, r2
100482fc:	2b08      	cmp	r3, #8
100482fe:	d101      	bne.n	10048304 <LL_RCC_LSI_IsReady+0x14>
10048300:	2301      	movs	r3, #1
10048302:	e000      	b.n	10048306 <LL_RCC_LSI_IsReady+0x16>
10048304:	2300      	movs	r3, #0
}
10048306:	0018      	movs	r0, r3
10048308:	46bd      	mov	sp, r7
1004830a:	bd80      	pop	{r7, pc}
1004830c:	48400000 	.word	0x48400000

10048310 <LL_RCC_RC64MPLL_Enable>:
  * @brief  Enable RC64MPLL
  * @rmtoll CR           HSIPLLON         LL_RCC_RC64MPLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_RC64MPLL_Enable(void)
{
10048310:	b580      	push	{r7, lr}
10048312:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSIPLLON);
10048314:	4b04      	ldr	r3, [pc, #16]	@ (10048328 <LL_RCC_RC64MPLL_Enable+0x18>)
10048316:	681a      	ldr	r2, [r3, #0]
10048318:	4b03      	ldr	r3, [pc, #12]	@ (10048328 <LL_RCC_RC64MPLL_Enable+0x18>)
1004831a:	2180      	movs	r1, #128	@ 0x80
1004831c:	0189      	lsls	r1, r1, #6
1004831e:	430a      	orrs	r2, r1
10048320:	601a      	str	r2, [r3, #0]
}
10048322:	46c0      	nop			@ (mov r8, r8)
10048324:	46bd      	mov	sp, r7
10048326:	bd80      	pop	{r7, pc}
10048328:	48400000 	.word	0x48400000

1004832c <LL_RCC_RC64MPLL_Disable>:
  * @note Cannot be disabled if the RC64MPLL clock is used as the system clock
  * @rmtoll CR           HSIPLLON         LL_RCC_RC64MPLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_RC64MPLL_Disable(void)
{
1004832c:	b580      	push	{r7, lr}
1004832e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSIPLLON);
10048330:	4b04      	ldr	r3, [pc, #16]	@ (10048344 <LL_RCC_RC64MPLL_Disable+0x18>)
10048332:	681a      	ldr	r2, [r3, #0]
10048334:	4b03      	ldr	r3, [pc, #12]	@ (10048344 <LL_RCC_RC64MPLL_Disable+0x18>)
10048336:	4904      	ldr	r1, [pc, #16]	@ (10048348 <LL_RCC_RC64MPLL_Disable+0x1c>)
10048338:	400a      	ands	r2, r1
1004833a:	601a      	str	r2, [r3, #0]
}
1004833c:	46c0      	nop			@ (mov r8, r8)
1004833e:	46bd      	mov	sp, r7
10048340:	bd80      	pop	{r7, pc}
10048342:	46c0      	nop			@ (mov r8, r8)
10048344:	48400000 	.word	0x48400000
10048348:	ffffdfff 	.word	0xffffdfff

1004834c <LL_RCC_RC64MPLL_IsReady>:
  * @brief  Check if RC64MPLL is Ready
  * @rmtoll CR           HSIPLLRDY        LL_RCC_RC64MPLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_RC64MPLL_IsReady(void)
{
1004834c:	b580      	push	{r7, lr}
1004834e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIPLLRDY) == (RCC_CR_HSIPLLRDY)) ? 1UL : 0UL);
10048350:	4b07      	ldr	r3, [pc, #28]	@ (10048370 <LL_RCC_RC64MPLL_IsReady+0x24>)
10048352:	681a      	ldr	r2, [r3, #0]
10048354:	2380      	movs	r3, #128	@ 0x80
10048356:	01db      	lsls	r3, r3, #7
10048358:	401a      	ands	r2, r3
1004835a:	2380      	movs	r3, #128	@ 0x80
1004835c:	01db      	lsls	r3, r3, #7
1004835e:	429a      	cmp	r2, r3
10048360:	d101      	bne.n	10048366 <LL_RCC_RC64MPLL_IsReady+0x1a>
10048362:	2301      	movs	r3, #1
10048364:	e000      	b.n	10048368 <LL_RCC_RC64MPLL_IsReady+0x1c>
10048366:	2300      	movs	r3, #0
}
10048368:	0018      	movs	r0, r3
1004836a:	46bd      	mov	sp, r7
1004836c:	bd80      	pop	{r7, pc}
1004836e:	46c0      	nop			@ (mov r8, r8)
10048370:	48400000 	.word	0x48400000

10048374 <LL_RCC_SetRC64MPLLPrescaler>:
  *         @arg @ref LL_RCC_RC64MPLL_DIV_32
  *         @arg @ref LL_RCC_RC64MPLL_DIV_64
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetRC64MPLLPrescaler(uint32_t Prescaler)
{
10048374:	b580      	push	{r7, lr}
10048376:	b082      	sub	sp, #8
10048378:	af00      	add	r7, sp, #0
1004837a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_CLKSYSDIV, Prescaler);
1004837c:	4b06      	ldr	r3, [pc, #24]	@ (10048398 <LL_RCC_SetRC64MPLLPrescaler+0x24>)
1004837e:	689b      	ldr	r3, [r3, #8]
10048380:	22e0      	movs	r2, #224	@ 0xe0
10048382:	4393      	bics	r3, r2
10048384:	0019      	movs	r1, r3
10048386:	4b04      	ldr	r3, [pc, #16]	@ (10048398 <LL_RCC_SetRC64MPLLPrescaler+0x24>)
10048388:	687a      	ldr	r2, [r7, #4]
1004838a:	430a      	orrs	r2, r1
1004838c:	609a      	str	r2, [r3, #8]
}
1004838e:	46c0      	nop			@ (mov r8, r8)
10048390:	46bd      	mov	sp, r7
10048392:	b002      	add	sp, #8
10048394:	bd80      	pop	{r7, pc}
10048396:	46c0      	nop			@ (mov r8, r8)
10048398:	48400000 	.word	0x48400000

1004839c <HAL_RCC_OscConfig>:
  * @param  RCC_OscInitStruct  pointer to a @ref RCC_OscInitTypeDef structure that
  *         contains the configuration information for the RCC Oscillators.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
1004839c:	b580      	push	{r7, lr}
1004839e:	b084      	sub	sp, #16
100483a0:	af00      	add	r7, sp, #0
100483a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
100483a4:	687b      	ldr	r3, [r7, #4]
100483a6:	2b00      	cmp	r3, #0
100483a8:	d101      	bne.n	100483ae <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
100483aa:	2301      	movs	r3, #1
100483ac:	e140      	b.n	10048630 <HAL_RCC_OscConfig+0x294>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  
  /*------------------------------- HSI Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
100483ae:	687b      	ldr	r3, [r7, #4]
100483b0:	681b      	ldr	r3, [r3, #0]
100483b2:	2210      	movs	r2, #16
100483b4:	4013      	ands	r3, r2
100483b6:	d033      	beq.n	10048420 <HAL_RCC_OscConfig+0x84>
  {
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
100483b8:	687b      	ldr	r3, [r7, #4]
100483ba:	689b      	ldr	r3, [r3, #8]
100483bc:	2b00      	cmp	r3, #0
100483be:	d102      	bne.n	100483c6 <HAL_RCC_OscConfig+0x2a>
100483c0:	f7ff fe96 	bl	100480f0 <LL_RCC_HSI_Enable>
100483c4:	e001      	b.n	100483ca <HAL_RCC_OscConfig+0x2e>
100483c6:	f7ff fea7 	bl	10048118 <LL_RCC_HSI_Disable>

    if(RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
100483ca:	687b      	ldr	r3, [r7, #4]
100483cc:	689b      	ldr	r3, [r3, #8]
100483ce:	2b04      	cmp	r3, #4
100483d0:	d113      	bne.n	100483fa <HAL_RCC_OscConfig+0x5e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
100483d2:	f7fc fa67 	bl	100448a4 <HAL_GetTick>
100483d6:	0003      	movs	r3, r0
100483d8:	60fb      	str	r3, [r7, #12]

      /* Wait till HSI is disabled */
      while (LL_RCC_HSI_IsReady() == 1U)
100483da:	e008      	b.n	100483ee <HAL_RCC_OscConfig+0x52>
      {
        if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
100483dc:	f7fc fa62 	bl	100448a4 <HAL_GetTick>
100483e0:	0002      	movs	r2, r0
100483e2:	68fb      	ldr	r3, [r7, #12]
100483e4:	1ad3      	subs	r3, r2, r3
100483e6:	2b64      	cmp	r3, #100	@ 0x64
100483e8:	d901      	bls.n	100483ee <HAL_RCC_OscConfig+0x52>
        {
          return HAL_TIMEOUT;
100483ea:	2303      	movs	r3, #3
100483ec:	e120      	b.n	10048630 <HAL_RCC_OscConfig+0x294>
      while (LL_RCC_HSI_IsReady() == 1U)
100483ee:	f7ff fea7 	bl	10048140 <LL_RCC_HSI_IsReady>
100483f2:	0003      	movs	r3, r0
100483f4:	2b01      	cmp	r3, #1
100483f6:	d0f1      	beq.n	100483dc <HAL_RCC_OscConfig+0x40>
100483f8:	e012      	b.n	10048420 <HAL_RCC_OscConfig+0x84>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
100483fa:	f7fc fa53 	bl	100448a4 <HAL_GetTick>
100483fe:	0003      	movs	r3, r0
10048400:	60fb      	str	r3, [r7, #12]

      /* Wait till HSI is enabled */
      while (LL_RCC_HSI_IsReady() != 1U)
10048402:	e008      	b.n	10048416 <HAL_RCC_OscConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
10048404:	f7fc fa4e 	bl	100448a4 <HAL_GetTick>
10048408:	0002      	movs	r2, r0
1004840a:	68fb      	ldr	r3, [r7, #12]
1004840c:	1ad3      	subs	r3, r2, r3
1004840e:	2b64      	cmp	r3, #100	@ 0x64
10048410:	d901      	bls.n	10048416 <HAL_RCC_OscConfig+0x7a>
        {
          return HAL_TIMEOUT;
10048412:	2303      	movs	r3, #3
10048414:	e10c      	b.n	10048630 <HAL_RCC_OscConfig+0x294>
      while (LL_RCC_HSI_IsReady() != 1U)
10048416:	f7ff fe93 	bl	10048140 <LL_RCC_HSI_IsReady>
1004841a:	0003      	movs	r3, r0
1004841c:	2b01      	cmp	r3, #1
1004841e:	d1f1      	bne.n	10048404 <HAL_RCC_OscConfig+0x68>
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
10048420:	687b      	ldr	r3, [r7, #4]
10048422:	681b      	ldr	r3, [r3, #0]
10048424:	2201      	movs	r2, #1
10048426:	4013      	ands	r3, r2
10048428:	d039      	beq.n	1004849e <HAL_RCC_OscConfig+0x102>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* Set HSE Capacitor Tuning */
    LL_RCC_HSE_SetCapacitorTuning(CFG_HW_RCC_HSE_CAPACITOR_TUNE);
1004842a:	2020      	movs	r0, #32
1004842c:	f7ff fe2a 	bl	10048084 <LL_RCC_HSE_SetCapacitorTuning>

    /* Set HSE Current Control */
    LL_RCC_HSE_SetCurrentControl(LL_RCC_HSE_CURRENTMAX_3);
10048430:	2030      	movs	r0, #48	@ 0x30
10048432:	f7ff fe47 	bl	100480c4 <LL_RCC_HSE_SetCurrentControl>

    /* Set the new HSE configuration ---------------------------------------*/
    __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
10048436:	687b      	ldr	r3, [r7, #4]
10048438:	685a      	ldr	r2, [r3, #4]
1004843a:	2380      	movs	r3, #128	@ 0x80
1004843c:	025b      	lsls	r3, r3, #9
1004843e:	429a      	cmp	r2, r3
10048440:	d102      	bne.n	10048448 <HAL_RCC_OscConfig+0xac>
10048442:	f7ff fded 	bl	10048020 <LL_RCC_HSE_Enable>
10048446:	e001      	b.n	1004844c <HAL_RCC_OscConfig+0xb0>
10048448:	f7ff fdf8 	bl	1004803c <LL_RCC_HSE_Disable>

    /* Check the HSE State */
    if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
1004844c:	687b      	ldr	r3, [r7, #4]
1004844e:	685b      	ldr	r3, [r3, #4]
10048450:	2b00      	cmp	r3, #0
10048452:	d012      	beq.n	1004847a <HAL_RCC_OscConfig+0xde>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
10048454:	f7fc fa26 	bl	100448a4 <HAL_GetTick>
10048458:	0003      	movs	r3, r0
1004845a:	60fb      	str	r3, [r7, #12]

      /* Wait till HSE is ready */
      while (LL_RCC_HSE_IsReady() == 0U)
1004845c:	e008      	b.n	10048470 <HAL_RCC_OscConfig+0xd4>
      {
        if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
1004845e:	f7fc fa21 	bl	100448a4 <HAL_GetTick>
10048462:	0002      	movs	r2, r0
10048464:	68fb      	ldr	r3, [r7, #12]
10048466:	1ad3      	subs	r3, r2, r3
10048468:	2b64      	cmp	r3, #100	@ 0x64
1004846a:	d901      	bls.n	10048470 <HAL_RCC_OscConfig+0xd4>
        {
          return HAL_TIMEOUT;
1004846c:	2303      	movs	r3, #3
1004846e:	e0df      	b.n	10048630 <HAL_RCC_OscConfig+0x294>
      while (LL_RCC_HSE_IsReady() == 0U)
10048470:	f7ff fdf4 	bl	1004805c <LL_RCC_HSE_IsReady>
10048474:	1e03      	subs	r3, r0, #0
10048476:	d0f2      	beq.n	1004845e <HAL_RCC_OscConfig+0xc2>
10048478:	e011      	b.n	1004849e <HAL_RCC_OscConfig+0x102>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
1004847a:	f7fc fa13 	bl	100448a4 <HAL_GetTick>
1004847e:	0003      	movs	r3, r0
10048480:	60fb      	str	r3, [r7, #12]

      /* Wait till HSE is disabled */
      while (LL_RCC_HSE_IsReady() != 0U)
10048482:	e008      	b.n	10048496 <HAL_RCC_OscConfig+0xfa>
      {
        if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
10048484:	f7fc fa0e 	bl	100448a4 <HAL_GetTick>
10048488:	0002      	movs	r2, r0
1004848a:	68fb      	ldr	r3, [r7, #12]
1004848c:	1ad3      	subs	r3, r2, r3
1004848e:	2b64      	cmp	r3, #100	@ 0x64
10048490:	d901      	bls.n	10048496 <HAL_RCC_OscConfig+0xfa>
        {
          return HAL_TIMEOUT;
10048492:	2303      	movs	r3, #3
10048494:	e0cc      	b.n	10048630 <HAL_RCC_OscConfig+0x294>
      while (LL_RCC_HSE_IsReady() != 0U)
10048496:	f7ff fde1 	bl	1004805c <LL_RCC_HSE_IsReady>
1004849a:	1e03      	subs	r3, r0, #0
1004849c:	d1f2      	bne.n	10048484 <HAL_RCC_OscConfig+0xe8>
      }
    }
  }

  /*--------------------------------- LSI Configuration -----------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
1004849e:	687b      	ldr	r3, [r7, #4]
100484a0:	681b      	ldr	r3, [r3, #0]
100484a2:	2204      	movs	r2, #4
100484a4:	4013      	ands	r3, r2
100484a6:	d03a      	beq.n	1004851e <HAL_RCC_OscConfig+0x182>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
100484a8:	687b      	ldr	r3, [r7, #4]
100484aa:	691b      	ldr	r3, [r3, #16]
100484ac:	2b00      	cmp	r3, #0
100484ae:	d022      	beq.n	100484f6 <HAL_RCC_OscConfig+0x15a>
    {
      /* Disable the LSI */
      __HAL_RCC_LSI_DISABLE();
100484b0:	f7ff ff10 	bl	100482d4 <LL_RCC_LSI_Disable>
      while (__HAL_RCC_GET_LSI_READYFLAG() != 0U);
100484b4:	46c0      	nop			@ (mov r8, r8)
100484b6:	f7ff ff1b 	bl	100482f0 <LL_RCC_LSI_IsReady>
100484ba:	1e03      	subs	r3, r0, #0
100484bc:	d1fb      	bne.n	100484b6 <HAL_RCC_OscConfig+0x11a>

      /* Disable the LSE */
      __HAL_RCC_LSE_CONFIG(RCC_LSE_OFF);
100484be:	f7ff fe9d 	bl	100481fc <LL_RCC_LSE_Disable>

      /* Configure the Low Speed Clock to LSI */
      LL_RCC_LSCO_SetSource(LL_RCC_LSCO_CLKSOURCE_LSI);
100484c2:	2380      	movs	r3, #128	@ 0x80
100484c4:	025b      	lsls	r3, r3, #9
100484c6:	0018      	movs	r0, r3
100484c8:	f7ff fe74 	bl	100481b4 <LL_RCC_LSCO_SetSource>

      /*  Enable the Internal Low Speed oscillator (LSI)  */
      __HAL_RCC_LSI_ENABLE();
100484cc:	f7ff fef4 	bl	100482b8 <LL_RCC_LSI_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
100484d0:	f7fc f9e8 	bl	100448a4 <HAL_GetTick>
100484d4:	0003      	movs	r3, r0
100484d6:	60fb      	str	r3, [r7, #12]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_LSI_READYFLAG() == 0U)
100484d8:	e008      	b.n	100484ec <HAL_RCC_OscConfig+0x150>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
100484da:	f7fc f9e3 	bl	100448a4 <HAL_GetTick>
100484de:	0002      	movs	r2, r0
100484e0:	68fb      	ldr	r3, [r7, #12]
100484e2:	1ad3      	subs	r3, r2, r3
100484e4:	2b02      	cmp	r3, #2
100484e6:	d901      	bls.n	100484ec <HAL_RCC_OscConfig+0x150>
        {
          return HAL_TIMEOUT;
100484e8:	2303      	movs	r3, #3
100484ea:	e0a1      	b.n	10048630 <HAL_RCC_OscConfig+0x294>
      while (__HAL_RCC_GET_LSI_READYFLAG() == 0U)
100484ec:	f7ff ff00 	bl	100482f0 <LL_RCC_LSI_IsReady>
100484f0:	1e03      	subs	r3, r0, #0
100484f2:	d0f2      	beq.n	100484da <HAL_RCC_OscConfig+0x13e>
100484f4:	e013      	b.n	1004851e <HAL_RCC_OscConfig+0x182>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
100484f6:	f7ff feed 	bl	100482d4 <LL_RCC_LSI_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
100484fa:	f7fc f9d3 	bl	100448a4 <HAL_GetTick>
100484fe:	0003      	movs	r3, r0
10048500:	60fb      	str	r3, [r7, #12]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_LSI_READYFLAG() != 0U)
10048502:	e008      	b.n	10048516 <HAL_RCC_OscConfig+0x17a>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
10048504:	f7fc f9ce 	bl	100448a4 <HAL_GetTick>
10048508:	0002      	movs	r2, r0
1004850a:	68fb      	ldr	r3, [r7, #12]
1004850c:	1ad3      	subs	r3, r2, r3
1004850e:	2b02      	cmp	r3, #2
10048510:	d901      	bls.n	10048516 <HAL_RCC_OscConfig+0x17a>
        {
          return HAL_TIMEOUT;
10048512:	2303      	movs	r3, #3
10048514:	e08c      	b.n	10048630 <HAL_RCC_OscConfig+0x294>
      while (__HAL_RCC_GET_LSI_READYFLAG() != 0U)
10048516:	f7ff feeb 	bl	100482f0 <LL_RCC_LSI_IsReady>
1004851a:	1e03      	subs	r3, r0, #0
1004851c:	d1f2      	bne.n	10048504 <HAL_RCC_OscConfig+0x168>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
1004851e:	687b      	ldr	r3, [r7, #4]
10048520:	681b      	ldr	r3, [r3, #0]
10048522:	2202      	movs	r2, #2
10048524:	4013      	ands	r3, r2
10048526:	d049      	beq.n	100485bc <HAL_RCC_OscConfig+0x220>

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Disable LSI */
    __HAL_RCC_LSI_DISABLE();
10048528:	f7ff fed4 	bl	100482d4 <LL_RCC_LSI_Disable>

    /* Disable LSE */
    __HAL_RCC_LSE_CONFIG(RCC_LSE_OFF);
1004852c:	f7ff fe66 	bl	100481fc <LL_RCC_LSE_Disable>
    while (__HAL_RCC_GET_LSE_READYFLAG() != 0);
10048530:	46c0      	nop			@ (mov r8, r8)
10048532:	f7ff fe71 	bl	10048218 <LL_RCC_LSE_IsReady>
10048536:	1e03      	subs	r3, r0, #0
10048538:	d1fb      	bne.n	10048532 <HAL_RCC_OscConfig+0x196>

    /* Configure the PB12 and PB13 in NO PULL mode */
    LL_PWR_SetNoPullB(LL_PWR_GPIO_BIT_12 |
1004853a:	23c0      	movs	r3, #192	@ 0xc0
1004853c:	019b      	lsls	r3, r3, #6
1004853e:	0018      	movs	r0, r3
10048540:	f7ff fd56 	bl	10047ff0 <LL_PWR_SetNoPullB>
                      LL_PWR_GPIO_BIT_13);

    /* Configure the Low Speed Clock to LSE */
    LL_RCC_LSCO_SetSource(LL_RCC_LSCO_CLKSOURCE_LSE);
10048544:	2380      	movs	r3, #128	@ 0x80
10048546:	021b      	lsls	r3, r3, #8
10048548:	0018      	movs	r0, r3
1004854a:	f7ff fe33 	bl	100481b4 <LL_RCC_LSCO_SetSource>

    /* Set LSE oscillator drive capability */
    __HAL_RCC_LSEDRIVE_CONFIG(LSE_DRIVE_LEVEL);
1004854e:	2020      	movs	r0, #32
10048550:	f7ff fe9e 	bl	10048290 <LL_RCC_LSE_SetDriveCapability>


    /* Set the new LSE state */
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
10048554:	687b      	ldr	r3, [r7, #4]
10048556:	68db      	ldr	r3, [r3, #12]
10048558:	2b10      	cmp	r3, #16
1004855a:	d102      	bne.n	10048562 <HAL_RCC_OscConfig+0x1c6>
1004855c:	f7ff fe40 	bl	100481e0 <LL_RCC_LSE_Enable>
10048560:	e001      	b.n	10048566 <HAL_RCC_OscConfig+0x1ca>
10048562:	f7ff fe4b 	bl	100481fc <LL_RCC_LSE_Disable>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
10048566:	687b      	ldr	r3, [r7, #4]
10048568:	68db      	ldr	r3, [r3, #12]
1004856a:	2b00      	cmp	r3, #0
1004856c:	d013      	beq.n	10048596 <HAL_RCC_OscConfig+0x1fa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
1004856e:	f7fc f999 	bl	100448a4 <HAL_GetTick>
10048572:	0003      	movs	r3, r0
10048574:	60fb      	str	r3, [r7, #12]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_LSE_READYFLAG() == 0U)
10048576:	e009      	b.n	1004858c <HAL_RCC_OscConfig+0x1f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
10048578:	f7fc f994 	bl	100448a4 <HAL_GetTick>
1004857c:	0002      	movs	r2, r0
1004857e:	68fb      	ldr	r3, [r7, #12]
10048580:	1ad3      	subs	r3, r2, r3
10048582:	4a2d      	ldr	r2, [pc, #180]	@ (10048638 <HAL_RCC_OscConfig+0x29c>)
10048584:	4293      	cmp	r3, r2
10048586:	d901      	bls.n	1004858c <HAL_RCC_OscConfig+0x1f0>
        {
          return HAL_TIMEOUT;
10048588:	2303      	movs	r3, #3
1004858a:	e051      	b.n	10048630 <HAL_RCC_OscConfig+0x294>
      while (__HAL_RCC_GET_LSE_READYFLAG() == 0U)
1004858c:	f7ff fe44 	bl	10048218 <LL_RCC_LSE_IsReady>
10048590:	1e03      	subs	r3, r0, #0
10048592:	d0f1      	beq.n	10048578 <HAL_RCC_OscConfig+0x1dc>
10048594:	e012      	b.n	100485bc <HAL_RCC_OscConfig+0x220>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
10048596:	f7fc f985 	bl	100448a4 <HAL_GetTick>
1004859a:	0003      	movs	r3, r0
1004859c:	60fb      	str	r3, [r7, #12]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_LSE_READYFLAG() != 0U)
1004859e:	e009      	b.n	100485b4 <HAL_RCC_OscConfig+0x218>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
100485a0:	f7fc f980 	bl	100448a4 <HAL_GetTick>
100485a4:	0002      	movs	r2, r0
100485a6:	68fb      	ldr	r3, [r7, #12]
100485a8:	1ad3      	subs	r3, r2, r3
100485aa:	4a23      	ldr	r2, [pc, #140]	@ (10048638 <HAL_RCC_OscConfig+0x29c>)
100485ac:	4293      	cmp	r3, r2
100485ae:	d901      	bls.n	100485b4 <HAL_RCC_OscConfig+0x218>
        {
          return HAL_TIMEOUT;
100485b0:	2303      	movs	r3, #3
100485b2:	e03d      	b.n	10048630 <HAL_RCC_OscConfig+0x294>
      while (__HAL_RCC_GET_LSE_READYFLAG() != 0U)
100485b4:	f7ff fe30 	bl	10048218 <LL_RCC_LSE_IsReady>
100485b8:	1e03      	subs	r3, r0, #0
100485ba:	d1f1      	bne.n	100485a0 <HAL_RCC_OscConfig+0x204>
      }
    }
  }

  /*------------------------------ LSE Bypass Configuration ------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE_BYPASS) == RCC_OSCILLATORTYPE_LSE_BYPASS)
100485bc:	687b      	ldr	r3, [r7, #4]
100485be:	681b      	ldr	r3, [r3, #0]
100485c0:	2208      	movs	r2, #8
100485c2:	4013      	ands	r3, r2
100485c4:	d033      	beq.n	1004862e <HAL_RCC_OscConfig+0x292>

    /* Check the parameters */
    assert_param(IS_RCC_LSE_BYPASS(RCC_OscInitStruct->LSEBYPASSState));

    /* Set the new LSE Bypass configuration -----------------------------------------*/
    __HAL_RCC_LSE_BYPASS_CONFIG(RCC_OscInitStruct->LSEBYPASSState);
100485c6:	687b      	ldr	r3, [r7, #4]
100485c8:	695b      	ldr	r3, [r3, #20]
100485ca:	2b40      	cmp	r3, #64	@ 0x40
100485cc:	d102      	bne.n	100485d4 <HAL_RCC_OscConfig+0x238>
100485ce:	f7ff fe33 	bl	10048238 <LL_RCC_LSE_EnableBypass>
100485d2:	e001      	b.n	100485d8 <HAL_RCC_OscConfig+0x23c>
100485d4:	f7ff fe3e 	bl	10048254 <LL_RCC_LSE_DisableBypass>

    /* Check the LSE Bypass State */
    if (RCC_OscInitStruct->LSEBYPASSState != RCC_LSE_OFF)
100485d8:	687b      	ldr	r3, [r7, #4]
100485da:	695b      	ldr	r3, [r3, #20]
100485dc:	2b00      	cmp	r3, #0
100485de:	d013      	beq.n	10048608 <HAL_RCC_OscConfig+0x26c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
100485e0:	f7fc f960 	bl	100448a4 <HAL_GetTick>
100485e4:	0003      	movs	r3, r0
100485e6:	60fb      	str	r3, [r7, #12]

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsBypassEnabled() == 0U)
100485e8:	e009      	b.n	100485fe <HAL_RCC_OscConfig+0x262>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
100485ea:	f7fc f95b 	bl	100448a4 <HAL_GetTick>
100485ee:	0002      	movs	r2, r0
100485f0:	68fb      	ldr	r3, [r7, #12]
100485f2:	1ad3      	subs	r3, r2, r3
100485f4:	4a10      	ldr	r2, [pc, #64]	@ (10048638 <HAL_RCC_OscConfig+0x29c>)
100485f6:	4293      	cmp	r3, r2
100485f8:	d901      	bls.n	100485fe <HAL_RCC_OscConfig+0x262>
        {
          return HAL_TIMEOUT;
100485fa:	2303      	movs	r3, #3
100485fc:	e018      	b.n	10048630 <HAL_RCC_OscConfig+0x294>
      while (LL_RCC_LSE_IsBypassEnabled() == 0U)
100485fe:	f7ff fe37 	bl	10048270 <LL_RCC_LSE_IsBypassEnabled>
10048602:	1e03      	subs	r3, r0, #0
10048604:	d0f1      	beq.n	100485ea <HAL_RCC_OscConfig+0x24e>
10048606:	e012      	b.n	1004862e <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
10048608:	f7fc f94c 	bl	100448a4 <HAL_GetTick>
1004860c:	0003      	movs	r3, r0
1004860e:	60fb      	str	r3, [r7, #12]

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsBypassEnabled() != 0U)
10048610:	e009      	b.n	10048626 <HAL_RCC_OscConfig+0x28a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
10048612:	f7fc f947 	bl	100448a4 <HAL_GetTick>
10048616:	0002      	movs	r2, r0
10048618:	68fb      	ldr	r3, [r7, #12]
1004861a:	1ad3      	subs	r3, r2, r3
1004861c:	4a06      	ldr	r2, [pc, #24]	@ (10048638 <HAL_RCC_OscConfig+0x29c>)
1004861e:	4293      	cmp	r3, r2
10048620:	d901      	bls.n	10048626 <HAL_RCC_OscConfig+0x28a>
        {
          return HAL_TIMEOUT;
10048622:	2303      	movs	r3, #3
10048624:	e004      	b.n	10048630 <HAL_RCC_OscConfig+0x294>
      while (LL_RCC_LSE_IsBypassEnabled() != 0U)
10048626:	f7ff fe23 	bl	10048270 <LL_RCC_LSE_IsBypassEnabled>
1004862a:	1e03      	subs	r3, r0, #0
1004862c:	d1f1      	bne.n	10048612 <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }

  return HAL_OK;
1004862e:	2300      	movs	r3, #0
}
10048630:	0018      	movs	r0, r3
10048632:	46bd      	mov	sp, r7
10048634:	b004      	add	sp, #16
10048636:	bd80      	pop	{r7, pc}
10048638:	00001388 	.word	0x00001388

1004863c <HAL_RCC_ClockConfig>:
  *         currently used as system clock source.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
1004863c:	b580      	push	{r7, lr}
1004863e:	b084      	sub	sp, #16
10048640:	af00      	add	r7, sp, #0
10048642:	6078      	str	r0, [r7, #4]
10048644:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
10048646:	687b      	ldr	r3, [r7, #4]
10048648:	2b00      	cmp	r3, #0
1004864a:	d101      	bne.n	10048650 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
1004864c:	2301      	movs	r3, #1
1004864e:	e098      	b.n	10048782 <HAL_RCC_ClockConfig+0x146>

  /* Check the parameters */
  assert_param(IS_FLASH_WAIT_STATES(FLatency));

  /* Set FALSH_WAIT_STATES_1 */
  __HAL_FLASH_SET_WAIT_STATES(FLatency);
10048650:	4b4e      	ldr	r3, [pc, #312]	@ (1004878c <HAL_RCC_ClockConfig+0x150>)
10048652:	685b      	ldr	r3, [r3, #4]
10048654:	2230      	movs	r2, #48	@ 0x30
10048656:	4393      	bics	r3, r2
10048658:	0019      	movs	r1, r3
1004865a:	4b4c      	ldr	r3, [pc, #304]	@ (1004878c <HAL_RCC_ClockConfig+0x150>)
1004865c:	683a      	ldr	r2, [r7, #0]
1004865e:	430a      	orrs	r2, r1
10048660:	605a      	str	r2, [r3, #4]
  /*------------------------- SYSCLK Configuration ---------------------------*/
  assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
  assert_param(IS_RCC_SYSCLK_DIVIDER(RCC_ClkInitStruct->SYSCLKDivider));

  /* HSI is selected as System Clock Source */
  if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
10048662:	687b      	ldr	r3, [r7, #4]
10048664:	681b      	ldr	r3, [r3, #0]
10048666:	2b02      	cmp	r3, #2
10048668:	d10e      	bne.n	10048688 <HAL_RCC_ClockConfig+0x4c>
  {
    LL_RCC_HSI_Enable();
1004866a:	f7ff fd41 	bl	100480f0 <LL_RCC_HSI_Enable>
    
    /* Check the HSI ready flag */
    if (LL_RCC_HSI_IsReady() == 0U)
1004866e:	f7ff fd67 	bl	10048140 <LL_RCC_HSI_IsReady>
10048672:	1e03      	subs	r3, r0, #0
10048674:	d101      	bne.n	1004867a <HAL_RCC_ClockConfig+0x3e>
    {
      return HAL_ERROR;
10048676:	2301      	movs	r3, #1
10048678:	e083      	b.n	10048782 <HAL_RCC_ClockConfig+0x146>
    }

    /* Disable the RC64MPLL*/
    __HAL_RCC_RC64MPLL_DISABLE();
1004867a:	f7ff fe57 	bl	1004832c <LL_RCC_RC64MPLL_Disable>
    
    /* Configure the RC64MPLL multiplication factor */
    __HAL_RCC_RC64MPLL_PRESC_CONFIG(RCC_ClkInitStruct->SYSCLKDivider);
1004867e:	687b      	ldr	r3, [r7, #4]
10048680:	685b      	ldr	r3, [r3, #4]
10048682:	0018      	movs	r0, r3
10048684:	f7ff fe76 	bl	10048374 <LL_RCC_SetRC64MPLLPrescaler>
  }

  /* RC64MPLL is selected as System Clock Source */
  if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_RC64MPLL)
10048688:	687b      	ldr	r3, [r7, #4]
1004868a:	681b      	ldr	r3, [r3, #0]
1004868c:	2b00      	cmp	r3, #0
1004868e:	d124      	bne.n	100486da <HAL_RCC_ClockConfig+0x9e>
  {
    /* Check the HSI ready flag */
    if (LL_RCC_HSI_IsReady() == 0U)
10048690:	f7ff fd56 	bl	10048140 <LL_RCC_HSI_IsReady>
10048694:	1e03      	subs	r3, r0, #0
10048696:	d101      	bne.n	1004869c <HAL_RCC_ClockConfig+0x60>
    {
      return HAL_ERROR;
10048698:	2301      	movs	r3, #1
1004869a:	e072      	b.n	10048782 <HAL_RCC_ClockConfig+0x146>
    }

    /* Check the HSE ready flag */
    if (LL_RCC_HSE_IsReady() == 0U)
1004869c:	f7ff fcde 	bl	1004805c <LL_RCC_HSE_IsReady>
100486a0:	1e03      	subs	r3, r0, #0
100486a2:	d101      	bne.n	100486a8 <HAL_RCC_ClockConfig+0x6c>
    {
      return HAL_ERROR;
100486a4:	2301      	movs	r3, #1
100486a6:	e06c      	b.n	10048782 <HAL_RCC_ClockConfig+0x146>
    }

    /* Enable the RC64MPLL*/
    __HAL_RCC_RC64MPLL_ENABLE();
100486a8:	f7ff fe32 	bl	10048310 <LL_RCC_RC64MPLL_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
100486ac:	f7fc f8fa 	bl	100448a4 <HAL_GetTick>
100486b0:	0003      	movs	r3, r0
100486b2:	60fb      	str	r3, [r7, #12]

    /* Wait till RC64MPLL is ready */
    while (LL_RCC_RC64MPLL_IsReady() == 0)
100486b4:	e008      	b.n	100486c8 <HAL_RCC_ClockConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
100486b6:	f7fc f8f5 	bl	100448a4 <HAL_GetTick>
100486ba:	0002      	movs	r2, r0
100486bc:	68fb      	ldr	r3, [r7, #12]
100486be:	1ad3      	subs	r3, r2, r3
100486c0:	2b02      	cmp	r3, #2
100486c2:	d901      	bls.n	100486c8 <HAL_RCC_ClockConfig+0x8c>
      {
        return HAL_TIMEOUT;
100486c4:	2303      	movs	r3, #3
100486c6:	e05c      	b.n	10048782 <HAL_RCC_ClockConfig+0x146>
    while (LL_RCC_RC64MPLL_IsReady() == 0)
100486c8:	f7ff fe40 	bl	1004834c <LL_RCC_RC64MPLL_IsReady>
100486cc:	1e03      	subs	r3, r0, #0
100486ce:	d0f2      	beq.n	100486b6 <HAL_RCC_ClockConfig+0x7a>
      }
    }

    /* Configure the RC64MPLL multiplication factor */
    __HAL_RCC_RC64MPLL_PRESC_CONFIG(RCC_ClkInitStruct->SYSCLKDivider);
100486d0:	687b      	ldr	r3, [r7, #4]
100486d2:	685b      	ldr	r3, [r3, #4]
100486d4:	0018      	movs	r0, r3
100486d6:	f7ff fe4d 	bl	10048374 <LL_RCC_SetRC64MPLLPrescaler>
  }

  /* DIRECT_HSE is selected as System Clock Source */
  if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_DIRECT_HSE)
100486da:	687b      	ldr	r3, [r7, #4]
100486dc:	681b      	ldr	r3, [r3, #0]
100486de:	2b01      	cmp	r3, #1
100486e0:	d117      	bne.n	10048712 <HAL_RCC_ClockConfig+0xd6>
  {
    /* Enable the DIRECT_HSE configuration */
    LL_RCC_DIRECT_HSE_Enable();
100486e2:	f7ff fd41 	bl	10048168 <LL_RCC_DIRECT_HSE_Enable>

    /* Check the HSI ready flag */
    if (LL_RCC_HSI_IsReady() != 0U)
100486e6:	f7ff fd2b 	bl	10048140 <LL_RCC_HSI_IsReady>
100486ea:	1e03      	subs	r3, r0, #0
100486ec:	d001      	beq.n	100486f2 <HAL_RCC_ClockConfig+0xb6>
    {
      return HAL_ERROR;
100486ee:	2301      	movs	r3, #1
100486f0:	e047      	b.n	10048782 <HAL_RCC_ClockConfig+0x146>
    }

    /* Check the HSE ready flag */
    if (LL_RCC_HSE_IsReady() == 0U)
100486f2:	f7ff fcb3 	bl	1004805c <LL_RCC_HSE_IsReady>
100486f6:	1e03      	subs	r3, r0, #0
100486f8:	d101      	bne.n	100486fe <HAL_RCC_ClockConfig+0xc2>
    {
      return HAL_ERROR;
100486fa:	2301      	movs	r3, #1
100486fc:	e041      	b.n	10048782 <HAL_RCC_ClockConfig+0x146>
    }

    /* Configure the DIRECT_HSE multiplication factor */
    __HAL_RCC_DIRECT_HSE_PRESC_CONFIG(RCC_ClkInitStruct->SYSCLKDivider);
100486fe:	4b24      	ldr	r3, [pc, #144]	@ (10048790 <HAL_RCC_ClockConfig+0x154>)
10048700:	689b      	ldr	r3, [r3, #8]
10048702:	22e0      	movs	r2, #224	@ 0xe0
10048704:	4393      	bics	r3, r2
10048706:	0019      	movs	r1, r3
10048708:	687b      	ldr	r3, [r7, #4]
1004870a:	685a      	ldr	r2, [r3, #4]
1004870c:	4b20      	ldr	r3, [pc, #128]	@ (10048790 <HAL_RCC_ClockConfig+0x154>)
1004870e:	430a      	orrs	r2, r1
10048710:	609a      	str	r2, [r3, #8]
  /*----------------------- FLASH Latency Configuration ------------------------*/
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the FLASH clock */

  /* Setup flash wait states because according the system clock frequency */
  if (FLatency != __HAL_FLASH_GET_WAIT_STATES())
10048712:	4b1e      	ldr	r3, [pc, #120]	@ (1004878c <HAL_RCC_ClockConfig+0x150>)
10048714:	685b      	ldr	r3, [r3, #4]
10048716:	2230      	movs	r2, #48	@ 0x30
10048718:	4013      	ands	r3, r2
1004871a:	683a      	ldr	r2, [r7, #0]
1004871c:	429a      	cmp	r2, r3
1004871e:	d01d      	beq.n	1004875c <HAL_RCC_ClockConfig+0x120>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_CONFIG register */
    __HAL_FLASH_SET_WAIT_STATES(FLatency);
10048720:	4b1a      	ldr	r3, [pc, #104]	@ (1004878c <HAL_RCC_ClockConfig+0x150>)
10048722:	685b      	ldr	r3, [r3, #4]
10048724:	2230      	movs	r2, #48	@ 0x30
10048726:	4393      	bics	r3, r2
10048728:	0019      	movs	r1, r3
1004872a:	4b18      	ldr	r3, [pc, #96]	@ (1004878c <HAL_RCC_ClockConfig+0x150>)
1004872c:	683a      	ldr	r2, [r7, #0]
1004872e:	430a      	orrs	r2, r1
10048730:	605a      	str	r2, [r3, #4]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
10048732:	f7fc f8b7 	bl	100448a4 <HAL_GetTick>
10048736:	0003      	movs	r3, r0
10048738:	60fb      	str	r3, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_CONFIG register */
    while (__HAL_FLASH_GET_WAIT_STATES() != FLatency)
1004873a:	e008      	b.n	1004874e <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
1004873c:	f7fc f8b2 	bl	100448a4 <HAL_GetTick>
10048740:	0002      	movs	r2, r0
10048742:	68fb      	ldr	r3, [r7, #12]
10048744:	1ad3      	subs	r3, r2, r3
10048746:	2b02      	cmp	r3, #2
10048748:	d901      	bls.n	1004874e <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
1004874a:	2303      	movs	r3, #3
1004874c:	e019      	b.n	10048782 <HAL_RCC_ClockConfig+0x146>
    while (__HAL_FLASH_GET_WAIT_STATES() != FLatency)
1004874e:	4b0f      	ldr	r3, [pc, #60]	@ (1004878c <HAL_RCC_ClockConfig+0x150>)
10048750:	685b      	ldr	r3, [r3, #4]
10048752:	2230      	movs	r2, #48	@ 0x30
10048754:	4013      	ands	r3, r2
10048756:	683a      	ldr	r2, [r7, #0]
10048758:	429a      	cmp	r2, r3
1004875a:	d1ef      	bne.n	1004873c <HAL_RCC_ClockConfig+0x100>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  for (volatile int i = 0; i < 6; i++)
1004875c:	2300      	movs	r3, #0
1004875e:	60bb      	str	r3, [r7, #8]
10048760:	e003      	b.n	1004876a <HAL_RCC_ClockConfig+0x12e>
  {
    __asm("NOP");
10048762:	46c0      	nop			@ (mov r8, r8)
  for (volatile int i = 0; i < 6; i++)
10048764:	68bb      	ldr	r3, [r7, #8]
10048766:	3301      	adds	r3, #1
10048768:	60bb      	str	r3, [r7, #8]
1004876a:	68bb      	ldr	r3, [r7, #8]
1004876c:	2b05      	cmp	r3, #5
1004876e:	ddf8      	ble.n	10048762 <HAL_RCC_ClockConfig+0x126>
  }
  SystemCoreClockUpdate();
10048770:	f7fb f806 	bl	10043780 <SystemCoreClockUpdate>

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
10048774:	f7fc f8a0 	bl	100448b8 <HAL_GetTickPrio>
10048778:	0003      	movs	r3, r0
1004877a:	0018      	movs	r0, r3
1004877c:	f7fc f838 	bl	100447f0 <HAL_InitTick>
10048780:	0003      	movs	r3, r0
}
10048782:	0018      	movs	r0, r3
10048784:	46bd      	mov	sp, r7
10048786:	b004      	add	sp, #16
10048788:	bd80      	pop	{r7, pc}
1004878a:	46c0      	nop			@ (mov r8, r8)
1004878c:	40001000 	.word	0x40001000
10048790:	48400000 	.word	0x48400000

10048794 <HAL_RCC_GetSysClockFreq>:
  *         content of the SystemCoreClock CMSIS variable
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
10048794:	b580      	push	{r7, lr}
10048796:	af00      	add	r7, sp, #0
  return SystemCoreClock;
10048798:	4b02      	ldr	r3, [pc, #8]	@ (100487a4 <HAL_RCC_GetSysClockFreq+0x10>)
1004879a:	681b      	ldr	r3, [r3, #0]
}
1004879c:	0018      	movs	r0, r3
1004879e:	46bd      	mov	sp, r7
100487a0:	bd80      	pop	{r7, pc}
100487a2:	46c0      	nop			@ (mov r8, r8)
100487a4:	20000b08 	.word	0x20000b08

100487a8 <LL_RCC_LSCO_SetSource>:
{
100487a8:	b580      	push	{r7, lr}
100487aa:	b082      	sub	sp, #8
100487ac:	af00      	add	r7, sp, #0
100487ae:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_CLKSLOWSEL, Source);
100487b0:	4b06      	ldr	r3, [pc, #24]	@ (100487cc <LL_RCC_LSCO_SetSource+0x24>)
100487b2:	689b      	ldr	r3, [r3, #8]
100487b4:	4a06      	ldr	r2, [pc, #24]	@ (100487d0 <LL_RCC_LSCO_SetSource+0x28>)
100487b6:	4013      	ands	r3, r2
100487b8:	0019      	movs	r1, r3
100487ba:	4b04      	ldr	r3, [pc, #16]	@ (100487cc <LL_RCC_LSCO_SetSource+0x24>)
100487bc:	687a      	ldr	r2, [r7, #4]
100487be:	430a      	orrs	r2, r1
100487c0:	609a      	str	r2, [r3, #8]
}
100487c2:	46c0      	nop			@ (mov r8, r8)
100487c4:	46bd      	mov	sp, r7
100487c6:	b002      	add	sp, #8
100487c8:	bd80      	pop	{r7, pc}
100487ca:	46c0      	nop			@ (mov r8, r8)
100487cc:	48400000 	.word	0x48400000
100487d0:	fffe7fff 	.word	0xfffe7fff

100487d4 <LL_RCC_SetRFClock>:
{
100487d4:	b580      	push	{r7, lr}
100487d6:	b082      	sub	sp, #8
100487d8:	af00      	add	r7, sp, #0
100487da:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->APB2ENR, RCC_APB2ENR_CLKBLEDIV, Source);
100487dc:	4b06      	ldr	r3, [pc, #24]	@ (100487f8 <LL_RCC_SetRFClock+0x24>)
100487de:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
100487e0:	2206      	movs	r2, #6
100487e2:	4393      	bics	r3, r2
100487e4:	0019      	movs	r1, r3
100487e6:	4b04      	ldr	r3, [pc, #16]	@ (100487f8 <LL_RCC_SetRFClock+0x24>)
100487e8:	687a      	ldr	r2, [r7, #4]
100487ea:	430a      	orrs	r2, r1
100487ec:	661a      	str	r2, [r3, #96]	@ 0x60
}
100487ee:	46c0      	nop			@ (mov r8, r8)
100487f0:	46bd      	mov	sp, r7
100487f2:	b002      	add	sp, #8
100487f4:	bd80      	pop	{r7, pc}
100487f6:	46c0      	nop			@ (mov r8, r8)
100487f8:	48400000 	.word	0x48400000

100487fc <LL_RCC_SetSMPSPrescaler>:
{
100487fc:	b580      	push	{r7, lr}
100487fe:	b082      	sub	sp, #8
10048800:	af00      	add	r7, sp, #0
10048802:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SMPSDIV, Prescaler);
10048804:	4b06      	ldr	r3, [pc, #24]	@ (10048820 <LL_RCC_SetSMPSPrescaler+0x24>)
10048806:	689b      	ldr	r3, [r3, #8]
10048808:	4a06      	ldr	r2, [pc, #24]	@ (10048824 <LL_RCC_SetSMPSPrescaler+0x28>)
1004880a:	4013      	ands	r3, r2
1004880c:	0019      	movs	r1, r3
1004880e:	4b04      	ldr	r3, [pc, #16]	@ (10048820 <LL_RCC_SetSMPSPrescaler+0x24>)
10048810:	687a      	ldr	r2, [r7, #4]
10048812:	430a      	orrs	r2, r1
10048814:	609a      	str	r2, [r3, #8]
}
10048816:	46c0      	nop			@ (mov r8, r8)
10048818:	46bd      	mov	sp, r7
1004881a:	b002      	add	sp, #8
1004881c:	bd80      	pop	{r7, pc}
1004881e:	46c0      	nop			@ (mov r8, r8)
10048820:	48400000 	.word	0x48400000
10048824:	ffffefff 	.word	0xffffefff

10048828 <LL_RCC_SetSPI2I2SClockSource>:
{
10048828:	b580      	push	{r7, lr}
1004882a:	b082      	sub	sp, #8
1004882c:	af00      	add	r7, sp, #0
1004882e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SPI2I2SCLKSEL, Source);
10048830:	4b06      	ldr	r3, [pc, #24]	@ (1004884c <LL_RCC_SetSPI2I2SClockSource+0x24>)
10048832:	689b      	ldr	r3, [r3, #8]
10048834:	4a06      	ldr	r2, [pc, #24]	@ (10048850 <LL_RCC_SetSPI2I2SClockSource+0x28>)
10048836:	4013      	ands	r3, r2
10048838:	0019      	movs	r1, r3
1004883a:	4b04      	ldr	r3, [pc, #16]	@ (1004884c <LL_RCC_SetSPI2I2SClockSource+0x24>)
1004883c:	687a      	ldr	r2, [r7, #4]
1004883e:	430a      	orrs	r2, r1
10048840:	609a      	str	r2, [r3, #8]
}
10048842:	46c0      	nop			@ (mov r8, r8)
10048844:	46bd      	mov	sp, r7
10048846:	b002      	add	sp, #8
10048848:	bd80      	pop	{r7, pc}
1004884a:	46c0      	nop			@ (mov r8, r8)
1004884c:	48400000 	.word	0x48400000
10048850:	ff7fffff 	.word	0xff7fffff

10048854 <LL_RCC_SetSPI3I2SClockSource>:
{
10048854:	b580      	push	{r7, lr}
10048856:	b082      	sub	sp, #8
10048858:	af00      	add	r7, sp, #0
1004885a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SPI3I2SCLKSEL, Source);
1004885c:	4b06      	ldr	r3, [pc, #24]	@ (10048878 <LL_RCC_SetSPI3I2SClockSource+0x24>)
1004885e:	689b      	ldr	r3, [r3, #8]
10048860:	4a06      	ldr	r2, [pc, #24]	@ (1004887c <LL_RCC_SetSPI3I2SClockSource+0x28>)
10048862:	4013      	ands	r3, r2
10048864:	0019      	movs	r1, r3
10048866:	4b04      	ldr	r3, [pc, #16]	@ (10048878 <LL_RCC_SetSPI3I2SClockSource+0x24>)
10048868:	687a      	ldr	r2, [r7, #4]
1004886a:	430a      	orrs	r2, r1
1004886c:	609a      	str	r2, [r3, #8]
}
1004886e:	46c0      	nop			@ (mov r8, r8)
10048870:	46bd      	mov	sp, r7
10048872:	b002      	add	sp, #8
10048874:	bd80      	pop	{r7, pc}
10048876:	46c0      	nop			@ (mov r8, r8)
10048878:	48400000 	.word	0x48400000
1004887c:	ffbfffff 	.word	0xffbfffff

10048880 <HAL_RCCEx_PeriphCLKConfig>:
  *  @note   (*) Peripherals are not available on all devices
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
10048880:	b580      	push	{r7, lr}
10048882:	b082      	sub	sp, #8
10048884:	af00      	add	r7, sp, #0
10048886:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RF_BLE clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RF) == RCC_PERIPHCLK_RF))
10048888:	687b      	ldr	r3, [r7, #4]
1004888a:	681b      	ldr	r3, [r3, #0]
1004888c:	2201      	movs	r2, #1
1004888e:	4013      	ands	r3, r2
10048890:	d004      	beq.n	1004889c <HAL_RCCEx_PeriphCLKConfig+0x1c>
  {
    assert_param(IS_RCC_RF_BLE_CLOCK_SOURCE(PeriphClkInit->RFClockSelection));
    __HAL_RCC_RF_CLK_SET_CONFIG(PeriphClkInit->RFClockSelection);
10048892:	687b      	ldr	r3, [r7, #4]
10048894:	691b      	ldr	r3, [r3, #16]
10048896:	0018      	movs	r0, r3
10048898:	f7ff ff9c 	bl	100487d4 <LL_RCC_SetRFClock>
  }

  /*-------------------------- SMPS clock configuration -------------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS))
1004889c:	687b      	ldr	r3, [r7, #4]
1004889e:	681b      	ldr	r3, [r3, #0]
100488a0:	2202      	movs	r2, #2
100488a2:	4013      	ands	r3, r2
100488a4:	d004      	beq.n	100488b0 <HAL_RCCEx_PeriphCLKConfig+0x30>
  {
    assert_param(IS_RCC_SMPS_CLOCK_PRESC(PeriphClkInit->SmpsDivSelection));
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
100488a6:	687b      	ldr	r3, [r7, #4]
100488a8:	695b      	ldr	r3, [r3, #20]
100488aa:	0018      	movs	r0, r3
100488ac:	f7ff ffa6 	bl	100487fc <LL_RCC_SetSMPSPrescaler>
  }

#if defined(SPI2)
  /*-------------------------- SPI2_I2S clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI2_I2S) == RCC_PERIPHCLK_SPI2_I2S))
100488b0:	687b      	ldr	r3, [r7, #4]
100488b2:	681b      	ldr	r3, [r3, #0]
100488b4:	2204      	movs	r2, #4
100488b6:	4013      	ands	r3, r2
100488b8:	d004      	beq.n	100488c4 <HAL_RCCEx_PeriphCLKConfig+0x44>
  {
    assert_param(IS_RCC_SPI2I2S_CLOCK_SOURCE(PeriphClkInit->SPI2I2SClockSelection));
    __HAL_RCC_SPI2I2S_CLK_CONFIG(PeriphClkInit->SPI2I2SClockSelection);
100488ba:	687b      	ldr	r3, [r7, #4]
100488bc:	685b      	ldr	r3, [r3, #4]
100488be:	0018      	movs	r0, r3
100488c0:	f7ff ffb2 	bl	10048828 <LL_RCC_SetSPI2I2SClockSource>
  }
#endif
#if defined(SPI3)
  /*-------------------------- SPI3_I2S clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI3_I2S) == RCC_PERIPHCLK_SPI3_I2S))
100488c4:	687b      	ldr	r3, [r7, #4]
100488c6:	681b      	ldr	r3, [r3, #0]
100488c8:	2208      	movs	r2, #8
100488ca:	4013      	ands	r3, r2
100488cc:	d004      	beq.n	100488d8 <HAL_RCCEx_PeriphCLKConfig+0x58>
  {
    assert_param(IS_RCC_SPI3I2S_CLOCK_SOURCE(PeriphClkInit->SPI3I2SClockSelection));
    __HAL_RCC_SPI3I2S_CLK_CONFIG(PeriphClkInit->SPI3I2SClockSelection);
100488ce:	687b      	ldr	r3, [r7, #4]
100488d0:	689b      	ldr	r3, [r3, #8]
100488d2:	0018      	movs	r0, r3
100488d4:	f7ff ffbe 	bl	10048854 <LL_RCC_SetSPI3I2SClockSource>
    __HAL_RCC_LPUART1_CLK_CONFIG(PeriphClkInit->LPUART1ClockSelection);
  }
#endif /* RCC_CFGR_LPUCLKSEL */

  /*-------------------------- RTC WDG BLEWKUP clock source configuration ---------------------*/
  if ((((PeriphClkInit->RTCWDGBLEWKUPClockSelection) & RCC_PERIPHCLK_RTC_WDG_BLEWKUP) == RCC_PERIPHCLK_RTC_WDG_BLEWKUP))
100488d8:	687b      	ldr	r3, [r7, #4]
100488da:	68db      	ldr	r3, [r3, #12]
100488dc:	2220      	movs	r2, #32
100488de:	4013      	ands	r3, r2
100488e0:	d004      	beq.n	100488ec <HAL_RCCEx_PeriphCLKConfig+0x6c>
  {
    assert_param(IS_RCC_RTC_WDG_BLEWKUP_CLOCK_SOURCE(PeriphClkInit->RTCWDGBLEWKUPClockSelection));
    __HAL_RCC_RTC_WDG_BLEWKUP_CLK_CONFIG(PeriphClkInit->RTCWDGBLEWKUPClockSelection);
100488e2:	687b      	ldr	r3, [r7, #4]
100488e4:	68db      	ldr	r3, [r3, #12]
100488e6:	0018      	movs	r0, r3
100488e8:	f7ff ff5e 	bl	100487a8 <LL_RCC_LSCO_SetSource>
  }

  return HAL_OK;
100488ec:	2300      	movs	r3, #0
}
100488ee:	0018      	movs	r0, r3
100488f0:	46bd      	mov	sp, r7
100488f2:	b002      	add	sp, #8
100488f4:	bd80      	pop	{r7, pc}
	...

100488f8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
100488f8:	b580      	push	{r7, lr}
100488fa:	b084      	sub	sp, #16
100488fc:	af00      	add	r7, sp, #0
100488fe:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
10048900:	687b      	ldr	r3, [r7, #4]
10048902:	2b00      	cmp	r3, #0
10048904:	d101      	bne.n	1004890a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
10048906:	2301      	movs	r3, #1
10048908:	e0a8      	b.n	10048a5c <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
1004890a:	687b      	ldr	r3, [r7, #4]
1004890c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
1004890e:	2b00      	cmp	r3, #0
10048910:	d109      	bne.n	10048926 <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
10048912:	687b      	ldr	r3, [r7, #4]
10048914:	685a      	ldr	r2, [r3, #4]
10048916:	2382      	movs	r3, #130	@ 0x82
10048918:	005b      	lsls	r3, r3, #1
1004891a:	429a      	cmp	r2, r3
1004891c:	d009      	beq.n	10048932 <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
1004891e:	687b      	ldr	r3, [r7, #4]
10048920:	2200      	movs	r2, #0
10048922:	61da      	str	r2, [r3, #28]
10048924:	e005      	b.n	10048932 <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
10048926:	687b      	ldr	r3, [r7, #4]
10048928:	2200      	movs	r2, #0
1004892a:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
1004892c:	687b      	ldr	r3, [r7, #4]
1004892e:	2200      	movs	r2, #0
10048930:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
10048932:	687b      	ldr	r3, [r7, #4]
10048934:	2200      	movs	r2, #0
10048936:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
10048938:	687b      	ldr	r3, [r7, #4]
1004893a:	225d      	movs	r2, #93	@ 0x5d
1004893c:	5c9b      	ldrb	r3, [r3, r2]
1004893e:	b2db      	uxtb	r3, r3
10048940:	2b00      	cmp	r3, #0
10048942:	d107      	bne.n	10048954 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
10048944:	687b      	ldr	r3, [r7, #4]
10048946:	225c      	movs	r2, #92	@ 0x5c
10048948:	2100      	movs	r1, #0
1004894a:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
1004894c:	687b      	ldr	r3, [r7, #4]
1004894e:	0018      	movs	r0, r3
10048950:	f7fa fc36 	bl	100431c0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
10048954:	687b      	ldr	r3, [r7, #4]
10048956:	225d      	movs	r2, #93	@ 0x5d
10048958:	2102      	movs	r1, #2
1004895a:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
1004895c:	687b      	ldr	r3, [r7, #4]
1004895e:	681b      	ldr	r3, [r3, #0]
10048960:	681a      	ldr	r2, [r3, #0]
10048962:	687b      	ldr	r3, [r7, #4]
10048964:	681b      	ldr	r3, [r3, #0]
10048966:	2140      	movs	r1, #64	@ 0x40
10048968:	438a      	bics	r2, r1
1004896a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
1004896c:	687b      	ldr	r3, [r7, #4]
1004896e:	68da      	ldr	r2, [r3, #12]
10048970:	23e0      	movs	r3, #224	@ 0xe0
10048972:	00db      	lsls	r3, r3, #3
10048974:	429a      	cmp	r2, r3
10048976:	d902      	bls.n	1004897e <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
10048978:	2300      	movs	r3, #0
1004897a:	60fb      	str	r3, [r7, #12]
1004897c:	e002      	b.n	10048984 <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
1004897e:	2380      	movs	r3, #128	@ 0x80
10048980:	015b      	lsls	r3, r3, #5
10048982:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
10048984:	687b      	ldr	r3, [r7, #4]
10048986:	68da      	ldr	r2, [r3, #12]
10048988:	23f0      	movs	r3, #240	@ 0xf0
1004898a:	011b      	lsls	r3, r3, #4
1004898c:	429a      	cmp	r2, r3
1004898e:	d008      	beq.n	100489a2 <HAL_SPI_Init+0xaa>
10048990:	687b      	ldr	r3, [r7, #4]
10048992:	68da      	ldr	r2, [r3, #12]
10048994:	23e0      	movs	r3, #224	@ 0xe0
10048996:	00db      	lsls	r3, r3, #3
10048998:	429a      	cmp	r2, r3
1004899a:	d002      	beq.n	100489a2 <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
1004899c:	687b      	ldr	r3, [r7, #4]
1004899e:	2200      	movs	r2, #0
100489a0:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
100489a2:	687b      	ldr	r3, [r7, #4]
100489a4:	685a      	ldr	r2, [r3, #4]
100489a6:	2382      	movs	r3, #130	@ 0x82
100489a8:	005b      	lsls	r3, r3, #1
100489aa:	401a      	ands	r2, r3
100489ac:	687b      	ldr	r3, [r7, #4]
100489ae:	6899      	ldr	r1, [r3, #8]
100489b0:	2384      	movs	r3, #132	@ 0x84
100489b2:	021b      	lsls	r3, r3, #8
100489b4:	400b      	ands	r3, r1
100489b6:	431a      	orrs	r2, r3
100489b8:	687b      	ldr	r3, [r7, #4]
100489ba:	691b      	ldr	r3, [r3, #16]
100489bc:	2102      	movs	r1, #2
100489be:	400b      	ands	r3, r1
100489c0:	431a      	orrs	r2, r3
100489c2:	687b      	ldr	r3, [r7, #4]
100489c4:	695b      	ldr	r3, [r3, #20]
100489c6:	2101      	movs	r1, #1
100489c8:	400b      	ands	r3, r1
100489ca:	431a      	orrs	r2, r3
100489cc:	687b      	ldr	r3, [r7, #4]
100489ce:	6999      	ldr	r1, [r3, #24]
100489d0:	2380      	movs	r3, #128	@ 0x80
100489d2:	009b      	lsls	r3, r3, #2
100489d4:	400b      	ands	r3, r1
100489d6:	431a      	orrs	r2, r3
100489d8:	687b      	ldr	r3, [r7, #4]
100489da:	69db      	ldr	r3, [r3, #28]
100489dc:	2138      	movs	r1, #56	@ 0x38
100489de:	400b      	ands	r3, r1
100489e0:	431a      	orrs	r2, r3
100489e2:	687b      	ldr	r3, [r7, #4]
100489e4:	6a1b      	ldr	r3, [r3, #32]
100489e6:	2180      	movs	r1, #128	@ 0x80
100489e8:	400b      	ands	r3, r1
100489ea:	431a      	orrs	r2, r3
100489ec:	0011      	movs	r1, r2
100489ee:	687b      	ldr	r3, [r7, #4]
100489f0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
100489f2:	2380      	movs	r3, #128	@ 0x80
100489f4:	019b      	lsls	r3, r3, #6
100489f6:	401a      	ands	r2, r3
100489f8:	687b      	ldr	r3, [r7, #4]
100489fa:	681b      	ldr	r3, [r3, #0]
100489fc:	430a      	orrs	r2, r1
100489fe:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
10048a00:	687b      	ldr	r3, [r7, #4]
10048a02:	699b      	ldr	r3, [r3, #24]
10048a04:	0c1b      	lsrs	r3, r3, #16
10048a06:	2204      	movs	r2, #4
10048a08:	401a      	ands	r2, r3
10048a0a:	687b      	ldr	r3, [r7, #4]
10048a0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
10048a0e:	2110      	movs	r1, #16
10048a10:	400b      	ands	r3, r1
10048a12:	431a      	orrs	r2, r3
10048a14:	687b      	ldr	r3, [r7, #4]
10048a16:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
10048a18:	2108      	movs	r1, #8
10048a1a:	400b      	ands	r3, r1
10048a1c:	431a      	orrs	r2, r3
10048a1e:	687b      	ldr	r3, [r7, #4]
10048a20:	68d9      	ldr	r1, [r3, #12]
10048a22:	23f0      	movs	r3, #240	@ 0xf0
10048a24:	011b      	lsls	r3, r3, #4
10048a26:	400b      	ands	r3, r1
10048a28:	431a      	orrs	r2, r3
10048a2a:	0011      	movs	r1, r2
10048a2c:	68fa      	ldr	r2, [r7, #12]
10048a2e:	2380      	movs	r3, #128	@ 0x80
10048a30:	015b      	lsls	r3, r3, #5
10048a32:	401a      	ands	r2, r3
10048a34:	687b      	ldr	r3, [r7, #4]
10048a36:	681b      	ldr	r3, [r3, #0]
10048a38:	430a      	orrs	r2, r1
10048a3a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
10048a3c:	687b      	ldr	r3, [r7, #4]
10048a3e:	681b      	ldr	r3, [r3, #0]
10048a40:	69da      	ldr	r2, [r3, #28]
10048a42:	687b      	ldr	r3, [r7, #4]
10048a44:	681b      	ldr	r3, [r3, #0]
10048a46:	4907      	ldr	r1, [pc, #28]	@ (10048a64 <HAL_SPI_Init+0x16c>)
10048a48:	400a      	ands	r2, r1
10048a4a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
10048a4c:	687b      	ldr	r3, [r7, #4]
10048a4e:	2200      	movs	r2, #0
10048a50:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
10048a52:	687b      	ldr	r3, [r7, #4]
10048a54:	225d      	movs	r2, #93	@ 0x5d
10048a56:	2101      	movs	r1, #1
10048a58:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
10048a5a:	2300      	movs	r3, #0
}
10048a5c:	0018      	movs	r0, r3
10048a5e:	46bd      	mov	sp, r7
10048a60:	b004      	add	sp, #16
10048a62:	bd80      	pop	{r7, pc}
10048a64:	fffff7ff 	.word	0xfffff7ff

10048a68 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
10048a68:	b580      	push	{r7, lr}
10048a6a:	b082      	sub	sp, #8
10048a6c:	af00      	add	r7, sp, #0
10048a6e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
10048a70:	687b      	ldr	r3, [r7, #4]
10048a72:	2b00      	cmp	r3, #0
10048a74:	d101      	bne.n	10048a7a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
10048a76:	2301      	movs	r3, #1
10048a78:	e046      	b.n	10048b08 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
10048a7a:	687b      	ldr	r3, [r7, #4]
10048a7c:	2288      	movs	r2, #136	@ 0x88
10048a7e:	589b      	ldr	r3, [r3, r2]
10048a80:	2b00      	cmp	r3, #0
10048a82:	d107      	bne.n	10048a94 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
10048a84:	687b      	ldr	r3, [r7, #4]
10048a86:	2284      	movs	r2, #132	@ 0x84
10048a88:	2100      	movs	r1, #0
10048a8a:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
10048a8c:	687b      	ldr	r3, [r7, #4]
10048a8e:	0018      	movs	r0, r3
10048a90:	f7fa fbd0 	bl	10043234 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
10048a94:	687b      	ldr	r3, [r7, #4]
10048a96:	2288      	movs	r2, #136	@ 0x88
10048a98:	2124      	movs	r1, #36	@ 0x24
10048a9a:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
10048a9c:	687b      	ldr	r3, [r7, #4]
10048a9e:	681b      	ldr	r3, [r3, #0]
10048aa0:	681a      	ldr	r2, [r3, #0]
10048aa2:	687b      	ldr	r3, [r7, #4]
10048aa4:	681b      	ldr	r3, [r3, #0]
10048aa6:	2101      	movs	r1, #1
10048aa8:	438a      	bics	r2, r1
10048aaa:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
10048aac:	687b      	ldr	r3, [r7, #4]
10048aae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
10048ab0:	2b00      	cmp	r3, #0
10048ab2:	d003      	beq.n	10048abc <HAL_UART_Init+0x54>
  {
    UART_AdvFeatureConfig(huart);
10048ab4:	687b      	ldr	r3, [r7, #4]
10048ab6:	0018      	movs	r0, r3
10048ab8:	f000 f992 	bl	10048de0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
10048abc:	687b      	ldr	r3, [r7, #4]
10048abe:	0018      	movs	r0, r3
10048ac0:	f000 f828 	bl	10048b14 <UART_SetConfig>
10048ac4:	0003      	movs	r3, r0
10048ac6:	2b01      	cmp	r3, #1
10048ac8:	d101      	bne.n	10048ace <HAL_UART_Init+0x66>
  {
    return HAL_ERROR;
10048aca:	2301      	movs	r3, #1
10048acc:	e01c      	b.n	10048b08 <HAL_UART_Init+0xa0>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
10048ace:	687b      	ldr	r3, [r7, #4]
10048ad0:	681b      	ldr	r3, [r3, #0]
10048ad2:	685a      	ldr	r2, [r3, #4]
10048ad4:	687b      	ldr	r3, [r7, #4]
10048ad6:	681b      	ldr	r3, [r3, #0]
10048ad8:	490d      	ldr	r1, [pc, #52]	@ (10048b10 <HAL_UART_Init+0xa8>)
10048ada:	400a      	ands	r2, r1
10048adc:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
10048ade:	687b      	ldr	r3, [r7, #4]
10048ae0:	681b      	ldr	r3, [r3, #0]
10048ae2:	689a      	ldr	r2, [r3, #8]
10048ae4:	687b      	ldr	r3, [r7, #4]
10048ae6:	681b      	ldr	r3, [r3, #0]
10048ae8:	212a      	movs	r1, #42	@ 0x2a
10048aea:	438a      	bics	r2, r1
10048aec:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
10048aee:	687b      	ldr	r3, [r7, #4]
10048af0:	681b      	ldr	r3, [r3, #0]
10048af2:	681a      	ldr	r2, [r3, #0]
10048af4:	687b      	ldr	r3, [r7, #4]
10048af6:	681b      	ldr	r3, [r3, #0]
10048af8:	2101      	movs	r1, #1
10048afa:	430a      	orrs	r2, r1
10048afc:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
10048afe:	687b      	ldr	r3, [r7, #4]
10048b00:	0018      	movs	r0, r3
10048b02:	f000 fa21 	bl	10048f48 <UART_CheckIdleState>
10048b06:	0003      	movs	r3, r0
}
10048b08:	0018      	movs	r0, r3
10048b0a:	46bd      	mov	sp, r7
10048b0c:	b002      	add	sp, #8
10048b0e:	bd80      	pop	{r7, pc}
10048b10:	ffffb7ff 	.word	0xffffb7ff

10048b14 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
10048b14:	b5b0      	push	{r4, r5, r7, lr}
10048b16:	b090      	sub	sp, #64	@ 0x40
10048b18:	af00      	add	r7, sp, #0
10048b1a:	6278      	str	r0, [r7, #36]	@ 0x24
  uint32_t tmpreg;
  uint16_t brrtemp;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
10048b1c:	231b      	movs	r3, #27
10048b1e:	2220      	movs	r2, #32
10048b20:	189b      	adds	r3, r3, r2
10048b22:	19db      	adds	r3, r3, r7
10048b24:	2200      	movs	r2, #0
10048b26:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
10048b28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10048b2a:	689a      	ldr	r2, [r3, #8]
10048b2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10048b2e:	691b      	ldr	r3, [r3, #16]
10048b30:	431a      	orrs	r2, r3
10048b32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10048b34:	695b      	ldr	r3, [r3, #20]
10048b36:	431a      	orrs	r2, r3
10048b38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10048b3a:	69db      	ldr	r3, [r3, #28]
10048b3c:	4313      	orrs	r3, r2
10048b3e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
10048b40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10048b42:	681b      	ldr	r3, [r3, #0]
10048b44:	681b      	ldr	r3, [r3, #0]
10048b46:	4aa0      	ldr	r2, [pc, #640]	@ (10048dc8 <UART_SetConfig+0x2b4>)
10048b48:	4013      	ands	r3, r2
10048b4a:	0019      	movs	r1, r3
10048b4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10048b4e:	681a      	ldr	r2, [r3, #0]
10048b50:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
10048b52:	430b      	orrs	r3, r1
10048b54:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
10048b56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10048b58:	681b      	ldr	r3, [r3, #0]
10048b5a:	685b      	ldr	r3, [r3, #4]
10048b5c:	4a9b      	ldr	r2, [pc, #620]	@ (10048dcc <UART_SetConfig+0x2b8>)
10048b5e:	4013      	ands	r3, r2
10048b60:	0018      	movs	r0, r3
10048b62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10048b64:	68d9      	ldr	r1, [r3, #12]
10048b66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10048b68:	681a      	ldr	r2, [r3, #0]
10048b6a:	0003      	movs	r3, r0
10048b6c:	430b      	orrs	r3, r1
10048b6e:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
10048b70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10048b72:	699b      	ldr	r3, [r3, #24]
10048b74:	63fb      	str	r3, [r7, #60]	@ 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
10048b76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10048b78:	681b      	ldr	r3, [r3, #0]
10048b7a:	4a95      	ldr	r2, [pc, #596]	@ (10048dd0 <UART_SetConfig+0x2bc>)
10048b7c:	4293      	cmp	r3, r2
10048b7e:	d004      	beq.n	10048b8a <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
10048b80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10048b82:	6a1b      	ldr	r3, [r3, #32]
10048b84:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
10048b86:	4313      	orrs	r3, r2
10048b88:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
10048b8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10048b8c:	681b      	ldr	r3, [r3, #0]
10048b8e:	689b      	ldr	r3, [r3, #8]
10048b90:	4a90      	ldr	r2, [pc, #576]	@ (10048dd4 <UART_SetConfig+0x2c0>)
10048b92:	4013      	ands	r3, r2
10048b94:	0019      	movs	r1, r3
10048b96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10048b98:	681a      	ldr	r2, [r3, #0]
10048b9a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
10048b9c:	430b      	orrs	r3, r1
10048b9e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
10048ba0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10048ba2:	681b      	ldr	r3, [r3, #0]
10048ba4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
10048ba6:	220f      	movs	r2, #15
10048ba8:	4393      	bics	r3, r2
10048baa:	0018      	movs	r0, r3
10048bac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10048bae:	6a59      	ldr	r1, [r3, #36]	@ 0x24
10048bb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10048bb2:	681a      	ldr	r2, [r3, #0]
10048bb4:	0003      	movs	r3, r0
10048bb6:	430b      	orrs	r3, r1
10048bb8:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
10048bba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10048bbc:	681b      	ldr	r3, [r3, #0]
10048bbe:	4a84      	ldr	r2, [pc, #528]	@ (10048dd0 <UART_SetConfig+0x2bc>)
10048bc0:	4293      	cmp	r3, r2
10048bc2:	d16a      	bne.n	10048c9a <UART_SetConfig+0x186>
  {
    /* Retrieve frequency clock */
#if defined(RCC_CFGR_LPUCLKSEL)
    pclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_LPUART1);
#else
    pclk = UART_PERIPHCLK;
10048bc4:	4b84      	ldr	r3, [pc, #528]	@ (10048dd8 <UART_SetConfig+0x2c4>)
10048bc6:	637b      	str	r3, [r7, #52]	@ 0x34
#endif /* RCC_CFGR_LPUCLKSEL */

    /* If proper clock source reported */
    if (pclk != 0U)
10048bc8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
10048bca:	2b00      	cmp	r3, #0
10048bcc:	d100      	bne.n	10048bd0 <UART_SetConfig+0xbc>
10048bce:	e0e3      	b.n	10048d98 <UART_SetConfig+0x284>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
10048bd0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10048bd2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
10048bd4:	4b81      	ldr	r3, [pc, #516]	@ (10048ddc <UART_SetConfig+0x2c8>)
10048bd6:	0052      	lsls	r2, r2, #1
10048bd8:	5ad3      	ldrh	r3, [r2, r3]
10048bda:	0019      	movs	r1, r3
10048bdc:	6b78      	ldr	r0, [r7, #52]	@ 0x34
10048bde:	f7f7 faad 	bl	1004013c <__udivsi3>
10048be2:	0003      	movs	r3, r0
10048be4:	62bb      	str	r3, [r7, #40]	@ 0x28

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
10048be6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10048be8:	685a      	ldr	r2, [r3, #4]
10048bea:	0013      	movs	r3, r2
10048bec:	005b      	lsls	r3, r3, #1
10048bee:	189b      	adds	r3, r3, r2
10048bf0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
10048bf2:	429a      	cmp	r2, r3
10048bf4:	d305      	bcc.n	10048c02 <UART_SetConfig+0xee>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
10048bf6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10048bf8:	685b      	ldr	r3, [r3, #4]
10048bfa:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
10048bfc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
10048bfe:	429a      	cmp	r2, r3
10048c00:	d906      	bls.n	10048c10 <UART_SetConfig+0xfc>
      {
        ret = HAL_ERROR;
10048c02:	231b      	movs	r3, #27
10048c04:	2220      	movs	r2, #32
10048c06:	189b      	adds	r3, r3, r2
10048c08:	19db      	adds	r3, r3, r7
10048c0a:	2201      	movs	r2, #1
10048c0c:	701a      	strb	r2, [r3, #0]
10048c0e:	e0c3      	b.n	10048d98 <UART_SetConfig+0x284>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
10048c10:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
10048c12:	61bb      	str	r3, [r7, #24]
10048c14:	2300      	movs	r3, #0
10048c16:	61fb      	str	r3, [r7, #28]
10048c18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10048c1a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
10048c1c:	4b6f      	ldr	r3, [pc, #444]	@ (10048ddc <UART_SetConfig+0x2c8>)
10048c1e:	0052      	lsls	r2, r2, #1
10048c20:	5ad3      	ldrh	r3, [r2, r3]
10048c22:	613b      	str	r3, [r7, #16]
10048c24:	2300      	movs	r3, #0
10048c26:	617b      	str	r3, [r7, #20]
10048c28:	693a      	ldr	r2, [r7, #16]
10048c2a:	697b      	ldr	r3, [r7, #20]
10048c2c:	69b8      	ldr	r0, [r7, #24]
10048c2e:	69f9      	ldr	r1, [r7, #28]
10048c30:	f7f7 fc38 	bl	100404a4 <__aeabi_uldivmod>
10048c34:	0002      	movs	r2, r0
10048c36:	000b      	movs	r3, r1
10048c38:	0e11      	lsrs	r1, r2, #24
10048c3a:	021d      	lsls	r5, r3, #8
10048c3c:	430d      	orrs	r5, r1
10048c3e:	0214      	lsls	r4, r2, #8
10048c40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10048c42:	685b      	ldr	r3, [r3, #4]
10048c44:	085b      	lsrs	r3, r3, #1
10048c46:	60bb      	str	r3, [r7, #8]
10048c48:	2300      	movs	r3, #0
10048c4a:	60fb      	str	r3, [r7, #12]
10048c4c:	68b8      	ldr	r0, [r7, #8]
10048c4e:	68f9      	ldr	r1, [r7, #12]
10048c50:	1900      	adds	r0, r0, r4
10048c52:	4169      	adcs	r1, r5
10048c54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10048c56:	685b      	ldr	r3, [r3, #4]
10048c58:	603b      	str	r3, [r7, #0]
10048c5a:	2300      	movs	r3, #0
10048c5c:	607b      	str	r3, [r7, #4]
10048c5e:	683a      	ldr	r2, [r7, #0]
10048c60:	687b      	ldr	r3, [r7, #4]
10048c62:	f7f7 fc1f 	bl	100404a4 <__aeabi_uldivmod>
10048c66:	0002      	movs	r2, r0
10048c68:	000b      	movs	r3, r1
10048c6a:	0013      	movs	r3, r2
10048c6c:	633b      	str	r3, [r7, #48]	@ 0x30
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
10048c6e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
10048c70:	23c0      	movs	r3, #192	@ 0xc0
10048c72:	009b      	lsls	r3, r3, #2
10048c74:	429a      	cmp	r2, r3
10048c76:	d309      	bcc.n	10048c8c <UART_SetConfig+0x178>
10048c78:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
10048c7a:	2380      	movs	r3, #128	@ 0x80
10048c7c:	035b      	lsls	r3, r3, #13
10048c7e:	429a      	cmp	r2, r3
10048c80:	d204      	bcs.n	10048c8c <UART_SetConfig+0x178>
        {
          huart->Instance->BRR = usartdiv;
10048c82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10048c84:	681b      	ldr	r3, [r3, #0]
10048c86:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
10048c88:	60da      	str	r2, [r3, #12]
10048c8a:	e085      	b.n	10048d98 <UART_SetConfig+0x284>
        }
        else
        {
          ret = HAL_ERROR;
10048c8c:	231b      	movs	r3, #27
10048c8e:	2220      	movs	r2, #32
10048c90:	189b      	adds	r3, r3, r2
10048c92:	19db      	adds	r3, r3, r7
10048c94:	2201      	movs	r2, #1
10048c96:	701a      	strb	r2, [r3, #0]
10048c98:	e07e      	b.n	10048d98 <UART_SetConfig+0x284>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
10048c9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10048c9c:	69da      	ldr	r2, [r3, #28]
10048c9e:	2380      	movs	r3, #128	@ 0x80
10048ca0:	021b      	lsls	r3, r3, #8
10048ca2:	429a      	cmp	r2, r3
10048ca4:	d148      	bne.n	10048d38 <UART_SetConfig+0x224>
  {
    pclk = UART_PERIPHCLK;
10048ca6:	4b4c      	ldr	r3, [pc, #304]	@ (10048dd8 <UART_SetConfig+0x2c4>)
10048ca8:	637b      	str	r3, [r7, #52]	@ 0x34

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
10048caa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
10048cac:	2b00      	cmp	r3, #0
10048cae:	d100      	bne.n	10048cb2 <UART_SetConfig+0x19e>
10048cb0:	e072      	b.n	10048d98 <UART_SetConfig+0x284>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
10048cb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10048cb4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
10048cb6:	4b49      	ldr	r3, [pc, #292]	@ (10048ddc <UART_SetConfig+0x2c8>)
10048cb8:	0052      	lsls	r2, r2, #1
10048cba:	5ad3      	ldrh	r3, [r2, r3]
10048cbc:	0019      	movs	r1, r3
10048cbe:	6b78      	ldr	r0, [r7, #52]	@ 0x34
10048cc0:	f7f7 fa3c 	bl	1004013c <__udivsi3>
10048cc4:	0003      	movs	r3, r0
10048cc6:	005a      	lsls	r2, r3, #1
10048cc8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10048cca:	685b      	ldr	r3, [r3, #4]
10048ccc:	085b      	lsrs	r3, r3, #1
10048cce:	18d2      	adds	r2, r2, r3
10048cd0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10048cd2:	685b      	ldr	r3, [r3, #4]
10048cd4:	0019      	movs	r1, r3
10048cd6:	0010      	movs	r0, r2
10048cd8:	f7f7 fa30 	bl	1004013c <__udivsi3>
10048cdc:	0003      	movs	r3, r0
10048cde:	633b      	str	r3, [r7, #48]	@ 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
10048ce0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
10048ce2:	2b0f      	cmp	r3, #15
10048ce4:	d921      	bls.n	10048d2a <UART_SetConfig+0x216>
10048ce6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
10048ce8:	2380      	movs	r3, #128	@ 0x80
10048cea:	025b      	lsls	r3, r3, #9
10048cec:	429a      	cmp	r2, r3
10048cee:	d21c      	bcs.n	10048d2a <UART_SetConfig+0x216>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
10048cf0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
10048cf2:	b29a      	uxth	r2, r3
10048cf4:	200e      	movs	r0, #14
10048cf6:	2420      	movs	r4, #32
10048cf8:	1903      	adds	r3, r0, r4
10048cfa:	19db      	adds	r3, r3, r7
10048cfc:	210f      	movs	r1, #15
10048cfe:	438a      	bics	r2, r1
10048d00:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
10048d02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
10048d04:	085b      	lsrs	r3, r3, #1
10048d06:	b29b      	uxth	r3, r3
10048d08:	2207      	movs	r2, #7
10048d0a:	4013      	ands	r3, r2
10048d0c:	b299      	uxth	r1, r3
10048d0e:	1903      	adds	r3, r0, r4
10048d10:	19db      	adds	r3, r3, r7
10048d12:	1902      	adds	r2, r0, r4
10048d14:	19d2      	adds	r2, r2, r7
10048d16:	8812      	ldrh	r2, [r2, #0]
10048d18:	430a      	orrs	r2, r1
10048d1a:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
10048d1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10048d1e:	681b      	ldr	r3, [r3, #0]
10048d20:	1902      	adds	r2, r0, r4
10048d22:	19d2      	adds	r2, r2, r7
10048d24:	8812      	ldrh	r2, [r2, #0]
10048d26:	60da      	str	r2, [r3, #12]
10048d28:	e036      	b.n	10048d98 <UART_SetConfig+0x284>
      }
      else
      {
        ret = HAL_ERROR;
10048d2a:	231b      	movs	r3, #27
10048d2c:	2220      	movs	r2, #32
10048d2e:	189b      	adds	r3, r3, r2
10048d30:	19db      	adds	r3, r3, r7
10048d32:	2201      	movs	r2, #1
10048d34:	701a      	strb	r2, [r3, #0]
10048d36:	e02f      	b.n	10048d98 <UART_SetConfig+0x284>
      }
    }
  }
  else
  {
    pclk = UART_PERIPHCLK;
10048d38:	4b27      	ldr	r3, [pc, #156]	@ (10048dd8 <UART_SetConfig+0x2c4>)
10048d3a:	637b      	str	r3, [r7, #52]	@ 0x34

    if (pclk != 0U)
10048d3c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
10048d3e:	2b00      	cmp	r3, #0
10048d40:	d02a      	beq.n	10048d98 <UART_SetConfig+0x284>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
10048d42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10048d44:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
10048d46:	4b25      	ldr	r3, [pc, #148]	@ (10048ddc <UART_SetConfig+0x2c8>)
10048d48:	0052      	lsls	r2, r2, #1
10048d4a:	5ad3      	ldrh	r3, [r2, r3]
10048d4c:	0019      	movs	r1, r3
10048d4e:	6b78      	ldr	r0, [r7, #52]	@ 0x34
10048d50:	f7f7 f9f4 	bl	1004013c <__udivsi3>
10048d54:	0003      	movs	r3, r0
10048d56:	001a      	movs	r2, r3
10048d58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10048d5a:	685b      	ldr	r3, [r3, #4]
10048d5c:	085b      	lsrs	r3, r3, #1
10048d5e:	18d2      	adds	r2, r2, r3
10048d60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10048d62:	685b      	ldr	r3, [r3, #4]
10048d64:	0019      	movs	r1, r3
10048d66:	0010      	movs	r0, r2
10048d68:	f7f7 f9e8 	bl	1004013c <__udivsi3>
10048d6c:	0003      	movs	r3, r0
10048d6e:	633b      	str	r3, [r7, #48]	@ 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
10048d70:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
10048d72:	2b0f      	cmp	r3, #15
10048d74:	d90a      	bls.n	10048d8c <UART_SetConfig+0x278>
10048d76:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
10048d78:	2380      	movs	r3, #128	@ 0x80
10048d7a:	025b      	lsls	r3, r3, #9
10048d7c:	429a      	cmp	r2, r3
10048d7e:	d205      	bcs.n	10048d8c <UART_SetConfig+0x278>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
10048d80:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
10048d82:	b29a      	uxth	r2, r3
10048d84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10048d86:	681b      	ldr	r3, [r3, #0]
10048d88:	60da      	str	r2, [r3, #12]
10048d8a:	e005      	b.n	10048d98 <UART_SetConfig+0x284>
      }
      else
      {
        ret = HAL_ERROR;
10048d8c:	231b      	movs	r3, #27
10048d8e:	2220      	movs	r2, #32
10048d90:	189b      	adds	r3, r3, r2
10048d92:	19db      	adds	r3, r3, r7
10048d94:	2201      	movs	r2, #1
10048d96:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
10048d98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10048d9a:	226a      	movs	r2, #106	@ 0x6a
10048d9c:	2101      	movs	r1, #1
10048d9e:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
10048da0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10048da2:	2268      	movs	r2, #104	@ 0x68
10048da4:	2101      	movs	r1, #1
10048da6:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
10048da8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10048daa:	2200      	movs	r2, #0
10048dac:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
10048dae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10048db0:	2200      	movs	r2, #0
10048db2:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
10048db4:	231b      	movs	r3, #27
10048db6:	2220      	movs	r2, #32
10048db8:	189b      	adds	r3, r3, r2
10048dba:	19db      	adds	r3, r3, r7
10048dbc:	781b      	ldrb	r3, [r3, #0]
}
10048dbe:	0018      	movs	r0, r3
10048dc0:	46bd      	mov	sp, r7
10048dc2:	b010      	add	sp, #64	@ 0x40
10048dc4:	bdb0      	pop	{r4, r5, r7, pc}
10048dc6:	46c0      	nop			@ (mov r8, r8)
10048dc8:	cfff69f3 	.word	0xcfff69f3
10048dcc:	ffffcfff 	.word	0xffffcfff
10048dd0:	41005000 	.word	0x41005000
10048dd4:	11fff4ff 	.word	0x11fff4ff
10048dd8:	00f42400 	.word	0x00f42400
10048ddc:	1004bf18 	.word	0x1004bf18

10048de0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
10048de0:	b580      	push	{r7, lr}
10048de2:	b082      	sub	sp, #8
10048de4:	af00      	add	r7, sp, #0
10048de6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
10048de8:	687b      	ldr	r3, [r7, #4]
10048dea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
10048dec:	2208      	movs	r2, #8
10048dee:	4013      	ands	r3, r2
10048df0:	d00b      	beq.n	10048e0a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
10048df2:	687b      	ldr	r3, [r7, #4]
10048df4:	681b      	ldr	r3, [r3, #0]
10048df6:	685b      	ldr	r3, [r3, #4]
10048df8:	4a4a      	ldr	r2, [pc, #296]	@ (10048f24 <UART_AdvFeatureConfig+0x144>)
10048dfa:	4013      	ands	r3, r2
10048dfc:	0019      	movs	r1, r3
10048dfe:	687b      	ldr	r3, [r7, #4]
10048e00:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
10048e02:	687b      	ldr	r3, [r7, #4]
10048e04:	681b      	ldr	r3, [r3, #0]
10048e06:	430a      	orrs	r2, r1
10048e08:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
10048e0a:	687b      	ldr	r3, [r7, #4]
10048e0c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
10048e0e:	2201      	movs	r2, #1
10048e10:	4013      	ands	r3, r2
10048e12:	d00b      	beq.n	10048e2c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
10048e14:	687b      	ldr	r3, [r7, #4]
10048e16:	681b      	ldr	r3, [r3, #0]
10048e18:	685b      	ldr	r3, [r3, #4]
10048e1a:	4a43      	ldr	r2, [pc, #268]	@ (10048f28 <UART_AdvFeatureConfig+0x148>)
10048e1c:	4013      	ands	r3, r2
10048e1e:	0019      	movs	r1, r3
10048e20:	687b      	ldr	r3, [r7, #4]
10048e22:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
10048e24:	687b      	ldr	r3, [r7, #4]
10048e26:	681b      	ldr	r3, [r3, #0]
10048e28:	430a      	orrs	r2, r1
10048e2a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
10048e2c:	687b      	ldr	r3, [r7, #4]
10048e2e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
10048e30:	2202      	movs	r2, #2
10048e32:	4013      	ands	r3, r2
10048e34:	d00b      	beq.n	10048e4e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
10048e36:	687b      	ldr	r3, [r7, #4]
10048e38:	681b      	ldr	r3, [r3, #0]
10048e3a:	685b      	ldr	r3, [r3, #4]
10048e3c:	4a3b      	ldr	r2, [pc, #236]	@ (10048f2c <UART_AdvFeatureConfig+0x14c>)
10048e3e:	4013      	ands	r3, r2
10048e40:	0019      	movs	r1, r3
10048e42:	687b      	ldr	r3, [r7, #4]
10048e44:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
10048e46:	687b      	ldr	r3, [r7, #4]
10048e48:	681b      	ldr	r3, [r3, #0]
10048e4a:	430a      	orrs	r2, r1
10048e4c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
10048e4e:	687b      	ldr	r3, [r7, #4]
10048e50:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
10048e52:	2204      	movs	r2, #4
10048e54:	4013      	ands	r3, r2
10048e56:	d00b      	beq.n	10048e70 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
10048e58:	687b      	ldr	r3, [r7, #4]
10048e5a:	681b      	ldr	r3, [r3, #0]
10048e5c:	685b      	ldr	r3, [r3, #4]
10048e5e:	4a34      	ldr	r2, [pc, #208]	@ (10048f30 <UART_AdvFeatureConfig+0x150>)
10048e60:	4013      	ands	r3, r2
10048e62:	0019      	movs	r1, r3
10048e64:	687b      	ldr	r3, [r7, #4]
10048e66:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
10048e68:	687b      	ldr	r3, [r7, #4]
10048e6a:	681b      	ldr	r3, [r3, #0]
10048e6c:	430a      	orrs	r2, r1
10048e6e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
10048e70:	687b      	ldr	r3, [r7, #4]
10048e72:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
10048e74:	2210      	movs	r2, #16
10048e76:	4013      	ands	r3, r2
10048e78:	d00b      	beq.n	10048e92 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
10048e7a:	687b      	ldr	r3, [r7, #4]
10048e7c:	681b      	ldr	r3, [r3, #0]
10048e7e:	689b      	ldr	r3, [r3, #8]
10048e80:	4a2c      	ldr	r2, [pc, #176]	@ (10048f34 <UART_AdvFeatureConfig+0x154>)
10048e82:	4013      	ands	r3, r2
10048e84:	0019      	movs	r1, r3
10048e86:	687b      	ldr	r3, [r7, #4]
10048e88:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
10048e8a:	687b      	ldr	r3, [r7, #4]
10048e8c:	681b      	ldr	r3, [r3, #0]
10048e8e:	430a      	orrs	r2, r1
10048e90:	609a      	str	r2, [r3, #8]
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
10048e92:	687b      	ldr	r3, [r7, #4]
10048e94:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
10048e96:	2220      	movs	r2, #32
10048e98:	4013      	ands	r3, r2
10048e9a:	d00b      	beq.n	10048eb4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
10048e9c:	687b      	ldr	r3, [r7, #4]
10048e9e:	681b      	ldr	r3, [r3, #0]
10048ea0:	689b      	ldr	r3, [r3, #8]
10048ea2:	4a25      	ldr	r2, [pc, #148]	@ (10048f38 <UART_AdvFeatureConfig+0x158>)
10048ea4:	4013      	ands	r3, r2
10048ea6:	0019      	movs	r1, r3
10048ea8:	687b      	ldr	r3, [r7, #4]
10048eaa:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
10048eac:	687b      	ldr	r3, [r7, #4]
10048eae:	681b      	ldr	r3, [r3, #0]
10048eb0:	430a      	orrs	r2, r1
10048eb2:	609a      	str	r2, [r3, #8]
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
10048eb4:	687b      	ldr	r3, [r7, #4]
10048eb6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
10048eb8:	2240      	movs	r2, #64	@ 0x40
10048eba:	4013      	ands	r3, r2
10048ebc:	d01d      	beq.n	10048efa <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
10048ebe:	687b      	ldr	r3, [r7, #4]
10048ec0:	681b      	ldr	r3, [r3, #0]
10048ec2:	685b      	ldr	r3, [r3, #4]
10048ec4:	4a1d      	ldr	r2, [pc, #116]	@ (10048f3c <UART_AdvFeatureConfig+0x15c>)
10048ec6:	4013      	ands	r3, r2
10048ec8:	0019      	movs	r1, r3
10048eca:	687b      	ldr	r3, [r7, #4]
10048ecc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
10048ece:	687b      	ldr	r3, [r7, #4]
10048ed0:	681b      	ldr	r3, [r3, #0]
10048ed2:	430a      	orrs	r2, r1
10048ed4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
10048ed6:	687b      	ldr	r3, [r7, #4]
10048ed8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
10048eda:	2380      	movs	r3, #128	@ 0x80
10048edc:	035b      	lsls	r3, r3, #13
10048ede:	429a      	cmp	r2, r3
10048ee0:	d10b      	bne.n	10048efa <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
10048ee2:	687b      	ldr	r3, [r7, #4]
10048ee4:	681b      	ldr	r3, [r3, #0]
10048ee6:	685b      	ldr	r3, [r3, #4]
10048ee8:	4a15      	ldr	r2, [pc, #84]	@ (10048f40 <UART_AdvFeatureConfig+0x160>)
10048eea:	4013      	ands	r3, r2
10048eec:	0019      	movs	r1, r3
10048eee:	687b      	ldr	r3, [r7, #4]
10048ef0:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
10048ef2:	687b      	ldr	r3, [r7, #4]
10048ef4:	681b      	ldr	r3, [r3, #0]
10048ef6:	430a      	orrs	r2, r1
10048ef8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
10048efa:	687b      	ldr	r3, [r7, #4]
10048efc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
10048efe:	2280      	movs	r2, #128	@ 0x80
10048f00:	4013      	ands	r3, r2
10048f02:	d00b      	beq.n	10048f1c <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
10048f04:	687b      	ldr	r3, [r7, #4]
10048f06:	681b      	ldr	r3, [r3, #0]
10048f08:	685b      	ldr	r3, [r3, #4]
10048f0a:	4a0e      	ldr	r2, [pc, #56]	@ (10048f44 <UART_AdvFeatureConfig+0x164>)
10048f0c:	4013      	ands	r3, r2
10048f0e:	0019      	movs	r1, r3
10048f10:	687b      	ldr	r3, [r7, #4]
10048f12:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
10048f14:	687b      	ldr	r3, [r7, #4]
10048f16:	681b      	ldr	r3, [r3, #0]
10048f18:	430a      	orrs	r2, r1
10048f1a:	605a      	str	r2, [r3, #4]
  }
}
10048f1c:	46c0      	nop			@ (mov r8, r8)
10048f1e:	46bd      	mov	sp, r7
10048f20:	b002      	add	sp, #8
10048f22:	bd80      	pop	{r7, pc}
10048f24:	ffff7fff 	.word	0xffff7fff
10048f28:	fffdffff 	.word	0xfffdffff
10048f2c:	fffeffff 	.word	0xfffeffff
10048f30:	fffbffff 	.word	0xfffbffff
10048f34:	ffffefff 	.word	0xffffefff
10048f38:	ffffdfff 	.word	0xffffdfff
10048f3c:	ffefffff 	.word	0xffefffff
10048f40:	ff9fffff 	.word	0xff9fffff
10048f44:	fff7ffff 	.word	0xfff7ffff

10048f48 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
10048f48:	b580      	push	{r7, lr}
10048f4a:	b092      	sub	sp, #72	@ 0x48
10048f4c:	af02      	add	r7, sp, #8
10048f4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
10048f50:	687b      	ldr	r3, [r7, #4]
10048f52:	2290      	movs	r2, #144	@ 0x90
10048f54:	2100      	movs	r1, #0
10048f56:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
10048f58:	f7fb fca4 	bl	100448a4 <HAL_GetTick>
10048f5c:	0003      	movs	r3, r0
10048f5e:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
10048f60:	687b      	ldr	r3, [r7, #4]
10048f62:	681b      	ldr	r3, [r3, #0]
10048f64:	681b      	ldr	r3, [r3, #0]
10048f66:	2208      	movs	r2, #8
10048f68:	4013      	ands	r3, r2
10048f6a:	2b08      	cmp	r3, #8
10048f6c:	d12d      	bne.n	10048fca <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
10048f6e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
10048f70:	2280      	movs	r2, #128	@ 0x80
10048f72:	0391      	lsls	r1, r2, #14
10048f74:	6878      	ldr	r0, [r7, #4]
10048f76:	4a47      	ldr	r2, [pc, #284]	@ (10049094 <UART_CheckIdleState+0x14c>)
10048f78:	9200      	str	r2, [sp, #0]
10048f7a:	2200      	movs	r2, #0
10048f7c:	f000 f88e 	bl	1004909c <UART_WaitOnFlagUntilTimeout>
10048f80:	1e03      	subs	r3, r0, #0
10048f82:	d022      	beq.n	10048fca <UART_CheckIdleState+0x82>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
10048f84:	f3ef 8310 	mrs	r3, PRIMASK
10048f88:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
10048f8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
10048f8c:	63bb      	str	r3, [r7, #56]	@ 0x38
10048f8e:	2301      	movs	r3, #1
10048f90:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
10048f92:	6abb      	ldr	r3, [r7, #40]	@ 0x28
10048f94:	f383 8810 	msr	PRIMASK, r3
}
10048f98:	46c0      	nop			@ (mov r8, r8)
10048f9a:	687b      	ldr	r3, [r7, #4]
10048f9c:	681b      	ldr	r3, [r3, #0]
10048f9e:	681a      	ldr	r2, [r3, #0]
10048fa0:	687b      	ldr	r3, [r7, #4]
10048fa2:	681b      	ldr	r3, [r3, #0]
10048fa4:	2180      	movs	r1, #128	@ 0x80
10048fa6:	438a      	bics	r2, r1
10048fa8:	601a      	str	r2, [r3, #0]
10048faa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
10048fac:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
10048fae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
10048fb0:	f383 8810 	msr	PRIMASK, r3
}
10048fb4:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
10048fb6:	687b      	ldr	r3, [r7, #4]
10048fb8:	2288      	movs	r2, #136	@ 0x88
10048fba:	2120      	movs	r1, #32
10048fbc:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
10048fbe:	687b      	ldr	r3, [r7, #4]
10048fc0:	2284      	movs	r2, #132	@ 0x84
10048fc2:	2100      	movs	r1, #0
10048fc4:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
10048fc6:	2303      	movs	r3, #3
10048fc8:	e060      	b.n	1004908c <UART_CheckIdleState+0x144>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
10048fca:	687b      	ldr	r3, [r7, #4]
10048fcc:	681b      	ldr	r3, [r3, #0]
10048fce:	681b      	ldr	r3, [r3, #0]
10048fd0:	2204      	movs	r2, #4
10048fd2:	4013      	ands	r3, r2
10048fd4:	2b04      	cmp	r3, #4
10048fd6:	d146      	bne.n	10049066 <UART_CheckIdleState+0x11e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
10048fd8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
10048fda:	2280      	movs	r2, #128	@ 0x80
10048fdc:	03d1      	lsls	r1, r2, #15
10048fde:	6878      	ldr	r0, [r7, #4]
10048fe0:	4a2c      	ldr	r2, [pc, #176]	@ (10049094 <UART_CheckIdleState+0x14c>)
10048fe2:	9200      	str	r2, [sp, #0]
10048fe4:	2200      	movs	r2, #0
10048fe6:	f000 f859 	bl	1004909c <UART_WaitOnFlagUntilTimeout>
10048fea:	1e03      	subs	r3, r0, #0
10048fec:	d03b      	beq.n	10049066 <UART_CheckIdleState+0x11e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
10048fee:	f3ef 8310 	mrs	r3, PRIMASK
10048ff2:	60fb      	str	r3, [r7, #12]
  return(result);
10048ff4:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
10048ff6:	637b      	str	r3, [r7, #52]	@ 0x34
10048ff8:	2301      	movs	r3, #1
10048ffa:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
10048ffc:	693b      	ldr	r3, [r7, #16]
10048ffe:	f383 8810 	msr	PRIMASK, r3
}
10049002:	46c0      	nop			@ (mov r8, r8)
10049004:	687b      	ldr	r3, [r7, #4]
10049006:	681b      	ldr	r3, [r3, #0]
10049008:	681a      	ldr	r2, [r3, #0]
1004900a:	687b      	ldr	r3, [r7, #4]
1004900c:	681b      	ldr	r3, [r3, #0]
1004900e:	4922      	ldr	r1, [pc, #136]	@ (10049098 <UART_CheckIdleState+0x150>)
10049010:	400a      	ands	r2, r1
10049012:	601a      	str	r2, [r3, #0]
10049014:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
10049016:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
10049018:	697b      	ldr	r3, [r7, #20]
1004901a:	f383 8810 	msr	PRIMASK, r3
}
1004901e:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
10049020:	f3ef 8310 	mrs	r3, PRIMASK
10049024:	61bb      	str	r3, [r7, #24]
  return(result);
10049026:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
10049028:	633b      	str	r3, [r7, #48]	@ 0x30
1004902a:	2301      	movs	r3, #1
1004902c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
1004902e:	69fb      	ldr	r3, [r7, #28]
10049030:	f383 8810 	msr	PRIMASK, r3
}
10049034:	46c0      	nop			@ (mov r8, r8)
10049036:	687b      	ldr	r3, [r7, #4]
10049038:	681b      	ldr	r3, [r3, #0]
1004903a:	689a      	ldr	r2, [r3, #8]
1004903c:	687b      	ldr	r3, [r7, #4]
1004903e:	681b      	ldr	r3, [r3, #0]
10049040:	2101      	movs	r1, #1
10049042:	438a      	bics	r2, r1
10049044:	609a      	str	r2, [r3, #8]
10049046:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
10049048:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
1004904a:	6a3b      	ldr	r3, [r7, #32]
1004904c:	f383 8810 	msr	PRIMASK, r3
}
10049050:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
10049052:	687b      	ldr	r3, [r7, #4]
10049054:	228c      	movs	r2, #140	@ 0x8c
10049056:	2120      	movs	r1, #32
10049058:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
1004905a:	687b      	ldr	r3, [r7, #4]
1004905c:	2284      	movs	r2, #132	@ 0x84
1004905e:	2100      	movs	r1, #0
10049060:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
10049062:	2303      	movs	r3, #3
10049064:	e012      	b.n	1004908c <UART_CheckIdleState+0x144>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
10049066:	687b      	ldr	r3, [r7, #4]
10049068:	2288      	movs	r2, #136	@ 0x88
1004906a:	2120      	movs	r1, #32
1004906c:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
1004906e:	687b      	ldr	r3, [r7, #4]
10049070:	228c      	movs	r2, #140	@ 0x8c
10049072:	2120      	movs	r1, #32
10049074:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
10049076:	687b      	ldr	r3, [r7, #4]
10049078:	2200      	movs	r2, #0
1004907a:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
1004907c:	687b      	ldr	r3, [r7, #4]
1004907e:	2200      	movs	r2, #0
10049080:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
10049082:	687b      	ldr	r3, [r7, #4]
10049084:	2284      	movs	r2, #132	@ 0x84
10049086:	2100      	movs	r1, #0
10049088:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
1004908a:	2300      	movs	r3, #0
}
1004908c:	0018      	movs	r0, r3
1004908e:	46bd      	mov	sp, r7
10049090:	b010      	add	sp, #64	@ 0x40
10049092:	bd80      	pop	{r7, pc}
10049094:	01ffffff 	.word	0x01ffffff
10049098:	fffffedf 	.word	0xfffffedf

1004909c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
1004909c:	b580      	push	{r7, lr}
1004909e:	b084      	sub	sp, #16
100490a0:	af00      	add	r7, sp, #0
100490a2:	60f8      	str	r0, [r7, #12]
100490a4:	60b9      	str	r1, [r7, #8]
100490a6:	603b      	str	r3, [r7, #0]
100490a8:	1dfb      	adds	r3, r7, #7
100490aa:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
100490ac:	e051      	b.n	10049152 <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
100490ae:	69bb      	ldr	r3, [r7, #24]
100490b0:	3301      	adds	r3, #1
100490b2:	d04e      	beq.n	10049152 <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
100490b4:	f7fb fbf6 	bl	100448a4 <HAL_GetTick>
100490b8:	0002      	movs	r2, r0
100490ba:	683b      	ldr	r3, [r7, #0]
100490bc:	1ad3      	subs	r3, r2, r3
100490be:	69ba      	ldr	r2, [r7, #24]
100490c0:	429a      	cmp	r2, r3
100490c2:	d302      	bcc.n	100490ca <UART_WaitOnFlagUntilTimeout+0x2e>
100490c4:	69bb      	ldr	r3, [r7, #24]
100490c6:	2b00      	cmp	r3, #0
100490c8:	d101      	bne.n	100490ce <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
100490ca:	2303      	movs	r3, #3
100490cc:	e051      	b.n	10049172 <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
100490ce:	68fb      	ldr	r3, [r7, #12]
100490d0:	681b      	ldr	r3, [r3, #0]
100490d2:	681b      	ldr	r3, [r3, #0]
100490d4:	2204      	movs	r2, #4
100490d6:	4013      	ands	r3, r2
100490d8:	d03b      	beq.n	10049152 <UART_WaitOnFlagUntilTimeout+0xb6>
100490da:	68bb      	ldr	r3, [r7, #8]
100490dc:	2b80      	cmp	r3, #128	@ 0x80
100490de:	d038      	beq.n	10049152 <UART_WaitOnFlagUntilTimeout+0xb6>
100490e0:	68bb      	ldr	r3, [r7, #8]
100490e2:	2b40      	cmp	r3, #64	@ 0x40
100490e4:	d035      	beq.n	10049152 <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
100490e6:	68fb      	ldr	r3, [r7, #12]
100490e8:	681b      	ldr	r3, [r3, #0]
100490ea:	69db      	ldr	r3, [r3, #28]
100490ec:	2208      	movs	r2, #8
100490ee:	4013      	ands	r3, r2
100490f0:	2b08      	cmp	r3, #8
100490f2:	d111      	bne.n	10049118 <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
100490f4:	68fb      	ldr	r3, [r7, #12]
100490f6:	681b      	ldr	r3, [r3, #0]
100490f8:	2208      	movs	r2, #8
100490fa:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
100490fc:	68fb      	ldr	r3, [r7, #12]
100490fe:	0018      	movs	r0, r3
10049100:	f000 f83c 	bl	1004917c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
10049104:	68fb      	ldr	r3, [r7, #12]
10049106:	2290      	movs	r2, #144	@ 0x90
10049108:	2108      	movs	r1, #8
1004910a:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
1004910c:	68fb      	ldr	r3, [r7, #12]
1004910e:	2284      	movs	r2, #132	@ 0x84
10049110:	2100      	movs	r1, #0
10049112:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
10049114:	2301      	movs	r3, #1
10049116:	e02c      	b.n	10049172 <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
10049118:	68fb      	ldr	r3, [r7, #12]
1004911a:	681b      	ldr	r3, [r3, #0]
1004911c:	69da      	ldr	r2, [r3, #28]
1004911e:	2380      	movs	r3, #128	@ 0x80
10049120:	011b      	lsls	r3, r3, #4
10049122:	401a      	ands	r2, r3
10049124:	2380      	movs	r3, #128	@ 0x80
10049126:	011b      	lsls	r3, r3, #4
10049128:	429a      	cmp	r2, r3
1004912a:	d112      	bne.n	10049152 <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
1004912c:	68fb      	ldr	r3, [r7, #12]
1004912e:	681b      	ldr	r3, [r3, #0]
10049130:	2280      	movs	r2, #128	@ 0x80
10049132:	0112      	lsls	r2, r2, #4
10049134:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
10049136:	68fb      	ldr	r3, [r7, #12]
10049138:	0018      	movs	r0, r3
1004913a:	f000 f81f 	bl	1004917c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
1004913e:	68fb      	ldr	r3, [r7, #12]
10049140:	2290      	movs	r2, #144	@ 0x90
10049142:	2120      	movs	r1, #32
10049144:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
10049146:	68fb      	ldr	r3, [r7, #12]
10049148:	2284      	movs	r2, #132	@ 0x84
1004914a:	2100      	movs	r1, #0
1004914c:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
1004914e:	2303      	movs	r3, #3
10049150:	e00f      	b.n	10049172 <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
10049152:	68fb      	ldr	r3, [r7, #12]
10049154:	681b      	ldr	r3, [r3, #0]
10049156:	69db      	ldr	r3, [r3, #28]
10049158:	68ba      	ldr	r2, [r7, #8]
1004915a:	4013      	ands	r3, r2
1004915c:	68ba      	ldr	r2, [r7, #8]
1004915e:	1ad3      	subs	r3, r2, r3
10049160:	425a      	negs	r2, r3
10049162:	4153      	adcs	r3, r2
10049164:	b2db      	uxtb	r3, r3
10049166:	001a      	movs	r2, r3
10049168:	1dfb      	adds	r3, r7, #7
1004916a:	781b      	ldrb	r3, [r3, #0]
1004916c:	429a      	cmp	r2, r3
1004916e:	d09e      	beq.n	100490ae <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
10049170:	2300      	movs	r3, #0
}
10049172:	0018      	movs	r0, r3
10049174:	46bd      	mov	sp, r7
10049176:	b004      	add	sp, #16
10049178:	bd80      	pop	{r7, pc}
	...

1004917c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
1004917c:	b580      	push	{r7, lr}
1004917e:	b08e      	sub	sp, #56	@ 0x38
10049180:	af00      	add	r7, sp, #0
10049182:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
10049184:	f3ef 8310 	mrs	r3, PRIMASK
10049188:	617b      	str	r3, [r7, #20]
  return(result);
1004918a:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
1004918c:	637b      	str	r3, [r7, #52]	@ 0x34
1004918e:	2301      	movs	r3, #1
10049190:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
10049192:	69bb      	ldr	r3, [r7, #24]
10049194:	f383 8810 	msr	PRIMASK, r3
}
10049198:	46c0      	nop			@ (mov r8, r8)
1004919a:	687b      	ldr	r3, [r7, #4]
1004919c:	681b      	ldr	r3, [r3, #0]
1004919e:	681a      	ldr	r2, [r3, #0]
100491a0:	687b      	ldr	r3, [r7, #4]
100491a2:	681b      	ldr	r3, [r3, #0]
100491a4:	4926      	ldr	r1, [pc, #152]	@ (10049240 <UART_EndRxTransfer+0xc4>)
100491a6:	400a      	ands	r2, r1
100491a8:	601a      	str	r2, [r3, #0]
100491aa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
100491ac:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
100491ae:	69fb      	ldr	r3, [r7, #28]
100491b0:	f383 8810 	msr	PRIMASK, r3
}
100491b4:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
100491b6:	f3ef 8310 	mrs	r3, PRIMASK
100491ba:	623b      	str	r3, [r7, #32]
  return(result);
100491bc:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
100491be:	633b      	str	r3, [r7, #48]	@ 0x30
100491c0:	2301      	movs	r3, #1
100491c2:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
100491c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
100491c6:	f383 8810 	msr	PRIMASK, r3
}
100491ca:	46c0      	nop			@ (mov r8, r8)
100491cc:	687b      	ldr	r3, [r7, #4]
100491ce:	681b      	ldr	r3, [r3, #0]
100491d0:	689a      	ldr	r2, [r3, #8]
100491d2:	687b      	ldr	r3, [r7, #4]
100491d4:	681b      	ldr	r3, [r3, #0]
100491d6:	491b      	ldr	r1, [pc, #108]	@ (10049244 <UART_EndRxTransfer+0xc8>)
100491d8:	400a      	ands	r2, r1
100491da:	609a      	str	r2, [r3, #8]
100491dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
100491de:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
100491e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
100491e2:	f383 8810 	msr	PRIMASK, r3
}
100491e6:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
100491e8:	687b      	ldr	r3, [r7, #4]
100491ea:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
100491ec:	2b01      	cmp	r3, #1
100491ee:	d118      	bne.n	10049222 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
100491f0:	f3ef 8310 	mrs	r3, PRIMASK
100491f4:	60bb      	str	r3, [r7, #8]
  return(result);
100491f6:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
100491f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
100491fa:	2301      	movs	r3, #1
100491fc:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
100491fe:	68fb      	ldr	r3, [r7, #12]
10049200:	f383 8810 	msr	PRIMASK, r3
}
10049204:	46c0      	nop			@ (mov r8, r8)
10049206:	687b      	ldr	r3, [r7, #4]
10049208:	681b      	ldr	r3, [r3, #0]
1004920a:	681a      	ldr	r2, [r3, #0]
1004920c:	687b      	ldr	r3, [r7, #4]
1004920e:	681b      	ldr	r3, [r3, #0]
10049210:	2110      	movs	r1, #16
10049212:	438a      	bics	r2, r1
10049214:	601a      	str	r2, [r3, #0]
10049216:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
10049218:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
1004921a:	693b      	ldr	r3, [r7, #16]
1004921c:	f383 8810 	msr	PRIMASK, r3
}
10049220:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
10049222:	687b      	ldr	r3, [r7, #4]
10049224:	228c      	movs	r2, #140	@ 0x8c
10049226:	2120      	movs	r1, #32
10049228:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
1004922a:	687b      	ldr	r3, [r7, #4]
1004922c:	2200      	movs	r2, #0
1004922e:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
10049230:	687b      	ldr	r3, [r7, #4]
10049232:	2200      	movs	r2, #0
10049234:	675a      	str	r2, [r3, #116]	@ 0x74
}
10049236:	46c0      	nop			@ (mov r8, r8)
10049238:	46bd      	mov	sp, r7
1004923a:	b00e      	add	sp, #56	@ 0x38
1004923c:	bd80      	pop	{r7, pc}
1004923e:	46c0      	nop			@ (mov r8, r8)
10049240:	fffffedf 	.word	0xfffffedf
10049244:	effffffe 	.word	0xeffffffe

10049248 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
10049248:	b580      	push	{r7, lr}
1004924a:	b084      	sub	sp, #16
1004924c:	af00      	add	r7, sp, #0
1004924e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
10049250:	687b      	ldr	r3, [r7, #4]
10049252:	2284      	movs	r2, #132	@ 0x84
10049254:	5c9b      	ldrb	r3, [r3, r2]
10049256:	2b01      	cmp	r3, #1
10049258:	d101      	bne.n	1004925e <HAL_UARTEx_DisableFifoMode+0x16>
1004925a:	2302      	movs	r3, #2
1004925c:	e027      	b.n	100492ae <HAL_UARTEx_DisableFifoMode+0x66>
1004925e:	687b      	ldr	r3, [r7, #4]
10049260:	2284      	movs	r2, #132	@ 0x84
10049262:	2101      	movs	r1, #1
10049264:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
10049266:	687b      	ldr	r3, [r7, #4]
10049268:	2288      	movs	r2, #136	@ 0x88
1004926a:	2124      	movs	r1, #36	@ 0x24
1004926c:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
1004926e:	687b      	ldr	r3, [r7, #4]
10049270:	681b      	ldr	r3, [r3, #0]
10049272:	681b      	ldr	r3, [r3, #0]
10049274:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
10049276:	687b      	ldr	r3, [r7, #4]
10049278:	681b      	ldr	r3, [r3, #0]
1004927a:	681a      	ldr	r2, [r3, #0]
1004927c:	687b      	ldr	r3, [r7, #4]
1004927e:	681b      	ldr	r3, [r3, #0]
10049280:	2101      	movs	r1, #1
10049282:	438a      	bics	r2, r1
10049284:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
10049286:	68fb      	ldr	r3, [r7, #12]
10049288:	4a0b      	ldr	r2, [pc, #44]	@ (100492b8 <HAL_UARTEx_DisableFifoMode+0x70>)
1004928a:	4013      	ands	r3, r2
1004928c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
1004928e:	687b      	ldr	r3, [r7, #4]
10049290:	2200      	movs	r2, #0
10049292:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
10049294:	687b      	ldr	r3, [r7, #4]
10049296:	681b      	ldr	r3, [r3, #0]
10049298:	68fa      	ldr	r2, [r7, #12]
1004929a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
1004929c:	687b      	ldr	r3, [r7, #4]
1004929e:	2288      	movs	r2, #136	@ 0x88
100492a0:	2120      	movs	r1, #32
100492a2:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
100492a4:	687b      	ldr	r3, [r7, #4]
100492a6:	2284      	movs	r2, #132	@ 0x84
100492a8:	2100      	movs	r1, #0
100492aa:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
100492ac:	2300      	movs	r3, #0
}
100492ae:	0018      	movs	r0, r3
100492b0:	46bd      	mov	sp, r7
100492b2:	b004      	add	sp, #16
100492b4:	bd80      	pop	{r7, pc}
100492b6:	46c0      	nop			@ (mov r8, r8)
100492b8:	dfffffff 	.word	0xdfffffff

100492bc <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
100492bc:	b580      	push	{r7, lr}
100492be:	b084      	sub	sp, #16
100492c0:	af00      	add	r7, sp, #0
100492c2:	6078      	str	r0, [r7, #4]
100492c4:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
100492c6:	687b      	ldr	r3, [r7, #4]
100492c8:	2284      	movs	r2, #132	@ 0x84
100492ca:	5c9b      	ldrb	r3, [r3, r2]
100492cc:	2b01      	cmp	r3, #1
100492ce:	d101      	bne.n	100492d4 <HAL_UARTEx_SetTxFifoThreshold+0x18>
100492d0:	2302      	movs	r3, #2
100492d2:	e02e      	b.n	10049332 <HAL_UARTEx_SetTxFifoThreshold+0x76>
100492d4:	687b      	ldr	r3, [r7, #4]
100492d6:	2284      	movs	r2, #132	@ 0x84
100492d8:	2101      	movs	r1, #1
100492da:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
100492dc:	687b      	ldr	r3, [r7, #4]
100492de:	2288      	movs	r2, #136	@ 0x88
100492e0:	2124      	movs	r1, #36	@ 0x24
100492e2:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
100492e4:	687b      	ldr	r3, [r7, #4]
100492e6:	681b      	ldr	r3, [r3, #0]
100492e8:	681b      	ldr	r3, [r3, #0]
100492ea:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
100492ec:	687b      	ldr	r3, [r7, #4]
100492ee:	681b      	ldr	r3, [r3, #0]
100492f0:	681a      	ldr	r2, [r3, #0]
100492f2:	687b      	ldr	r3, [r7, #4]
100492f4:	681b      	ldr	r3, [r3, #0]
100492f6:	2101      	movs	r1, #1
100492f8:	438a      	bics	r2, r1
100492fa:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
100492fc:	687b      	ldr	r3, [r7, #4]
100492fe:	681b      	ldr	r3, [r3, #0]
10049300:	689b      	ldr	r3, [r3, #8]
10049302:	00db      	lsls	r3, r3, #3
10049304:	08d9      	lsrs	r1, r3, #3
10049306:	687b      	ldr	r3, [r7, #4]
10049308:	681b      	ldr	r3, [r3, #0]
1004930a:	683a      	ldr	r2, [r7, #0]
1004930c:	430a      	orrs	r2, r1
1004930e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
10049310:	687b      	ldr	r3, [r7, #4]
10049312:	0018      	movs	r0, r3
10049314:	f000 f854 	bl	100493c0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
10049318:	687b      	ldr	r3, [r7, #4]
1004931a:	681b      	ldr	r3, [r3, #0]
1004931c:	68fa      	ldr	r2, [r7, #12]
1004931e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
10049320:	687b      	ldr	r3, [r7, #4]
10049322:	2288      	movs	r2, #136	@ 0x88
10049324:	2120      	movs	r1, #32
10049326:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
10049328:	687b      	ldr	r3, [r7, #4]
1004932a:	2284      	movs	r2, #132	@ 0x84
1004932c:	2100      	movs	r1, #0
1004932e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
10049330:	2300      	movs	r3, #0
}
10049332:	0018      	movs	r0, r3
10049334:	46bd      	mov	sp, r7
10049336:	b004      	add	sp, #16
10049338:	bd80      	pop	{r7, pc}
	...

1004933c <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
1004933c:	b580      	push	{r7, lr}
1004933e:	b084      	sub	sp, #16
10049340:	af00      	add	r7, sp, #0
10049342:	6078      	str	r0, [r7, #4]
10049344:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
10049346:	687b      	ldr	r3, [r7, #4]
10049348:	2284      	movs	r2, #132	@ 0x84
1004934a:	5c9b      	ldrb	r3, [r3, r2]
1004934c:	2b01      	cmp	r3, #1
1004934e:	d101      	bne.n	10049354 <HAL_UARTEx_SetRxFifoThreshold+0x18>
10049350:	2302      	movs	r3, #2
10049352:	e02f      	b.n	100493b4 <HAL_UARTEx_SetRxFifoThreshold+0x78>
10049354:	687b      	ldr	r3, [r7, #4]
10049356:	2284      	movs	r2, #132	@ 0x84
10049358:	2101      	movs	r1, #1
1004935a:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
1004935c:	687b      	ldr	r3, [r7, #4]
1004935e:	2288      	movs	r2, #136	@ 0x88
10049360:	2124      	movs	r1, #36	@ 0x24
10049362:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
10049364:	687b      	ldr	r3, [r7, #4]
10049366:	681b      	ldr	r3, [r3, #0]
10049368:	681b      	ldr	r3, [r3, #0]
1004936a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
1004936c:	687b      	ldr	r3, [r7, #4]
1004936e:	681b      	ldr	r3, [r3, #0]
10049370:	681a      	ldr	r2, [r3, #0]
10049372:	687b      	ldr	r3, [r7, #4]
10049374:	681b      	ldr	r3, [r3, #0]
10049376:	2101      	movs	r1, #1
10049378:	438a      	bics	r2, r1
1004937a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
1004937c:	687b      	ldr	r3, [r7, #4]
1004937e:	681b      	ldr	r3, [r3, #0]
10049380:	689b      	ldr	r3, [r3, #8]
10049382:	4a0e      	ldr	r2, [pc, #56]	@ (100493bc <HAL_UARTEx_SetRxFifoThreshold+0x80>)
10049384:	4013      	ands	r3, r2
10049386:	0019      	movs	r1, r3
10049388:	687b      	ldr	r3, [r7, #4]
1004938a:	681b      	ldr	r3, [r3, #0]
1004938c:	683a      	ldr	r2, [r7, #0]
1004938e:	430a      	orrs	r2, r1
10049390:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
10049392:	687b      	ldr	r3, [r7, #4]
10049394:	0018      	movs	r0, r3
10049396:	f000 f813 	bl	100493c0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
1004939a:	687b      	ldr	r3, [r7, #4]
1004939c:	681b      	ldr	r3, [r3, #0]
1004939e:	68fa      	ldr	r2, [r7, #12]
100493a0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
100493a2:	687b      	ldr	r3, [r7, #4]
100493a4:	2288      	movs	r2, #136	@ 0x88
100493a6:	2120      	movs	r1, #32
100493a8:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
100493aa:	687b      	ldr	r3, [r7, #4]
100493ac:	2284      	movs	r2, #132	@ 0x84
100493ae:	2100      	movs	r1, #0
100493b0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
100493b2:	2300      	movs	r3, #0
}
100493b4:	0018      	movs	r0, r3
100493b6:	46bd      	mov	sp, r7
100493b8:	b004      	add	sp, #16
100493ba:	bd80      	pop	{r7, pc}
100493bc:	f1ffffff 	.word	0xf1ffffff

100493c0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
100493c0:	b5f0      	push	{r4, r5, r6, r7, lr}
100493c2:	b085      	sub	sp, #20
100493c4:	af00      	add	r7, sp, #0
100493c6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
100493c8:	687b      	ldr	r3, [r7, #4]
100493ca:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
100493cc:	2b00      	cmp	r3, #0
100493ce:	d108      	bne.n	100493e2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
100493d0:	687b      	ldr	r3, [r7, #4]
100493d2:	226a      	movs	r2, #106	@ 0x6a
100493d4:	2101      	movs	r1, #1
100493d6:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
100493d8:	687b      	ldr	r3, [r7, #4]
100493da:	2268      	movs	r2, #104	@ 0x68
100493dc:	2101      	movs	r1, #1
100493de:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
100493e0:	e043      	b.n	1004946a <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
100493e2:	260f      	movs	r6, #15
100493e4:	19bb      	adds	r3, r7, r6
100493e6:	2208      	movs	r2, #8
100493e8:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
100493ea:	200e      	movs	r0, #14
100493ec:	183b      	adds	r3, r7, r0
100493ee:	2208      	movs	r2, #8
100493f0:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
100493f2:	687b      	ldr	r3, [r7, #4]
100493f4:	681b      	ldr	r3, [r3, #0]
100493f6:	689b      	ldr	r3, [r3, #8]
100493f8:	0e5b      	lsrs	r3, r3, #25
100493fa:	b2da      	uxtb	r2, r3
100493fc:	240d      	movs	r4, #13
100493fe:	193b      	adds	r3, r7, r4
10049400:	2107      	movs	r1, #7
10049402:	400a      	ands	r2, r1
10049404:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
10049406:	687b      	ldr	r3, [r7, #4]
10049408:	681b      	ldr	r3, [r3, #0]
1004940a:	689b      	ldr	r3, [r3, #8]
1004940c:	0f5b      	lsrs	r3, r3, #29
1004940e:	b2da      	uxtb	r2, r3
10049410:	250c      	movs	r5, #12
10049412:	197b      	adds	r3, r7, r5
10049414:	2107      	movs	r1, #7
10049416:	400a      	ands	r2, r1
10049418:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
1004941a:	183b      	adds	r3, r7, r0
1004941c:	781b      	ldrb	r3, [r3, #0]
1004941e:	197a      	adds	r2, r7, r5
10049420:	7812      	ldrb	r2, [r2, #0]
10049422:	4914      	ldr	r1, [pc, #80]	@ (10049474 <UARTEx_SetNbDataToProcess+0xb4>)
10049424:	5c8a      	ldrb	r2, [r1, r2]
10049426:	435a      	muls	r2, r3
10049428:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
1004942a:	197b      	adds	r3, r7, r5
1004942c:	781b      	ldrb	r3, [r3, #0]
1004942e:	4a12      	ldr	r2, [pc, #72]	@ (10049478 <UARTEx_SetNbDataToProcess+0xb8>)
10049430:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
10049432:	0019      	movs	r1, r3
10049434:	f7f6 ff0c 	bl	10040250 <__divsi3>
10049438:	0003      	movs	r3, r0
1004943a:	b299      	uxth	r1, r3
1004943c:	687b      	ldr	r3, [r7, #4]
1004943e:	226a      	movs	r2, #106	@ 0x6a
10049440:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
10049442:	19bb      	adds	r3, r7, r6
10049444:	781b      	ldrb	r3, [r3, #0]
10049446:	193a      	adds	r2, r7, r4
10049448:	7812      	ldrb	r2, [r2, #0]
1004944a:	490a      	ldr	r1, [pc, #40]	@ (10049474 <UARTEx_SetNbDataToProcess+0xb4>)
1004944c:	5c8a      	ldrb	r2, [r1, r2]
1004944e:	435a      	muls	r2, r3
10049450:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
10049452:	193b      	adds	r3, r7, r4
10049454:	781b      	ldrb	r3, [r3, #0]
10049456:	4a08      	ldr	r2, [pc, #32]	@ (10049478 <UARTEx_SetNbDataToProcess+0xb8>)
10049458:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
1004945a:	0019      	movs	r1, r3
1004945c:	f7f6 fef8 	bl	10040250 <__divsi3>
10049460:	0003      	movs	r3, r0
10049462:	b299      	uxth	r1, r3
10049464:	687b      	ldr	r3, [r7, #4]
10049466:	2268      	movs	r2, #104	@ 0x68
10049468:	5299      	strh	r1, [r3, r2]
}
1004946a:	46c0      	nop			@ (mov r8, r8)
1004946c:	46bd      	mov	sp, r7
1004946e:	b005      	add	sp, #20
10049470:	bdf0      	pop	{r4, r5, r6, r7, pc}
10049472:	46c0      	nop			@ (mov r8, r8)
10049474:	1004bf30 	.word	0x1004bf30
10049478:	1004bf38 	.word	0x1004bf38

1004947c <__cvt>:
1004947c:	b5f0      	push	{r4, r5, r6, r7, lr}
1004947e:	001f      	movs	r7, r3
10049480:	2300      	movs	r3, #0
10049482:	0016      	movs	r6, r2
10049484:	b08b      	sub	sp, #44	@ 0x2c
10049486:	429f      	cmp	r7, r3
10049488:	da04      	bge.n	10049494 <__cvt+0x18>
1004948a:	2180      	movs	r1, #128	@ 0x80
1004948c:	0609      	lsls	r1, r1, #24
1004948e:	187b      	adds	r3, r7, r1
10049490:	001f      	movs	r7, r3
10049492:	232d      	movs	r3, #45	@ 0x2d
10049494:	9a12      	ldr	r2, [sp, #72]	@ 0x48
10049496:	9d14      	ldr	r5, [sp, #80]	@ 0x50
10049498:	7013      	strb	r3, [r2, #0]
1004949a:	2320      	movs	r3, #32
1004949c:	2203      	movs	r2, #3
1004949e:	439d      	bics	r5, r3
100494a0:	2d46      	cmp	r5, #70	@ 0x46
100494a2:	d007      	beq.n	100494b4 <__cvt+0x38>
100494a4:	002b      	movs	r3, r5
100494a6:	3b45      	subs	r3, #69	@ 0x45
100494a8:	4259      	negs	r1, r3
100494aa:	414b      	adcs	r3, r1
100494ac:	9910      	ldr	r1, [sp, #64]	@ 0x40
100494ae:	3a01      	subs	r2, #1
100494b0:	18cb      	adds	r3, r1, r3
100494b2:	9310      	str	r3, [sp, #64]	@ 0x40
100494b4:	ab09      	add	r3, sp, #36	@ 0x24
100494b6:	9304      	str	r3, [sp, #16]
100494b8:	ab08      	add	r3, sp, #32
100494ba:	9303      	str	r3, [sp, #12]
100494bc:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
100494be:	9200      	str	r2, [sp, #0]
100494c0:	9302      	str	r3, [sp, #8]
100494c2:	9b10      	ldr	r3, [sp, #64]	@ 0x40
100494c4:	0032      	movs	r2, r6
100494c6:	9301      	str	r3, [sp, #4]
100494c8:	003b      	movs	r3, r7
100494ca:	f000 fe53 	bl	1004a174 <_dtoa_r>
100494ce:	0004      	movs	r4, r0
100494d0:	2d47      	cmp	r5, #71	@ 0x47
100494d2:	d11b      	bne.n	1004950c <__cvt+0x90>
100494d4:	9b11      	ldr	r3, [sp, #68]	@ 0x44
100494d6:	07db      	lsls	r3, r3, #31
100494d8:	d511      	bpl.n	100494fe <__cvt+0x82>
100494da:	9b10      	ldr	r3, [sp, #64]	@ 0x40
100494dc:	18c3      	adds	r3, r0, r3
100494de:	9307      	str	r3, [sp, #28]
100494e0:	2200      	movs	r2, #0
100494e2:	2300      	movs	r3, #0
100494e4:	0030      	movs	r0, r6
100494e6:	0039      	movs	r1, r7
100494e8:	f7f6 ffae 	bl	10040448 <__aeabi_dcmpeq>
100494ec:	2800      	cmp	r0, #0
100494ee:	d001      	beq.n	100494f4 <__cvt+0x78>
100494f0:	9b07      	ldr	r3, [sp, #28]
100494f2:	9309      	str	r3, [sp, #36]	@ 0x24
100494f4:	2230      	movs	r2, #48	@ 0x30
100494f6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
100494f8:	9907      	ldr	r1, [sp, #28]
100494fa:	428b      	cmp	r3, r1
100494fc:	d320      	bcc.n	10049540 <__cvt+0xc4>
100494fe:	0020      	movs	r0, r4
10049500:	9b09      	ldr	r3, [sp, #36]	@ 0x24
10049502:	9a15      	ldr	r2, [sp, #84]	@ 0x54
10049504:	1b1b      	subs	r3, r3, r4
10049506:	6013      	str	r3, [r2, #0]
10049508:	b00b      	add	sp, #44	@ 0x2c
1004950a:	bdf0      	pop	{r4, r5, r6, r7, pc}
1004950c:	9b10      	ldr	r3, [sp, #64]	@ 0x40
1004950e:	18c3      	adds	r3, r0, r3
10049510:	9307      	str	r3, [sp, #28]
10049512:	2d46      	cmp	r5, #70	@ 0x46
10049514:	d1e4      	bne.n	100494e0 <__cvt+0x64>
10049516:	7803      	ldrb	r3, [r0, #0]
10049518:	2b30      	cmp	r3, #48	@ 0x30
1004951a:	d10c      	bne.n	10049536 <__cvt+0xba>
1004951c:	2200      	movs	r2, #0
1004951e:	2300      	movs	r3, #0
10049520:	0030      	movs	r0, r6
10049522:	0039      	movs	r1, r7
10049524:	f7f6 ff90 	bl	10040448 <__aeabi_dcmpeq>
10049528:	2800      	cmp	r0, #0
1004952a:	d104      	bne.n	10049536 <__cvt+0xba>
1004952c:	2301      	movs	r3, #1
1004952e:	9a10      	ldr	r2, [sp, #64]	@ 0x40
10049530:	1a9b      	subs	r3, r3, r2
10049532:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
10049534:	6013      	str	r3, [r2, #0]
10049536:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
10049538:	9a07      	ldr	r2, [sp, #28]
1004953a:	681b      	ldr	r3, [r3, #0]
1004953c:	18d3      	adds	r3, r2, r3
1004953e:	e7ce      	b.n	100494de <__cvt+0x62>
10049540:	1c59      	adds	r1, r3, #1
10049542:	9109      	str	r1, [sp, #36]	@ 0x24
10049544:	701a      	strb	r2, [r3, #0]
10049546:	e7d6      	b.n	100494f6 <__cvt+0x7a>

10049548 <__exponent>:
10049548:	b5f0      	push	{r4, r5, r6, r7, lr}
1004954a:	232b      	movs	r3, #43	@ 0x2b
1004954c:	0005      	movs	r5, r0
1004954e:	000c      	movs	r4, r1
10049550:	b085      	sub	sp, #20
10049552:	7002      	strb	r2, [r0, #0]
10049554:	2900      	cmp	r1, #0
10049556:	da01      	bge.n	1004955c <__exponent+0x14>
10049558:	424c      	negs	r4, r1
1004955a:	3302      	adds	r3, #2
1004955c:	706b      	strb	r3, [r5, #1]
1004955e:	2c09      	cmp	r4, #9
10049560:	dd2c      	ble.n	100495bc <__exponent+0x74>
10049562:	ab02      	add	r3, sp, #8
10049564:	1dde      	adds	r6, r3, #7
10049566:	0020      	movs	r0, r4
10049568:	210a      	movs	r1, #10
1004956a:	f7f6 ff57 	bl	1004041c <__aeabi_idivmod>
1004956e:	0037      	movs	r7, r6
10049570:	3130      	adds	r1, #48	@ 0x30
10049572:	3e01      	subs	r6, #1
10049574:	0020      	movs	r0, r4
10049576:	7031      	strb	r1, [r6, #0]
10049578:	210a      	movs	r1, #10
1004957a:	9401      	str	r4, [sp, #4]
1004957c:	f7f6 fe68 	bl	10040250 <__divsi3>
10049580:	9b01      	ldr	r3, [sp, #4]
10049582:	0004      	movs	r4, r0
10049584:	2b63      	cmp	r3, #99	@ 0x63
10049586:	dcee      	bgt.n	10049566 <__exponent+0x1e>
10049588:	1eba      	subs	r2, r7, #2
1004958a:	1ca8      	adds	r0, r5, #2
1004958c:	0001      	movs	r1, r0
1004958e:	0013      	movs	r3, r2
10049590:	3430      	adds	r4, #48	@ 0x30
10049592:	7014      	strb	r4, [r2, #0]
10049594:	ac02      	add	r4, sp, #8
10049596:	3407      	adds	r4, #7
10049598:	429c      	cmp	r4, r3
1004959a:	d80a      	bhi.n	100495b2 <__exponent+0x6a>
1004959c:	2300      	movs	r3, #0
1004959e:	42a2      	cmp	r2, r4
100495a0:	d803      	bhi.n	100495aa <__exponent+0x62>
100495a2:	3309      	adds	r3, #9
100495a4:	aa02      	add	r2, sp, #8
100495a6:	189b      	adds	r3, r3, r2
100495a8:	1bdb      	subs	r3, r3, r7
100495aa:	18c0      	adds	r0, r0, r3
100495ac:	1b40      	subs	r0, r0, r5
100495ae:	b005      	add	sp, #20
100495b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
100495b2:	781c      	ldrb	r4, [r3, #0]
100495b4:	3301      	adds	r3, #1
100495b6:	700c      	strb	r4, [r1, #0]
100495b8:	3101      	adds	r1, #1
100495ba:	e7eb      	b.n	10049594 <__exponent+0x4c>
100495bc:	2330      	movs	r3, #48	@ 0x30
100495be:	18e4      	adds	r4, r4, r3
100495c0:	70ab      	strb	r3, [r5, #2]
100495c2:	1d28      	adds	r0, r5, #4
100495c4:	70ec      	strb	r4, [r5, #3]
100495c6:	e7f1      	b.n	100495ac <__exponent+0x64>

100495c8 <_printf_float>:
100495c8:	b5f0      	push	{r4, r5, r6, r7, lr}
100495ca:	b097      	sub	sp, #92	@ 0x5c
100495cc:	000d      	movs	r5, r1
100495ce:	920a      	str	r2, [sp, #40]	@ 0x28
100495d0:	9c1c      	ldr	r4, [sp, #112]	@ 0x70
100495d2:	930b      	str	r3, [sp, #44]	@ 0x2c
100495d4:	9009      	str	r0, [sp, #36]	@ 0x24
100495d6:	f000 fcd9 	bl	10049f8c <_localeconv_r>
100495da:	6803      	ldr	r3, [r0, #0]
100495dc:	0018      	movs	r0, r3
100495de:	930d      	str	r3, [sp, #52]	@ 0x34
100495e0:	f7f6 fd90 	bl	10040104 <strlen>
100495e4:	2300      	movs	r3, #0
100495e6:	900f      	str	r0, [sp, #60]	@ 0x3c
100495e8:	9314      	str	r3, [sp, #80]	@ 0x50
100495ea:	7e2b      	ldrb	r3, [r5, #24]
100495ec:	2207      	movs	r2, #7
100495ee:	930c      	str	r3, [sp, #48]	@ 0x30
100495f0:	682b      	ldr	r3, [r5, #0]
100495f2:	930e      	str	r3, [sp, #56]	@ 0x38
100495f4:	990e      	ldr	r1, [sp, #56]	@ 0x38
100495f6:	6823      	ldr	r3, [r4, #0]
100495f8:	05c9      	lsls	r1, r1, #23
100495fa:	d545      	bpl.n	10049688 <_printf_float+0xc0>
100495fc:	189b      	adds	r3, r3, r2
100495fe:	4393      	bics	r3, r2
10049600:	001a      	movs	r2, r3
10049602:	3208      	adds	r2, #8
10049604:	6022      	str	r2, [r4, #0]
10049606:	2201      	movs	r2, #1
10049608:	681e      	ldr	r6, [r3, #0]
1004960a:	685f      	ldr	r7, [r3, #4]
1004960c:	007b      	lsls	r3, r7, #1
1004960e:	085b      	lsrs	r3, r3, #1
10049610:	9311      	str	r3, [sp, #68]	@ 0x44
10049612:	9610      	str	r6, [sp, #64]	@ 0x40
10049614:	64ae      	str	r6, [r5, #72]	@ 0x48
10049616:	64ef      	str	r7, [r5, #76]	@ 0x4c
10049618:	9810      	ldr	r0, [sp, #64]	@ 0x40
1004961a:	9911      	ldr	r1, [sp, #68]	@ 0x44
1004961c:	4ba7      	ldr	r3, [pc, #668]	@ (100498bc <_printf_float+0x2f4>)
1004961e:	4252      	negs	r2, r2
10049620:	f7f8 fe84 	bl	1004232c <__aeabi_dcmpun>
10049624:	2800      	cmp	r0, #0
10049626:	d131      	bne.n	1004968c <_printf_float+0xc4>
10049628:	9810      	ldr	r0, [sp, #64]	@ 0x40
1004962a:	9911      	ldr	r1, [sp, #68]	@ 0x44
1004962c:	2201      	movs	r2, #1
1004962e:	4ba3      	ldr	r3, [pc, #652]	@ (100498bc <_printf_float+0x2f4>)
10049630:	4252      	negs	r2, r2
10049632:	f7f6 ff19 	bl	10040468 <__aeabi_dcmple>
10049636:	2800      	cmp	r0, #0
10049638:	d128      	bne.n	1004968c <_printf_float+0xc4>
1004963a:	2200      	movs	r2, #0
1004963c:	2300      	movs	r3, #0
1004963e:	0030      	movs	r0, r6
10049640:	0039      	movs	r1, r7
10049642:	f7f6 ff07 	bl	10040454 <__aeabi_dcmplt>
10049646:	2800      	cmp	r0, #0
10049648:	d003      	beq.n	10049652 <_printf_float+0x8a>
1004964a:	002b      	movs	r3, r5
1004964c:	222d      	movs	r2, #45	@ 0x2d
1004964e:	3343      	adds	r3, #67	@ 0x43
10049650:	701a      	strb	r2, [r3, #0]
10049652:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
10049654:	4f9a      	ldr	r7, [pc, #616]	@ (100498c0 <_printf_float+0x2f8>)
10049656:	2b47      	cmp	r3, #71	@ 0x47
10049658:	d900      	bls.n	1004965c <_printf_float+0x94>
1004965a:	4f9a      	ldr	r7, [pc, #616]	@ (100498c4 <_printf_float+0x2fc>)
1004965c:	2303      	movs	r3, #3
1004965e:	2400      	movs	r4, #0
10049660:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
10049662:	612b      	str	r3, [r5, #16]
10049664:	3301      	adds	r3, #1
10049666:	439a      	bics	r2, r3
10049668:	602a      	str	r2, [r5, #0]
1004966a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
1004966c:	0029      	movs	r1, r5
1004966e:	9300      	str	r3, [sp, #0]
10049670:	9809      	ldr	r0, [sp, #36]	@ 0x24
10049672:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
10049674:	aa15      	add	r2, sp, #84	@ 0x54
10049676:	f000 f9e5 	bl	10049a44 <_printf_common>
1004967a:	3001      	adds	r0, #1
1004967c:	d000      	beq.n	10049680 <_printf_float+0xb8>
1004967e:	e09f      	b.n	100497c0 <_printf_float+0x1f8>
10049680:	2001      	movs	r0, #1
10049682:	4240      	negs	r0, r0
10049684:	b017      	add	sp, #92	@ 0x5c
10049686:	bdf0      	pop	{r4, r5, r6, r7, pc}
10049688:	3307      	adds	r3, #7
1004968a:	e7b8      	b.n	100495fe <_printf_float+0x36>
1004968c:	0032      	movs	r2, r6
1004968e:	003b      	movs	r3, r7
10049690:	0030      	movs	r0, r6
10049692:	0039      	movs	r1, r7
10049694:	f7f8 fe4a 	bl	1004232c <__aeabi_dcmpun>
10049698:	2800      	cmp	r0, #0
1004969a:	d00b      	beq.n	100496b4 <_printf_float+0xec>
1004969c:	2f00      	cmp	r7, #0
1004969e:	da03      	bge.n	100496a8 <_printf_float+0xe0>
100496a0:	002b      	movs	r3, r5
100496a2:	222d      	movs	r2, #45	@ 0x2d
100496a4:	3343      	adds	r3, #67	@ 0x43
100496a6:	701a      	strb	r2, [r3, #0]
100496a8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
100496aa:	4f87      	ldr	r7, [pc, #540]	@ (100498c8 <_printf_float+0x300>)
100496ac:	2b47      	cmp	r3, #71	@ 0x47
100496ae:	d9d5      	bls.n	1004965c <_printf_float+0x94>
100496b0:	4f86      	ldr	r7, [pc, #536]	@ (100498cc <_printf_float+0x304>)
100496b2:	e7d3      	b.n	1004965c <_printf_float+0x94>
100496b4:	2220      	movs	r2, #32
100496b6:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
100496b8:	686b      	ldr	r3, [r5, #4]
100496ba:	4394      	bics	r4, r2
100496bc:	1c5a      	adds	r2, r3, #1
100496be:	d146      	bne.n	1004974e <_printf_float+0x186>
100496c0:	3307      	adds	r3, #7
100496c2:	606b      	str	r3, [r5, #4]
100496c4:	2380      	movs	r3, #128	@ 0x80
100496c6:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
100496c8:	00db      	lsls	r3, r3, #3
100496ca:	4313      	orrs	r3, r2
100496cc:	2200      	movs	r2, #0
100496ce:	602b      	str	r3, [r5, #0]
100496d0:	9206      	str	r2, [sp, #24]
100496d2:	aa14      	add	r2, sp, #80	@ 0x50
100496d4:	9205      	str	r2, [sp, #20]
100496d6:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
100496d8:	a90a      	add	r1, sp, #40	@ 0x28
100496da:	9204      	str	r2, [sp, #16]
100496dc:	aa13      	add	r2, sp, #76	@ 0x4c
100496de:	9203      	str	r2, [sp, #12]
100496e0:	2223      	movs	r2, #35	@ 0x23
100496e2:	1852      	adds	r2, r2, r1
100496e4:	9202      	str	r2, [sp, #8]
100496e6:	9301      	str	r3, [sp, #4]
100496e8:	686b      	ldr	r3, [r5, #4]
100496ea:	0032      	movs	r2, r6
100496ec:	9300      	str	r3, [sp, #0]
100496ee:	9809      	ldr	r0, [sp, #36]	@ 0x24
100496f0:	003b      	movs	r3, r7
100496f2:	f7ff fec3 	bl	1004947c <__cvt>
100496f6:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
100496f8:	0007      	movs	r7, r0
100496fa:	2c47      	cmp	r4, #71	@ 0x47
100496fc:	d12d      	bne.n	1004975a <_printf_float+0x192>
100496fe:	1cd3      	adds	r3, r2, #3
10049700:	db02      	blt.n	10049708 <_printf_float+0x140>
10049702:	686b      	ldr	r3, [r5, #4]
10049704:	429a      	cmp	r2, r3
10049706:	dd48      	ble.n	1004979a <_printf_float+0x1d2>
10049708:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
1004970a:	9913      	ldr	r1, [sp, #76]	@ 0x4c
1004970c:	3b02      	subs	r3, #2
1004970e:	b2db      	uxtb	r3, r3
10049710:	930c      	str	r3, [sp, #48]	@ 0x30
10049712:	0028      	movs	r0, r5
10049714:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
10049716:	3901      	subs	r1, #1
10049718:	3050      	adds	r0, #80	@ 0x50
1004971a:	9113      	str	r1, [sp, #76]	@ 0x4c
1004971c:	f7ff ff14 	bl	10049548 <__exponent>
10049720:	9a14      	ldr	r2, [sp, #80]	@ 0x50
10049722:	0004      	movs	r4, r0
10049724:	1813      	adds	r3, r2, r0
10049726:	612b      	str	r3, [r5, #16]
10049728:	2a01      	cmp	r2, #1
1004972a:	dc02      	bgt.n	10049732 <_printf_float+0x16a>
1004972c:	682a      	ldr	r2, [r5, #0]
1004972e:	07d2      	lsls	r2, r2, #31
10049730:	d501      	bpl.n	10049736 <_printf_float+0x16e>
10049732:	3301      	adds	r3, #1
10049734:	612b      	str	r3, [r5, #16]
10049736:	2323      	movs	r3, #35	@ 0x23
10049738:	aa0a      	add	r2, sp, #40	@ 0x28
1004973a:	189b      	adds	r3, r3, r2
1004973c:	781b      	ldrb	r3, [r3, #0]
1004973e:	2b00      	cmp	r3, #0
10049740:	d100      	bne.n	10049744 <_printf_float+0x17c>
10049742:	e792      	b.n	1004966a <_printf_float+0xa2>
10049744:	002b      	movs	r3, r5
10049746:	222d      	movs	r2, #45	@ 0x2d
10049748:	3343      	adds	r3, #67	@ 0x43
1004974a:	701a      	strb	r2, [r3, #0]
1004974c:	e78d      	b.n	1004966a <_printf_float+0xa2>
1004974e:	2c47      	cmp	r4, #71	@ 0x47
10049750:	d1b8      	bne.n	100496c4 <_printf_float+0xfc>
10049752:	2b00      	cmp	r3, #0
10049754:	d1b6      	bne.n	100496c4 <_printf_float+0xfc>
10049756:	3301      	adds	r3, #1
10049758:	e7b3      	b.n	100496c2 <_printf_float+0xfa>
1004975a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
1004975c:	0011      	movs	r1, r2
1004975e:	2b65      	cmp	r3, #101	@ 0x65
10049760:	d9d7      	bls.n	10049712 <_printf_float+0x14a>
10049762:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
10049764:	2b66      	cmp	r3, #102	@ 0x66
10049766:	d11a      	bne.n	1004979e <_printf_float+0x1d6>
10049768:	686b      	ldr	r3, [r5, #4]
1004976a:	2a00      	cmp	r2, #0
1004976c:	dd09      	ble.n	10049782 <_printf_float+0x1ba>
1004976e:	612a      	str	r2, [r5, #16]
10049770:	2b00      	cmp	r3, #0
10049772:	d102      	bne.n	1004977a <_printf_float+0x1b2>
10049774:	6829      	ldr	r1, [r5, #0]
10049776:	07c9      	lsls	r1, r1, #31
10049778:	d50b      	bpl.n	10049792 <_printf_float+0x1ca>
1004977a:	3301      	adds	r3, #1
1004977c:	189b      	adds	r3, r3, r2
1004977e:	612b      	str	r3, [r5, #16]
10049780:	e007      	b.n	10049792 <_printf_float+0x1ca>
10049782:	2b00      	cmp	r3, #0
10049784:	d103      	bne.n	1004978e <_printf_float+0x1c6>
10049786:	2201      	movs	r2, #1
10049788:	6829      	ldr	r1, [r5, #0]
1004978a:	4211      	tst	r1, r2
1004978c:	d000      	beq.n	10049790 <_printf_float+0x1c8>
1004978e:	1c9a      	adds	r2, r3, #2
10049790:	612a      	str	r2, [r5, #16]
10049792:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
10049794:	2400      	movs	r4, #0
10049796:	65ab      	str	r3, [r5, #88]	@ 0x58
10049798:	e7cd      	b.n	10049736 <_printf_float+0x16e>
1004979a:	2367      	movs	r3, #103	@ 0x67
1004979c:	930c      	str	r3, [sp, #48]	@ 0x30
1004979e:	9913      	ldr	r1, [sp, #76]	@ 0x4c
100497a0:	9b14      	ldr	r3, [sp, #80]	@ 0x50
100497a2:	4299      	cmp	r1, r3
100497a4:	db06      	blt.n	100497b4 <_printf_float+0x1ec>
100497a6:	682b      	ldr	r3, [r5, #0]
100497a8:	6129      	str	r1, [r5, #16]
100497aa:	07db      	lsls	r3, r3, #31
100497ac:	d5f1      	bpl.n	10049792 <_printf_float+0x1ca>
100497ae:	3101      	adds	r1, #1
100497b0:	6129      	str	r1, [r5, #16]
100497b2:	e7ee      	b.n	10049792 <_printf_float+0x1ca>
100497b4:	2201      	movs	r2, #1
100497b6:	2900      	cmp	r1, #0
100497b8:	dce0      	bgt.n	1004977c <_printf_float+0x1b4>
100497ba:	1892      	adds	r2, r2, r2
100497bc:	1a52      	subs	r2, r2, r1
100497be:	e7dd      	b.n	1004977c <_printf_float+0x1b4>
100497c0:	682a      	ldr	r2, [r5, #0]
100497c2:	0553      	lsls	r3, r2, #21
100497c4:	d408      	bmi.n	100497d8 <_printf_float+0x210>
100497c6:	692b      	ldr	r3, [r5, #16]
100497c8:	003a      	movs	r2, r7
100497ca:	990a      	ldr	r1, [sp, #40]	@ 0x28
100497cc:	9809      	ldr	r0, [sp, #36]	@ 0x24
100497ce:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
100497d0:	47a0      	blx	r4
100497d2:	3001      	adds	r0, #1
100497d4:	d129      	bne.n	1004982a <_printf_float+0x262>
100497d6:	e753      	b.n	10049680 <_printf_float+0xb8>
100497d8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
100497da:	2b65      	cmp	r3, #101	@ 0x65
100497dc:	d800      	bhi.n	100497e0 <_printf_float+0x218>
100497de:	e0da      	b.n	10049996 <_printf_float+0x3ce>
100497e0:	6ca8      	ldr	r0, [r5, #72]	@ 0x48
100497e2:	6ce9      	ldr	r1, [r5, #76]	@ 0x4c
100497e4:	2200      	movs	r2, #0
100497e6:	2300      	movs	r3, #0
100497e8:	f7f6 fe2e 	bl	10040448 <__aeabi_dcmpeq>
100497ec:	2800      	cmp	r0, #0
100497ee:	d033      	beq.n	10049858 <_printf_float+0x290>
100497f0:	2301      	movs	r3, #1
100497f2:	4a37      	ldr	r2, [pc, #220]	@ (100498d0 <_printf_float+0x308>)
100497f4:	990a      	ldr	r1, [sp, #40]	@ 0x28
100497f6:	9809      	ldr	r0, [sp, #36]	@ 0x24
100497f8:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
100497fa:	47a0      	blx	r4
100497fc:	3001      	adds	r0, #1
100497fe:	d100      	bne.n	10049802 <_printf_float+0x23a>
10049800:	e73e      	b.n	10049680 <_printf_float+0xb8>
10049802:	9e14      	ldr	r6, [sp, #80]	@ 0x50
10049804:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
10049806:	42b3      	cmp	r3, r6
10049808:	db02      	blt.n	10049810 <_printf_float+0x248>
1004980a:	682b      	ldr	r3, [r5, #0]
1004980c:	07db      	lsls	r3, r3, #31
1004980e:	d50c      	bpl.n	1004982a <_printf_float+0x262>
10049810:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
10049812:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
10049814:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
10049816:	990a      	ldr	r1, [sp, #40]	@ 0x28
10049818:	9809      	ldr	r0, [sp, #36]	@ 0x24
1004981a:	47a0      	blx	r4
1004981c:	2400      	movs	r4, #0
1004981e:	3001      	adds	r0, #1
10049820:	d100      	bne.n	10049824 <_printf_float+0x25c>
10049822:	e72d      	b.n	10049680 <_printf_float+0xb8>
10049824:	1e73      	subs	r3, r6, #1
10049826:	42a3      	cmp	r3, r4
10049828:	dc0a      	bgt.n	10049840 <_printf_float+0x278>
1004982a:	682b      	ldr	r3, [r5, #0]
1004982c:	079b      	lsls	r3, r3, #30
1004982e:	d500      	bpl.n	10049832 <_printf_float+0x26a>
10049830:	e105      	b.n	10049a3e <_printf_float+0x476>
10049832:	9b15      	ldr	r3, [sp, #84]	@ 0x54
10049834:	68e8      	ldr	r0, [r5, #12]
10049836:	4298      	cmp	r0, r3
10049838:	db00      	blt.n	1004983c <_printf_float+0x274>
1004983a:	e723      	b.n	10049684 <_printf_float+0xbc>
1004983c:	0018      	movs	r0, r3
1004983e:	e721      	b.n	10049684 <_printf_float+0xbc>
10049840:	002a      	movs	r2, r5
10049842:	2301      	movs	r3, #1
10049844:	990a      	ldr	r1, [sp, #40]	@ 0x28
10049846:	9809      	ldr	r0, [sp, #36]	@ 0x24
10049848:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
1004984a:	321a      	adds	r2, #26
1004984c:	47b8      	blx	r7
1004984e:	3001      	adds	r0, #1
10049850:	d100      	bne.n	10049854 <_printf_float+0x28c>
10049852:	e715      	b.n	10049680 <_printf_float+0xb8>
10049854:	3401      	adds	r4, #1
10049856:	e7e5      	b.n	10049824 <_printf_float+0x25c>
10049858:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
1004985a:	2b00      	cmp	r3, #0
1004985c:	dc3a      	bgt.n	100498d4 <_printf_float+0x30c>
1004985e:	2301      	movs	r3, #1
10049860:	4a1b      	ldr	r2, [pc, #108]	@ (100498d0 <_printf_float+0x308>)
10049862:	990a      	ldr	r1, [sp, #40]	@ 0x28
10049864:	9809      	ldr	r0, [sp, #36]	@ 0x24
10049866:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
10049868:	47a0      	blx	r4
1004986a:	3001      	adds	r0, #1
1004986c:	d100      	bne.n	10049870 <_printf_float+0x2a8>
1004986e:	e707      	b.n	10049680 <_printf_float+0xb8>
10049870:	9e14      	ldr	r6, [sp, #80]	@ 0x50
10049872:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
10049874:	4333      	orrs	r3, r6
10049876:	d102      	bne.n	1004987e <_printf_float+0x2b6>
10049878:	682b      	ldr	r3, [r5, #0]
1004987a:	07db      	lsls	r3, r3, #31
1004987c:	d5d5      	bpl.n	1004982a <_printf_float+0x262>
1004987e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
10049880:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
10049882:	990a      	ldr	r1, [sp, #40]	@ 0x28
10049884:	9809      	ldr	r0, [sp, #36]	@ 0x24
10049886:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
10049888:	47a0      	blx	r4
1004988a:	2300      	movs	r3, #0
1004988c:	3001      	adds	r0, #1
1004988e:	d100      	bne.n	10049892 <_printf_float+0x2ca>
10049890:	e6f6      	b.n	10049680 <_printf_float+0xb8>
10049892:	930c      	str	r3, [sp, #48]	@ 0x30
10049894:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
10049896:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
10049898:	425b      	negs	r3, r3
1004989a:	4293      	cmp	r3, r2
1004989c:	dc01      	bgt.n	100498a2 <_printf_float+0x2da>
1004989e:	0033      	movs	r3, r6
100498a0:	e792      	b.n	100497c8 <_printf_float+0x200>
100498a2:	002a      	movs	r2, r5
100498a4:	2301      	movs	r3, #1
100498a6:	990a      	ldr	r1, [sp, #40]	@ 0x28
100498a8:	9809      	ldr	r0, [sp, #36]	@ 0x24
100498aa:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
100498ac:	321a      	adds	r2, #26
100498ae:	47a0      	blx	r4
100498b0:	3001      	adds	r0, #1
100498b2:	d100      	bne.n	100498b6 <_printf_float+0x2ee>
100498b4:	e6e4      	b.n	10049680 <_printf_float+0xb8>
100498b6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
100498b8:	3301      	adds	r3, #1
100498ba:	e7ea      	b.n	10049892 <_printf_float+0x2ca>
100498bc:	7fefffff 	.word	0x7fefffff
100498c0:	1004bf40 	.word	0x1004bf40
100498c4:	1004bf44 	.word	0x1004bf44
100498c8:	1004bf48 	.word	0x1004bf48
100498cc:	1004bf4c 	.word	0x1004bf4c
100498d0:	1004bf50 	.word	0x1004bf50
100498d4:	9b14      	ldr	r3, [sp, #80]	@ 0x50
100498d6:	6dae      	ldr	r6, [r5, #88]	@ 0x58
100498d8:	930c      	str	r3, [sp, #48]	@ 0x30
100498da:	429e      	cmp	r6, r3
100498dc:	dd00      	ble.n	100498e0 <_printf_float+0x318>
100498de:	001e      	movs	r6, r3
100498e0:	2e00      	cmp	r6, #0
100498e2:	dc31      	bgt.n	10049948 <_printf_float+0x380>
100498e4:	43f3      	mvns	r3, r6
100498e6:	2400      	movs	r4, #0
100498e8:	17db      	asrs	r3, r3, #31
100498ea:	4033      	ands	r3, r6
100498ec:	930e      	str	r3, [sp, #56]	@ 0x38
100498ee:	6dae      	ldr	r6, [r5, #88]	@ 0x58
100498f0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
100498f2:	1af3      	subs	r3, r6, r3
100498f4:	42a3      	cmp	r3, r4
100498f6:	dc30      	bgt.n	1004995a <_printf_float+0x392>
100498f8:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
100498fa:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
100498fc:	429a      	cmp	r2, r3
100498fe:	dc38      	bgt.n	10049972 <_printf_float+0x3aa>
10049900:	682b      	ldr	r3, [r5, #0]
10049902:	07db      	lsls	r3, r3, #31
10049904:	d435      	bmi.n	10049972 <_printf_float+0x3aa>
10049906:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
10049908:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
1004990a:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
1004990c:	1b9b      	subs	r3, r3, r6
1004990e:	1b14      	subs	r4, r2, r4
10049910:	429c      	cmp	r4, r3
10049912:	dd00      	ble.n	10049916 <_printf_float+0x34e>
10049914:	001c      	movs	r4, r3
10049916:	2c00      	cmp	r4, #0
10049918:	dc34      	bgt.n	10049984 <_printf_float+0x3bc>
1004991a:	43e3      	mvns	r3, r4
1004991c:	2600      	movs	r6, #0
1004991e:	17db      	asrs	r3, r3, #31
10049920:	401c      	ands	r4, r3
10049922:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
10049924:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
10049926:	1ad3      	subs	r3, r2, r3
10049928:	1b1b      	subs	r3, r3, r4
1004992a:	42b3      	cmp	r3, r6
1004992c:	dc00      	bgt.n	10049930 <_printf_float+0x368>
1004992e:	e77c      	b.n	1004982a <_printf_float+0x262>
10049930:	002a      	movs	r2, r5
10049932:	2301      	movs	r3, #1
10049934:	990a      	ldr	r1, [sp, #40]	@ 0x28
10049936:	9809      	ldr	r0, [sp, #36]	@ 0x24
10049938:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
1004993a:	321a      	adds	r2, #26
1004993c:	47b8      	blx	r7
1004993e:	3001      	adds	r0, #1
10049940:	d100      	bne.n	10049944 <_printf_float+0x37c>
10049942:	e69d      	b.n	10049680 <_printf_float+0xb8>
10049944:	3601      	adds	r6, #1
10049946:	e7ec      	b.n	10049922 <_printf_float+0x35a>
10049948:	0033      	movs	r3, r6
1004994a:	003a      	movs	r2, r7
1004994c:	990a      	ldr	r1, [sp, #40]	@ 0x28
1004994e:	9809      	ldr	r0, [sp, #36]	@ 0x24
10049950:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
10049952:	47a0      	blx	r4
10049954:	3001      	adds	r0, #1
10049956:	d1c5      	bne.n	100498e4 <_printf_float+0x31c>
10049958:	e692      	b.n	10049680 <_printf_float+0xb8>
1004995a:	002a      	movs	r2, r5
1004995c:	2301      	movs	r3, #1
1004995e:	990a      	ldr	r1, [sp, #40]	@ 0x28
10049960:	9809      	ldr	r0, [sp, #36]	@ 0x24
10049962:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
10049964:	321a      	adds	r2, #26
10049966:	47b0      	blx	r6
10049968:	3001      	adds	r0, #1
1004996a:	d100      	bne.n	1004996e <_printf_float+0x3a6>
1004996c:	e688      	b.n	10049680 <_printf_float+0xb8>
1004996e:	3401      	adds	r4, #1
10049970:	e7bd      	b.n	100498ee <_printf_float+0x326>
10049972:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
10049974:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
10049976:	990a      	ldr	r1, [sp, #40]	@ 0x28
10049978:	9809      	ldr	r0, [sp, #36]	@ 0x24
1004997a:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
1004997c:	47a0      	blx	r4
1004997e:	3001      	adds	r0, #1
10049980:	d1c1      	bne.n	10049906 <_printf_float+0x33e>
10049982:	e67d      	b.n	10049680 <_printf_float+0xb8>
10049984:	19ba      	adds	r2, r7, r6
10049986:	0023      	movs	r3, r4
10049988:	990a      	ldr	r1, [sp, #40]	@ 0x28
1004998a:	9809      	ldr	r0, [sp, #36]	@ 0x24
1004998c:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
1004998e:	47b0      	blx	r6
10049990:	3001      	adds	r0, #1
10049992:	d1c2      	bne.n	1004991a <_printf_float+0x352>
10049994:	e674      	b.n	10049680 <_printf_float+0xb8>
10049996:	9b14      	ldr	r3, [sp, #80]	@ 0x50
10049998:	930c      	str	r3, [sp, #48]	@ 0x30
1004999a:	2b01      	cmp	r3, #1
1004999c:	dc02      	bgt.n	100499a4 <_printf_float+0x3dc>
1004999e:	2301      	movs	r3, #1
100499a0:	421a      	tst	r2, r3
100499a2:	d039      	beq.n	10049a18 <_printf_float+0x450>
100499a4:	2301      	movs	r3, #1
100499a6:	003a      	movs	r2, r7
100499a8:	990a      	ldr	r1, [sp, #40]	@ 0x28
100499aa:	9809      	ldr	r0, [sp, #36]	@ 0x24
100499ac:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
100499ae:	47b0      	blx	r6
100499b0:	3001      	adds	r0, #1
100499b2:	d100      	bne.n	100499b6 <_printf_float+0x3ee>
100499b4:	e664      	b.n	10049680 <_printf_float+0xb8>
100499b6:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
100499b8:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
100499ba:	990a      	ldr	r1, [sp, #40]	@ 0x28
100499bc:	9809      	ldr	r0, [sp, #36]	@ 0x24
100499be:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
100499c0:	47b0      	blx	r6
100499c2:	3001      	adds	r0, #1
100499c4:	d100      	bne.n	100499c8 <_printf_float+0x400>
100499c6:	e65b      	b.n	10049680 <_printf_float+0xb8>
100499c8:	6ca8      	ldr	r0, [r5, #72]	@ 0x48
100499ca:	6ce9      	ldr	r1, [r5, #76]	@ 0x4c
100499cc:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
100499ce:	2200      	movs	r2, #0
100499d0:	3b01      	subs	r3, #1
100499d2:	930c      	str	r3, [sp, #48]	@ 0x30
100499d4:	2300      	movs	r3, #0
100499d6:	f7f6 fd37 	bl	10040448 <__aeabi_dcmpeq>
100499da:	2800      	cmp	r0, #0
100499dc:	d11a      	bne.n	10049a14 <_printf_float+0x44c>
100499de:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
100499e0:	1c7a      	adds	r2, r7, #1
100499e2:	990a      	ldr	r1, [sp, #40]	@ 0x28
100499e4:	9809      	ldr	r0, [sp, #36]	@ 0x24
100499e6:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
100499e8:	47b0      	blx	r6
100499ea:	3001      	adds	r0, #1
100499ec:	d10e      	bne.n	10049a0c <_printf_float+0x444>
100499ee:	e647      	b.n	10049680 <_printf_float+0xb8>
100499f0:	002a      	movs	r2, r5
100499f2:	2301      	movs	r3, #1
100499f4:	990a      	ldr	r1, [sp, #40]	@ 0x28
100499f6:	9809      	ldr	r0, [sp, #36]	@ 0x24
100499f8:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
100499fa:	321a      	adds	r2, #26
100499fc:	47b8      	blx	r7
100499fe:	3001      	adds	r0, #1
10049a00:	d100      	bne.n	10049a04 <_printf_float+0x43c>
10049a02:	e63d      	b.n	10049680 <_printf_float+0xb8>
10049a04:	3601      	adds	r6, #1
10049a06:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
10049a08:	429e      	cmp	r6, r3
10049a0a:	dbf1      	blt.n	100499f0 <_printf_float+0x428>
10049a0c:	002a      	movs	r2, r5
10049a0e:	0023      	movs	r3, r4
10049a10:	3250      	adds	r2, #80	@ 0x50
10049a12:	e6da      	b.n	100497ca <_printf_float+0x202>
10049a14:	2600      	movs	r6, #0
10049a16:	e7f6      	b.n	10049a06 <_printf_float+0x43e>
10049a18:	003a      	movs	r2, r7
10049a1a:	e7e2      	b.n	100499e2 <_printf_float+0x41a>
10049a1c:	002a      	movs	r2, r5
10049a1e:	2301      	movs	r3, #1
10049a20:	990a      	ldr	r1, [sp, #40]	@ 0x28
10049a22:	9809      	ldr	r0, [sp, #36]	@ 0x24
10049a24:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
10049a26:	3219      	adds	r2, #25
10049a28:	47b0      	blx	r6
10049a2a:	3001      	adds	r0, #1
10049a2c:	d100      	bne.n	10049a30 <_printf_float+0x468>
10049a2e:	e627      	b.n	10049680 <_printf_float+0xb8>
10049a30:	3401      	adds	r4, #1
10049a32:	68eb      	ldr	r3, [r5, #12]
10049a34:	9a15      	ldr	r2, [sp, #84]	@ 0x54
10049a36:	1a9b      	subs	r3, r3, r2
10049a38:	42a3      	cmp	r3, r4
10049a3a:	dcef      	bgt.n	10049a1c <_printf_float+0x454>
10049a3c:	e6f9      	b.n	10049832 <_printf_float+0x26a>
10049a3e:	2400      	movs	r4, #0
10049a40:	e7f7      	b.n	10049a32 <_printf_float+0x46a>
10049a42:	46c0      	nop			@ (mov r8, r8)

10049a44 <_printf_common>:
10049a44:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
10049a46:	0016      	movs	r6, r2
10049a48:	9301      	str	r3, [sp, #4]
10049a4a:	688a      	ldr	r2, [r1, #8]
10049a4c:	690b      	ldr	r3, [r1, #16]
10049a4e:	000c      	movs	r4, r1
10049a50:	9000      	str	r0, [sp, #0]
10049a52:	4293      	cmp	r3, r2
10049a54:	da00      	bge.n	10049a58 <_printf_common+0x14>
10049a56:	0013      	movs	r3, r2
10049a58:	0022      	movs	r2, r4
10049a5a:	6033      	str	r3, [r6, #0]
10049a5c:	3243      	adds	r2, #67	@ 0x43
10049a5e:	7812      	ldrb	r2, [r2, #0]
10049a60:	2a00      	cmp	r2, #0
10049a62:	d001      	beq.n	10049a68 <_printf_common+0x24>
10049a64:	3301      	adds	r3, #1
10049a66:	6033      	str	r3, [r6, #0]
10049a68:	6823      	ldr	r3, [r4, #0]
10049a6a:	069b      	lsls	r3, r3, #26
10049a6c:	d502      	bpl.n	10049a74 <_printf_common+0x30>
10049a6e:	6833      	ldr	r3, [r6, #0]
10049a70:	3302      	adds	r3, #2
10049a72:	6033      	str	r3, [r6, #0]
10049a74:	6822      	ldr	r2, [r4, #0]
10049a76:	2306      	movs	r3, #6
10049a78:	0015      	movs	r5, r2
10049a7a:	401d      	ands	r5, r3
10049a7c:	421a      	tst	r2, r3
10049a7e:	d027      	beq.n	10049ad0 <_printf_common+0x8c>
10049a80:	0023      	movs	r3, r4
10049a82:	3343      	adds	r3, #67	@ 0x43
10049a84:	781b      	ldrb	r3, [r3, #0]
10049a86:	1e5a      	subs	r2, r3, #1
10049a88:	4193      	sbcs	r3, r2
10049a8a:	6822      	ldr	r2, [r4, #0]
10049a8c:	0692      	lsls	r2, r2, #26
10049a8e:	d430      	bmi.n	10049af2 <_printf_common+0xae>
10049a90:	0022      	movs	r2, r4
10049a92:	9901      	ldr	r1, [sp, #4]
10049a94:	9800      	ldr	r0, [sp, #0]
10049a96:	9d08      	ldr	r5, [sp, #32]
10049a98:	3243      	adds	r2, #67	@ 0x43
10049a9a:	47a8      	blx	r5
10049a9c:	3001      	adds	r0, #1
10049a9e:	d025      	beq.n	10049aec <_printf_common+0xa8>
10049aa0:	2206      	movs	r2, #6
10049aa2:	6823      	ldr	r3, [r4, #0]
10049aa4:	2500      	movs	r5, #0
10049aa6:	4013      	ands	r3, r2
10049aa8:	2b04      	cmp	r3, #4
10049aaa:	d105      	bne.n	10049ab8 <_printf_common+0x74>
10049aac:	6833      	ldr	r3, [r6, #0]
10049aae:	68e5      	ldr	r5, [r4, #12]
10049ab0:	1aed      	subs	r5, r5, r3
10049ab2:	43eb      	mvns	r3, r5
10049ab4:	17db      	asrs	r3, r3, #31
10049ab6:	401d      	ands	r5, r3
10049ab8:	68a3      	ldr	r3, [r4, #8]
10049aba:	6922      	ldr	r2, [r4, #16]
10049abc:	4293      	cmp	r3, r2
10049abe:	dd01      	ble.n	10049ac4 <_printf_common+0x80>
10049ac0:	1a9b      	subs	r3, r3, r2
10049ac2:	18ed      	adds	r5, r5, r3
10049ac4:	2600      	movs	r6, #0
10049ac6:	42b5      	cmp	r5, r6
10049ac8:	d120      	bne.n	10049b0c <_printf_common+0xc8>
10049aca:	2000      	movs	r0, #0
10049acc:	e010      	b.n	10049af0 <_printf_common+0xac>
10049ace:	3501      	adds	r5, #1
10049ad0:	68e3      	ldr	r3, [r4, #12]
10049ad2:	6832      	ldr	r2, [r6, #0]
10049ad4:	1a9b      	subs	r3, r3, r2
10049ad6:	42ab      	cmp	r3, r5
10049ad8:	ddd2      	ble.n	10049a80 <_printf_common+0x3c>
10049ada:	0022      	movs	r2, r4
10049adc:	2301      	movs	r3, #1
10049ade:	9901      	ldr	r1, [sp, #4]
10049ae0:	9800      	ldr	r0, [sp, #0]
10049ae2:	9f08      	ldr	r7, [sp, #32]
10049ae4:	3219      	adds	r2, #25
10049ae6:	47b8      	blx	r7
10049ae8:	3001      	adds	r0, #1
10049aea:	d1f0      	bne.n	10049ace <_printf_common+0x8a>
10049aec:	2001      	movs	r0, #1
10049aee:	4240      	negs	r0, r0
10049af0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
10049af2:	2030      	movs	r0, #48	@ 0x30
10049af4:	18e1      	adds	r1, r4, r3
10049af6:	3143      	adds	r1, #67	@ 0x43
10049af8:	7008      	strb	r0, [r1, #0]
10049afa:	0021      	movs	r1, r4
10049afc:	1c5a      	adds	r2, r3, #1
10049afe:	3145      	adds	r1, #69	@ 0x45
10049b00:	7809      	ldrb	r1, [r1, #0]
10049b02:	18a2      	adds	r2, r4, r2
10049b04:	3243      	adds	r2, #67	@ 0x43
10049b06:	3302      	adds	r3, #2
10049b08:	7011      	strb	r1, [r2, #0]
10049b0a:	e7c1      	b.n	10049a90 <_printf_common+0x4c>
10049b0c:	0022      	movs	r2, r4
10049b0e:	2301      	movs	r3, #1
10049b10:	9901      	ldr	r1, [sp, #4]
10049b12:	9800      	ldr	r0, [sp, #0]
10049b14:	9f08      	ldr	r7, [sp, #32]
10049b16:	321a      	adds	r2, #26
10049b18:	47b8      	blx	r7
10049b1a:	3001      	adds	r0, #1
10049b1c:	d0e6      	beq.n	10049aec <_printf_common+0xa8>
10049b1e:	3601      	adds	r6, #1
10049b20:	e7d1      	b.n	10049ac6 <_printf_common+0x82>
	...

10049b24 <_printf_i>:
10049b24:	b5f0      	push	{r4, r5, r6, r7, lr}
10049b26:	b08b      	sub	sp, #44	@ 0x2c
10049b28:	9206      	str	r2, [sp, #24]
10049b2a:	000a      	movs	r2, r1
10049b2c:	3243      	adds	r2, #67	@ 0x43
10049b2e:	9307      	str	r3, [sp, #28]
10049b30:	9005      	str	r0, [sp, #20]
10049b32:	9203      	str	r2, [sp, #12]
10049b34:	7e0a      	ldrb	r2, [r1, #24]
10049b36:	000c      	movs	r4, r1
10049b38:	9b10      	ldr	r3, [sp, #64]	@ 0x40
10049b3a:	2a78      	cmp	r2, #120	@ 0x78
10049b3c:	d809      	bhi.n	10049b52 <_printf_i+0x2e>
10049b3e:	2a62      	cmp	r2, #98	@ 0x62
10049b40:	d80b      	bhi.n	10049b5a <_printf_i+0x36>
10049b42:	2a00      	cmp	r2, #0
10049b44:	d100      	bne.n	10049b48 <_printf_i+0x24>
10049b46:	e0bc      	b.n	10049cc2 <_printf_i+0x19e>
10049b48:	497b      	ldr	r1, [pc, #492]	@ (10049d38 <_printf_i+0x214>)
10049b4a:	9104      	str	r1, [sp, #16]
10049b4c:	2a58      	cmp	r2, #88	@ 0x58
10049b4e:	d100      	bne.n	10049b52 <_printf_i+0x2e>
10049b50:	e090      	b.n	10049c74 <_printf_i+0x150>
10049b52:	0025      	movs	r5, r4
10049b54:	3542      	adds	r5, #66	@ 0x42
10049b56:	702a      	strb	r2, [r5, #0]
10049b58:	e022      	b.n	10049ba0 <_printf_i+0x7c>
10049b5a:	0010      	movs	r0, r2
10049b5c:	3863      	subs	r0, #99	@ 0x63
10049b5e:	2815      	cmp	r0, #21
10049b60:	d8f7      	bhi.n	10049b52 <_printf_i+0x2e>
10049b62:	f7f6 fae1 	bl	10040128 <__gnu_thumb1_case_shi>
10049b66:	0016      	.short	0x0016
10049b68:	fff6001f 	.word	0xfff6001f
10049b6c:	fff6fff6 	.word	0xfff6fff6
10049b70:	001ffff6 	.word	0x001ffff6
10049b74:	fff6fff6 	.word	0xfff6fff6
10049b78:	fff6fff6 	.word	0xfff6fff6
10049b7c:	003600a1 	.word	0x003600a1
10049b80:	fff60080 	.word	0xfff60080
10049b84:	00b2fff6 	.word	0x00b2fff6
10049b88:	0036fff6 	.word	0x0036fff6
10049b8c:	fff6fff6 	.word	0xfff6fff6
10049b90:	0084      	.short	0x0084
10049b92:	0025      	movs	r5, r4
10049b94:	681a      	ldr	r2, [r3, #0]
10049b96:	3542      	adds	r5, #66	@ 0x42
10049b98:	1d11      	adds	r1, r2, #4
10049b9a:	6019      	str	r1, [r3, #0]
10049b9c:	6813      	ldr	r3, [r2, #0]
10049b9e:	702b      	strb	r3, [r5, #0]
10049ba0:	2301      	movs	r3, #1
10049ba2:	e0a0      	b.n	10049ce6 <_printf_i+0x1c2>
10049ba4:	6818      	ldr	r0, [r3, #0]
10049ba6:	6809      	ldr	r1, [r1, #0]
10049ba8:	1d02      	adds	r2, r0, #4
10049baa:	060d      	lsls	r5, r1, #24
10049bac:	d50b      	bpl.n	10049bc6 <_printf_i+0xa2>
10049bae:	6806      	ldr	r6, [r0, #0]
10049bb0:	601a      	str	r2, [r3, #0]
10049bb2:	2e00      	cmp	r6, #0
10049bb4:	da03      	bge.n	10049bbe <_printf_i+0x9a>
10049bb6:	232d      	movs	r3, #45	@ 0x2d
10049bb8:	9a03      	ldr	r2, [sp, #12]
10049bba:	4276      	negs	r6, r6
10049bbc:	7013      	strb	r3, [r2, #0]
10049bbe:	4b5e      	ldr	r3, [pc, #376]	@ (10049d38 <_printf_i+0x214>)
10049bc0:	270a      	movs	r7, #10
10049bc2:	9304      	str	r3, [sp, #16]
10049bc4:	e018      	b.n	10049bf8 <_printf_i+0xd4>
10049bc6:	6806      	ldr	r6, [r0, #0]
10049bc8:	601a      	str	r2, [r3, #0]
10049bca:	0649      	lsls	r1, r1, #25
10049bcc:	d5f1      	bpl.n	10049bb2 <_printf_i+0x8e>
10049bce:	b236      	sxth	r6, r6
10049bd0:	e7ef      	b.n	10049bb2 <_printf_i+0x8e>
10049bd2:	6808      	ldr	r0, [r1, #0]
10049bd4:	6819      	ldr	r1, [r3, #0]
10049bd6:	c940      	ldmia	r1!, {r6}
10049bd8:	0605      	lsls	r5, r0, #24
10049bda:	d402      	bmi.n	10049be2 <_printf_i+0xbe>
10049bdc:	0640      	lsls	r0, r0, #25
10049bde:	d500      	bpl.n	10049be2 <_printf_i+0xbe>
10049be0:	b2b6      	uxth	r6, r6
10049be2:	6019      	str	r1, [r3, #0]
10049be4:	4b54      	ldr	r3, [pc, #336]	@ (10049d38 <_printf_i+0x214>)
10049be6:	270a      	movs	r7, #10
10049be8:	9304      	str	r3, [sp, #16]
10049bea:	2a6f      	cmp	r2, #111	@ 0x6f
10049bec:	d100      	bne.n	10049bf0 <_printf_i+0xcc>
10049bee:	3f02      	subs	r7, #2
10049bf0:	0023      	movs	r3, r4
10049bf2:	2200      	movs	r2, #0
10049bf4:	3343      	adds	r3, #67	@ 0x43
10049bf6:	701a      	strb	r2, [r3, #0]
10049bf8:	6863      	ldr	r3, [r4, #4]
10049bfa:	60a3      	str	r3, [r4, #8]
10049bfc:	2b00      	cmp	r3, #0
10049bfe:	db03      	blt.n	10049c08 <_printf_i+0xe4>
10049c00:	2104      	movs	r1, #4
10049c02:	6822      	ldr	r2, [r4, #0]
10049c04:	438a      	bics	r2, r1
10049c06:	6022      	str	r2, [r4, #0]
10049c08:	2e00      	cmp	r6, #0
10049c0a:	d102      	bne.n	10049c12 <_printf_i+0xee>
10049c0c:	9d03      	ldr	r5, [sp, #12]
10049c0e:	2b00      	cmp	r3, #0
10049c10:	d00c      	beq.n	10049c2c <_printf_i+0x108>
10049c12:	9d03      	ldr	r5, [sp, #12]
10049c14:	0030      	movs	r0, r6
10049c16:	0039      	movs	r1, r7
10049c18:	f7f6 fb16 	bl	10040248 <__aeabi_uidivmod>
10049c1c:	9b04      	ldr	r3, [sp, #16]
10049c1e:	3d01      	subs	r5, #1
10049c20:	5c5b      	ldrb	r3, [r3, r1]
10049c22:	702b      	strb	r3, [r5, #0]
10049c24:	0033      	movs	r3, r6
10049c26:	0006      	movs	r6, r0
10049c28:	429f      	cmp	r7, r3
10049c2a:	d9f3      	bls.n	10049c14 <_printf_i+0xf0>
10049c2c:	2f08      	cmp	r7, #8
10049c2e:	d109      	bne.n	10049c44 <_printf_i+0x120>
10049c30:	6823      	ldr	r3, [r4, #0]
10049c32:	07db      	lsls	r3, r3, #31
10049c34:	d506      	bpl.n	10049c44 <_printf_i+0x120>
10049c36:	6862      	ldr	r2, [r4, #4]
10049c38:	6923      	ldr	r3, [r4, #16]
10049c3a:	429a      	cmp	r2, r3
10049c3c:	dc02      	bgt.n	10049c44 <_printf_i+0x120>
10049c3e:	2330      	movs	r3, #48	@ 0x30
10049c40:	3d01      	subs	r5, #1
10049c42:	702b      	strb	r3, [r5, #0]
10049c44:	9b03      	ldr	r3, [sp, #12]
10049c46:	1b5b      	subs	r3, r3, r5
10049c48:	6123      	str	r3, [r4, #16]
10049c4a:	9b07      	ldr	r3, [sp, #28]
10049c4c:	0021      	movs	r1, r4
10049c4e:	9300      	str	r3, [sp, #0]
10049c50:	9805      	ldr	r0, [sp, #20]
10049c52:	9b06      	ldr	r3, [sp, #24]
10049c54:	aa09      	add	r2, sp, #36	@ 0x24
10049c56:	f7ff fef5 	bl	10049a44 <_printf_common>
10049c5a:	3001      	adds	r0, #1
10049c5c:	d148      	bne.n	10049cf0 <_printf_i+0x1cc>
10049c5e:	2001      	movs	r0, #1
10049c60:	4240      	negs	r0, r0
10049c62:	b00b      	add	sp, #44	@ 0x2c
10049c64:	bdf0      	pop	{r4, r5, r6, r7, pc}
10049c66:	2220      	movs	r2, #32
10049c68:	6809      	ldr	r1, [r1, #0]
10049c6a:	430a      	orrs	r2, r1
10049c6c:	6022      	str	r2, [r4, #0]
10049c6e:	2278      	movs	r2, #120	@ 0x78
10049c70:	4932      	ldr	r1, [pc, #200]	@ (10049d3c <_printf_i+0x218>)
10049c72:	9104      	str	r1, [sp, #16]
10049c74:	0021      	movs	r1, r4
10049c76:	3145      	adds	r1, #69	@ 0x45
10049c78:	700a      	strb	r2, [r1, #0]
10049c7a:	6819      	ldr	r1, [r3, #0]
10049c7c:	6822      	ldr	r2, [r4, #0]
10049c7e:	c940      	ldmia	r1!, {r6}
10049c80:	0610      	lsls	r0, r2, #24
10049c82:	d402      	bmi.n	10049c8a <_printf_i+0x166>
10049c84:	0650      	lsls	r0, r2, #25
10049c86:	d500      	bpl.n	10049c8a <_printf_i+0x166>
10049c88:	b2b6      	uxth	r6, r6
10049c8a:	6019      	str	r1, [r3, #0]
10049c8c:	07d3      	lsls	r3, r2, #31
10049c8e:	d502      	bpl.n	10049c96 <_printf_i+0x172>
10049c90:	2320      	movs	r3, #32
10049c92:	4313      	orrs	r3, r2
10049c94:	6023      	str	r3, [r4, #0]
10049c96:	2e00      	cmp	r6, #0
10049c98:	d001      	beq.n	10049c9e <_printf_i+0x17a>
10049c9a:	2710      	movs	r7, #16
10049c9c:	e7a8      	b.n	10049bf0 <_printf_i+0xcc>
10049c9e:	2220      	movs	r2, #32
10049ca0:	6823      	ldr	r3, [r4, #0]
10049ca2:	4393      	bics	r3, r2
10049ca4:	6023      	str	r3, [r4, #0]
10049ca6:	e7f8      	b.n	10049c9a <_printf_i+0x176>
10049ca8:	681a      	ldr	r2, [r3, #0]
10049caa:	680d      	ldr	r5, [r1, #0]
10049cac:	1d10      	adds	r0, r2, #4
10049cae:	6949      	ldr	r1, [r1, #20]
10049cb0:	6018      	str	r0, [r3, #0]
10049cb2:	6813      	ldr	r3, [r2, #0]
10049cb4:	062e      	lsls	r6, r5, #24
10049cb6:	d501      	bpl.n	10049cbc <_printf_i+0x198>
10049cb8:	6019      	str	r1, [r3, #0]
10049cba:	e002      	b.n	10049cc2 <_printf_i+0x19e>
10049cbc:	066d      	lsls	r5, r5, #25
10049cbe:	d5fb      	bpl.n	10049cb8 <_printf_i+0x194>
10049cc0:	8019      	strh	r1, [r3, #0]
10049cc2:	2300      	movs	r3, #0
10049cc4:	9d03      	ldr	r5, [sp, #12]
10049cc6:	6123      	str	r3, [r4, #16]
10049cc8:	e7bf      	b.n	10049c4a <_printf_i+0x126>
10049cca:	681a      	ldr	r2, [r3, #0]
10049ccc:	1d11      	adds	r1, r2, #4
10049cce:	6019      	str	r1, [r3, #0]
10049cd0:	6815      	ldr	r5, [r2, #0]
10049cd2:	2100      	movs	r1, #0
10049cd4:	0028      	movs	r0, r5
10049cd6:	6862      	ldr	r2, [r4, #4]
10049cd8:	f000 f9b3 	bl	1004a042 <memchr>
10049cdc:	2800      	cmp	r0, #0
10049cde:	d001      	beq.n	10049ce4 <_printf_i+0x1c0>
10049ce0:	1b40      	subs	r0, r0, r5
10049ce2:	6060      	str	r0, [r4, #4]
10049ce4:	6863      	ldr	r3, [r4, #4]
10049ce6:	6123      	str	r3, [r4, #16]
10049ce8:	2300      	movs	r3, #0
10049cea:	9a03      	ldr	r2, [sp, #12]
10049cec:	7013      	strb	r3, [r2, #0]
10049cee:	e7ac      	b.n	10049c4a <_printf_i+0x126>
10049cf0:	002a      	movs	r2, r5
10049cf2:	6923      	ldr	r3, [r4, #16]
10049cf4:	9906      	ldr	r1, [sp, #24]
10049cf6:	9805      	ldr	r0, [sp, #20]
10049cf8:	9d07      	ldr	r5, [sp, #28]
10049cfa:	47a8      	blx	r5
10049cfc:	3001      	adds	r0, #1
10049cfe:	d0ae      	beq.n	10049c5e <_printf_i+0x13a>
10049d00:	6823      	ldr	r3, [r4, #0]
10049d02:	079b      	lsls	r3, r3, #30
10049d04:	d415      	bmi.n	10049d32 <_printf_i+0x20e>
10049d06:	9b09      	ldr	r3, [sp, #36]	@ 0x24
10049d08:	68e0      	ldr	r0, [r4, #12]
10049d0a:	4298      	cmp	r0, r3
10049d0c:	daa9      	bge.n	10049c62 <_printf_i+0x13e>
10049d0e:	0018      	movs	r0, r3
10049d10:	e7a7      	b.n	10049c62 <_printf_i+0x13e>
10049d12:	0022      	movs	r2, r4
10049d14:	2301      	movs	r3, #1
10049d16:	9906      	ldr	r1, [sp, #24]
10049d18:	9805      	ldr	r0, [sp, #20]
10049d1a:	9e07      	ldr	r6, [sp, #28]
10049d1c:	3219      	adds	r2, #25
10049d1e:	47b0      	blx	r6
10049d20:	3001      	adds	r0, #1
10049d22:	d09c      	beq.n	10049c5e <_printf_i+0x13a>
10049d24:	3501      	adds	r5, #1
10049d26:	68e3      	ldr	r3, [r4, #12]
10049d28:	9a09      	ldr	r2, [sp, #36]	@ 0x24
10049d2a:	1a9b      	subs	r3, r3, r2
10049d2c:	42ab      	cmp	r3, r5
10049d2e:	dcf0      	bgt.n	10049d12 <_printf_i+0x1ee>
10049d30:	e7e9      	b.n	10049d06 <_printf_i+0x1e2>
10049d32:	2500      	movs	r5, #0
10049d34:	e7f7      	b.n	10049d26 <_printf_i+0x202>
10049d36:	46c0      	nop			@ (mov r8, r8)
10049d38:	1004bf52 	.word	0x1004bf52
10049d3c:	1004bf63 	.word	0x1004bf63

10049d40 <std>:
10049d40:	2300      	movs	r3, #0
10049d42:	b510      	push	{r4, lr}
10049d44:	0004      	movs	r4, r0
10049d46:	6003      	str	r3, [r0, #0]
10049d48:	6043      	str	r3, [r0, #4]
10049d4a:	6083      	str	r3, [r0, #8]
10049d4c:	8181      	strh	r1, [r0, #12]
10049d4e:	6643      	str	r3, [r0, #100]	@ 0x64
10049d50:	81c2      	strh	r2, [r0, #14]
10049d52:	6103      	str	r3, [r0, #16]
10049d54:	6143      	str	r3, [r0, #20]
10049d56:	6183      	str	r3, [r0, #24]
10049d58:	0019      	movs	r1, r3
10049d5a:	2208      	movs	r2, #8
10049d5c:	305c      	adds	r0, #92	@ 0x5c
10049d5e:	f000 f90d 	bl	10049f7c <memset>
10049d62:	4b0b      	ldr	r3, [pc, #44]	@ (10049d90 <std+0x50>)
10049d64:	6224      	str	r4, [r4, #32]
10049d66:	6263      	str	r3, [r4, #36]	@ 0x24
10049d68:	4b0a      	ldr	r3, [pc, #40]	@ (10049d94 <std+0x54>)
10049d6a:	62a3      	str	r3, [r4, #40]	@ 0x28
10049d6c:	4b0a      	ldr	r3, [pc, #40]	@ (10049d98 <std+0x58>)
10049d6e:	62e3      	str	r3, [r4, #44]	@ 0x2c
10049d70:	4b0a      	ldr	r3, [pc, #40]	@ (10049d9c <std+0x5c>)
10049d72:	6323      	str	r3, [r4, #48]	@ 0x30
10049d74:	4b0a      	ldr	r3, [pc, #40]	@ (10049da0 <std+0x60>)
10049d76:	429c      	cmp	r4, r3
10049d78:	d005      	beq.n	10049d86 <std+0x46>
10049d7a:	4b0a      	ldr	r3, [pc, #40]	@ (10049da4 <std+0x64>)
10049d7c:	429c      	cmp	r4, r3
10049d7e:	d002      	beq.n	10049d86 <std+0x46>
10049d80:	4b09      	ldr	r3, [pc, #36]	@ (10049da8 <std+0x68>)
10049d82:	429c      	cmp	r4, r3
10049d84:	d103      	bne.n	10049d8e <std+0x4e>
10049d86:	0020      	movs	r0, r4
10049d88:	3058      	adds	r0, #88	@ 0x58
10049d8a:	f000 f957 	bl	1004a03c <__retarget_lock_init_recursive>
10049d8e:	bd10      	pop	{r4, pc}
10049d90:	10049ec9 	.word	0x10049ec9
10049d94:	10049ef1 	.word	0x10049ef1
10049d98:	10049f29 	.word	0x10049f29
10049d9c:	10049f55 	.word	0x10049f55
10049da0:	200009a8 	.word	0x200009a8
10049da4:	20000a10 	.word	0x20000a10
10049da8:	20000a78 	.word	0x20000a78

10049dac <stdio_exit_handler>:
10049dac:	b510      	push	{r4, lr}
10049dae:	4a03      	ldr	r2, [pc, #12]	@ (10049dbc <stdio_exit_handler+0x10>)
10049db0:	4903      	ldr	r1, [pc, #12]	@ (10049dc0 <stdio_exit_handler+0x14>)
10049db2:	4804      	ldr	r0, [pc, #16]	@ (10049dc4 <stdio_exit_handler+0x18>)
10049db4:	f000 f86c 	bl	10049e90 <_fwalk_sglue>
10049db8:	bd10      	pop	{r4, pc}
10049dba:	46c0      	nop			@ (mov r8, r8)
10049dbc:	20000b60 	.word	0x20000b60
10049dc0:	1004b7bd 	.word	0x1004b7bd
10049dc4:	20000b70 	.word	0x20000b70

10049dc8 <cleanup_stdio>:
10049dc8:	6841      	ldr	r1, [r0, #4]
10049dca:	4b0b      	ldr	r3, [pc, #44]	@ (10049df8 <cleanup_stdio+0x30>)
10049dcc:	b510      	push	{r4, lr}
10049dce:	0004      	movs	r4, r0
10049dd0:	4299      	cmp	r1, r3
10049dd2:	d001      	beq.n	10049dd8 <cleanup_stdio+0x10>
10049dd4:	f001 fcf2 	bl	1004b7bc <_fflush_r>
10049dd8:	68a1      	ldr	r1, [r4, #8]
10049dda:	4b08      	ldr	r3, [pc, #32]	@ (10049dfc <cleanup_stdio+0x34>)
10049ddc:	4299      	cmp	r1, r3
10049dde:	d002      	beq.n	10049de6 <cleanup_stdio+0x1e>
10049de0:	0020      	movs	r0, r4
10049de2:	f001 fceb 	bl	1004b7bc <_fflush_r>
10049de6:	68e1      	ldr	r1, [r4, #12]
10049de8:	4b05      	ldr	r3, [pc, #20]	@ (10049e00 <cleanup_stdio+0x38>)
10049dea:	4299      	cmp	r1, r3
10049dec:	d002      	beq.n	10049df4 <cleanup_stdio+0x2c>
10049dee:	0020      	movs	r0, r4
10049df0:	f001 fce4 	bl	1004b7bc <_fflush_r>
10049df4:	bd10      	pop	{r4, pc}
10049df6:	46c0      	nop			@ (mov r8, r8)
10049df8:	200009a8 	.word	0x200009a8
10049dfc:	20000a10 	.word	0x20000a10
10049e00:	20000a78 	.word	0x20000a78

10049e04 <global_stdio_init.part.0>:
10049e04:	b510      	push	{r4, lr}
10049e06:	4b09      	ldr	r3, [pc, #36]	@ (10049e2c <global_stdio_init.part.0+0x28>)
10049e08:	4a09      	ldr	r2, [pc, #36]	@ (10049e30 <global_stdio_init.part.0+0x2c>)
10049e0a:	2104      	movs	r1, #4
10049e0c:	601a      	str	r2, [r3, #0]
10049e0e:	4809      	ldr	r0, [pc, #36]	@ (10049e34 <global_stdio_init.part.0+0x30>)
10049e10:	2200      	movs	r2, #0
10049e12:	f7ff ff95 	bl	10049d40 <std>
10049e16:	2201      	movs	r2, #1
10049e18:	2109      	movs	r1, #9
10049e1a:	4807      	ldr	r0, [pc, #28]	@ (10049e38 <global_stdio_init.part.0+0x34>)
10049e1c:	f7ff ff90 	bl	10049d40 <std>
10049e20:	2202      	movs	r2, #2
10049e22:	2112      	movs	r1, #18
10049e24:	4805      	ldr	r0, [pc, #20]	@ (10049e3c <global_stdio_init.part.0+0x38>)
10049e26:	f7ff ff8b 	bl	10049d40 <std>
10049e2a:	bd10      	pop	{r4, pc}
10049e2c:	20000ae0 	.word	0x20000ae0
10049e30:	10049dad 	.word	0x10049dad
10049e34:	200009a8 	.word	0x200009a8
10049e38:	20000a10 	.word	0x20000a10
10049e3c:	20000a78 	.word	0x20000a78

10049e40 <__sfp_lock_acquire>:
10049e40:	b510      	push	{r4, lr}
10049e42:	4802      	ldr	r0, [pc, #8]	@ (10049e4c <__sfp_lock_acquire+0xc>)
10049e44:	f000 f8fb 	bl	1004a03e <__retarget_lock_acquire_recursive>
10049e48:	bd10      	pop	{r4, pc}
10049e4a:	46c0      	nop			@ (mov r8, r8)
10049e4c:	20000ae9 	.word	0x20000ae9

10049e50 <__sfp_lock_release>:
10049e50:	b510      	push	{r4, lr}
10049e52:	4802      	ldr	r0, [pc, #8]	@ (10049e5c <__sfp_lock_release+0xc>)
10049e54:	f000 f8f4 	bl	1004a040 <__retarget_lock_release_recursive>
10049e58:	bd10      	pop	{r4, pc}
10049e5a:	46c0      	nop			@ (mov r8, r8)
10049e5c:	20000ae9 	.word	0x20000ae9

10049e60 <__sinit>:
10049e60:	b510      	push	{r4, lr}
10049e62:	0004      	movs	r4, r0
10049e64:	f7ff ffec 	bl	10049e40 <__sfp_lock_acquire>
10049e68:	6a23      	ldr	r3, [r4, #32]
10049e6a:	2b00      	cmp	r3, #0
10049e6c:	d002      	beq.n	10049e74 <__sinit+0x14>
10049e6e:	f7ff ffef 	bl	10049e50 <__sfp_lock_release>
10049e72:	bd10      	pop	{r4, pc}
10049e74:	4b04      	ldr	r3, [pc, #16]	@ (10049e88 <__sinit+0x28>)
10049e76:	6223      	str	r3, [r4, #32]
10049e78:	4b04      	ldr	r3, [pc, #16]	@ (10049e8c <__sinit+0x2c>)
10049e7a:	681b      	ldr	r3, [r3, #0]
10049e7c:	2b00      	cmp	r3, #0
10049e7e:	d1f6      	bne.n	10049e6e <__sinit+0xe>
10049e80:	f7ff ffc0 	bl	10049e04 <global_stdio_init.part.0>
10049e84:	e7f3      	b.n	10049e6e <__sinit+0xe>
10049e86:	46c0      	nop			@ (mov r8, r8)
10049e88:	10049dc9 	.word	0x10049dc9
10049e8c:	20000ae0 	.word	0x20000ae0

10049e90 <_fwalk_sglue>:
10049e90:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
10049e92:	0014      	movs	r4, r2
10049e94:	2600      	movs	r6, #0
10049e96:	9000      	str	r0, [sp, #0]
10049e98:	9101      	str	r1, [sp, #4]
10049e9a:	68a5      	ldr	r5, [r4, #8]
10049e9c:	6867      	ldr	r7, [r4, #4]
10049e9e:	3f01      	subs	r7, #1
10049ea0:	d504      	bpl.n	10049eac <_fwalk_sglue+0x1c>
10049ea2:	6824      	ldr	r4, [r4, #0]
10049ea4:	2c00      	cmp	r4, #0
10049ea6:	d1f8      	bne.n	10049e9a <_fwalk_sglue+0xa>
10049ea8:	0030      	movs	r0, r6
10049eaa:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
10049eac:	89ab      	ldrh	r3, [r5, #12]
10049eae:	2b01      	cmp	r3, #1
10049eb0:	d908      	bls.n	10049ec4 <_fwalk_sglue+0x34>
10049eb2:	220e      	movs	r2, #14
10049eb4:	5eab      	ldrsh	r3, [r5, r2]
10049eb6:	3301      	adds	r3, #1
10049eb8:	d004      	beq.n	10049ec4 <_fwalk_sglue+0x34>
10049eba:	0029      	movs	r1, r5
10049ebc:	9800      	ldr	r0, [sp, #0]
10049ebe:	9b01      	ldr	r3, [sp, #4]
10049ec0:	4798      	blx	r3
10049ec2:	4306      	orrs	r6, r0
10049ec4:	3568      	adds	r5, #104	@ 0x68
10049ec6:	e7ea      	b.n	10049e9e <_fwalk_sglue+0xe>

10049ec8 <__sread>:
10049ec8:	b570      	push	{r4, r5, r6, lr}
10049eca:	000c      	movs	r4, r1
10049ecc:	250e      	movs	r5, #14
10049ece:	5f49      	ldrsh	r1, [r1, r5]
10049ed0:	f000 f886 	bl	10049fe0 <_read_r>
10049ed4:	2800      	cmp	r0, #0
10049ed6:	db03      	blt.n	10049ee0 <__sread+0x18>
10049ed8:	6d63      	ldr	r3, [r4, #84]	@ 0x54
10049eda:	181b      	adds	r3, r3, r0
10049edc:	6563      	str	r3, [r4, #84]	@ 0x54
10049ede:	bd70      	pop	{r4, r5, r6, pc}
10049ee0:	89a3      	ldrh	r3, [r4, #12]
10049ee2:	4a02      	ldr	r2, [pc, #8]	@ (10049eec <__sread+0x24>)
10049ee4:	4013      	ands	r3, r2
10049ee6:	81a3      	strh	r3, [r4, #12]
10049ee8:	e7f9      	b.n	10049ede <__sread+0x16>
10049eea:	46c0      	nop			@ (mov r8, r8)
10049eec:	ffffefff 	.word	0xffffefff

10049ef0 <__swrite>:
10049ef0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10049ef2:	001f      	movs	r7, r3
10049ef4:	898b      	ldrh	r3, [r1, #12]
10049ef6:	0005      	movs	r5, r0
10049ef8:	000c      	movs	r4, r1
10049efa:	0016      	movs	r6, r2
10049efc:	05db      	lsls	r3, r3, #23
10049efe:	d505      	bpl.n	10049f0c <__swrite+0x1c>
10049f00:	230e      	movs	r3, #14
10049f02:	5ec9      	ldrsh	r1, [r1, r3]
10049f04:	2200      	movs	r2, #0
10049f06:	2302      	movs	r3, #2
10049f08:	f000 f856 	bl	10049fb8 <_lseek_r>
10049f0c:	89a3      	ldrh	r3, [r4, #12]
10049f0e:	4a05      	ldr	r2, [pc, #20]	@ (10049f24 <__swrite+0x34>)
10049f10:	0028      	movs	r0, r5
10049f12:	4013      	ands	r3, r2
10049f14:	81a3      	strh	r3, [r4, #12]
10049f16:	0032      	movs	r2, r6
10049f18:	230e      	movs	r3, #14
10049f1a:	5ee1      	ldrsh	r1, [r4, r3]
10049f1c:	003b      	movs	r3, r7
10049f1e:	f000 f873 	bl	1004a008 <_write_r>
10049f22:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10049f24:	ffffefff 	.word	0xffffefff

10049f28 <__sseek>:
10049f28:	b570      	push	{r4, r5, r6, lr}
10049f2a:	000c      	movs	r4, r1
10049f2c:	250e      	movs	r5, #14
10049f2e:	5f49      	ldrsh	r1, [r1, r5]
10049f30:	f000 f842 	bl	10049fb8 <_lseek_r>
10049f34:	89a3      	ldrh	r3, [r4, #12]
10049f36:	1c42      	adds	r2, r0, #1
10049f38:	d103      	bne.n	10049f42 <__sseek+0x1a>
10049f3a:	4a05      	ldr	r2, [pc, #20]	@ (10049f50 <__sseek+0x28>)
10049f3c:	4013      	ands	r3, r2
10049f3e:	81a3      	strh	r3, [r4, #12]
10049f40:	bd70      	pop	{r4, r5, r6, pc}
10049f42:	2280      	movs	r2, #128	@ 0x80
10049f44:	0152      	lsls	r2, r2, #5
10049f46:	4313      	orrs	r3, r2
10049f48:	81a3      	strh	r3, [r4, #12]
10049f4a:	6560      	str	r0, [r4, #84]	@ 0x54
10049f4c:	e7f8      	b.n	10049f40 <__sseek+0x18>
10049f4e:	46c0      	nop			@ (mov r8, r8)
10049f50:	ffffefff 	.word	0xffffefff

10049f54 <__sclose>:
10049f54:	b510      	push	{r4, lr}
10049f56:	230e      	movs	r3, #14
10049f58:	5ec9      	ldrsh	r1, [r1, r3]
10049f5a:	f000 f81b 	bl	10049f94 <_close_r>
10049f5e:	bd10      	pop	{r4, pc}

10049f60 <memcmp>:
10049f60:	b530      	push	{r4, r5, lr}
10049f62:	2400      	movs	r4, #0
10049f64:	3901      	subs	r1, #1
10049f66:	42a2      	cmp	r2, r4
10049f68:	d101      	bne.n	10049f6e <memcmp+0xe>
10049f6a:	2000      	movs	r0, #0
10049f6c:	e005      	b.n	10049f7a <memcmp+0x1a>
10049f6e:	5d03      	ldrb	r3, [r0, r4]
10049f70:	3401      	adds	r4, #1
10049f72:	5d0d      	ldrb	r5, [r1, r4]
10049f74:	42ab      	cmp	r3, r5
10049f76:	d0f6      	beq.n	10049f66 <memcmp+0x6>
10049f78:	1b58      	subs	r0, r3, r5
10049f7a:	bd30      	pop	{r4, r5, pc}

10049f7c <memset>:
10049f7c:	0003      	movs	r3, r0
10049f7e:	1882      	adds	r2, r0, r2
10049f80:	4293      	cmp	r3, r2
10049f82:	d100      	bne.n	10049f86 <memset+0xa>
10049f84:	4770      	bx	lr
10049f86:	7019      	strb	r1, [r3, #0]
10049f88:	3301      	adds	r3, #1
10049f8a:	e7f9      	b.n	10049f80 <memset+0x4>

10049f8c <_localeconv_r>:
10049f8c:	4800      	ldr	r0, [pc, #0]	@ (10049f90 <_localeconv_r+0x4>)
10049f8e:	4770      	bx	lr
10049f90:	20000cac 	.word	0x20000cac

10049f94 <_close_r>:
10049f94:	2300      	movs	r3, #0
10049f96:	b570      	push	{r4, r5, r6, lr}
10049f98:	4d06      	ldr	r5, [pc, #24]	@ (10049fb4 <_close_r+0x20>)
10049f9a:	0004      	movs	r4, r0
10049f9c:	0008      	movs	r0, r1
10049f9e:	602b      	str	r3, [r5, #0]
10049fa0:	f7f9 fa29 	bl	100433f6 <_close>
10049fa4:	1c43      	adds	r3, r0, #1
10049fa6:	d103      	bne.n	10049fb0 <_close_r+0x1c>
10049fa8:	682b      	ldr	r3, [r5, #0]
10049faa:	2b00      	cmp	r3, #0
10049fac:	d000      	beq.n	10049fb0 <_close_r+0x1c>
10049fae:	6023      	str	r3, [r4, #0]
10049fb0:	bd70      	pop	{r4, r5, r6, pc}
10049fb2:	46c0      	nop			@ (mov r8, r8)
10049fb4:	20000ae4 	.word	0x20000ae4

10049fb8 <_lseek_r>:
10049fb8:	b570      	push	{r4, r5, r6, lr}
10049fba:	0004      	movs	r4, r0
10049fbc:	0008      	movs	r0, r1
10049fbe:	0011      	movs	r1, r2
10049fc0:	001a      	movs	r2, r3
10049fc2:	2300      	movs	r3, #0
10049fc4:	4d05      	ldr	r5, [pc, #20]	@ (10049fdc <_lseek_r+0x24>)
10049fc6:	602b      	str	r3, [r5, #0]
10049fc8:	f7f9 fa36 	bl	10043438 <_lseek>
10049fcc:	1c43      	adds	r3, r0, #1
10049fce:	d103      	bne.n	10049fd8 <_lseek_r+0x20>
10049fd0:	682b      	ldr	r3, [r5, #0]
10049fd2:	2b00      	cmp	r3, #0
10049fd4:	d000      	beq.n	10049fd8 <_lseek_r+0x20>
10049fd6:	6023      	str	r3, [r4, #0]
10049fd8:	bd70      	pop	{r4, r5, r6, pc}
10049fda:	46c0      	nop			@ (mov r8, r8)
10049fdc:	20000ae4 	.word	0x20000ae4

10049fe0 <_read_r>:
10049fe0:	b570      	push	{r4, r5, r6, lr}
10049fe2:	0004      	movs	r4, r0
10049fe4:	0008      	movs	r0, r1
10049fe6:	0011      	movs	r1, r2
10049fe8:	001a      	movs	r2, r3
10049fea:	2300      	movs	r3, #0
10049fec:	4d05      	ldr	r5, [pc, #20]	@ (1004a004 <_read_r+0x24>)
10049fee:	602b      	str	r3, [r5, #0]
10049ff0:	f7f9 f9c8 	bl	10043384 <_read>
10049ff4:	1c43      	adds	r3, r0, #1
10049ff6:	d103      	bne.n	1004a000 <_read_r+0x20>
10049ff8:	682b      	ldr	r3, [r5, #0]
10049ffa:	2b00      	cmp	r3, #0
10049ffc:	d000      	beq.n	1004a000 <_read_r+0x20>
10049ffe:	6023      	str	r3, [r4, #0]
1004a000:	bd70      	pop	{r4, r5, r6, pc}
1004a002:	46c0      	nop			@ (mov r8, r8)
1004a004:	20000ae4 	.word	0x20000ae4

1004a008 <_write_r>:
1004a008:	b570      	push	{r4, r5, r6, lr}
1004a00a:	0004      	movs	r4, r0
1004a00c:	0008      	movs	r0, r1
1004a00e:	0011      	movs	r1, r2
1004a010:	001a      	movs	r2, r3
1004a012:	2300      	movs	r3, #0
1004a014:	4d05      	ldr	r5, [pc, #20]	@ (1004a02c <_write_r+0x24>)
1004a016:	602b      	str	r3, [r5, #0]
1004a018:	f7f9 f9d1 	bl	100433be <_write>
1004a01c:	1c43      	adds	r3, r0, #1
1004a01e:	d103      	bne.n	1004a028 <_write_r+0x20>
1004a020:	682b      	ldr	r3, [r5, #0]
1004a022:	2b00      	cmp	r3, #0
1004a024:	d000      	beq.n	1004a028 <_write_r+0x20>
1004a026:	6023      	str	r3, [r4, #0]
1004a028:	bd70      	pop	{r4, r5, r6, pc}
1004a02a:	46c0      	nop			@ (mov r8, r8)
1004a02c:	20000ae4 	.word	0x20000ae4

1004a030 <__errno>:
1004a030:	4b01      	ldr	r3, [pc, #4]	@ (1004a038 <__errno+0x8>)
1004a032:	6818      	ldr	r0, [r3, #0]
1004a034:	4770      	bx	lr
1004a036:	46c0      	nop			@ (mov r8, r8)
1004a038:	20000b6c 	.word	0x20000b6c

1004a03c <__retarget_lock_init_recursive>:
1004a03c:	4770      	bx	lr

1004a03e <__retarget_lock_acquire_recursive>:
1004a03e:	4770      	bx	lr

1004a040 <__retarget_lock_release_recursive>:
1004a040:	4770      	bx	lr

1004a042 <memchr>:
1004a042:	b2c9      	uxtb	r1, r1
1004a044:	1882      	adds	r2, r0, r2
1004a046:	4290      	cmp	r0, r2
1004a048:	d101      	bne.n	1004a04e <memchr+0xc>
1004a04a:	2000      	movs	r0, #0
1004a04c:	4770      	bx	lr
1004a04e:	7803      	ldrb	r3, [r0, #0]
1004a050:	428b      	cmp	r3, r1
1004a052:	d0fb      	beq.n	1004a04c <memchr+0xa>
1004a054:	3001      	adds	r0, #1
1004a056:	e7f6      	b.n	1004a046 <memchr+0x4>

1004a058 <quorem>:
1004a058:	b5f0      	push	{r4, r5, r6, r7, lr}
1004a05a:	6902      	ldr	r2, [r0, #16]
1004a05c:	690f      	ldr	r7, [r1, #16]
1004a05e:	b087      	sub	sp, #28
1004a060:	0006      	movs	r6, r0
1004a062:	000b      	movs	r3, r1
1004a064:	2000      	movs	r0, #0
1004a066:	9102      	str	r1, [sp, #8]
1004a068:	42ba      	cmp	r2, r7
1004a06a:	db6d      	blt.n	1004a148 <quorem+0xf0>
1004a06c:	3f01      	subs	r7, #1
1004a06e:	00bc      	lsls	r4, r7, #2
1004a070:	3314      	adds	r3, #20
1004a072:	9305      	str	r3, [sp, #20]
1004a074:	191b      	adds	r3, r3, r4
1004a076:	9303      	str	r3, [sp, #12]
1004a078:	0033      	movs	r3, r6
1004a07a:	3314      	adds	r3, #20
1004a07c:	191c      	adds	r4, r3, r4
1004a07e:	9301      	str	r3, [sp, #4]
1004a080:	6823      	ldr	r3, [r4, #0]
1004a082:	9304      	str	r3, [sp, #16]
1004a084:	9b03      	ldr	r3, [sp, #12]
1004a086:	9804      	ldr	r0, [sp, #16]
1004a088:	681d      	ldr	r5, [r3, #0]
1004a08a:	3501      	adds	r5, #1
1004a08c:	0029      	movs	r1, r5
1004a08e:	f7f6 f855 	bl	1004013c <__udivsi3>
1004a092:	9b04      	ldr	r3, [sp, #16]
1004a094:	9000      	str	r0, [sp, #0]
1004a096:	42ab      	cmp	r3, r5
1004a098:	d32b      	bcc.n	1004a0f2 <quorem+0x9a>
1004a09a:	9b05      	ldr	r3, [sp, #20]
1004a09c:	9d01      	ldr	r5, [sp, #4]
1004a09e:	469c      	mov	ip, r3
1004a0a0:	2300      	movs	r3, #0
1004a0a2:	9305      	str	r3, [sp, #20]
1004a0a4:	9304      	str	r3, [sp, #16]
1004a0a6:	4662      	mov	r2, ip
1004a0a8:	ca08      	ldmia	r2!, {r3}
1004a0aa:	6828      	ldr	r0, [r5, #0]
1004a0ac:	4694      	mov	ip, r2
1004a0ae:	9a00      	ldr	r2, [sp, #0]
1004a0b0:	b299      	uxth	r1, r3
1004a0b2:	4351      	muls	r1, r2
1004a0b4:	9a05      	ldr	r2, [sp, #20]
1004a0b6:	0c1b      	lsrs	r3, r3, #16
1004a0b8:	1889      	adds	r1, r1, r2
1004a0ba:	9a00      	ldr	r2, [sp, #0]
1004a0bc:	4353      	muls	r3, r2
1004a0be:	0c0a      	lsrs	r2, r1, #16
1004a0c0:	189b      	adds	r3, r3, r2
1004a0c2:	0c1a      	lsrs	r2, r3, #16
1004a0c4:	b289      	uxth	r1, r1
1004a0c6:	9205      	str	r2, [sp, #20]
1004a0c8:	b282      	uxth	r2, r0
1004a0ca:	1a52      	subs	r2, r2, r1
1004a0cc:	9904      	ldr	r1, [sp, #16]
1004a0ce:	0c00      	lsrs	r0, r0, #16
1004a0d0:	1852      	adds	r2, r2, r1
1004a0d2:	b29b      	uxth	r3, r3
1004a0d4:	1411      	asrs	r1, r2, #16
1004a0d6:	1ac3      	subs	r3, r0, r3
1004a0d8:	185b      	adds	r3, r3, r1
1004a0da:	1419      	asrs	r1, r3, #16
1004a0dc:	b292      	uxth	r2, r2
1004a0de:	041b      	lsls	r3, r3, #16
1004a0e0:	431a      	orrs	r2, r3
1004a0e2:	9b03      	ldr	r3, [sp, #12]
1004a0e4:	9104      	str	r1, [sp, #16]
1004a0e6:	c504      	stmia	r5!, {r2}
1004a0e8:	4563      	cmp	r3, ip
1004a0ea:	d2dc      	bcs.n	1004a0a6 <quorem+0x4e>
1004a0ec:	6823      	ldr	r3, [r4, #0]
1004a0ee:	2b00      	cmp	r3, #0
1004a0f0:	d030      	beq.n	1004a154 <quorem+0xfc>
1004a0f2:	0030      	movs	r0, r6
1004a0f4:	9902      	ldr	r1, [sp, #8]
1004a0f6:	f001 f9c5 	bl	1004b484 <__mcmp>
1004a0fa:	2800      	cmp	r0, #0
1004a0fc:	db23      	blt.n	1004a146 <quorem+0xee>
1004a0fe:	0034      	movs	r4, r6
1004a100:	2500      	movs	r5, #0
1004a102:	9902      	ldr	r1, [sp, #8]
1004a104:	3414      	adds	r4, #20
1004a106:	3114      	adds	r1, #20
1004a108:	6823      	ldr	r3, [r4, #0]
1004a10a:	c901      	ldmia	r1!, {r0}
1004a10c:	9302      	str	r3, [sp, #8]
1004a10e:	466b      	mov	r3, sp
1004a110:	891b      	ldrh	r3, [r3, #8]
1004a112:	b282      	uxth	r2, r0
1004a114:	1a9a      	subs	r2, r3, r2
1004a116:	9b02      	ldr	r3, [sp, #8]
1004a118:	1952      	adds	r2, r2, r5
1004a11a:	0c00      	lsrs	r0, r0, #16
1004a11c:	0c1b      	lsrs	r3, r3, #16
1004a11e:	1a1b      	subs	r3, r3, r0
1004a120:	1410      	asrs	r0, r2, #16
1004a122:	181b      	adds	r3, r3, r0
1004a124:	141d      	asrs	r5, r3, #16
1004a126:	b292      	uxth	r2, r2
1004a128:	041b      	lsls	r3, r3, #16
1004a12a:	431a      	orrs	r2, r3
1004a12c:	9b03      	ldr	r3, [sp, #12]
1004a12e:	c404      	stmia	r4!, {r2}
1004a130:	428b      	cmp	r3, r1
1004a132:	d2e9      	bcs.n	1004a108 <quorem+0xb0>
1004a134:	9a01      	ldr	r2, [sp, #4]
1004a136:	00bb      	lsls	r3, r7, #2
1004a138:	18d3      	adds	r3, r2, r3
1004a13a:	681a      	ldr	r2, [r3, #0]
1004a13c:	2a00      	cmp	r2, #0
1004a13e:	d013      	beq.n	1004a168 <quorem+0x110>
1004a140:	9b00      	ldr	r3, [sp, #0]
1004a142:	3301      	adds	r3, #1
1004a144:	9300      	str	r3, [sp, #0]
1004a146:	9800      	ldr	r0, [sp, #0]
1004a148:	b007      	add	sp, #28
1004a14a:	bdf0      	pop	{r4, r5, r6, r7, pc}
1004a14c:	6823      	ldr	r3, [r4, #0]
1004a14e:	2b00      	cmp	r3, #0
1004a150:	d104      	bne.n	1004a15c <quorem+0x104>
1004a152:	3f01      	subs	r7, #1
1004a154:	9b01      	ldr	r3, [sp, #4]
1004a156:	3c04      	subs	r4, #4
1004a158:	42a3      	cmp	r3, r4
1004a15a:	d3f7      	bcc.n	1004a14c <quorem+0xf4>
1004a15c:	6137      	str	r7, [r6, #16]
1004a15e:	e7c8      	b.n	1004a0f2 <quorem+0x9a>
1004a160:	681a      	ldr	r2, [r3, #0]
1004a162:	2a00      	cmp	r2, #0
1004a164:	d104      	bne.n	1004a170 <quorem+0x118>
1004a166:	3f01      	subs	r7, #1
1004a168:	9a01      	ldr	r2, [sp, #4]
1004a16a:	3b04      	subs	r3, #4
1004a16c:	429a      	cmp	r2, r3
1004a16e:	d3f7      	bcc.n	1004a160 <quorem+0x108>
1004a170:	6137      	str	r7, [r6, #16]
1004a172:	e7e5      	b.n	1004a140 <quorem+0xe8>

1004a174 <_dtoa_r>:
1004a174:	b5f0      	push	{r4, r5, r6, r7, lr}
1004a176:	0014      	movs	r4, r2
1004a178:	001d      	movs	r5, r3
1004a17a:	69c6      	ldr	r6, [r0, #28]
1004a17c:	b09d      	sub	sp, #116	@ 0x74
1004a17e:	940a      	str	r4, [sp, #40]	@ 0x28
1004a180:	950b      	str	r5, [sp, #44]	@ 0x2c
1004a182:	9f25      	ldr	r7, [sp, #148]	@ 0x94
1004a184:	9003      	str	r0, [sp, #12]
1004a186:	2e00      	cmp	r6, #0
1004a188:	d10f      	bne.n	1004a1aa <_dtoa_r+0x36>
1004a18a:	2010      	movs	r0, #16
1004a18c:	f000 fe30 	bl	1004adf0 <malloc>
1004a190:	9b03      	ldr	r3, [sp, #12]
1004a192:	1e02      	subs	r2, r0, #0
1004a194:	61d8      	str	r0, [r3, #28]
1004a196:	d104      	bne.n	1004a1a2 <_dtoa_r+0x2e>
1004a198:	21ef      	movs	r1, #239	@ 0xef
1004a19a:	4bc7      	ldr	r3, [pc, #796]	@ (1004a4b8 <_dtoa_r+0x344>)
1004a19c:	48c7      	ldr	r0, [pc, #796]	@ (1004a4bc <_dtoa_r+0x348>)
1004a19e:	f001 fb55 	bl	1004b84c <__assert_func>
1004a1a2:	6046      	str	r6, [r0, #4]
1004a1a4:	6086      	str	r6, [r0, #8]
1004a1a6:	6006      	str	r6, [r0, #0]
1004a1a8:	60c6      	str	r6, [r0, #12]
1004a1aa:	9b03      	ldr	r3, [sp, #12]
1004a1ac:	69db      	ldr	r3, [r3, #28]
1004a1ae:	6819      	ldr	r1, [r3, #0]
1004a1b0:	2900      	cmp	r1, #0
1004a1b2:	d00b      	beq.n	1004a1cc <_dtoa_r+0x58>
1004a1b4:	685a      	ldr	r2, [r3, #4]
1004a1b6:	2301      	movs	r3, #1
1004a1b8:	4093      	lsls	r3, r2
1004a1ba:	604a      	str	r2, [r1, #4]
1004a1bc:	608b      	str	r3, [r1, #8]
1004a1be:	9803      	ldr	r0, [sp, #12]
1004a1c0:	f000 ff16 	bl	1004aff0 <_Bfree>
1004a1c4:	2200      	movs	r2, #0
1004a1c6:	9b03      	ldr	r3, [sp, #12]
1004a1c8:	69db      	ldr	r3, [r3, #28]
1004a1ca:	601a      	str	r2, [r3, #0]
1004a1cc:	2d00      	cmp	r5, #0
1004a1ce:	da1e      	bge.n	1004a20e <_dtoa_r+0x9a>
1004a1d0:	2301      	movs	r3, #1
1004a1d2:	603b      	str	r3, [r7, #0]
1004a1d4:	006b      	lsls	r3, r5, #1
1004a1d6:	085b      	lsrs	r3, r3, #1
1004a1d8:	930b      	str	r3, [sp, #44]	@ 0x2c
1004a1da:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
1004a1dc:	4bb8      	ldr	r3, [pc, #736]	@ (1004a4c0 <_dtoa_r+0x34c>)
1004a1de:	4ab8      	ldr	r2, [pc, #736]	@ (1004a4c0 <_dtoa_r+0x34c>)
1004a1e0:	403b      	ands	r3, r7
1004a1e2:	4293      	cmp	r3, r2
1004a1e4:	d116      	bne.n	1004a214 <_dtoa_r+0xa0>
1004a1e6:	4bb7      	ldr	r3, [pc, #732]	@ (1004a4c4 <_dtoa_r+0x350>)
1004a1e8:	9a24      	ldr	r2, [sp, #144]	@ 0x90
1004a1ea:	6013      	str	r3, [r2, #0]
1004a1ec:	033b      	lsls	r3, r7, #12
1004a1ee:	0b1b      	lsrs	r3, r3, #12
1004a1f0:	4323      	orrs	r3, r4
1004a1f2:	d101      	bne.n	1004a1f8 <_dtoa_r+0x84>
1004a1f4:	f000 fd83 	bl	1004acfe <_dtoa_r+0xb8a>
1004a1f8:	4bb3      	ldr	r3, [pc, #716]	@ (1004a4c8 <_dtoa_r+0x354>)
1004a1fa:	9a26      	ldr	r2, [sp, #152]	@ 0x98
1004a1fc:	9308      	str	r3, [sp, #32]
1004a1fe:	2a00      	cmp	r2, #0
1004a200:	d002      	beq.n	1004a208 <_dtoa_r+0x94>
1004a202:	4bb2      	ldr	r3, [pc, #712]	@ (1004a4cc <_dtoa_r+0x358>)
1004a204:	9a26      	ldr	r2, [sp, #152]	@ 0x98
1004a206:	6013      	str	r3, [r2, #0]
1004a208:	9808      	ldr	r0, [sp, #32]
1004a20a:	b01d      	add	sp, #116	@ 0x74
1004a20c:	bdf0      	pop	{r4, r5, r6, r7, pc}
1004a20e:	2300      	movs	r3, #0
1004a210:	603b      	str	r3, [r7, #0]
1004a212:	e7e2      	b.n	1004a1da <_dtoa_r+0x66>
1004a214:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
1004a216:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
1004a218:	9212      	str	r2, [sp, #72]	@ 0x48
1004a21a:	9313      	str	r3, [sp, #76]	@ 0x4c
1004a21c:	9812      	ldr	r0, [sp, #72]	@ 0x48
1004a21e:	9913      	ldr	r1, [sp, #76]	@ 0x4c
1004a220:	2200      	movs	r2, #0
1004a222:	2300      	movs	r3, #0
1004a224:	f7f6 f910 	bl	10040448 <__aeabi_dcmpeq>
1004a228:	1e06      	subs	r6, r0, #0
1004a22a:	d00b      	beq.n	1004a244 <_dtoa_r+0xd0>
1004a22c:	2301      	movs	r3, #1
1004a22e:	9a24      	ldr	r2, [sp, #144]	@ 0x90
1004a230:	6013      	str	r3, [r2, #0]
1004a232:	9b26      	ldr	r3, [sp, #152]	@ 0x98
1004a234:	2b00      	cmp	r3, #0
1004a236:	d002      	beq.n	1004a23e <_dtoa_r+0xca>
1004a238:	4ba5      	ldr	r3, [pc, #660]	@ (1004a4d0 <_dtoa_r+0x35c>)
1004a23a:	9a26      	ldr	r2, [sp, #152]	@ 0x98
1004a23c:	6013      	str	r3, [r2, #0]
1004a23e:	4ba5      	ldr	r3, [pc, #660]	@ (1004a4d4 <_dtoa_r+0x360>)
1004a240:	9308      	str	r3, [sp, #32]
1004a242:	e7e1      	b.n	1004a208 <_dtoa_r+0x94>
1004a244:	ab1a      	add	r3, sp, #104	@ 0x68
1004a246:	9301      	str	r3, [sp, #4]
1004a248:	ab1b      	add	r3, sp, #108	@ 0x6c
1004a24a:	9300      	str	r3, [sp, #0]
1004a24c:	9803      	ldr	r0, [sp, #12]
1004a24e:	9a12      	ldr	r2, [sp, #72]	@ 0x48
1004a250:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
1004a252:	f001 f9cd 	bl	1004b5f0 <__d2b>
1004a256:	007a      	lsls	r2, r7, #1
1004a258:	9005      	str	r0, [sp, #20]
1004a25a:	0d52      	lsrs	r2, r2, #21
1004a25c:	d100      	bne.n	1004a260 <_dtoa_r+0xec>
1004a25e:	e07b      	b.n	1004a358 <_dtoa_r+0x1e4>
1004a260:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
1004a262:	9618      	str	r6, [sp, #96]	@ 0x60
1004a264:	0319      	lsls	r1, r3, #12
1004a266:	4b9c      	ldr	r3, [pc, #624]	@ (1004a4d8 <_dtoa_r+0x364>)
1004a268:	0b09      	lsrs	r1, r1, #12
1004a26a:	430b      	orrs	r3, r1
1004a26c:	499b      	ldr	r1, [pc, #620]	@ (1004a4dc <_dtoa_r+0x368>)
1004a26e:	1857      	adds	r7, r2, r1
1004a270:	9812      	ldr	r0, [sp, #72]	@ 0x48
1004a272:	9913      	ldr	r1, [sp, #76]	@ 0x4c
1004a274:	0019      	movs	r1, r3
1004a276:	2200      	movs	r2, #0
1004a278:	4b99      	ldr	r3, [pc, #612]	@ (1004a4e0 <_dtoa_r+0x36c>)
1004a27a:	f7f7 fcbb 	bl	10041bf4 <__aeabi_dsub>
1004a27e:	4a99      	ldr	r2, [pc, #612]	@ (1004a4e4 <_dtoa_r+0x370>)
1004a280:	4b99      	ldr	r3, [pc, #612]	@ (1004a4e8 <_dtoa_r+0x374>)
1004a282:	f7f7 f9ef 	bl	10041664 <__aeabi_dmul>
1004a286:	4a99      	ldr	r2, [pc, #612]	@ (1004a4ec <_dtoa_r+0x378>)
1004a288:	4b99      	ldr	r3, [pc, #612]	@ (1004a4f0 <_dtoa_r+0x37c>)
1004a28a:	f7f6 fa43 	bl	10040714 <__aeabi_dadd>
1004a28e:	0004      	movs	r4, r0
1004a290:	0038      	movs	r0, r7
1004a292:	000d      	movs	r5, r1
1004a294:	f7f8 f8a8 	bl	100423e8 <__aeabi_i2d>
1004a298:	4a96      	ldr	r2, [pc, #600]	@ (1004a4f4 <_dtoa_r+0x380>)
1004a29a:	4b97      	ldr	r3, [pc, #604]	@ (1004a4f8 <_dtoa_r+0x384>)
1004a29c:	f7f7 f9e2 	bl	10041664 <__aeabi_dmul>
1004a2a0:	0002      	movs	r2, r0
1004a2a2:	000b      	movs	r3, r1
1004a2a4:	0020      	movs	r0, r4
1004a2a6:	0029      	movs	r1, r5
1004a2a8:	f7f6 fa34 	bl	10040714 <__aeabi_dadd>
1004a2ac:	0004      	movs	r4, r0
1004a2ae:	000d      	movs	r5, r1
1004a2b0:	f7f8 f85e 	bl	10042370 <__aeabi_d2iz>
1004a2b4:	2200      	movs	r2, #0
1004a2b6:	9004      	str	r0, [sp, #16]
1004a2b8:	2300      	movs	r3, #0
1004a2ba:	0020      	movs	r0, r4
1004a2bc:	0029      	movs	r1, r5
1004a2be:	f7f6 f8c9 	bl	10040454 <__aeabi_dcmplt>
1004a2c2:	2800      	cmp	r0, #0
1004a2c4:	d00b      	beq.n	1004a2de <_dtoa_r+0x16a>
1004a2c6:	9804      	ldr	r0, [sp, #16]
1004a2c8:	f7f8 f88e 	bl	100423e8 <__aeabi_i2d>
1004a2cc:	002b      	movs	r3, r5
1004a2ce:	0022      	movs	r2, r4
1004a2d0:	f7f6 f8ba 	bl	10040448 <__aeabi_dcmpeq>
1004a2d4:	4243      	negs	r3, r0
1004a2d6:	4158      	adcs	r0, r3
1004a2d8:	9b04      	ldr	r3, [sp, #16]
1004a2da:	1a1b      	subs	r3, r3, r0
1004a2dc:	9304      	str	r3, [sp, #16]
1004a2de:	2301      	movs	r3, #1
1004a2e0:	9315      	str	r3, [sp, #84]	@ 0x54
1004a2e2:	9b04      	ldr	r3, [sp, #16]
1004a2e4:	2b16      	cmp	r3, #22
1004a2e6:	d810      	bhi.n	1004a30a <_dtoa_r+0x196>
1004a2e8:	9812      	ldr	r0, [sp, #72]	@ 0x48
1004a2ea:	9913      	ldr	r1, [sp, #76]	@ 0x4c
1004a2ec:	9a04      	ldr	r2, [sp, #16]
1004a2ee:	4b83      	ldr	r3, [pc, #524]	@ (1004a4fc <_dtoa_r+0x388>)
1004a2f0:	00d2      	lsls	r2, r2, #3
1004a2f2:	189b      	adds	r3, r3, r2
1004a2f4:	681a      	ldr	r2, [r3, #0]
1004a2f6:	685b      	ldr	r3, [r3, #4]
1004a2f8:	f7f6 f8ac 	bl	10040454 <__aeabi_dcmplt>
1004a2fc:	2800      	cmp	r0, #0
1004a2fe:	d047      	beq.n	1004a390 <_dtoa_r+0x21c>
1004a300:	9b04      	ldr	r3, [sp, #16]
1004a302:	3b01      	subs	r3, #1
1004a304:	9304      	str	r3, [sp, #16]
1004a306:	2300      	movs	r3, #0
1004a308:	9315      	str	r3, [sp, #84]	@ 0x54
1004a30a:	2200      	movs	r2, #0
1004a30c:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
1004a30e:	9206      	str	r2, [sp, #24]
1004a310:	1bdb      	subs	r3, r3, r7
1004a312:	1e5a      	subs	r2, r3, #1
1004a314:	d53e      	bpl.n	1004a394 <_dtoa_r+0x220>
1004a316:	2201      	movs	r2, #1
1004a318:	1ad3      	subs	r3, r2, r3
1004a31a:	9306      	str	r3, [sp, #24]
1004a31c:	2300      	movs	r3, #0
1004a31e:	930d      	str	r3, [sp, #52]	@ 0x34
1004a320:	9b04      	ldr	r3, [sp, #16]
1004a322:	2b00      	cmp	r3, #0
1004a324:	db38      	blt.n	1004a398 <_dtoa_r+0x224>
1004a326:	9a04      	ldr	r2, [sp, #16]
1004a328:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
1004a32a:	4694      	mov	ip, r2
1004a32c:	4463      	add	r3, ip
1004a32e:	930d      	str	r3, [sp, #52]	@ 0x34
1004a330:	2300      	movs	r3, #0
1004a332:	9214      	str	r2, [sp, #80]	@ 0x50
1004a334:	930f      	str	r3, [sp, #60]	@ 0x3c
1004a336:	9b22      	ldr	r3, [sp, #136]	@ 0x88
1004a338:	2401      	movs	r4, #1
1004a33a:	2b09      	cmp	r3, #9
1004a33c:	d867      	bhi.n	1004a40e <_dtoa_r+0x29a>
1004a33e:	2b05      	cmp	r3, #5
1004a340:	dd02      	ble.n	1004a348 <_dtoa_r+0x1d4>
1004a342:	2400      	movs	r4, #0
1004a344:	3b04      	subs	r3, #4
1004a346:	9322      	str	r3, [sp, #136]	@ 0x88
1004a348:	9b22      	ldr	r3, [sp, #136]	@ 0x88
1004a34a:	1e98      	subs	r0, r3, #2
1004a34c:	2803      	cmp	r0, #3
1004a34e:	d867      	bhi.n	1004a420 <_dtoa_r+0x2ac>
1004a350:	f7f5 fee0 	bl	10040114 <__gnu_thumb1_case_uqi>
1004a354:	5b383a2b 	.word	0x5b383a2b
1004a358:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
1004a35a:	9e1a      	ldr	r6, [sp, #104]	@ 0x68
1004a35c:	18f6      	adds	r6, r6, r3
1004a35e:	4b68      	ldr	r3, [pc, #416]	@ (1004a500 <_dtoa_r+0x38c>)
1004a360:	18f2      	adds	r2, r6, r3
1004a362:	2a20      	cmp	r2, #32
1004a364:	dd0f      	ble.n	1004a386 <_dtoa_r+0x212>
1004a366:	2340      	movs	r3, #64	@ 0x40
1004a368:	1a9b      	subs	r3, r3, r2
1004a36a:	409f      	lsls	r7, r3
1004a36c:	4b65      	ldr	r3, [pc, #404]	@ (1004a504 <_dtoa_r+0x390>)
1004a36e:	0038      	movs	r0, r7
1004a370:	18f3      	adds	r3, r6, r3
1004a372:	40dc      	lsrs	r4, r3
1004a374:	4320      	orrs	r0, r4
1004a376:	f7f8 f865 	bl	10042444 <__aeabi_ui2d>
1004a37a:	2201      	movs	r2, #1
1004a37c:	4b62      	ldr	r3, [pc, #392]	@ (1004a508 <_dtoa_r+0x394>)
1004a37e:	1e77      	subs	r7, r6, #1
1004a380:	18cb      	adds	r3, r1, r3
1004a382:	9218      	str	r2, [sp, #96]	@ 0x60
1004a384:	e776      	b.n	1004a274 <_dtoa_r+0x100>
1004a386:	2320      	movs	r3, #32
1004a388:	0020      	movs	r0, r4
1004a38a:	1a9b      	subs	r3, r3, r2
1004a38c:	4098      	lsls	r0, r3
1004a38e:	e7f2      	b.n	1004a376 <_dtoa_r+0x202>
1004a390:	9015      	str	r0, [sp, #84]	@ 0x54
1004a392:	e7ba      	b.n	1004a30a <_dtoa_r+0x196>
1004a394:	920d      	str	r2, [sp, #52]	@ 0x34
1004a396:	e7c3      	b.n	1004a320 <_dtoa_r+0x1ac>
1004a398:	9b06      	ldr	r3, [sp, #24]
1004a39a:	9a04      	ldr	r2, [sp, #16]
1004a39c:	1a9b      	subs	r3, r3, r2
1004a39e:	9306      	str	r3, [sp, #24]
1004a3a0:	4253      	negs	r3, r2
1004a3a2:	930f      	str	r3, [sp, #60]	@ 0x3c
1004a3a4:	2300      	movs	r3, #0
1004a3a6:	9314      	str	r3, [sp, #80]	@ 0x50
1004a3a8:	e7c5      	b.n	1004a336 <_dtoa_r+0x1c2>
1004a3aa:	2300      	movs	r3, #0
1004a3ac:	9310      	str	r3, [sp, #64]	@ 0x40
1004a3ae:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
1004a3b0:	930e      	str	r3, [sp, #56]	@ 0x38
1004a3b2:	9309      	str	r3, [sp, #36]	@ 0x24
1004a3b4:	2b00      	cmp	r3, #0
1004a3b6:	dc13      	bgt.n	1004a3e0 <_dtoa_r+0x26c>
1004a3b8:	2301      	movs	r3, #1
1004a3ba:	001a      	movs	r2, r3
1004a3bc:	930e      	str	r3, [sp, #56]	@ 0x38
1004a3be:	9309      	str	r3, [sp, #36]	@ 0x24
1004a3c0:	9223      	str	r2, [sp, #140]	@ 0x8c
1004a3c2:	e00d      	b.n	1004a3e0 <_dtoa_r+0x26c>
1004a3c4:	2301      	movs	r3, #1
1004a3c6:	e7f1      	b.n	1004a3ac <_dtoa_r+0x238>
1004a3c8:	2300      	movs	r3, #0
1004a3ca:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
1004a3cc:	9310      	str	r3, [sp, #64]	@ 0x40
1004a3ce:	4694      	mov	ip, r2
1004a3d0:	9b04      	ldr	r3, [sp, #16]
1004a3d2:	4463      	add	r3, ip
1004a3d4:	930e      	str	r3, [sp, #56]	@ 0x38
1004a3d6:	3301      	adds	r3, #1
1004a3d8:	9309      	str	r3, [sp, #36]	@ 0x24
1004a3da:	2b00      	cmp	r3, #0
1004a3dc:	dc00      	bgt.n	1004a3e0 <_dtoa_r+0x26c>
1004a3de:	2301      	movs	r3, #1
1004a3e0:	9a03      	ldr	r2, [sp, #12]
1004a3e2:	2100      	movs	r1, #0
1004a3e4:	69d0      	ldr	r0, [r2, #28]
1004a3e6:	2204      	movs	r2, #4
1004a3e8:	0015      	movs	r5, r2
1004a3ea:	3514      	adds	r5, #20
1004a3ec:	429d      	cmp	r5, r3
1004a3ee:	d91b      	bls.n	1004a428 <_dtoa_r+0x2b4>
1004a3f0:	6041      	str	r1, [r0, #4]
1004a3f2:	9803      	ldr	r0, [sp, #12]
1004a3f4:	f000 fdb8 	bl	1004af68 <_Balloc>
1004a3f8:	9008      	str	r0, [sp, #32]
1004a3fa:	2800      	cmp	r0, #0
1004a3fc:	d117      	bne.n	1004a42e <_dtoa_r+0x2ba>
1004a3fe:	21b0      	movs	r1, #176	@ 0xb0
1004a400:	4b42      	ldr	r3, [pc, #264]	@ (1004a50c <_dtoa_r+0x398>)
1004a402:	482e      	ldr	r0, [pc, #184]	@ (1004a4bc <_dtoa_r+0x348>)
1004a404:	9a08      	ldr	r2, [sp, #32]
1004a406:	31ff      	adds	r1, #255	@ 0xff
1004a408:	e6c9      	b.n	1004a19e <_dtoa_r+0x2a>
1004a40a:	2301      	movs	r3, #1
1004a40c:	e7dd      	b.n	1004a3ca <_dtoa_r+0x256>
1004a40e:	2300      	movs	r3, #0
1004a410:	9410      	str	r4, [sp, #64]	@ 0x40
1004a412:	9322      	str	r3, [sp, #136]	@ 0x88
1004a414:	3b01      	subs	r3, #1
1004a416:	930e      	str	r3, [sp, #56]	@ 0x38
1004a418:	9309      	str	r3, [sp, #36]	@ 0x24
1004a41a:	2200      	movs	r2, #0
1004a41c:	3313      	adds	r3, #19
1004a41e:	e7cf      	b.n	1004a3c0 <_dtoa_r+0x24c>
1004a420:	2301      	movs	r3, #1
1004a422:	9310      	str	r3, [sp, #64]	@ 0x40
1004a424:	3b02      	subs	r3, #2
1004a426:	e7f6      	b.n	1004a416 <_dtoa_r+0x2a2>
1004a428:	3101      	adds	r1, #1
1004a42a:	0052      	lsls	r2, r2, #1
1004a42c:	e7dc      	b.n	1004a3e8 <_dtoa_r+0x274>
1004a42e:	9b03      	ldr	r3, [sp, #12]
1004a430:	9a08      	ldr	r2, [sp, #32]
1004a432:	69db      	ldr	r3, [r3, #28]
1004a434:	601a      	str	r2, [r3, #0]
1004a436:	9b09      	ldr	r3, [sp, #36]	@ 0x24
1004a438:	2b0e      	cmp	r3, #14
1004a43a:	d900      	bls.n	1004a43e <_dtoa_r+0x2ca>
1004a43c:	e0d9      	b.n	1004a5f2 <_dtoa_r+0x47e>
1004a43e:	2c00      	cmp	r4, #0
1004a440:	d100      	bne.n	1004a444 <_dtoa_r+0x2d0>
1004a442:	e0d6      	b.n	1004a5f2 <_dtoa_r+0x47e>
1004a444:	9b04      	ldr	r3, [sp, #16]
1004a446:	2b00      	cmp	r3, #0
1004a448:	dd64      	ble.n	1004a514 <_dtoa_r+0x3a0>
1004a44a:	210f      	movs	r1, #15
1004a44c:	9a04      	ldr	r2, [sp, #16]
1004a44e:	4b2b      	ldr	r3, [pc, #172]	@ (1004a4fc <_dtoa_r+0x388>)
1004a450:	400a      	ands	r2, r1
1004a452:	00d2      	lsls	r2, r2, #3
1004a454:	189b      	adds	r3, r3, r2
1004a456:	681e      	ldr	r6, [r3, #0]
1004a458:	685f      	ldr	r7, [r3, #4]
1004a45a:	9b04      	ldr	r3, [sp, #16]
1004a45c:	2402      	movs	r4, #2
1004a45e:	111d      	asrs	r5, r3, #4
1004a460:	05db      	lsls	r3, r3, #23
1004a462:	d50a      	bpl.n	1004a47a <_dtoa_r+0x306>
1004a464:	4b2a      	ldr	r3, [pc, #168]	@ (1004a510 <_dtoa_r+0x39c>)
1004a466:	400d      	ands	r5, r1
1004a468:	6a1a      	ldr	r2, [r3, #32]
1004a46a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
1004a46c:	9812      	ldr	r0, [sp, #72]	@ 0x48
1004a46e:	9913      	ldr	r1, [sp, #76]	@ 0x4c
1004a470:	f7f6 fcb4 	bl	10040ddc <__aeabi_ddiv>
1004a474:	900a      	str	r0, [sp, #40]	@ 0x28
1004a476:	910b      	str	r1, [sp, #44]	@ 0x2c
1004a478:	3401      	adds	r4, #1
1004a47a:	4b25      	ldr	r3, [pc, #148]	@ (1004a510 <_dtoa_r+0x39c>)
1004a47c:	930c      	str	r3, [sp, #48]	@ 0x30
1004a47e:	2d00      	cmp	r5, #0
1004a480:	d108      	bne.n	1004a494 <_dtoa_r+0x320>
1004a482:	980a      	ldr	r0, [sp, #40]	@ 0x28
1004a484:	990b      	ldr	r1, [sp, #44]	@ 0x2c
1004a486:	0032      	movs	r2, r6
1004a488:	003b      	movs	r3, r7
1004a48a:	f7f6 fca7 	bl	10040ddc <__aeabi_ddiv>
1004a48e:	900a      	str	r0, [sp, #40]	@ 0x28
1004a490:	910b      	str	r1, [sp, #44]	@ 0x2c
1004a492:	e05a      	b.n	1004a54a <_dtoa_r+0x3d6>
1004a494:	2301      	movs	r3, #1
1004a496:	421d      	tst	r5, r3
1004a498:	d009      	beq.n	1004a4ae <_dtoa_r+0x33a>
1004a49a:	18e4      	adds	r4, r4, r3
1004a49c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
1004a49e:	0030      	movs	r0, r6
1004a4a0:	681a      	ldr	r2, [r3, #0]
1004a4a2:	685b      	ldr	r3, [r3, #4]
1004a4a4:	0039      	movs	r1, r7
1004a4a6:	f7f7 f8dd 	bl	10041664 <__aeabi_dmul>
1004a4aa:	0006      	movs	r6, r0
1004a4ac:	000f      	movs	r7, r1
1004a4ae:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
1004a4b0:	106d      	asrs	r5, r5, #1
1004a4b2:	3308      	adds	r3, #8
1004a4b4:	e7e2      	b.n	1004a47c <_dtoa_r+0x308>
1004a4b6:	46c0      	nop			@ (mov r8, r8)
1004a4b8:	1004bf81 	.word	0x1004bf81
1004a4bc:	1004bf98 	.word	0x1004bf98
1004a4c0:	7ff00000 	.word	0x7ff00000
1004a4c4:	0000270f 	.word	0x0000270f
1004a4c8:	1004bf7d 	.word	0x1004bf7d
1004a4cc:	1004bf80 	.word	0x1004bf80
1004a4d0:	1004bf51 	.word	0x1004bf51
1004a4d4:	1004bf50 	.word	0x1004bf50
1004a4d8:	3ff00000 	.word	0x3ff00000
1004a4dc:	fffffc01 	.word	0xfffffc01
1004a4e0:	3ff80000 	.word	0x3ff80000
1004a4e4:	636f4361 	.word	0x636f4361
1004a4e8:	3fd287a7 	.word	0x3fd287a7
1004a4ec:	8b60c8b3 	.word	0x8b60c8b3
1004a4f0:	3fc68a28 	.word	0x3fc68a28
1004a4f4:	509f79fb 	.word	0x509f79fb
1004a4f8:	3fd34413 	.word	0x3fd34413
1004a4fc:	1004c090 	.word	0x1004c090
1004a500:	00000432 	.word	0x00000432
1004a504:	00000412 	.word	0x00000412
1004a508:	fe100000 	.word	0xfe100000
1004a50c:	1004bff0 	.word	0x1004bff0
1004a510:	1004c068 	.word	0x1004c068
1004a514:	9b04      	ldr	r3, [sp, #16]
1004a516:	2402      	movs	r4, #2
1004a518:	2b00      	cmp	r3, #0
1004a51a:	d016      	beq.n	1004a54a <_dtoa_r+0x3d6>
1004a51c:	9812      	ldr	r0, [sp, #72]	@ 0x48
1004a51e:	9913      	ldr	r1, [sp, #76]	@ 0x4c
1004a520:	220f      	movs	r2, #15
1004a522:	425d      	negs	r5, r3
1004a524:	402a      	ands	r2, r5
1004a526:	4bd7      	ldr	r3, [pc, #860]	@ (1004a884 <_dtoa_r+0x710>)
1004a528:	00d2      	lsls	r2, r2, #3
1004a52a:	189b      	adds	r3, r3, r2
1004a52c:	681a      	ldr	r2, [r3, #0]
1004a52e:	685b      	ldr	r3, [r3, #4]
1004a530:	f7f7 f898 	bl	10041664 <__aeabi_dmul>
1004a534:	2701      	movs	r7, #1
1004a536:	2300      	movs	r3, #0
1004a538:	900a      	str	r0, [sp, #40]	@ 0x28
1004a53a:	910b      	str	r1, [sp, #44]	@ 0x2c
1004a53c:	4ed2      	ldr	r6, [pc, #840]	@ (1004a888 <_dtoa_r+0x714>)
1004a53e:	112d      	asrs	r5, r5, #4
1004a540:	2d00      	cmp	r5, #0
1004a542:	d000      	beq.n	1004a546 <_dtoa_r+0x3d2>
1004a544:	e0ba      	b.n	1004a6bc <_dtoa_r+0x548>
1004a546:	2b00      	cmp	r3, #0
1004a548:	d1a1      	bne.n	1004a48e <_dtoa_r+0x31a>
1004a54a:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
1004a54c:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
1004a54e:	9b15      	ldr	r3, [sp, #84]	@ 0x54
1004a550:	2b00      	cmp	r3, #0
1004a552:	d100      	bne.n	1004a556 <_dtoa_r+0x3e2>
1004a554:	e0bd      	b.n	1004a6d2 <_dtoa_r+0x55e>
1004a556:	2200      	movs	r2, #0
1004a558:	0030      	movs	r0, r6
1004a55a:	0039      	movs	r1, r7
1004a55c:	4bcb      	ldr	r3, [pc, #812]	@ (1004a88c <_dtoa_r+0x718>)
1004a55e:	f7f5 ff79 	bl	10040454 <__aeabi_dcmplt>
1004a562:	2800      	cmp	r0, #0
1004a564:	d100      	bne.n	1004a568 <_dtoa_r+0x3f4>
1004a566:	e0b4      	b.n	1004a6d2 <_dtoa_r+0x55e>
1004a568:	9b09      	ldr	r3, [sp, #36]	@ 0x24
1004a56a:	2b00      	cmp	r3, #0
1004a56c:	d100      	bne.n	1004a570 <_dtoa_r+0x3fc>
1004a56e:	e0b0      	b.n	1004a6d2 <_dtoa_r+0x55e>
1004a570:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
1004a572:	2b00      	cmp	r3, #0
1004a574:	dd39      	ble.n	1004a5ea <_dtoa_r+0x476>
1004a576:	9b04      	ldr	r3, [sp, #16]
1004a578:	2200      	movs	r2, #0
1004a57a:	3b01      	subs	r3, #1
1004a57c:	930c      	str	r3, [sp, #48]	@ 0x30
1004a57e:	0030      	movs	r0, r6
1004a580:	4bc3      	ldr	r3, [pc, #780]	@ (1004a890 <_dtoa_r+0x71c>)
1004a582:	0039      	movs	r1, r7
1004a584:	f7f7 f86e 	bl	10041664 <__aeabi_dmul>
1004a588:	900a      	str	r0, [sp, #40]	@ 0x28
1004a58a:	910b      	str	r1, [sp, #44]	@ 0x2c
1004a58c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
1004a58e:	3401      	adds	r4, #1
1004a590:	0020      	movs	r0, r4
1004a592:	9311      	str	r3, [sp, #68]	@ 0x44
1004a594:	f7f7 ff28 	bl	100423e8 <__aeabi_i2d>
1004a598:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
1004a59a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
1004a59c:	f7f7 f862 	bl	10041664 <__aeabi_dmul>
1004a5a0:	4bbc      	ldr	r3, [pc, #752]	@ (1004a894 <_dtoa_r+0x720>)
1004a5a2:	2200      	movs	r2, #0
1004a5a4:	f7f6 f8b6 	bl	10040714 <__aeabi_dadd>
1004a5a8:	4bbb      	ldr	r3, [pc, #748]	@ (1004a898 <_dtoa_r+0x724>)
1004a5aa:	0006      	movs	r6, r0
1004a5ac:	18cf      	adds	r7, r1, r3
1004a5ae:	9b11      	ldr	r3, [sp, #68]	@ 0x44
1004a5b0:	2b00      	cmp	r3, #0
1004a5b2:	d000      	beq.n	1004a5b6 <_dtoa_r+0x442>
1004a5b4:	e091      	b.n	1004a6da <_dtoa_r+0x566>
1004a5b6:	980a      	ldr	r0, [sp, #40]	@ 0x28
1004a5b8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
1004a5ba:	2200      	movs	r2, #0
1004a5bc:	4bb7      	ldr	r3, [pc, #732]	@ (1004a89c <_dtoa_r+0x728>)
1004a5be:	f7f7 fb19 	bl	10041bf4 <__aeabi_dsub>
1004a5c2:	0032      	movs	r2, r6
1004a5c4:	003b      	movs	r3, r7
1004a5c6:	0004      	movs	r4, r0
1004a5c8:	000d      	movs	r5, r1
1004a5ca:	f7f5 ff57 	bl	1004047c <__aeabi_dcmpgt>
1004a5ce:	2800      	cmp	r0, #0
1004a5d0:	d000      	beq.n	1004a5d4 <_dtoa_r+0x460>
1004a5d2:	e29d      	b.n	1004ab10 <_dtoa_r+0x99c>
1004a5d4:	2180      	movs	r1, #128	@ 0x80
1004a5d6:	0609      	lsls	r1, r1, #24
1004a5d8:	187b      	adds	r3, r7, r1
1004a5da:	0032      	movs	r2, r6
1004a5dc:	0020      	movs	r0, r4
1004a5de:	0029      	movs	r1, r5
1004a5e0:	f7f5 ff38 	bl	10040454 <__aeabi_dcmplt>
1004a5e4:	2800      	cmp	r0, #0
1004a5e6:	d000      	beq.n	1004a5ea <_dtoa_r+0x476>
1004a5e8:	e130      	b.n	1004a84c <_dtoa_r+0x6d8>
1004a5ea:	9b12      	ldr	r3, [sp, #72]	@ 0x48
1004a5ec:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
1004a5ee:	930a      	str	r3, [sp, #40]	@ 0x28
1004a5f0:	940b      	str	r4, [sp, #44]	@ 0x2c
1004a5f2:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
1004a5f4:	2b00      	cmp	r3, #0
1004a5f6:	da00      	bge.n	1004a5fa <_dtoa_r+0x486>
1004a5f8:	e177      	b.n	1004a8ea <_dtoa_r+0x776>
1004a5fa:	9a04      	ldr	r2, [sp, #16]
1004a5fc:	2a0e      	cmp	r2, #14
1004a5fe:	dd00      	ble.n	1004a602 <_dtoa_r+0x48e>
1004a600:	e173      	b.n	1004a8ea <_dtoa_r+0x776>
1004a602:	4ba0      	ldr	r3, [pc, #640]	@ (1004a884 <_dtoa_r+0x710>)
1004a604:	00d2      	lsls	r2, r2, #3
1004a606:	189b      	adds	r3, r3, r2
1004a608:	685c      	ldr	r4, [r3, #4]
1004a60a:	681b      	ldr	r3, [r3, #0]
1004a60c:	9306      	str	r3, [sp, #24]
1004a60e:	9407      	str	r4, [sp, #28]
1004a610:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
1004a612:	2b00      	cmp	r3, #0
1004a614:	da03      	bge.n	1004a61e <_dtoa_r+0x4aa>
1004a616:	9b09      	ldr	r3, [sp, #36]	@ 0x24
1004a618:	2b00      	cmp	r3, #0
1004a61a:	dc00      	bgt.n	1004a61e <_dtoa_r+0x4aa>
1004a61c:	e106      	b.n	1004a82c <_dtoa_r+0x6b8>
1004a61e:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
1004a620:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
1004a622:	9b09      	ldr	r3, [sp, #36]	@ 0x24
1004a624:	9d08      	ldr	r5, [sp, #32]
1004a626:	3b01      	subs	r3, #1
1004a628:	195b      	adds	r3, r3, r5
1004a62a:	930a      	str	r3, [sp, #40]	@ 0x28
1004a62c:	9a06      	ldr	r2, [sp, #24]
1004a62e:	9b07      	ldr	r3, [sp, #28]
1004a630:	0030      	movs	r0, r6
1004a632:	0039      	movs	r1, r7
1004a634:	f7f6 fbd2 	bl	10040ddc <__aeabi_ddiv>
1004a638:	f7f7 fe9a 	bl	10042370 <__aeabi_d2iz>
1004a63c:	9009      	str	r0, [sp, #36]	@ 0x24
1004a63e:	f7f7 fed3 	bl	100423e8 <__aeabi_i2d>
1004a642:	9a06      	ldr	r2, [sp, #24]
1004a644:	9b07      	ldr	r3, [sp, #28]
1004a646:	f7f7 f80d 	bl	10041664 <__aeabi_dmul>
1004a64a:	0002      	movs	r2, r0
1004a64c:	000b      	movs	r3, r1
1004a64e:	0030      	movs	r0, r6
1004a650:	0039      	movs	r1, r7
1004a652:	f7f7 facf 	bl	10041bf4 <__aeabi_dsub>
1004a656:	002b      	movs	r3, r5
1004a658:	9a09      	ldr	r2, [sp, #36]	@ 0x24
1004a65a:	3501      	adds	r5, #1
1004a65c:	3230      	adds	r2, #48	@ 0x30
1004a65e:	701a      	strb	r2, [r3, #0]
1004a660:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
1004a662:	002c      	movs	r4, r5
1004a664:	429a      	cmp	r2, r3
1004a666:	d000      	beq.n	1004a66a <_dtoa_r+0x4f6>
1004a668:	e131      	b.n	1004a8ce <_dtoa_r+0x75a>
1004a66a:	0002      	movs	r2, r0
1004a66c:	000b      	movs	r3, r1
1004a66e:	f7f6 f851 	bl	10040714 <__aeabi_dadd>
1004a672:	9a06      	ldr	r2, [sp, #24]
1004a674:	9b07      	ldr	r3, [sp, #28]
1004a676:	0006      	movs	r6, r0
1004a678:	000f      	movs	r7, r1
1004a67a:	f7f5 feff 	bl	1004047c <__aeabi_dcmpgt>
1004a67e:	2800      	cmp	r0, #0
1004a680:	d000      	beq.n	1004a684 <_dtoa_r+0x510>
1004a682:	e10f      	b.n	1004a8a4 <_dtoa_r+0x730>
1004a684:	9a06      	ldr	r2, [sp, #24]
1004a686:	9b07      	ldr	r3, [sp, #28]
1004a688:	0030      	movs	r0, r6
1004a68a:	0039      	movs	r1, r7
1004a68c:	f7f5 fedc 	bl	10040448 <__aeabi_dcmpeq>
1004a690:	2800      	cmp	r0, #0
1004a692:	d003      	beq.n	1004a69c <_dtoa_r+0x528>
1004a694:	9b09      	ldr	r3, [sp, #36]	@ 0x24
1004a696:	07dd      	lsls	r5, r3, #31
1004a698:	d500      	bpl.n	1004a69c <_dtoa_r+0x528>
1004a69a:	e103      	b.n	1004a8a4 <_dtoa_r+0x730>
1004a69c:	9905      	ldr	r1, [sp, #20]
1004a69e:	9803      	ldr	r0, [sp, #12]
1004a6a0:	f000 fca6 	bl	1004aff0 <_Bfree>
1004a6a4:	2300      	movs	r3, #0
1004a6a6:	7023      	strb	r3, [r4, #0]
1004a6a8:	9b04      	ldr	r3, [sp, #16]
1004a6aa:	9a24      	ldr	r2, [sp, #144]	@ 0x90
1004a6ac:	3301      	adds	r3, #1
1004a6ae:	6013      	str	r3, [r2, #0]
1004a6b0:	9b26      	ldr	r3, [sp, #152]	@ 0x98
1004a6b2:	2b00      	cmp	r3, #0
1004a6b4:	d100      	bne.n	1004a6b8 <_dtoa_r+0x544>
1004a6b6:	e5a7      	b.n	1004a208 <_dtoa_r+0x94>
1004a6b8:	601c      	str	r4, [r3, #0]
1004a6ba:	e5a5      	b.n	1004a208 <_dtoa_r+0x94>
1004a6bc:	423d      	tst	r5, r7
1004a6be:	d005      	beq.n	1004a6cc <_dtoa_r+0x558>
1004a6c0:	6832      	ldr	r2, [r6, #0]
1004a6c2:	6873      	ldr	r3, [r6, #4]
1004a6c4:	f7f6 ffce 	bl	10041664 <__aeabi_dmul>
1004a6c8:	003b      	movs	r3, r7
1004a6ca:	3401      	adds	r4, #1
1004a6cc:	106d      	asrs	r5, r5, #1
1004a6ce:	3608      	adds	r6, #8
1004a6d0:	e736      	b.n	1004a540 <_dtoa_r+0x3cc>
1004a6d2:	9b04      	ldr	r3, [sp, #16]
1004a6d4:	930c      	str	r3, [sp, #48]	@ 0x30
1004a6d6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
1004a6d8:	e75a      	b.n	1004a590 <_dtoa_r+0x41c>
1004a6da:	9a11      	ldr	r2, [sp, #68]	@ 0x44
1004a6dc:	4b69      	ldr	r3, [pc, #420]	@ (1004a884 <_dtoa_r+0x710>)
1004a6de:	3a01      	subs	r2, #1
1004a6e0:	00d2      	lsls	r2, r2, #3
1004a6e2:	9910      	ldr	r1, [sp, #64]	@ 0x40
1004a6e4:	189b      	adds	r3, r3, r2
1004a6e6:	681a      	ldr	r2, [r3, #0]
1004a6e8:	685b      	ldr	r3, [r3, #4]
1004a6ea:	2900      	cmp	r1, #0
1004a6ec:	d04c      	beq.n	1004a788 <_dtoa_r+0x614>
1004a6ee:	2000      	movs	r0, #0
1004a6f0:	496b      	ldr	r1, [pc, #428]	@ (1004a8a0 <_dtoa_r+0x72c>)
1004a6f2:	f7f6 fb73 	bl	10040ddc <__aeabi_ddiv>
1004a6f6:	0032      	movs	r2, r6
1004a6f8:	003b      	movs	r3, r7
1004a6fa:	f7f7 fa7b 	bl	10041bf4 <__aeabi_dsub>
1004a6fe:	9a08      	ldr	r2, [sp, #32]
1004a700:	0006      	movs	r6, r0
1004a702:	4694      	mov	ip, r2
1004a704:	000f      	movs	r7, r1
1004a706:	9b08      	ldr	r3, [sp, #32]
1004a708:	9316      	str	r3, [sp, #88]	@ 0x58
1004a70a:	9b11      	ldr	r3, [sp, #68]	@ 0x44
1004a70c:	4463      	add	r3, ip
1004a70e:	9311      	str	r3, [sp, #68]	@ 0x44
1004a710:	980a      	ldr	r0, [sp, #40]	@ 0x28
1004a712:	990b      	ldr	r1, [sp, #44]	@ 0x2c
1004a714:	f7f7 fe2c 	bl	10042370 <__aeabi_d2iz>
1004a718:	0005      	movs	r5, r0
1004a71a:	f7f7 fe65 	bl	100423e8 <__aeabi_i2d>
1004a71e:	0002      	movs	r2, r0
1004a720:	000b      	movs	r3, r1
1004a722:	980a      	ldr	r0, [sp, #40]	@ 0x28
1004a724:	990b      	ldr	r1, [sp, #44]	@ 0x2c
1004a726:	f7f7 fa65 	bl	10041bf4 <__aeabi_dsub>
1004a72a:	9b16      	ldr	r3, [sp, #88]	@ 0x58
1004a72c:	3530      	adds	r5, #48	@ 0x30
1004a72e:	1c5c      	adds	r4, r3, #1
1004a730:	701d      	strb	r5, [r3, #0]
1004a732:	0032      	movs	r2, r6
1004a734:	003b      	movs	r3, r7
1004a736:	900a      	str	r0, [sp, #40]	@ 0x28
1004a738:	910b      	str	r1, [sp, #44]	@ 0x2c
1004a73a:	f7f5 fe8b 	bl	10040454 <__aeabi_dcmplt>
1004a73e:	2800      	cmp	r0, #0
1004a740:	d16a      	bne.n	1004a818 <_dtoa_r+0x6a4>
1004a742:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
1004a744:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
1004a746:	2000      	movs	r0, #0
1004a748:	4950      	ldr	r1, [pc, #320]	@ (1004a88c <_dtoa_r+0x718>)
1004a74a:	f7f7 fa53 	bl	10041bf4 <__aeabi_dsub>
1004a74e:	0032      	movs	r2, r6
1004a750:	003b      	movs	r3, r7
1004a752:	f7f5 fe7f 	bl	10040454 <__aeabi_dcmplt>
1004a756:	2800      	cmp	r0, #0
1004a758:	d000      	beq.n	1004a75c <_dtoa_r+0x5e8>
1004a75a:	e0a5      	b.n	1004a8a8 <_dtoa_r+0x734>
1004a75c:	9b11      	ldr	r3, [sp, #68]	@ 0x44
1004a75e:	42a3      	cmp	r3, r4
1004a760:	d100      	bne.n	1004a764 <_dtoa_r+0x5f0>
1004a762:	e742      	b.n	1004a5ea <_dtoa_r+0x476>
1004a764:	2200      	movs	r2, #0
1004a766:	0030      	movs	r0, r6
1004a768:	0039      	movs	r1, r7
1004a76a:	4b49      	ldr	r3, [pc, #292]	@ (1004a890 <_dtoa_r+0x71c>)
1004a76c:	f7f6 ff7a 	bl	10041664 <__aeabi_dmul>
1004a770:	2200      	movs	r2, #0
1004a772:	0006      	movs	r6, r0
1004a774:	000f      	movs	r7, r1
1004a776:	980a      	ldr	r0, [sp, #40]	@ 0x28
1004a778:	990b      	ldr	r1, [sp, #44]	@ 0x2c
1004a77a:	4b45      	ldr	r3, [pc, #276]	@ (1004a890 <_dtoa_r+0x71c>)
1004a77c:	f7f6 ff72 	bl	10041664 <__aeabi_dmul>
1004a780:	9416      	str	r4, [sp, #88]	@ 0x58
1004a782:	900a      	str	r0, [sp, #40]	@ 0x28
1004a784:	910b      	str	r1, [sp, #44]	@ 0x2c
1004a786:	e7c3      	b.n	1004a710 <_dtoa_r+0x59c>
1004a788:	0030      	movs	r0, r6
1004a78a:	0039      	movs	r1, r7
1004a78c:	f7f6 ff6a 	bl	10041664 <__aeabi_dmul>
1004a790:	9d08      	ldr	r5, [sp, #32]
1004a792:	9a11      	ldr	r2, [sp, #68]	@ 0x44
1004a794:	002b      	movs	r3, r5
1004a796:	4694      	mov	ip, r2
1004a798:	9016      	str	r0, [sp, #88]	@ 0x58
1004a79a:	9117      	str	r1, [sp, #92]	@ 0x5c
1004a79c:	4463      	add	r3, ip
1004a79e:	9319      	str	r3, [sp, #100]	@ 0x64
1004a7a0:	980a      	ldr	r0, [sp, #40]	@ 0x28
1004a7a2:	990b      	ldr	r1, [sp, #44]	@ 0x2c
1004a7a4:	f7f7 fde4 	bl	10042370 <__aeabi_d2iz>
1004a7a8:	0004      	movs	r4, r0
1004a7aa:	f7f7 fe1d 	bl	100423e8 <__aeabi_i2d>
1004a7ae:	000b      	movs	r3, r1
1004a7b0:	0002      	movs	r2, r0
1004a7b2:	980a      	ldr	r0, [sp, #40]	@ 0x28
1004a7b4:	990b      	ldr	r1, [sp, #44]	@ 0x2c
1004a7b6:	f7f7 fa1d 	bl	10041bf4 <__aeabi_dsub>
1004a7ba:	3430      	adds	r4, #48	@ 0x30
1004a7bc:	9b19      	ldr	r3, [sp, #100]	@ 0x64
1004a7be:	702c      	strb	r4, [r5, #0]
1004a7c0:	3501      	adds	r5, #1
1004a7c2:	0006      	movs	r6, r0
1004a7c4:	000f      	movs	r7, r1
1004a7c6:	42ab      	cmp	r3, r5
1004a7c8:	d129      	bne.n	1004a81e <_dtoa_r+0x6aa>
1004a7ca:	9816      	ldr	r0, [sp, #88]	@ 0x58
1004a7cc:	9917      	ldr	r1, [sp, #92]	@ 0x5c
1004a7ce:	9b08      	ldr	r3, [sp, #32]
1004a7d0:	9c11      	ldr	r4, [sp, #68]	@ 0x44
1004a7d2:	469c      	mov	ip, r3
1004a7d4:	2200      	movs	r2, #0
1004a7d6:	4b32      	ldr	r3, [pc, #200]	@ (1004a8a0 <_dtoa_r+0x72c>)
1004a7d8:	4464      	add	r4, ip
1004a7da:	f7f5 ff9b 	bl	10040714 <__aeabi_dadd>
1004a7de:	0002      	movs	r2, r0
1004a7e0:	000b      	movs	r3, r1
1004a7e2:	0030      	movs	r0, r6
1004a7e4:	0039      	movs	r1, r7
1004a7e6:	f7f5 fe49 	bl	1004047c <__aeabi_dcmpgt>
1004a7ea:	2800      	cmp	r0, #0
1004a7ec:	d15c      	bne.n	1004a8a8 <_dtoa_r+0x734>
1004a7ee:	9a16      	ldr	r2, [sp, #88]	@ 0x58
1004a7f0:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
1004a7f2:	2000      	movs	r0, #0
1004a7f4:	492a      	ldr	r1, [pc, #168]	@ (1004a8a0 <_dtoa_r+0x72c>)
1004a7f6:	f7f7 f9fd 	bl	10041bf4 <__aeabi_dsub>
1004a7fa:	0002      	movs	r2, r0
1004a7fc:	000b      	movs	r3, r1
1004a7fe:	0030      	movs	r0, r6
1004a800:	0039      	movs	r1, r7
1004a802:	f7f5 fe27 	bl	10040454 <__aeabi_dcmplt>
1004a806:	2800      	cmp	r0, #0
1004a808:	d100      	bne.n	1004a80c <_dtoa_r+0x698>
1004a80a:	e6ee      	b.n	1004a5ea <_dtoa_r+0x476>
1004a80c:	0023      	movs	r3, r4
1004a80e:	3c01      	subs	r4, #1
1004a810:	7822      	ldrb	r2, [r4, #0]
1004a812:	2a30      	cmp	r2, #48	@ 0x30
1004a814:	d0fa      	beq.n	1004a80c <_dtoa_r+0x698>
1004a816:	001c      	movs	r4, r3
1004a818:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
1004a81a:	9304      	str	r3, [sp, #16]
1004a81c:	e73e      	b.n	1004a69c <_dtoa_r+0x528>
1004a81e:	2200      	movs	r2, #0
1004a820:	4b1b      	ldr	r3, [pc, #108]	@ (1004a890 <_dtoa_r+0x71c>)
1004a822:	f7f6 ff1f 	bl	10041664 <__aeabi_dmul>
1004a826:	900a      	str	r0, [sp, #40]	@ 0x28
1004a828:	910b      	str	r1, [sp, #44]	@ 0x2c
1004a82a:	e7b9      	b.n	1004a7a0 <_dtoa_r+0x62c>
1004a82c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
1004a82e:	2b00      	cmp	r3, #0
1004a830:	d10c      	bne.n	1004a84c <_dtoa_r+0x6d8>
1004a832:	9806      	ldr	r0, [sp, #24]
1004a834:	9907      	ldr	r1, [sp, #28]
1004a836:	2200      	movs	r2, #0
1004a838:	4b18      	ldr	r3, [pc, #96]	@ (1004a89c <_dtoa_r+0x728>)
1004a83a:	f7f6 ff13 	bl	10041664 <__aeabi_dmul>
1004a83e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
1004a840:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
1004a842:	f7f5 fe25 	bl	10040490 <__aeabi_dcmpge>
1004a846:	2800      	cmp	r0, #0
1004a848:	d100      	bne.n	1004a84c <_dtoa_r+0x6d8>
1004a84a:	e164      	b.n	1004ab16 <_dtoa_r+0x9a2>
1004a84c:	2600      	movs	r6, #0
1004a84e:	0037      	movs	r7, r6
1004a850:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
1004a852:	9c08      	ldr	r4, [sp, #32]
1004a854:	43db      	mvns	r3, r3
1004a856:	930c      	str	r3, [sp, #48]	@ 0x30
1004a858:	2300      	movs	r3, #0
1004a85a:	9304      	str	r3, [sp, #16]
1004a85c:	0031      	movs	r1, r6
1004a85e:	9803      	ldr	r0, [sp, #12]
1004a860:	f000 fbc6 	bl	1004aff0 <_Bfree>
1004a864:	2f00      	cmp	r7, #0
1004a866:	d0d7      	beq.n	1004a818 <_dtoa_r+0x6a4>
1004a868:	9b04      	ldr	r3, [sp, #16]
1004a86a:	2b00      	cmp	r3, #0
1004a86c:	d005      	beq.n	1004a87a <_dtoa_r+0x706>
1004a86e:	42bb      	cmp	r3, r7
1004a870:	d003      	beq.n	1004a87a <_dtoa_r+0x706>
1004a872:	0019      	movs	r1, r3
1004a874:	9803      	ldr	r0, [sp, #12]
1004a876:	f000 fbbb 	bl	1004aff0 <_Bfree>
1004a87a:	0039      	movs	r1, r7
1004a87c:	9803      	ldr	r0, [sp, #12]
1004a87e:	f000 fbb7 	bl	1004aff0 <_Bfree>
1004a882:	e7c9      	b.n	1004a818 <_dtoa_r+0x6a4>
1004a884:	1004c090 	.word	0x1004c090
1004a888:	1004c068 	.word	0x1004c068
1004a88c:	3ff00000 	.word	0x3ff00000
1004a890:	40240000 	.word	0x40240000
1004a894:	401c0000 	.word	0x401c0000
1004a898:	fcc00000 	.word	0xfcc00000
1004a89c:	40140000 	.word	0x40140000
1004a8a0:	3fe00000 	.word	0x3fe00000
1004a8a4:	9b04      	ldr	r3, [sp, #16]
1004a8a6:	930c      	str	r3, [sp, #48]	@ 0x30
1004a8a8:	0023      	movs	r3, r4
1004a8aa:	001c      	movs	r4, r3
1004a8ac:	3b01      	subs	r3, #1
1004a8ae:	781a      	ldrb	r2, [r3, #0]
1004a8b0:	2a39      	cmp	r2, #57	@ 0x39
1004a8b2:	d108      	bne.n	1004a8c6 <_dtoa_r+0x752>
1004a8b4:	9a08      	ldr	r2, [sp, #32]
1004a8b6:	429a      	cmp	r2, r3
1004a8b8:	d1f7      	bne.n	1004a8aa <_dtoa_r+0x736>
1004a8ba:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
1004a8bc:	9908      	ldr	r1, [sp, #32]
1004a8be:	3201      	adds	r2, #1
1004a8c0:	920c      	str	r2, [sp, #48]	@ 0x30
1004a8c2:	2230      	movs	r2, #48	@ 0x30
1004a8c4:	700a      	strb	r2, [r1, #0]
1004a8c6:	781a      	ldrb	r2, [r3, #0]
1004a8c8:	3201      	adds	r2, #1
1004a8ca:	701a      	strb	r2, [r3, #0]
1004a8cc:	e7a4      	b.n	1004a818 <_dtoa_r+0x6a4>
1004a8ce:	2200      	movs	r2, #0
1004a8d0:	4bc6      	ldr	r3, [pc, #792]	@ (1004abec <_dtoa_r+0xa78>)
1004a8d2:	f7f6 fec7 	bl	10041664 <__aeabi_dmul>
1004a8d6:	2200      	movs	r2, #0
1004a8d8:	2300      	movs	r3, #0
1004a8da:	0006      	movs	r6, r0
1004a8dc:	000f      	movs	r7, r1
1004a8de:	f7f5 fdb3 	bl	10040448 <__aeabi_dcmpeq>
1004a8e2:	2800      	cmp	r0, #0
1004a8e4:	d100      	bne.n	1004a8e8 <_dtoa_r+0x774>
1004a8e6:	e6a1      	b.n	1004a62c <_dtoa_r+0x4b8>
1004a8e8:	e6d8      	b.n	1004a69c <_dtoa_r+0x528>
1004a8ea:	9f10      	ldr	r7, [sp, #64]	@ 0x40
1004a8ec:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
1004a8ee:	9c06      	ldr	r4, [sp, #24]
1004a8f0:	2f00      	cmp	r7, #0
1004a8f2:	d014      	beq.n	1004a91e <_dtoa_r+0x7aa>
1004a8f4:	9a22      	ldr	r2, [sp, #136]	@ 0x88
1004a8f6:	2a01      	cmp	r2, #1
1004a8f8:	dd00      	ble.n	1004a8fc <_dtoa_r+0x788>
1004a8fa:	e0c8      	b.n	1004aa8e <_dtoa_r+0x91a>
1004a8fc:	9a18      	ldr	r2, [sp, #96]	@ 0x60
1004a8fe:	2a00      	cmp	r2, #0
1004a900:	d100      	bne.n	1004a904 <_dtoa_r+0x790>
1004a902:	e0be      	b.n	1004aa82 <_dtoa_r+0x90e>
1004a904:	4aba      	ldr	r2, [pc, #744]	@ (1004abf0 <_dtoa_r+0xa7c>)
1004a906:	189b      	adds	r3, r3, r2
1004a908:	9a06      	ldr	r2, [sp, #24]
1004a90a:	2101      	movs	r1, #1
1004a90c:	18d2      	adds	r2, r2, r3
1004a90e:	9206      	str	r2, [sp, #24]
1004a910:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
1004a912:	9803      	ldr	r0, [sp, #12]
1004a914:	18d3      	adds	r3, r2, r3
1004a916:	930d      	str	r3, [sp, #52]	@ 0x34
1004a918:	f000 fc22 	bl	1004b160 <__i2b>
1004a91c:	0007      	movs	r7, r0
1004a91e:	2c00      	cmp	r4, #0
1004a920:	d00e      	beq.n	1004a940 <_dtoa_r+0x7cc>
1004a922:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
1004a924:	2b00      	cmp	r3, #0
1004a926:	dd0b      	ble.n	1004a940 <_dtoa_r+0x7cc>
1004a928:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
1004a92a:	0023      	movs	r3, r4
1004a92c:	4294      	cmp	r4, r2
1004a92e:	dd00      	ble.n	1004a932 <_dtoa_r+0x7be>
1004a930:	0013      	movs	r3, r2
1004a932:	9a06      	ldr	r2, [sp, #24]
1004a934:	1ae4      	subs	r4, r4, r3
1004a936:	1ad2      	subs	r2, r2, r3
1004a938:	9206      	str	r2, [sp, #24]
1004a93a:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
1004a93c:	1ad3      	subs	r3, r2, r3
1004a93e:	930d      	str	r3, [sp, #52]	@ 0x34
1004a940:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
1004a942:	2b00      	cmp	r3, #0
1004a944:	d01f      	beq.n	1004a986 <_dtoa_r+0x812>
1004a946:	9b10      	ldr	r3, [sp, #64]	@ 0x40
1004a948:	2b00      	cmp	r3, #0
1004a94a:	d100      	bne.n	1004a94e <_dtoa_r+0x7da>
1004a94c:	e0b5      	b.n	1004aaba <_dtoa_r+0x946>
1004a94e:	2d00      	cmp	r5, #0
1004a950:	d010      	beq.n	1004a974 <_dtoa_r+0x800>
1004a952:	0039      	movs	r1, r7
1004a954:	002a      	movs	r2, r5
1004a956:	9803      	ldr	r0, [sp, #12]
1004a958:	f000 fccc 	bl	1004b2f4 <__pow5mult>
1004a95c:	9a05      	ldr	r2, [sp, #20]
1004a95e:	0001      	movs	r1, r0
1004a960:	0007      	movs	r7, r0
1004a962:	9803      	ldr	r0, [sp, #12]
1004a964:	f000 fc14 	bl	1004b190 <__multiply>
1004a968:	0006      	movs	r6, r0
1004a96a:	9905      	ldr	r1, [sp, #20]
1004a96c:	9803      	ldr	r0, [sp, #12]
1004a96e:	f000 fb3f 	bl	1004aff0 <_Bfree>
1004a972:	9605      	str	r6, [sp, #20]
1004a974:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
1004a976:	1b5a      	subs	r2, r3, r5
1004a978:	42ab      	cmp	r3, r5
1004a97a:	d004      	beq.n	1004a986 <_dtoa_r+0x812>
1004a97c:	9905      	ldr	r1, [sp, #20]
1004a97e:	9803      	ldr	r0, [sp, #12]
1004a980:	f000 fcb8 	bl	1004b2f4 <__pow5mult>
1004a984:	9005      	str	r0, [sp, #20]
1004a986:	2101      	movs	r1, #1
1004a988:	9803      	ldr	r0, [sp, #12]
1004a98a:	f000 fbe9 	bl	1004b160 <__i2b>
1004a98e:	9b14      	ldr	r3, [sp, #80]	@ 0x50
1004a990:	0006      	movs	r6, r0
1004a992:	2b00      	cmp	r3, #0
1004a994:	d100      	bne.n	1004a998 <_dtoa_r+0x824>
1004a996:	e1bc      	b.n	1004ad12 <_dtoa_r+0xb9e>
1004a998:	001a      	movs	r2, r3
1004a99a:	0001      	movs	r1, r0
1004a99c:	9803      	ldr	r0, [sp, #12]
1004a99e:	f000 fca9 	bl	1004b2f4 <__pow5mult>
1004a9a2:	9b22      	ldr	r3, [sp, #136]	@ 0x88
1004a9a4:	0006      	movs	r6, r0
1004a9a6:	2500      	movs	r5, #0
1004a9a8:	2b01      	cmp	r3, #1
1004a9aa:	dc16      	bgt.n	1004a9da <_dtoa_r+0x866>
1004a9ac:	2500      	movs	r5, #0
1004a9ae:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
1004a9b0:	42ab      	cmp	r3, r5
1004a9b2:	d10e      	bne.n	1004a9d2 <_dtoa_r+0x85e>
1004a9b4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
1004a9b6:	031b      	lsls	r3, r3, #12
1004a9b8:	42ab      	cmp	r3, r5
1004a9ba:	d10a      	bne.n	1004a9d2 <_dtoa_r+0x85e>
1004a9bc:	4b8d      	ldr	r3, [pc, #564]	@ (1004abf4 <_dtoa_r+0xa80>)
1004a9be:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
1004a9c0:	4213      	tst	r3, r2
1004a9c2:	d006      	beq.n	1004a9d2 <_dtoa_r+0x85e>
1004a9c4:	9b06      	ldr	r3, [sp, #24]
1004a9c6:	3501      	adds	r5, #1
1004a9c8:	3301      	adds	r3, #1
1004a9ca:	9306      	str	r3, [sp, #24]
1004a9cc:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
1004a9ce:	3301      	adds	r3, #1
1004a9d0:	930d      	str	r3, [sp, #52]	@ 0x34
1004a9d2:	9b14      	ldr	r3, [sp, #80]	@ 0x50
1004a9d4:	2001      	movs	r0, #1
1004a9d6:	2b00      	cmp	r3, #0
1004a9d8:	d008      	beq.n	1004a9ec <_dtoa_r+0x878>
1004a9da:	6933      	ldr	r3, [r6, #16]
1004a9dc:	3303      	adds	r3, #3
1004a9de:	009b      	lsls	r3, r3, #2
1004a9e0:	18f3      	adds	r3, r6, r3
1004a9e2:	6858      	ldr	r0, [r3, #4]
1004a9e4:	f000 fb6c 	bl	1004b0c0 <__hi0bits>
1004a9e8:	2320      	movs	r3, #32
1004a9ea:	1a18      	subs	r0, r3, r0
1004a9ec:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
1004a9ee:	1818      	adds	r0, r3, r0
1004a9f0:	0002      	movs	r2, r0
1004a9f2:	231f      	movs	r3, #31
1004a9f4:	401a      	ands	r2, r3
1004a9f6:	4218      	tst	r0, r3
1004a9f8:	d065      	beq.n	1004aac6 <_dtoa_r+0x952>
1004a9fa:	3301      	adds	r3, #1
1004a9fc:	1a9b      	subs	r3, r3, r2
1004a9fe:	2b04      	cmp	r3, #4
1004aa00:	dd5d      	ble.n	1004aabe <_dtoa_r+0x94a>
1004aa02:	231c      	movs	r3, #28
1004aa04:	1a9b      	subs	r3, r3, r2
1004aa06:	9a06      	ldr	r2, [sp, #24]
1004aa08:	18e4      	adds	r4, r4, r3
1004aa0a:	18d2      	adds	r2, r2, r3
1004aa0c:	9206      	str	r2, [sp, #24]
1004aa0e:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
1004aa10:	18d3      	adds	r3, r2, r3
1004aa12:	930d      	str	r3, [sp, #52]	@ 0x34
1004aa14:	9b06      	ldr	r3, [sp, #24]
1004aa16:	2b00      	cmp	r3, #0
1004aa18:	dd05      	ble.n	1004aa26 <_dtoa_r+0x8b2>
1004aa1a:	001a      	movs	r2, r3
1004aa1c:	9905      	ldr	r1, [sp, #20]
1004aa1e:	9803      	ldr	r0, [sp, #12]
1004aa20:	f000 fcc4 	bl	1004b3ac <__lshift>
1004aa24:	9005      	str	r0, [sp, #20]
1004aa26:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
1004aa28:	2b00      	cmp	r3, #0
1004aa2a:	dd05      	ble.n	1004aa38 <_dtoa_r+0x8c4>
1004aa2c:	0031      	movs	r1, r6
1004aa2e:	001a      	movs	r2, r3
1004aa30:	9803      	ldr	r0, [sp, #12]
1004aa32:	f000 fcbb 	bl	1004b3ac <__lshift>
1004aa36:	0006      	movs	r6, r0
1004aa38:	9b15      	ldr	r3, [sp, #84]	@ 0x54
1004aa3a:	2b00      	cmp	r3, #0
1004aa3c:	d045      	beq.n	1004aaca <_dtoa_r+0x956>
1004aa3e:	0031      	movs	r1, r6
1004aa40:	9805      	ldr	r0, [sp, #20]
1004aa42:	f000 fd1f 	bl	1004b484 <__mcmp>
1004aa46:	2800      	cmp	r0, #0
1004aa48:	da3f      	bge.n	1004aaca <_dtoa_r+0x956>
1004aa4a:	9b04      	ldr	r3, [sp, #16]
1004aa4c:	220a      	movs	r2, #10
1004aa4e:	3b01      	subs	r3, #1
1004aa50:	930c      	str	r3, [sp, #48]	@ 0x30
1004aa52:	9905      	ldr	r1, [sp, #20]
1004aa54:	2300      	movs	r3, #0
1004aa56:	9803      	ldr	r0, [sp, #12]
1004aa58:	f000 faee 	bl	1004b038 <__multadd>
1004aa5c:	9b10      	ldr	r3, [sp, #64]	@ 0x40
1004aa5e:	9005      	str	r0, [sp, #20]
1004aa60:	2b00      	cmp	r3, #0
1004aa62:	d100      	bne.n	1004aa66 <_dtoa_r+0x8f2>
1004aa64:	e15c      	b.n	1004ad20 <_dtoa_r+0xbac>
1004aa66:	2300      	movs	r3, #0
1004aa68:	0039      	movs	r1, r7
1004aa6a:	220a      	movs	r2, #10
1004aa6c:	9803      	ldr	r0, [sp, #12]
1004aa6e:	f000 fae3 	bl	1004b038 <__multadd>
1004aa72:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
1004aa74:	0007      	movs	r7, r0
1004aa76:	2b00      	cmp	r3, #0
1004aa78:	dc55      	bgt.n	1004ab26 <_dtoa_r+0x9b2>
1004aa7a:	9b22      	ldr	r3, [sp, #136]	@ 0x88
1004aa7c:	2b02      	cmp	r3, #2
1004aa7e:	dc2d      	bgt.n	1004aadc <_dtoa_r+0x968>
1004aa80:	e051      	b.n	1004ab26 <_dtoa_r+0x9b2>
1004aa82:	2336      	movs	r3, #54	@ 0x36
1004aa84:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
1004aa86:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
1004aa88:	9c06      	ldr	r4, [sp, #24]
1004aa8a:	1a9b      	subs	r3, r3, r2
1004aa8c:	e73c      	b.n	1004a908 <_dtoa_r+0x794>
1004aa8e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
1004aa90:	1e5d      	subs	r5, r3, #1
1004aa92:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
1004aa94:	42ab      	cmp	r3, r5
1004aa96:	db08      	blt.n	1004aaaa <_dtoa_r+0x936>
1004aa98:	1b5d      	subs	r5, r3, r5
1004aa9a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
1004aa9c:	9c06      	ldr	r4, [sp, #24]
1004aa9e:	2b00      	cmp	r3, #0
1004aaa0:	db00      	blt.n	1004aaa4 <_dtoa_r+0x930>
1004aaa2:	e731      	b.n	1004a908 <_dtoa_r+0x794>
1004aaa4:	1ae4      	subs	r4, r4, r3
1004aaa6:	2300      	movs	r3, #0
1004aaa8:	e72e      	b.n	1004a908 <_dtoa_r+0x794>
1004aaaa:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
1004aaac:	9a14      	ldr	r2, [sp, #80]	@ 0x50
1004aaae:	1aeb      	subs	r3, r5, r3
1004aab0:	18d3      	adds	r3, r2, r3
1004aab2:	950f      	str	r5, [sp, #60]	@ 0x3c
1004aab4:	9314      	str	r3, [sp, #80]	@ 0x50
1004aab6:	2500      	movs	r5, #0
1004aab8:	e7ef      	b.n	1004aa9a <_dtoa_r+0x926>
1004aaba:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
1004aabc:	e75e      	b.n	1004a97c <_dtoa_r+0x808>
1004aabe:	2b04      	cmp	r3, #4
1004aac0:	d0a8      	beq.n	1004aa14 <_dtoa_r+0x8a0>
1004aac2:	331c      	adds	r3, #28
1004aac4:	e79f      	b.n	1004aa06 <_dtoa_r+0x892>
1004aac6:	0013      	movs	r3, r2
1004aac8:	e7fb      	b.n	1004aac2 <_dtoa_r+0x94e>
1004aaca:	9b04      	ldr	r3, [sp, #16]
1004aacc:	930c      	str	r3, [sp, #48]	@ 0x30
1004aace:	9b09      	ldr	r3, [sp, #36]	@ 0x24
1004aad0:	930e      	str	r3, [sp, #56]	@ 0x38
1004aad2:	2b00      	cmp	r3, #0
1004aad4:	dc23      	bgt.n	1004ab1e <_dtoa_r+0x9aa>
1004aad6:	9b22      	ldr	r3, [sp, #136]	@ 0x88
1004aad8:	2b02      	cmp	r3, #2
1004aada:	dd20      	ble.n	1004ab1e <_dtoa_r+0x9aa>
1004aadc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
1004aade:	2b00      	cmp	r3, #0
1004aae0:	d000      	beq.n	1004aae4 <_dtoa_r+0x970>
1004aae2:	e6b5      	b.n	1004a850 <_dtoa_r+0x6dc>
1004aae4:	0031      	movs	r1, r6
1004aae6:	2205      	movs	r2, #5
1004aae8:	9803      	ldr	r0, [sp, #12]
1004aaea:	f000 faa5 	bl	1004b038 <__multadd>
1004aaee:	0006      	movs	r6, r0
1004aaf0:	0001      	movs	r1, r0
1004aaf2:	9805      	ldr	r0, [sp, #20]
1004aaf4:	f000 fcc6 	bl	1004b484 <__mcmp>
1004aaf8:	2800      	cmp	r0, #0
1004aafa:	dc00      	bgt.n	1004aafe <_dtoa_r+0x98a>
1004aafc:	e6a8      	b.n	1004a850 <_dtoa_r+0x6dc>
1004aafe:	9b08      	ldr	r3, [sp, #32]
1004ab00:	9a08      	ldr	r2, [sp, #32]
1004ab02:	1c5c      	adds	r4, r3, #1
1004ab04:	2331      	movs	r3, #49	@ 0x31
1004ab06:	7013      	strb	r3, [r2, #0]
1004ab08:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
1004ab0a:	3301      	adds	r3, #1
1004ab0c:	930c      	str	r3, [sp, #48]	@ 0x30
1004ab0e:	e6a3      	b.n	1004a858 <_dtoa_r+0x6e4>
1004ab10:	9e11      	ldr	r6, [sp, #68]	@ 0x44
1004ab12:	0037      	movs	r7, r6
1004ab14:	e7f3      	b.n	1004aafe <_dtoa_r+0x98a>
1004ab16:	9b04      	ldr	r3, [sp, #16]
1004ab18:	9e09      	ldr	r6, [sp, #36]	@ 0x24
1004ab1a:	930c      	str	r3, [sp, #48]	@ 0x30
1004ab1c:	e7f9      	b.n	1004ab12 <_dtoa_r+0x99e>
1004ab1e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
1004ab20:	2b00      	cmp	r3, #0
1004ab22:	d100      	bne.n	1004ab26 <_dtoa_r+0x9b2>
1004ab24:	e100      	b.n	1004ad28 <_dtoa_r+0xbb4>
1004ab26:	2c00      	cmp	r4, #0
1004ab28:	dd05      	ble.n	1004ab36 <_dtoa_r+0x9c2>
1004ab2a:	0039      	movs	r1, r7
1004ab2c:	0022      	movs	r2, r4
1004ab2e:	9803      	ldr	r0, [sp, #12]
1004ab30:	f000 fc3c 	bl	1004b3ac <__lshift>
1004ab34:	0007      	movs	r7, r0
1004ab36:	0038      	movs	r0, r7
1004ab38:	2d00      	cmp	r5, #0
1004ab3a:	d018      	beq.n	1004ab6e <_dtoa_r+0x9fa>
1004ab3c:	6879      	ldr	r1, [r7, #4]
1004ab3e:	9803      	ldr	r0, [sp, #12]
1004ab40:	f000 fa12 	bl	1004af68 <_Balloc>
1004ab44:	1e04      	subs	r4, r0, #0
1004ab46:	d105      	bne.n	1004ab54 <_dtoa_r+0x9e0>
1004ab48:	0022      	movs	r2, r4
1004ab4a:	4b2b      	ldr	r3, [pc, #172]	@ (1004abf8 <_dtoa_r+0xa84>)
1004ab4c:	482b      	ldr	r0, [pc, #172]	@ (1004abfc <_dtoa_r+0xa88>)
1004ab4e:	492c      	ldr	r1, [pc, #176]	@ (1004ac00 <_dtoa_r+0xa8c>)
1004ab50:	f7ff fb25 	bl	1004a19e <_dtoa_r+0x2a>
1004ab54:	0039      	movs	r1, r7
1004ab56:	693a      	ldr	r2, [r7, #16]
1004ab58:	310c      	adds	r1, #12
1004ab5a:	3202      	adds	r2, #2
1004ab5c:	0092      	lsls	r2, r2, #2
1004ab5e:	300c      	adds	r0, #12
1004ab60:	f000 fe6a 	bl	1004b838 <memcpy>
1004ab64:	2201      	movs	r2, #1
1004ab66:	0021      	movs	r1, r4
1004ab68:	9803      	ldr	r0, [sp, #12]
1004ab6a:	f000 fc1f 	bl	1004b3ac <__lshift>
1004ab6e:	9b08      	ldr	r3, [sp, #32]
1004ab70:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
1004ab72:	9306      	str	r3, [sp, #24]
1004ab74:	3b01      	subs	r3, #1
1004ab76:	189b      	adds	r3, r3, r2
1004ab78:	2201      	movs	r2, #1
1004ab7a:	9704      	str	r7, [sp, #16]
1004ab7c:	0007      	movs	r7, r0
1004ab7e:	930f      	str	r3, [sp, #60]	@ 0x3c
1004ab80:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
1004ab82:	4013      	ands	r3, r2
1004ab84:	930e      	str	r3, [sp, #56]	@ 0x38
1004ab86:	0031      	movs	r1, r6
1004ab88:	9805      	ldr	r0, [sp, #20]
1004ab8a:	f7ff fa65 	bl	1004a058 <quorem>
1004ab8e:	9904      	ldr	r1, [sp, #16]
1004ab90:	0005      	movs	r5, r0
1004ab92:	900a      	str	r0, [sp, #40]	@ 0x28
1004ab94:	9805      	ldr	r0, [sp, #20]
1004ab96:	f000 fc75 	bl	1004b484 <__mcmp>
1004ab9a:	003a      	movs	r2, r7
1004ab9c:	900d      	str	r0, [sp, #52]	@ 0x34
1004ab9e:	0031      	movs	r1, r6
1004aba0:	9803      	ldr	r0, [sp, #12]
1004aba2:	f000 fc8b 	bl	1004b4bc <__mdiff>
1004aba6:	2201      	movs	r2, #1
1004aba8:	68c3      	ldr	r3, [r0, #12]
1004abaa:	0004      	movs	r4, r0
1004abac:	3530      	adds	r5, #48	@ 0x30
1004abae:	9209      	str	r2, [sp, #36]	@ 0x24
1004abb0:	2b00      	cmp	r3, #0
1004abb2:	d104      	bne.n	1004abbe <_dtoa_r+0xa4a>
1004abb4:	0001      	movs	r1, r0
1004abb6:	9805      	ldr	r0, [sp, #20]
1004abb8:	f000 fc64 	bl	1004b484 <__mcmp>
1004abbc:	9009      	str	r0, [sp, #36]	@ 0x24
1004abbe:	0021      	movs	r1, r4
1004abc0:	9803      	ldr	r0, [sp, #12]
1004abc2:	f000 fa15 	bl	1004aff0 <_Bfree>
1004abc6:	9b06      	ldr	r3, [sp, #24]
1004abc8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
1004abca:	1c5c      	adds	r4, r3, #1
1004abcc:	9b22      	ldr	r3, [sp, #136]	@ 0x88
1004abce:	4313      	orrs	r3, r2
1004abd0:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
1004abd2:	4313      	orrs	r3, r2
1004abd4:	d116      	bne.n	1004ac04 <_dtoa_r+0xa90>
1004abd6:	2d39      	cmp	r5, #57	@ 0x39
1004abd8:	d02f      	beq.n	1004ac3a <_dtoa_r+0xac6>
1004abda:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
1004abdc:	2b00      	cmp	r3, #0
1004abde:	dd01      	ble.n	1004abe4 <_dtoa_r+0xa70>
1004abe0:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
1004abe2:	3531      	adds	r5, #49	@ 0x31
1004abe4:	9b06      	ldr	r3, [sp, #24]
1004abe6:	701d      	strb	r5, [r3, #0]
1004abe8:	e638      	b.n	1004a85c <_dtoa_r+0x6e8>
1004abea:	46c0      	nop			@ (mov r8, r8)
1004abec:	40240000 	.word	0x40240000
1004abf0:	00000433 	.word	0x00000433
1004abf4:	7ff00000 	.word	0x7ff00000
1004abf8:	1004bff0 	.word	0x1004bff0
1004abfc:	1004bf98 	.word	0x1004bf98
1004ac00:	000002ef 	.word	0x000002ef
1004ac04:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
1004ac06:	2b00      	cmp	r3, #0
1004ac08:	db04      	blt.n	1004ac14 <_dtoa_r+0xaa0>
1004ac0a:	9a22      	ldr	r2, [sp, #136]	@ 0x88
1004ac0c:	4313      	orrs	r3, r2
1004ac0e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
1004ac10:	4313      	orrs	r3, r2
1004ac12:	d11e      	bne.n	1004ac52 <_dtoa_r+0xade>
1004ac14:	9b09      	ldr	r3, [sp, #36]	@ 0x24
1004ac16:	2b00      	cmp	r3, #0
1004ac18:	dde4      	ble.n	1004abe4 <_dtoa_r+0xa70>
1004ac1a:	9905      	ldr	r1, [sp, #20]
1004ac1c:	2201      	movs	r2, #1
1004ac1e:	9803      	ldr	r0, [sp, #12]
1004ac20:	f000 fbc4 	bl	1004b3ac <__lshift>
1004ac24:	0031      	movs	r1, r6
1004ac26:	9005      	str	r0, [sp, #20]
1004ac28:	f000 fc2c 	bl	1004b484 <__mcmp>
1004ac2c:	2800      	cmp	r0, #0
1004ac2e:	dc02      	bgt.n	1004ac36 <_dtoa_r+0xac2>
1004ac30:	d1d8      	bne.n	1004abe4 <_dtoa_r+0xa70>
1004ac32:	07eb      	lsls	r3, r5, #31
1004ac34:	d5d6      	bpl.n	1004abe4 <_dtoa_r+0xa70>
1004ac36:	2d39      	cmp	r5, #57	@ 0x39
1004ac38:	d1d2      	bne.n	1004abe0 <_dtoa_r+0xa6c>
1004ac3a:	2339      	movs	r3, #57	@ 0x39
1004ac3c:	9a06      	ldr	r2, [sp, #24]
1004ac3e:	7013      	strb	r3, [r2, #0]
1004ac40:	0023      	movs	r3, r4
1004ac42:	001c      	movs	r4, r3
1004ac44:	3b01      	subs	r3, #1
1004ac46:	781a      	ldrb	r2, [r3, #0]
1004ac48:	2a39      	cmp	r2, #57	@ 0x39
1004ac4a:	d04f      	beq.n	1004acec <_dtoa_r+0xb78>
1004ac4c:	3201      	adds	r2, #1
1004ac4e:	701a      	strb	r2, [r3, #0]
1004ac50:	e604      	b.n	1004a85c <_dtoa_r+0x6e8>
1004ac52:	9b09      	ldr	r3, [sp, #36]	@ 0x24
1004ac54:	2b00      	cmp	r3, #0
1004ac56:	dd03      	ble.n	1004ac60 <_dtoa_r+0xaec>
1004ac58:	2d39      	cmp	r5, #57	@ 0x39
1004ac5a:	d0ee      	beq.n	1004ac3a <_dtoa_r+0xac6>
1004ac5c:	3501      	adds	r5, #1
1004ac5e:	e7c1      	b.n	1004abe4 <_dtoa_r+0xa70>
1004ac60:	9b06      	ldr	r3, [sp, #24]
1004ac62:	9a06      	ldr	r2, [sp, #24]
1004ac64:	701d      	strb	r5, [r3, #0]
1004ac66:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
1004ac68:	4293      	cmp	r3, r2
1004ac6a:	d02a      	beq.n	1004acc2 <_dtoa_r+0xb4e>
1004ac6c:	2300      	movs	r3, #0
1004ac6e:	220a      	movs	r2, #10
1004ac70:	9905      	ldr	r1, [sp, #20]
1004ac72:	9803      	ldr	r0, [sp, #12]
1004ac74:	f000 f9e0 	bl	1004b038 <__multadd>
1004ac78:	9b04      	ldr	r3, [sp, #16]
1004ac7a:	9005      	str	r0, [sp, #20]
1004ac7c:	42bb      	cmp	r3, r7
1004ac7e:	d109      	bne.n	1004ac94 <_dtoa_r+0xb20>
1004ac80:	2300      	movs	r3, #0
1004ac82:	220a      	movs	r2, #10
1004ac84:	9904      	ldr	r1, [sp, #16]
1004ac86:	9803      	ldr	r0, [sp, #12]
1004ac88:	f000 f9d6 	bl	1004b038 <__multadd>
1004ac8c:	9004      	str	r0, [sp, #16]
1004ac8e:	0007      	movs	r7, r0
1004ac90:	9406      	str	r4, [sp, #24]
1004ac92:	e778      	b.n	1004ab86 <_dtoa_r+0xa12>
1004ac94:	9904      	ldr	r1, [sp, #16]
1004ac96:	2300      	movs	r3, #0
1004ac98:	220a      	movs	r2, #10
1004ac9a:	9803      	ldr	r0, [sp, #12]
1004ac9c:	f000 f9cc 	bl	1004b038 <__multadd>
1004aca0:	2300      	movs	r3, #0
1004aca2:	9004      	str	r0, [sp, #16]
1004aca4:	220a      	movs	r2, #10
1004aca6:	0039      	movs	r1, r7
1004aca8:	9803      	ldr	r0, [sp, #12]
1004acaa:	f000 f9c5 	bl	1004b038 <__multadd>
1004acae:	e7ee      	b.n	1004ac8e <_dtoa_r+0xb1a>
1004acb0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
1004acb2:	2401      	movs	r4, #1
1004acb4:	2b00      	cmp	r3, #0
1004acb6:	dd00      	ble.n	1004acba <_dtoa_r+0xb46>
1004acb8:	001c      	movs	r4, r3
1004acba:	9b08      	ldr	r3, [sp, #32]
1004acbc:	191c      	adds	r4, r3, r4
1004acbe:	2300      	movs	r3, #0
1004acc0:	9304      	str	r3, [sp, #16]
1004acc2:	9905      	ldr	r1, [sp, #20]
1004acc4:	2201      	movs	r2, #1
1004acc6:	9803      	ldr	r0, [sp, #12]
1004acc8:	f000 fb70 	bl	1004b3ac <__lshift>
1004accc:	0031      	movs	r1, r6
1004acce:	9005      	str	r0, [sp, #20]
1004acd0:	f000 fbd8 	bl	1004b484 <__mcmp>
1004acd4:	2800      	cmp	r0, #0
1004acd6:	dcb3      	bgt.n	1004ac40 <_dtoa_r+0xacc>
1004acd8:	d101      	bne.n	1004acde <_dtoa_r+0xb6a>
1004acda:	07ed      	lsls	r5, r5, #31
1004acdc:	d4b0      	bmi.n	1004ac40 <_dtoa_r+0xacc>
1004acde:	0023      	movs	r3, r4
1004ace0:	001c      	movs	r4, r3
1004ace2:	3b01      	subs	r3, #1
1004ace4:	781a      	ldrb	r2, [r3, #0]
1004ace6:	2a30      	cmp	r2, #48	@ 0x30
1004ace8:	d0fa      	beq.n	1004ace0 <_dtoa_r+0xb6c>
1004acea:	e5b7      	b.n	1004a85c <_dtoa_r+0x6e8>
1004acec:	9a08      	ldr	r2, [sp, #32]
1004acee:	429a      	cmp	r2, r3
1004acf0:	d1a7      	bne.n	1004ac42 <_dtoa_r+0xace>
1004acf2:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
1004acf4:	3301      	adds	r3, #1
1004acf6:	930c      	str	r3, [sp, #48]	@ 0x30
1004acf8:	2331      	movs	r3, #49	@ 0x31
1004acfa:	7013      	strb	r3, [r2, #0]
1004acfc:	e5ae      	b.n	1004a85c <_dtoa_r+0x6e8>
1004acfe:	4b15      	ldr	r3, [pc, #84]	@ (1004ad54 <_dtoa_r+0xbe0>)
1004ad00:	9a26      	ldr	r2, [sp, #152]	@ 0x98
1004ad02:	9308      	str	r3, [sp, #32]
1004ad04:	4b14      	ldr	r3, [pc, #80]	@ (1004ad58 <_dtoa_r+0xbe4>)
1004ad06:	2a00      	cmp	r2, #0
1004ad08:	d001      	beq.n	1004ad0e <_dtoa_r+0xb9a>
1004ad0a:	f7ff fa7b 	bl	1004a204 <_dtoa_r+0x90>
1004ad0e:	f7ff fa7b 	bl	1004a208 <_dtoa_r+0x94>
1004ad12:	9b22      	ldr	r3, [sp, #136]	@ 0x88
1004ad14:	2b01      	cmp	r3, #1
1004ad16:	dc00      	bgt.n	1004ad1a <_dtoa_r+0xba6>
1004ad18:	e648      	b.n	1004a9ac <_dtoa_r+0x838>
1004ad1a:	2001      	movs	r0, #1
1004ad1c:	9d14      	ldr	r5, [sp, #80]	@ 0x50
1004ad1e:	e665      	b.n	1004a9ec <_dtoa_r+0x878>
1004ad20:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
1004ad22:	2b00      	cmp	r3, #0
1004ad24:	dc00      	bgt.n	1004ad28 <_dtoa_r+0xbb4>
1004ad26:	e6d6      	b.n	1004aad6 <_dtoa_r+0x962>
1004ad28:	2400      	movs	r4, #0
1004ad2a:	0031      	movs	r1, r6
1004ad2c:	9805      	ldr	r0, [sp, #20]
1004ad2e:	f7ff f993 	bl	1004a058 <quorem>
1004ad32:	9b08      	ldr	r3, [sp, #32]
1004ad34:	3030      	adds	r0, #48	@ 0x30
1004ad36:	5518      	strb	r0, [r3, r4]
1004ad38:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
1004ad3a:	3401      	adds	r4, #1
1004ad3c:	0005      	movs	r5, r0
1004ad3e:	429c      	cmp	r4, r3
1004ad40:	dab6      	bge.n	1004acb0 <_dtoa_r+0xb3c>
1004ad42:	2300      	movs	r3, #0
1004ad44:	220a      	movs	r2, #10
1004ad46:	9905      	ldr	r1, [sp, #20]
1004ad48:	9803      	ldr	r0, [sp, #12]
1004ad4a:	f000 f975 	bl	1004b038 <__multadd>
1004ad4e:	9005      	str	r0, [sp, #20]
1004ad50:	e7eb      	b.n	1004ad2a <_dtoa_r+0xbb6>
1004ad52:	46c0      	nop			@ (mov r8, r8)
1004ad54:	1004bf74 	.word	0x1004bf74
1004ad58:	1004bf7c 	.word	0x1004bf7c

1004ad5c <_free_r>:
1004ad5c:	b570      	push	{r4, r5, r6, lr}
1004ad5e:	0005      	movs	r5, r0
1004ad60:	1e0c      	subs	r4, r1, #0
1004ad62:	d010      	beq.n	1004ad86 <_free_r+0x2a>
1004ad64:	3c04      	subs	r4, #4
1004ad66:	6823      	ldr	r3, [r4, #0]
1004ad68:	2b00      	cmp	r3, #0
1004ad6a:	da00      	bge.n	1004ad6e <_free_r+0x12>
1004ad6c:	18e4      	adds	r4, r4, r3
1004ad6e:	0028      	movs	r0, r5
1004ad70:	f000 f8ea 	bl	1004af48 <__malloc_lock>
1004ad74:	4a1d      	ldr	r2, [pc, #116]	@ (1004adec <_free_r+0x90>)
1004ad76:	6813      	ldr	r3, [r2, #0]
1004ad78:	2b00      	cmp	r3, #0
1004ad7a:	d105      	bne.n	1004ad88 <_free_r+0x2c>
1004ad7c:	6063      	str	r3, [r4, #4]
1004ad7e:	6014      	str	r4, [r2, #0]
1004ad80:	0028      	movs	r0, r5
1004ad82:	f000 f8e9 	bl	1004af58 <__malloc_unlock>
1004ad86:	bd70      	pop	{r4, r5, r6, pc}
1004ad88:	42a3      	cmp	r3, r4
1004ad8a:	d908      	bls.n	1004ad9e <_free_r+0x42>
1004ad8c:	6820      	ldr	r0, [r4, #0]
1004ad8e:	1821      	adds	r1, r4, r0
1004ad90:	428b      	cmp	r3, r1
1004ad92:	d1f3      	bne.n	1004ad7c <_free_r+0x20>
1004ad94:	6819      	ldr	r1, [r3, #0]
1004ad96:	685b      	ldr	r3, [r3, #4]
1004ad98:	1809      	adds	r1, r1, r0
1004ad9a:	6021      	str	r1, [r4, #0]
1004ad9c:	e7ee      	b.n	1004ad7c <_free_r+0x20>
1004ad9e:	001a      	movs	r2, r3
1004ada0:	685b      	ldr	r3, [r3, #4]
1004ada2:	2b00      	cmp	r3, #0
1004ada4:	d001      	beq.n	1004adaa <_free_r+0x4e>
1004ada6:	42a3      	cmp	r3, r4
1004ada8:	d9f9      	bls.n	1004ad9e <_free_r+0x42>
1004adaa:	6811      	ldr	r1, [r2, #0]
1004adac:	1850      	adds	r0, r2, r1
1004adae:	42a0      	cmp	r0, r4
1004adb0:	d10b      	bne.n	1004adca <_free_r+0x6e>
1004adb2:	6820      	ldr	r0, [r4, #0]
1004adb4:	1809      	adds	r1, r1, r0
1004adb6:	1850      	adds	r0, r2, r1
1004adb8:	6011      	str	r1, [r2, #0]
1004adba:	4283      	cmp	r3, r0
1004adbc:	d1e0      	bne.n	1004ad80 <_free_r+0x24>
1004adbe:	6818      	ldr	r0, [r3, #0]
1004adc0:	685b      	ldr	r3, [r3, #4]
1004adc2:	1841      	adds	r1, r0, r1
1004adc4:	6011      	str	r1, [r2, #0]
1004adc6:	6053      	str	r3, [r2, #4]
1004adc8:	e7da      	b.n	1004ad80 <_free_r+0x24>
1004adca:	42a0      	cmp	r0, r4
1004adcc:	d902      	bls.n	1004add4 <_free_r+0x78>
1004adce:	230c      	movs	r3, #12
1004add0:	602b      	str	r3, [r5, #0]
1004add2:	e7d5      	b.n	1004ad80 <_free_r+0x24>
1004add4:	6820      	ldr	r0, [r4, #0]
1004add6:	1821      	adds	r1, r4, r0
1004add8:	428b      	cmp	r3, r1
1004adda:	d103      	bne.n	1004ade4 <_free_r+0x88>
1004addc:	6819      	ldr	r1, [r3, #0]
1004adde:	685b      	ldr	r3, [r3, #4]
1004ade0:	1809      	adds	r1, r1, r0
1004ade2:	6021      	str	r1, [r4, #0]
1004ade4:	6063      	str	r3, [r4, #4]
1004ade6:	6054      	str	r4, [r2, #4]
1004ade8:	e7ca      	b.n	1004ad80 <_free_r+0x24>
1004adea:	46c0      	nop			@ (mov r8, r8)
1004adec:	20000af0 	.word	0x20000af0

1004adf0 <malloc>:
1004adf0:	b510      	push	{r4, lr}
1004adf2:	4b03      	ldr	r3, [pc, #12]	@ (1004ae00 <malloc+0x10>)
1004adf4:	0001      	movs	r1, r0
1004adf6:	6818      	ldr	r0, [r3, #0]
1004adf8:	f000 f826 	bl	1004ae48 <_malloc_r>
1004adfc:	bd10      	pop	{r4, pc}
1004adfe:	46c0      	nop			@ (mov r8, r8)
1004ae00:	20000b6c 	.word	0x20000b6c

1004ae04 <sbrk_aligned>:
1004ae04:	b570      	push	{r4, r5, r6, lr}
1004ae06:	4e0f      	ldr	r6, [pc, #60]	@ (1004ae44 <sbrk_aligned+0x40>)
1004ae08:	000d      	movs	r5, r1
1004ae0a:	6831      	ldr	r1, [r6, #0]
1004ae0c:	0004      	movs	r4, r0
1004ae0e:	2900      	cmp	r1, #0
1004ae10:	d102      	bne.n	1004ae18 <sbrk_aligned+0x14>
1004ae12:	f000 fcff 	bl	1004b814 <_sbrk_r>
1004ae16:	6030      	str	r0, [r6, #0]
1004ae18:	0029      	movs	r1, r5
1004ae1a:	0020      	movs	r0, r4
1004ae1c:	f000 fcfa 	bl	1004b814 <_sbrk_r>
1004ae20:	1c43      	adds	r3, r0, #1
1004ae22:	d103      	bne.n	1004ae2c <sbrk_aligned+0x28>
1004ae24:	2501      	movs	r5, #1
1004ae26:	426d      	negs	r5, r5
1004ae28:	0028      	movs	r0, r5
1004ae2a:	bd70      	pop	{r4, r5, r6, pc}
1004ae2c:	2303      	movs	r3, #3
1004ae2e:	1cc5      	adds	r5, r0, #3
1004ae30:	439d      	bics	r5, r3
1004ae32:	42a8      	cmp	r0, r5
1004ae34:	d0f8      	beq.n	1004ae28 <sbrk_aligned+0x24>
1004ae36:	1a29      	subs	r1, r5, r0
1004ae38:	0020      	movs	r0, r4
1004ae3a:	f000 fceb 	bl	1004b814 <_sbrk_r>
1004ae3e:	3001      	adds	r0, #1
1004ae40:	d1f2      	bne.n	1004ae28 <sbrk_aligned+0x24>
1004ae42:	e7ef      	b.n	1004ae24 <sbrk_aligned+0x20>
1004ae44:	20000aec 	.word	0x20000aec

1004ae48 <_malloc_r>:
1004ae48:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
1004ae4a:	2203      	movs	r2, #3
1004ae4c:	1ccb      	adds	r3, r1, #3
1004ae4e:	4393      	bics	r3, r2
1004ae50:	3308      	adds	r3, #8
1004ae52:	0005      	movs	r5, r0
1004ae54:	001f      	movs	r7, r3
1004ae56:	2b0c      	cmp	r3, #12
1004ae58:	d234      	bcs.n	1004aec4 <_malloc_r+0x7c>
1004ae5a:	270c      	movs	r7, #12
1004ae5c:	42b9      	cmp	r1, r7
1004ae5e:	d833      	bhi.n	1004aec8 <_malloc_r+0x80>
1004ae60:	0028      	movs	r0, r5
1004ae62:	f000 f871 	bl	1004af48 <__malloc_lock>
1004ae66:	4e37      	ldr	r6, [pc, #220]	@ (1004af44 <_malloc_r+0xfc>)
1004ae68:	6833      	ldr	r3, [r6, #0]
1004ae6a:	001c      	movs	r4, r3
1004ae6c:	2c00      	cmp	r4, #0
1004ae6e:	d12f      	bne.n	1004aed0 <_malloc_r+0x88>
1004ae70:	0039      	movs	r1, r7
1004ae72:	0028      	movs	r0, r5
1004ae74:	f7ff ffc6 	bl	1004ae04 <sbrk_aligned>
1004ae78:	0004      	movs	r4, r0
1004ae7a:	1c43      	adds	r3, r0, #1
1004ae7c:	d15f      	bne.n	1004af3e <_malloc_r+0xf6>
1004ae7e:	6834      	ldr	r4, [r6, #0]
1004ae80:	9400      	str	r4, [sp, #0]
1004ae82:	9b00      	ldr	r3, [sp, #0]
1004ae84:	2b00      	cmp	r3, #0
1004ae86:	d14a      	bne.n	1004af1e <_malloc_r+0xd6>
1004ae88:	2c00      	cmp	r4, #0
1004ae8a:	d052      	beq.n	1004af32 <_malloc_r+0xea>
1004ae8c:	6823      	ldr	r3, [r4, #0]
1004ae8e:	0028      	movs	r0, r5
1004ae90:	18e3      	adds	r3, r4, r3
1004ae92:	9900      	ldr	r1, [sp, #0]
1004ae94:	9301      	str	r3, [sp, #4]
1004ae96:	f000 fcbd 	bl	1004b814 <_sbrk_r>
1004ae9a:	9b01      	ldr	r3, [sp, #4]
1004ae9c:	4283      	cmp	r3, r0
1004ae9e:	d148      	bne.n	1004af32 <_malloc_r+0xea>
1004aea0:	6823      	ldr	r3, [r4, #0]
1004aea2:	0028      	movs	r0, r5
1004aea4:	1aff      	subs	r7, r7, r3
1004aea6:	0039      	movs	r1, r7
1004aea8:	f7ff ffac 	bl	1004ae04 <sbrk_aligned>
1004aeac:	3001      	adds	r0, #1
1004aeae:	d040      	beq.n	1004af32 <_malloc_r+0xea>
1004aeb0:	6823      	ldr	r3, [r4, #0]
1004aeb2:	19db      	adds	r3, r3, r7
1004aeb4:	6023      	str	r3, [r4, #0]
1004aeb6:	6833      	ldr	r3, [r6, #0]
1004aeb8:	685a      	ldr	r2, [r3, #4]
1004aeba:	2a00      	cmp	r2, #0
1004aebc:	d133      	bne.n	1004af26 <_malloc_r+0xde>
1004aebe:	9b00      	ldr	r3, [sp, #0]
1004aec0:	6033      	str	r3, [r6, #0]
1004aec2:	e019      	b.n	1004aef8 <_malloc_r+0xb0>
1004aec4:	2b00      	cmp	r3, #0
1004aec6:	dac9      	bge.n	1004ae5c <_malloc_r+0x14>
1004aec8:	230c      	movs	r3, #12
1004aeca:	602b      	str	r3, [r5, #0]
1004aecc:	2000      	movs	r0, #0
1004aece:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
1004aed0:	6821      	ldr	r1, [r4, #0]
1004aed2:	1bc9      	subs	r1, r1, r7
1004aed4:	d420      	bmi.n	1004af18 <_malloc_r+0xd0>
1004aed6:	290b      	cmp	r1, #11
1004aed8:	d90a      	bls.n	1004aef0 <_malloc_r+0xa8>
1004aeda:	19e2      	adds	r2, r4, r7
1004aedc:	6027      	str	r7, [r4, #0]
1004aede:	42a3      	cmp	r3, r4
1004aee0:	d104      	bne.n	1004aeec <_malloc_r+0xa4>
1004aee2:	6032      	str	r2, [r6, #0]
1004aee4:	6863      	ldr	r3, [r4, #4]
1004aee6:	6011      	str	r1, [r2, #0]
1004aee8:	6053      	str	r3, [r2, #4]
1004aeea:	e005      	b.n	1004aef8 <_malloc_r+0xb0>
1004aeec:	605a      	str	r2, [r3, #4]
1004aeee:	e7f9      	b.n	1004aee4 <_malloc_r+0x9c>
1004aef0:	6862      	ldr	r2, [r4, #4]
1004aef2:	42a3      	cmp	r3, r4
1004aef4:	d10e      	bne.n	1004af14 <_malloc_r+0xcc>
1004aef6:	6032      	str	r2, [r6, #0]
1004aef8:	0028      	movs	r0, r5
1004aefa:	f000 f82d 	bl	1004af58 <__malloc_unlock>
1004aefe:	0020      	movs	r0, r4
1004af00:	2207      	movs	r2, #7
1004af02:	300b      	adds	r0, #11
1004af04:	1d23      	adds	r3, r4, #4
1004af06:	4390      	bics	r0, r2
1004af08:	1ac2      	subs	r2, r0, r3
1004af0a:	4298      	cmp	r0, r3
1004af0c:	d0df      	beq.n	1004aece <_malloc_r+0x86>
1004af0e:	1a1b      	subs	r3, r3, r0
1004af10:	50a3      	str	r3, [r4, r2]
1004af12:	e7dc      	b.n	1004aece <_malloc_r+0x86>
1004af14:	605a      	str	r2, [r3, #4]
1004af16:	e7ef      	b.n	1004aef8 <_malloc_r+0xb0>
1004af18:	0023      	movs	r3, r4
1004af1a:	6864      	ldr	r4, [r4, #4]
1004af1c:	e7a6      	b.n	1004ae6c <_malloc_r+0x24>
1004af1e:	9c00      	ldr	r4, [sp, #0]
1004af20:	6863      	ldr	r3, [r4, #4]
1004af22:	9300      	str	r3, [sp, #0]
1004af24:	e7ad      	b.n	1004ae82 <_malloc_r+0x3a>
1004af26:	001a      	movs	r2, r3
1004af28:	685b      	ldr	r3, [r3, #4]
1004af2a:	42a3      	cmp	r3, r4
1004af2c:	d1fb      	bne.n	1004af26 <_malloc_r+0xde>
1004af2e:	2300      	movs	r3, #0
1004af30:	e7da      	b.n	1004aee8 <_malloc_r+0xa0>
1004af32:	230c      	movs	r3, #12
1004af34:	0028      	movs	r0, r5
1004af36:	602b      	str	r3, [r5, #0]
1004af38:	f000 f80e 	bl	1004af58 <__malloc_unlock>
1004af3c:	e7c6      	b.n	1004aecc <_malloc_r+0x84>
1004af3e:	6007      	str	r7, [r0, #0]
1004af40:	e7da      	b.n	1004aef8 <_malloc_r+0xb0>
1004af42:	46c0      	nop			@ (mov r8, r8)
1004af44:	20000af0 	.word	0x20000af0

1004af48 <__malloc_lock>:
1004af48:	b510      	push	{r4, lr}
1004af4a:	4802      	ldr	r0, [pc, #8]	@ (1004af54 <__malloc_lock+0xc>)
1004af4c:	f7ff f877 	bl	1004a03e <__retarget_lock_acquire_recursive>
1004af50:	bd10      	pop	{r4, pc}
1004af52:	46c0      	nop			@ (mov r8, r8)
1004af54:	20000ae8 	.word	0x20000ae8

1004af58 <__malloc_unlock>:
1004af58:	b510      	push	{r4, lr}
1004af5a:	4802      	ldr	r0, [pc, #8]	@ (1004af64 <__malloc_unlock+0xc>)
1004af5c:	f7ff f870 	bl	1004a040 <__retarget_lock_release_recursive>
1004af60:	bd10      	pop	{r4, pc}
1004af62:	46c0      	nop			@ (mov r8, r8)
1004af64:	20000ae8 	.word	0x20000ae8

1004af68 <_Balloc>:
1004af68:	b570      	push	{r4, r5, r6, lr}
1004af6a:	69c5      	ldr	r5, [r0, #28]
1004af6c:	0006      	movs	r6, r0
1004af6e:	000c      	movs	r4, r1
1004af70:	2d00      	cmp	r5, #0
1004af72:	d10e      	bne.n	1004af92 <_Balloc+0x2a>
1004af74:	2010      	movs	r0, #16
1004af76:	f7ff ff3b 	bl	1004adf0 <malloc>
1004af7a:	1e02      	subs	r2, r0, #0
1004af7c:	61f0      	str	r0, [r6, #28]
1004af7e:	d104      	bne.n	1004af8a <_Balloc+0x22>
1004af80:	216b      	movs	r1, #107	@ 0x6b
1004af82:	4b19      	ldr	r3, [pc, #100]	@ (1004afe8 <_Balloc+0x80>)
1004af84:	4819      	ldr	r0, [pc, #100]	@ (1004afec <_Balloc+0x84>)
1004af86:	f000 fc61 	bl	1004b84c <__assert_func>
1004af8a:	6045      	str	r5, [r0, #4]
1004af8c:	6085      	str	r5, [r0, #8]
1004af8e:	6005      	str	r5, [r0, #0]
1004af90:	60c5      	str	r5, [r0, #12]
1004af92:	69f5      	ldr	r5, [r6, #28]
1004af94:	68eb      	ldr	r3, [r5, #12]
1004af96:	2b00      	cmp	r3, #0
1004af98:	d013      	beq.n	1004afc2 <_Balloc+0x5a>
1004af9a:	69f3      	ldr	r3, [r6, #28]
1004af9c:	00a2      	lsls	r2, r4, #2
1004af9e:	68db      	ldr	r3, [r3, #12]
1004afa0:	189b      	adds	r3, r3, r2
1004afa2:	6818      	ldr	r0, [r3, #0]
1004afa4:	2800      	cmp	r0, #0
1004afa6:	d118      	bne.n	1004afda <_Balloc+0x72>
1004afa8:	2101      	movs	r1, #1
1004afaa:	000d      	movs	r5, r1
1004afac:	40a5      	lsls	r5, r4
1004afae:	1d6a      	adds	r2, r5, #5
1004afb0:	0030      	movs	r0, r6
1004afb2:	0092      	lsls	r2, r2, #2
1004afb4:	f000 fc68 	bl	1004b888 <_calloc_r>
1004afb8:	2800      	cmp	r0, #0
1004afba:	d00c      	beq.n	1004afd6 <_Balloc+0x6e>
1004afbc:	6044      	str	r4, [r0, #4]
1004afbe:	6085      	str	r5, [r0, #8]
1004afc0:	e00d      	b.n	1004afde <_Balloc+0x76>
1004afc2:	2221      	movs	r2, #33	@ 0x21
1004afc4:	2104      	movs	r1, #4
1004afc6:	0030      	movs	r0, r6
1004afc8:	f000 fc5e 	bl	1004b888 <_calloc_r>
1004afcc:	69f3      	ldr	r3, [r6, #28]
1004afce:	60e8      	str	r0, [r5, #12]
1004afd0:	68db      	ldr	r3, [r3, #12]
1004afd2:	2b00      	cmp	r3, #0
1004afd4:	d1e1      	bne.n	1004af9a <_Balloc+0x32>
1004afd6:	2000      	movs	r0, #0
1004afd8:	bd70      	pop	{r4, r5, r6, pc}
1004afda:	6802      	ldr	r2, [r0, #0]
1004afdc:	601a      	str	r2, [r3, #0]
1004afde:	2300      	movs	r3, #0
1004afe0:	6103      	str	r3, [r0, #16]
1004afe2:	60c3      	str	r3, [r0, #12]
1004afe4:	e7f8      	b.n	1004afd8 <_Balloc+0x70>
1004afe6:	46c0      	nop			@ (mov r8, r8)
1004afe8:	1004bf81 	.word	0x1004bf81
1004afec:	1004c001 	.word	0x1004c001

1004aff0 <_Bfree>:
1004aff0:	b570      	push	{r4, r5, r6, lr}
1004aff2:	69c6      	ldr	r6, [r0, #28]
1004aff4:	0005      	movs	r5, r0
1004aff6:	000c      	movs	r4, r1
1004aff8:	2e00      	cmp	r6, #0
1004affa:	d10e      	bne.n	1004b01a <_Bfree+0x2a>
1004affc:	2010      	movs	r0, #16
1004affe:	f7ff fef7 	bl	1004adf0 <malloc>
1004b002:	1e02      	subs	r2, r0, #0
1004b004:	61e8      	str	r0, [r5, #28]
1004b006:	d104      	bne.n	1004b012 <_Bfree+0x22>
1004b008:	218f      	movs	r1, #143	@ 0x8f
1004b00a:	4b09      	ldr	r3, [pc, #36]	@ (1004b030 <_Bfree+0x40>)
1004b00c:	4809      	ldr	r0, [pc, #36]	@ (1004b034 <_Bfree+0x44>)
1004b00e:	f000 fc1d 	bl	1004b84c <__assert_func>
1004b012:	6046      	str	r6, [r0, #4]
1004b014:	6086      	str	r6, [r0, #8]
1004b016:	6006      	str	r6, [r0, #0]
1004b018:	60c6      	str	r6, [r0, #12]
1004b01a:	2c00      	cmp	r4, #0
1004b01c:	d007      	beq.n	1004b02e <_Bfree+0x3e>
1004b01e:	69eb      	ldr	r3, [r5, #28]
1004b020:	6862      	ldr	r2, [r4, #4]
1004b022:	68db      	ldr	r3, [r3, #12]
1004b024:	0092      	lsls	r2, r2, #2
1004b026:	189b      	adds	r3, r3, r2
1004b028:	681a      	ldr	r2, [r3, #0]
1004b02a:	6022      	str	r2, [r4, #0]
1004b02c:	601c      	str	r4, [r3, #0]
1004b02e:	bd70      	pop	{r4, r5, r6, pc}
1004b030:	1004bf81 	.word	0x1004bf81
1004b034:	1004c001 	.word	0x1004c001

1004b038 <__multadd>:
1004b038:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
1004b03a:	000f      	movs	r7, r1
1004b03c:	9001      	str	r0, [sp, #4]
1004b03e:	000c      	movs	r4, r1
1004b040:	001e      	movs	r6, r3
1004b042:	2000      	movs	r0, #0
1004b044:	690d      	ldr	r5, [r1, #16]
1004b046:	3714      	adds	r7, #20
1004b048:	683b      	ldr	r3, [r7, #0]
1004b04a:	3001      	adds	r0, #1
1004b04c:	b299      	uxth	r1, r3
1004b04e:	4351      	muls	r1, r2
1004b050:	0c1b      	lsrs	r3, r3, #16
1004b052:	4353      	muls	r3, r2
1004b054:	1989      	adds	r1, r1, r6
1004b056:	0c0e      	lsrs	r6, r1, #16
1004b058:	199b      	adds	r3, r3, r6
1004b05a:	0c1e      	lsrs	r6, r3, #16
1004b05c:	b289      	uxth	r1, r1
1004b05e:	041b      	lsls	r3, r3, #16
1004b060:	185b      	adds	r3, r3, r1
1004b062:	c708      	stmia	r7!, {r3}
1004b064:	4285      	cmp	r5, r0
1004b066:	dcef      	bgt.n	1004b048 <__multadd+0x10>
1004b068:	2e00      	cmp	r6, #0
1004b06a:	d022      	beq.n	1004b0b2 <__multadd+0x7a>
1004b06c:	68a3      	ldr	r3, [r4, #8]
1004b06e:	42ab      	cmp	r3, r5
1004b070:	dc19      	bgt.n	1004b0a6 <__multadd+0x6e>
1004b072:	6861      	ldr	r1, [r4, #4]
1004b074:	9801      	ldr	r0, [sp, #4]
1004b076:	3101      	adds	r1, #1
1004b078:	f7ff ff76 	bl	1004af68 <_Balloc>
1004b07c:	1e07      	subs	r7, r0, #0
1004b07e:	d105      	bne.n	1004b08c <__multadd+0x54>
1004b080:	003a      	movs	r2, r7
1004b082:	21ba      	movs	r1, #186	@ 0xba
1004b084:	4b0c      	ldr	r3, [pc, #48]	@ (1004b0b8 <__multadd+0x80>)
1004b086:	480d      	ldr	r0, [pc, #52]	@ (1004b0bc <__multadd+0x84>)
1004b088:	f000 fbe0 	bl	1004b84c <__assert_func>
1004b08c:	0021      	movs	r1, r4
1004b08e:	6922      	ldr	r2, [r4, #16]
1004b090:	310c      	adds	r1, #12
1004b092:	3202      	adds	r2, #2
1004b094:	0092      	lsls	r2, r2, #2
1004b096:	300c      	adds	r0, #12
1004b098:	f000 fbce 	bl	1004b838 <memcpy>
1004b09c:	0021      	movs	r1, r4
1004b09e:	9801      	ldr	r0, [sp, #4]
1004b0a0:	f7ff ffa6 	bl	1004aff0 <_Bfree>
1004b0a4:	003c      	movs	r4, r7
1004b0a6:	1d2b      	adds	r3, r5, #4
1004b0a8:	009b      	lsls	r3, r3, #2
1004b0aa:	18e3      	adds	r3, r4, r3
1004b0ac:	3501      	adds	r5, #1
1004b0ae:	605e      	str	r6, [r3, #4]
1004b0b0:	6125      	str	r5, [r4, #16]
1004b0b2:	0020      	movs	r0, r4
1004b0b4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
1004b0b6:	46c0      	nop			@ (mov r8, r8)
1004b0b8:	1004bff0 	.word	0x1004bff0
1004b0bc:	1004c001 	.word	0x1004c001

1004b0c0 <__hi0bits>:
1004b0c0:	2280      	movs	r2, #128	@ 0x80
1004b0c2:	0003      	movs	r3, r0
1004b0c4:	0252      	lsls	r2, r2, #9
1004b0c6:	2000      	movs	r0, #0
1004b0c8:	4293      	cmp	r3, r2
1004b0ca:	d201      	bcs.n	1004b0d0 <__hi0bits+0x10>
1004b0cc:	041b      	lsls	r3, r3, #16
1004b0ce:	3010      	adds	r0, #16
1004b0d0:	2280      	movs	r2, #128	@ 0x80
1004b0d2:	0452      	lsls	r2, r2, #17
1004b0d4:	4293      	cmp	r3, r2
1004b0d6:	d201      	bcs.n	1004b0dc <__hi0bits+0x1c>
1004b0d8:	3008      	adds	r0, #8
1004b0da:	021b      	lsls	r3, r3, #8
1004b0dc:	2280      	movs	r2, #128	@ 0x80
1004b0de:	0552      	lsls	r2, r2, #21
1004b0e0:	4293      	cmp	r3, r2
1004b0e2:	d201      	bcs.n	1004b0e8 <__hi0bits+0x28>
1004b0e4:	3004      	adds	r0, #4
1004b0e6:	011b      	lsls	r3, r3, #4
1004b0e8:	2280      	movs	r2, #128	@ 0x80
1004b0ea:	05d2      	lsls	r2, r2, #23
1004b0ec:	4293      	cmp	r3, r2
1004b0ee:	d201      	bcs.n	1004b0f4 <__hi0bits+0x34>
1004b0f0:	3002      	adds	r0, #2
1004b0f2:	009b      	lsls	r3, r3, #2
1004b0f4:	2b00      	cmp	r3, #0
1004b0f6:	db03      	blt.n	1004b100 <__hi0bits+0x40>
1004b0f8:	3001      	adds	r0, #1
1004b0fa:	4213      	tst	r3, r2
1004b0fc:	d100      	bne.n	1004b100 <__hi0bits+0x40>
1004b0fe:	2020      	movs	r0, #32
1004b100:	4770      	bx	lr

1004b102 <__lo0bits>:
1004b102:	6803      	ldr	r3, [r0, #0]
1004b104:	0001      	movs	r1, r0
1004b106:	2207      	movs	r2, #7
1004b108:	0018      	movs	r0, r3
1004b10a:	4010      	ands	r0, r2
1004b10c:	4213      	tst	r3, r2
1004b10e:	d00d      	beq.n	1004b12c <__lo0bits+0x2a>
1004b110:	3a06      	subs	r2, #6
1004b112:	2000      	movs	r0, #0
1004b114:	4213      	tst	r3, r2
1004b116:	d105      	bne.n	1004b124 <__lo0bits+0x22>
1004b118:	3002      	adds	r0, #2
1004b11a:	4203      	tst	r3, r0
1004b11c:	d003      	beq.n	1004b126 <__lo0bits+0x24>
1004b11e:	40d3      	lsrs	r3, r2
1004b120:	0010      	movs	r0, r2
1004b122:	600b      	str	r3, [r1, #0]
1004b124:	4770      	bx	lr
1004b126:	089b      	lsrs	r3, r3, #2
1004b128:	600b      	str	r3, [r1, #0]
1004b12a:	e7fb      	b.n	1004b124 <__lo0bits+0x22>
1004b12c:	b29a      	uxth	r2, r3
1004b12e:	2a00      	cmp	r2, #0
1004b130:	d101      	bne.n	1004b136 <__lo0bits+0x34>
1004b132:	2010      	movs	r0, #16
1004b134:	0c1b      	lsrs	r3, r3, #16
1004b136:	b2da      	uxtb	r2, r3
1004b138:	2a00      	cmp	r2, #0
1004b13a:	d101      	bne.n	1004b140 <__lo0bits+0x3e>
1004b13c:	3008      	adds	r0, #8
1004b13e:	0a1b      	lsrs	r3, r3, #8
1004b140:	071a      	lsls	r2, r3, #28
1004b142:	d101      	bne.n	1004b148 <__lo0bits+0x46>
1004b144:	3004      	adds	r0, #4
1004b146:	091b      	lsrs	r3, r3, #4
1004b148:	079a      	lsls	r2, r3, #30
1004b14a:	d101      	bne.n	1004b150 <__lo0bits+0x4e>
1004b14c:	3002      	adds	r0, #2
1004b14e:	089b      	lsrs	r3, r3, #2
1004b150:	07da      	lsls	r2, r3, #31
1004b152:	d4e9      	bmi.n	1004b128 <__lo0bits+0x26>
1004b154:	3001      	adds	r0, #1
1004b156:	085b      	lsrs	r3, r3, #1
1004b158:	d1e6      	bne.n	1004b128 <__lo0bits+0x26>
1004b15a:	2020      	movs	r0, #32
1004b15c:	e7e2      	b.n	1004b124 <__lo0bits+0x22>
	...

1004b160 <__i2b>:
1004b160:	b510      	push	{r4, lr}
1004b162:	000c      	movs	r4, r1
1004b164:	2101      	movs	r1, #1
1004b166:	f7ff feff 	bl	1004af68 <_Balloc>
1004b16a:	2800      	cmp	r0, #0
1004b16c:	d107      	bne.n	1004b17e <__i2b+0x1e>
1004b16e:	2146      	movs	r1, #70	@ 0x46
1004b170:	4c05      	ldr	r4, [pc, #20]	@ (1004b188 <__i2b+0x28>)
1004b172:	0002      	movs	r2, r0
1004b174:	4b05      	ldr	r3, [pc, #20]	@ (1004b18c <__i2b+0x2c>)
1004b176:	0020      	movs	r0, r4
1004b178:	31ff      	adds	r1, #255	@ 0xff
1004b17a:	f000 fb67 	bl	1004b84c <__assert_func>
1004b17e:	2301      	movs	r3, #1
1004b180:	6144      	str	r4, [r0, #20]
1004b182:	6103      	str	r3, [r0, #16]
1004b184:	bd10      	pop	{r4, pc}
1004b186:	46c0      	nop			@ (mov r8, r8)
1004b188:	1004c001 	.word	0x1004c001
1004b18c:	1004bff0 	.word	0x1004bff0

1004b190 <__multiply>:
1004b190:	b5f0      	push	{r4, r5, r6, r7, lr}
1004b192:	0014      	movs	r4, r2
1004b194:	690a      	ldr	r2, [r1, #16]
1004b196:	6923      	ldr	r3, [r4, #16]
1004b198:	000d      	movs	r5, r1
1004b19a:	b08b      	sub	sp, #44	@ 0x2c
1004b19c:	429a      	cmp	r2, r3
1004b19e:	db02      	blt.n	1004b1a6 <__multiply+0x16>
1004b1a0:	0023      	movs	r3, r4
1004b1a2:	000c      	movs	r4, r1
1004b1a4:	001d      	movs	r5, r3
1004b1a6:	6927      	ldr	r7, [r4, #16]
1004b1a8:	692e      	ldr	r6, [r5, #16]
1004b1aa:	6861      	ldr	r1, [r4, #4]
1004b1ac:	19bb      	adds	r3, r7, r6
1004b1ae:	9303      	str	r3, [sp, #12]
1004b1b0:	68a3      	ldr	r3, [r4, #8]
1004b1b2:	19ba      	adds	r2, r7, r6
1004b1b4:	4293      	cmp	r3, r2
1004b1b6:	da00      	bge.n	1004b1ba <__multiply+0x2a>
1004b1b8:	3101      	adds	r1, #1
1004b1ba:	f7ff fed5 	bl	1004af68 <_Balloc>
1004b1be:	9002      	str	r0, [sp, #8]
1004b1c0:	2800      	cmp	r0, #0
1004b1c2:	d106      	bne.n	1004b1d2 <__multiply+0x42>
1004b1c4:	21b1      	movs	r1, #177	@ 0xb1
1004b1c6:	4b49      	ldr	r3, [pc, #292]	@ (1004b2ec <__multiply+0x15c>)
1004b1c8:	4849      	ldr	r0, [pc, #292]	@ (1004b2f0 <__multiply+0x160>)
1004b1ca:	9a02      	ldr	r2, [sp, #8]
1004b1cc:	0049      	lsls	r1, r1, #1
1004b1ce:	f000 fb3d 	bl	1004b84c <__assert_func>
1004b1d2:	9b02      	ldr	r3, [sp, #8]
1004b1d4:	2200      	movs	r2, #0
1004b1d6:	3314      	adds	r3, #20
1004b1d8:	469c      	mov	ip, r3
1004b1da:	19bb      	adds	r3, r7, r6
1004b1dc:	009b      	lsls	r3, r3, #2
1004b1de:	4463      	add	r3, ip
1004b1e0:	9304      	str	r3, [sp, #16]
1004b1e2:	4663      	mov	r3, ip
1004b1e4:	9904      	ldr	r1, [sp, #16]
1004b1e6:	428b      	cmp	r3, r1
1004b1e8:	d32a      	bcc.n	1004b240 <__multiply+0xb0>
1004b1ea:	0023      	movs	r3, r4
1004b1ec:	00bf      	lsls	r7, r7, #2
1004b1ee:	3314      	adds	r3, #20
1004b1f0:	3514      	adds	r5, #20
1004b1f2:	9308      	str	r3, [sp, #32]
1004b1f4:	00b6      	lsls	r6, r6, #2
1004b1f6:	19db      	adds	r3, r3, r7
1004b1f8:	9305      	str	r3, [sp, #20]
1004b1fa:	19ab      	adds	r3, r5, r6
1004b1fc:	9309      	str	r3, [sp, #36]	@ 0x24
1004b1fe:	2304      	movs	r3, #4
1004b200:	9306      	str	r3, [sp, #24]
1004b202:	0023      	movs	r3, r4
1004b204:	9a05      	ldr	r2, [sp, #20]
1004b206:	3315      	adds	r3, #21
1004b208:	9501      	str	r5, [sp, #4]
1004b20a:	429a      	cmp	r2, r3
1004b20c:	d305      	bcc.n	1004b21a <__multiply+0x8a>
1004b20e:	1b13      	subs	r3, r2, r4
1004b210:	3b15      	subs	r3, #21
1004b212:	089b      	lsrs	r3, r3, #2
1004b214:	3301      	adds	r3, #1
1004b216:	009b      	lsls	r3, r3, #2
1004b218:	9306      	str	r3, [sp, #24]
1004b21a:	9b01      	ldr	r3, [sp, #4]
1004b21c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
1004b21e:	4293      	cmp	r3, r2
1004b220:	d310      	bcc.n	1004b244 <__multiply+0xb4>
1004b222:	9b03      	ldr	r3, [sp, #12]
1004b224:	2b00      	cmp	r3, #0
1004b226:	dd05      	ble.n	1004b234 <__multiply+0xa4>
1004b228:	9b04      	ldr	r3, [sp, #16]
1004b22a:	3b04      	subs	r3, #4
1004b22c:	9304      	str	r3, [sp, #16]
1004b22e:	681b      	ldr	r3, [r3, #0]
1004b230:	2b00      	cmp	r3, #0
1004b232:	d056      	beq.n	1004b2e2 <__multiply+0x152>
1004b234:	9b02      	ldr	r3, [sp, #8]
1004b236:	9a03      	ldr	r2, [sp, #12]
1004b238:	0018      	movs	r0, r3
1004b23a:	611a      	str	r2, [r3, #16]
1004b23c:	b00b      	add	sp, #44	@ 0x2c
1004b23e:	bdf0      	pop	{r4, r5, r6, r7, pc}
1004b240:	c304      	stmia	r3!, {r2}
1004b242:	e7cf      	b.n	1004b1e4 <__multiply+0x54>
1004b244:	9b01      	ldr	r3, [sp, #4]
1004b246:	6818      	ldr	r0, [r3, #0]
1004b248:	b280      	uxth	r0, r0
1004b24a:	2800      	cmp	r0, #0
1004b24c:	d01e      	beq.n	1004b28c <__multiply+0xfc>
1004b24e:	4667      	mov	r7, ip
1004b250:	2500      	movs	r5, #0
1004b252:	9e08      	ldr	r6, [sp, #32]
1004b254:	ce02      	ldmia	r6!, {r1}
1004b256:	683b      	ldr	r3, [r7, #0]
1004b258:	9307      	str	r3, [sp, #28]
1004b25a:	b28b      	uxth	r3, r1
1004b25c:	4343      	muls	r3, r0
1004b25e:	001a      	movs	r2, r3
1004b260:	466b      	mov	r3, sp
1004b262:	0c09      	lsrs	r1, r1, #16
1004b264:	8b9b      	ldrh	r3, [r3, #28]
1004b266:	4341      	muls	r1, r0
1004b268:	18d3      	adds	r3, r2, r3
1004b26a:	9a07      	ldr	r2, [sp, #28]
1004b26c:	195b      	adds	r3, r3, r5
1004b26e:	0c12      	lsrs	r2, r2, #16
1004b270:	1889      	adds	r1, r1, r2
1004b272:	0c1a      	lsrs	r2, r3, #16
1004b274:	188a      	adds	r2, r1, r2
1004b276:	b29b      	uxth	r3, r3
1004b278:	0c15      	lsrs	r5, r2, #16
1004b27a:	0412      	lsls	r2, r2, #16
1004b27c:	431a      	orrs	r2, r3
1004b27e:	9b05      	ldr	r3, [sp, #20]
1004b280:	c704      	stmia	r7!, {r2}
1004b282:	42b3      	cmp	r3, r6
1004b284:	d8e6      	bhi.n	1004b254 <__multiply+0xc4>
1004b286:	4663      	mov	r3, ip
1004b288:	9a06      	ldr	r2, [sp, #24]
1004b28a:	509d      	str	r5, [r3, r2]
1004b28c:	9b01      	ldr	r3, [sp, #4]
1004b28e:	6818      	ldr	r0, [r3, #0]
1004b290:	0c00      	lsrs	r0, r0, #16
1004b292:	d020      	beq.n	1004b2d6 <__multiply+0x146>
1004b294:	4663      	mov	r3, ip
1004b296:	0025      	movs	r5, r4
1004b298:	4661      	mov	r1, ip
1004b29a:	2700      	movs	r7, #0
1004b29c:	681b      	ldr	r3, [r3, #0]
1004b29e:	3514      	adds	r5, #20
1004b2a0:	682a      	ldr	r2, [r5, #0]
1004b2a2:	680e      	ldr	r6, [r1, #0]
1004b2a4:	b292      	uxth	r2, r2
1004b2a6:	4342      	muls	r2, r0
1004b2a8:	0c36      	lsrs	r6, r6, #16
1004b2aa:	1992      	adds	r2, r2, r6
1004b2ac:	19d2      	adds	r2, r2, r7
1004b2ae:	0416      	lsls	r6, r2, #16
1004b2b0:	b29b      	uxth	r3, r3
1004b2b2:	431e      	orrs	r6, r3
1004b2b4:	600e      	str	r6, [r1, #0]
1004b2b6:	cd40      	ldmia	r5!, {r6}
1004b2b8:	684b      	ldr	r3, [r1, #4]
1004b2ba:	0c36      	lsrs	r6, r6, #16
1004b2bc:	4346      	muls	r6, r0
1004b2be:	b29b      	uxth	r3, r3
1004b2c0:	0c12      	lsrs	r2, r2, #16
1004b2c2:	18f3      	adds	r3, r6, r3
1004b2c4:	189b      	adds	r3, r3, r2
1004b2c6:	9a05      	ldr	r2, [sp, #20]
1004b2c8:	0c1f      	lsrs	r7, r3, #16
1004b2ca:	3104      	adds	r1, #4
1004b2cc:	42aa      	cmp	r2, r5
1004b2ce:	d8e7      	bhi.n	1004b2a0 <__multiply+0x110>
1004b2d0:	4662      	mov	r2, ip
1004b2d2:	9906      	ldr	r1, [sp, #24]
1004b2d4:	5053      	str	r3, [r2, r1]
1004b2d6:	9b01      	ldr	r3, [sp, #4]
1004b2d8:	3304      	adds	r3, #4
1004b2da:	9301      	str	r3, [sp, #4]
1004b2dc:	2304      	movs	r3, #4
1004b2de:	449c      	add	ip, r3
1004b2e0:	e79b      	b.n	1004b21a <__multiply+0x8a>
1004b2e2:	9b03      	ldr	r3, [sp, #12]
1004b2e4:	3b01      	subs	r3, #1
1004b2e6:	9303      	str	r3, [sp, #12]
1004b2e8:	e79b      	b.n	1004b222 <__multiply+0x92>
1004b2ea:	46c0      	nop			@ (mov r8, r8)
1004b2ec:	1004bff0 	.word	0x1004bff0
1004b2f0:	1004c001 	.word	0x1004c001

1004b2f4 <__pow5mult>:
1004b2f4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
1004b2f6:	2303      	movs	r3, #3
1004b2f8:	0015      	movs	r5, r2
1004b2fa:	0007      	movs	r7, r0
1004b2fc:	000e      	movs	r6, r1
1004b2fe:	401a      	ands	r2, r3
1004b300:	421d      	tst	r5, r3
1004b302:	d008      	beq.n	1004b316 <__pow5mult+0x22>
1004b304:	4925      	ldr	r1, [pc, #148]	@ (1004b39c <__pow5mult+0xa8>)
1004b306:	3a01      	subs	r2, #1
1004b308:	0092      	lsls	r2, r2, #2
1004b30a:	5852      	ldr	r2, [r2, r1]
1004b30c:	2300      	movs	r3, #0
1004b30e:	0031      	movs	r1, r6
1004b310:	f7ff fe92 	bl	1004b038 <__multadd>
1004b314:	0006      	movs	r6, r0
1004b316:	10ad      	asrs	r5, r5, #2
1004b318:	d03d      	beq.n	1004b396 <__pow5mult+0xa2>
1004b31a:	69fc      	ldr	r4, [r7, #28]
1004b31c:	2c00      	cmp	r4, #0
1004b31e:	d10f      	bne.n	1004b340 <__pow5mult+0x4c>
1004b320:	2010      	movs	r0, #16
1004b322:	f7ff fd65 	bl	1004adf0 <malloc>
1004b326:	1e02      	subs	r2, r0, #0
1004b328:	61f8      	str	r0, [r7, #28]
1004b32a:	d105      	bne.n	1004b338 <__pow5mult+0x44>
1004b32c:	21b4      	movs	r1, #180	@ 0xb4
1004b32e:	4b1c      	ldr	r3, [pc, #112]	@ (1004b3a0 <__pow5mult+0xac>)
1004b330:	481c      	ldr	r0, [pc, #112]	@ (1004b3a4 <__pow5mult+0xb0>)
1004b332:	31ff      	adds	r1, #255	@ 0xff
1004b334:	f000 fa8a 	bl	1004b84c <__assert_func>
1004b338:	6044      	str	r4, [r0, #4]
1004b33a:	6084      	str	r4, [r0, #8]
1004b33c:	6004      	str	r4, [r0, #0]
1004b33e:	60c4      	str	r4, [r0, #12]
1004b340:	69fb      	ldr	r3, [r7, #28]
1004b342:	689c      	ldr	r4, [r3, #8]
1004b344:	9301      	str	r3, [sp, #4]
1004b346:	2c00      	cmp	r4, #0
1004b348:	d108      	bne.n	1004b35c <__pow5mult+0x68>
1004b34a:	0038      	movs	r0, r7
1004b34c:	4916      	ldr	r1, [pc, #88]	@ (1004b3a8 <__pow5mult+0xb4>)
1004b34e:	f7ff ff07 	bl	1004b160 <__i2b>
1004b352:	9b01      	ldr	r3, [sp, #4]
1004b354:	0004      	movs	r4, r0
1004b356:	6098      	str	r0, [r3, #8]
1004b358:	2300      	movs	r3, #0
1004b35a:	6003      	str	r3, [r0, #0]
1004b35c:	2301      	movs	r3, #1
1004b35e:	421d      	tst	r5, r3
1004b360:	d00a      	beq.n	1004b378 <__pow5mult+0x84>
1004b362:	0031      	movs	r1, r6
1004b364:	0022      	movs	r2, r4
1004b366:	0038      	movs	r0, r7
1004b368:	f7ff ff12 	bl	1004b190 <__multiply>
1004b36c:	0031      	movs	r1, r6
1004b36e:	9001      	str	r0, [sp, #4]
1004b370:	0038      	movs	r0, r7
1004b372:	f7ff fe3d 	bl	1004aff0 <_Bfree>
1004b376:	9e01      	ldr	r6, [sp, #4]
1004b378:	106d      	asrs	r5, r5, #1
1004b37a:	d00c      	beq.n	1004b396 <__pow5mult+0xa2>
1004b37c:	6820      	ldr	r0, [r4, #0]
1004b37e:	2800      	cmp	r0, #0
1004b380:	d107      	bne.n	1004b392 <__pow5mult+0x9e>
1004b382:	0022      	movs	r2, r4
1004b384:	0021      	movs	r1, r4
1004b386:	0038      	movs	r0, r7
1004b388:	f7ff ff02 	bl	1004b190 <__multiply>
1004b38c:	2300      	movs	r3, #0
1004b38e:	6020      	str	r0, [r4, #0]
1004b390:	6003      	str	r3, [r0, #0]
1004b392:	0004      	movs	r4, r0
1004b394:	e7e2      	b.n	1004b35c <__pow5mult+0x68>
1004b396:	0030      	movs	r0, r6
1004b398:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
1004b39a:	46c0      	nop			@ (mov r8, r8)
1004b39c:	1004c05c 	.word	0x1004c05c
1004b3a0:	1004bf81 	.word	0x1004bf81
1004b3a4:	1004c001 	.word	0x1004c001
1004b3a8:	00000271 	.word	0x00000271

1004b3ac <__lshift>:
1004b3ac:	b5f0      	push	{r4, r5, r6, r7, lr}
1004b3ae:	000c      	movs	r4, r1
1004b3b0:	0016      	movs	r6, r2
1004b3b2:	6923      	ldr	r3, [r4, #16]
1004b3b4:	1157      	asrs	r7, r2, #5
1004b3b6:	b085      	sub	sp, #20
1004b3b8:	18fb      	adds	r3, r7, r3
1004b3ba:	9301      	str	r3, [sp, #4]
1004b3bc:	3301      	adds	r3, #1
1004b3be:	9300      	str	r3, [sp, #0]
1004b3c0:	6849      	ldr	r1, [r1, #4]
1004b3c2:	68a3      	ldr	r3, [r4, #8]
1004b3c4:	9002      	str	r0, [sp, #8]
1004b3c6:	9a00      	ldr	r2, [sp, #0]
1004b3c8:	4293      	cmp	r3, r2
1004b3ca:	db10      	blt.n	1004b3ee <__lshift+0x42>
1004b3cc:	9802      	ldr	r0, [sp, #8]
1004b3ce:	f7ff fdcb 	bl	1004af68 <_Balloc>
1004b3d2:	2300      	movs	r3, #0
1004b3d4:	0001      	movs	r1, r0
1004b3d6:	0005      	movs	r5, r0
1004b3d8:	001a      	movs	r2, r3
1004b3da:	3114      	adds	r1, #20
1004b3dc:	4298      	cmp	r0, r3
1004b3de:	d10c      	bne.n	1004b3fa <__lshift+0x4e>
1004b3e0:	21ef      	movs	r1, #239	@ 0xef
1004b3e2:	002a      	movs	r2, r5
1004b3e4:	4b25      	ldr	r3, [pc, #148]	@ (1004b47c <__lshift+0xd0>)
1004b3e6:	4826      	ldr	r0, [pc, #152]	@ (1004b480 <__lshift+0xd4>)
1004b3e8:	0049      	lsls	r1, r1, #1
1004b3ea:	f000 fa2f 	bl	1004b84c <__assert_func>
1004b3ee:	3101      	adds	r1, #1
1004b3f0:	005b      	lsls	r3, r3, #1
1004b3f2:	e7e8      	b.n	1004b3c6 <__lshift+0x1a>
1004b3f4:	0098      	lsls	r0, r3, #2
1004b3f6:	500a      	str	r2, [r1, r0]
1004b3f8:	3301      	adds	r3, #1
1004b3fa:	42bb      	cmp	r3, r7
1004b3fc:	dbfa      	blt.n	1004b3f4 <__lshift+0x48>
1004b3fe:	43fb      	mvns	r3, r7
1004b400:	17db      	asrs	r3, r3, #31
1004b402:	401f      	ands	r7, r3
1004b404:	00bf      	lsls	r7, r7, #2
1004b406:	0023      	movs	r3, r4
1004b408:	201f      	movs	r0, #31
1004b40a:	19c9      	adds	r1, r1, r7
1004b40c:	0037      	movs	r7, r6
1004b40e:	6922      	ldr	r2, [r4, #16]
1004b410:	3314      	adds	r3, #20
1004b412:	0092      	lsls	r2, r2, #2
1004b414:	189a      	adds	r2, r3, r2
1004b416:	4007      	ands	r7, r0
1004b418:	4206      	tst	r6, r0
1004b41a:	d029      	beq.n	1004b470 <__lshift+0xc4>
1004b41c:	3001      	adds	r0, #1
1004b41e:	1bc0      	subs	r0, r0, r7
1004b420:	9003      	str	r0, [sp, #12]
1004b422:	468c      	mov	ip, r1
1004b424:	2000      	movs	r0, #0
1004b426:	681e      	ldr	r6, [r3, #0]
1004b428:	40be      	lsls	r6, r7
1004b42a:	4306      	orrs	r6, r0
1004b42c:	4660      	mov	r0, ip
1004b42e:	c040      	stmia	r0!, {r6}
1004b430:	4684      	mov	ip, r0
1004b432:	9e03      	ldr	r6, [sp, #12]
1004b434:	cb01      	ldmia	r3!, {r0}
1004b436:	40f0      	lsrs	r0, r6
1004b438:	429a      	cmp	r2, r3
1004b43a:	d8f4      	bhi.n	1004b426 <__lshift+0x7a>
1004b43c:	0026      	movs	r6, r4
1004b43e:	3615      	adds	r6, #21
1004b440:	2304      	movs	r3, #4
1004b442:	42b2      	cmp	r2, r6
1004b444:	d304      	bcc.n	1004b450 <__lshift+0xa4>
1004b446:	1b13      	subs	r3, r2, r4
1004b448:	3b15      	subs	r3, #21
1004b44a:	089b      	lsrs	r3, r3, #2
1004b44c:	3301      	adds	r3, #1
1004b44e:	009b      	lsls	r3, r3, #2
1004b450:	50c8      	str	r0, [r1, r3]
1004b452:	2800      	cmp	r0, #0
1004b454:	d002      	beq.n	1004b45c <__lshift+0xb0>
1004b456:	9b01      	ldr	r3, [sp, #4]
1004b458:	3302      	adds	r3, #2
1004b45a:	9300      	str	r3, [sp, #0]
1004b45c:	9b00      	ldr	r3, [sp, #0]
1004b45e:	9802      	ldr	r0, [sp, #8]
1004b460:	3b01      	subs	r3, #1
1004b462:	0021      	movs	r1, r4
1004b464:	612b      	str	r3, [r5, #16]
1004b466:	f7ff fdc3 	bl	1004aff0 <_Bfree>
1004b46a:	0028      	movs	r0, r5
1004b46c:	b005      	add	sp, #20
1004b46e:	bdf0      	pop	{r4, r5, r6, r7, pc}
1004b470:	cb01      	ldmia	r3!, {r0}
1004b472:	c101      	stmia	r1!, {r0}
1004b474:	429a      	cmp	r2, r3
1004b476:	d8fb      	bhi.n	1004b470 <__lshift+0xc4>
1004b478:	e7f0      	b.n	1004b45c <__lshift+0xb0>
1004b47a:	46c0      	nop			@ (mov r8, r8)
1004b47c:	1004bff0 	.word	0x1004bff0
1004b480:	1004c001 	.word	0x1004c001

1004b484 <__mcmp>:
1004b484:	b530      	push	{r4, r5, lr}
1004b486:	690b      	ldr	r3, [r1, #16]
1004b488:	6904      	ldr	r4, [r0, #16]
1004b48a:	0002      	movs	r2, r0
1004b48c:	1ae0      	subs	r0, r4, r3
1004b48e:	429c      	cmp	r4, r3
1004b490:	d10f      	bne.n	1004b4b2 <__mcmp+0x2e>
1004b492:	3214      	adds	r2, #20
1004b494:	009b      	lsls	r3, r3, #2
1004b496:	3114      	adds	r1, #20
1004b498:	0014      	movs	r4, r2
1004b49a:	18c9      	adds	r1, r1, r3
1004b49c:	18d2      	adds	r2, r2, r3
1004b49e:	3a04      	subs	r2, #4
1004b4a0:	3904      	subs	r1, #4
1004b4a2:	6815      	ldr	r5, [r2, #0]
1004b4a4:	680b      	ldr	r3, [r1, #0]
1004b4a6:	429d      	cmp	r5, r3
1004b4a8:	d004      	beq.n	1004b4b4 <__mcmp+0x30>
1004b4aa:	2001      	movs	r0, #1
1004b4ac:	429d      	cmp	r5, r3
1004b4ae:	d200      	bcs.n	1004b4b2 <__mcmp+0x2e>
1004b4b0:	3802      	subs	r0, #2
1004b4b2:	bd30      	pop	{r4, r5, pc}
1004b4b4:	4294      	cmp	r4, r2
1004b4b6:	d3f2      	bcc.n	1004b49e <__mcmp+0x1a>
1004b4b8:	e7fb      	b.n	1004b4b2 <__mcmp+0x2e>
	...

1004b4bc <__mdiff>:
1004b4bc:	b5f0      	push	{r4, r5, r6, r7, lr}
1004b4be:	000c      	movs	r4, r1
1004b4c0:	b087      	sub	sp, #28
1004b4c2:	9000      	str	r0, [sp, #0]
1004b4c4:	0011      	movs	r1, r2
1004b4c6:	0020      	movs	r0, r4
1004b4c8:	0017      	movs	r7, r2
1004b4ca:	f7ff ffdb 	bl	1004b484 <__mcmp>
1004b4ce:	1e05      	subs	r5, r0, #0
1004b4d0:	d110      	bne.n	1004b4f4 <__mdiff+0x38>
1004b4d2:	0001      	movs	r1, r0
1004b4d4:	9800      	ldr	r0, [sp, #0]
1004b4d6:	f7ff fd47 	bl	1004af68 <_Balloc>
1004b4da:	1e02      	subs	r2, r0, #0
1004b4dc:	d104      	bne.n	1004b4e8 <__mdiff+0x2c>
1004b4de:	4b40      	ldr	r3, [pc, #256]	@ (1004b5e0 <__mdiff+0x124>)
1004b4e0:	4840      	ldr	r0, [pc, #256]	@ (1004b5e4 <__mdiff+0x128>)
1004b4e2:	4941      	ldr	r1, [pc, #260]	@ (1004b5e8 <__mdiff+0x12c>)
1004b4e4:	f000 f9b2 	bl	1004b84c <__assert_func>
1004b4e8:	2301      	movs	r3, #1
1004b4ea:	6145      	str	r5, [r0, #20]
1004b4ec:	6103      	str	r3, [r0, #16]
1004b4ee:	0010      	movs	r0, r2
1004b4f0:	b007      	add	sp, #28
1004b4f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
1004b4f4:	2600      	movs	r6, #0
1004b4f6:	42b0      	cmp	r0, r6
1004b4f8:	da03      	bge.n	1004b502 <__mdiff+0x46>
1004b4fa:	0023      	movs	r3, r4
1004b4fc:	003c      	movs	r4, r7
1004b4fe:	001f      	movs	r7, r3
1004b500:	3601      	adds	r6, #1
1004b502:	6861      	ldr	r1, [r4, #4]
1004b504:	9800      	ldr	r0, [sp, #0]
1004b506:	f7ff fd2f 	bl	1004af68 <_Balloc>
1004b50a:	1e02      	subs	r2, r0, #0
1004b50c:	d103      	bne.n	1004b516 <__mdiff+0x5a>
1004b50e:	4b34      	ldr	r3, [pc, #208]	@ (1004b5e0 <__mdiff+0x124>)
1004b510:	4834      	ldr	r0, [pc, #208]	@ (1004b5e4 <__mdiff+0x128>)
1004b512:	4936      	ldr	r1, [pc, #216]	@ (1004b5ec <__mdiff+0x130>)
1004b514:	e7e6      	b.n	1004b4e4 <__mdiff+0x28>
1004b516:	6923      	ldr	r3, [r4, #16]
1004b518:	3414      	adds	r4, #20
1004b51a:	9300      	str	r3, [sp, #0]
1004b51c:	009b      	lsls	r3, r3, #2
1004b51e:	18e3      	adds	r3, r4, r3
1004b520:	0021      	movs	r1, r4
1004b522:	9401      	str	r4, [sp, #4]
1004b524:	003c      	movs	r4, r7
1004b526:	9302      	str	r3, [sp, #8]
1004b528:	693b      	ldr	r3, [r7, #16]
1004b52a:	3414      	adds	r4, #20
1004b52c:	009b      	lsls	r3, r3, #2
1004b52e:	18e3      	adds	r3, r4, r3
1004b530:	9303      	str	r3, [sp, #12]
1004b532:	0003      	movs	r3, r0
1004b534:	60c6      	str	r6, [r0, #12]
1004b536:	468c      	mov	ip, r1
1004b538:	2000      	movs	r0, #0
1004b53a:	3314      	adds	r3, #20
1004b53c:	9304      	str	r3, [sp, #16]
1004b53e:	9305      	str	r3, [sp, #20]
1004b540:	4663      	mov	r3, ip
1004b542:	cb20      	ldmia	r3!, {r5}
1004b544:	b2a9      	uxth	r1, r5
1004b546:	000e      	movs	r6, r1
1004b548:	469c      	mov	ip, r3
1004b54a:	cc08      	ldmia	r4!, {r3}
1004b54c:	0c2d      	lsrs	r5, r5, #16
1004b54e:	b299      	uxth	r1, r3
1004b550:	1a71      	subs	r1, r6, r1
1004b552:	1809      	adds	r1, r1, r0
1004b554:	0c1b      	lsrs	r3, r3, #16
1004b556:	1408      	asrs	r0, r1, #16
1004b558:	1aeb      	subs	r3, r5, r3
1004b55a:	181b      	adds	r3, r3, r0
1004b55c:	1418      	asrs	r0, r3, #16
1004b55e:	b289      	uxth	r1, r1
1004b560:	041b      	lsls	r3, r3, #16
1004b562:	4319      	orrs	r1, r3
1004b564:	9b05      	ldr	r3, [sp, #20]
1004b566:	c302      	stmia	r3!, {r1}
1004b568:	9305      	str	r3, [sp, #20]
1004b56a:	9b03      	ldr	r3, [sp, #12]
1004b56c:	42a3      	cmp	r3, r4
1004b56e:	d8e7      	bhi.n	1004b540 <__mdiff+0x84>
1004b570:	0039      	movs	r1, r7
1004b572:	9c03      	ldr	r4, [sp, #12]
1004b574:	3115      	adds	r1, #21
1004b576:	2304      	movs	r3, #4
1004b578:	428c      	cmp	r4, r1
1004b57a:	d304      	bcc.n	1004b586 <__mdiff+0xca>
1004b57c:	1be3      	subs	r3, r4, r7
1004b57e:	3b15      	subs	r3, #21
1004b580:	089b      	lsrs	r3, r3, #2
1004b582:	3301      	adds	r3, #1
1004b584:	009b      	lsls	r3, r3, #2
1004b586:	9901      	ldr	r1, [sp, #4]
1004b588:	18cd      	adds	r5, r1, r3
1004b58a:	9904      	ldr	r1, [sp, #16]
1004b58c:	002e      	movs	r6, r5
1004b58e:	18cb      	adds	r3, r1, r3
1004b590:	001f      	movs	r7, r3
1004b592:	9902      	ldr	r1, [sp, #8]
1004b594:	428e      	cmp	r6, r1
1004b596:	d311      	bcc.n	1004b5bc <__mdiff+0x100>
1004b598:	9c02      	ldr	r4, [sp, #8]
1004b59a:	1ee9      	subs	r1, r5, #3
1004b59c:	2000      	movs	r0, #0
1004b59e:	428c      	cmp	r4, r1
1004b5a0:	d304      	bcc.n	1004b5ac <__mdiff+0xf0>
1004b5a2:	0021      	movs	r1, r4
1004b5a4:	3103      	adds	r1, #3
1004b5a6:	1b49      	subs	r1, r1, r5
1004b5a8:	0889      	lsrs	r1, r1, #2
1004b5aa:	0088      	lsls	r0, r1, #2
1004b5ac:	181b      	adds	r3, r3, r0
1004b5ae:	3b04      	subs	r3, #4
1004b5b0:	6819      	ldr	r1, [r3, #0]
1004b5b2:	2900      	cmp	r1, #0
1004b5b4:	d010      	beq.n	1004b5d8 <__mdiff+0x11c>
1004b5b6:	9b00      	ldr	r3, [sp, #0]
1004b5b8:	6113      	str	r3, [r2, #16]
1004b5ba:	e798      	b.n	1004b4ee <__mdiff+0x32>
1004b5bc:	4684      	mov	ip, r0
1004b5be:	ce02      	ldmia	r6!, {r1}
1004b5c0:	b288      	uxth	r0, r1
1004b5c2:	4460      	add	r0, ip
1004b5c4:	1400      	asrs	r0, r0, #16
1004b5c6:	0c0c      	lsrs	r4, r1, #16
1004b5c8:	1904      	adds	r4, r0, r4
1004b5ca:	4461      	add	r1, ip
1004b5cc:	1420      	asrs	r0, r4, #16
1004b5ce:	b289      	uxth	r1, r1
1004b5d0:	0424      	lsls	r4, r4, #16
1004b5d2:	4321      	orrs	r1, r4
1004b5d4:	c702      	stmia	r7!, {r1}
1004b5d6:	e7dc      	b.n	1004b592 <__mdiff+0xd6>
1004b5d8:	9900      	ldr	r1, [sp, #0]
1004b5da:	3901      	subs	r1, #1
1004b5dc:	9100      	str	r1, [sp, #0]
1004b5de:	e7e6      	b.n	1004b5ae <__mdiff+0xf2>
1004b5e0:	1004bff0 	.word	0x1004bff0
1004b5e4:	1004c001 	.word	0x1004c001
1004b5e8:	00000237 	.word	0x00000237
1004b5ec:	00000245 	.word	0x00000245

1004b5f0 <__d2b>:
1004b5f0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
1004b5f2:	2101      	movs	r1, #1
1004b5f4:	0016      	movs	r6, r2
1004b5f6:	001f      	movs	r7, r3
1004b5f8:	f7ff fcb6 	bl	1004af68 <_Balloc>
1004b5fc:	1e04      	subs	r4, r0, #0
1004b5fe:	d105      	bne.n	1004b60c <__d2b+0x1c>
1004b600:	0022      	movs	r2, r4
1004b602:	4b25      	ldr	r3, [pc, #148]	@ (1004b698 <__d2b+0xa8>)
1004b604:	4825      	ldr	r0, [pc, #148]	@ (1004b69c <__d2b+0xac>)
1004b606:	4926      	ldr	r1, [pc, #152]	@ (1004b6a0 <__d2b+0xb0>)
1004b608:	f000 f920 	bl	1004b84c <__assert_func>
1004b60c:	033b      	lsls	r3, r7, #12
1004b60e:	007d      	lsls	r5, r7, #1
1004b610:	0b1b      	lsrs	r3, r3, #12
1004b612:	0d6d      	lsrs	r5, r5, #21
1004b614:	d002      	beq.n	1004b61c <__d2b+0x2c>
1004b616:	2280      	movs	r2, #128	@ 0x80
1004b618:	0352      	lsls	r2, r2, #13
1004b61a:	4313      	orrs	r3, r2
1004b61c:	9301      	str	r3, [sp, #4]
1004b61e:	2e00      	cmp	r6, #0
1004b620:	d025      	beq.n	1004b66e <__d2b+0x7e>
1004b622:	4668      	mov	r0, sp
1004b624:	9600      	str	r6, [sp, #0]
1004b626:	f7ff fd6c 	bl	1004b102 <__lo0bits>
1004b62a:	9b01      	ldr	r3, [sp, #4]
1004b62c:	9900      	ldr	r1, [sp, #0]
1004b62e:	2800      	cmp	r0, #0
1004b630:	d01b      	beq.n	1004b66a <__d2b+0x7a>
1004b632:	2220      	movs	r2, #32
1004b634:	001e      	movs	r6, r3
1004b636:	1a12      	subs	r2, r2, r0
1004b638:	4096      	lsls	r6, r2
1004b63a:	0032      	movs	r2, r6
1004b63c:	40c3      	lsrs	r3, r0
1004b63e:	430a      	orrs	r2, r1
1004b640:	6162      	str	r2, [r4, #20]
1004b642:	9301      	str	r3, [sp, #4]
1004b644:	9e01      	ldr	r6, [sp, #4]
1004b646:	61a6      	str	r6, [r4, #24]
1004b648:	1e73      	subs	r3, r6, #1
1004b64a:	419e      	sbcs	r6, r3
1004b64c:	3601      	adds	r6, #1
1004b64e:	6126      	str	r6, [r4, #16]
1004b650:	2d00      	cmp	r5, #0
1004b652:	d014      	beq.n	1004b67e <__d2b+0x8e>
1004b654:	2635      	movs	r6, #53	@ 0x35
1004b656:	4b13      	ldr	r3, [pc, #76]	@ (1004b6a4 <__d2b+0xb4>)
1004b658:	18ed      	adds	r5, r5, r3
1004b65a:	9b08      	ldr	r3, [sp, #32]
1004b65c:	182d      	adds	r5, r5, r0
1004b65e:	601d      	str	r5, [r3, #0]
1004b660:	9b09      	ldr	r3, [sp, #36]	@ 0x24
1004b662:	1a36      	subs	r6, r6, r0
1004b664:	601e      	str	r6, [r3, #0]
1004b666:	0020      	movs	r0, r4
1004b668:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
1004b66a:	6161      	str	r1, [r4, #20]
1004b66c:	e7ea      	b.n	1004b644 <__d2b+0x54>
1004b66e:	a801      	add	r0, sp, #4
1004b670:	f7ff fd47 	bl	1004b102 <__lo0bits>
1004b674:	9b01      	ldr	r3, [sp, #4]
1004b676:	2601      	movs	r6, #1
1004b678:	6163      	str	r3, [r4, #20]
1004b67a:	3020      	adds	r0, #32
1004b67c:	e7e7      	b.n	1004b64e <__d2b+0x5e>
1004b67e:	4b0a      	ldr	r3, [pc, #40]	@ (1004b6a8 <__d2b+0xb8>)
1004b680:	18c0      	adds	r0, r0, r3
1004b682:	9b08      	ldr	r3, [sp, #32]
1004b684:	6018      	str	r0, [r3, #0]
1004b686:	4b09      	ldr	r3, [pc, #36]	@ (1004b6ac <__d2b+0xbc>)
1004b688:	18f3      	adds	r3, r6, r3
1004b68a:	009b      	lsls	r3, r3, #2
1004b68c:	18e3      	adds	r3, r4, r3
1004b68e:	6958      	ldr	r0, [r3, #20]
1004b690:	f7ff fd16 	bl	1004b0c0 <__hi0bits>
1004b694:	0176      	lsls	r6, r6, #5
1004b696:	e7e3      	b.n	1004b660 <__d2b+0x70>
1004b698:	1004bff0 	.word	0x1004bff0
1004b69c:	1004c001 	.word	0x1004c001
1004b6a0:	0000030f 	.word	0x0000030f
1004b6a4:	fffffbcd 	.word	0xfffffbcd
1004b6a8:	fffffbce 	.word	0xfffffbce
1004b6ac:	3fffffff 	.word	0x3fffffff

1004b6b0 <__sflush_r>:
1004b6b0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
1004b6b2:	220c      	movs	r2, #12
1004b6b4:	5e8b      	ldrsh	r3, [r1, r2]
1004b6b6:	0005      	movs	r5, r0
1004b6b8:	000c      	movs	r4, r1
1004b6ba:	071a      	lsls	r2, r3, #28
1004b6bc:	d456      	bmi.n	1004b76c <__sflush_r+0xbc>
1004b6be:	684a      	ldr	r2, [r1, #4]
1004b6c0:	2a00      	cmp	r2, #0
1004b6c2:	dc02      	bgt.n	1004b6ca <__sflush_r+0x1a>
1004b6c4:	6c0a      	ldr	r2, [r1, #64]	@ 0x40
1004b6c6:	2a00      	cmp	r2, #0
1004b6c8:	dd4e      	ble.n	1004b768 <__sflush_r+0xb8>
1004b6ca:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
1004b6cc:	2f00      	cmp	r7, #0
1004b6ce:	d04b      	beq.n	1004b768 <__sflush_r+0xb8>
1004b6d0:	2200      	movs	r2, #0
1004b6d2:	2080      	movs	r0, #128	@ 0x80
1004b6d4:	682e      	ldr	r6, [r5, #0]
1004b6d6:	602a      	str	r2, [r5, #0]
1004b6d8:	001a      	movs	r2, r3
1004b6da:	0140      	lsls	r0, r0, #5
1004b6dc:	6a21      	ldr	r1, [r4, #32]
1004b6de:	4002      	ands	r2, r0
1004b6e0:	4203      	tst	r3, r0
1004b6e2:	d033      	beq.n	1004b74c <__sflush_r+0x9c>
1004b6e4:	6d62      	ldr	r2, [r4, #84]	@ 0x54
1004b6e6:	89a3      	ldrh	r3, [r4, #12]
1004b6e8:	075b      	lsls	r3, r3, #29
1004b6ea:	d506      	bpl.n	1004b6fa <__sflush_r+0x4a>
1004b6ec:	6863      	ldr	r3, [r4, #4]
1004b6ee:	1ad2      	subs	r2, r2, r3
1004b6f0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
1004b6f2:	2b00      	cmp	r3, #0
1004b6f4:	d001      	beq.n	1004b6fa <__sflush_r+0x4a>
1004b6f6:	6c23      	ldr	r3, [r4, #64]	@ 0x40
1004b6f8:	1ad2      	subs	r2, r2, r3
1004b6fa:	2300      	movs	r3, #0
1004b6fc:	0028      	movs	r0, r5
1004b6fe:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
1004b700:	6a21      	ldr	r1, [r4, #32]
1004b702:	47b8      	blx	r7
1004b704:	89a2      	ldrh	r2, [r4, #12]
1004b706:	1c43      	adds	r3, r0, #1
1004b708:	d106      	bne.n	1004b718 <__sflush_r+0x68>
1004b70a:	6829      	ldr	r1, [r5, #0]
1004b70c:	291d      	cmp	r1, #29
1004b70e:	d846      	bhi.n	1004b79e <__sflush_r+0xee>
1004b710:	4b29      	ldr	r3, [pc, #164]	@ (1004b7b8 <__sflush_r+0x108>)
1004b712:	410b      	asrs	r3, r1
1004b714:	07db      	lsls	r3, r3, #31
1004b716:	d442      	bmi.n	1004b79e <__sflush_r+0xee>
1004b718:	2300      	movs	r3, #0
1004b71a:	6063      	str	r3, [r4, #4]
1004b71c:	6923      	ldr	r3, [r4, #16]
1004b71e:	6023      	str	r3, [r4, #0]
1004b720:	04d2      	lsls	r2, r2, #19
1004b722:	d505      	bpl.n	1004b730 <__sflush_r+0x80>
1004b724:	1c43      	adds	r3, r0, #1
1004b726:	d102      	bne.n	1004b72e <__sflush_r+0x7e>
1004b728:	682b      	ldr	r3, [r5, #0]
1004b72a:	2b00      	cmp	r3, #0
1004b72c:	d100      	bne.n	1004b730 <__sflush_r+0x80>
1004b72e:	6560      	str	r0, [r4, #84]	@ 0x54
1004b730:	6b61      	ldr	r1, [r4, #52]	@ 0x34
1004b732:	602e      	str	r6, [r5, #0]
1004b734:	2900      	cmp	r1, #0
1004b736:	d017      	beq.n	1004b768 <__sflush_r+0xb8>
1004b738:	0023      	movs	r3, r4
1004b73a:	3344      	adds	r3, #68	@ 0x44
1004b73c:	4299      	cmp	r1, r3
1004b73e:	d002      	beq.n	1004b746 <__sflush_r+0x96>
1004b740:	0028      	movs	r0, r5
1004b742:	f7ff fb0b 	bl	1004ad5c <_free_r>
1004b746:	2300      	movs	r3, #0
1004b748:	6363      	str	r3, [r4, #52]	@ 0x34
1004b74a:	e00d      	b.n	1004b768 <__sflush_r+0xb8>
1004b74c:	2301      	movs	r3, #1
1004b74e:	0028      	movs	r0, r5
1004b750:	47b8      	blx	r7
1004b752:	0002      	movs	r2, r0
1004b754:	1c43      	adds	r3, r0, #1
1004b756:	d1c6      	bne.n	1004b6e6 <__sflush_r+0x36>
1004b758:	682b      	ldr	r3, [r5, #0]
1004b75a:	2b00      	cmp	r3, #0
1004b75c:	d0c3      	beq.n	1004b6e6 <__sflush_r+0x36>
1004b75e:	2b1d      	cmp	r3, #29
1004b760:	d001      	beq.n	1004b766 <__sflush_r+0xb6>
1004b762:	2b16      	cmp	r3, #22
1004b764:	d11a      	bne.n	1004b79c <__sflush_r+0xec>
1004b766:	602e      	str	r6, [r5, #0]
1004b768:	2000      	movs	r0, #0
1004b76a:	e01e      	b.n	1004b7aa <__sflush_r+0xfa>
1004b76c:	690e      	ldr	r6, [r1, #16]
1004b76e:	2e00      	cmp	r6, #0
1004b770:	d0fa      	beq.n	1004b768 <__sflush_r+0xb8>
1004b772:	680f      	ldr	r7, [r1, #0]
1004b774:	600e      	str	r6, [r1, #0]
1004b776:	1bba      	subs	r2, r7, r6
1004b778:	9201      	str	r2, [sp, #4]
1004b77a:	2200      	movs	r2, #0
1004b77c:	079b      	lsls	r3, r3, #30
1004b77e:	d100      	bne.n	1004b782 <__sflush_r+0xd2>
1004b780:	694a      	ldr	r2, [r1, #20]
1004b782:	60a2      	str	r2, [r4, #8]
1004b784:	9b01      	ldr	r3, [sp, #4]
1004b786:	2b00      	cmp	r3, #0
1004b788:	ddee      	ble.n	1004b768 <__sflush_r+0xb8>
1004b78a:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
1004b78c:	0032      	movs	r2, r6
1004b78e:	001f      	movs	r7, r3
1004b790:	0028      	movs	r0, r5
1004b792:	9b01      	ldr	r3, [sp, #4]
1004b794:	6a21      	ldr	r1, [r4, #32]
1004b796:	47b8      	blx	r7
1004b798:	2800      	cmp	r0, #0
1004b79a:	dc07      	bgt.n	1004b7ac <__sflush_r+0xfc>
1004b79c:	89a2      	ldrh	r2, [r4, #12]
1004b79e:	2340      	movs	r3, #64	@ 0x40
1004b7a0:	2001      	movs	r0, #1
1004b7a2:	4313      	orrs	r3, r2
1004b7a4:	b21b      	sxth	r3, r3
1004b7a6:	81a3      	strh	r3, [r4, #12]
1004b7a8:	4240      	negs	r0, r0
1004b7aa:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
1004b7ac:	9b01      	ldr	r3, [sp, #4]
1004b7ae:	1836      	adds	r6, r6, r0
1004b7b0:	1a1b      	subs	r3, r3, r0
1004b7b2:	9301      	str	r3, [sp, #4]
1004b7b4:	e7e6      	b.n	1004b784 <__sflush_r+0xd4>
1004b7b6:	46c0      	nop			@ (mov r8, r8)
1004b7b8:	dfbffffe 	.word	0xdfbffffe

1004b7bc <_fflush_r>:
1004b7bc:	690b      	ldr	r3, [r1, #16]
1004b7be:	b570      	push	{r4, r5, r6, lr}
1004b7c0:	0005      	movs	r5, r0
1004b7c2:	000c      	movs	r4, r1
1004b7c4:	2b00      	cmp	r3, #0
1004b7c6:	d102      	bne.n	1004b7ce <_fflush_r+0x12>
1004b7c8:	2500      	movs	r5, #0
1004b7ca:	0028      	movs	r0, r5
1004b7cc:	bd70      	pop	{r4, r5, r6, pc}
1004b7ce:	2800      	cmp	r0, #0
1004b7d0:	d004      	beq.n	1004b7dc <_fflush_r+0x20>
1004b7d2:	6a03      	ldr	r3, [r0, #32]
1004b7d4:	2b00      	cmp	r3, #0
1004b7d6:	d101      	bne.n	1004b7dc <_fflush_r+0x20>
1004b7d8:	f7fe fb42 	bl	10049e60 <__sinit>
1004b7dc:	220c      	movs	r2, #12
1004b7de:	5ea3      	ldrsh	r3, [r4, r2]
1004b7e0:	2b00      	cmp	r3, #0
1004b7e2:	d0f1      	beq.n	1004b7c8 <_fflush_r+0xc>
1004b7e4:	6e62      	ldr	r2, [r4, #100]	@ 0x64
1004b7e6:	07d2      	lsls	r2, r2, #31
1004b7e8:	d404      	bmi.n	1004b7f4 <_fflush_r+0x38>
1004b7ea:	059b      	lsls	r3, r3, #22
1004b7ec:	d402      	bmi.n	1004b7f4 <_fflush_r+0x38>
1004b7ee:	6da0      	ldr	r0, [r4, #88]	@ 0x58
1004b7f0:	f7fe fc25 	bl	1004a03e <__retarget_lock_acquire_recursive>
1004b7f4:	0028      	movs	r0, r5
1004b7f6:	0021      	movs	r1, r4
1004b7f8:	f7ff ff5a 	bl	1004b6b0 <__sflush_r>
1004b7fc:	6e63      	ldr	r3, [r4, #100]	@ 0x64
1004b7fe:	0005      	movs	r5, r0
1004b800:	07db      	lsls	r3, r3, #31
1004b802:	d4e2      	bmi.n	1004b7ca <_fflush_r+0xe>
1004b804:	89a3      	ldrh	r3, [r4, #12]
1004b806:	059b      	lsls	r3, r3, #22
1004b808:	d4df      	bmi.n	1004b7ca <_fflush_r+0xe>
1004b80a:	6da0      	ldr	r0, [r4, #88]	@ 0x58
1004b80c:	f7fe fc18 	bl	1004a040 <__retarget_lock_release_recursive>
1004b810:	e7db      	b.n	1004b7ca <_fflush_r+0xe>
	...

1004b814 <_sbrk_r>:
1004b814:	2300      	movs	r3, #0
1004b816:	b570      	push	{r4, r5, r6, lr}
1004b818:	4d06      	ldr	r5, [pc, #24]	@ (1004b834 <_sbrk_r+0x20>)
1004b81a:	0004      	movs	r4, r0
1004b81c:	0008      	movs	r0, r1
1004b81e:	602b      	str	r3, [r5, #0]
1004b820:	f7f7 fe16 	bl	10043450 <_sbrk>
1004b824:	1c43      	adds	r3, r0, #1
1004b826:	d103      	bne.n	1004b830 <_sbrk_r+0x1c>
1004b828:	682b      	ldr	r3, [r5, #0]
1004b82a:	2b00      	cmp	r3, #0
1004b82c:	d000      	beq.n	1004b830 <_sbrk_r+0x1c>
1004b82e:	6023      	str	r3, [r4, #0]
1004b830:	bd70      	pop	{r4, r5, r6, pc}
1004b832:	46c0      	nop			@ (mov r8, r8)
1004b834:	20000ae4 	.word	0x20000ae4

1004b838 <memcpy>:
1004b838:	2300      	movs	r3, #0
1004b83a:	b510      	push	{r4, lr}
1004b83c:	429a      	cmp	r2, r3
1004b83e:	d100      	bne.n	1004b842 <memcpy+0xa>
1004b840:	bd10      	pop	{r4, pc}
1004b842:	5ccc      	ldrb	r4, [r1, r3]
1004b844:	54c4      	strb	r4, [r0, r3]
1004b846:	3301      	adds	r3, #1
1004b848:	e7f8      	b.n	1004b83c <memcpy+0x4>
	...

1004b84c <__assert_func>:
1004b84c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
1004b84e:	0014      	movs	r4, r2
1004b850:	001a      	movs	r2, r3
1004b852:	4b09      	ldr	r3, [pc, #36]	@ (1004b878 <__assert_func+0x2c>)
1004b854:	0005      	movs	r5, r0
1004b856:	681b      	ldr	r3, [r3, #0]
1004b858:	000e      	movs	r6, r1
1004b85a:	68d8      	ldr	r0, [r3, #12]
1004b85c:	4b07      	ldr	r3, [pc, #28]	@ (1004b87c <__assert_func+0x30>)
1004b85e:	2c00      	cmp	r4, #0
1004b860:	d101      	bne.n	1004b866 <__assert_func+0x1a>
1004b862:	4b07      	ldr	r3, [pc, #28]	@ (1004b880 <__assert_func+0x34>)
1004b864:	001c      	movs	r4, r3
1004b866:	4907      	ldr	r1, [pc, #28]	@ (1004b884 <__assert_func+0x38>)
1004b868:	9301      	str	r3, [sp, #4]
1004b86a:	9402      	str	r4, [sp, #8]
1004b86c:	002b      	movs	r3, r5
1004b86e:	9600      	str	r6, [sp, #0]
1004b870:	f000 f856 	bl	1004b920 <fiprintf>
1004b874:	f000 f864 	bl	1004b940 <abort>
1004b878:	20000b6c 	.word	0x20000b6c
1004b87c:	1004c162 	.word	0x1004c162
1004b880:	1004c19d 	.word	0x1004c19d
1004b884:	1004c16f 	.word	0x1004c16f

1004b888 <_calloc_r>:
1004b888:	b570      	push	{r4, r5, r6, lr}
1004b88a:	0c0b      	lsrs	r3, r1, #16
1004b88c:	0c15      	lsrs	r5, r2, #16
1004b88e:	2b00      	cmp	r3, #0
1004b890:	d11e      	bne.n	1004b8d0 <_calloc_r+0x48>
1004b892:	2d00      	cmp	r5, #0
1004b894:	d10c      	bne.n	1004b8b0 <_calloc_r+0x28>
1004b896:	b289      	uxth	r1, r1
1004b898:	b294      	uxth	r4, r2
1004b89a:	434c      	muls	r4, r1
1004b89c:	0021      	movs	r1, r4
1004b89e:	f7ff fad3 	bl	1004ae48 <_malloc_r>
1004b8a2:	1e05      	subs	r5, r0, #0
1004b8a4:	d01a      	beq.n	1004b8dc <_calloc_r+0x54>
1004b8a6:	0022      	movs	r2, r4
1004b8a8:	2100      	movs	r1, #0
1004b8aa:	f7fe fb67 	bl	10049f7c <memset>
1004b8ae:	e016      	b.n	1004b8de <_calloc_r+0x56>
1004b8b0:	1c2b      	adds	r3, r5, #0
1004b8b2:	1c0c      	adds	r4, r1, #0
1004b8b4:	b289      	uxth	r1, r1
1004b8b6:	b292      	uxth	r2, r2
1004b8b8:	434a      	muls	r2, r1
1004b8ba:	b29b      	uxth	r3, r3
1004b8bc:	b2a1      	uxth	r1, r4
1004b8be:	4359      	muls	r1, r3
1004b8c0:	0c14      	lsrs	r4, r2, #16
1004b8c2:	190c      	adds	r4, r1, r4
1004b8c4:	0c23      	lsrs	r3, r4, #16
1004b8c6:	d107      	bne.n	1004b8d8 <_calloc_r+0x50>
1004b8c8:	0424      	lsls	r4, r4, #16
1004b8ca:	b292      	uxth	r2, r2
1004b8cc:	4314      	orrs	r4, r2
1004b8ce:	e7e5      	b.n	1004b89c <_calloc_r+0x14>
1004b8d0:	2d00      	cmp	r5, #0
1004b8d2:	d101      	bne.n	1004b8d8 <_calloc_r+0x50>
1004b8d4:	1c14      	adds	r4, r2, #0
1004b8d6:	e7ed      	b.n	1004b8b4 <_calloc_r+0x2c>
1004b8d8:	230c      	movs	r3, #12
1004b8da:	6003      	str	r3, [r0, #0]
1004b8dc:	2500      	movs	r5, #0
1004b8de:	0028      	movs	r0, r5
1004b8e0:	bd70      	pop	{r4, r5, r6, pc}

1004b8e2 <__ascii_mbtowc>:
1004b8e2:	b082      	sub	sp, #8
1004b8e4:	2900      	cmp	r1, #0
1004b8e6:	d100      	bne.n	1004b8ea <__ascii_mbtowc+0x8>
1004b8e8:	a901      	add	r1, sp, #4
1004b8ea:	1e10      	subs	r0, r2, #0
1004b8ec:	d006      	beq.n	1004b8fc <__ascii_mbtowc+0x1a>
1004b8ee:	2b00      	cmp	r3, #0
1004b8f0:	d006      	beq.n	1004b900 <__ascii_mbtowc+0x1e>
1004b8f2:	7813      	ldrb	r3, [r2, #0]
1004b8f4:	600b      	str	r3, [r1, #0]
1004b8f6:	7810      	ldrb	r0, [r2, #0]
1004b8f8:	1e43      	subs	r3, r0, #1
1004b8fa:	4198      	sbcs	r0, r3
1004b8fc:	b002      	add	sp, #8
1004b8fe:	4770      	bx	lr
1004b900:	2002      	movs	r0, #2
1004b902:	4240      	negs	r0, r0
1004b904:	e7fa      	b.n	1004b8fc <__ascii_mbtowc+0x1a>

1004b906 <__ascii_wctomb>:
1004b906:	0003      	movs	r3, r0
1004b908:	1e08      	subs	r0, r1, #0
1004b90a:	d005      	beq.n	1004b918 <__ascii_wctomb+0x12>
1004b90c:	2aff      	cmp	r2, #255	@ 0xff
1004b90e:	d904      	bls.n	1004b91a <__ascii_wctomb+0x14>
1004b910:	228a      	movs	r2, #138	@ 0x8a
1004b912:	2001      	movs	r0, #1
1004b914:	601a      	str	r2, [r3, #0]
1004b916:	4240      	negs	r0, r0
1004b918:	4770      	bx	lr
1004b91a:	2001      	movs	r0, #1
1004b91c:	700a      	strb	r2, [r1, #0]
1004b91e:	e7fb      	b.n	1004b918 <__ascii_wctomb+0x12>

1004b920 <fiprintf>:
1004b920:	b40e      	push	{r1, r2, r3}
1004b922:	b517      	push	{r0, r1, r2, r4, lr}
1004b924:	4c05      	ldr	r4, [pc, #20]	@ (1004b93c <fiprintf+0x1c>)
1004b926:	ab05      	add	r3, sp, #20
1004b928:	cb04      	ldmia	r3!, {r2}
1004b92a:	0001      	movs	r1, r0
1004b92c:	6820      	ldr	r0, [r4, #0]
1004b92e:	9301      	str	r3, [sp, #4]
1004b930:	f000 f834 	bl	1004b99c <_vfiprintf_r>
1004b934:	bc1e      	pop	{r1, r2, r3, r4}
1004b936:	bc08      	pop	{r3}
1004b938:	b003      	add	sp, #12
1004b93a:	4718      	bx	r3
1004b93c:	20000b6c 	.word	0x20000b6c

1004b940 <abort>:
1004b940:	2006      	movs	r0, #6
1004b942:	b510      	push	{r4, lr}
1004b944:	f000 fa10 	bl	1004bd68 <raise>
1004b948:	2001      	movs	r0, #1
1004b94a:	f7f7 fd0e 	bl	1004336a <_exit>

1004b94e <__sfputc_r>:
1004b94e:	6893      	ldr	r3, [r2, #8]
1004b950:	b510      	push	{r4, lr}
1004b952:	3b01      	subs	r3, #1
1004b954:	6093      	str	r3, [r2, #8]
1004b956:	2b00      	cmp	r3, #0
1004b958:	da04      	bge.n	1004b964 <__sfputc_r+0x16>
1004b95a:	6994      	ldr	r4, [r2, #24]
1004b95c:	42a3      	cmp	r3, r4
1004b95e:	db07      	blt.n	1004b970 <__sfputc_r+0x22>
1004b960:	290a      	cmp	r1, #10
1004b962:	d005      	beq.n	1004b970 <__sfputc_r+0x22>
1004b964:	6813      	ldr	r3, [r2, #0]
1004b966:	1c58      	adds	r0, r3, #1
1004b968:	6010      	str	r0, [r2, #0]
1004b96a:	7019      	strb	r1, [r3, #0]
1004b96c:	0008      	movs	r0, r1
1004b96e:	bd10      	pop	{r4, pc}
1004b970:	f000 f930 	bl	1004bbd4 <__swbuf_r>
1004b974:	0001      	movs	r1, r0
1004b976:	e7f9      	b.n	1004b96c <__sfputc_r+0x1e>

1004b978 <__sfputs_r>:
1004b978:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1004b97a:	0006      	movs	r6, r0
1004b97c:	000f      	movs	r7, r1
1004b97e:	0014      	movs	r4, r2
1004b980:	18d5      	adds	r5, r2, r3
1004b982:	42ac      	cmp	r4, r5
1004b984:	d101      	bne.n	1004b98a <__sfputs_r+0x12>
1004b986:	2000      	movs	r0, #0
1004b988:	e007      	b.n	1004b99a <__sfputs_r+0x22>
1004b98a:	7821      	ldrb	r1, [r4, #0]
1004b98c:	003a      	movs	r2, r7
1004b98e:	0030      	movs	r0, r6
1004b990:	f7ff ffdd 	bl	1004b94e <__sfputc_r>
1004b994:	3401      	adds	r4, #1
1004b996:	1c43      	adds	r3, r0, #1
1004b998:	d1f3      	bne.n	1004b982 <__sfputs_r+0xa>
1004b99a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

1004b99c <_vfiprintf_r>:
1004b99c:	b5f0      	push	{r4, r5, r6, r7, lr}
1004b99e:	b0a1      	sub	sp, #132	@ 0x84
1004b9a0:	000f      	movs	r7, r1
1004b9a2:	0015      	movs	r5, r2
1004b9a4:	001e      	movs	r6, r3
1004b9a6:	9003      	str	r0, [sp, #12]
1004b9a8:	2800      	cmp	r0, #0
1004b9aa:	d004      	beq.n	1004b9b6 <_vfiprintf_r+0x1a>
1004b9ac:	6a03      	ldr	r3, [r0, #32]
1004b9ae:	2b00      	cmp	r3, #0
1004b9b0:	d101      	bne.n	1004b9b6 <_vfiprintf_r+0x1a>
1004b9b2:	f7fe fa55 	bl	10049e60 <__sinit>
1004b9b6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
1004b9b8:	07db      	lsls	r3, r3, #31
1004b9ba:	d405      	bmi.n	1004b9c8 <_vfiprintf_r+0x2c>
1004b9bc:	89bb      	ldrh	r3, [r7, #12]
1004b9be:	059b      	lsls	r3, r3, #22
1004b9c0:	d402      	bmi.n	1004b9c8 <_vfiprintf_r+0x2c>
1004b9c2:	6db8      	ldr	r0, [r7, #88]	@ 0x58
1004b9c4:	f7fe fb3b 	bl	1004a03e <__retarget_lock_acquire_recursive>
1004b9c8:	89bb      	ldrh	r3, [r7, #12]
1004b9ca:	071b      	lsls	r3, r3, #28
1004b9cc:	d502      	bpl.n	1004b9d4 <_vfiprintf_r+0x38>
1004b9ce:	693b      	ldr	r3, [r7, #16]
1004b9d0:	2b00      	cmp	r3, #0
1004b9d2:	d113      	bne.n	1004b9fc <_vfiprintf_r+0x60>
1004b9d4:	0039      	movs	r1, r7
1004b9d6:	9803      	ldr	r0, [sp, #12]
1004b9d8:	f000 f93e 	bl	1004bc58 <__swsetup_r>
1004b9dc:	2800      	cmp	r0, #0
1004b9de:	d00d      	beq.n	1004b9fc <_vfiprintf_r+0x60>
1004b9e0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
1004b9e2:	07db      	lsls	r3, r3, #31
1004b9e4:	d503      	bpl.n	1004b9ee <_vfiprintf_r+0x52>
1004b9e6:	2001      	movs	r0, #1
1004b9e8:	4240      	negs	r0, r0
1004b9ea:	b021      	add	sp, #132	@ 0x84
1004b9ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
1004b9ee:	89bb      	ldrh	r3, [r7, #12]
1004b9f0:	059b      	lsls	r3, r3, #22
1004b9f2:	d4f8      	bmi.n	1004b9e6 <_vfiprintf_r+0x4a>
1004b9f4:	6db8      	ldr	r0, [r7, #88]	@ 0x58
1004b9f6:	f7fe fb23 	bl	1004a040 <__retarget_lock_release_recursive>
1004b9fa:	e7f4      	b.n	1004b9e6 <_vfiprintf_r+0x4a>
1004b9fc:	2300      	movs	r3, #0
1004b9fe:	ac08      	add	r4, sp, #32
1004ba00:	6163      	str	r3, [r4, #20]
1004ba02:	3320      	adds	r3, #32
1004ba04:	7663      	strb	r3, [r4, #25]
1004ba06:	3310      	adds	r3, #16
1004ba08:	76a3      	strb	r3, [r4, #26]
1004ba0a:	9607      	str	r6, [sp, #28]
1004ba0c:	002e      	movs	r6, r5
1004ba0e:	7833      	ldrb	r3, [r6, #0]
1004ba10:	2b00      	cmp	r3, #0
1004ba12:	d001      	beq.n	1004ba18 <_vfiprintf_r+0x7c>
1004ba14:	2b25      	cmp	r3, #37	@ 0x25
1004ba16:	d148      	bne.n	1004baaa <_vfiprintf_r+0x10e>
1004ba18:	1b73      	subs	r3, r6, r5
1004ba1a:	9305      	str	r3, [sp, #20]
1004ba1c:	42ae      	cmp	r6, r5
1004ba1e:	d00b      	beq.n	1004ba38 <_vfiprintf_r+0x9c>
1004ba20:	002a      	movs	r2, r5
1004ba22:	0039      	movs	r1, r7
1004ba24:	9803      	ldr	r0, [sp, #12]
1004ba26:	f7ff ffa7 	bl	1004b978 <__sfputs_r>
1004ba2a:	3001      	adds	r0, #1
1004ba2c:	d100      	bne.n	1004ba30 <_vfiprintf_r+0x94>
1004ba2e:	e0ae      	b.n	1004bb8e <_vfiprintf_r+0x1f2>
1004ba30:	6963      	ldr	r3, [r4, #20]
1004ba32:	9a05      	ldr	r2, [sp, #20]
1004ba34:	189b      	adds	r3, r3, r2
1004ba36:	6163      	str	r3, [r4, #20]
1004ba38:	7833      	ldrb	r3, [r6, #0]
1004ba3a:	2b00      	cmp	r3, #0
1004ba3c:	d100      	bne.n	1004ba40 <_vfiprintf_r+0xa4>
1004ba3e:	e0a6      	b.n	1004bb8e <_vfiprintf_r+0x1f2>
1004ba40:	2201      	movs	r2, #1
1004ba42:	2300      	movs	r3, #0
1004ba44:	4252      	negs	r2, r2
1004ba46:	6062      	str	r2, [r4, #4]
1004ba48:	a904      	add	r1, sp, #16
1004ba4a:	3254      	adds	r2, #84	@ 0x54
1004ba4c:	1852      	adds	r2, r2, r1
1004ba4e:	1c75      	adds	r5, r6, #1
1004ba50:	6023      	str	r3, [r4, #0]
1004ba52:	60e3      	str	r3, [r4, #12]
1004ba54:	60a3      	str	r3, [r4, #8]
1004ba56:	7013      	strb	r3, [r2, #0]
1004ba58:	65a3      	str	r3, [r4, #88]	@ 0x58
1004ba5a:	4b59      	ldr	r3, [pc, #356]	@ (1004bbc0 <_vfiprintf_r+0x224>)
1004ba5c:	2205      	movs	r2, #5
1004ba5e:	0018      	movs	r0, r3
1004ba60:	7829      	ldrb	r1, [r5, #0]
1004ba62:	9305      	str	r3, [sp, #20]
1004ba64:	f7fe faed 	bl	1004a042 <memchr>
1004ba68:	1c6e      	adds	r6, r5, #1
1004ba6a:	2800      	cmp	r0, #0
1004ba6c:	d11f      	bne.n	1004baae <_vfiprintf_r+0x112>
1004ba6e:	6822      	ldr	r2, [r4, #0]
1004ba70:	06d3      	lsls	r3, r2, #27
1004ba72:	d504      	bpl.n	1004ba7e <_vfiprintf_r+0xe2>
1004ba74:	2353      	movs	r3, #83	@ 0x53
1004ba76:	a904      	add	r1, sp, #16
1004ba78:	185b      	adds	r3, r3, r1
1004ba7a:	2120      	movs	r1, #32
1004ba7c:	7019      	strb	r1, [r3, #0]
1004ba7e:	0713      	lsls	r3, r2, #28
1004ba80:	d504      	bpl.n	1004ba8c <_vfiprintf_r+0xf0>
1004ba82:	2353      	movs	r3, #83	@ 0x53
1004ba84:	a904      	add	r1, sp, #16
1004ba86:	185b      	adds	r3, r3, r1
1004ba88:	212b      	movs	r1, #43	@ 0x2b
1004ba8a:	7019      	strb	r1, [r3, #0]
1004ba8c:	782b      	ldrb	r3, [r5, #0]
1004ba8e:	2b2a      	cmp	r3, #42	@ 0x2a
1004ba90:	d016      	beq.n	1004bac0 <_vfiprintf_r+0x124>
1004ba92:	002e      	movs	r6, r5
1004ba94:	2100      	movs	r1, #0
1004ba96:	200a      	movs	r0, #10
1004ba98:	68e3      	ldr	r3, [r4, #12]
1004ba9a:	7832      	ldrb	r2, [r6, #0]
1004ba9c:	1c75      	adds	r5, r6, #1
1004ba9e:	3a30      	subs	r2, #48	@ 0x30
1004baa0:	2a09      	cmp	r2, #9
1004baa2:	d950      	bls.n	1004bb46 <_vfiprintf_r+0x1aa>
1004baa4:	2900      	cmp	r1, #0
1004baa6:	d111      	bne.n	1004bacc <_vfiprintf_r+0x130>
1004baa8:	e017      	b.n	1004bada <_vfiprintf_r+0x13e>
1004baaa:	3601      	adds	r6, #1
1004baac:	e7af      	b.n	1004ba0e <_vfiprintf_r+0x72>
1004baae:	9b05      	ldr	r3, [sp, #20]
1004bab0:	6822      	ldr	r2, [r4, #0]
1004bab2:	1ac0      	subs	r0, r0, r3
1004bab4:	2301      	movs	r3, #1
1004bab6:	4083      	lsls	r3, r0
1004bab8:	4313      	orrs	r3, r2
1004baba:	0035      	movs	r5, r6
1004babc:	6023      	str	r3, [r4, #0]
1004babe:	e7cc      	b.n	1004ba5a <_vfiprintf_r+0xbe>
1004bac0:	9b07      	ldr	r3, [sp, #28]
1004bac2:	1d19      	adds	r1, r3, #4
1004bac4:	681b      	ldr	r3, [r3, #0]
1004bac6:	9107      	str	r1, [sp, #28]
1004bac8:	2b00      	cmp	r3, #0
1004baca:	db01      	blt.n	1004bad0 <_vfiprintf_r+0x134>
1004bacc:	930b      	str	r3, [sp, #44]	@ 0x2c
1004bace:	e004      	b.n	1004bada <_vfiprintf_r+0x13e>
1004bad0:	425b      	negs	r3, r3
1004bad2:	60e3      	str	r3, [r4, #12]
1004bad4:	2302      	movs	r3, #2
1004bad6:	4313      	orrs	r3, r2
1004bad8:	6023      	str	r3, [r4, #0]
1004bada:	7833      	ldrb	r3, [r6, #0]
1004badc:	2b2e      	cmp	r3, #46	@ 0x2e
1004bade:	d10c      	bne.n	1004bafa <_vfiprintf_r+0x15e>
1004bae0:	7873      	ldrb	r3, [r6, #1]
1004bae2:	2b2a      	cmp	r3, #42	@ 0x2a
1004bae4:	d134      	bne.n	1004bb50 <_vfiprintf_r+0x1b4>
1004bae6:	9b07      	ldr	r3, [sp, #28]
1004bae8:	3602      	adds	r6, #2
1004baea:	1d1a      	adds	r2, r3, #4
1004baec:	681b      	ldr	r3, [r3, #0]
1004baee:	9207      	str	r2, [sp, #28]
1004baf0:	2b00      	cmp	r3, #0
1004baf2:	da01      	bge.n	1004baf8 <_vfiprintf_r+0x15c>
1004baf4:	2301      	movs	r3, #1
1004baf6:	425b      	negs	r3, r3
1004baf8:	9309      	str	r3, [sp, #36]	@ 0x24
1004bafa:	4d32      	ldr	r5, [pc, #200]	@ (1004bbc4 <_vfiprintf_r+0x228>)
1004bafc:	2203      	movs	r2, #3
1004bafe:	0028      	movs	r0, r5
1004bb00:	7831      	ldrb	r1, [r6, #0]
1004bb02:	f7fe fa9e 	bl	1004a042 <memchr>
1004bb06:	2800      	cmp	r0, #0
1004bb08:	d006      	beq.n	1004bb18 <_vfiprintf_r+0x17c>
1004bb0a:	2340      	movs	r3, #64	@ 0x40
1004bb0c:	1b40      	subs	r0, r0, r5
1004bb0e:	4083      	lsls	r3, r0
1004bb10:	6822      	ldr	r2, [r4, #0]
1004bb12:	3601      	adds	r6, #1
1004bb14:	4313      	orrs	r3, r2
1004bb16:	6023      	str	r3, [r4, #0]
1004bb18:	7831      	ldrb	r1, [r6, #0]
1004bb1a:	2206      	movs	r2, #6
1004bb1c:	482a      	ldr	r0, [pc, #168]	@ (1004bbc8 <_vfiprintf_r+0x22c>)
1004bb1e:	1c75      	adds	r5, r6, #1
1004bb20:	7621      	strb	r1, [r4, #24]
1004bb22:	f7fe fa8e 	bl	1004a042 <memchr>
1004bb26:	2800      	cmp	r0, #0
1004bb28:	d040      	beq.n	1004bbac <_vfiprintf_r+0x210>
1004bb2a:	4b28      	ldr	r3, [pc, #160]	@ (1004bbcc <_vfiprintf_r+0x230>)
1004bb2c:	2b00      	cmp	r3, #0
1004bb2e:	d122      	bne.n	1004bb76 <_vfiprintf_r+0x1da>
1004bb30:	2207      	movs	r2, #7
1004bb32:	9b07      	ldr	r3, [sp, #28]
1004bb34:	3307      	adds	r3, #7
1004bb36:	4393      	bics	r3, r2
1004bb38:	3308      	adds	r3, #8
1004bb3a:	9307      	str	r3, [sp, #28]
1004bb3c:	6963      	ldr	r3, [r4, #20]
1004bb3e:	9a04      	ldr	r2, [sp, #16]
1004bb40:	189b      	adds	r3, r3, r2
1004bb42:	6163      	str	r3, [r4, #20]
1004bb44:	e762      	b.n	1004ba0c <_vfiprintf_r+0x70>
1004bb46:	4343      	muls	r3, r0
1004bb48:	002e      	movs	r6, r5
1004bb4a:	2101      	movs	r1, #1
1004bb4c:	189b      	adds	r3, r3, r2
1004bb4e:	e7a4      	b.n	1004ba9a <_vfiprintf_r+0xfe>
1004bb50:	2300      	movs	r3, #0
1004bb52:	200a      	movs	r0, #10
1004bb54:	0019      	movs	r1, r3
1004bb56:	3601      	adds	r6, #1
1004bb58:	6063      	str	r3, [r4, #4]
1004bb5a:	7832      	ldrb	r2, [r6, #0]
1004bb5c:	1c75      	adds	r5, r6, #1
1004bb5e:	3a30      	subs	r2, #48	@ 0x30
1004bb60:	2a09      	cmp	r2, #9
1004bb62:	d903      	bls.n	1004bb6c <_vfiprintf_r+0x1d0>
1004bb64:	2b00      	cmp	r3, #0
1004bb66:	d0c8      	beq.n	1004bafa <_vfiprintf_r+0x15e>
1004bb68:	9109      	str	r1, [sp, #36]	@ 0x24
1004bb6a:	e7c6      	b.n	1004bafa <_vfiprintf_r+0x15e>
1004bb6c:	4341      	muls	r1, r0
1004bb6e:	002e      	movs	r6, r5
1004bb70:	2301      	movs	r3, #1
1004bb72:	1889      	adds	r1, r1, r2
1004bb74:	e7f1      	b.n	1004bb5a <_vfiprintf_r+0x1be>
1004bb76:	aa07      	add	r2, sp, #28
1004bb78:	9200      	str	r2, [sp, #0]
1004bb7a:	0021      	movs	r1, r4
1004bb7c:	003a      	movs	r2, r7
1004bb7e:	4b14      	ldr	r3, [pc, #80]	@ (1004bbd0 <_vfiprintf_r+0x234>)
1004bb80:	9803      	ldr	r0, [sp, #12]
1004bb82:	f7fd fd21 	bl	100495c8 <_printf_float>
1004bb86:	9004      	str	r0, [sp, #16]
1004bb88:	9b04      	ldr	r3, [sp, #16]
1004bb8a:	3301      	adds	r3, #1
1004bb8c:	d1d6      	bne.n	1004bb3c <_vfiprintf_r+0x1a0>
1004bb8e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
1004bb90:	07db      	lsls	r3, r3, #31
1004bb92:	d405      	bmi.n	1004bba0 <_vfiprintf_r+0x204>
1004bb94:	89bb      	ldrh	r3, [r7, #12]
1004bb96:	059b      	lsls	r3, r3, #22
1004bb98:	d402      	bmi.n	1004bba0 <_vfiprintf_r+0x204>
1004bb9a:	6db8      	ldr	r0, [r7, #88]	@ 0x58
1004bb9c:	f7fe fa50 	bl	1004a040 <__retarget_lock_release_recursive>
1004bba0:	89bb      	ldrh	r3, [r7, #12]
1004bba2:	065b      	lsls	r3, r3, #25
1004bba4:	d500      	bpl.n	1004bba8 <_vfiprintf_r+0x20c>
1004bba6:	e71e      	b.n	1004b9e6 <_vfiprintf_r+0x4a>
1004bba8:	980d      	ldr	r0, [sp, #52]	@ 0x34
1004bbaa:	e71e      	b.n	1004b9ea <_vfiprintf_r+0x4e>
1004bbac:	aa07      	add	r2, sp, #28
1004bbae:	9200      	str	r2, [sp, #0]
1004bbb0:	0021      	movs	r1, r4
1004bbb2:	003a      	movs	r2, r7
1004bbb4:	4b06      	ldr	r3, [pc, #24]	@ (1004bbd0 <_vfiprintf_r+0x234>)
1004bbb6:	9803      	ldr	r0, [sp, #12]
1004bbb8:	f7fd ffb4 	bl	10049b24 <_printf_i>
1004bbbc:	e7e3      	b.n	1004bb86 <_vfiprintf_r+0x1ea>
1004bbbe:	46c0      	nop			@ (mov r8, r8)
1004bbc0:	1004c29f 	.word	0x1004c29f
1004bbc4:	1004c2a5 	.word	0x1004c2a5
1004bbc8:	1004c2a9 	.word	0x1004c2a9
1004bbcc:	100495c9 	.word	0x100495c9
1004bbd0:	1004b979 	.word	0x1004b979

1004bbd4 <__swbuf_r>:
1004bbd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1004bbd6:	0006      	movs	r6, r0
1004bbd8:	000d      	movs	r5, r1
1004bbda:	0014      	movs	r4, r2
1004bbdc:	2800      	cmp	r0, #0
1004bbde:	d004      	beq.n	1004bbea <__swbuf_r+0x16>
1004bbe0:	6a03      	ldr	r3, [r0, #32]
1004bbe2:	2b00      	cmp	r3, #0
1004bbe4:	d101      	bne.n	1004bbea <__swbuf_r+0x16>
1004bbe6:	f7fe f93b 	bl	10049e60 <__sinit>
1004bbea:	69a3      	ldr	r3, [r4, #24]
1004bbec:	60a3      	str	r3, [r4, #8]
1004bbee:	89a3      	ldrh	r3, [r4, #12]
1004bbf0:	071b      	lsls	r3, r3, #28
1004bbf2:	d502      	bpl.n	1004bbfa <__swbuf_r+0x26>
1004bbf4:	6923      	ldr	r3, [r4, #16]
1004bbf6:	2b00      	cmp	r3, #0
1004bbf8:	d109      	bne.n	1004bc0e <__swbuf_r+0x3a>
1004bbfa:	0021      	movs	r1, r4
1004bbfc:	0030      	movs	r0, r6
1004bbfe:	f000 f82b 	bl	1004bc58 <__swsetup_r>
1004bc02:	2800      	cmp	r0, #0
1004bc04:	d003      	beq.n	1004bc0e <__swbuf_r+0x3a>
1004bc06:	2501      	movs	r5, #1
1004bc08:	426d      	negs	r5, r5
1004bc0a:	0028      	movs	r0, r5
1004bc0c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1004bc0e:	6923      	ldr	r3, [r4, #16]
1004bc10:	6820      	ldr	r0, [r4, #0]
1004bc12:	b2ef      	uxtb	r7, r5
1004bc14:	1ac0      	subs	r0, r0, r3
1004bc16:	6963      	ldr	r3, [r4, #20]
1004bc18:	b2ed      	uxtb	r5, r5
1004bc1a:	4283      	cmp	r3, r0
1004bc1c:	dc05      	bgt.n	1004bc2a <__swbuf_r+0x56>
1004bc1e:	0021      	movs	r1, r4
1004bc20:	0030      	movs	r0, r6
1004bc22:	f7ff fdcb 	bl	1004b7bc <_fflush_r>
1004bc26:	2800      	cmp	r0, #0
1004bc28:	d1ed      	bne.n	1004bc06 <__swbuf_r+0x32>
1004bc2a:	68a3      	ldr	r3, [r4, #8]
1004bc2c:	3001      	adds	r0, #1
1004bc2e:	3b01      	subs	r3, #1
1004bc30:	60a3      	str	r3, [r4, #8]
1004bc32:	6823      	ldr	r3, [r4, #0]
1004bc34:	1c5a      	adds	r2, r3, #1
1004bc36:	6022      	str	r2, [r4, #0]
1004bc38:	701f      	strb	r7, [r3, #0]
1004bc3a:	6963      	ldr	r3, [r4, #20]
1004bc3c:	4283      	cmp	r3, r0
1004bc3e:	d004      	beq.n	1004bc4a <__swbuf_r+0x76>
1004bc40:	89a3      	ldrh	r3, [r4, #12]
1004bc42:	07db      	lsls	r3, r3, #31
1004bc44:	d5e1      	bpl.n	1004bc0a <__swbuf_r+0x36>
1004bc46:	2d0a      	cmp	r5, #10
1004bc48:	d1df      	bne.n	1004bc0a <__swbuf_r+0x36>
1004bc4a:	0021      	movs	r1, r4
1004bc4c:	0030      	movs	r0, r6
1004bc4e:	f7ff fdb5 	bl	1004b7bc <_fflush_r>
1004bc52:	2800      	cmp	r0, #0
1004bc54:	d0d9      	beq.n	1004bc0a <__swbuf_r+0x36>
1004bc56:	e7d6      	b.n	1004bc06 <__swbuf_r+0x32>

1004bc58 <__swsetup_r>:
1004bc58:	4b2d      	ldr	r3, [pc, #180]	@ (1004bd10 <__swsetup_r+0xb8>)
1004bc5a:	b570      	push	{r4, r5, r6, lr}
1004bc5c:	0005      	movs	r5, r0
1004bc5e:	6818      	ldr	r0, [r3, #0]
1004bc60:	000c      	movs	r4, r1
1004bc62:	2800      	cmp	r0, #0
1004bc64:	d004      	beq.n	1004bc70 <__swsetup_r+0x18>
1004bc66:	6a03      	ldr	r3, [r0, #32]
1004bc68:	2b00      	cmp	r3, #0
1004bc6a:	d101      	bne.n	1004bc70 <__swsetup_r+0x18>
1004bc6c:	f7fe f8f8 	bl	10049e60 <__sinit>
1004bc70:	230c      	movs	r3, #12
1004bc72:	5ee2      	ldrsh	r2, [r4, r3]
1004bc74:	0713      	lsls	r3, r2, #28
1004bc76:	d423      	bmi.n	1004bcc0 <__swsetup_r+0x68>
1004bc78:	06d3      	lsls	r3, r2, #27
1004bc7a:	d407      	bmi.n	1004bc8c <__swsetup_r+0x34>
1004bc7c:	2309      	movs	r3, #9
1004bc7e:	602b      	str	r3, [r5, #0]
1004bc80:	2340      	movs	r3, #64	@ 0x40
1004bc82:	2001      	movs	r0, #1
1004bc84:	4313      	orrs	r3, r2
1004bc86:	81a3      	strh	r3, [r4, #12]
1004bc88:	4240      	negs	r0, r0
1004bc8a:	e03a      	b.n	1004bd02 <__swsetup_r+0xaa>
1004bc8c:	0752      	lsls	r2, r2, #29
1004bc8e:	d513      	bpl.n	1004bcb8 <__swsetup_r+0x60>
1004bc90:	6b61      	ldr	r1, [r4, #52]	@ 0x34
1004bc92:	2900      	cmp	r1, #0
1004bc94:	d008      	beq.n	1004bca8 <__swsetup_r+0x50>
1004bc96:	0023      	movs	r3, r4
1004bc98:	3344      	adds	r3, #68	@ 0x44
1004bc9a:	4299      	cmp	r1, r3
1004bc9c:	d002      	beq.n	1004bca4 <__swsetup_r+0x4c>
1004bc9e:	0028      	movs	r0, r5
1004bca0:	f7ff f85c 	bl	1004ad5c <_free_r>
1004bca4:	2300      	movs	r3, #0
1004bca6:	6363      	str	r3, [r4, #52]	@ 0x34
1004bca8:	2224      	movs	r2, #36	@ 0x24
1004bcaa:	89a3      	ldrh	r3, [r4, #12]
1004bcac:	4393      	bics	r3, r2
1004bcae:	81a3      	strh	r3, [r4, #12]
1004bcb0:	2300      	movs	r3, #0
1004bcb2:	6063      	str	r3, [r4, #4]
1004bcb4:	6923      	ldr	r3, [r4, #16]
1004bcb6:	6023      	str	r3, [r4, #0]
1004bcb8:	2308      	movs	r3, #8
1004bcba:	89a2      	ldrh	r2, [r4, #12]
1004bcbc:	4313      	orrs	r3, r2
1004bcbe:	81a3      	strh	r3, [r4, #12]
1004bcc0:	6923      	ldr	r3, [r4, #16]
1004bcc2:	2b00      	cmp	r3, #0
1004bcc4:	d10b      	bne.n	1004bcde <__swsetup_r+0x86>
1004bcc6:	21a0      	movs	r1, #160	@ 0xa0
1004bcc8:	2280      	movs	r2, #128	@ 0x80
1004bcca:	89a3      	ldrh	r3, [r4, #12]
1004bccc:	0089      	lsls	r1, r1, #2
1004bcce:	0092      	lsls	r2, r2, #2
1004bcd0:	400b      	ands	r3, r1
1004bcd2:	4293      	cmp	r3, r2
1004bcd4:	d003      	beq.n	1004bcde <__swsetup_r+0x86>
1004bcd6:	0021      	movs	r1, r4
1004bcd8:	0028      	movs	r0, r5
1004bcda:	f000 f88f 	bl	1004bdfc <__smakebuf_r>
1004bcde:	230c      	movs	r3, #12
1004bce0:	5ee2      	ldrsh	r2, [r4, r3]
1004bce2:	2101      	movs	r1, #1
1004bce4:	0013      	movs	r3, r2
1004bce6:	400b      	ands	r3, r1
1004bce8:	420a      	tst	r2, r1
1004bcea:	d00b      	beq.n	1004bd04 <__swsetup_r+0xac>
1004bcec:	2300      	movs	r3, #0
1004bcee:	60a3      	str	r3, [r4, #8]
1004bcf0:	6963      	ldr	r3, [r4, #20]
1004bcf2:	425b      	negs	r3, r3
1004bcf4:	61a3      	str	r3, [r4, #24]
1004bcf6:	2000      	movs	r0, #0
1004bcf8:	6923      	ldr	r3, [r4, #16]
1004bcfa:	4283      	cmp	r3, r0
1004bcfc:	d101      	bne.n	1004bd02 <__swsetup_r+0xaa>
1004bcfe:	0613      	lsls	r3, r2, #24
1004bd00:	d4be      	bmi.n	1004bc80 <__swsetup_r+0x28>
1004bd02:	bd70      	pop	{r4, r5, r6, pc}
1004bd04:	0791      	lsls	r1, r2, #30
1004bd06:	d400      	bmi.n	1004bd0a <__swsetup_r+0xb2>
1004bd08:	6963      	ldr	r3, [r4, #20]
1004bd0a:	60a3      	str	r3, [r4, #8]
1004bd0c:	e7f3      	b.n	1004bcf6 <__swsetup_r+0x9e>
1004bd0e:	46c0      	nop			@ (mov r8, r8)
1004bd10:	20000b6c 	.word	0x20000b6c

1004bd14 <_raise_r>:
1004bd14:	b570      	push	{r4, r5, r6, lr}
1004bd16:	0004      	movs	r4, r0
1004bd18:	000d      	movs	r5, r1
1004bd1a:	291f      	cmp	r1, #31
1004bd1c:	d904      	bls.n	1004bd28 <_raise_r+0x14>
1004bd1e:	2316      	movs	r3, #22
1004bd20:	6003      	str	r3, [r0, #0]
1004bd22:	2001      	movs	r0, #1
1004bd24:	4240      	negs	r0, r0
1004bd26:	bd70      	pop	{r4, r5, r6, pc}
1004bd28:	6bc3      	ldr	r3, [r0, #60]	@ 0x3c
1004bd2a:	2b00      	cmp	r3, #0
1004bd2c:	d004      	beq.n	1004bd38 <_raise_r+0x24>
1004bd2e:	008a      	lsls	r2, r1, #2
1004bd30:	189b      	adds	r3, r3, r2
1004bd32:	681a      	ldr	r2, [r3, #0]
1004bd34:	2a00      	cmp	r2, #0
1004bd36:	d108      	bne.n	1004bd4a <_raise_r+0x36>
1004bd38:	0020      	movs	r0, r4
1004bd3a:	f000 f831 	bl	1004bda0 <_getpid_r>
1004bd3e:	002a      	movs	r2, r5
1004bd40:	0001      	movs	r1, r0
1004bd42:	0020      	movs	r0, r4
1004bd44:	f000 f81a 	bl	1004bd7c <_kill_r>
1004bd48:	e7ed      	b.n	1004bd26 <_raise_r+0x12>
1004bd4a:	2a01      	cmp	r2, #1
1004bd4c:	d009      	beq.n	1004bd62 <_raise_r+0x4e>
1004bd4e:	1c51      	adds	r1, r2, #1
1004bd50:	d103      	bne.n	1004bd5a <_raise_r+0x46>
1004bd52:	2316      	movs	r3, #22
1004bd54:	6003      	str	r3, [r0, #0]
1004bd56:	2001      	movs	r0, #1
1004bd58:	e7e5      	b.n	1004bd26 <_raise_r+0x12>
1004bd5a:	2100      	movs	r1, #0
1004bd5c:	0028      	movs	r0, r5
1004bd5e:	6019      	str	r1, [r3, #0]
1004bd60:	4790      	blx	r2
1004bd62:	2000      	movs	r0, #0
1004bd64:	e7df      	b.n	1004bd26 <_raise_r+0x12>
	...

1004bd68 <raise>:
1004bd68:	b510      	push	{r4, lr}
1004bd6a:	4b03      	ldr	r3, [pc, #12]	@ (1004bd78 <raise+0x10>)
1004bd6c:	0001      	movs	r1, r0
1004bd6e:	6818      	ldr	r0, [r3, #0]
1004bd70:	f7ff ffd0 	bl	1004bd14 <_raise_r>
1004bd74:	bd10      	pop	{r4, pc}
1004bd76:	46c0      	nop			@ (mov r8, r8)
1004bd78:	20000b6c 	.word	0x20000b6c

1004bd7c <_kill_r>:
1004bd7c:	2300      	movs	r3, #0
1004bd7e:	b570      	push	{r4, r5, r6, lr}
1004bd80:	4d06      	ldr	r5, [pc, #24]	@ (1004bd9c <_kill_r+0x20>)
1004bd82:	0004      	movs	r4, r0
1004bd84:	0008      	movs	r0, r1
1004bd86:	0011      	movs	r1, r2
1004bd88:	602b      	str	r3, [r5, #0]
1004bd8a:	f7f7 fade 	bl	1004334a <_kill>
1004bd8e:	1c43      	adds	r3, r0, #1
1004bd90:	d103      	bne.n	1004bd9a <_kill_r+0x1e>
1004bd92:	682b      	ldr	r3, [r5, #0]
1004bd94:	2b00      	cmp	r3, #0
1004bd96:	d000      	beq.n	1004bd9a <_kill_r+0x1e>
1004bd98:	6023      	str	r3, [r4, #0]
1004bd9a:	bd70      	pop	{r4, r5, r6, pc}
1004bd9c:	20000ae4 	.word	0x20000ae4

1004bda0 <_getpid_r>:
1004bda0:	b510      	push	{r4, lr}
1004bda2:	f7f7 facc 	bl	1004333e <_getpid>
1004bda6:	bd10      	pop	{r4, pc}

1004bda8 <__swhatbuf_r>:
1004bda8:	b570      	push	{r4, r5, r6, lr}
1004bdaa:	000e      	movs	r6, r1
1004bdac:	001d      	movs	r5, r3
1004bdae:	230e      	movs	r3, #14
1004bdb0:	5ec9      	ldrsh	r1, [r1, r3]
1004bdb2:	0014      	movs	r4, r2
1004bdb4:	b096      	sub	sp, #88	@ 0x58
1004bdb6:	2900      	cmp	r1, #0
1004bdb8:	da0c      	bge.n	1004bdd4 <__swhatbuf_r+0x2c>
1004bdba:	89b2      	ldrh	r2, [r6, #12]
1004bdbc:	2380      	movs	r3, #128	@ 0x80
1004bdbe:	0011      	movs	r1, r2
1004bdc0:	4019      	ands	r1, r3
1004bdc2:	421a      	tst	r2, r3
1004bdc4:	d114      	bne.n	1004bdf0 <__swhatbuf_r+0x48>
1004bdc6:	2380      	movs	r3, #128	@ 0x80
1004bdc8:	00db      	lsls	r3, r3, #3
1004bdca:	2000      	movs	r0, #0
1004bdcc:	6029      	str	r1, [r5, #0]
1004bdce:	6023      	str	r3, [r4, #0]
1004bdd0:	b016      	add	sp, #88	@ 0x58
1004bdd2:	bd70      	pop	{r4, r5, r6, pc}
1004bdd4:	466a      	mov	r2, sp
1004bdd6:	f000 f853 	bl	1004be80 <_fstat_r>
1004bdda:	2800      	cmp	r0, #0
1004bddc:	dbed      	blt.n	1004bdba <__swhatbuf_r+0x12>
1004bdde:	23f0      	movs	r3, #240	@ 0xf0
1004bde0:	9901      	ldr	r1, [sp, #4]
1004bde2:	021b      	lsls	r3, r3, #8
1004bde4:	4019      	ands	r1, r3
1004bde6:	4b04      	ldr	r3, [pc, #16]	@ (1004bdf8 <__swhatbuf_r+0x50>)
1004bde8:	18c9      	adds	r1, r1, r3
1004bdea:	424b      	negs	r3, r1
1004bdec:	4159      	adcs	r1, r3
1004bdee:	e7ea      	b.n	1004bdc6 <__swhatbuf_r+0x1e>
1004bdf0:	2100      	movs	r1, #0
1004bdf2:	2340      	movs	r3, #64	@ 0x40
1004bdf4:	e7e9      	b.n	1004bdca <__swhatbuf_r+0x22>
1004bdf6:	46c0      	nop			@ (mov r8, r8)
1004bdf8:	ffffe000 	.word	0xffffe000

1004bdfc <__smakebuf_r>:
1004bdfc:	b5f0      	push	{r4, r5, r6, r7, lr}
1004bdfe:	2602      	movs	r6, #2
1004be00:	898b      	ldrh	r3, [r1, #12]
1004be02:	0005      	movs	r5, r0
1004be04:	000c      	movs	r4, r1
1004be06:	b085      	sub	sp, #20
1004be08:	4233      	tst	r3, r6
1004be0a:	d007      	beq.n	1004be1c <__smakebuf_r+0x20>
1004be0c:	0023      	movs	r3, r4
1004be0e:	3347      	adds	r3, #71	@ 0x47
1004be10:	6023      	str	r3, [r4, #0]
1004be12:	6123      	str	r3, [r4, #16]
1004be14:	2301      	movs	r3, #1
1004be16:	6163      	str	r3, [r4, #20]
1004be18:	b005      	add	sp, #20
1004be1a:	bdf0      	pop	{r4, r5, r6, r7, pc}
1004be1c:	ab03      	add	r3, sp, #12
1004be1e:	aa02      	add	r2, sp, #8
1004be20:	f7ff ffc2 	bl	1004bda8 <__swhatbuf_r>
1004be24:	9f02      	ldr	r7, [sp, #8]
1004be26:	9001      	str	r0, [sp, #4]
1004be28:	0039      	movs	r1, r7
1004be2a:	0028      	movs	r0, r5
1004be2c:	f7ff f80c 	bl	1004ae48 <_malloc_r>
1004be30:	2800      	cmp	r0, #0
1004be32:	d108      	bne.n	1004be46 <__smakebuf_r+0x4a>
1004be34:	220c      	movs	r2, #12
1004be36:	5ea3      	ldrsh	r3, [r4, r2]
1004be38:	059a      	lsls	r2, r3, #22
1004be3a:	d4ed      	bmi.n	1004be18 <__smakebuf_r+0x1c>
1004be3c:	2203      	movs	r2, #3
1004be3e:	4393      	bics	r3, r2
1004be40:	431e      	orrs	r6, r3
1004be42:	81a6      	strh	r6, [r4, #12]
1004be44:	e7e2      	b.n	1004be0c <__smakebuf_r+0x10>
1004be46:	2380      	movs	r3, #128	@ 0x80
1004be48:	89a2      	ldrh	r2, [r4, #12]
1004be4a:	6020      	str	r0, [r4, #0]
1004be4c:	4313      	orrs	r3, r2
1004be4e:	81a3      	strh	r3, [r4, #12]
1004be50:	9b03      	ldr	r3, [sp, #12]
1004be52:	6120      	str	r0, [r4, #16]
1004be54:	6167      	str	r7, [r4, #20]
1004be56:	2b00      	cmp	r3, #0
1004be58:	d00c      	beq.n	1004be74 <__smakebuf_r+0x78>
1004be5a:	0028      	movs	r0, r5
1004be5c:	230e      	movs	r3, #14
1004be5e:	5ee1      	ldrsh	r1, [r4, r3]
1004be60:	f000 f820 	bl	1004bea4 <_isatty_r>
1004be64:	2800      	cmp	r0, #0
1004be66:	d005      	beq.n	1004be74 <__smakebuf_r+0x78>
1004be68:	2303      	movs	r3, #3
1004be6a:	89a2      	ldrh	r2, [r4, #12]
1004be6c:	439a      	bics	r2, r3
1004be6e:	3b02      	subs	r3, #2
1004be70:	4313      	orrs	r3, r2
1004be72:	81a3      	strh	r3, [r4, #12]
1004be74:	89a3      	ldrh	r3, [r4, #12]
1004be76:	9a01      	ldr	r2, [sp, #4]
1004be78:	4313      	orrs	r3, r2
1004be7a:	81a3      	strh	r3, [r4, #12]
1004be7c:	e7cc      	b.n	1004be18 <__smakebuf_r+0x1c>
	...

1004be80 <_fstat_r>:
1004be80:	2300      	movs	r3, #0
1004be82:	b570      	push	{r4, r5, r6, lr}
1004be84:	4d06      	ldr	r5, [pc, #24]	@ (1004bea0 <_fstat_r+0x20>)
1004be86:	0004      	movs	r4, r0
1004be88:	0008      	movs	r0, r1
1004be8a:	0011      	movs	r1, r2
1004be8c:	602b      	str	r3, [r5, #0]
1004be8e:	f7f7 fabc 	bl	1004340a <_fstat>
1004be92:	1c43      	adds	r3, r0, #1
1004be94:	d103      	bne.n	1004be9e <_fstat_r+0x1e>
1004be96:	682b      	ldr	r3, [r5, #0]
1004be98:	2b00      	cmp	r3, #0
1004be9a:	d000      	beq.n	1004be9e <_fstat_r+0x1e>
1004be9c:	6023      	str	r3, [r4, #0]
1004be9e:	bd70      	pop	{r4, r5, r6, pc}
1004bea0:	20000ae4 	.word	0x20000ae4

1004bea4 <_isatty_r>:
1004bea4:	2300      	movs	r3, #0
1004bea6:	b570      	push	{r4, r5, r6, lr}
1004bea8:	4d06      	ldr	r5, [pc, #24]	@ (1004bec4 <_isatty_r+0x20>)
1004beaa:	0004      	movs	r4, r0
1004beac:	0008      	movs	r0, r1
1004beae:	602b      	str	r3, [r5, #0]
1004beb0:	f7f7 fab9 	bl	10043426 <_isatty>
1004beb4:	1c43      	adds	r3, r0, #1
1004beb6:	d103      	bne.n	1004bec0 <_isatty_r+0x1c>
1004beb8:	682b      	ldr	r3, [r5, #0]
1004beba:	2b00      	cmp	r3, #0
1004bebc:	d000      	beq.n	1004bec0 <_isatty_r+0x1c>
1004bebe:	6023      	str	r3, [r4, #0]
1004bec0:	bd70      	pop	{r4, r5, r6, pc}
1004bec2:	46c0      	nop			@ (mov r8, r8)
1004bec4:	20000ae4 	.word	0x20000ae4

Disassembly of section .init:

1004bec8 <_init>:
1004bec8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1004beca:	46c0      	nop			@ (mov r8, r8)

Disassembly of section .fini:

1004becc <_fini>:
1004becc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1004bece:	46c0      	nop			@ (mov r8, r8)
