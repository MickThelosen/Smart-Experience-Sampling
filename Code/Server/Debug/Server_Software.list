
Server_Software.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .intvec       000000c0  10040000  10040000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009294  100400c0  100400c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .init         00000004  10049354  10049354  0000a354  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .fini         00000004  10049358  10049358  0000a358  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  4 .rodata       00000070  1004935c  1004935c  0000a35c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .ARM          00000008  100493cc  100493cc  0000a3cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         0000006c  20000638  100493d4  0000a638  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .ram_preamble 0000002c  20000004  20000004  0000b004  2**2
                  ALLOC
  8 .bss.blueRAM  000000bc  200000c0  200000c0  0000b004  2**2
                  ALLOC
  9 .bss          000004bc  2000017c  2000017c  0000b004  2**2
                  ALLOC
 10 .noinit       00000000  200006a4  10049440  00000000  2**0
                  ALLOC
 11 .ota_region_end 00000000  10049440  10049440  0000a6a4  2**0
                  CONTENTS
 12 .heap         00000000  200006a4  200006a4  0000a6a4  2**0
                  CONTENTS
 13 .stack        00000c00  2000f400  2000f400  0000b400  2**0
                  ALLOC
 14 .rom_info     00000000  10000000  10000000  0000a6a4  2**0
                  CONTENTS
 15 .ARM.attributes 00000028  00000000  00000000  0000a6a4  2**0
                  CONTENTS, READONLY
 16 .debug_line   000122a9  00000000  00000000  0000a6cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line_str 00000088  00000000  00000000  0001c975  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_info   000128b1  00000000  00000000  0001c9fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_abbrev 00002a03  00000000  00000000  0002f2ae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_aranges 00001100  00000000  00000000  00031cb8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_str    000b6c75  00000000  00000000  00032db8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_rnglists 00000d03  00000000  00000000  000e9a2d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_macro  0001c9db  00000000  00000000  000ea730  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 24 .comment      00000043  00000000  00000000  0010710b  2**0
                  CONTENTS, READONLY
 25 .debug_frame  000040d4  00000000  00000000  00107150  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

100400c0 <blue_unit_conversion>:
                __CODE__
                __THUMB__
                __EXPORT__ blue_unit_conversion

EXPORT_FUNC(blue_unit_conversion)
                  PUSH    {r4, lr}
100400c0:	b510      	push	{r4, lr}
                  CMP     r0, r2
100400c2:	4290      	cmp	r0, r2
                  BLS     mul32
100400c4:	d916      	bls.n	100400f4 <mul32>
                  UXTH    r2, r1
100400c6:	b28a      	uxth	r2, r1
                  LSRS    r3, r0, #16
100400c8:	0c03      	lsrs	r3, r0, #16
                  LSRS    r1, r1, #16
100400ca:	0c09      	lsrs	r1, r1, #16
                  MOV     r4, r1
100400cc:	460c      	mov	r4, r1
                  MULS    r1, r3, r1
100400ce:	4359      	muls	r1, r3
                  UXTH    r0, r0
100400d0:	b280      	uxth	r0, r0
                  MULS    r3, r2, r3
100400d2:	4353      	muls	r3, r2
                  MULS    r4, r0, r4
100400d4:	4344      	muls	r4, r0
                  MULS    r0, r2, r0
100400d6:	4350      	muls	r0, r2
                  ADDS    r3, r3, r4
100400d8:	191b      	adds	r3, r3, r4
                  LSLS    r2, r3, #16
100400da:	041a      	lsls	r2, r3, #16
                  LSRS    r3, r3, #16
100400dc:	0c1b      	lsrs	r3, r3, #16
                  ADDS    r0, r2, r0
100400de:	1810      	adds	r0, r2, r0
                  ADCS    r1, r3
100400e0:	4159      	adcs	r1, r3

                  MOVS    r2, #128
100400e2:	2280      	movs	r2, #128	@ 0x80
                  LSLS    r2, r2, #13
100400e4:	0352      	lsls	r2, r2, #13
                  MOVS    r3, #0
100400e6:	2300      	movs	r3, #0
                  ADDS    r2, r2, r0
100400e8:	1812      	adds	r2, r2, r0
                  ADCS    r3, r1
100400ea:	414b      	adcs	r3, r1
                  LSRS    r2, r2, #21
100400ec:	0d52      	lsrs	r2, r2, #21
                  LSLS    r0, r3, #11
100400ee:	02d8      	lsls	r0, r3, #11
                  ORRS    r0, r2
100400f0:	4310      	orrs	r0, r2

                  POP {r4, pc}
100400f2:	bd10      	pop	{r4, pc}

100400f4 <mul32>:

                  ENDFUNC

EXPORT_FUNC(mul32)
                  MULS    r0, r1, r0
100400f4:	4348      	muls	r0, r1
                  MOVS    r2, #128
100400f6:	2280      	movs	r2, #128	@ 0x80
                  LSLS    r2, r2, #13
100400f8:	0352      	lsls	r2, r2, #13
                  ADDS    r2, r2, r0
100400fa:	1812      	adds	r2, r2, r0
                  LSRS    r2, r2, #21
100400fc:	0d52      	lsrs	r2, r2, #21
                  MOV     r0, r2
100400fe:	4610      	mov	r0, r2

                  POP {r4, pc}
10040100:	bd10      	pop	{r4, pc}
10040102:	46c0      	nop			@ (mov r8, r8)

10040104 <strlen>:
10040104:	2300      	movs	r3, #0
10040106:	5cc2      	ldrb	r2, [r0, r3]
10040108:	3301      	adds	r3, #1
1004010a:	2a00      	cmp	r2, #0
1004010c:	d1fb      	bne.n	10040106 <strlen+0x2>
1004010e:	1e58      	subs	r0, r3, #1
10040110:	4770      	bx	lr
	...

10040114 <__udivsi3>:
10040114:	2200      	movs	r2, #0
10040116:	0843      	lsrs	r3, r0, #1
10040118:	428b      	cmp	r3, r1
1004011a:	d374      	bcc.n	10040206 <__udivsi3+0xf2>
1004011c:	0903      	lsrs	r3, r0, #4
1004011e:	428b      	cmp	r3, r1
10040120:	d35f      	bcc.n	100401e2 <__udivsi3+0xce>
10040122:	0a03      	lsrs	r3, r0, #8
10040124:	428b      	cmp	r3, r1
10040126:	d344      	bcc.n	100401b2 <__udivsi3+0x9e>
10040128:	0b03      	lsrs	r3, r0, #12
1004012a:	428b      	cmp	r3, r1
1004012c:	d328      	bcc.n	10040180 <__udivsi3+0x6c>
1004012e:	0c03      	lsrs	r3, r0, #16
10040130:	428b      	cmp	r3, r1
10040132:	d30d      	bcc.n	10040150 <__udivsi3+0x3c>
10040134:	22ff      	movs	r2, #255	@ 0xff
10040136:	0209      	lsls	r1, r1, #8
10040138:	ba12      	rev	r2, r2
1004013a:	0c03      	lsrs	r3, r0, #16
1004013c:	428b      	cmp	r3, r1
1004013e:	d302      	bcc.n	10040146 <__udivsi3+0x32>
10040140:	1212      	asrs	r2, r2, #8
10040142:	0209      	lsls	r1, r1, #8
10040144:	d065      	beq.n	10040212 <__udivsi3+0xfe>
10040146:	0b03      	lsrs	r3, r0, #12
10040148:	428b      	cmp	r3, r1
1004014a:	d319      	bcc.n	10040180 <__udivsi3+0x6c>
1004014c:	e000      	b.n	10040150 <__udivsi3+0x3c>
1004014e:	0a09      	lsrs	r1, r1, #8
10040150:	0bc3      	lsrs	r3, r0, #15
10040152:	428b      	cmp	r3, r1
10040154:	d301      	bcc.n	1004015a <__udivsi3+0x46>
10040156:	03cb      	lsls	r3, r1, #15
10040158:	1ac0      	subs	r0, r0, r3
1004015a:	4152      	adcs	r2, r2
1004015c:	0b83      	lsrs	r3, r0, #14
1004015e:	428b      	cmp	r3, r1
10040160:	d301      	bcc.n	10040166 <__udivsi3+0x52>
10040162:	038b      	lsls	r3, r1, #14
10040164:	1ac0      	subs	r0, r0, r3
10040166:	4152      	adcs	r2, r2
10040168:	0b43      	lsrs	r3, r0, #13
1004016a:	428b      	cmp	r3, r1
1004016c:	d301      	bcc.n	10040172 <__udivsi3+0x5e>
1004016e:	034b      	lsls	r3, r1, #13
10040170:	1ac0      	subs	r0, r0, r3
10040172:	4152      	adcs	r2, r2
10040174:	0b03      	lsrs	r3, r0, #12
10040176:	428b      	cmp	r3, r1
10040178:	d301      	bcc.n	1004017e <__udivsi3+0x6a>
1004017a:	030b      	lsls	r3, r1, #12
1004017c:	1ac0      	subs	r0, r0, r3
1004017e:	4152      	adcs	r2, r2
10040180:	0ac3      	lsrs	r3, r0, #11
10040182:	428b      	cmp	r3, r1
10040184:	d301      	bcc.n	1004018a <__udivsi3+0x76>
10040186:	02cb      	lsls	r3, r1, #11
10040188:	1ac0      	subs	r0, r0, r3
1004018a:	4152      	adcs	r2, r2
1004018c:	0a83      	lsrs	r3, r0, #10
1004018e:	428b      	cmp	r3, r1
10040190:	d301      	bcc.n	10040196 <__udivsi3+0x82>
10040192:	028b      	lsls	r3, r1, #10
10040194:	1ac0      	subs	r0, r0, r3
10040196:	4152      	adcs	r2, r2
10040198:	0a43      	lsrs	r3, r0, #9
1004019a:	428b      	cmp	r3, r1
1004019c:	d301      	bcc.n	100401a2 <__udivsi3+0x8e>
1004019e:	024b      	lsls	r3, r1, #9
100401a0:	1ac0      	subs	r0, r0, r3
100401a2:	4152      	adcs	r2, r2
100401a4:	0a03      	lsrs	r3, r0, #8
100401a6:	428b      	cmp	r3, r1
100401a8:	d301      	bcc.n	100401ae <__udivsi3+0x9a>
100401aa:	020b      	lsls	r3, r1, #8
100401ac:	1ac0      	subs	r0, r0, r3
100401ae:	4152      	adcs	r2, r2
100401b0:	d2cd      	bcs.n	1004014e <__udivsi3+0x3a>
100401b2:	09c3      	lsrs	r3, r0, #7
100401b4:	428b      	cmp	r3, r1
100401b6:	d301      	bcc.n	100401bc <__udivsi3+0xa8>
100401b8:	01cb      	lsls	r3, r1, #7
100401ba:	1ac0      	subs	r0, r0, r3
100401bc:	4152      	adcs	r2, r2
100401be:	0983      	lsrs	r3, r0, #6
100401c0:	428b      	cmp	r3, r1
100401c2:	d301      	bcc.n	100401c8 <__udivsi3+0xb4>
100401c4:	018b      	lsls	r3, r1, #6
100401c6:	1ac0      	subs	r0, r0, r3
100401c8:	4152      	adcs	r2, r2
100401ca:	0943      	lsrs	r3, r0, #5
100401cc:	428b      	cmp	r3, r1
100401ce:	d301      	bcc.n	100401d4 <__udivsi3+0xc0>
100401d0:	014b      	lsls	r3, r1, #5
100401d2:	1ac0      	subs	r0, r0, r3
100401d4:	4152      	adcs	r2, r2
100401d6:	0903      	lsrs	r3, r0, #4
100401d8:	428b      	cmp	r3, r1
100401da:	d301      	bcc.n	100401e0 <__udivsi3+0xcc>
100401dc:	010b      	lsls	r3, r1, #4
100401de:	1ac0      	subs	r0, r0, r3
100401e0:	4152      	adcs	r2, r2
100401e2:	08c3      	lsrs	r3, r0, #3
100401e4:	428b      	cmp	r3, r1
100401e6:	d301      	bcc.n	100401ec <__udivsi3+0xd8>
100401e8:	00cb      	lsls	r3, r1, #3
100401ea:	1ac0      	subs	r0, r0, r3
100401ec:	4152      	adcs	r2, r2
100401ee:	0883      	lsrs	r3, r0, #2
100401f0:	428b      	cmp	r3, r1
100401f2:	d301      	bcc.n	100401f8 <__udivsi3+0xe4>
100401f4:	008b      	lsls	r3, r1, #2
100401f6:	1ac0      	subs	r0, r0, r3
100401f8:	4152      	adcs	r2, r2
100401fa:	0843      	lsrs	r3, r0, #1
100401fc:	428b      	cmp	r3, r1
100401fe:	d301      	bcc.n	10040204 <__udivsi3+0xf0>
10040200:	004b      	lsls	r3, r1, #1
10040202:	1ac0      	subs	r0, r0, r3
10040204:	4152      	adcs	r2, r2
10040206:	1a41      	subs	r1, r0, r1
10040208:	d200      	bcs.n	1004020c <__udivsi3+0xf8>
1004020a:	4601      	mov	r1, r0
1004020c:	4152      	adcs	r2, r2
1004020e:	4610      	mov	r0, r2
10040210:	4770      	bx	lr
10040212:	e7ff      	b.n	10040214 <__udivsi3+0x100>
10040214:	b501      	push	{r0, lr}
10040216:	2000      	movs	r0, #0
10040218:	f000 f8f0 	bl	100403fc <__aeabi_idiv0>
1004021c:	bd02      	pop	{r1, pc}
1004021e:	46c0      	nop			@ (mov r8, r8)

10040220 <__aeabi_uidivmod>:
10040220:	2900      	cmp	r1, #0
10040222:	d0f7      	beq.n	10040214 <__udivsi3+0x100>
10040224:	e776      	b.n	10040114 <__udivsi3>
10040226:	4770      	bx	lr

10040228 <__divsi3>:
10040228:	4603      	mov	r3, r0
1004022a:	430b      	orrs	r3, r1
1004022c:	d47f      	bmi.n	1004032e <__divsi3+0x106>
1004022e:	2200      	movs	r2, #0
10040230:	0843      	lsrs	r3, r0, #1
10040232:	428b      	cmp	r3, r1
10040234:	d374      	bcc.n	10040320 <__divsi3+0xf8>
10040236:	0903      	lsrs	r3, r0, #4
10040238:	428b      	cmp	r3, r1
1004023a:	d35f      	bcc.n	100402fc <__divsi3+0xd4>
1004023c:	0a03      	lsrs	r3, r0, #8
1004023e:	428b      	cmp	r3, r1
10040240:	d344      	bcc.n	100402cc <__divsi3+0xa4>
10040242:	0b03      	lsrs	r3, r0, #12
10040244:	428b      	cmp	r3, r1
10040246:	d328      	bcc.n	1004029a <__divsi3+0x72>
10040248:	0c03      	lsrs	r3, r0, #16
1004024a:	428b      	cmp	r3, r1
1004024c:	d30d      	bcc.n	1004026a <__divsi3+0x42>
1004024e:	22ff      	movs	r2, #255	@ 0xff
10040250:	0209      	lsls	r1, r1, #8
10040252:	ba12      	rev	r2, r2
10040254:	0c03      	lsrs	r3, r0, #16
10040256:	428b      	cmp	r3, r1
10040258:	d302      	bcc.n	10040260 <__divsi3+0x38>
1004025a:	1212      	asrs	r2, r2, #8
1004025c:	0209      	lsls	r1, r1, #8
1004025e:	d065      	beq.n	1004032c <__divsi3+0x104>
10040260:	0b03      	lsrs	r3, r0, #12
10040262:	428b      	cmp	r3, r1
10040264:	d319      	bcc.n	1004029a <__divsi3+0x72>
10040266:	e000      	b.n	1004026a <__divsi3+0x42>
10040268:	0a09      	lsrs	r1, r1, #8
1004026a:	0bc3      	lsrs	r3, r0, #15
1004026c:	428b      	cmp	r3, r1
1004026e:	d301      	bcc.n	10040274 <__divsi3+0x4c>
10040270:	03cb      	lsls	r3, r1, #15
10040272:	1ac0      	subs	r0, r0, r3
10040274:	4152      	adcs	r2, r2
10040276:	0b83      	lsrs	r3, r0, #14
10040278:	428b      	cmp	r3, r1
1004027a:	d301      	bcc.n	10040280 <__divsi3+0x58>
1004027c:	038b      	lsls	r3, r1, #14
1004027e:	1ac0      	subs	r0, r0, r3
10040280:	4152      	adcs	r2, r2
10040282:	0b43      	lsrs	r3, r0, #13
10040284:	428b      	cmp	r3, r1
10040286:	d301      	bcc.n	1004028c <__divsi3+0x64>
10040288:	034b      	lsls	r3, r1, #13
1004028a:	1ac0      	subs	r0, r0, r3
1004028c:	4152      	adcs	r2, r2
1004028e:	0b03      	lsrs	r3, r0, #12
10040290:	428b      	cmp	r3, r1
10040292:	d301      	bcc.n	10040298 <__divsi3+0x70>
10040294:	030b      	lsls	r3, r1, #12
10040296:	1ac0      	subs	r0, r0, r3
10040298:	4152      	adcs	r2, r2
1004029a:	0ac3      	lsrs	r3, r0, #11
1004029c:	428b      	cmp	r3, r1
1004029e:	d301      	bcc.n	100402a4 <__divsi3+0x7c>
100402a0:	02cb      	lsls	r3, r1, #11
100402a2:	1ac0      	subs	r0, r0, r3
100402a4:	4152      	adcs	r2, r2
100402a6:	0a83      	lsrs	r3, r0, #10
100402a8:	428b      	cmp	r3, r1
100402aa:	d301      	bcc.n	100402b0 <__divsi3+0x88>
100402ac:	028b      	lsls	r3, r1, #10
100402ae:	1ac0      	subs	r0, r0, r3
100402b0:	4152      	adcs	r2, r2
100402b2:	0a43      	lsrs	r3, r0, #9
100402b4:	428b      	cmp	r3, r1
100402b6:	d301      	bcc.n	100402bc <__divsi3+0x94>
100402b8:	024b      	lsls	r3, r1, #9
100402ba:	1ac0      	subs	r0, r0, r3
100402bc:	4152      	adcs	r2, r2
100402be:	0a03      	lsrs	r3, r0, #8
100402c0:	428b      	cmp	r3, r1
100402c2:	d301      	bcc.n	100402c8 <__divsi3+0xa0>
100402c4:	020b      	lsls	r3, r1, #8
100402c6:	1ac0      	subs	r0, r0, r3
100402c8:	4152      	adcs	r2, r2
100402ca:	d2cd      	bcs.n	10040268 <__divsi3+0x40>
100402cc:	09c3      	lsrs	r3, r0, #7
100402ce:	428b      	cmp	r3, r1
100402d0:	d301      	bcc.n	100402d6 <__divsi3+0xae>
100402d2:	01cb      	lsls	r3, r1, #7
100402d4:	1ac0      	subs	r0, r0, r3
100402d6:	4152      	adcs	r2, r2
100402d8:	0983      	lsrs	r3, r0, #6
100402da:	428b      	cmp	r3, r1
100402dc:	d301      	bcc.n	100402e2 <__divsi3+0xba>
100402de:	018b      	lsls	r3, r1, #6
100402e0:	1ac0      	subs	r0, r0, r3
100402e2:	4152      	adcs	r2, r2
100402e4:	0943      	lsrs	r3, r0, #5
100402e6:	428b      	cmp	r3, r1
100402e8:	d301      	bcc.n	100402ee <__divsi3+0xc6>
100402ea:	014b      	lsls	r3, r1, #5
100402ec:	1ac0      	subs	r0, r0, r3
100402ee:	4152      	adcs	r2, r2
100402f0:	0903      	lsrs	r3, r0, #4
100402f2:	428b      	cmp	r3, r1
100402f4:	d301      	bcc.n	100402fa <__divsi3+0xd2>
100402f6:	010b      	lsls	r3, r1, #4
100402f8:	1ac0      	subs	r0, r0, r3
100402fa:	4152      	adcs	r2, r2
100402fc:	08c3      	lsrs	r3, r0, #3
100402fe:	428b      	cmp	r3, r1
10040300:	d301      	bcc.n	10040306 <__divsi3+0xde>
10040302:	00cb      	lsls	r3, r1, #3
10040304:	1ac0      	subs	r0, r0, r3
10040306:	4152      	adcs	r2, r2
10040308:	0883      	lsrs	r3, r0, #2
1004030a:	428b      	cmp	r3, r1
1004030c:	d301      	bcc.n	10040312 <__divsi3+0xea>
1004030e:	008b      	lsls	r3, r1, #2
10040310:	1ac0      	subs	r0, r0, r3
10040312:	4152      	adcs	r2, r2
10040314:	0843      	lsrs	r3, r0, #1
10040316:	428b      	cmp	r3, r1
10040318:	d301      	bcc.n	1004031e <__divsi3+0xf6>
1004031a:	004b      	lsls	r3, r1, #1
1004031c:	1ac0      	subs	r0, r0, r3
1004031e:	4152      	adcs	r2, r2
10040320:	1a41      	subs	r1, r0, r1
10040322:	d200      	bcs.n	10040326 <__divsi3+0xfe>
10040324:	4601      	mov	r1, r0
10040326:	4152      	adcs	r2, r2
10040328:	4610      	mov	r0, r2
1004032a:	4770      	bx	lr
1004032c:	e05d      	b.n	100403ea <__divsi3+0x1c2>
1004032e:	0fca      	lsrs	r2, r1, #31
10040330:	d000      	beq.n	10040334 <__divsi3+0x10c>
10040332:	4249      	negs	r1, r1
10040334:	1003      	asrs	r3, r0, #32
10040336:	d300      	bcc.n	1004033a <__divsi3+0x112>
10040338:	4240      	negs	r0, r0
1004033a:	4053      	eors	r3, r2
1004033c:	2200      	movs	r2, #0
1004033e:	469c      	mov	ip, r3
10040340:	0903      	lsrs	r3, r0, #4
10040342:	428b      	cmp	r3, r1
10040344:	d32d      	bcc.n	100403a2 <__divsi3+0x17a>
10040346:	0a03      	lsrs	r3, r0, #8
10040348:	428b      	cmp	r3, r1
1004034a:	d312      	bcc.n	10040372 <__divsi3+0x14a>
1004034c:	22fc      	movs	r2, #252	@ 0xfc
1004034e:	0189      	lsls	r1, r1, #6
10040350:	ba12      	rev	r2, r2
10040352:	0a03      	lsrs	r3, r0, #8
10040354:	428b      	cmp	r3, r1
10040356:	d30c      	bcc.n	10040372 <__divsi3+0x14a>
10040358:	0189      	lsls	r1, r1, #6
1004035a:	1192      	asrs	r2, r2, #6
1004035c:	428b      	cmp	r3, r1
1004035e:	d308      	bcc.n	10040372 <__divsi3+0x14a>
10040360:	0189      	lsls	r1, r1, #6
10040362:	1192      	asrs	r2, r2, #6
10040364:	428b      	cmp	r3, r1
10040366:	d304      	bcc.n	10040372 <__divsi3+0x14a>
10040368:	0189      	lsls	r1, r1, #6
1004036a:	d03a      	beq.n	100403e2 <__divsi3+0x1ba>
1004036c:	1192      	asrs	r2, r2, #6
1004036e:	e000      	b.n	10040372 <__divsi3+0x14a>
10040370:	0989      	lsrs	r1, r1, #6
10040372:	09c3      	lsrs	r3, r0, #7
10040374:	428b      	cmp	r3, r1
10040376:	d301      	bcc.n	1004037c <__divsi3+0x154>
10040378:	01cb      	lsls	r3, r1, #7
1004037a:	1ac0      	subs	r0, r0, r3
1004037c:	4152      	adcs	r2, r2
1004037e:	0983      	lsrs	r3, r0, #6
10040380:	428b      	cmp	r3, r1
10040382:	d301      	bcc.n	10040388 <__divsi3+0x160>
10040384:	018b      	lsls	r3, r1, #6
10040386:	1ac0      	subs	r0, r0, r3
10040388:	4152      	adcs	r2, r2
1004038a:	0943      	lsrs	r3, r0, #5
1004038c:	428b      	cmp	r3, r1
1004038e:	d301      	bcc.n	10040394 <__divsi3+0x16c>
10040390:	014b      	lsls	r3, r1, #5
10040392:	1ac0      	subs	r0, r0, r3
10040394:	4152      	adcs	r2, r2
10040396:	0903      	lsrs	r3, r0, #4
10040398:	428b      	cmp	r3, r1
1004039a:	d301      	bcc.n	100403a0 <__divsi3+0x178>
1004039c:	010b      	lsls	r3, r1, #4
1004039e:	1ac0      	subs	r0, r0, r3
100403a0:	4152      	adcs	r2, r2
100403a2:	08c3      	lsrs	r3, r0, #3
100403a4:	428b      	cmp	r3, r1
100403a6:	d301      	bcc.n	100403ac <__divsi3+0x184>
100403a8:	00cb      	lsls	r3, r1, #3
100403aa:	1ac0      	subs	r0, r0, r3
100403ac:	4152      	adcs	r2, r2
100403ae:	0883      	lsrs	r3, r0, #2
100403b0:	428b      	cmp	r3, r1
100403b2:	d301      	bcc.n	100403b8 <__divsi3+0x190>
100403b4:	008b      	lsls	r3, r1, #2
100403b6:	1ac0      	subs	r0, r0, r3
100403b8:	4152      	adcs	r2, r2
100403ba:	d2d9      	bcs.n	10040370 <__divsi3+0x148>
100403bc:	0843      	lsrs	r3, r0, #1
100403be:	428b      	cmp	r3, r1
100403c0:	d301      	bcc.n	100403c6 <__divsi3+0x19e>
100403c2:	004b      	lsls	r3, r1, #1
100403c4:	1ac0      	subs	r0, r0, r3
100403c6:	4152      	adcs	r2, r2
100403c8:	1a41      	subs	r1, r0, r1
100403ca:	d200      	bcs.n	100403ce <__divsi3+0x1a6>
100403cc:	4601      	mov	r1, r0
100403ce:	4663      	mov	r3, ip
100403d0:	4152      	adcs	r2, r2
100403d2:	105b      	asrs	r3, r3, #1
100403d4:	4610      	mov	r0, r2
100403d6:	d301      	bcc.n	100403dc <__divsi3+0x1b4>
100403d8:	4240      	negs	r0, r0
100403da:	2b00      	cmp	r3, #0
100403dc:	d500      	bpl.n	100403e0 <__divsi3+0x1b8>
100403de:	4249      	negs	r1, r1
100403e0:	4770      	bx	lr
100403e2:	4663      	mov	r3, ip
100403e4:	105b      	asrs	r3, r3, #1
100403e6:	d300      	bcc.n	100403ea <__divsi3+0x1c2>
100403e8:	4240      	negs	r0, r0
100403ea:	b501      	push	{r0, lr}
100403ec:	2000      	movs	r0, #0
100403ee:	f000 f805 	bl	100403fc <__aeabi_idiv0>
100403f2:	bd02      	pop	{r1, pc}

100403f4 <__aeabi_idivmod>:
100403f4:	2900      	cmp	r1, #0
100403f6:	d0f8      	beq.n	100403ea <__divsi3+0x1c2>
100403f8:	e716      	b.n	10040228 <__divsi3>
100403fa:	4770      	bx	lr

100403fc <__aeabi_idiv0>:
100403fc:	4770      	bx	lr
100403fe:	46c0      	nop			@ (mov r8, r8)

10040400 <__aeabi_uldivmod>:
10040400:	2b00      	cmp	r3, #0
10040402:	d111      	bne.n	10040428 <__aeabi_uldivmod+0x28>
10040404:	2a00      	cmp	r2, #0
10040406:	d10f      	bne.n	10040428 <__aeabi_uldivmod+0x28>
10040408:	2900      	cmp	r1, #0
1004040a:	d100      	bne.n	1004040e <__aeabi_uldivmod+0xe>
1004040c:	2800      	cmp	r0, #0
1004040e:	d002      	beq.n	10040416 <__aeabi_uldivmod+0x16>
10040410:	2100      	movs	r1, #0
10040412:	43c9      	mvns	r1, r1
10040414:	0008      	movs	r0, r1
10040416:	b407      	push	{r0, r1, r2}
10040418:	4802      	ldr	r0, [pc, #8]	@ (10040424 <__aeabi_uldivmod+0x24>)
1004041a:	a102      	add	r1, pc, #8	@ (adr r1, 10040424 <__aeabi_uldivmod+0x24>)
1004041c:	1840      	adds	r0, r0, r1
1004041e:	9002      	str	r0, [sp, #8]
10040420:	bd03      	pop	{r0, r1, pc}
10040422:	46c0      	nop			@ (mov r8, r8)
10040424:	ffffffd9 	.word	0xffffffd9
10040428:	b403      	push	{r0, r1}
1004042a:	4668      	mov	r0, sp
1004042c:	b501      	push	{r0, lr}
1004042e:	9802      	ldr	r0, [sp, #8]
10040430:	f000 f8a2 	bl	10040578 <__udivmoddi4>
10040434:	9b01      	ldr	r3, [sp, #4]
10040436:	469e      	mov	lr, r3
10040438:	b002      	add	sp, #8
1004043a:	bc0c      	pop	{r2, r3}
1004043c:	4770      	bx	lr
1004043e:	46c0      	nop			@ (mov r8, r8)

10040440 <__aeabi_lmul>:
10040440:	b5f0      	push	{r4, r5, r6, r7, lr}
10040442:	46ce      	mov	lr, r9
10040444:	4699      	mov	r9, r3
10040446:	0c03      	lsrs	r3, r0, #16
10040448:	469c      	mov	ip, r3
1004044a:	0413      	lsls	r3, r2, #16
1004044c:	4647      	mov	r7, r8
1004044e:	0c1b      	lsrs	r3, r3, #16
10040450:	001d      	movs	r5, r3
10040452:	000e      	movs	r6, r1
10040454:	4661      	mov	r1, ip
10040456:	0404      	lsls	r4, r0, #16
10040458:	0c24      	lsrs	r4, r4, #16
1004045a:	b580      	push	{r7, lr}
1004045c:	0007      	movs	r7, r0
1004045e:	0c10      	lsrs	r0, r2, #16
10040460:	434b      	muls	r3, r1
10040462:	4365      	muls	r5, r4
10040464:	4341      	muls	r1, r0
10040466:	4360      	muls	r0, r4
10040468:	0c2c      	lsrs	r4, r5, #16
1004046a:	18c0      	adds	r0, r0, r3
1004046c:	1824      	adds	r4, r4, r0
1004046e:	468c      	mov	ip, r1
10040470:	42a3      	cmp	r3, r4
10040472:	d903      	bls.n	1004047c <__aeabi_lmul+0x3c>
10040474:	2380      	movs	r3, #128	@ 0x80
10040476:	025b      	lsls	r3, r3, #9
10040478:	4698      	mov	r8, r3
1004047a:	44c4      	add	ip, r8
1004047c:	4649      	mov	r1, r9
1004047e:	4379      	muls	r1, r7
10040480:	4356      	muls	r6, r2
10040482:	0c23      	lsrs	r3, r4, #16
10040484:	042d      	lsls	r5, r5, #16
10040486:	0c2d      	lsrs	r5, r5, #16
10040488:	1989      	adds	r1, r1, r6
1004048a:	4463      	add	r3, ip
1004048c:	0424      	lsls	r4, r4, #16
1004048e:	1960      	adds	r0, r4, r5
10040490:	18c9      	adds	r1, r1, r3
10040492:	bcc0      	pop	{r6, r7}
10040494:	46b9      	mov	r9, r7
10040496:	46b0      	mov	r8, r6
10040498:	bdf0      	pop	{r4, r5, r6, r7, pc}
1004049a:	46c0      	nop			@ (mov r8, r8)

1004049c <__aeabi_d2uiz>:
1004049c:	b570      	push	{r4, r5, r6, lr}
1004049e:	2200      	movs	r2, #0
100404a0:	4b0c      	ldr	r3, [pc, #48]	@ (100404d4 <__aeabi_d2uiz+0x38>)
100404a2:	0004      	movs	r4, r0
100404a4:	000d      	movs	r5, r1
100404a6:	f001 fed7 	bl	10042258 <__aeabi_dcmpge>
100404aa:	2800      	cmp	r0, #0
100404ac:	d104      	bne.n	100404b8 <__aeabi_d2uiz+0x1c>
100404ae:	0020      	movs	r0, r4
100404b0:	0029      	movs	r1, r5
100404b2:	f001 fe0f 	bl	100420d4 <__aeabi_d2iz>
100404b6:	bd70      	pop	{r4, r5, r6, pc}
100404b8:	4b06      	ldr	r3, [pc, #24]	@ (100404d4 <__aeabi_d2uiz+0x38>)
100404ba:	2200      	movs	r2, #0
100404bc:	0020      	movs	r0, r4
100404be:	0029      	movs	r1, r5
100404c0:	f001 fa6c 	bl	1004199c <__aeabi_dsub>
100404c4:	f001 fe06 	bl	100420d4 <__aeabi_d2iz>
100404c8:	2380      	movs	r3, #128	@ 0x80
100404ca:	061b      	lsls	r3, r3, #24
100404cc:	469c      	mov	ip, r3
100404ce:	4460      	add	r0, ip
100404d0:	e7f1      	b.n	100404b6 <__aeabi_d2uiz+0x1a>
100404d2:	46c0      	nop			@ (mov r8, r8)
100404d4:	41e00000 	.word	0x41e00000

100404d8 <__aeabi_d2lz>:
100404d8:	b570      	push	{r4, r5, r6, lr}
100404da:	2200      	movs	r2, #0
100404dc:	2300      	movs	r3, #0
100404de:	0004      	movs	r4, r0
100404e0:	000d      	movs	r5, r1
100404e2:	f001 fe9b 	bl	1004221c <__aeabi_dcmplt>
100404e6:	2800      	cmp	r0, #0
100404e8:	d108      	bne.n	100404fc <__aeabi_d2lz+0x24>
100404ea:	0020      	movs	r0, r4
100404ec:	0029      	movs	r1, r5
100404ee:	f000 f80f 	bl	10040510 <__aeabi_d2ulz>
100404f2:	0002      	movs	r2, r0
100404f4:	000b      	movs	r3, r1
100404f6:	0010      	movs	r0, r2
100404f8:	0019      	movs	r1, r3
100404fa:	bd70      	pop	{r4, r5, r6, pc}
100404fc:	2380      	movs	r3, #128	@ 0x80
100404fe:	061b      	lsls	r3, r3, #24
10040500:	18e9      	adds	r1, r5, r3
10040502:	0020      	movs	r0, r4
10040504:	f000 f804 	bl	10040510 <__aeabi_d2ulz>
10040508:	2300      	movs	r3, #0
1004050a:	4242      	negs	r2, r0
1004050c:	418b      	sbcs	r3, r1
1004050e:	e7f2      	b.n	100404f6 <__aeabi_d2lz+0x1e>

10040510 <__aeabi_d2ulz>:
10040510:	b570      	push	{r4, r5, r6, lr}
10040512:	2200      	movs	r2, #0
10040514:	4b0b      	ldr	r3, [pc, #44]	@ (10040544 <__aeabi_d2ulz+0x34>)
10040516:	000d      	movs	r5, r1
10040518:	0004      	movs	r4, r0
1004051a:	f000 ff77 	bl	1004140c <__aeabi_dmul>
1004051e:	f7ff ffbd 	bl	1004049c <__aeabi_d2uiz>
10040522:	0006      	movs	r6, r0
10040524:	f001 fe40 	bl	100421a8 <__aeabi_ui2d>
10040528:	2200      	movs	r2, #0
1004052a:	4b07      	ldr	r3, [pc, #28]	@ (10040548 <__aeabi_d2ulz+0x38>)
1004052c:	f000 ff6e 	bl	1004140c <__aeabi_dmul>
10040530:	0002      	movs	r2, r0
10040532:	000b      	movs	r3, r1
10040534:	0020      	movs	r0, r4
10040536:	0029      	movs	r1, r5
10040538:	f001 fa30 	bl	1004199c <__aeabi_dsub>
1004053c:	f7ff ffae 	bl	1004049c <__aeabi_d2uiz>
10040540:	0031      	movs	r1, r6
10040542:	bd70      	pop	{r4, r5, r6, pc}
10040544:	3df00000 	.word	0x3df00000
10040548:	41f00000 	.word	0x41f00000

1004054c <__aeabi_l2d>:
1004054c:	b570      	push	{r4, r5, r6, lr}
1004054e:	0006      	movs	r6, r0
10040550:	0008      	movs	r0, r1
10040552:	f001 fdfb 	bl	1004214c <__aeabi_i2d>
10040556:	2200      	movs	r2, #0
10040558:	4b06      	ldr	r3, [pc, #24]	@ (10040574 <__aeabi_l2d+0x28>)
1004055a:	f000 ff57 	bl	1004140c <__aeabi_dmul>
1004055e:	000d      	movs	r5, r1
10040560:	0004      	movs	r4, r0
10040562:	0030      	movs	r0, r6
10040564:	f001 fe20 	bl	100421a8 <__aeabi_ui2d>
10040568:	002b      	movs	r3, r5
1004056a:	0022      	movs	r2, r4
1004056c:	f000 f8d0 	bl	10040710 <__aeabi_dadd>
10040570:	bd70      	pop	{r4, r5, r6, pc}
10040572:	46c0      	nop			@ (mov r8, r8)
10040574:	41f00000 	.word	0x41f00000

10040578 <__udivmoddi4>:
10040578:	b5f0      	push	{r4, r5, r6, r7, lr}
1004057a:	4657      	mov	r7, sl
1004057c:	464e      	mov	r6, r9
1004057e:	4645      	mov	r5, r8
10040580:	46de      	mov	lr, fp
10040582:	b5e0      	push	{r5, r6, r7, lr}
10040584:	0004      	movs	r4, r0
10040586:	000d      	movs	r5, r1
10040588:	4692      	mov	sl, r2
1004058a:	4699      	mov	r9, r3
1004058c:	b083      	sub	sp, #12
1004058e:	428b      	cmp	r3, r1
10040590:	d830      	bhi.n	100405f4 <__udivmoddi4+0x7c>
10040592:	d02d      	beq.n	100405f0 <__udivmoddi4+0x78>
10040594:	4649      	mov	r1, r9
10040596:	4650      	mov	r0, sl
10040598:	f001 fe86 	bl	100422a8 <__clzdi2>
1004059c:	0029      	movs	r1, r5
1004059e:	0006      	movs	r6, r0
100405a0:	0020      	movs	r0, r4
100405a2:	f001 fe81 	bl	100422a8 <__clzdi2>
100405a6:	1a33      	subs	r3, r6, r0
100405a8:	4698      	mov	r8, r3
100405aa:	3b20      	subs	r3, #32
100405ac:	d434      	bmi.n	10040618 <__udivmoddi4+0xa0>
100405ae:	469b      	mov	fp, r3
100405b0:	4653      	mov	r3, sl
100405b2:	465a      	mov	r2, fp
100405b4:	4093      	lsls	r3, r2
100405b6:	4642      	mov	r2, r8
100405b8:	001f      	movs	r7, r3
100405ba:	4653      	mov	r3, sl
100405bc:	4093      	lsls	r3, r2
100405be:	001e      	movs	r6, r3
100405c0:	42af      	cmp	r7, r5
100405c2:	d83b      	bhi.n	1004063c <__udivmoddi4+0xc4>
100405c4:	42af      	cmp	r7, r5
100405c6:	d100      	bne.n	100405ca <__udivmoddi4+0x52>
100405c8:	e079      	b.n	100406be <__udivmoddi4+0x146>
100405ca:	465b      	mov	r3, fp
100405cc:	1ba4      	subs	r4, r4, r6
100405ce:	41bd      	sbcs	r5, r7
100405d0:	2b00      	cmp	r3, #0
100405d2:	da00      	bge.n	100405d6 <__udivmoddi4+0x5e>
100405d4:	e076      	b.n	100406c4 <__udivmoddi4+0x14c>
100405d6:	2200      	movs	r2, #0
100405d8:	2300      	movs	r3, #0
100405da:	9200      	str	r2, [sp, #0]
100405dc:	9301      	str	r3, [sp, #4]
100405de:	2301      	movs	r3, #1
100405e0:	465a      	mov	r2, fp
100405e2:	4093      	lsls	r3, r2
100405e4:	9301      	str	r3, [sp, #4]
100405e6:	2301      	movs	r3, #1
100405e8:	4642      	mov	r2, r8
100405ea:	4093      	lsls	r3, r2
100405ec:	9300      	str	r3, [sp, #0]
100405ee:	e029      	b.n	10040644 <__udivmoddi4+0xcc>
100405f0:	4282      	cmp	r2, r0
100405f2:	d9cf      	bls.n	10040594 <__udivmoddi4+0x1c>
100405f4:	2200      	movs	r2, #0
100405f6:	2300      	movs	r3, #0
100405f8:	9200      	str	r2, [sp, #0]
100405fa:	9301      	str	r3, [sp, #4]
100405fc:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
100405fe:	2b00      	cmp	r3, #0
10040600:	d001      	beq.n	10040606 <__udivmoddi4+0x8e>
10040602:	601c      	str	r4, [r3, #0]
10040604:	605d      	str	r5, [r3, #4]
10040606:	9800      	ldr	r0, [sp, #0]
10040608:	9901      	ldr	r1, [sp, #4]
1004060a:	b003      	add	sp, #12
1004060c:	bcf0      	pop	{r4, r5, r6, r7}
1004060e:	46bb      	mov	fp, r7
10040610:	46b2      	mov	sl, r6
10040612:	46a9      	mov	r9, r5
10040614:	46a0      	mov	r8, r4
10040616:	bdf0      	pop	{r4, r5, r6, r7, pc}
10040618:	4642      	mov	r2, r8
1004061a:	469b      	mov	fp, r3
1004061c:	2320      	movs	r3, #32
1004061e:	1a9b      	subs	r3, r3, r2
10040620:	4652      	mov	r2, sl
10040622:	40da      	lsrs	r2, r3
10040624:	4641      	mov	r1, r8
10040626:	0013      	movs	r3, r2
10040628:	464a      	mov	r2, r9
1004062a:	408a      	lsls	r2, r1
1004062c:	0017      	movs	r7, r2
1004062e:	4642      	mov	r2, r8
10040630:	431f      	orrs	r7, r3
10040632:	4653      	mov	r3, sl
10040634:	4093      	lsls	r3, r2
10040636:	001e      	movs	r6, r3
10040638:	42af      	cmp	r7, r5
1004063a:	d9c3      	bls.n	100405c4 <__udivmoddi4+0x4c>
1004063c:	2200      	movs	r2, #0
1004063e:	2300      	movs	r3, #0
10040640:	9200      	str	r2, [sp, #0]
10040642:	9301      	str	r3, [sp, #4]
10040644:	4643      	mov	r3, r8
10040646:	2b00      	cmp	r3, #0
10040648:	d0d8      	beq.n	100405fc <__udivmoddi4+0x84>
1004064a:	07fb      	lsls	r3, r7, #31
1004064c:	0872      	lsrs	r2, r6, #1
1004064e:	431a      	orrs	r2, r3
10040650:	4646      	mov	r6, r8
10040652:	087b      	lsrs	r3, r7, #1
10040654:	e00e      	b.n	10040674 <__udivmoddi4+0xfc>
10040656:	42ab      	cmp	r3, r5
10040658:	d101      	bne.n	1004065e <__udivmoddi4+0xe6>
1004065a:	42a2      	cmp	r2, r4
1004065c:	d80c      	bhi.n	10040678 <__udivmoddi4+0x100>
1004065e:	1aa4      	subs	r4, r4, r2
10040660:	419d      	sbcs	r5, r3
10040662:	2001      	movs	r0, #1
10040664:	1924      	adds	r4, r4, r4
10040666:	416d      	adcs	r5, r5
10040668:	2100      	movs	r1, #0
1004066a:	3e01      	subs	r6, #1
1004066c:	1824      	adds	r4, r4, r0
1004066e:	414d      	adcs	r5, r1
10040670:	2e00      	cmp	r6, #0
10040672:	d006      	beq.n	10040682 <__udivmoddi4+0x10a>
10040674:	42ab      	cmp	r3, r5
10040676:	d9ee      	bls.n	10040656 <__udivmoddi4+0xde>
10040678:	3e01      	subs	r6, #1
1004067a:	1924      	adds	r4, r4, r4
1004067c:	416d      	adcs	r5, r5
1004067e:	2e00      	cmp	r6, #0
10040680:	d1f8      	bne.n	10040674 <__udivmoddi4+0xfc>
10040682:	9800      	ldr	r0, [sp, #0]
10040684:	9901      	ldr	r1, [sp, #4]
10040686:	465b      	mov	r3, fp
10040688:	1900      	adds	r0, r0, r4
1004068a:	4169      	adcs	r1, r5
1004068c:	2b00      	cmp	r3, #0
1004068e:	db24      	blt.n	100406da <__udivmoddi4+0x162>
10040690:	002b      	movs	r3, r5
10040692:	465a      	mov	r2, fp
10040694:	4644      	mov	r4, r8
10040696:	40d3      	lsrs	r3, r2
10040698:	002a      	movs	r2, r5
1004069a:	40e2      	lsrs	r2, r4
1004069c:	001c      	movs	r4, r3
1004069e:	465b      	mov	r3, fp
100406a0:	0015      	movs	r5, r2
100406a2:	2b00      	cmp	r3, #0
100406a4:	db2a      	blt.n	100406fc <__udivmoddi4+0x184>
100406a6:	0026      	movs	r6, r4
100406a8:	409e      	lsls	r6, r3
100406aa:	0033      	movs	r3, r6
100406ac:	0026      	movs	r6, r4
100406ae:	4647      	mov	r7, r8
100406b0:	40be      	lsls	r6, r7
100406b2:	0032      	movs	r2, r6
100406b4:	1a80      	subs	r0, r0, r2
100406b6:	4199      	sbcs	r1, r3
100406b8:	9000      	str	r0, [sp, #0]
100406ba:	9101      	str	r1, [sp, #4]
100406bc:	e79e      	b.n	100405fc <__udivmoddi4+0x84>
100406be:	42a3      	cmp	r3, r4
100406c0:	d8bc      	bhi.n	1004063c <__udivmoddi4+0xc4>
100406c2:	e782      	b.n	100405ca <__udivmoddi4+0x52>
100406c4:	4642      	mov	r2, r8
100406c6:	2320      	movs	r3, #32
100406c8:	2100      	movs	r1, #0
100406ca:	1a9b      	subs	r3, r3, r2
100406cc:	2200      	movs	r2, #0
100406ce:	9100      	str	r1, [sp, #0]
100406d0:	9201      	str	r2, [sp, #4]
100406d2:	2201      	movs	r2, #1
100406d4:	40da      	lsrs	r2, r3
100406d6:	9201      	str	r2, [sp, #4]
100406d8:	e785      	b.n	100405e6 <__udivmoddi4+0x6e>
100406da:	4642      	mov	r2, r8
100406dc:	2320      	movs	r3, #32
100406de:	1a9b      	subs	r3, r3, r2
100406e0:	002a      	movs	r2, r5
100406e2:	4646      	mov	r6, r8
100406e4:	409a      	lsls	r2, r3
100406e6:	0023      	movs	r3, r4
100406e8:	40f3      	lsrs	r3, r6
100406ea:	4644      	mov	r4, r8
100406ec:	4313      	orrs	r3, r2
100406ee:	002a      	movs	r2, r5
100406f0:	40e2      	lsrs	r2, r4
100406f2:	001c      	movs	r4, r3
100406f4:	465b      	mov	r3, fp
100406f6:	0015      	movs	r5, r2
100406f8:	2b00      	cmp	r3, #0
100406fa:	dad4      	bge.n	100406a6 <__udivmoddi4+0x12e>
100406fc:	4642      	mov	r2, r8
100406fe:	002f      	movs	r7, r5
10040700:	2320      	movs	r3, #32
10040702:	0026      	movs	r6, r4
10040704:	4097      	lsls	r7, r2
10040706:	1a9b      	subs	r3, r3, r2
10040708:	40de      	lsrs	r6, r3
1004070a:	003b      	movs	r3, r7
1004070c:	4333      	orrs	r3, r6
1004070e:	e7cd      	b.n	100406ac <__udivmoddi4+0x134>

10040710 <__aeabi_dadd>:
10040710:	b5f0      	push	{r4, r5, r6, r7, lr}
10040712:	4657      	mov	r7, sl
10040714:	464e      	mov	r6, r9
10040716:	4645      	mov	r5, r8
10040718:	46de      	mov	lr, fp
1004071a:	b5e0      	push	{r5, r6, r7, lr}
1004071c:	b083      	sub	sp, #12
1004071e:	9000      	str	r0, [sp, #0]
10040720:	9101      	str	r1, [sp, #4]
10040722:	030c      	lsls	r4, r1, #12
10040724:	004f      	lsls	r7, r1, #1
10040726:	0fce      	lsrs	r6, r1, #31
10040728:	0a61      	lsrs	r1, r4, #9
1004072a:	9c00      	ldr	r4, [sp, #0]
1004072c:	031d      	lsls	r5, r3, #12
1004072e:	0f64      	lsrs	r4, r4, #29
10040730:	430c      	orrs	r4, r1
10040732:	9900      	ldr	r1, [sp, #0]
10040734:	9200      	str	r2, [sp, #0]
10040736:	9301      	str	r3, [sp, #4]
10040738:	00c8      	lsls	r0, r1, #3
1004073a:	0059      	lsls	r1, r3, #1
1004073c:	0d4b      	lsrs	r3, r1, #21
1004073e:	4699      	mov	r9, r3
10040740:	9a00      	ldr	r2, [sp, #0]
10040742:	9b01      	ldr	r3, [sp, #4]
10040744:	0a6d      	lsrs	r5, r5, #9
10040746:	0fd9      	lsrs	r1, r3, #31
10040748:	0f53      	lsrs	r3, r2, #29
1004074a:	432b      	orrs	r3, r5
1004074c:	469a      	mov	sl, r3
1004074e:	9b00      	ldr	r3, [sp, #0]
10040750:	0d7f      	lsrs	r7, r7, #21
10040752:	00da      	lsls	r2, r3, #3
10040754:	4694      	mov	ip, r2
10040756:	464a      	mov	r2, r9
10040758:	46b0      	mov	r8, r6
1004075a:	1aba      	subs	r2, r7, r2
1004075c:	428e      	cmp	r6, r1
1004075e:	d100      	bne.n	10040762 <__aeabi_dadd+0x52>
10040760:	e0b0      	b.n	100408c4 <__aeabi_dadd+0x1b4>
10040762:	2a00      	cmp	r2, #0
10040764:	dc00      	bgt.n	10040768 <__aeabi_dadd+0x58>
10040766:	e078      	b.n	1004085a <__aeabi_dadd+0x14a>
10040768:	4649      	mov	r1, r9
1004076a:	2900      	cmp	r1, #0
1004076c:	d100      	bne.n	10040770 <__aeabi_dadd+0x60>
1004076e:	e0e9      	b.n	10040944 <__aeabi_dadd+0x234>
10040770:	49c9      	ldr	r1, [pc, #804]	@ (10040a98 <__aeabi_dadd+0x388>)
10040772:	428f      	cmp	r7, r1
10040774:	d100      	bne.n	10040778 <__aeabi_dadd+0x68>
10040776:	e195      	b.n	10040aa4 <__aeabi_dadd+0x394>
10040778:	2501      	movs	r5, #1
1004077a:	2a38      	cmp	r2, #56	@ 0x38
1004077c:	dc16      	bgt.n	100407ac <__aeabi_dadd+0x9c>
1004077e:	2180      	movs	r1, #128	@ 0x80
10040780:	4653      	mov	r3, sl
10040782:	0409      	lsls	r1, r1, #16
10040784:	430b      	orrs	r3, r1
10040786:	469a      	mov	sl, r3
10040788:	2a1f      	cmp	r2, #31
1004078a:	dd00      	ble.n	1004078e <__aeabi_dadd+0x7e>
1004078c:	e1e7      	b.n	10040b5e <__aeabi_dadd+0x44e>
1004078e:	2120      	movs	r1, #32
10040790:	4655      	mov	r5, sl
10040792:	1a8b      	subs	r3, r1, r2
10040794:	4661      	mov	r1, ip
10040796:	409d      	lsls	r5, r3
10040798:	40d1      	lsrs	r1, r2
1004079a:	430d      	orrs	r5, r1
1004079c:	4661      	mov	r1, ip
1004079e:	4099      	lsls	r1, r3
100407a0:	1e4b      	subs	r3, r1, #1
100407a2:	4199      	sbcs	r1, r3
100407a4:	4653      	mov	r3, sl
100407a6:	40d3      	lsrs	r3, r2
100407a8:	430d      	orrs	r5, r1
100407aa:	1ae4      	subs	r4, r4, r3
100407ac:	1b45      	subs	r5, r0, r5
100407ae:	42a8      	cmp	r0, r5
100407b0:	4180      	sbcs	r0, r0
100407b2:	4240      	negs	r0, r0
100407b4:	1a24      	subs	r4, r4, r0
100407b6:	0223      	lsls	r3, r4, #8
100407b8:	d400      	bmi.n	100407bc <__aeabi_dadd+0xac>
100407ba:	e10f      	b.n	100409dc <__aeabi_dadd+0x2cc>
100407bc:	0264      	lsls	r4, r4, #9
100407be:	0a64      	lsrs	r4, r4, #9
100407c0:	2c00      	cmp	r4, #0
100407c2:	d100      	bne.n	100407c6 <__aeabi_dadd+0xb6>
100407c4:	e139      	b.n	10040a3a <__aeabi_dadd+0x32a>
100407c6:	0020      	movs	r0, r4
100407c8:	f001 fd50 	bl	1004226c <__clzsi2>
100407cc:	0003      	movs	r3, r0
100407ce:	3b08      	subs	r3, #8
100407d0:	2120      	movs	r1, #32
100407d2:	0028      	movs	r0, r5
100407d4:	1aca      	subs	r2, r1, r3
100407d6:	40d0      	lsrs	r0, r2
100407d8:	409c      	lsls	r4, r3
100407da:	0002      	movs	r2, r0
100407dc:	409d      	lsls	r5, r3
100407de:	4322      	orrs	r2, r4
100407e0:	429f      	cmp	r7, r3
100407e2:	dd00      	ble.n	100407e6 <__aeabi_dadd+0xd6>
100407e4:	e173      	b.n	10040ace <__aeabi_dadd+0x3be>
100407e6:	1bd8      	subs	r0, r3, r7
100407e8:	3001      	adds	r0, #1
100407ea:	1a09      	subs	r1, r1, r0
100407ec:	002c      	movs	r4, r5
100407ee:	408d      	lsls	r5, r1
100407f0:	40c4      	lsrs	r4, r0
100407f2:	1e6b      	subs	r3, r5, #1
100407f4:	419d      	sbcs	r5, r3
100407f6:	0013      	movs	r3, r2
100407f8:	40c2      	lsrs	r2, r0
100407fa:	408b      	lsls	r3, r1
100407fc:	4325      	orrs	r5, r4
100407fe:	2700      	movs	r7, #0
10040800:	0014      	movs	r4, r2
10040802:	431d      	orrs	r5, r3
10040804:	076b      	lsls	r3, r5, #29
10040806:	d009      	beq.n	1004081c <__aeabi_dadd+0x10c>
10040808:	230f      	movs	r3, #15
1004080a:	402b      	ands	r3, r5
1004080c:	2b04      	cmp	r3, #4
1004080e:	d005      	beq.n	1004081c <__aeabi_dadd+0x10c>
10040810:	1d2b      	adds	r3, r5, #4
10040812:	42ab      	cmp	r3, r5
10040814:	41ad      	sbcs	r5, r5
10040816:	426d      	negs	r5, r5
10040818:	1964      	adds	r4, r4, r5
1004081a:	001d      	movs	r5, r3
1004081c:	0223      	lsls	r3, r4, #8
1004081e:	d400      	bmi.n	10040822 <__aeabi_dadd+0x112>
10040820:	e12d      	b.n	10040a7e <__aeabi_dadd+0x36e>
10040822:	4a9d      	ldr	r2, [pc, #628]	@ (10040a98 <__aeabi_dadd+0x388>)
10040824:	3701      	adds	r7, #1
10040826:	4297      	cmp	r7, r2
10040828:	d100      	bne.n	1004082c <__aeabi_dadd+0x11c>
1004082a:	e0d3      	b.n	100409d4 <__aeabi_dadd+0x2c4>
1004082c:	4646      	mov	r6, r8
1004082e:	499b      	ldr	r1, [pc, #620]	@ (10040a9c <__aeabi_dadd+0x38c>)
10040830:	08ed      	lsrs	r5, r5, #3
10040832:	4021      	ands	r1, r4
10040834:	074a      	lsls	r2, r1, #29
10040836:	432a      	orrs	r2, r5
10040838:	057c      	lsls	r4, r7, #21
1004083a:	024d      	lsls	r5, r1, #9
1004083c:	0b2d      	lsrs	r5, r5, #12
1004083e:	0d64      	lsrs	r4, r4, #21
10040840:	0524      	lsls	r4, r4, #20
10040842:	432c      	orrs	r4, r5
10040844:	07f6      	lsls	r6, r6, #31
10040846:	4334      	orrs	r4, r6
10040848:	0010      	movs	r0, r2
1004084a:	0021      	movs	r1, r4
1004084c:	b003      	add	sp, #12
1004084e:	bcf0      	pop	{r4, r5, r6, r7}
10040850:	46bb      	mov	fp, r7
10040852:	46b2      	mov	sl, r6
10040854:	46a9      	mov	r9, r5
10040856:	46a0      	mov	r8, r4
10040858:	bdf0      	pop	{r4, r5, r6, r7, pc}
1004085a:	2a00      	cmp	r2, #0
1004085c:	d100      	bne.n	10040860 <__aeabi_dadd+0x150>
1004085e:	e084      	b.n	1004096a <__aeabi_dadd+0x25a>
10040860:	464a      	mov	r2, r9
10040862:	1bd2      	subs	r2, r2, r7
10040864:	2f00      	cmp	r7, #0
10040866:	d000      	beq.n	1004086a <__aeabi_dadd+0x15a>
10040868:	e16d      	b.n	10040b46 <__aeabi_dadd+0x436>
1004086a:	0025      	movs	r5, r4
1004086c:	4305      	orrs	r5, r0
1004086e:	d100      	bne.n	10040872 <__aeabi_dadd+0x162>
10040870:	e127      	b.n	10040ac2 <__aeabi_dadd+0x3b2>
10040872:	1e56      	subs	r6, r2, #1
10040874:	2a01      	cmp	r2, #1
10040876:	d100      	bne.n	1004087a <__aeabi_dadd+0x16a>
10040878:	e23b      	b.n	10040cf2 <__aeabi_dadd+0x5e2>
1004087a:	4d87      	ldr	r5, [pc, #540]	@ (10040a98 <__aeabi_dadd+0x388>)
1004087c:	42aa      	cmp	r2, r5
1004087e:	d100      	bne.n	10040882 <__aeabi_dadd+0x172>
10040880:	e26a      	b.n	10040d58 <__aeabi_dadd+0x648>
10040882:	2501      	movs	r5, #1
10040884:	2e38      	cmp	r6, #56	@ 0x38
10040886:	dc12      	bgt.n	100408ae <__aeabi_dadd+0x19e>
10040888:	0032      	movs	r2, r6
1004088a:	2a1f      	cmp	r2, #31
1004088c:	dd00      	ble.n	10040890 <__aeabi_dadd+0x180>
1004088e:	e1f8      	b.n	10040c82 <__aeabi_dadd+0x572>
10040890:	2620      	movs	r6, #32
10040892:	0025      	movs	r5, r4
10040894:	1ab6      	subs	r6, r6, r2
10040896:	0007      	movs	r7, r0
10040898:	4653      	mov	r3, sl
1004089a:	40b0      	lsls	r0, r6
1004089c:	40d4      	lsrs	r4, r2
1004089e:	40b5      	lsls	r5, r6
100408a0:	40d7      	lsrs	r7, r2
100408a2:	1e46      	subs	r6, r0, #1
100408a4:	41b0      	sbcs	r0, r6
100408a6:	1b1b      	subs	r3, r3, r4
100408a8:	469a      	mov	sl, r3
100408aa:	433d      	orrs	r5, r7
100408ac:	4305      	orrs	r5, r0
100408ae:	4662      	mov	r2, ip
100408b0:	1b55      	subs	r5, r2, r5
100408b2:	45ac      	cmp	ip, r5
100408b4:	4192      	sbcs	r2, r2
100408b6:	4653      	mov	r3, sl
100408b8:	4252      	negs	r2, r2
100408ba:	000e      	movs	r6, r1
100408bc:	464f      	mov	r7, r9
100408be:	4688      	mov	r8, r1
100408c0:	1a9c      	subs	r4, r3, r2
100408c2:	e778      	b.n	100407b6 <__aeabi_dadd+0xa6>
100408c4:	2a00      	cmp	r2, #0
100408c6:	dc00      	bgt.n	100408ca <__aeabi_dadd+0x1ba>
100408c8:	e08e      	b.n	100409e8 <__aeabi_dadd+0x2d8>
100408ca:	4649      	mov	r1, r9
100408cc:	2900      	cmp	r1, #0
100408ce:	d175      	bne.n	100409bc <__aeabi_dadd+0x2ac>
100408d0:	4661      	mov	r1, ip
100408d2:	4653      	mov	r3, sl
100408d4:	4319      	orrs	r1, r3
100408d6:	d100      	bne.n	100408da <__aeabi_dadd+0x1ca>
100408d8:	e0f6      	b.n	10040ac8 <__aeabi_dadd+0x3b8>
100408da:	1e51      	subs	r1, r2, #1
100408dc:	2a01      	cmp	r2, #1
100408de:	d100      	bne.n	100408e2 <__aeabi_dadd+0x1d2>
100408e0:	e191      	b.n	10040c06 <__aeabi_dadd+0x4f6>
100408e2:	4d6d      	ldr	r5, [pc, #436]	@ (10040a98 <__aeabi_dadd+0x388>)
100408e4:	42aa      	cmp	r2, r5
100408e6:	d100      	bne.n	100408ea <__aeabi_dadd+0x1da>
100408e8:	e0dc      	b.n	10040aa4 <__aeabi_dadd+0x394>
100408ea:	2501      	movs	r5, #1
100408ec:	2938      	cmp	r1, #56	@ 0x38
100408ee:	dc14      	bgt.n	1004091a <__aeabi_dadd+0x20a>
100408f0:	000a      	movs	r2, r1
100408f2:	2a1f      	cmp	r2, #31
100408f4:	dd00      	ble.n	100408f8 <__aeabi_dadd+0x1e8>
100408f6:	e1a2      	b.n	10040c3e <__aeabi_dadd+0x52e>
100408f8:	2120      	movs	r1, #32
100408fa:	4653      	mov	r3, sl
100408fc:	1a89      	subs	r1, r1, r2
100408fe:	408b      	lsls	r3, r1
10040900:	001d      	movs	r5, r3
10040902:	4663      	mov	r3, ip
10040904:	40d3      	lsrs	r3, r2
10040906:	431d      	orrs	r5, r3
10040908:	4663      	mov	r3, ip
1004090a:	408b      	lsls	r3, r1
1004090c:	0019      	movs	r1, r3
1004090e:	1e4b      	subs	r3, r1, #1
10040910:	4199      	sbcs	r1, r3
10040912:	4653      	mov	r3, sl
10040914:	40d3      	lsrs	r3, r2
10040916:	430d      	orrs	r5, r1
10040918:	18e4      	adds	r4, r4, r3
1004091a:	182d      	adds	r5, r5, r0
1004091c:	4285      	cmp	r5, r0
1004091e:	4180      	sbcs	r0, r0
10040920:	4240      	negs	r0, r0
10040922:	1824      	adds	r4, r4, r0
10040924:	0223      	lsls	r3, r4, #8
10040926:	d559      	bpl.n	100409dc <__aeabi_dadd+0x2cc>
10040928:	4b5b      	ldr	r3, [pc, #364]	@ (10040a98 <__aeabi_dadd+0x388>)
1004092a:	3701      	adds	r7, #1
1004092c:	429f      	cmp	r7, r3
1004092e:	d051      	beq.n	100409d4 <__aeabi_dadd+0x2c4>
10040930:	2101      	movs	r1, #1
10040932:	4b5a      	ldr	r3, [pc, #360]	@ (10040a9c <__aeabi_dadd+0x38c>)
10040934:	086a      	lsrs	r2, r5, #1
10040936:	401c      	ands	r4, r3
10040938:	4029      	ands	r1, r5
1004093a:	430a      	orrs	r2, r1
1004093c:	07e5      	lsls	r5, r4, #31
1004093e:	4315      	orrs	r5, r2
10040940:	0864      	lsrs	r4, r4, #1
10040942:	e75f      	b.n	10040804 <__aeabi_dadd+0xf4>
10040944:	4661      	mov	r1, ip
10040946:	4653      	mov	r3, sl
10040948:	4319      	orrs	r1, r3
1004094a:	d100      	bne.n	1004094e <__aeabi_dadd+0x23e>
1004094c:	e0bc      	b.n	10040ac8 <__aeabi_dadd+0x3b8>
1004094e:	1e51      	subs	r1, r2, #1
10040950:	2a01      	cmp	r2, #1
10040952:	d100      	bne.n	10040956 <__aeabi_dadd+0x246>
10040954:	e164      	b.n	10040c20 <__aeabi_dadd+0x510>
10040956:	4d50      	ldr	r5, [pc, #320]	@ (10040a98 <__aeabi_dadd+0x388>)
10040958:	42aa      	cmp	r2, r5
1004095a:	d100      	bne.n	1004095e <__aeabi_dadd+0x24e>
1004095c:	e16a      	b.n	10040c34 <__aeabi_dadd+0x524>
1004095e:	2501      	movs	r5, #1
10040960:	2938      	cmp	r1, #56	@ 0x38
10040962:	dd00      	ble.n	10040966 <__aeabi_dadd+0x256>
10040964:	e722      	b.n	100407ac <__aeabi_dadd+0x9c>
10040966:	000a      	movs	r2, r1
10040968:	e70e      	b.n	10040788 <__aeabi_dadd+0x78>
1004096a:	4a4d      	ldr	r2, [pc, #308]	@ (10040aa0 <__aeabi_dadd+0x390>)
1004096c:	1c7d      	adds	r5, r7, #1
1004096e:	4215      	tst	r5, r2
10040970:	d000      	beq.n	10040974 <__aeabi_dadd+0x264>
10040972:	e0d0      	b.n	10040b16 <__aeabi_dadd+0x406>
10040974:	0025      	movs	r5, r4
10040976:	4662      	mov	r2, ip
10040978:	4653      	mov	r3, sl
1004097a:	4305      	orrs	r5, r0
1004097c:	431a      	orrs	r2, r3
1004097e:	2f00      	cmp	r7, #0
10040980:	d000      	beq.n	10040984 <__aeabi_dadd+0x274>
10040982:	e137      	b.n	10040bf4 <__aeabi_dadd+0x4e4>
10040984:	2d00      	cmp	r5, #0
10040986:	d100      	bne.n	1004098a <__aeabi_dadd+0x27a>
10040988:	e1a8      	b.n	10040cdc <__aeabi_dadd+0x5cc>
1004098a:	2a00      	cmp	r2, #0
1004098c:	d100      	bne.n	10040990 <__aeabi_dadd+0x280>
1004098e:	e16a      	b.n	10040c66 <__aeabi_dadd+0x556>
10040990:	4663      	mov	r3, ip
10040992:	1ac5      	subs	r5, r0, r3
10040994:	4653      	mov	r3, sl
10040996:	1ae2      	subs	r2, r4, r3
10040998:	42a8      	cmp	r0, r5
1004099a:	419b      	sbcs	r3, r3
1004099c:	425b      	negs	r3, r3
1004099e:	1ad3      	subs	r3, r2, r3
100409a0:	021a      	lsls	r2, r3, #8
100409a2:	d400      	bmi.n	100409a6 <__aeabi_dadd+0x296>
100409a4:	e203      	b.n	10040dae <__aeabi_dadd+0x69e>
100409a6:	4663      	mov	r3, ip
100409a8:	1a1d      	subs	r5, r3, r0
100409aa:	45ac      	cmp	ip, r5
100409ac:	4192      	sbcs	r2, r2
100409ae:	4653      	mov	r3, sl
100409b0:	4252      	negs	r2, r2
100409b2:	1b1c      	subs	r4, r3, r4
100409b4:	000e      	movs	r6, r1
100409b6:	4688      	mov	r8, r1
100409b8:	1aa4      	subs	r4, r4, r2
100409ba:	e723      	b.n	10040804 <__aeabi_dadd+0xf4>
100409bc:	4936      	ldr	r1, [pc, #216]	@ (10040a98 <__aeabi_dadd+0x388>)
100409be:	428f      	cmp	r7, r1
100409c0:	d070      	beq.n	10040aa4 <__aeabi_dadd+0x394>
100409c2:	2501      	movs	r5, #1
100409c4:	2a38      	cmp	r2, #56	@ 0x38
100409c6:	dca8      	bgt.n	1004091a <__aeabi_dadd+0x20a>
100409c8:	2180      	movs	r1, #128	@ 0x80
100409ca:	4653      	mov	r3, sl
100409cc:	0409      	lsls	r1, r1, #16
100409ce:	430b      	orrs	r3, r1
100409d0:	469a      	mov	sl, r3
100409d2:	e78e      	b.n	100408f2 <__aeabi_dadd+0x1e2>
100409d4:	003c      	movs	r4, r7
100409d6:	2500      	movs	r5, #0
100409d8:	2200      	movs	r2, #0
100409da:	e731      	b.n	10040840 <__aeabi_dadd+0x130>
100409dc:	2307      	movs	r3, #7
100409de:	402b      	ands	r3, r5
100409e0:	2b00      	cmp	r3, #0
100409e2:	d000      	beq.n	100409e6 <__aeabi_dadd+0x2d6>
100409e4:	e710      	b.n	10040808 <__aeabi_dadd+0xf8>
100409e6:	e093      	b.n	10040b10 <__aeabi_dadd+0x400>
100409e8:	2a00      	cmp	r2, #0
100409ea:	d074      	beq.n	10040ad6 <__aeabi_dadd+0x3c6>
100409ec:	464a      	mov	r2, r9
100409ee:	1bd2      	subs	r2, r2, r7
100409f0:	2f00      	cmp	r7, #0
100409f2:	d100      	bne.n	100409f6 <__aeabi_dadd+0x2e6>
100409f4:	e0c7      	b.n	10040b86 <__aeabi_dadd+0x476>
100409f6:	4928      	ldr	r1, [pc, #160]	@ (10040a98 <__aeabi_dadd+0x388>)
100409f8:	4589      	cmp	r9, r1
100409fa:	d100      	bne.n	100409fe <__aeabi_dadd+0x2ee>
100409fc:	e185      	b.n	10040d0a <__aeabi_dadd+0x5fa>
100409fe:	2501      	movs	r5, #1
10040a00:	2a38      	cmp	r2, #56	@ 0x38
10040a02:	dc12      	bgt.n	10040a2a <__aeabi_dadd+0x31a>
10040a04:	2180      	movs	r1, #128	@ 0x80
10040a06:	0409      	lsls	r1, r1, #16
10040a08:	430c      	orrs	r4, r1
10040a0a:	2a1f      	cmp	r2, #31
10040a0c:	dd00      	ble.n	10040a10 <__aeabi_dadd+0x300>
10040a0e:	e1ab      	b.n	10040d68 <__aeabi_dadd+0x658>
10040a10:	2120      	movs	r1, #32
10040a12:	0025      	movs	r5, r4
10040a14:	1a89      	subs	r1, r1, r2
10040a16:	0007      	movs	r7, r0
10040a18:	4088      	lsls	r0, r1
10040a1a:	408d      	lsls	r5, r1
10040a1c:	40d7      	lsrs	r7, r2
10040a1e:	1e41      	subs	r1, r0, #1
10040a20:	4188      	sbcs	r0, r1
10040a22:	40d4      	lsrs	r4, r2
10040a24:	433d      	orrs	r5, r7
10040a26:	4305      	orrs	r5, r0
10040a28:	44a2      	add	sl, r4
10040a2a:	4465      	add	r5, ip
10040a2c:	4565      	cmp	r5, ip
10040a2e:	4192      	sbcs	r2, r2
10040a30:	4252      	negs	r2, r2
10040a32:	4452      	add	r2, sl
10040a34:	0014      	movs	r4, r2
10040a36:	464f      	mov	r7, r9
10040a38:	e774      	b.n	10040924 <__aeabi_dadd+0x214>
10040a3a:	0028      	movs	r0, r5
10040a3c:	f001 fc16 	bl	1004226c <__clzsi2>
10040a40:	0003      	movs	r3, r0
10040a42:	3318      	adds	r3, #24
10040a44:	2b1f      	cmp	r3, #31
10040a46:	dc00      	bgt.n	10040a4a <__aeabi_dadd+0x33a>
10040a48:	e6c2      	b.n	100407d0 <__aeabi_dadd+0xc0>
10040a4a:	002a      	movs	r2, r5
10040a4c:	3808      	subs	r0, #8
10040a4e:	4082      	lsls	r2, r0
10040a50:	429f      	cmp	r7, r3
10040a52:	dd00      	ble.n	10040a56 <__aeabi_dadd+0x346>
10040a54:	e0a9      	b.n	10040baa <__aeabi_dadd+0x49a>
10040a56:	1bdb      	subs	r3, r3, r7
10040a58:	1c58      	adds	r0, r3, #1
10040a5a:	281f      	cmp	r0, #31
10040a5c:	dc00      	bgt.n	10040a60 <__aeabi_dadd+0x350>
10040a5e:	e1ac      	b.n	10040dba <__aeabi_dadd+0x6aa>
10040a60:	0015      	movs	r5, r2
10040a62:	3b1f      	subs	r3, #31
10040a64:	40dd      	lsrs	r5, r3
10040a66:	2820      	cmp	r0, #32
10040a68:	d005      	beq.n	10040a76 <__aeabi_dadd+0x366>
10040a6a:	2340      	movs	r3, #64	@ 0x40
10040a6c:	1a1b      	subs	r3, r3, r0
10040a6e:	409a      	lsls	r2, r3
10040a70:	1e53      	subs	r3, r2, #1
10040a72:	419a      	sbcs	r2, r3
10040a74:	4315      	orrs	r5, r2
10040a76:	2307      	movs	r3, #7
10040a78:	2700      	movs	r7, #0
10040a7a:	402b      	ands	r3, r5
10040a7c:	e7b0      	b.n	100409e0 <__aeabi_dadd+0x2d0>
10040a7e:	08ed      	lsrs	r5, r5, #3
10040a80:	4b05      	ldr	r3, [pc, #20]	@ (10040a98 <__aeabi_dadd+0x388>)
10040a82:	0762      	lsls	r2, r4, #29
10040a84:	432a      	orrs	r2, r5
10040a86:	08e4      	lsrs	r4, r4, #3
10040a88:	429f      	cmp	r7, r3
10040a8a:	d00f      	beq.n	10040aac <__aeabi_dadd+0x39c>
10040a8c:	0324      	lsls	r4, r4, #12
10040a8e:	0b25      	lsrs	r5, r4, #12
10040a90:	057c      	lsls	r4, r7, #21
10040a92:	0d64      	lsrs	r4, r4, #21
10040a94:	e6d4      	b.n	10040840 <__aeabi_dadd+0x130>
10040a96:	46c0      	nop			@ (mov r8, r8)
10040a98:	000007ff 	.word	0x000007ff
10040a9c:	ff7fffff 	.word	0xff7fffff
10040aa0:	000007fe 	.word	0x000007fe
10040aa4:	08c0      	lsrs	r0, r0, #3
10040aa6:	0762      	lsls	r2, r4, #29
10040aa8:	4302      	orrs	r2, r0
10040aaa:	08e4      	lsrs	r4, r4, #3
10040aac:	0013      	movs	r3, r2
10040aae:	4323      	orrs	r3, r4
10040ab0:	d100      	bne.n	10040ab4 <__aeabi_dadd+0x3a4>
10040ab2:	e186      	b.n	10040dc2 <__aeabi_dadd+0x6b2>
10040ab4:	2580      	movs	r5, #128	@ 0x80
10040ab6:	032d      	lsls	r5, r5, #12
10040ab8:	4325      	orrs	r5, r4
10040aba:	032d      	lsls	r5, r5, #12
10040abc:	4cc3      	ldr	r4, [pc, #780]	@ (10040dcc <__aeabi_dadd+0x6bc>)
10040abe:	0b2d      	lsrs	r5, r5, #12
10040ac0:	e6be      	b.n	10040840 <__aeabi_dadd+0x130>
10040ac2:	4660      	mov	r0, ip
10040ac4:	4654      	mov	r4, sl
10040ac6:	000e      	movs	r6, r1
10040ac8:	0017      	movs	r7, r2
10040aca:	08c5      	lsrs	r5, r0, #3
10040acc:	e7d8      	b.n	10040a80 <__aeabi_dadd+0x370>
10040ace:	4cc0      	ldr	r4, [pc, #768]	@ (10040dd0 <__aeabi_dadd+0x6c0>)
10040ad0:	1aff      	subs	r7, r7, r3
10040ad2:	4014      	ands	r4, r2
10040ad4:	e696      	b.n	10040804 <__aeabi_dadd+0xf4>
10040ad6:	4abf      	ldr	r2, [pc, #764]	@ (10040dd4 <__aeabi_dadd+0x6c4>)
10040ad8:	1c79      	adds	r1, r7, #1
10040ada:	4211      	tst	r1, r2
10040adc:	d16b      	bne.n	10040bb6 <__aeabi_dadd+0x4a6>
10040ade:	0022      	movs	r2, r4
10040ae0:	4302      	orrs	r2, r0
10040ae2:	2f00      	cmp	r7, #0
10040ae4:	d000      	beq.n	10040ae8 <__aeabi_dadd+0x3d8>
10040ae6:	e0db      	b.n	10040ca0 <__aeabi_dadd+0x590>
10040ae8:	2a00      	cmp	r2, #0
10040aea:	d100      	bne.n	10040aee <__aeabi_dadd+0x3de>
10040aec:	e12d      	b.n	10040d4a <__aeabi_dadd+0x63a>
10040aee:	4662      	mov	r2, ip
10040af0:	4653      	mov	r3, sl
10040af2:	431a      	orrs	r2, r3
10040af4:	d100      	bne.n	10040af8 <__aeabi_dadd+0x3e8>
10040af6:	e0b6      	b.n	10040c66 <__aeabi_dadd+0x556>
10040af8:	4663      	mov	r3, ip
10040afa:	18c5      	adds	r5, r0, r3
10040afc:	4285      	cmp	r5, r0
10040afe:	4180      	sbcs	r0, r0
10040b00:	4454      	add	r4, sl
10040b02:	4240      	negs	r0, r0
10040b04:	1824      	adds	r4, r4, r0
10040b06:	0223      	lsls	r3, r4, #8
10040b08:	d502      	bpl.n	10040b10 <__aeabi_dadd+0x400>
10040b0a:	000f      	movs	r7, r1
10040b0c:	4bb0      	ldr	r3, [pc, #704]	@ (10040dd0 <__aeabi_dadd+0x6c0>)
10040b0e:	401c      	ands	r4, r3
10040b10:	003a      	movs	r2, r7
10040b12:	0028      	movs	r0, r5
10040b14:	e7d8      	b.n	10040ac8 <__aeabi_dadd+0x3b8>
10040b16:	4662      	mov	r2, ip
10040b18:	1a85      	subs	r5, r0, r2
10040b1a:	42a8      	cmp	r0, r5
10040b1c:	4192      	sbcs	r2, r2
10040b1e:	4653      	mov	r3, sl
10040b20:	4252      	negs	r2, r2
10040b22:	4691      	mov	r9, r2
10040b24:	1ae3      	subs	r3, r4, r3
10040b26:	001a      	movs	r2, r3
10040b28:	464b      	mov	r3, r9
10040b2a:	1ad2      	subs	r2, r2, r3
10040b2c:	0013      	movs	r3, r2
10040b2e:	4691      	mov	r9, r2
10040b30:	021a      	lsls	r2, r3, #8
10040b32:	d454      	bmi.n	10040bde <__aeabi_dadd+0x4ce>
10040b34:	464a      	mov	r2, r9
10040b36:	464c      	mov	r4, r9
10040b38:	432a      	orrs	r2, r5
10040b3a:	d000      	beq.n	10040b3e <__aeabi_dadd+0x42e>
10040b3c:	e640      	b.n	100407c0 <__aeabi_dadd+0xb0>
10040b3e:	2600      	movs	r6, #0
10040b40:	2400      	movs	r4, #0
10040b42:	2500      	movs	r5, #0
10040b44:	e67c      	b.n	10040840 <__aeabi_dadd+0x130>
10040b46:	4da1      	ldr	r5, [pc, #644]	@ (10040dcc <__aeabi_dadd+0x6bc>)
10040b48:	45a9      	cmp	r9, r5
10040b4a:	d100      	bne.n	10040b4e <__aeabi_dadd+0x43e>
10040b4c:	e090      	b.n	10040c70 <__aeabi_dadd+0x560>
10040b4e:	2501      	movs	r5, #1
10040b50:	2a38      	cmp	r2, #56	@ 0x38
10040b52:	dd00      	ble.n	10040b56 <__aeabi_dadd+0x446>
10040b54:	e6ab      	b.n	100408ae <__aeabi_dadd+0x19e>
10040b56:	2580      	movs	r5, #128	@ 0x80
10040b58:	042d      	lsls	r5, r5, #16
10040b5a:	432c      	orrs	r4, r5
10040b5c:	e695      	b.n	1004088a <__aeabi_dadd+0x17a>
10040b5e:	0011      	movs	r1, r2
10040b60:	4655      	mov	r5, sl
10040b62:	3920      	subs	r1, #32
10040b64:	40cd      	lsrs	r5, r1
10040b66:	46a9      	mov	r9, r5
10040b68:	2a20      	cmp	r2, #32
10040b6a:	d006      	beq.n	10040b7a <__aeabi_dadd+0x46a>
10040b6c:	2140      	movs	r1, #64	@ 0x40
10040b6e:	4653      	mov	r3, sl
10040b70:	1a8a      	subs	r2, r1, r2
10040b72:	4093      	lsls	r3, r2
10040b74:	4662      	mov	r2, ip
10040b76:	431a      	orrs	r2, r3
10040b78:	4694      	mov	ip, r2
10040b7a:	4665      	mov	r5, ip
10040b7c:	1e6b      	subs	r3, r5, #1
10040b7e:	419d      	sbcs	r5, r3
10040b80:	464b      	mov	r3, r9
10040b82:	431d      	orrs	r5, r3
10040b84:	e612      	b.n	100407ac <__aeabi_dadd+0x9c>
10040b86:	0021      	movs	r1, r4
10040b88:	4301      	orrs	r1, r0
10040b8a:	d100      	bne.n	10040b8e <__aeabi_dadd+0x47e>
10040b8c:	e0c4      	b.n	10040d18 <__aeabi_dadd+0x608>
10040b8e:	1e51      	subs	r1, r2, #1
10040b90:	2a01      	cmp	r2, #1
10040b92:	d100      	bne.n	10040b96 <__aeabi_dadd+0x486>
10040b94:	e0fb      	b.n	10040d8e <__aeabi_dadd+0x67e>
10040b96:	4d8d      	ldr	r5, [pc, #564]	@ (10040dcc <__aeabi_dadd+0x6bc>)
10040b98:	42aa      	cmp	r2, r5
10040b9a:	d100      	bne.n	10040b9e <__aeabi_dadd+0x48e>
10040b9c:	e0b5      	b.n	10040d0a <__aeabi_dadd+0x5fa>
10040b9e:	2501      	movs	r5, #1
10040ba0:	2938      	cmp	r1, #56	@ 0x38
10040ba2:	dd00      	ble.n	10040ba6 <__aeabi_dadd+0x496>
10040ba4:	e741      	b.n	10040a2a <__aeabi_dadd+0x31a>
10040ba6:	000a      	movs	r2, r1
10040ba8:	e72f      	b.n	10040a0a <__aeabi_dadd+0x2fa>
10040baa:	4c89      	ldr	r4, [pc, #548]	@ (10040dd0 <__aeabi_dadd+0x6c0>)
10040bac:	1aff      	subs	r7, r7, r3
10040bae:	4014      	ands	r4, r2
10040bb0:	0762      	lsls	r2, r4, #29
10040bb2:	08e4      	lsrs	r4, r4, #3
10040bb4:	e76a      	b.n	10040a8c <__aeabi_dadd+0x37c>
10040bb6:	4a85      	ldr	r2, [pc, #532]	@ (10040dcc <__aeabi_dadd+0x6bc>)
10040bb8:	4291      	cmp	r1, r2
10040bba:	d100      	bne.n	10040bbe <__aeabi_dadd+0x4ae>
10040bbc:	e0e3      	b.n	10040d86 <__aeabi_dadd+0x676>
10040bbe:	4663      	mov	r3, ip
10040bc0:	18c2      	adds	r2, r0, r3
10040bc2:	4282      	cmp	r2, r0
10040bc4:	4180      	sbcs	r0, r0
10040bc6:	0023      	movs	r3, r4
10040bc8:	4240      	negs	r0, r0
10040bca:	4453      	add	r3, sl
10040bcc:	181b      	adds	r3, r3, r0
10040bce:	07dd      	lsls	r5, r3, #31
10040bd0:	085c      	lsrs	r4, r3, #1
10040bd2:	2307      	movs	r3, #7
10040bd4:	0852      	lsrs	r2, r2, #1
10040bd6:	4315      	orrs	r5, r2
10040bd8:	000f      	movs	r7, r1
10040bda:	402b      	ands	r3, r5
10040bdc:	e700      	b.n	100409e0 <__aeabi_dadd+0x2d0>
10040bde:	4663      	mov	r3, ip
10040be0:	1a1d      	subs	r5, r3, r0
10040be2:	45ac      	cmp	ip, r5
10040be4:	4192      	sbcs	r2, r2
10040be6:	4653      	mov	r3, sl
10040be8:	4252      	negs	r2, r2
10040bea:	1b1c      	subs	r4, r3, r4
10040bec:	000e      	movs	r6, r1
10040bee:	4688      	mov	r8, r1
10040bf0:	1aa4      	subs	r4, r4, r2
10040bf2:	e5e5      	b.n	100407c0 <__aeabi_dadd+0xb0>
10040bf4:	2d00      	cmp	r5, #0
10040bf6:	d000      	beq.n	10040bfa <__aeabi_dadd+0x4ea>
10040bf8:	e091      	b.n	10040d1e <__aeabi_dadd+0x60e>
10040bfa:	2a00      	cmp	r2, #0
10040bfc:	d138      	bne.n	10040c70 <__aeabi_dadd+0x560>
10040bfe:	2480      	movs	r4, #128	@ 0x80
10040c00:	2600      	movs	r6, #0
10040c02:	0324      	lsls	r4, r4, #12
10040c04:	e756      	b.n	10040ab4 <__aeabi_dadd+0x3a4>
10040c06:	4663      	mov	r3, ip
10040c08:	18c5      	adds	r5, r0, r3
10040c0a:	4285      	cmp	r5, r0
10040c0c:	4180      	sbcs	r0, r0
10040c0e:	4454      	add	r4, sl
10040c10:	4240      	negs	r0, r0
10040c12:	1824      	adds	r4, r4, r0
10040c14:	2701      	movs	r7, #1
10040c16:	0223      	lsls	r3, r4, #8
10040c18:	d400      	bmi.n	10040c1c <__aeabi_dadd+0x50c>
10040c1a:	e6df      	b.n	100409dc <__aeabi_dadd+0x2cc>
10040c1c:	2702      	movs	r7, #2
10040c1e:	e687      	b.n	10040930 <__aeabi_dadd+0x220>
10040c20:	4663      	mov	r3, ip
10040c22:	1ac5      	subs	r5, r0, r3
10040c24:	42a8      	cmp	r0, r5
10040c26:	4180      	sbcs	r0, r0
10040c28:	4653      	mov	r3, sl
10040c2a:	4240      	negs	r0, r0
10040c2c:	1ae4      	subs	r4, r4, r3
10040c2e:	2701      	movs	r7, #1
10040c30:	1a24      	subs	r4, r4, r0
10040c32:	e5c0      	b.n	100407b6 <__aeabi_dadd+0xa6>
10040c34:	0762      	lsls	r2, r4, #29
10040c36:	08c0      	lsrs	r0, r0, #3
10040c38:	4302      	orrs	r2, r0
10040c3a:	08e4      	lsrs	r4, r4, #3
10040c3c:	e736      	b.n	10040aac <__aeabi_dadd+0x39c>
10040c3e:	0011      	movs	r1, r2
10040c40:	4653      	mov	r3, sl
10040c42:	3920      	subs	r1, #32
10040c44:	40cb      	lsrs	r3, r1
10040c46:	4699      	mov	r9, r3
10040c48:	2a20      	cmp	r2, #32
10040c4a:	d006      	beq.n	10040c5a <__aeabi_dadd+0x54a>
10040c4c:	2140      	movs	r1, #64	@ 0x40
10040c4e:	4653      	mov	r3, sl
10040c50:	1a8a      	subs	r2, r1, r2
10040c52:	4093      	lsls	r3, r2
10040c54:	4662      	mov	r2, ip
10040c56:	431a      	orrs	r2, r3
10040c58:	4694      	mov	ip, r2
10040c5a:	4665      	mov	r5, ip
10040c5c:	1e6b      	subs	r3, r5, #1
10040c5e:	419d      	sbcs	r5, r3
10040c60:	464b      	mov	r3, r9
10040c62:	431d      	orrs	r5, r3
10040c64:	e659      	b.n	1004091a <__aeabi_dadd+0x20a>
10040c66:	0762      	lsls	r2, r4, #29
10040c68:	08c0      	lsrs	r0, r0, #3
10040c6a:	4302      	orrs	r2, r0
10040c6c:	08e4      	lsrs	r4, r4, #3
10040c6e:	e70d      	b.n	10040a8c <__aeabi_dadd+0x37c>
10040c70:	4653      	mov	r3, sl
10040c72:	075a      	lsls	r2, r3, #29
10040c74:	4663      	mov	r3, ip
10040c76:	08d8      	lsrs	r0, r3, #3
10040c78:	4653      	mov	r3, sl
10040c7a:	000e      	movs	r6, r1
10040c7c:	4302      	orrs	r2, r0
10040c7e:	08dc      	lsrs	r4, r3, #3
10040c80:	e714      	b.n	10040aac <__aeabi_dadd+0x39c>
10040c82:	0015      	movs	r5, r2
10040c84:	0026      	movs	r6, r4
10040c86:	3d20      	subs	r5, #32
10040c88:	40ee      	lsrs	r6, r5
10040c8a:	2a20      	cmp	r2, #32
10040c8c:	d003      	beq.n	10040c96 <__aeabi_dadd+0x586>
10040c8e:	2540      	movs	r5, #64	@ 0x40
10040c90:	1aaa      	subs	r2, r5, r2
10040c92:	4094      	lsls	r4, r2
10040c94:	4320      	orrs	r0, r4
10040c96:	1e42      	subs	r2, r0, #1
10040c98:	4190      	sbcs	r0, r2
10040c9a:	0005      	movs	r5, r0
10040c9c:	4335      	orrs	r5, r6
10040c9e:	e606      	b.n	100408ae <__aeabi_dadd+0x19e>
10040ca0:	2a00      	cmp	r2, #0
10040ca2:	d07c      	beq.n	10040d9e <__aeabi_dadd+0x68e>
10040ca4:	4662      	mov	r2, ip
10040ca6:	4653      	mov	r3, sl
10040ca8:	08c0      	lsrs	r0, r0, #3
10040caa:	431a      	orrs	r2, r3
10040cac:	d100      	bne.n	10040cb0 <__aeabi_dadd+0x5a0>
10040cae:	e6fa      	b.n	10040aa6 <__aeabi_dadd+0x396>
10040cb0:	0762      	lsls	r2, r4, #29
10040cb2:	4310      	orrs	r0, r2
10040cb4:	2280      	movs	r2, #128	@ 0x80
10040cb6:	08e4      	lsrs	r4, r4, #3
10040cb8:	0312      	lsls	r2, r2, #12
10040cba:	4214      	tst	r4, r2
10040cbc:	d008      	beq.n	10040cd0 <__aeabi_dadd+0x5c0>
10040cbe:	08d9      	lsrs	r1, r3, #3
10040cc0:	4211      	tst	r1, r2
10040cc2:	d105      	bne.n	10040cd0 <__aeabi_dadd+0x5c0>
10040cc4:	4663      	mov	r3, ip
10040cc6:	08d8      	lsrs	r0, r3, #3
10040cc8:	4653      	mov	r3, sl
10040cca:	000c      	movs	r4, r1
10040ccc:	075b      	lsls	r3, r3, #29
10040cce:	4318      	orrs	r0, r3
10040cd0:	0f42      	lsrs	r2, r0, #29
10040cd2:	00c0      	lsls	r0, r0, #3
10040cd4:	08c0      	lsrs	r0, r0, #3
10040cd6:	0752      	lsls	r2, r2, #29
10040cd8:	4302      	orrs	r2, r0
10040cda:	e6e7      	b.n	10040aac <__aeabi_dadd+0x39c>
10040cdc:	2a00      	cmp	r2, #0
10040cde:	d100      	bne.n	10040ce2 <__aeabi_dadd+0x5d2>
10040ce0:	e72d      	b.n	10040b3e <__aeabi_dadd+0x42e>
10040ce2:	4663      	mov	r3, ip
10040ce4:	08d8      	lsrs	r0, r3, #3
10040ce6:	4653      	mov	r3, sl
10040ce8:	075a      	lsls	r2, r3, #29
10040cea:	000e      	movs	r6, r1
10040cec:	4302      	orrs	r2, r0
10040cee:	08dc      	lsrs	r4, r3, #3
10040cf0:	e6cc      	b.n	10040a8c <__aeabi_dadd+0x37c>
10040cf2:	4663      	mov	r3, ip
10040cf4:	1a1d      	subs	r5, r3, r0
10040cf6:	45ac      	cmp	ip, r5
10040cf8:	4192      	sbcs	r2, r2
10040cfa:	4653      	mov	r3, sl
10040cfc:	4252      	negs	r2, r2
10040cfe:	1b1c      	subs	r4, r3, r4
10040d00:	000e      	movs	r6, r1
10040d02:	4688      	mov	r8, r1
10040d04:	1aa4      	subs	r4, r4, r2
10040d06:	3701      	adds	r7, #1
10040d08:	e555      	b.n	100407b6 <__aeabi_dadd+0xa6>
10040d0a:	4663      	mov	r3, ip
10040d0c:	08d9      	lsrs	r1, r3, #3
10040d0e:	4653      	mov	r3, sl
10040d10:	075a      	lsls	r2, r3, #29
10040d12:	430a      	orrs	r2, r1
10040d14:	08dc      	lsrs	r4, r3, #3
10040d16:	e6c9      	b.n	10040aac <__aeabi_dadd+0x39c>
10040d18:	4660      	mov	r0, ip
10040d1a:	4654      	mov	r4, sl
10040d1c:	e6d4      	b.n	10040ac8 <__aeabi_dadd+0x3b8>
10040d1e:	08c0      	lsrs	r0, r0, #3
10040d20:	2a00      	cmp	r2, #0
10040d22:	d100      	bne.n	10040d26 <__aeabi_dadd+0x616>
10040d24:	e6bf      	b.n	10040aa6 <__aeabi_dadd+0x396>
10040d26:	0762      	lsls	r2, r4, #29
10040d28:	4310      	orrs	r0, r2
10040d2a:	2280      	movs	r2, #128	@ 0x80
10040d2c:	08e4      	lsrs	r4, r4, #3
10040d2e:	0312      	lsls	r2, r2, #12
10040d30:	4214      	tst	r4, r2
10040d32:	d0cd      	beq.n	10040cd0 <__aeabi_dadd+0x5c0>
10040d34:	08dd      	lsrs	r5, r3, #3
10040d36:	4215      	tst	r5, r2
10040d38:	d1ca      	bne.n	10040cd0 <__aeabi_dadd+0x5c0>
10040d3a:	4663      	mov	r3, ip
10040d3c:	08d8      	lsrs	r0, r3, #3
10040d3e:	4653      	mov	r3, sl
10040d40:	075b      	lsls	r3, r3, #29
10040d42:	000e      	movs	r6, r1
10040d44:	002c      	movs	r4, r5
10040d46:	4318      	orrs	r0, r3
10040d48:	e7c2      	b.n	10040cd0 <__aeabi_dadd+0x5c0>
10040d4a:	4663      	mov	r3, ip
10040d4c:	08d9      	lsrs	r1, r3, #3
10040d4e:	4653      	mov	r3, sl
10040d50:	075a      	lsls	r2, r3, #29
10040d52:	430a      	orrs	r2, r1
10040d54:	08dc      	lsrs	r4, r3, #3
10040d56:	e699      	b.n	10040a8c <__aeabi_dadd+0x37c>
10040d58:	4663      	mov	r3, ip
10040d5a:	08d8      	lsrs	r0, r3, #3
10040d5c:	4653      	mov	r3, sl
10040d5e:	075a      	lsls	r2, r3, #29
10040d60:	000e      	movs	r6, r1
10040d62:	4302      	orrs	r2, r0
10040d64:	08dc      	lsrs	r4, r3, #3
10040d66:	e6a1      	b.n	10040aac <__aeabi_dadd+0x39c>
10040d68:	0011      	movs	r1, r2
10040d6a:	0027      	movs	r7, r4
10040d6c:	3920      	subs	r1, #32
10040d6e:	40cf      	lsrs	r7, r1
10040d70:	2a20      	cmp	r2, #32
10040d72:	d003      	beq.n	10040d7c <__aeabi_dadd+0x66c>
10040d74:	2140      	movs	r1, #64	@ 0x40
10040d76:	1a8a      	subs	r2, r1, r2
10040d78:	4094      	lsls	r4, r2
10040d7a:	4320      	orrs	r0, r4
10040d7c:	1e42      	subs	r2, r0, #1
10040d7e:	4190      	sbcs	r0, r2
10040d80:	0005      	movs	r5, r0
10040d82:	433d      	orrs	r5, r7
10040d84:	e651      	b.n	10040a2a <__aeabi_dadd+0x31a>
10040d86:	000c      	movs	r4, r1
10040d88:	2500      	movs	r5, #0
10040d8a:	2200      	movs	r2, #0
10040d8c:	e558      	b.n	10040840 <__aeabi_dadd+0x130>
10040d8e:	4460      	add	r0, ip
10040d90:	4560      	cmp	r0, ip
10040d92:	4192      	sbcs	r2, r2
10040d94:	4454      	add	r4, sl
10040d96:	4252      	negs	r2, r2
10040d98:	0005      	movs	r5, r0
10040d9a:	18a4      	adds	r4, r4, r2
10040d9c:	e73a      	b.n	10040c14 <__aeabi_dadd+0x504>
10040d9e:	4653      	mov	r3, sl
10040da0:	075a      	lsls	r2, r3, #29
10040da2:	4663      	mov	r3, ip
10040da4:	08d9      	lsrs	r1, r3, #3
10040da6:	4653      	mov	r3, sl
10040da8:	430a      	orrs	r2, r1
10040daa:	08dc      	lsrs	r4, r3, #3
10040dac:	e67e      	b.n	10040aac <__aeabi_dadd+0x39c>
10040dae:	001a      	movs	r2, r3
10040db0:	001c      	movs	r4, r3
10040db2:	432a      	orrs	r2, r5
10040db4:	d000      	beq.n	10040db8 <__aeabi_dadd+0x6a8>
10040db6:	e6ab      	b.n	10040b10 <__aeabi_dadd+0x400>
10040db8:	e6c1      	b.n	10040b3e <__aeabi_dadd+0x42e>
10040dba:	2120      	movs	r1, #32
10040dbc:	2500      	movs	r5, #0
10040dbe:	1a09      	subs	r1, r1, r0
10040dc0:	e519      	b.n	100407f6 <__aeabi_dadd+0xe6>
10040dc2:	2200      	movs	r2, #0
10040dc4:	2500      	movs	r5, #0
10040dc6:	4c01      	ldr	r4, [pc, #4]	@ (10040dcc <__aeabi_dadd+0x6bc>)
10040dc8:	e53a      	b.n	10040840 <__aeabi_dadd+0x130>
10040dca:	46c0      	nop			@ (mov r8, r8)
10040dcc:	000007ff 	.word	0x000007ff
10040dd0:	ff7fffff 	.word	0xff7fffff
10040dd4:	000007fe 	.word	0x000007fe

10040dd8 <__aeabi_ddiv>:
10040dd8:	b5f0      	push	{r4, r5, r6, r7, lr}
10040dda:	46de      	mov	lr, fp
10040ddc:	4645      	mov	r5, r8
10040dde:	4657      	mov	r7, sl
10040de0:	464e      	mov	r6, r9
10040de2:	b5e0      	push	{r5, r6, r7, lr}
10040de4:	b087      	sub	sp, #28
10040de6:	9200      	str	r2, [sp, #0]
10040de8:	9301      	str	r3, [sp, #4]
10040dea:	030b      	lsls	r3, r1, #12
10040dec:	0b1b      	lsrs	r3, r3, #12
10040dee:	469b      	mov	fp, r3
10040df0:	0fca      	lsrs	r2, r1, #31
10040df2:	004b      	lsls	r3, r1, #1
10040df4:	0004      	movs	r4, r0
10040df6:	4680      	mov	r8, r0
10040df8:	0d5b      	lsrs	r3, r3, #21
10040dfa:	9202      	str	r2, [sp, #8]
10040dfc:	d100      	bne.n	10040e00 <__aeabi_ddiv+0x28>
10040dfe:	e16a      	b.n	100410d6 <__aeabi_ddiv+0x2fe>
10040e00:	4ad4      	ldr	r2, [pc, #848]	@ (10041154 <__aeabi_ddiv+0x37c>)
10040e02:	4293      	cmp	r3, r2
10040e04:	d100      	bne.n	10040e08 <__aeabi_ddiv+0x30>
10040e06:	e18c      	b.n	10041122 <__aeabi_ddiv+0x34a>
10040e08:	4659      	mov	r1, fp
10040e0a:	0f42      	lsrs	r2, r0, #29
10040e0c:	00c9      	lsls	r1, r1, #3
10040e0e:	430a      	orrs	r2, r1
10040e10:	2180      	movs	r1, #128	@ 0x80
10040e12:	0409      	lsls	r1, r1, #16
10040e14:	4311      	orrs	r1, r2
10040e16:	00c2      	lsls	r2, r0, #3
10040e18:	4690      	mov	r8, r2
10040e1a:	4acf      	ldr	r2, [pc, #828]	@ (10041158 <__aeabi_ddiv+0x380>)
10040e1c:	4689      	mov	r9, r1
10040e1e:	4692      	mov	sl, r2
10040e20:	449a      	add	sl, r3
10040e22:	2300      	movs	r3, #0
10040e24:	2400      	movs	r4, #0
10040e26:	9303      	str	r3, [sp, #12]
10040e28:	9e00      	ldr	r6, [sp, #0]
10040e2a:	9f01      	ldr	r7, [sp, #4]
10040e2c:	033b      	lsls	r3, r7, #12
10040e2e:	0b1b      	lsrs	r3, r3, #12
10040e30:	469b      	mov	fp, r3
10040e32:	007b      	lsls	r3, r7, #1
10040e34:	0030      	movs	r0, r6
10040e36:	0d5b      	lsrs	r3, r3, #21
10040e38:	0ffd      	lsrs	r5, r7, #31
10040e3a:	2b00      	cmp	r3, #0
10040e3c:	d100      	bne.n	10040e40 <__aeabi_ddiv+0x68>
10040e3e:	e128      	b.n	10041092 <__aeabi_ddiv+0x2ba>
10040e40:	4ac4      	ldr	r2, [pc, #784]	@ (10041154 <__aeabi_ddiv+0x37c>)
10040e42:	4293      	cmp	r3, r2
10040e44:	d100      	bne.n	10040e48 <__aeabi_ddiv+0x70>
10040e46:	e177      	b.n	10041138 <__aeabi_ddiv+0x360>
10040e48:	4659      	mov	r1, fp
10040e4a:	0f72      	lsrs	r2, r6, #29
10040e4c:	00c9      	lsls	r1, r1, #3
10040e4e:	430a      	orrs	r2, r1
10040e50:	2180      	movs	r1, #128	@ 0x80
10040e52:	0409      	lsls	r1, r1, #16
10040e54:	4311      	orrs	r1, r2
10040e56:	468b      	mov	fp, r1
10040e58:	49bf      	ldr	r1, [pc, #764]	@ (10041158 <__aeabi_ddiv+0x380>)
10040e5a:	00f2      	lsls	r2, r6, #3
10040e5c:	468c      	mov	ip, r1
10040e5e:	4651      	mov	r1, sl
10040e60:	4463      	add	r3, ip
10040e62:	1acb      	subs	r3, r1, r3
10040e64:	469a      	mov	sl, r3
10040e66:	2300      	movs	r3, #0
10040e68:	9e02      	ldr	r6, [sp, #8]
10040e6a:	406e      	eors	r6, r5
10040e6c:	2c0f      	cmp	r4, #15
10040e6e:	d827      	bhi.n	10040ec0 <__aeabi_ddiv+0xe8>
10040e70:	49ba      	ldr	r1, [pc, #744]	@ (1004115c <__aeabi_ddiv+0x384>)
10040e72:	00a4      	lsls	r4, r4, #2
10040e74:	5909      	ldr	r1, [r1, r4]
10040e76:	468f      	mov	pc, r1
10040e78:	46cb      	mov	fp, r9
10040e7a:	4642      	mov	r2, r8
10040e7c:	9e02      	ldr	r6, [sp, #8]
10040e7e:	9b03      	ldr	r3, [sp, #12]
10040e80:	2b02      	cmp	r3, #2
10040e82:	d016      	beq.n	10040eb2 <__aeabi_ddiv+0xda>
10040e84:	2b03      	cmp	r3, #3
10040e86:	d100      	bne.n	10040e8a <__aeabi_ddiv+0xb2>
10040e88:	e2a6      	b.n	100413d8 <__aeabi_ddiv+0x600>
10040e8a:	2b01      	cmp	r3, #1
10040e8c:	d000      	beq.n	10040e90 <__aeabi_ddiv+0xb8>
10040e8e:	e0df      	b.n	10041050 <__aeabi_ddiv+0x278>
10040e90:	2200      	movs	r2, #0
10040e92:	2300      	movs	r3, #0
10040e94:	2400      	movs	r4, #0
10040e96:	4690      	mov	r8, r2
10040e98:	051b      	lsls	r3, r3, #20
10040e9a:	4323      	orrs	r3, r4
10040e9c:	07f6      	lsls	r6, r6, #31
10040e9e:	4333      	orrs	r3, r6
10040ea0:	4640      	mov	r0, r8
10040ea2:	0019      	movs	r1, r3
10040ea4:	b007      	add	sp, #28
10040ea6:	bcf0      	pop	{r4, r5, r6, r7}
10040ea8:	46bb      	mov	fp, r7
10040eaa:	46b2      	mov	sl, r6
10040eac:	46a9      	mov	r9, r5
10040eae:	46a0      	mov	r8, r4
10040eb0:	bdf0      	pop	{r4, r5, r6, r7, pc}
10040eb2:	2200      	movs	r2, #0
10040eb4:	2400      	movs	r4, #0
10040eb6:	4690      	mov	r8, r2
10040eb8:	4ba6      	ldr	r3, [pc, #664]	@ (10041154 <__aeabi_ddiv+0x37c>)
10040eba:	e7ed      	b.n	10040e98 <__aeabi_ddiv+0xc0>
10040ebc:	002e      	movs	r6, r5
10040ebe:	e7df      	b.n	10040e80 <__aeabi_ddiv+0xa8>
10040ec0:	45cb      	cmp	fp, r9
10040ec2:	d200      	bcs.n	10040ec6 <__aeabi_ddiv+0xee>
10040ec4:	e1d4      	b.n	10041270 <__aeabi_ddiv+0x498>
10040ec6:	d100      	bne.n	10040eca <__aeabi_ddiv+0xf2>
10040ec8:	e1cf      	b.n	1004126a <__aeabi_ddiv+0x492>
10040eca:	2301      	movs	r3, #1
10040ecc:	425b      	negs	r3, r3
10040ece:	469c      	mov	ip, r3
10040ed0:	4644      	mov	r4, r8
10040ed2:	4648      	mov	r0, r9
10040ed4:	2700      	movs	r7, #0
10040ed6:	44e2      	add	sl, ip
10040ed8:	465b      	mov	r3, fp
10040eda:	0e15      	lsrs	r5, r2, #24
10040edc:	021b      	lsls	r3, r3, #8
10040ede:	431d      	orrs	r5, r3
10040ee0:	0c19      	lsrs	r1, r3, #16
10040ee2:	042b      	lsls	r3, r5, #16
10040ee4:	0212      	lsls	r2, r2, #8
10040ee6:	9500      	str	r5, [sp, #0]
10040ee8:	0c1d      	lsrs	r5, r3, #16
10040eea:	4691      	mov	r9, r2
10040eec:	9102      	str	r1, [sp, #8]
10040eee:	9503      	str	r5, [sp, #12]
10040ef0:	f7ff f996 	bl	10040220 <__aeabi_uidivmod>
10040ef4:	0002      	movs	r2, r0
10040ef6:	436a      	muls	r2, r5
10040ef8:	040b      	lsls	r3, r1, #16
10040efa:	0c21      	lsrs	r1, r4, #16
10040efc:	4680      	mov	r8, r0
10040efe:	4319      	orrs	r1, r3
10040f00:	428a      	cmp	r2, r1
10040f02:	d909      	bls.n	10040f18 <__aeabi_ddiv+0x140>
10040f04:	9d00      	ldr	r5, [sp, #0]
10040f06:	2301      	movs	r3, #1
10040f08:	46ac      	mov	ip, r5
10040f0a:	425b      	negs	r3, r3
10040f0c:	4461      	add	r1, ip
10040f0e:	469c      	mov	ip, r3
10040f10:	44e0      	add	r8, ip
10040f12:	428d      	cmp	r5, r1
10040f14:	d800      	bhi.n	10040f18 <__aeabi_ddiv+0x140>
10040f16:	e1fb      	b.n	10041310 <__aeabi_ddiv+0x538>
10040f18:	1a88      	subs	r0, r1, r2
10040f1a:	9902      	ldr	r1, [sp, #8]
10040f1c:	f7ff f980 	bl	10040220 <__aeabi_uidivmod>
10040f20:	9a03      	ldr	r2, [sp, #12]
10040f22:	0424      	lsls	r4, r4, #16
10040f24:	4342      	muls	r2, r0
10040f26:	0409      	lsls	r1, r1, #16
10040f28:	0c24      	lsrs	r4, r4, #16
10040f2a:	0003      	movs	r3, r0
10040f2c:	430c      	orrs	r4, r1
10040f2e:	42a2      	cmp	r2, r4
10040f30:	d906      	bls.n	10040f40 <__aeabi_ddiv+0x168>
10040f32:	9900      	ldr	r1, [sp, #0]
10040f34:	3b01      	subs	r3, #1
10040f36:	468c      	mov	ip, r1
10040f38:	4464      	add	r4, ip
10040f3a:	42a1      	cmp	r1, r4
10040f3c:	d800      	bhi.n	10040f40 <__aeabi_ddiv+0x168>
10040f3e:	e1e1      	b.n	10041304 <__aeabi_ddiv+0x52c>
10040f40:	1aa0      	subs	r0, r4, r2
10040f42:	4642      	mov	r2, r8
10040f44:	0412      	lsls	r2, r2, #16
10040f46:	431a      	orrs	r2, r3
10040f48:	4693      	mov	fp, r2
10040f4a:	464b      	mov	r3, r9
10040f4c:	4659      	mov	r1, fp
10040f4e:	0c1b      	lsrs	r3, r3, #16
10040f50:	001d      	movs	r5, r3
10040f52:	9304      	str	r3, [sp, #16]
10040f54:	040b      	lsls	r3, r1, #16
10040f56:	4649      	mov	r1, r9
10040f58:	0409      	lsls	r1, r1, #16
10040f5a:	0c09      	lsrs	r1, r1, #16
10040f5c:	000c      	movs	r4, r1
10040f5e:	0c1b      	lsrs	r3, r3, #16
10040f60:	435c      	muls	r4, r3
10040f62:	0c12      	lsrs	r2, r2, #16
10040f64:	436b      	muls	r3, r5
10040f66:	4688      	mov	r8, r1
10040f68:	4351      	muls	r1, r2
10040f6a:	436a      	muls	r2, r5
10040f6c:	0c25      	lsrs	r5, r4, #16
10040f6e:	46ac      	mov	ip, r5
10040f70:	185b      	adds	r3, r3, r1
10040f72:	4463      	add	r3, ip
10040f74:	4299      	cmp	r1, r3
10040f76:	d903      	bls.n	10040f80 <__aeabi_ddiv+0x1a8>
10040f78:	2180      	movs	r1, #128	@ 0x80
10040f7a:	0249      	lsls	r1, r1, #9
10040f7c:	468c      	mov	ip, r1
10040f7e:	4462      	add	r2, ip
10040f80:	0c19      	lsrs	r1, r3, #16
10040f82:	0424      	lsls	r4, r4, #16
10040f84:	041b      	lsls	r3, r3, #16
10040f86:	0c24      	lsrs	r4, r4, #16
10040f88:	188a      	adds	r2, r1, r2
10040f8a:	191c      	adds	r4, r3, r4
10040f8c:	4290      	cmp	r0, r2
10040f8e:	d302      	bcc.n	10040f96 <__aeabi_ddiv+0x1be>
10040f90:	d116      	bne.n	10040fc0 <__aeabi_ddiv+0x1e8>
10040f92:	42a7      	cmp	r7, r4
10040f94:	d214      	bcs.n	10040fc0 <__aeabi_ddiv+0x1e8>
10040f96:	465b      	mov	r3, fp
10040f98:	9d00      	ldr	r5, [sp, #0]
10040f9a:	3b01      	subs	r3, #1
10040f9c:	444f      	add	r7, r9
10040f9e:	9305      	str	r3, [sp, #20]
10040fa0:	454f      	cmp	r7, r9
10040fa2:	419b      	sbcs	r3, r3
10040fa4:	46ac      	mov	ip, r5
10040fa6:	425b      	negs	r3, r3
10040fa8:	4463      	add	r3, ip
10040faa:	18c0      	adds	r0, r0, r3
10040fac:	4285      	cmp	r5, r0
10040fae:	d300      	bcc.n	10040fb2 <__aeabi_ddiv+0x1da>
10040fb0:	e1a1      	b.n	100412f6 <__aeabi_ddiv+0x51e>
10040fb2:	4282      	cmp	r2, r0
10040fb4:	d900      	bls.n	10040fb8 <__aeabi_ddiv+0x1e0>
10040fb6:	e1f6      	b.n	100413a6 <__aeabi_ddiv+0x5ce>
10040fb8:	d100      	bne.n	10040fbc <__aeabi_ddiv+0x1e4>
10040fba:	e1f1      	b.n	100413a0 <__aeabi_ddiv+0x5c8>
10040fbc:	9b05      	ldr	r3, [sp, #20]
10040fbe:	469b      	mov	fp, r3
10040fc0:	1b3c      	subs	r4, r7, r4
10040fc2:	42a7      	cmp	r7, r4
10040fc4:	41bf      	sbcs	r7, r7
10040fc6:	9d00      	ldr	r5, [sp, #0]
10040fc8:	1a80      	subs	r0, r0, r2
10040fca:	427f      	negs	r7, r7
10040fcc:	1bc0      	subs	r0, r0, r7
10040fce:	4285      	cmp	r5, r0
10040fd0:	d100      	bne.n	10040fd4 <__aeabi_ddiv+0x1fc>
10040fd2:	e1d0      	b.n	10041376 <__aeabi_ddiv+0x59e>
10040fd4:	9902      	ldr	r1, [sp, #8]
10040fd6:	f7ff f923 	bl	10040220 <__aeabi_uidivmod>
10040fda:	9a03      	ldr	r2, [sp, #12]
10040fdc:	040b      	lsls	r3, r1, #16
10040fde:	4342      	muls	r2, r0
10040fe0:	0c21      	lsrs	r1, r4, #16
10040fe2:	0007      	movs	r7, r0
10040fe4:	4319      	orrs	r1, r3
10040fe6:	428a      	cmp	r2, r1
10040fe8:	d900      	bls.n	10040fec <__aeabi_ddiv+0x214>
10040fea:	e178      	b.n	100412de <__aeabi_ddiv+0x506>
10040fec:	1a88      	subs	r0, r1, r2
10040fee:	9902      	ldr	r1, [sp, #8]
10040ff0:	f7ff f916 	bl	10040220 <__aeabi_uidivmod>
10040ff4:	9a03      	ldr	r2, [sp, #12]
10040ff6:	0424      	lsls	r4, r4, #16
10040ff8:	4342      	muls	r2, r0
10040ffa:	0409      	lsls	r1, r1, #16
10040ffc:	0c24      	lsrs	r4, r4, #16
10040ffe:	0003      	movs	r3, r0
10041000:	430c      	orrs	r4, r1
10041002:	42a2      	cmp	r2, r4
10041004:	d900      	bls.n	10041008 <__aeabi_ddiv+0x230>
10041006:	e15d      	b.n	100412c4 <__aeabi_ddiv+0x4ec>
10041008:	4641      	mov	r1, r8
1004100a:	1aa4      	subs	r4, r4, r2
1004100c:	043a      	lsls	r2, r7, #16
1004100e:	431a      	orrs	r2, r3
10041010:	9d04      	ldr	r5, [sp, #16]
10041012:	0413      	lsls	r3, r2, #16
10041014:	0c1b      	lsrs	r3, r3, #16
10041016:	4359      	muls	r1, r3
10041018:	4647      	mov	r7, r8
1004101a:	436b      	muls	r3, r5
1004101c:	469c      	mov	ip, r3
1004101e:	0c10      	lsrs	r0, r2, #16
10041020:	4347      	muls	r7, r0
10041022:	0c0b      	lsrs	r3, r1, #16
10041024:	44bc      	add	ip, r7
10041026:	4463      	add	r3, ip
10041028:	4368      	muls	r0, r5
1004102a:	429f      	cmp	r7, r3
1004102c:	d903      	bls.n	10041036 <__aeabi_ddiv+0x25e>
1004102e:	2580      	movs	r5, #128	@ 0x80
10041030:	026d      	lsls	r5, r5, #9
10041032:	46ac      	mov	ip, r5
10041034:	4460      	add	r0, ip
10041036:	0c1f      	lsrs	r7, r3, #16
10041038:	0409      	lsls	r1, r1, #16
1004103a:	041b      	lsls	r3, r3, #16
1004103c:	0c09      	lsrs	r1, r1, #16
1004103e:	183f      	adds	r7, r7, r0
10041040:	185b      	adds	r3, r3, r1
10041042:	42bc      	cmp	r4, r7
10041044:	d200      	bcs.n	10041048 <__aeabi_ddiv+0x270>
10041046:	e102      	b.n	1004124e <__aeabi_ddiv+0x476>
10041048:	d100      	bne.n	1004104c <__aeabi_ddiv+0x274>
1004104a:	e0fd      	b.n	10041248 <__aeabi_ddiv+0x470>
1004104c:	2301      	movs	r3, #1
1004104e:	431a      	orrs	r2, r3
10041050:	4b43      	ldr	r3, [pc, #268]	@ (10041160 <__aeabi_ddiv+0x388>)
10041052:	4453      	add	r3, sl
10041054:	2b00      	cmp	r3, #0
10041056:	dc00      	bgt.n	1004105a <__aeabi_ddiv+0x282>
10041058:	e0ae      	b.n	100411b8 <__aeabi_ddiv+0x3e0>
1004105a:	0751      	lsls	r1, r2, #29
1004105c:	d000      	beq.n	10041060 <__aeabi_ddiv+0x288>
1004105e:	e198      	b.n	10041392 <__aeabi_ddiv+0x5ba>
10041060:	4659      	mov	r1, fp
10041062:	01c9      	lsls	r1, r1, #7
10041064:	d506      	bpl.n	10041074 <__aeabi_ddiv+0x29c>
10041066:	4659      	mov	r1, fp
10041068:	4b3e      	ldr	r3, [pc, #248]	@ (10041164 <__aeabi_ddiv+0x38c>)
1004106a:	4019      	ands	r1, r3
1004106c:	2380      	movs	r3, #128	@ 0x80
1004106e:	468b      	mov	fp, r1
10041070:	00db      	lsls	r3, r3, #3
10041072:	4453      	add	r3, sl
10041074:	493c      	ldr	r1, [pc, #240]	@ (10041168 <__aeabi_ddiv+0x390>)
10041076:	428b      	cmp	r3, r1
10041078:	dd00      	ble.n	1004107c <__aeabi_ddiv+0x2a4>
1004107a:	e71a      	b.n	10040eb2 <__aeabi_ddiv+0xda>
1004107c:	4659      	mov	r1, fp
1004107e:	08d2      	lsrs	r2, r2, #3
10041080:	0749      	lsls	r1, r1, #29
10041082:	4311      	orrs	r1, r2
10041084:	465a      	mov	r2, fp
10041086:	055b      	lsls	r3, r3, #21
10041088:	0254      	lsls	r4, r2, #9
1004108a:	4688      	mov	r8, r1
1004108c:	0b24      	lsrs	r4, r4, #12
1004108e:	0d5b      	lsrs	r3, r3, #21
10041090:	e702      	b.n	10040e98 <__aeabi_ddiv+0xc0>
10041092:	465a      	mov	r2, fp
10041094:	9b00      	ldr	r3, [sp, #0]
10041096:	431a      	orrs	r2, r3
10041098:	d100      	bne.n	1004109c <__aeabi_ddiv+0x2c4>
1004109a:	e07e      	b.n	1004119a <__aeabi_ddiv+0x3c2>
1004109c:	465b      	mov	r3, fp
1004109e:	2b00      	cmp	r3, #0
100410a0:	d100      	bne.n	100410a4 <__aeabi_ddiv+0x2cc>
100410a2:	e100      	b.n	100412a6 <__aeabi_ddiv+0x4ce>
100410a4:	4658      	mov	r0, fp
100410a6:	f001 f8e1 	bl	1004226c <__clzsi2>
100410aa:	0002      	movs	r2, r0
100410ac:	0003      	movs	r3, r0
100410ae:	3a0b      	subs	r2, #11
100410b0:	271d      	movs	r7, #29
100410b2:	9e00      	ldr	r6, [sp, #0]
100410b4:	1aba      	subs	r2, r7, r2
100410b6:	0019      	movs	r1, r3
100410b8:	4658      	mov	r0, fp
100410ba:	40d6      	lsrs	r6, r2
100410bc:	3908      	subs	r1, #8
100410be:	4088      	lsls	r0, r1
100410c0:	0032      	movs	r2, r6
100410c2:	4302      	orrs	r2, r0
100410c4:	4693      	mov	fp, r2
100410c6:	9a00      	ldr	r2, [sp, #0]
100410c8:	408a      	lsls	r2, r1
100410ca:	4928      	ldr	r1, [pc, #160]	@ (1004116c <__aeabi_ddiv+0x394>)
100410cc:	4453      	add	r3, sl
100410ce:	468a      	mov	sl, r1
100410d0:	449a      	add	sl, r3
100410d2:	2300      	movs	r3, #0
100410d4:	e6c8      	b.n	10040e68 <__aeabi_ddiv+0x90>
100410d6:	465b      	mov	r3, fp
100410d8:	4303      	orrs	r3, r0
100410da:	4699      	mov	r9, r3
100410dc:	d056      	beq.n	1004118c <__aeabi_ddiv+0x3b4>
100410de:	465b      	mov	r3, fp
100410e0:	2b00      	cmp	r3, #0
100410e2:	d100      	bne.n	100410e6 <__aeabi_ddiv+0x30e>
100410e4:	e0cd      	b.n	10041282 <__aeabi_ddiv+0x4aa>
100410e6:	4658      	mov	r0, fp
100410e8:	f001 f8c0 	bl	1004226c <__clzsi2>
100410ec:	230b      	movs	r3, #11
100410ee:	425b      	negs	r3, r3
100410f0:	469c      	mov	ip, r3
100410f2:	0002      	movs	r2, r0
100410f4:	4484      	add	ip, r0
100410f6:	4666      	mov	r6, ip
100410f8:	231d      	movs	r3, #29
100410fa:	1b9b      	subs	r3, r3, r6
100410fc:	0026      	movs	r6, r4
100410fe:	0011      	movs	r1, r2
10041100:	4658      	mov	r0, fp
10041102:	40de      	lsrs	r6, r3
10041104:	3908      	subs	r1, #8
10041106:	4088      	lsls	r0, r1
10041108:	0033      	movs	r3, r6
1004110a:	4303      	orrs	r3, r0
1004110c:	4699      	mov	r9, r3
1004110e:	0023      	movs	r3, r4
10041110:	408b      	lsls	r3, r1
10041112:	4698      	mov	r8, r3
10041114:	4b16      	ldr	r3, [pc, #88]	@ (10041170 <__aeabi_ddiv+0x398>)
10041116:	2400      	movs	r4, #0
10041118:	1a9b      	subs	r3, r3, r2
1004111a:	469a      	mov	sl, r3
1004111c:	2300      	movs	r3, #0
1004111e:	9303      	str	r3, [sp, #12]
10041120:	e682      	b.n	10040e28 <__aeabi_ddiv+0x50>
10041122:	465a      	mov	r2, fp
10041124:	4302      	orrs	r2, r0
10041126:	4691      	mov	r9, r2
10041128:	d12a      	bne.n	10041180 <__aeabi_ddiv+0x3a8>
1004112a:	2200      	movs	r2, #0
1004112c:	469a      	mov	sl, r3
1004112e:	2302      	movs	r3, #2
10041130:	4690      	mov	r8, r2
10041132:	2408      	movs	r4, #8
10041134:	9303      	str	r3, [sp, #12]
10041136:	e677      	b.n	10040e28 <__aeabi_ddiv+0x50>
10041138:	465a      	mov	r2, fp
1004113a:	9b00      	ldr	r3, [sp, #0]
1004113c:	431a      	orrs	r2, r3
1004113e:	4b0d      	ldr	r3, [pc, #52]	@ (10041174 <__aeabi_ddiv+0x39c>)
10041140:	469c      	mov	ip, r3
10041142:	44e2      	add	sl, ip
10041144:	2a00      	cmp	r2, #0
10041146:	d117      	bne.n	10041178 <__aeabi_ddiv+0x3a0>
10041148:	2302      	movs	r3, #2
1004114a:	431c      	orrs	r4, r3
1004114c:	2300      	movs	r3, #0
1004114e:	469b      	mov	fp, r3
10041150:	3302      	adds	r3, #2
10041152:	e689      	b.n	10040e68 <__aeabi_ddiv+0x90>
10041154:	000007ff 	.word	0x000007ff
10041158:	fffffc01 	.word	0xfffffc01
1004115c:	10049364 	.word	0x10049364
10041160:	000003ff 	.word	0x000003ff
10041164:	feffffff 	.word	0xfeffffff
10041168:	000007fe 	.word	0x000007fe
1004116c:	000003f3 	.word	0x000003f3
10041170:	fffffc0d 	.word	0xfffffc0d
10041174:	fffff801 	.word	0xfffff801
10041178:	2303      	movs	r3, #3
1004117a:	0032      	movs	r2, r6
1004117c:	431c      	orrs	r4, r3
1004117e:	e673      	b.n	10040e68 <__aeabi_ddiv+0x90>
10041180:	469a      	mov	sl, r3
10041182:	2303      	movs	r3, #3
10041184:	46d9      	mov	r9, fp
10041186:	240c      	movs	r4, #12
10041188:	9303      	str	r3, [sp, #12]
1004118a:	e64d      	b.n	10040e28 <__aeabi_ddiv+0x50>
1004118c:	2300      	movs	r3, #0
1004118e:	4698      	mov	r8, r3
10041190:	469a      	mov	sl, r3
10041192:	3301      	adds	r3, #1
10041194:	2404      	movs	r4, #4
10041196:	9303      	str	r3, [sp, #12]
10041198:	e646      	b.n	10040e28 <__aeabi_ddiv+0x50>
1004119a:	2301      	movs	r3, #1
1004119c:	431c      	orrs	r4, r3
1004119e:	2300      	movs	r3, #0
100411a0:	469b      	mov	fp, r3
100411a2:	3301      	adds	r3, #1
100411a4:	e660      	b.n	10040e68 <__aeabi_ddiv+0x90>
100411a6:	2300      	movs	r3, #0
100411a8:	2480      	movs	r4, #128	@ 0x80
100411aa:	4698      	mov	r8, r3
100411ac:	2600      	movs	r6, #0
100411ae:	4b92      	ldr	r3, [pc, #584]	@ (100413f8 <__aeabi_ddiv+0x620>)
100411b0:	0324      	lsls	r4, r4, #12
100411b2:	e671      	b.n	10040e98 <__aeabi_ddiv+0xc0>
100411b4:	2201      	movs	r2, #1
100411b6:	4252      	negs	r2, r2
100411b8:	2101      	movs	r1, #1
100411ba:	1ac9      	subs	r1, r1, r3
100411bc:	2938      	cmp	r1, #56	@ 0x38
100411be:	dd00      	ble.n	100411c2 <__aeabi_ddiv+0x3ea>
100411c0:	e666      	b.n	10040e90 <__aeabi_ddiv+0xb8>
100411c2:	291f      	cmp	r1, #31
100411c4:	dc00      	bgt.n	100411c8 <__aeabi_ddiv+0x3f0>
100411c6:	e0ab      	b.n	10041320 <__aeabi_ddiv+0x548>
100411c8:	201f      	movs	r0, #31
100411ca:	4240      	negs	r0, r0
100411cc:	1ac3      	subs	r3, r0, r3
100411ce:	4658      	mov	r0, fp
100411d0:	40d8      	lsrs	r0, r3
100411d2:	0003      	movs	r3, r0
100411d4:	2920      	cmp	r1, #32
100411d6:	d004      	beq.n	100411e2 <__aeabi_ddiv+0x40a>
100411d8:	4658      	mov	r0, fp
100411da:	4988      	ldr	r1, [pc, #544]	@ (100413fc <__aeabi_ddiv+0x624>)
100411dc:	4451      	add	r1, sl
100411de:	4088      	lsls	r0, r1
100411e0:	4302      	orrs	r2, r0
100411e2:	1e51      	subs	r1, r2, #1
100411e4:	418a      	sbcs	r2, r1
100411e6:	431a      	orrs	r2, r3
100411e8:	2307      	movs	r3, #7
100411ea:	0019      	movs	r1, r3
100411ec:	2400      	movs	r4, #0
100411ee:	4011      	ands	r1, r2
100411f0:	4213      	tst	r3, r2
100411f2:	d00c      	beq.n	1004120e <__aeabi_ddiv+0x436>
100411f4:	230f      	movs	r3, #15
100411f6:	4013      	ands	r3, r2
100411f8:	2b04      	cmp	r3, #4
100411fa:	d100      	bne.n	100411fe <__aeabi_ddiv+0x426>
100411fc:	e0f9      	b.n	100413f2 <__aeabi_ddiv+0x61a>
100411fe:	1d11      	adds	r1, r2, #4
10041200:	4291      	cmp	r1, r2
10041202:	419b      	sbcs	r3, r3
10041204:	000a      	movs	r2, r1
10041206:	425b      	negs	r3, r3
10041208:	0759      	lsls	r1, r3, #29
1004120a:	025b      	lsls	r3, r3, #9
1004120c:	0b1c      	lsrs	r4, r3, #12
1004120e:	08d2      	lsrs	r2, r2, #3
10041210:	430a      	orrs	r2, r1
10041212:	4690      	mov	r8, r2
10041214:	2300      	movs	r3, #0
10041216:	e63f      	b.n	10040e98 <__aeabi_ddiv+0xc0>
10041218:	2480      	movs	r4, #128	@ 0x80
1004121a:	464b      	mov	r3, r9
1004121c:	0324      	lsls	r4, r4, #12
1004121e:	4223      	tst	r3, r4
10041220:	d009      	beq.n	10041236 <__aeabi_ddiv+0x45e>
10041222:	465b      	mov	r3, fp
10041224:	4223      	tst	r3, r4
10041226:	d106      	bne.n	10041236 <__aeabi_ddiv+0x45e>
10041228:	431c      	orrs	r4, r3
1004122a:	0324      	lsls	r4, r4, #12
1004122c:	002e      	movs	r6, r5
1004122e:	4690      	mov	r8, r2
10041230:	4b71      	ldr	r3, [pc, #452]	@ (100413f8 <__aeabi_ddiv+0x620>)
10041232:	0b24      	lsrs	r4, r4, #12
10041234:	e630      	b.n	10040e98 <__aeabi_ddiv+0xc0>
10041236:	2480      	movs	r4, #128	@ 0x80
10041238:	464b      	mov	r3, r9
1004123a:	0324      	lsls	r4, r4, #12
1004123c:	431c      	orrs	r4, r3
1004123e:	0324      	lsls	r4, r4, #12
10041240:	9e02      	ldr	r6, [sp, #8]
10041242:	4b6d      	ldr	r3, [pc, #436]	@ (100413f8 <__aeabi_ddiv+0x620>)
10041244:	0b24      	lsrs	r4, r4, #12
10041246:	e627      	b.n	10040e98 <__aeabi_ddiv+0xc0>
10041248:	2b00      	cmp	r3, #0
1004124a:	d100      	bne.n	1004124e <__aeabi_ddiv+0x476>
1004124c:	e700      	b.n	10041050 <__aeabi_ddiv+0x278>
1004124e:	9800      	ldr	r0, [sp, #0]
10041250:	1e51      	subs	r1, r2, #1
10041252:	4684      	mov	ip, r0
10041254:	4464      	add	r4, ip
10041256:	4284      	cmp	r4, r0
10041258:	d200      	bcs.n	1004125c <__aeabi_ddiv+0x484>
1004125a:	e084      	b.n	10041366 <__aeabi_ddiv+0x58e>
1004125c:	42bc      	cmp	r4, r7
1004125e:	d200      	bcs.n	10041262 <__aeabi_ddiv+0x48a>
10041260:	e0ae      	b.n	100413c0 <__aeabi_ddiv+0x5e8>
10041262:	d100      	bne.n	10041266 <__aeabi_ddiv+0x48e>
10041264:	e0c1      	b.n	100413ea <__aeabi_ddiv+0x612>
10041266:	000a      	movs	r2, r1
10041268:	e6f0      	b.n	1004104c <__aeabi_ddiv+0x274>
1004126a:	4542      	cmp	r2, r8
1004126c:	d900      	bls.n	10041270 <__aeabi_ddiv+0x498>
1004126e:	e62c      	b.n	10040eca <__aeabi_ddiv+0xf2>
10041270:	464b      	mov	r3, r9
10041272:	07dc      	lsls	r4, r3, #31
10041274:	0858      	lsrs	r0, r3, #1
10041276:	4643      	mov	r3, r8
10041278:	085b      	lsrs	r3, r3, #1
1004127a:	431c      	orrs	r4, r3
1004127c:	4643      	mov	r3, r8
1004127e:	07df      	lsls	r7, r3, #31
10041280:	e62a      	b.n	10040ed8 <__aeabi_ddiv+0x100>
10041282:	f000 fff3 	bl	1004226c <__clzsi2>
10041286:	2315      	movs	r3, #21
10041288:	469c      	mov	ip, r3
1004128a:	4484      	add	ip, r0
1004128c:	0002      	movs	r2, r0
1004128e:	4663      	mov	r3, ip
10041290:	3220      	adds	r2, #32
10041292:	2b1c      	cmp	r3, #28
10041294:	dc00      	bgt.n	10041298 <__aeabi_ddiv+0x4c0>
10041296:	e72e      	b.n	100410f6 <__aeabi_ddiv+0x31e>
10041298:	0023      	movs	r3, r4
1004129a:	3808      	subs	r0, #8
1004129c:	4083      	lsls	r3, r0
1004129e:	4699      	mov	r9, r3
100412a0:	2300      	movs	r3, #0
100412a2:	4698      	mov	r8, r3
100412a4:	e736      	b.n	10041114 <__aeabi_ddiv+0x33c>
100412a6:	f000 ffe1 	bl	1004226c <__clzsi2>
100412aa:	0002      	movs	r2, r0
100412ac:	0003      	movs	r3, r0
100412ae:	3215      	adds	r2, #21
100412b0:	3320      	adds	r3, #32
100412b2:	2a1c      	cmp	r2, #28
100412b4:	dc00      	bgt.n	100412b8 <__aeabi_ddiv+0x4e0>
100412b6:	e6fb      	b.n	100410b0 <__aeabi_ddiv+0x2d8>
100412b8:	9900      	ldr	r1, [sp, #0]
100412ba:	3808      	subs	r0, #8
100412bc:	4081      	lsls	r1, r0
100412be:	2200      	movs	r2, #0
100412c0:	468b      	mov	fp, r1
100412c2:	e702      	b.n	100410ca <__aeabi_ddiv+0x2f2>
100412c4:	9900      	ldr	r1, [sp, #0]
100412c6:	3b01      	subs	r3, #1
100412c8:	468c      	mov	ip, r1
100412ca:	4464      	add	r4, ip
100412cc:	42a1      	cmp	r1, r4
100412ce:	d900      	bls.n	100412d2 <__aeabi_ddiv+0x4fa>
100412d0:	e69a      	b.n	10041008 <__aeabi_ddiv+0x230>
100412d2:	42a2      	cmp	r2, r4
100412d4:	d800      	bhi.n	100412d8 <__aeabi_ddiv+0x500>
100412d6:	e697      	b.n	10041008 <__aeabi_ddiv+0x230>
100412d8:	1e83      	subs	r3, r0, #2
100412da:	4464      	add	r4, ip
100412dc:	e694      	b.n	10041008 <__aeabi_ddiv+0x230>
100412de:	46ac      	mov	ip, r5
100412e0:	4461      	add	r1, ip
100412e2:	3f01      	subs	r7, #1
100412e4:	428d      	cmp	r5, r1
100412e6:	d900      	bls.n	100412ea <__aeabi_ddiv+0x512>
100412e8:	e680      	b.n	10040fec <__aeabi_ddiv+0x214>
100412ea:	428a      	cmp	r2, r1
100412ec:	d800      	bhi.n	100412f0 <__aeabi_ddiv+0x518>
100412ee:	e67d      	b.n	10040fec <__aeabi_ddiv+0x214>
100412f0:	1e87      	subs	r7, r0, #2
100412f2:	4461      	add	r1, ip
100412f4:	e67a      	b.n	10040fec <__aeabi_ddiv+0x214>
100412f6:	4285      	cmp	r5, r0
100412f8:	d000      	beq.n	100412fc <__aeabi_ddiv+0x524>
100412fa:	e65f      	b.n	10040fbc <__aeabi_ddiv+0x1e4>
100412fc:	45b9      	cmp	r9, r7
100412fe:	d900      	bls.n	10041302 <__aeabi_ddiv+0x52a>
10041300:	e65c      	b.n	10040fbc <__aeabi_ddiv+0x1e4>
10041302:	e656      	b.n	10040fb2 <__aeabi_ddiv+0x1da>
10041304:	42a2      	cmp	r2, r4
10041306:	d800      	bhi.n	1004130a <__aeabi_ddiv+0x532>
10041308:	e61a      	b.n	10040f40 <__aeabi_ddiv+0x168>
1004130a:	1e83      	subs	r3, r0, #2
1004130c:	4464      	add	r4, ip
1004130e:	e617      	b.n	10040f40 <__aeabi_ddiv+0x168>
10041310:	428a      	cmp	r2, r1
10041312:	d800      	bhi.n	10041316 <__aeabi_ddiv+0x53e>
10041314:	e600      	b.n	10040f18 <__aeabi_ddiv+0x140>
10041316:	46ac      	mov	ip, r5
10041318:	1e83      	subs	r3, r0, #2
1004131a:	4698      	mov	r8, r3
1004131c:	4461      	add	r1, ip
1004131e:	e5fb      	b.n	10040f18 <__aeabi_ddiv+0x140>
10041320:	4837      	ldr	r0, [pc, #220]	@ (10041400 <__aeabi_ddiv+0x628>)
10041322:	0014      	movs	r4, r2
10041324:	4450      	add	r0, sl
10041326:	4082      	lsls	r2, r0
10041328:	465b      	mov	r3, fp
1004132a:	0017      	movs	r7, r2
1004132c:	4083      	lsls	r3, r0
1004132e:	40cc      	lsrs	r4, r1
10041330:	1e7a      	subs	r2, r7, #1
10041332:	4197      	sbcs	r7, r2
10041334:	4323      	orrs	r3, r4
10041336:	433b      	orrs	r3, r7
10041338:	001a      	movs	r2, r3
1004133a:	465b      	mov	r3, fp
1004133c:	40cb      	lsrs	r3, r1
1004133e:	0751      	lsls	r1, r2, #29
10041340:	d009      	beq.n	10041356 <__aeabi_ddiv+0x57e>
10041342:	210f      	movs	r1, #15
10041344:	4011      	ands	r1, r2
10041346:	2904      	cmp	r1, #4
10041348:	d005      	beq.n	10041356 <__aeabi_ddiv+0x57e>
1004134a:	1d11      	adds	r1, r2, #4
1004134c:	4291      	cmp	r1, r2
1004134e:	4192      	sbcs	r2, r2
10041350:	4252      	negs	r2, r2
10041352:	189b      	adds	r3, r3, r2
10041354:	000a      	movs	r2, r1
10041356:	0219      	lsls	r1, r3, #8
10041358:	d400      	bmi.n	1004135c <__aeabi_ddiv+0x584>
1004135a:	e755      	b.n	10041208 <__aeabi_ddiv+0x430>
1004135c:	2200      	movs	r2, #0
1004135e:	2301      	movs	r3, #1
10041360:	2400      	movs	r4, #0
10041362:	4690      	mov	r8, r2
10041364:	e598      	b.n	10040e98 <__aeabi_ddiv+0xc0>
10041366:	000a      	movs	r2, r1
10041368:	42bc      	cmp	r4, r7
1004136a:	d000      	beq.n	1004136e <__aeabi_ddiv+0x596>
1004136c:	e66e      	b.n	1004104c <__aeabi_ddiv+0x274>
1004136e:	454b      	cmp	r3, r9
10041370:	d000      	beq.n	10041374 <__aeabi_ddiv+0x59c>
10041372:	e66b      	b.n	1004104c <__aeabi_ddiv+0x274>
10041374:	e66c      	b.n	10041050 <__aeabi_ddiv+0x278>
10041376:	4b23      	ldr	r3, [pc, #140]	@ (10041404 <__aeabi_ddiv+0x62c>)
10041378:	4a23      	ldr	r2, [pc, #140]	@ (10041408 <__aeabi_ddiv+0x630>)
1004137a:	4453      	add	r3, sl
1004137c:	4592      	cmp	sl, r2
1004137e:	da00      	bge.n	10041382 <__aeabi_ddiv+0x5aa>
10041380:	e718      	b.n	100411b4 <__aeabi_ddiv+0x3dc>
10041382:	2101      	movs	r1, #1
10041384:	4249      	negs	r1, r1
10041386:	1d0a      	adds	r2, r1, #4
10041388:	428a      	cmp	r2, r1
1004138a:	4189      	sbcs	r1, r1
1004138c:	4249      	negs	r1, r1
1004138e:	448b      	add	fp, r1
10041390:	e666      	b.n	10041060 <__aeabi_ddiv+0x288>
10041392:	210f      	movs	r1, #15
10041394:	4011      	ands	r1, r2
10041396:	2904      	cmp	r1, #4
10041398:	d100      	bne.n	1004139c <__aeabi_ddiv+0x5c4>
1004139a:	e661      	b.n	10041060 <__aeabi_ddiv+0x288>
1004139c:	0011      	movs	r1, r2
1004139e:	e7f2      	b.n	10041386 <__aeabi_ddiv+0x5ae>
100413a0:	42bc      	cmp	r4, r7
100413a2:	d800      	bhi.n	100413a6 <__aeabi_ddiv+0x5ce>
100413a4:	e60a      	b.n	10040fbc <__aeabi_ddiv+0x1e4>
100413a6:	2302      	movs	r3, #2
100413a8:	425b      	negs	r3, r3
100413aa:	469c      	mov	ip, r3
100413ac:	9900      	ldr	r1, [sp, #0]
100413ae:	444f      	add	r7, r9
100413b0:	454f      	cmp	r7, r9
100413b2:	419b      	sbcs	r3, r3
100413b4:	44e3      	add	fp, ip
100413b6:	468c      	mov	ip, r1
100413b8:	425b      	negs	r3, r3
100413ba:	4463      	add	r3, ip
100413bc:	18c0      	adds	r0, r0, r3
100413be:	e5ff      	b.n	10040fc0 <__aeabi_ddiv+0x1e8>
100413c0:	4649      	mov	r1, r9
100413c2:	9d00      	ldr	r5, [sp, #0]
100413c4:	0048      	lsls	r0, r1, #1
100413c6:	4548      	cmp	r0, r9
100413c8:	4189      	sbcs	r1, r1
100413ca:	46ac      	mov	ip, r5
100413cc:	4249      	negs	r1, r1
100413ce:	4461      	add	r1, ip
100413d0:	4681      	mov	r9, r0
100413d2:	3a02      	subs	r2, #2
100413d4:	1864      	adds	r4, r4, r1
100413d6:	e7c7      	b.n	10041368 <__aeabi_ddiv+0x590>
100413d8:	2480      	movs	r4, #128	@ 0x80
100413da:	465b      	mov	r3, fp
100413dc:	0324      	lsls	r4, r4, #12
100413de:	431c      	orrs	r4, r3
100413e0:	0324      	lsls	r4, r4, #12
100413e2:	4690      	mov	r8, r2
100413e4:	4b04      	ldr	r3, [pc, #16]	@ (100413f8 <__aeabi_ddiv+0x620>)
100413e6:	0b24      	lsrs	r4, r4, #12
100413e8:	e556      	b.n	10040e98 <__aeabi_ddiv+0xc0>
100413ea:	4599      	cmp	r9, r3
100413ec:	d3e8      	bcc.n	100413c0 <__aeabi_ddiv+0x5e8>
100413ee:	000a      	movs	r2, r1
100413f0:	e7bd      	b.n	1004136e <__aeabi_ddiv+0x596>
100413f2:	2300      	movs	r3, #0
100413f4:	e708      	b.n	10041208 <__aeabi_ddiv+0x430>
100413f6:	46c0      	nop			@ (mov r8, r8)
100413f8:	000007ff 	.word	0x000007ff
100413fc:	0000043e 	.word	0x0000043e
10041400:	0000041e 	.word	0x0000041e
10041404:	000003ff 	.word	0x000003ff
10041408:	fffffc02 	.word	0xfffffc02

1004140c <__aeabi_dmul>:
1004140c:	b5f0      	push	{r4, r5, r6, r7, lr}
1004140e:	4657      	mov	r7, sl
10041410:	46de      	mov	lr, fp
10041412:	464e      	mov	r6, r9
10041414:	4645      	mov	r5, r8
10041416:	b5e0      	push	{r5, r6, r7, lr}
10041418:	001f      	movs	r7, r3
1004141a:	030b      	lsls	r3, r1, #12
1004141c:	0b1b      	lsrs	r3, r3, #12
1004141e:	0016      	movs	r6, r2
10041420:	469a      	mov	sl, r3
10041422:	0fca      	lsrs	r2, r1, #31
10041424:	004b      	lsls	r3, r1, #1
10041426:	0004      	movs	r4, r0
10041428:	4693      	mov	fp, r2
1004142a:	b087      	sub	sp, #28
1004142c:	0d5b      	lsrs	r3, r3, #21
1004142e:	d100      	bne.n	10041432 <__aeabi_dmul+0x26>
10041430:	e0d5      	b.n	100415de <__aeabi_dmul+0x1d2>
10041432:	4abb      	ldr	r2, [pc, #748]	@ (10041720 <__aeabi_dmul+0x314>)
10041434:	4293      	cmp	r3, r2
10041436:	d100      	bne.n	1004143a <__aeabi_dmul+0x2e>
10041438:	e0f8      	b.n	1004162c <__aeabi_dmul+0x220>
1004143a:	4651      	mov	r1, sl
1004143c:	0f42      	lsrs	r2, r0, #29
1004143e:	00c9      	lsls	r1, r1, #3
10041440:	430a      	orrs	r2, r1
10041442:	2180      	movs	r1, #128	@ 0x80
10041444:	0409      	lsls	r1, r1, #16
10041446:	4311      	orrs	r1, r2
10041448:	00c2      	lsls	r2, r0, #3
1004144a:	4691      	mov	r9, r2
1004144c:	4ab5      	ldr	r2, [pc, #724]	@ (10041724 <__aeabi_dmul+0x318>)
1004144e:	468a      	mov	sl, r1
10041450:	189d      	adds	r5, r3, r2
10041452:	2300      	movs	r3, #0
10041454:	4698      	mov	r8, r3
10041456:	9302      	str	r3, [sp, #8]
10041458:	033c      	lsls	r4, r7, #12
1004145a:	007b      	lsls	r3, r7, #1
1004145c:	0ffa      	lsrs	r2, r7, #31
1004145e:	0030      	movs	r0, r6
10041460:	0b24      	lsrs	r4, r4, #12
10041462:	0d5b      	lsrs	r3, r3, #21
10041464:	9200      	str	r2, [sp, #0]
10041466:	d100      	bne.n	1004146a <__aeabi_dmul+0x5e>
10041468:	e096      	b.n	10041598 <__aeabi_dmul+0x18c>
1004146a:	4aad      	ldr	r2, [pc, #692]	@ (10041720 <__aeabi_dmul+0x314>)
1004146c:	4293      	cmp	r3, r2
1004146e:	d031      	beq.n	100414d4 <__aeabi_dmul+0xc8>
10041470:	0f72      	lsrs	r2, r6, #29
10041472:	00e4      	lsls	r4, r4, #3
10041474:	4322      	orrs	r2, r4
10041476:	2480      	movs	r4, #128	@ 0x80
10041478:	0424      	lsls	r4, r4, #16
1004147a:	4314      	orrs	r4, r2
1004147c:	4aa9      	ldr	r2, [pc, #676]	@ (10041724 <__aeabi_dmul+0x318>)
1004147e:	00f0      	lsls	r0, r6, #3
10041480:	4694      	mov	ip, r2
10041482:	4463      	add	r3, ip
10041484:	195b      	adds	r3, r3, r5
10041486:	1c5a      	adds	r2, r3, #1
10041488:	9201      	str	r2, [sp, #4]
1004148a:	4642      	mov	r2, r8
1004148c:	2600      	movs	r6, #0
1004148e:	2a0a      	cmp	r2, #10
10041490:	dc42      	bgt.n	10041518 <__aeabi_dmul+0x10c>
10041492:	465a      	mov	r2, fp
10041494:	9900      	ldr	r1, [sp, #0]
10041496:	404a      	eors	r2, r1
10041498:	4693      	mov	fp, r2
1004149a:	4642      	mov	r2, r8
1004149c:	2a02      	cmp	r2, #2
1004149e:	dc32      	bgt.n	10041506 <__aeabi_dmul+0xfa>
100414a0:	3a01      	subs	r2, #1
100414a2:	2a01      	cmp	r2, #1
100414a4:	d900      	bls.n	100414a8 <__aeabi_dmul+0x9c>
100414a6:	e149      	b.n	1004173c <__aeabi_dmul+0x330>
100414a8:	2e02      	cmp	r6, #2
100414aa:	d100      	bne.n	100414ae <__aeabi_dmul+0xa2>
100414ac:	e0ca      	b.n	10041644 <__aeabi_dmul+0x238>
100414ae:	2e01      	cmp	r6, #1
100414b0:	d13d      	bne.n	1004152e <__aeabi_dmul+0x122>
100414b2:	2300      	movs	r3, #0
100414b4:	2400      	movs	r4, #0
100414b6:	2200      	movs	r2, #0
100414b8:	0010      	movs	r0, r2
100414ba:	465a      	mov	r2, fp
100414bc:	051b      	lsls	r3, r3, #20
100414be:	4323      	orrs	r3, r4
100414c0:	07d2      	lsls	r2, r2, #31
100414c2:	4313      	orrs	r3, r2
100414c4:	0019      	movs	r1, r3
100414c6:	b007      	add	sp, #28
100414c8:	bcf0      	pop	{r4, r5, r6, r7}
100414ca:	46bb      	mov	fp, r7
100414cc:	46b2      	mov	sl, r6
100414ce:	46a9      	mov	r9, r5
100414d0:	46a0      	mov	r8, r4
100414d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
100414d4:	4b92      	ldr	r3, [pc, #584]	@ (10041720 <__aeabi_dmul+0x314>)
100414d6:	4326      	orrs	r6, r4
100414d8:	18eb      	adds	r3, r5, r3
100414da:	2e00      	cmp	r6, #0
100414dc:	d100      	bne.n	100414e0 <__aeabi_dmul+0xd4>
100414de:	e0bb      	b.n	10041658 <__aeabi_dmul+0x24c>
100414e0:	2203      	movs	r2, #3
100414e2:	4641      	mov	r1, r8
100414e4:	4311      	orrs	r1, r2
100414e6:	465a      	mov	r2, fp
100414e8:	4688      	mov	r8, r1
100414ea:	9900      	ldr	r1, [sp, #0]
100414ec:	404a      	eors	r2, r1
100414ee:	2180      	movs	r1, #128	@ 0x80
100414f0:	0109      	lsls	r1, r1, #4
100414f2:	468c      	mov	ip, r1
100414f4:	0029      	movs	r1, r5
100414f6:	4461      	add	r1, ip
100414f8:	9101      	str	r1, [sp, #4]
100414fa:	4641      	mov	r1, r8
100414fc:	290a      	cmp	r1, #10
100414fe:	dd00      	ble.n	10041502 <__aeabi_dmul+0xf6>
10041500:	e233      	b.n	1004196a <__aeabi_dmul+0x55e>
10041502:	4693      	mov	fp, r2
10041504:	2603      	movs	r6, #3
10041506:	4642      	mov	r2, r8
10041508:	2701      	movs	r7, #1
1004150a:	4097      	lsls	r7, r2
1004150c:	21a6      	movs	r1, #166	@ 0xa6
1004150e:	003a      	movs	r2, r7
10041510:	00c9      	lsls	r1, r1, #3
10041512:	400a      	ands	r2, r1
10041514:	420f      	tst	r7, r1
10041516:	d031      	beq.n	1004157c <__aeabi_dmul+0x170>
10041518:	9e02      	ldr	r6, [sp, #8]
1004151a:	2e02      	cmp	r6, #2
1004151c:	d100      	bne.n	10041520 <__aeabi_dmul+0x114>
1004151e:	e235      	b.n	1004198c <__aeabi_dmul+0x580>
10041520:	2e03      	cmp	r6, #3
10041522:	d100      	bne.n	10041526 <__aeabi_dmul+0x11a>
10041524:	e1d2      	b.n	100418cc <__aeabi_dmul+0x4c0>
10041526:	4654      	mov	r4, sl
10041528:	4648      	mov	r0, r9
1004152a:	2e01      	cmp	r6, #1
1004152c:	d0c1      	beq.n	100414b2 <__aeabi_dmul+0xa6>
1004152e:	9a01      	ldr	r2, [sp, #4]
10041530:	4b7d      	ldr	r3, [pc, #500]	@ (10041728 <__aeabi_dmul+0x31c>)
10041532:	4694      	mov	ip, r2
10041534:	4463      	add	r3, ip
10041536:	2b00      	cmp	r3, #0
10041538:	dc00      	bgt.n	1004153c <__aeabi_dmul+0x130>
1004153a:	e0c0      	b.n	100416be <__aeabi_dmul+0x2b2>
1004153c:	0742      	lsls	r2, r0, #29
1004153e:	d009      	beq.n	10041554 <__aeabi_dmul+0x148>
10041540:	220f      	movs	r2, #15
10041542:	4002      	ands	r2, r0
10041544:	2a04      	cmp	r2, #4
10041546:	d005      	beq.n	10041554 <__aeabi_dmul+0x148>
10041548:	1d02      	adds	r2, r0, #4
1004154a:	4282      	cmp	r2, r0
1004154c:	4180      	sbcs	r0, r0
1004154e:	4240      	negs	r0, r0
10041550:	1824      	adds	r4, r4, r0
10041552:	0010      	movs	r0, r2
10041554:	01e2      	lsls	r2, r4, #7
10041556:	d506      	bpl.n	10041566 <__aeabi_dmul+0x15a>
10041558:	4b74      	ldr	r3, [pc, #464]	@ (1004172c <__aeabi_dmul+0x320>)
1004155a:	9a01      	ldr	r2, [sp, #4]
1004155c:	401c      	ands	r4, r3
1004155e:	2380      	movs	r3, #128	@ 0x80
10041560:	4694      	mov	ip, r2
10041562:	00db      	lsls	r3, r3, #3
10041564:	4463      	add	r3, ip
10041566:	4a72      	ldr	r2, [pc, #456]	@ (10041730 <__aeabi_dmul+0x324>)
10041568:	4293      	cmp	r3, r2
1004156a:	dc6b      	bgt.n	10041644 <__aeabi_dmul+0x238>
1004156c:	0762      	lsls	r2, r4, #29
1004156e:	08c0      	lsrs	r0, r0, #3
10041570:	0264      	lsls	r4, r4, #9
10041572:	055b      	lsls	r3, r3, #21
10041574:	4302      	orrs	r2, r0
10041576:	0b24      	lsrs	r4, r4, #12
10041578:	0d5b      	lsrs	r3, r3, #21
1004157a:	e79d      	b.n	100414b8 <__aeabi_dmul+0xac>
1004157c:	2190      	movs	r1, #144	@ 0x90
1004157e:	0089      	lsls	r1, r1, #2
10041580:	420f      	tst	r7, r1
10041582:	d163      	bne.n	1004164c <__aeabi_dmul+0x240>
10041584:	2288      	movs	r2, #136	@ 0x88
10041586:	423a      	tst	r2, r7
10041588:	d100      	bne.n	1004158c <__aeabi_dmul+0x180>
1004158a:	e0d7      	b.n	1004173c <__aeabi_dmul+0x330>
1004158c:	9b00      	ldr	r3, [sp, #0]
1004158e:	46a2      	mov	sl, r4
10041590:	469b      	mov	fp, r3
10041592:	4681      	mov	r9, r0
10041594:	9602      	str	r6, [sp, #8]
10041596:	e7bf      	b.n	10041518 <__aeabi_dmul+0x10c>
10041598:	0023      	movs	r3, r4
1004159a:	4333      	orrs	r3, r6
1004159c:	d100      	bne.n	100415a0 <__aeabi_dmul+0x194>
1004159e:	e07f      	b.n	100416a0 <__aeabi_dmul+0x294>
100415a0:	2c00      	cmp	r4, #0
100415a2:	d100      	bne.n	100415a6 <__aeabi_dmul+0x19a>
100415a4:	e1ad      	b.n	10041902 <__aeabi_dmul+0x4f6>
100415a6:	0020      	movs	r0, r4
100415a8:	f000 fe60 	bl	1004226c <__clzsi2>
100415ac:	0002      	movs	r2, r0
100415ae:	0003      	movs	r3, r0
100415b0:	3a0b      	subs	r2, #11
100415b2:	201d      	movs	r0, #29
100415b4:	0019      	movs	r1, r3
100415b6:	1a82      	subs	r2, r0, r2
100415b8:	0030      	movs	r0, r6
100415ba:	3908      	subs	r1, #8
100415bc:	40d0      	lsrs	r0, r2
100415be:	408c      	lsls	r4, r1
100415c0:	4304      	orrs	r4, r0
100415c2:	0030      	movs	r0, r6
100415c4:	4088      	lsls	r0, r1
100415c6:	4a5b      	ldr	r2, [pc, #364]	@ (10041734 <__aeabi_dmul+0x328>)
100415c8:	1aeb      	subs	r3, r5, r3
100415ca:	4694      	mov	ip, r2
100415cc:	4463      	add	r3, ip
100415ce:	1c5a      	adds	r2, r3, #1
100415d0:	9201      	str	r2, [sp, #4]
100415d2:	4642      	mov	r2, r8
100415d4:	2600      	movs	r6, #0
100415d6:	2a0a      	cmp	r2, #10
100415d8:	dc00      	bgt.n	100415dc <__aeabi_dmul+0x1d0>
100415da:	e75a      	b.n	10041492 <__aeabi_dmul+0x86>
100415dc:	e79c      	b.n	10041518 <__aeabi_dmul+0x10c>
100415de:	4653      	mov	r3, sl
100415e0:	4303      	orrs	r3, r0
100415e2:	4699      	mov	r9, r3
100415e4:	d054      	beq.n	10041690 <__aeabi_dmul+0x284>
100415e6:	4653      	mov	r3, sl
100415e8:	2b00      	cmp	r3, #0
100415ea:	d100      	bne.n	100415ee <__aeabi_dmul+0x1e2>
100415ec:	e177      	b.n	100418de <__aeabi_dmul+0x4d2>
100415ee:	4650      	mov	r0, sl
100415f0:	f000 fe3c 	bl	1004226c <__clzsi2>
100415f4:	230b      	movs	r3, #11
100415f6:	425b      	negs	r3, r3
100415f8:	469c      	mov	ip, r3
100415fa:	0002      	movs	r2, r0
100415fc:	4484      	add	ip, r0
100415fe:	0011      	movs	r1, r2
10041600:	4650      	mov	r0, sl
10041602:	3908      	subs	r1, #8
10041604:	4088      	lsls	r0, r1
10041606:	231d      	movs	r3, #29
10041608:	4680      	mov	r8, r0
1004160a:	4660      	mov	r0, ip
1004160c:	1a1b      	subs	r3, r3, r0
1004160e:	0020      	movs	r0, r4
10041610:	40d8      	lsrs	r0, r3
10041612:	0003      	movs	r3, r0
10041614:	4640      	mov	r0, r8
10041616:	4303      	orrs	r3, r0
10041618:	469a      	mov	sl, r3
1004161a:	0023      	movs	r3, r4
1004161c:	408b      	lsls	r3, r1
1004161e:	4699      	mov	r9, r3
10041620:	2300      	movs	r3, #0
10041622:	4d44      	ldr	r5, [pc, #272]	@ (10041734 <__aeabi_dmul+0x328>)
10041624:	4698      	mov	r8, r3
10041626:	1aad      	subs	r5, r5, r2
10041628:	9302      	str	r3, [sp, #8]
1004162a:	e715      	b.n	10041458 <__aeabi_dmul+0x4c>
1004162c:	4652      	mov	r2, sl
1004162e:	4302      	orrs	r2, r0
10041630:	4691      	mov	r9, r2
10041632:	d126      	bne.n	10041682 <__aeabi_dmul+0x276>
10041634:	2200      	movs	r2, #0
10041636:	001d      	movs	r5, r3
10041638:	2302      	movs	r3, #2
1004163a:	4692      	mov	sl, r2
1004163c:	3208      	adds	r2, #8
1004163e:	4690      	mov	r8, r2
10041640:	9302      	str	r3, [sp, #8]
10041642:	e709      	b.n	10041458 <__aeabi_dmul+0x4c>
10041644:	2400      	movs	r4, #0
10041646:	2200      	movs	r2, #0
10041648:	4b35      	ldr	r3, [pc, #212]	@ (10041720 <__aeabi_dmul+0x314>)
1004164a:	e735      	b.n	100414b8 <__aeabi_dmul+0xac>
1004164c:	2300      	movs	r3, #0
1004164e:	2480      	movs	r4, #128	@ 0x80
10041650:	469b      	mov	fp, r3
10041652:	0324      	lsls	r4, r4, #12
10041654:	4b32      	ldr	r3, [pc, #200]	@ (10041720 <__aeabi_dmul+0x314>)
10041656:	e72f      	b.n	100414b8 <__aeabi_dmul+0xac>
10041658:	2202      	movs	r2, #2
1004165a:	4641      	mov	r1, r8
1004165c:	4311      	orrs	r1, r2
1004165e:	2280      	movs	r2, #128	@ 0x80
10041660:	0112      	lsls	r2, r2, #4
10041662:	4694      	mov	ip, r2
10041664:	002a      	movs	r2, r5
10041666:	4462      	add	r2, ip
10041668:	4688      	mov	r8, r1
1004166a:	9201      	str	r2, [sp, #4]
1004166c:	290a      	cmp	r1, #10
1004166e:	dd00      	ble.n	10041672 <__aeabi_dmul+0x266>
10041670:	e752      	b.n	10041518 <__aeabi_dmul+0x10c>
10041672:	465a      	mov	r2, fp
10041674:	2000      	movs	r0, #0
10041676:	9900      	ldr	r1, [sp, #0]
10041678:	0004      	movs	r4, r0
1004167a:	404a      	eors	r2, r1
1004167c:	4693      	mov	fp, r2
1004167e:	2602      	movs	r6, #2
10041680:	e70b      	b.n	1004149a <__aeabi_dmul+0x8e>
10041682:	220c      	movs	r2, #12
10041684:	001d      	movs	r5, r3
10041686:	2303      	movs	r3, #3
10041688:	4681      	mov	r9, r0
1004168a:	4690      	mov	r8, r2
1004168c:	9302      	str	r3, [sp, #8]
1004168e:	e6e3      	b.n	10041458 <__aeabi_dmul+0x4c>
10041690:	2300      	movs	r3, #0
10041692:	469a      	mov	sl, r3
10041694:	3304      	adds	r3, #4
10041696:	4698      	mov	r8, r3
10041698:	3b03      	subs	r3, #3
1004169a:	2500      	movs	r5, #0
1004169c:	9302      	str	r3, [sp, #8]
1004169e:	e6db      	b.n	10041458 <__aeabi_dmul+0x4c>
100416a0:	4642      	mov	r2, r8
100416a2:	3301      	adds	r3, #1
100416a4:	431a      	orrs	r2, r3
100416a6:	002b      	movs	r3, r5
100416a8:	4690      	mov	r8, r2
100416aa:	1c5a      	adds	r2, r3, #1
100416ac:	9201      	str	r2, [sp, #4]
100416ae:	4642      	mov	r2, r8
100416b0:	2400      	movs	r4, #0
100416b2:	2000      	movs	r0, #0
100416b4:	2601      	movs	r6, #1
100416b6:	2a0a      	cmp	r2, #10
100416b8:	dc00      	bgt.n	100416bc <__aeabi_dmul+0x2b0>
100416ba:	e6ea      	b.n	10041492 <__aeabi_dmul+0x86>
100416bc:	e72c      	b.n	10041518 <__aeabi_dmul+0x10c>
100416be:	2201      	movs	r2, #1
100416c0:	1ad2      	subs	r2, r2, r3
100416c2:	2a38      	cmp	r2, #56	@ 0x38
100416c4:	dd00      	ble.n	100416c8 <__aeabi_dmul+0x2bc>
100416c6:	e6f4      	b.n	100414b2 <__aeabi_dmul+0xa6>
100416c8:	2a1f      	cmp	r2, #31
100416ca:	dc00      	bgt.n	100416ce <__aeabi_dmul+0x2c2>
100416cc:	e12a      	b.n	10041924 <__aeabi_dmul+0x518>
100416ce:	211f      	movs	r1, #31
100416d0:	4249      	negs	r1, r1
100416d2:	1acb      	subs	r3, r1, r3
100416d4:	0021      	movs	r1, r4
100416d6:	40d9      	lsrs	r1, r3
100416d8:	000b      	movs	r3, r1
100416da:	2a20      	cmp	r2, #32
100416dc:	d005      	beq.n	100416ea <__aeabi_dmul+0x2de>
100416de:	4a16      	ldr	r2, [pc, #88]	@ (10041738 <__aeabi_dmul+0x32c>)
100416e0:	9d01      	ldr	r5, [sp, #4]
100416e2:	4694      	mov	ip, r2
100416e4:	4465      	add	r5, ip
100416e6:	40ac      	lsls	r4, r5
100416e8:	4320      	orrs	r0, r4
100416ea:	1e42      	subs	r2, r0, #1
100416ec:	4190      	sbcs	r0, r2
100416ee:	4318      	orrs	r0, r3
100416f0:	2307      	movs	r3, #7
100416f2:	0019      	movs	r1, r3
100416f4:	2400      	movs	r4, #0
100416f6:	4001      	ands	r1, r0
100416f8:	4203      	tst	r3, r0
100416fa:	d00c      	beq.n	10041716 <__aeabi_dmul+0x30a>
100416fc:	230f      	movs	r3, #15
100416fe:	4003      	ands	r3, r0
10041700:	2b04      	cmp	r3, #4
10041702:	d100      	bne.n	10041706 <__aeabi_dmul+0x2fa>
10041704:	e140      	b.n	10041988 <__aeabi_dmul+0x57c>
10041706:	1d03      	adds	r3, r0, #4
10041708:	4283      	cmp	r3, r0
1004170a:	41a4      	sbcs	r4, r4
1004170c:	0018      	movs	r0, r3
1004170e:	4264      	negs	r4, r4
10041710:	0761      	lsls	r1, r4, #29
10041712:	0264      	lsls	r4, r4, #9
10041714:	0b24      	lsrs	r4, r4, #12
10041716:	08c2      	lsrs	r2, r0, #3
10041718:	2300      	movs	r3, #0
1004171a:	430a      	orrs	r2, r1
1004171c:	e6cc      	b.n	100414b8 <__aeabi_dmul+0xac>
1004171e:	46c0      	nop			@ (mov r8, r8)
10041720:	000007ff 	.word	0x000007ff
10041724:	fffffc01 	.word	0xfffffc01
10041728:	000003ff 	.word	0x000003ff
1004172c:	feffffff 	.word	0xfeffffff
10041730:	000007fe 	.word	0x000007fe
10041734:	fffffc0d 	.word	0xfffffc0d
10041738:	0000043e 	.word	0x0000043e
1004173c:	4649      	mov	r1, r9
1004173e:	464a      	mov	r2, r9
10041740:	0409      	lsls	r1, r1, #16
10041742:	0c09      	lsrs	r1, r1, #16
10041744:	000d      	movs	r5, r1
10041746:	0c16      	lsrs	r6, r2, #16
10041748:	0c02      	lsrs	r2, r0, #16
1004174a:	0400      	lsls	r0, r0, #16
1004174c:	0c00      	lsrs	r0, r0, #16
1004174e:	4345      	muls	r5, r0
10041750:	46ac      	mov	ip, r5
10041752:	0005      	movs	r5, r0
10041754:	4375      	muls	r5, r6
10041756:	46a8      	mov	r8, r5
10041758:	0015      	movs	r5, r2
1004175a:	000f      	movs	r7, r1
1004175c:	4375      	muls	r5, r6
1004175e:	9200      	str	r2, [sp, #0]
10041760:	9502      	str	r5, [sp, #8]
10041762:	002a      	movs	r2, r5
10041764:	9d00      	ldr	r5, [sp, #0]
10041766:	436f      	muls	r7, r5
10041768:	4665      	mov	r5, ip
1004176a:	0c2d      	lsrs	r5, r5, #16
1004176c:	46a9      	mov	r9, r5
1004176e:	4447      	add	r7, r8
10041770:	444f      	add	r7, r9
10041772:	45b8      	cmp	r8, r7
10041774:	d905      	bls.n	10041782 <__aeabi_dmul+0x376>
10041776:	0015      	movs	r5, r2
10041778:	2280      	movs	r2, #128	@ 0x80
1004177a:	0252      	lsls	r2, r2, #9
1004177c:	4690      	mov	r8, r2
1004177e:	4445      	add	r5, r8
10041780:	9502      	str	r5, [sp, #8]
10041782:	0c3d      	lsrs	r5, r7, #16
10041784:	9503      	str	r5, [sp, #12]
10041786:	4665      	mov	r5, ip
10041788:	042d      	lsls	r5, r5, #16
1004178a:	043f      	lsls	r7, r7, #16
1004178c:	0c2d      	lsrs	r5, r5, #16
1004178e:	46ac      	mov	ip, r5
10041790:	003d      	movs	r5, r7
10041792:	4465      	add	r5, ip
10041794:	9504      	str	r5, [sp, #16]
10041796:	0c25      	lsrs	r5, r4, #16
10041798:	0424      	lsls	r4, r4, #16
1004179a:	0c24      	lsrs	r4, r4, #16
1004179c:	46ac      	mov	ip, r5
1004179e:	0025      	movs	r5, r4
100417a0:	4375      	muls	r5, r6
100417a2:	46a8      	mov	r8, r5
100417a4:	4665      	mov	r5, ip
100417a6:	000f      	movs	r7, r1
100417a8:	4369      	muls	r1, r5
100417aa:	4441      	add	r1, r8
100417ac:	4689      	mov	r9, r1
100417ae:	4367      	muls	r7, r4
100417b0:	0c39      	lsrs	r1, r7, #16
100417b2:	4449      	add	r1, r9
100417b4:	436e      	muls	r6, r5
100417b6:	4588      	cmp	r8, r1
100417b8:	d903      	bls.n	100417c2 <__aeabi_dmul+0x3b6>
100417ba:	2280      	movs	r2, #128	@ 0x80
100417bc:	0252      	lsls	r2, r2, #9
100417be:	4690      	mov	r8, r2
100417c0:	4446      	add	r6, r8
100417c2:	0c0d      	lsrs	r5, r1, #16
100417c4:	46a8      	mov	r8, r5
100417c6:	0035      	movs	r5, r6
100417c8:	4445      	add	r5, r8
100417ca:	9505      	str	r5, [sp, #20]
100417cc:	9d03      	ldr	r5, [sp, #12]
100417ce:	043f      	lsls	r7, r7, #16
100417d0:	46a8      	mov	r8, r5
100417d2:	0c3f      	lsrs	r7, r7, #16
100417d4:	0409      	lsls	r1, r1, #16
100417d6:	19c9      	adds	r1, r1, r7
100417d8:	4488      	add	r8, r1
100417da:	4645      	mov	r5, r8
100417dc:	9503      	str	r5, [sp, #12]
100417de:	4655      	mov	r5, sl
100417e0:	042e      	lsls	r6, r5, #16
100417e2:	0c36      	lsrs	r6, r6, #16
100417e4:	0c2f      	lsrs	r7, r5, #16
100417e6:	0035      	movs	r5, r6
100417e8:	4345      	muls	r5, r0
100417ea:	4378      	muls	r0, r7
100417ec:	4681      	mov	r9, r0
100417ee:	0038      	movs	r0, r7
100417f0:	46a8      	mov	r8, r5
100417f2:	0c2d      	lsrs	r5, r5, #16
100417f4:	46aa      	mov	sl, r5
100417f6:	9a00      	ldr	r2, [sp, #0]
100417f8:	4350      	muls	r0, r2
100417fa:	4372      	muls	r2, r6
100417fc:	444a      	add	r2, r9
100417fe:	4452      	add	r2, sl
10041800:	4591      	cmp	r9, r2
10041802:	d903      	bls.n	1004180c <__aeabi_dmul+0x400>
10041804:	2580      	movs	r5, #128	@ 0x80
10041806:	026d      	lsls	r5, r5, #9
10041808:	46a9      	mov	r9, r5
1004180a:	4448      	add	r0, r9
1004180c:	0c15      	lsrs	r5, r2, #16
1004180e:	46a9      	mov	r9, r5
10041810:	4645      	mov	r5, r8
10041812:	042d      	lsls	r5, r5, #16
10041814:	0c2d      	lsrs	r5, r5, #16
10041816:	46a8      	mov	r8, r5
10041818:	4665      	mov	r5, ip
1004181a:	437d      	muls	r5, r7
1004181c:	0412      	lsls	r2, r2, #16
1004181e:	4448      	add	r0, r9
10041820:	4490      	add	r8, r2
10041822:	46a9      	mov	r9, r5
10041824:	0032      	movs	r2, r6
10041826:	4665      	mov	r5, ip
10041828:	4362      	muls	r2, r4
1004182a:	436e      	muls	r6, r5
1004182c:	437c      	muls	r4, r7
1004182e:	0c17      	lsrs	r7, r2, #16
10041830:	1936      	adds	r6, r6, r4
10041832:	19bf      	adds	r7, r7, r6
10041834:	42bc      	cmp	r4, r7
10041836:	d903      	bls.n	10041840 <__aeabi_dmul+0x434>
10041838:	2480      	movs	r4, #128	@ 0x80
1004183a:	0264      	lsls	r4, r4, #9
1004183c:	46a4      	mov	ip, r4
1004183e:	44e1      	add	r9, ip
10041840:	9c02      	ldr	r4, [sp, #8]
10041842:	9e03      	ldr	r6, [sp, #12]
10041844:	46a4      	mov	ip, r4
10041846:	9d05      	ldr	r5, [sp, #20]
10041848:	4466      	add	r6, ip
1004184a:	428e      	cmp	r6, r1
1004184c:	4189      	sbcs	r1, r1
1004184e:	46ac      	mov	ip, r5
10041850:	0412      	lsls	r2, r2, #16
10041852:	043c      	lsls	r4, r7, #16
10041854:	0c12      	lsrs	r2, r2, #16
10041856:	18a2      	adds	r2, r4, r2
10041858:	4462      	add	r2, ip
1004185a:	4249      	negs	r1, r1
1004185c:	1854      	adds	r4, r2, r1
1004185e:	4446      	add	r6, r8
10041860:	46a4      	mov	ip, r4
10041862:	4546      	cmp	r6, r8
10041864:	41a4      	sbcs	r4, r4
10041866:	4682      	mov	sl, r0
10041868:	4264      	negs	r4, r4
1004186a:	46a0      	mov	r8, r4
1004186c:	42aa      	cmp	r2, r5
1004186e:	4192      	sbcs	r2, r2
10041870:	458c      	cmp	ip, r1
10041872:	4189      	sbcs	r1, r1
10041874:	44e2      	add	sl, ip
10041876:	44d0      	add	r8, sl
10041878:	4249      	negs	r1, r1
1004187a:	4252      	negs	r2, r2
1004187c:	430a      	orrs	r2, r1
1004187e:	45a0      	cmp	r8, r4
10041880:	41a4      	sbcs	r4, r4
10041882:	4582      	cmp	sl, r0
10041884:	4189      	sbcs	r1, r1
10041886:	4264      	negs	r4, r4
10041888:	4249      	negs	r1, r1
1004188a:	430c      	orrs	r4, r1
1004188c:	4641      	mov	r1, r8
1004188e:	0c3f      	lsrs	r7, r7, #16
10041890:	19d2      	adds	r2, r2, r7
10041892:	1912      	adds	r2, r2, r4
10041894:	0dcc      	lsrs	r4, r1, #23
10041896:	9904      	ldr	r1, [sp, #16]
10041898:	0270      	lsls	r0, r6, #9
1004189a:	4308      	orrs	r0, r1
1004189c:	1e41      	subs	r1, r0, #1
1004189e:	4188      	sbcs	r0, r1
100418a0:	4641      	mov	r1, r8
100418a2:	444a      	add	r2, r9
100418a4:	0df6      	lsrs	r6, r6, #23
100418a6:	0252      	lsls	r2, r2, #9
100418a8:	4330      	orrs	r0, r6
100418aa:	0249      	lsls	r1, r1, #9
100418ac:	4314      	orrs	r4, r2
100418ae:	4308      	orrs	r0, r1
100418b0:	01d2      	lsls	r2, r2, #7
100418b2:	d535      	bpl.n	10041920 <__aeabi_dmul+0x514>
100418b4:	2201      	movs	r2, #1
100418b6:	0843      	lsrs	r3, r0, #1
100418b8:	4002      	ands	r2, r0
100418ba:	4313      	orrs	r3, r2
100418bc:	07e0      	lsls	r0, r4, #31
100418be:	4318      	orrs	r0, r3
100418c0:	0864      	lsrs	r4, r4, #1
100418c2:	e634      	b.n	1004152e <__aeabi_dmul+0x122>
100418c4:	9b00      	ldr	r3, [sp, #0]
100418c6:	46a2      	mov	sl, r4
100418c8:	469b      	mov	fp, r3
100418ca:	4681      	mov	r9, r0
100418cc:	2480      	movs	r4, #128	@ 0x80
100418ce:	4653      	mov	r3, sl
100418d0:	0324      	lsls	r4, r4, #12
100418d2:	431c      	orrs	r4, r3
100418d4:	0324      	lsls	r4, r4, #12
100418d6:	464a      	mov	r2, r9
100418d8:	4b2e      	ldr	r3, [pc, #184]	@ (10041994 <__aeabi_dmul+0x588>)
100418da:	0b24      	lsrs	r4, r4, #12
100418dc:	e5ec      	b.n	100414b8 <__aeabi_dmul+0xac>
100418de:	f000 fcc5 	bl	1004226c <__clzsi2>
100418e2:	2315      	movs	r3, #21
100418e4:	469c      	mov	ip, r3
100418e6:	4484      	add	ip, r0
100418e8:	0002      	movs	r2, r0
100418ea:	4663      	mov	r3, ip
100418ec:	3220      	adds	r2, #32
100418ee:	2b1c      	cmp	r3, #28
100418f0:	dc00      	bgt.n	100418f4 <__aeabi_dmul+0x4e8>
100418f2:	e684      	b.n	100415fe <__aeabi_dmul+0x1f2>
100418f4:	2300      	movs	r3, #0
100418f6:	4699      	mov	r9, r3
100418f8:	0023      	movs	r3, r4
100418fa:	3808      	subs	r0, #8
100418fc:	4083      	lsls	r3, r0
100418fe:	469a      	mov	sl, r3
10041900:	e68e      	b.n	10041620 <__aeabi_dmul+0x214>
10041902:	f000 fcb3 	bl	1004226c <__clzsi2>
10041906:	0002      	movs	r2, r0
10041908:	0003      	movs	r3, r0
1004190a:	3215      	adds	r2, #21
1004190c:	3320      	adds	r3, #32
1004190e:	2a1c      	cmp	r2, #28
10041910:	dc00      	bgt.n	10041914 <__aeabi_dmul+0x508>
10041912:	e64e      	b.n	100415b2 <__aeabi_dmul+0x1a6>
10041914:	0002      	movs	r2, r0
10041916:	0034      	movs	r4, r6
10041918:	3a08      	subs	r2, #8
1004191a:	2000      	movs	r0, #0
1004191c:	4094      	lsls	r4, r2
1004191e:	e652      	b.n	100415c6 <__aeabi_dmul+0x1ba>
10041920:	9301      	str	r3, [sp, #4]
10041922:	e604      	b.n	1004152e <__aeabi_dmul+0x122>
10041924:	4b1c      	ldr	r3, [pc, #112]	@ (10041998 <__aeabi_dmul+0x58c>)
10041926:	0021      	movs	r1, r4
10041928:	469c      	mov	ip, r3
1004192a:	0003      	movs	r3, r0
1004192c:	9d01      	ldr	r5, [sp, #4]
1004192e:	40d3      	lsrs	r3, r2
10041930:	4465      	add	r5, ip
10041932:	40a9      	lsls	r1, r5
10041934:	4319      	orrs	r1, r3
10041936:	0003      	movs	r3, r0
10041938:	40ab      	lsls	r3, r5
1004193a:	1e58      	subs	r0, r3, #1
1004193c:	4183      	sbcs	r3, r0
1004193e:	4319      	orrs	r1, r3
10041940:	0008      	movs	r0, r1
10041942:	40d4      	lsrs	r4, r2
10041944:	074b      	lsls	r3, r1, #29
10041946:	d009      	beq.n	1004195c <__aeabi_dmul+0x550>
10041948:	230f      	movs	r3, #15
1004194a:	400b      	ands	r3, r1
1004194c:	2b04      	cmp	r3, #4
1004194e:	d005      	beq.n	1004195c <__aeabi_dmul+0x550>
10041950:	1d0b      	adds	r3, r1, #4
10041952:	428b      	cmp	r3, r1
10041954:	4180      	sbcs	r0, r0
10041956:	4240      	negs	r0, r0
10041958:	1824      	adds	r4, r4, r0
1004195a:	0018      	movs	r0, r3
1004195c:	0223      	lsls	r3, r4, #8
1004195e:	d400      	bmi.n	10041962 <__aeabi_dmul+0x556>
10041960:	e6d6      	b.n	10041710 <__aeabi_dmul+0x304>
10041962:	2301      	movs	r3, #1
10041964:	2400      	movs	r4, #0
10041966:	2200      	movs	r2, #0
10041968:	e5a6      	b.n	100414b8 <__aeabi_dmul+0xac>
1004196a:	290f      	cmp	r1, #15
1004196c:	d1aa      	bne.n	100418c4 <__aeabi_dmul+0x4b8>
1004196e:	2380      	movs	r3, #128	@ 0x80
10041970:	4652      	mov	r2, sl
10041972:	031b      	lsls	r3, r3, #12
10041974:	421a      	tst	r2, r3
10041976:	d0a9      	beq.n	100418cc <__aeabi_dmul+0x4c0>
10041978:	421c      	tst	r4, r3
1004197a:	d1a7      	bne.n	100418cc <__aeabi_dmul+0x4c0>
1004197c:	431c      	orrs	r4, r3
1004197e:	9b00      	ldr	r3, [sp, #0]
10041980:	0002      	movs	r2, r0
10041982:	469b      	mov	fp, r3
10041984:	4b03      	ldr	r3, [pc, #12]	@ (10041994 <__aeabi_dmul+0x588>)
10041986:	e597      	b.n	100414b8 <__aeabi_dmul+0xac>
10041988:	2400      	movs	r4, #0
1004198a:	e6c1      	b.n	10041710 <__aeabi_dmul+0x304>
1004198c:	2400      	movs	r4, #0
1004198e:	4b01      	ldr	r3, [pc, #4]	@ (10041994 <__aeabi_dmul+0x588>)
10041990:	0022      	movs	r2, r4
10041992:	e591      	b.n	100414b8 <__aeabi_dmul+0xac>
10041994:	000007ff 	.word	0x000007ff
10041998:	0000041e 	.word	0x0000041e

1004199c <__aeabi_dsub>:
1004199c:	b5f0      	push	{r4, r5, r6, r7, lr}
1004199e:	464e      	mov	r6, r9
100419a0:	4645      	mov	r5, r8
100419a2:	46de      	mov	lr, fp
100419a4:	4657      	mov	r7, sl
100419a6:	b5e0      	push	{r5, r6, r7, lr}
100419a8:	b085      	sub	sp, #20
100419aa:	9000      	str	r0, [sp, #0]
100419ac:	9101      	str	r1, [sp, #4]
100419ae:	030c      	lsls	r4, r1, #12
100419b0:	004f      	lsls	r7, r1, #1
100419b2:	0fce      	lsrs	r6, r1, #31
100419b4:	0a61      	lsrs	r1, r4, #9
100419b6:	9c00      	ldr	r4, [sp, #0]
100419b8:	46b0      	mov	r8, r6
100419ba:	0f64      	lsrs	r4, r4, #29
100419bc:	430c      	orrs	r4, r1
100419be:	9900      	ldr	r1, [sp, #0]
100419c0:	0d7f      	lsrs	r7, r7, #21
100419c2:	00c8      	lsls	r0, r1, #3
100419c4:	0011      	movs	r1, r2
100419c6:	001a      	movs	r2, r3
100419c8:	031b      	lsls	r3, r3, #12
100419ca:	469c      	mov	ip, r3
100419cc:	9100      	str	r1, [sp, #0]
100419ce:	9201      	str	r2, [sp, #4]
100419d0:	0051      	lsls	r1, r2, #1
100419d2:	0d4b      	lsrs	r3, r1, #21
100419d4:	4699      	mov	r9, r3
100419d6:	9b01      	ldr	r3, [sp, #4]
100419d8:	9d00      	ldr	r5, [sp, #0]
100419da:	0fd9      	lsrs	r1, r3, #31
100419dc:	4663      	mov	r3, ip
100419de:	0f6a      	lsrs	r2, r5, #29
100419e0:	0a5b      	lsrs	r3, r3, #9
100419e2:	4313      	orrs	r3, r2
100419e4:	00ea      	lsls	r2, r5, #3
100419e6:	4694      	mov	ip, r2
100419e8:	4693      	mov	fp, r2
100419ea:	4ac1      	ldr	r2, [pc, #772]	@ (10041cf0 <__aeabi_dsub+0x354>)
100419ec:	9003      	str	r0, [sp, #12]
100419ee:	9302      	str	r3, [sp, #8]
100419f0:	4591      	cmp	r9, r2
100419f2:	d100      	bne.n	100419f6 <__aeabi_dsub+0x5a>
100419f4:	e0cd      	b.n	10041b92 <__aeabi_dsub+0x1f6>
100419f6:	2501      	movs	r5, #1
100419f8:	4069      	eors	r1, r5
100419fa:	464d      	mov	r5, r9
100419fc:	1b7d      	subs	r5, r7, r5
100419fe:	46aa      	mov	sl, r5
10041a00:	428e      	cmp	r6, r1
10041a02:	d100      	bne.n	10041a06 <__aeabi_dsub+0x6a>
10041a04:	e080      	b.n	10041b08 <__aeabi_dsub+0x16c>
10041a06:	2d00      	cmp	r5, #0
10041a08:	dc00      	bgt.n	10041a0c <__aeabi_dsub+0x70>
10041a0a:	e335      	b.n	10042078 <__aeabi_dsub+0x6dc>
10041a0c:	4649      	mov	r1, r9
10041a0e:	2900      	cmp	r1, #0
10041a10:	d100      	bne.n	10041a14 <__aeabi_dsub+0x78>
10041a12:	e0df      	b.n	10041bd4 <__aeabi_dsub+0x238>
10041a14:	4297      	cmp	r7, r2
10041a16:	d100      	bne.n	10041a1a <__aeabi_dsub+0x7e>
10041a18:	e194      	b.n	10041d44 <__aeabi_dsub+0x3a8>
10041a1a:	4652      	mov	r2, sl
10041a1c:	2501      	movs	r5, #1
10041a1e:	2a38      	cmp	r2, #56	@ 0x38
10041a20:	dc19      	bgt.n	10041a56 <__aeabi_dsub+0xba>
10041a22:	2280      	movs	r2, #128	@ 0x80
10041a24:	9b02      	ldr	r3, [sp, #8]
10041a26:	0412      	lsls	r2, r2, #16
10041a28:	4313      	orrs	r3, r2
10041a2a:	9302      	str	r3, [sp, #8]
10041a2c:	4652      	mov	r2, sl
10041a2e:	2a1f      	cmp	r2, #31
10041a30:	dd00      	ble.n	10041a34 <__aeabi_dsub+0x98>
10041a32:	e1e3      	b.n	10041dfc <__aeabi_dsub+0x460>
10041a34:	4653      	mov	r3, sl
10041a36:	2220      	movs	r2, #32
10041a38:	4661      	mov	r1, ip
10041a3a:	9d02      	ldr	r5, [sp, #8]
10041a3c:	1ad2      	subs	r2, r2, r3
10041a3e:	4095      	lsls	r5, r2
10041a40:	40d9      	lsrs	r1, r3
10041a42:	430d      	orrs	r5, r1
10041a44:	4661      	mov	r1, ip
10041a46:	4091      	lsls	r1, r2
10041a48:	000a      	movs	r2, r1
10041a4a:	1e51      	subs	r1, r2, #1
10041a4c:	418a      	sbcs	r2, r1
10041a4e:	4315      	orrs	r5, r2
10041a50:	9a02      	ldr	r2, [sp, #8]
10041a52:	40da      	lsrs	r2, r3
10041a54:	1aa4      	subs	r4, r4, r2
10041a56:	1b45      	subs	r5, r0, r5
10041a58:	42a8      	cmp	r0, r5
10041a5a:	4180      	sbcs	r0, r0
10041a5c:	4240      	negs	r0, r0
10041a5e:	1a24      	subs	r4, r4, r0
10041a60:	0223      	lsls	r3, r4, #8
10041a62:	d400      	bmi.n	10041a66 <__aeabi_dsub+0xca>
10041a64:	e13d      	b.n	10041ce2 <__aeabi_dsub+0x346>
10041a66:	0264      	lsls	r4, r4, #9
10041a68:	0a64      	lsrs	r4, r4, #9
10041a6a:	2c00      	cmp	r4, #0
10041a6c:	d100      	bne.n	10041a70 <__aeabi_dsub+0xd4>
10041a6e:	e147      	b.n	10041d00 <__aeabi_dsub+0x364>
10041a70:	0020      	movs	r0, r4
10041a72:	f000 fbfb 	bl	1004226c <__clzsi2>
10041a76:	0003      	movs	r3, r0
10041a78:	3b08      	subs	r3, #8
10041a7a:	2120      	movs	r1, #32
10041a7c:	0028      	movs	r0, r5
10041a7e:	1aca      	subs	r2, r1, r3
10041a80:	40d0      	lsrs	r0, r2
10041a82:	409c      	lsls	r4, r3
10041a84:	0002      	movs	r2, r0
10041a86:	409d      	lsls	r5, r3
10041a88:	4322      	orrs	r2, r4
10041a8a:	429f      	cmp	r7, r3
10041a8c:	dd00      	ble.n	10041a90 <__aeabi_dsub+0xf4>
10041a8e:	e177      	b.n	10041d80 <__aeabi_dsub+0x3e4>
10041a90:	1bd8      	subs	r0, r3, r7
10041a92:	3001      	adds	r0, #1
10041a94:	1a09      	subs	r1, r1, r0
10041a96:	002c      	movs	r4, r5
10041a98:	408d      	lsls	r5, r1
10041a9a:	40c4      	lsrs	r4, r0
10041a9c:	1e6b      	subs	r3, r5, #1
10041a9e:	419d      	sbcs	r5, r3
10041aa0:	0013      	movs	r3, r2
10041aa2:	40c2      	lsrs	r2, r0
10041aa4:	408b      	lsls	r3, r1
10041aa6:	4325      	orrs	r5, r4
10041aa8:	2700      	movs	r7, #0
10041aaa:	0014      	movs	r4, r2
10041aac:	431d      	orrs	r5, r3
10041aae:	076b      	lsls	r3, r5, #29
10041ab0:	d009      	beq.n	10041ac6 <__aeabi_dsub+0x12a>
10041ab2:	230f      	movs	r3, #15
10041ab4:	402b      	ands	r3, r5
10041ab6:	2b04      	cmp	r3, #4
10041ab8:	d005      	beq.n	10041ac6 <__aeabi_dsub+0x12a>
10041aba:	1d2b      	adds	r3, r5, #4
10041abc:	42ab      	cmp	r3, r5
10041abe:	41ad      	sbcs	r5, r5
10041ac0:	426d      	negs	r5, r5
10041ac2:	1964      	adds	r4, r4, r5
10041ac4:	001d      	movs	r5, r3
10041ac6:	0223      	lsls	r3, r4, #8
10041ac8:	d400      	bmi.n	10041acc <__aeabi_dsub+0x130>
10041aca:	e140      	b.n	10041d4e <__aeabi_dsub+0x3b2>
10041acc:	4a88      	ldr	r2, [pc, #544]	@ (10041cf0 <__aeabi_dsub+0x354>)
10041ace:	3701      	adds	r7, #1
10041ad0:	4297      	cmp	r7, r2
10041ad2:	d100      	bne.n	10041ad6 <__aeabi_dsub+0x13a>
10041ad4:	e101      	b.n	10041cda <__aeabi_dsub+0x33e>
10041ad6:	2601      	movs	r6, #1
10041ad8:	4643      	mov	r3, r8
10041ada:	4986      	ldr	r1, [pc, #536]	@ (10041cf4 <__aeabi_dsub+0x358>)
10041adc:	08ed      	lsrs	r5, r5, #3
10041ade:	4021      	ands	r1, r4
10041ae0:	074a      	lsls	r2, r1, #29
10041ae2:	432a      	orrs	r2, r5
10041ae4:	057c      	lsls	r4, r7, #21
10041ae6:	024d      	lsls	r5, r1, #9
10041ae8:	0b2d      	lsrs	r5, r5, #12
10041aea:	0d64      	lsrs	r4, r4, #21
10041aec:	401e      	ands	r6, r3
10041aee:	0524      	lsls	r4, r4, #20
10041af0:	432c      	orrs	r4, r5
10041af2:	07f6      	lsls	r6, r6, #31
10041af4:	4334      	orrs	r4, r6
10041af6:	0010      	movs	r0, r2
10041af8:	0021      	movs	r1, r4
10041afa:	b005      	add	sp, #20
10041afc:	bcf0      	pop	{r4, r5, r6, r7}
10041afe:	46bb      	mov	fp, r7
10041b00:	46b2      	mov	sl, r6
10041b02:	46a9      	mov	r9, r5
10041b04:	46a0      	mov	r8, r4
10041b06:	bdf0      	pop	{r4, r5, r6, r7, pc}
10041b08:	2d00      	cmp	r5, #0
10041b0a:	dc00      	bgt.n	10041b0e <__aeabi_dsub+0x172>
10041b0c:	e2d0      	b.n	100420b0 <__aeabi_dsub+0x714>
10041b0e:	4649      	mov	r1, r9
10041b10:	2900      	cmp	r1, #0
10041b12:	d000      	beq.n	10041b16 <__aeabi_dsub+0x17a>
10041b14:	e0d4      	b.n	10041cc0 <__aeabi_dsub+0x324>
10041b16:	4661      	mov	r1, ip
10041b18:	9b02      	ldr	r3, [sp, #8]
10041b1a:	4319      	orrs	r1, r3
10041b1c:	d100      	bne.n	10041b20 <__aeabi_dsub+0x184>
10041b1e:	e12b      	b.n	10041d78 <__aeabi_dsub+0x3dc>
10041b20:	1e69      	subs	r1, r5, #1
10041b22:	2d01      	cmp	r5, #1
10041b24:	d100      	bne.n	10041b28 <__aeabi_dsub+0x18c>
10041b26:	e1d9      	b.n	10041edc <__aeabi_dsub+0x540>
10041b28:	4295      	cmp	r5, r2
10041b2a:	d100      	bne.n	10041b2e <__aeabi_dsub+0x192>
10041b2c:	e10a      	b.n	10041d44 <__aeabi_dsub+0x3a8>
10041b2e:	2501      	movs	r5, #1
10041b30:	2938      	cmp	r1, #56	@ 0x38
10041b32:	dc17      	bgt.n	10041b64 <__aeabi_dsub+0x1c8>
10041b34:	468a      	mov	sl, r1
10041b36:	4653      	mov	r3, sl
10041b38:	2b1f      	cmp	r3, #31
10041b3a:	dd00      	ble.n	10041b3e <__aeabi_dsub+0x1a2>
10041b3c:	e1e7      	b.n	10041f0e <__aeabi_dsub+0x572>
10041b3e:	2220      	movs	r2, #32
10041b40:	1ad2      	subs	r2, r2, r3
10041b42:	9b02      	ldr	r3, [sp, #8]
10041b44:	4661      	mov	r1, ip
10041b46:	4093      	lsls	r3, r2
10041b48:	001d      	movs	r5, r3
10041b4a:	4653      	mov	r3, sl
10041b4c:	40d9      	lsrs	r1, r3
10041b4e:	4663      	mov	r3, ip
10041b50:	4093      	lsls	r3, r2
10041b52:	001a      	movs	r2, r3
10041b54:	430d      	orrs	r5, r1
10041b56:	1e51      	subs	r1, r2, #1
10041b58:	418a      	sbcs	r2, r1
10041b5a:	4653      	mov	r3, sl
10041b5c:	4315      	orrs	r5, r2
10041b5e:	9a02      	ldr	r2, [sp, #8]
10041b60:	40da      	lsrs	r2, r3
10041b62:	18a4      	adds	r4, r4, r2
10041b64:	182d      	adds	r5, r5, r0
10041b66:	4285      	cmp	r5, r0
10041b68:	4180      	sbcs	r0, r0
10041b6a:	4240      	negs	r0, r0
10041b6c:	1824      	adds	r4, r4, r0
10041b6e:	0223      	lsls	r3, r4, #8
10041b70:	d400      	bmi.n	10041b74 <__aeabi_dsub+0x1d8>
10041b72:	e0b6      	b.n	10041ce2 <__aeabi_dsub+0x346>
10041b74:	4b5e      	ldr	r3, [pc, #376]	@ (10041cf0 <__aeabi_dsub+0x354>)
10041b76:	3701      	adds	r7, #1
10041b78:	429f      	cmp	r7, r3
10041b7a:	d100      	bne.n	10041b7e <__aeabi_dsub+0x1e2>
10041b7c:	e0ad      	b.n	10041cda <__aeabi_dsub+0x33e>
10041b7e:	2101      	movs	r1, #1
10041b80:	4b5c      	ldr	r3, [pc, #368]	@ (10041cf4 <__aeabi_dsub+0x358>)
10041b82:	086a      	lsrs	r2, r5, #1
10041b84:	401c      	ands	r4, r3
10041b86:	4029      	ands	r1, r5
10041b88:	430a      	orrs	r2, r1
10041b8a:	07e5      	lsls	r5, r4, #31
10041b8c:	4315      	orrs	r5, r2
10041b8e:	0864      	lsrs	r4, r4, #1
10041b90:	e78d      	b.n	10041aae <__aeabi_dsub+0x112>
10041b92:	4a59      	ldr	r2, [pc, #356]	@ (10041cf8 <__aeabi_dsub+0x35c>)
10041b94:	9b02      	ldr	r3, [sp, #8]
10041b96:	4692      	mov	sl, r2
10041b98:	4662      	mov	r2, ip
10041b9a:	44ba      	add	sl, r7
10041b9c:	431a      	orrs	r2, r3
10041b9e:	d02c      	beq.n	10041bfa <__aeabi_dsub+0x25e>
10041ba0:	428e      	cmp	r6, r1
10041ba2:	d02e      	beq.n	10041c02 <__aeabi_dsub+0x266>
10041ba4:	4652      	mov	r2, sl
10041ba6:	2a00      	cmp	r2, #0
10041ba8:	d060      	beq.n	10041c6c <__aeabi_dsub+0x2d0>
10041baa:	2f00      	cmp	r7, #0
10041bac:	d100      	bne.n	10041bb0 <__aeabi_dsub+0x214>
10041bae:	e0db      	b.n	10041d68 <__aeabi_dsub+0x3cc>
10041bb0:	4663      	mov	r3, ip
10041bb2:	000e      	movs	r6, r1
10041bb4:	9c02      	ldr	r4, [sp, #8]
10041bb6:	08d8      	lsrs	r0, r3, #3
10041bb8:	0762      	lsls	r2, r4, #29
10041bba:	4302      	orrs	r2, r0
10041bbc:	08e4      	lsrs	r4, r4, #3
10041bbe:	0013      	movs	r3, r2
10041bc0:	4323      	orrs	r3, r4
10041bc2:	d100      	bne.n	10041bc6 <__aeabi_dsub+0x22a>
10041bc4:	e254      	b.n	10042070 <__aeabi_dsub+0x6d4>
10041bc6:	2580      	movs	r5, #128	@ 0x80
10041bc8:	032d      	lsls	r5, r5, #12
10041bca:	4325      	orrs	r5, r4
10041bcc:	032d      	lsls	r5, r5, #12
10041bce:	4c48      	ldr	r4, [pc, #288]	@ (10041cf0 <__aeabi_dsub+0x354>)
10041bd0:	0b2d      	lsrs	r5, r5, #12
10041bd2:	e78c      	b.n	10041aee <__aeabi_dsub+0x152>
10041bd4:	4661      	mov	r1, ip
10041bd6:	9b02      	ldr	r3, [sp, #8]
10041bd8:	4319      	orrs	r1, r3
10041bda:	d100      	bne.n	10041bde <__aeabi_dsub+0x242>
10041bdc:	e0cc      	b.n	10041d78 <__aeabi_dsub+0x3dc>
10041bde:	0029      	movs	r1, r5
10041be0:	3901      	subs	r1, #1
10041be2:	2d01      	cmp	r5, #1
10041be4:	d100      	bne.n	10041be8 <__aeabi_dsub+0x24c>
10041be6:	e188      	b.n	10041efa <__aeabi_dsub+0x55e>
10041be8:	4295      	cmp	r5, r2
10041bea:	d100      	bne.n	10041bee <__aeabi_dsub+0x252>
10041bec:	e0aa      	b.n	10041d44 <__aeabi_dsub+0x3a8>
10041bee:	2501      	movs	r5, #1
10041bf0:	2938      	cmp	r1, #56	@ 0x38
10041bf2:	dd00      	ble.n	10041bf6 <__aeabi_dsub+0x25a>
10041bf4:	e72f      	b.n	10041a56 <__aeabi_dsub+0xba>
10041bf6:	468a      	mov	sl, r1
10041bf8:	e718      	b.n	10041a2c <__aeabi_dsub+0x90>
10041bfa:	2201      	movs	r2, #1
10041bfc:	4051      	eors	r1, r2
10041bfe:	428e      	cmp	r6, r1
10041c00:	d1d0      	bne.n	10041ba4 <__aeabi_dsub+0x208>
10041c02:	4653      	mov	r3, sl
10041c04:	2b00      	cmp	r3, #0
10041c06:	d100      	bne.n	10041c0a <__aeabi_dsub+0x26e>
10041c08:	e0be      	b.n	10041d88 <__aeabi_dsub+0x3ec>
10041c0a:	2f00      	cmp	r7, #0
10041c0c:	d000      	beq.n	10041c10 <__aeabi_dsub+0x274>
10041c0e:	e138      	b.n	10041e82 <__aeabi_dsub+0x4e6>
10041c10:	46ca      	mov	sl, r9
10041c12:	0022      	movs	r2, r4
10041c14:	4302      	orrs	r2, r0
10041c16:	d100      	bne.n	10041c1a <__aeabi_dsub+0x27e>
10041c18:	e1e2      	b.n	10041fe0 <__aeabi_dsub+0x644>
10041c1a:	4653      	mov	r3, sl
10041c1c:	1e59      	subs	r1, r3, #1
10041c1e:	2b01      	cmp	r3, #1
10041c20:	d100      	bne.n	10041c24 <__aeabi_dsub+0x288>
10041c22:	e20d      	b.n	10042040 <__aeabi_dsub+0x6a4>
10041c24:	4a32      	ldr	r2, [pc, #200]	@ (10041cf0 <__aeabi_dsub+0x354>)
10041c26:	4592      	cmp	sl, r2
10041c28:	d100      	bne.n	10041c2c <__aeabi_dsub+0x290>
10041c2a:	e1d2      	b.n	10041fd2 <__aeabi_dsub+0x636>
10041c2c:	2701      	movs	r7, #1
10041c2e:	2938      	cmp	r1, #56	@ 0x38
10041c30:	dc13      	bgt.n	10041c5a <__aeabi_dsub+0x2be>
10041c32:	291f      	cmp	r1, #31
10041c34:	dd00      	ble.n	10041c38 <__aeabi_dsub+0x29c>
10041c36:	e1ee      	b.n	10042016 <__aeabi_dsub+0x67a>
10041c38:	2220      	movs	r2, #32
10041c3a:	9b02      	ldr	r3, [sp, #8]
10041c3c:	1a52      	subs	r2, r2, r1
10041c3e:	0025      	movs	r5, r4
10041c40:	0007      	movs	r7, r0
10041c42:	469a      	mov	sl, r3
10041c44:	40cc      	lsrs	r4, r1
10041c46:	4090      	lsls	r0, r2
10041c48:	4095      	lsls	r5, r2
10041c4a:	40cf      	lsrs	r7, r1
10041c4c:	44a2      	add	sl, r4
10041c4e:	1e42      	subs	r2, r0, #1
10041c50:	4190      	sbcs	r0, r2
10041c52:	4653      	mov	r3, sl
10041c54:	432f      	orrs	r7, r5
10041c56:	4307      	orrs	r7, r0
10041c58:	9302      	str	r3, [sp, #8]
10041c5a:	003d      	movs	r5, r7
10041c5c:	4465      	add	r5, ip
10041c5e:	4565      	cmp	r5, ip
10041c60:	4192      	sbcs	r2, r2
10041c62:	9b02      	ldr	r3, [sp, #8]
10041c64:	4252      	negs	r2, r2
10041c66:	464f      	mov	r7, r9
10041c68:	18d4      	adds	r4, r2, r3
10041c6a:	e780      	b.n	10041b6e <__aeabi_dsub+0x1d2>
10041c6c:	4a23      	ldr	r2, [pc, #140]	@ (10041cfc <__aeabi_dsub+0x360>)
10041c6e:	1c7d      	adds	r5, r7, #1
10041c70:	4215      	tst	r5, r2
10041c72:	d000      	beq.n	10041c76 <__aeabi_dsub+0x2da>
10041c74:	e0aa      	b.n	10041dcc <__aeabi_dsub+0x430>
10041c76:	4662      	mov	r2, ip
10041c78:	0025      	movs	r5, r4
10041c7a:	9b02      	ldr	r3, [sp, #8]
10041c7c:	4305      	orrs	r5, r0
10041c7e:	431a      	orrs	r2, r3
10041c80:	2f00      	cmp	r7, #0
10041c82:	d000      	beq.n	10041c86 <__aeabi_dsub+0x2ea>
10041c84:	e0f5      	b.n	10041e72 <__aeabi_dsub+0x4d6>
10041c86:	2d00      	cmp	r5, #0
10041c88:	d100      	bne.n	10041c8c <__aeabi_dsub+0x2f0>
10041c8a:	e16b      	b.n	10041f64 <__aeabi_dsub+0x5c8>
10041c8c:	2a00      	cmp	r2, #0
10041c8e:	d100      	bne.n	10041c92 <__aeabi_dsub+0x2f6>
10041c90:	e152      	b.n	10041f38 <__aeabi_dsub+0x59c>
10041c92:	4663      	mov	r3, ip
10041c94:	1ac5      	subs	r5, r0, r3
10041c96:	9b02      	ldr	r3, [sp, #8]
10041c98:	1ae2      	subs	r2, r4, r3
10041c9a:	42a8      	cmp	r0, r5
10041c9c:	419b      	sbcs	r3, r3
10041c9e:	425b      	negs	r3, r3
10041ca0:	1ad3      	subs	r3, r2, r3
10041ca2:	021a      	lsls	r2, r3, #8
10041ca4:	d400      	bmi.n	10041ca8 <__aeabi_dsub+0x30c>
10041ca6:	e1d5      	b.n	10042054 <__aeabi_dsub+0x6b8>
10041ca8:	4663      	mov	r3, ip
10041caa:	1a1d      	subs	r5, r3, r0
10041cac:	45ac      	cmp	ip, r5
10041cae:	4192      	sbcs	r2, r2
10041cb0:	2601      	movs	r6, #1
10041cb2:	9b02      	ldr	r3, [sp, #8]
10041cb4:	4252      	negs	r2, r2
10041cb6:	1b1c      	subs	r4, r3, r4
10041cb8:	4688      	mov	r8, r1
10041cba:	1aa4      	subs	r4, r4, r2
10041cbc:	400e      	ands	r6, r1
10041cbe:	e6f6      	b.n	10041aae <__aeabi_dsub+0x112>
10041cc0:	4297      	cmp	r7, r2
10041cc2:	d03f      	beq.n	10041d44 <__aeabi_dsub+0x3a8>
10041cc4:	4652      	mov	r2, sl
10041cc6:	2501      	movs	r5, #1
10041cc8:	2a38      	cmp	r2, #56	@ 0x38
10041cca:	dd00      	ble.n	10041cce <__aeabi_dsub+0x332>
10041ccc:	e74a      	b.n	10041b64 <__aeabi_dsub+0x1c8>
10041cce:	2280      	movs	r2, #128	@ 0x80
10041cd0:	9b02      	ldr	r3, [sp, #8]
10041cd2:	0412      	lsls	r2, r2, #16
10041cd4:	4313      	orrs	r3, r2
10041cd6:	9302      	str	r3, [sp, #8]
10041cd8:	e72d      	b.n	10041b36 <__aeabi_dsub+0x19a>
10041cda:	003c      	movs	r4, r7
10041cdc:	2500      	movs	r5, #0
10041cde:	2200      	movs	r2, #0
10041ce0:	e705      	b.n	10041aee <__aeabi_dsub+0x152>
10041ce2:	2307      	movs	r3, #7
10041ce4:	402b      	ands	r3, r5
10041ce6:	2b00      	cmp	r3, #0
10041ce8:	d000      	beq.n	10041cec <__aeabi_dsub+0x350>
10041cea:	e6e2      	b.n	10041ab2 <__aeabi_dsub+0x116>
10041cec:	e06b      	b.n	10041dc6 <__aeabi_dsub+0x42a>
10041cee:	46c0      	nop			@ (mov r8, r8)
10041cf0:	000007ff 	.word	0x000007ff
10041cf4:	ff7fffff 	.word	0xff7fffff
10041cf8:	fffff801 	.word	0xfffff801
10041cfc:	000007fe 	.word	0x000007fe
10041d00:	0028      	movs	r0, r5
10041d02:	f000 fab3 	bl	1004226c <__clzsi2>
10041d06:	0003      	movs	r3, r0
10041d08:	3318      	adds	r3, #24
10041d0a:	2b1f      	cmp	r3, #31
10041d0c:	dc00      	bgt.n	10041d10 <__aeabi_dsub+0x374>
10041d0e:	e6b4      	b.n	10041a7a <__aeabi_dsub+0xde>
10041d10:	002a      	movs	r2, r5
10041d12:	3808      	subs	r0, #8
10041d14:	4082      	lsls	r2, r0
10041d16:	429f      	cmp	r7, r3
10041d18:	dd00      	ble.n	10041d1c <__aeabi_dsub+0x380>
10041d1a:	e0b9      	b.n	10041e90 <__aeabi_dsub+0x4f4>
10041d1c:	1bdb      	subs	r3, r3, r7
10041d1e:	1c58      	adds	r0, r3, #1
10041d20:	281f      	cmp	r0, #31
10041d22:	dc00      	bgt.n	10041d26 <__aeabi_dsub+0x38a>
10041d24:	e1a0      	b.n	10042068 <__aeabi_dsub+0x6cc>
10041d26:	0015      	movs	r5, r2
10041d28:	3b1f      	subs	r3, #31
10041d2a:	40dd      	lsrs	r5, r3
10041d2c:	2820      	cmp	r0, #32
10041d2e:	d005      	beq.n	10041d3c <__aeabi_dsub+0x3a0>
10041d30:	2340      	movs	r3, #64	@ 0x40
10041d32:	1a1b      	subs	r3, r3, r0
10041d34:	409a      	lsls	r2, r3
10041d36:	1e53      	subs	r3, r2, #1
10041d38:	419a      	sbcs	r2, r3
10041d3a:	4315      	orrs	r5, r2
10041d3c:	2307      	movs	r3, #7
10041d3e:	2700      	movs	r7, #0
10041d40:	402b      	ands	r3, r5
10041d42:	e7d0      	b.n	10041ce6 <__aeabi_dsub+0x34a>
10041d44:	08c0      	lsrs	r0, r0, #3
10041d46:	0762      	lsls	r2, r4, #29
10041d48:	4302      	orrs	r2, r0
10041d4a:	08e4      	lsrs	r4, r4, #3
10041d4c:	e737      	b.n	10041bbe <__aeabi_dsub+0x222>
10041d4e:	08ea      	lsrs	r2, r5, #3
10041d50:	0763      	lsls	r3, r4, #29
10041d52:	431a      	orrs	r2, r3
10041d54:	4bd3      	ldr	r3, [pc, #844]	@ (100420a4 <__aeabi_dsub+0x708>)
10041d56:	08e4      	lsrs	r4, r4, #3
10041d58:	429f      	cmp	r7, r3
10041d5a:	d100      	bne.n	10041d5e <__aeabi_dsub+0x3c2>
10041d5c:	e72f      	b.n	10041bbe <__aeabi_dsub+0x222>
10041d5e:	0324      	lsls	r4, r4, #12
10041d60:	0b25      	lsrs	r5, r4, #12
10041d62:	057c      	lsls	r4, r7, #21
10041d64:	0d64      	lsrs	r4, r4, #21
10041d66:	e6c2      	b.n	10041aee <__aeabi_dsub+0x152>
10041d68:	46ca      	mov	sl, r9
10041d6a:	0022      	movs	r2, r4
10041d6c:	4302      	orrs	r2, r0
10041d6e:	d158      	bne.n	10041e22 <__aeabi_dsub+0x486>
10041d70:	4663      	mov	r3, ip
10041d72:	000e      	movs	r6, r1
10041d74:	9c02      	ldr	r4, [sp, #8]
10041d76:	9303      	str	r3, [sp, #12]
10041d78:	9b03      	ldr	r3, [sp, #12]
10041d7a:	4657      	mov	r7, sl
10041d7c:	08da      	lsrs	r2, r3, #3
10041d7e:	e7e7      	b.n	10041d50 <__aeabi_dsub+0x3b4>
10041d80:	4cc9      	ldr	r4, [pc, #804]	@ (100420a8 <__aeabi_dsub+0x70c>)
10041d82:	1aff      	subs	r7, r7, r3
10041d84:	4014      	ands	r4, r2
10041d86:	e692      	b.n	10041aae <__aeabi_dsub+0x112>
10041d88:	4dc8      	ldr	r5, [pc, #800]	@ (100420ac <__aeabi_dsub+0x710>)
10041d8a:	1c7a      	adds	r2, r7, #1
10041d8c:	422a      	tst	r2, r5
10041d8e:	d000      	beq.n	10041d92 <__aeabi_dsub+0x3f6>
10041d90:	e084      	b.n	10041e9c <__aeabi_dsub+0x500>
10041d92:	0022      	movs	r2, r4
10041d94:	4302      	orrs	r2, r0
10041d96:	2f00      	cmp	r7, #0
10041d98:	d000      	beq.n	10041d9c <__aeabi_dsub+0x400>
10041d9a:	e0ef      	b.n	10041f7c <__aeabi_dsub+0x5e0>
10041d9c:	2a00      	cmp	r2, #0
10041d9e:	d100      	bne.n	10041da2 <__aeabi_dsub+0x406>
10041da0:	e0e5      	b.n	10041f6e <__aeabi_dsub+0x5d2>
10041da2:	4662      	mov	r2, ip
10041da4:	9902      	ldr	r1, [sp, #8]
10041da6:	430a      	orrs	r2, r1
10041da8:	d100      	bne.n	10041dac <__aeabi_dsub+0x410>
10041daa:	e0c5      	b.n	10041f38 <__aeabi_dsub+0x59c>
10041dac:	4663      	mov	r3, ip
10041dae:	18c5      	adds	r5, r0, r3
10041db0:	468c      	mov	ip, r1
10041db2:	4285      	cmp	r5, r0
10041db4:	4180      	sbcs	r0, r0
10041db6:	4464      	add	r4, ip
10041db8:	4240      	negs	r0, r0
10041dba:	1824      	adds	r4, r4, r0
10041dbc:	0223      	lsls	r3, r4, #8
10041dbe:	d502      	bpl.n	10041dc6 <__aeabi_dsub+0x42a>
10041dc0:	4bb9      	ldr	r3, [pc, #740]	@ (100420a8 <__aeabi_dsub+0x70c>)
10041dc2:	3701      	adds	r7, #1
10041dc4:	401c      	ands	r4, r3
10041dc6:	46ba      	mov	sl, r7
10041dc8:	9503      	str	r5, [sp, #12]
10041dca:	e7d5      	b.n	10041d78 <__aeabi_dsub+0x3dc>
10041dcc:	4662      	mov	r2, ip
10041dce:	1a85      	subs	r5, r0, r2
10041dd0:	42a8      	cmp	r0, r5
10041dd2:	4192      	sbcs	r2, r2
10041dd4:	4252      	negs	r2, r2
10041dd6:	4691      	mov	r9, r2
10041dd8:	9b02      	ldr	r3, [sp, #8]
10041dda:	1ae3      	subs	r3, r4, r3
10041ddc:	001a      	movs	r2, r3
10041dde:	464b      	mov	r3, r9
10041de0:	1ad2      	subs	r2, r2, r3
10041de2:	0013      	movs	r3, r2
10041de4:	4691      	mov	r9, r2
10041de6:	021a      	lsls	r2, r3, #8
10041de8:	d46c      	bmi.n	10041ec4 <__aeabi_dsub+0x528>
10041dea:	464a      	mov	r2, r9
10041dec:	464c      	mov	r4, r9
10041dee:	432a      	orrs	r2, r5
10041df0:	d000      	beq.n	10041df4 <__aeabi_dsub+0x458>
10041df2:	e63a      	b.n	10041a6a <__aeabi_dsub+0xce>
10041df4:	2600      	movs	r6, #0
10041df6:	2400      	movs	r4, #0
10041df8:	2500      	movs	r5, #0
10041dfa:	e678      	b.n	10041aee <__aeabi_dsub+0x152>
10041dfc:	9902      	ldr	r1, [sp, #8]
10041dfe:	4653      	mov	r3, sl
10041e00:	000d      	movs	r5, r1
10041e02:	3a20      	subs	r2, #32
10041e04:	40d5      	lsrs	r5, r2
10041e06:	2b20      	cmp	r3, #32
10041e08:	d006      	beq.n	10041e18 <__aeabi_dsub+0x47c>
10041e0a:	2240      	movs	r2, #64	@ 0x40
10041e0c:	1ad2      	subs	r2, r2, r3
10041e0e:	000b      	movs	r3, r1
10041e10:	4093      	lsls	r3, r2
10041e12:	4662      	mov	r2, ip
10041e14:	431a      	orrs	r2, r3
10041e16:	4693      	mov	fp, r2
10041e18:	465b      	mov	r3, fp
10041e1a:	1e5a      	subs	r2, r3, #1
10041e1c:	4193      	sbcs	r3, r2
10041e1e:	431d      	orrs	r5, r3
10041e20:	e619      	b.n	10041a56 <__aeabi_dsub+0xba>
10041e22:	4653      	mov	r3, sl
10041e24:	1e5a      	subs	r2, r3, #1
10041e26:	2b01      	cmp	r3, #1
10041e28:	d100      	bne.n	10041e2c <__aeabi_dsub+0x490>
10041e2a:	e0c6      	b.n	10041fba <__aeabi_dsub+0x61e>
10041e2c:	4e9d      	ldr	r6, [pc, #628]	@ (100420a4 <__aeabi_dsub+0x708>)
10041e2e:	45b2      	cmp	sl, r6
10041e30:	d100      	bne.n	10041e34 <__aeabi_dsub+0x498>
10041e32:	e6bd      	b.n	10041bb0 <__aeabi_dsub+0x214>
10041e34:	4688      	mov	r8, r1
10041e36:	000e      	movs	r6, r1
10041e38:	2501      	movs	r5, #1
10041e3a:	2a38      	cmp	r2, #56	@ 0x38
10041e3c:	dc10      	bgt.n	10041e60 <__aeabi_dsub+0x4c4>
10041e3e:	2a1f      	cmp	r2, #31
10041e40:	dc7f      	bgt.n	10041f42 <__aeabi_dsub+0x5a6>
10041e42:	2120      	movs	r1, #32
10041e44:	0025      	movs	r5, r4
10041e46:	1a89      	subs	r1, r1, r2
10041e48:	0007      	movs	r7, r0
10041e4a:	4088      	lsls	r0, r1
10041e4c:	408d      	lsls	r5, r1
10041e4e:	40d7      	lsrs	r7, r2
10041e50:	40d4      	lsrs	r4, r2
10041e52:	1e41      	subs	r1, r0, #1
10041e54:	4188      	sbcs	r0, r1
10041e56:	9b02      	ldr	r3, [sp, #8]
10041e58:	433d      	orrs	r5, r7
10041e5a:	1b1b      	subs	r3, r3, r4
10041e5c:	4305      	orrs	r5, r0
10041e5e:	9302      	str	r3, [sp, #8]
10041e60:	4662      	mov	r2, ip
10041e62:	1b55      	subs	r5, r2, r5
10041e64:	45ac      	cmp	ip, r5
10041e66:	4192      	sbcs	r2, r2
10041e68:	9b02      	ldr	r3, [sp, #8]
10041e6a:	4252      	negs	r2, r2
10041e6c:	464f      	mov	r7, r9
10041e6e:	1a9c      	subs	r4, r3, r2
10041e70:	e5f6      	b.n	10041a60 <__aeabi_dsub+0xc4>
10041e72:	2d00      	cmp	r5, #0
10041e74:	d000      	beq.n	10041e78 <__aeabi_dsub+0x4dc>
10041e76:	e0b7      	b.n	10041fe8 <__aeabi_dsub+0x64c>
10041e78:	2a00      	cmp	r2, #0
10041e7a:	d100      	bne.n	10041e7e <__aeabi_dsub+0x4e2>
10041e7c:	e0f0      	b.n	10042060 <__aeabi_dsub+0x6c4>
10041e7e:	2601      	movs	r6, #1
10041e80:	400e      	ands	r6, r1
10041e82:	4663      	mov	r3, ip
10041e84:	9802      	ldr	r0, [sp, #8]
10041e86:	08d9      	lsrs	r1, r3, #3
10041e88:	0742      	lsls	r2, r0, #29
10041e8a:	430a      	orrs	r2, r1
10041e8c:	08c4      	lsrs	r4, r0, #3
10041e8e:	e696      	b.n	10041bbe <__aeabi_dsub+0x222>
10041e90:	4c85      	ldr	r4, [pc, #532]	@ (100420a8 <__aeabi_dsub+0x70c>)
10041e92:	1aff      	subs	r7, r7, r3
10041e94:	4014      	ands	r4, r2
10041e96:	0762      	lsls	r2, r4, #29
10041e98:	08e4      	lsrs	r4, r4, #3
10041e9a:	e760      	b.n	10041d5e <__aeabi_dsub+0x3c2>
10041e9c:	4981      	ldr	r1, [pc, #516]	@ (100420a4 <__aeabi_dsub+0x708>)
10041e9e:	428a      	cmp	r2, r1
10041ea0:	d100      	bne.n	10041ea4 <__aeabi_dsub+0x508>
10041ea2:	e0c9      	b.n	10042038 <__aeabi_dsub+0x69c>
10041ea4:	4663      	mov	r3, ip
10041ea6:	18c1      	adds	r1, r0, r3
10041ea8:	4281      	cmp	r1, r0
10041eaa:	4180      	sbcs	r0, r0
10041eac:	9b02      	ldr	r3, [sp, #8]
10041eae:	4240      	negs	r0, r0
10041eb0:	18e3      	adds	r3, r4, r3
10041eb2:	181b      	adds	r3, r3, r0
10041eb4:	07dd      	lsls	r5, r3, #31
10041eb6:	085c      	lsrs	r4, r3, #1
10041eb8:	2307      	movs	r3, #7
10041eba:	0849      	lsrs	r1, r1, #1
10041ebc:	430d      	orrs	r5, r1
10041ebe:	0017      	movs	r7, r2
10041ec0:	402b      	ands	r3, r5
10041ec2:	e710      	b.n	10041ce6 <__aeabi_dsub+0x34a>
10041ec4:	4663      	mov	r3, ip
10041ec6:	1a1d      	subs	r5, r3, r0
10041ec8:	45ac      	cmp	ip, r5
10041eca:	4192      	sbcs	r2, r2
10041ecc:	2601      	movs	r6, #1
10041ece:	9b02      	ldr	r3, [sp, #8]
10041ed0:	4252      	negs	r2, r2
10041ed2:	1b1c      	subs	r4, r3, r4
10041ed4:	4688      	mov	r8, r1
10041ed6:	1aa4      	subs	r4, r4, r2
10041ed8:	400e      	ands	r6, r1
10041eda:	e5c6      	b.n	10041a6a <__aeabi_dsub+0xce>
10041edc:	4663      	mov	r3, ip
10041ede:	18c5      	adds	r5, r0, r3
10041ee0:	9b02      	ldr	r3, [sp, #8]
10041ee2:	4285      	cmp	r5, r0
10041ee4:	4180      	sbcs	r0, r0
10041ee6:	469c      	mov	ip, r3
10041ee8:	4240      	negs	r0, r0
10041eea:	4464      	add	r4, ip
10041eec:	1824      	adds	r4, r4, r0
10041eee:	2701      	movs	r7, #1
10041ef0:	0223      	lsls	r3, r4, #8
10041ef2:	d400      	bmi.n	10041ef6 <__aeabi_dsub+0x55a>
10041ef4:	e6f5      	b.n	10041ce2 <__aeabi_dsub+0x346>
10041ef6:	2702      	movs	r7, #2
10041ef8:	e641      	b.n	10041b7e <__aeabi_dsub+0x1e2>
10041efa:	4663      	mov	r3, ip
10041efc:	1ac5      	subs	r5, r0, r3
10041efe:	42a8      	cmp	r0, r5
10041f00:	4180      	sbcs	r0, r0
10041f02:	9b02      	ldr	r3, [sp, #8]
10041f04:	4240      	negs	r0, r0
10041f06:	1ae4      	subs	r4, r4, r3
10041f08:	2701      	movs	r7, #1
10041f0a:	1a24      	subs	r4, r4, r0
10041f0c:	e5a8      	b.n	10041a60 <__aeabi_dsub+0xc4>
10041f0e:	9d02      	ldr	r5, [sp, #8]
10041f10:	4652      	mov	r2, sl
10041f12:	002b      	movs	r3, r5
10041f14:	3a20      	subs	r2, #32
10041f16:	40d3      	lsrs	r3, r2
10041f18:	0019      	movs	r1, r3
10041f1a:	4653      	mov	r3, sl
10041f1c:	2b20      	cmp	r3, #32
10041f1e:	d006      	beq.n	10041f2e <__aeabi_dsub+0x592>
10041f20:	2240      	movs	r2, #64	@ 0x40
10041f22:	1ad2      	subs	r2, r2, r3
10041f24:	002b      	movs	r3, r5
10041f26:	4093      	lsls	r3, r2
10041f28:	4662      	mov	r2, ip
10041f2a:	431a      	orrs	r2, r3
10041f2c:	4693      	mov	fp, r2
10041f2e:	465d      	mov	r5, fp
10041f30:	1e6b      	subs	r3, r5, #1
10041f32:	419d      	sbcs	r5, r3
10041f34:	430d      	orrs	r5, r1
10041f36:	e615      	b.n	10041b64 <__aeabi_dsub+0x1c8>
10041f38:	0762      	lsls	r2, r4, #29
10041f3a:	08c0      	lsrs	r0, r0, #3
10041f3c:	4302      	orrs	r2, r0
10041f3e:	08e4      	lsrs	r4, r4, #3
10041f40:	e70d      	b.n	10041d5e <__aeabi_dsub+0x3c2>
10041f42:	0011      	movs	r1, r2
10041f44:	0027      	movs	r7, r4
10041f46:	3920      	subs	r1, #32
10041f48:	40cf      	lsrs	r7, r1
10041f4a:	2a20      	cmp	r2, #32
10041f4c:	d005      	beq.n	10041f5a <__aeabi_dsub+0x5be>
10041f4e:	2140      	movs	r1, #64	@ 0x40
10041f50:	1a8a      	subs	r2, r1, r2
10041f52:	4094      	lsls	r4, r2
10041f54:	0025      	movs	r5, r4
10041f56:	4305      	orrs	r5, r0
10041f58:	9503      	str	r5, [sp, #12]
10041f5a:	9d03      	ldr	r5, [sp, #12]
10041f5c:	1e6a      	subs	r2, r5, #1
10041f5e:	4195      	sbcs	r5, r2
10041f60:	433d      	orrs	r5, r7
10041f62:	e77d      	b.n	10041e60 <__aeabi_dsub+0x4c4>
10041f64:	2a00      	cmp	r2, #0
10041f66:	d100      	bne.n	10041f6a <__aeabi_dsub+0x5ce>
10041f68:	e744      	b.n	10041df4 <__aeabi_dsub+0x458>
10041f6a:	2601      	movs	r6, #1
10041f6c:	400e      	ands	r6, r1
10041f6e:	4663      	mov	r3, ip
10041f70:	08d9      	lsrs	r1, r3, #3
10041f72:	9b02      	ldr	r3, [sp, #8]
10041f74:	075a      	lsls	r2, r3, #29
10041f76:	430a      	orrs	r2, r1
10041f78:	08dc      	lsrs	r4, r3, #3
10041f7a:	e6f0      	b.n	10041d5e <__aeabi_dsub+0x3c2>
10041f7c:	2a00      	cmp	r2, #0
10041f7e:	d028      	beq.n	10041fd2 <__aeabi_dsub+0x636>
10041f80:	4662      	mov	r2, ip
10041f82:	9f02      	ldr	r7, [sp, #8]
10041f84:	08c0      	lsrs	r0, r0, #3
10041f86:	433a      	orrs	r2, r7
10041f88:	d100      	bne.n	10041f8c <__aeabi_dsub+0x5f0>
10041f8a:	e6dc      	b.n	10041d46 <__aeabi_dsub+0x3aa>
10041f8c:	0762      	lsls	r2, r4, #29
10041f8e:	4310      	orrs	r0, r2
10041f90:	2280      	movs	r2, #128	@ 0x80
10041f92:	08e4      	lsrs	r4, r4, #3
10041f94:	0312      	lsls	r2, r2, #12
10041f96:	4214      	tst	r4, r2
10041f98:	d009      	beq.n	10041fae <__aeabi_dsub+0x612>
10041f9a:	08fd      	lsrs	r5, r7, #3
10041f9c:	4215      	tst	r5, r2
10041f9e:	d106      	bne.n	10041fae <__aeabi_dsub+0x612>
10041fa0:	4663      	mov	r3, ip
10041fa2:	2601      	movs	r6, #1
10041fa4:	002c      	movs	r4, r5
10041fa6:	08d8      	lsrs	r0, r3, #3
10041fa8:	077b      	lsls	r3, r7, #29
10041faa:	4318      	orrs	r0, r3
10041fac:	400e      	ands	r6, r1
10041fae:	0f42      	lsrs	r2, r0, #29
10041fb0:	00c0      	lsls	r0, r0, #3
10041fb2:	08c0      	lsrs	r0, r0, #3
10041fb4:	0752      	lsls	r2, r2, #29
10041fb6:	4302      	orrs	r2, r0
10041fb8:	e601      	b.n	10041bbe <__aeabi_dsub+0x222>
10041fba:	4663      	mov	r3, ip
10041fbc:	1a1d      	subs	r5, r3, r0
10041fbe:	45ac      	cmp	ip, r5
10041fc0:	4192      	sbcs	r2, r2
10041fc2:	9b02      	ldr	r3, [sp, #8]
10041fc4:	4252      	negs	r2, r2
10041fc6:	1b1c      	subs	r4, r3, r4
10041fc8:	000e      	movs	r6, r1
10041fca:	4688      	mov	r8, r1
10041fcc:	2701      	movs	r7, #1
10041fce:	1aa4      	subs	r4, r4, r2
10041fd0:	e546      	b.n	10041a60 <__aeabi_dsub+0xc4>
10041fd2:	4663      	mov	r3, ip
10041fd4:	08d9      	lsrs	r1, r3, #3
10041fd6:	9b02      	ldr	r3, [sp, #8]
10041fd8:	075a      	lsls	r2, r3, #29
10041fda:	430a      	orrs	r2, r1
10041fdc:	08dc      	lsrs	r4, r3, #3
10041fde:	e5ee      	b.n	10041bbe <__aeabi_dsub+0x222>
10041fe0:	4663      	mov	r3, ip
10041fe2:	9c02      	ldr	r4, [sp, #8]
10041fe4:	9303      	str	r3, [sp, #12]
10041fe6:	e6c7      	b.n	10041d78 <__aeabi_dsub+0x3dc>
10041fe8:	08c0      	lsrs	r0, r0, #3
10041fea:	2a00      	cmp	r2, #0
10041fec:	d100      	bne.n	10041ff0 <__aeabi_dsub+0x654>
10041fee:	e6aa      	b.n	10041d46 <__aeabi_dsub+0x3aa>
10041ff0:	0762      	lsls	r2, r4, #29
10041ff2:	4310      	orrs	r0, r2
10041ff4:	2280      	movs	r2, #128	@ 0x80
10041ff6:	08e4      	lsrs	r4, r4, #3
10041ff8:	0312      	lsls	r2, r2, #12
10041ffa:	4214      	tst	r4, r2
10041ffc:	d0d7      	beq.n	10041fae <__aeabi_dsub+0x612>
10041ffe:	9f02      	ldr	r7, [sp, #8]
10042000:	08fd      	lsrs	r5, r7, #3
10042002:	4215      	tst	r5, r2
10042004:	d1d3      	bne.n	10041fae <__aeabi_dsub+0x612>
10042006:	4663      	mov	r3, ip
10042008:	2601      	movs	r6, #1
1004200a:	08d8      	lsrs	r0, r3, #3
1004200c:	077b      	lsls	r3, r7, #29
1004200e:	002c      	movs	r4, r5
10042010:	4318      	orrs	r0, r3
10042012:	400e      	ands	r6, r1
10042014:	e7cb      	b.n	10041fae <__aeabi_dsub+0x612>
10042016:	000a      	movs	r2, r1
10042018:	0027      	movs	r7, r4
1004201a:	3a20      	subs	r2, #32
1004201c:	40d7      	lsrs	r7, r2
1004201e:	2920      	cmp	r1, #32
10042020:	d005      	beq.n	1004202e <__aeabi_dsub+0x692>
10042022:	2240      	movs	r2, #64	@ 0x40
10042024:	1a52      	subs	r2, r2, r1
10042026:	4094      	lsls	r4, r2
10042028:	0025      	movs	r5, r4
1004202a:	4305      	orrs	r5, r0
1004202c:	9503      	str	r5, [sp, #12]
1004202e:	9d03      	ldr	r5, [sp, #12]
10042030:	1e6a      	subs	r2, r5, #1
10042032:	4195      	sbcs	r5, r2
10042034:	432f      	orrs	r7, r5
10042036:	e610      	b.n	10041c5a <__aeabi_dsub+0x2be>
10042038:	0014      	movs	r4, r2
1004203a:	2500      	movs	r5, #0
1004203c:	2200      	movs	r2, #0
1004203e:	e556      	b.n	10041aee <__aeabi_dsub+0x152>
10042040:	9b02      	ldr	r3, [sp, #8]
10042042:	4460      	add	r0, ip
10042044:	4699      	mov	r9, r3
10042046:	4560      	cmp	r0, ip
10042048:	4192      	sbcs	r2, r2
1004204a:	444c      	add	r4, r9
1004204c:	4252      	negs	r2, r2
1004204e:	0005      	movs	r5, r0
10042050:	18a4      	adds	r4, r4, r2
10042052:	e74c      	b.n	10041eee <__aeabi_dsub+0x552>
10042054:	001a      	movs	r2, r3
10042056:	001c      	movs	r4, r3
10042058:	432a      	orrs	r2, r5
1004205a:	d000      	beq.n	1004205e <__aeabi_dsub+0x6c2>
1004205c:	e6b3      	b.n	10041dc6 <__aeabi_dsub+0x42a>
1004205e:	e6c9      	b.n	10041df4 <__aeabi_dsub+0x458>
10042060:	2480      	movs	r4, #128	@ 0x80
10042062:	2600      	movs	r6, #0
10042064:	0324      	lsls	r4, r4, #12
10042066:	e5ae      	b.n	10041bc6 <__aeabi_dsub+0x22a>
10042068:	2120      	movs	r1, #32
1004206a:	2500      	movs	r5, #0
1004206c:	1a09      	subs	r1, r1, r0
1004206e:	e517      	b.n	10041aa0 <__aeabi_dsub+0x104>
10042070:	2200      	movs	r2, #0
10042072:	2500      	movs	r5, #0
10042074:	4c0b      	ldr	r4, [pc, #44]	@ (100420a4 <__aeabi_dsub+0x708>)
10042076:	e53a      	b.n	10041aee <__aeabi_dsub+0x152>
10042078:	2d00      	cmp	r5, #0
1004207a:	d100      	bne.n	1004207e <__aeabi_dsub+0x6e2>
1004207c:	e5f6      	b.n	10041c6c <__aeabi_dsub+0x2d0>
1004207e:	464b      	mov	r3, r9
10042080:	1bda      	subs	r2, r3, r7
10042082:	4692      	mov	sl, r2
10042084:	2f00      	cmp	r7, #0
10042086:	d100      	bne.n	1004208a <__aeabi_dsub+0x6ee>
10042088:	e66f      	b.n	10041d6a <__aeabi_dsub+0x3ce>
1004208a:	2a38      	cmp	r2, #56	@ 0x38
1004208c:	dc05      	bgt.n	1004209a <__aeabi_dsub+0x6fe>
1004208e:	2680      	movs	r6, #128	@ 0x80
10042090:	0436      	lsls	r6, r6, #16
10042092:	4334      	orrs	r4, r6
10042094:	4688      	mov	r8, r1
10042096:	000e      	movs	r6, r1
10042098:	e6d1      	b.n	10041e3e <__aeabi_dsub+0x4a2>
1004209a:	4688      	mov	r8, r1
1004209c:	000e      	movs	r6, r1
1004209e:	2501      	movs	r5, #1
100420a0:	e6de      	b.n	10041e60 <__aeabi_dsub+0x4c4>
100420a2:	46c0      	nop			@ (mov r8, r8)
100420a4:	000007ff 	.word	0x000007ff
100420a8:	ff7fffff 	.word	0xff7fffff
100420ac:	000007fe 	.word	0x000007fe
100420b0:	2d00      	cmp	r5, #0
100420b2:	d100      	bne.n	100420b6 <__aeabi_dsub+0x71a>
100420b4:	e668      	b.n	10041d88 <__aeabi_dsub+0x3ec>
100420b6:	464b      	mov	r3, r9
100420b8:	1bd9      	subs	r1, r3, r7
100420ba:	2f00      	cmp	r7, #0
100420bc:	d101      	bne.n	100420c2 <__aeabi_dsub+0x726>
100420be:	468a      	mov	sl, r1
100420c0:	e5a7      	b.n	10041c12 <__aeabi_dsub+0x276>
100420c2:	2701      	movs	r7, #1
100420c4:	2938      	cmp	r1, #56	@ 0x38
100420c6:	dd00      	ble.n	100420ca <__aeabi_dsub+0x72e>
100420c8:	e5c7      	b.n	10041c5a <__aeabi_dsub+0x2be>
100420ca:	2280      	movs	r2, #128	@ 0x80
100420cc:	0412      	lsls	r2, r2, #16
100420ce:	4314      	orrs	r4, r2
100420d0:	e5af      	b.n	10041c32 <__aeabi_dsub+0x296>
100420d2:	46c0      	nop			@ (mov r8, r8)

100420d4 <__aeabi_d2iz>:
100420d4:	000b      	movs	r3, r1
100420d6:	0002      	movs	r2, r0
100420d8:	b570      	push	{r4, r5, r6, lr}
100420da:	4d16      	ldr	r5, [pc, #88]	@ (10042134 <__aeabi_d2iz+0x60>)
100420dc:	030c      	lsls	r4, r1, #12
100420de:	b082      	sub	sp, #8
100420e0:	0049      	lsls	r1, r1, #1
100420e2:	2000      	movs	r0, #0
100420e4:	9200      	str	r2, [sp, #0]
100420e6:	9301      	str	r3, [sp, #4]
100420e8:	0b24      	lsrs	r4, r4, #12
100420ea:	0d49      	lsrs	r1, r1, #21
100420ec:	0fde      	lsrs	r6, r3, #31
100420ee:	42a9      	cmp	r1, r5
100420f0:	dd04      	ble.n	100420fc <__aeabi_d2iz+0x28>
100420f2:	4811      	ldr	r0, [pc, #68]	@ (10042138 <__aeabi_d2iz+0x64>)
100420f4:	4281      	cmp	r1, r0
100420f6:	dd03      	ble.n	10042100 <__aeabi_d2iz+0x2c>
100420f8:	4b10      	ldr	r3, [pc, #64]	@ (1004213c <__aeabi_d2iz+0x68>)
100420fa:	18f0      	adds	r0, r6, r3
100420fc:	b002      	add	sp, #8
100420fe:	bd70      	pop	{r4, r5, r6, pc}
10042100:	2080      	movs	r0, #128	@ 0x80
10042102:	0340      	lsls	r0, r0, #13
10042104:	4320      	orrs	r0, r4
10042106:	4c0e      	ldr	r4, [pc, #56]	@ (10042140 <__aeabi_d2iz+0x6c>)
10042108:	1a64      	subs	r4, r4, r1
1004210a:	2c1f      	cmp	r4, #31
1004210c:	dd08      	ble.n	10042120 <__aeabi_d2iz+0x4c>
1004210e:	4b0d      	ldr	r3, [pc, #52]	@ (10042144 <__aeabi_d2iz+0x70>)
10042110:	1a5b      	subs	r3, r3, r1
10042112:	40d8      	lsrs	r0, r3
10042114:	0003      	movs	r3, r0
10042116:	4258      	negs	r0, r3
10042118:	2e00      	cmp	r6, #0
1004211a:	d1ef      	bne.n	100420fc <__aeabi_d2iz+0x28>
1004211c:	0018      	movs	r0, r3
1004211e:	e7ed      	b.n	100420fc <__aeabi_d2iz+0x28>
10042120:	4b09      	ldr	r3, [pc, #36]	@ (10042148 <__aeabi_d2iz+0x74>)
10042122:	9a00      	ldr	r2, [sp, #0]
10042124:	469c      	mov	ip, r3
10042126:	0003      	movs	r3, r0
10042128:	4461      	add	r1, ip
1004212a:	408b      	lsls	r3, r1
1004212c:	40e2      	lsrs	r2, r4
1004212e:	4313      	orrs	r3, r2
10042130:	e7f1      	b.n	10042116 <__aeabi_d2iz+0x42>
10042132:	46c0      	nop			@ (mov r8, r8)
10042134:	000003fe 	.word	0x000003fe
10042138:	0000041d 	.word	0x0000041d
1004213c:	7fffffff 	.word	0x7fffffff
10042140:	00000433 	.word	0x00000433
10042144:	00000413 	.word	0x00000413
10042148:	fffffbed 	.word	0xfffffbed

1004214c <__aeabi_i2d>:
1004214c:	b570      	push	{r4, r5, r6, lr}
1004214e:	2800      	cmp	r0, #0
10042150:	d016      	beq.n	10042180 <__aeabi_i2d+0x34>
10042152:	17c3      	asrs	r3, r0, #31
10042154:	18c5      	adds	r5, r0, r3
10042156:	405d      	eors	r5, r3
10042158:	0fc4      	lsrs	r4, r0, #31
1004215a:	0028      	movs	r0, r5
1004215c:	f000 f886 	bl	1004226c <__clzsi2>
10042160:	4b10      	ldr	r3, [pc, #64]	@ (100421a4 <__aeabi_i2d+0x58>)
10042162:	1a1b      	subs	r3, r3, r0
10042164:	055b      	lsls	r3, r3, #21
10042166:	0d5b      	lsrs	r3, r3, #21
10042168:	280a      	cmp	r0, #10
1004216a:	dc14      	bgt.n	10042196 <__aeabi_i2d+0x4a>
1004216c:	0002      	movs	r2, r0
1004216e:	002e      	movs	r6, r5
10042170:	3215      	adds	r2, #21
10042172:	4096      	lsls	r6, r2
10042174:	220b      	movs	r2, #11
10042176:	1a12      	subs	r2, r2, r0
10042178:	40d5      	lsrs	r5, r2
1004217a:	032d      	lsls	r5, r5, #12
1004217c:	0b2d      	lsrs	r5, r5, #12
1004217e:	e003      	b.n	10042188 <__aeabi_i2d+0x3c>
10042180:	2400      	movs	r4, #0
10042182:	2300      	movs	r3, #0
10042184:	2500      	movs	r5, #0
10042186:	2600      	movs	r6, #0
10042188:	051b      	lsls	r3, r3, #20
1004218a:	432b      	orrs	r3, r5
1004218c:	07e4      	lsls	r4, r4, #31
1004218e:	4323      	orrs	r3, r4
10042190:	0030      	movs	r0, r6
10042192:	0019      	movs	r1, r3
10042194:	bd70      	pop	{r4, r5, r6, pc}
10042196:	380b      	subs	r0, #11
10042198:	4085      	lsls	r5, r0
1004219a:	032d      	lsls	r5, r5, #12
1004219c:	2600      	movs	r6, #0
1004219e:	0b2d      	lsrs	r5, r5, #12
100421a0:	e7f2      	b.n	10042188 <__aeabi_i2d+0x3c>
100421a2:	46c0      	nop			@ (mov r8, r8)
100421a4:	0000041e 	.word	0x0000041e

100421a8 <__aeabi_ui2d>:
100421a8:	b510      	push	{r4, lr}
100421aa:	1e04      	subs	r4, r0, #0
100421ac:	d010      	beq.n	100421d0 <__aeabi_ui2d+0x28>
100421ae:	f000 f85d 	bl	1004226c <__clzsi2>
100421b2:	4b0e      	ldr	r3, [pc, #56]	@ (100421ec <__aeabi_ui2d+0x44>)
100421b4:	1a1b      	subs	r3, r3, r0
100421b6:	055b      	lsls	r3, r3, #21
100421b8:	0d5b      	lsrs	r3, r3, #21
100421ba:	280a      	cmp	r0, #10
100421bc:	dc0f      	bgt.n	100421de <__aeabi_ui2d+0x36>
100421be:	220b      	movs	r2, #11
100421c0:	0021      	movs	r1, r4
100421c2:	1a12      	subs	r2, r2, r0
100421c4:	40d1      	lsrs	r1, r2
100421c6:	3015      	adds	r0, #21
100421c8:	030a      	lsls	r2, r1, #12
100421ca:	4084      	lsls	r4, r0
100421cc:	0b12      	lsrs	r2, r2, #12
100421ce:	e001      	b.n	100421d4 <__aeabi_ui2d+0x2c>
100421d0:	2300      	movs	r3, #0
100421d2:	2200      	movs	r2, #0
100421d4:	051b      	lsls	r3, r3, #20
100421d6:	4313      	orrs	r3, r2
100421d8:	0020      	movs	r0, r4
100421da:	0019      	movs	r1, r3
100421dc:	bd10      	pop	{r4, pc}
100421de:	0022      	movs	r2, r4
100421e0:	380b      	subs	r0, #11
100421e2:	4082      	lsls	r2, r0
100421e4:	0312      	lsls	r2, r2, #12
100421e6:	2400      	movs	r4, #0
100421e8:	0b12      	lsrs	r2, r2, #12
100421ea:	e7f3      	b.n	100421d4 <__aeabi_ui2d+0x2c>
100421ec:	0000041e 	.word	0x0000041e

100421f0 <__aeabi_cdrcmple>:
100421f0:	4684      	mov	ip, r0
100421f2:	0010      	movs	r0, r2
100421f4:	4662      	mov	r2, ip
100421f6:	468c      	mov	ip, r1
100421f8:	0019      	movs	r1, r3
100421fa:	4663      	mov	r3, ip
100421fc:	e000      	b.n	10042200 <__aeabi_cdcmpeq>
100421fe:	46c0      	nop			@ (mov r8, r8)

10042200 <__aeabi_cdcmpeq>:
10042200:	b51f      	push	{r0, r1, r2, r3, r4, lr}
10042202:	f000 f915 	bl	10042430 <__ledf2>
10042206:	2800      	cmp	r0, #0
10042208:	d401      	bmi.n	1004220e <__aeabi_cdcmpeq+0xe>
1004220a:	2100      	movs	r1, #0
1004220c:	42c8      	cmn	r0, r1
1004220e:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

10042210 <__aeabi_dcmpeq>:
10042210:	b510      	push	{r4, lr}
10042212:	f000 f855 	bl	100422c0 <__eqdf2>
10042216:	4240      	negs	r0, r0
10042218:	3001      	adds	r0, #1
1004221a:	bd10      	pop	{r4, pc}

1004221c <__aeabi_dcmplt>:
1004221c:	b510      	push	{r4, lr}
1004221e:	f000 f907 	bl	10042430 <__ledf2>
10042222:	2800      	cmp	r0, #0
10042224:	db01      	blt.n	1004222a <__aeabi_dcmplt+0xe>
10042226:	2000      	movs	r0, #0
10042228:	bd10      	pop	{r4, pc}
1004222a:	2001      	movs	r0, #1
1004222c:	bd10      	pop	{r4, pc}
1004222e:	46c0      	nop			@ (mov r8, r8)

10042230 <__aeabi_dcmple>:
10042230:	b510      	push	{r4, lr}
10042232:	f000 f8fd 	bl	10042430 <__ledf2>
10042236:	2800      	cmp	r0, #0
10042238:	dd01      	ble.n	1004223e <__aeabi_dcmple+0xe>
1004223a:	2000      	movs	r0, #0
1004223c:	bd10      	pop	{r4, pc}
1004223e:	2001      	movs	r0, #1
10042240:	bd10      	pop	{r4, pc}
10042242:	46c0      	nop			@ (mov r8, r8)

10042244 <__aeabi_dcmpgt>:
10042244:	b510      	push	{r4, lr}
10042246:	f000 f87f 	bl	10042348 <__gedf2>
1004224a:	2800      	cmp	r0, #0
1004224c:	dc01      	bgt.n	10042252 <__aeabi_dcmpgt+0xe>
1004224e:	2000      	movs	r0, #0
10042250:	bd10      	pop	{r4, pc}
10042252:	2001      	movs	r0, #1
10042254:	bd10      	pop	{r4, pc}
10042256:	46c0      	nop			@ (mov r8, r8)

10042258 <__aeabi_dcmpge>:
10042258:	b510      	push	{r4, lr}
1004225a:	f000 f875 	bl	10042348 <__gedf2>
1004225e:	2800      	cmp	r0, #0
10042260:	da01      	bge.n	10042266 <__aeabi_dcmpge+0xe>
10042262:	2000      	movs	r0, #0
10042264:	bd10      	pop	{r4, pc}
10042266:	2001      	movs	r0, #1
10042268:	bd10      	pop	{r4, pc}
1004226a:	46c0      	nop			@ (mov r8, r8)

1004226c <__clzsi2>:
1004226c:	211c      	movs	r1, #28
1004226e:	2301      	movs	r3, #1
10042270:	041b      	lsls	r3, r3, #16
10042272:	4298      	cmp	r0, r3
10042274:	d301      	bcc.n	1004227a <__clzsi2+0xe>
10042276:	0c00      	lsrs	r0, r0, #16
10042278:	3910      	subs	r1, #16
1004227a:	0a1b      	lsrs	r3, r3, #8
1004227c:	4298      	cmp	r0, r3
1004227e:	d301      	bcc.n	10042284 <__clzsi2+0x18>
10042280:	0a00      	lsrs	r0, r0, #8
10042282:	3908      	subs	r1, #8
10042284:	091b      	lsrs	r3, r3, #4
10042286:	4298      	cmp	r0, r3
10042288:	d301      	bcc.n	1004228e <__clzsi2+0x22>
1004228a:	0900      	lsrs	r0, r0, #4
1004228c:	3904      	subs	r1, #4
1004228e:	a202      	add	r2, pc, #8	@ (adr r2, 10042298 <__clzsi2+0x2c>)
10042290:	5c10      	ldrb	r0, [r2, r0]
10042292:	1840      	adds	r0, r0, r1
10042294:	4770      	bx	lr
10042296:	46c0      	nop			@ (mov r8, r8)
10042298:	02020304 	.word	0x02020304
1004229c:	01010101 	.word	0x01010101
	...

100422a8 <__clzdi2>:
100422a8:	b510      	push	{r4, lr}
100422aa:	2900      	cmp	r1, #0
100422ac:	d103      	bne.n	100422b6 <__clzdi2+0xe>
100422ae:	f7ff ffdd 	bl	1004226c <__clzsi2>
100422b2:	3020      	adds	r0, #32
100422b4:	e002      	b.n	100422bc <__clzdi2+0x14>
100422b6:	0008      	movs	r0, r1
100422b8:	f7ff ffd8 	bl	1004226c <__clzsi2>
100422bc:	bd10      	pop	{r4, pc}
100422be:	46c0      	nop			@ (mov r8, r8)

100422c0 <__eqdf2>:
100422c0:	b5f0      	push	{r4, r5, r6, r7, lr}
100422c2:	4657      	mov	r7, sl
100422c4:	46de      	mov	lr, fp
100422c6:	464e      	mov	r6, r9
100422c8:	4645      	mov	r5, r8
100422ca:	b5e0      	push	{r5, r6, r7, lr}
100422cc:	000d      	movs	r5, r1
100422ce:	0004      	movs	r4, r0
100422d0:	0fe8      	lsrs	r0, r5, #31
100422d2:	4683      	mov	fp, r0
100422d4:	0309      	lsls	r1, r1, #12
100422d6:	0fd8      	lsrs	r0, r3, #31
100422d8:	0b09      	lsrs	r1, r1, #12
100422da:	4682      	mov	sl, r0
100422dc:	4819      	ldr	r0, [pc, #100]	@ (10042344 <__eqdf2+0x84>)
100422de:	468c      	mov	ip, r1
100422e0:	031f      	lsls	r7, r3, #12
100422e2:	0069      	lsls	r1, r5, #1
100422e4:	005e      	lsls	r6, r3, #1
100422e6:	0d49      	lsrs	r1, r1, #21
100422e8:	0b3f      	lsrs	r7, r7, #12
100422ea:	0d76      	lsrs	r6, r6, #21
100422ec:	4281      	cmp	r1, r0
100422ee:	d018      	beq.n	10042322 <__eqdf2+0x62>
100422f0:	4286      	cmp	r6, r0
100422f2:	d00f      	beq.n	10042314 <__eqdf2+0x54>
100422f4:	2001      	movs	r0, #1
100422f6:	42b1      	cmp	r1, r6
100422f8:	d10d      	bne.n	10042316 <__eqdf2+0x56>
100422fa:	45bc      	cmp	ip, r7
100422fc:	d10b      	bne.n	10042316 <__eqdf2+0x56>
100422fe:	4294      	cmp	r4, r2
10042300:	d109      	bne.n	10042316 <__eqdf2+0x56>
10042302:	45d3      	cmp	fp, sl
10042304:	d01c      	beq.n	10042340 <__eqdf2+0x80>
10042306:	2900      	cmp	r1, #0
10042308:	d105      	bne.n	10042316 <__eqdf2+0x56>
1004230a:	4660      	mov	r0, ip
1004230c:	4320      	orrs	r0, r4
1004230e:	1e43      	subs	r3, r0, #1
10042310:	4198      	sbcs	r0, r3
10042312:	e000      	b.n	10042316 <__eqdf2+0x56>
10042314:	2001      	movs	r0, #1
10042316:	bcf0      	pop	{r4, r5, r6, r7}
10042318:	46bb      	mov	fp, r7
1004231a:	46b2      	mov	sl, r6
1004231c:	46a9      	mov	r9, r5
1004231e:	46a0      	mov	r8, r4
10042320:	bdf0      	pop	{r4, r5, r6, r7, pc}
10042322:	2001      	movs	r0, #1
10042324:	428e      	cmp	r6, r1
10042326:	d1f6      	bne.n	10042316 <__eqdf2+0x56>
10042328:	4661      	mov	r1, ip
1004232a:	4339      	orrs	r1, r7
1004232c:	000f      	movs	r7, r1
1004232e:	4317      	orrs	r7, r2
10042330:	4327      	orrs	r7, r4
10042332:	d1f0      	bne.n	10042316 <__eqdf2+0x56>
10042334:	465b      	mov	r3, fp
10042336:	4652      	mov	r2, sl
10042338:	1a98      	subs	r0, r3, r2
1004233a:	1e43      	subs	r3, r0, #1
1004233c:	4198      	sbcs	r0, r3
1004233e:	e7ea      	b.n	10042316 <__eqdf2+0x56>
10042340:	2000      	movs	r0, #0
10042342:	e7e8      	b.n	10042316 <__eqdf2+0x56>
10042344:	000007ff 	.word	0x000007ff

10042348 <__gedf2>:
10042348:	b5f0      	push	{r4, r5, r6, r7, lr}
1004234a:	4657      	mov	r7, sl
1004234c:	464e      	mov	r6, r9
1004234e:	4645      	mov	r5, r8
10042350:	46de      	mov	lr, fp
10042352:	b5e0      	push	{r5, r6, r7, lr}
10042354:	000d      	movs	r5, r1
10042356:	030f      	lsls	r7, r1, #12
10042358:	0b39      	lsrs	r1, r7, #12
1004235a:	b083      	sub	sp, #12
1004235c:	0004      	movs	r4, r0
1004235e:	4680      	mov	r8, r0
10042360:	9101      	str	r1, [sp, #4]
10042362:	0058      	lsls	r0, r3, #1
10042364:	0fe9      	lsrs	r1, r5, #31
10042366:	4f31      	ldr	r7, [pc, #196]	@ (1004242c <__gedf2+0xe4>)
10042368:	0d40      	lsrs	r0, r0, #21
1004236a:	468c      	mov	ip, r1
1004236c:	006e      	lsls	r6, r5, #1
1004236e:	0319      	lsls	r1, r3, #12
10042370:	4682      	mov	sl, r0
10042372:	4691      	mov	r9, r2
10042374:	0d76      	lsrs	r6, r6, #21
10042376:	0b09      	lsrs	r1, r1, #12
10042378:	0fd8      	lsrs	r0, r3, #31
1004237a:	42be      	cmp	r6, r7
1004237c:	d01f      	beq.n	100423be <__gedf2+0x76>
1004237e:	45ba      	cmp	sl, r7
10042380:	d00f      	beq.n	100423a2 <__gedf2+0x5a>
10042382:	2e00      	cmp	r6, #0
10042384:	d12f      	bne.n	100423e6 <__gedf2+0x9e>
10042386:	4655      	mov	r5, sl
10042388:	9e01      	ldr	r6, [sp, #4]
1004238a:	4334      	orrs	r4, r6
1004238c:	2d00      	cmp	r5, #0
1004238e:	d127      	bne.n	100423e0 <__gedf2+0x98>
10042390:	430a      	orrs	r2, r1
10042392:	d03a      	beq.n	1004240a <__gedf2+0xc2>
10042394:	2c00      	cmp	r4, #0
10042396:	d145      	bne.n	10042424 <__gedf2+0xdc>
10042398:	2800      	cmp	r0, #0
1004239a:	d11a      	bne.n	100423d2 <__gedf2+0x8a>
1004239c:	2001      	movs	r0, #1
1004239e:	4240      	negs	r0, r0
100423a0:	e017      	b.n	100423d2 <__gedf2+0x8a>
100423a2:	4311      	orrs	r1, r2
100423a4:	d13b      	bne.n	1004241e <__gedf2+0xd6>
100423a6:	2e00      	cmp	r6, #0
100423a8:	d102      	bne.n	100423b0 <__gedf2+0x68>
100423aa:	9f01      	ldr	r7, [sp, #4]
100423ac:	4327      	orrs	r7, r4
100423ae:	d0f3      	beq.n	10042398 <__gedf2+0x50>
100423b0:	4584      	cmp	ip, r0
100423b2:	d109      	bne.n	100423c8 <__gedf2+0x80>
100423b4:	4663      	mov	r3, ip
100423b6:	2b00      	cmp	r3, #0
100423b8:	d0f0      	beq.n	1004239c <__gedf2+0x54>
100423ba:	4660      	mov	r0, ip
100423bc:	e009      	b.n	100423d2 <__gedf2+0x8a>
100423be:	9f01      	ldr	r7, [sp, #4]
100423c0:	4327      	orrs	r7, r4
100423c2:	d12c      	bne.n	1004241e <__gedf2+0xd6>
100423c4:	45b2      	cmp	sl, r6
100423c6:	d024      	beq.n	10042412 <__gedf2+0xca>
100423c8:	4663      	mov	r3, ip
100423ca:	2002      	movs	r0, #2
100423cc:	3b01      	subs	r3, #1
100423ce:	4018      	ands	r0, r3
100423d0:	3801      	subs	r0, #1
100423d2:	b003      	add	sp, #12
100423d4:	bcf0      	pop	{r4, r5, r6, r7}
100423d6:	46bb      	mov	fp, r7
100423d8:	46b2      	mov	sl, r6
100423da:	46a9      	mov	r9, r5
100423dc:	46a0      	mov	r8, r4
100423de:	bdf0      	pop	{r4, r5, r6, r7, pc}
100423e0:	2c00      	cmp	r4, #0
100423e2:	d0d9      	beq.n	10042398 <__gedf2+0x50>
100423e4:	e7e4      	b.n	100423b0 <__gedf2+0x68>
100423e6:	4654      	mov	r4, sl
100423e8:	2c00      	cmp	r4, #0
100423ea:	d0ed      	beq.n	100423c8 <__gedf2+0x80>
100423ec:	4584      	cmp	ip, r0
100423ee:	d1eb      	bne.n	100423c8 <__gedf2+0x80>
100423f0:	4556      	cmp	r6, sl
100423f2:	dce9      	bgt.n	100423c8 <__gedf2+0x80>
100423f4:	dbde      	blt.n	100423b4 <__gedf2+0x6c>
100423f6:	9b01      	ldr	r3, [sp, #4]
100423f8:	428b      	cmp	r3, r1
100423fa:	d8e5      	bhi.n	100423c8 <__gedf2+0x80>
100423fc:	d1da      	bne.n	100423b4 <__gedf2+0x6c>
100423fe:	45c8      	cmp	r8, r9
10042400:	d8e2      	bhi.n	100423c8 <__gedf2+0x80>
10042402:	2000      	movs	r0, #0
10042404:	45c8      	cmp	r8, r9
10042406:	d2e4      	bcs.n	100423d2 <__gedf2+0x8a>
10042408:	e7d4      	b.n	100423b4 <__gedf2+0x6c>
1004240a:	2000      	movs	r0, #0
1004240c:	2c00      	cmp	r4, #0
1004240e:	d0e0      	beq.n	100423d2 <__gedf2+0x8a>
10042410:	e7da      	b.n	100423c8 <__gedf2+0x80>
10042412:	4311      	orrs	r1, r2
10042414:	d103      	bne.n	1004241e <__gedf2+0xd6>
10042416:	4584      	cmp	ip, r0
10042418:	d1d6      	bne.n	100423c8 <__gedf2+0x80>
1004241a:	2000      	movs	r0, #0
1004241c:	e7d9      	b.n	100423d2 <__gedf2+0x8a>
1004241e:	2002      	movs	r0, #2
10042420:	4240      	negs	r0, r0
10042422:	e7d6      	b.n	100423d2 <__gedf2+0x8a>
10042424:	4584      	cmp	ip, r0
10042426:	d0e6      	beq.n	100423f6 <__gedf2+0xae>
10042428:	e7ce      	b.n	100423c8 <__gedf2+0x80>
1004242a:	46c0      	nop			@ (mov r8, r8)
1004242c:	000007ff 	.word	0x000007ff

10042430 <__ledf2>:
10042430:	b5f0      	push	{r4, r5, r6, r7, lr}
10042432:	4657      	mov	r7, sl
10042434:	464e      	mov	r6, r9
10042436:	4645      	mov	r5, r8
10042438:	46de      	mov	lr, fp
1004243a:	b5e0      	push	{r5, r6, r7, lr}
1004243c:	000d      	movs	r5, r1
1004243e:	030f      	lsls	r7, r1, #12
10042440:	0004      	movs	r4, r0
10042442:	4680      	mov	r8, r0
10042444:	0fe8      	lsrs	r0, r5, #31
10042446:	0b39      	lsrs	r1, r7, #12
10042448:	4684      	mov	ip, r0
1004244a:	b083      	sub	sp, #12
1004244c:	0058      	lsls	r0, r3, #1
1004244e:	4f30      	ldr	r7, [pc, #192]	@ (10042510 <__ledf2+0xe0>)
10042450:	0d40      	lsrs	r0, r0, #21
10042452:	9101      	str	r1, [sp, #4]
10042454:	031e      	lsls	r6, r3, #12
10042456:	0069      	lsls	r1, r5, #1
10042458:	4682      	mov	sl, r0
1004245a:	4691      	mov	r9, r2
1004245c:	0d49      	lsrs	r1, r1, #21
1004245e:	0b36      	lsrs	r6, r6, #12
10042460:	0fd8      	lsrs	r0, r3, #31
10042462:	42b9      	cmp	r1, r7
10042464:	d020      	beq.n	100424a8 <__ledf2+0x78>
10042466:	45ba      	cmp	sl, r7
10042468:	d00f      	beq.n	1004248a <__ledf2+0x5a>
1004246a:	2900      	cmp	r1, #0
1004246c:	d12b      	bne.n	100424c6 <__ledf2+0x96>
1004246e:	9901      	ldr	r1, [sp, #4]
10042470:	430c      	orrs	r4, r1
10042472:	4651      	mov	r1, sl
10042474:	2900      	cmp	r1, #0
10042476:	d137      	bne.n	100424e8 <__ledf2+0xb8>
10042478:	4332      	orrs	r2, r6
1004247a:	d038      	beq.n	100424ee <__ledf2+0xbe>
1004247c:	2c00      	cmp	r4, #0
1004247e:	d144      	bne.n	1004250a <__ledf2+0xda>
10042480:	2800      	cmp	r0, #0
10042482:	d119      	bne.n	100424b8 <__ledf2+0x88>
10042484:	2001      	movs	r0, #1
10042486:	4240      	negs	r0, r0
10042488:	e016      	b.n	100424b8 <__ledf2+0x88>
1004248a:	4316      	orrs	r6, r2
1004248c:	d113      	bne.n	100424b6 <__ledf2+0x86>
1004248e:	2900      	cmp	r1, #0
10042490:	d102      	bne.n	10042498 <__ledf2+0x68>
10042492:	9f01      	ldr	r7, [sp, #4]
10042494:	4327      	orrs	r7, r4
10042496:	d0f3      	beq.n	10042480 <__ledf2+0x50>
10042498:	4584      	cmp	ip, r0
1004249a:	d020      	beq.n	100424de <__ledf2+0xae>
1004249c:	4663      	mov	r3, ip
1004249e:	2002      	movs	r0, #2
100424a0:	3b01      	subs	r3, #1
100424a2:	4018      	ands	r0, r3
100424a4:	3801      	subs	r0, #1
100424a6:	e007      	b.n	100424b8 <__ledf2+0x88>
100424a8:	9f01      	ldr	r7, [sp, #4]
100424aa:	4327      	orrs	r7, r4
100424ac:	d103      	bne.n	100424b6 <__ledf2+0x86>
100424ae:	458a      	cmp	sl, r1
100424b0:	d1f4      	bne.n	1004249c <__ledf2+0x6c>
100424b2:	4316      	orrs	r6, r2
100424b4:	d01f      	beq.n	100424f6 <__ledf2+0xc6>
100424b6:	2002      	movs	r0, #2
100424b8:	b003      	add	sp, #12
100424ba:	bcf0      	pop	{r4, r5, r6, r7}
100424bc:	46bb      	mov	fp, r7
100424be:	46b2      	mov	sl, r6
100424c0:	46a9      	mov	r9, r5
100424c2:	46a0      	mov	r8, r4
100424c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
100424c6:	4654      	mov	r4, sl
100424c8:	2c00      	cmp	r4, #0
100424ca:	d0e7      	beq.n	1004249c <__ledf2+0x6c>
100424cc:	4584      	cmp	ip, r0
100424ce:	d1e5      	bne.n	1004249c <__ledf2+0x6c>
100424d0:	4551      	cmp	r1, sl
100424d2:	dce3      	bgt.n	1004249c <__ledf2+0x6c>
100424d4:	db03      	blt.n	100424de <__ledf2+0xae>
100424d6:	9b01      	ldr	r3, [sp, #4]
100424d8:	42b3      	cmp	r3, r6
100424da:	d8df      	bhi.n	1004249c <__ledf2+0x6c>
100424dc:	d00f      	beq.n	100424fe <__ledf2+0xce>
100424de:	4663      	mov	r3, ip
100424e0:	2b00      	cmp	r3, #0
100424e2:	d0cf      	beq.n	10042484 <__ledf2+0x54>
100424e4:	4660      	mov	r0, ip
100424e6:	e7e7      	b.n	100424b8 <__ledf2+0x88>
100424e8:	2c00      	cmp	r4, #0
100424ea:	d0c9      	beq.n	10042480 <__ledf2+0x50>
100424ec:	e7d4      	b.n	10042498 <__ledf2+0x68>
100424ee:	2000      	movs	r0, #0
100424f0:	2c00      	cmp	r4, #0
100424f2:	d0e1      	beq.n	100424b8 <__ledf2+0x88>
100424f4:	e7d2      	b.n	1004249c <__ledf2+0x6c>
100424f6:	4584      	cmp	ip, r0
100424f8:	d1d0      	bne.n	1004249c <__ledf2+0x6c>
100424fa:	2000      	movs	r0, #0
100424fc:	e7dc      	b.n	100424b8 <__ledf2+0x88>
100424fe:	45c8      	cmp	r8, r9
10042500:	d8cc      	bhi.n	1004249c <__ledf2+0x6c>
10042502:	2000      	movs	r0, #0
10042504:	45c8      	cmp	r8, r9
10042506:	d2d7      	bcs.n	100424b8 <__ledf2+0x88>
10042508:	e7e9      	b.n	100424de <__ledf2+0xae>
1004250a:	4584      	cmp	ip, r0
1004250c:	d0e3      	beq.n	100424d6 <__ledf2+0xa6>
1004250e:	e7c5      	b.n	1004249c <__ledf2+0x6c>
10042510:	000007ff 	.word	0x000007ff

10042514 <LL_PWR_EnableGPIOPullUp>:
  *         @arg @ref LL_PWR_GPIO_BIT_14
  *         @arg @ref LL_PWR_GPIO_BIT_15
  * @retval None
  */
__STATIC_INLINE void LL_PWR_EnableGPIOPullUp(uint32_t GPIO, uint32_t GPIONumber)
{
10042514:	b580      	push	{r7, lr}
10042516:	b082      	sub	sp, #8
10042518:	af00      	add	r7, sp, #0
1004251a:	6078      	str	r0, [r7, #4]
1004251c:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(*((__IO uint32_t *)(GPIO + 4UL)), GPIONumber);
1004251e:	687b      	ldr	r3, [r7, #4]
10042520:	3304      	adds	r3, #4
10042522:	681a      	ldr	r2, [r3, #0]
10042524:	683b      	ldr	r3, [r7, #0]
10042526:	43d9      	mvns	r1, r3
10042528:	687b      	ldr	r3, [r7, #4]
1004252a:	3304      	adds	r3, #4
1004252c:	400a      	ands	r2, r1
1004252e:	601a      	str	r2, [r3, #0]
  SET_BIT(*((__IO uint32_t *)GPIO), GPIONumber);
10042530:	687b      	ldr	r3, [r7, #4]
10042532:	6819      	ldr	r1, [r3, #0]
10042534:	687b      	ldr	r3, [r7, #4]
10042536:	683a      	ldr	r2, [r7, #0]
10042538:	430a      	orrs	r2, r1
1004253a:	601a      	str	r2, [r3, #0]
}
1004253c:	46c0      	nop			@ (mov r8, r8)
1004253e:	46bd      	mov	sp, r7
10042540:	b002      	add	sp, #8
10042542:	bd80      	pop	{r7, pc}

10042544 <LL_PWR_SetNoPullA>:
  *         @arg @ref LL_PWR_GPIO_BIT_15(*)
  *         (*) available only on STM32WB06 and STM32WB07 devices
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SetNoPullA(uint32_t GPIONumber)
{
10042544:	b580      	push	{r7, lr}
10042546:	b082      	sub	sp, #8
10042548:	af00      	add	r7, sp, #0
1004254a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(PWR->PUCRA, GPIONumber);
1004254c:	4b08      	ldr	r3, [pc, #32]	@ (10042570 <LL_PWR_SetNoPullA+0x2c>)
1004254e:	6a1a      	ldr	r2, [r3, #32]
10042550:	687b      	ldr	r3, [r7, #4]
10042552:	43d9      	mvns	r1, r3
10042554:	4b06      	ldr	r3, [pc, #24]	@ (10042570 <LL_PWR_SetNoPullA+0x2c>)
10042556:	400a      	ands	r2, r1
10042558:	621a      	str	r2, [r3, #32]
  CLEAR_BIT(PWR->PDCRA, GPIONumber);
1004255a:	4b05      	ldr	r3, [pc, #20]	@ (10042570 <LL_PWR_SetNoPullA+0x2c>)
1004255c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
1004255e:	687b      	ldr	r3, [r7, #4]
10042560:	43d9      	mvns	r1, r3
10042562:	4b03      	ldr	r3, [pc, #12]	@ (10042570 <LL_PWR_SetNoPullA+0x2c>)
10042564:	400a      	ands	r2, r1
10042566:	625a      	str	r2, [r3, #36]	@ 0x24
}
10042568:	46c0      	nop			@ (mov r8, r8)
1004256a:	46bd      	mov	sp, r7
1004256c:	b002      	add	sp, #8
1004256e:	bd80      	pop	{r7, pc}
10042570:	48500000 	.word	0x48500000

10042574 <LL_PWR_SetNoPullB>:
  *         @arg @ref LL_PWR_GPIO_BIT_15
  *         (*) available only oon STM32WB06 and STM32WB07 devices
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SetNoPullB(uint32_t GPIONumber)
{
10042574:	b580      	push	{r7, lr}
10042576:	b082      	sub	sp, #8
10042578:	af00      	add	r7, sp, #0
1004257a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(PWR->PUCRB, GPIONumber);
1004257c:	4b08      	ldr	r3, [pc, #32]	@ (100425a0 <LL_PWR_SetNoPullB+0x2c>)
1004257e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
10042580:	687b      	ldr	r3, [r7, #4]
10042582:	43d9      	mvns	r1, r3
10042584:	4b06      	ldr	r3, [pc, #24]	@ (100425a0 <LL_PWR_SetNoPullB+0x2c>)
10042586:	400a      	ands	r2, r1
10042588:	629a      	str	r2, [r3, #40]	@ 0x28
  CLEAR_BIT(PWR->PDCRB, GPIONumber);
1004258a:	4b05      	ldr	r3, [pc, #20]	@ (100425a0 <LL_PWR_SetNoPullB+0x2c>)
1004258c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
1004258e:	687b      	ldr	r3, [r7, #4]
10042590:	43d9      	mvns	r1, r3
10042592:	4b03      	ldr	r3, [pc, #12]	@ (100425a0 <LL_PWR_SetNoPullB+0x2c>)
10042594:	400a      	ands	r2, r1
10042596:	62da      	str	r2, [r3, #44]	@ 0x2c
}
10042598:	46c0      	nop			@ (mov r8, r8)
1004259a:	46bd      	mov	sp, r7
1004259c:	b002      	add	sp, #8
1004259e:	bd80      	pop	{r7, pc}
100425a0:	48500000 	.word	0x48500000

100425a4 <LL_RADIO_TIMER_GetAbsoluteTime>:
  * @brief  Get the Absolute Time of the wakeup timer (Granularity unit is 16 x slow clock period).
  * @param  WAKEUPx Radio Timer instance
  * @retval Absolute Time of Wakeup Timer
  */
__STATIC_INLINE uint32_t LL_RADIO_TIMER_GetAbsoluteTime(WAKEUP_TypeDef *WAKEUPx)
{
100425a4:	b580      	push	{r7, lr}
100425a6:	b082      	sub	sp, #8
100425a8:	af00      	add	r7, sp, #0
100425aa:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_REG(WAKEUPx->ABSOLUTE_TIME));
100425ac:	687b      	ldr	r3, [r7, #4]
100425ae:	691b      	ldr	r3, [r3, #16]
}
100425b0:	0018      	movs	r0, r3
100425b2:	46bd      	mov	sp, r7
100425b4:	b002      	add	sp, #8
100425b6:	bd80      	pop	{r7, pc}

100425b8 <LL_AHB1_GRP1_EnableClock>:
  * @arg LL_AHB1_GRP1_PERIPH_RNG
  * @retval None
  * @note   LL_AHB1_GRP1_PERIPH_PKA
  */
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
100425b8:	b580      	push	{r7, lr}
100425ba:	b084      	sub	sp, #16
100425bc:	af00      	add	r7, sp, #0
100425be:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHBENR, Periphs);
100425c0:	4b07      	ldr	r3, [pc, #28]	@ (100425e0 <LL_AHB1_GRP1_EnableClock+0x28>)
100425c2:	6d19      	ldr	r1, [r3, #80]	@ 0x50
100425c4:	4b06      	ldr	r3, [pc, #24]	@ (100425e0 <LL_AHB1_GRP1_EnableClock+0x28>)
100425c6:	687a      	ldr	r2, [r7, #4]
100425c8:	430a      	orrs	r2, r1
100425ca:	651a      	str	r2, [r3, #80]	@ 0x50
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
100425cc:	4b04      	ldr	r3, [pc, #16]	@ (100425e0 <LL_AHB1_GRP1_EnableClock+0x28>)
100425ce:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
100425d0:	687a      	ldr	r2, [r7, #4]
100425d2:	4013      	ands	r3, r2
100425d4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
100425d6:	68fb      	ldr	r3, [r7, #12]
}
100425d8:	46c0      	nop			@ (mov r8, r8)
100425da:	46bd      	mov	sp, r7
100425dc:	b004      	add	sp, #16
100425de:	bd80      	pop	{r7, pc}
100425e0:	48400000 	.word	0x48400000

100425e4 <LL_APB2_GRP1_EnableClock>:
  * @arg LL_APB2_GRP1_PERIPH_MRBLE
  * @retval None
  * @note   LL_APB2_GRP1_PERIPH_MRBLE
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
100425e4:	b580      	push	{r7, lr}
100425e6:	b084      	sub	sp, #16
100425e8:	af00      	add	r7, sp, #0
100425ea:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
100425ec:	4b07      	ldr	r3, [pc, #28]	@ (1004260c <LL_APB2_GRP1_EnableClock+0x28>)
100425ee:	6e19      	ldr	r1, [r3, #96]	@ 0x60
100425f0:	4b06      	ldr	r3, [pc, #24]	@ (1004260c <LL_APB2_GRP1_EnableClock+0x28>)
100425f2:	687a      	ldr	r2, [r7, #4]
100425f4:	430a      	orrs	r2, r1
100425f6:	661a      	str	r2, [r3, #96]	@ 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
100425f8:	4b04      	ldr	r3, [pc, #16]	@ (1004260c <LL_APB2_GRP1_EnableClock+0x28>)
100425fa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
100425fc:	687a      	ldr	r2, [r7, #4]
100425fe:	4013      	ands	r3, r2
10042600:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
10042602:	68fb      	ldr	r3, [r7, #12]
}
10042604:	46c0      	nop			@ (mov r8, r8)
10042606:	46bd      	mov	sp, r7
10042608:	b004      	add	sp, #16
1004260a:	bd80      	pop	{r7, pc}
1004260c:	48400000 	.word	0x48400000

10042610 <LL_APB2_GRP1_IsEnabledClock>:
  * @arg LL_APB2_GRP1_PERIPH_MRBLE
  * @retval uint32_t
  * @note   LL_APB2_GRP1_PERIPH_MRBLE
  */
__STATIC_INLINE uint32_t LL_APB2_GRP1_IsEnabledClock(uint32_t Periphs)
{
10042610:	b580      	push	{r7, lr}
10042612:	b082      	sub	sp, #8
10042614:	af00      	add	r7, sp, #0
10042616:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(RCC->APB2ENR, Periphs) == (Periphs)) ? 1UL : 0UL);
10042618:	4b06      	ldr	r3, [pc, #24]	@ (10042634 <LL_APB2_GRP1_IsEnabledClock+0x24>)
1004261a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
1004261c:	687a      	ldr	r2, [r7, #4]
1004261e:	4013      	ands	r3, r2
10042620:	687a      	ldr	r2, [r7, #4]
10042622:	429a      	cmp	r2, r3
10042624:	d101      	bne.n	1004262a <LL_APB2_GRP1_IsEnabledClock+0x1a>
10042626:	2301      	movs	r3, #1
10042628:	e000      	b.n	1004262c <LL_APB2_GRP1_IsEnabledClock+0x1c>
1004262a:	2300      	movs	r3, #0
}
1004262c:	0018      	movs	r0, r3
1004262e:	46bd      	mov	sp, r7
10042630:	b002      	add	sp, #8
10042632:	bd80      	pop	{r7, pc}
10042634:	48400000 	.word	0x48400000

10042638 <LL_APB2_GRP1_ForceReset>:
  * @arg LL_APB2_GRP1_PERIPH_MRBLE
  * @retval None
  * @note   LL_APB2_GRP1_PERIPH_MRBLE
  */
__STATIC_INLINE void LL_APB2_GRP1_ForceReset(uint32_t Periphs)
{
10042638:	b580      	push	{r7, lr}
1004263a:	b082      	sub	sp, #8
1004263c:	af00      	add	r7, sp, #0
1004263e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2RSTR, Periphs);
10042640:	4b04      	ldr	r3, [pc, #16]	@ (10042654 <LL_APB2_GRP1_ForceReset+0x1c>)
10042642:	6c19      	ldr	r1, [r3, #64]	@ 0x40
10042644:	4b03      	ldr	r3, [pc, #12]	@ (10042654 <LL_APB2_GRP1_ForceReset+0x1c>)
10042646:	687a      	ldr	r2, [r7, #4]
10042648:	430a      	orrs	r2, r1
1004264a:	641a      	str	r2, [r3, #64]	@ 0x40
}
1004264c:	46c0      	nop			@ (mov r8, r8)
1004264e:	46bd      	mov	sp, r7
10042650:	b002      	add	sp, #8
10042652:	bd80      	pop	{r7, pc}
10042654:	48400000 	.word	0x48400000

10042658 <LL_APB2_GRP1_ReleaseReset>:
  * @arg LL_APB2_GRP1_PERIPH_MRBLE
  * @retval None
  * @note   LL_APB2_GRP1_PERIPH_MRBLE
  */
__STATIC_INLINE void LL_APB2_GRP1_ReleaseReset(uint32_t Periphs)
{
10042658:	b580      	push	{r7, lr}
1004265a:	b082      	sub	sp, #8
1004265c:	af00      	add	r7, sp, #0
1004265e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB2RSTR, Periphs);
10042660:	4b05      	ldr	r3, [pc, #20]	@ (10042678 <LL_APB2_GRP1_ReleaseReset+0x20>)
10042662:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
10042664:	687b      	ldr	r3, [r7, #4]
10042666:	43d9      	mvns	r1, r3
10042668:	4b03      	ldr	r3, [pc, #12]	@ (10042678 <LL_APB2_GRP1_ReleaseReset+0x20>)
1004266a:	400a      	ands	r2, r1
1004266c:	641a      	str	r2, [r3, #64]	@ 0x40
}
1004266e:	46c0      	nop			@ (mov r8, r8)
10042670:	46bd      	mov	sp, r7
10042672:	b002      	add	sp, #8
10042674:	bd80      	pop	{r7, pc}
10042676:	46c0      	nop			@ (mov r8, r8)
10042678:	48400000 	.word	0x48400000

1004267c <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
1004267c:	b5f0      	push	{r4, r5, r6, r7, lr}
1004267e:	b08d      	sub	sp, #52	@ 0x34
10042680:	af04      	add	r7, sp, #16
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
10042682:	f001 ff97 	bl	100445b4 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
10042686:	f000 f8e3 	bl	10042850 <SystemClock_Config>

	/* Configure the peripherals common clocks */
	PeriphCommonClock_Config();
1004268a:	f000 f918 	bl	100428be <PeriphCommonClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
1004268e:	f000 fa03 	bl	10042a98 <MX_GPIO_Init>
	MX_SPI2_Init();
10042692:	f000 f975 	bl	10042980 <MX_SPI2_Init>
	MX_USART1_UART_Init();
10042696:	f000 f9b1 	bl	100429fc <MX_USART1_UART_Init>
	MX_RADIO_Init();
1004269a:	f000 f92d 	bl	100428f8 <MX_RADIO_Init>
	MX_RADIO_TIMER_Init();
1004269e:	f000 f93b 	bl	10042918 <MX_RADIO_TIMER_Init>
	/* USER CODE BEGIN 2 */
	DW1000_init(&dw1000);
100426a2:	4b5d      	ldr	r3, [pc, #372]	@ (10042818 <main+0x19c>)
100426a4:	0018      	movs	r0, r3
100426a6:	f000 ff51 	bl	1004354c <DW1000_init>
	uint8_t pll_lock = DW1000_config(&dw1000, &dw1000_cfg);
100426aa:	2316      	movs	r3, #22
100426ac:	18fe      	adds	r6, r7, r3
100426ae:	4a5b      	ldr	r2, [pc, #364]	@ (1004281c <main+0x1a0>)
100426b0:	4b59      	ldr	r3, [pc, #356]	@ (10042818 <main+0x19c>)
100426b2:	0011      	movs	r1, r2
100426b4:	0018      	movs	r0, r3
100426b6:	f001 f8a9 	bl	1004380c <DW1000_config>
100426ba:	0003      	movs	r3, r0
100426bc:	7033      	strb	r3, [r6, #0]
	if (pll_lock) {
100426be:	2316      	movs	r3, #22
100426c0:	18fb      	adds	r3, r7, r3
100426c2:	781b      	ldrb	r3, [r3, #0]
100426c4:	2b00      	cmp	r3, #0
100426c6:	d006      	beq.n	100426d6 <main+0x5a>
		hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
100426c8:	4b55      	ldr	r3, [pc, #340]	@ (10042820 <main+0x1a4>)
100426ca:	2208      	movs	r2, #8
100426cc:	61da      	str	r2, [r3, #28]
		HAL_SPI_Init(&hspi2);
100426ce:	4b54      	ldr	r3, [pc, #336]	@ (10042820 <main+0x1a4>)
100426d0:	0018      	movs	r0, r3
100426d2:	f005 ffc3 	bl	1004865c <HAL_SPI_Init>
	}
	uint64_t ID = *((uint64_t*) UID64_BASE);
100426d6:	4b53      	ldr	r3, [pc, #332]	@ (10042824 <main+0x1a8>)
100426d8:	681a      	ldr	r2, [r3, #0]
100426da:	685b      	ldr	r3, [r3, #4]
100426dc:	61ba      	str	r2, [r7, #24]
100426de:	61fb      	str	r3, [r7, #28]
	uint8_t i = 2;
100426e0:	2317      	movs	r3, #23
100426e2:	18fb      	adds	r3, r7, r3
100426e4:	2202      	movs	r2, #2
100426e6:	701a      	strb	r2, [r3, #0]
	sendAckData[0] = 0x1D;
100426e8:	4b4f      	ldr	r3, [pc, #316]	@ (10042828 <main+0x1ac>)
100426ea:	221d      	movs	r2, #29
100426ec:	701a      	strb	r2, [r3, #0]
	sendAckData[1] = 8;
100426ee:	4b4e      	ldr	r3, [pc, #312]	@ (10042828 <main+0x1ac>)
100426f0:	2208      	movs	r2, #8
100426f2:	705a      	strb	r2, [r3, #1]
	do {
		sendAckData[i++] = ID & 0xFF;
100426f4:	2217      	movs	r2, #23
100426f6:	18bb      	adds	r3, r7, r2
100426f8:	781b      	ldrb	r3, [r3, #0]
100426fa:	18ba      	adds	r2, r7, r2
100426fc:	1c59      	adds	r1, r3, #1
100426fe:	7011      	strb	r1, [r2, #0]
10042700:	0019      	movs	r1, r3
10042702:	69ba      	ldr	r2, [r7, #24]
10042704:	69fb      	ldr	r3, [r7, #28]
10042706:	1c13      	adds	r3, r2, #0
10042708:	b2da      	uxtb	r2, r3
1004270a:	4b47      	ldr	r3, [pc, #284]	@ (10042828 <main+0x1ac>)
1004270c:	545a      	strb	r2, [r3, r1]
	} while (ID >>= 8);
1004270e:	69fb      	ldr	r3, [r7, #28]
10042710:	061b      	lsls	r3, r3, #24
10042712:	69ba      	ldr	r2, [r7, #24]
10042714:	0a14      	lsrs	r4, r2, #8
10042716:	431c      	orrs	r4, r3
10042718:	69fb      	ldr	r3, [r7, #28]
1004271a:	0a1d      	lsrs	r5, r3, #8
1004271c:	61bc      	str	r4, [r7, #24]
1004271e:	61fd      	str	r5, [r7, #28]
10042720:	69bb      	ldr	r3, [r7, #24]
10042722:	69fa      	ldr	r2, [r7, #28]
10042724:	4313      	orrs	r3, r2
10042726:	d1e5      	bne.n	100426f4 <main+0x78>
	HAL_RADIO_SetNetworkID(0x88DF88DF);
10042728:	4b40      	ldr	r3, [pc, #256]	@ (1004282c <main+0x1b0>)
1004272a:	0018      	movs	r0, r3
1004272c:	f003 fc2c 	bl	10045f88 <HAL_RADIO_SetNetworkID>
	HAL_RADIO_SetTxPower(0x18);
10042730:	2018      	movs	r0, #24
10042732:	f003 fbff 	bl	10045f34 <HAL_RADIO_SetTxPower>
	HAL_RADIO_ReceivePacketWithAck(beacon_channel, RX_WAKEUP_TIME, receivedData,
10042736:	4b3e      	ldr	r3, [pc, #248]	@ (10042830 <main+0x1b4>)
10042738:	7818      	ldrb	r0, [r3, #0]
1004273a:	4c3b      	ldr	r4, [pc, #236]	@ (10042828 <main+0x1ac>)
1004273c:	4a3d      	ldr	r2, [pc, #244]	@ (10042834 <main+0x1b8>)
1004273e:	23be      	movs	r3, #190	@ 0xbe
10042740:	0059      	lsls	r1, r3, #1
10042742:	4b3d      	ldr	r3, [pc, #244]	@ (10042838 <main+0x1bc>)
10042744:	9302      	str	r3, [sp, #8]
10042746:	23ff      	movs	r3, #255	@ 0xff
10042748:	9301      	str	r3, [sp, #4]
1004274a:	4b3c      	ldr	r3, [pc, #240]	@ (1004283c <main+0x1c0>)
1004274c:	9300      	str	r3, [sp, #0]
1004274e:	0023      	movs	r3, r4
10042750:	f003 fc28 	bl	10045fa4 <HAL_RADIO_ReceivePacketWithAck>
	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
		HAL_RADIO_TIMER_Tick();
10042754:	f004 f800 	bl	10046758 <HAL_RADIO_TIMER_Tick>
		if (ranging == TRUE) {
10042758:	4b39      	ldr	r3, [pc, #228]	@ (10042840 <main+0x1c4>)
1004275a:	781b      	ldrb	r3, [r3, #0]
1004275c:	2b01      	cmp	r3, #1
1004275e:	d147      	bne.n	100427f0 <main+0x174>
			double distance = DW1000_responder(&dw1000, beacon_channel);
10042760:	4b33      	ldr	r3, [pc, #204]	@ (10042830 <main+0x1b4>)
10042762:	781a      	ldrb	r2, [r3, #0]
10042764:	4b2c      	ldr	r3, [pc, #176]	@ (10042818 <main+0x19c>)
10042766:	0011      	movs	r1, r2
10042768:	0018      	movs	r0, r3
1004276a:	f001 fb27 	bl	10043dbc <DW1000_responder>
1004276e:	0002      	movs	r2, r0
10042770:	000b      	movs	r3, r1
10042772:	60ba      	str	r2, [r7, #8]
10042774:	60fb      	str	r3, [r7, #12]
			uint8_t meters = (uint8_t) distance;
10042776:	1dfc      	adds	r4, r7, #7
10042778:	68b8      	ldr	r0, [r7, #8]
1004277a:	68f9      	ldr	r1, [r7, #12]
1004277c:	f7fd fe8e 	bl	1004049c <__aeabi_d2uiz>
10042780:	0003      	movs	r3, r0
10042782:	7023      	strb	r3, [r4, #0]
			uint8_t centimeters = (uint8_t) ((distance - meters) * 100);
10042784:	1dfb      	adds	r3, r7, #7
10042786:	781b      	ldrb	r3, [r3, #0]
10042788:	0018      	movs	r0, r3
1004278a:	f7ff fcdf 	bl	1004214c <__aeabi_i2d>
1004278e:	0002      	movs	r2, r0
10042790:	000b      	movs	r3, r1
10042792:	68b8      	ldr	r0, [r7, #8]
10042794:	68f9      	ldr	r1, [r7, #12]
10042796:	f7ff f901 	bl	1004199c <__aeabi_dsub>
1004279a:	0002      	movs	r2, r0
1004279c:	000b      	movs	r3, r1
1004279e:	0010      	movs	r0, r2
100427a0:	0019      	movs	r1, r3
100427a2:	2200      	movs	r2, #0
100427a4:	4b27      	ldr	r3, [pc, #156]	@ (10042844 <main+0x1c8>)
100427a6:	f7fe fe31 	bl	1004140c <__aeabi_dmul>
100427aa:	0002      	movs	r2, r0
100427ac:	000b      	movs	r3, r1
100427ae:	1dbc      	adds	r4, r7, #6
100427b0:	0010      	movs	r0, r2
100427b2:	0019      	movs	r1, r3
100427b4:	f7fd fe72 	bl	1004049c <__aeabi_d2uiz>
100427b8:	0003      	movs	r3, r0
100427ba:	7023      	strb	r3, [r4, #0]
			if (meters != 0 || centimeters != 0) {
100427bc:	1dfb      	adds	r3, r7, #7
100427be:	781b      	ldrb	r3, [r3, #0]
100427c0:	2b00      	cmp	r3, #0
100427c2:	d103      	bne.n	100427cc <main+0x150>
100427c4:	1dbb      	adds	r3, r7, #6
100427c6:	781b      	ldrb	r3, [r3, #0]
100427c8:	2b00      	cmp	r3, #0
100427ca:	d0c3      	beq.n	10042754 <main+0xd8>
				sendAckData[0] = 0xAE;
100427cc:	4b16      	ldr	r3, [pc, #88]	@ (10042828 <main+0x1ac>)
100427ce:	22ae      	movs	r2, #174	@ 0xae
100427d0:	701a      	strb	r2, [r3, #0]
				sendAckData[1] = 10;
100427d2:	4b15      	ldr	r3, [pc, #84]	@ (10042828 <main+0x1ac>)
100427d4:	220a      	movs	r2, #10
100427d6:	705a      	strb	r2, [r3, #1]
				sendAckData[10] = meters;
100427d8:	4b13      	ldr	r3, [pc, #76]	@ (10042828 <main+0x1ac>)
100427da:	1dfa      	adds	r2, r7, #7
100427dc:	7812      	ldrb	r2, [r2, #0]
100427de:	729a      	strb	r2, [r3, #10]
				sendAckData[11] = centimeters;
100427e0:	4b11      	ldr	r3, [pc, #68]	@ (10042828 <main+0x1ac>)
100427e2:	1dba      	adds	r2, r7, #6
100427e4:	7812      	ldrb	r2, [r2, #0]
100427e6:	72da      	strb	r2, [r3, #11]
				ranging = FALSE;
100427e8:	4b15      	ldr	r3, [pc, #84]	@ (10042840 <main+0x1c4>)
100427ea:	2200      	movs	r2, #0
100427ec:	701a      	strb	r2, [r3, #0]
100427ee:	e7b1      	b.n	10042754 <main+0xd8>
			}
		} else if (printPacket == TRUE) {
100427f0:	4b15      	ldr	r3, [pc, #84]	@ (10042848 <main+0x1cc>)
100427f2:	781b      	ldrb	r3, [r3, #0]
100427f4:	2b01      	cmp	r3, #1
100427f6:	d1ad      	bne.n	10042754 <main+0xd8>
			HAL_UART_Transmit(&huart1, (const uint8_t*) receivedData,
					strlen(receivedData), 100);
100427f8:	4b0e      	ldr	r3, [pc, #56]	@ (10042834 <main+0x1b8>)
100427fa:	0018      	movs	r0, r3
100427fc:	f7fd fc82 	bl	10040104 <strlen>
10042800:	0003      	movs	r3, r0
			HAL_UART_Transmit(&huart1, (const uint8_t*) receivedData,
10042802:	b29a      	uxth	r2, r3
10042804:	490b      	ldr	r1, [pc, #44]	@ (10042834 <main+0x1b8>)
10042806:	4811      	ldr	r0, [pc, #68]	@ (1004284c <main+0x1d0>)
10042808:	2364      	movs	r3, #100	@ 0x64
1004280a:	f006 f835 	bl	10048878 <HAL_UART_Transmit>
			printPacket = FALSE;
1004280e:	4b0e      	ldr	r3, [pc, #56]	@ (10042848 <main+0x1cc>)
10042810:	2200      	movs	r2, #0
10042812:	701a      	strb	r2, [r3, #0]
		HAL_RADIO_TIMER_Tick();
10042814:	e79e      	b.n	10042754 <main+0xd8>
10042816:	46c0      	nop			@ (mov r8, r8)
10042818:	20000638 	.word	0x20000638
1004281c:	20000650 	.word	0x20000650
10042820:	2000017c 	.word	0x2000017c
10042824:	10001ef0 	.word	0x10001ef0
10042828:	20000278 	.word	0x20000278
1004282c:	88df88df 	.word	0x88df88df
10042830:	2000047d 	.word	0x2000047d
10042834:	2000037c 	.word	0x2000037c
10042838:	10045611 	.word	0x10045611
1004283c:	000186a0 	.word	0x000186a0
10042840:	20000274 	.word	0x20000274
10042844:	40590000 	.word	0x40590000
10042848:	20000275 	.word	0x20000275
1004284c:	200001e0 	.word	0x200001e0

10042850 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
10042850:	b590      	push	{r4, r7, lr}
10042852:	b089      	sub	sp, #36	@ 0x24
10042854:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
10042856:	2408      	movs	r4, #8
10042858:	193b      	adds	r3, r7, r4
1004285a:	0018      	movs	r0, r3
1004285c:	2318      	movs	r3, #24
1004285e:	001a      	movs	r2, r3
10042860:	2100      	movs	r1, #0
10042862:	f006 fd6f 	bl	10049344 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
10042866:	003b      	movs	r3, r7
10042868:	0018      	movs	r0, r3
1004286a:	2308      	movs	r3, #8
1004286c:	001a      	movs	r2, r3
1004286e:	2100      	movs	r1, #0
10042870:	f006 fd68 	bl	10049344 <memset>

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE
10042874:	193b      	adds	r3, r7, r4
10042876:	2203      	movs	r2, #3
10042878:	601a      	str	r2, [r3, #0]
			| RCC_OSCILLATORTYPE_LSE;
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
1004287a:	193b      	adds	r3, r7, r4
1004287c:	2280      	movs	r2, #128	@ 0x80
1004287e:	0252      	lsls	r2, r2, #9
10042880:	605a      	str	r2, [r3, #4]
	RCC_OscInitStruct.LSEState = RCC_LSE_ON;
10042882:	193b      	adds	r3, r7, r4
10042884:	2210      	movs	r2, #16
10042886:	60da      	str	r2, [r3, #12]
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
10042888:	193b      	adds	r3, r7, r4
1004288a:	0018      	movs	r0, r3
1004288c:	f005 fc38 	bl	10048100 <HAL_RCC_OscConfig>
10042890:	1e03      	subs	r3, r0, #0
10042892:	d001      	beq.n	10042898 <SystemClock_Config+0x48>
		Error_Handler();
10042894:	f000 fa20 	bl	10042cd8 <Error_Handler>
	}

	/** Configure the SYSCLKSource and SYSCLKDivider
	 */
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_RC64MPLL;
10042898:	003b      	movs	r3, r7
1004289a:	2200      	movs	r2, #0
1004289c:	601a      	str	r2, [r3, #0]
	RCC_ClkInitStruct.SYSCLKDivider = RCC_RC64MPLL_DIV1;
1004289e:	003b      	movs	r3, r7
100428a0:	2200      	movs	r2, #0
100428a2:	605a      	str	r2, [r3, #4]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_WAIT_STATES_1)
100428a4:	003b      	movs	r3, r7
100428a6:	2110      	movs	r1, #16
100428a8:	0018      	movs	r0, r3
100428aa:	f005 fd79 	bl	100483a0 <HAL_RCC_ClockConfig>
100428ae:	1e03      	subs	r3, r0, #0
100428b0:	d001      	beq.n	100428b6 <SystemClock_Config+0x66>
			!= HAL_OK) {
		Error_Handler();
100428b2:	f000 fa11 	bl	10042cd8 <Error_Handler>
	}
}
100428b6:	46c0      	nop			@ (mov r8, r8)
100428b8:	46bd      	mov	sp, r7
100428ba:	b009      	add	sp, #36	@ 0x24
100428bc:	bd90      	pop	{r4, r7, pc}

100428be <PeriphCommonClock_Config>:

/**
 * @brief Peripherals Common Clock Configuration
 * @retval None
 */
void PeriphCommonClock_Config(void) {
100428be:	b580      	push	{r7, lr}
100428c0:	b086      	sub	sp, #24
100428c2:	af00      	add	r7, sp, #0
	RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = { 0 };
100428c4:	003b      	movs	r3, r7
100428c6:	0018      	movs	r0, r3
100428c8:	2318      	movs	r3, #24
100428ca:	001a      	movs	r2, r3
100428cc:	2100      	movs	r1, #0
100428ce:	f006 fd39 	bl	10049344 <memset>

	/** Initializes the peripherals clock
	 */
	PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS;
100428d2:	003b      	movs	r3, r7
100428d4:	2202      	movs	r2, #2
100428d6:	601a      	str	r2, [r3, #0]
	PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLK_DIV4;
100428d8:	003b      	movs	r3, r7
100428da:	2280      	movs	r2, #128	@ 0x80
100428dc:	0152      	lsls	r2, r2, #5
100428de:	615a      	str	r2, [r3, #20]

	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK) {
100428e0:	003b      	movs	r3, r7
100428e2:	0018      	movs	r0, r3
100428e4:	f005 fe7e 	bl	100485e4 <HAL_RCCEx_PeriphCLKConfig>
100428e8:	1e03      	subs	r3, r0, #0
100428ea:	d001      	beq.n	100428f0 <PeriphCommonClock_Config+0x32>
		Error_Handler();
100428ec:	f000 f9f4 	bl	10042cd8 <Error_Handler>
	}
}
100428f0:	46c0      	nop			@ (mov r8, r8)
100428f2:	46bd      	mov	sp, r7
100428f4:	b006      	add	sp, #24
100428f6:	bd80      	pop	{r7, pc}

100428f8 <MX_RADIO_Init>:
/**
 * @brief RADIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_RADIO_Init(void) {
100428f8:	b580      	push	{r7, lr}
100428fa:	b082      	sub	sp, #8
100428fc:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN RADIO_Init 0 */

	/* USER CODE END RADIO_Init 0 */

	RADIO_HandleTypeDef hradio = { 0 };
100428fe:	2300      	movs	r3, #0
10042900:	607b      	str	r3, [r7, #4]

	/* USER CODE BEGIN RADIO_Init 1 */

	/* USER CODE END RADIO_Init 1 */
	hradio.Instance = RADIO;
10042902:	23c0      	movs	r3, #192	@ 0xc0
10042904:	05db      	lsls	r3, r3, #23
10042906:	607b      	str	r3, [r7, #4]
	HAL_RADIO_Init(&hradio);
10042908:	1d3b      	adds	r3, r7, #4
1004290a:	0018      	movs	r0, r3
1004290c:	f002 fb48 	bl	10044fa0 <HAL_RADIO_Init>
	/* USER CODE BEGIN RADIO_Init 2 */

	/* USER CODE END RADIO_Init 2 */

}
10042910:	46c0      	nop			@ (mov r8, r8)
10042912:	46bd      	mov	sp, r7
10042914:	b002      	add	sp, #8
10042916:	bd80      	pop	{r7, pc}

10042918 <MX_RADIO_TIMER_Init>:
/**
 * @brief RADIO_TIMER Initialization Function
 * @param None
 * @retval None
 */
static void MX_RADIO_TIMER_Init(void) {
10042918:	b580      	push	{r7, lr}
1004291a:	b082      	sub	sp, #8
1004291c:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN RADIO_TIMER_Init 0 */

	/* USER CODE END RADIO_TIMER_Init 0 */

	RADIO_TIMER_InitTypeDef RADIO_TIMER_InitStruct = { 0 };
1004291e:	003b      	movs	r3, r7
10042920:	0018      	movs	r0, r3
10042922:	2308      	movs	r3, #8
10042924:	001a      	movs	r2, r3
10042926:	2100      	movs	r1, #0
10042928:	f006 fd0c 	bl	10049344 <memset>

	/* USER CODE BEGIN RADIO_TIMER_Init 1 */

	/* USER CODE END RADIO_TIMER_Init 1 */

	if (__HAL_RCC_RADIO_IS_CLK_DISABLED()) {
1004292c:	2001      	movs	r0, #1
1004292e:	f7ff fe6f 	bl	10042610 <LL_APB2_GRP1_IsEnabledClock>
10042932:	1e03      	subs	r3, r0, #0
10042934:	d108      	bne.n	10042948 <MX_RADIO_TIMER_Init+0x30>
		/* Radio Peripheral reset */
		__HAL_RCC_RADIO_FORCE_RESET();
10042936:	2001      	movs	r0, #1
10042938:	f7ff fe7e 	bl	10042638 <LL_APB2_GRP1_ForceReset>
		__HAL_RCC_RADIO_RELEASE_RESET();
1004293c:	2001      	movs	r0, #1
1004293e:	f7ff fe8b 	bl	10042658 <LL_APB2_GRP1_ReleaseReset>

		/* Enable Radio peripheral clock */
		__HAL_RCC_RADIO_CLK_ENABLE();
10042942:	2001      	movs	r0, #1
10042944:	f7ff fe4e 	bl	100425e4 <LL_APB2_GRP1_EnableClock>
	}
	/* Wait to be sure that the Radio Timer is active */
	while (LL_RADIO_TIMER_GetAbsoluteTime(WAKEUP) < 0x10)
10042948:	46c0      	nop			@ (mov r8, r8)
1004294a:	4b0c      	ldr	r3, [pc, #48]	@ (1004297c <MX_RADIO_TIMER_Init+0x64>)
1004294c:	0018      	movs	r0, r3
1004294e:	f7ff fe29 	bl	100425a4 <LL_RADIO_TIMER_GetAbsoluteTime>
10042952:	0003      	movs	r3, r0
10042954:	2b0f      	cmp	r3, #15
10042956:	d9f8      	bls.n	1004294a <MX_RADIO_TIMER_Init+0x32>
		;
	RADIO_TIMER_InitStruct.XTAL_StartupTime = 320;
10042958:	003b      	movs	r3, r7
1004295a:	22a0      	movs	r2, #160	@ 0xa0
1004295c:	0052      	lsls	r2, r2, #1
1004295e:	801a      	strh	r2, [r3, #0]
	RADIO_TIMER_InitStruct.enableInitialCalibration = FALSE;
10042960:	003b      	movs	r3, r7
10042962:	2200      	movs	r2, #0
10042964:	709a      	strb	r2, [r3, #2]
	RADIO_TIMER_InitStruct.periodicCalibrationInterval = 0;
10042966:	003b      	movs	r3, r7
10042968:	2200      	movs	r2, #0
1004296a:	605a      	str	r2, [r3, #4]
	HAL_RADIO_TIMER_Init(&RADIO_TIMER_InitStruct);
1004296c:	003b      	movs	r3, r7
1004296e:	0018      	movs	r0, r3
10042970:	f003 fde2 	bl	10046538 <HAL_RADIO_TIMER_Init>
	/* USER CODE BEGIN RADIO_TIMER_Init 2 */

	/* USER CODE END RADIO_TIMER_Init 2 */

}
10042974:	46c0      	nop			@ (mov r8, r8)
10042976:	46bd      	mov	sp, r7
10042978:	b002      	add	sp, #8
1004297a:	bd80      	pop	{r7, pc}
1004297c:	60001800 	.word	0x60001800

10042980 <MX_SPI2_Init>:
/**
 * @brief SPI2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI2_Init(void) {
10042980:	b580      	push	{r7, lr}
10042982:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI2_Init 1 */

	/* USER CODE END SPI2_Init 1 */
	/* SPI2 parameter configuration*/
	hspi2.Instance = SPI2;
10042984:	4b1b      	ldr	r3, [pc, #108]	@ (100429f4 <MX_SPI2_Init+0x74>)
10042986:	4a1c      	ldr	r2, [pc, #112]	@ (100429f8 <MX_SPI2_Init+0x78>)
10042988:	601a      	str	r2, [r3, #0]
	hspi2.Init.Mode = SPI_MODE_MASTER;
1004298a:	4b1a      	ldr	r3, [pc, #104]	@ (100429f4 <MX_SPI2_Init+0x74>)
1004298c:	2282      	movs	r2, #130	@ 0x82
1004298e:	0052      	lsls	r2, r2, #1
10042990:	605a      	str	r2, [r3, #4]
	hspi2.Init.Direction = SPI_DIRECTION_2LINES;
10042992:	4b18      	ldr	r3, [pc, #96]	@ (100429f4 <MX_SPI2_Init+0x74>)
10042994:	2200      	movs	r2, #0
10042996:	609a      	str	r2, [r3, #8]
	hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
10042998:	4b16      	ldr	r3, [pc, #88]	@ (100429f4 <MX_SPI2_Init+0x74>)
1004299a:	22e0      	movs	r2, #224	@ 0xe0
1004299c:	00d2      	lsls	r2, r2, #3
1004299e:	60da      	str	r2, [r3, #12]
	hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
100429a0:	4b14      	ldr	r3, [pc, #80]	@ (100429f4 <MX_SPI2_Init+0x74>)
100429a2:	2200      	movs	r2, #0
100429a4:	611a      	str	r2, [r3, #16]
	hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
100429a6:	4b13      	ldr	r3, [pc, #76]	@ (100429f4 <MX_SPI2_Init+0x74>)
100429a8:	2200      	movs	r2, #0
100429aa:	615a      	str	r2, [r3, #20]
	hspi2.Init.NSS = SPI_NSS_SOFT;
100429ac:	4b11      	ldr	r3, [pc, #68]	@ (100429f4 <MX_SPI2_Init+0x74>)
100429ae:	2280      	movs	r2, #128	@ 0x80
100429b0:	0092      	lsls	r2, r2, #2
100429b2:	619a      	str	r2, [r3, #24]
	hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
100429b4:	4b0f      	ldr	r3, [pc, #60]	@ (100429f4 <MX_SPI2_Init+0x74>)
100429b6:	2218      	movs	r2, #24
100429b8:	61da      	str	r2, [r3, #28]
	hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
100429ba:	4b0e      	ldr	r3, [pc, #56]	@ (100429f4 <MX_SPI2_Init+0x74>)
100429bc:	2200      	movs	r2, #0
100429be:	621a      	str	r2, [r3, #32]
	hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
100429c0:	4b0c      	ldr	r3, [pc, #48]	@ (100429f4 <MX_SPI2_Init+0x74>)
100429c2:	2200      	movs	r2, #0
100429c4:	625a      	str	r2, [r3, #36]	@ 0x24
	hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
100429c6:	4b0b      	ldr	r3, [pc, #44]	@ (100429f4 <MX_SPI2_Init+0x74>)
100429c8:	2200      	movs	r2, #0
100429ca:	629a      	str	r2, [r3, #40]	@ 0x28
	hspi2.Init.CRCPolynomial = 7;
100429cc:	4b09      	ldr	r3, [pc, #36]	@ (100429f4 <MX_SPI2_Init+0x74>)
100429ce:	2207      	movs	r2, #7
100429d0:	62da      	str	r2, [r3, #44]	@ 0x2c
	hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
100429d2:	4b08      	ldr	r3, [pc, #32]	@ (100429f4 <MX_SPI2_Init+0x74>)
100429d4:	2200      	movs	r2, #0
100429d6:	631a      	str	r2, [r3, #48]	@ 0x30
	hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
100429d8:	4b06      	ldr	r3, [pc, #24]	@ (100429f4 <MX_SPI2_Init+0x74>)
100429da:	2208      	movs	r2, #8
100429dc:	635a      	str	r2, [r3, #52]	@ 0x34
	if (HAL_SPI_Init(&hspi2) != HAL_OK) {
100429de:	4b05      	ldr	r3, [pc, #20]	@ (100429f4 <MX_SPI2_Init+0x74>)
100429e0:	0018      	movs	r0, r3
100429e2:	f005 fe3b 	bl	1004865c <HAL_SPI_Init>
100429e6:	1e03      	subs	r3, r0, #0
100429e8:	d001      	beq.n	100429ee <MX_SPI2_Init+0x6e>
		Error_Handler();
100429ea:	f000 f975 	bl	10042cd8 <Error_Handler>
	}
	/* USER CODE BEGIN SPI2_Init 2 */

	/* USER CODE END SPI2_Init 2 */

}
100429ee:	46c0      	nop			@ (mov r8, r8)
100429f0:	46bd      	mov	sp, r7
100429f2:	bd80      	pop	{r7, pc}
100429f4:	2000017c 	.word	0x2000017c
100429f8:	41003000 	.word	0x41003000

100429fc <MX_USART1_UART_Init>:
/**
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void) {
100429fc:	b580      	push	{r7, lr}
100429fe:	af00      	add	r7, sp, #0
	/* USER CODE END USART1_Init 0 */

	/* USER CODE BEGIN USART1_Init 1 */

	/* USER CODE END USART1_Init 1 */
	huart1.Instance = USART1;
10042a00:	4b23      	ldr	r3, [pc, #140]	@ (10042a90 <MX_USART1_UART_Init+0x94>)
10042a02:	4a24      	ldr	r2, [pc, #144]	@ (10042a94 <MX_USART1_UART_Init+0x98>)
10042a04:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 115200;
10042a06:	4b22      	ldr	r3, [pc, #136]	@ (10042a90 <MX_USART1_UART_Init+0x94>)
10042a08:	22e1      	movs	r2, #225	@ 0xe1
10042a0a:	0252      	lsls	r2, r2, #9
10042a0c:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
10042a0e:	4b20      	ldr	r3, [pc, #128]	@ (10042a90 <MX_USART1_UART_Init+0x94>)
10042a10:	2200      	movs	r2, #0
10042a12:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
10042a14:	4b1e      	ldr	r3, [pc, #120]	@ (10042a90 <MX_USART1_UART_Init+0x94>)
10042a16:	2200      	movs	r2, #0
10042a18:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
10042a1a:	4b1d      	ldr	r3, [pc, #116]	@ (10042a90 <MX_USART1_UART_Init+0x94>)
10042a1c:	2200      	movs	r2, #0
10042a1e:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
10042a20:	4b1b      	ldr	r3, [pc, #108]	@ (10042a90 <MX_USART1_UART_Init+0x94>)
10042a22:	220c      	movs	r2, #12
10042a24:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
10042a26:	4b1a      	ldr	r3, [pc, #104]	@ (10042a90 <MX_USART1_UART_Init+0x94>)
10042a28:	2200      	movs	r2, #0
10042a2a:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
10042a2c:	4b18      	ldr	r3, [pc, #96]	@ (10042a90 <MX_USART1_UART_Init+0x94>)
10042a2e:	2200      	movs	r2, #0
10042a30:	61da      	str	r2, [r3, #28]
	huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
10042a32:	4b17      	ldr	r3, [pc, #92]	@ (10042a90 <MX_USART1_UART_Init+0x94>)
10042a34:	2200      	movs	r2, #0
10042a36:	621a      	str	r2, [r3, #32]
	huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
10042a38:	4b15      	ldr	r3, [pc, #84]	@ (10042a90 <MX_USART1_UART_Init+0x94>)
10042a3a:	2200      	movs	r2, #0
10042a3c:	625a      	str	r2, [r3, #36]	@ 0x24
	huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
10042a3e:	4b14      	ldr	r3, [pc, #80]	@ (10042a90 <MX_USART1_UART_Init+0x94>)
10042a40:	2200      	movs	r2, #0
10042a42:	629a      	str	r2, [r3, #40]	@ 0x28
	if (HAL_UART_Init(&huart1) != HAL_OK) {
10042a44:	4b12      	ldr	r3, [pc, #72]	@ (10042a90 <MX_USART1_UART_Init+0x94>)
10042a46:	0018      	movs	r0, r3
10042a48:	f005 fec0 	bl	100487cc <HAL_UART_Init>
10042a4c:	1e03      	subs	r3, r0, #0
10042a4e:	d001      	beq.n	10042a54 <MX_USART1_UART_Init+0x58>
		Error_Handler();
10042a50:	f000 f942 	bl	10042cd8 <Error_Handler>
	}
	if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8)
10042a54:	4b0e      	ldr	r3, [pc, #56]	@ (10042a90 <MX_USART1_UART_Init+0x94>)
10042a56:	2100      	movs	r1, #0
10042a58:	0018      	movs	r0, r3
10042a5a:	f006 fb85 	bl	10049168 <HAL_UARTEx_SetTxFifoThreshold>
10042a5e:	1e03      	subs	r3, r0, #0
10042a60:	d001      	beq.n	10042a66 <MX_USART1_UART_Init+0x6a>
			!= HAL_OK) {
		Error_Handler();
10042a62:	f000 f939 	bl	10042cd8 <Error_Handler>
	}
	if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8)
10042a66:	4b0a      	ldr	r3, [pc, #40]	@ (10042a90 <MX_USART1_UART_Init+0x94>)
10042a68:	2100      	movs	r1, #0
10042a6a:	0018      	movs	r0, r3
10042a6c:	f006 fbbc 	bl	100491e8 <HAL_UARTEx_SetRxFifoThreshold>
10042a70:	1e03      	subs	r3, r0, #0
10042a72:	d001      	beq.n	10042a78 <MX_USART1_UART_Init+0x7c>
			!= HAL_OK) {
		Error_Handler();
10042a74:	f000 f930 	bl	10042cd8 <Error_Handler>
	}
	if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK) {
10042a78:	4b05      	ldr	r3, [pc, #20]	@ (10042a90 <MX_USART1_UART_Init+0x94>)
10042a7a:	0018      	movs	r0, r3
10042a7c:	f006 fb3a 	bl	100490f4 <HAL_UARTEx_DisableFifoMode>
10042a80:	1e03      	subs	r3, r0, #0
10042a82:	d001      	beq.n	10042a88 <MX_USART1_UART_Init+0x8c>
		Error_Handler();
10042a84:	f000 f928 	bl	10042cd8 <Error_Handler>
	}
	/* USER CODE BEGIN USART1_Init 2 */

	/* USER CODE END USART1_Init 2 */

}
10042a88:	46c0      	nop			@ (mov r8, r8)
10042a8a:	46bd      	mov	sp, r7
10042a8c:	bd80      	pop	{r7, pc}
10042a8e:	46c0      	nop			@ (mov r8, r8)
10042a90:	200001e0 	.word	0x200001e0
10042a94:	41004000 	.word	0x41004000

10042a98 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
10042a98:	b580      	push	{r7, lr}
10042a9a:	b086      	sub	sp, #24
10042a9c:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
10042a9e:	1d3b      	adds	r3, r7, #4
10042aa0:	0018      	movs	r0, r3
10042aa2:	2314      	movs	r3, #20
10042aa4:	001a      	movs	r2, r3
10042aa6:	2100      	movs	r1, #0
10042aa8:	f006 fc4c 	bl	10049344 <memset>
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOA_CLK_ENABLE();
10042aac:	2004      	movs	r0, #4
10042aae:	f7ff fd83 	bl	100425b8 <LL_AHB1_GRP1_EnableClock>
	__HAL_RCC_GPIOB_CLK_ENABLE();
10042ab2:	2008      	movs	r0, #8
10042ab4:	f7ff fd80 	bl	100425b8 <LL_AHB1_GRP1_EnableClock>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
10042ab8:	2390      	movs	r3, #144	@ 0x90
10042aba:	05db      	lsls	r3, r3, #23
10042abc:	2200      	movs	r2, #0
10042abe:	2110      	movs	r1, #16
10042ac0:	0018      	movs	r0, r3
10042ac2:	f002 f8a8 	bl	10044c16 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_RESET);
10042ac6:	2380      	movs	r3, #128	@ 0x80
10042ac8:	00db      	lsls	r3, r3, #3
10042aca:	4831      	ldr	r0, [pc, #196]	@ (10042b90 <MX_GPIO_Init+0xf8>)
10042acc:	2200      	movs	r2, #0
10042ace:	0019      	movs	r1, r3
10042ad0:	f002 f8a1 	bl	10044c16 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : PA2 */
	GPIO_InitStruct.Pin = GPIO_PIN_2;
10042ad4:	1d3b      	adds	r3, r7, #4
10042ad6:	2204      	movs	r2, #4
10042ad8:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
10042ada:	1d3b      	adds	r3, r7, #4
10042adc:	2202      	movs	r2, #2
10042ade:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
10042ae0:	1d3b      	adds	r3, r7, #4
10042ae2:	2201      	movs	r2, #1
10042ae4:	609a      	str	r2, [r3, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
10042ae6:	1d3b      	adds	r3, r7, #4
10042ae8:	2200      	movs	r2, #0
10042aea:	60da      	str	r2, [r3, #12]
	GPIO_InitStruct.Alternate = GPIO_AF5_SWDIO;
10042aec:	1d3b      	adds	r3, r7, #4
10042aee:	2205      	movs	r2, #5
10042af0:	611a      	str	r2, [r3, #16]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
10042af2:	1d3a      	adds	r2, r7, #4
10042af4:	2390      	movs	r3, #144	@ 0x90
10042af6:	05db      	lsls	r3, r3, #23
10042af8:	0011      	movs	r1, r2
10042afa:	0018      	movs	r0, r3
10042afc:	f001 fee2 	bl	100448c4 <HAL_GPIO_Init>

	/*Configure GPIO pin : PA4 */
	GPIO_InitStruct.Pin = GPIO_PIN_4;
10042b00:	1d3b      	adds	r3, r7, #4
10042b02:	2210      	movs	r2, #16
10042b04:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
10042b06:	1d3b      	adds	r3, r7, #4
10042b08:	2201      	movs	r2, #1
10042b0a:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
10042b0c:	1d3b      	adds	r3, r7, #4
10042b0e:	2200      	movs	r2, #0
10042b10:	609a      	str	r2, [r3, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
10042b12:	1d3b      	adds	r3, r7, #4
10042b14:	2200      	movs	r2, #0
10042b16:	60da      	str	r2, [r3, #12]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
10042b18:	1d3a      	adds	r2, r7, #4
10042b1a:	2390      	movs	r3, #144	@ 0x90
10042b1c:	05db      	lsls	r3, r3, #23
10042b1e:	0011      	movs	r1, r2
10042b20:	0018      	movs	r0, r3
10042b22:	f001 fecf 	bl	100448c4 <HAL_GPIO_Init>

	/*Configure GPIO pin : PB10 */
	GPIO_InitStruct.Pin = GPIO_PIN_10;
10042b26:	1d3b      	adds	r3, r7, #4
10042b28:	2280      	movs	r2, #128	@ 0x80
10042b2a:	00d2      	lsls	r2, r2, #3
10042b2c:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
10042b2e:	1d3b      	adds	r3, r7, #4
10042b30:	2201      	movs	r2, #1
10042b32:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
10042b34:	1d3b      	adds	r3, r7, #4
10042b36:	2200      	movs	r2, #0
10042b38:	609a      	str	r2, [r3, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
10042b3a:	1d3b      	adds	r3, r7, #4
10042b3c:	2200      	movs	r2, #0
10042b3e:	60da      	str	r2, [r3, #12]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
10042b40:	1d3b      	adds	r3, r7, #4
10042b42:	4a13      	ldr	r2, [pc, #76]	@ (10042b90 <MX_GPIO_Init+0xf8>)
10042b44:	0019      	movs	r1, r3
10042b46:	0010      	movs	r0, r2
10042b48:	f001 febc 	bl	100448c4 <HAL_GPIO_Init>

	/*Configure GPIO pin : PB5 */
	GPIO_InitStruct.Pin = GPIO_PIN_5;
10042b4c:	1d3b      	adds	r3, r7, #4
10042b4e:	2220      	movs	r2, #32
10042b50:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
10042b52:	1d3b      	adds	r3, r7, #4
10042b54:	2282      	movs	r2, #130	@ 0x82
10042b56:	03d2      	lsls	r2, r2, #15
10042b58:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
10042b5a:	1d3b      	adds	r3, r7, #4
10042b5c:	2200      	movs	r2, #0
10042b5e:	609a      	str	r2, [r3, #8]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
10042b60:	1d3b      	adds	r3, r7, #4
10042b62:	4a0b      	ldr	r2, [pc, #44]	@ (10042b90 <MX_GPIO_Init+0xf8>)
10042b64:	0019      	movs	r1, r3
10042b66:	0010      	movs	r0, r2
10042b68:	f001 feac 	bl	100448c4 <HAL_GPIO_Init>

	/**/
	LL_PWR_EnableGPIOPullUp(LL_PWR_GPIO_A, LL_PWR_GPIO_BIT_2);
10042b6c:	4b09      	ldr	r3, [pc, #36]	@ (10042b94 <MX_GPIO_Init+0xfc>)
10042b6e:	2104      	movs	r1, #4
10042b70:	0018      	movs	r0, r3
10042b72:	f7ff fccf 	bl	10042514 <LL_PWR_EnableGPIOPullUp>

	/**/
	LL_PWR_SetNoPullA(LL_PWR_GPIO_BIT_4);
10042b76:	2010      	movs	r0, #16
10042b78:	f7ff fce4 	bl	10042544 <LL_PWR_SetNoPullA>

	/**/
	LL_PWR_SetNoPullB(LL_PWR_GPIO_BIT_10);
10042b7c:	2380      	movs	r3, #128	@ 0x80
10042b7e:	00db      	lsls	r3, r3, #3
10042b80:	0018      	movs	r0, r3
10042b82:	f7ff fcf7 	bl	10042574 <LL_PWR_SetNoPullB>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
10042b86:	46c0      	nop			@ (mov r8, r8)
10042b88:	46bd      	mov	sp, r7
10042b8a:	b006      	add	sp, #24
10042b8c:	bd80      	pop	{r7, pc}
10042b8e:	46c0      	nop			@ (mov r8, r8)
10042b90:	48100000 	.word	0x48100000
10042b94:	48500020 	.word	0x48500020

10042b98 <HAL_RADIO_CallbackRcvError>:

/* USER CODE BEGIN 4 */
void HAL_RADIO_CallbackRcvError(RxStats_t *rxPacketStats) {
10042b98:	b590      	push	{r4, r7, lr}
10042b9a:	b087      	sub	sp, #28
10042b9c:	af04      	add	r7, sp, #16
10042b9e:	6078      	str	r0, [r7, #4]

	HAL_RADIO_ReceivePacketWithAck(beacon_channel, RX_WAKEUP_TIME, receivedData,
10042ba0:	4b09      	ldr	r3, [pc, #36]	@ (10042bc8 <HAL_RADIO_CallbackRcvError+0x30>)
10042ba2:	7818      	ldrb	r0, [r3, #0]
10042ba4:	4c09      	ldr	r4, [pc, #36]	@ (10042bcc <HAL_RADIO_CallbackRcvError+0x34>)
10042ba6:	4a0a      	ldr	r2, [pc, #40]	@ (10042bd0 <HAL_RADIO_CallbackRcvError+0x38>)
10042ba8:	23be      	movs	r3, #190	@ 0xbe
10042baa:	0059      	lsls	r1, r3, #1
10042bac:	4b09      	ldr	r3, [pc, #36]	@ (10042bd4 <HAL_RADIO_CallbackRcvError+0x3c>)
10042bae:	9302      	str	r3, [sp, #8]
10042bb0:	23ff      	movs	r3, #255	@ 0xff
10042bb2:	9301      	str	r3, [sp, #4]
10042bb4:	4b08      	ldr	r3, [pc, #32]	@ (10042bd8 <HAL_RADIO_CallbackRcvError+0x40>)
10042bb6:	9300      	str	r3, [sp, #0]
10042bb8:	0023      	movs	r3, r4
10042bba:	f003 f9f3 	bl	10045fa4 <HAL_RADIO_ReceivePacketWithAck>
			sendAckData, RX_TIMEOUT, MAX_LL_PACKET_LENGTH, HAL_RADIO_Callback);

}
10042bbe:	46c0      	nop			@ (mov r8, r8)
10042bc0:	46bd      	mov	sp, r7
10042bc2:	b003      	add	sp, #12
10042bc4:	bd90      	pop	{r4, r7, pc}
10042bc6:	46c0      	nop			@ (mov r8, r8)
10042bc8:	2000047d 	.word	0x2000047d
10042bcc:	20000278 	.word	0x20000278
10042bd0:	2000037c 	.word	0x2000037c
10042bd4:	10045611 	.word	0x10045611
10042bd8:	000186a0 	.word	0x000186a0

10042bdc <HAL_RADIO_CallbackRcvTimeout>:

void HAL_RADIO_CallbackRcvTimeout(RxStats_t *rxPacketStats) {
10042bdc:	b590      	push	{r4, r7, lr}
10042bde:	b087      	sub	sp, #28
10042be0:	af04      	add	r7, sp, #16
10042be2:	6078      	str	r0, [r7, #4]

	HAL_RADIO_ReceivePacketWithAck(beacon_channel, RX_WAKEUP_TIME, receivedData,
10042be4:	4b09      	ldr	r3, [pc, #36]	@ (10042c0c <HAL_RADIO_CallbackRcvTimeout+0x30>)
10042be6:	7818      	ldrb	r0, [r3, #0]
10042be8:	4c09      	ldr	r4, [pc, #36]	@ (10042c10 <HAL_RADIO_CallbackRcvTimeout+0x34>)
10042bea:	4a0a      	ldr	r2, [pc, #40]	@ (10042c14 <HAL_RADIO_CallbackRcvTimeout+0x38>)
10042bec:	23be      	movs	r3, #190	@ 0xbe
10042bee:	0059      	lsls	r1, r3, #1
10042bf0:	4b09      	ldr	r3, [pc, #36]	@ (10042c18 <HAL_RADIO_CallbackRcvTimeout+0x3c>)
10042bf2:	9302      	str	r3, [sp, #8]
10042bf4:	23ff      	movs	r3, #255	@ 0xff
10042bf6:	9301      	str	r3, [sp, #4]
10042bf8:	4b08      	ldr	r3, [pc, #32]	@ (10042c1c <HAL_RADIO_CallbackRcvTimeout+0x40>)
10042bfa:	9300      	str	r3, [sp, #0]
10042bfc:	0023      	movs	r3, r4
10042bfe:	f003 f9d1 	bl	10045fa4 <HAL_RADIO_ReceivePacketWithAck>
			sendAckData, RX_TIMEOUT, MAX_LL_PACKET_LENGTH, HAL_RADIO_Callback);

}
10042c02:	46c0      	nop			@ (mov r8, r8)
10042c04:	46bd      	mov	sp, r7
10042c06:	b003      	add	sp, #12
10042c08:	bd90      	pop	{r4, r7, pc}
10042c0a:	46c0      	nop			@ (mov r8, r8)
10042c0c:	2000047d 	.word	0x2000047d
10042c10:	20000278 	.word	0x20000278
10042c14:	2000037c 	.word	0x2000037c
10042c18:	10045611 	.word	0x10045611
10042c1c:	000186a0 	.word	0x000186a0

10042c20 <HAL_RADIO_CallbackTxDone>:

void HAL_RADIO_CallbackTxDone(void) {
10042c20:	b590      	push	{r4, r7, lr}
10042c22:	b085      	sub	sp, #20
10042c24:	af04      	add	r7, sp, #16

	HAL_RADIO_ReceivePacketWithAck(beacon_channel, RX_WAKEUP_TIME, receivedData,
10042c26:	4b09      	ldr	r3, [pc, #36]	@ (10042c4c <HAL_RADIO_CallbackTxDone+0x2c>)
10042c28:	7818      	ldrb	r0, [r3, #0]
10042c2a:	4c09      	ldr	r4, [pc, #36]	@ (10042c50 <HAL_RADIO_CallbackTxDone+0x30>)
10042c2c:	4a09      	ldr	r2, [pc, #36]	@ (10042c54 <HAL_RADIO_CallbackTxDone+0x34>)
10042c2e:	23be      	movs	r3, #190	@ 0xbe
10042c30:	0059      	lsls	r1, r3, #1
10042c32:	4b09      	ldr	r3, [pc, #36]	@ (10042c58 <HAL_RADIO_CallbackTxDone+0x38>)
10042c34:	9302      	str	r3, [sp, #8]
10042c36:	23ff      	movs	r3, #255	@ 0xff
10042c38:	9301      	str	r3, [sp, #4]
10042c3a:	4b08      	ldr	r3, [pc, #32]	@ (10042c5c <HAL_RADIO_CallbackTxDone+0x3c>)
10042c3c:	9300      	str	r3, [sp, #0]
10042c3e:	0023      	movs	r3, r4
10042c40:	f003 f9b0 	bl	10045fa4 <HAL_RADIO_ReceivePacketWithAck>
			sendAckData, RX_TIMEOUT, MAX_LL_PACKET_LENGTH, HAL_RADIO_Callback);

}
10042c44:	46c0      	nop			@ (mov r8, r8)
10042c46:	46bd      	mov	sp, r7
10042c48:	b001      	add	sp, #4
10042c4a:	bd90      	pop	{r4, r7, pc}
10042c4c:	2000047d 	.word	0x2000047d
10042c50:	20000278 	.word	0x20000278
10042c54:	2000037c 	.word	0x2000037c
10042c58:	10045611 	.word	0x10045611
10042c5c:	000186a0 	.word	0x000186a0

10042c60 <HAL_RADIO_CallbackRcvOk>:

void HAL_RADIO_CallbackRcvOk(RxStats_t *rxPacketStats) {
10042c60:	b590      	push	{r4, r7, lr}
10042c62:	b087      	sub	sp, #28
10042c64:	af04      	add	r7, sp, #16
10042c66:	6078      	str	r0, [r7, #4]
	if (receivedData[0] == 0xDD) {
10042c68:	4b14      	ldr	r3, [pc, #80]	@ (10042cbc <HAL_RADIO_CallbackRcvOk+0x5c>)
10042c6a:	781b      	ldrb	r3, [r3, #0]
10042c6c:	2bdd      	cmp	r3, #221	@ 0xdd
10042c6e:	d103      	bne.n	10042c78 <HAL_RADIO_CallbackRcvOk+0x18>
		ranging = TRUE;
10042c70:	4b13      	ldr	r3, [pc, #76]	@ (10042cc0 <HAL_RADIO_CallbackRcvOk+0x60>)
10042c72:	2201      	movs	r2, #1
10042c74:	701a      	strb	r2, [r3, #0]
10042c76:	e00d      	b.n	10042c94 <HAL_RADIO_CallbackRcvOk+0x34>
	} else if (receivedData[0] == 0xD1) {
10042c78:	4b10      	ldr	r3, [pc, #64]	@ (10042cbc <HAL_RADIO_CallbackRcvOk+0x5c>)
10042c7a:	781b      	ldrb	r3, [r3, #0]
10042c7c:	2bd1      	cmp	r3, #209	@ 0xd1
10042c7e:	d009      	beq.n	10042c94 <HAL_RADIO_CallbackRcvOk+0x34>

	} else if (receivedData[0] == 0xFF) {
10042c80:	4b0e      	ldr	r3, [pc, #56]	@ (10042cbc <HAL_RADIO_CallbackRcvOk+0x5c>)
10042c82:	781b      	ldrb	r3, [r3, #0]
10042c84:	2bff      	cmp	r3, #255	@ 0xff
10042c86:	d105      	bne.n	10042c94 <HAL_RADIO_CallbackRcvOk+0x34>
		printPacket = TRUE;
10042c88:	4b0e      	ldr	r3, [pc, #56]	@ (10042cc4 <HAL_RADIO_CallbackRcvOk+0x64>)
10042c8a:	2201      	movs	r2, #1
10042c8c:	701a      	strb	r2, [r3, #0]
		ranging = FALSE;
10042c8e:	4b0c      	ldr	r3, [pc, #48]	@ (10042cc0 <HAL_RADIO_CallbackRcvOk+0x60>)
10042c90:	2200      	movs	r2, #0
10042c92:	701a      	strb	r2, [r3, #0]
	}
	HAL_RADIO_ReceivePacketWithAck(beacon_channel, RX_WAKEUP_TIME, receivedData,
10042c94:	4b0c      	ldr	r3, [pc, #48]	@ (10042cc8 <HAL_RADIO_CallbackRcvOk+0x68>)
10042c96:	7818      	ldrb	r0, [r3, #0]
10042c98:	4c0c      	ldr	r4, [pc, #48]	@ (10042ccc <HAL_RADIO_CallbackRcvOk+0x6c>)
10042c9a:	4a08      	ldr	r2, [pc, #32]	@ (10042cbc <HAL_RADIO_CallbackRcvOk+0x5c>)
10042c9c:	23be      	movs	r3, #190	@ 0xbe
10042c9e:	0059      	lsls	r1, r3, #1
10042ca0:	4b0b      	ldr	r3, [pc, #44]	@ (10042cd0 <HAL_RADIO_CallbackRcvOk+0x70>)
10042ca2:	9302      	str	r3, [sp, #8]
10042ca4:	23ff      	movs	r3, #255	@ 0xff
10042ca6:	9301      	str	r3, [sp, #4]
10042ca8:	4b0a      	ldr	r3, [pc, #40]	@ (10042cd4 <HAL_RADIO_CallbackRcvOk+0x74>)
10042caa:	9300      	str	r3, [sp, #0]
10042cac:	0023      	movs	r3, r4
10042cae:	f003 f979 	bl	10045fa4 <HAL_RADIO_ReceivePacketWithAck>
			sendAckData, RX_TIMEOUT, MAX_LL_PACKET_LENGTH, HAL_RADIO_Callback);
}
10042cb2:	46c0      	nop			@ (mov r8, r8)
10042cb4:	46bd      	mov	sp, r7
10042cb6:	b003      	add	sp, #12
10042cb8:	bd90      	pop	{r4, r7, pc}
10042cba:	46c0      	nop			@ (mov r8, r8)
10042cbc:	2000037c 	.word	0x2000037c
10042cc0:	20000274 	.word	0x20000274
10042cc4:	20000275 	.word	0x20000275
10042cc8:	2000047d 	.word	0x2000047d
10042ccc:	20000278 	.word	0x20000278
10042cd0:	10045611 	.word	0x10045611
10042cd4:	000186a0 	.word	0x000186a0

10042cd8 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
10042cd8:	b580      	push	{r7, lr}
10042cda:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
10042cdc:	b672      	cpsid	i
}
10042cde:	46c0      	nop			@ (mov r8, r8)
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
10042ce0:	46c0      	nop			@ (mov r8, r8)
10042ce2:	e7fd      	b.n	10042ce0 <Error_Handler+0x8>

10042ce4 <LL_PWR_SetNoPullA>:
{
10042ce4:	b580      	push	{r7, lr}
10042ce6:	b082      	sub	sp, #8
10042ce8:	af00      	add	r7, sp, #0
10042cea:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(PWR->PUCRA, GPIONumber);
10042cec:	4b08      	ldr	r3, [pc, #32]	@ (10042d10 <LL_PWR_SetNoPullA+0x2c>)
10042cee:	6a1a      	ldr	r2, [r3, #32]
10042cf0:	687b      	ldr	r3, [r7, #4]
10042cf2:	43d9      	mvns	r1, r3
10042cf4:	4b06      	ldr	r3, [pc, #24]	@ (10042d10 <LL_PWR_SetNoPullA+0x2c>)
10042cf6:	400a      	ands	r2, r1
10042cf8:	621a      	str	r2, [r3, #32]
  CLEAR_BIT(PWR->PDCRA, GPIONumber);
10042cfa:	4b05      	ldr	r3, [pc, #20]	@ (10042d10 <LL_PWR_SetNoPullA+0x2c>)
10042cfc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
10042cfe:	687b      	ldr	r3, [r7, #4]
10042d00:	43d9      	mvns	r1, r3
10042d02:	4b03      	ldr	r3, [pc, #12]	@ (10042d10 <LL_PWR_SetNoPullA+0x2c>)
10042d04:	400a      	ands	r2, r1
10042d06:	625a      	str	r2, [r3, #36]	@ 0x24
}
10042d08:	46c0      	nop			@ (mov r8, r8)
10042d0a:	46bd      	mov	sp, r7
10042d0c:	b002      	add	sp, #8
10042d0e:	bd80      	pop	{r7, pc}
10042d10:	48500000 	.word	0x48500000

10042d14 <LL_AHB1_GRP1_EnableClock>:
{
10042d14:	b580      	push	{r7, lr}
10042d16:	b084      	sub	sp, #16
10042d18:	af00      	add	r7, sp, #0
10042d1a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHBENR, Periphs);
10042d1c:	4b07      	ldr	r3, [pc, #28]	@ (10042d3c <LL_AHB1_GRP1_EnableClock+0x28>)
10042d1e:	6d19      	ldr	r1, [r3, #80]	@ 0x50
10042d20:	4b06      	ldr	r3, [pc, #24]	@ (10042d3c <LL_AHB1_GRP1_EnableClock+0x28>)
10042d22:	687a      	ldr	r2, [r7, #4]
10042d24:	430a      	orrs	r2, r1
10042d26:	651a      	str	r2, [r3, #80]	@ 0x50
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
10042d28:	4b04      	ldr	r3, [pc, #16]	@ (10042d3c <LL_AHB1_GRP1_EnableClock+0x28>)
10042d2a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
10042d2c:	687a      	ldr	r2, [r7, #4]
10042d2e:	4013      	ands	r3, r2
10042d30:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
10042d32:	68fb      	ldr	r3, [r7, #12]
}
10042d34:	46c0      	nop			@ (mov r8, r8)
10042d36:	46bd      	mov	sp, r7
10042d38:	b004      	add	sp, #16
10042d3a:	bd80      	pop	{r7, pc}
10042d3c:	48400000 	.word	0x48400000

10042d40 <LL_APB0_GRP1_EnableClock>:
{
10042d40:	b580      	push	{r7, lr}
10042d42:	b084      	sub	sp, #16
10042d44:	af00      	add	r7, sp, #0
10042d46:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB0ENR, Periphs);
10042d48:	4b07      	ldr	r3, [pc, #28]	@ (10042d68 <LL_APB0_GRP1_EnableClock+0x28>)
10042d4a:	6d59      	ldr	r1, [r3, #84]	@ 0x54
10042d4c:	4b06      	ldr	r3, [pc, #24]	@ (10042d68 <LL_APB0_GRP1_EnableClock+0x28>)
10042d4e:	687a      	ldr	r2, [r7, #4]
10042d50:	430a      	orrs	r2, r1
10042d52:	655a      	str	r2, [r3, #84]	@ 0x54
  tmpreg = READ_BIT(RCC->APB0ENR, Periphs);
10042d54:	4b04      	ldr	r3, [pc, #16]	@ (10042d68 <LL_APB0_GRP1_EnableClock+0x28>)
10042d56:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
10042d58:	687a      	ldr	r2, [r7, #4]
10042d5a:	4013      	ands	r3, r2
10042d5c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
10042d5e:	68fb      	ldr	r3, [r7, #12]
}
10042d60:	46c0      	nop			@ (mov r8, r8)
10042d62:	46bd      	mov	sp, r7
10042d64:	b004      	add	sp, #16
10042d66:	bd80      	pop	{r7, pc}
10042d68:	48400000 	.word	0x48400000

10042d6c <LL_APB1_GRP1_EnableClock>:
{
10042d6c:	b580      	push	{r7, lr}
10042d6e:	b084      	sub	sp, #16
10042d70:	af00      	add	r7, sp, #0
10042d72:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
10042d74:	4b07      	ldr	r3, [pc, #28]	@ (10042d94 <LL_APB1_GRP1_EnableClock+0x28>)
10042d76:	6d99      	ldr	r1, [r3, #88]	@ 0x58
10042d78:	4b06      	ldr	r3, [pc, #24]	@ (10042d94 <LL_APB1_GRP1_EnableClock+0x28>)
10042d7a:	687a      	ldr	r2, [r7, #4]
10042d7c:	430a      	orrs	r2, r1
10042d7e:	659a      	str	r2, [r3, #88]	@ 0x58
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
10042d80:	4b04      	ldr	r3, [pc, #16]	@ (10042d94 <LL_APB1_GRP1_EnableClock+0x28>)
10042d82:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
10042d84:	687a      	ldr	r2, [r7, #4]
10042d86:	4013      	ands	r3, r2
10042d88:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
10042d8a:	68fb      	ldr	r3, [r7, #12]
}
10042d8c:	46c0      	nop			@ (mov r8, r8)
10042d8e:	46bd      	mov	sp, r7
10042d90:	b004      	add	sp, #16
10042d92:	bd80      	pop	{r7, pc}
10042d94:	48400000 	.word	0x48400000

10042d98 <LL_APB2_GRP1_EnableClock>:
{
10042d98:	b580      	push	{r7, lr}
10042d9a:	b084      	sub	sp, #16
10042d9c:	af00      	add	r7, sp, #0
10042d9e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
10042da0:	4b07      	ldr	r3, [pc, #28]	@ (10042dc0 <LL_APB2_GRP1_EnableClock+0x28>)
10042da2:	6e19      	ldr	r1, [r3, #96]	@ 0x60
10042da4:	4b06      	ldr	r3, [pc, #24]	@ (10042dc0 <LL_APB2_GRP1_EnableClock+0x28>)
10042da6:	687a      	ldr	r2, [r7, #4]
10042da8:	430a      	orrs	r2, r1
10042daa:	661a      	str	r2, [r3, #96]	@ 0x60
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
10042dac:	4b04      	ldr	r3, [pc, #16]	@ (10042dc0 <LL_APB2_GRP1_EnableClock+0x28>)
10042dae:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
10042db0:	687a      	ldr	r2, [r7, #4]
10042db2:	4013      	ands	r3, r2
10042db4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
10042db6:	68fb      	ldr	r3, [r7, #12]
}
10042db8:	46c0      	nop			@ (mov r8, r8)
10042dba:	46bd      	mov	sp, r7
10042dbc:	b004      	add	sp, #16
10042dbe:	bd80      	pop	{r7, pc}
10042dc0:	48400000 	.word	0x48400000

10042dc4 <LL_APB2_GRP1_IsEnabledClock>:
{
10042dc4:	b580      	push	{r7, lr}
10042dc6:	b082      	sub	sp, #8
10042dc8:	af00      	add	r7, sp, #0
10042dca:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(RCC->APB2ENR, Periphs) == (Periphs)) ? 1UL : 0UL);
10042dcc:	4b06      	ldr	r3, [pc, #24]	@ (10042de8 <LL_APB2_GRP1_IsEnabledClock+0x24>)
10042dce:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
10042dd0:	687a      	ldr	r2, [r7, #4]
10042dd2:	4013      	ands	r3, r2
10042dd4:	687a      	ldr	r2, [r7, #4]
10042dd6:	429a      	cmp	r2, r3
10042dd8:	d101      	bne.n	10042dde <LL_APB2_GRP1_IsEnabledClock+0x1a>
10042dda:	2301      	movs	r3, #1
10042ddc:	e000      	b.n	10042de0 <LL_APB2_GRP1_IsEnabledClock+0x1c>
10042dde:	2300      	movs	r3, #0
}
10042de0:	0018      	movs	r0, r3
10042de2:	46bd      	mov	sp, r7
10042de4:	b002      	add	sp, #8
10042de6:	bd80      	pop	{r7, pc}
10042de8:	48400000 	.word	0x48400000

10042dec <LL_APB2_GRP1_ForceReset>:
{
10042dec:	b580      	push	{r7, lr}
10042dee:	b082      	sub	sp, #8
10042df0:	af00      	add	r7, sp, #0
10042df2:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2RSTR, Periphs);
10042df4:	4b04      	ldr	r3, [pc, #16]	@ (10042e08 <LL_APB2_GRP1_ForceReset+0x1c>)
10042df6:	6c19      	ldr	r1, [r3, #64]	@ 0x40
10042df8:	4b03      	ldr	r3, [pc, #12]	@ (10042e08 <LL_APB2_GRP1_ForceReset+0x1c>)
10042dfa:	687a      	ldr	r2, [r7, #4]
10042dfc:	430a      	orrs	r2, r1
10042dfe:	641a      	str	r2, [r3, #64]	@ 0x40
}
10042e00:	46c0      	nop			@ (mov r8, r8)
10042e02:	46bd      	mov	sp, r7
10042e04:	b002      	add	sp, #8
10042e06:	bd80      	pop	{r7, pc}
10042e08:	48400000 	.word	0x48400000

10042e0c <LL_APB2_GRP1_ReleaseReset>:
{
10042e0c:	b580      	push	{r7, lr}
10042e0e:	b082      	sub	sp, #8
10042e10:	af00      	add	r7, sp, #0
10042e12:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB2RSTR, Periphs);
10042e14:	4b05      	ldr	r3, [pc, #20]	@ (10042e2c <LL_APB2_GRP1_ReleaseReset+0x20>)
10042e16:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
10042e18:	687b      	ldr	r3, [r7, #4]
10042e1a:	43d9      	mvns	r1, r3
10042e1c:	4b03      	ldr	r3, [pc, #12]	@ (10042e2c <LL_APB2_GRP1_ReleaseReset+0x20>)
10042e1e:	400a      	ands	r2, r1
10042e20:	641a      	str	r2, [r3, #64]	@ 0x40
}
10042e22:	46c0      	nop			@ (mov r8, r8)
10042e24:	46bd      	mov	sp, r7
10042e26:	b002      	add	sp, #8
10042e28:	bd80      	pop	{r7, pc}
10042e2a:	46c0      	nop			@ (mov r8, r8)
10042e2c:	48400000 	.word	0x48400000

10042e30 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
10042e30:	b580      	push	{r7, lr}
10042e32:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
10042e34:	2380      	movs	r3, #128	@ 0x80
10042e36:	005b      	lsls	r3, r3, #1
10042e38:	0018      	movs	r0, r3
10042e3a:	f7ff ff81 	bl	10042d40 <LL_APB0_GRP1_EnableClock>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
10042e3e:	46c0      	nop			@ (mov r8, r8)
10042e40:	46bd      	mov	sp, r7
10042e42:	bd80      	pop	{r7, pc}

10042e44 <HAL_RADIO_MspInit>:
* This function configures the hardware resources used in this example
* @param hradio: RADIO handle pointer
* @retval None
*/
void HAL_RADIO_MspInit(RADIO_HandleTypeDef* hradio)
{
10042e44:	b590      	push	{r4, r7, lr}
10042e46:	b089      	sub	sp, #36	@ 0x24
10042e48:	af00      	add	r7, sp, #0
10042e4a:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
10042e4c:	2408      	movs	r4, #8
10042e4e:	193b      	adds	r3, r7, r4
10042e50:	0018      	movs	r0, r3
10042e52:	2318      	movs	r3, #24
10042e54:	001a      	movs	r2, r3
10042e56:	2100      	movs	r1, #0
10042e58:	f006 fa74 	bl	10049344 <memset>
  if(hradio->Instance==RADIO)
10042e5c:	687b      	ldr	r3, [r7, #4]
10042e5e:	681a      	ldr	r2, [r3, #0]
10042e60:	23c0      	movs	r3, #192	@ 0xc0
10042e62:	05db      	lsls	r3, r3, #23
10042e64:	429a      	cmp	r2, r3
10042e66:	d12b      	bne.n	10042ec0 <HAL_RADIO_MspInit+0x7c>

  /* USER CODE END RADIO_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RF;
10042e68:	193b      	adds	r3, r7, r4
10042e6a:	2201      	movs	r2, #1
10042e6c:	601a      	str	r2, [r3, #0]
    PeriphClkInitStruct.RFClockSelection = RCC_RF_CLK_32M;
10042e6e:	193b      	adds	r3, r7, r4
10042e70:	2202      	movs	r2, #2
10042e72:	611a      	str	r2, [r3, #16]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
10042e74:	193b      	adds	r3, r7, r4
10042e76:	0018      	movs	r0, r3
10042e78:	f005 fbb4 	bl	100485e4 <HAL_RCCEx_PeriphCLKConfig>
10042e7c:	1e03      	subs	r3, r0, #0
10042e7e:	d001      	beq.n	10042e84 <HAL_RADIO_MspInit+0x40>
    {
      Error_Handler();
10042e80:	f7ff ff2a 	bl	10042cd8 <Error_Handler>
    }

    /* Peripheral clock enable */
    if (__HAL_RCC_RADIO_IS_CLK_DISABLED())
10042e84:	2001      	movs	r0, #1
10042e86:	f7ff ff9d 	bl	10042dc4 <LL_APB2_GRP1_IsEnabledClock>
10042e8a:	1e03      	subs	r3, r0, #0
10042e8c:	d108      	bne.n	10042ea0 <HAL_RADIO_MspInit+0x5c>
    {
      /* Radio reset */
      __HAL_RCC_RADIO_FORCE_RESET();
10042e8e:	2001      	movs	r0, #1
10042e90:	f7ff ffac 	bl	10042dec <LL_APB2_GRP1_ForceReset>
      __HAL_RCC_RADIO_RELEASE_RESET();
10042e94:	2001      	movs	r0, #1
10042e96:	f7ff ffb9 	bl	10042e0c <LL_APB2_GRP1_ReleaseReset>

      /* Enable Radio peripheral clock */
      __HAL_RCC_RADIO_CLK_ENABLE();
10042e9a:	2001      	movs	r0, #1
10042e9c:	f7ff ff7c 	bl	10042d98 <LL_APB2_GRP1_EnableClock>
    }

    /* RADIO interrupt Init */
    HAL_NVIC_SetPriority(RADIO_TXRX_IRQn, 0, 0);
10042ea0:	2200      	movs	r2, #0
10042ea2:	2100      	movs	r1, #0
10042ea4:	2012      	movs	r0, #18
10042ea6:	f001 fcdb 	bl	10044860 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RADIO_TXRX_IRQn);
10042eaa:	2012      	movs	r0, #18
10042eac:	f001 fced 	bl	1004488a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(RADIO_TXRX_SEQ_IRQn, 0, 0);
10042eb0:	2200      	movs	r2, #0
10042eb2:	2100      	movs	r1, #0
10042eb4:	2019      	movs	r0, #25
10042eb6:	f001 fcd3 	bl	10044860 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RADIO_TXRX_SEQ_IRQn);
10042eba:	2019      	movs	r0, #25
10042ebc:	f001 fce5 	bl	1004488a <HAL_NVIC_EnableIRQ>

  /* USER CODE END RADIO_MspInit 1 */

  }

}
10042ec0:	46c0      	nop			@ (mov r8, r8)
10042ec2:	46bd      	mov	sp, r7
10042ec4:	b009      	add	sp, #36	@ 0x24
10042ec6:	bd90      	pop	{r4, r7, pc}

10042ec8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
10042ec8:	b590      	push	{r4, r7, lr}
10042eca:	b089      	sub	sp, #36	@ 0x24
10042ecc:	af00      	add	r7, sp, #0
10042ece:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
10042ed0:	240c      	movs	r4, #12
10042ed2:	193b      	adds	r3, r7, r4
10042ed4:	0018      	movs	r0, r3
10042ed6:	2314      	movs	r3, #20
10042ed8:	001a      	movs	r2, r3
10042eda:	2100      	movs	r1, #0
10042edc:	f006 fa32 	bl	10049344 <memset>
  if(hspi->Instance==SPI2)
10042ee0:	687b      	ldr	r3, [r7, #4]
10042ee2:	681b      	ldr	r3, [r3, #0]
10042ee4:	4a14      	ldr	r2, [pc, #80]	@ (10042f38 <HAL_SPI_MspInit+0x70>)
10042ee6:	4293      	cmp	r3, r2
10042ee8:	d121      	bne.n	10042f2e <HAL_SPI_MspInit+0x66>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
10042eea:	2380      	movs	r3, #128	@ 0x80
10042eec:	015b      	lsls	r3, r3, #5
10042eee:	0018      	movs	r0, r3
10042ef0:	f7ff ff3c 	bl	10042d6c <LL_APB1_GRP1_EnableClock>

    __HAL_RCC_GPIOA_CLK_ENABLE();
10042ef4:	2004      	movs	r0, #4
10042ef6:	f7ff ff0d 	bl	10042d14 <LL_AHB1_GRP1_EnableClock>
    /**SPI2 GPIO Configuration
    PA5     ------> SPI2_SCK
    PA6     ------> SPI2_MOSI
    PA7     ------> SPI2_MISO
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
10042efa:	0021      	movs	r1, r4
10042efc:	187b      	adds	r3, r7, r1
10042efe:	22e0      	movs	r2, #224	@ 0xe0
10042f00:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
10042f02:	187b      	adds	r3, r7, r1
10042f04:	2202      	movs	r2, #2
10042f06:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
10042f08:	187b      	adds	r3, r7, r1
10042f0a:	2200      	movs	r2, #0
10042f0c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
10042f0e:	187b      	adds	r3, r7, r1
10042f10:	2200      	movs	r2, #0
10042f12:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_SPI2;
10042f14:	187b      	adds	r3, r7, r1
10042f16:	2201      	movs	r2, #1
10042f18:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
10042f1a:	187a      	adds	r2, r7, r1
10042f1c:	2390      	movs	r3, #144	@ 0x90
10042f1e:	05db      	lsls	r3, r3, #23
10042f20:	0011      	movs	r1, r2
10042f22:	0018      	movs	r0, r3
10042f24:	f001 fcce 	bl	100448c4 <HAL_GPIO_Init>

    LL_PWR_SetNoPullA(LL_PWR_GPIO_BIT_5|LL_PWR_GPIO_BIT_6|LL_PWR_GPIO_BIT_7);
10042f28:	20e0      	movs	r0, #224	@ 0xe0
10042f2a:	f7ff fedb 	bl	10042ce4 <LL_PWR_SetNoPullA>

  /* USER CODE END SPI2_MspInit 1 */

  }

}
10042f2e:	46c0      	nop			@ (mov r8, r8)
10042f30:	46bd      	mov	sp, r7
10042f32:	b009      	add	sp, #36	@ 0x24
10042f34:	bd90      	pop	{r4, r7, pc}
10042f36:	46c0      	nop			@ (mov r8, r8)
10042f38:	41003000 	.word	0x41003000

10042f3c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
10042f3c:	b590      	push	{r4, r7, lr}
10042f3e:	b089      	sub	sp, #36	@ 0x24
10042f40:	af00      	add	r7, sp, #0
10042f42:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
10042f44:	240c      	movs	r4, #12
10042f46:	193b      	adds	r3, r7, r4
10042f48:	0018      	movs	r0, r3
10042f4a:	2314      	movs	r3, #20
10042f4c:	001a      	movs	r2, r3
10042f4e:	2100      	movs	r1, #0
10042f50:	f006 f9f8 	bl	10049344 <memset>
  if(huart->Instance==USART1)
10042f54:	687b      	ldr	r3, [r7, #4]
10042f56:	681b      	ldr	r3, [r3, #0]
10042f58:	4a15      	ldr	r2, [pc, #84]	@ (10042fb0 <HAL_UART_MspInit+0x74>)
10042f5a:	4293      	cmp	r3, r2
10042f5c:	d124      	bne.n	10042fa8 <HAL_UART_MspInit+0x6c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
10042f5e:	2380      	movs	r3, #128	@ 0x80
10042f60:	00db      	lsls	r3, r3, #3
10042f62:	0018      	movs	r0, r3
10042f64:	f7ff ff02 	bl	10042d6c <LL_APB1_GRP1_EnableClock>

    __HAL_RCC_GPIOA_CLK_ENABLE();
10042f68:	2004      	movs	r0, #4
10042f6a:	f7ff fed3 	bl	10042d14 <LL_AHB1_GRP1_EnableClock>
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA8     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_8;
10042f6e:	193b      	adds	r3, r7, r4
10042f70:	22c0      	movs	r2, #192	@ 0xc0
10042f72:	0092      	lsls	r2, r2, #2
10042f74:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
10042f76:	0021      	movs	r1, r4
10042f78:	187b      	adds	r3, r7, r1
10042f7a:	2202      	movs	r2, #2
10042f7c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
10042f7e:	187b      	adds	r3, r7, r1
10042f80:	2200      	movs	r2, #0
10042f82:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
10042f84:	187b      	adds	r3, r7, r1
10042f86:	2200      	movs	r2, #0
10042f88:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_USART1;
10042f8a:	187b      	adds	r3, r7, r1
10042f8c:	2200      	movs	r2, #0
10042f8e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
10042f90:	187a      	adds	r2, r7, r1
10042f92:	2390      	movs	r3, #144	@ 0x90
10042f94:	05db      	lsls	r3, r3, #23
10042f96:	0011      	movs	r1, r2
10042f98:	0018      	movs	r0, r3
10042f9a:	f001 fc93 	bl	100448c4 <HAL_GPIO_Init>

    LL_PWR_SetNoPullA(LL_PWR_GPIO_BIT_9|LL_PWR_GPIO_BIT_8);
10042f9e:	23c0      	movs	r3, #192	@ 0xc0
10042fa0:	009b      	lsls	r3, r3, #2
10042fa2:	0018      	movs	r0, r3
10042fa4:	f7ff fe9e 	bl	10042ce4 <LL_PWR_SetNoPullA>

  /* USER CODE END USART1_MspInit 1 */

  }

}
10042fa8:	46c0      	nop			@ (mov r8, r8)
10042faa:	46bd      	mov	sp, r7
10042fac:	b009      	add	sp, #36	@ 0x24
10042fae:	bd90      	pop	{r4, r7, pc}
10042fb0:	41004000 	.word	0x41004000

10042fb4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
10042fb4:	b580      	push	{r7, lr}
10042fb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
10042fb8:	46c0      	nop			@ (mov r8, r8)
10042fba:	e7fd      	b.n	10042fb8 <NMI_Handler+0x4>

10042fbc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
10042fbc:	b580      	push	{r7, lr}
10042fbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
10042fc0:	46c0      	nop			@ (mov r8, r8)
10042fc2:	e7fd      	b.n	10042fc0 <HardFault_Handler+0x4>

10042fc4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
10042fc4:	b580      	push	{r7, lr}
10042fc6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
10042fc8:	46c0      	nop			@ (mov r8, r8)
10042fca:	46bd      	mov	sp, r7
10042fcc:	bd80      	pop	{r7, pc}

10042fce <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
10042fce:	b580      	push	{r7, lr}
10042fd0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
10042fd2:	46c0      	nop			@ (mov r8, r8)
10042fd4:	46bd      	mov	sp, r7
10042fd6:	bd80      	pop	{r7, pc}

10042fd8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
10042fd8:	b580      	push	{r7, lr}
10042fda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
10042fdc:	f001 fb4a 	bl	10044674 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
10042fe0:	46c0      	nop			@ (mov r8, r8)
10042fe2:	46bd      	mov	sp, r7
10042fe4:	bd80      	pop	{r7, pc}

10042fe6 <RADIO_TIMER_CPU_WKUP_IRQHandler>:

/**
  * @brief This function handles RADIO_TIMER_CPU_WKUP global interrupt.
  */
void RADIO_TIMER_CPU_WKUP_IRQHandler(void)
{
10042fe6:	b580      	push	{r7, lr}
10042fe8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RADIO_TIMER_CPU_WKUP_IRQn 0 */

  /* USER CODE END RADIO_TIMER_CPU_WKUP_IRQn 0 */
  HAL_RADIO_TIMER_CPU_WKUP_IRQHandler();
10042fea:	f004 fe8b 	bl	10047d04 <HAL_RADIO_TIMER_CPU_WKUP_IRQHandler>
  /* USER CODE BEGIN RADIO_TIMER_CPU_WKUP_IRQn 1 */

  /* USER CODE END RADIO_TIMER_CPU_WKUP_IRQn 1 */
}
10042fee:	46c0      	nop			@ (mov r8, r8)
10042ff0:	46bd      	mov	sp, r7
10042ff2:	bd80      	pop	{r7, pc}

10042ff4 <RADIO_TIMER_TXRX_WKUP_IRQHandler>:

/**
  * @brief This function handles RADIO_TIMER_TXRX_WKUP global interrupt.
  */
void RADIO_TIMER_TXRX_WKUP_IRQHandler(void)
{
10042ff4:	b580      	push	{r7, lr}
10042ff6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RADIO_TIMER_TXRX_WKUP_IRQn 0 */

  /* USER CODE END RADIO_TIMER_TXRX_WKUP_IRQn 0 */
  HAL_RADIO_TIMER_TXRX_WKUP_IRQHandler();
10042ff8:	f004 fe8d 	bl	10047d16 <HAL_RADIO_TIMER_TXRX_WKUP_IRQHandler>
  /* USER CODE BEGIN RADIO_TIMER_TXRX_WKUP_IRQn 1 */

  /* USER CODE END RADIO_TIMER_TXRX_WKUP_IRQn 1 */
}
10042ffc:	46c0      	nop			@ (mov r8, r8)
10042ffe:	46bd      	mov	sp, r7
10043000:	bd80      	pop	{r7, pc}

10043002 <RADIO_TIMER_ERROR_IRQHandler>:

/**
  * @brief This function handles RADIO_TIMER_ERROR global interrupt.
  */
void RADIO_TIMER_ERROR_IRQHandler(void)
{
10043002:	b580      	push	{r7, lr}
10043004:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RADIO_TIMER_ERROR_IRQn 0 */

  /* USER CODE END RADIO_TIMER_ERROR_IRQn 0 */
  HAL_RADIO_TIMER_ERROR_IRQHandler();
10043006:	f004 fe8f 	bl	10047d28 <HAL_RADIO_TIMER_ERROR_IRQHandler>
  /* USER CODE BEGIN RADIO_TIMER_ERROR_IRQn 1 */

  /* USER CODE END RADIO_TIMER_ERROR_IRQn 1 */
}
1004300a:	46c0      	nop			@ (mov r8, r8)
1004300c:	46bd      	mov	sp, r7
1004300e:	bd80      	pop	{r7, pc}

10043010 <RADIO_TXRX_IRQHandler>:

/**
  * @brief This function handles RADIO_TXRX global interrupt.
  */
void RADIO_TXRX_IRQHandler(void)
{
10043010:	b580      	push	{r7, lr}
10043012:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RADIO_TXRX_IRQn 0 */

  /* USER CODE END RADIO_TXRX_IRQn 0 */
  HAL_RADIO_TXRX_IRQHandler();
10043014:	f003 f885 	bl	10046122 <HAL_RADIO_TXRX_IRQHandler>
  /* USER CODE BEGIN RADIO_TXRX_IRQn 1 */

  /* USER CODE END RADIO_TXRX_IRQn 1 */
}
10043018:	46c0      	nop			@ (mov r8, r8)
1004301a:	46bd      	mov	sp, r7
1004301c:	bd80      	pop	{r7, pc}

1004301e <RADIO_TXRX_SEQ_IRQHandler>:

/**
  * @brief This function handles RADIO_TXRX_SEQ global interrupt.
  */
void RADIO_TXRX_SEQ_IRQHandler(void)
{
1004301e:	b580      	push	{r7, lr}
10043020:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RADIO_TXRX_SEQ_IRQn 0 */

  /* USER CODE END RADIO_TXRX_SEQ_IRQn 0 */
  HAL_RADIO_TXRX_SEQ_IRQHandler();
10043022:	f003 f8a5 	bl	10046170 <HAL_RADIO_TXRX_SEQ_IRQHandler>
  /* USER CODE BEGIN RADIO_TXRX_SEQ_IRQn 1 */

  /* USER CODE END RADIO_TXRX_SEQ_IRQn 1 */
}
10043026:	46c0      	nop			@ (mov r8, r8)
10043028:	46bd      	mov	sp, r7
1004302a:	bd80      	pop	{r7, pc}

1004302c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
1004302c:	b590      	push	{r4, r7, lr}
1004302e:	b083      	sub	sp, #12
10043030:	af00      	add	r7, sp, #0
10043032:	0002      	movs	r2, r0
10043034:	6039      	str	r1, [r7, #0]
10043036:	1dfb      	adds	r3, r7, #7
10043038:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
1004303a:	1dfb      	adds	r3, r7, #7
1004303c:	781b      	ldrb	r3, [r3, #0]
1004303e:	2b7f      	cmp	r3, #127	@ 0x7f
10043040:	d828      	bhi.n	10043094 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
10043042:	4a2f      	ldr	r2, [pc, #188]	@ (10043100 <__NVIC_SetPriority+0xd4>)
10043044:	1dfb      	adds	r3, r7, #7
10043046:	781b      	ldrb	r3, [r3, #0]
10043048:	b25b      	sxtb	r3, r3
1004304a:	089b      	lsrs	r3, r3, #2
1004304c:	33c0      	adds	r3, #192	@ 0xc0
1004304e:	009b      	lsls	r3, r3, #2
10043050:	589b      	ldr	r3, [r3, r2]
10043052:	1dfa      	adds	r2, r7, #7
10043054:	7812      	ldrb	r2, [r2, #0]
10043056:	0011      	movs	r1, r2
10043058:	2203      	movs	r2, #3
1004305a:	400a      	ands	r2, r1
1004305c:	00d2      	lsls	r2, r2, #3
1004305e:	21ff      	movs	r1, #255	@ 0xff
10043060:	4091      	lsls	r1, r2
10043062:	000a      	movs	r2, r1
10043064:	43d2      	mvns	r2, r2
10043066:	401a      	ands	r2, r3
10043068:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
1004306a:	683b      	ldr	r3, [r7, #0]
1004306c:	019b      	lsls	r3, r3, #6
1004306e:	22ff      	movs	r2, #255	@ 0xff
10043070:	401a      	ands	r2, r3
10043072:	1dfb      	adds	r3, r7, #7
10043074:	781b      	ldrb	r3, [r3, #0]
10043076:	0018      	movs	r0, r3
10043078:	2303      	movs	r3, #3
1004307a:	4003      	ands	r3, r0
1004307c:	00db      	lsls	r3, r3, #3
1004307e:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
10043080:	481f      	ldr	r0, [pc, #124]	@ (10043100 <__NVIC_SetPriority+0xd4>)
10043082:	1dfb      	adds	r3, r7, #7
10043084:	781b      	ldrb	r3, [r3, #0]
10043086:	b25b      	sxtb	r3, r3
10043088:	089b      	lsrs	r3, r3, #2
1004308a:	430a      	orrs	r2, r1
1004308c:	33c0      	adds	r3, #192	@ 0xc0
1004308e:	009b      	lsls	r3, r3, #2
10043090:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
10043092:	e031      	b.n	100430f8 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
10043094:	4a1b      	ldr	r2, [pc, #108]	@ (10043104 <__NVIC_SetPriority+0xd8>)
10043096:	1dfb      	adds	r3, r7, #7
10043098:	781b      	ldrb	r3, [r3, #0]
1004309a:	0019      	movs	r1, r3
1004309c:	230f      	movs	r3, #15
1004309e:	400b      	ands	r3, r1
100430a0:	3b08      	subs	r3, #8
100430a2:	089b      	lsrs	r3, r3, #2
100430a4:	3306      	adds	r3, #6
100430a6:	009b      	lsls	r3, r3, #2
100430a8:	18d3      	adds	r3, r2, r3
100430aa:	3304      	adds	r3, #4
100430ac:	681b      	ldr	r3, [r3, #0]
100430ae:	1dfa      	adds	r2, r7, #7
100430b0:	7812      	ldrb	r2, [r2, #0]
100430b2:	0011      	movs	r1, r2
100430b4:	2203      	movs	r2, #3
100430b6:	400a      	ands	r2, r1
100430b8:	00d2      	lsls	r2, r2, #3
100430ba:	21ff      	movs	r1, #255	@ 0xff
100430bc:	4091      	lsls	r1, r2
100430be:	000a      	movs	r2, r1
100430c0:	43d2      	mvns	r2, r2
100430c2:	401a      	ands	r2, r3
100430c4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
100430c6:	683b      	ldr	r3, [r7, #0]
100430c8:	019b      	lsls	r3, r3, #6
100430ca:	22ff      	movs	r2, #255	@ 0xff
100430cc:	401a      	ands	r2, r3
100430ce:	1dfb      	adds	r3, r7, #7
100430d0:	781b      	ldrb	r3, [r3, #0]
100430d2:	0018      	movs	r0, r3
100430d4:	2303      	movs	r3, #3
100430d6:	4003      	ands	r3, r0
100430d8:	00db      	lsls	r3, r3, #3
100430da:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
100430dc:	4809      	ldr	r0, [pc, #36]	@ (10043104 <__NVIC_SetPriority+0xd8>)
100430de:	1dfb      	adds	r3, r7, #7
100430e0:	781b      	ldrb	r3, [r3, #0]
100430e2:	001c      	movs	r4, r3
100430e4:	230f      	movs	r3, #15
100430e6:	4023      	ands	r3, r4
100430e8:	3b08      	subs	r3, #8
100430ea:	089b      	lsrs	r3, r3, #2
100430ec:	430a      	orrs	r2, r1
100430ee:	3306      	adds	r3, #6
100430f0:	009b      	lsls	r3, r3, #2
100430f2:	18c3      	adds	r3, r0, r3
100430f4:	3304      	adds	r3, #4
100430f6:	601a      	str	r2, [r3, #0]
}
100430f8:	46c0      	nop			@ (mov r8, r8)
100430fa:	46bd      	mov	sp, r7
100430fc:	b003      	add	sp, #12
100430fe:	bd90      	pop	{r4, r7, pc}
10043100:	e000e100 	.word	0xe000e100
10043104:	e000ed00 	.word	0xe000ed00

10043108 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
10043108:	b580      	push	{r7, lr}
1004310a:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
1004310c:	f3bf 8f4f 	dsb	sy
}
10043110:	46c0      	nop			@ (mov r8, r8)
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = ((0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
10043112:	4b04      	ldr	r3, [pc, #16]	@ (10043124 <__NVIC_SystemReset+0x1c>)
10043114:	4a04      	ldr	r2, [pc, #16]	@ (10043128 <__NVIC_SystemReset+0x20>)
10043116:	60da      	str	r2, [r3, #12]
  __ASM volatile ("dsb 0xF":::"memory");
10043118:	f3bf 8f4f 	dsb	sy
}
1004311c:	46c0      	nop			@ (mov r8, r8)
                 SCB_AIRCR_SYSRESETREQ_Msk);
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
1004311e:	46c0      	nop			@ (mov r8, r8)
10043120:	e7fd      	b.n	1004311e <__NVIC_SystemReset+0x16>
10043122:	46c0      	nop			@ (mov r8, r8)
10043124:	e000ed00 	.word	0xe000ed00
10043128:	05fa0004 	.word	0x05fa0004

1004312c <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
1004312c:	b590      	push	{r4, r7, lr}
1004312e:	b087      	sub	sp, #28
10043130:	af00      	add	r7, sp, #0
  uint32_t lsiBw;
#endif
  uint8_t i;
  
  /* If the reset reason is a wakeup from power save restore the context */
  if ((RCC->CSR == 0) && ((PWR->SR1 != 0)||(PWR->SR3 != 0))) {
10043132:	4a64      	ldr	r2, [pc, #400]	@ (100432c4 <SystemInit+0x198>)
10043134:	2394      	movs	r3, #148	@ 0x94
10043136:	58d3      	ldr	r3, [r2, r3]
10043138:	2b00      	cmp	r3, #0
1004313a:	d10e      	bne.n	1004315a <SystemInit+0x2e>
1004313c:	4b62      	ldr	r3, [pc, #392]	@ (100432c8 <SystemInit+0x19c>)
1004313e:	691b      	ldr	r3, [r3, #16]
10043140:	2b00      	cmp	r3, #0
10043142:	d103      	bne.n	1004314c <SystemInit+0x20>
10043144:	4b60      	ldr	r3, [pc, #384]	@ (100432c8 <SystemInit+0x19c>)
10043146:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
10043148:	2b00      	cmp	r3, #0
1004314a:	d006      	beq.n	1004315a <SystemInit+0x2e>
    RAM_VR.WakeupFromSleepFlag = 1; /* A wakeup from power save occurred */
1004314c:	4b5f      	ldr	r3, [pc, #380]	@ (100432cc <SystemInit+0x1a0>)
1004314e:	2201      	movs	r2, #1
10043150:	609a      	str	r2, [r3, #8]
    CPUcontextRestore();            /* Restore the context */
10043152:	f000 f8ff 	bl	10043354 <CPUcontextRestore>
    /* if the context restore worked properly, we should never return here */
    while(1) { 
      NVIC_SystemReset(); 
10043156:	f7ff ffd7 	bl	10043108 <__NVIC_SystemReset>

  /* Configure the Vector Table location */
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#else
  SCB->VTOR = (uint32_t) (__vector_table);
1004315a:	4b5d      	ldr	r3, [pc, #372]	@ (100432d0 <SystemInit+0x1a4>)
1004315c:	4a5d      	ldr	r2, [pc, #372]	@ (100432d4 <SystemInit+0x1a8>)
1004315e:	609a      	str	r2, [r3, #8]
#endif /* USER_VECT_TAB_ADDRESS */

  /* Store in RAM the AppBase information */
  RAM_VR.AppBase = (uint32_t) SCB->VTOR;
10043160:	4b5b      	ldr	r3, [pc, #364]	@ (100432d0 <SystemInit+0x1a4>)
10043162:	689a      	ldr	r2, [r3, #8]
10043164:	4b59      	ldr	r3, [pc, #356]	@ (100432cc <SystemInit+0x1a0>)
10043166:	611a      	str	r2, [r3, #16]

  /* Enable all the RAM banks in retention during power save */
#if defined(PWR_CR2_RAMRET1)
  SET_BIT(PWR->CR2, PWR_CR2_RAMRET1);
10043168:	4b57      	ldr	r3, [pc, #348]	@ (100432c8 <SystemInit+0x19c>)
1004316a:	685a      	ldr	r2, [r3, #4]
1004316c:	4b56      	ldr	r3, [pc, #344]	@ (100432c8 <SystemInit+0x19c>)
1004316e:	2120      	movs	r1, #32
10043170:	430a      	orrs	r2, r1
10043172:	605a      	str	r2, [r3, #4]
#endif /* PWR_CR2_RAMRET1 */
  
#if defined(PWR_CR2_RAMRET2)
  SET_BIT(PWR->CR2, PWR_CR2_RAMRET2);
10043174:	4b54      	ldr	r3, [pc, #336]	@ (100432c8 <SystemInit+0x19c>)
10043176:	685a      	ldr	r2, [r3, #4]
10043178:	4b53      	ldr	r3, [pc, #332]	@ (100432c8 <SystemInit+0x19c>)
1004317a:	2140      	movs	r1, #64	@ 0x40
1004317c:	430a      	orrs	r2, r1
1004317e:	605a      	str	r2, [r3, #4]
#endif /* PWR_CR2_RAMRET2 */
  
#if defined(PWR_CR2_RAMRET3)
  SET_BIT(PWR->CR2, PWR_CR2_RAMRET3);
10043180:	4b51      	ldr	r3, [pc, #324]	@ (100432c8 <SystemInit+0x19c>)
10043182:	685a      	ldr	r2, [r3, #4]
10043184:	4b50      	ldr	r3, [pc, #320]	@ (100432c8 <SystemInit+0x19c>)
10043186:	2180      	movs	r1, #128	@ 0x80
10043188:	430a      	orrs	r2, r1
1004318a:	605a      	str	r2, [r3, #4]
#endif /* PWR_CR2_GPIORET */
   
  /* SMPS setup */
  if ((CFG_HW_SMPS == SMPS_ON) || (CFG_HW_SMPS == SMPS_BYPAPSS))
  {
    while(READ_BIT(PWR->SR2, PWR_SR2_SMPSRDY) != PWR_SR2_SMPSRDY); // Wait until SMPS is ready
1004318c:	46c0      	nop			@ (mov r8, r8)
1004318e:	4b4e      	ldr	r3, [pc, #312]	@ (100432c8 <SystemInit+0x19c>)
10043190:	695b      	ldr	r3, [r3, #20]
10043192:	2204      	movs	r2, #4
10043194:	4013      	ands	r3, r2
10043196:	2b04      	cmp	r3, #4
10043198:	d1f9      	bne.n	1004318e <SystemInit+0x62>
    MODIFY_REG(PWR->CR5, PWR_CR5_SMPSBOMSEL, (CFG_HW_SMPS_BOM<<PWR_CR5_SMPSBOMSEL_Pos)); // Configure the SMPS BOM
1004319a:	4b4b      	ldr	r3, [pc, #300]	@ (100432c8 <SystemInit+0x19c>)
1004319c:	69db      	ldr	r3, [r3, #28]
1004319e:	2230      	movs	r2, #48	@ 0x30
100431a0:	4393      	bics	r3, r2
100431a2:	001a      	movs	r2, r3
100431a4:	4b48      	ldr	r3, [pc, #288]	@ (100432c8 <SystemInit+0x19c>)
100431a6:	2120      	movs	r1, #32
100431a8:	430a      	orrs	r2, r1
100431aa:	61da      	str	r2, [r3, #28]
  }
  if ((CFG_HW_SMPS == SMPS_ON) || (CFG_HW_SMPS == SMPS_OFF))
  {
    MODIFY_REG(PWR->CR5, PWR_CR5_NOSMPS, (CFG_HW_SMPS<<PWR_CR5_NOSMPS_Pos)); // SMPS ON/OFF Configuration
100431ac:	4b46      	ldr	r3, [pc, #280]	@ (100432c8 <SystemInit+0x19c>)
100431ae:	69da      	ldr	r2, [r3, #28]
100431b0:	4b45      	ldr	r3, [pc, #276]	@ (100432c8 <SystemInit+0x19c>)
100431b2:	4949      	ldr	r1, [pc, #292]	@ (100432d8 <SystemInit+0x1ac>)
100431b4:	400a      	ands	r2, r1
100431b6:	61da      	str	r2, [r3, #28]
  }
  else
  {
    MODIFY_REG(PWR->CR5, PWR_CR5_SMPSFBYP, (1<<PWR_CR5_SMPSFBYP_Pos)); // SMPS BYPASS Configuration
  }
  MODIFY_REG(PWR->CR5, PWR_CR5_SMPSLPOPEN, (CFG_HW_SMPS_LOW_POWER<<PWR_CR5_SMPSLPOPEN_Pos)); // SMPS configuration during power save
100431b8:	4b43      	ldr	r3, [pc, #268]	@ (100432c8 <SystemInit+0x19c>)
100431ba:	69da      	ldr	r2, [r3, #28]
100431bc:	4b42      	ldr	r3, [pc, #264]	@ (100432c8 <SystemInit+0x19c>)
100431be:	2180      	movs	r1, #128	@ 0x80
100431c0:	0049      	lsls	r1, r1, #1
100431c2:	430a      	orrs	r2, r1
100431c4:	61da      	str	r2, [r3, #28]
  
  /* If Trimming values from engineering in flash locations are not present load default values */
  if (*(volatile uint32_t*)VALIDITY_LOCATION != VALIDITY_TAG)
100431c6:	4b45      	ldr	r3, [pc, #276]	@ (100432dc <SystemInit+0x1b0>)
100431c8:	681b      	ldr	r3, [r3, #0]
100431ca:	4a45      	ldr	r2, [pc, #276]	@ (100432e0 <SystemInit+0x1b4>)
100431cc:	4293      	cmp	r3, r2
100431ce:	d05b      	beq.n	10043288 <SystemInit+0x15c>
  {
#if defined(STM32WB06) || defined(STM32WB07)
    hsiCalib       = 0x1E;
100431d0:	231e      	movs	r3, #30
100431d2:	613b      	str	r3, [r7, #16]
    mainRegulator  = 0x08;
100431d4:	2308      	movs	r3, #8
100431d6:	60fb      	str	r3, [r7, #12]
    smpsOutVoltage = 0x03;
100431d8:	2303      	movs	r3, #3
100431da:	60bb      	str	r3, [r7, #8]
    lsiLpmu        = 0x08;
100431dc:	2308      	movs	r3, #8
100431de:	607b      	str	r3, [r7, #4]

    /* Set Low Speed Internal oscillator LPMU trimming value. */
    MODIFY_REG(PWR->ENGTRIM, PWR_ENGTRIM_TRIM_LSI_LPMU, ((lsiLpmu << PWR_ENGTRIM_TRIM_LSI_LPMU_Pos) & PWR_ENGTRIM_TRIM_LSI_LPMU));
100431e0:	4a39      	ldr	r2, [pc, #228]	@ (100432c8 <SystemInit+0x19c>)
100431e2:	2394      	movs	r3, #148	@ 0x94
100431e4:	58d3      	ldr	r3, [r2, r3]
100431e6:	221e      	movs	r2, #30
100431e8:	4393      	bics	r3, r2
100431ea:	001a      	movs	r2, r3
100431ec:	687b      	ldr	r3, [r7, #4]
100431ee:	005b      	lsls	r3, r3, #1
100431f0:	211e      	movs	r1, #30
100431f2:	400b      	ands	r3, r1
100431f4:	4934      	ldr	r1, [pc, #208]	@ (100432c8 <SystemInit+0x19c>)
100431f6:	4313      	orrs	r3, r2
100431f8:	2294      	movs	r2, #148	@ 0x94
100431fa:	508b      	str	r3, [r1, r2]
    SET_BIT(PWR->ENGTRIM, PWR_ENGTRIM_TRIMLSILPMUEN);
100431fc:	4a32      	ldr	r2, [pc, #200]	@ (100432c8 <SystemInit+0x19c>)
100431fe:	2394      	movs	r3, #148	@ 0x94
10043200:	58d3      	ldr	r3, [r2, r3]
10043202:	4931      	ldr	r1, [pc, #196]	@ (100432c8 <SystemInit+0x19c>)
10043204:	2201      	movs	r2, #1
10043206:	4313      	orrs	r3, r2
10043208:	2294      	movs	r2, #148	@ 0x94
1004320a:	508b      	str	r3, [r1, r2]
    MODIFY_REG(RCC->CSSWCR, RCC_CSSWCR_LSISWBW, lsiBw << RCC_CSSWCR_LSISWBW_Pos);
    SET_BIT(RCC->CSSWCR, RCC_CSSWCR_LSISWTRIMEN);
#endif
    
    /* Set HSI Calibration Trimming value */
    MODIFY_REG(RCC->CSSWCR, RCC_CSSWCR_HSITRIMSW, hsiCalib << RCC_CSSWCR_HSITRIMSW_Pos);
1004320c:	4b2d      	ldr	r3, [pc, #180]	@ (100432c4 <SystemInit+0x198>)
1004320e:	68db      	ldr	r3, [r3, #12]
10043210:	4a34      	ldr	r2, [pc, #208]	@ (100432e4 <SystemInit+0x1b8>)
10043212:	4013      	ands	r3, r2
10043214:	0019      	movs	r1, r3
10043216:	693b      	ldr	r3, [r7, #16]
10043218:	061a      	lsls	r2, r3, #24
1004321a:	4b2a      	ldr	r3, [pc, #168]	@ (100432c4 <SystemInit+0x198>)
1004321c:	430a      	orrs	r2, r1
1004321e:	60da      	str	r2, [r3, #12]
    SET_BIT(RCC->CSSWCR, RCC_CSSWCR_HSISWTRIMEN);
10043220:	4b28      	ldr	r3, [pc, #160]	@ (100432c4 <SystemInit+0x198>)
10043222:	68da      	ldr	r2, [r3, #12]
10043224:	4b27      	ldr	r3, [pc, #156]	@ (100432c4 <SystemInit+0x198>)
10043226:	2180      	movs	r1, #128	@ 0x80
10043228:	0409      	lsls	r1, r1, #16
1004322a:	430a      	orrs	r2, r1
1004322c:	60da      	str	r2, [r3, #12]
              
    /* Set Main Regulator voltage Trimming value */ 
    MODIFY_REG(PWR->ENGTRIM, PWR_ENGTRIM_TRIM_MR, ((mainRegulator << PWR_ENGTRIM_TRIM_MR_Pos) & PWR_ENGTRIM_TRIM_MR));
1004322e:	4a26      	ldr	r2, [pc, #152]	@ (100432c8 <SystemInit+0x19c>)
10043230:	2394      	movs	r3, #148	@ 0x94
10043232:	58d3      	ldr	r3, [r2, r3]
10043234:	4a2c      	ldr	r2, [pc, #176]	@ (100432e8 <SystemInit+0x1bc>)
10043236:	401a      	ands	r2, r3
10043238:	68fb      	ldr	r3, [r7, #12]
1004323a:	0199      	lsls	r1, r3, #6
1004323c:	23f0      	movs	r3, #240	@ 0xf0
1004323e:	009b      	lsls	r3, r3, #2
10043240:	400b      	ands	r3, r1
10043242:	4921      	ldr	r1, [pc, #132]	@ (100432c8 <SystemInit+0x19c>)
10043244:	4313      	orrs	r3, r2
10043246:	2294      	movs	r2, #148	@ 0x94
10043248:	508b      	str	r3, [r1, r2]
    SET_BIT(PWR->ENGTRIM, PWR_ENGTRIM_TRIMMREN);
1004324a:	4a1f      	ldr	r2, [pc, #124]	@ (100432c8 <SystemInit+0x19c>)
1004324c:	2394      	movs	r3, #148	@ 0x94
1004324e:	58d3      	ldr	r3, [r2, r3]
10043250:	491d      	ldr	r1, [pc, #116]	@ (100432c8 <SystemInit+0x19c>)
10043252:	2220      	movs	r2, #32
10043254:	4313      	orrs	r3, r2
10043256:	2294      	movs	r2, #148	@ 0x94
10043258:	508b      	str	r3, [r1, r2]

    /* Set SMPS output voltage Trimming value */
    MODIFY_REG(PWR->ENGTRIM, PWR_ENGTRIM_SMPS_TRIM, ((smpsOutVoltage << PWR_ENGTRIM_SMPS_TRIM_Pos) & PWR_ENGTRIM_SMPS_TRIM));
1004325a:	4a1b      	ldr	r2, [pc, #108]	@ (100432c8 <SystemInit+0x19c>)
1004325c:	2394      	movs	r3, #148	@ 0x94
1004325e:	58d3      	ldr	r3, [r2, r3]
10043260:	4a22      	ldr	r2, [pc, #136]	@ (100432ec <SystemInit+0x1c0>)
10043262:	401a      	ands	r2, r3
10043264:	68bb      	ldr	r3, [r7, #8]
10043266:	02d9      	lsls	r1, r3, #11
10043268:	23e0      	movs	r3, #224	@ 0xe0
1004326a:	019b      	lsls	r3, r3, #6
1004326c:	400b      	ands	r3, r1
1004326e:	4916      	ldr	r1, [pc, #88]	@ (100432c8 <SystemInit+0x19c>)
10043270:	4313      	orrs	r3, r2
10043272:	2294      	movs	r2, #148	@ 0x94
10043274:	508b      	str	r3, [r1, r2]
    SET_BIT(PWR->ENGTRIM, PWR_ENGTRIM_SMPSTRIMEN);    
10043276:	4a14      	ldr	r2, [pc, #80]	@ (100432c8 <SystemInit+0x19c>)
10043278:	2394      	movs	r3, #148	@ 0x94
1004327a:	58d3      	ldr	r3, [r2, r3]
1004327c:	4912      	ldr	r1, [pc, #72]	@ (100432c8 <SystemInit+0x19c>)
1004327e:	2280      	movs	r2, #128	@ 0x80
10043280:	00d2      	lsls	r2, r2, #3
10043282:	4313      	orrs	r3, r2
10043284:	2294      	movs	r2, #148	@ 0x94
10043286:	508b      	str	r3, [r1, r2]
  }

  /* Set all the interrupt with low priprity */
  for (i=0; i<32; i++)
10043288:	2317      	movs	r3, #23
1004328a:	18fb      	adds	r3, r7, r3
1004328c:	2200      	movs	r2, #0
1004328e:	701a      	strb	r2, [r3, #0]
10043290:	e00d      	b.n	100432ae <SystemInit+0x182>
  {
    NVIC_SetPriority((IRQn_Type)i, IRQ_LOW_PRIORITY);
10043292:	2417      	movs	r4, #23
10043294:	193b      	adds	r3, r7, r4
10043296:	781b      	ldrb	r3, [r3, #0]
10043298:	b25b      	sxtb	r3, r3
1004329a:	2103      	movs	r1, #3
1004329c:	0018      	movs	r0, r3
1004329e:	f7ff fec5 	bl	1004302c <__NVIC_SetPriority>
  for (i=0; i<32; i++)
100432a2:	0021      	movs	r1, r4
100432a4:	187b      	adds	r3, r7, r1
100432a6:	781a      	ldrb	r2, [r3, #0]
100432a8:	187b      	adds	r3, r7, r1
100432aa:	3201      	adds	r2, #1
100432ac:	701a      	strb	r2, [r3, #0]
100432ae:	2317      	movs	r3, #23
100432b0:	18fb      	adds	r3, r7, r3
100432b2:	781b      	ldrb	r3, [r3, #0]
100432b4:	2b1f      	cmp	r3, #31
100432b6:	d9ec      	bls.n	10043292 <SystemInit+0x166>
  __ASM volatile ("cpsie i" : : : "memory");
100432b8:	b662      	cpsie	i
}
100432ba:	46c0      	nop			@ (mov r8, r8)
  }
  
  /* Enable all the irqs */
  __enable_irq();
}
100432bc:	46c0      	nop			@ (mov r8, r8)
100432be:	46bd      	mov	sp, r7
100432c0:	b007      	add	sp, #28
100432c2:	bd90      	pop	{r4, r7, pc}
100432c4:	48400000 	.word	0x48400000
100432c8:	48500000 	.word	0x48500000
100432cc:	20000004 	.word	0x20000004
100432d0:	e000ed00 	.word	0xe000ed00
100432d4:	10040000 	.word	0x10040000
100432d8:	fffffbff 	.word	0xfffffbff
100432dc:	10001ef8 	.word	0x10001ef8
100432e0:	fcbceccc 	.word	0xfcbceccc
100432e4:	c0ffffff 	.word	0xc0ffffff
100432e8:	fffffc3f 	.word	0xfffffc3f
100432ec:	ffffc7ff 	.word	0xffffc7ff

100432f0 <SystemCoreClockUpdate>:
  *
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
100432f0:	b580      	push	{r7, lr}
100432f2:	b082      	sub	sp, #8
100432f4:	af00      	add	r7, sp, #0
  uint8_t directHSE_enabled;
  uint8_t divPrescaler;

  /* Get SYSCLK source HSE or HSI+PLL64MHz */
  directHSE_enabled = (RCC->CFGR & RCC_CFGR_HSESEL) >> RCC_CFGR_HSESEL_Pos;
100432f6:	4b13      	ldr	r3, [pc, #76]	@ (10043344 <SystemCoreClockUpdate+0x54>)
100432f8:	689b      	ldr	r3, [r3, #8]
100432fa:	085b      	lsrs	r3, r3, #1
100432fc:	b2da      	uxtb	r2, r3
100432fe:	1dfb      	adds	r3, r7, #7
10043300:	2101      	movs	r1, #1
10043302:	400a      	ands	r2, r1
10043304:	701a      	strb	r2, [r3, #0]

#if defined(STM32WB06) || defined(STM32WB07)
  /* Get the clock divider */
    divPrescaler = (RCC->CFGR & RCC_CFGR_CLKSYSDIV) >> RCC_CFGR_CLKSYSDIV_Pos;
10043306:	4b0f      	ldr	r3, [pc, #60]	@ (10043344 <SystemCoreClockUpdate+0x54>)
10043308:	689b      	ldr	r3, [r3, #8]
1004330a:	095b      	lsrs	r3, r3, #5
1004330c:	b2da      	uxtb	r2, r3
1004330e:	1dbb      	adds	r3, r7, #6
10043310:	2107      	movs	r1, #7
10043312:	400a      	ands	r2, r1
10043314:	701a      	strb	r2, [r3, #0]
#else
  /* Get the clock divider */
  divPrescaler = (RCC->CFGR & RCC_CFGR_CLKSYSDIV_STATUS) >> RCC_CFGR_CLKSYSDIV_STATUS_Pos;
#endif

  if (directHSE_enabled)
10043316:	1dfb      	adds	r3, r7, #7
10043318:	781b      	ldrb	r3, [r3, #0]
1004331a:	2b00      	cmp	r3, #0
1004331c:	d007      	beq.n	1004332e <SystemCoreClockUpdate+0x3e>
  {
    SystemCoreClock = HSE_VALUE >> (divPrescaler - 1U);
1004331e:	1dbb      	adds	r3, r7, #6
10043320:	781b      	ldrb	r3, [r3, #0]
10043322:	3b01      	subs	r3, #1
10043324:	4a08      	ldr	r2, [pc, #32]	@ (10043348 <SystemCoreClockUpdate+0x58>)
10043326:	40da      	lsrs	r2, r3
10043328:	4b08      	ldr	r3, [pc, #32]	@ (1004334c <SystemCoreClockUpdate+0x5c>)
1004332a:	601a      	str	r2, [r3, #0]
  }
  else
  {
    SystemCoreClock = HSI_VALUE >> divPrescaler;
  }  
}
1004332c:	e005      	b.n	1004333a <SystemCoreClockUpdate+0x4a>
    SystemCoreClock = HSI_VALUE >> divPrescaler;
1004332e:	1dbb      	adds	r3, r7, #6
10043330:	781b      	ldrb	r3, [r3, #0]
10043332:	4a07      	ldr	r2, [pc, #28]	@ (10043350 <SystemCoreClockUpdate+0x60>)
10043334:	40da      	lsrs	r2, r3
10043336:	4b05      	ldr	r3, [pc, #20]	@ (1004334c <SystemCoreClockUpdate+0x5c>)
10043338:	601a      	str	r2, [r3, #0]
}
1004333a:	46c0      	nop			@ (mov r8, r8)
1004333c:	46bd      	mov	sp, r7
1004333e:	b002      	add	sp, #8
10043340:	bd80      	pop	{r7, pc}
10043342:	46c0      	nop			@ (mov r8, r8)
10043344:	48400000 	.word	0x48400000
10043348:	01e84800 	.word	0x01e84800
1004334c:	2000064c 	.word	0x2000064c
10043350:	03d09000 	.word	0x03d09000

10043354 <CPUcontextRestore>:
  *         by popping it from the stack 
  * @param  None
  * @retval None
  */
__WEAK void CPUcontextRestore(void)
{
10043354:	b580      	push	{r7, lr}
10043356:	af00      	add	r7, sp, #0
}
10043358:	46c0      	nop			@ (mov r8, r8)
1004335a:	46bd      	mov	sp, r7
1004335c:	bd80      	pop	{r7, pc}
	...

10043360 <Reset_Handler>:

	.section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
10043360:	4810      	ldr	r0, [pc, #64]	@ (100433a4 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
10043362:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
10043364:	f7ff fee2 	bl	1004312c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs  r1, #0
10043368:	2100      	movs	r1, #0
  b  LoopCopyDataInit
1004336a:	e003      	b.n	10043374 <LoopCopyDataInit>

1004336c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
1004336c:	4b0e      	ldr	r3, [pc, #56]	@ (100433a8 <LoopForever+0x6>)
  ldr  r3, [r3, r1]
1004336e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
10043370:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
10043372:	3104      	adds	r1, #4

10043374 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr  r0, =_sdata
10043374:	480d      	ldr	r0, [pc, #52]	@ (100433ac <LoopForever+0xa>)
  ldr  r3, =_edata
10043376:	4b0e      	ldr	r3, [pc, #56]	@ (100433b0 <LoopForever+0xe>)
  adds  r2, r0, r1
10043378:	1842      	adds	r2, r0, r1
  cmp  r2, r3
1004337a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
1004337c:	d3f6      	bcc.n	1004336c <CopyDataInit>
  ldr  r2, =_sbss
1004337e:	4a0d      	ldr	r2, [pc, #52]	@ (100433b4 <LoopForever+0x12>)
  b  LoopFillZerobss
10043380:	e002      	b.n	10043388 <LoopFillZerobss>

10043382 <FillZerobss>:

/* Zero fill the bss segment. */
FillZerobss:
  movs  r3, #0
10043382:	2300      	movs	r3, #0
  str  r3, [r2]
10043384:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
10043386:	3204      	adds	r2, #4

10043388 <LoopFillZerobss>:

LoopFillZerobss:
  ldr  r3, = _ebss
10043388:	4b0b      	ldr	r3, [pc, #44]	@ (100433b8 <LoopForever+0x16>)
  cmp  r2, r3
1004338a:	429a      	cmp	r2, r3
  bcc  FillZerobss
1004338c:	d3f9      	bcc.n	10043382 <FillZerobss>
  ldr  r2, =_sbssblue
1004338e:	4a0b      	ldr	r2, [pc, #44]	@ (100433bc <LoopForever+0x1a>)
  b  LoopFillZeroBlueRam
10043390:	e002      	b.n	10043398 <LoopFillZeroBlueRam>

10043392 <FillZerobssram>:


FillZerobssram:
  movs  r3, #0
10043392:	2300      	movs	r3, #0
  str  r3, [r2]
10043394:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
10043396:	3204      	adds	r2, #4

10043398 <LoopFillZeroBlueRam>:

LoopFillZeroBlueRam:
  ldr  r3, = _ebssblue
10043398:	4b09      	ldr	r3, [pc, #36]	@ (100433c0 <LoopForever+0x1e>)
  cmp  r2, r3
1004339a:	429a      	cmp	r2, r3
  bcc  FillZerobssram
1004339c:	d3f9      	bcc.n	10043392 <FillZerobssram>

/* Call the application's entry point.*/
  bl  main
1004339e:	f7ff f96d 	bl	1004267c <main>

100433a2 <LoopForever>:

LoopForever:
    b LoopForever
100433a2:	e7fe      	b.n	100433a2 <LoopForever>
   ldr   r0, =_estack
100433a4:	20010000 	.word	0x20010000
  ldr  r3, =_sidata
100433a8:	100493d4 	.word	0x100493d4
  ldr  r0, =_sdata
100433ac:	20000638 	.word	0x20000638
  ldr  r3, =_edata
100433b0:	200006a4 	.word	0x200006a4
  ldr  r2, =_sbss
100433b4:	2000017c 	.word	0x2000017c
  ldr  r3, = _ebss
100433b8:	20000638 	.word	0x20000638
  ldr  r2, =_sbssblue
100433bc:	200000c0 	.word	0x200000c0
  ldr  r3, = _ebssblue
100433c0:	2000017c 	.word	0x2000017c

100433c4 <ADC_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
100433c4:	e7fe      	b.n	100433c4 <ADC_IRQHandler>
	...

100433c8 <DW1000_read_reg>:
/*!<
 * LL functions
 * */

static inline void DW1000_read_reg(DW1000_t *dw1000, uint32_t reg,
		uint16_t offset, uint8_t *buffer, uint32_t size) {
100433c8:	b580      	push	{r7, lr}
100433ca:	b084      	sub	sp, #16
100433cc:	af00      	add	r7, sp, #0
100433ce:	60f8      	str	r0, [r7, #12]
100433d0:	60b9      	str	r1, [r7, #8]
100433d2:	603b      	str	r3, [r7, #0]
100433d4:	1dbb      	adds	r3, r7, #6
100433d6:	801a      	strh	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
100433d8:	b672      	cpsid	i
}
100433da:	46c0      	nop			@ (mov r8, r8)
	__disable_irq();
	reg &= 0x3FU;
100433dc:	68bb      	ldr	r3, [r7, #8]
100433de:	223f      	movs	r2, #63	@ 0x3f
100433e0:	4013      	ands	r3, r2
100433e2:	60bb      	str	r3, [r7, #8]
	HAL_GPIO_WritePin(dw1000->NSS_port, dw1000->NSS_pin, 0);
100433e4:	68fb      	ldr	r3, [r7, #12]
100433e6:	6858      	ldr	r0, [r3, #4]
100433e8:	68fb      	ldr	r3, [r7, #12]
100433ea:	899b      	ldrh	r3, [r3, #12]
100433ec:	2200      	movs	r2, #0
100433ee:	0019      	movs	r1, r3
100433f0:	f001 fc11 	bl	10044c16 <HAL_GPIO_WritePin>
	if (offset & 0xFF00) {
100433f4:	1dbb      	adds	r3, r7, #6
100433f6:	881a      	ldrh	r2, [r3, #0]
100433f8:	23ff      	movs	r3, #255	@ 0xff
100433fa:	021b      	lsls	r3, r3, #8
100433fc:	4013      	ands	r3, r2
100433fe:	d010      	beq.n	10043422 <DW1000_read_reg+0x5a>
		reg |= 0x8040U | (offset << 8);
10043400:	1dbb      	adds	r3, r7, #6
10043402:	881b      	ldrh	r3, [r3, #0]
10043404:	021a      	lsls	r2, r3, #8
10043406:	68bb      	ldr	r3, [r7, #8]
10043408:	4313      	orrs	r3, r2
1004340a:	4a1f      	ldr	r2, [pc, #124]	@ (10043488 <DW1000_read_reg+0xc0>)
1004340c:	4313      	orrs	r3, r2
1004340e:	60bb      	str	r3, [r7, #8]
		SPI_write8(dw1000->spi, (void*) &reg, 3, DW1000_TIMEOUT);
10043410:	68fb      	ldr	r3, [r7, #12]
10043412:	6818      	ldr	r0, [r3, #0]
10043414:	2308      	movs	r3, #8
10043416:	18f9      	adds	r1, r7, r3
10043418:	230a      	movs	r3, #10
1004341a:	2203      	movs	r2, #3
1004341c:	f000 ff9c 	bl	10044358 <SPI_write8>
10043420:	e01c      	b.n	1004345c <DW1000_read_reg+0x94>
	} else if (offset) {
10043422:	1dbb      	adds	r3, r7, #6
10043424:	881b      	ldrh	r3, [r3, #0]
10043426:	2b00      	cmp	r3, #0
10043428:	d010      	beq.n	1004344c <DW1000_read_reg+0x84>
		reg |= 0x40U | (offset << 8);
1004342a:	1dbb      	adds	r3, r7, #6
1004342c:	881b      	ldrh	r3, [r3, #0]
1004342e:	021a      	lsls	r2, r3, #8
10043430:	68bb      	ldr	r3, [r7, #8]
10043432:	4313      	orrs	r3, r2
10043434:	2240      	movs	r2, #64	@ 0x40
10043436:	4313      	orrs	r3, r2
10043438:	60bb      	str	r3, [r7, #8]
		SPI_write8(dw1000->spi, (void*) &reg, 2, DW1000_TIMEOUT);
1004343a:	68fb      	ldr	r3, [r7, #12]
1004343c:	6818      	ldr	r0, [r3, #0]
1004343e:	2308      	movs	r3, #8
10043440:	18f9      	adds	r1, r7, r3
10043442:	230a      	movs	r3, #10
10043444:	2202      	movs	r2, #2
10043446:	f000 ff87 	bl	10044358 <SPI_write8>
1004344a:	e007      	b.n	1004345c <DW1000_read_reg+0x94>
	} else {
		SPI_write8(dw1000->spi, (void*) &reg, 1, DW1000_TIMEOUT);
1004344c:	68fb      	ldr	r3, [r7, #12]
1004344e:	6818      	ldr	r0, [r3, #0]
10043450:	2308      	movs	r3, #8
10043452:	18f9      	adds	r1, r7, r3
10043454:	230a      	movs	r3, #10
10043456:	2201      	movs	r2, #1
10043458:	f000 ff7e 	bl	10044358 <SPI_write8>
	}
	SPI_read8(dw1000->spi, buffer, size, DW1000_TIMEOUT);
1004345c:	68fb      	ldr	r3, [r7, #12]
1004345e:	6818      	ldr	r0, [r3, #0]
10043460:	69ba      	ldr	r2, [r7, #24]
10043462:	6839      	ldr	r1, [r7, #0]
10043464:	230a      	movs	r3, #10
10043466:	f000 fff3 	bl	10044450 <SPI_read8>
	HAL_GPIO_WritePin(dw1000->NSS_port, dw1000->NSS_pin, 1);
1004346a:	68fb      	ldr	r3, [r7, #12]
1004346c:	6858      	ldr	r0, [r3, #4]
1004346e:	68fb      	ldr	r3, [r7, #12]
10043470:	899b      	ldrh	r3, [r3, #12]
10043472:	2201      	movs	r2, #1
10043474:	0019      	movs	r1, r3
10043476:	f001 fbce 	bl	10044c16 <HAL_GPIO_WritePin>
  __ASM volatile ("cpsie i" : : : "memory");
1004347a:	b662      	cpsie	i
}
1004347c:	46c0      	nop			@ (mov r8, r8)
	__enable_irq();
}
1004347e:	46c0      	nop			@ (mov r8, r8)
10043480:	46bd      	mov	sp, r7
10043482:	b004      	add	sp, #16
10043484:	bd80      	pop	{r7, pc}
10043486:	46c0      	nop			@ (mov r8, r8)
10043488:	00008040 	.word	0x00008040

1004348c <DW1000_write_reg>:

static inline void DW1000_write_reg(DW1000_t *dw1000, uint32_t reg,
		uint16_t offset, uint8_t *buffer, uint32_t size) {
1004348c:	b580      	push	{r7, lr}
1004348e:	b084      	sub	sp, #16
10043490:	af00      	add	r7, sp, #0
10043492:	60f8      	str	r0, [r7, #12]
10043494:	60b9      	str	r1, [r7, #8]
10043496:	603b      	str	r3, [r7, #0]
10043498:	1dbb      	adds	r3, r7, #6
1004349a:	801a      	strh	r2, [r3, #0]
	reg = (reg & 0x3FU) | 0x80;
1004349c:	68bb      	ldr	r3, [r7, #8]
1004349e:	223f      	movs	r2, #63	@ 0x3f
100434a0:	4013      	ands	r3, r2
100434a2:	2280      	movs	r2, #128	@ 0x80
100434a4:	4313      	orrs	r3, r2
100434a6:	60bb      	str	r3, [r7, #8]
	HAL_GPIO_WritePin(dw1000->NSS_port, dw1000->NSS_pin, 0);
100434a8:	68fb      	ldr	r3, [r7, #12]
100434aa:	6858      	ldr	r0, [r3, #4]
100434ac:	68fb      	ldr	r3, [r7, #12]
100434ae:	899b      	ldrh	r3, [r3, #12]
100434b0:	2200      	movs	r2, #0
100434b2:	0019      	movs	r1, r3
100434b4:	f001 fbaf 	bl	10044c16 <HAL_GPIO_WritePin>
	if (offset & 0xFF00) {
100434b8:	1dbb      	adds	r3, r7, #6
100434ba:	881a      	ldrh	r2, [r3, #0]
100434bc:	23ff      	movs	r3, #255	@ 0xff
100434be:	021b      	lsls	r3, r3, #8
100434c0:	4013      	ands	r3, r2
100434c2:	d010      	beq.n	100434e6 <DW1000_write_reg+0x5a>
		reg |= 0x8040U | (offset << 8);
100434c4:	1dbb      	adds	r3, r7, #6
100434c6:	881b      	ldrh	r3, [r3, #0]
100434c8:	021a      	lsls	r2, r3, #8
100434ca:	68bb      	ldr	r3, [r7, #8]
100434cc:	4313      	orrs	r3, r2
100434ce:	4a1e      	ldr	r2, [pc, #120]	@ (10043548 <DW1000_write_reg+0xbc>)
100434d0:	4313      	orrs	r3, r2
100434d2:	60bb      	str	r3, [r7, #8]
		SPI_write8(dw1000->spi, (void*) &reg, 3, DW1000_TIMEOUT);
100434d4:	68fb      	ldr	r3, [r7, #12]
100434d6:	6818      	ldr	r0, [r3, #0]
100434d8:	2308      	movs	r3, #8
100434da:	18f9      	adds	r1, r7, r3
100434dc:	230a      	movs	r3, #10
100434de:	2203      	movs	r2, #3
100434e0:	f000 ff3a 	bl	10044358 <SPI_write8>
100434e4:	e01c      	b.n	10043520 <DW1000_write_reg+0x94>
	} else if (offset) {
100434e6:	1dbb      	adds	r3, r7, #6
100434e8:	881b      	ldrh	r3, [r3, #0]
100434ea:	2b00      	cmp	r3, #0
100434ec:	d010      	beq.n	10043510 <DW1000_write_reg+0x84>
		reg |= 0x40U | (offset << 8);
100434ee:	1dbb      	adds	r3, r7, #6
100434f0:	881b      	ldrh	r3, [r3, #0]
100434f2:	021a      	lsls	r2, r3, #8
100434f4:	68bb      	ldr	r3, [r7, #8]
100434f6:	4313      	orrs	r3, r2
100434f8:	2240      	movs	r2, #64	@ 0x40
100434fa:	4313      	orrs	r3, r2
100434fc:	60bb      	str	r3, [r7, #8]
		SPI_write8(dw1000->spi, (void*) &reg, 2, DW1000_TIMEOUT);
100434fe:	68fb      	ldr	r3, [r7, #12]
10043500:	6818      	ldr	r0, [r3, #0]
10043502:	2308      	movs	r3, #8
10043504:	18f9      	adds	r1, r7, r3
10043506:	230a      	movs	r3, #10
10043508:	2202      	movs	r2, #2
1004350a:	f000 ff25 	bl	10044358 <SPI_write8>
1004350e:	e007      	b.n	10043520 <DW1000_write_reg+0x94>
	} else {
		SPI_write8(dw1000->spi, (void*) &reg, 1, DW1000_TIMEOUT);
10043510:	68fb      	ldr	r3, [r7, #12]
10043512:	6818      	ldr	r0, [r3, #0]
10043514:	2308      	movs	r3, #8
10043516:	18f9      	adds	r1, r7, r3
10043518:	230a      	movs	r3, #10
1004351a:	2201      	movs	r2, #1
1004351c:	f000 ff1c 	bl	10044358 <SPI_write8>
	}
	SPI_write8(dw1000->spi, buffer, size, DW1000_TIMEOUT);
10043520:	68fb      	ldr	r3, [r7, #12]
10043522:	6818      	ldr	r0, [r3, #0]
10043524:	69ba      	ldr	r2, [r7, #24]
10043526:	6839      	ldr	r1, [r7, #0]
10043528:	230a      	movs	r3, #10
1004352a:	f000 ff15 	bl	10044358 <SPI_write8>
	HAL_GPIO_WritePin(dw1000->NSS_port, dw1000->NSS_pin, 1);
1004352e:	68fb      	ldr	r3, [r7, #12]
10043530:	6858      	ldr	r0, [r3, #4]
10043532:	68fb      	ldr	r3, [r7, #12]
10043534:	899b      	ldrh	r3, [r3, #12]
10043536:	2201      	movs	r2, #1
10043538:	0019      	movs	r1, r3
1004353a:	f001 fb6c 	bl	10044c16 <HAL_GPIO_WritePin>
}
1004353e:	46c0      	nop			@ (mov r8, r8)
10043540:	46bd      	mov	sp, r7
10043542:	b004      	add	sp, #16
10043544:	bd80      	pop	{r7, pc}
10043546:	46c0      	nop			@ (mov r8, r8)
10043548:	00008040 	.word	0x00008040

1004354c <DW1000_init>:

/*!<
 * functions
 * */
void DW1000_init(DW1000_t *dw1000) {
1004354c:	b590      	push	{r4, r7, lr}
1004354e:	b087      	sub	sp, #28
10043550:	af02      	add	r7, sp, #8
10043552:	6078      	str	r0, [r7, #4]
	uint32_t tmp;
	// reset
	HAL_GPIO_WritePin(dw1000->NRST_port, dw1000->NRST_pin, 0);
10043554:	687b      	ldr	r3, [r7, #4]
10043556:	6898      	ldr	r0, [r3, #8]
10043558:	687b      	ldr	r3, [r7, #4]
1004355a:	89db      	ldrh	r3, [r3, #14]
1004355c:	2200      	movs	r2, #0
1004355e:	0019      	movs	r1, r3
10043560:	f001 fb59 	bl	10044c16 <HAL_GPIO_WritePin>
	HAL_Delay(1);
10043564:	2001      	movs	r0, #1
10043566:	f001 f8ab 	bl	100446c0 <HAL_Delay>

	HAL_GPIO_WritePin(dw1000->NRST_port, dw1000->NRST_pin, 1);
1004356a:	687b      	ldr	r3, [r7, #4]
1004356c:	6898      	ldr	r0, [r3, #8]
1004356e:	687b      	ldr	r3, [r7, #4]
10043570:	89db      	ldrh	r3, [r3, #14]
10043572:	2201      	movs	r2, #1
10043574:	0019      	movs	r1, r3
10043576:	f001 fb4e 	bl	10044c16 <HAL_GPIO_WritePin>

	// check devid
	DW1000_read_reg(dw1000, DEV_ID_ID, 0, (void*) &tmp, 4);
1004357a:	230c      	movs	r3, #12
1004357c:	18fb      	adds	r3, r7, r3
1004357e:	6878      	ldr	r0, [r7, #4]
10043580:	2204      	movs	r2, #4
10043582:	9200      	str	r2, [sp, #0]
10043584:	2200      	movs	r2, #0
10043586:	2100      	movs	r1, #0
10043588:	f7ff ff1e 	bl	100433c8 <DW1000_read_reg>
	if (tmp != 0xDECA0130UL) {
1004358c:	68fb      	ldr	r3, [r7, #12]
1004358e:	4a9c      	ldr	r2, [pc, #624]	@ (10043800 <DW1000_init+0x2b4>)
10043590:	4293      	cmp	r3, r2
10043592:	d001      	beq.n	10043598 <DW1000_init+0x4c>
		for (;;)
10043594:	46c0      	nop			@ (mov r8, r8)
10043596:	e7fd      	b.n	10043594 <DW1000_init+0x48>
			;
	}

	// enable clock
	DW1000_read_reg(dw1000, PMSC_ID, PMSC_CTRL0_OFFSET, (void*) &tmp, 2);
10043598:	240c      	movs	r4, #12
1004359a:	193b      	adds	r3, r7, r4
1004359c:	6878      	ldr	r0, [r7, #4]
1004359e:	2202      	movs	r2, #2
100435a0:	9200      	str	r2, [sp, #0]
100435a2:	2200      	movs	r2, #0
100435a4:	2136      	movs	r1, #54	@ 0x36
100435a6:	f7ff ff0f 	bl	100433c8 <DW1000_read_reg>
	tmp &= 0xFFFCU;	// reset sys_clk select
100435aa:	68fb      	ldr	r3, [r7, #12]
100435ac:	4a95      	ldr	r2, [pc, #596]	@ (10043804 <DW1000_init+0x2b8>)
100435ae:	4013      	ands	r3, r2
100435b0:	60fb      	str	r3, [r7, #12]
	tmp |= 0x0001U;	// select XTI as sys_clk
100435b2:	68fb      	ldr	r3, [r7, #12]
100435b4:	2201      	movs	r2, #1
100435b6:	4313      	orrs	r3, r2
100435b8:	60fb      	str	r3, [r7, #12]
	DW1000_write_reg(dw1000, PMSC_ID, PMSC_CTRL0_OFFSET, (void*) &tmp, 2);
100435ba:	193b      	adds	r3, r7, r4
100435bc:	6878      	ldr	r0, [r7, #4]
100435be:	2202      	movs	r2, #2
100435c0:	9200      	str	r2, [sp, #0]
100435c2:	2200      	movs	r2, #0
100435c4:	2136      	movs	r1, #54	@ 0x36
100435c6:	f7ff ff61 	bl	1004348c <DW1000_write_reg>

	tmp = PMSC_CTRL1_PKTSEQ_DISABLE;
100435ca:	2300      	movs	r3, #0
100435cc:	60fb      	str	r3, [r7, #12]
	DW1000_write_reg(dw1000, PMSC_ID, PMSC_CTRL1_OFFSET, (void*) &tmp, 2); // Disable PMSC ctrl of RF and RX clk blocks
100435ce:	193b      	adds	r3, r7, r4
100435d0:	6878      	ldr	r0, [r7, #4]
100435d2:	2202      	movs	r2, #2
100435d4:	9200      	str	r2, [sp, #0]
100435d6:	2204      	movs	r2, #4
100435d8:	2136      	movs	r1, #54	@ 0x36
100435da:	f7ff ff57 	bl	1004348c <DW1000_write_reg>

	// Clear any AON auto download bits (as reset will trigger AON download)
	tmp = 0x00;
100435de:	2300      	movs	r3, #0
100435e0:	60fb      	str	r3, [r7, #12]
	DW1000_write_reg(dw1000, AON_ID, AON_WCFG_OFFSET, (void*) &tmp, 2);
100435e2:	193b      	adds	r3, r7, r4
100435e4:	6878      	ldr	r0, [r7, #4]
100435e6:	2202      	movs	r2, #2
100435e8:	9200      	str	r2, [sp, #0]
100435ea:	2200      	movs	r2, #0
100435ec:	212c      	movs	r1, #44	@ 0x2c
100435ee:	f7ff ff4d 	bl	1004348c <DW1000_write_reg>
	// Clear the wake-up configuration
	DW1000_write_reg(dw1000, AON_ID, AON_CFG0_OFFSET, (void*) &tmp, 1);
100435f2:	193b      	adds	r3, r7, r4
100435f4:	6878      	ldr	r0, [r7, #4]
100435f6:	2201      	movs	r2, #1
100435f8:	9200      	str	r2, [sp, #0]
100435fa:	2206      	movs	r2, #6
100435fc:	212c      	movs	r1, #44	@ 0x2c
100435fe:	f7ff ff45 	bl	1004348c <DW1000_write_reg>
	// Upload the new configuration
	DW1000_write_reg(dw1000, AON_ID, AON_CTRL_OFFSET, (void*) &tmp, 1); // Clear the register
10043602:	193b      	adds	r3, r7, r4
10043604:	6878      	ldr	r0, [r7, #4]
10043606:	2201      	movs	r2, #1
10043608:	9200      	str	r2, [sp, #0]
1004360a:	2202      	movs	r2, #2
1004360c:	212c      	movs	r1, #44	@ 0x2c
1004360e:	f7ff ff3d 	bl	1004348c <DW1000_write_reg>
	tmp = AON_CTRL_SAVE;
10043612:	2302      	movs	r3, #2
10043614:	60fb      	str	r3, [r7, #12]
	DW1000_write_reg(dw1000, AON_ID, AON_CTRL_OFFSET, (void*) &tmp, 1);
10043616:	193b      	adds	r3, r7, r4
10043618:	6878      	ldr	r0, [r7, #4]
1004361a:	2201      	movs	r2, #1
1004361c:	9200      	str	r2, [sp, #0]
1004361e:	2202      	movs	r2, #2
10043620:	212c      	movs	r1, #44	@ 0x2c
10043622:	f7ff ff33 	bl	1004348c <DW1000_write_reg>

	// Reset HIF, TX, RX and PMSC (set the reset bits)
	tmp = PMSC_CTRL0_RESET_ALL;
10043626:	2300      	movs	r3, #0
10043628:	60fb      	str	r3, [r7, #12]
	DW1000_write_reg(dw1000, PMSC_ID, PMSC_CTRL0_SOFTRESET_OFFSET, (void*) &tmp,
1004362a:	193b      	adds	r3, r7, r4
1004362c:	6878      	ldr	r0, [r7, #4]
1004362e:	2201      	movs	r2, #1
10043630:	9200      	str	r2, [sp, #0]
10043632:	2203      	movs	r2, #3
10043634:	2136      	movs	r1, #54	@ 0x36
10043636:	f7ff ff29 	bl	1004348c <DW1000_write_reg>
			1);

	// DW1000 needs a 10us sleep to let clk PLL lock after reset - the PLL will automatically lock after the reset
	// Could also have polled the PLL lock flag, but then the SPI needs to be < 3MHz !! So a simple delay is easier
	HAL_Delay(1);
1004363a:	2001      	movs	r0, #1
1004363c:	f001 f840 	bl	100446c0 <HAL_Delay>

	// Clear the reset bits
	tmp = PMSC_CTRL0_RESET_CLEAR;
10043640:	23f0      	movs	r3, #240	@ 0xf0
10043642:	60fb      	str	r3, [r7, #12]
	DW1000_write_reg(dw1000, PMSC_ID, PMSC_CTRL0_SOFTRESET_OFFSET, (void*) &tmp,
10043644:	193b      	adds	r3, r7, r4
10043646:	6878      	ldr	r0, [r7, #4]
10043648:	2201      	movs	r2, #1
1004364a:	9200      	str	r2, [sp, #0]
1004364c:	2203      	movs	r2, #3
1004364e:	2136      	movs	r1, #54	@ 0x36
10043650:	f7ff ff1c 	bl	1004348c <DW1000_write_reg>
			1);

	// enable clock
	DW1000_read_reg(dw1000, PMSC_ID, PMSC_CTRL0_OFFSET, (void*) &tmp, 2);
10043654:	193b      	adds	r3, r7, r4
10043656:	6878      	ldr	r0, [r7, #4]
10043658:	2202      	movs	r2, #2
1004365a:	9200      	str	r2, [sp, #0]
1004365c:	2200      	movs	r2, #0
1004365e:	2136      	movs	r1, #54	@ 0x36
10043660:	f7ff feb2 	bl	100433c8 <DW1000_read_reg>
	tmp &= 0xFFFCU;	// reset sys_clk select
10043664:	68fb      	ldr	r3, [r7, #12]
10043666:	4a67      	ldr	r2, [pc, #412]	@ (10043804 <DW1000_init+0x2b8>)
10043668:	4013      	ands	r3, r2
1004366a:	60fb      	str	r3, [r7, #12]
	tmp |= 0x0001U;	// select XTI as sys_clk
1004366c:	68fb      	ldr	r3, [r7, #12]
1004366e:	2201      	movs	r2, #1
10043670:	4313      	orrs	r3, r2
10043672:	60fb      	str	r3, [r7, #12]
	DW1000_write_reg(dw1000, PMSC_ID, PMSC_CTRL0_OFFSET, (void*) &tmp, 2);
10043674:	193b      	adds	r3, r7, r4
10043676:	6878      	ldr	r0, [r7, #4]
10043678:	2202      	movs	r2, #2
1004367a:	9200      	str	r2, [sp, #0]
1004367c:	2200      	movs	r2, #0
1004367e:	2136      	movs	r1, #54	@ 0x36
10043680:	f7ff ff04 	bl	1004348c <DW1000_write_reg>

	// configure the CPLL lock detect
	tmp = EC_CTRL_PLLLCK;
10043684:	2304      	movs	r3, #4
10043686:	60fb      	str	r3, [r7, #12]
	DW1000_write_reg(dw1000, EXT_SYNC_ID, EC_CTRL_OFFSET, (void*) &tmp, 1);
10043688:	193b      	adds	r3, r7, r4
1004368a:	6878      	ldr	r0, [r7, #4]
1004368c:	2201      	movs	r2, #1
1004368e:	9200      	str	r2, [sp, #0]
10043690:	2200      	movs	r2, #0
10043692:	2124      	movs	r1, #36	@ 0x24
10043694:	f7ff fefa 	bl	1004348c <DW1000_write_reg>

	// LDO tune config
	// Write the address
	tmp = LDOTUNE_ADDRESS;
10043698:	2304      	movs	r3, #4
1004369a:	60fb      	str	r3, [r7, #12]
	DW1000_write_reg(dw1000, OTP_IF_ID, OTP_ADDR, (void*) &tmp, 2);
1004369c:	193b      	adds	r3, r7, r4
1004369e:	6878      	ldr	r0, [r7, #4]
100436a0:	2202      	movs	r2, #2
100436a2:	9200      	str	r2, [sp, #0]
100436a4:	2204      	movs	r2, #4
100436a6:	212d      	movs	r1, #45	@ 0x2d
100436a8:	f7ff fef0 	bl	1004348c <DW1000_write_reg>

	// Perform OTP Read - Manual read mode has to be set
	tmp = OTP_CTRL_OTPREAD | OTP_CTRL_OTPRDEN;
100436ac:	2303      	movs	r3, #3
100436ae:	60fb      	str	r3, [r7, #12]
	DW1000_write_reg(dw1000, OTP_IF_ID, OTP_CTRL, (void*) &tmp, 1);
100436b0:	193b      	adds	r3, r7, r4
100436b2:	6878      	ldr	r0, [r7, #4]
100436b4:	2201      	movs	r2, #1
100436b6:	9200      	str	r2, [sp, #0]
100436b8:	2206      	movs	r2, #6
100436ba:	212d      	movs	r1, #45	@ 0x2d
100436bc:	f7ff fee6 	bl	1004348c <DW1000_write_reg>
	tmp = 0;
100436c0:	2300      	movs	r3, #0
100436c2:	60fb      	str	r3, [r7, #12]
	DW1000_write_reg(dw1000, OTP_IF_ID, OTP_CTRL, (void*) &tmp, 1);
100436c4:	193b      	adds	r3, r7, r4
100436c6:	6878      	ldr	r0, [r7, #4]
100436c8:	2201      	movs	r2, #1
100436ca:	9200      	str	r2, [sp, #0]
100436cc:	2206      	movs	r2, #6
100436ce:	212d      	movs	r1, #45	@ 0x2d
100436d0:	f7ff fedc 	bl	1004348c <DW1000_write_reg>
	DW1000_read_reg(dw1000, OTP_IF_ID, OTP_RDAT, (void*) &tmp, 4);
100436d4:	193b      	adds	r3, r7, r4
100436d6:	6878      	ldr	r0, [r7, #4]
100436d8:	2204      	movs	r2, #4
100436da:	9200      	str	r2, [sp, #0]
100436dc:	220a      	movs	r2, #10
100436de:	212d      	movs	r1, #45	@ 0x2d
100436e0:	f7ff fe72 	bl	100433c8 <DW1000_read_reg>
	if ((tmp & 0xFF) != 0) {
100436e4:	68fb      	ldr	r3, [r7, #12]
100436e6:	22ff      	movs	r2, #255	@ 0xff
100436e8:	4013      	ands	r3, r2
100436ea:	d009      	beq.n	10043700 <DW1000_init+0x1b4>
		tmp = OTP_SF_LDO_KICK;
100436ec:	2302      	movs	r3, #2
100436ee:	60fb      	str	r3, [r7, #12]
		DW1000_write_reg(dw1000, OTP_IF_ID, OTP_SF, (void*) &tmp, 1); // Set load LDO kick bit
100436f0:	193b      	adds	r3, r7, r4
100436f2:	6878      	ldr	r0, [r7, #4]
100436f4:	2201      	movs	r2, #1
100436f6:	9200      	str	r2, [sp, #0]
100436f8:	2212      	movs	r2, #18
100436fa:	212d      	movs	r1, #45	@ 0x2d
100436fc:	f7ff fec6 	bl	1004348c <DW1000_write_reg>
	}

	// xtrim OTP
	// Write the address
	tmp = XTRIM_ADDRESS;
10043700:	231e      	movs	r3, #30
10043702:	60fb      	str	r3, [r7, #12]
	DW1000_write_reg(dw1000, OTP_IF_ID, OTP_ADDR, (void*) &tmp, 2);
10043704:	240c      	movs	r4, #12
10043706:	193b      	adds	r3, r7, r4
10043708:	6878      	ldr	r0, [r7, #4]
1004370a:	2202      	movs	r2, #2
1004370c:	9200      	str	r2, [sp, #0]
1004370e:	2204      	movs	r2, #4
10043710:	212d      	movs	r1, #45	@ 0x2d
10043712:	f7ff febb 	bl	1004348c <DW1000_write_reg>

	// Perform OTP Read - Manual read mode has to be set
	tmp = OTP_CTRL_OTPREAD | OTP_CTRL_OTPRDEN;
10043716:	2303      	movs	r3, #3
10043718:	60fb      	str	r3, [r7, #12]
	DW1000_write_reg(dw1000, OTP_IF_ID, OTP_CTRL, (void*) &tmp, 1);
1004371a:	193b      	adds	r3, r7, r4
1004371c:	6878      	ldr	r0, [r7, #4]
1004371e:	2201      	movs	r2, #1
10043720:	9200      	str	r2, [sp, #0]
10043722:	2206      	movs	r2, #6
10043724:	212d      	movs	r1, #45	@ 0x2d
10043726:	f7ff feb1 	bl	1004348c <DW1000_write_reg>
	tmp = 0x00;
1004372a:	2300      	movs	r3, #0
1004372c:	60fb      	str	r3, [r7, #12]
	DW1000_write_reg(dw1000, OTP_IF_ID, OTP_CTRL, (void*) &tmp, 1); // OTPREAD is self clearing but OTPRDEN is not
1004372e:	193b      	adds	r3, r7, r4
10043730:	6878      	ldr	r0, [r7, #4]
10043732:	2201      	movs	r2, #1
10043734:	9200      	str	r2, [sp, #0]
10043736:	2206      	movs	r2, #6
10043738:	212d      	movs	r1, #45	@ 0x2d
1004373a:	f7ff fea7 	bl	1004348c <DW1000_write_reg>

	// Read read data, available 40ns after rising edge of OTP_READ

	DW1000_read_reg(dw1000, OTP_IF_ID, OTP_RDAT, (void*) &tmp, 4);
1004373e:	193b      	adds	r3, r7, r4
10043740:	6878      	ldr	r0, [r7, #4]
10043742:	2204      	movs	r2, #4
10043744:	9200      	str	r2, [sp, #0]
10043746:	220a      	movs	r2, #10
10043748:	212d      	movs	r1, #45	@ 0x2d
1004374a:	f7ff fe3d 	bl	100433c8 <DW1000_read_reg>
	tmp &= 0xffff;
1004374e:	68fb      	ldr	r3, [r7, #12]
10043750:	041b      	lsls	r3, r3, #16
10043752:	0c1b      	lsrs	r3, r3, #16
10043754:	60fb      	str	r3, [r7, #12]

	if ((tmp & 0x1F) == 0) // A value of 0 means that the crystal has not been trimmed
10043756:	68fb      	ldr	r3, [r7, #12]
10043758:	221f      	movs	r2, #31
1004375a:	4013      	ands	r3, r2
1004375c:	d101      	bne.n	10043762 <DW1000_init+0x216>
			{
		tmp = FS_XTALT_MIDRANGE; // Set to mid-range if no calibration value inside
1004375e:	2310      	movs	r3, #16
10043760:	60fb      	str	r3, [r7, #12]
	}
	// Configure XTAL trim
	uint8_t reg_val = (3 << 5) | (tmp & FS_XTALT_MASK);
10043762:	68fb      	ldr	r3, [r7, #12]
10043764:	b2db      	uxtb	r3, r3
10043766:	221f      	movs	r2, #31
10043768:	4013      	ands	r3, r2
1004376a:	b2db      	uxtb	r3, r3
1004376c:	2260      	movs	r2, #96	@ 0x60
1004376e:	4313      	orrs	r3, r2
10043770:	b2da      	uxtb	r2, r3
10043772:	210b      	movs	r1, #11
10043774:	187b      	adds	r3, r7, r1
10043776:	701a      	strb	r2, [r3, #0]
	DW1000_write_reg(dw1000, FS_CTRL_ID, FS_XTALT_OFFSET, (void*) &reg_val, 1);
10043778:	187b      	adds	r3, r7, r1
1004377a:	6878      	ldr	r0, [r7, #4]
1004377c:	2201      	movs	r2, #1
1004377e:	9200      	str	r2, [sp, #0]
10043780:	220e      	movs	r2, #14
10043782:	212b      	movs	r1, #43	@ 0x2b
10043784:	f7ff fe82 	bl	1004348c <DW1000_write_reg>

	// force enable LDE
	tmp = 0x0301U;
10043788:	4b1f      	ldr	r3, [pc, #124]	@ (10043808 <DW1000_init+0x2bc>)
1004378a:	60fb      	str	r3, [r7, #12]
	DW1000_write_reg(dw1000, PMSC_ID, PMSC_CTRL0_OFFSET, (void*) &tmp, 2);
1004378c:	240c      	movs	r4, #12
1004378e:	193b      	adds	r3, r7, r4
10043790:	6878      	ldr	r0, [r7, #4]
10043792:	2202      	movs	r2, #2
10043794:	9200      	str	r2, [sp, #0]
10043796:	2200      	movs	r2, #0
10043798:	2136      	movs	r1, #54	@ 0x36
1004379a:	f7ff fe77 	bl	1004348c <DW1000_write_reg>
	tmp = OTP_CTRL_LDELOAD;
1004379e:	2380      	movs	r3, #128	@ 0x80
100437a0:	021b      	lsls	r3, r3, #8
100437a2:	60fb      	str	r3, [r7, #12]
	DW1000_write_reg(dw1000, OTP_IF_ID, OTP_CTRL, (void*) &tmp, 2); // Set load LDE kick bit
100437a4:	193b      	adds	r3, r7, r4
100437a6:	6878      	ldr	r0, [r7, #4]
100437a8:	2202      	movs	r2, #2
100437aa:	9200      	str	r2, [sp, #0]
100437ac:	2206      	movs	r2, #6
100437ae:	212d      	movs	r1, #45	@ 0x2d
100437b0:	f7ff fe6c 	bl	1004348c <DW1000_write_reg>
	HAL_Delay(1);
100437b4:	2001      	movs	r0, #1
100437b6:	f000 ff83 	bl	100446c0 <HAL_Delay>
	DW1000_read_reg(dw1000, PMSC_ID, PMSC_CTRL0_OFFSET, (void*) &tmp, 2);
100437ba:	193b      	adds	r3, r7, r4
100437bc:	6878      	ldr	r0, [r7, #4]
100437be:	2202      	movs	r2, #2
100437c0:	9200      	str	r2, [sp, #0]
100437c2:	2200      	movs	r2, #0
100437c4:	2136      	movs	r1, #54	@ 0x36
100437c6:	f7ff fdff 	bl	100433c8 <DW1000_read_reg>
	tmp &= 0xFE00U;
100437ca:	68fa      	ldr	r2, [r7, #12]
100437cc:	23fe      	movs	r3, #254	@ 0xfe
100437ce:	021b      	lsls	r3, r3, #8
100437d0:	4013      	ands	r3, r2
100437d2:	60fb      	str	r3, [r7, #12]
	DW1000_write_reg(dw1000, PMSC_ID, PMSC_CTRL0_OFFSET, (void*) &tmp, 2);
100437d4:	193b      	adds	r3, r7, r4
100437d6:	6878      	ldr	r0, [r7, #4]
100437d8:	2202      	movs	r2, #2
100437da:	9200      	str	r2, [sp, #0]
100437dc:	2200      	movs	r2, #0
100437de:	2136      	movs	r1, #54	@ 0x36
100437e0:	f7ff fe54 	bl	1004348c <DW1000_write_reg>

	// AON
	tmp = 0x00;
100437e4:	2300      	movs	r3, #0
100437e6:	60fb      	str	r3, [r7, #12]
	DW1000_write_reg(dw1000, AON_ID, AON_CFG1_OFFSET, (void*) &tmp, 1);
100437e8:	193b      	adds	r3, r7, r4
100437ea:	6878      	ldr	r0, [r7, #4]
100437ec:	2201      	movs	r2, #1
100437ee:	9200      	str	r2, [sp, #0]
100437f0:	220a      	movs	r2, #10
100437f2:	212c      	movs	r1, #44	@ 0x2c
100437f4:	f7ff fe4a 	bl	1004348c <DW1000_write_reg>
}
100437f8:	46c0      	nop			@ (mov r8, r8)
100437fa:	46bd      	mov	sp, r7
100437fc:	b005      	add	sp, #20
100437fe:	bd90      	pop	{r4, r7, pc}
10043800:	deca0130 	.word	0xdeca0130
10043804:	0000fffc 	.word	0x0000fffc
10043808:	00000301 	.word	0x00000301

1004380c <DW1000_config>:

uint8_t DW1000_config(DW1000_t *dw1000, DW1000_config_t *cfg) {
1004380c:	b5f0      	push	{r4, r5, r6, r7, lr}
1004380e:	b08d      	sub	sp, #52	@ 0x34
10043810:	af02      	add	r7, sp, #8
10043812:	6078      	str	r0, [r7, #4]
10043814:	6039      	str	r1, [r7, #0]
	uint32_t tmp = 0;
10043816:	2300      	movs	r3, #0
10043818:	623b      	str	r3, [r7, #32]
	uint32_t sysCFGreg;
	uint16_t reg16 = 0x28F4; // rx code 9 (lde_replicaCoeff)
1004381a:	241a      	movs	r4, #26
1004381c:	193b      	adds	r3, r7, r4
1004381e:	4ae5      	ldr	r2, [pc, #916]	@ (10043bb4 <DW1000_config+0x3a8>)
10043820:	801a      	strh	r2, [r3, #0]

	DW1000_read_reg(dw1000, SYS_CFG_ID, 0x00, (void*) &sysCFGreg, 4);
10043822:	231c      	movs	r3, #28
10043824:	18fb      	adds	r3, r7, r3
10043826:	6878      	ldr	r0, [r7, #4]
10043828:	2204      	movs	r2, #4
1004382a:	9200      	str	r2, [sp, #0]
1004382c:	2200      	movs	r2, #0
1004382e:	2104      	movs	r1, #4
10043830:	f7ff fdca 	bl	100433c8 <DW1000_read_reg>
	if (DWT_BR_110K == cfg->dataRate) {
10043834:	683b      	ldr	r3, [r7, #0]
10043836:	79db      	ldrb	r3, [r3, #7]
10043838:	2b00      	cmp	r3, #0
1004383a:	d10b      	bne.n	10043854 <DW1000_config+0x48>
		sysCFGreg |= SYS_CFG_RXM110K;
1004383c:	69fb      	ldr	r3, [r7, #28]
1004383e:	2280      	movs	r2, #128	@ 0x80
10043840:	03d2      	lsls	r2, r2, #15
10043842:	4313      	orrs	r3, r2
10043844:	61fb      	str	r3, [r7, #28]
		reg16 >>= 3; // lde_replicaCoeff must be divided by 8
10043846:	193b      	adds	r3, r7, r4
10043848:	881b      	ldrh	r3, [r3, #0]
1004384a:	08db      	lsrs	r3, r3, #3
1004384c:	b29a      	uxth	r2, r3
1004384e:	193b      	adds	r3, r7, r4
10043850:	801a      	strh	r2, [r3, #0]
10043852:	e003      	b.n	1004385c <DW1000_config+0x50>
	} else {
		sysCFGreg &= (~SYS_CFG_RXM110K);
10043854:	69fb      	ldr	r3, [r7, #28]
10043856:	4ad8      	ldr	r2, [pc, #864]	@ (10043bb8 <DW1000_config+0x3ac>)
10043858:	4013      	ands	r3, r2
1004385a:	61fb      	str	r3, [r7, #28]
	}

	sysCFGreg &= ~SYS_CFG_PHR_MODE_11;
1004385c:	69fb      	ldr	r3, [r7, #28]
1004385e:	4ad7      	ldr	r2, [pc, #860]	@ (10043bbc <DW1000_config+0x3b0>)
10043860:	4013      	ands	r3, r2
10043862:	61fb      	str	r3, [r7, #28]
	sysCFGreg |= (SYS_CFG_PHR_MODE_11
			& ((uint32_t) cfg->phrMode << SYS_CFG_PHR_MODE_SHFT));
10043864:	683b      	ldr	r3, [r7, #0]
10043866:	7a1b      	ldrb	r3, [r3, #8]
10043868:	041a      	lsls	r2, r3, #16
1004386a:	23c0      	movs	r3, #192	@ 0xc0
1004386c:	029b      	lsls	r3, r3, #10
1004386e:	401a      	ands	r2, r3
	sysCFGreg |= (SYS_CFG_PHR_MODE_11
10043870:	69fb      	ldr	r3, [r7, #28]
10043872:	4313      	orrs	r3, r2
10043874:	61fb      	str	r3, [r7, #28]

	DW1000_write_reg(dw1000, SYS_CFG_ID, 0x00, (void*) &sysCFGreg, 4);
10043876:	231c      	movs	r3, #28
10043878:	18fb      	adds	r3, r7, r3
1004387a:	6878      	ldr	r0, [r7, #4]
1004387c:	2204      	movs	r2, #4
1004387e:	9200      	str	r2, [sp, #0]
10043880:	2200      	movs	r2, #0
10043882:	2104      	movs	r1, #4
10043884:	f7ff fe02 	bl	1004348c <DW1000_write_reg>

	// Set the lde_replicaCoeff
	DW1000_write_reg(dw1000, LDE_IF_ID, LDE_REPC_OFFSET, (void*) &reg16, 2);
10043888:	231a      	movs	r3, #26
1004388a:	18fb      	adds	r3, r7, r3
1004388c:	49cc      	ldr	r1, [pc, #816]	@ (10043bc0 <DW1000_config+0x3b4>)
1004388e:	6878      	ldr	r0, [r7, #4]
10043890:	2202      	movs	r2, #2
10043892:	9200      	str	r2, [sp, #0]
10043894:	000a      	movs	r2, r1
10043896:	212e      	movs	r1, #46	@ 0x2e
10043898:	f7ff fdf8 	bl	1004348c <DW1000_write_reg>

	tmp = LDE_PARAM1;
1004389c:	236d      	movs	r3, #109	@ 0x6d
1004389e:	623b      	str	r3, [r7, #32]
	DW1000_write_reg(dw1000, LDE_IF_ID, LDE_CFG1_OFFSET, (void*) &tmp, 1); // 8-bit configuration register
100438a0:	2420      	movs	r4, #32
100438a2:	193b      	adds	r3, r7, r4
100438a4:	49c7      	ldr	r1, [pc, #796]	@ (10043bc4 <DW1000_config+0x3b8>)
100438a6:	6878      	ldr	r0, [r7, #4]
100438a8:	2201      	movs	r2, #1
100438aa:	9200      	str	r2, [sp, #0]
100438ac:	000a      	movs	r2, r1
100438ae:	212e      	movs	r1, #46	@ 0x2e
100438b0:	f7ff fdec 	bl	1004348c <DW1000_write_reg>

	if (dw1000_cfg.prf - DWT_PRF_16M) {
100438b4:	4bc4      	ldr	r3, [pc, #784]	@ (10043bc8 <DW1000_config+0x3bc>)
100438b6:	785b      	ldrb	r3, [r3, #1]
100438b8:	2b01      	cmp	r3, #1
100438ba:	d00b      	beq.n	100438d4 <DW1000_config+0xc8>
		tmp = LDE_PARAM3_64;
100438bc:	4bc3      	ldr	r3, [pc, #780]	@ (10043bcc <DW1000_config+0x3c0>)
100438be:	623b      	str	r3, [r7, #32]
		DW1000_write_reg(dw1000, LDE_IF_ID, LDE_CFG2_OFFSET, (void*) &tmp, 2); // 16-bit LDE configuration tuning register
100438c0:	193b      	adds	r3, r7, r4
100438c2:	49c3      	ldr	r1, [pc, #780]	@ (10043bd0 <DW1000_config+0x3c4>)
100438c4:	6878      	ldr	r0, [r7, #4]
100438c6:	2202      	movs	r2, #2
100438c8:	9200      	str	r2, [sp, #0]
100438ca:	000a      	movs	r2, r1
100438cc:	212e      	movs	r1, #46	@ 0x2e
100438ce:	f7ff fddd 	bl	1004348c <DW1000_write_reg>
100438d2:	e00b      	b.n	100438ec <DW1000_config+0xe0>
	} else {
		tmp = LDE_PARAM3_16;
100438d4:	4bbf      	ldr	r3, [pc, #764]	@ (10043bd4 <DW1000_config+0x3c8>)
100438d6:	623b      	str	r3, [r7, #32]
		DW1000_write_reg(dw1000, LDE_IF_ID, LDE_CFG2_OFFSET, (void*) &tmp, 2);
100438d8:	2320      	movs	r3, #32
100438da:	18fb      	adds	r3, r7, r3
100438dc:	49bc      	ldr	r1, [pc, #752]	@ (10043bd0 <DW1000_config+0x3c4>)
100438de:	6878      	ldr	r0, [r7, #4]
100438e0:	2202      	movs	r2, #2
100438e2:	9200      	str	r2, [sp, #0]
100438e4:	000a      	movs	r2, r1
100438e6:	212e      	movs	r1, #46	@ 0x2e
100438e8:	f7ff fdd0 	bl	1004348c <DW1000_write_reg>
	}

	// Configure PLL2/RF PLL block CFG/TUNE (for a given channel)
	tmp = FS_PLLCFG_CH2;
100438ec:	4bba      	ldr	r3, [pc, #744]	@ (10043bd8 <DW1000_config+0x3cc>)
100438ee:	623b      	str	r3, [r7, #32]
	DW1000_write_reg(dw1000, FS_CTRL_ID, FS_PLLCFG_OFFSET, (void*) &tmp, 4);
100438f0:	2420      	movs	r4, #32
100438f2:	193b      	adds	r3, r7, r4
100438f4:	6878      	ldr	r0, [r7, #4]
100438f6:	2204      	movs	r2, #4
100438f8:	9200      	str	r2, [sp, #0]
100438fa:	2207      	movs	r2, #7
100438fc:	212b      	movs	r1, #43	@ 0x2b
100438fe:	f7ff fdc5 	bl	1004348c <DW1000_write_reg>
	tmp = FS_PLLTUNE_CH2;
10043902:	2326      	movs	r3, #38	@ 0x26
10043904:	623b      	str	r3, [r7, #32]
	DW1000_write_reg(dw1000, FS_CTRL_ID, FS_PLLTUNE_OFFSET, (void*) &tmp, 1);
10043906:	193b      	adds	r3, r7, r4
10043908:	6878      	ldr	r0, [r7, #4]
1004390a:	2201      	movs	r2, #1
1004390c:	9200      	str	r2, [sp, #0]
1004390e:	220b      	movs	r2, #11
10043910:	212b      	movs	r1, #43	@ 0x2b
10043912:	f7ff fdbb 	bl	1004348c <DW1000_write_reg>

	// Configure RF RX blocks (for specified channel/bandwidth)
	tmp = RF_RXCTRLH_NBW;
10043916:	23d8      	movs	r3, #216	@ 0xd8
10043918:	623b      	str	r3, [r7, #32]
	DW1000_write_reg(dw1000, RF_CONF_ID, RF_RXCTRLH_OFFSET, (void*) &tmp, 1);
1004391a:	193b      	adds	r3, r7, r4
1004391c:	6878      	ldr	r0, [r7, #4]
1004391e:	2201      	movs	r2, #1
10043920:	9200      	str	r2, [sp, #0]
10043922:	220b      	movs	r2, #11
10043924:	2128      	movs	r1, #40	@ 0x28
10043926:	f7ff fdb1 	bl	1004348c <DW1000_write_reg>

	// Configure RF TX blocks (for specified channel and PRF)
	// Configure RF TX control
	tmp = RF_TXCTRL_CH2;
1004392a:	4bac      	ldr	r3, [pc, #688]	@ (10043bdc <DW1000_config+0x3d0>)
1004392c:	623b      	str	r3, [r7, #32]
	DW1000_write_reg(dw1000, RF_CONF_ID, RF_TXCTRL_OFFSET, (void*) &tmp, 4);
1004392e:	193b      	adds	r3, r7, r4
10043930:	6878      	ldr	r0, [r7, #4]
10043932:	2204      	movs	r2, #4
10043934:	9200      	str	r2, [sp, #0]
10043936:	220c      	movs	r2, #12
10043938:	2128      	movs	r1, #40	@ 0x28
1004393a:	f7ff fda7 	bl	1004348c <DW1000_write_reg>

	// Configure the baseband parameters (for specified PRF, bit rate, PAC, and SFD settings)
	// DTUNE0
	tmp = DRX_TUNE0b_110K_NSTD;
1004393e:	2316      	movs	r3, #22
10043940:	623b      	str	r3, [r7, #32]
	DW1000_write_reg(dw1000, DRX_CONF_ID, DRX_TUNE0b_OFFSET, (void*) &tmp, 2);
10043942:	193b      	adds	r3, r7, r4
10043944:	6878      	ldr	r0, [r7, #4]
10043946:	2202      	movs	r2, #2
10043948:	9200      	str	r2, [sp, #0]
1004394a:	2202      	movs	r2, #2
1004394c:	2127      	movs	r1, #39	@ 0x27
1004394e:	f7ff fd9d 	bl	1004348c <DW1000_write_reg>

	// DTUNE1
	tmp = DRX_TUNE1a_PRF64;
10043952:	238d      	movs	r3, #141	@ 0x8d
10043954:	623b      	str	r3, [r7, #32]
	DW1000_write_reg(dw1000, DRX_CONF_ID, DRX_TUNE1a_OFFSET, (void*) &tmp, 2);
10043956:	193b      	adds	r3, r7, r4
10043958:	6878      	ldr	r0, [r7, #4]
1004395a:	2202      	movs	r2, #2
1004395c:	9200      	str	r2, [sp, #0]
1004395e:	2204      	movs	r2, #4
10043960:	2127      	movs	r1, #39	@ 0x27
10043962:	f7ff fd93 	bl	1004348c <DW1000_write_reg>
	tmp = DRX_TUNE1b_110K;
10043966:	2364      	movs	r3, #100	@ 0x64
10043968:	623b      	str	r3, [r7, #32]
	DW1000_write_reg(dw1000, DRX_CONF_ID, DRX_TUNE1b_OFFSET, (void*) &tmp, 2);
1004396a:	193b      	adds	r3, r7, r4
1004396c:	6878      	ldr	r0, [r7, #4]
1004396e:	2202      	movs	r2, #2
10043970:	9200      	str	r2, [sp, #0]
10043972:	2206      	movs	r2, #6
10043974:	2127      	movs	r1, #39	@ 0x27
10043976:	f7ff fd89 	bl	1004348c <DW1000_write_reg>

	// DTUNE2
	tmp = DRX_TUNE2_PRF64_PAC32;
1004397a:	4b99      	ldr	r3, [pc, #612]	@ (10043be0 <DW1000_config+0x3d4>)
1004397c:	623b      	str	r3, [r7, #32]
	DW1000_write_reg(dw1000, DRX_CONF_ID, DRX_TUNE2_OFFSET, (void*) &tmp, 4);
1004397e:	193b      	adds	r3, r7, r4
10043980:	6878      	ldr	r0, [r7, #4]
10043982:	2204      	movs	r2, #4
10043984:	9200      	str	r2, [sp, #0]
10043986:	2208      	movs	r2, #8
10043988:	2127      	movs	r1, #39	@ 0x27
1004398a:	f7ff fd7f 	bl	1004348c <DW1000_write_reg>

	// DTUNE3 (SFD timeout)
	// Don't allow 0 - SFD timeout will always be enabled
	if (cfg->sfdTO == 0) {
1004398e:	683b      	ldr	r3, [r7, #0]
10043990:	895b      	ldrh	r3, [r3, #10]
10043992:	2b00      	cmp	r3, #0
10043994:	d102      	bne.n	1004399c <DW1000_config+0x190>
		cfg->sfdTO = DWT_SFDTOC_DEF;
10043996:	683b      	ldr	r3, [r7, #0]
10043998:	4a92      	ldr	r2, [pc, #584]	@ (10043be4 <DW1000_config+0x3d8>)
1004399a:	815a      	strh	r2, [r3, #10]
	}
	tmp = cfg->sfdTO;
1004399c:	683b      	ldr	r3, [r7, #0]
1004399e:	895b      	ldrh	r3, [r3, #10]
100439a0:	623b      	str	r3, [r7, #32]
	DW1000_write_reg(dw1000, DRX_CONF_ID, DRX_SFDTOC_OFFSET, (void*) &tmp, 2);
100439a2:	2420      	movs	r4, #32
100439a4:	193b      	adds	r3, r7, r4
100439a6:	6878      	ldr	r0, [r7, #4]
100439a8:	2202      	movs	r2, #2
100439aa:	9200      	str	r2, [sp, #0]
100439ac:	2220      	movs	r2, #32
100439ae:	2127      	movs	r1, #39	@ 0x27
100439b0:	f7ff fd6c 	bl	1004348c <DW1000_write_reg>

	// Configure AGC parameters
	tmp = AGC_TUNE2_VAL;
100439b4:	4b8c      	ldr	r3, [pc, #560]	@ (10043be8 <DW1000_config+0x3dc>)
100439b6:	623b      	str	r3, [r7, #32]
	DW1000_write_reg(dw1000, AGC_CFG_STS_ID, 0xC, (void*) &tmp, 4);
100439b8:	193b      	adds	r3, r7, r4
100439ba:	6878      	ldr	r0, [r7, #4]
100439bc:	2204      	movs	r2, #4
100439be:	9200      	str	r2, [sp, #0]
100439c0:	220c      	movs	r2, #12
100439c2:	2123      	movs	r1, #35	@ 0x23
100439c4:	f7ff fd62 	bl	1004348c <DW1000_write_reg>
	tmp = AGC_TUNE1_64M;
100439c8:	4b88      	ldr	r3, [pc, #544]	@ (10043bec <DW1000_config+0x3e0>)
100439ca:	623b      	str	r3, [r7, #32]
	DW1000_write_reg(dw1000, AGC_CFG_STS_ID, 0x4, (void*) &tmp, 2);
100439cc:	193b      	adds	r3, r7, r4
100439ce:	6878      	ldr	r0, [r7, #4]
100439d0:	2202      	movs	r2, #2
100439d2:	9200      	str	r2, [sp, #0]
100439d4:	2204      	movs	r2, #4
100439d6:	2123      	movs	r1, #35	@ 0x23
100439d8:	f7ff fd58 	bl	1004348c <DW1000_write_reg>

	// Set (non-standard) user SFD for improved performance,
	uint8_t nsSfd_result = 0;
100439dc:	2527      	movs	r5, #39	@ 0x27
100439de:	197b      	adds	r3, r7, r5
100439e0:	2200      	movs	r2, #0
100439e2:	701a      	strb	r2, [r3, #0]
	uint8_t useDWnsSFD = 0;
100439e4:	2626      	movs	r6, #38	@ 0x26
100439e6:	19bb      	adds	r3, r7, r6
100439e8:	2200      	movs	r2, #0
100439ea:	701a      	strb	r2, [r3, #0]
	if (cfg->nsSFD) {
100439ec:	683b      	ldr	r3, [r7, #0]
100439ee:	799b      	ldrb	r3, [r3, #6]
100439f0:	2b00      	cmp	r3, #0
100439f2:	d00f      	beq.n	10043a14 <DW1000_config+0x208>
		// Write non standard (DW) SFD length
		tmp = DW_NS_SFD_LEN_110K;
100439f4:	2340      	movs	r3, #64	@ 0x40
100439f6:	623b      	str	r3, [r7, #32]
		DW1000_write_reg(dw1000, USR_SFD_ID, 0x00, (void*) &tmp, 1);
100439f8:	193b      	adds	r3, r7, r4
100439fa:	6878      	ldr	r0, [r7, #4]
100439fc:	2201      	movs	r2, #1
100439fe:	9200      	str	r2, [sp, #0]
10043a00:	2200      	movs	r2, #0
10043a02:	2121      	movs	r1, #33	@ 0x21
10043a04:	f7ff fd42 	bl	1004348c <DW1000_write_reg>
		nsSfd_result = 3;
10043a08:	197b      	adds	r3, r7, r5
10043a0a:	2203      	movs	r2, #3
10043a0c:	701a      	strb	r2, [r3, #0]
		useDWnsSFD = 1;
10043a0e:	19bb      	adds	r3, r7, r6
10043a10:	2201      	movs	r2, #1
10043a12:	701a      	strb	r2, [r3, #0]
	}

	uint8_t chan = cfg->chan;
10043a14:	2125      	movs	r1, #37	@ 0x25
10043a16:	187b      	adds	r3, r7, r1
10043a18:	683a      	ldr	r2, [r7, #0]
10043a1a:	7812      	ldrb	r2, [r2, #0]
10043a1c:	701a      	strb	r2, [r3, #0]
	uint32_t regval = (CHAN_CTRL_TX_CHAN_MASK
			& (chan << CHAN_CTRL_TX_CHAN_SHIFT))
10043a1e:	187b      	adds	r3, r7, r1
10043a20:	781b      	ldrb	r3, [r3, #0]
10043a22:	220f      	movs	r2, #15
10043a24:	401a      	ands	r2, r3
			| // Transmit Channel
			(CHAN_CTRL_RX_CHAN_MASK & (chan << CHAN_CTRL_RX_CHAN_SHIFT))
10043a26:	187b      	adds	r3, r7, r1
10043a28:	781b      	ldrb	r3, [r3, #0]
10043a2a:	011b      	lsls	r3, r3, #4
10043a2c:	21ff      	movs	r1, #255	@ 0xff
10043a2e:	400b      	ands	r3, r1
			| // Transmit Channel
10043a30:	431a      	orrs	r2, r3
			| // Receive Channel
			(CHAN_CTRL_RXFPRF_MASK
					& ((uint32_t) cfg->prf << CHAN_CTRL_RXFPRF_SHIFT))
10043a32:	683b      	ldr	r3, [r7, #0]
10043a34:	785b      	ldrb	r3, [r3, #1]
10043a36:	0499      	lsls	r1, r3, #18
10043a38:	23c0      	movs	r3, #192	@ 0xc0
10043a3a:	031b      	lsls	r3, r3, #12
10043a3c:	400b      	ands	r3, r1
			| // Receive Channel
10043a3e:	431a      	orrs	r2, r3
			| // RX PRF
			((CHAN_CTRL_TNSSFD | CHAN_CTRL_RNSSFD)
					& ((uint32_t) nsSfd_result << CHAN_CTRL_TNSSFD_SHIFT))
10043a40:	2327      	movs	r3, #39	@ 0x27
10043a42:	18fb      	adds	r3, r7, r3
10043a44:	781b      	ldrb	r3, [r3, #0]
10043a46:	0519      	lsls	r1, r3, #20
10043a48:	23c0      	movs	r3, #192	@ 0xc0
10043a4a:	039b      	lsls	r3, r3, #14
10043a4c:	400b      	ands	r3, r1
			| // RX PRF
10043a4e:	431a      	orrs	r2, r3
			| // nsSFD enable RX&TX
			(CHAN_CTRL_DWSFD & ((uint32_t) useDWnsSFD << CHAN_CTRL_DWSFD_SHIFT))
10043a50:	2326      	movs	r3, #38	@ 0x26
10043a52:	18fb      	adds	r3, r7, r3
10043a54:	781b      	ldrb	r3, [r3, #0]
10043a56:	0459      	lsls	r1, r3, #17
10043a58:	2380      	movs	r3, #128	@ 0x80
10043a5a:	029b      	lsls	r3, r3, #10
10043a5c:	400b      	ands	r3, r1
			| // nsSFD enable RX&TX
10043a5e:	431a      	orrs	r2, r3
			| // Use DW nsSFD
			(CHAN_CTRL_TX_PCOD_MASK
					& ((uint32_t) cfg->txCode << CHAN_CTRL_TX_PCOD_SHIFT)) | // TX Preamble Code
10043a60:	683b      	ldr	r3, [r7, #0]
10043a62:	791b      	ldrb	r3, [r3, #4]
10043a64:	0599      	lsls	r1, r3, #22
10043a66:	23f8      	movs	r3, #248	@ 0xf8
10043a68:	04db      	lsls	r3, r3, #19
10043a6a:	400b      	ands	r3, r1
			| // Use DW nsSFD
10043a6c:	431a      	orrs	r2, r3
			(CHAN_CTRL_RX_PCOD_MASK
					& ((uint32_t) cfg->rxCode << CHAN_CTRL_RX_PCOD_SHIFT)); // RX Preamble Code
10043a6e:	683b      	ldr	r3, [r7, #0]
10043a70:	795b      	ldrb	r3, [r3, #5]
10043a72:	06db      	lsls	r3, r3, #27
					& ((uint32_t) cfg->txCode << CHAN_CTRL_TX_PCOD_SHIFT)) | // TX Preamble Code
10043a74:	4313      	orrs	r3, r2
	uint32_t regval = (CHAN_CTRL_TX_CHAN_MASK
10043a76:	617b      	str	r3, [r7, #20]

	DW1000_write_reg(dw1000, CHAN_CTRL_ID, 0x00, (void*) &regval, 4);
10043a78:	2314      	movs	r3, #20
10043a7a:	18fb      	adds	r3, r7, r3
10043a7c:	6878      	ldr	r0, [r7, #4]
10043a7e:	2204      	movs	r2, #4
10043a80:	9200      	str	r2, [sp, #0]
10043a82:	2200      	movs	r2, #0
10043a84:	211f      	movs	r1, #31
10043a86:	f7ff fd01 	bl	1004348c <DW1000_write_reg>

	// Set up TX Preamble Size, PRF and Data Rate
	txFCTRL = ((uint32_t) (cfg->txPreambLength | cfg->prf)
10043a8a:	683b      	ldr	r3, [r7, #0]
10043a8c:	789a      	ldrb	r2, [r3, #2]
10043a8e:	683b      	ldr	r3, [r7, #0]
10043a90:	785b      	ldrb	r3, [r3, #1]
10043a92:	4313      	orrs	r3, r2
10043a94:	b2db      	uxtb	r3, r3
			<< TX_FCTRL_TXPRF_SHFT)
10043a96:	041a      	lsls	r2, r3, #16
			| ((uint32_t) cfg->dataRate << TX_FCTRL_TXBR_SHFT);
10043a98:	683b      	ldr	r3, [r7, #0]
10043a9a:	79db      	ldrb	r3, [r3, #7]
10043a9c:	035b      	lsls	r3, r3, #13
10043a9e:	431a      	orrs	r2, r3
	txFCTRL = ((uint32_t) (cfg->txPreambLength | cfg->prf)
10043aa0:	4b53      	ldr	r3, [pc, #332]	@ (10043bf0 <DW1000_config+0x3e4>)
10043aa2:	601a      	str	r2, [r3, #0]

	DW1000_write_reg(dw1000, TX_FCTRL_ID, 0x00, (void*) &txFCTRL, 4);
10043aa4:	4b52      	ldr	r3, [pc, #328]	@ (10043bf0 <DW1000_config+0x3e4>)
10043aa6:	6878      	ldr	r0, [r7, #4]
10043aa8:	2204      	movs	r2, #4
10043aaa:	9200      	str	r2, [sp, #0]
10043aac:	2200      	movs	r2, #0
10043aae:	2108      	movs	r1, #8
10043ab0:	f7ff fcec 	bl	1004348c <DW1000_write_reg>

	// Request TX start and TRX off at the same time
	tmp = SYS_CTRL_TXSTRT | SYS_CTRL_TRXOFF;
10043ab4:	2342      	movs	r3, #66	@ 0x42
10043ab6:	623b      	str	r3, [r7, #32]
	DW1000_write_reg(dw1000, SYS_CTRL_ID, SYS_CTRL_OFFSET, (void*) &tmp, 1);
10043ab8:	2420      	movs	r4, #32
10043aba:	193b      	adds	r3, r7, r4
10043abc:	6878      	ldr	r0, [r7, #4]
10043abe:	2201      	movs	r2, #1
10043ac0:	9200      	str	r2, [sp, #0]
10043ac2:	2200      	movs	r2, #0
10043ac4:	210d      	movs	r1, #13
10043ac6:	f7ff fce1 	bl	1004348c <DW1000_write_reg>

	// set rx antenna delay
	tmp = RX_ANT_DLY;
10043aca:	4b4a      	ldr	r3, [pc, #296]	@ (10043bf4 <DW1000_config+0x3e8>)
10043acc:	623b      	str	r3, [r7, #32]
	DW1000_write_reg(dw1000, LDE_IF_ID, LDE_RXANTD_OFFSET, (void*) &tmp, 2);
10043ace:	193b      	adds	r3, r7, r4
10043ad0:	4949      	ldr	r1, [pc, #292]	@ (10043bf8 <DW1000_config+0x3ec>)
10043ad2:	6878      	ldr	r0, [r7, #4]
10043ad4:	2202      	movs	r2, #2
10043ad6:	9200      	str	r2, [sp, #0]
10043ad8:	000a      	movs	r2, r1
10043ada:	212e      	movs	r1, #46	@ 0x2e
10043adc:	f7ff fcd6 	bl	1004348c <DW1000_write_reg>
	// set tx antenna delay
	tmp = TX_ANT_DLY;
10043ae0:	4b44      	ldr	r3, [pc, #272]	@ (10043bf4 <DW1000_config+0x3e8>)
10043ae2:	623b      	str	r3, [r7, #32]
	DW1000_write_reg(dw1000, LDE_IF_ID, TX_ANTD_OFFSET, (void*) &tmp, 2);
10043ae4:	193b      	adds	r3, r7, r4
10043ae6:	6878      	ldr	r0, [r7, #4]
10043ae8:	2202      	movs	r2, #2
10043aea:	9200      	str	r2, [sp, #0]
10043aec:	2200      	movs	r2, #0
10043aee:	212e      	movs	r1, #46	@ 0x2e
10043af0:	f7ff fccc 	bl	1004348c <DW1000_write_reg>

	/* tx specific functions */
	if (dw1000->tx) {
10043af4:	687b      	ldr	r3, [r7, #4]
10043af6:	7c1b      	ldrb	r3, [r3, #16]
10043af8:	2201      	movs	r2, #1
10043afa:	4013      	ands	r3, r2
10043afc:	b2db      	uxtb	r3, r3
10043afe:	2b00      	cmp	r3, #0
10043b00:	d038      	beq.n	10043b74 <DW1000_config+0x368>
		// set rx after tx delay
		uint32_t val;
		DW1000_read_reg(dw1000, ACK_RESP_T_ID, 0x00, (void*) &val, 4); // Read ACK_RESP_T_ID register
10043b02:	250c      	movs	r5, #12
10043b04:	197b      	adds	r3, r7, r5
10043b06:	6878      	ldr	r0, [r7, #4]
10043b08:	2204      	movs	r2, #4
10043b0a:	9200      	str	r2, [sp, #0]
10043b0c:	2200      	movs	r2, #0
10043b0e:	211a      	movs	r1, #26
10043b10:	f7ff fc5a 	bl	100433c8 <DW1000_read_reg>
		val &= ~(ACK_RESP_T_W4R_TIM_MASK); // Clear the timer (19:0)
10043b14:	68fb      	ldr	r3, [r7, #12]
10043b16:	0d1b      	lsrs	r3, r3, #20
10043b18:	051b      	lsls	r3, r3, #20
10043b1a:	60fb      	str	r3, [r7, #12]
		val |= (POLL_TX_TO_RESP_RX_DLY_UUS & ACK_RESP_T_W4R_TIM_MASK); // In UWB microseconds (e.g. turn the receiver on 20uus after TX)
10043b1c:	68fb      	ldr	r3, [r7, #12]
10043b1e:	2296      	movs	r2, #150	@ 0x96
10043b20:	0052      	lsls	r2, r2, #1
10043b22:	4313      	orrs	r3, r2
10043b24:	60fb      	str	r3, [r7, #12]
		DW1000_write_reg(dw1000, ACK_RESP_T_ID, 0x00, (void*) &val, 4);
10043b26:	197b      	adds	r3, r7, r5
10043b28:	6878      	ldr	r0, [r7, #4]
10043b2a:	2204      	movs	r2, #4
10043b2c:	9200      	str	r2, [sp, #0]
10043b2e:	2200      	movs	r2, #0
10043b30:	211a      	movs	r1, #26
10043b32:	f7ff fcab 	bl	1004348c <DW1000_write_reg>

		uint32_t time = RESP_RX_TIMEOUT_UUS;
10043b36:	4b31      	ldr	r3, [pc, #196]	@ (10043bfc <DW1000_config+0x3f0>)
10043b38:	60bb      	str	r3, [r7, #8]
		// set tx timeout
		DW1000_write_reg(dw1000, RX_FWTO_ID, RX_FWTO_OFFSET, (void*) &time, 2);
10043b3a:	2308      	movs	r3, #8
10043b3c:	18fb      	adds	r3, r7, r3
10043b3e:	6878      	ldr	r0, [r7, #4]
10043b40:	2202      	movs	r2, #2
10043b42:	9200      	str	r2, [sp, #0]
10043b44:	2200      	movs	r2, #0
10043b46:	210c      	movs	r1, #12
10043b48:	f7ff fca0 	bl	1004348c <DW1000_write_reg>
		DW1000_read_reg(dw1000, SYS_CFG_ID, 0x03, (void*) &tmp, 1); // Read at offset 3 to get the upper byte only
10043b4c:	193b      	adds	r3, r7, r4
10043b4e:	6878      	ldr	r0, [r7, #4]
10043b50:	2201      	movs	r2, #1
10043b52:	9200      	str	r2, [sp, #0]
10043b54:	2203      	movs	r2, #3
10043b56:	2104      	movs	r1, #4
10043b58:	f7ff fc36 	bl	100433c8 <DW1000_read_reg>
		tmp |= (SYS_CFG_RXWTOE >> 24); // Shift RXWTOE mask as we read the upper byte only
10043b5c:	6a3b      	ldr	r3, [r7, #32]
10043b5e:	2210      	movs	r2, #16
10043b60:	4313      	orrs	r3, r2
10043b62:	623b      	str	r3, [r7, #32]
		// OR in 32bit value (1 bit set), I know this is in high byte.

		DW1000_write_reg(dw1000, SYS_CFG_ID, 0x03, (void*) &tmp, 1); // Write at offset 3 to write the upper byte only
10043b64:	193b      	adds	r3, r7, r4
10043b66:	6878      	ldr	r0, [r7, #4]
10043b68:	2201      	movs	r2, #1
10043b6a:	9200      	str	r2, [sp, #0]
10043b6c:	2203      	movs	r2, #3
10043b6e:	2104      	movs	r1, #4
10043b70:	f7ff fc8c 	bl	1004348c <DW1000_write_reg>

	}
	/* end of tx specific functions */

	// set preamble timeout
	tmp = PRE_TIMEOUT;
10043b74:	2320      	movs	r3, #32
10043b76:	623b      	str	r3, [r7, #32]
	DW1000_write_reg(dw1000, DRX_CONF_ID, DRX_PRETOC_OFFSET, (void*) &tmp, 2);
10043b78:	2320      	movs	r3, #32
10043b7a:	18fb      	adds	r3, r7, r3
10043b7c:	6878      	ldr	r0, [r7, #4]
10043b7e:	2202      	movs	r2, #2
10043b80:	9200      	str	r2, [sp, #0]
10043b82:	2224      	movs	r2, #36	@ 0x24
10043b84:	2127      	movs	r1, #39	@ 0x27
10043b86:	f7ff fc81 	bl	1004348c <DW1000_write_reg>

	uint32_t sys_status;
	DW1000_read_reg(dw1000, SYS_STATUS_ID, 0x00, (void*) &sys_status, 4); // Read at offset 3 to get the upper 2 bytes out of 5
10043b8a:	2310      	movs	r3, #16
10043b8c:	18fb      	adds	r3, r7, r3
10043b8e:	6878      	ldr	r0, [r7, #4]
10043b90:	2204      	movs	r2, #4
10043b92:	9200      	str	r2, [sp, #0]
10043b94:	2200      	movs	r2, #0
10043b96:	210f      	movs	r1, #15
10043b98:	f7ff fc16 	bl	100433c8 <DW1000_read_reg>
	if (sys_status & 0x2) {
10043b9c:	693b      	ldr	r3, [r7, #16]
10043b9e:	2202      	movs	r2, #2
10043ba0:	4013      	ands	r3, r2
10043ba2:	d001      	beq.n	10043ba8 <DW1000_config+0x39c>
		return 1;
10043ba4:	2301      	movs	r3, #1
10043ba6:	e000      	b.n	10043baa <DW1000_config+0x39e>
	} else {
		return 0;
10043ba8:	2300      	movs	r3, #0
	}

}
10043baa:	0018      	movs	r0, r3
10043bac:	46bd      	mov	sp, r7
10043bae:	b00b      	add	sp, #44	@ 0x2c
10043bb0:	bdf0      	pop	{r4, r5, r6, r7, pc}
10043bb2:	46c0      	nop			@ (mov r8, r8)
10043bb4:	000028f4 	.word	0x000028f4
10043bb8:	ffbfffff 	.word	0xffbfffff
10043bbc:	fffcffff 	.word	0xfffcffff
10043bc0:	00002804 	.word	0x00002804
10043bc4:	00000806 	.word	0x00000806
10043bc8:	20000650 	.word	0x20000650
10043bcc:	00000607 	.word	0x00000607
10043bd0:	00001806 	.word	0x00001806
10043bd4:	00001607 	.word	0x00001607
10043bd8:	08400508 	.word	0x08400508
10043bdc:	00045ca0 	.word	0x00045ca0
10043be0:	353b015e 	.word	0x353b015e
10043be4:	00001041 	.word	0x00001041
10043be8:	2502a907 	.word	0x2502a907
10043bec:	0000889b 	.word	0x0000889b
10043bf0:	20000480 	.word	0x20000480
10043bf4:	00004034 	.word	0x00004034
10043bf8:	00001804 	.word	0x00001804
10043bfc:	00001388 	.word	0x00001388

10043c00 <get_tx_timestamp_u64>:

static uint64_t get_tx_timestamp_u64(DW1000_t *dw1000) {
10043c00:	b5f0      	push	{r4, r5, r6, r7, lr}
10043c02:	b08d      	sub	sp, #52	@ 0x34
10043c04:	af02      	add	r7, sp, #8
10043c06:	6178      	str	r0, [r7, #20]
	uint8_t ts_tab[5];
	uint64_t ts = 0;
10043c08:	2200      	movs	r2, #0
10043c0a:	2300      	movs	r3, #0
10043c0c:	623a      	str	r2, [r7, #32]
10043c0e:	627b      	str	r3, [r7, #36]	@ 0x24
	int8_t i;
	DW1000_read_reg(dw1000, TX_TIME_ID, TX_TIME_TX_STAMP_OFFSET,
10043c10:	2308      	movs	r3, #8
10043c12:	2610      	movs	r6, #16
10043c14:	199b      	adds	r3, r3, r6
10043c16:	19db      	adds	r3, r3, r7
10043c18:	6978      	ldr	r0, [r7, #20]
10043c1a:	2205      	movs	r2, #5
10043c1c:	9200      	str	r2, [sp, #0]
10043c1e:	2200      	movs	r2, #0
10043c20:	2117      	movs	r1, #23
10043c22:	f7ff fbd1 	bl	100433c8 <DW1000_read_reg>
			(void*) &ts_tab, TX_TIME_TX_STAMP_LEN);
	for (i = 4; i >= 0; i--) {
10043c26:	230f      	movs	r3, #15
10043c28:	199b      	adds	r3, r3, r6
10043c2a:	19db      	adds	r3, r3, r7
10043c2c:	2204      	movs	r2, #4
10043c2e:	701a      	strb	r2, [r3, #0]
10043c30:	e02d      	b.n	10043c8e <get_tx_timestamp_u64+0x8e>
		ts <<= 8;
10043c32:	6a3b      	ldr	r3, [r7, #32]
10043c34:	0e1b      	lsrs	r3, r3, #24
10043c36:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
10043c38:	0215      	lsls	r5, r2, #8
10043c3a:	431d      	orrs	r5, r3
10043c3c:	6a3b      	ldr	r3, [r7, #32]
10043c3e:	021c      	lsls	r4, r3, #8
10043c40:	623c      	str	r4, [r7, #32]
10043c42:	627d      	str	r5, [r7, #36]	@ 0x24
		ts |= ts_tab[i];
10043c44:	200f      	movs	r0, #15
10043c46:	2110      	movs	r1, #16
10043c48:	1843      	adds	r3, r0, r1
10043c4a:	19db      	adds	r3, r3, r7
10043c4c:	781b      	ldrb	r3, [r3, #0]
10043c4e:	b25b      	sxtb	r3, r3
10043c50:	2208      	movs	r2, #8
10043c52:	1852      	adds	r2, r2, r1
10043c54:	19d2      	adds	r2, r2, r7
10043c56:	5cd3      	ldrb	r3, [r2, r3]
10043c58:	60bb      	str	r3, [r7, #8]
10043c5a:	2300      	movs	r3, #0
10043c5c:	60fb      	str	r3, [r7, #12]
10043c5e:	6a3b      	ldr	r3, [r7, #32]
10043c60:	68b9      	ldr	r1, [r7, #8]
10043c62:	68fa      	ldr	r2, [r7, #12]
10043c64:	000e      	movs	r6, r1
10043c66:	431e      	orrs	r6, r3
10043c68:	603e      	str	r6, [r7, #0]
10043c6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10043c6c:	431a      	orrs	r2, r3
10043c6e:	607a      	str	r2, [r7, #4]
10043c70:	683a      	ldr	r2, [r7, #0]
10043c72:	687b      	ldr	r3, [r7, #4]
10043c74:	623a      	str	r2, [r7, #32]
10043c76:	627b      	str	r3, [r7, #36]	@ 0x24
	for (i = 4; i >= 0; i--) {
10043c78:	2110      	movs	r1, #16
10043c7a:	1843      	adds	r3, r0, r1
10043c7c:	19db      	adds	r3, r3, r7
10043c7e:	781b      	ldrb	r3, [r3, #0]
10043c80:	b25b      	sxtb	r3, r3
10043c82:	b2db      	uxtb	r3, r3
10043c84:	3b01      	subs	r3, #1
10043c86:	b2da      	uxtb	r2, r3
10043c88:	1843      	adds	r3, r0, r1
10043c8a:	19db      	adds	r3, r3, r7
10043c8c:	701a      	strb	r2, [r3, #0]
10043c8e:	230f      	movs	r3, #15
10043c90:	2210      	movs	r2, #16
10043c92:	189b      	adds	r3, r3, r2
10043c94:	19db      	adds	r3, r3, r7
10043c96:	781b      	ldrb	r3, [r3, #0]
10043c98:	2b7f      	cmp	r3, #127	@ 0x7f
10043c9a:	d9ca      	bls.n	10043c32 <get_tx_timestamp_u64+0x32>
	}
	return ts;
10043c9c:	6a3a      	ldr	r2, [r7, #32]
10043c9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
10043ca0:	0010      	movs	r0, r2
10043ca2:	0019      	movs	r1, r3
10043ca4:	46bd      	mov	sp, r7
10043ca6:	b00b      	add	sp, #44	@ 0x2c
10043ca8:	bdf0      	pop	{r4, r5, r6, r7, pc}

10043caa <get_rx_timestamp_u64>:

static uint64_t get_rx_timestamp_u64(DW1000_t *dw1000) {
10043caa:	b5f0      	push	{r4, r5, r6, r7, lr}
10043cac:	b08d      	sub	sp, #52	@ 0x34
10043cae:	af02      	add	r7, sp, #8
10043cb0:	6178      	str	r0, [r7, #20]
	uint8_t ts_tab[5];
	uint64_t ts = 0;
10043cb2:	2200      	movs	r2, #0
10043cb4:	2300      	movs	r3, #0
10043cb6:	623a      	str	r2, [r7, #32]
10043cb8:	627b      	str	r3, [r7, #36]	@ 0x24
	int8_t i;
	DW1000_read_reg(dw1000, RX_TIME_ID, RX_TIME_RX_STAMP_OFFSET,
10043cba:	2308      	movs	r3, #8
10043cbc:	2610      	movs	r6, #16
10043cbe:	199b      	adds	r3, r3, r6
10043cc0:	19db      	adds	r3, r3, r7
10043cc2:	6978      	ldr	r0, [r7, #20]
10043cc4:	2205      	movs	r2, #5
10043cc6:	9200      	str	r2, [sp, #0]
10043cc8:	2200      	movs	r2, #0
10043cca:	2115      	movs	r1, #21
10043ccc:	f7ff fb7c 	bl	100433c8 <DW1000_read_reg>
			(void*) &ts_tab, RX_TIME_RX_STAMP_LEN);
	for (i = 4; i >= 0; i--) {
10043cd0:	230f      	movs	r3, #15
10043cd2:	199b      	adds	r3, r3, r6
10043cd4:	19db      	adds	r3, r3, r7
10043cd6:	2204      	movs	r2, #4
10043cd8:	701a      	strb	r2, [r3, #0]
10043cda:	e02d      	b.n	10043d38 <get_rx_timestamp_u64+0x8e>
		ts <<= 8;
10043cdc:	6a3b      	ldr	r3, [r7, #32]
10043cde:	0e1b      	lsrs	r3, r3, #24
10043ce0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
10043ce2:	0215      	lsls	r5, r2, #8
10043ce4:	431d      	orrs	r5, r3
10043ce6:	6a3b      	ldr	r3, [r7, #32]
10043ce8:	021c      	lsls	r4, r3, #8
10043cea:	623c      	str	r4, [r7, #32]
10043cec:	627d      	str	r5, [r7, #36]	@ 0x24
		ts |= ts_tab[i];
10043cee:	200f      	movs	r0, #15
10043cf0:	2110      	movs	r1, #16
10043cf2:	1843      	adds	r3, r0, r1
10043cf4:	19db      	adds	r3, r3, r7
10043cf6:	781b      	ldrb	r3, [r3, #0]
10043cf8:	b25b      	sxtb	r3, r3
10043cfa:	2208      	movs	r2, #8
10043cfc:	1852      	adds	r2, r2, r1
10043cfe:	19d2      	adds	r2, r2, r7
10043d00:	5cd3      	ldrb	r3, [r2, r3]
10043d02:	60bb      	str	r3, [r7, #8]
10043d04:	2300      	movs	r3, #0
10043d06:	60fb      	str	r3, [r7, #12]
10043d08:	6a3b      	ldr	r3, [r7, #32]
10043d0a:	68b9      	ldr	r1, [r7, #8]
10043d0c:	68fa      	ldr	r2, [r7, #12]
10043d0e:	000e      	movs	r6, r1
10043d10:	431e      	orrs	r6, r3
10043d12:	603e      	str	r6, [r7, #0]
10043d14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10043d16:	431a      	orrs	r2, r3
10043d18:	607a      	str	r2, [r7, #4]
10043d1a:	683a      	ldr	r2, [r7, #0]
10043d1c:	687b      	ldr	r3, [r7, #4]
10043d1e:	623a      	str	r2, [r7, #32]
10043d20:	627b      	str	r3, [r7, #36]	@ 0x24
	for (i = 4; i >= 0; i--) {
10043d22:	2110      	movs	r1, #16
10043d24:	1843      	adds	r3, r0, r1
10043d26:	19db      	adds	r3, r3, r7
10043d28:	781b      	ldrb	r3, [r3, #0]
10043d2a:	b25b      	sxtb	r3, r3
10043d2c:	b2db      	uxtb	r3, r3
10043d2e:	3b01      	subs	r3, #1
10043d30:	b2da      	uxtb	r2, r3
10043d32:	1843      	adds	r3, r0, r1
10043d34:	19db      	adds	r3, r3, r7
10043d36:	701a      	strb	r2, [r3, #0]
10043d38:	230f      	movs	r3, #15
10043d3a:	2210      	movs	r2, #16
10043d3c:	189b      	adds	r3, r3, r2
10043d3e:	19db      	adds	r3, r3, r7
10043d40:	781b      	ldrb	r3, [r3, #0]
10043d42:	2b7f      	cmp	r3, #127	@ 0x7f
10043d44:	d9ca      	bls.n	10043cdc <get_rx_timestamp_u64+0x32>
	}
	return ts;
10043d46:	6a3a      	ldr	r2, [r7, #32]
10043d48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
10043d4a:	0010      	movs	r0, r2
10043d4c:	0019      	movs	r1, r3
10043d4e:	46bd      	mov	sp, r7
10043d50:	b00b      	add	sp, #44	@ 0x2c
10043d52:	bdf0      	pop	{r4, r5, r6, r7, pc}

10043d54 <final_msg_get_ts>:
		ts_field[i] = (uint8_t) ts;
		ts >>= 8;
	}
}

static void final_msg_get_ts(const uint8_t *ts_field, uint32_t *ts) {
10043d54:	b580      	push	{r7, lr}
10043d56:	b084      	sub	sp, #16
10043d58:	af00      	add	r7, sp, #0
10043d5a:	6078      	str	r0, [r7, #4]
10043d5c:	6039      	str	r1, [r7, #0]
	int8_t i;
	*ts = 0;
10043d5e:	683b      	ldr	r3, [r7, #0]
10043d60:	2200      	movs	r2, #0
10043d62:	601a      	str	r2, [r3, #0]
	for (i = 0; i < FINAL_MSG_TS_LEN; i++) {
10043d64:	230f      	movs	r3, #15
10043d66:	18fb      	adds	r3, r7, r3
10043d68:	2200      	movs	r2, #0
10043d6a:	701a      	strb	r2, [r3, #0]
10043d6c:	e01a      	b.n	10043da4 <final_msg_get_ts+0x50>
		*ts += ts_field[i] << (i * 8);
10043d6e:	683b      	ldr	r3, [r7, #0]
10043d70:	681b      	ldr	r3, [r3, #0]
10043d72:	200f      	movs	r0, #15
10043d74:	183a      	adds	r2, r7, r0
10043d76:	7812      	ldrb	r2, [r2, #0]
10043d78:	b252      	sxtb	r2, r2
10043d7a:	6879      	ldr	r1, [r7, #4]
10043d7c:	188a      	adds	r2, r1, r2
10043d7e:	7812      	ldrb	r2, [r2, #0]
10043d80:	0011      	movs	r1, r2
10043d82:	183a      	adds	r2, r7, r0
10043d84:	7812      	ldrb	r2, [r2, #0]
10043d86:	b252      	sxtb	r2, r2
10043d88:	00d2      	lsls	r2, r2, #3
10043d8a:	4091      	lsls	r1, r2
10043d8c:	000a      	movs	r2, r1
10043d8e:	189a      	adds	r2, r3, r2
10043d90:	683b      	ldr	r3, [r7, #0]
10043d92:	601a      	str	r2, [r3, #0]
	for (i = 0; i < FINAL_MSG_TS_LEN; i++) {
10043d94:	183b      	adds	r3, r7, r0
10043d96:	781b      	ldrb	r3, [r3, #0]
10043d98:	b25b      	sxtb	r3, r3
10043d9a:	b2db      	uxtb	r3, r3
10043d9c:	3301      	adds	r3, #1
10043d9e:	b2da      	uxtb	r2, r3
10043da0:	183b      	adds	r3, r7, r0
10043da2:	701a      	strb	r2, [r3, #0]
10043da4:	230f      	movs	r3, #15
10043da6:	18fb      	adds	r3, r7, r3
10043da8:	781b      	ldrb	r3, [r3, #0]
10043daa:	b25b      	sxtb	r3, r3
10043dac:	2b03      	cmp	r3, #3
10043dae:	ddde      	ble.n	10043d6e <final_msg_get_ts+0x1a>
	}
}
10043db0:	46c0      	nop			@ (mov r8, r8)
10043db2:	46c0      	nop			@ (mov r8, r8)
10043db4:	46bd      	mov	sp, r7
10043db6:	b004      	add	sp, #16
10043db8:	bd80      	pop	{r7, pc}
	...

10043dbc <DW1000_responder>:
				(void*) &tmp, 1);
	}

}

double DW1000_responder(DW1000_t *dw1000, uint8_t channel) {
10043dbc:	b5f0      	push	{r4, r5, r6, r7, lr}
10043dbe:	b09b      	sub	sp, #108	@ 0x6c
10043dc0:	af02      	add	r7, sp, #8
10043dc2:	6078      	str	r0, [r7, #4]
10043dc4:	000a      	movs	r2, r1
10043dc6:	1cfb      	adds	r3, r7, #3
10043dc8:	701a      	strb	r2, [r3, #0]

	/* Clear reception timeout to start next ranging process. */
	uint32_t tmp;

	DW1000_read_reg(dw1000, SYS_CFG_ID, 3, (void*) &tmp, 1); // Read at offset 3 to get the upper byte only
10043dca:	2624      	movs	r6, #36	@ 0x24
10043dcc:	19bb      	adds	r3, r7, r6
10043dce:	6878      	ldr	r0, [r7, #4]
10043dd0:	2201      	movs	r2, #1
10043dd2:	9200      	str	r2, [sp, #0]
10043dd4:	2203      	movs	r2, #3
10043dd6:	2104      	movs	r1, #4
10043dd8:	f7ff faf6 	bl	100433c8 <DW1000_read_reg>
	tmp &= ~(SYS_CFG_RXWTOE >> 24); // Shift RXWTOE mask as we read the upper byte only
10043ddc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10043dde:	2210      	movs	r2, #16
10043de0:	4393      	bics	r3, r2
10043de2:	627b      	str	r3, [r7, #36]	@ 0x24
	DW1000_write_reg(dw1000, SYS_CFG_ID, 3, (void*) &tmp, 1);
10043de4:	19bb      	adds	r3, r7, r6
10043de6:	6878      	ldr	r0, [r7, #4]
10043de8:	2201      	movs	r2, #1
10043dea:	9200      	str	r2, [sp, #0]
10043dec:	2203      	movs	r2, #3
10043dee:	2104      	movs	r1, #4
10043df0:	f7ff fb4c 	bl	1004348c <DW1000_write_reg>

	/* Activate reception immediately. */
	DW1000_read_reg(dw1000, SYS_STATUS_ID, 3, (void*) &tmp, 1); // Read 1 byte at offset 3 to get the 4th byte out of 5
10043df4:	19bb      	adds	r3, r7, r6
10043df6:	6878      	ldr	r0, [r7, #4]
10043df8:	2201      	movs	r2, #1
10043dfa:	9200      	str	r2, [sp, #0]
10043dfc:	2203      	movs	r2, #3
10043dfe:	210f      	movs	r1, #15
10043e00:	f7ff fae2 	bl	100433c8 <DW1000_read_reg>

	if ((tmp & (SYS_STATUS_ICRBP >> 24)) !=   // IC side Receive Buffer Pointer
			((tmp & (SYS_STATUS_HSRBP >> 24)) << 1)) // Host Side Receive Buffer Pointer
10043e04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10043e06:	005a      	lsls	r2, r3, #1
	if ((tmp & (SYS_STATUS_ICRBP >> 24)) !=   // IC side Receive Buffer Pointer
10043e08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10043e0a:	4053      	eors	r3, r2
10043e0c:	2280      	movs	r2, #128	@ 0x80
10043e0e:	4013      	ands	r3, r2
10043e10:	d009      	beq.n	10043e26 <DW1000_responder+0x6a>
			{
		tmp = 0x01;
10043e12:	2301      	movs	r3, #1
10043e14:	627b      	str	r3, [r7, #36]	@ 0x24
		DW1000_write_reg(dw1000, SYS_CTRL_ID, SYS_CTRL_HRBT_OFFSET,
10043e16:	19bb      	adds	r3, r7, r6
10043e18:	6878      	ldr	r0, [r7, #4]
10043e1a:	2201      	movs	r2, #1
10043e1c:	9200      	str	r2, [sp, #0]
10043e1e:	2203      	movs	r2, #3
10043e20:	210d      	movs	r1, #13
10043e22:	f7ff fb33 	bl	1004348c <DW1000_write_reg>
				(void*) &tmp, 1); // We need to swap RX buffer status reg (write one to toggle internally)
	}

	tmp = SYS_CTRL_RXENAB;
10043e26:	2380      	movs	r3, #128	@ 0x80
10043e28:	005b      	lsls	r3, r3, #1
10043e2a:	627b      	str	r3, [r7, #36]	@ 0x24
	DW1000_write_reg(dw1000, SYS_CTRL_ID, SYS_CTRL_OFFSET, (void*) &tmp, 2);
10043e2c:	2324      	movs	r3, #36	@ 0x24
10043e2e:	18fb      	adds	r3, r7, r3
10043e30:	6878      	ldr	r0, [r7, #4]
10043e32:	2202      	movs	r2, #2
10043e34:	9200      	str	r2, [sp, #0]
10043e36:	2200      	movs	r2, #0
10043e38:	210d      	movs	r1, #13
10043e3a:	f7ff fb27 	bl	1004348c <DW1000_write_reg>

	/* Poll for reception of a frame or error/timeout. See NOTE 8 below. */
	do {
		DW1000_read_reg(dw1000, SYS_STATUS_ID, 0x0, (void*) &status_reg, 4);
10043e3e:	4b75      	ldr	r3, [pc, #468]	@ (10044014 <DW1000_responder+0x258>)
10043e40:	6878      	ldr	r0, [r7, #4]
10043e42:	2204      	movs	r2, #4
10043e44:	9200      	str	r2, [sp, #0]
10043e46:	2200      	movs	r2, #0
10043e48:	210f      	movs	r1, #15
10043e4a:	f7ff fabd 	bl	100433c8 <DW1000_read_reg>
	} while (!(status_reg
			& (SYS_STATUS_RXFCG | SYS_STATUS_ALL_RX_TO | SYS_STATUS_ALL_RX_ERR)));
10043e4e:	4b71      	ldr	r3, [pc, #452]	@ (10044014 <DW1000_responder+0x258>)
10043e50:	681b      	ldr	r3, [r3, #0]
10043e52:	4a71      	ldr	r2, [pc, #452]	@ (10044018 <DW1000_responder+0x25c>)
10043e54:	4013      	ands	r3, r2
	} while (!(status_reg
10043e56:	d0f2      	beq.n	10043e3e <DW1000_responder+0x82>

	if (status_reg & SYS_STATUS_RXFCG) {
10043e58:	4b6e      	ldr	r3, [pc, #440]	@ (10044014 <DW1000_responder+0x258>)
10043e5a:	681a      	ldr	r2, [r3, #0]
10043e5c:	2380      	movs	r3, #128	@ 0x80
10043e5e:	01db      	lsls	r3, r3, #7
10043e60:	4013      	ands	r3, r2
10043e62:	d100      	bne.n	10043e66 <DW1000_responder+0xaa>
10043e64:	e22b      	b.n	100442be <DW1000_responder+0x502>

		uint32_t frame_len;

		/* Clear good RX frame event in the DW1000 status register. */
		tmp = SYS_STATUS_RXFCG;
10043e66:	2380      	movs	r3, #128	@ 0x80
10043e68:	01db      	lsls	r3, r3, #7
10043e6a:	627b      	str	r3, [r7, #36]	@ 0x24
		DW1000_write_reg(dw1000, SYS_STATUS_ID, 0x00, (void*) &tmp, 4);
10043e6c:	2324      	movs	r3, #36	@ 0x24
10043e6e:	18fb      	adds	r3, r7, r3
10043e70:	6878      	ldr	r0, [r7, #4]
10043e72:	2204      	movs	r2, #4
10043e74:	9200      	str	r2, [sp, #0]
10043e76:	2200      	movs	r2, #0
10043e78:	210f      	movs	r1, #15
10043e7a:	f7ff fb07 	bl	1004348c <DW1000_write_reg>
		memset(rx_buffer, 0, sizeof(rx_buffer));
10043e7e:	4b67      	ldr	r3, [pc, #412]	@ (1004401c <DW1000_responder+0x260>)
10043e80:	2219      	movs	r2, #25
10043e82:	2100      	movs	r1, #0
10043e84:	0018      	movs	r0, r3
10043e86:	f005 fa5d 	bl	10049344 <memset>
		/* A frame has been received, read it into the local buffer. */
		DW1000_read_reg(dw1000, RX_FINFO_ID, 0x00, (void*) &frame_len, 4);
10043e8a:	2320      	movs	r3, #32
10043e8c:	18fb      	adds	r3, r7, r3
10043e8e:	6878      	ldr	r0, [r7, #4]
10043e90:	2204      	movs	r2, #4
10043e92:	9200      	str	r2, [sp, #0]
10043e94:	2200      	movs	r2, #0
10043e96:	2110      	movs	r1, #16
10043e98:	f7ff fa96 	bl	100433c8 <DW1000_read_reg>
		frame_len &= RX_FINFO_RXFL_MASK_1023;
10043e9c:	6a3b      	ldr	r3, [r7, #32]
10043e9e:	059b      	lsls	r3, r3, #22
10043ea0:	0d9b      	lsrs	r3, r3, #22
10043ea2:	623b      	str	r3, [r7, #32]
		if (frame_len <= RX_BUF_LEN) {
10043ea4:	6a3b      	ldr	r3, [r7, #32]
10043ea6:	2b19      	cmp	r3, #25
10043ea8:	d808      	bhi.n	10043ebc <DW1000_responder+0x100>
			DW1000_read_reg(dw1000, RX_BUFFER_ID, 0x00, (void*) &rx_buffer,
10043eaa:	6a3b      	ldr	r3, [r7, #32]
10043eac:	4a5b      	ldr	r2, [pc, #364]	@ (1004401c <DW1000_responder+0x260>)
10043eae:	6878      	ldr	r0, [r7, #4]
10043eb0:	9300      	str	r3, [sp, #0]
10043eb2:	0013      	movs	r3, r2
10043eb4:	2200      	movs	r2, #0
10043eb6:	2111      	movs	r1, #17
10043eb8:	f7ff fa86 	bl	100433c8 <DW1000_read_reg>
					frame_len);
		}

		rx_buffer[ALL_MSG_SN_IDX] = 0;
10043ebc:	4b57      	ldr	r3, [pc, #348]	@ (1004401c <DW1000_responder+0x260>)
10043ebe:	2200      	movs	r2, #0
10043ec0:	709a      	strb	r2, [r3, #2]

		if (memcmp(rx_buffer, rx_poll_msg, ALL_MSG_COMMON_LEN) == 0
10043ec2:	4957      	ldr	r1, [pc, #348]	@ (10044020 <DW1000_responder+0x264>)
10043ec4:	4b55      	ldr	r3, [pc, #340]	@ (1004401c <DW1000_responder+0x260>)
10043ec6:	220a      	movs	r2, #10
10043ec8:	0018      	movs	r0, r3
10043eca:	f005 fa2d 	bl	10049328 <memcmp>
10043ece:	1e03      	subs	r3, r0, #0
10043ed0:	d000      	beq.n	10043ed4 <DW1000_responder+0x118>
10043ed2:	e214      	b.n	100442fe <DW1000_responder+0x542>
				&& rx_buffer[10] == channel) {
10043ed4:	4b51      	ldr	r3, [pc, #324]	@ (1004401c <DW1000_responder+0x260>)
10043ed6:	7a9b      	ldrb	r3, [r3, #10]
10043ed8:	1cfa      	adds	r2, r7, #3
10043eda:	7812      	ldrb	r2, [r2, #0]
10043edc:	429a      	cmp	r2, r3
10043ede:	d000      	beq.n	10043ee2 <DW1000_responder+0x126>
10043ee0:	e20d      	b.n	100442fe <DW1000_responder+0x542>
			uint32_t resp_tx_time;

			/* Retrieve poll reception timestamp. */
			poll_rx_ts = get_rx_timestamp_u64(dw1000);
10043ee2:	687b      	ldr	r3, [r7, #4]
10043ee4:	0018      	movs	r0, r3
10043ee6:	f7ff fee0 	bl	10043caa <get_rx_timestamp_u64>
10043eea:	0002      	movs	r2, r0
10043eec:	000b      	movs	r3, r1
10043eee:	494d      	ldr	r1, [pc, #308]	@ (10044024 <DW1000_responder+0x268>)
10043ef0:	600a      	str	r2, [r1, #0]
10043ef2:	604b      	str	r3, [r1, #4]

			// set rx after tx delay
			DW1000_read_reg(dw1000, ACK_RESP_T_ID, 0x00, (void*) &tmp, 4); // Read ACK_RESP_T_ID register
10043ef4:	2624      	movs	r6, #36	@ 0x24
10043ef6:	19bb      	adds	r3, r7, r6
10043ef8:	6878      	ldr	r0, [r7, #4]
10043efa:	2204      	movs	r2, #4
10043efc:	9200      	str	r2, [sp, #0]
10043efe:	2200      	movs	r2, #0
10043f00:	211a      	movs	r1, #26
10043f02:	f7ff fa61 	bl	100433c8 <DW1000_read_reg>
			tmp &= ~(ACK_RESP_T_W4R_TIM_MASK); // Clear the timer (19:0)
10043f06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10043f08:	0d1b      	lsrs	r3, r3, #20
10043f0a:	051b      	lsls	r3, r3, #20
10043f0c:	627b      	str	r3, [r7, #36]	@ 0x24
			tmp |= (RESP_TX_TO_FINAL_RX_DLY_UUS & ACK_RESP_T_W4R_TIM_MASK); // In UWB microseconds (e.g. turn the receiver on 20uus after TX)
10043f0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10043f10:	22fa      	movs	r2, #250	@ 0xfa
10043f12:	0052      	lsls	r2, r2, #1
10043f14:	4313      	orrs	r3, r2
10043f16:	627b      	str	r3, [r7, #36]	@ 0x24
			DW1000_write_reg(dw1000, ACK_RESP_T_ID, 0x00, (void*) &tmp, 4);
10043f18:	19bb      	adds	r3, r7, r6
10043f1a:	6878      	ldr	r0, [r7, #4]
10043f1c:	2204      	movs	r2, #4
10043f1e:	9200      	str	r2, [sp, #0]
10043f20:	2200      	movs	r2, #0
10043f22:	211a      	movs	r1, #26
10043f24:	f7ff fab2 	bl	1004348c <DW1000_write_reg>

			// set rx timeout
			tmp = 0;
10043f28:	2300      	movs	r3, #0
10043f2a:	627b      	str	r3, [r7, #36]	@ 0x24
			DW1000_read_reg(dw1000, SYS_CFG_ID, 0x03, (void*) &tmp, 1); // Read at offset 3 to get the upper byte only
10043f2c:	19bb      	adds	r3, r7, r6
10043f2e:	6878      	ldr	r0, [r7, #4]
10043f30:	2201      	movs	r2, #1
10043f32:	9200      	str	r2, [sp, #0]
10043f34:	2203      	movs	r2, #3
10043f36:	2104      	movs	r1, #4
10043f38:	f7ff fa46 	bl	100433c8 <DW1000_read_reg>

			uint32_t time = FINAL_RX_TIMEOUT_UUS;
10043f3c:	4b3a      	ldr	r3, [pc, #232]	@ (10044028 <DW1000_responder+0x26c>)
10043f3e:	61bb      	str	r3, [r7, #24]
			DW1000_write_reg(dw1000, RX_FWTO_ID, RX_FWTO_OFFSET, (void*) &time,
10043f40:	2318      	movs	r3, #24
10043f42:	18fb      	adds	r3, r7, r3
10043f44:	6878      	ldr	r0, [r7, #4]
10043f46:	2202      	movs	r2, #2
10043f48:	9200      	str	r2, [sp, #0]
10043f4a:	2200      	movs	r2, #0
10043f4c:	210c      	movs	r1, #12
10043f4e:	f7ff fa9d 	bl	1004348c <DW1000_write_reg>
					2);
			tmp |= (SYS_CFG_RXWTOE >> 24); // Shift RXWTOE mask as we read the upper byte only
10043f52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10043f54:	2210      	movs	r2, #16
10043f56:	4313      	orrs	r3, r2
10043f58:	627b      	str	r3, [r7, #36]	@ 0x24
			// OR in 32bit value (1 bit set), I know this is in high byte.
			DW1000_write_reg(dw1000, SYS_CFG_ID, 0x03, (void*) &tmp, 1); // Write at offset 3 to write the upper byte only
10043f5a:	19bb      	adds	r3, r7, r6
10043f5c:	6878      	ldr	r0, [r7, #4]
10043f5e:	2201      	movs	r2, #1
10043f60:	9200      	str	r2, [sp, #0]
10043f62:	2203      	movs	r2, #3
10043f64:	2104      	movs	r1, #4
10043f66:	f7ff fa91 	bl	1004348c <DW1000_write_reg>

			tx_resp_msg[ALL_MSG_SN_IDX] = frame_seq_nb;
10043f6a:	4b30      	ldr	r3, [pc, #192]	@ (1004402c <DW1000_responder+0x270>)
10043f6c:	781a      	ldrb	r2, [r3, #0]
10043f6e:	4b30      	ldr	r3, [pc, #192]	@ (10044030 <DW1000_responder+0x274>)
10043f70:	709a      	strb	r2, [r3, #2]
			tx_resp_msg[13] = channel;
10043f72:	4b2f      	ldr	r3, [pc, #188]	@ (10044030 <DW1000_responder+0x274>)
10043f74:	1cfa      	adds	r2, r7, #3
10043f76:	7812      	ldrb	r2, [r2, #0]
10043f78:	735a      	strb	r2, [r3, #13]
			DW1000_write_reg(dw1000, TX_BUFFER_ID, 0, tx_resp_msg,
10043f7a:	4b2d      	ldr	r3, [pc, #180]	@ (10044030 <DW1000_responder+0x274>)
10043f7c:	6878      	ldr	r0, [r7, #4]
10043f7e:	220e      	movs	r2, #14
10043f80:	9200      	str	r2, [sp, #0]
10043f82:	2200      	movs	r2, #0
10043f84:	2109      	movs	r1, #9
10043f86:	f7ff fa81 	bl	1004348c <DW1000_write_reg>
					sizeof(tx_resp_msg) - 2);

			tmp = txFCTRL | sizeof(tx_resp_msg)
					| ((uint32_t) 0x0U << TX_FCTRL_TXBOFFS_SHFT)
					| ((uint32_t) 0x1U << TX_FCTRL_TR_SHFT);
10043f8a:	4b2a      	ldr	r3, [pc, #168]	@ (10044034 <DW1000_responder+0x278>)
10043f8c:	681b      	ldr	r3, [r3, #0]
10043f8e:	4a2a      	ldr	r2, [pc, #168]	@ (10044038 <DW1000_responder+0x27c>)
10043f90:	4313      	orrs	r3, r2
			tmp = txFCTRL | sizeof(tx_resp_msg)
10043f92:	627b      	str	r3, [r7, #36]	@ 0x24
			DW1000_write_reg(dw1000, TX_FCTRL_ID, 0x00, (void*) &tmp, 4);
10043f94:	19bb      	adds	r3, r7, r6
10043f96:	6878      	ldr	r0, [r7, #4]
10043f98:	2204      	movs	r2, #4
10043f9a:	9200      	str	r2, [sp, #0]
10043f9c:	2200      	movs	r2, #0
10043f9e:	2108      	movs	r1, #8
10043fa0:	f7ff fa74 	bl	1004348c <DW1000_write_reg>

			/* Set send time for response. See NOTE 9 below. */
			resp_tx_time = (poll_rx_ts
					+ (POLL_RX_TO_RESP_TX_DLY_UUS * UUS_TO_DWT_TIME)) >> 8;
10043fa4:	4b1f      	ldr	r3, [pc, #124]	@ (10044024 <DW1000_responder+0x268>)
10043fa6:	681a      	ldr	r2, [r3, #0]
10043fa8:	685b      	ldr	r3, [r3, #4]
10043faa:	4824      	ldr	r0, [pc, #144]	@ (1004403c <DW1000_responder+0x280>)
10043fac:	2100      	movs	r1, #0
10043fae:	1812      	adds	r2, r2, r0
10043fb0:	414b      	adcs	r3, r1
10043fb2:	0619      	lsls	r1, r3, #24
10043fb4:	0a14      	lsrs	r4, r2, #8
10043fb6:	430c      	orrs	r4, r1
10043fb8:	0a1d      	lsrs	r5, r3, #8
			resp_tx_time = (poll_rx_ts
10043fba:	0023      	movs	r3, r4
10043fbc:	61fb      	str	r3, [r7, #28]
			DW1000_write_reg(dw1000, DX_TIME_ID, 0x01, (void*) &resp_tx_time,
10043fbe:	231c      	movs	r3, #28
10043fc0:	18fb      	adds	r3, r7, r3
10043fc2:	6878      	ldr	r0, [r7, #4]
10043fc4:	2204      	movs	r2, #4
10043fc6:	9200      	str	r2, [sp, #0]
10043fc8:	2201      	movs	r2, #1
10043fca:	210a      	movs	r1, #10
10043fcc:	f7ff fa5e 	bl	1004348c <DW1000_write_reg>
					4);

			// start TX
			tmp = SYS_CTRL_WAIT4RESP | SYS_CTRL_TXDLYS | SYS_CTRL_TXSTRT;
10043fd0:	2386      	movs	r3, #134	@ 0x86
10043fd2:	627b      	str	r3, [r7, #36]	@ 0x24
			DW1000_write_reg(dw1000, SYS_CTRL_ID, SYS_CTRL_OFFSET, (void*) &tmp,
10043fd4:	19bb      	adds	r3, r7, r6
10043fd6:	6878      	ldr	r0, [r7, #4]
10043fd8:	2201      	movs	r2, #1
10043fda:	9200      	str	r2, [sp, #0]
10043fdc:	2200      	movs	r2, #0
10043fde:	210d      	movs	r1, #13
10043fe0:	f7ff fa54 	bl	1004348c <DW1000_write_reg>
					1);

			DW1000_read_reg(dw1000, SYS_STATUS_ID, 0x03, (void*) &tmp, 2); // Read at offset 3 to get the upper 2 bytes out of 5
10043fe4:	19bb      	adds	r3, r7, r6
10043fe6:	6878      	ldr	r0, [r7, #4]
10043fe8:	2202      	movs	r2, #2
10043fea:	9200      	str	r2, [sp, #0]
10043fec:	2203      	movs	r2, #3
10043fee:	210f      	movs	r1, #15
10043ff0:	f7ff f9ea 	bl	100433c8 <DW1000_read_reg>

			if (tmp & SYS_STATUS_TXERR) {
10043ff4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
10043ff6:	2381      	movs	r3, #129	@ 0x81
10043ff8:	00db      	lsls	r3, r3, #3
10043ffa:	4013      	ands	r3, r2
10043ffc:	d020      	beq.n	10044040 <DW1000_responder+0x284>
				tmp = SYS_CTRL_TRXOFF;
10043ffe:	2340      	movs	r3, #64	@ 0x40
10044000:	627b      	str	r3, [r7, #36]	@ 0x24
				DW1000_write_reg(dw1000, SYS_CTRL_ID, SYS_CTRL_OFFSET,
10044002:	19bb      	adds	r3, r7, r6
10044004:	6878      	ldr	r0, [r7, #4]
10044006:	2201      	movs	r2, #1
10044008:	9200      	str	r2, [sp, #0]
1004400a:	2200      	movs	r2, #0
1004400c:	210d      	movs	r1, #13
1004400e:	f7ff fa3d 	bl	1004348c <DW1000_write_reg>
10044012:	e155      	b.n	100442c0 <DW1000_responder+0x504>
10044014:	20000484 	.word	0x20000484
10044018:	2427d000 	.word	0x2427d000
1004401c:	20000498 	.word	0x20000498
10044020:	2000065c 	.word	0x2000065c
10044024:	200004b8 	.word	0x200004b8
10044028:	00001388 	.word	0x00001388
1004402c:	200004d0 	.word	0x200004d0
10044030:	2000066c 	.word	0x2000066c
10044034:	20000480 	.word	0x20000480
10044038:	00008010 	.word	0x00008010
1004403c:	0bb80000 	.word	0x0bb80000
						(void*) &tmp, 1);
				goto TXError;
			}
			uint32_t sys_status;
			DW1000_read_reg(dw1000, SYS_STATUS_ID, 0x00, (void*) &sys_status,
10044040:	2314      	movs	r3, #20
10044042:	18fb      	adds	r3, r7, r3
10044044:	6878      	ldr	r0, [r7, #4]
10044046:	2204      	movs	r2, #4
10044048:	9200      	str	r2, [sp, #0]
1004404a:	2200      	movs	r2, #0
1004404c:	210f      	movs	r1, #15
1004404e:	f7ff f9bb 	bl	100433c8 <DW1000_read_reg>
					4); // Read at offset 3 to get the upper 2 bytes out of 5
			// poll for reception
			status_reg = 0;
10044052:	4bae      	ldr	r3, [pc, #696]	@ (1004430c <DW1000_responder+0x550>)
10044054:	2200      	movs	r2, #0
10044056:	601a      	str	r2, [r3, #0]
			do {
				DW1000_read_reg(dw1000, SYS_STATUS_ID, 0x0, (void*) &status_reg,
10044058:	4bac      	ldr	r3, [pc, #688]	@ (1004430c <DW1000_responder+0x550>)
1004405a:	6878      	ldr	r0, [r7, #4]
1004405c:	2204      	movs	r2, #4
1004405e:	9200      	str	r2, [sp, #0]
10044060:	2200      	movs	r2, #0
10044062:	210f      	movs	r1, #15
10044064:	f7ff f9b0 	bl	100433c8 <DW1000_read_reg>
						4);
			} while (!(status_reg
					& (SYS_STATUS_RXFCG | SYS_STATUS_ALL_RX_TO
10044068:	4ba8      	ldr	r3, [pc, #672]	@ (1004430c <DW1000_responder+0x550>)
1004406a:	681b      	ldr	r3, [r3, #0]
1004406c:	4aa8      	ldr	r2, [pc, #672]	@ (10044310 <DW1000_responder+0x554>)
1004406e:	4013      	ands	r3, r2
			} while (!(status_reg
10044070:	d0f2      	beq.n	10044058 <DW1000_responder+0x29c>
							| SYS_STATUS_ALL_RX_ERR)));
			/* Increment frame sequence number after transmission of the response message (modulo 256). */
			frame_seq_nb++;
10044072:	4ba8      	ldr	r3, [pc, #672]	@ (10044314 <DW1000_responder+0x558>)
10044074:	781b      	ldrb	r3, [r3, #0]
10044076:	3301      	adds	r3, #1
10044078:	b2da      	uxtb	r2, r3
1004407a:	4ba6      	ldr	r3, [pc, #664]	@ (10044314 <DW1000_responder+0x558>)
1004407c:	701a      	strb	r2, [r3, #0]

			if (status_reg & SYS_STATUS_RXFCG) {
1004407e:	4ba3      	ldr	r3, [pc, #652]	@ (1004430c <DW1000_responder+0x550>)
10044080:	681a      	ldr	r2, [r3, #0]
10044082:	2380      	movs	r3, #128	@ 0x80
10044084:	01db      	lsls	r3, r3, #7
10044086:	4013      	ands	r3, r2
10044088:	d100      	bne.n	1004408c <DW1000_responder+0x2d0>
1004408a:	e0f8      	b.n	1004427e <DW1000_responder+0x4c2>
				tmp = SYS_STATUS_RXFCG | SYS_STATUS_TXFRS;
1004408c:	2381      	movs	r3, #129	@ 0x81
1004408e:	01db      	lsls	r3, r3, #7
10044090:	627b      	str	r3, [r7, #36]	@ 0x24
				DW1000_write_reg(dw1000, SYS_STATUS_ID, 0x00, (void*) &tmp, 4);
10044092:	2324      	movs	r3, #36	@ 0x24
10044094:	18fb      	adds	r3, r7, r3
10044096:	6878      	ldr	r0, [r7, #4]
10044098:	2204      	movs	r2, #4
1004409a:	9200      	str	r2, [sp, #0]
1004409c:	2200      	movs	r2, #0
1004409e:	210f      	movs	r1, #15
100440a0:	f7ff f9f4 	bl	1004348c <DW1000_write_reg>
				/* A frame has been received, read it into the local buffer. */
				DW1000_read_reg(dw1000, RX_FINFO_ID, 0x00, (void*) &frame_len,
100440a4:	2320      	movs	r3, #32
100440a6:	18fb      	adds	r3, r7, r3
100440a8:	6878      	ldr	r0, [r7, #4]
100440aa:	2204      	movs	r2, #4
100440ac:	9200      	str	r2, [sp, #0]
100440ae:	2200      	movs	r2, #0
100440b0:	2110      	movs	r1, #16
100440b2:	f7ff f989 	bl	100433c8 <DW1000_read_reg>
						4);
				frame_len &= RX_FINFO_RXFLEN_MASK;
100440b6:	6a3b      	ldr	r3, [r7, #32]
100440b8:	227f      	movs	r2, #127	@ 0x7f
100440ba:	4013      	ands	r3, r2
100440bc:	623b      	str	r3, [r7, #32]
				if (frame_len <= RX_BUF_LEN) {
100440be:	6a3b      	ldr	r3, [r7, #32]
100440c0:	2b19      	cmp	r3, #25
100440c2:	d808      	bhi.n	100440d6 <DW1000_responder+0x31a>
					DW1000_read_reg(dw1000, RX_BUFFER_ID, 0x00,
100440c4:	6a3b      	ldr	r3, [r7, #32]
100440c6:	4a94      	ldr	r2, [pc, #592]	@ (10044318 <DW1000_responder+0x55c>)
100440c8:	6878      	ldr	r0, [r7, #4]
100440ca:	9300      	str	r3, [sp, #0]
100440cc:	0013      	movs	r3, r2
100440ce:	2200      	movs	r2, #0
100440d0:	2111      	movs	r1, #17
100440d2:	f7ff f979 	bl	100433c8 <DW1000_read_reg>
							(void*) &rx_buffer, frame_len);
				}
				rx_buffer[ALL_MSG_SN_IDX] = 0;
100440d6:	4b90      	ldr	r3, [pc, #576]	@ (10044318 <DW1000_responder+0x55c>)
100440d8:	2200      	movs	r2, #0
100440da:	709a      	strb	r2, [r3, #2]
				if (memcmp(rx_buffer, rx_final_msg, ALL_MSG_COMMON_LEN) == 0) {
100440dc:	498f      	ldr	r1, [pc, #572]	@ (1004431c <DW1000_responder+0x560>)
100440de:	4b8e      	ldr	r3, [pc, #568]	@ (10044318 <DW1000_responder+0x55c>)
100440e0:	220a      	movs	r2, #10
100440e2:	0018      	movs	r0, r3
100440e4:	f005 f920 	bl	10049328 <memcmp>
100440e8:	1e03      	subs	r3, r0, #0
100440ea:	d000      	beq.n	100440ee <DW1000_responder+0x332>
100440ec:	e107      	b.n	100442fe <DW1000_responder+0x542>
					uint32_t poll_rx_ts_32, resp_tx_ts_32, final_rx_ts_32;
					double Ra, Rb, Da, Db;
					int64_t tof_dtu;

					/* Retrieve response transmission and final reception timestamps. */
					resp_tx_ts = get_tx_timestamp_u64(dw1000);
100440ee:	687b      	ldr	r3, [r7, #4]
100440f0:	0018      	movs	r0, r3
100440f2:	f7ff fd85 	bl	10043c00 <get_tx_timestamp_u64>
100440f6:	0002      	movs	r2, r0
100440f8:	000b      	movs	r3, r1
100440fa:	4989      	ldr	r1, [pc, #548]	@ (10044320 <DW1000_responder+0x564>)
100440fc:	600a      	str	r2, [r1, #0]
100440fe:	604b      	str	r3, [r1, #4]
					final_rx_ts = get_rx_timestamp_u64(dw1000);
10044100:	687b      	ldr	r3, [r7, #4]
10044102:	0018      	movs	r0, r3
10044104:	f7ff fdd1 	bl	10043caa <get_rx_timestamp_u64>
10044108:	0002      	movs	r2, r0
1004410a:	000b      	movs	r3, r1
1004410c:	4985      	ldr	r1, [pc, #532]	@ (10044324 <DW1000_responder+0x568>)
1004410e:	600a      	str	r2, [r1, #0]
10044110:	604b      	str	r3, [r1, #4]

					/* Get timestamps embedded in the final message. */
					final_msg_get_ts(&rx_buffer[FINAL_MSG_POLL_TX_TS_IDX],
10044112:	2310      	movs	r3, #16
10044114:	18fa      	adds	r2, r7, r3
10044116:	4b84      	ldr	r3, [pc, #528]	@ (10044328 <DW1000_responder+0x56c>)
10044118:	0011      	movs	r1, r2
1004411a:	0018      	movs	r0, r3
1004411c:	f7ff fe1a 	bl	10043d54 <final_msg_get_ts>
							&poll_tx_ts);
					final_msg_get_ts(&rx_buffer[FINAL_MSG_RESP_RX_TS_IDX],
10044120:	230c      	movs	r3, #12
10044122:	18fa      	adds	r2, r7, r3
10044124:	4b81      	ldr	r3, [pc, #516]	@ (1004432c <DW1000_responder+0x570>)
10044126:	0011      	movs	r1, r2
10044128:	0018      	movs	r0, r3
1004412a:	f7ff fe13 	bl	10043d54 <final_msg_get_ts>
							&resp_rx_ts);
					final_msg_get_ts(&rx_buffer[FINAL_MSG_FINAL_TX_TS_IDX],
1004412e:	2308      	movs	r3, #8
10044130:	18fa      	adds	r2, r7, r3
10044132:	4b7f      	ldr	r3, [pc, #508]	@ (10044330 <DW1000_responder+0x574>)
10044134:	0011      	movs	r1, r2
10044136:	0018      	movs	r0, r3
10044138:	f7ff fe0c 	bl	10043d54 <final_msg_get_ts>
							&final_tx_ts);

					/* Compute time of flight. 32-bit subtractions give correct answers even if clock has wrapped. See NOTE 12 below. */
					poll_rx_ts_32 = (uint32_t) poll_rx_ts;
1004413c:	4b7d      	ldr	r3, [pc, #500]	@ (10044334 <DW1000_responder+0x578>)
1004413e:	681a      	ldr	r2, [r3, #0]
10044140:	685b      	ldr	r3, [r3, #4]
10044142:	0013      	movs	r3, r2
10044144:	65fb      	str	r3, [r7, #92]	@ 0x5c
					resp_tx_ts_32 = (uint32_t) resp_tx_ts;
10044146:	4b76      	ldr	r3, [pc, #472]	@ (10044320 <DW1000_responder+0x564>)
10044148:	681a      	ldr	r2, [r3, #0]
1004414a:	685b      	ldr	r3, [r3, #4]
1004414c:	0013      	movs	r3, r2
1004414e:	65bb      	str	r3, [r7, #88]	@ 0x58
					final_rx_ts_32 = (uint32_t) final_rx_ts;
10044150:	4b74      	ldr	r3, [pc, #464]	@ (10044324 <DW1000_responder+0x568>)
10044152:	681a      	ldr	r2, [r3, #0]
10044154:	685b      	ldr	r3, [r3, #4]
10044156:	0013      	movs	r3, r2
10044158:	657b      	str	r3, [r7, #84]	@ 0x54
					Ra = (double) (resp_rx_ts - poll_tx_ts);
1004415a:	68fa      	ldr	r2, [r7, #12]
1004415c:	693b      	ldr	r3, [r7, #16]
1004415e:	1ad3      	subs	r3, r2, r3
10044160:	0018      	movs	r0, r3
10044162:	f7fe f821 	bl	100421a8 <__aeabi_ui2d>
10044166:	0002      	movs	r2, r0
10044168:	000b      	movs	r3, r1
1004416a:	64ba      	str	r2, [r7, #72]	@ 0x48
1004416c:	64fb      	str	r3, [r7, #76]	@ 0x4c
					Rb = (double) (final_rx_ts_32 - resp_tx_ts_32);
1004416e:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
10044170:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
10044172:	1ad3      	subs	r3, r2, r3
10044174:	0018      	movs	r0, r3
10044176:	f7fe f817 	bl	100421a8 <__aeabi_ui2d>
1004417a:	0002      	movs	r2, r0
1004417c:	000b      	movs	r3, r1
1004417e:	643a      	str	r2, [r7, #64]	@ 0x40
10044180:	647b      	str	r3, [r7, #68]	@ 0x44
					Da = (double) (final_tx_ts - resp_rx_ts);
10044182:	68ba      	ldr	r2, [r7, #8]
10044184:	68fb      	ldr	r3, [r7, #12]
10044186:	1ad3      	subs	r3, r2, r3
10044188:	0018      	movs	r0, r3
1004418a:	f7fe f80d 	bl	100421a8 <__aeabi_ui2d>
1004418e:	0002      	movs	r2, r0
10044190:	000b      	movs	r3, r1
10044192:	63ba      	str	r2, [r7, #56]	@ 0x38
10044194:	63fb      	str	r3, [r7, #60]	@ 0x3c
					Db = (double) (resp_tx_ts_32 - poll_rx_ts_32);
10044196:	6dba      	ldr	r2, [r7, #88]	@ 0x58
10044198:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
1004419a:	1ad3      	subs	r3, r2, r3
1004419c:	0018      	movs	r0, r3
1004419e:	f7fe f803 	bl	100421a8 <__aeabi_ui2d>
100441a2:	0002      	movs	r2, r0
100441a4:	000b      	movs	r3, r1
100441a6:	633a      	str	r2, [r7, #48]	@ 0x30
100441a8:	637b      	str	r3, [r7, #52]	@ 0x34
					tof_dtu = (int64_t) ((Ra * Rb - Da * Db)
100441aa:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
100441ac:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
100441ae:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
100441b0:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
100441b2:	f7fd f92b 	bl	1004140c <__aeabi_dmul>
100441b6:	0002      	movs	r2, r0
100441b8:	000b      	movs	r3, r1
100441ba:	0014      	movs	r4, r2
100441bc:	001d      	movs	r5, r3
100441be:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
100441c0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
100441c2:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
100441c4:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
100441c6:	f7fd f921 	bl	1004140c <__aeabi_dmul>
100441ca:	0002      	movs	r2, r0
100441cc:	000b      	movs	r3, r1
100441ce:	0020      	movs	r0, r4
100441d0:	0029      	movs	r1, r5
100441d2:	f7fd fbe3 	bl	1004199c <__aeabi_dsub>
100441d6:	0002      	movs	r2, r0
100441d8:	000b      	movs	r3, r1
100441da:	0014      	movs	r4, r2
100441dc:	001d      	movs	r5, r3
							/ (Ra + Rb + Da + Db));
100441de:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
100441e0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
100441e2:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
100441e4:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
100441e6:	f7fc fa93 	bl	10040710 <__aeabi_dadd>
100441ea:	0002      	movs	r2, r0
100441ec:	000b      	movs	r3, r1
100441ee:	0010      	movs	r0, r2
100441f0:	0019      	movs	r1, r3
100441f2:	6bba      	ldr	r2, [r7, #56]	@ 0x38
100441f4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
100441f6:	f7fc fa8b 	bl	10040710 <__aeabi_dadd>
100441fa:	0002      	movs	r2, r0
100441fc:	000b      	movs	r3, r1
100441fe:	0010      	movs	r0, r2
10044200:	0019      	movs	r1, r3
10044202:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
10044204:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
10044206:	f7fc fa83 	bl	10040710 <__aeabi_dadd>
1004420a:	0002      	movs	r2, r0
1004420c:	000b      	movs	r3, r1
1004420e:	0020      	movs	r0, r4
10044210:	0029      	movs	r1, r5
10044212:	f7fc fde1 	bl	10040dd8 <__aeabi_ddiv>
10044216:	0002      	movs	r2, r0
10044218:	000b      	movs	r3, r1
					tof_dtu = (int64_t) ((Ra * Rb - Da * Db)
1004421a:	0010      	movs	r0, r2
1004421c:	0019      	movs	r1, r3
1004421e:	f7fc f95b 	bl	100404d8 <__aeabi_d2lz>
10044222:	0002      	movs	r2, r0
10044224:	000b      	movs	r3, r1
10044226:	62ba      	str	r2, [r7, #40]	@ 0x28
10044228:	62fb      	str	r3, [r7, #44]	@ 0x2c
					tof = tof_dtu * DWT_TIME_UNITS;
1004422a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
1004422c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
1004422e:	f7fc f98d 	bl	1004054c <__aeabi_l2d>
10044232:	4a41      	ldr	r2, [pc, #260]	@ (10044338 <DW1000_responder+0x57c>)
10044234:	4b41      	ldr	r3, [pc, #260]	@ (1004433c <DW1000_responder+0x580>)
10044236:	f7fd f8e9 	bl	1004140c <__aeabi_dmul>
1004423a:	0002      	movs	r2, r0
1004423c:	000b      	movs	r3, r1
1004423e:	4940      	ldr	r1, [pc, #256]	@ (10044340 <DW1000_responder+0x584>)
10044240:	600a      	str	r2, [r1, #0]
10044242:	604b      	str	r3, [r1, #4]
					distance = tof * SPEED_OF_LIGHT;
10044244:	4b3e      	ldr	r3, [pc, #248]	@ (10044340 <DW1000_responder+0x584>)
10044246:	6818      	ldr	r0, [r3, #0]
10044248:	6859      	ldr	r1, [r3, #4]
1004424a:	2298      	movs	r2, #152	@ 0x98
1004424c:	0552      	lsls	r2, r2, #21
1004424e:	4b3d      	ldr	r3, [pc, #244]	@ (10044344 <DW1000_responder+0x588>)
10044250:	f7fd f8dc 	bl	1004140c <__aeabi_dmul>
10044254:	0002      	movs	r2, r0
10044256:	000b      	movs	r3, r1
10044258:	493b      	ldr	r1, [pc, #236]	@ (10044348 <DW1000_responder+0x58c>)
1004425a:	600a      	str	r2, [r1, #0]
1004425c:	604b      	str	r3, [r1, #4]
					distance -= 137.34302980478139;
1004425e:	4b3a      	ldr	r3, [pc, #232]	@ (10044348 <DW1000_responder+0x58c>)
10044260:	6818      	ldr	r0, [r3, #0]
10044262:	6859      	ldr	r1, [r3, #4]
10044264:	4a39      	ldr	r2, [pc, #228]	@ (1004434c <DW1000_responder+0x590>)
10044266:	4b3a      	ldr	r3, [pc, #232]	@ (10044350 <DW1000_responder+0x594>)
10044268:	f7fd fb98 	bl	1004199c <__aeabi_dsub>
1004426c:	0002      	movs	r2, r0
1004426e:	000b      	movs	r3, r1
10044270:	4935      	ldr	r1, [pc, #212]	@ (10044348 <DW1000_responder+0x58c>)
10044272:	600a      	str	r2, [r1, #0]
10044274:	604b      	str	r3, [r1, #4]
					return distance;
10044276:	4b34      	ldr	r3, [pc, #208]	@ (10044348 <DW1000_responder+0x58c>)
10044278:	681a      	ldr	r2, [r3, #0]
1004427a:	685b      	ldr	r3, [r3, #4]
1004427c:	e041      	b.n	10044302 <DW1000_responder+0x546>
				}
			} else {
				/* Clear RX error/timeout events in the DW1000 status register. */
				tmp = SYS_STATUS_ALL_RX_TO | SYS_STATUS_ALL_RX_ERR;
1004427e:	4b35      	ldr	r3, [pc, #212]	@ (10044354 <DW1000_responder+0x598>)
10044280:	627b      	str	r3, [r7, #36]	@ 0x24
				DW1000_write_reg(dw1000, SYS_STATUS_ID, 0x00, (void*) &tmp, 4);
10044282:	2424      	movs	r4, #36	@ 0x24
10044284:	193b      	adds	r3, r7, r4
10044286:	6878      	ldr	r0, [r7, #4]
10044288:	2204      	movs	r2, #4
1004428a:	9200      	str	r2, [sp, #0]
1004428c:	2200      	movs	r2, #0
1004428e:	210f      	movs	r1, #15
10044290:	f7ff f8fc 	bl	1004348c <DW1000_write_reg>
				/* Reset RX to properly reinitialise LDE operation. */
				tmp = PMSC_CTRL0_RESET_RX;
10044294:	23e0      	movs	r3, #224	@ 0xe0
10044296:	627b      	str	r3, [r7, #36]	@ 0x24
				DW1000_write_reg(dw1000, PMSC_ID, PMSC_CTRL0_SOFTRESET_OFFSET,
10044298:	193b      	adds	r3, r7, r4
1004429a:	6878      	ldr	r0, [r7, #4]
1004429c:	2201      	movs	r2, #1
1004429e:	9200      	str	r2, [sp, #0]
100442a0:	2203      	movs	r2, #3
100442a2:	2136      	movs	r1, #54	@ 0x36
100442a4:	f7ff f8f2 	bl	1004348c <DW1000_write_reg>
						(void*) &tmp, 1);
				// Clear RX reset
				tmp = PMSC_CTRL0_RESET_CLEAR;
100442a8:	23f0      	movs	r3, #240	@ 0xf0
100442aa:	627b      	str	r3, [r7, #36]	@ 0x24
				DW1000_write_reg(dw1000, PMSC_ID, PMSC_CTRL0_SOFTRESET_OFFSET,
100442ac:	193b      	adds	r3, r7, r4
100442ae:	6878      	ldr	r0, [r7, #4]
100442b0:	2201      	movs	r2, #1
100442b2:	9200      	str	r2, [sp, #0]
100442b4:	2203      	movs	r2, #3
100442b6:	2136      	movs	r1, #54	@ 0x36
100442b8:	f7ff f8e8 	bl	1004348c <DW1000_write_reg>
100442bc:	e01f      	b.n	100442fe <DW1000_responder+0x542>
						(void*) &tmp, 1);
			}
		}
	} else {
		TXError:
100442be:	46c0      	nop			@ (mov r8, r8)
		/* Clear RX error/timeout events in the DW1000 status register. */
		tmp = SYS_STATUS_ALL_RX_TO | SYS_STATUS_ALL_RX_ERR;
100442c0:	4b24      	ldr	r3, [pc, #144]	@ (10044354 <DW1000_responder+0x598>)
100442c2:	627b      	str	r3, [r7, #36]	@ 0x24
		DW1000_write_reg(dw1000, SYS_STATUS_ID, 0x00, (void*) &tmp, 4);
100442c4:	2424      	movs	r4, #36	@ 0x24
100442c6:	193b      	adds	r3, r7, r4
100442c8:	6878      	ldr	r0, [r7, #4]
100442ca:	2204      	movs	r2, #4
100442cc:	9200      	str	r2, [sp, #0]
100442ce:	2200      	movs	r2, #0
100442d0:	210f      	movs	r1, #15
100442d2:	f7ff f8db 	bl	1004348c <DW1000_write_reg>
		/* Reset RX to properly reinitialise LDE operation. */
		tmp = PMSC_CTRL0_RESET_RX;
100442d6:	23e0      	movs	r3, #224	@ 0xe0
100442d8:	627b      	str	r3, [r7, #36]	@ 0x24
		DW1000_write_reg(dw1000, PMSC_ID, PMSC_CTRL0_SOFTRESET_OFFSET,
100442da:	193b      	adds	r3, r7, r4
100442dc:	6878      	ldr	r0, [r7, #4]
100442de:	2201      	movs	r2, #1
100442e0:	9200      	str	r2, [sp, #0]
100442e2:	2203      	movs	r2, #3
100442e4:	2136      	movs	r1, #54	@ 0x36
100442e6:	f7ff f8d1 	bl	1004348c <DW1000_write_reg>
				(void*) &tmp, 1);
		// Clear RX reset
		tmp = PMSC_CTRL0_RESET_CLEAR;
100442ea:	23f0      	movs	r3, #240	@ 0xf0
100442ec:	627b      	str	r3, [r7, #36]	@ 0x24
		DW1000_write_reg(dw1000, PMSC_ID, PMSC_CTRL0_SOFTRESET_OFFSET,
100442ee:	193b      	adds	r3, r7, r4
100442f0:	6878      	ldr	r0, [r7, #4]
100442f2:	2201      	movs	r2, #1
100442f4:	9200      	str	r2, [sp, #0]
100442f6:	2203      	movs	r2, #3
100442f8:	2136      	movs	r1, #54	@ 0x36
100442fa:	f7ff f8c7 	bl	1004348c <DW1000_write_reg>
				(void*) &tmp, 1);

	}
	return 0;
100442fe:	2200      	movs	r2, #0
10044300:	2300      	movs	r3, #0
}
10044302:	0010      	movs	r0, r2
10044304:	0019      	movs	r1, r3
10044306:	46bd      	mov	sp, r7
10044308:	b019      	add	sp, #100	@ 0x64
1004430a:	bdf0      	pop	{r4, r5, r6, r7, pc}
1004430c:	20000484 	.word	0x20000484
10044310:	2427d000 	.word	0x2427d000
10044314:	200004d0 	.word	0x200004d0
10044318:	20000498 	.word	0x20000498
1004431c:	2000067c 	.word	0x2000067c
10044320:	200004c0 	.word	0x200004c0
10044324:	200004c8 	.word	0x200004c8
10044328:	200004a2 	.word	0x200004a2
1004432c:	200004a6 	.word	0x200004a6
10044330:	200004aa 	.word	0x200004aa
10044334:	200004b8 	.word	0x200004b8
10044338:	3bce48fa 	.word	0x3bce48fa
1004433c:	3db13518 	.word	0x3db13518
10044340:	20000488 	.word	0x20000488
10044344:	41b1dd19 	.word	0x41b1dd19
10044348:	20000490 	.word	0x20000490
1004434c:	19a422dc 	.word	0x19a422dc
10044350:	40612afa 	.word	0x40612afa
10044354:	24279000 	.word	0x24279000

10044358 <SPI_write8>:


/*!<
 * usage
 * */
uint32_t SPI_write8(SPI_HandleTypeDef* spi, const uint8_t* buffer, uint32_t size, uint32_t timeout) {
10044358:	b5f0      	push	{r4, r5, r6, r7, lr}
1004435a:	b08f      	sub	sp, #60	@ 0x3c
1004435c:	af00      	add	r7, sp, #0
1004435e:	6278      	str	r0, [r7, #36]	@ 0x24
10044360:	6239      	str	r1, [r7, #32]
10044362:	61fa      	str	r2, [r7, #28]
10044364:	61bb      	str	r3, [r7, #24]
	spi->Instance->CR1 |= 0x00000040UL;
10044366:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10044368:	681b      	ldr	r3, [r3, #0]
1004436a:	681a      	ldr	r2, [r3, #0]
1004436c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
1004436e:	681b      	ldr	r3, [r3, #0]
10044370:	2140      	movs	r1, #64	@ 0x40
10044372:	430a      	orrs	r2, r1
10044374:	601a      	str	r2, [r3, #0]
	uint64_t start = uwTick;
10044376:	4b35      	ldr	r3, [pc, #212]	@ (1004444c <SPI_write8+0xf4>)
10044378:	681b      	ldr	r3, [r3, #0]
1004437a:	62bb      	str	r3, [r7, #40]	@ 0x28
1004437c:	2300      	movs	r3, #0
1004437e:	62fb      	str	r3, [r7, #44]	@ 0x2c
	uint32_t i = 0;
10044380:	2300      	movs	r3, #0
10044382:	637b      	str	r3, [r7, #52]	@ 0x34
	for (; i < size; i++) {
10044384:	e02c      	b.n	100443e0 <SPI_write8+0x88>
		while (!(spi->Instance->SR & 0x00000002UL))	{ if ( uwTick - start > timeout) { goto SPI_master_write8_end; } }
10044386:	4b31      	ldr	r3, [pc, #196]	@ (1004444c <SPI_write8+0xf4>)
10044388:	681b      	ldr	r3, [r3, #0]
1004438a:	613b      	str	r3, [r7, #16]
1004438c:	2300      	movs	r3, #0
1004438e:	617b      	str	r3, [r7, #20]
10044390:	6aba      	ldr	r2, [r7, #40]	@ 0x28
10044392:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
10044394:	6938      	ldr	r0, [r7, #16]
10044396:	6979      	ldr	r1, [r7, #20]
10044398:	1a80      	subs	r0, r0, r2
1004439a:	4199      	sbcs	r1, r3
1004439c:	0002      	movs	r2, r0
1004439e:	000b      	movs	r3, r1
100443a0:	69b9      	ldr	r1, [r7, #24]
100443a2:	60b9      	str	r1, [r7, #8]
100443a4:	2100      	movs	r1, #0
100443a6:	60f9      	str	r1, [r7, #12]
100443a8:	68b8      	ldr	r0, [r7, #8]
100443aa:	68f9      	ldr	r1, [r7, #12]
100443ac:	000e      	movs	r6, r1
100443ae:	42b3      	cmp	r3, r6
100443b0:	d83b      	bhi.n	1004442a <SPI_write8+0xd2>
100443b2:	000e      	movs	r6, r1
100443b4:	42b3      	cmp	r3, r6
100443b6:	d102      	bne.n	100443be <SPI_write8+0x66>
100443b8:	0001      	movs	r1, r0
100443ba:	428a      	cmp	r2, r1
100443bc:	d835      	bhi.n	1004442a <SPI_write8+0xd2>
100443be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
100443c0:	681b      	ldr	r3, [r3, #0]
100443c2:	689b      	ldr	r3, [r3, #8]
100443c4:	2202      	movs	r2, #2
100443c6:	4013      	ands	r3, r2
100443c8:	d0dd      	beq.n	10044386 <SPI_write8+0x2e>
		*((volatile uint8_t*)&spi->Instance->DR) = buffer[i];
100443ca:	6a3a      	ldr	r2, [r7, #32]
100443cc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
100443ce:	18d2      	adds	r2, r2, r3
100443d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
100443d2:	681b      	ldr	r3, [r3, #0]
100443d4:	330c      	adds	r3, #12
100443d6:	7812      	ldrb	r2, [r2, #0]
100443d8:	701a      	strb	r2, [r3, #0]
	for (; i < size; i++) {
100443da:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
100443dc:	3301      	adds	r3, #1
100443de:	637b      	str	r3, [r7, #52]	@ 0x34
100443e0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
100443e2:	69fb      	ldr	r3, [r7, #28]
100443e4:	429a      	cmp	r2, r3
100443e6:	d3ea      	bcc.n	100443be <SPI_write8+0x66>
	}
	while (spi->Instance->SR & 0x00000080UL)			{ if ( uwTick - start > timeout) { goto SPI_master_write8_end; } }
100443e8:	e015      	b.n	10044416 <SPI_write8+0xbe>
100443ea:	4b18      	ldr	r3, [pc, #96]	@ (1004444c <SPI_write8+0xf4>)
100443ec:	681b      	ldr	r3, [r3, #0]
100443ee:	603b      	str	r3, [r7, #0]
100443f0:	2300      	movs	r3, #0
100443f2:	607b      	str	r3, [r7, #4]
100443f4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
100443f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
100443f8:	6838      	ldr	r0, [r7, #0]
100443fa:	6879      	ldr	r1, [r7, #4]
100443fc:	1a80      	subs	r0, r0, r2
100443fe:	4199      	sbcs	r1, r3
10044400:	0002      	movs	r2, r0
10044402:	000b      	movs	r3, r1
10044404:	69b9      	ldr	r1, [r7, #24]
10044406:	000c      	movs	r4, r1
10044408:	2100      	movs	r1, #0
1004440a:	000d      	movs	r5, r1
1004440c:	42ab      	cmp	r3, r5
1004440e:	d80e      	bhi.n	1004442e <SPI_write8+0xd6>
10044410:	d101      	bne.n	10044416 <SPI_write8+0xbe>
10044412:	42a2      	cmp	r2, r4
10044414:	d80b      	bhi.n	1004442e <SPI_write8+0xd6>
10044416:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10044418:	681b      	ldr	r3, [r3, #0]
1004441a:	689b      	ldr	r3, [r3, #8]
1004441c:	2280      	movs	r2, #128	@ 0x80
1004441e:	4013      	ands	r3, r2
10044420:	d1e3      	bne.n	100443ea <SPI_write8+0x92>
	i++; SPI_master_write8_end:
10044422:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
10044424:	3301      	adds	r3, #1
10044426:	637b      	str	r3, [r7, #52]	@ 0x34
10044428:	e002      	b.n	10044430 <SPI_write8+0xd8>
		while (!(spi->Instance->SR & 0x00000002UL))	{ if ( uwTick - start > timeout) { goto SPI_master_write8_end; } }
1004442a:	46c0      	nop			@ (mov r8, r8)
1004442c:	e000      	b.n	10044430 <SPI_write8+0xd8>
	while (spi->Instance->SR & 0x00000080UL)			{ if ( uwTick - start > timeout) { goto SPI_master_write8_end; } }
1004442e:	46c0      	nop			@ (mov r8, r8)
	spi->Instance->CR1 &= ~0x00000040UL;
10044430:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10044432:	681b      	ldr	r3, [r3, #0]
10044434:	681a      	ldr	r2, [r3, #0]
10044436:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10044438:	681b      	ldr	r3, [r3, #0]
1004443a:	2140      	movs	r1, #64	@ 0x40
1004443c:	438a      	bics	r2, r1
1004443e:	601a      	str	r2, [r3, #0]
	return i;
10044440:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
10044442:	0018      	movs	r0, r3
10044444:	46bd      	mov	sp, r7
10044446:	b00f      	add	sp, #60	@ 0x3c
10044448:	bdf0      	pop	{r4, r5, r6, r7, pc}
1004444a:	46c0      	nop			@ (mov r8, r8)
1004444c:	200004d4 	.word	0x200004d4

10044450 <SPI_read8>:

uint32_t SPI_read8(SPI_HandleTypeDef* spi, uint8_t* buffer, uint32_t size, uint32_t timeout) {
10044450:	b5f0      	push	{r4, r5, r6, r7, lr}
10044452:	b093      	sub	sp, #76	@ 0x4c
10044454:	af00      	add	r7, sp, #0
10044456:	6378      	str	r0, [r7, #52]	@ 0x34
10044458:	6339      	str	r1, [r7, #48]	@ 0x30
1004445a:	62fa      	str	r2, [r7, #44]	@ 0x2c
1004445c:	62bb      	str	r3, [r7, #40]	@ 0x28
	spi->Instance->CR1 |= 0x00000040UL;
1004445e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
10044460:	681b      	ldr	r3, [r3, #0]
10044462:	6819      	ldr	r1, [r3, #0]
10044464:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
10044466:	681a      	ldr	r2, [r3, #0]
10044468:	2340      	movs	r3, #64	@ 0x40
1004446a:	430b      	orrs	r3, r1
1004446c:	6013      	str	r3, [r2, #0]
	uint64_t start = uwTick;
1004446e:	4b50      	ldr	r3, [pc, #320]	@ (100445b0 <SPI_read8+0x160>)
10044470:	681b      	ldr	r3, [r3, #0]
10044472:	63bb      	str	r3, [r7, #56]	@ 0x38
10044474:	2300      	movs	r3, #0
10044476:	63fb      	str	r3, [r7, #60]	@ 0x3c
	uint32_t i = 0;
10044478:	2300      	movs	r3, #0
1004447a:	647b      	str	r3, [r7, #68]	@ 0x44

	while (spi->Instance->SR & 0x00000001UL) {
1004447c:	e002      	b.n	10044484 <SPI_read8+0x34>
		(void)(volatile uint8_t)spi->Instance->DR;  // flush buffer
1004447e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
10044480:	681b      	ldr	r3, [r3, #0]
10044482:	68db      	ldr	r3, [r3, #12]
	while (spi->Instance->SR & 0x00000001UL) {
10044484:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
10044486:	681b      	ldr	r3, [r3, #0]
10044488:	689a      	ldr	r2, [r3, #8]
1004448a:	2301      	movs	r3, #1
1004448c:	4013      	ands	r3, r2
1004448e:	d1f6      	bne.n	1004447e <SPI_read8+0x2e>
	}

	for (; i < size; i++) {
10044490:	e056      	b.n	10044540 <SPI_read8+0xf0>
		while (!(spi->Instance->SR & 0x00000002UL))	{ if ( uwTick - start > timeout) { goto SPI_master_read8_end; } }
10044492:	4b47      	ldr	r3, [pc, #284]	@ (100445b0 <SPI_read8+0x160>)
10044494:	681b      	ldr	r3, [r3, #0]
10044496:	623b      	str	r3, [r7, #32]
10044498:	2300      	movs	r3, #0
1004449a:	627b      	str	r3, [r7, #36]	@ 0x24
1004449c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
1004449e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
100444a0:	6a38      	ldr	r0, [r7, #32]
100444a2:	6a79      	ldr	r1, [r7, #36]	@ 0x24
100444a4:	1a80      	subs	r0, r0, r2
100444a6:	4199      	sbcs	r1, r3
100444a8:	0002      	movs	r2, r0
100444aa:	000b      	movs	r3, r1
100444ac:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
100444ae:	61b9      	str	r1, [r7, #24]
100444b0:	2100      	movs	r1, #0
100444b2:	61f9      	str	r1, [r7, #28]
100444b4:	69b8      	ldr	r0, [r7, #24]
100444b6:	69f9      	ldr	r1, [r7, #28]
100444b8:	000e      	movs	r6, r1
100444ba:	42b3      	cmp	r3, r6
100444bc:	d900      	bls.n	100444c0 <SPI_read8+0x70>
100444be:	e064      	b.n	1004458a <SPI_read8+0x13a>
100444c0:	000e      	movs	r6, r1
100444c2:	42b3      	cmp	r3, r6
100444c4:	d102      	bne.n	100444cc <SPI_read8+0x7c>
100444c6:	0001      	movs	r1, r0
100444c8:	428a      	cmp	r2, r1
100444ca:	d85e      	bhi.n	1004458a <SPI_read8+0x13a>
100444cc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
100444ce:	681b      	ldr	r3, [r3, #0]
100444d0:	689a      	ldr	r2, [r3, #8]
100444d2:	2302      	movs	r3, #2
100444d4:	4013      	ands	r3, r2
100444d6:	d0dc      	beq.n	10044492 <SPI_read8+0x42>
		*((volatile uint8_t*)&spi->Instance->DR) = 0;
100444d8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
100444da:	681b      	ldr	r3, [r3, #0]
100444dc:	330c      	adds	r3, #12
100444de:	001a      	movs	r2, r3
100444e0:	2300      	movs	r3, #0
100444e2:	7013      	strb	r3, [r2, #0]
		while (!(spi->Instance->SR & 0x00000001UL))	{ if ( uwTick - start > timeout) { goto SPI_master_read8_end; } }
100444e4:	e01b      	b.n	1004451e <SPI_read8+0xce>
100444e6:	4b32      	ldr	r3, [pc, #200]	@ (100445b0 <SPI_read8+0x160>)
100444e8:	681b      	ldr	r3, [r3, #0]
100444ea:	613b      	str	r3, [r7, #16]
100444ec:	2300      	movs	r3, #0
100444ee:	617b      	str	r3, [r7, #20]
100444f0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
100444f2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
100444f4:	6938      	ldr	r0, [r7, #16]
100444f6:	6979      	ldr	r1, [r7, #20]
100444f8:	1a80      	subs	r0, r0, r2
100444fa:	4199      	sbcs	r1, r3
100444fc:	0002      	movs	r2, r0
100444fe:	000b      	movs	r3, r1
10044500:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
10044502:	60b9      	str	r1, [r7, #8]
10044504:	2100      	movs	r1, #0
10044506:	60f9      	str	r1, [r7, #12]
10044508:	68b8      	ldr	r0, [r7, #8]
1004450a:	68f9      	ldr	r1, [r7, #12]
1004450c:	000e      	movs	r6, r1
1004450e:	42b3      	cmp	r3, r6
10044510:	d83d      	bhi.n	1004458e <SPI_read8+0x13e>
10044512:	000e      	movs	r6, r1
10044514:	42b3      	cmp	r3, r6
10044516:	d102      	bne.n	1004451e <SPI_read8+0xce>
10044518:	0001      	movs	r1, r0
1004451a:	428a      	cmp	r2, r1
1004451c:	d837      	bhi.n	1004458e <SPI_read8+0x13e>
1004451e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
10044520:	681b      	ldr	r3, [r3, #0]
10044522:	689a      	ldr	r2, [r3, #8]
10044524:	2301      	movs	r3, #1
10044526:	4013      	ands	r3, r2
10044528:	d0dd      	beq.n	100444e6 <SPI_read8+0x96>
		buffer[i] = (volatile uint8_t)spi->Instance->DR;
1004452a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
1004452c:	681b      	ldr	r3, [r3, #0]
1004452e:	68d9      	ldr	r1, [r3, #12]
10044530:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
10044532:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
10044534:	18d2      	adds	r2, r2, r3
10044536:	b2cb      	uxtb	r3, r1
10044538:	7013      	strb	r3, [r2, #0]
	for (; i < size; i++) {
1004453a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
1004453c:	3301      	adds	r3, #1
1004453e:	647b      	str	r3, [r7, #68]	@ 0x44
10044540:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
10044542:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
10044544:	429a      	cmp	r2, r3
10044546:	d3c1      	bcc.n	100444cc <SPI_read8+0x7c>
	}
	while (spi->Instance->SR & 0x00000080UL)			{ if ( uwTick - start > timeout) { goto SPI_master_read8_end; } }
10044548:	e015      	b.n	10044576 <SPI_read8+0x126>
1004454a:	4b19      	ldr	r3, [pc, #100]	@ (100445b0 <SPI_read8+0x160>)
1004454c:	681b      	ldr	r3, [r3, #0]
1004454e:	603b      	str	r3, [r7, #0]
10044550:	2300      	movs	r3, #0
10044552:	607b      	str	r3, [r7, #4]
10044554:	6bba      	ldr	r2, [r7, #56]	@ 0x38
10044556:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
10044558:	6838      	ldr	r0, [r7, #0]
1004455a:	6879      	ldr	r1, [r7, #4]
1004455c:	1a80      	subs	r0, r0, r2
1004455e:	4199      	sbcs	r1, r3
10044560:	0002      	movs	r2, r0
10044562:	000b      	movs	r3, r1
10044564:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
10044566:	000c      	movs	r4, r1
10044568:	2100      	movs	r1, #0
1004456a:	000d      	movs	r5, r1
1004456c:	42ab      	cmp	r3, r5
1004456e:	d810      	bhi.n	10044592 <SPI_read8+0x142>
10044570:	d101      	bne.n	10044576 <SPI_read8+0x126>
10044572:	42a2      	cmp	r2, r4
10044574:	d80d      	bhi.n	10044592 <SPI_read8+0x142>
10044576:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
10044578:	681b      	ldr	r3, [r3, #0]
1004457a:	689b      	ldr	r3, [r3, #8]
1004457c:	2280      	movs	r2, #128	@ 0x80
1004457e:	4013      	ands	r3, r2
10044580:	d1e3      	bne.n	1004454a <SPI_read8+0xfa>
	i++; SPI_master_read8_end:
10044582:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
10044584:	3301      	adds	r3, #1
10044586:	647b      	str	r3, [r7, #68]	@ 0x44
10044588:	e004      	b.n	10044594 <SPI_read8+0x144>
		while (!(spi->Instance->SR & 0x00000002UL))	{ if ( uwTick - start > timeout) { goto SPI_master_read8_end; } }
1004458a:	46c0      	nop			@ (mov r8, r8)
1004458c:	e002      	b.n	10044594 <SPI_read8+0x144>
		while (!(spi->Instance->SR & 0x00000001UL))	{ if ( uwTick - start > timeout) { goto SPI_master_read8_end; } }
1004458e:	46c0      	nop			@ (mov r8, r8)
10044590:	e000      	b.n	10044594 <SPI_read8+0x144>
	while (spi->Instance->SR & 0x00000080UL)			{ if ( uwTick - start > timeout) { goto SPI_master_read8_end; } }
10044592:	46c0      	nop			@ (mov r8, r8)
	spi->Instance->CR1 &= ~0x00000040UL;
10044594:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
10044596:	681b      	ldr	r3, [r3, #0]
10044598:	681a      	ldr	r2, [r3, #0]
1004459a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
1004459c:	681b      	ldr	r3, [r3, #0]
1004459e:	2140      	movs	r1, #64	@ 0x40
100445a0:	438a      	bics	r2, r1
100445a2:	601a      	str	r2, [r3, #0]
	return i;
100445a4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
}
100445a6:	0018      	movs	r0, r3
100445a8:	46bd      	mov	sp, r7
100445aa:	b013      	add	sp, #76	@ 0x4c
100445ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
100445ae:	46c0      	nop			@ (mov r8, r8)
100445b0:	200004d4 	.word	0x200004d4

100445b4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
100445b4:	b580      	push	{r7, lr}
100445b6:	b082      	sub	sp, #8
100445b8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
100445ba:	1dfb      	adds	r3, r7, #7
100445bc:	2200      	movs	r2, #0
100445be:	701a      	strb	r2, [r3, #0]

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
100445c0:	2003      	movs	r0, #3
100445c2:	f000 f80f 	bl	100445e4 <HAL_InitTick>
100445c6:	1e03      	subs	r3, r0, #0
100445c8:	d003      	beq.n	100445d2 <HAL_Init+0x1e>
  {
    status = HAL_ERROR;
100445ca:	1dfb      	adds	r3, r7, #7
100445cc:	2201      	movs	r2, #1
100445ce:	701a      	strb	r2, [r3, #0]
100445d0:	e001      	b.n	100445d6 <HAL_Init+0x22>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
100445d2:	f7fe fc2d 	bl	10042e30 <HAL_MspInit>
  }

  /* Return function status */
  return status;
100445d6:	1dfb      	adds	r3, r7, #7
100445d8:	781b      	ldrb	r3, [r3, #0]
}
100445da:	0018      	movs	r0, r3
100445dc:	46bd      	mov	sp, r7
100445de:	b002      	add	sp, #8
100445e0:	bd80      	pop	{r7, pc}
	...

100445e4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
100445e4:	b590      	push	{r4, r7, lr}
100445e6:	b085      	sub	sp, #20
100445e8:	af00      	add	r7, sp, #0
100445ea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
100445ec:	230f      	movs	r3, #15
100445ee:	18fb      	adds	r3, r7, r3
100445f0:	2200      	movs	r2, #0
100445f2:	701a      	strb	r2, [r3, #0]

  if (uwTickFreq != 0U)
100445f4:	4b1d      	ldr	r3, [pc, #116]	@ (1004466c <HAL_InitTick+0x88>)
100445f6:	781b      	ldrb	r3, [r3, #0]
100445f8:	2b00      	cmp	r3, #0
100445fa:	d02c      	beq.n	10044656 <HAL_InitTick+0x72>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(HAL_RCC_GetSysClockFreq() / (1000U / uwTickFreq)) == 0U)
100445fc:	f003 ff7c 	bl	100484f8 <HAL_RCC_GetSysClockFreq>
10044600:	0004      	movs	r4, r0
10044602:	4b1a      	ldr	r3, [pc, #104]	@ (1004466c <HAL_InitTick+0x88>)
10044604:	781b      	ldrb	r3, [r3, #0]
10044606:	0019      	movs	r1, r3
10044608:	23fa      	movs	r3, #250	@ 0xfa
1004460a:	0098      	lsls	r0, r3, #2
1004460c:	f7fb fd82 	bl	10040114 <__udivsi3>
10044610:	0003      	movs	r3, r0
10044612:	0019      	movs	r1, r3
10044614:	0020      	movs	r0, r4
10044616:	f7fb fd7d 	bl	10040114 <__udivsi3>
1004461a:	0003      	movs	r3, r0
1004461c:	0018      	movs	r0, r3
1004461e:	f000 f944 	bl	100448aa <HAL_SYSTICK_Config>
10044622:	1e03      	subs	r3, r0, #0
10044624:	d112      	bne.n	1004464c <HAL_InitTick+0x68>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
10044626:	687b      	ldr	r3, [r7, #4]
10044628:	2b03      	cmp	r3, #3
1004462a:	d80a      	bhi.n	10044642 <HAL_InitTick+0x5e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0);
1004462c:	6879      	ldr	r1, [r7, #4]
1004462e:	2301      	movs	r3, #1
10044630:	425b      	negs	r3, r3
10044632:	2200      	movs	r2, #0
10044634:	0018      	movs	r0, r3
10044636:	f000 f913 	bl	10044860 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
1004463a:	4b0d      	ldr	r3, [pc, #52]	@ (10044670 <HAL_InitTick+0x8c>)
1004463c:	687a      	ldr	r2, [r7, #4]
1004463e:	601a      	str	r2, [r3, #0]
10044640:	e00d      	b.n	1004465e <HAL_InitTick+0x7a>
      }
      else
      {
        status = HAL_ERROR;
10044642:	230f      	movs	r3, #15
10044644:	18fb      	adds	r3, r7, r3
10044646:	2201      	movs	r2, #1
10044648:	701a      	strb	r2, [r3, #0]
1004464a:	e008      	b.n	1004465e <HAL_InitTick+0x7a>
      }
    }
    else
    {
      status = HAL_ERROR;
1004464c:	230f      	movs	r3, #15
1004464e:	18fb      	adds	r3, r7, r3
10044650:	2201      	movs	r2, #1
10044652:	701a      	strb	r2, [r3, #0]
10044654:	e003      	b.n	1004465e <HAL_InitTick+0x7a>
    }
  }
  else
  {
    status = HAL_ERROR;
10044656:	230f      	movs	r3, #15
10044658:	18fb      	adds	r3, r7, r3
1004465a:	2201      	movs	r2, #1
1004465c:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
1004465e:	230f      	movs	r3, #15
10044660:	18fb      	adds	r3, r7, r3
10044662:	781b      	ldrb	r3, [r3, #0]
}
10044664:	0018      	movs	r0, r3
10044666:	46bd      	mov	sp, r7
10044668:	b005      	add	sp, #20
1004466a:	bd90      	pop	{r4, r7, pc}
1004466c:	2000069c 	.word	0x2000069c
10044670:	20000698 	.word	0x20000698

10044674 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
10044674:	b580      	push	{r7, lr}
10044676:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
10044678:	4b05      	ldr	r3, [pc, #20]	@ (10044690 <HAL_IncTick+0x1c>)
1004467a:	781b      	ldrb	r3, [r3, #0]
1004467c:	001a      	movs	r2, r3
1004467e:	4b05      	ldr	r3, [pc, #20]	@ (10044694 <HAL_IncTick+0x20>)
10044680:	681b      	ldr	r3, [r3, #0]
10044682:	18d2      	adds	r2, r2, r3
10044684:	4b03      	ldr	r3, [pc, #12]	@ (10044694 <HAL_IncTick+0x20>)
10044686:	601a      	str	r2, [r3, #0]
}
10044688:	46c0      	nop			@ (mov r8, r8)
1004468a:	46bd      	mov	sp, r7
1004468c:	bd80      	pop	{r7, pc}
1004468e:	46c0      	nop			@ (mov r8, r8)
10044690:	2000069c 	.word	0x2000069c
10044694:	200004d4 	.word	0x200004d4

10044698 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
10044698:	b580      	push	{r7, lr}
1004469a:	af00      	add	r7, sp, #0
  return uwTick;
1004469c:	4b02      	ldr	r3, [pc, #8]	@ (100446a8 <HAL_GetTick+0x10>)
1004469e:	681b      	ldr	r3, [r3, #0]
}
100446a0:	0018      	movs	r0, r3
100446a2:	46bd      	mov	sp, r7
100446a4:	bd80      	pop	{r7, pc}
100446a6:	46c0      	nop			@ (mov r8, r8)
100446a8:	200004d4 	.word	0x200004d4

100446ac <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
100446ac:	b580      	push	{r7, lr}
100446ae:	af00      	add	r7, sp, #0
  return uwTickPrio;
100446b0:	4b02      	ldr	r3, [pc, #8]	@ (100446bc <HAL_GetTickPrio+0x10>)
100446b2:	681b      	ldr	r3, [r3, #0]
}
100446b4:	0018      	movs	r0, r3
100446b6:	46bd      	mov	sp, r7
100446b8:	bd80      	pop	{r7, pc}
100446ba:	46c0      	nop			@ (mov r8, r8)
100446bc:	20000698 	.word	0x20000698

100446c0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
100446c0:	b580      	push	{r7, lr}
100446c2:	b084      	sub	sp, #16
100446c4:	af00      	add	r7, sp, #0
100446c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
100446c8:	f7ff ffe6 	bl	10044698 <HAL_GetTick>
100446cc:	0003      	movs	r3, r0
100446ce:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
100446d0:	687b      	ldr	r3, [r7, #4]
100446d2:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
100446d4:	68fb      	ldr	r3, [r7, #12]
100446d6:	3301      	adds	r3, #1
100446d8:	d005      	beq.n	100446e6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
100446da:	4b0a      	ldr	r3, [pc, #40]	@ (10044704 <HAL_Delay+0x44>)
100446dc:	781b      	ldrb	r3, [r3, #0]
100446de:	001a      	movs	r2, r3
100446e0:	68fb      	ldr	r3, [r7, #12]
100446e2:	189b      	adds	r3, r3, r2
100446e4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
100446e6:	46c0      	nop			@ (mov r8, r8)
100446e8:	f7ff ffd6 	bl	10044698 <HAL_GetTick>
100446ec:	0002      	movs	r2, r0
100446ee:	68bb      	ldr	r3, [r7, #8]
100446f0:	1ad3      	subs	r3, r2, r3
100446f2:	68fa      	ldr	r2, [r7, #12]
100446f4:	429a      	cmp	r2, r3
100446f6:	d8f7      	bhi.n	100446e8 <HAL_Delay+0x28>
  {
  }
}
100446f8:	46c0      	nop			@ (mov r8, r8)
100446fa:	46c0      	nop			@ (mov r8, r8)
100446fc:	46bd      	mov	sp, r7
100446fe:	b004      	add	sp, #16
10044700:	bd80      	pop	{r7, pc}
10044702:	46c0      	nop			@ (mov r8, r8)
10044704:	2000069c 	.word	0x2000069c

10044708 <__NVIC_EnableIRQ>:
{
10044708:	b580      	push	{r7, lr}
1004470a:	b082      	sub	sp, #8
1004470c:	af00      	add	r7, sp, #0
1004470e:	0002      	movs	r2, r0
10044710:	1dfb      	adds	r3, r7, #7
10044712:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
10044714:	1dfb      	adds	r3, r7, #7
10044716:	781b      	ldrb	r3, [r3, #0]
10044718:	2b7f      	cmp	r3, #127	@ 0x7f
1004471a:	d809      	bhi.n	10044730 <__NVIC_EnableIRQ+0x28>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
1004471c:	1dfb      	adds	r3, r7, #7
1004471e:	781b      	ldrb	r3, [r3, #0]
10044720:	001a      	movs	r2, r3
10044722:	231f      	movs	r3, #31
10044724:	401a      	ands	r2, r3
10044726:	4b04      	ldr	r3, [pc, #16]	@ (10044738 <__NVIC_EnableIRQ+0x30>)
10044728:	2101      	movs	r1, #1
1004472a:	4091      	lsls	r1, r2
1004472c:	000a      	movs	r2, r1
1004472e:	601a      	str	r2, [r3, #0]
}
10044730:	46c0      	nop			@ (mov r8, r8)
10044732:	46bd      	mov	sp, r7
10044734:	b002      	add	sp, #8
10044736:	bd80      	pop	{r7, pc}
10044738:	e000e100 	.word	0xe000e100

1004473c <__NVIC_SetPriority>:
{
1004473c:	b590      	push	{r4, r7, lr}
1004473e:	b083      	sub	sp, #12
10044740:	af00      	add	r7, sp, #0
10044742:	0002      	movs	r2, r0
10044744:	6039      	str	r1, [r7, #0]
10044746:	1dfb      	adds	r3, r7, #7
10044748:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
1004474a:	1dfb      	adds	r3, r7, #7
1004474c:	781b      	ldrb	r3, [r3, #0]
1004474e:	2b7f      	cmp	r3, #127	@ 0x7f
10044750:	d828      	bhi.n	100447a4 <__NVIC_SetPriority+0x68>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
10044752:	4a2f      	ldr	r2, [pc, #188]	@ (10044810 <__NVIC_SetPriority+0xd4>)
10044754:	1dfb      	adds	r3, r7, #7
10044756:	781b      	ldrb	r3, [r3, #0]
10044758:	b25b      	sxtb	r3, r3
1004475a:	089b      	lsrs	r3, r3, #2
1004475c:	33c0      	adds	r3, #192	@ 0xc0
1004475e:	009b      	lsls	r3, r3, #2
10044760:	589b      	ldr	r3, [r3, r2]
10044762:	1dfa      	adds	r2, r7, #7
10044764:	7812      	ldrb	r2, [r2, #0]
10044766:	0011      	movs	r1, r2
10044768:	2203      	movs	r2, #3
1004476a:	400a      	ands	r2, r1
1004476c:	00d2      	lsls	r2, r2, #3
1004476e:	21ff      	movs	r1, #255	@ 0xff
10044770:	4091      	lsls	r1, r2
10044772:	000a      	movs	r2, r1
10044774:	43d2      	mvns	r2, r2
10044776:	401a      	ands	r2, r3
10044778:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
1004477a:	683b      	ldr	r3, [r7, #0]
1004477c:	019b      	lsls	r3, r3, #6
1004477e:	22ff      	movs	r2, #255	@ 0xff
10044780:	401a      	ands	r2, r3
10044782:	1dfb      	adds	r3, r7, #7
10044784:	781b      	ldrb	r3, [r3, #0]
10044786:	0018      	movs	r0, r3
10044788:	2303      	movs	r3, #3
1004478a:	4003      	ands	r3, r0
1004478c:	00db      	lsls	r3, r3, #3
1004478e:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
10044790:	481f      	ldr	r0, [pc, #124]	@ (10044810 <__NVIC_SetPriority+0xd4>)
10044792:	1dfb      	adds	r3, r7, #7
10044794:	781b      	ldrb	r3, [r3, #0]
10044796:	b25b      	sxtb	r3, r3
10044798:	089b      	lsrs	r3, r3, #2
1004479a:	430a      	orrs	r2, r1
1004479c:	33c0      	adds	r3, #192	@ 0xc0
1004479e:	009b      	lsls	r3, r3, #2
100447a0:	501a      	str	r2, [r3, r0]
}
100447a2:	e031      	b.n	10044808 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
100447a4:	4a1b      	ldr	r2, [pc, #108]	@ (10044814 <__NVIC_SetPriority+0xd8>)
100447a6:	1dfb      	adds	r3, r7, #7
100447a8:	781b      	ldrb	r3, [r3, #0]
100447aa:	0019      	movs	r1, r3
100447ac:	230f      	movs	r3, #15
100447ae:	400b      	ands	r3, r1
100447b0:	3b08      	subs	r3, #8
100447b2:	089b      	lsrs	r3, r3, #2
100447b4:	3306      	adds	r3, #6
100447b6:	009b      	lsls	r3, r3, #2
100447b8:	18d3      	adds	r3, r2, r3
100447ba:	3304      	adds	r3, #4
100447bc:	681b      	ldr	r3, [r3, #0]
100447be:	1dfa      	adds	r2, r7, #7
100447c0:	7812      	ldrb	r2, [r2, #0]
100447c2:	0011      	movs	r1, r2
100447c4:	2203      	movs	r2, #3
100447c6:	400a      	ands	r2, r1
100447c8:	00d2      	lsls	r2, r2, #3
100447ca:	21ff      	movs	r1, #255	@ 0xff
100447cc:	4091      	lsls	r1, r2
100447ce:	000a      	movs	r2, r1
100447d0:	43d2      	mvns	r2, r2
100447d2:	401a      	ands	r2, r3
100447d4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
100447d6:	683b      	ldr	r3, [r7, #0]
100447d8:	019b      	lsls	r3, r3, #6
100447da:	22ff      	movs	r2, #255	@ 0xff
100447dc:	401a      	ands	r2, r3
100447de:	1dfb      	adds	r3, r7, #7
100447e0:	781b      	ldrb	r3, [r3, #0]
100447e2:	0018      	movs	r0, r3
100447e4:	2303      	movs	r3, #3
100447e6:	4003      	ands	r3, r0
100447e8:	00db      	lsls	r3, r3, #3
100447ea:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
100447ec:	4809      	ldr	r0, [pc, #36]	@ (10044814 <__NVIC_SetPriority+0xd8>)
100447ee:	1dfb      	adds	r3, r7, #7
100447f0:	781b      	ldrb	r3, [r3, #0]
100447f2:	001c      	movs	r4, r3
100447f4:	230f      	movs	r3, #15
100447f6:	4023      	ands	r3, r4
100447f8:	3b08      	subs	r3, #8
100447fa:	089b      	lsrs	r3, r3, #2
100447fc:	430a      	orrs	r2, r1
100447fe:	3306      	adds	r3, #6
10044800:	009b      	lsls	r3, r3, #2
10044802:	18c3      	adds	r3, r0, r3
10044804:	3304      	adds	r3, #4
10044806:	601a      	str	r2, [r3, #0]
}
10044808:	46c0      	nop			@ (mov r8, r8)
1004480a:	46bd      	mov	sp, r7
1004480c:	b003      	add	sp, #12
1004480e:	bd90      	pop	{r4, r7, pc}
10044810:	e000e100 	.word	0xe000e100
10044814:	e000ed00 	.word	0xe000ed00

10044818 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
10044818:	b580      	push	{r7, lr}
1004481a:	b082      	sub	sp, #8
1004481c:	af00      	add	r7, sp, #0
1004481e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
10044820:	687b      	ldr	r3, [r7, #4]
10044822:	1e5a      	subs	r2, r3, #1
10044824:	2380      	movs	r3, #128	@ 0x80
10044826:	045b      	lsls	r3, r3, #17
10044828:	429a      	cmp	r2, r3
1004482a:	d301      	bcc.n	10044830 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
1004482c:	2301      	movs	r3, #1
1004482e:	e010      	b.n	10044852 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
10044830:	4b0a      	ldr	r3, [pc, #40]	@ (1004485c <SysTick_Config+0x44>)
10044832:	687a      	ldr	r2, [r7, #4]
10044834:	3a01      	subs	r2, #1
10044836:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
10044838:	2301      	movs	r3, #1
1004483a:	425b      	negs	r3, r3
1004483c:	2103      	movs	r1, #3
1004483e:	0018      	movs	r0, r3
10044840:	f7ff ff7c 	bl	1004473c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
10044844:	4b05      	ldr	r3, [pc, #20]	@ (1004485c <SysTick_Config+0x44>)
10044846:	2200      	movs	r2, #0
10044848:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
1004484a:	4b04      	ldr	r3, [pc, #16]	@ (1004485c <SysTick_Config+0x44>)
1004484c:	2207      	movs	r2, #7
1004484e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
10044850:	2300      	movs	r3, #0
}
10044852:	0018      	movs	r0, r3
10044854:	46bd      	mov	sp, r7
10044856:	b002      	add	sp, #8
10044858:	bd80      	pop	{r7, pc}
1004485a:	46c0      	nop			@ (mov r8, r8)
1004485c:	e000e010 	.word	0xe000e010

10044860 <HAL_NVIC_SetPriority>:
  *         with stm32wb0x devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
10044860:	b580      	push	{r7, lr}
10044862:	b084      	sub	sp, #16
10044864:	af00      	add	r7, sp, #0
10044866:	60b9      	str	r1, [r7, #8]
10044868:	607a      	str	r2, [r7, #4]
1004486a:	210f      	movs	r1, #15
1004486c:	187b      	adds	r3, r7, r1
1004486e:	1c02      	adds	r2, r0, #0
10044870:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
10044872:	68ba      	ldr	r2, [r7, #8]
10044874:	187b      	adds	r3, r7, r1
10044876:	781b      	ldrb	r3, [r3, #0]
10044878:	b25b      	sxtb	r3, r3
1004487a:	0011      	movs	r1, r2
1004487c:	0018      	movs	r0, r3
1004487e:	f7ff ff5d 	bl	1004473c <__NVIC_SetPriority>
}
10044882:	46c0      	nop			@ (mov r8, r8)
10044884:	46bd      	mov	sp, r7
10044886:	b004      	add	sp, #16
10044888:	bd80      	pop	{r7, pc}

1004488a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file)
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
1004488a:	b580      	push	{r7, lr}
1004488c:	b082      	sub	sp, #8
1004488e:	af00      	add	r7, sp, #0
10044890:	0002      	movs	r2, r0
10044892:	1dfb      	adds	r3, r7, #7
10044894:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
10044896:	1dfb      	adds	r3, r7, #7
10044898:	781b      	ldrb	r3, [r3, #0]
1004489a:	b25b      	sxtb	r3, r3
1004489c:	0018      	movs	r0, r3
1004489e:	f7ff ff33 	bl	10044708 <__NVIC_EnableIRQ>
}
100448a2:	46c0      	nop			@ (mov r8, r8)
100448a4:	46bd      	mov	sp, r7
100448a6:	b002      	add	sp, #8
100448a8:	bd80      	pop	{r7, pc}

100448aa <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
100448aa:	b580      	push	{r7, lr}
100448ac:	b082      	sub	sp, #8
100448ae:	af00      	add	r7, sp, #0
100448b0:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
100448b2:	687b      	ldr	r3, [r7, #4]
100448b4:	0018      	movs	r0, r3
100448b6:	f7ff ffaf 	bl	10044818 <SysTick_Config>
100448ba:	0003      	movs	r3, r0
}
100448bc:	0018      	movs	r0, r3
100448be:	46bd      	mov	sp, r7
100448c0:	b002      	add	sp, #8
100448c2:	bd80      	pop	{r7, pc}

100448c4 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
100448c4:	b580      	push	{r7, lr}
100448c6:	b086      	sub	sp, #24
100448c8:	af00      	add	r7, sp, #0
100448ca:	6078      	str	r0, [r7, #4]
100448cc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
100448ce:	2300      	movs	r3, #0
100448d0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
100448d2:	e194      	b.n	10044bfe <HAL_GPIO_Init+0x33a>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
100448d4:	683b      	ldr	r3, [r7, #0]
100448d6:	681b      	ldr	r3, [r3, #0]
100448d8:	2101      	movs	r1, #1
100448da:	697a      	ldr	r2, [r7, #20]
100448dc:	4091      	lsls	r1, r2
100448de:	000a      	movs	r2, r1
100448e0:	4013      	ands	r3, r2
100448e2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
100448e4:	68fb      	ldr	r3, [r7, #12]
100448e6:	2b00      	cmp	r3, #0
100448e8:	d100      	bne.n	100448ec <HAL_GPIO_Init+0x28>
100448ea:	e185      	b.n	10044bf8 <HAL_GPIO_Init+0x334>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
100448ec:	683b      	ldr	r3, [r7, #0]
100448ee:	685b      	ldr	r3, [r3, #4]
100448f0:	2203      	movs	r2, #3
100448f2:	4013      	ands	r3, r2
100448f4:	2b01      	cmp	r3, #1
100448f6:	d005      	beq.n	10044904 <HAL_GPIO_Init+0x40>
100448f8:	683b      	ldr	r3, [r7, #0]
100448fa:	685b      	ldr	r3, [r3, #4]
100448fc:	2203      	movs	r2, #3
100448fe:	4013      	ands	r3, r2
10044900:	2b02      	cmp	r3, #2
10044902:	d130      	bne.n	10044966 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
10044904:	687b      	ldr	r3, [r7, #4]
10044906:	689b      	ldr	r3, [r3, #8]
10044908:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
1004490a:	697b      	ldr	r3, [r7, #20]
1004490c:	005b      	lsls	r3, r3, #1
1004490e:	2203      	movs	r2, #3
10044910:	409a      	lsls	r2, r3
10044912:	0013      	movs	r3, r2
10044914:	43da      	mvns	r2, r3
10044916:	693b      	ldr	r3, [r7, #16]
10044918:	4013      	ands	r3, r2
1004491a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
1004491c:	683b      	ldr	r3, [r7, #0]
1004491e:	68da      	ldr	r2, [r3, #12]
10044920:	697b      	ldr	r3, [r7, #20]
10044922:	005b      	lsls	r3, r3, #1
10044924:	409a      	lsls	r2, r3
10044926:	0013      	movs	r3, r2
10044928:	693a      	ldr	r2, [r7, #16]
1004492a:	4313      	orrs	r3, r2
1004492c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
1004492e:	687b      	ldr	r3, [r7, #4]
10044930:	693a      	ldr	r2, [r7, #16]
10044932:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
10044934:	687b      	ldr	r3, [r7, #4]
10044936:	685b      	ldr	r3, [r3, #4]
10044938:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
1004493a:	2201      	movs	r2, #1
1004493c:	697b      	ldr	r3, [r7, #20]
1004493e:	409a      	lsls	r2, r3
10044940:	0013      	movs	r3, r2
10044942:	43da      	mvns	r2, r3
10044944:	693b      	ldr	r3, [r7, #16]
10044946:	4013      	ands	r3, r2
10044948:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
1004494a:	683b      	ldr	r3, [r7, #0]
1004494c:	685b      	ldr	r3, [r3, #4]
1004494e:	091b      	lsrs	r3, r3, #4
10044950:	2201      	movs	r2, #1
10044952:	401a      	ands	r2, r3
10044954:	697b      	ldr	r3, [r7, #20]
10044956:	409a      	lsls	r2, r3
10044958:	0013      	movs	r3, r2
1004495a:	693a      	ldr	r2, [r7, #16]
1004495c:	4313      	orrs	r3, r2
1004495e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
10044960:	687b      	ldr	r3, [r7, #4]
10044962:	693a      	ldr	r2, [r7, #16]
10044964:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
10044966:	683b      	ldr	r3, [r7, #0]
10044968:	685b      	ldr	r3, [r3, #4]
1004496a:	2203      	movs	r2, #3
1004496c:	4013      	ands	r3, r2
1004496e:	2b03      	cmp	r3, #3
10044970:	d017      	beq.n	100449a2 <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
10044972:	687b      	ldr	r3, [r7, #4]
10044974:	68db      	ldr	r3, [r3, #12]
10044976:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
10044978:	697b      	ldr	r3, [r7, #20]
1004497a:	005b      	lsls	r3, r3, #1
1004497c:	2203      	movs	r2, #3
1004497e:	409a      	lsls	r2, r3
10044980:	0013      	movs	r3, r2
10044982:	43da      	mvns	r2, r3
10044984:	693b      	ldr	r3, [r7, #16]
10044986:	4013      	ands	r3, r2
10044988:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
1004498a:	683b      	ldr	r3, [r7, #0]
1004498c:	689a      	ldr	r2, [r3, #8]
1004498e:	697b      	ldr	r3, [r7, #20]
10044990:	005b      	lsls	r3, r3, #1
10044992:	409a      	lsls	r2, r3
10044994:	0013      	movs	r3, r2
10044996:	693a      	ldr	r2, [r7, #16]
10044998:	4313      	orrs	r3, r2
1004499a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
1004499c:	687b      	ldr	r3, [r7, #4]
1004499e:	693a      	ldr	r2, [r7, #16]
100449a0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
100449a2:	683b      	ldr	r3, [r7, #0]
100449a4:	685b      	ldr	r3, [r3, #4]
100449a6:	2203      	movs	r2, #3
100449a8:	4013      	ands	r3, r2
100449aa:	2b02      	cmp	r3, #2
100449ac:	d123      	bne.n	100449f6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
100449ae:	697b      	ldr	r3, [r7, #20]
100449b0:	08da      	lsrs	r2, r3, #3
100449b2:	687b      	ldr	r3, [r7, #4]
100449b4:	3208      	adds	r2, #8
100449b6:	0092      	lsls	r2, r2, #2
100449b8:	58d3      	ldr	r3, [r2, r3]
100449ba:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
100449bc:	697b      	ldr	r3, [r7, #20]
100449be:	2207      	movs	r2, #7
100449c0:	4013      	ands	r3, r2
100449c2:	009b      	lsls	r3, r3, #2
100449c4:	220f      	movs	r2, #15
100449c6:	409a      	lsls	r2, r3
100449c8:	0013      	movs	r3, r2
100449ca:	43da      	mvns	r2, r3
100449cc:	693b      	ldr	r3, [r7, #16]
100449ce:	4013      	ands	r3, r2
100449d0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
100449d2:	683b      	ldr	r3, [r7, #0]
100449d4:	691a      	ldr	r2, [r3, #16]
100449d6:	697b      	ldr	r3, [r7, #20]
100449d8:	2107      	movs	r1, #7
100449da:	400b      	ands	r3, r1
100449dc:	009b      	lsls	r3, r3, #2
100449de:	409a      	lsls	r2, r3
100449e0:	0013      	movs	r3, r2
100449e2:	693a      	ldr	r2, [r7, #16]
100449e4:	4313      	orrs	r3, r2
100449e6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
100449e8:	697b      	ldr	r3, [r7, #20]
100449ea:	08da      	lsrs	r2, r3, #3
100449ec:	687b      	ldr	r3, [r7, #4]
100449ee:	3208      	adds	r2, #8
100449f0:	0092      	lsls	r2, r2, #2
100449f2:	6939      	ldr	r1, [r7, #16]
100449f4:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
100449f6:	687b      	ldr	r3, [r7, #4]
100449f8:	681b      	ldr	r3, [r3, #0]
100449fa:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
100449fc:	697b      	ldr	r3, [r7, #20]
100449fe:	005b      	lsls	r3, r3, #1
10044a00:	2203      	movs	r2, #3
10044a02:	409a      	lsls	r2, r3
10044a04:	0013      	movs	r3, r2
10044a06:	43da      	mvns	r2, r3
10044a08:	693b      	ldr	r3, [r7, #16]
10044a0a:	4013      	ands	r3, r2
10044a0c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
10044a0e:	683b      	ldr	r3, [r7, #0]
10044a10:	685b      	ldr	r3, [r3, #4]
10044a12:	2203      	movs	r2, #3
10044a14:	401a      	ands	r2, r3
10044a16:	697b      	ldr	r3, [r7, #20]
10044a18:	005b      	lsls	r3, r3, #1
10044a1a:	409a      	lsls	r2, r3
10044a1c:	0013      	movs	r3, r2
10044a1e:	693a      	ldr	r2, [r7, #16]
10044a20:	4313      	orrs	r3, r2
10044a22:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
10044a24:	687b      	ldr	r3, [r7, #4]
10044a26:	693a      	ldr	r2, [r7, #16]
10044a28:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
10044a2a:	683b      	ldr	r3, [r7, #0]
10044a2c:	685a      	ldr	r2, [r3, #4]
10044a2e:	23c0      	movs	r3, #192	@ 0xc0
10044a30:	029b      	lsls	r3, r3, #10
10044a32:	4013      	ands	r3, r2
10044a34:	d100      	bne.n	10044a38 <HAL_GPIO_Init+0x174>
10044a36:	e0df      	b.n	10044bf8 <HAL_GPIO_Init+0x334>
      {

        /* Edge/Level line configuration */
        if ((GPIO_Init->Mode & DETECTION_TYPE) != 0x00u)
10044a38:	683b      	ldr	r3, [r7, #0]
10044a3a:	685a      	ldr	r2, [r3, #4]
10044a3c:	2380      	movs	r3, #128	@ 0x80
10044a3e:	02db      	lsls	r3, r3, #11
10044a40:	4013      	ands	r3, r2
10044a42:	d031      	beq.n	10044aa8 <HAL_GPIO_Init+0x1e4>
        {
          temp = SYSCFG->IO_DTR;
10044a44:	2380      	movs	r3, #128	@ 0x80
10044a46:	05db      	lsls	r3, r3, #23
10044a48:	68db      	ldr	r3, [r3, #12]
10044a4a:	613b      	str	r3, [r7, #16]
          if (GPIOx == GPIOA)
10044a4c:	687a      	ldr	r2, [r7, #4]
10044a4e:	2390      	movs	r3, #144	@ 0x90
10044a50:	05db      	lsls	r3, r3, #23
10044a52:	429a      	cmp	r2, r3
10044a54:	d111      	bne.n	10044a7a <HAL_GPIO_Init+0x1b6>
          {
            temp &= ~(1 << position);
10044a56:	2201      	movs	r2, #1
10044a58:	697b      	ldr	r3, [r7, #20]
10044a5a:	409a      	lsls	r2, r3
10044a5c:	0013      	movs	r3, r2
10044a5e:	43db      	mvns	r3, r3
10044a60:	001a      	movs	r2, r3
10044a62:	693b      	ldr	r3, [r7, #16]
10044a64:	4013      	ands	r3, r2
10044a66:	613b      	str	r3, [r7, #16]
            temp |= (1 << position);
10044a68:	2201      	movs	r2, #1
10044a6a:	697b      	ldr	r3, [r7, #20]
10044a6c:	409a      	lsls	r2, r3
10044a6e:	0013      	movs	r3, r2
10044a70:	001a      	movs	r2, r3
10044a72:	693b      	ldr	r3, [r7, #16]
10044a74:	4313      	orrs	r3, r2
10044a76:	613b      	str	r3, [r7, #16]
10044a78:	e012      	b.n	10044aa0 <HAL_GPIO_Init+0x1dc>
          }
          else
          {
            temp &= ~((1 << position) << 16);
10044a7a:	2201      	movs	r2, #1
10044a7c:	697b      	ldr	r3, [r7, #20]
10044a7e:	409a      	lsls	r2, r3
10044a80:	0013      	movs	r3, r2
10044a82:	041b      	lsls	r3, r3, #16
10044a84:	43db      	mvns	r3, r3
10044a86:	001a      	movs	r2, r3
10044a88:	693b      	ldr	r3, [r7, #16]
10044a8a:	4013      	ands	r3, r2
10044a8c:	613b      	str	r3, [r7, #16]
            temp |= ((1 << position) << 16);
10044a8e:	2201      	movs	r2, #1
10044a90:	697b      	ldr	r3, [r7, #20]
10044a92:	409a      	lsls	r2, r3
10044a94:	0013      	movs	r3, r2
10044a96:	041b      	lsls	r3, r3, #16
10044a98:	001a      	movs	r2, r3
10044a9a:	693b      	ldr	r3, [r7, #16]
10044a9c:	4313      	orrs	r3, r2
10044a9e:	613b      	str	r3, [r7, #16]
          }
          SYSCFG->IO_DTR = temp;
10044aa0:	2380      	movs	r3, #128	@ 0x80
10044aa2:	05db      	lsls	r3, r3, #23
10044aa4:	693a      	ldr	r2, [r7, #16]
10044aa6:	60da      	str	r2, [r3, #12]
        }

		/* Edge selection configuration */
		if ((GPIO_Init->Mode & EDGE_SELECTION) != 0x00u)
10044aa8:	683b      	ldr	r3, [r7, #0]
10044aaa:	685a      	ldr	r2, [r3, #4]
10044aac:	2380      	movs	r3, #128	@ 0x80
10044aae:	035b      	lsls	r3, r3, #13
10044ab0:	4013      	ands	r3, r2
10044ab2:	d031      	beq.n	10044b18 <HAL_GPIO_Init+0x254>
        {
          temp = SYSCFG->IO_IBER;
10044ab4:	2380      	movs	r3, #128	@ 0x80
10044ab6:	05db      	lsls	r3, r3, #23
10044ab8:	691b      	ldr	r3, [r3, #16]
10044aba:	613b      	str	r3, [r7, #16]

          if (GPIOx == GPIOA)
10044abc:	687a      	ldr	r2, [r7, #4]
10044abe:	2390      	movs	r3, #144	@ 0x90
10044ac0:	05db      	lsls	r3, r3, #23
10044ac2:	429a      	cmp	r2, r3
10044ac4:	d111      	bne.n	10044aea <HAL_GPIO_Init+0x226>
          {
            temp &= ~(1 << position);
10044ac6:	2201      	movs	r2, #1
10044ac8:	697b      	ldr	r3, [r7, #20]
10044aca:	409a      	lsls	r2, r3
10044acc:	0013      	movs	r3, r2
10044ace:	43db      	mvns	r3, r3
10044ad0:	001a      	movs	r2, r3
10044ad2:	693b      	ldr	r3, [r7, #16]
10044ad4:	4013      	ands	r3, r2
10044ad6:	613b      	str	r3, [r7, #16]
            temp |= (1 << position);
10044ad8:	2201      	movs	r2, #1
10044ada:	697b      	ldr	r3, [r7, #20]
10044adc:	409a      	lsls	r2, r3
10044ade:	0013      	movs	r3, r2
10044ae0:	001a      	movs	r2, r3
10044ae2:	693b      	ldr	r3, [r7, #16]
10044ae4:	4313      	orrs	r3, r2
10044ae6:	613b      	str	r3, [r7, #16]
10044ae8:	e012      	b.n	10044b10 <HAL_GPIO_Init+0x24c>
          }
          else
          {
            temp &= ~((1 << position) << 16);
10044aea:	2201      	movs	r2, #1
10044aec:	697b      	ldr	r3, [r7, #20]
10044aee:	409a      	lsls	r2, r3
10044af0:	0013      	movs	r3, r2
10044af2:	041b      	lsls	r3, r3, #16
10044af4:	43db      	mvns	r3, r3
10044af6:	001a      	movs	r2, r3
10044af8:	693b      	ldr	r3, [r7, #16]
10044afa:	4013      	ands	r3, r2
10044afc:	613b      	str	r3, [r7, #16]
            temp |= ((1 << position) << 16);
10044afe:	2201      	movs	r2, #1
10044b00:	697b      	ldr	r3, [r7, #20]
10044b02:	409a      	lsls	r2, r3
10044b04:	0013      	movs	r3, r2
10044b06:	041b      	lsls	r3, r3, #16
10044b08:	001a      	movs	r2, r3
10044b0a:	693b      	ldr	r3, [r7, #16]
10044b0c:	4313      	orrs	r3, r2
10044b0e:	613b      	str	r3, [r7, #16]
          }
          SYSCFG->IO_IBER= temp;
10044b10:	2380      	movs	r3, #128	@ 0x80
10044b12:	05db      	lsls	r3, r3, #23
10044b14:	693a      	ldr	r2, [r7, #16]
10044b16:	611a      	str	r2, [r3, #16]
        }

        /* Trigger mode configuration */
		if ((GPIO_Init->Mode & TRIGGER_MODE) != 0x00u)
10044b18:	683b      	ldr	r3, [r7, #0]
10044b1a:	685a      	ldr	r2, [r3, #4]
10044b1c:	2380      	movs	r3, #128	@ 0x80
10044b1e:	03db      	lsls	r3, r3, #15
10044b20:	4013      	ands	r3, r2
10044b22:	d031      	beq.n	10044b88 <HAL_GPIO_Init+0x2c4>
        {
          temp = SYSCFG->IO_IEVR;
10044b24:	2380      	movs	r3, #128	@ 0x80
10044b26:	05db      	lsls	r3, r3, #23
10044b28:	695b      	ldr	r3, [r3, #20]
10044b2a:	613b      	str	r3, [r7, #16]

          if (GPIOx == GPIOA)
10044b2c:	687a      	ldr	r2, [r7, #4]
10044b2e:	2390      	movs	r3, #144	@ 0x90
10044b30:	05db      	lsls	r3, r3, #23
10044b32:	429a      	cmp	r2, r3
10044b34:	d111      	bne.n	10044b5a <HAL_GPIO_Init+0x296>
          {
            temp &= ~(1 << position);
10044b36:	2201      	movs	r2, #1
10044b38:	697b      	ldr	r3, [r7, #20]
10044b3a:	409a      	lsls	r2, r3
10044b3c:	0013      	movs	r3, r2
10044b3e:	43db      	mvns	r3, r3
10044b40:	001a      	movs	r2, r3
10044b42:	693b      	ldr	r3, [r7, #16]
10044b44:	4013      	ands	r3, r2
10044b46:	613b      	str	r3, [r7, #16]
            temp |= (1 << position);
10044b48:	2201      	movs	r2, #1
10044b4a:	697b      	ldr	r3, [r7, #20]
10044b4c:	409a      	lsls	r2, r3
10044b4e:	0013      	movs	r3, r2
10044b50:	001a      	movs	r2, r3
10044b52:	693b      	ldr	r3, [r7, #16]
10044b54:	4313      	orrs	r3, r2
10044b56:	613b      	str	r3, [r7, #16]
10044b58:	e012      	b.n	10044b80 <HAL_GPIO_Init+0x2bc>
          }
          else
          {
            temp &= ~((1 << position) << 16);
10044b5a:	2201      	movs	r2, #1
10044b5c:	697b      	ldr	r3, [r7, #20]
10044b5e:	409a      	lsls	r2, r3
10044b60:	0013      	movs	r3, r2
10044b62:	041b      	lsls	r3, r3, #16
10044b64:	43db      	mvns	r3, r3
10044b66:	001a      	movs	r2, r3
10044b68:	693b      	ldr	r3, [r7, #16]
10044b6a:	4013      	ands	r3, r2
10044b6c:	613b      	str	r3, [r7, #16]
            temp |= ((1 << position) << 16);
10044b6e:	2201      	movs	r2, #1
10044b70:	697b      	ldr	r3, [r7, #20]
10044b72:	409a      	lsls	r2, r3
10044b74:	0013      	movs	r3, r2
10044b76:	041b      	lsls	r3, r3, #16
10044b78:	001a      	movs	r2, r3
10044b7a:	693b      	ldr	r3, [r7, #16]
10044b7c:	4313      	orrs	r3, r2
10044b7e:	613b      	str	r3, [r7, #16]
          }
          SYSCFG->IO_IEVR= temp;
10044b80:	2380      	movs	r3, #128	@ 0x80
10044b82:	05db      	lsls	r3, r3, #23
10044b84:	693a      	ldr	r2, [r7, #16]
10044b86:	615a      	str	r2, [r3, #20]
        }

        /* Enable the specified EXTI interrupt line */
        if ((GPIO_Init->Mode & EXTI_IT) == EXTI_IT)
10044b88:	683b      	ldr	r3, [r7, #0]
10044b8a:	685a      	ldr	r2, [r3, #4]
10044b8c:	2380      	movs	r3, #128	@ 0x80
10044b8e:	025b      	lsls	r3, r3, #9
10044b90:	4013      	ands	r3, r2
10044b92:	d031      	beq.n	10044bf8 <HAL_GPIO_Init+0x334>
        {
          temp = SYSCFG->IO_IER;
10044b94:	2380      	movs	r3, #128	@ 0x80
10044b96:	05db      	lsls	r3, r3, #23
10044b98:	699b      	ldr	r3, [r3, #24]
10044b9a:	613b      	str	r3, [r7, #16]

          if (GPIOx == GPIOA)
10044b9c:	687a      	ldr	r2, [r7, #4]
10044b9e:	2390      	movs	r3, #144	@ 0x90
10044ba0:	05db      	lsls	r3, r3, #23
10044ba2:	429a      	cmp	r2, r3
10044ba4:	d111      	bne.n	10044bca <HAL_GPIO_Init+0x306>
          {
            temp &= ~(1 << position);
10044ba6:	2201      	movs	r2, #1
10044ba8:	697b      	ldr	r3, [r7, #20]
10044baa:	409a      	lsls	r2, r3
10044bac:	0013      	movs	r3, r2
10044bae:	43db      	mvns	r3, r3
10044bb0:	001a      	movs	r2, r3
10044bb2:	693b      	ldr	r3, [r7, #16]
10044bb4:	4013      	ands	r3, r2
10044bb6:	613b      	str	r3, [r7, #16]
            temp |= (1 << position);
10044bb8:	2201      	movs	r2, #1
10044bba:	697b      	ldr	r3, [r7, #20]
10044bbc:	409a      	lsls	r2, r3
10044bbe:	0013      	movs	r3, r2
10044bc0:	001a      	movs	r2, r3
10044bc2:	693b      	ldr	r3, [r7, #16]
10044bc4:	4313      	orrs	r3, r2
10044bc6:	613b      	str	r3, [r7, #16]
10044bc8:	e012      	b.n	10044bf0 <HAL_GPIO_Init+0x32c>
          }
          else
          {
            temp &= ~((1 << position) << 16);
10044bca:	2201      	movs	r2, #1
10044bcc:	697b      	ldr	r3, [r7, #20]
10044bce:	409a      	lsls	r2, r3
10044bd0:	0013      	movs	r3, r2
10044bd2:	041b      	lsls	r3, r3, #16
10044bd4:	43db      	mvns	r3, r3
10044bd6:	001a      	movs	r2, r3
10044bd8:	693b      	ldr	r3, [r7, #16]
10044bda:	4013      	ands	r3, r2
10044bdc:	613b      	str	r3, [r7, #16]
            temp |= ((1 << position) << 16);
10044bde:	2201      	movs	r2, #1
10044be0:	697b      	ldr	r3, [r7, #20]
10044be2:	409a      	lsls	r2, r3
10044be4:	0013      	movs	r3, r2
10044be6:	041b      	lsls	r3, r3, #16
10044be8:	001a      	movs	r2, r3
10044bea:	693b      	ldr	r3, [r7, #16]
10044bec:	4313      	orrs	r3, r2
10044bee:	613b      	str	r3, [r7, #16]
          }
          SYSCFG->IO_IER= temp;
10044bf0:	2380      	movs	r3, #128	@ 0x80
10044bf2:	05db      	lsls	r3, r3, #23
10044bf4:	693a      	ldr	r2, [r7, #16]
10044bf6:	619a      	str	r2, [r3, #24]
        }
      }
    }

    position++;
10044bf8:	697b      	ldr	r3, [r7, #20]
10044bfa:	3301      	adds	r3, #1
10044bfc:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
10044bfe:	683b      	ldr	r3, [r7, #0]
10044c00:	681a      	ldr	r2, [r3, #0]
10044c02:	697b      	ldr	r3, [r7, #20]
10044c04:	40da      	lsrs	r2, r3
10044c06:	1e13      	subs	r3, r2, #0
10044c08:	d000      	beq.n	10044c0c <HAL_GPIO_Init+0x348>
10044c0a:	e663      	b.n	100448d4 <HAL_GPIO_Init+0x10>
  }
}
10044c0c:	46c0      	nop			@ (mov r8, r8)
10044c0e:	46c0      	nop			@ (mov r8, r8)
10044c10:	46bd      	mov	sp, r7
10044c12:	b006      	add	sp, #24
10044c14:	bd80      	pop	{r7, pc}

10044c16 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
10044c16:	b580      	push	{r7, lr}
10044c18:	b082      	sub	sp, #8
10044c1a:	af00      	add	r7, sp, #0
10044c1c:	6078      	str	r0, [r7, #4]
10044c1e:	0008      	movs	r0, r1
10044c20:	0011      	movs	r1, r2
10044c22:	1cbb      	adds	r3, r7, #2
10044c24:	1c02      	adds	r2, r0, #0
10044c26:	801a      	strh	r2, [r3, #0]
10044c28:	1c7b      	adds	r3, r7, #1
10044c2a:	1c0a      	adds	r2, r1, #0
10044c2c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
10044c2e:	1c7b      	adds	r3, r7, #1
10044c30:	781b      	ldrb	r3, [r3, #0]
10044c32:	2b00      	cmp	r3, #0
10044c34:	d004      	beq.n	10044c40 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
10044c36:	1cbb      	adds	r3, r7, #2
10044c38:	881a      	ldrh	r2, [r3, #0]
10044c3a:	687b      	ldr	r3, [r7, #4]
10044c3c:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
10044c3e:	e003      	b.n	10044c48 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
10044c40:	1cbb      	adds	r3, r7, #2
10044c42:	881a      	ldrh	r2, [r3, #0]
10044c44:	687b      	ldr	r3, [r7, #4]
10044c46:	629a      	str	r2, [r3, #40]	@ 0x28
}
10044c48:	46c0      	nop			@ (mov r8, r8)
10044c4a:	46bd      	mov	sp, r7
10044c4c:	b002      	add	sp, #8
10044c4e:	bd80      	pop	{r7, pc}

10044c50 <LL_RADIO_SetRadioConfigurationAddressPointer>:
  * @rmtoll WORD0          RADIOCONFIGPTR       LL_RADIO_SetRadioConfigurationAddressPointer
  * @param  value
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_SetRadioConfigurationAddressPointer(uint32_t value)
{
10044c50:	b580      	push	{r7, lr}
10044c52:	b082      	sub	sp, #8
10044c54:	af00      	add	r7, sp, #0
10044c56:	6078      	str	r0, [r7, #4]
  MODIFY_REG_FIELD(BLUEGLOBWORD->WORD0, GLOBAL_WORD0_RADIOCONFIGPTR, value);
10044c58:	4b04      	ldr	r3, [pc, #16]	@ (10044c6c <LL_RADIO_SetRadioConfigurationAddressPointer+0x1c>)
10044c5a:	681b      	ldr	r3, [r3, #0]
10044c5c:	4b03      	ldr	r3, [pc, #12]	@ (10044c6c <LL_RADIO_SetRadioConfigurationAddressPointer+0x1c>)
10044c5e:	687a      	ldr	r2, [r7, #4]
10044c60:	601a      	str	r2, [r3, #0]
}
10044c62:	46c0      	nop			@ (mov r8, r8)
10044c64:	46bd      	mov	sp, r7
10044c66:	b002      	add	sp, #8
10044c68:	bd80      	pop	{r7, pc}
10044c6a:	46c0      	nop			@ (mov r8, r8)
10044c6c:	200000c0 	.word	0x200000c0

10044c70 <LL_RADIO_SetWakeupInitDelay>:
  * @rmtoll WORD1          WAKEUPINITDELAY       LL_RADIO_SetWakeupInitDelay
  * @param  value
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_SetWakeupInitDelay(uint32_t value)
{
10044c70:	b580      	push	{r7, lr}
10044c72:	b082      	sub	sp, #8
10044c74:	af00      	add	r7, sp, #0
10044c76:	6078      	str	r0, [r7, #4]
  MODIFY_REG_FIELD(BLUEGLOBWORD->WORD1, GLOBAL_WORD1_WAKEUPINITDELAY, value);
10044c78:	4b07      	ldr	r3, [pc, #28]	@ (10044c98 <LL_RADIO_SetWakeupInitDelay+0x28>)
10044c7a:	685b      	ldr	r3, [r3, #4]
10044c7c:	4a07      	ldr	r2, [pc, #28]	@ (10044c9c <LL_RADIO_SetWakeupInitDelay+0x2c>)
10044c7e:	4013      	ands	r3, r2
10044c80:	0019      	movs	r1, r3
10044c82:	687b      	ldr	r3, [r7, #4]
10044c84:	021b      	lsls	r3, r3, #8
10044c86:	041b      	lsls	r3, r3, #16
10044c88:	0c1a      	lsrs	r2, r3, #16
10044c8a:	4b03      	ldr	r3, [pc, #12]	@ (10044c98 <LL_RADIO_SetWakeupInitDelay+0x28>)
10044c8c:	430a      	orrs	r2, r1
10044c8e:	605a      	str	r2, [r3, #4]
}
10044c90:	46c0      	nop			@ (mov r8, r8)
10044c92:	46bd      	mov	sp, r7
10044c94:	b002      	add	sp, #8
10044c96:	bd80      	pop	{r7, pc}
10044c98:	200000c0 	.word	0x200000c0
10044c9c:	ffff00ff 	.word	0xffff00ff

10044ca0 <LL_RADIO_SetTimer12InitDelayCal>:
  * @rmtoll WORD1          TIMER12INITDELAYCAL       LL_RADIO_SetTimer12InitDelayCal
  * @param  value
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_SetTimer12InitDelayCal(uint32_t value)
{
10044ca0:	b580      	push	{r7, lr}
10044ca2:	b082      	sub	sp, #8
10044ca4:	af00      	add	r7, sp, #0
10044ca6:	6078      	str	r0, [r7, #4]
  MODIFY_REG_FIELD(BLUEGLOBWORD->WORD1, GLOBAL_WORD1_TIMER12INITDELAYCAL, value);
10044ca8:	4b08      	ldr	r3, [pc, #32]	@ (10044ccc <LL_RADIO_SetTimer12InitDelayCal+0x2c>)
10044caa:	685b      	ldr	r3, [r3, #4]
10044cac:	4a08      	ldr	r2, [pc, #32]	@ (10044cd0 <LL_RADIO_SetTimer12InitDelayCal+0x30>)
10044cae:	4013      	ands	r3, r2
10044cb0:	0019      	movs	r1, r3
10044cb2:	687b      	ldr	r3, [r7, #4]
10044cb4:	041a      	lsls	r2, r3, #16
10044cb6:	23ff      	movs	r3, #255	@ 0xff
10044cb8:	041b      	lsls	r3, r3, #16
10044cba:	401a      	ands	r2, r3
10044cbc:	4b03      	ldr	r3, [pc, #12]	@ (10044ccc <LL_RADIO_SetTimer12InitDelayCal+0x2c>)
10044cbe:	430a      	orrs	r2, r1
10044cc0:	605a      	str	r2, [r3, #4]
}
10044cc2:	46c0      	nop			@ (mov r8, r8)
10044cc4:	46bd      	mov	sp, r7
10044cc6:	b002      	add	sp, #8
10044cc8:	bd80      	pop	{r7, pc}
10044cca:	46c0      	nop			@ (mov r8, r8)
10044ccc:	200000c0 	.word	0x200000c0
10044cd0:	ff00ffff 	.word	0xff00ffff

10044cd4 <LL_RADIO_SetTimer12InitDelayNoCal>:
  * @rmtoll WORD1          TIMER2INITDELAYNOCAL       LL_RADIO_SetTimer12InitDelayNoCal
  * @param  value
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_SetTimer12InitDelayNoCal(uint32_t value)
{
10044cd4:	b580      	push	{r7, lr}
10044cd6:	b082      	sub	sp, #8
10044cd8:	af00      	add	r7, sp, #0
10044cda:	6078      	str	r0, [r7, #4]
  MODIFY_REG_FIELD(BLUEGLOBWORD->WORD1, GLOBAL_WORD1_TIMER2INITDELAYNOCAL, value);
10044cdc:	4b06      	ldr	r3, [pc, #24]	@ (10044cf8 <LL_RADIO_SetTimer12InitDelayNoCal+0x24>)
10044cde:	685b      	ldr	r3, [r3, #4]
10044ce0:	021b      	lsls	r3, r3, #8
10044ce2:	0a19      	lsrs	r1, r3, #8
10044ce4:	687b      	ldr	r3, [r7, #4]
10044ce6:	061a      	lsls	r2, r3, #24
10044ce8:	4b03      	ldr	r3, [pc, #12]	@ (10044cf8 <LL_RADIO_SetTimer12InitDelayNoCal+0x24>)
10044cea:	430a      	orrs	r2, r1
10044cec:	605a      	str	r2, [r3, #4]
}
10044cee:	46c0      	nop			@ (mov r8, r8)
10044cf0:	46bd      	mov	sp, r7
10044cf2:	b002      	add	sp, #8
10044cf4:	bd80      	pop	{r7, pc}
10044cf6:	46c0      	nop			@ (mov r8, r8)
10044cf8:	200000c0 	.word	0x200000c0

10044cfc <LL_RADIO_SetTransmitCalDelayChk>:
  * @rmtoll WORD2          TRANSMITCALDELAYCHK       LL_RADIO_SetTransmitCalDelayChk
  * @param  value
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_SetTransmitCalDelayChk(uint32_t value)
{
10044cfc:	b580      	push	{r7, lr}
10044cfe:	b082      	sub	sp, #8
10044d00:	af00      	add	r7, sp, #0
10044d02:	6078      	str	r0, [r7, #4]
  MODIFY_REG_FIELD(BLUEGLOBWORD->WORD2, GLOBAL_WORD2_TRANSMITCALDELAYCHK, value);
10044d04:	4b07      	ldr	r3, [pc, #28]	@ (10044d24 <LL_RADIO_SetTransmitCalDelayChk+0x28>)
10044d06:	689b      	ldr	r3, [r3, #8]
10044d08:	22ff      	movs	r2, #255	@ 0xff
10044d0a:	4393      	bics	r3, r2
10044d0c:	0019      	movs	r1, r3
10044d0e:	687b      	ldr	r3, [r7, #4]
10044d10:	22ff      	movs	r2, #255	@ 0xff
10044d12:	401a      	ands	r2, r3
10044d14:	4b03      	ldr	r3, [pc, #12]	@ (10044d24 <LL_RADIO_SetTransmitCalDelayChk+0x28>)
10044d16:	430a      	orrs	r2, r1
10044d18:	609a      	str	r2, [r3, #8]
}
10044d1a:	46c0      	nop			@ (mov r8, r8)
10044d1c:	46bd      	mov	sp, r7
10044d1e:	b002      	add	sp, #8
10044d20:	bd80      	pop	{r7, pc}
10044d22:	46c0      	nop			@ (mov r8, r8)
10044d24:	200000c0 	.word	0x200000c0

10044d28 <LL_RADIO_SetTransmitNoCalDelayChk>:
  * @rmtoll WORD2          TRANSMITNOCALDELAYCHK       LL_RADIO_SetTransmitNoCalDelayChk
  * @param  value
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_SetTransmitNoCalDelayChk(uint32_t value)
{
10044d28:	b580      	push	{r7, lr}
10044d2a:	b082      	sub	sp, #8
10044d2c:	af00      	add	r7, sp, #0
10044d2e:	6078      	str	r0, [r7, #4]
  MODIFY_REG_FIELD(BLUEGLOBWORD->WORD2, GLOBAL_WORD2_TRANSMITNOCALDELAYCHK, value);
10044d30:	4b07      	ldr	r3, [pc, #28]	@ (10044d50 <LL_RADIO_SetTransmitNoCalDelayChk+0x28>)
10044d32:	689b      	ldr	r3, [r3, #8]
10044d34:	4a07      	ldr	r2, [pc, #28]	@ (10044d54 <LL_RADIO_SetTransmitNoCalDelayChk+0x2c>)
10044d36:	4013      	ands	r3, r2
10044d38:	0019      	movs	r1, r3
10044d3a:	687b      	ldr	r3, [r7, #4]
10044d3c:	021b      	lsls	r3, r3, #8
10044d3e:	041b      	lsls	r3, r3, #16
10044d40:	0c1a      	lsrs	r2, r3, #16
10044d42:	4b03      	ldr	r3, [pc, #12]	@ (10044d50 <LL_RADIO_SetTransmitNoCalDelayChk+0x28>)
10044d44:	430a      	orrs	r2, r1
10044d46:	609a      	str	r2, [r3, #8]
}
10044d48:	46c0      	nop			@ (mov r8, r8)
10044d4a:	46bd      	mov	sp, r7
10044d4c:	b002      	add	sp, #8
10044d4e:	bd80      	pop	{r7, pc}
10044d50:	200000c0 	.word	0x200000c0
10044d54:	ffff00ff 	.word	0xffff00ff

10044d58 <LL_RADIO_SetReceivedCalDelayChk>:
  * @rmtoll WORD2          RECEIVECALDELAYCHK       LL_RADIO_SetReceivedCalDelayChk
  * @param  value
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_SetReceivedCalDelayChk(uint32_t value)
{
10044d58:	b580      	push	{r7, lr}
10044d5a:	b082      	sub	sp, #8
10044d5c:	af00      	add	r7, sp, #0
10044d5e:	6078      	str	r0, [r7, #4]
  MODIFY_REG_FIELD(BLUEGLOBWORD->WORD2, GLOBAL_WORD2_RECEIVECALDELAYCHK, value);
10044d60:	4b08      	ldr	r3, [pc, #32]	@ (10044d84 <LL_RADIO_SetReceivedCalDelayChk+0x2c>)
10044d62:	689b      	ldr	r3, [r3, #8]
10044d64:	4a08      	ldr	r2, [pc, #32]	@ (10044d88 <LL_RADIO_SetReceivedCalDelayChk+0x30>)
10044d66:	4013      	ands	r3, r2
10044d68:	0019      	movs	r1, r3
10044d6a:	687b      	ldr	r3, [r7, #4]
10044d6c:	041a      	lsls	r2, r3, #16
10044d6e:	23ff      	movs	r3, #255	@ 0xff
10044d70:	041b      	lsls	r3, r3, #16
10044d72:	401a      	ands	r2, r3
10044d74:	4b03      	ldr	r3, [pc, #12]	@ (10044d84 <LL_RADIO_SetReceivedCalDelayChk+0x2c>)
10044d76:	430a      	orrs	r2, r1
10044d78:	609a      	str	r2, [r3, #8]
}
10044d7a:	46c0      	nop			@ (mov r8, r8)
10044d7c:	46bd      	mov	sp, r7
10044d7e:	b002      	add	sp, #8
10044d80:	bd80      	pop	{r7, pc}
10044d82:	46c0      	nop			@ (mov r8, r8)
10044d84:	200000c0 	.word	0x200000c0
10044d88:	ff00ffff 	.word	0xff00ffff

10044d8c <LL_RADIO_SetReceivedNoCalDelayChk>:
  * @rmtoll WORD2          RECEIVENOCALDELAYCHK       LL_RADIO_SetReceivedNoCalDelayChk
  * @param  value
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_SetReceivedNoCalDelayChk(uint32_t value)
{
10044d8c:	b580      	push	{r7, lr}
10044d8e:	b082      	sub	sp, #8
10044d90:	af00      	add	r7, sp, #0
10044d92:	6078      	str	r0, [r7, #4]
  MODIFY_REG_FIELD(BLUEGLOBWORD->WORD2, GLOBAL_WORD2_RECEIVENOCALDELAYCHK, value);
10044d94:	4b06      	ldr	r3, [pc, #24]	@ (10044db0 <LL_RADIO_SetReceivedNoCalDelayChk+0x24>)
10044d96:	689b      	ldr	r3, [r3, #8]
10044d98:	021b      	lsls	r3, r3, #8
10044d9a:	0a19      	lsrs	r1, r3, #8
10044d9c:	687b      	ldr	r3, [r7, #4]
10044d9e:	061a      	lsls	r2, r3, #24
10044da0:	4b03      	ldr	r3, [pc, #12]	@ (10044db0 <LL_RADIO_SetReceivedNoCalDelayChk+0x24>)
10044da2:	430a      	orrs	r2, r1
10044da4:	609a      	str	r2, [r3, #8]
}
10044da6:	46c0      	nop			@ (mov r8, r8)
10044da8:	46bd      	mov	sp, r7
10044daa:	b002      	add	sp, #8
10044dac:	bd80      	pop	{r7, pc}
10044dae:	46c0      	nop			@ (mov r8, r8)
10044db0:	200000c0 	.word	0x200000c0

10044db4 <LL_RADIO_SetConfigurationEndDuration>:
  * @rmtoll WORD3          CONFIGENDDURATION       LL_RADIO_SetConfigurationEndDuration
  * @param  value
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_SetConfigurationEndDuration(uint32_t value)
{
10044db4:	b580      	push	{r7, lr}
10044db6:	b082      	sub	sp, #8
10044db8:	af00      	add	r7, sp, #0
10044dba:	6078      	str	r0, [r7, #4]
  MODIFY_REG_FIELD(BLUEGLOBWORD->WORD3, GLOBAL_WORD3_CONFIGENDDURATION, value);
10044dbc:	4b07      	ldr	r3, [pc, #28]	@ (10044ddc <LL_RADIO_SetConfigurationEndDuration+0x28>)
10044dbe:	68db      	ldr	r3, [r3, #12]
10044dc0:	22ff      	movs	r2, #255	@ 0xff
10044dc2:	4393      	bics	r3, r2
10044dc4:	0019      	movs	r1, r3
10044dc6:	687b      	ldr	r3, [r7, #4]
10044dc8:	22ff      	movs	r2, #255	@ 0xff
10044dca:	401a      	ands	r2, r3
10044dcc:	4b03      	ldr	r3, [pc, #12]	@ (10044ddc <LL_RADIO_SetConfigurationEndDuration+0x28>)
10044dce:	430a      	orrs	r2, r1
10044dd0:	60da      	str	r2, [r3, #12]
}
10044dd2:	46c0      	nop			@ (mov r8, r8)
10044dd4:	46bd      	mov	sp, r7
10044dd6:	b002      	add	sp, #8
10044dd8:	bd80      	pop	{r7, pc}
10044dda:	46c0      	nop			@ (mov r8, r8)
10044ddc:	200000c0 	.word	0x200000c0

10044de0 <LL_RADIO_SetTxDataReadyCheck>:
  * @rmtoll WORD3          TXDATAREADYCHECK       LL_RADIO_SetTxDataReadyCheck
  * @param  value
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_SetTxDataReadyCheck(uint32_t value)
{
10044de0:	b580      	push	{r7, lr}
10044de2:	b082      	sub	sp, #8
10044de4:	af00      	add	r7, sp, #0
10044de6:	6078      	str	r0, [r7, #4]
  MODIFY_REG_FIELD(BLUEGLOBWORD->WORD3, GLOBAL_WORD3_TXDATAREADYCHECK, value);
10044de8:	4b07      	ldr	r3, [pc, #28]	@ (10044e08 <LL_RADIO_SetTxDataReadyCheck+0x28>)
10044dea:	68db      	ldr	r3, [r3, #12]
10044dec:	4a07      	ldr	r2, [pc, #28]	@ (10044e0c <LL_RADIO_SetTxDataReadyCheck+0x2c>)
10044dee:	4013      	ands	r3, r2
10044df0:	0019      	movs	r1, r3
10044df2:	687b      	ldr	r3, [r7, #4]
10044df4:	021b      	lsls	r3, r3, #8
10044df6:	041b      	lsls	r3, r3, #16
10044df8:	0c1a      	lsrs	r2, r3, #16
10044dfa:	4b03      	ldr	r3, [pc, #12]	@ (10044e08 <LL_RADIO_SetTxDataReadyCheck+0x28>)
10044dfc:	430a      	orrs	r2, r1
10044dfe:	60da      	str	r2, [r3, #12]
}
10044e00:	46c0      	nop			@ (mov r8, r8)
10044e02:	46bd      	mov	sp, r7
10044e04:	b002      	add	sp, #8
10044e06:	bd80      	pop	{r7, pc}
10044e08:	200000c0 	.word	0x200000c0
10044e0c:	ffff00ff 	.word	0xffff00ff

10044e10 <LL_RADIO_SetTxDelayStart>:
  * @rmtoll WORD3          TXDELAYSTART       LL_RADIO_SetTxDelayStart
  * @param  value
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_SetTxDelayStart(uint32_t value)
{
10044e10:	b580      	push	{r7, lr}
10044e12:	b082      	sub	sp, #8
10044e14:	af00      	add	r7, sp, #0
10044e16:	6078      	str	r0, [r7, #4]
  MODIFY_REG_FIELD(BLUEGLOBWORD->WORD3, GLOBAL_WORD3_TXDELAYSTART, value);
10044e18:	4b08      	ldr	r3, [pc, #32]	@ (10044e3c <LL_RADIO_SetTxDelayStart+0x2c>)
10044e1a:	68db      	ldr	r3, [r3, #12]
10044e1c:	4a08      	ldr	r2, [pc, #32]	@ (10044e40 <LL_RADIO_SetTxDelayStart+0x30>)
10044e1e:	4013      	ands	r3, r2
10044e20:	0019      	movs	r1, r3
10044e22:	687b      	ldr	r3, [r7, #4]
10044e24:	041a      	lsls	r2, r3, #16
10044e26:	23ff      	movs	r3, #255	@ 0xff
10044e28:	041b      	lsls	r3, r3, #16
10044e2a:	401a      	ands	r2, r3
10044e2c:	4b03      	ldr	r3, [pc, #12]	@ (10044e3c <LL_RADIO_SetTxDelayStart+0x2c>)
10044e2e:	430a      	orrs	r2, r1
10044e30:	60da      	str	r2, [r3, #12]
}
10044e32:	46c0      	nop			@ (mov r8, r8)
10044e34:	46bd      	mov	sp, r7
10044e36:	b002      	add	sp, #8
10044e38:	bd80      	pop	{r7, pc}
10044e3a:	46c0      	nop			@ (mov r8, r8)
10044e3c:	200000c0 	.word	0x200000c0
10044e40:	ff00ffff 	.word	0xff00ffff

10044e44 <LL_RADIO_SetTxDelayEnd>:
  * @rmtoll WORD3          TXDELAYEND       LL_RADIO_SetTxDelayEnd
  * @param  value
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_SetTxDelayEnd(uint32_t value)
{
10044e44:	b580      	push	{r7, lr}
10044e46:	b082      	sub	sp, #8
10044e48:	af00      	add	r7, sp, #0
10044e4a:	6078      	str	r0, [r7, #4]
  MODIFY_REG_FIELD(BLUEGLOBWORD->WORD3, GLOBAL_WORD3_TXDELAYEND, value);
10044e4c:	4b08      	ldr	r3, [pc, #32]	@ (10044e70 <LL_RADIO_SetTxDelayEnd+0x2c>)
10044e4e:	68db      	ldr	r3, [r3, #12]
10044e50:	4a08      	ldr	r2, [pc, #32]	@ (10044e74 <LL_RADIO_SetTxDelayEnd+0x30>)
10044e52:	4013      	ands	r3, r2
10044e54:	0019      	movs	r1, r3
10044e56:	687b      	ldr	r3, [r7, #4]
10044e58:	061a      	lsls	r2, r3, #24
10044e5a:	23fc      	movs	r3, #252	@ 0xfc
10044e5c:	059b      	lsls	r3, r3, #22
10044e5e:	401a      	ands	r2, r3
10044e60:	4b03      	ldr	r3, [pc, #12]	@ (10044e70 <LL_RADIO_SetTxDelayEnd+0x2c>)
10044e62:	430a      	orrs	r2, r1
10044e64:	60da      	str	r2, [r3, #12]
}
10044e66:	46c0      	nop			@ (mov r8, r8)
10044e68:	46bd      	mov	sp, r7
10044e6a:	b002      	add	sp, #8
10044e6c:	bd80      	pop	{r7, pc}
10044e6e:	46c0      	nop			@ (mov r8, r8)
10044e70:	200000c0 	.word	0x200000c0
10044e74:	c0ffffff 	.word	0xc0ffffff

10044e78 <LL_RADIO_SetTransmissionReadyTimeout>:
  * @rmtoll WORD4          TXREADYTIMEOUT       LL_RADIO_SetTransmissionReadyTimeout
  * @param  value
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_SetTransmissionReadyTimeout(uint32_t value)
{
10044e78:	b580      	push	{r7, lr}
10044e7a:	b082      	sub	sp, #8
10044e7c:	af00      	add	r7, sp, #0
10044e7e:	6078      	str	r0, [r7, #4]
  MODIFY_REG_FIELD(BLUEGLOBWORD->WORD4, GLOBAL_WORD4_TXREADYTIMEOUT, value);
10044e80:	4b07      	ldr	r3, [pc, #28]	@ (10044ea0 <LL_RADIO_SetTransmissionReadyTimeout+0x28>)
10044e82:	691b      	ldr	r3, [r3, #16]
10044e84:	22ff      	movs	r2, #255	@ 0xff
10044e86:	4393      	bics	r3, r2
10044e88:	0019      	movs	r1, r3
10044e8a:	687b      	ldr	r3, [r7, #4]
10044e8c:	22ff      	movs	r2, #255	@ 0xff
10044e8e:	401a      	ands	r2, r3
10044e90:	4b03      	ldr	r3, [pc, #12]	@ (10044ea0 <LL_RADIO_SetTransmissionReadyTimeout+0x28>)
10044e92:	430a      	orrs	r2, r1
10044e94:	611a      	str	r2, [r3, #16]
}
10044e96:	46c0      	nop			@ (mov r8, r8)
10044e98:	46bd      	mov	sp, r7
10044e9a:	b002      	add	sp, #8
10044e9c:	bd80      	pop	{r7, pc}
10044e9e:	46c0      	nop			@ (mov r8, r8)
10044ea0:	200000c0 	.word	0x200000c0

10044ea4 <LL_RADIO_ChkFlagAutoclearEnable_Enable>:
  * @brief  RADIO Enable
  * @rmtoll WORD5          CHKFLAGAUTOCLEARENA            LL_RADIO_ChkFlagAutoclearEnable_Enable
  * @retval uint32_t
  */
__STATIC_INLINE void LL_RADIO_ChkFlagAutoclearEnable_Enable(void)
{
10044ea4:	b580      	push	{r7, lr}
10044ea6:	af00      	add	r7, sp, #0
  SET_BIT(BLUEGLOBWORD->WORD5, GLOBAL_WORD5_CHKFLAGAUTOCLEARENA);
10044ea8:	4b04      	ldr	r3, [pc, #16]	@ (10044ebc <LL_RADIO_ChkFlagAutoclearEnable_Enable+0x18>)
10044eaa:	695a      	ldr	r2, [r3, #20]
10044eac:	4b03      	ldr	r3, [pc, #12]	@ (10044ebc <LL_RADIO_ChkFlagAutoclearEnable_Enable+0x18>)
10044eae:	2104      	movs	r1, #4
10044eb0:	430a      	orrs	r2, r1
10044eb2:	615a      	str	r2, [r3, #20]
}
10044eb4:	46c0      	nop			@ (mov r8, r8)
10044eb6:	46bd      	mov	sp, r7
10044eb8:	bd80      	pop	{r7, pc}
10044eba:	46c0      	nop			@ (mov r8, r8)
10044ebc:	200000c0 	.word	0x200000c0

10044ec0 <LL_RADIO_NoActiveLErrorInterrupt_Enable>:
  * @brief  Indicate if INTNOACTIVELERROR is enabled
  * @rmtoll WORD5          INTNOACTIVELERROR            LL_RADIO_NoActiveLErrorInterrupt_Enable
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE void LL_RADIO_NoActiveLErrorInterrupt_Enable(void)
{
10044ec0:	b580      	push	{r7, lr}
10044ec2:	af00      	add	r7, sp, #0
  SET_BIT(BLUEGLOBWORD->WORD5, GLOBAL_WORD5_INTNOACTIVELERROR);
10044ec4:	4b04      	ldr	r3, [pc, #16]	@ (10044ed8 <LL_RADIO_NoActiveLErrorInterrupt_Enable+0x18>)
10044ec6:	695a      	ldr	r2, [r3, #20]
10044ec8:	4b03      	ldr	r3, [pc, #12]	@ (10044ed8 <LL_RADIO_NoActiveLErrorInterrupt_Enable+0x18>)
10044eca:	2180      	movs	r1, #128	@ 0x80
10044ecc:	0409      	lsls	r1, r1, #16
10044ece:	430a      	orrs	r2, r1
10044ed0:	615a      	str	r2, [r3, #20]
}
10044ed2:	46c0      	nop			@ (mov r8, r8)
10044ed4:	46bd      	mov	sp, r7
10044ed6:	bd80      	pop	{r7, pc}
10044ed8:	200000c0 	.word	0x200000c0

10044edc <LL_RADIO_TxRxSkipInterrupt_Enable>:
  * @brief  RADIO Enable
  * @rmtoll WORD5          INTTXRXSKIP            LL_RADIO_TxRxSkipInterrupt_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_TxRxSkipInterrupt_Enable(void)
{
10044edc:	b580      	push	{r7, lr}
10044ede:	af00      	add	r7, sp, #0
  SET_BIT(BLUEGLOBWORD->WORD5, GLOBAL_WORD5_INTTXRXSKIP);
10044ee0:	4b04      	ldr	r3, [pc, #16]	@ (10044ef4 <LL_RADIO_TxRxSkipInterrupt_Enable+0x18>)
10044ee2:	695a      	ldr	r2, [r3, #20]
10044ee4:	4b03      	ldr	r3, [pc, #12]	@ (10044ef4 <LL_RADIO_TxRxSkipInterrupt_Enable+0x18>)
10044ee6:	2180      	movs	r1, #128	@ 0x80
10044ee8:	0589      	lsls	r1, r1, #22
10044eea:	430a      	orrs	r2, r1
10044eec:	615a      	str	r2, [r3, #20]
}
10044eee:	46c0      	nop			@ (mov r8, r8)
10044ef0:	46bd      	mov	sp, r7
10044ef2:	bd80      	pop	{r7, pc}
10044ef4:	200000c0 	.word	0x200000c0

10044ef8 <LL_RADIO_Active2ErrorInterrupt_Enable>:
  * @brief  RADIO Enable
  * @rmtoll WORD5          INTACTIVE2ERR            LL_RADIO_Active2ErrorInterrupt_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_Active2ErrorInterrupt_Enable(void)
{
10044ef8:	b580      	push	{r7, lr}
10044efa:	af00      	add	r7, sp, #0
  SET_BIT(BLUEGLOBWORD->WORD5, GLOBAL_WORD5_INTACTIVE2ERR);
10044efc:	4b04      	ldr	r3, [pc, #16]	@ (10044f10 <LL_RADIO_Active2ErrorInterrupt_Enable+0x18>)
10044efe:	695a      	ldr	r2, [r3, #20]
10044f00:	4b03      	ldr	r3, [pc, #12]	@ (10044f10 <LL_RADIO_Active2ErrorInterrupt_Enable+0x18>)
10044f02:	2180      	movs	r1, #128	@ 0x80
10044f04:	05c9      	lsls	r1, r1, #23
10044f06:	430a      	orrs	r2, r1
10044f08:	615a      	str	r2, [r3, #20]
}
10044f0a:	46c0      	nop			@ (mov r8, r8)
10044f0c:	46bd      	mov	sp, r7
10044f0e:	bd80      	pop	{r7, pc}
10044f10:	200000c0 	.word	0x200000c0

10044f14 <LL_RADIO_TIMER_DisableTimer1>:
{
10044f14:	b580      	push	{r7, lr}
10044f16:	b082      	sub	sp, #8
10044f18:	af00      	add	r7, sp, #0
10044f1a:	6078      	str	r0, [r7, #4]
  MODIFY_REG_FIELD(BLUEx->TIMEOUTDESTREG, BLUE_TIMEOUTDESTREG_DESTINATION, 0);
10044f1c:	687b      	ldr	r3, [r7, #4]
10044f1e:	68db      	ldr	r3, [r3, #12]
10044f20:	2203      	movs	r2, #3
10044f22:	4393      	bics	r3, r2
10044f24:	001a      	movs	r2, r3
10044f26:	687b      	ldr	r3, [r7, #4]
10044f28:	60da      	str	r2, [r3, #12]
}
10044f2a:	46c0      	nop			@ (mov r8, r8)
10044f2c:	46bd      	mov	sp, r7
10044f2e:	b002      	add	sp, #8
10044f30:	bd80      	pop	{r7, pc}

10044f32 <LL_RADIO_TIMER_DisableTimer2>:
{
10044f32:	b580      	push	{r7, lr}
10044f34:	b082      	sub	sp, #8
10044f36:	af00      	add	r7, sp, #0
10044f38:	6078      	str	r0, [r7, #4]
  MODIFY_REG_FIELD(BLUEx->TIMEOUTDESTREG, BLUE_TIMEOUTDESTREG_DESTINATION, 0);
10044f3a:	687b      	ldr	r3, [r7, #4]
10044f3c:	68db      	ldr	r3, [r3, #12]
10044f3e:	2203      	movs	r2, #3
10044f40:	4393      	bics	r3, r2
10044f42:	001a      	movs	r2, r3
10044f44:	687b      	ldr	r3, [r7, #4]
10044f46:	60da      	str	r2, [r3, #12]
}
10044f48:	46c0      	nop			@ (mov r8, r8)
10044f4a:	46bd      	mov	sp, r7
10044f4c:	b002      	add	sp, #8
10044f4e:	bd80      	pop	{r7, pc}

10044f50 <LL_RADIO_TIMER_DisableBLEWakeupTimer>:
{
10044f50:	b580      	push	{r7, lr}
10044f52:	b082      	sub	sp, #8
10044f54:	af00      	add	r7, sp, #0
10044f56:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(WAKEUPx->BLUE_SLEEP_REQUEST_MODE, WAKEUP_BLUE_SLEEP_REQUEST_MODE_BLE_WAKEUP_EN);
10044f58:	687b      	ldr	r3, [r7, #4]
10044f5a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
10044f5c:	4a03      	ldr	r2, [pc, #12]	@ (10044f6c <LL_RADIO_TIMER_DisableBLEWakeupTimer+0x1c>)
10044f5e:	401a      	ands	r2, r3
10044f60:	687b      	ldr	r3, [r7, #4]
10044f62:	629a      	str	r2, [r3, #40]	@ 0x28
}
10044f64:	46c0      	nop			@ (mov r8, r8)
10044f66:	46bd      	mov	sp, r7
10044f68:	b002      	add	sp, #8
10044f6a:	bd80      	pop	{r7, pc}
10044f6c:	bfffffff 	.word	0xbfffffff

10044f70 <CondRoutineTrue>:
  */

#if USE_RADIO_PROPRIETARY_DRIVER

static uint8_t CondRoutineTrue(ActionPacket *p)
{
10044f70:	b580      	push	{r7, lr}
10044f72:	b082      	sub	sp, #8
10044f74:	af00      	add	r7, sp, #0
10044f76:	6078      	str	r0, [r7, #4]
  return TRUE;
10044f78:	2301      	movs	r3, #1
}
10044f7a:	0018      	movs	r0, r3
10044f7c:	46bd      	mov	sp, r7
10044f7e:	b002      	add	sp, #8
10044f80:	bd80      	pop	{r7, pc}

10044f82 <CondRoutineRxTrue>:
{
  return TRUE;
}

static uint8_t CondRoutineRxTrue(ActionPacket *p)
{
10044f82:	b580      	push	{r7, lr}
10044f84:	b082      	sub	sp, #8
10044f86:	af00      	add	r7, sp, #0
10044f88:	6078      	str	r0, [r7, #4]
  /* received a packet */
  if ((p->status & BLUE_INTERRUPT1REG_RCVOK) != 0)
10044f8a:	687b      	ldr	r3, [r7, #4]
10044f8c:	68db      	ldr	r3, [r3, #12]
10044f8e:	2b00      	cmp	r3, #0
10044f90:	da01      	bge.n	10044f96 <CondRoutineRxTrue+0x14>
  {
    /* packet received without CRC error */
    return TRUE;
10044f92:	2301      	movs	r3, #1
10044f94:	e000      	b.n	10044f98 <CondRoutineRxTrue+0x16>
  }
  return FALSE;
10044f96:	2300      	movs	r3, #0
}
10044f98:	0018      	movs	r0, r3
10044f9a:	46bd      	mov	sp, r7
10044f9c:	b002      	add	sp, #8
10044f9e:	bd80      	pop	{r7, pc}

10044fa0 <HAL_RADIO_Init>:
/**
  * @brief  Initializes the radio.
  * @retval None
  */
void HAL_RADIO_Init(RADIO_HandleTypeDef *hradio)
{
10044fa0:	b590      	push	{r4, r7, lr}
10044fa2:	b08d      	sub	sp, #52	@ 0x34
10044fa4:	af00      	add	r7, sp, #0
10044fa6:	6078      	str	r0, [r7, #4]
  uint32_t mr_ble_iptat;
  uint32_t mr_ble_vbg;
  uint32_t mr_ble_rxadc_delay_i;
  uint32_t mr_ble_rxadc_delay_q;
  uint8_t mr_ble_rxadc_delay_flag;
  uint8_t *hot_table_radio_config = (uint8_t *)&hot_table_radio_config_u32[4];
10044fa8:	4b14      	ldr	r3, [pc, #80]	@ (10044ffc <HAL_RADIO_Init+0x5c>)
10044faa:	617b      	str	r3, [r7, #20]
  uint8_t index;

  /* Retrieve Trimming values from engineering flash locations */
  if (*(volatile uint32_t *)VALIDITY_LOCATION == VALIDITY_TAG)
10044fac:	4b14      	ldr	r3, [pc, #80]	@ (10045000 <HAL_RADIO_Init+0x60>)
10044fae:	681b      	ldr	r3, [r3, #0]
10044fb0:	4a14      	ldr	r2, [pc, #80]	@ (10045004 <HAL_RADIO_Init+0x64>)
10044fb2:	4293      	cmp	r3, r2
10044fb4:	d12a      	bne.n	1004500c <HAL_RADIO_Init+0x6c>
  {
    mr_ble_ibias            = ((*(volatile uint32_t *)MR_TRIMMING_LOCATION) & MR_BLE_IBIAS_TRIM_Msk) >> MR_BLE_IBIAS_TRIM_Pos;
10044fb6:	4b14      	ldr	r3, [pc, #80]	@ (10045008 <HAL_RADIO_Init+0x68>)
10044fb8:	681b      	ldr	r3, [r3, #0]
10044fba:	0a1b      	lsrs	r3, r3, #8
10044fbc:	220f      	movs	r2, #15
10044fbe:	4013      	ands	r3, r2
10044fc0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    mr_ble_iptat            = ((*(volatile uint32_t *)MR_TRIMMING_LOCATION) & MR_BLE_IPTAT_TRIM_Msk) >> MR_BLE_IPTAT_TRIM_Pos;
10044fc2:	4b11      	ldr	r3, [pc, #68]	@ (10045008 <HAL_RADIO_Init+0x68>)
10044fc4:	681b      	ldr	r3, [r3, #0]
10044fc6:	0b1b      	lsrs	r3, r3, #12
10044fc8:	220f      	movs	r2, #15
10044fca:	4013      	ands	r3, r2
10044fcc:	62bb      	str	r3, [r7, #40]	@ 0x28
    mr_ble_vbg              = ((*(volatile uint32_t *)MR_TRIMMING_LOCATION) & MR_BLE_VBG_TRIM_Msk) >> MR_BLE_VBG_TRIM_Pos;
10044fce:	4b0e      	ldr	r3, [pc, #56]	@ (10045008 <HAL_RADIO_Init+0x68>)
10044fd0:	681b      	ldr	r3, [r3, #0]
10044fd2:	0c1b      	lsrs	r3, r3, #16
10044fd4:	220f      	movs	r2, #15
10044fd6:	4013      	ands	r3, r2
10044fd8:	627b      	str	r3, [r7, #36]	@ 0x24
    mr_ble_rxadc_delay_i    = ((*(volatile uint32_t *)MR_TRIMMING_LOCATION) & MR_BLE_RXADC_DELAY_I_TRIM_Msk) >> MR_BLE_RXADC_DELAY_I_TRIM_Pos;
10044fda:	4b0b      	ldr	r3, [pc, #44]	@ (10045008 <HAL_RADIO_Init+0x68>)
10044fdc:	681b      	ldr	r3, [r3, #0]
10044fde:	0d1b      	lsrs	r3, r3, #20
10044fe0:	2207      	movs	r2, #7
10044fe2:	4013      	ands	r3, r2
10044fe4:	623b      	str	r3, [r7, #32]
    mr_ble_rxadc_delay_q    = ((*(volatile uint32_t *)MR_TRIMMING_LOCATION) & MR_BLE_RXADC_DELAY_Q_TRIM_Msk) >> MR_BLE_RXADC_DELAY_Q_TRIM_Pos;
10044fe6:	4b08      	ldr	r3, [pc, #32]	@ (10045008 <HAL_RADIO_Init+0x68>)
10044fe8:	681b      	ldr	r3, [r3, #0]
10044fea:	0e1b      	lsrs	r3, r3, #24
10044fec:	2207      	movs	r2, #7
10044fee:	4013      	ands	r3, r2
10044ff0:	61fb      	str	r3, [r7, #28]
    mr_ble_rxadc_delay_flag = TRUE;
10044ff2:	231b      	movs	r3, #27
10044ff4:	18fb      	adds	r3, r7, r3
10044ff6:	2201      	movs	r2, #1
10044ff8:	701a      	strb	r2, [r3, #0]
10044ffa:	e011      	b.n	10045020 <HAL_RADIO_Init+0x80>
10044ffc:	20000574 	.word	0x20000574
10045000:	10001ef8 	.word	0x10001ef8
10045004:	fcbceccc 	.word	0xfcbceccc
10045008:	10001ee8 	.word	0x10001ee8
  }
  else
  {
    mr_ble_ibias = 0x08;
1004500c:	2308      	movs	r3, #8
1004500e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    mr_ble_iptat = 0x07;
10045010:	2307      	movs	r3, #7
10045012:	62bb      	str	r3, [r7, #40]	@ 0x28
    mr_ble_vbg   = 0x08;
10045014:	2308      	movs	r3, #8
10045016:	627b      	str	r3, [r7, #36]	@ 0x24
    mr_ble_rxadc_delay_flag = FALSE;
10045018:	231b      	movs	r3, #27
1004501a:	18fb      	adds	r3, r7, r3
1004501c:	2200      	movs	r2, #0
1004501e:	701a      	strb	r2, [r3, #0]
    mr_ble_rxadc_delay_q    = 3;
    mr_ble_rxadc_delay_flag = TRUE;
#endif /* STM32WB05 or STM32WB09 */
  }

  BLUEGLOB->BYTE4 = BLUE_IDLE_0;
10045020:	4bfc      	ldr	r3, [pc, #1008]	@ (10045414 <HAL_RADIO_Init+0x474>)
10045022:	2200      	movs	r2, #0
10045024:	711a      	strb	r2, [r3, #4]
  if (hradio != NULL)
10045026:	687b      	ldr	r3, [r7, #4]
10045028:	2b00      	cmp	r3, #0
1004502a:	d003      	beq.n	10045034 <HAL_RADIO_Init+0x94>
  {
    HAL_RADIO_MspInit(hradio);
1004502c:	687b      	ldr	r3, [r7, #4]
1004502e:	0018      	movs	r0, r3
10045030:	f7fd ff08 	bl	10042e44 <HAL_RADIO_MspInit>
  }
  LL_RADIO_TIMER_DisableTimer1(BLUE);
10045034:	23c0      	movs	r3, #192	@ 0xc0
10045036:	05db      	lsls	r3, r3, #23
10045038:	0018      	movs	r0, r3
1004503a:	f7ff ff6b 	bl	10044f14 <LL_RADIO_TIMER_DisableTimer1>
  LL_RADIO_TIMER_DisableTimer2(BLUE);
1004503e:	23c0      	movs	r3, #192	@ 0xc0
10045040:	05db      	lsls	r3, r3, #23
10045042:	0018      	movs	r0, r3
10045044:	f7ff ff75 	bl	10044f32 <LL_RADIO_TIMER_DisableTimer2>
  LL_RADIO_TIMER_DisableBLEWakeupTimer(WAKEUP);
10045048:	4bf3      	ldr	r3, [pc, #972]	@ (10045418 <HAL_RADIO_Init+0x478>)
1004504a:	0018      	movs	r0, r3
1004504c:	f7ff ff80 	bl	10044f50 <LL_RADIO_TIMER_DisableBLEWakeupTimer>

  /* Write Radio Trimming values in the registers: Cbias' VBG, Cbias' IPTAT, Cbias' IBIAS, RxAnaUsr Delay Trim I & Q */
  MODIFY_REG_FIELD(RRM->CBIAS1_ANA_ENG, RRM_CBIAS1_ANA_ENG_RFD_CBIAS_VBG_TRIM, mr_ble_vbg);
10045050:	4af2      	ldr	r2, [pc, #968]	@ (1004541c <HAL_RADIO_Init+0x47c>)
10045052:	239e      	movs	r3, #158	@ 0x9e
10045054:	009b      	lsls	r3, r3, #2
10045056:	58d3      	ldr	r3, [r2, r3]
10045058:	220f      	movs	r2, #15
1004505a:	4393      	bics	r3, r2
1004505c:	001a      	movs	r2, r3
1004505e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10045060:	210f      	movs	r1, #15
10045062:	400b      	ands	r3, r1
10045064:	49ed      	ldr	r1, [pc, #948]	@ (1004541c <HAL_RADIO_Init+0x47c>)
10045066:	431a      	orrs	r2, r3
10045068:	239e      	movs	r3, #158	@ 0x9e
1004506a:	009b      	lsls	r3, r3, #2
1004506c:	50ca      	str	r2, [r1, r3]
  MODIFY_REG_FIELD(RRM->CBIAS0_ANA_ENG, RRM_CBIAS0_ANA_ENG_RFD_CBIAS_IPTAT_TRIM, mr_ble_iptat);
1004506e:	4aeb      	ldr	r2, [pc, #940]	@ (1004541c <HAL_RADIO_Init+0x47c>)
10045070:	239d      	movs	r3, #157	@ 0x9d
10045072:	009b      	lsls	r3, r3, #2
10045074:	58d3      	ldr	r3, [r2, r3]
10045076:	22f0      	movs	r2, #240	@ 0xf0
10045078:	4393      	bics	r3, r2
1004507a:	001a      	movs	r2, r3
1004507c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
1004507e:	011b      	lsls	r3, r3, #4
10045080:	21ff      	movs	r1, #255	@ 0xff
10045082:	400b      	ands	r3, r1
10045084:	49e5      	ldr	r1, [pc, #916]	@ (1004541c <HAL_RADIO_Init+0x47c>)
10045086:	431a      	orrs	r2, r3
10045088:	239d      	movs	r3, #157	@ 0x9d
1004508a:	009b      	lsls	r3, r3, #2
1004508c:	50ca      	str	r2, [r1, r3]
  MODIFY_REG_FIELD(RRM->CBIAS0_ANA_ENG, RRM_CBIAS0_ANA_ENG_RFD_CBIAS_IBIAS_TRIM, mr_ble_ibias);
1004508e:	4ae3      	ldr	r2, [pc, #908]	@ (1004541c <HAL_RADIO_Init+0x47c>)
10045090:	239d      	movs	r3, #157	@ 0x9d
10045092:	009b      	lsls	r3, r3, #2
10045094:	58d3      	ldr	r3, [r2, r3]
10045096:	220f      	movs	r2, #15
10045098:	4393      	bics	r3, r2
1004509a:	001a      	movs	r2, r3
1004509c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
1004509e:	210f      	movs	r1, #15
100450a0:	400b      	ands	r3, r1
100450a2:	49de      	ldr	r1, [pc, #888]	@ (1004541c <HAL_RADIO_Init+0x47c>)
100450a4:	431a      	orrs	r2, r3
100450a6:	239d      	movs	r3, #157	@ 0x9d
100450a8:	009b      	lsls	r3, r3, #2
100450aa:	50ca      	str	r2, [r1, r3]
  if (mr_ble_rxadc_delay_flag)
100450ac:	231b      	movs	r3, #27
100450ae:	18fb      	adds	r3, r7, r3
100450b0:	781b      	ldrb	r3, [r3, #0]
100450b2:	2b00      	cmp	r3, #0
100450b4:	d01e      	beq.n	100450f4 <HAL_RADIO_Init+0x154>
  {
    MODIFY_REG_FIELD(RRM->RXADC_ANA_USR, RRM_RXADC_ANA_USR_RFD_RXADC_DELAYTRIM_I, mr_ble_rxadc_delay_i);
100450b6:	4ad9      	ldr	r2, [pc, #868]	@ (1004541c <HAL_RADIO_Init+0x47c>)
100450b8:	2392      	movs	r3, #146	@ 0x92
100450ba:	009b      	lsls	r3, r3, #2
100450bc:	58d3      	ldr	r3, [r2, r3]
100450be:	2207      	movs	r2, #7
100450c0:	4393      	bics	r3, r2
100450c2:	001a      	movs	r2, r3
100450c4:	6a3b      	ldr	r3, [r7, #32]
100450c6:	2107      	movs	r1, #7
100450c8:	400b      	ands	r3, r1
100450ca:	49d4      	ldr	r1, [pc, #848]	@ (1004541c <HAL_RADIO_Init+0x47c>)
100450cc:	431a      	orrs	r2, r3
100450ce:	2392      	movs	r3, #146	@ 0x92
100450d0:	009b      	lsls	r3, r3, #2
100450d2:	50ca      	str	r2, [r1, r3]
    MODIFY_REG_FIELD(RRM->RXADC_ANA_USR, RRM_RXADC_ANA_USR_RFD_RXADC_DELAYTRIM_Q, mr_ble_rxadc_delay_q);
100450d4:	4ad1      	ldr	r2, [pc, #836]	@ (1004541c <HAL_RADIO_Init+0x47c>)
100450d6:	2392      	movs	r3, #146	@ 0x92
100450d8:	009b      	lsls	r3, r3, #2
100450da:	58d3      	ldr	r3, [r2, r3]
100450dc:	2238      	movs	r2, #56	@ 0x38
100450de:	4393      	bics	r3, r2
100450e0:	001a      	movs	r2, r3
100450e2:	69fb      	ldr	r3, [r7, #28]
100450e4:	00db      	lsls	r3, r3, #3
100450e6:	2138      	movs	r1, #56	@ 0x38
100450e8:	400b      	ands	r3, r1
100450ea:	49cc      	ldr	r1, [pc, #816]	@ (1004541c <HAL_RADIO_Init+0x47c>)
100450ec:	431a      	orrs	r2, r3
100450ee:	2392      	movs	r3, #146	@ 0x92
100450f0:	009b      	lsls	r3, r3, #2
100450f2:	50ca      	str	r2, [r1, r3]
  }

  /* Radio AFC configuration */
  MODIFY_REG(RRM->AFC1_DIG_ENG, RRM_AFC1_DIG_ENG_AFC_DELAY_AFTER | RRM_AFC1_DIG_ENG_AFC_DELAY_BEFORE,
100450f4:	4ac9      	ldr	r2, [pc, #804]	@ (1004541c <HAL_RADIO_Init+0x47c>)
100450f6:	23a4      	movs	r3, #164	@ 0xa4
100450f8:	005b      	lsls	r3, r3, #1
100450fa:	58d3      	ldr	r3, [r2, r3]
100450fc:	22ff      	movs	r2, #255	@ 0xff
100450fe:	4393      	bics	r3, r2
10045100:	49c6      	ldr	r1, [pc, #792]	@ (1004541c <HAL_RADIO_Init+0x47c>)
10045102:	2255      	movs	r2, #85	@ 0x55
10045104:	431a      	orrs	r2, r3
10045106:	23a4      	movs	r3, #164	@ 0xa4
10045108:	005b      	lsls	r3, r3, #1
1004510a:	50ca      	str	r2, [r1, r3]
             ((AFC_DELAY_BEFORE << RRM_AFC1_DIG_ENG_AFC_DELAY_BEFORE_Pos) & RRM_AFC1_DIG_ENG_AFC_DELAY_BEFORE_Msk) |
             ((AFC_DELAY_AFTER << RRM_AFC1_DIG_ENG_AFC_DELAY_AFTER_Pos) & RRM_AFC1_DIG_ENG_AFC_DELAY_AFTER_Msk));
  MODIFY_REG(RRM->CR0_DIG_ENG, RRM_CR0_DIG_ENG_CR_GAIN_BEFORE | RRM_CR0_DIG_ENG_CR_GAIN_AFTER,
1004510c:	4ac3      	ldr	r2, [pc, #780]	@ (1004541c <HAL_RADIO_Init+0x47c>)
1004510e:	23aa      	movs	r3, #170	@ 0xaa
10045110:	005b      	lsls	r3, r3, #1
10045112:	58d3      	ldr	r3, [r2, r3]
10045114:	22ff      	movs	r2, #255	@ 0xff
10045116:	4393      	bics	r3, r2
10045118:	49c0      	ldr	r1, [pc, #768]	@ (1004541c <HAL_RADIO_Init+0x47c>)
1004511a:	2266      	movs	r2, #102	@ 0x66
1004511c:	431a      	orrs	r2, r3
1004511e:	23aa      	movs	r3, #170	@ 0xaa
10045120:	005b      	lsls	r3, r3, #1
10045122:	50ca      	str	r2, [r1, r3]
             ((CR_GAIN_BEFORE << RRM_CR0_DIG_ENG_CR_GAIN_BEFORE_Pos) & RRM_CR0_DIG_ENG_CR_GAIN_BEFORE_Msk) |
             ((CR_GAIN_AFTER << RRM_CR0_DIG_ENG_CR_GAIN_AFTER_Pos) & RRM_CR0_DIG_ENG_CR_GAIN_AFTER_Msk));
  MODIFY_REG(RRM->CR0_LR, RRM_CR0_LR_CR_LR_GAIN_BEFORE | RRM_CR0_LR_CR_LR_GAIN_AFTER,
10045124:	4abd      	ldr	r2, [pc, #756]	@ (1004541c <HAL_RADIO_Init+0x47c>)
10045126:	23b4      	movs	r3, #180	@ 0xb4
10045128:	005b      	lsls	r3, r3, #1
1004512a:	58d3      	ldr	r3, [r2, r3]
1004512c:	22ff      	movs	r2, #255	@ 0xff
1004512e:	4393      	bics	r3, r2
10045130:	49ba      	ldr	r1, [pc, #744]	@ (1004541c <HAL_RADIO_Init+0x47c>)
10045132:	2255      	movs	r2, #85	@ 0x55
10045134:	431a      	orrs	r2, r3
10045136:	23b4      	movs	r3, #180	@ 0xb4
10045138:	005b      	lsls	r3, r3, #1
1004513a:	50ca      	str	r2, [r1, r3]
             ((CR_LR_GAIN_BEFORE << RRM_CR0_LR_CR_LR_GAIN_BEFORE_Pos) & RRM_CR0_LR_CR_LR_GAIN_BEFORE_Msk) |
             ((CR_LR_GAIN_AFTER << RRM_CR0_LR_CR_LR_GAIN_AFTER_Pos) & RRM_CR0_LR_CR_LR_GAIN_AFTER_Msk));

  /* Radio RSSI Threshold configuration */
  MODIFY_REG_FIELD(RRM->LR_RSSI_THR_DIG_ENG, RRM_LR_RSSI_THR_DIG_ENG_LR_RSSI_THR, LR_RSSI_THR);
1004513c:	4ab7      	ldr	r2, [pc, #732]	@ (1004541c <HAL_RADIO_Init+0x47c>)
1004513e:	23c4      	movs	r3, #196	@ 0xc4
10045140:	005b      	lsls	r3, r3, #1
10045142:	58d3      	ldr	r3, [r2, r3]
10045144:	22ff      	movs	r2, #255	@ 0xff
10045146:	4393      	bics	r3, r2
10045148:	49b4      	ldr	r1, [pc, #720]	@ (1004541c <HAL_RADIO_Init+0x47c>)
1004514a:	221d      	movs	r2, #29
1004514c:	431a      	orrs	r2, r3
1004514e:	23c4      	movs	r3, #196	@ 0xc4
10045150:	005b      	lsls	r3, r3, #1
10045152:	50ca      	str	r2, [r1, r3]
  MODIFY_REG_FIELD(RRM->LR_PD_THR_DIG_ENG, RRM_LR_PD_THR_DIG_ENG_LR_PD_THR, LR_PD_THR);
10045154:	4ab1      	ldr	r2, [pc, #708]	@ (1004541c <HAL_RADIO_Init+0x47c>)
10045156:	23c2      	movs	r3, #194	@ 0xc2
10045158:	005b      	lsls	r3, r3, #1
1004515a:	58d3      	ldr	r3, [r2, r3]
1004515c:	22ff      	movs	r2, #255	@ 0xff
1004515e:	4393      	bics	r3, r2
10045160:	49ae      	ldr	r1, [pc, #696]	@ (1004541c <HAL_RADIO_Init+0x47c>)
10045162:	2259      	movs	r2, #89	@ 0x59
10045164:	431a      	orrs	r2, r3
10045166:	23c2      	movs	r3, #194	@ 0xc2
10045168:	005b      	lsls	r3, r3, #1
1004516a:	50ca      	str	r2, [r1, r3]
  MODIFY_REG_FIELD(RRM->LR_AAC_THR_DIG_ENG, RRM_LR_AAC_THR_DIG_ENG_LR_AAC_THR, LR_AAC_THR);
1004516c:	4aab      	ldr	r2, [pc, #684]	@ (1004541c <HAL_RADIO_Init+0x47c>)
1004516e:	23c6      	movs	r3, #198	@ 0xc6
10045170:	005b      	lsls	r3, r3, #1
10045172:	58d3      	ldr	r3, [r2, r3]
10045174:	22ff      	movs	r2, #255	@ 0xff
10045176:	4393      	bics	r3, r2
10045178:	49a8      	ldr	r1, [pc, #672]	@ (1004541c <HAL_RADIO_Init+0x47c>)
1004517a:	2232      	movs	r2, #50	@ 0x32
1004517c:	431a      	orrs	r2, r3
1004517e:	23c6      	movs	r3, #198	@ 0xc6
10045180:	005b      	lsls	r3, r3, #1
10045182:	50ca      	str	r2, [r1, r3]

  /* Enable Viterbi */
  SET_BIT(RRM->VIT_CONF_DIG_ENG, RRM_VIT_CONF_DIG_ENG_VIT_CONF_0);
10045184:	4aa5      	ldr	r2, [pc, #660]	@ (1004541c <HAL_RADIO_Init+0x47c>)
10045186:	23b6      	movs	r3, #182	@ 0xb6
10045188:	005b      	lsls	r3, r3, #1
1004518a:	58d3      	ldr	r3, [r2, r3]
1004518c:	49a3      	ldr	r1, [pc, #652]	@ (1004541c <HAL_RADIO_Init+0x47c>)
1004518e:	2201      	movs	r2, #1
10045190:	431a      	orrs	r2, r3
10045192:	23b6      	movs	r3, #182	@ 0xb6
10045194:	005b      	lsls	r3, r3, #1
10045196:	50ca      	str	r2, [r1, r3]
  MODIFY_REG_FIELD(RRM->ANTSW_DIG0_USR, RRM_ANTSW0_DIG_USR_RX_TIME_TO_SAMPLE, RX_TIME_TO_SAMPLE);
  MODIFY_REG_FIELD(RRM->ANTSW_DIG1_USR, RRM_ANTSW1_DIG_USR_RX_TIME_TO_SWITCH, RX_TIME_TO_SWITCH);
#endif /* STM32WB05 or STM32WB09 */

  /*Set InitDelay*/
  LL_RADIO_SetWakeupInitDelay(INITDELAY_WAKEUP);
10045198:	2040      	movs	r0, #64	@ 0x40
1004519a:	f7ff fd69 	bl	10044c70 <LL_RADIO_SetWakeupInitDelay>
  LL_RADIO_SetTimer12InitDelayCal(INITDELAY_TIMER12_CAL);
1004519e:	203f      	movs	r0, #63	@ 0x3f
100451a0:	f7ff fd7e 	bl	10044ca0 <LL_RADIO_SetTimer12InitDelayCal>
  LL_RADIO_SetTimer12InitDelayNoCal(INITDELAY_TIMER2_NOCAL);
100451a4:	2009      	movs	r0, #9
100451a6:	f7ff fd95 	bl	10044cd4 <LL_RADIO_SetTimer12InitDelayNoCal>

  /*Set Init_radio_delay*/
  LL_RADIO_SetReceivedCalDelayChk(DELAYCHK_RECEIVE_CAL);
100451aa:	2074      	movs	r0, #116	@ 0x74
100451ac:	f7ff fdd4 	bl	10044d58 <LL_RADIO_SetReceivedCalDelayChk>
  LL_RADIO_SetReceivedNoCalDelayChk(DELAYCHK_RECEIVE_NOCAL);
100451b0:	2038      	movs	r0, #56	@ 0x38
100451b2:	f7ff fdeb 	bl	10044d8c <LL_RADIO_SetReceivedNoCalDelayChk>
  LL_RADIO_SetTransmitCalDelayChk(DELAYCHK_TRANSMIT_CAL);
100451b6:	2076      	movs	r0, #118	@ 0x76
100451b8:	f7ff fda0 	bl	10044cfc <LL_RADIO_SetTransmitCalDelayChk>
  LL_RADIO_SetTransmitNoCalDelayChk(DELAYCHK_TRANSMIT_NOCAL);
100451bc:	203a      	movs	r0, #58	@ 0x3a
100451be:	f7ff fdb3 	bl	10044d28 <LL_RADIO_SetTransmitNoCalDelayChk>

  /* Initial and final TX delays: control the on-air start time of the TX packet
  *  and the length of the packet "tail" after last bit is transmitted
  */
  LL_RADIO_SetTxDelayStart(TXDELAY_START);
100451c2:	2010      	movs	r0, #16
100451c4:	f7ff fe24 	bl	10044e10 <LL_RADIO_SetTxDelayStart>
  LL_RADIO_SetTxDelayEnd(TXDELAY_END);
100451c8:	2010      	movs	r0, #16
100451ca:	f7ff fe3b 	bl	10044e44 <LL_RADIO_SetTxDelayEnd>

  /* Timeout for TX ready signal from the radio FSM after the 2nd init phase
  *  has expired
  */
  LL_RADIO_SetTransmissionReadyTimeout(TXREADY_TIMEOUT);
100451ce:	2005      	movs	r0, #5
100451d0:	f7ff fe52 	bl	10044e78 <LL_RADIO_SetTransmissionReadyTimeout>

  /* Timing for the various programming phases of the radio, modem and memory
  *  pointers.
  */
  LL_RADIO_SetConfigurationEndDuration(CONFIG_END_DURATION);
100451d4:	2014      	movs	r0, #20
100451d6:	f7ff fded 	bl	10044db4 <LL_RADIO_SetConfigurationEndDuration>
  LL_RADIO_SetTxDataReadyCheck(CHECK_TXDATAREADY);
100451da:	2005      	movs	r0, #5
100451dc:	f7ff fe00 	bl	10044de0 <LL_RADIO_SetTxDataReadyCheck>

  LL_RADIO_ChkFlagAutoclearEnable_Enable();
100451e0:	f7ff fe60 	bl	10044ea4 <LL_RADIO_ChkFlagAutoclearEnable_Enable>
  LL_RADIO_NoActiveLErrorInterrupt_Enable();
100451e4:	f7ff fe6c 	bl	10044ec0 <LL_RADIO_NoActiveLErrorInterrupt_Enable>
  LL_RADIO_TxRxSkipInterrupt_Enable();
100451e8:	f7ff fe78 	bl	10044edc <LL_RADIO_TxRxSkipInterrupt_Enable>
  /* The commands in the hot table start at word 4
  * The words 0 to 2 are used to point to the command list
  * for the various trigger events, word 3 is a null command
  * (see function BLEPLAT_CNTR_SetRadioConfigData)
  */
  index = 0;
100451ec:	2013      	movs	r0, #19
100451ee:	183b      	adds	r3, r7, r0
100451f0:	2200      	movs	r2, #0
100451f2:	701a      	strb	r2, [r3, #0]
  hot_table_radio_config[index++] = 0x01;
100451f4:	183b      	adds	r3, r7, r0
100451f6:	781b      	ldrb	r3, [r3, #0]
100451f8:	183a      	adds	r2, r7, r0
100451fa:	1c59      	adds	r1, r3, #1
100451fc:	7011      	strb	r1, [r2, #0]
100451fe:	001a      	movs	r2, r3
10045200:	697b      	ldr	r3, [r7, #20]
10045202:	189b      	adds	r3, r3, r2
10045204:	2201      	movs	r2, #1
10045206:	701a      	strb	r2, [r3, #0]
  hot_table_radio_config[index++] = RRM_CBIAS1_ANA_ENG;
10045208:	183b      	adds	r3, r7, r0
1004520a:	781b      	ldrb	r3, [r3, #0]
1004520c:	183a      	adds	r2, r7, r0
1004520e:	1c59      	adds	r1, r3, #1
10045210:	7011      	strb	r1, [r2, #0]
10045212:	001a      	movs	r2, r3
10045214:	697b      	ldr	r3, [r7, #20]
10045216:	189b      	adds	r3, r3, r2
10045218:	225e      	movs	r2, #94	@ 0x5e
1004521a:	701a      	strb	r2, [r3, #0]
  hot_table_radio_config[index++] = RRM->CBIAS1_ANA_ENG;
1004521c:	4a7f      	ldr	r2, [pc, #508]	@ (1004541c <HAL_RADIO_Init+0x47c>)
1004521e:	239e      	movs	r3, #158	@ 0x9e
10045220:	009b      	lsls	r3, r3, #2
10045222:	58d1      	ldr	r1, [r2, r3]
10045224:	183b      	adds	r3, r7, r0
10045226:	781b      	ldrb	r3, [r3, #0]
10045228:	0004      	movs	r4, r0
1004522a:	183a      	adds	r2, r7, r0
1004522c:	1c58      	adds	r0, r3, #1
1004522e:	7010      	strb	r0, [r2, #0]
10045230:	001a      	movs	r2, r3
10045232:	697b      	ldr	r3, [r7, #20]
10045234:	189b      	adds	r3, r3, r2
10045236:	b2ca      	uxtb	r2, r1
10045238:	701a      	strb	r2, [r3, #0]
  hot_table_radio_config[index++] = 0x01;
1004523a:	0020      	movs	r0, r4
1004523c:	183b      	adds	r3, r7, r0
1004523e:	781b      	ldrb	r3, [r3, #0]
10045240:	183a      	adds	r2, r7, r0
10045242:	1c59      	adds	r1, r3, #1
10045244:	7011      	strb	r1, [r2, #0]
10045246:	001a      	movs	r2, r3
10045248:	697b      	ldr	r3, [r7, #20]
1004524a:	189b      	adds	r3, r3, r2
1004524c:	2201      	movs	r2, #1
1004524e:	701a      	strb	r2, [r3, #0]
  hot_table_radio_config[index++] = RRM_CBIAS0_ANA_ENG;
10045250:	183b      	adds	r3, r7, r0
10045252:	781b      	ldrb	r3, [r3, #0]
10045254:	183a      	adds	r2, r7, r0
10045256:	1c59      	adds	r1, r3, #1
10045258:	7011      	strb	r1, [r2, #0]
1004525a:	001a      	movs	r2, r3
1004525c:	697b      	ldr	r3, [r7, #20]
1004525e:	189b      	adds	r3, r3, r2
10045260:	225d      	movs	r2, #93	@ 0x5d
10045262:	701a      	strb	r2, [r3, #0]
  hot_table_radio_config[index++] = RRM->CBIAS0_ANA_ENG;
10045264:	4a6d      	ldr	r2, [pc, #436]	@ (1004541c <HAL_RADIO_Init+0x47c>)
10045266:	239d      	movs	r3, #157	@ 0x9d
10045268:	009b      	lsls	r3, r3, #2
1004526a:	58d1      	ldr	r1, [r2, r3]
1004526c:	183b      	adds	r3, r7, r0
1004526e:	781b      	ldrb	r3, [r3, #0]
10045270:	0004      	movs	r4, r0
10045272:	183a      	adds	r2, r7, r0
10045274:	1c58      	adds	r0, r3, #1
10045276:	7010      	strb	r0, [r2, #0]
10045278:	001a      	movs	r2, r3
1004527a:	697b      	ldr	r3, [r7, #20]
1004527c:	189b      	adds	r3, r3, r2
1004527e:	b2ca      	uxtb	r2, r1
10045280:	701a      	strb	r2, [r3, #0]

  hot_table_radio_config[index++] = 0x01;
10045282:	0020      	movs	r0, r4
10045284:	183b      	adds	r3, r7, r0
10045286:	781b      	ldrb	r3, [r3, #0]
10045288:	183a      	adds	r2, r7, r0
1004528a:	1c59      	adds	r1, r3, #1
1004528c:	7011      	strb	r1, [r2, #0]
1004528e:	001a      	movs	r2, r3
10045290:	697b      	ldr	r3, [r7, #20]
10045292:	189b      	adds	r3, r3, r2
10045294:	2201      	movs	r2, #1
10045296:	701a      	strb	r2, [r3, #0]
  hot_table_radio_config[index++] = RRM_RXADC_ANA_USR;
10045298:	183b      	adds	r3, r7, r0
1004529a:	781b      	ldrb	r3, [r3, #0]
1004529c:	183a      	adds	r2, r7, r0
1004529e:	1c59      	adds	r1, r3, #1
100452a0:	7011      	strb	r1, [r2, #0]
100452a2:	001a      	movs	r2, r3
100452a4:	697b      	ldr	r3, [r7, #20]
100452a6:	189b      	adds	r3, r3, r2
100452a8:	2252      	movs	r2, #82	@ 0x52
100452aa:	701a      	strb	r2, [r3, #0]
  hot_table_radio_config[index++] = RRM->RXADC_ANA_USR;
100452ac:	4a5b      	ldr	r2, [pc, #364]	@ (1004541c <HAL_RADIO_Init+0x47c>)
100452ae:	2392      	movs	r3, #146	@ 0x92
100452b0:	009b      	lsls	r3, r3, #2
100452b2:	58d1      	ldr	r1, [r2, r3]
100452b4:	183b      	adds	r3, r7, r0
100452b6:	781b      	ldrb	r3, [r3, #0]
100452b8:	0004      	movs	r4, r0
100452ba:	183a      	adds	r2, r7, r0
100452bc:	1c58      	adds	r0, r3, #1
100452be:	7010      	strb	r0, [r2, #0]
100452c0:	001a      	movs	r2, r3
100452c2:	697b      	ldr	r3, [r7, #20]
100452c4:	189b      	adds	r3, r3, r2
100452c6:	b2ca      	uxtb	r2, r1
100452c8:	701a      	strb	r2, [r3, #0]

  hot_table_radio_config[index++] = 0x01;
100452ca:	0020      	movs	r0, r4
100452cc:	183b      	adds	r3, r7, r0
100452ce:	781b      	ldrb	r3, [r3, #0]
100452d0:	183a      	adds	r2, r7, r0
100452d2:	1c59      	adds	r1, r3, #1
100452d4:	7011      	strb	r1, [r2, #0]
100452d6:	001a      	movs	r2, r3
100452d8:	697b      	ldr	r3, [r7, #20]
100452da:	189b      	adds	r3, r3, r2
100452dc:	2201      	movs	r2, #1
100452de:	701a      	strb	r2, [r3, #0]
  hot_table_radio_config[index++] = RRM_AFC1_DIG_ENG;
100452e0:	183b      	adds	r3, r7, r0
100452e2:	781b      	ldrb	r3, [r3, #0]
100452e4:	183a      	adds	r2, r7, r0
100452e6:	1c59      	adds	r1, r3, #1
100452e8:	7011      	strb	r1, [r2, #0]
100452ea:	001a      	movs	r2, r3
100452ec:	697b      	ldr	r3, [r7, #20]
100452ee:	189b      	adds	r3, r3, r2
100452f0:	2212      	movs	r2, #18
100452f2:	701a      	strb	r2, [r3, #0]
  hot_table_radio_config[index++] = RRM->AFC1_DIG_ENG;
100452f4:	4a49      	ldr	r2, [pc, #292]	@ (1004541c <HAL_RADIO_Init+0x47c>)
100452f6:	23a4      	movs	r3, #164	@ 0xa4
100452f8:	005b      	lsls	r3, r3, #1
100452fa:	58d1      	ldr	r1, [r2, r3]
100452fc:	183b      	adds	r3, r7, r0
100452fe:	781b      	ldrb	r3, [r3, #0]
10045300:	0004      	movs	r4, r0
10045302:	183a      	adds	r2, r7, r0
10045304:	1c58      	adds	r0, r3, #1
10045306:	7010      	strb	r0, [r2, #0]
10045308:	001a      	movs	r2, r3
1004530a:	697b      	ldr	r3, [r7, #20]
1004530c:	189b      	adds	r3, r3, r2
1004530e:	b2ca      	uxtb	r2, r1
10045310:	701a      	strb	r2, [r3, #0]
  hot_table_radio_config[index++] = 0x01;
10045312:	0020      	movs	r0, r4
10045314:	183b      	adds	r3, r7, r0
10045316:	781b      	ldrb	r3, [r3, #0]
10045318:	183a      	adds	r2, r7, r0
1004531a:	1c59      	adds	r1, r3, #1
1004531c:	7011      	strb	r1, [r2, #0]
1004531e:	001a      	movs	r2, r3
10045320:	697b      	ldr	r3, [r7, #20]
10045322:	189b      	adds	r3, r3, r2
10045324:	2201      	movs	r2, #1
10045326:	701a      	strb	r2, [r3, #0]
  hot_table_radio_config[index++] = RRM_CR0_DIG_ENG;
10045328:	183b      	adds	r3, r7, r0
1004532a:	781b      	ldrb	r3, [r3, #0]
1004532c:	183a      	adds	r2, r7, r0
1004532e:	1c59      	adds	r1, r3, #1
10045330:	7011      	strb	r1, [r2, #0]
10045332:	001a      	movs	r2, r3
10045334:	697b      	ldr	r3, [r7, #20]
10045336:	189b      	adds	r3, r3, r2
10045338:	2215      	movs	r2, #21
1004533a:	701a      	strb	r2, [r3, #0]
  hot_table_radio_config[index++] = RRM->CR0_DIG_ENG;
1004533c:	4a37      	ldr	r2, [pc, #220]	@ (1004541c <HAL_RADIO_Init+0x47c>)
1004533e:	23aa      	movs	r3, #170	@ 0xaa
10045340:	005b      	lsls	r3, r3, #1
10045342:	58d1      	ldr	r1, [r2, r3]
10045344:	183b      	adds	r3, r7, r0
10045346:	781b      	ldrb	r3, [r3, #0]
10045348:	0004      	movs	r4, r0
1004534a:	183a      	adds	r2, r7, r0
1004534c:	1c58      	adds	r0, r3, #1
1004534e:	7010      	strb	r0, [r2, #0]
10045350:	001a      	movs	r2, r3
10045352:	697b      	ldr	r3, [r7, #20]
10045354:	189b      	adds	r3, r3, r2
10045356:	b2ca      	uxtb	r2, r1
10045358:	701a      	strb	r2, [r3, #0]
  hot_table_radio_config[index++] = 0x01;
1004535a:	0020      	movs	r0, r4
1004535c:	183b      	adds	r3, r7, r0
1004535e:	781b      	ldrb	r3, [r3, #0]
10045360:	183a      	adds	r2, r7, r0
10045362:	1c59      	adds	r1, r3, #1
10045364:	7011      	strb	r1, [r2, #0]
10045366:	001a      	movs	r2, r3
10045368:	697b      	ldr	r3, [r7, #20]
1004536a:	189b      	adds	r3, r3, r2
1004536c:	2201      	movs	r2, #1
1004536e:	701a      	strb	r2, [r3, #0]
  hot_table_radio_config[index++] = RRM_CR0_LR;
10045370:	183b      	adds	r3, r7, r0
10045372:	781b      	ldrb	r3, [r3, #0]
10045374:	183a      	adds	r2, r7, r0
10045376:	1c59      	adds	r1, r3, #1
10045378:	7011      	strb	r1, [r2, #0]
1004537a:	001a      	movs	r2, r3
1004537c:	697b      	ldr	r3, [r7, #20]
1004537e:	189b      	adds	r3, r3, r2
10045380:	221a      	movs	r2, #26
10045382:	701a      	strb	r2, [r3, #0]
  hot_table_radio_config[index++] = RRM->CR0_LR;
10045384:	4a25      	ldr	r2, [pc, #148]	@ (1004541c <HAL_RADIO_Init+0x47c>)
10045386:	23b4      	movs	r3, #180	@ 0xb4
10045388:	005b      	lsls	r3, r3, #1
1004538a:	58d1      	ldr	r1, [r2, r3]
1004538c:	183b      	adds	r3, r7, r0
1004538e:	781b      	ldrb	r3, [r3, #0]
10045390:	0004      	movs	r4, r0
10045392:	183a      	adds	r2, r7, r0
10045394:	1c58      	adds	r0, r3, #1
10045396:	7010      	strb	r0, [r2, #0]
10045398:	001a      	movs	r2, r3
1004539a:	697b      	ldr	r3, [r7, #20]
1004539c:	189b      	adds	r3, r3, r2
1004539e:	b2ca      	uxtb	r2, r1
100453a0:	701a      	strb	r2, [r3, #0]
  hot_table_radio_config[index++] = 0x01;
100453a2:	0020      	movs	r0, r4
100453a4:	183b      	adds	r3, r7, r0
100453a6:	781b      	ldrb	r3, [r3, #0]
100453a8:	183a      	adds	r2, r7, r0
100453aa:	1c59      	adds	r1, r3, #1
100453ac:	7011      	strb	r1, [r2, #0]
100453ae:	001a      	movs	r2, r3
100453b0:	697b      	ldr	r3, [r7, #20]
100453b2:	189b      	adds	r3, r3, r2
100453b4:	2201      	movs	r2, #1
100453b6:	701a      	strb	r2, [r3, #0]
  hot_table_radio_config[index++] = RRM_LR_RSSI_THR_DIG_ENG;
100453b8:	183b      	adds	r3, r7, r0
100453ba:	781b      	ldrb	r3, [r3, #0]
100453bc:	183a      	adds	r2, r7, r0
100453be:	1c59      	adds	r1, r3, #1
100453c0:	7011      	strb	r1, [r2, #0]
100453c2:	001a      	movs	r2, r3
100453c4:	697b      	ldr	r3, [r7, #20]
100453c6:	189b      	adds	r3, r3, r2
100453c8:	2222      	movs	r2, #34	@ 0x22
100453ca:	701a      	strb	r2, [r3, #0]
  hot_table_radio_config[index++] = RRM->LR_RSSI_THR_DIG_ENG;
100453cc:	4a13      	ldr	r2, [pc, #76]	@ (1004541c <HAL_RADIO_Init+0x47c>)
100453ce:	23c4      	movs	r3, #196	@ 0xc4
100453d0:	005b      	lsls	r3, r3, #1
100453d2:	58d1      	ldr	r1, [r2, r3]
100453d4:	183b      	adds	r3, r7, r0
100453d6:	781b      	ldrb	r3, [r3, #0]
100453d8:	0004      	movs	r4, r0
100453da:	183a      	adds	r2, r7, r0
100453dc:	1c58      	adds	r0, r3, #1
100453de:	7010      	strb	r0, [r2, #0]
100453e0:	001a      	movs	r2, r3
100453e2:	697b      	ldr	r3, [r7, #20]
100453e4:	189b      	adds	r3, r3, r2
100453e6:	b2ca      	uxtb	r2, r1
100453e8:	701a      	strb	r2, [r3, #0]
  hot_table_radio_config[index++] = 0x01;
100453ea:	0020      	movs	r0, r4
100453ec:	183b      	adds	r3, r7, r0
100453ee:	781b      	ldrb	r3, [r3, #0]
100453f0:	183a      	adds	r2, r7, r0
100453f2:	1c59      	adds	r1, r3, #1
100453f4:	7011      	strb	r1, [r2, #0]
100453f6:	001a      	movs	r2, r3
100453f8:	697b      	ldr	r3, [r7, #20]
100453fa:	189b      	adds	r3, r3, r2
100453fc:	2201      	movs	r2, #1
100453fe:	701a      	strb	r2, [r3, #0]
  hot_table_radio_config[index++] = RRM_LR_PD_THR_DIG_ENG;
10045400:	183b      	adds	r3, r7, r0
10045402:	781b      	ldrb	r3, [r3, #0]
10045404:	183a      	adds	r2, r7, r0
10045406:	1c59      	adds	r1, r3, #1
10045408:	7011      	strb	r1, [r2, #0]
1004540a:	001a      	movs	r2, r3
1004540c:	697b      	ldr	r3, [r7, #20]
1004540e:	189b      	adds	r3, r3, r2
10045410:	e006      	b.n	10045420 <HAL_RADIO_Init+0x480>
10045412:	46c0      	nop			@ (mov r8, r8)
10045414:	200000c0 	.word	0x200000c0
10045418:	60001800 	.word	0x60001800
1004541c:	60001400 	.word	0x60001400
10045420:	2221      	movs	r2, #33	@ 0x21
10045422:	701a      	strb	r2, [r3, #0]
  hot_table_radio_config[index++] = RRM->LR_PD_THR_DIG_ENG;
10045424:	4a4c      	ldr	r2, [pc, #304]	@ (10045558 <HAL_RADIO_Init+0x5b8>)
10045426:	23c2      	movs	r3, #194	@ 0xc2
10045428:	005b      	lsls	r3, r3, #1
1004542a:	58d1      	ldr	r1, [r2, r3]
1004542c:	183b      	adds	r3, r7, r0
1004542e:	781b      	ldrb	r3, [r3, #0]
10045430:	0004      	movs	r4, r0
10045432:	183a      	adds	r2, r7, r0
10045434:	1c58      	adds	r0, r3, #1
10045436:	7010      	strb	r0, [r2, #0]
10045438:	001a      	movs	r2, r3
1004543a:	697b      	ldr	r3, [r7, #20]
1004543c:	189b      	adds	r3, r3, r2
1004543e:	b2ca      	uxtb	r2, r1
10045440:	701a      	strb	r2, [r3, #0]
  hot_table_radio_config[index++] = 0x01;
10045442:	0020      	movs	r0, r4
10045444:	183b      	adds	r3, r7, r0
10045446:	781b      	ldrb	r3, [r3, #0]
10045448:	183a      	adds	r2, r7, r0
1004544a:	1c59      	adds	r1, r3, #1
1004544c:	7011      	strb	r1, [r2, #0]
1004544e:	001a      	movs	r2, r3
10045450:	697b      	ldr	r3, [r7, #20]
10045452:	189b      	adds	r3, r3, r2
10045454:	2201      	movs	r2, #1
10045456:	701a      	strb	r2, [r3, #0]
  hot_table_radio_config[index++] = RRM_LR_AAC_THR_DIG_ENG;
10045458:	183b      	adds	r3, r7, r0
1004545a:	781b      	ldrb	r3, [r3, #0]
1004545c:	183a      	adds	r2, r7, r0
1004545e:	1c59      	adds	r1, r3, #1
10045460:	7011      	strb	r1, [r2, #0]
10045462:	001a      	movs	r2, r3
10045464:	697b      	ldr	r3, [r7, #20]
10045466:	189b      	adds	r3, r3, r2
10045468:	2223      	movs	r2, #35	@ 0x23
1004546a:	701a      	strb	r2, [r3, #0]
  hot_table_radio_config[index++] = RRM->LR_AAC_THR_DIG_ENG;
1004546c:	4a3a      	ldr	r2, [pc, #232]	@ (10045558 <HAL_RADIO_Init+0x5b8>)
1004546e:	23c6      	movs	r3, #198	@ 0xc6
10045470:	005b      	lsls	r3, r3, #1
10045472:	58d1      	ldr	r1, [r2, r3]
10045474:	183b      	adds	r3, r7, r0
10045476:	781b      	ldrb	r3, [r3, #0]
10045478:	0004      	movs	r4, r0
1004547a:	183a      	adds	r2, r7, r0
1004547c:	1c58      	adds	r0, r3, #1
1004547e:	7010      	strb	r0, [r2, #0]
10045480:	001a      	movs	r2, r3
10045482:	697b      	ldr	r3, [r7, #20]
10045484:	189b      	adds	r3, r3, r2
10045486:	b2ca      	uxtb	r2, r1
10045488:	701a      	strb	r2, [r3, #0]
  hot_table_radio_config[index++] = 0x01;
1004548a:	0020      	movs	r0, r4
1004548c:	183b      	adds	r3, r7, r0
1004548e:	781b      	ldrb	r3, [r3, #0]
10045490:	183a      	adds	r2, r7, r0
10045492:	1c59      	adds	r1, r3, #1
10045494:	7011      	strb	r1, [r2, #0]
10045496:	001a      	movs	r2, r3
10045498:	697b      	ldr	r3, [r7, #20]
1004549a:	189b      	adds	r3, r3, r2
1004549c:	2201      	movs	r2, #1
1004549e:	701a      	strb	r2, [r3, #0]
  hot_table_radio_config[index++] = RRM_VIT_CONF_DIG_ENG;
100454a0:	183b      	adds	r3, r7, r0
100454a2:	781b      	ldrb	r3, [r3, #0]
100454a4:	183a      	adds	r2, r7, r0
100454a6:	1c59      	adds	r1, r3, #1
100454a8:	7011      	strb	r1, [r2, #0]
100454aa:	001a      	movs	r2, r3
100454ac:	697b      	ldr	r3, [r7, #20]
100454ae:	189b      	adds	r3, r3, r2
100454b0:	221b      	movs	r2, #27
100454b2:	701a      	strb	r2, [r3, #0]
  hot_table_radio_config[index++] = RRM->VIT_CONF_DIG_ENG;
100454b4:	4a28      	ldr	r2, [pc, #160]	@ (10045558 <HAL_RADIO_Init+0x5b8>)
100454b6:	23b6      	movs	r3, #182	@ 0xb6
100454b8:	005b      	lsls	r3, r3, #1
100454ba:	58d1      	ldr	r1, [r2, r3]
100454bc:	183b      	adds	r3, r7, r0
100454be:	781b      	ldrb	r3, [r3, #0]
100454c0:	0004      	movs	r4, r0
100454c2:	183a      	adds	r2, r7, r0
100454c4:	1c58      	adds	r0, r3, #1
100454c6:	7010      	strb	r0, [r2, #0]
100454c8:	001a      	movs	r2, r3
100454ca:	697b      	ldr	r3, [r7, #20]
100454cc:	189b      	adds	r3, r3, r2
100454ce:	b2ca      	uxtb	r2, r1
100454d0:	701a      	strb	r2, [r3, #0]
  hot_table_radio_config[index++] = RRM->ANTSW_DIG0_USR;
  hot_table_radio_config[index++] = 0x01;
  hot_table_radio_config[index++] = RRM_ANTSW_DIG1_USR;
  hot_table_radio_config[index++] = RRM->ANTSW_DIG1_USR;
#endif
  hot_table_radio_config[index++] = 0x00;
100454d2:	193b      	adds	r3, r7, r4
100454d4:	781b      	ldrb	r3, [r3, #0]
100454d6:	193a      	adds	r2, r7, r4
100454d8:	1c59      	adds	r1, r3, #1
100454da:	7011      	strb	r1, [r2, #0]
100454dc:	001a      	movs	r2, r3
100454de:	697b      	ldr	r3, [r7, #20]
100454e0:	189b      	adds	r3, r3, r2
100454e2:	2200      	movs	r2, #0
100454e4:	701a      	strb	r2, [r3, #0]

  hot_table_radio_config_u32[0] = (uint32_t)(&hot_table_radio_config_u32[4]); /* Point to Port 0 command list 1 executed when Wakeup timer triggers */
100454e6:	4a1d      	ldr	r2, [pc, #116]	@ (1004555c <HAL_RADIO_Init+0x5bc>)
100454e8:	4b1d      	ldr	r3, [pc, #116]	@ (10045560 <HAL_RADIO_Init+0x5c0>)
100454ea:	601a      	str	r2, [r3, #0]
  hot_table_radio_config_u32[1] = (uint32_t)(&hot_table_radio_config_u32[4]); /* Point to Port 0 command list 2 executed when Timer1 triggers       */
100454ec:	4a1b      	ldr	r2, [pc, #108]	@ (1004555c <HAL_RADIO_Init+0x5bc>)
100454ee:	4b1c      	ldr	r3, [pc, #112]	@ (10045560 <HAL_RADIO_Init+0x5c0>)
100454f0:	605a      	str	r2, [r3, #4]
  hot_table_radio_config_u32[2] = (uint32_t)(&hot_table_radio_config_u32[3]); /* Point to Port 0 command list 3 executed when Timer2 triggers       */
100454f2:	4a1c      	ldr	r2, [pc, #112]	@ (10045564 <HAL_RADIO_Init+0x5c4>)
100454f4:	4b1a      	ldr	r3, [pc, #104]	@ (10045560 <HAL_RADIO_Init+0x5c0>)
100454f6:	609a      	str	r2, [r3, #8]
  hot_table_radio_config_u32[3] = 0x00000000;                /* Null command */
100454f8:	4b19      	ldr	r3, [pc, #100]	@ (10045560 <HAL_RADIO_Init+0x5c0>)
100454fa:	2200      	movs	r2, #0
100454fc:	60da      	str	r2, [r3, #12]

  LL_RADIO_SetRadioConfigurationAddressPointer(hot_table_radio_config_u32[0]);
100454fe:	4b18      	ldr	r3, [pc, #96]	@ (10045560 <HAL_RADIO_Init+0x5c0>)
10045500:	681b      	ldr	r3, [r3, #0]
10045502:	0018      	movs	r0, r3
10045504:	f7ff fba4 	bl	10044c50 <LL_RADIO_SetRadioConfigurationAddressPointer>
  /* Reload radio config pointer */
  RRM->UDRA_CTRL0 = RRM_UDRA_CTRL0_RELOAD_RDCFGPTR;
10045508:	4b13      	ldr	r3, [pc, #76]	@ (10045558 <HAL_RADIO_Init+0x5b8>)
1004550a:	2201      	movs	r2, #1
1004550c:	611a      	str	r2, [r3, #16]
  LL_RADIO_Active2ErrorInterrupt_Enable();
1004550e:	f7ff fcf3 	bl	10044ef8 <LL_RADIO_Active2ErrorInterrupt_Enable>

#if USE_RADIO_PROPRIETARY_DRIVER
  globalParameters.back2backTime = BACK_TO_BACK_TIME;
10045512:	4b15      	ldr	r3, [pc, #84]	@ (10045568 <HAL_RADIO_Init+0x5c8>)
10045514:	2296      	movs	r2, #150	@ 0x96
10045516:	601a      	str	r2, [r3, #0]
  globalParameters.tone_start_stop_flag = 0;
10045518:	4b13      	ldr	r3, [pc, #76]	@ (10045568 <HAL_RADIO_Init+0x5c8>)
1004551a:	2200      	movs	r2, #0
1004551c:	711a      	strb	r2, [r3, #4]
#endif

  /*Clear all interrupts of the BLUE Controller*/
  uint32_t int_val_tmp = BLUE->INTERRUPT1REG;
1004551e:	23c0      	movs	r3, #192	@ 0xc0
10045520:	05db      	lsls	r3, r3, #23
10045522:	685b      	ldr	r3, [r3, #4]
10045524:	60fb      	str	r3, [r7, #12]
  BLUE->INTERRUPT1REG = int_val_tmp;
10045526:	23c0      	movs	r3, #192	@ 0xc0
10045528:	05db      	lsls	r3, r3, #23
1004552a:	68fa      	ldr	r2, [r7, #12]
1004552c:	605a      	str	r2, [r3, #4]

  /*BLE wake up IRQ Status clearing and enable*/
  WAKEUP->WAKEUP_BLE_IRQ_STATUS |= 1;
1004552e:	4b0f      	ldr	r3, [pc, #60]	@ (1004556c <HAL_RADIO_Init+0x5cc>)
10045530:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
10045532:	4b0e      	ldr	r3, [pc, #56]	@ (1004556c <HAL_RADIO_Init+0x5cc>)
10045534:	2101      	movs	r1, #1
10045536:	430a      	orrs	r2, r1
10045538:	645a      	str	r2, [r3, #68]	@ 0x44
  WAKEUP->WAKEUP_BLE_IRQ_ENABLE |= 1;
1004553a:	4b0c      	ldr	r3, [pc, #48]	@ (1004556c <HAL_RADIO_Init+0x5cc>)
1004553c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
1004553e:	4b0b      	ldr	r3, [pc, #44]	@ (1004556c <HAL_RADIO_Init+0x5cc>)
10045540:	2101      	movs	r1, #1
10045542:	430a      	orrs	r2, r1
10045544:	641a      	str	r2, [r3, #64]	@ 0x40
  /* If the device is configured with
     System clock = 64 MHz and BLE clock = 16 MHz
     a register read is necessary to end fine
     the clear interrupt register operation,
     due the AHB down converter latency */
  int_val_tmp = BLUE->INTERRUPT1REG;
10045546:	23c0      	movs	r3, #192	@ 0xc0
10045548:	05db      	lsls	r3, r3, #23
1004554a:	685b      	ldr	r3, [r3, #4]
1004554c:	60fb      	str	r3, [r7, #12]

  return;
1004554e:	46c0      	nop			@ (mov r8, r8)
}
10045550:	46bd      	mov	sp, r7
10045552:	b00d      	add	sp, #52	@ 0x34
10045554:	bd90      	pop	{r4, r7, pc}
10045556:	46c0      	nop			@ (mov r8, r8)
10045558:	60001400 	.word	0x60001400
1004555c:	20000574 	.word	0x20000574
10045560:	20000564 	.word	0x20000564
10045564:	20000570 	.word	0x20000570
10045568:	200004d8 	.word	0x200004d8
1004556c:	60001800 	.word	0x60001800

10045570 <HAL_RADIO_ReadRSSI>:
/**
  * @brief  Read RSSI
  * @retval int8_t: RSSI in dBm
  */
int8_t HAL_RADIO_ReadRSSI(void)
{
10045570:	b580      	push	{r7, lr}
10045572:	b086      	sub	sp, #24
10045574:	af00      	add	r7, sp, #0
  int32_t rssi_dbm;
  uint32_t rssi0 = RRM->RSSI0_DIG_OUT;
10045576:	4a24      	ldr	r2, [pc, #144]	@ (10045608 <HAL_RADIO_ReadRSSI+0x98>)
10045578:	23a9      	movs	r3, #169	@ 0xa9
1004557a:	009b      	lsls	r3, r3, #2
1004557c:	58d3      	ldr	r3, [r2, r3]
1004557e:	60fb      	str	r3, [r7, #12]
  uint32_t rssi1 = RRM->RSSI1_DIG_OUT;
10045580:	4a21      	ldr	r2, [pc, #132]	@ (10045608 <HAL_RADIO_ReadRSSI+0x98>)
10045582:	23aa      	movs	r3, #170	@ 0xaa
10045584:	009b      	lsls	r3, r3, #2
10045586:	58d3      	ldr	r3, [r2, r3]
10045588:	60bb      	str	r3, [r7, #8]

  uint32_t rssi_int16 = ((rssi1 & 0xFF) << 8) | (rssi0 & 0xFF);
1004558a:	68bb      	ldr	r3, [r7, #8]
1004558c:	021b      	lsls	r3, r3, #8
1004558e:	041b      	lsls	r3, r3, #16
10045590:	0c1a      	lsrs	r2, r3, #16
10045592:	68fb      	ldr	r3, [r7, #12]
10045594:	21ff      	movs	r1, #255	@ 0xff
10045596:	400b      	ands	r3, r1
10045598:	4313      	orrs	r3, r2
1004559a:	613b      	str	r3, [r7, #16]
  uint32_t reg_agc = RRM->AGC_DIG_OUT;
1004559c:	4a1a      	ldr	r2, [pc, #104]	@ (10045608 <HAL_RADIO_ReadRSSI+0x98>)
1004559e:	23ab      	movs	r3, #171	@ 0xab
100455a0:	009b      	lsls	r3, r3, #2
100455a2:	58d3      	ldr	r3, [r2, r3]
100455a4:	607b      	str	r3, [r7, #4]

  if ((rssi_int16 == 0U) || (reg_agc > 0xbU))
100455a6:	693b      	ldr	r3, [r7, #16]
100455a8:	2b00      	cmp	r3, #0
100455aa:	d002      	beq.n	100455b2 <HAL_RADIO_ReadRSSI+0x42>
100455ac:	687b      	ldr	r3, [r7, #4]
100455ae:	2b0b      	cmp	r3, #11
100455b0:	d902      	bls.n	100455b8 <HAL_RADIO_ReadRSSI+0x48>
  {
    rssi_dbm = 127 ;
100455b2:	237f      	movs	r3, #127	@ 0x7f
100455b4:	617b      	str	r3, [r7, #20]
100455b6:	e020      	b.n	100455fa <HAL_RADIO_ReadRSSI+0x8a>
  }
  else
  {
    rssi_dbm = (int32_t)reg_agc * 6 - RSSI_OFFSET;//127 ;
100455b8:	687a      	ldr	r2, [r7, #4]
100455ba:	0013      	movs	r3, r2
100455bc:	005b      	lsls	r3, r3, #1
100455be:	189b      	adds	r3, r3, r2
100455c0:	005b      	lsls	r3, r3, #1
100455c2:	3b77      	subs	r3, #119	@ 0x77
100455c4:	617b      	str	r3, [r7, #20]
    while (rssi_int16 > 30U)
100455c6:	e005      	b.n	100455d4 <HAL_RADIO_ReadRSSI+0x64>
    {
      rssi_dbm = rssi_dbm + 6 ;
100455c8:	697b      	ldr	r3, [r7, #20]
100455ca:	3306      	adds	r3, #6
100455cc:	617b      	str	r3, [r7, #20]
      rssi_int16 = (rssi_int16 >> 1) ;
100455ce:	693b      	ldr	r3, [r7, #16]
100455d0:	085b      	lsrs	r3, r3, #1
100455d2:	613b      	str	r3, [r7, #16]
    while (rssi_int16 > 30U)
100455d4:	693b      	ldr	r3, [r7, #16]
100455d6:	2b1e      	cmp	r3, #30
100455d8:	d8f6      	bhi.n	100455c8 <HAL_RADIO_ReadRSSI+0x58>
    }
    rssi_dbm = rssi_dbm + (int32_t)(uint32_t)((417U * rssi_int16 + 18080U) >> 10);
100455da:	693a      	ldr	r2, [r7, #16]
100455dc:	0013      	movs	r3, r2
100455de:	005b      	lsls	r3, r3, #1
100455e0:	189b      	adds	r3, r3, r2
100455e2:	009b      	lsls	r3, r3, #2
100455e4:	189b      	adds	r3, r3, r2
100455e6:	015b      	lsls	r3, r3, #5
100455e8:	189b      	adds	r3, r3, r2
100455ea:	4a08      	ldr	r2, [pc, #32]	@ (1004560c <HAL_RADIO_ReadRSSI+0x9c>)
100455ec:	4694      	mov	ip, r2
100455ee:	4463      	add	r3, ip
100455f0:	0a9b      	lsrs	r3, r3, #10
100455f2:	001a      	movs	r2, r3
100455f4:	697b      	ldr	r3, [r7, #20]
100455f6:	189b      	adds	r3, r3, r2
100455f8:	617b      	str	r3, [r7, #20]
  }
  return (int8_t)rssi_dbm;
100455fa:	697b      	ldr	r3, [r7, #20]
100455fc:	b25b      	sxtb	r3, r3
}
100455fe:	0018      	movs	r0, r3
10045600:	46bd      	mov	sp, r7
10045602:	b006      	add	sp, #24
10045604:	bd80      	pop	{r7, pc}
10045606:	46c0      	nop			@ (mov r8, r8)
10045608:	60001400 	.word	0x60001400
1004560c:	000046a0 	.word	0x000046a0

10045610 <HAL_RADIO_Callback>:
  * @param  p: Current action packet which its transaction has been completed.
  * @param  next: Next action packet which is going to be scheduled.
  * @retval return value: TRUE
  */
uint8_t HAL_RADIO_Callback(ActionPacket *p, ActionPacket *next)
{
10045610:	b590      	push	{r4, r7, lr}
10045612:	b085      	sub	sp, #20
10045614:	af00      	add	r7, sp, #0
10045616:	6078      	str	r0, [r7, #4]
10045618:	6039      	str	r1, [r7, #0]
  /* Event is a reception */
  if ((p->status & BLUE_STATUSREG_PREVTRANSMIT) == 0)
1004561a:	687b      	ldr	r3, [r7, #4]
1004561c:	68db      	ldr	r3, [r3, #12]
1004561e:	2240      	movs	r2, #64	@ 0x40
10045620:	4013      	ands	r3, r2
10045622:	d153      	bne.n	100456cc <HAL_RADIO_Callback+0xbc>
  {
    RxStats_t receivedStats = {0};
10045624:	2408      	movs	r4, #8
10045626:	193b      	adds	r3, r7, r4
10045628:	0018      	movs	r0, r3
1004562a:	2308      	movs	r3, #8
1004562c:	001a      	movs	r2, r3
1004562e:	2100      	movs	r1, #0
10045630:	f003 fe88 	bl	10049344 <memset>
    /* Reception ends with no errors */
    if ((p->status & BLUE_INTERRUPT1REG_RCVOK) != 0)
10045634:	687b      	ldr	r3, [r7, #4]
10045636:	68db      	ldr	r3, [r3, #12]
10045638:	2b00      	cmp	r3, #0
1004563a:	da20      	bge.n	1004567e <HAL_RADIO_Callback+0x6e>
    {
      if ((p->status & BLUE_INTERRUPT1REG_ENCERROR) != 0)
1004563c:	687b      	ldr	r3, [r7, #4]
1004563e:	68da      	ldr	r2, [r3, #12]
10045640:	2380      	movs	r3, #128	@ 0x80
10045642:	019b      	lsls	r3, r3, #6
10045644:	4013      	ands	r3, r2
10045646:	d00c      	beq.n	10045662 <HAL_RADIO_Callback+0x52>
      {
        receivedStats.rssi = p->rssi;
10045648:	687b      	ldr	r3, [r7, #4]
1004564a:	695a      	ldr	r2, [r3, #20]
1004564c:	193b      	adds	r3, r7, r4
1004564e:	601a      	str	r2, [r3, #0]
        receivedStats.timestamp_receive = p->timestamp_receive;
10045650:	687b      	ldr	r3, [r7, #4]
10045652:	691a      	ldr	r2, [r3, #16]
10045654:	193b      	adds	r3, r7, r4
10045656:	605a      	str	r2, [r3, #4]
        HAL_RADIO_CallbackRcvEncryptErr(&receivedStats);
10045658:	193b      	adds	r3, r7, r4
1004565a:	0018      	movs	r0, r3
1004565c:	f000 f843 	bl	100456e6 <HAL_RADIO_CallbackRcvEncryptErr>
10045660:	e03c      	b.n	100456dc <HAL_RADIO_Callback+0xcc>
      }
      else
      {
        receivedStats.rssi = p->rssi;
10045662:	687b      	ldr	r3, [r7, #4]
10045664:	695a      	ldr	r2, [r3, #20]
10045666:	2108      	movs	r1, #8
10045668:	187b      	adds	r3, r7, r1
1004566a:	601a      	str	r2, [r3, #0]
        receivedStats.timestamp_receive = p->timestamp_receive;
1004566c:	687b      	ldr	r3, [r7, #4]
1004566e:	691a      	ldr	r2, [r3, #16]
10045670:	187b      	adds	r3, r7, r1
10045672:	605a      	str	r2, [r3, #4]
        HAL_RADIO_CallbackRcvOk(&receivedStats);
10045674:	187b      	adds	r3, r7, r1
10045676:	0018      	movs	r0, r3
10045678:	f7fd faf2 	bl	10042c60 <HAL_RADIO_CallbackRcvOk>
1004567c:	e02e      	b.n	100456dc <HAL_RADIO_Callback+0xcc>
      }
    }
    /* Reception ends with timeout */
    else if ((p->status & BLUE_INTERRUPT1REG_RCVTIMEOUT) != 0)
1004567e:	687b      	ldr	r3, [r7, #4]
10045680:	68da      	ldr	r2, [r3, #12]
10045682:	2380      	movs	r3, #128	@ 0x80
10045684:	04db      	lsls	r3, r3, #19
10045686:	4013      	ands	r3, r2
10045688:	d00c      	beq.n	100456a4 <HAL_RADIO_Callback+0x94>
    {
      receivedStats.rssi = p->rssi;
1004568a:	687b      	ldr	r3, [r7, #4]
1004568c:	695a      	ldr	r2, [r3, #20]
1004568e:	2108      	movs	r1, #8
10045690:	187b      	adds	r3, r7, r1
10045692:	601a      	str	r2, [r3, #0]
      receivedStats.timestamp_receive = 0;
10045694:	187b      	adds	r3, r7, r1
10045696:	2200      	movs	r2, #0
10045698:	605a      	str	r2, [r3, #4]
      HAL_RADIO_CallbackRcvTimeout(&receivedStats);
1004569a:	187b      	adds	r3, r7, r1
1004569c:	0018      	movs	r0, r3
1004569e:	f7fd fa9d 	bl	10042bdc <HAL_RADIO_CallbackRcvTimeout>
100456a2:	e01b      	b.n	100456dc <HAL_RADIO_Callback+0xcc>
    }
    /* Reception ends with errors */
    else if ((p->status & BLUE_INTERRUPT1REG_RCVCRCERR) != 0)
100456a4:	687b      	ldr	r3, [r7, #4]
100456a6:	68da      	ldr	r2, [r3, #12]
100456a8:	2380      	movs	r3, #128	@ 0x80
100456aa:	05db      	lsls	r3, r3, #23
100456ac:	4013      	ands	r3, r2
100456ae:	d015      	beq.n	100456dc <HAL_RADIO_Callback+0xcc>
    {
      receivedStats.rssi = p->rssi;
100456b0:	687b      	ldr	r3, [r7, #4]
100456b2:	695a      	ldr	r2, [r3, #20]
100456b4:	2108      	movs	r1, #8
100456b6:	187b      	adds	r3, r7, r1
100456b8:	601a      	str	r2, [r3, #0]
      receivedStats.timestamp_receive = p->timestamp_receive;
100456ba:	687b      	ldr	r3, [r7, #4]
100456bc:	691a      	ldr	r2, [r3, #16]
100456be:	187b      	adds	r3, r7, r1
100456c0:	605a      	str	r2, [r3, #4]
      HAL_RADIO_CallbackRcvError(&receivedStats);
100456c2:	187b      	adds	r3, r7, r1
100456c4:	0018      	movs	r0, r3
100456c6:	f7fd fa67 	bl	10042b98 <HAL_RADIO_CallbackRcvError>
100456ca:	e007      	b.n	100456dc <HAL_RADIO_Callback+0xcc>
    }
  }
  /* Event is a transmission */
  else if ((p->status & BLUE_INTERRUPT1REG_DONE) != 0)
100456cc:	687b      	ldr	r3, [r7, #4]
100456ce:	68da      	ldr	r2, [r3, #12]
100456d0:	2380      	movs	r3, #128	@ 0x80
100456d2:	049b      	lsls	r3, r3, #18
100456d4:	4013      	ands	r3, r2
100456d6:	d001      	beq.n	100456dc <HAL_RADIO_Callback+0xcc>
  {
    /* RADIO TX operation done */
    HAL_RADIO_CallbackTxDone();
100456d8:	f7fd faa2 	bl	10042c20 <HAL_RADIO_CallbackTxDone>
  }
  return TRUE;
100456dc:	2301      	movs	r3, #1
}
100456de:	0018      	movs	r0, r3
100456e0:	46bd      	mov	sp, r7
100456e2:	b005      	add	sp, #20
100456e4:	bd90      	pop	{r4, r7, pc}

100456e6 <HAL_RADIO_CallbackRcvEncryptErr>:

__weak void HAL_RADIO_CallbackRcvError(RxStats_t *rxPacketStats) {}
__weak void HAL_RADIO_CallbackRcvTimeout(RxStats_t *rxPacketStats) {}
__weak void HAL_RADIO_CallbackRcvEncryptErr(RxStats_t *rxPacketStats) {}
100456e6:	b580      	push	{r7, lr}
100456e8:	b082      	sub	sp, #8
100456ea:	af00      	add	r7, sp, #0
100456ec:	6078      	str	r0, [r7, #4]
100456ee:	46c0      	nop			@ (mov r8, r8)
100456f0:	46bd      	mov	sp, r7
100456f2:	b002      	add	sp, #8
100456f4:	bd80      	pop	{r7, pc}
	...

100456f8 <HAL_RADIO_ActionPacketIsr>:
  * @brief  Radio ISR.
  *         Besides, next packet is scheduled here.
  * @retval None
  */
static void HAL_RADIO_ActionPacketIsr(uint32_t int_flags)
{
100456f8:	b590      	push	{r4, r7, lr}
100456fa:	b089      	sub	sp, #36	@ 0x24
100456fc:	af00      	add	r7, sp, #0
100456fe:	6078      	str	r0, [r7, #4]
  if ((int_flags & BLUE_INTERRUPT1REG_DONE) != 0)
10045700:	687a      	ldr	r2, [r7, #4]
10045702:	2380      	movs	r3, #128	@ 0x80
10045704:	049b      	lsls	r3, r3, #18
10045706:	4013      	ands	r3, r2
10045708:	d100      	bne.n	1004570c <HAL_RADIO_ActionPacketIsr+0x14>
1004570a:	e105      	b.n	10045918 <HAL_RADIO_ActionPacketIsr+0x220>
    BlueTransStruct *p;
    uint32_t time;

    /* Copy status in order for callback to access it. */
    globalParameters.current_action_packet->status = int_flags | \
                                                     (BLUE->STATUSREG & BLUE_STATUSREG_PREVTRANSMIT_Msk);
1004570c:	23c0      	movs	r3, #192	@ 0xc0
1004570e:	05db      	lsls	r3, r3, #23
10045710:	69db      	ldr	r3, [r3, #28]
10045712:	2240      	movs	r2, #64	@ 0x40
10045714:	4013      	ands	r3, r2
10045716:	0019      	movs	r1, r3
    globalParameters.current_action_packet->status = int_flags | \
10045718:	4b81      	ldr	r3, [pc, #516]	@ (10045920 <HAL_RADIO_ActionPacketIsr+0x228>)
1004571a:	689b      	ldr	r3, [r3, #8]
1004571c:	687a      	ldr	r2, [r7, #4]
1004571e:	430a      	orrs	r2, r1
10045720:	60da      	str	r2, [r3, #12]

    if ((globalParameters.current_action_packet->condRoutine(globalParameters.current_action_packet)) == TRUE)
10045722:	4b7f      	ldr	r3, [pc, #508]	@ (10045920 <HAL_RADIO_ActionPacketIsr+0x228>)
10045724:	689b      	ldr	r3, [r3, #8]
10045726:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
10045728:	4b7d      	ldr	r3, [pc, #500]	@ (10045920 <HAL_RADIO_ActionPacketIsr+0x228>)
1004572a:	689b      	ldr	r3, [r3, #8]
1004572c:	0018      	movs	r0, r3
1004572e:	4790      	blx	r2
10045730:	0003      	movs	r3, r0
10045732:	2b01      	cmp	r3, #1
10045734:	d104      	bne.n	10045740 <HAL_RADIO_ActionPacketIsr+0x48>
    {
      next = globalParameters.current_action_packet->next_true;
10045736:	4b7a      	ldr	r3, [pc, #488]	@ (10045920 <HAL_RADIO_ActionPacketIsr+0x228>)
10045738:	689b      	ldr	r3, [r3, #8]
1004573a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
1004573c:	61fb      	str	r3, [r7, #28]
1004573e:	e003      	b.n	10045748 <HAL_RADIO_ActionPacketIsr+0x50>
    }
    else
    {
      next = globalParameters.current_action_packet->next_false;
10045740:	4b77      	ldr	r3, [pc, #476]	@ (10045920 <HAL_RADIO_ActionPacketIsr+0x228>)
10045742:	689b      	ldr	r3, [r3, #8]
10045744:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
10045746:	61fb      	str	r3, [r7, #28]
    }
    /*The radio event is started. So here a check on the next packet of the event is made*/
    if (next == NULL_0)
10045748:	69fb      	ldr	r3, [r7, #28]
1004574a:	2b00      	cmp	r3, #0
1004574c:	d116      	bne.n	1004577c <HAL_RADIO_ActionPacketIsr+0x84>
    {
      /* timer2 off */
      LL_RADIO_TIMER_DisableTimer1(BLUE);
1004574e:	23c0      	movs	r3, #192	@ 0xc0
10045750:	05db      	lsls	r3, r3, #23
10045752:	0018      	movs	r0, r3
10045754:	f7ff fbde 	bl	10044f14 <LL_RADIO_TIMER_DisableTimer1>
      LL_RADIO_TIMER_DisableTimer2(BLUE);
10045758:	23c0      	movs	r3, #192	@ 0xc0
1004575a:	05db      	lsls	r3, r3, #23
1004575c:	0018      	movs	r0, r3
1004575e:	f7ff fbe8 	bl	10044f32 <LL_RADIO_TIMER_DisableTimer2>
      LL_RADIO_TIMER_DisableBLEWakeupTimer(WAKEUP);
10045762:	4b70      	ldr	r3, [pc, #448]	@ (10045924 <HAL_RADIO_ActionPacketIsr+0x22c>)
10045764:	0018      	movs	r0, r3
10045766:	f7ff fbf3 	bl	10044f50 <LL_RADIO_TIMER_DisableBLEWakeupTimer>
      MODIFY_REG(BLUEGLOB->BYTE4, GLOBAL_BYTE4_ACTIVE_Msk, BLUE_IDLE_0);
1004576a:	4b6f      	ldr	r3, [pc, #444]	@ (10045928 <HAL_RADIO_ActionPacketIsr+0x230>)
1004576c:	791b      	ldrb	r3, [r3, #4]
1004576e:	b2db      	uxtb	r3, r3
10045770:	4a6d      	ldr	r2, [pc, #436]	@ (10045928 <HAL_RADIO_ActionPacketIsr+0x230>)
10045772:	217f      	movs	r1, #127	@ 0x7f
10045774:	400b      	ands	r3, r1
10045776:	b2db      	uxtb	r3, r3
10045778:	7113      	strb	r3, [r2, #4]
1004577a:	e099      	b.n	100458b0 <HAL_RADIO_ActionPacketIsr+0x1b8>
    }
    else
    {
      BLUEGLOB->BYTE4 = (next->StateMachineNo | GLOBAL_BYTE4_ACTIVE_Msk);
1004577c:	69fb      	ldr	r3, [r7, #28]
1004577e:	781b      	ldrb	r3, [r3, #0]
10045780:	4969      	ldr	r1, [pc, #420]	@ (10045928 <HAL_RADIO_ActionPacketIsr+0x230>)
10045782:	2280      	movs	r2, #128	@ 0x80
10045784:	4252      	negs	r2, r2
10045786:	4313      	orrs	r3, r2
10045788:	b2db      	uxtb	r3, r3
1004578a:	710b      	strb	r3, [r1, #4]
      p = &next->trans_packet;
1004578c:	69fb      	ldr	r3, [r7, #28]
1004578e:	3318      	adds	r3, #24
10045790:	61bb      	str	r3, [r7, #24]
      MODIFY_REG((bluedata + next->StateMachineNo)->BYTE0, STATEMACH_BYTE0_TXMODE_Msk,
10045792:	69fb      	ldr	r3, [r7, #28]
10045794:	781b      	ldrb	r3, [r3, #0]
10045796:	001a      	movs	r2, r3
10045798:	0013      	movs	r3, r2
1004579a:	009b      	lsls	r3, r3, #2
1004579c:	189b      	adds	r3, r3, r2
1004579e:	011b      	lsls	r3, r3, #4
100457a0:	4a62      	ldr	r2, [pc, #392]	@ (1004592c <HAL_RADIO_ActionPacketIsr+0x234>)
100457a2:	4694      	mov	ip, r2
100457a4:	4463      	add	r3, ip
100457a6:	781b      	ldrb	r3, [r3, #0]
100457a8:	b2db      	uxtb	r3, r3
100457aa:	b25b      	sxtb	r3, r3
100457ac:	227f      	movs	r2, #127	@ 0x7f
100457ae:	4013      	ands	r3, r2
100457b0:	b25a      	sxtb	r2, r3
100457b2:	69fb      	ldr	r3, [r7, #28]
100457b4:	213c      	movs	r1, #60	@ 0x3c
100457b6:	5c5b      	ldrb	r3, [r3, r1]
100457b8:	b25b      	sxtb	r3, r3
100457ba:	4313      	orrs	r3, r2
100457bc:	b259      	sxtb	r1, r3
100457be:	69fb      	ldr	r3, [r7, #28]
100457c0:	781b      	ldrb	r3, [r3, #0]
100457c2:	001a      	movs	r2, r3
100457c4:	0013      	movs	r3, r2
100457c6:	009b      	lsls	r3, r3, #2
100457c8:	189b      	adds	r3, r3, r2
100457ca:	011b      	lsls	r3, r3, #4
100457cc:	4a57      	ldr	r2, [pc, #348]	@ (1004592c <HAL_RADIO_ActionPacketIsr+0x234>)
100457ce:	4694      	mov	ip, r2
100457d0:	4463      	add	r3, ip
100457d2:	b2ca      	uxtb	r2, r1
100457d4:	701a      	strb	r2, [r3, #0]
                 next->trans_config);/* Transmission or reception*/
      (bluedata + next->StateMachineNo)->TXPOINT = BLUE_STRUCT_PTR_CAST(p);
100457d6:	69fb      	ldr	r3, [r7, #28]
100457d8:	781b      	ldrb	r3, [r3, #0]
100457da:	001a      	movs	r2, r3
100457dc:	0013      	movs	r3, r2
100457de:	009b      	lsls	r3, r3, #2
100457e0:	189b      	adds	r3, r3, r2
100457e2:	011b      	lsls	r3, r3, #4
100457e4:	4a51      	ldr	r2, [pc, #324]	@ (1004592c <HAL_RADIO_ActionPacketIsr+0x234>)
100457e6:	4694      	mov	ip, r2
100457e8:	4463      	add	r3, ip
100457ea:	69ba      	ldr	r2, [r7, #24]
100457ec:	605a      	str	r2, [r3, #4]
      (bluedata + next->StateMachineNo)->RCVPOINT = BLUE_STRUCT_PTR_CAST(p);
100457ee:	69fb      	ldr	r3, [r7, #28]
100457f0:	781b      	ldrb	r3, [r3, #0]
100457f2:	001a      	movs	r2, r3
100457f4:	0013      	movs	r3, r2
100457f6:	009b      	lsls	r3, r3, #2
100457f8:	189b      	adds	r3, r3, r2
100457fa:	011b      	lsls	r3, r3, #4
100457fc:	4a4b      	ldr	r2, [pc, #300]	@ (1004592c <HAL_RADIO_ActionPacketIsr+0x234>)
100457fe:	4694      	mov	ip, r2
10045800:	4463      	add	r3, ip
10045802:	69ba      	ldr	r2, [r7, #24]
10045804:	609a      	str	r2, [r3, #8]
      (bluedata + next->StateMachineNo)->MAXRECEIVEDLENGTH = next->MaxReceiveLength;
10045806:	69fb      	ldr	r3, [r7, #28]
10045808:	781b      	ldrb	r3, [r3, #0]
1004580a:	001a      	movs	r2, r3
1004580c:	0013      	movs	r3, r2
1004580e:	009b      	lsls	r3, r3, #2
10045810:	189b      	adds	r3, r3, r2
10045812:	011b      	lsls	r3, r3, #4
10045814:	4a45      	ldr	r2, [pc, #276]	@ (1004592c <HAL_RADIO_ActionPacketIsr+0x234>)
10045816:	4694      	mov	ip, r2
10045818:	4463      	add	r3, ip
1004581a:	69fa      	ldr	r2, [r7, #28]
1004581c:	7891      	ldrb	r1, [r2, #2]
1004581e:	222b      	movs	r2, #43	@ 0x2b
10045820:	5499      	strb	r1, [r3, r2]

      /* Packet will execute on time specified by WakeupTime */
      if ((next->ActionTag & TIMER_WAKEUP) != 0)
10045822:	69fb      	ldr	r3, [r7, #28]
10045824:	785b      	ldrb	r3, [r3, #1]
10045826:	001a      	movs	r2, r3
10045828:	2304      	movs	r3, #4
1004582a:	4013      	ands	r3, r2
1004582c:	d040      	beq.n	100458b0 <HAL_RADIO_ActionPacketIsr+0x1b8>
      {
        /* timer1/2 off */
        LL_RADIO_TIMER_DisableTimer1(BLUE);
1004582e:	23c0      	movs	r3, #192	@ 0xc0
10045830:	05db      	lsls	r3, r3, #23
10045832:	0018      	movs	r0, r3
10045834:	f7ff fb6e 	bl	10044f14 <LL_RADIO_TIMER_DisableTimer1>
        LL_RADIO_TIMER_DisableTimer2(BLUE);
10045838:	23c0      	movs	r3, #192	@ 0xc0
1004583a:	05db      	lsls	r3, r3, #23
1004583c:	0018      	movs	r0, r3
1004583e:	f7ff fb78 	bl	10044f32 <LL_RADIO_TIMER_DisableTimer2>

        /* program timer at next->wakeuptime */
        if ((next->ActionTag & RELATIVE) != 0)
10045842:	69fb      	ldr	r3, [r7, #28]
10045844:	785b      	ldrb	r3, [r3, #1]
10045846:	001a      	movs	r2, r3
10045848:	2320      	movs	r3, #32
1004584a:	4013      	ands	r3, r2
1004584c:	d01e      	beq.n	1004588c <HAL_RADIO_ActionPacketIsr+0x194>
        {
          time = HAL_RADIO_TIMER_GetCurrentSysTime() + HAL_RADIO_TIMER_UsToSystime(next->WakeupTime);
1004584e:	f001 fa4b 	bl	10046ce8 <HAL_RADIO_TIMER_GetCurrentSysTime>
10045852:	0002      	movs	r2, r0
10045854:	000b      	movs	r3, r1
10045856:	0014      	movs	r4, r2
10045858:	69fb      	ldr	r3, [r7, #28]
1004585a:	685b      	ldr	r3, [r3, #4]
1004585c:	0018      	movs	r0, r3
1004585e:	f001 fa1f 	bl	10046ca0 <HAL_RADIO_TIMER_UsToSystime>
10045862:	0003      	movs	r3, r0
10045864:	18e3      	adds	r3, r4, r3
10045866:	617b      	str	r3, [r7, #20]
          HAL_RADIO_TIMER_SetRadioTimerValue(time, (next->trans_config == STATEMACH_BYTE0_TXMODE_Msk), (next->ActionTag & PLL_TRIG));
10045868:	69fb      	ldr	r3, [r7, #28]
1004586a:	223c      	movs	r2, #60	@ 0x3c
1004586c:	5c9b      	ldrb	r3, [r3, r2]
1004586e:	3b80      	subs	r3, #128	@ 0x80
10045870:	425a      	negs	r2, r3
10045872:	4153      	adcs	r3, r2
10045874:	b2db      	uxtb	r3, r3
10045876:	0019      	movs	r1, r3
10045878:	69fb      	ldr	r3, [r7, #28]
1004587a:	785b      	ldrb	r3, [r3, #1]
1004587c:	2201      	movs	r2, #1
1004587e:	4013      	ands	r3, r2
10045880:	b2da      	uxtb	r2, r3
10045882:	697b      	ldr	r3, [r7, #20]
10045884:	0018      	movs	r0, r3
10045886:	f001 f917 	bl	10046ab8 <HAL_RADIO_TIMER_SetRadioTimerValue>
1004588a:	e011      	b.n	100458b0 <HAL_RADIO_ActionPacketIsr+0x1b8>
        }
        else
        {
          HAL_RADIO_TIMER_SetRadioTimerValue(next->WakeupTime, (next->trans_config == STATEMACH_BYTE0_TXMODE_Msk), (next->ActionTag & PLL_TRIG));
1004588c:	69fb      	ldr	r3, [r7, #28]
1004588e:	6858      	ldr	r0, [r3, #4]
10045890:	69fb      	ldr	r3, [r7, #28]
10045892:	223c      	movs	r2, #60	@ 0x3c
10045894:	5c9b      	ldrb	r3, [r3, r2]
10045896:	3b80      	subs	r3, #128	@ 0x80
10045898:	425a      	negs	r2, r3
1004589a:	4153      	adcs	r3, r2
1004589c:	b2db      	uxtb	r3, r3
1004589e:	0019      	movs	r1, r3
100458a0:	69fb      	ldr	r3, [r7, #28]
100458a2:	785b      	ldrb	r3, [r3, #1]
100458a4:	2201      	movs	r2, #1
100458a6:	4013      	ands	r3, r2
100458a8:	b2db      	uxtb	r3, r3
100458aa:	001a      	movs	r2, r3
100458ac:	f001 f904 	bl	10046ab8 <HAL_RADIO_TIMER_SetRadioTimerValue>
        /* back to back */
      }
    }

    /* Accept the packet even with CRC Error */
    if (((int_flags & BLUE_INTERRUPT1REG_RCVOK) != 0) || ((int_flags & BLUE_INTERRUPT1REG_RCVCRCERR) != 0))
100458b0:	687b      	ldr	r3, [r7, #4]
100458b2:	2b00      	cmp	r3, #0
100458b4:	db04      	blt.n	100458c0 <HAL_RADIO_ActionPacketIsr+0x1c8>
100458b6:	687a      	ldr	r2, [r7, #4]
100458b8:	2380      	movs	r3, #128	@ 0x80
100458ba:	05db      	lsls	r3, r3, #23
100458bc:	4013      	ands	r3, r2
100458be:	d012      	beq.n	100458e6 <HAL_RADIO_ActionPacketIsr+0x1ee>
    {

      uint64_t current_system_time;
      /* read RSSI */
      globalParameters.current_action_packet->rssi =  HAL_RADIO_ReadRSSI();
100458c0:	f7ff fe56 	bl	10045570 <HAL_RADIO_ReadRSSI>
100458c4:	0003      	movs	r3, r0
100458c6:	001a      	movs	r2, r3
100458c8:	4b15      	ldr	r3, [pc, #84]	@ (10045920 <HAL_RADIO_ActionPacketIsr+0x228>)
100458ca:	689b      	ldr	r3, [r3, #8]
100458cc:	615a      	str	r2, [r3, #20]

      /* bluedata->config = bluedata->config ^ 0x80 ;  toggle NESN bit
      bluedata->config = bluedata->config & 0x7F ;  //reset NESN bit */

      /* read time stamp */
      globalParameters.current_action_packet->timestamp_receive = HAL_RADIO_TIMER_GetAnchorPoint(&current_system_time);
100458ce:	2308      	movs	r3, #8
100458d0:	18fb      	adds	r3, r7, r3
100458d2:	0018      	movs	r0, r3
100458d4:	f001 f8dc 	bl	10046a90 <HAL_RADIO_TIMER_GetAnchorPoint>
100458d8:	0002      	movs	r2, r0
100458da:	000b      	movs	r3, r1
100458dc:	4910      	ldr	r1, [pc, #64]	@ (10045920 <HAL_RADIO_ActionPacketIsr+0x228>)
100458de:	6889      	ldr	r1, [r1, #8]
100458e0:	0013      	movs	r3, r2
100458e2:	610b      	str	r3, [r1, #16]
    {
100458e4:	e00b      	b.n	100458fe <HAL_RADIO_ActionPacketIsr+0x206>
    }
    else if ((int_flags & BLUE_INTERRUPT1REG_RCVTIMEOUT) != 0)
100458e6:	687a      	ldr	r2, [r7, #4]
100458e8:	2380      	movs	r3, #128	@ 0x80
100458ea:	04db      	lsls	r3, r3, #19
100458ec:	4013      	ands	r3, r2
100458ee:	d006      	beq.n	100458fe <HAL_RADIO_ActionPacketIsr+0x206>
    {
      /* read RSSI even if a timeout happens */
      globalParameters.current_action_packet->rssi =  HAL_RADIO_ReadRSSI();
100458f0:	f7ff fe3e 	bl	10045570 <HAL_RADIO_ReadRSSI>
100458f4:	0003      	movs	r3, r0
100458f6:	001a      	movs	r2, r3
100458f8:	4b09      	ldr	r3, [pc, #36]	@ (10045920 <HAL_RADIO_ActionPacketIsr+0x228>)
100458fa:	689b      	ldr	r3, [r3, #8]
100458fc:	615a      	str	r2, [r3, #20]
    }

    actionPacketBackup = globalParameters.current_action_packet;
100458fe:	4b08      	ldr	r3, [pc, #32]	@ (10045920 <HAL_RADIO_ActionPacketIsr+0x228>)
10045900:	689b      	ldr	r3, [r3, #8]
10045902:	613b      	str	r3, [r7, #16]
    globalParameters.current_action_packet = next;
10045904:	4b06      	ldr	r3, [pc, #24]	@ (10045920 <HAL_RADIO_ActionPacketIsr+0x228>)
10045906:	69fa      	ldr	r2, [r7, #28]
10045908:	609a      	str	r2, [r3, #8]
    actionPacketBackup->dataRoutine(actionPacketBackup, next);
1004590a:	693b      	ldr	r3, [r7, #16]
1004590c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
1004590e:	69f9      	ldr	r1, [r7, #28]
10045910:	693a      	ldr	r2, [r7, #16]
10045912:	0010      	movs	r0, r2
10045914:	4798      	blx	r3
  }

  return ;
10045916:	46c0      	nop			@ (mov r8, r8)
10045918:	46c0      	nop			@ (mov r8, r8)
}
1004591a:	46bd      	mov	sp, r7
1004591c:	b009      	add	sp, #36	@ 0x24
1004591e:	bd90      	pop	{r4, r7, pc}
10045920:	200004d8 	.word	0x200004d8
10045924:	60001800 	.word	0x60001800
10045928:	200000c0 	.word	0x200000c0
1004592c:	200000dc 	.word	0x200000dc

10045930 <HAL_RADIO_SetChannelMap>:
  * @param  StateMachineNo: state machine number in multi state.
  * @param  chan_remap: a 37-bit vector, one bit per channel from 0 to 36, with the LSB corresponding to the channel 0
  * @retval None
  */
void HAL_RADIO_SetChannelMap(uint8_t StateMachineNo, uint8_t *chan_remap)
{
10045930:	b590      	push	{r4, r7, lr}
10045932:	b085      	sub	sp, #20
10045934:	af00      	add	r7, sp, #0
10045936:	0002      	movs	r2, r0
10045938:	6039      	str	r1, [r7, #0]
1004593a:	1dfb      	adds	r3, r7, #7
1004593c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_STATE_VALID(StateMachineNo));

  for (uint8_t i = 0; i < 5; i++)
1004593e:	230f      	movs	r3, #15
10045940:	18fb      	adds	r3, r7, r3
10045942:	2200      	movs	r2, #0
10045944:	701a      	strb	r2, [r3, #0]
10045946:	e01a      	b.n	1004597e <HAL_RADIO_SetChannelMap+0x4e>
  {
    (bluedata + StateMachineNo)->USEDCHANNELFLAGS[i] = chan_remap[i];
10045948:	200f      	movs	r0, #15
1004594a:	183b      	adds	r3, r7, r0
1004594c:	781b      	ldrb	r3, [r3, #0]
1004594e:	683a      	ldr	r2, [r7, #0]
10045950:	18d1      	adds	r1, r2, r3
10045952:	1dfb      	adds	r3, r7, #7
10045954:	781a      	ldrb	r2, [r3, #0]
10045956:	0013      	movs	r3, r2
10045958:	009b      	lsls	r3, r3, #2
1004595a:	189b      	adds	r3, r3, r2
1004595c:	011b      	lsls	r3, r3, #4
1004595e:	4a19      	ldr	r2, [pc, #100]	@ (100459c4 <HAL_RADIO_SetChannelMap+0x94>)
10045960:	189a      	adds	r2, r3, r2
10045962:	0004      	movs	r4, r0
10045964:	183b      	adds	r3, r7, r0
10045966:	781b      	ldrb	r3, [r3, #0]
10045968:	7808      	ldrb	r0, [r1, #0]
1004596a:	212e      	movs	r1, #46	@ 0x2e
1004596c:	18d3      	adds	r3, r2, r3
1004596e:	185b      	adds	r3, r3, r1
10045970:	1c02      	adds	r2, r0, #0
10045972:	701a      	strb	r2, [r3, #0]
  for (uint8_t i = 0; i < 5; i++)
10045974:	193b      	adds	r3, r7, r4
10045976:	781a      	ldrb	r2, [r3, #0]
10045978:	193b      	adds	r3, r7, r4
1004597a:	3201      	adds	r2, #1
1004597c:	701a      	strb	r2, [r3, #0]
1004597e:	230f      	movs	r3, #15
10045980:	18fb      	adds	r3, r7, r3
10045982:	781b      	ldrb	r3, [r3, #0]
10045984:	2b04      	cmp	r3, #4
10045986:	d9df      	bls.n	10045948 <HAL_RADIO_SetChannelMap+0x18>
  }
  (bluedata + StateMachineNo)->USEDCHANNELFLAGS[4] &= 0x1F;
10045988:	1dfb      	adds	r3, r7, #7
1004598a:	781a      	ldrb	r2, [r3, #0]
1004598c:	0013      	movs	r3, r2
1004598e:	009b      	lsls	r3, r3, #2
10045990:	189b      	adds	r3, r3, r2
10045992:	011b      	lsls	r3, r3, #4
10045994:	4a0b      	ldr	r2, [pc, #44]	@ (100459c4 <HAL_RADIO_SetChannelMap+0x94>)
10045996:	4694      	mov	ip, r2
10045998:	4463      	add	r3, ip
1004599a:	2232      	movs	r2, #50	@ 0x32
1004599c:	5c9b      	ldrb	r3, [r3, r2]
1004599e:	b2d9      	uxtb	r1, r3
100459a0:	1dfb      	adds	r3, r7, #7
100459a2:	781a      	ldrb	r2, [r3, #0]
100459a4:	0013      	movs	r3, r2
100459a6:	009b      	lsls	r3, r3, #2
100459a8:	189b      	adds	r3, r3, r2
100459aa:	011b      	lsls	r3, r3, #4
100459ac:	4a05      	ldr	r2, [pc, #20]	@ (100459c4 <HAL_RADIO_SetChannelMap+0x94>)
100459ae:	4694      	mov	ip, r2
100459b0:	4463      	add	r3, ip
100459b2:	221f      	movs	r2, #31
100459b4:	400a      	ands	r2, r1
100459b6:	b2d1      	uxtb	r1, r2
100459b8:	2232      	movs	r2, #50	@ 0x32
100459ba:	5499      	strb	r1, [r3, r2]
  return;
100459bc:	46c0      	nop			@ (mov r8, r8)
}
100459be:	46bd      	mov	sp, r7
100459c0:	b005      	add	sp, #20
100459c2:	bd90      	pop	{r4, r7, pc}
100459c4:	200000dc 	.word	0x200000dc

100459c8 <HAL_RADIO_SetChannel>:
  * @param  channel: ble channel index. From 0 to 39.
  * @param  channel_increment: determines the hoping value.
  * @retval None
  */
void HAL_RADIO_SetChannel(uint8_t StateMachineNo, uint8_t channel, uint8_t channel_increment)
{
100459c8:	b590      	push	{r4, r7, lr}
100459ca:	b083      	sub	sp, #12
100459cc:	af00      	add	r7, sp, #0
100459ce:	0004      	movs	r4, r0
100459d0:	0008      	movs	r0, r1
100459d2:	0011      	movs	r1, r2
100459d4:	1dfb      	adds	r3, r7, #7
100459d6:	1c22      	adds	r2, r4, #0
100459d8:	701a      	strb	r2, [r3, #0]
100459da:	1dbb      	adds	r3, r7, #6
100459dc:	1c02      	adds	r2, r0, #0
100459de:	701a      	strb	r2, [r3, #0]
100459e0:	1d7b      	adds	r3, r7, #5
100459e2:	1c0a      	adds	r2, r1, #0
100459e4:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_STATE_VALID(StateMachineNo));
  assert_param(IS_RFCHANNEL_VALID(channel));

  MODIFY_REG((bluedata + StateMachineNo)->BYTE0, STATEMACH_BYTE0_UCHAN_Msk, channel);
100459e6:	1dfb      	adds	r3, r7, #7
100459e8:	781a      	ldrb	r2, [r3, #0]
100459ea:	0013      	movs	r3, r2
100459ec:	009b      	lsls	r3, r3, #2
100459ee:	189b      	adds	r3, r3, r2
100459f0:	011b      	lsls	r3, r3, #4
100459f2:	4a24      	ldr	r2, [pc, #144]	@ (10045a84 <HAL_RADIO_SetChannel+0xbc>)
100459f4:	4694      	mov	ip, r2
100459f6:	4463      	add	r3, ip
100459f8:	781b      	ldrb	r3, [r3, #0]
100459fa:	b2db      	uxtb	r3, r3
100459fc:	b25b      	sxtb	r3, r3
100459fe:	223f      	movs	r2, #63	@ 0x3f
10045a00:	4393      	bics	r3, r2
10045a02:	b25a      	sxtb	r2, r3
10045a04:	1dbb      	adds	r3, r7, #6
10045a06:	781b      	ldrb	r3, [r3, #0]
10045a08:	b25b      	sxtb	r3, r3
10045a0a:	4313      	orrs	r3, r2
10045a0c:	b259      	sxtb	r1, r3
10045a0e:	1dfb      	adds	r3, r7, #7
10045a10:	781a      	ldrb	r2, [r3, #0]
10045a12:	0013      	movs	r3, r2
10045a14:	009b      	lsls	r3, r3, #2
10045a16:	189b      	adds	r3, r3, r2
10045a18:	011b      	lsls	r3, r3, #4
10045a1a:	4a1a      	ldr	r2, [pc, #104]	@ (10045a84 <HAL_RADIO_SetChannel+0xbc>)
10045a1c:	4694      	mov	ip, r2
10045a1e:	4463      	add	r3, ip
10045a20:	b2ca      	uxtb	r2, r1
10045a22:	701a      	strb	r2, [r3, #0]
  /*if TxRxPack.incchan = 0, then remap_chan is used as physical channel*/
  MODIFY_REG((bluedata + StateMachineNo)->BYTE1, STATEMACH_BYTE1_REMAP_CHAN_Msk, channel);
10045a24:	1dfb      	adds	r3, r7, #7
10045a26:	781a      	ldrb	r2, [r3, #0]
10045a28:	0013      	movs	r3, r2
10045a2a:	009b      	lsls	r3, r3, #2
10045a2c:	189b      	adds	r3, r3, r2
10045a2e:	011b      	lsls	r3, r3, #4
10045a30:	4a14      	ldr	r2, [pc, #80]	@ (10045a84 <HAL_RADIO_SetChannel+0xbc>)
10045a32:	4694      	mov	ip, r2
10045a34:	4463      	add	r3, ip
10045a36:	785b      	ldrb	r3, [r3, #1]
10045a38:	b2db      	uxtb	r3, r3
10045a3a:	b25b      	sxtb	r3, r3
10045a3c:	223f      	movs	r2, #63	@ 0x3f
10045a3e:	4393      	bics	r3, r2
10045a40:	b25a      	sxtb	r2, r3
10045a42:	1dbb      	adds	r3, r7, #6
10045a44:	781b      	ldrb	r3, [r3, #0]
10045a46:	b25b      	sxtb	r3, r3
10045a48:	4313      	orrs	r3, r2
10045a4a:	b259      	sxtb	r1, r3
10045a4c:	1dfb      	adds	r3, r7, #7
10045a4e:	781a      	ldrb	r2, [r3, #0]
10045a50:	0013      	movs	r3, r2
10045a52:	009b      	lsls	r3, r3, #2
10045a54:	189b      	adds	r3, r3, r2
10045a56:	011b      	lsls	r3, r3, #4
10045a58:	4a0a      	ldr	r2, [pc, #40]	@ (10045a84 <HAL_RADIO_SetChannel+0xbc>)
10045a5a:	4694      	mov	ip, r2
10045a5c:	4463      	add	r3, ip
10045a5e:	b2ca      	uxtb	r2, r1
10045a60:	705a      	strb	r2, [r3, #1]
  (bluedata + StateMachineNo)->HOPINCR = channel_increment;
10045a62:	1dfb      	adds	r3, r7, #7
10045a64:	781a      	ldrb	r2, [r3, #0]
10045a66:	0013      	movs	r3, r2
10045a68:	009b      	lsls	r3, r3, #2
10045a6a:	189b      	adds	r3, r3, r2
10045a6c:	011b      	lsls	r3, r3, #4
10045a6e:	4a05      	ldr	r2, [pc, #20]	@ (10045a84 <HAL_RADIO_SetChannel+0xbc>)
10045a70:	4694      	mov	ip, r2
10045a72:	4463      	add	r3, ip
10045a74:	1d7a      	adds	r2, r7, #5
10045a76:	212d      	movs	r1, #45	@ 0x2d
10045a78:	7812      	ldrb	r2, [r2, #0]
10045a7a:	545a      	strb	r2, [r3, r1]
  return;
10045a7c:	46c0      	nop			@ (mov r8, r8)
}
10045a7e:	46bd      	mov	sp, r7
10045a80:	b003      	add	sp, #12
10045a82:	bd90      	pop	{r4, r7, pc}
10045a84:	200000dc 	.word	0x200000dc

10045a88 <HAL_RADIO_SetTxAttributes>:
  * @param  crc_init: CRC initialization value.
  *         This value must be 0x555555 when channel frequency is one of these values: 37, 38, 39.
  * @retval None
  */
void HAL_RADIO_SetTxAttributes(uint8_t StateMachineNo, uint32_t NetworkID, uint32_t crc_init)
{
10045a88:	b580      	push	{r7, lr}
10045a8a:	b084      	sub	sp, #16
10045a8c:	af00      	add	r7, sp, #0
10045a8e:	60b9      	str	r1, [r7, #8]
10045a90:	607a      	str	r2, [r7, #4]
10045a92:	210f      	movs	r1, #15
10045a94:	187b      	adds	r3, r7, r1
10045a96:	1c02      	adds	r2, r0, #0
10045a98:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_STATE_VALID(StateMachineNo));

  (bluedata + StateMachineNo)->ACCADDR = NetworkID;
10045a9a:	0008      	movs	r0, r1
10045a9c:	183b      	adds	r3, r7, r0
10045a9e:	781a      	ldrb	r2, [r3, #0]
10045aa0:	0013      	movs	r3, r2
10045aa2:	009b      	lsls	r3, r3, #2
10045aa4:	189b      	adds	r3, r3, r2
10045aa6:	011b      	lsls	r3, r3, #4
10045aa8:	4a18      	ldr	r2, [pc, #96]	@ (10045b0c <HAL_RADIO_SetTxAttributes+0x84>)
10045aaa:	4694      	mov	ip, r2
10045aac:	4463      	add	r3, ip
10045aae:	68ba      	ldr	r2, [r7, #8]
10045ab0:	625a      	str	r2, [r3, #36]	@ 0x24
  (bluedata + StateMachineNo)->CRCINIT[0] = crc_init;
10045ab2:	183b      	adds	r3, r7, r0
10045ab4:	781a      	ldrb	r2, [r3, #0]
10045ab6:	0013      	movs	r3, r2
10045ab8:	009b      	lsls	r3, r3, #2
10045aba:	189b      	adds	r3, r3, r2
10045abc:	011b      	lsls	r3, r3, #4
10045abe:	4a13      	ldr	r2, [pc, #76]	@ (10045b0c <HAL_RADIO_SetTxAttributes+0x84>)
10045ac0:	4694      	mov	ip, r2
10045ac2:	4463      	add	r3, ip
10045ac4:	687a      	ldr	r2, [r7, #4]
10045ac6:	b2d1      	uxtb	r1, r2
10045ac8:	2228      	movs	r2, #40	@ 0x28
10045aca:	5499      	strb	r1, [r3, r2]
  (bluedata + StateMachineNo)->CRCINIT[1] = crc_init >> 8;
10045acc:	687b      	ldr	r3, [r7, #4]
10045ace:	0a19      	lsrs	r1, r3, #8
10045ad0:	183b      	adds	r3, r7, r0
10045ad2:	781a      	ldrb	r2, [r3, #0]
10045ad4:	0013      	movs	r3, r2
10045ad6:	009b      	lsls	r3, r3, #2
10045ad8:	189b      	adds	r3, r3, r2
10045ada:	011b      	lsls	r3, r3, #4
10045adc:	4a0b      	ldr	r2, [pc, #44]	@ (10045b0c <HAL_RADIO_SetTxAttributes+0x84>)
10045ade:	4694      	mov	ip, r2
10045ae0:	4463      	add	r3, ip
10045ae2:	b2c9      	uxtb	r1, r1
10045ae4:	2229      	movs	r2, #41	@ 0x29
10045ae6:	5499      	strb	r1, [r3, r2]
  (bluedata + StateMachineNo)->CRCINIT[2] = crc_init >> 16;
10045ae8:	687b      	ldr	r3, [r7, #4]
10045aea:	0c19      	lsrs	r1, r3, #16
10045aec:	183b      	adds	r3, r7, r0
10045aee:	781a      	ldrb	r2, [r3, #0]
10045af0:	0013      	movs	r3, r2
10045af2:	009b      	lsls	r3, r3, #2
10045af4:	189b      	adds	r3, r3, r2
10045af6:	011b      	lsls	r3, r3, #4
10045af8:	4a04      	ldr	r2, [pc, #16]	@ (10045b0c <HAL_RADIO_SetTxAttributes+0x84>)
10045afa:	4694      	mov	ip, r2
10045afc:	4463      	add	r3, ip
10045afe:	b2c9      	uxtb	r1, r1
10045b00:	222a      	movs	r2, #42	@ 0x2a
10045b02:	5499      	strb	r1, [r3, r2]
  return;
10045b04:	46c0      	nop			@ (mov r8, r8)
}
10045b06:	46bd      	mov	sp, r7
10045b08:	b004      	add	sp, #16
10045b0a:	bd80      	pop	{r7, pc}
10045b0c:	200000dc 	.word	0x200000dc

10045b10 <HAL_RADIO_SetGlobalReceiveTimeout>:
  *         and access address detection.
  * @param  ReceiveTimeout: receive window length in microseconds.
  * @retval None
  */
void HAL_RADIO_SetGlobalReceiveTimeout(uint32_t ReceiveTimeout)
{
10045b10:	b580      	push	{r7, lr}
10045b12:	b082      	sub	sp, #8
10045b14:	af00      	add	r7, sp, #0
10045b16:	6078      	str	r0, [r7, #4]
  /* Set the Rx window Timeout expressed as: 4^(RCVTIMEOUT_19_18)*RCVTIMEOUT_17_0 */
  if (ReceiveTimeout < 0x40000)
10045b18:	687a      	ldr	r2, [r7, #4]
10045b1a:	2380      	movs	r3, #128	@ 0x80
10045b1c:	02db      	lsls	r3, r3, #11
10045b1e:	429a      	cmp	r2, r3
10045b20:	d211      	bcs.n	10045b46 <HAL_RADIO_SetGlobalReceiveTimeout+0x36>
  {
    BLUEGLOB->RCVTIMEOUT[0] = (ReceiveTimeout)       & 0x000000FF;
10045b22:	4b3a      	ldr	r3, [pc, #232]	@ (10045c0c <HAL_RADIO_SetGlobalReceiveTimeout+0xfc>)
10045b24:	687a      	ldr	r2, [r7, #4]
10045b26:	b2d2      	uxtb	r2, r2
10045b28:	745a      	strb	r2, [r3, #17]
    BLUEGLOB->RCVTIMEOUT[1] = (ReceiveTimeout >> 8)  & 0x000000FF;
10045b2a:	687b      	ldr	r3, [r7, #4]
10045b2c:	0a1a      	lsrs	r2, r3, #8
10045b2e:	4b37      	ldr	r3, [pc, #220]	@ (10045c0c <HAL_RADIO_SetGlobalReceiveTimeout+0xfc>)
10045b30:	b2d2      	uxtb	r2, r2
10045b32:	749a      	strb	r2, [r3, #18]
    BLUEGLOB->RCVTIMEOUT[2] = (ReceiveTimeout >> 16) & 0x00000003;
10045b34:	687b      	ldr	r3, [r7, #4]
10045b36:	0c1b      	lsrs	r3, r3, #16
10045b38:	b2db      	uxtb	r3, r3
10045b3a:	4a34      	ldr	r2, [pc, #208]	@ (10045c0c <HAL_RADIO_SetGlobalReceiveTimeout+0xfc>)
10045b3c:	2103      	movs	r1, #3
10045b3e:	400b      	ands	r3, r1
10045b40:	b2db      	uxtb	r3, r3
10045b42:	74d3      	strb	r3, [r2, #19]
  }
  else
  {
    /* error */
  }
}
10045b44:	e05e      	b.n	10045c04 <HAL_RADIO_SetGlobalReceiveTimeout+0xf4>
  else if (ReceiveTimeout < 0x100000)
10045b46:	687a      	ldr	r2, [r7, #4]
10045b48:	2380      	movs	r3, #128	@ 0x80
10045b4a:	035b      	lsls	r3, r3, #13
10045b4c:	429a      	cmp	r2, r3
10045b4e:	d21a      	bcs.n	10045b86 <HAL_RADIO_SetGlobalReceiveTimeout+0x76>
    BLUEGLOB->RCVTIMEOUT[0] = (ReceiveTimeout >> 2)  & 0x000000FF;
10045b50:	687b      	ldr	r3, [r7, #4]
10045b52:	089a      	lsrs	r2, r3, #2
10045b54:	4b2d      	ldr	r3, [pc, #180]	@ (10045c0c <HAL_RADIO_SetGlobalReceiveTimeout+0xfc>)
10045b56:	b2d2      	uxtb	r2, r2
10045b58:	745a      	strb	r2, [r3, #17]
    BLUEGLOB->RCVTIMEOUT[1] = (ReceiveTimeout >> 10) & 0x000000FF;
10045b5a:	687b      	ldr	r3, [r7, #4]
10045b5c:	0a9a      	lsrs	r2, r3, #10
10045b5e:	4b2b      	ldr	r3, [pc, #172]	@ (10045c0c <HAL_RADIO_SetGlobalReceiveTimeout+0xfc>)
10045b60:	b2d2      	uxtb	r2, r2
10045b62:	749a      	strb	r2, [r3, #18]
    BLUEGLOB->RCVTIMEOUT[2] = (ReceiveTimeout >> 18) & 0x00000003;
10045b64:	687b      	ldr	r3, [r7, #4]
10045b66:	0c9b      	lsrs	r3, r3, #18
10045b68:	b2db      	uxtb	r3, r3
10045b6a:	4a28      	ldr	r2, [pc, #160]	@ (10045c0c <HAL_RADIO_SetGlobalReceiveTimeout+0xfc>)
10045b6c:	2103      	movs	r1, #3
10045b6e:	400b      	ands	r3, r1
10045b70:	b2db      	uxtb	r3, r3
10045b72:	74d3      	strb	r3, [r2, #19]
    BLUEGLOB->RCVTIMEOUT[2] |= 0x04;
10045b74:	4b25      	ldr	r3, [pc, #148]	@ (10045c0c <HAL_RADIO_SetGlobalReceiveTimeout+0xfc>)
10045b76:	7cdb      	ldrb	r3, [r3, #19]
10045b78:	b2db      	uxtb	r3, r3
10045b7a:	4a24      	ldr	r2, [pc, #144]	@ (10045c0c <HAL_RADIO_SetGlobalReceiveTimeout+0xfc>)
10045b7c:	2104      	movs	r1, #4
10045b7e:	430b      	orrs	r3, r1
10045b80:	b2db      	uxtb	r3, r3
10045b82:	74d3      	strb	r3, [r2, #19]
}
10045b84:	e03e      	b.n	10045c04 <HAL_RADIO_SetGlobalReceiveTimeout+0xf4>
  else if (ReceiveTimeout < 0x400000)
10045b86:	687a      	ldr	r2, [r7, #4]
10045b88:	2380      	movs	r3, #128	@ 0x80
10045b8a:	03db      	lsls	r3, r3, #15
10045b8c:	429a      	cmp	r2, r3
10045b8e:	d21a      	bcs.n	10045bc6 <HAL_RADIO_SetGlobalReceiveTimeout+0xb6>
    BLUEGLOB->RCVTIMEOUT[0] = (ReceiveTimeout >> 4)  & 0x000000FF;
10045b90:	687b      	ldr	r3, [r7, #4]
10045b92:	091a      	lsrs	r2, r3, #4
10045b94:	4b1d      	ldr	r3, [pc, #116]	@ (10045c0c <HAL_RADIO_SetGlobalReceiveTimeout+0xfc>)
10045b96:	b2d2      	uxtb	r2, r2
10045b98:	745a      	strb	r2, [r3, #17]
    BLUEGLOB->RCVTIMEOUT[1] = (ReceiveTimeout >> 12) & 0x000000FF;
10045b9a:	687b      	ldr	r3, [r7, #4]
10045b9c:	0b1a      	lsrs	r2, r3, #12
10045b9e:	4b1b      	ldr	r3, [pc, #108]	@ (10045c0c <HAL_RADIO_SetGlobalReceiveTimeout+0xfc>)
10045ba0:	b2d2      	uxtb	r2, r2
10045ba2:	749a      	strb	r2, [r3, #18]
    BLUEGLOB->RCVTIMEOUT[2] = (ReceiveTimeout >> 20) & 0x00000003;
10045ba4:	687b      	ldr	r3, [r7, #4]
10045ba6:	0d1b      	lsrs	r3, r3, #20
10045ba8:	b2db      	uxtb	r3, r3
10045baa:	4a18      	ldr	r2, [pc, #96]	@ (10045c0c <HAL_RADIO_SetGlobalReceiveTimeout+0xfc>)
10045bac:	2103      	movs	r1, #3
10045bae:	400b      	ands	r3, r1
10045bb0:	b2db      	uxtb	r3, r3
10045bb2:	74d3      	strb	r3, [r2, #19]
    BLUEGLOB->RCVTIMEOUT[2] |= 0x08;
10045bb4:	4b15      	ldr	r3, [pc, #84]	@ (10045c0c <HAL_RADIO_SetGlobalReceiveTimeout+0xfc>)
10045bb6:	7cdb      	ldrb	r3, [r3, #19]
10045bb8:	b2db      	uxtb	r3, r3
10045bba:	4a14      	ldr	r2, [pc, #80]	@ (10045c0c <HAL_RADIO_SetGlobalReceiveTimeout+0xfc>)
10045bbc:	2108      	movs	r1, #8
10045bbe:	430b      	orrs	r3, r1
10045bc0:	b2db      	uxtb	r3, r3
10045bc2:	74d3      	strb	r3, [r2, #19]
}
10045bc4:	e01e      	b.n	10045c04 <HAL_RADIO_SetGlobalReceiveTimeout+0xf4>
  else if (ReceiveTimeout < 0x1000000)
10045bc6:	687a      	ldr	r2, [r7, #4]
10045bc8:	2380      	movs	r3, #128	@ 0x80
10045bca:	045b      	lsls	r3, r3, #17
10045bcc:	429a      	cmp	r2, r3
10045bce:	d219      	bcs.n	10045c04 <HAL_RADIO_SetGlobalReceiveTimeout+0xf4>
    BLUEGLOB->RCVTIMEOUT[0] = (ReceiveTimeout >> 6)  & 0x000000FF ;
10045bd0:	687b      	ldr	r3, [r7, #4]
10045bd2:	099a      	lsrs	r2, r3, #6
10045bd4:	4b0d      	ldr	r3, [pc, #52]	@ (10045c0c <HAL_RADIO_SetGlobalReceiveTimeout+0xfc>)
10045bd6:	b2d2      	uxtb	r2, r2
10045bd8:	745a      	strb	r2, [r3, #17]
    BLUEGLOB->RCVTIMEOUT[1] = (ReceiveTimeout >> 14) & 0x000000FF ;
10045bda:	687b      	ldr	r3, [r7, #4]
10045bdc:	0b9a      	lsrs	r2, r3, #14
10045bde:	4b0b      	ldr	r3, [pc, #44]	@ (10045c0c <HAL_RADIO_SetGlobalReceiveTimeout+0xfc>)
10045be0:	b2d2      	uxtb	r2, r2
10045be2:	749a      	strb	r2, [r3, #18]
    BLUEGLOB->RCVTIMEOUT[2] = (ReceiveTimeout >> 22) & 0x00000003 ;
10045be4:	687b      	ldr	r3, [r7, #4]
10045be6:	0d9b      	lsrs	r3, r3, #22
10045be8:	b2db      	uxtb	r3, r3
10045bea:	4a08      	ldr	r2, [pc, #32]	@ (10045c0c <HAL_RADIO_SetGlobalReceiveTimeout+0xfc>)
10045bec:	2103      	movs	r1, #3
10045bee:	400b      	ands	r3, r1
10045bf0:	b2db      	uxtb	r3, r3
10045bf2:	74d3      	strb	r3, [r2, #19]
    BLUEGLOB->RCVTIMEOUT[2] |= 0x0C;
10045bf4:	4b05      	ldr	r3, [pc, #20]	@ (10045c0c <HAL_RADIO_SetGlobalReceiveTimeout+0xfc>)
10045bf6:	7cdb      	ldrb	r3, [r3, #19]
10045bf8:	b2db      	uxtb	r3, r3
10045bfa:	4a04      	ldr	r2, [pc, #16]	@ (10045c0c <HAL_RADIO_SetGlobalReceiveTimeout+0xfc>)
10045bfc:	210c      	movs	r1, #12
10045bfe:	430b      	orrs	r3, r1
10045c00:	b2db      	uxtb	r3, r3
10045c02:	74d3      	strb	r3, [r2, #19]
}
10045c04:	46c0      	nop			@ (mov r8, r8)
10045c06:	46bd      	mov	sp, r7
10045c08:	b002      	add	sp, #8
10045c0a:	bd80      	pop	{r7, pc}
10045c0c:	200000c0 	.word	0x200000c0

10045c10 <HAL_RADIO_SetReservedArea>:
  *         is executed via either the API mechanism, or the next mechanism.
  * @param  p: pointer to action packet.
  * @retval None
  */
void HAL_RADIO_SetReservedArea(ActionPacket *p)
{
10045c10:	b580      	push	{r7, lr}
10045c12:	b084      	sub	sp, #16
10045c14:	af00      	add	r7, sp, #0
10045c16:	6078      	str	r0, [r7, #4]
  uint32_t relTimeout;
  uint32_t cnt;

  /*Init to 0 the TxRxPack*/
  for (cnt = 0; cnt < sizeof(p->trans_packet); cnt++)
10045c18:	2300      	movs	r3, #0
10045c1a:	60fb      	str	r3, [r7, #12]
10045c1c:	e009      	b.n	10045c32 <HAL_RADIO_SetReservedArea+0x22>
  {
    ((uint8_t *)(&(p->trans_packet)))[cnt] = 0;
10045c1e:	687b      	ldr	r3, [r7, #4]
10045c20:	3318      	adds	r3, #24
10045c22:	001a      	movs	r2, r3
10045c24:	68fb      	ldr	r3, [r7, #12]
10045c26:	18d3      	adds	r3, r2, r3
10045c28:	2200      	movs	r2, #0
10045c2a:	701a      	strb	r2, [r3, #0]
  for (cnt = 0; cnt < sizeof(p->trans_packet); cnt++)
10045c2c:	68fb      	ldr	r3, [r7, #12]
10045c2e:	3301      	adds	r3, #1
10045c30:	60fb      	str	r3, [r7, #12]
10045c32:	68fb      	ldr	r3, [r7, #12]
10045c34:	2b13      	cmp	r3, #19
10045c36:	d9f2      	bls.n	10045c1e <HAL_RADIO_SetReservedArea+0xe>
  }

  /*Set the TxRxPack for the next transaction. The list cannot be empty.
  At least,it can be composed by one only packet that points to itself*/
  p->trans_packet.NEXTPTR = BLUE_STRUCT_PTR_CAST(&(p->trans_packet));
10045c38:	687b      	ldr	r3, [r7, #4]
10045c3a:	3318      	adds	r3, #24
10045c3c:	001a      	movs	r2, r3
10045c3e:	687b      	ldr	r3, [r7, #4]
10045c40:	619a      	str	r2, [r3, #24]

  /* Set the buffer that contains the values to send or that stores
  the data received */
  p->trans_packet.DATAPTR = BLUE_DATA_PTR_CAST(p->data);
10045c42:	687b      	ldr	r3, [r7, #4]
10045c44:	689b      	ldr	r3, [r3, #8]
10045c46:	001a      	movs	r2, r3
10045c48:	687b      	ldr	r3, [r7, #4]
10045c4a:	621a      	str	r2, [r3, #32]

  /* Compensate the radio setup time from the back2back time */
  relTimeout = globalParameters.back2backTime - 70;
10045c4c:	4b46      	ldr	r3, [pc, #280]	@ (10045d68 <HAL_RADIO_SetReservedArea+0x158>)
10045c4e:	681b      	ldr	r3, [r3, #0]
10045c50:	3b46      	subs	r3, #70	@ 0x46
10045c52:	60bb      	str	r3, [r7, #8]

  /*Check if there is some action to perform next*/
//  if (p->next_false || p->next_true){ /* Host timer workaround */
  /* Set the Timeout for the Timer2 */
  p->trans_packet.TIMER2[0] = relTimeout & 0xFF;
10045c54:	68bb      	ldr	r3, [r7, #8]
10045c56:	b2d9      	uxtb	r1, r3
10045c58:	687b      	ldr	r3, [r7, #4]
10045c5a:	2224      	movs	r2, #36	@ 0x24
10045c5c:	5499      	strb	r1, [r3, r2]
  p->trans_packet.TIMER2[1] = (relTimeout >> 8) & 0xFF;
10045c5e:	68bb      	ldr	r3, [r7, #8]
10045c60:	0a1b      	lsrs	r3, r3, #8
10045c62:	b2d9      	uxtb	r1, r3
10045c64:	687b      	ldr	r3, [r7, #4]
10045c66:	2225      	movs	r2, #37	@ 0x25
10045c68:	5499      	strb	r1, [r3, r2]
  p->trans_packet.BYTE14 = (relTimeout >> 16) & TXRXPACK_BYTE14_TIMER2_19_16_Msk;
10045c6a:	68bb      	ldr	r3, [r7, #8]
10045c6c:	0c1b      	lsrs	r3, r3, #16
10045c6e:	b2db      	uxtb	r3, r3
10045c70:	220f      	movs	r2, #15
10045c72:	4013      	ands	r3, r2
10045c74:	b2d9      	uxtb	r1, r3
10045c76:	687b      	ldr	r3, [r7, #4]
10045c78:	2226      	movs	r2, #38	@ 0x26
10045c7a:	5499      	strb	r1, [r3, r2]
  /*Enable relative timer*/
  p->trans_packet.BYTE14 |= TXRXPACK_BYTE14_TIMER2EN_Msk;
10045c7c:	687b      	ldr	r3, [r7, #4]
10045c7e:	2226      	movs	r2, #38	@ 0x26
10045c80:	5c9b      	ldrb	r3, [r3, r2]
10045c82:	b2db      	uxtb	r3, r3
10045c84:	2210      	movs	r2, #16
10045c86:	4313      	orrs	r3, r2
10045c88:	b2d9      	uxtb	r1, r3
10045c8a:	687b      	ldr	r3, [r7, #4]
10045c8c:	2226      	movs	r2, #38	@ 0x26
10045c8e:	5499      	strb	r1, [r3, r2]
//  }

  /* TrigDone or TrigReceive */
  if ((p->ActionTag & TIMESTAMP_POSITION) == 0)
10045c90:	687b      	ldr	r3, [r7, #4]
10045c92:	785b      	ldrb	r3, [r3, #1]
10045c94:	001a      	movs	r2, r3
10045c96:	2340      	movs	r3, #64	@ 0x40
10045c98:	4013      	ands	r3, r2
10045c9a:	d10b      	bne.n	10045cb4 <HAL_RADIO_SetReservedArea+0xa4>
  {
    p->trans_packet.BYTE14 |= TIMESTAMP_POSITION_LASTBIT;
10045c9c:	687b      	ldr	r3, [r7, #4]
10045c9e:	2226      	movs	r2, #38	@ 0x26
10045ca0:	5c9b      	ldrb	r3, [r3, r2]
10045ca2:	b2db      	uxtb	r3, r3
10045ca4:	2280      	movs	r2, #128	@ 0x80
10045ca6:	4252      	negs	r2, r2
10045ca8:	4313      	orrs	r3, r2
10045caa:	b2d9      	uxtb	r1, r3
10045cac:	687b      	ldr	r3, [r7, #4]
10045cae:	2226      	movs	r2, #38	@ 0x26
10045cb0:	5499      	strb	r1, [r3, r2]
10045cb2:	e009      	b.n	10045cc8 <HAL_RADIO_SetReservedArea+0xb8>
  }
  else
  {
    p->trans_packet.BYTE14 |= TIMESTAMP_POSITION_ACCESSADDRESS;
10045cb4:	687b      	ldr	r3, [r7, #4]
10045cb6:	2226      	movs	r2, #38	@ 0x26
10045cb8:	5c9b      	ldrb	r3, [r3, r2]
10045cba:	b2db      	uxtb	r3, r3
10045cbc:	2240      	movs	r2, #64	@ 0x40
10045cbe:	4313      	orrs	r3, r2
10045cc0:	b2d9      	uxtb	r1, r3
10045cc2:	687b      	ldr	r3, [r7, #4]
10045cc4:	2226      	movs	r2, #38	@ 0x26
10045cc6:	5499      	strb	r1, [r3, r2]
  }

  p->trans_packet.BYTE4 |= TXRXPACK_BYTE4_KEEPSEMAREQ_Msk | \
10045cc8:	687b      	ldr	r3, [r7, #4]
10045cca:	7f1b      	ldrb	r3, [r3, #28]
10045ccc:	b2db      	uxtb	r3, r3
10045cce:	b25a      	sxtb	r2, r3
                           (p->ActionTag & INC_CHAN) | \
10045cd0:	687b      	ldr	r3, [r7, #4]
10045cd2:	785b      	ldrb	r3, [r3, #1]
10045cd4:	b25b      	sxtb	r3, r3
10045cd6:	217f      	movs	r1, #127	@ 0x7f
10045cd8:	438b      	bics	r3, r1
10045cda:	b25b      	sxtb	r3, r3
  p->trans_packet.BYTE4 |= TXRXPACK_BYTE4_KEEPSEMAREQ_Msk | \
10045cdc:	2104      	movs	r1, #4
10045cde:	430b      	orrs	r3, r1
10045ce0:	b259      	sxtb	r1, r3
                           (p->ActionTag & PLL_TRIG);
10045ce2:	687b      	ldr	r3, [r7, #4]
10045ce4:	785b      	ldrb	r3, [r3, #1]
10045ce6:	b25b      	sxtb	r3, r3
10045ce8:	2001      	movs	r0, #1
10045cea:	4003      	ands	r3, r0
10045cec:	b25b      	sxtb	r3, r3
                           (p->ActionTag & INC_CHAN) | \
10045cee:	430b      	orrs	r3, r1
10045cf0:	b25b      	sxtb	r3, r3
  p->trans_packet.BYTE4 |= TXRXPACK_BYTE4_KEEPSEMAREQ_Msk | \
10045cf2:	4313      	orrs	r3, r2
10045cf4:	b25b      	sxtb	r3, r3
10045cf6:	b2da      	uxtb	r2, r3
10045cf8:	687b      	ldr	r3, [r7, #4]
10045cfa:	771a      	strb	r2, [r3, #28]

  p->trans_packet.BYTE5 |= (p->ActionTag & WHITENING_DISABLE) | \
10045cfc:	687b      	ldr	r3, [r7, #4]
10045cfe:	7f5b      	ldrb	r3, [r3, #29]
10045d00:	b2da      	uxtb	r2, r3
10045d02:	687b      	ldr	r3, [r7, #4]
10045d04:	785b      	ldrb	r3, [r3, #1]
10045d06:	2110      	movs	r1, #16
10045d08:	400b      	ands	r3, r1
10045d0a:	b2db      	uxtb	r3, r3
10045d0c:	4313      	orrs	r3, r2
10045d0e:	b2db      	uxtb	r3, r3
10045d10:	2206      	movs	r2, #6
10045d12:	4313      	orrs	r3, r2
10045d14:	b2da      	uxtb	r2, r3
10045d16:	687b      	ldr	r3, [r7, #4]
10045d18:	775a      	strb	r2, [r3, #29]
                           TXRXPACK_BYTE5_TXDATAREADY_Msk | \
                           TXRXPACK_BYTE5_ALLTABLEREADY_Msk;

  /* Enable all interrupts */
  p->trans_packet.BYTE15 = TXRXPACK_BYTE15_INT_EN_Msk;
10045d1a:	687b      	ldr	r3, [r7, #4]
10045d1c:	2227      	movs	r2, #39	@ 0x27
10045d1e:	21ff      	movs	r1, #255	@ 0xff
10045d20:	5499      	strb	r1, [r3, r2]

  /* By Default the next action is considered as next_true */
  if ((p->next_true->ActionTag & TXRX) != 0)
10045d22:	687b      	ldr	r3, [r7, #4]
10045d24:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
10045d26:	785b      	ldrb	r3, [r3, #1]
10045d28:	001a      	movs	r2, r3
10045d2a:	2302      	movs	r3, #2
10045d2c:	4013      	ands	r3, r2
10045d2e:	d007      	beq.n	10045d40 <HAL_RADIO_SetReservedArea+0x130>
  {
    /* Set the type of the next activity */
    p->trans_packet.BYTE5 |= TXRXPACK_BYTE5_NEXTTXMODE_Msk;
10045d30:	687b      	ldr	r3, [r7, #4]
10045d32:	7f5b      	ldrb	r3, [r3, #29]
10045d34:	b2db      	uxtb	r3, r3
10045d36:	2201      	movs	r2, #1
10045d38:	4313      	orrs	r3, r2
10045d3a:	b2da      	uxtb	r2, r3
10045d3c:	687b      	ldr	r3, [r7, #4]
10045d3e:	775a      	strb	r2, [r3, #29]
  }

  p->trans_config = 0; // Rx
10045d40:	687b      	ldr	r3, [r7, #4]
10045d42:	223c      	movs	r2, #60	@ 0x3c
10045d44:	2100      	movs	r1, #0
10045d46:	5499      	strb	r1, [r3, r2]
  if ((p->ActionTag & TXRX) != 0)
10045d48:	687b      	ldr	r3, [r7, #4]
10045d4a:	785b      	ldrb	r3, [r3, #1]
10045d4c:	001a      	movs	r2, r3
10045d4e:	2302      	movs	r3, #2
10045d50:	4013      	ands	r3, r2
10045d52:	d004      	beq.n	10045d5e <HAL_RADIO_SetReservedArea+0x14e>
  {
    p->trans_config = STATEMACH_BYTE0_TXMODE_Msk; // Tx
10045d54:	687b      	ldr	r3, [r7, #4]
10045d56:	223c      	movs	r2, #60	@ 0x3c
10045d58:	2180      	movs	r1, #128	@ 0x80
10045d5a:	5499      	strb	r1, [r3, r2]
  }
  return ;
10045d5c:	46c0      	nop			@ (mov r8, r8)
10045d5e:	46c0      	nop			@ (mov r8, r8)
}
10045d60:	46bd      	mov	sp, r7
10045d62:	b004      	add	sp, #16
10045d64:	bd80      	pop	{r7, pc}
10045d66:	46c0      	nop			@ (mov r8, r8)
10045d68:	200004d8 	.word	0x200004d8

10045d6c <HAL_RADIO_MakeActionPacketPending>:
  * @retval uint8_t with following values:
  *          - 0x00 : Success.
  *          - 0xC4 : Radio is busy, action packet has not been executed.
  */
uint8_t HAL_RADIO_MakeActionPacketPending(ActionPacket *p)
{
10045d6c:	b5b0      	push	{r4, r5, r7, lr}
10045d6e:	b086      	sub	sp, #24
10045d70:	af00      	add	r7, sp, #0
10045d72:	6078      	str	r0, [r7, #4]
  uint8_t returnValue = SUCCESS_0;
10045d74:	2517      	movs	r5, #23
10045d76:	197b      	adds	r3, r7, r5
10045d78:	2200      	movs	r2, #0
10045d7a:	701a      	strb	r2, [r3, #0]
  uint32_t time;
  uint32_t dummyTime;
  if (HAL_RADIO_GetStatus(&dummyTime) == BLUE_IDLE_0)
10045d7c:	2308      	movs	r3, #8
10045d7e:	18fb      	adds	r3, r7, r3
10045d80:	0018      	movs	r0, r3
10045d82:	f000 f8b9 	bl	10045ef8 <HAL_RADIO_GetStatus>
10045d86:	1e03      	subs	r3, r0, #0
10045d88:	d000      	beq.n	10045d8c <HAL_RADIO_MakeActionPacketPending+0x20>
10045d8a:	e0a3      	b.n	10045ed4 <HAL_RADIO_MakeActionPacketPending+0x168>
  {
    uint8_t  statemachineNo;
    BlueTransStruct *p1 ;

    /* timer1/2 off */
    LL_RADIO_TIMER_DisableTimer1(BLUE);
10045d8c:	23c0      	movs	r3, #192	@ 0xc0
10045d8e:	05db      	lsls	r3, r3, #23
10045d90:	0018      	movs	r0, r3
10045d92:	f7ff f8bf 	bl	10044f14 <LL_RADIO_TIMER_DisableTimer1>
    LL_RADIO_TIMER_DisableTimer2(BLUE);
10045d96:	23c0      	movs	r3, #192	@ 0xc0
10045d98:	05db      	lsls	r3, r3, #23
10045d9a:	0018      	movs	r0, r3
10045d9c:	f7ff f8c9 	bl	10044f32 <LL_RADIO_TIMER_DisableTimer2>

    statemachineNo = 0x7F & p->StateMachineNo;
10045da0:	687b      	ldr	r3, [r7, #4]
10045da2:	781a      	ldrb	r2, [r3, #0]
10045da4:	2016      	movs	r0, #22
10045da6:	183b      	adds	r3, r7, r0
10045da8:	217f      	movs	r1, #127	@ 0x7f
10045daa:	400a      	ands	r2, r1
10045dac:	701a      	strb	r2, [r3, #0]

    BLUEGLOB->BYTE4 = (p->StateMachineNo | GLOBAL_BYTE4_ACTIVE_Msk);
10045dae:	687b      	ldr	r3, [r7, #4]
10045db0:	781b      	ldrb	r3, [r3, #0]
10045db2:	494e      	ldr	r1, [pc, #312]	@ (10045eec <HAL_RADIO_MakeActionPacketPending+0x180>)
10045db4:	2280      	movs	r2, #128	@ 0x80
10045db6:	4252      	negs	r2, r2
10045db8:	4313      	orrs	r3, r2
10045dba:	b2db      	uxtb	r3, r3
10045dbc:	710b      	strb	r3, [r1, #4]

    p1 = &p->trans_packet;
10045dbe:	687b      	ldr	r3, [r7, #4]
10045dc0:	3318      	adds	r3, #24
10045dc2:	613b      	str	r3, [r7, #16]
    (bluedata + statemachineNo)->RCVPOINT = BLUE_STRUCT_PTR_CAST(p1);
10045dc4:	183b      	adds	r3, r7, r0
10045dc6:	781a      	ldrb	r2, [r3, #0]
10045dc8:	0013      	movs	r3, r2
10045dca:	009b      	lsls	r3, r3, #2
10045dcc:	189b      	adds	r3, r3, r2
10045dce:	011b      	lsls	r3, r3, #4
10045dd0:	4a47      	ldr	r2, [pc, #284]	@ (10045ef0 <HAL_RADIO_MakeActionPacketPending+0x184>)
10045dd2:	4694      	mov	ip, r2
10045dd4:	4463      	add	r3, ip
10045dd6:	693a      	ldr	r2, [r7, #16]
10045dd8:	609a      	str	r2, [r3, #8]
    (bluedata + statemachineNo)->TXPOINT = BLUE_STRUCT_PTR_CAST(p1);
10045dda:	183b      	adds	r3, r7, r0
10045ddc:	781a      	ldrb	r2, [r3, #0]
10045dde:	0013      	movs	r3, r2
10045de0:	009b      	lsls	r3, r3, #2
10045de2:	189b      	adds	r3, r3, r2
10045de4:	011b      	lsls	r3, r3, #4
10045de6:	4a42      	ldr	r2, [pc, #264]	@ (10045ef0 <HAL_RADIO_MakeActionPacketPending+0x184>)
10045de8:	4694      	mov	ip, r2
10045dea:	4463      	add	r3, ip
10045dec:	693a      	ldr	r2, [r7, #16]
10045dee:	605a      	str	r2, [r3, #4]
    (bluedata + statemachineNo)->MAXRECEIVEDLENGTH = p->MaxReceiveLength;
10045df0:	183b      	adds	r3, r7, r0
10045df2:	781a      	ldrb	r2, [r3, #0]
10045df4:	0013      	movs	r3, r2
10045df6:	009b      	lsls	r3, r3, #2
10045df8:	189b      	adds	r3, r3, r2
10045dfa:	011b      	lsls	r3, r3, #4
10045dfc:	4a3c      	ldr	r2, [pc, #240]	@ (10045ef0 <HAL_RADIO_MakeActionPacketPending+0x184>)
10045dfe:	4694      	mov	ip, r2
10045e00:	4463      	add	r3, ip
10045e02:	687a      	ldr	r2, [r7, #4]
10045e04:	7891      	ldrb	r1, [r2, #2]
10045e06:	222b      	movs	r2, #43	@ 0x2b
10045e08:	5499      	strb	r1, [r3, r2]

#if defined (STM32WB05) || defined(STM32WB09 )
    (bluedata + statemachineNo)->BYTE3 |= 1 << 3;
#endif

    globalParameters.current_action_packet = p;
10045e0a:	4b3a      	ldr	r3, [pc, #232]	@ (10045ef4 <HAL_RADIO_MakeActionPacketPending+0x188>)
10045e0c:	687a      	ldr	r2, [r7, #4]
10045e0e:	609a      	str	r2, [r3, #8]

    MODIFY_REG((bluedata + statemachineNo)->BYTE0, STATEMACH_BYTE0_TXMODE_Msk,
10045e10:	183b      	adds	r3, r7, r0
10045e12:	781a      	ldrb	r2, [r3, #0]
10045e14:	0013      	movs	r3, r2
10045e16:	009b      	lsls	r3, r3, #2
10045e18:	189b      	adds	r3, r3, r2
10045e1a:	011b      	lsls	r3, r3, #4
10045e1c:	4a34      	ldr	r2, [pc, #208]	@ (10045ef0 <HAL_RADIO_MakeActionPacketPending+0x184>)
10045e1e:	4694      	mov	ip, r2
10045e20:	4463      	add	r3, ip
10045e22:	781b      	ldrb	r3, [r3, #0]
10045e24:	b2db      	uxtb	r3, r3
10045e26:	b25b      	sxtb	r3, r3
10045e28:	227f      	movs	r2, #127	@ 0x7f
10045e2a:	4013      	ands	r3, r2
10045e2c:	b25a      	sxtb	r2, r3
10045e2e:	687b      	ldr	r3, [r7, #4]
10045e30:	213c      	movs	r1, #60	@ 0x3c
10045e32:	5c5b      	ldrb	r3, [r3, r1]
10045e34:	b25b      	sxtb	r3, r3
10045e36:	4313      	orrs	r3, r2
10045e38:	b259      	sxtb	r1, r3
10045e3a:	183b      	adds	r3, r7, r0
10045e3c:	781a      	ldrb	r2, [r3, #0]
10045e3e:	0013      	movs	r3, r2
10045e40:	009b      	lsls	r3, r3, #2
10045e42:	189b      	adds	r3, r3, r2
10045e44:	011b      	lsls	r3, r3, #4
10045e46:	4a2a      	ldr	r2, [pc, #168]	@ (10045ef0 <HAL_RADIO_MakeActionPacketPending+0x184>)
10045e48:	4694      	mov	ip, r2
10045e4a:	4463      	add	r3, ip
10045e4c:	b2ca      	uxtb	r2, r1
10045e4e:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
10045e50:	b672      	cpsid	i
}
10045e52:	46c0      	nop			@ (mov r8, r8)
               p->trans_config); /* Transmission or reception */

    /* program timer at next->wakeuptime */
    MASK_INTERRUPTS();
    if ((p->ActionTag & RELATIVE) != 0)
10045e54:	687b      	ldr	r3, [r7, #4]
10045e56:	785b      	ldrb	r3, [r3, #1]
10045e58:	001a      	movs	r2, r3
10045e5a:	2320      	movs	r3, #32
10045e5c:	4013      	ands	r3, r2
10045e5e:	d021      	beq.n	10045ea4 <HAL_RADIO_MakeActionPacketPending+0x138>
    {
      time = HAL_RADIO_TIMER_GetCurrentSysTime() + HAL_RADIO_TIMER_UsToSystime(p->WakeupTime);
10045e60:	f000 ff42 	bl	10046ce8 <HAL_RADIO_TIMER_GetCurrentSysTime>
10045e64:	0002      	movs	r2, r0
10045e66:	000b      	movs	r3, r1
10045e68:	0014      	movs	r4, r2
10045e6a:	687b      	ldr	r3, [r7, #4]
10045e6c:	685b      	ldr	r3, [r3, #4]
10045e6e:	0018      	movs	r0, r3
10045e70:	f000 ff16 	bl	10046ca0 <HAL_RADIO_TIMER_UsToSystime>
10045e74:	0003      	movs	r3, r0
10045e76:	18e3      	adds	r3, r4, r3
10045e78:	60fb      	str	r3, [r7, #12]
      returnValue = HAL_RADIO_TIMER_SetRadioTimerValue(time, (p->trans_config == STATEMACH_BYTE0_TXMODE_Msk), (p->ActionTag & PLL_TRIG));
10045e7a:	687b      	ldr	r3, [r7, #4]
10045e7c:	223c      	movs	r2, #60	@ 0x3c
10045e7e:	5c9b      	ldrb	r3, [r3, r2]
10045e80:	3b80      	subs	r3, #128	@ 0x80
10045e82:	425a      	negs	r2, r3
10045e84:	4153      	adcs	r3, r2
10045e86:	b2db      	uxtb	r3, r3
10045e88:	0019      	movs	r1, r3
10045e8a:	687b      	ldr	r3, [r7, #4]
10045e8c:	785b      	ldrb	r3, [r3, #1]
10045e8e:	2201      	movs	r2, #1
10045e90:	4013      	ands	r3, r2
10045e92:	b2da      	uxtb	r2, r3
10045e94:	68fb      	ldr	r3, [r7, #12]
10045e96:	0018      	movs	r0, r3
10045e98:	f000 fe0e 	bl	10046ab8 <HAL_RADIO_TIMER_SetRadioTimerValue>
10045e9c:	0002      	movs	r2, r0
10045e9e:	197b      	adds	r3, r7, r5
10045ea0:	701a      	strb	r2, [r3, #0]
10045ea2:	e015      	b.n	10045ed0 <HAL_RADIO_MakeActionPacketPending+0x164>
    }
    else /*absolute time*/
    {
      returnValue = HAL_RADIO_TIMER_SetRadioTimerValue(p->WakeupTime, (p->trans_config == STATEMACH_BYTE0_TXMODE_Msk), (p->ActionTag & PLL_TRIG));
10045ea4:	687b      	ldr	r3, [r7, #4]
10045ea6:	6858      	ldr	r0, [r3, #4]
10045ea8:	687b      	ldr	r3, [r7, #4]
10045eaa:	223c      	movs	r2, #60	@ 0x3c
10045eac:	5c9b      	ldrb	r3, [r3, r2]
10045eae:	3b80      	subs	r3, #128	@ 0x80
10045eb0:	425a      	negs	r2, r3
10045eb2:	4153      	adcs	r3, r2
10045eb4:	b2db      	uxtb	r3, r3
10045eb6:	0019      	movs	r1, r3
10045eb8:	687b      	ldr	r3, [r7, #4]
10045eba:	785b      	ldrb	r3, [r3, #1]
10045ebc:	2201      	movs	r2, #1
10045ebe:	4013      	ands	r3, r2
10045ec0:	b2db      	uxtb	r3, r3
10045ec2:	001a      	movs	r2, r3
10045ec4:	f000 fdf8 	bl	10046ab8 <HAL_RADIO_TIMER_SetRadioTimerValue>
10045ec8:	0002      	movs	r2, r0
10045eca:	2317      	movs	r3, #23
10045ecc:	18fb      	adds	r3, r7, r3
10045ece:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
10045ed0:	b662      	cpsie	i
}
10045ed2:	e003      	b.n	10045edc <HAL_RADIO_MakeActionPacketPending+0x170>

    UNMASK_INTERRUPTS();
  }
  else
  {
    returnValue = RADIO_BUSY_C4;
10045ed4:	2317      	movs	r3, #23
10045ed6:	18fb      	adds	r3, r7, r3
10045ed8:	22c4      	movs	r2, #196	@ 0xc4
10045eda:	701a      	strb	r2, [r3, #0]
  }
  return returnValue;
10045edc:	2317      	movs	r3, #23
10045ede:	18fb      	adds	r3, r7, r3
10045ee0:	781b      	ldrb	r3, [r3, #0]
}
10045ee2:	0018      	movs	r0, r3
10045ee4:	46bd      	mov	sp, r7
10045ee6:	b006      	add	sp, #24
10045ee8:	bdb0      	pop	{r4, r5, r7, pc}
10045eea:	46c0      	nop			@ (mov r8, r8)
10045eec:	200000c0 	.word	0x200000c0
10045ef0:	200000dc 	.word	0x200000dc
10045ef4:	200004d8 	.word	0x200004d8

10045ef8 <HAL_RADIO_GetStatus>:
  * @param  time: where to store the last value programmed.
  * @retval 0 if the radio controller is IDLE or no timer has been programmed
  * @retval 1 if the radio is ACTIVE and a radio timer has been programmed
  */
uint8_t HAL_RADIO_GetStatus(uint32_t *time)
{
10045ef8:	b590      	push	{r4, r7, lr}
10045efa:	b085      	sub	sp, #20
10045efc:	af00      	add	r7, sp, #0
10045efe:	6078      	str	r0, [r7, #4]
  uint8_t retValue = BLUE_IDLE_0;
10045f00:	210f      	movs	r1, #15
10045f02:	187b      	adds	r3, r7, r1
10045f04:	2200      	movs	r2, #0
10045f06:	701a      	strb	r2, [r3, #0]
  if ((BLUEGLOB->BYTE4 & GLOBAL_BYTE4_ACTIVE_Msk) != 0)
10045f08:	4b09      	ldr	r3, [pc, #36]	@ (10045f30 <HAL_RADIO_GetStatus+0x38>)
10045f0a:	791b      	ldrb	r3, [r3, #4]
10045f0c:	b2db      	uxtb	r3, r3
10045f0e:	b25b      	sxtb	r3, r3
10045f10:	2b00      	cmp	r3, #0
10045f12:	da06      	bge.n	10045f22 <HAL_RADIO_GetStatus+0x2a>
  {
    retValue = HAL_RADIO_TIMER_GetRadioTimerValue(time);
10045f14:	187c      	adds	r4, r7, r1
10045f16:	687b      	ldr	r3, [r7, #4]
10045f18:	0018      	movs	r0, r3
10045f1a:	f000 fe93 	bl	10046c44 <HAL_RADIO_TIMER_GetRadioTimerValue>
10045f1e:	0003      	movs	r3, r0
10045f20:	7023      	strb	r3, [r4, #0]
  }
  return retValue;
10045f22:	230f      	movs	r3, #15
10045f24:	18fb      	adds	r3, r7, r3
10045f26:	781b      	ldrb	r3, [r3, #0]
}
10045f28:	0018      	movs	r0, r3
10045f2a:	46bd      	mov	sp, r7
10045f2c:	b005      	add	sp, #20
10045f2e:	bd90      	pop	{r4, r7, pc}
10045f30:	200000c0 	.word	0x200000c0

10045f34 <HAL_RADIO_SetTxPower>:
  * @param  PowerLevel: power level which should set to this value.
  *         See the documentation inside the datasheet.
  * @retval None
  */
void HAL_RADIO_SetTxPower(uint8_t PowerLevel)
{
10045f34:	b580      	push	{r7, lr}
10045f36:	b084      	sub	sp, #16
10045f38:	af00      	add	r7, sp, #0
10045f3a:	0002      	movs	r2, r0
10045f3c:	1dfb      	adds	r3, r7, #7
10045f3e:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_POWERLEVEL_VALID(PowerLevel));

  for (uint8_t n = 0; n < STATEMACHINE_COUNT ; n++)
10045f40:	230f      	movs	r3, #15
10045f42:	18fb      	adds	r3, r7, r3
10045f44:	2200      	movs	r2, #0
10045f46:	701a      	strb	r2, [r3, #0]
10045f48:	e012      	b.n	10045f70 <HAL_RADIO_SetTxPower+0x3c>
  {
    (bluedata + n)->PAPOWER = PowerLevel;
10045f4a:	200f      	movs	r0, #15
10045f4c:	183b      	adds	r3, r7, r0
10045f4e:	781a      	ldrb	r2, [r3, #0]
10045f50:	0013      	movs	r3, r2
10045f52:	009b      	lsls	r3, r3, #2
10045f54:	189b      	adds	r3, r3, r2
10045f56:	011b      	lsls	r3, r3, #4
10045f58:	4a0a      	ldr	r2, [pc, #40]	@ (10045f84 <HAL_RADIO_SetTxPower+0x50>)
10045f5a:	4694      	mov	ip, r2
10045f5c:	4463      	add	r3, ip
10045f5e:	1dfa      	adds	r2, r7, #7
10045f60:	212c      	movs	r1, #44	@ 0x2c
10045f62:	7812      	ldrb	r2, [r2, #0]
10045f64:	545a      	strb	r2, [r3, r1]
  for (uint8_t n = 0; n < STATEMACHINE_COUNT ; n++)
10045f66:	183b      	adds	r3, r7, r0
10045f68:	781a      	ldrb	r2, [r3, #0]
10045f6a:	183b      	adds	r3, r7, r0
10045f6c:	3201      	adds	r2, #1
10045f6e:	701a      	strb	r2, [r3, #0]
10045f70:	230f      	movs	r3, #15
10045f72:	18fb      	adds	r3, r7, r3
10045f74:	781b      	ldrb	r3, [r3, #0]
10045f76:	2b01      	cmp	r3, #1
10045f78:	d9e7      	bls.n	10045f4a <HAL_RADIO_SetTxPower+0x16>
  }
  return;
10045f7a:	46c0      	nop			@ (mov r8, r8)
}
10045f7c:	46bd      	mov	sp, r7
10045f7e:	b004      	add	sp, #16
10045f80:	bd80      	pop	{r7, pc}
10045f82:	46c0      	nop			@ (mov r8, r8)
10045f84:	200000dc 	.word	0x200000dc

10045f88 <HAL_RADIO_SetNetworkID>:
  * @retval uint8_t: return value
  *           - 0x00 : Success.
  *           - 0xC0 : Invalid parameter.
  */
uint8_t HAL_RADIO_SetNetworkID(uint32_t ID)
{
10045f88:	b580      	push	{r7, lr}
10045f8a:	b082      	sub	sp, #8
10045f8c:	af00      	add	r7, sp, #0
10045f8e:	6078      	str	r0, [r7, #4]
  networkID = ID;
10045f90:	4b03      	ldr	r3, [pc, #12]	@ (10045fa0 <HAL_RADIO_SetNetworkID+0x18>)
10045f92:	687a      	ldr	r2, [r7, #4]
10045f94:	601a      	str	r2, [r3, #0]
  return 0;
10045f96:	2300      	movs	r3, #0
}
10045f98:	0018      	movs	r0, r3
10045f9a:	46bd      	mov	sp, r7
10045f9c:	b002      	add	sp, #8
10045f9e:	bd80      	pop	{r7, pc}
10045fa0:	200006a0 	.word	0x200006a0

10045fa4 <HAL_RADIO_ReceivePacketWithAck>:
  */
uint8_t HAL_RADIO_ReceivePacketWithAck(uint8_t channel, uint32_t wakeup_time, uint8_t *rxBuffer, uint8_t *txBuffer,
                                       uint32_t receive_timeout,
                                       uint8_t receive_length,
                                       uint8_t (*Callback)(ActionPacket *, ActionPacket *))
{
10045fa4:	b5f0      	push	{r4, r5, r6, r7, lr}
10045fa6:	b08b      	sub	sp, #44	@ 0x2c
10045fa8:	af00      	add	r7, sp, #0
10045faa:	60b9      	str	r1, [r7, #8]
10045fac:	607a      	str	r2, [r7, #4]
10045fae:	603b      	str	r3, [r7, #0]
10045fb0:	250f      	movs	r5, #15
10045fb2:	197b      	adds	r3, r7, r5
10045fb4:	1c02      	adds	r2, r0, #0
10045fb6:	701a      	strb	r2, [r3, #0]
  uint8_t returnValue = SUCCESS_0;
10045fb8:	2627      	movs	r6, #39	@ 0x27
10045fba:	19bb      	adds	r3, r7, r6
10045fbc:	2200      	movs	r2, #0
10045fbe:	701a      	strb	r2, [r3, #0]
  uint32_t dummy;
  uint32_t time;

  time = (uint32_t)HAL_RADIO_TIMER_GetCurrentSysTime() + HAL_RADIO_TIMER_UsToSystime(wakeup_time);
10045fc0:	f000 fe92 	bl	10046ce8 <HAL_RADIO_TIMER_GetCurrentSysTime>
10045fc4:	0002      	movs	r2, r0
10045fc6:	000b      	movs	r3, r1
10045fc8:	0014      	movs	r4, r2
10045fca:	68bb      	ldr	r3, [r7, #8]
10045fcc:	0018      	movs	r0, r3
10045fce:	f000 fe67 	bl	10046ca0 <HAL_RADIO_TIMER_UsToSystime>
10045fd2:	0003      	movs	r3, r0
10045fd4:	18e3      	adds	r3, r4, r3
10045fd6:	623b      	str	r3, [r7, #32]

  if (channel > 39)
10045fd8:	197b      	adds	r3, r7, r5
10045fda:	781b      	ldrb	r3, [r3, #0]
10045fdc:	2b27      	cmp	r3, #39	@ 0x27
10045fde:	d902      	bls.n	10045fe6 <HAL_RADIO_ReceivePacketWithAck+0x42>
  {
    returnValue = INVALID_PARAMETER_C0;
10045fe0:	19bb      	adds	r3, r7, r6
10045fe2:	22c0      	movs	r2, #192	@ 0xc0
10045fe4:	701a      	strb	r2, [r3, #0]
  }

  if (HAL_RADIO_GetStatus(&dummy) != BLUE_IDLE_0)
10045fe6:	231c      	movs	r3, #28
10045fe8:	18fb      	adds	r3, r7, r3
10045fea:	0018      	movs	r0, r3
10045fec:	f7ff ff84 	bl	10045ef8 <HAL_RADIO_GetStatus>
10045ff0:	1e03      	subs	r3, r0, #0
10045ff2:	d003      	beq.n	10045ffc <HAL_RADIO_ReceivePacketWithAck+0x58>
  {
    returnValue = RADIO_BUSY_C4;
10045ff4:	2327      	movs	r3, #39	@ 0x27
10045ff6:	18fb      	adds	r3, r7, r3
10045ff8:	22c4      	movs	r2, #196	@ 0xc4
10045ffa:	701a      	strb	r2, [r3, #0]
  }

  if (returnValue == SUCCESS_0)
10045ffc:	2427      	movs	r4, #39	@ 0x27
10045ffe:	193b      	adds	r3, r7, r4
10046000:	781b      	ldrb	r3, [r3, #0]
10046002:	2b00      	cmp	r3, #0
10046004:	d16a      	bne.n	100460dc <HAL_RADIO_ReceivePacketWithAck+0x138>
  {
    uint8_t map[5] = {0xFFU, 0xFFU, 0xFFU, 0xFFU, 0xFFU};
10046006:	2014      	movs	r0, #20
10046008:	183b      	adds	r3, r7, r0
1004600a:	4a38      	ldr	r2, [pc, #224]	@ (100460ec <HAL_RADIO_ReceivePacketWithAck+0x148>)
1004600c:	6811      	ldr	r1, [r2, #0]
1004600e:	6019      	str	r1, [r3, #0]
10046010:	7912      	ldrb	r2, [r2, #4]
10046012:	711a      	strb	r2, [r3, #4]

    HAL_RADIO_SetChannelMap(0, &map[0]);
10046014:	183b      	adds	r3, r7, r0
10046016:	0019      	movs	r1, r3
10046018:	2000      	movs	r0, #0
1004601a:	f7ff fc89 	bl	10045930 <HAL_RADIO_SetChannelMap>
    HAL_RADIO_SetChannel(0, channel, 0);
1004601e:	230f      	movs	r3, #15
10046020:	18fb      	adds	r3, r7, r3
10046022:	781b      	ldrb	r3, [r3, #0]
10046024:	2200      	movs	r2, #0
10046026:	0019      	movs	r1, r3
10046028:	2000      	movs	r0, #0
1004602a:	f7ff fccd 	bl	100459c8 <HAL_RADIO_SetChannel>
    HAL_RADIO_SetTxAttributes(0, networkID, 0x555555);
1004602e:	4b30      	ldr	r3, [pc, #192]	@ (100460f0 <HAL_RADIO_ReceivePacketWithAck+0x14c>)
10046030:	681b      	ldr	r3, [r3, #0]
10046032:	4a30      	ldr	r2, [pc, #192]	@ (100460f4 <HAL_RADIO_ReceivePacketWithAck+0x150>)
10046034:	0019      	movs	r1, r3
10046036:	2000      	movs	r0, #0
10046038:	f7ff fd26 	bl	10045a88 <HAL_RADIO_SetTxAttributes>
    HAL_RADIO_SetGlobalReceiveTimeout(receive_timeout);
1004603c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
1004603e:	0018      	movs	r0, r3
10046040:	f7ff fd66 	bl	10045b10 <HAL_RADIO_SetGlobalReceiveTimeout>

    aPacket[0].StateMachineNo = 0;
10046044:	4b2c      	ldr	r3, [pc, #176]	@ (100460f8 <HAL_RADIO_ReceivePacketWithAck+0x154>)
10046046:	2200      	movs	r2, #0
10046048:	701a      	strb	r2, [r3, #0]
    aPacket[0].ActionTag =  PLL_TRIG;
1004604a:	4b2b      	ldr	r3, [pc, #172]	@ (100460f8 <HAL_RADIO_ReceivePacketWithAck+0x154>)
1004604c:	2201      	movs	r2, #1
1004604e:	705a      	strb	r2, [r3, #1]
    aPacket[0].WakeupTime = time;
10046050:	4b29      	ldr	r3, [pc, #164]	@ (100460f8 <HAL_RADIO_ReceivePacketWithAck+0x154>)
10046052:	6a3a      	ldr	r2, [r7, #32]
10046054:	605a      	str	r2, [r3, #4]
    aPacket[0].MaxReceiveLength = receive_length;
10046056:	4b28      	ldr	r3, [pc, #160]	@ (100460f8 <HAL_RADIO_ReceivePacketWithAck+0x154>)
10046058:	223c      	movs	r2, #60	@ 0x3c
1004605a:	2108      	movs	r1, #8
1004605c:	1852      	adds	r2, r2, r1
1004605e:	19d2      	adds	r2, r2, r7
10046060:	7812      	ldrb	r2, [r2, #0]
10046062:	709a      	strb	r2, [r3, #2]
    aPacket[0].data = rxBuffer;
10046064:	4b24      	ldr	r3, [pc, #144]	@ (100460f8 <HAL_RADIO_ReceivePacketWithAck+0x154>)
10046066:	687a      	ldr	r2, [r7, #4]
10046068:	609a      	str	r2, [r3, #8]
    aPacket[0].next_true = &aPacket[1];
1004606a:	4b23      	ldr	r3, [pc, #140]	@ (100460f8 <HAL_RADIO_ReceivePacketWithAck+0x154>)
1004606c:	4a23      	ldr	r2, [pc, #140]	@ (100460fc <HAL_RADIO_ReceivePacketWithAck+0x158>)
1004606e:	62da      	str	r2, [r3, #44]	@ 0x2c
    aPacket[0].next_false = NULL_0;
10046070:	4b21      	ldr	r3, [pc, #132]	@ (100460f8 <HAL_RADIO_ReceivePacketWithAck+0x154>)
10046072:	2200      	movs	r2, #0
10046074:	631a      	str	r2, [r3, #48]	@ 0x30
    aPacket[0].condRoutine = CondRoutineRxTrue;
10046076:	4b20      	ldr	r3, [pc, #128]	@ (100460f8 <HAL_RADIO_ReceivePacketWithAck+0x154>)
10046078:	4a21      	ldr	r2, [pc, #132]	@ (10046100 <HAL_RADIO_ReceivePacketWithAck+0x15c>)
1004607a:	635a      	str	r2, [r3, #52]	@ 0x34
    aPacket[0].dataRoutine = Callback;
1004607c:	4b1e      	ldr	r3, [pc, #120]	@ (100460f8 <HAL_RADIO_ReceivePacketWithAck+0x154>)
1004607e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
10046080:	639a      	str	r2, [r3, #56]	@ 0x38

    aPacket[1].StateMachineNo = 0;
10046082:	4b1d      	ldr	r3, [pc, #116]	@ (100460f8 <HAL_RADIO_ReceivePacketWithAck+0x154>)
10046084:	2240      	movs	r2, #64	@ 0x40
10046086:	2100      	movs	r1, #0
10046088:	5499      	strb	r1, [r3, r2]
    aPacket[1].ActionTag =  TXRX;
1004608a:	4b1b      	ldr	r3, [pc, #108]	@ (100460f8 <HAL_RADIO_ReceivePacketWithAck+0x154>)
1004608c:	2241      	movs	r2, #65	@ 0x41
1004608e:	2102      	movs	r1, #2
10046090:	5499      	strb	r1, [r3, r2]
    aPacket[1].WakeupTime = time;
10046092:	4b19      	ldr	r3, [pc, #100]	@ (100460f8 <HAL_RADIO_ReceivePacketWithAck+0x154>)
10046094:	6a3a      	ldr	r2, [r7, #32]
10046096:	645a      	str	r2, [r3, #68]	@ 0x44
    aPacket[1].MaxReceiveLength = 0; /* does not affect for Tx */
10046098:	4b17      	ldr	r3, [pc, #92]	@ (100460f8 <HAL_RADIO_ReceivePacketWithAck+0x154>)
1004609a:	2242      	movs	r2, #66	@ 0x42
1004609c:	2100      	movs	r1, #0
1004609e:	5499      	strb	r1, [r3, r2]
    aPacket[1].data = txBuffer;
100460a0:	4b15      	ldr	r3, [pc, #84]	@ (100460f8 <HAL_RADIO_ReceivePacketWithAck+0x154>)
100460a2:	683a      	ldr	r2, [r7, #0]
100460a4:	649a      	str	r2, [r3, #72]	@ 0x48
    aPacket[1].next_true = NULL_0;
100460a6:	4b14      	ldr	r3, [pc, #80]	@ (100460f8 <HAL_RADIO_ReceivePacketWithAck+0x154>)
100460a8:	2200      	movs	r2, #0
100460aa:	66da      	str	r2, [r3, #108]	@ 0x6c
    aPacket[1].next_false = NULL_0;
100460ac:	4b12      	ldr	r3, [pc, #72]	@ (100460f8 <HAL_RADIO_ReceivePacketWithAck+0x154>)
100460ae:	2200      	movs	r2, #0
100460b0:	671a      	str	r2, [r3, #112]	@ 0x70
    aPacket[1].condRoutine = CondRoutineTrue;
100460b2:	4b11      	ldr	r3, [pc, #68]	@ (100460f8 <HAL_RADIO_ReceivePacketWithAck+0x154>)
100460b4:	4a13      	ldr	r2, [pc, #76]	@ (10046104 <HAL_RADIO_ReceivePacketWithAck+0x160>)
100460b6:	675a      	str	r2, [r3, #116]	@ 0x74
    aPacket[1].dataRoutine = Callback;
100460b8:	4b0f      	ldr	r3, [pc, #60]	@ (100460f8 <HAL_RADIO_ReceivePacketWithAck+0x154>)
100460ba:	6cba      	ldr	r2, [r7, #72]	@ 0x48
100460bc:	679a      	str	r2, [r3, #120]	@ 0x78

    HAL_RADIO_SetReservedArea(&aPacket[0]);
100460be:	4b0e      	ldr	r3, [pc, #56]	@ (100460f8 <HAL_RADIO_ReceivePacketWithAck+0x154>)
100460c0:	0018      	movs	r0, r3
100460c2:	f7ff fda5 	bl	10045c10 <HAL_RADIO_SetReservedArea>
    HAL_RADIO_SetReservedArea(&aPacket[1]);
100460c6:	4b0d      	ldr	r3, [pc, #52]	@ (100460fc <HAL_RADIO_ReceivePacketWithAck+0x158>)
100460c8:	0018      	movs	r0, r3
100460ca:	f7ff fda1 	bl	10045c10 <HAL_RADIO_SetReservedArea>
    returnValue = HAL_RADIO_MakeActionPacketPending(&aPacket[0]);
100460ce:	193c      	adds	r4, r7, r4
100460d0:	4b09      	ldr	r3, [pc, #36]	@ (100460f8 <HAL_RADIO_ReceivePacketWithAck+0x154>)
100460d2:	0018      	movs	r0, r3
100460d4:	f7ff fe4a 	bl	10045d6c <HAL_RADIO_MakeActionPacketPending>
100460d8:	0003      	movs	r3, r0
100460da:	7023      	strb	r3, [r4, #0]
  }

  return returnValue;
100460dc:	2327      	movs	r3, #39	@ 0x27
100460de:	18fb      	adds	r3, r7, r3
100460e0:	781b      	ldrb	r3, [r3, #0]
}
100460e2:	0018      	movs	r0, r3
100460e4:	46bd      	mov	sp, r7
100460e6:	b00b      	add	sp, #44	@ 0x2c
100460e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
100460ea:	46c0      	nop			@ (mov r8, r8)
100460ec:	1004935c 	.word	0x1004935c
100460f0:	200006a0 	.word	0x200006a0
100460f4:	00555555 	.word	0x00555555
100460f8:	200004e4 	.word	0x200004e4
100460fc:	20000524 	.word	0x20000524
10046100:	10044f83 	.word	0x10044f83
10046104:	10044f71 	.word	0x10044f71

10046108 <HAL_RADIO_TxRxCallback>:

#endif /* USE_RADIO_PROPRIETARY_DRIVER */

__weak void HAL_RADIO_TxRxCallback(uint32_t flags)
{
10046108:	b580      	push	{r7, lr}
1004610a:	b082      	sub	sp, #8
1004610c:	af00      	add	r7, sp, #0
1004610e:	6078      	str	r0, [r7, #4]
}
10046110:	46c0      	nop			@ (mov r8, r8)
10046112:	46bd      	mov	sp, r7
10046114:	b002      	add	sp, #8
10046116:	bd80      	pop	{r7, pc}

10046118 <HAL_RADIO_TxRxSeqCallback>:


__weak void HAL_RADIO_TxRxSeqCallback(void)
{
10046118:	b580      	push	{r7, lr}
1004611a:	af00      	add	r7, sp, #0
}
1004611c:	46c0      	nop			@ (mov r8, r8)
1004611e:	46bd      	mov	sp, r7
10046120:	bd80      	pop	{r7, pc}

10046122 <HAL_RADIO_TXRX_IRQHandler>:

void HAL_RADIO_TXRX_IRQHandler(void)
{
10046122:	b580      	push	{r7, lr}
10046124:	b082      	sub	sp, #8
10046126:	af00      	add	r7, sp, #0
  uint32_t blue_status = BLUE->STATUSREG;
10046128:	23c0      	movs	r3, #192	@ 0xc0
1004612a:	05db      	lsls	r3, r3, #23
1004612c:	69db      	ldr	r3, [r3, #28]
1004612e:	607b      	str	r3, [r7, #4]
  uint32_t blue_interrupt = BLUE->INTERRUPT1REG;
10046130:	23c0      	movs	r3, #192	@ 0xc0
10046132:	05db      	lsls	r3, r3, #23
10046134:	685b      	ldr	r3, [r3, #4]
10046136:	603b      	str	r3, [r7, #0]

  /** clear all pending interrupts */
  BLUE->INTERRUPT1REG = blue_interrupt;
10046138:	23c0      	movs	r3, #192	@ 0xc0
1004613a:	05db      	lsls	r3, r3, #23
1004613c:	683a      	ldr	r2, [r7, #0]
1004613e:	605a      	str	r2, [r3, #4]

  HAL_RADIO_TIMER_EndOfRadioActivityIsr();
10046140:	f000 fda2 	bl	10046c88 <HAL_RADIO_TIMER_EndOfRadioActivityIsr>

#if (USE_RADIO_PROPRIETARY_DRIVER == 1)
  HAL_RADIO_ActionPacketIsr(blue_status | blue_interrupt);
10046144:	687a      	ldr	r2, [r7, #4]
10046146:	683b      	ldr	r3, [r7, #0]
10046148:	4313      	orrs	r3, r2
1004614a:	0018      	movs	r0, r3
1004614c:	f7ff fad4 	bl	100456f8 <HAL_RADIO_ActionPacketIsr>
#endif

  HAL_RADIO_TxRxCallback(blue_status | blue_interrupt);
10046150:	687a      	ldr	r2, [r7, #4]
10046152:	683b      	ldr	r3, [r7, #0]
10046154:	4313      	orrs	r3, r2
10046156:	0018      	movs	r0, r3
10046158:	f7ff ffd6 	bl	10046108 <HAL_RADIO_TxRxCallback>

  HAL_RADIO_TIMER_RadioTimerIsr();
1004615c:	f000 fd7f 	bl	10046c5e <HAL_RADIO_TIMER_RadioTimerIsr>
  /* If the device is configured with
     System clock = 64 MHz and BLE clock = 16 MHz
     a register read is necessary to end fine
     the clear interrupt register operation,
     due the AHB down converter latency */
  blue_interrupt = BLUE->INTERRUPT1REG;
10046160:	23c0      	movs	r3, #192	@ 0xc0
10046162:	05db      	lsls	r3, r3, #23
10046164:	685b      	ldr	r3, [r3, #4]
10046166:	603b      	str	r3, [r7, #0]
}
10046168:	46c0      	nop			@ (mov r8, r8)
1004616a:	46bd      	mov	sp, r7
1004616c:	b002      	add	sp, #8
1004616e:	bd80      	pop	{r7, pc}

10046170 <HAL_RADIO_TXRX_SEQ_IRQHandler>:


void HAL_RADIO_TXRX_SEQ_IRQHandler(void)
{
10046170:	b580      	push	{r7, lr}
10046172:	af00      	add	r7, sp, #0
  HAL_RADIO_TxRxSeqCallback();
10046174:	f7ff ffd0 	bl	10046118 <HAL_RADIO_TxRxSeqCallback>
}
10046178:	46c0      	nop			@ (mov r8, r8)
1004617a:	46bd      	mov	sp, r7
1004617c:	bd80      	pop	{r7, pc}
	...

10046180 <__NVIC_EnableIRQ>:
{
10046180:	b580      	push	{r7, lr}
10046182:	b082      	sub	sp, #8
10046184:	af00      	add	r7, sp, #0
10046186:	0002      	movs	r2, r0
10046188:	1dfb      	adds	r3, r7, #7
1004618a:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
1004618c:	1dfb      	adds	r3, r7, #7
1004618e:	781b      	ldrb	r3, [r3, #0]
10046190:	2b7f      	cmp	r3, #127	@ 0x7f
10046192:	d809      	bhi.n	100461a8 <__NVIC_EnableIRQ+0x28>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
10046194:	1dfb      	adds	r3, r7, #7
10046196:	781b      	ldrb	r3, [r3, #0]
10046198:	001a      	movs	r2, r3
1004619a:	231f      	movs	r3, #31
1004619c:	401a      	ands	r2, r3
1004619e:	4b04      	ldr	r3, [pc, #16]	@ (100461b0 <__NVIC_EnableIRQ+0x30>)
100461a0:	2101      	movs	r1, #1
100461a2:	4091      	lsls	r1, r2
100461a4:	000a      	movs	r2, r1
100461a6:	601a      	str	r2, [r3, #0]
}
100461a8:	46c0      	nop			@ (mov r8, r8)
100461aa:	46bd      	mov	sp, r7
100461ac:	b002      	add	sp, #8
100461ae:	bd80      	pop	{r7, pc}
100461b0:	e000e100 	.word	0xe000e100

100461b4 <LL_RADIO_TIMER_EnableTimer1>:
{
100461b4:	b580      	push	{r7, lr}
100461b6:	b082      	sub	sp, #8
100461b8:	af00      	add	r7, sp, #0
100461ba:	6078      	str	r0, [r7, #4]
  MODIFY_REG_FIELD(BLUEx->TIMEOUTDESTREG, BLUE_TIMEOUTDESTREG_DESTINATION, LL_RADIO_TIMER_1);
100461bc:	687b      	ldr	r3, [r7, #4]
100461be:	68db      	ldr	r3, [r3, #12]
100461c0:	2203      	movs	r2, #3
100461c2:	4393      	bics	r3, r2
100461c4:	2202      	movs	r2, #2
100461c6:	431a      	orrs	r2, r3
100461c8:	687b      	ldr	r3, [r7, #4]
100461ca:	60da      	str	r2, [r3, #12]
}
100461cc:	46c0      	nop			@ (mov r8, r8)
100461ce:	46bd      	mov	sp, r7
100461d0:	b002      	add	sp, #8
100461d2:	bd80      	pop	{r7, pc}

100461d4 <LL_RADIO_TIMER_DisableTimer1>:
{
100461d4:	b580      	push	{r7, lr}
100461d6:	b082      	sub	sp, #8
100461d8:	af00      	add	r7, sp, #0
100461da:	6078      	str	r0, [r7, #4]
  MODIFY_REG_FIELD(BLUEx->TIMEOUTDESTREG, BLUE_TIMEOUTDESTREG_DESTINATION, 0);
100461dc:	687b      	ldr	r3, [r7, #4]
100461de:	68db      	ldr	r3, [r3, #12]
100461e0:	2203      	movs	r2, #3
100461e2:	4393      	bics	r3, r2
100461e4:	001a      	movs	r2, r3
100461e6:	687b      	ldr	r3, [r7, #4]
100461e8:	60da      	str	r2, [r3, #12]
}
100461ea:	46c0      	nop			@ (mov r8, r8)
100461ec:	46bd      	mov	sp, r7
100461ee:	b002      	add	sp, #8
100461f0:	bd80      	pop	{r7, pc}

100461f2 <LL_RADIO_TIMER_IsEnabledTimer1>:
{
100461f2:	b580      	push	{r7, lr}
100461f4:	b082      	sub	sp, #8
100461f6:	af00      	add	r7, sp, #0
100461f8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(BLUEx->TIMEOUTDESTREG, BLUE_TIMEOUTDESTREG_DESTINATION) == (LL_RADIO_TIMER_1)) ? 1UL : 0UL);
100461fa:	687b      	ldr	r3, [r7, #4]
100461fc:	68db      	ldr	r3, [r3, #12]
100461fe:	2203      	movs	r2, #3
10046200:	4013      	ands	r3, r2
10046202:	2b02      	cmp	r3, #2
10046204:	d101      	bne.n	1004620a <LL_RADIO_TIMER_IsEnabledTimer1+0x18>
10046206:	2301      	movs	r3, #1
10046208:	e000      	b.n	1004620c <LL_RADIO_TIMER_IsEnabledTimer1+0x1a>
1004620a:	2300      	movs	r3, #0
}
1004620c:	0018      	movs	r0, r3
1004620e:	46bd      	mov	sp, r7
10046210:	b002      	add	sp, #8
10046212:	bd80      	pop	{r7, pc}

10046214 <LL_RADIO_TIMER_DisableTimer2>:
{
10046214:	b580      	push	{r7, lr}
10046216:	b082      	sub	sp, #8
10046218:	af00      	add	r7, sp, #0
1004621a:	6078      	str	r0, [r7, #4]
  MODIFY_REG_FIELD(BLUEx->TIMEOUTDESTREG, BLUE_TIMEOUTDESTREG_DESTINATION, 0);
1004621c:	687b      	ldr	r3, [r7, #4]
1004621e:	68db      	ldr	r3, [r3, #12]
10046220:	2203      	movs	r2, #3
10046222:	4393      	bics	r3, r2
10046224:	001a      	movs	r2, r3
10046226:	687b      	ldr	r3, [r7, #4]
10046228:	60da      	str	r2, [r3, #12]
}
1004622a:	46c0      	nop			@ (mov r8, r8)
1004622c:	46bd      	mov	sp, r7
1004622e:	b002      	add	sp, #8
10046230:	bd80      	pop	{r7, pc}

10046232 <LL_RADIO_TIMER_IsEnabledTimer2>:
{
10046232:	b580      	push	{r7, lr}
10046234:	b082      	sub	sp, #8
10046236:	af00      	add	r7, sp, #0
10046238:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(BLUEx->TIMEOUTDESTREG, BLUE_TIMEOUTDESTREG_DESTINATION) == (LL_RADIO_TIMER_2)) ? 1UL : 0UL);
1004623a:	687b      	ldr	r3, [r7, #4]
1004623c:	68db      	ldr	r3, [r3, #12]
1004623e:	2203      	movs	r2, #3
10046240:	4013      	ands	r3, r2
10046242:	2b03      	cmp	r3, #3
10046244:	d101      	bne.n	1004624a <LL_RADIO_TIMER_IsEnabledTimer2+0x18>
10046246:	2301      	movs	r3, #1
10046248:	e000      	b.n	1004624c <LL_RADIO_TIMER_IsEnabledTimer2+0x1a>
1004624a:	2300      	movs	r3, #0
}
1004624c:	0018      	movs	r0, r3
1004624e:	46bd      	mov	sp, r7
10046250:	b002      	add	sp, #8
10046252:	bd80      	pop	{r7, pc}

10046254 <LL_RADIO_TIMER_SetTimeout>:
{
10046254:	b580      	push	{r7, lr}
10046256:	b082      	sub	sp, #8
10046258:	af00      	add	r7, sp, #0
1004625a:	6078      	str	r0, [r7, #4]
1004625c:	6039      	str	r1, [r7, #0]
  WRITE_REG(BLUEx->TIMEOUTREG, timeout);
1004625e:	687b      	ldr	r3, [r7, #4]
10046260:	683a      	ldr	r2, [r7, #0]
10046262:	611a      	str	r2, [r3, #16]
}
10046264:	46c0      	nop			@ (mov r8, r8)
10046266:	46bd      	mov	sp, r7
10046268:	b002      	add	sp, #8
1004626a:	bd80      	pop	{r7, pc}

1004626c <LL_RADIO_TIMER_GetTimeout>:
{
1004626c:	b580      	push	{r7, lr}
1004626e:	b082      	sub	sp, #8
10046270:	af00      	add	r7, sp, #0
10046272:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_REG(BLUEx->TIMEOUTREG));
10046274:	687b      	ldr	r3, [r7, #4]
10046276:	691b      	ldr	r3, [r3, #16]
}
10046278:	0018      	movs	r0, r3
1004627a:	46bd      	mov	sp, r7
1004627c:	b002      	add	sp, #8
1004627e:	bd80      	pop	{r7, pc}

10046280 <LL_RADIO_TIMER_EnableBLEWakeupTimer>:
{
10046280:	b580      	push	{r7, lr}
10046282:	b082      	sub	sp, #8
10046284:	af00      	add	r7, sp, #0
10046286:	6078      	str	r0, [r7, #4]
  SET_BIT(WAKEUPx->BLUE_SLEEP_REQUEST_MODE, WAKEUP_BLUE_SLEEP_REQUEST_MODE_BLE_WAKEUP_EN);
10046288:	687b      	ldr	r3, [r7, #4]
1004628a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
1004628c:	2280      	movs	r2, #128	@ 0x80
1004628e:	05d2      	lsls	r2, r2, #23
10046290:	431a      	orrs	r2, r3
10046292:	687b      	ldr	r3, [r7, #4]
10046294:	629a      	str	r2, [r3, #40]	@ 0x28
}
10046296:	46c0      	nop			@ (mov r8, r8)
10046298:	46bd      	mov	sp, r7
1004629a:	b002      	add	sp, #8
1004629c:	bd80      	pop	{r7, pc}
	...

100462a0 <LL_RADIO_TIMER_DisableBLEWakeupTimer>:
{
100462a0:	b580      	push	{r7, lr}
100462a2:	b082      	sub	sp, #8
100462a4:	af00      	add	r7, sp, #0
100462a6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(WAKEUPx->BLUE_SLEEP_REQUEST_MODE, WAKEUP_BLUE_SLEEP_REQUEST_MODE_BLE_WAKEUP_EN);
100462a8:	687b      	ldr	r3, [r7, #4]
100462aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
100462ac:	4a03      	ldr	r2, [pc, #12]	@ (100462bc <LL_RADIO_TIMER_DisableBLEWakeupTimer+0x1c>)
100462ae:	401a      	ands	r2, r3
100462b0:	687b      	ldr	r3, [r7, #4]
100462b2:	629a      	str	r2, [r3, #40]	@ 0x28
}
100462b4:	46c0      	nop			@ (mov r8, r8)
100462b6:	46bd      	mov	sp, r7
100462b8:	b002      	add	sp, #8
100462ba:	bd80      	pop	{r7, pc}
100462bc:	bfffffff 	.word	0xbfffffff

100462c0 <LL_RADIO_TIMER_IsEnabledBLEWakeupTimer>:
{
100462c0:	b580      	push	{r7, lr}
100462c2:	b082      	sub	sp, #8
100462c4:	af00      	add	r7, sp, #0
100462c6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(WAKEUPx->BLUE_SLEEP_REQUEST_MODE, WAKEUP_BLUE_SLEEP_REQUEST_MODE_BLE_WAKEUP_EN) == (WAKEUP_BLUE_SLEEP_REQUEST_MODE_BLE_WAKEUP_EN)) ? 1UL : 0UL);
100462c8:	687b      	ldr	r3, [r7, #4]
100462ca:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
100462cc:	2380      	movs	r3, #128	@ 0x80
100462ce:	05db      	lsls	r3, r3, #23
100462d0:	401a      	ands	r2, r3
100462d2:	2380      	movs	r3, #128	@ 0x80
100462d4:	05db      	lsls	r3, r3, #23
100462d6:	429a      	cmp	r2, r3
100462d8:	d101      	bne.n	100462de <LL_RADIO_TIMER_IsEnabledBLEWakeupTimer+0x1e>
100462da:	2301      	movs	r3, #1
100462dc:	e000      	b.n	100462e0 <LL_RADIO_TIMER_IsEnabledBLEWakeupTimer+0x20>
100462de:	2300      	movs	r3, #0
}
100462e0:	0018      	movs	r0, r3
100462e2:	46bd      	mov	sp, r7
100462e4:	b002      	add	sp, #8
100462e6:	bd80      	pop	{r7, pc}

100462e8 <LL_RADIO_TIMER_EnableCPUWakeupTimer>:
{
100462e8:	b580      	push	{r7, lr}
100462ea:	b082      	sub	sp, #8
100462ec:	af00      	add	r7, sp, #0
100462ee:	6078      	str	r0, [r7, #4]
  SET_BIT(WAKEUPx->CM0_SLEEP_REQUEST_MODE, WAKEUP_CM0_SLEEP_REQUEST_MODE_CPU_WAKEUP_EN);
100462f0:	687b      	ldr	r3, [r7, #4]
100462f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
100462f4:	2280      	movs	r2, #128	@ 0x80
100462f6:	05d2      	lsls	r2, r2, #23
100462f8:	431a      	orrs	r2, r3
100462fa:	687b      	ldr	r3, [r7, #4]
100462fc:	631a      	str	r2, [r3, #48]	@ 0x30
}
100462fe:	46c0      	nop			@ (mov r8, r8)
10046300:	46bd      	mov	sp, r7
10046302:	b002      	add	sp, #8
10046304:	bd80      	pop	{r7, pc}
	...

10046308 <LL_RADIO_TIMER_DisableCPUWakeupTimer>:
{
10046308:	b580      	push	{r7, lr}
1004630a:	b082      	sub	sp, #8
1004630c:	af00      	add	r7, sp, #0
1004630e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(WAKEUPx->CM0_SLEEP_REQUEST_MODE, WAKEUP_CM0_SLEEP_REQUEST_MODE_CPU_WAKEUP_EN);
10046310:	687b      	ldr	r3, [r7, #4]
10046312:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
10046314:	4a03      	ldr	r2, [pc, #12]	@ (10046324 <LL_RADIO_TIMER_DisableCPUWakeupTimer+0x1c>)
10046316:	401a      	ands	r2, r3
10046318:	687b      	ldr	r3, [r7, #4]
1004631a:	631a      	str	r2, [r3, #48]	@ 0x30
}
1004631c:	46c0      	nop			@ (mov r8, r8)
1004631e:	46bd      	mov	sp, r7
10046320:	b002      	add	sp, #8
10046322:	bd80      	pop	{r7, pc}
10046324:	bfffffff 	.word	0xbfffffff

10046328 <LL_RADIO_TIMER_SetWakeupOffset>:
{
10046328:	b580      	push	{r7, lr}
1004632a:	b082      	sub	sp, #8
1004632c:	af00      	add	r7, sp, #0
1004632e:	6078      	str	r0, [r7, #4]
10046330:	000a      	movs	r2, r1
10046332:	1cfb      	adds	r3, r7, #3
10046334:	701a      	strb	r2, [r3, #0]
  WRITE_REG(WAKEUPx->WAKEUP_OFFSET[0], (Time & 0xFF));
10046336:	1cfb      	adds	r3, r7, #3
10046338:	781a      	ldrb	r2, [r3, #0]
1004633a:	687b      	ldr	r3, [r7, #4]
1004633c:	609a      	str	r2, [r3, #8]
}
1004633e:	46c0      	nop			@ (mov r8, r8)
10046340:	46bd      	mov	sp, r7
10046342:	b002      	add	sp, #8
10046344:	bd80      	pop	{r7, pc}

10046346 <LL_RADIO_TIMER_SetBLEWakeupTime>:
{
10046346:	b580      	push	{r7, lr}
10046348:	b082      	sub	sp, #8
1004634a:	af00      	add	r7, sp, #0
1004634c:	6078      	str	r0, [r7, #4]
1004634e:	6039      	str	r1, [r7, #0]
  WRITE_REG(WAKEUPx->BLUE_WAKEUP_TIME, Time);
10046350:	687b      	ldr	r3, [r7, #4]
10046352:	683a      	ldr	r2, [r7, #0]
10046354:	625a      	str	r2, [r3, #36]	@ 0x24
}
10046356:	46c0      	nop			@ (mov r8, r8)
10046358:	46bd      	mov	sp, r7
1004635a:	b002      	add	sp, #8
1004635c:	bd80      	pop	{r7, pc}

1004635e <LL_RADIO_TIMER_GetBLEWakeupTime>:
{
1004635e:	b580      	push	{r7, lr}
10046360:	b082      	sub	sp, #8
10046362:	af00      	add	r7, sp, #0
10046364:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_REG(WAKEUPx->BLUE_WAKEUP_TIME));
10046366:	687b      	ldr	r3, [r7, #4]
10046368:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
}
1004636a:	0018      	movs	r0, r3
1004636c:	46bd      	mov	sp, r7
1004636e:	b002      	add	sp, #8
10046370:	bd80      	pop	{r7, pc}

10046372 <LL_RADIO_TIMER_SetCPUWakeupTime>:
{
10046372:	b580      	push	{r7, lr}
10046374:	b082      	sub	sp, #8
10046376:	af00      	add	r7, sp, #0
10046378:	6078      	str	r0, [r7, #4]
1004637a:	6039      	str	r1, [r7, #0]
  WRITE_REG(WAKEUPx->CM0_WAKEUP_TIME, Time);
1004637c:	687b      	ldr	r3, [r7, #4]
1004637e:	683a      	ldr	r2, [r7, #0]
10046380:	62da      	str	r2, [r3, #44]	@ 0x2c
}
10046382:	46c0      	nop			@ (mov r8, r8)
10046384:	46bd      	mov	sp, r7
10046386:	b002      	add	sp, #8
10046388:	bd80      	pop	{r7, pc}

1004638a <LL_RADIO_TIMER_GetAbsoluteTime>:
{
1004638a:	b580      	push	{r7, lr}
1004638c:	b082      	sub	sp, #8
1004638e:	af00      	add	r7, sp, #0
10046390:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_REG(WAKEUPx->ABSOLUTE_TIME));
10046392:	687b      	ldr	r3, [r7, #4]
10046394:	691b      	ldr	r3, [r3, #16]
}
10046396:	0018      	movs	r0, r3
10046398:	46bd      	mov	sp, r7
1004639a:	b002      	add	sp, #8
1004639c:	bd80      	pop	{r7, pc}

1004639e <LL_RADIO_TIMER_EnableWakeupTimerLowPowerMode>:
  * @rmtoll BLUE_SLEEP_REQUEST_MODE    SLEEP_EN   LL_RADIO_TIMER_EnableWakeupTimerLowPowerMode
  * @param  WAKEUPx Radio Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_TIMER_EnableWakeupTimerLowPowerMode(WAKEUP_TypeDef *WAKEUPx)
{
1004639e:	b580      	push	{r7, lr}
100463a0:	b082      	sub	sp, #8
100463a2:	af00      	add	r7, sp, #0
100463a4:	6078      	str	r0, [r7, #4]
  SET_BIT(WAKEUPx->BLUE_SLEEP_REQUEST_MODE, WAKEUP_BLUE_SLEEP_REQUEST_MODE_SLEEP_EN);
100463a6:	687b      	ldr	r3, [r7, #4]
100463a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
100463aa:	2280      	movs	r2, #128	@ 0x80
100463ac:	0592      	lsls	r2, r2, #22
100463ae:	431a      	orrs	r2, r3
100463b0:	687b      	ldr	r3, [r7, #4]
100463b2:	629a      	str	r2, [r3, #40]	@ 0x28
}
100463b4:	46c0      	nop			@ (mov r8, r8)
100463b6:	46bd      	mov	sp, r7
100463b8:	b002      	add	sp, #8
100463ba:	bd80      	pop	{r7, pc}

100463bc <LL_RADIO_TIMER_SetSleepRequestMode>:
  * @param  WAKEUPx Radio Timer instance
  * @param  mode Sleep mode value in range 0-7
  * @retval None.
  */
__STATIC_INLINE void LL_RADIO_TIMER_SetSleepRequestMode(WAKEUP_TypeDef *WAKEUPx, uint8_t mode)
{
100463bc:	b580      	push	{r7, lr}
100463be:	b082      	sub	sp, #8
100463c0:	af00      	add	r7, sp, #0
100463c2:	6078      	str	r0, [r7, #4]
100463c4:	000a      	movs	r2, r1
100463c6:	1cfb      	adds	r3, r7, #3
100463c8:	701a      	strb	r2, [r3, #0]
#if defined(STM32WB09)
  return;
#else
  MODIFY_REG_FIELD(WAKEUP->BLUE_SLEEP_REQUEST_MODE, WAKEUP_BLUE_SLEEP_REQUEST_MODE_SLEEP_REQ_MODE, (mode & 0x7));
100463ca:	4b08      	ldr	r3, [pc, #32]	@ (100463ec <LL_RADIO_TIMER_SetSleepRequestMode+0x30>)
100463cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
100463ce:	2207      	movs	r2, #7
100463d0:	4393      	bics	r3, r2
100463d2:	0019      	movs	r1, r3
100463d4:	1cfb      	adds	r3, r7, #3
100463d6:	781b      	ldrb	r3, [r3, #0]
100463d8:	2207      	movs	r2, #7
100463da:	401a      	ands	r2, r3
100463dc:	4b03      	ldr	r3, [pc, #12]	@ (100463ec <LL_RADIO_TIMER_SetSleepRequestMode+0x30>)
100463de:	430a      	orrs	r2, r1
100463e0:	629a      	str	r2, [r3, #40]	@ 0x28
#endif
}
100463e2:	46c0      	nop			@ (mov r8, r8)
100463e4:	46bd      	mov	sp, r7
100463e6:	b002      	add	sp, #8
100463e8:	bd80      	pop	{r7, pc}
100463ea:	46c0      	nop			@ (mov r8, r8)
100463ec:	60001800 	.word	0x60001800

100463f0 <LL_RADIO_TIMER_EnableBLEWakeupIT>:
  * @rmtoll WAKEUP_BLE_IRQ_ENABLE    WAKEUP_IT   LL_RADIO_TIMER_EnableBLEWakeupIT
  * @param  WAKEUPx Radio Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_TIMER_EnableBLEWakeupIT(WAKEUP_TypeDef *WAKEUPx)
{
100463f0:	b580      	push	{r7, lr}
100463f2:	b082      	sub	sp, #8
100463f4:	af00      	add	r7, sp, #0
100463f6:	6078      	str	r0, [r7, #4]
  SET_BIT(WAKEUPx->WAKEUP_BLE_IRQ_ENABLE, WAKEUP_WAKEUP_BLE_IRQ_ENABLE_WAKEUP_IT);
100463f8:	687b      	ldr	r3, [r7, #4]
100463fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
100463fc:	2201      	movs	r2, #1
100463fe:	431a      	orrs	r2, r3
10046400:	687b      	ldr	r3, [r7, #4]
10046402:	641a      	str	r2, [r3, #64]	@ 0x40
}
10046404:	46c0      	nop			@ (mov r8, r8)
10046406:	46bd      	mov	sp, r7
10046408:	b002      	add	sp, #8
1004640a:	bd80      	pop	{r7, pc}

1004640c <LL_RADIO_TIMER_EnableCPUWakeupIT>:
  * @rmtoll WAKEUP_CM0_IRQ_ENABLE    WAKEUP_IT   LL_RADIO_TIMER_EnableCPUWakeupIT
  * @param  WAKEUPx Radio Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_TIMER_EnableCPUWakeupIT(WAKEUP_TypeDef *WAKEUPx)
{
1004640c:	b580      	push	{r7, lr}
1004640e:	b082      	sub	sp, #8
10046410:	af00      	add	r7, sp, #0
10046412:	6078      	str	r0, [r7, #4]
  SET_BIT(WAKEUPx->WAKEUP_CM0_IRQ_ENABLE, WAKEUP_WAKEUP_CM0_IRQ_ENABLE_WAKEUP_IT);
10046414:	687b      	ldr	r3, [r7, #4]
10046416:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
10046418:	2201      	movs	r2, #1
1004641a:	431a      	orrs	r2, r3
1004641c:	687b      	ldr	r3, [r7, #4]
1004641e:	649a      	str	r2, [r3, #72]	@ 0x48
}
10046420:	46c0      	nop			@ (mov r8, r8)
10046422:	46bd      	mov	sp, r7
10046424:	b002      	add	sp, #8
10046426:	bd80      	pop	{r7, pc}

10046428 <LL_RADIO_TIMER_ClearFlag_BLEWakeup>:
  * @rmtoll WAKEUP_BLE_IRQ_STATUS   WAKEUP_IT   LL_RADIO_TIMER_ClearFlag_BLEWakeup
  * @param  WAKEUPx Radio Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_TIMER_ClearFlag_BLEWakeup(WAKEUP_TypeDef *WAKEUPx)
{
10046428:	b580      	push	{r7, lr}
1004642a:	b082      	sub	sp, #8
1004642c:	af00      	add	r7, sp, #0
1004642e:	6078      	str	r0, [r7, #4]
  SET_BIT(WAKEUPx->WAKEUP_BLE_IRQ_STATUS, WAKEUP_WAKEUP_BLE_IRQ_STATUS_WAKEUP_IT);
10046430:	687b      	ldr	r3, [r7, #4]
10046432:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
10046434:	2201      	movs	r2, #1
10046436:	431a      	orrs	r2, r3
10046438:	687b      	ldr	r3, [r7, #4]
1004643a:	645a      	str	r2, [r3, #68]	@ 0x44
}
1004643c:	46c0      	nop			@ (mov r8, r8)
1004643e:	46bd      	mov	sp, r7
10046440:	b002      	add	sp, #8
10046442:	bd80      	pop	{r7, pc}

10046444 <LL_RADIO_TIMER_IsActiveFlag_BLEWakeup>:
  * @rmtoll WAKEUP_BLE_IRQ_STATUS   WAKEUP_IT   LL_RADIO_TIMER_IsActiveFlag_BLEWakeup
  * @param  WAKEUPx Radio Timer instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RADIO_TIMER_IsActiveFlag_BLEWakeup(WAKEUP_TypeDef *WAKEUPx)
{
10046444:	b580      	push	{r7, lr}
10046446:	b082      	sub	sp, #8
10046448:	af00      	add	r7, sp, #0
1004644a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(WAKEUPx->WAKEUP_BLE_IRQ_STATUS, WAKEUP_WAKEUP_BLE_IRQ_STATUS_WAKEUP_IT) == (WAKEUP_WAKEUP_BLE_IRQ_STATUS_WAKEUP_IT)) ? 1UL : 0UL);
1004644c:	687b      	ldr	r3, [r7, #4]
1004644e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
10046450:	2201      	movs	r2, #1
10046452:	4013      	ands	r3, r2
10046454:	2b01      	cmp	r3, #1
10046456:	d101      	bne.n	1004645c <LL_RADIO_TIMER_IsActiveFlag_BLEWakeup+0x18>
10046458:	2301      	movs	r3, #1
1004645a:	e000      	b.n	1004645e <LL_RADIO_TIMER_IsActiveFlag_BLEWakeup+0x1a>
1004645c:	2300      	movs	r3, #0
}
1004645e:	0018      	movs	r0, r3
10046460:	46bd      	mov	sp, r7
10046462:	b002      	add	sp, #8
10046464:	bd80      	pop	{r7, pc}

10046466 <LL_RADIO_TIMER_ClearFlag_CPUWakeup>:
  * @rmtoll WAKEUP_CM0_IRQ_STATUS   WAKEUP_IT   LL_RADIO_TIMER_ClearFlag_CPUWakeup
  * @param  WAKEUPx Radio Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_TIMER_ClearFlag_CPUWakeup(WAKEUP_TypeDef *WAKEUPx)
{
10046466:	b580      	push	{r7, lr}
10046468:	b082      	sub	sp, #8
1004646a:	af00      	add	r7, sp, #0
1004646c:	6078      	str	r0, [r7, #4]
  SET_BIT(WAKEUPx->WAKEUP_CM0_IRQ_STATUS, WAKEUP_WAKEUP_CM0_IRQ_STATUS_WAKEUP_IT);
1004646e:	687b      	ldr	r3, [r7, #4]
10046470:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
10046472:	2201      	movs	r2, #1
10046474:	431a      	orrs	r2, r3
10046476:	687b      	ldr	r3, [r7, #4]
10046478:	64da      	str	r2, [r3, #76]	@ 0x4c
}
1004647a:	46c0      	nop			@ (mov r8, r8)
1004647c:	46bd      	mov	sp, r7
1004647e:	b002      	add	sp, #8
10046480:	bd80      	pop	{r7, pc}

10046482 <LL_RADIO_TIMER_IsActiveFlag_CPUWakeup>:
  * @rmtoll WAKEUP_CM0_IRQ_STATUS   WAKEUP_IT   LL_RADIO_TIMER_IsActiveFlag_CPUWakeup
  * @param  WAKEUPx Radio Timer instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RADIO_TIMER_IsActiveFlag_CPUWakeup(WAKEUP_TypeDef *WAKEUPx)
{
10046482:	b580      	push	{r7, lr}
10046484:	b082      	sub	sp, #8
10046486:	af00      	add	r7, sp, #0
10046488:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(WAKEUPx->WAKEUP_CM0_IRQ_STATUS, WAKEUP_WAKEUP_CM0_IRQ_STATUS_WAKEUP_IT) == (WAKEUP_WAKEUP_CM0_IRQ_STATUS_WAKEUP_IT)) ? 1UL : 0UL);
1004648a:	687b      	ldr	r3, [r7, #4]
1004648c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
1004648e:	2201      	movs	r2, #1
10046490:	4013      	ands	r3, r2
10046492:	2b01      	cmp	r3, #1
10046494:	d101      	bne.n	1004649a <LL_RADIO_TIMER_IsActiveFlag_CPUWakeup+0x18>
10046496:	2301      	movs	r3, #1
10046498:	e000      	b.n	1004649c <LL_RADIO_TIMER_IsActiveFlag_CPUWakeup+0x1a>
1004649a:	2300      	movs	r3, #0
}
1004649c:	0018      	movs	r0, r3
1004649e:	46bd      	mov	sp, r7
100464a0:	b002      	add	sp, #8
100464a2:	bd80      	pop	{r7, pc}

100464a4 <LL_RADIO_TIMER_SetLSIWindowCalibrationLength>:
  * @param RADIO_CTRLx: Radio Control instance
  * @param  Count Slow clock is measured in a window of SLOW_COUNT+1 slow clock cycles
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_TIMER_SetLSIWindowCalibrationLength(RADIO_CTRL_TypeDef *RADIO_CTRLx, uint32_t Count)
{
100464a4:	b580      	push	{r7, lr}
100464a6:	b082      	sub	sp, #8
100464a8:	af00      	add	r7, sp, #0
100464aa:	6078      	str	r0, [r7, #4]
100464ac:	6039      	str	r1, [r7, #0]
  WRITE_REG(RADIO_CTRLx->CLK32COUNT_REG, Count);
100464ae:	687b      	ldr	r3, [r7, #4]
100464b0:	683a      	ldr	r2, [r7, #0]
100464b2:	605a      	str	r2, [r3, #4]
}
100464b4:	46c0      	nop			@ (mov r8, r8)
100464b6:	46bd      	mov	sp, r7
100464b8:	b002      	add	sp, #8
100464ba:	bd80      	pop	{r7, pc}

100464bc <LL_RADIO_TIMER_StartLSICalibration>:
  * @brief  Start the LSI calibration procedure.
  * @param RADIO_CTRLx: Radio Control instance
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_TIMER_StartLSICalibration(RADIO_CTRL_TypeDef *RADIO_CTRLx)
{
100464bc:	b580      	push	{r7, lr}
100464be:	b082      	sub	sp, #8
100464c0:	af00      	add	r7, sp, #0
100464c2:	6078      	str	r0, [r7, #4]
  WRITE_REG(RADIO_CTRLx->CLK32PERIOD_REG, 0);
100464c4:	687b      	ldr	r3, [r7, #4]
100464c6:	2200      	movs	r2, #0
100464c8:	609a      	str	r2, [r3, #8]
}
100464ca:	46c0      	nop			@ (mov r8, r8)
100464cc:	46bd      	mov	sp, r7
100464ce:	b002      	add	sp, #8
100464d0:	bd80      	pop	{r7, pc}

100464d2 <LL_RADIO_TIMER_GetLSIPeriod>:
  * @brief  Get the LSI clock Period calibrated.
  * @param RADIO_CTRLx: Radio Control instance
  * @retval The LSI clock period calibrated
  */
__STATIC_INLINE uint32_t LL_RADIO_TIMER_GetLSIPeriod(RADIO_CTRL_TypeDef *RADIO_CTRLx)
{
100464d2:	b580      	push	{r7, lr}
100464d4:	b082      	sub	sp, #8
100464d6:	af00      	add	r7, sp, #0
100464d8:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_REG(RADIO_CTRLx->CLK32PERIOD_REG));
100464da:	687b      	ldr	r3, [r7, #4]
100464dc:	689b      	ldr	r3, [r3, #8]
}
100464de:	0018      	movs	r0, r3
100464e0:	46bd      	mov	sp, r7
100464e2:	b002      	add	sp, #8
100464e4:	bd80      	pop	{r7, pc}

100464e6 <LL_RADIO_TIMER_GetLSIFrequency>:
  * @brief  Get the LSI clock Frequency calibrated.
  * @param RADIO_CTRLx: Radio Control instance
  * @retval The LSI clock frequency calibrated
  */
__STATIC_INLINE uint32_t LL_RADIO_TIMER_GetLSIFrequency(RADIO_CTRL_TypeDef *RADIO_CTRLx)
{
100464e6:	b580      	push	{r7, lr}
100464e8:	b082      	sub	sp, #8
100464ea:	af00      	add	r7, sp, #0
100464ec:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_REG(RADIO_CTRLx->CLK32FREQUENCY_REG));
100464ee:	687b      	ldr	r3, [r7, #4]
100464f0:	68db      	ldr	r3, [r3, #12]
}
100464f2:	0018      	movs	r0, r3
100464f4:	46bd      	mov	sp, r7
100464f6:	b002      	add	sp, #8
100464f8:	bd80      	pop	{r7, pc}

100464fa <LL_RADIO_TIMER_ClearFlag_LSICalibrationEnded>:
  * @brief  Clear the LSI calibration ended flag.
  * @param RADIO_CTRLx: Radio Control instance
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_TIMER_ClearFlag_LSICalibrationEnded(RADIO_CTRL_TypeDef *RADIO_CTRLx)
{
100464fa:	b580      	push	{r7, lr}
100464fc:	b082      	sub	sp, #8
100464fe:	af00      	add	r7, sp, #0
10046500:	6078      	str	r0, [r7, #4]
  SET_BIT(RADIO_CTRLx->RADIO_CONTROL_IRQ_STATUS, RADIO_CTRL_RADIO_CONTROL_IRQ_STATUS_SLOW_CLK_IRQ);
10046502:	687b      	ldr	r3, [r7, #4]
10046504:	691b      	ldr	r3, [r3, #16]
10046506:	2201      	movs	r2, #1
10046508:	431a      	orrs	r2, r3
1004650a:	687b      	ldr	r3, [r7, #4]
1004650c:	611a      	str	r2, [r3, #16]
}
1004650e:	46c0      	nop			@ (mov r8, r8)
10046510:	46bd      	mov	sp, r7
10046512:	b002      	add	sp, #8
10046514:	bd80      	pop	{r7, pc}

10046516 <LL_RADIO_TIMER_IsActiveFlag_LSICalibrationEnded>:
  * @brief  Check if the LSI calibration ended flag is set or not.
  * @param RADIO_CTRLx: Radio Control instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RADIO_TIMER_IsActiveFlag_LSICalibrationEnded(RADIO_CTRL_TypeDef *RADIO_CTRLx)
{
10046516:	b580      	push	{r7, lr}
10046518:	b082      	sub	sp, #8
1004651a:	af00      	add	r7, sp, #0
1004651c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(RADIO_CTRLx->RADIO_CONTROL_IRQ_STATUS, RADIO_CTRL_RADIO_CONTROL_IRQ_STATUS_SLOW_CLK_IRQ) == (RADIO_CTRL_RADIO_CONTROL_IRQ_STATUS_SLOW_CLK_IRQ)) ? 1UL : 0UL);
1004651e:	687b      	ldr	r3, [r7, #4]
10046520:	691b      	ldr	r3, [r3, #16]
10046522:	2201      	movs	r2, #1
10046524:	4013      	ands	r3, r2
10046526:	2b01      	cmp	r3, #1
10046528:	d101      	bne.n	1004652e <LL_RADIO_TIMER_IsActiveFlag_LSICalibrationEnded+0x18>
1004652a:	2301      	movs	r3, #1
1004652c:	e000      	b.n	10046530 <LL_RADIO_TIMER_IsActiveFlag_LSICalibrationEnded+0x1a>
1004652e:	2300      	movs	r3, #0
}
10046530:	0018      	movs	r0, r3
10046532:	46bd      	mov	sp, r7
10046534:	b002      	add	sp, #8
10046536:	bd80      	pop	{r7, pc}

10046538 <HAL_RADIO_TIMER_Init>:
  *         section of the application.
  * @param RADIO_TIMER_InitStruct Radio Timer Initialization parameters
  * @retval None
  */
void HAL_RADIO_TIMER_Init(RADIO_TIMER_InitTypeDef *RADIO_TIMER_InitStruct)
{
10046538:	b5f0      	push	{r4, r5, r6, r7, lr}
1004653a:	b083      	sub	sp, #12
1004653c:	af00      	add	r7, sp, #0
1004653e:	6078      	str	r0, [r7, #4]
  /* Interrupt Configuration */
  LL_RADIO_TIMER_ClearFlag_CPUWakeup(WAKEUP);
10046540:	4b7c      	ldr	r3, [pc, #496]	@ (10046734 <HAL_RADIO_TIMER_Init+0x1fc>)
10046542:	0018      	movs	r0, r3
10046544:	f7ff ff8f 	bl	10046466 <LL_RADIO_TIMER_ClearFlag_CPUWakeup>
  LL_RADIO_TIMER_EnableCPUWakeupIT(WAKEUP);
10046548:	4b7a      	ldr	r3, [pc, #488]	@ (10046734 <HAL_RADIO_TIMER_Init+0x1fc>)
1004654a:	0018      	movs	r0, r3
1004654c:	f7ff ff5e 	bl	1004640c <LL_RADIO_TIMER_EnableCPUWakeupIT>
  NVIC_EnableIRQ(RADIO_TIMER_CPU_WKUP_IRQn);
10046550:	2017      	movs	r0, #23
10046552:	f7ff fe15 	bl	10046180 <__NVIC_EnableIRQ>
  NVIC_EnableIRQ(RADIO_TIMER_ERROR_IRQn);
10046556:	2014      	movs	r0, #20
10046558:	f7ff fe12 	bl	10046180 <__NVIC_EnableIRQ>

#if defined (STM32WB06) || defined (STM32WB07)
  LL_RADIO_TIMER_ClearFlag_BLEWakeup(WAKEUP);
1004655c:	4b75      	ldr	r3, [pc, #468]	@ (10046734 <HAL_RADIO_TIMER_Init+0x1fc>)
1004655e:	0018      	movs	r0, r3
10046560:	f7ff ff62 	bl	10046428 <LL_RADIO_TIMER_ClearFlag_BLEWakeup>
  LL_RADIO_TIMER_EnableBLEWakeupIT(WAKEUP);
10046564:	4b73      	ldr	r3, [pc, #460]	@ (10046734 <HAL_RADIO_TIMER_Init+0x1fc>)
10046566:	0018      	movs	r0, r3
10046568:	f7ff ff42 	bl	100463f0 <LL_RADIO_TIMER_EnableBLEWakeupIT>
  NVIC_EnableIRQ(RADIO_TIMER_TXRX_WKUP_IRQn);
1004656c:	2018      	movs	r0, #24
1004656e:	f7ff fe07 	bl	10046180 <__NVIC_EnableIRQ>
  RADIO_TIMER_Context.hostMargin = MAX(HOST_MARGIN, RADIO_TIMER_InitStruct->XTAL_StartupTime);
10046572:	687b      	ldr	r3, [r7, #4]
10046574:	881b      	ldrh	r3, [r3, #0]
10046576:	1c1a      	adds	r2, r3, #0
10046578:	b293      	uxth	r3, r2
1004657a:	2bc8      	cmp	r3, #200	@ 0xc8
1004657c:	d201      	bcs.n	10046582 <HAL_RADIO_TIMER_Init+0x4a>
1004657e:	23c8      	movs	r3, #200	@ 0xc8
10046580:	1c1a      	adds	r2, r3, #0
10046582:	b293      	uxth	r3, r2
10046584:	0019      	movs	r1, r3
10046586:	4b6c      	ldr	r3, [pc, #432]	@ (10046738 <HAL_RADIO_TIMER_Init+0x200>)
10046588:	2298      	movs	r2, #152	@ 0x98
1004658a:	5099      	str	r1, [r3, r2]
#endif

  /* Calibration Setting */
  RADIO_TIMER_Context.calibrationSettings.periodicCalibration = (RADIO_TIMER_InitStruct->periodicCalibrationInterval != 0);
1004658c:	687b      	ldr	r3, [r7, #4]
1004658e:	685b      	ldr	r3, [r3, #4]
10046590:	1e5a      	subs	r2, r3, #1
10046592:	4193      	sbcs	r3, r2
10046594:	b2db      	uxtb	r3, r3
10046596:	001a      	movs	r2, r3
10046598:	4b67      	ldr	r3, [pc, #412]	@ (10046738 <HAL_RADIO_TIMER_Init+0x200>)
1004659a:	701a      	strb	r2, [r3, #0]
  if (RADIO_TIMER_Context.calibrationSettings.periodicCalibration || RADIO_TIMER_InitStruct->enableInitialCalibration)
1004659c:	4b66      	ldr	r3, [pc, #408]	@ (10046738 <HAL_RADIO_TIMER_Init+0x200>)
1004659e:	781b      	ldrb	r3, [r3, #0]
100465a0:	2b00      	cmp	r3, #0
100465a2:	d103      	bne.n	100465ac <HAL_RADIO_TIMER_Init+0x74>
100465a4:	687b      	ldr	r3, [r7, #4]
100465a6:	789b      	ldrb	r3, [r3, #2]
100465a8:	2b00      	cmp	r3, #0
100465aa:	d002      	beq.n	100465b2 <HAL_RADIO_TIMER_Init+0x7a>
  {
    _calibrationProcedure();
100465ac:	f000 fc68 	bl	10046e80 <_calibrationProcedure>
100465b0:	e010      	b.n	100465d4 <HAL_RADIO_TIMER_Init+0x9c>
  }
  else
  {
    /* Assume fix frequency at 32.768 kHz */
    RADIO_TIMER_Context.calibrationData.last_period1 = 0x00190000;
100465b2:	4b61      	ldr	r3, [pc, #388]	@ (10046738 <HAL_RADIO_TIMER_Init+0x200>)
100465b4:	22c8      	movs	r2, #200	@ 0xc8
100465b6:	0352      	lsls	r2, r2, #13
100465b8:	621a      	str	r2, [r3, #32]
    RADIO_TIMER_Context.calibrationData.period1 = 0x00190000 ;
100465ba:	4b5f      	ldr	r3, [pc, #380]	@ (10046738 <HAL_RADIO_TIMER_Init+0x200>)
100465bc:	22c8      	movs	r2, #200	@ 0xc8
100465be:	0352      	lsls	r2, r2, #13
100465c0:	61da      	str	r2, [r3, #28]
    RADIO_TIMER_Context.calibrationData.freq1 = 0x0028F5C2 ;
100465c2:	4b5d      	ldr	r3, [pc, #372]	@ (10046738 <HAL_RADIO_TIMER_Init+0x200>)
100465c4:	4a5d      	ldr	r2, [pc, #372]	@ (1004673c <HAL_RADIO_TIMER_Init+0x204>)
100465c6:	619a      	str	r2, [r3, #24]
    RADIO_TIMER_Context.calibrationData.period = 23437;
100465c8:	4b5b      	ldr	r3, [pc, #364]	@ (10046738 <HAL_RADIO_TIMER_Init+0x200>)
100465ca:	4a5d      	ldr	r2, [pc, #372]	@ (10046740 <HAL_RADIO_TIMER_Init+0x208>)
100465cc:	611a      	str	r2, [r3, #16]
    RADIO_TIMER_Context.calibrationData.freq = 23456748;
100465ce:	4b5a      	ldr	r3, [pc, #360]	@ (10046738 <HAL_RADIO_TIMER_Init+0x200>)
100465d0:	4a5c      	ldr	r2, [pc, #368]	@ (10046744 <HAL_RADIO_TIMER_Init+0x20c>)
100465d2:	615a      	str	r2, [r3, #20]
  }
  if (RADIO_TIMER_InitStruct->periodicCalibrationInterval == 0)
100465d4:	687b      	ldr	r3, [r7, #4]
100465d6:	685b      	ldr	r3, [r3, #4]
100465d8:	2b00      	cmp	r3, #0
100465da:	d108      	bne.n	100465ee <HAL_RADIO_TIMER_Init+0xb6>
  {
    RADIO_TIMER_Context.calibrationSettings.periodicCalibrationInterval = HAL_RADIO_TIMER_MachineTimeToSysTime(0x50000000);
100465dc:	23a0      	movs	r3, #160	@ 0xa0
100465de:	05db      	lsls	r3, r3, #23
100465e0:	0018      	movs	r0, r3
100465e2:	f000 fb6b 	bl	10046cbc <HAL_RADIO_TIMER_MachineTimeToSysTime>
100465e6:	0002      	movs	r2, r0
100465e8:	4b53      	ldr	r3, [pc, #332]	@ (10046738 <HAL_RADIO_TIMER_Init+0x200>)
100465ea:	605a      	str	r2, [r3, #4]
100465ec:	e01d      	b.n	1004662a <HAL_RADIO_TIMER_Init+0xf2>
  }
  else
  {
    RADIO_TIMER_Context.calibrationSettings.periodicCalibrationInterval = (TIMER_SYSTICK_PER_10MS * RADIO_TIMER_InitStruct->periodicCalibrationInterval) / 10;
100465ee:	687b      	ldr	r3, [r7, #4]
100465f0:	685b      	ldr	r3, [r3, #4]
100465f2:	031b      	lsls	r3, r3, #12
100465f4:	210a      	movs	r1, #10
100465f6:	0018      	movs	r0, r3
100465f8:	f7f9 fd8c 	bl	10040114 <__udivsi3>
100465fc:	0003      	movs	r3, r0
100465fe:	001a      	movs	r2, r3
10046600:	4b4d      	ldr	r3, [pc, #308]	@ (10046738 <HAL_RADIO_TIMER_Init+0x200>)
10046602:	605a      	str	r2, [r3, #4]
    RADIO_TIMER_Context.calibrationSettings.periodicCalibrationInterval = MIN(RADIO_TIMER_Context.calibrationSettings.periodicCalibrationInterval,
10046604:	4b4c      	ldr	r3, [pc, #304]	@ (10046738 <HAL_RADIO_TIMER_Init+0x200>)
10046606:	685e      	ldr	r6, [r3, #4]
10046608:	4b4f      	ldr	r3, [pc, #316]	@ (10046748 <HAL_RADIO_TIMER_Init+0x210>)
1004660a:	0018      	movs	r0, r3
1004660c:	f000 fb56 	bl	10046cbc <HAL_RADIO_TIMER_MachineTimeToSysTime>
10046610:	0003      	movs	r3, r0
10046612:	429e      	cmp	r6, r3
10046614:	d202      	bcs.n	1004661c <HAL_RADIO_TIMER_Init+0xe4>
10046616:	4b48      	ldr	r3, [pc, #288]	@ (10046738 <HAL_RADIO_TIMER_Init+0x200>)
10046618:	685a      	ldr	r2, [r3, #4]
1004661a:	e004      	b.n	10046626 <HAL_RADIO_TIMER_Init+0xee>
1004661c:	4b4a      	ldr	r3, [pc, #296]	@ (10046748 <HAL_RADIO_TIMER_Init+0x210>)
1004661e:	0018      	movs	r0, r3
10046620:	f000 fb4c 	bl	10046cbc <HAL_RADIO_TIMER_MachineTimeToSysTime>
10046624:	0002      	movs	r2, r0
10046626:	4b44      	ldr	r3, [pc, #272]	@ (10046738 <HAL_RADIO_TIMER_Init+0x200>)
10046628:	605a      	str	r2, [r3, #4]
                                                                              HAL_RADIO_TIMER_MachineTimeToSysTime(TIMER_MAX_VALUE - TIMER_WRAPPING_MARGIN));
  }
  RADIO_TIMER_Context.calibrationSettings.calibration_in_progress = FALSE;
1004662a:	4b43      	ldr	r3, [pc, #268]	@ (10046738 <HAL_RADIO_TIMER_Init+0x200>)
1004662c:	2200      	movs	r2, #0
1004662e:	721a      	strb	r2, [r3, #8]

  /* XTAL startup time configuration */
  RADIO_TIMER_Context.hs_startup_time = RADIO_TIMER_InitStruct->XTAL_StartupTime;
10046630:	687b      	ldr	r3, [r7, #4]
10046632:	881b      	ldrh	r3, [r3, #0]
10046634:	001a      	movs	r2, r3
10046636:	4b40      	ldr	r3, [pc, #256]	@ (10046738 <HAL_RADIO_TIMER_Init+0x200>)
10046638:	669a      	str	r2, [r3, #104]	@ 0x68
  _update_xtal_startup_time(RADIO_TIMER_Context.hs_startup_time, RADIO_TIMER_Context.calibrationData.freq1);
1004663a:	4b3f      	ldr	r3, [pc, #252]	@ (10046738 <HAL_RADIO_TIMER_Init+0x200>)
1004663c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
1004663e:	b29a      	uxth	r2, r3
10046640:	4b3d      	ldr	r3, [pc, #244]	@ (10046738 <HAL_RADIO_TIMER_Init+0x200>)
10046642:	699b      	ldr	r3, [r3, #24]
10046644:	0019      	movs	r1, r3
10046646:	0010      	movs	r0, r2
10046648:	f000 fd8e 	bl	10047168 <_update_xtal_startup_time>

  /* Init Radio Timer Context */
  RADIO_TIMER_Context.last_setup_time = 0;
1004664c:	4b3a      	ldr	r3, [pc, #232]	@ (10046738 <HAL_RADIO_TIMER_Init+0x200>)
1004664e:	2284      	movs	r2, #132	@ 0x84
10046650:	2100      	movs	r1, #0
10046652:	5499      	strb	r1, [r3, r2]
  RADIO_TIMER_Context.cumulative_time = 0;
10046654:	4938      	ldr	r1, [pc, #224]	@ (10046738 <HAL_RADIO_TIMER_Init+0x200>)
10046656:	2200      	movs	r2, #0
10046658:	2300      	movs	r3, #0
1004665a:	670a      	str	r2, [r1, #112]	@ 0x70
1004665c:	674b      	str	r3, [r1, #116]	@ 0x74
  RADIO_TIMER_Context.last_machine_time = LL_RADIO_TIMER_GetAbsoluteTime(WAKEUP);
1004665e:	4b35      	ldr	r3, [pc, #212]	@ (10046734 <HAL_RADIO_TIMER_Init+0x1fc>)
10046660:	0018      	movs	r0, r3
10046662:	f7ff fe92 	bl	1004638a <LL_RADIO_TIMER_GetAbsoluteTime>
10046666:	0002      	movs	r2, r0
10046668:	4b33      	ldr	r3, [pc, #204]	@ (10046738 <HAL_RADIO_TIMER_Init+0x200>)
1004666a:	2180      	movs	r1, #128	@ 0x80
1004666c:	505a      	str	r2, [r3, r1]
  RADIO_TIMER_Context.last_system_time = 0;
1004666e:	4932      	ldr	r1, [pc, #200]	@ (10046738 <HAL_RADIO_TIMER_Init+0x200>)
10046670:	2200      	movs	r2, #0
10046672:	2300      	movs	r3, #0
10046674:	678a      	str	r2, [r1, #120]	@ 0x78
10046676:	67cb      	str	r3, [r1, #124]	@ 0x7c
  RADIO_TIMER_Context.calibrationData.last_calibration_time = 0;
10046678:	492f      	ldr	r1, [pc, #188]	@ (10046738 <HAL_RADIO_TIMER_Init+0x200>)
1004667a:	2200      	movs	r2, #0
1004667c:	2300      	movs	r3, #0
1004667e:	628a      	str	r2, [r1, #40]	@ 0x28
10046680:	62cb      	str	r3, [r1, #44]	@ 0x2c
  RADIO_TIMER_Context.calibrationData.calibration_data_available = 0;
10046682:	4b2d      	ldr	r3, [pc, #180]	@ (10046738 <HAL_RADIO_TIMER_Init+0x200>)
10046684:	2234      	movs	r2, #52	@ 0x34
10046686:	2100      	movs	r1, #0
10046688:	5499      	strb	r1, [r3, r2]
  RADIO_TIMER_Context.calibrationData.calibration_machine_interval = blue_unit_conversion(RADIO_TIMER_Context.calibrationSettings.periodicCalibrationInterval,
1004668a:	4b2b      	ldr	r3, [pc, #172]	@ (10046738 <HAL_RADIO_TIMER_Init+0x200>)
1004668c:	6858      	ldr	r0, [r3, #4]
                                                                     RADIO_TIMER_Context.calibrationData.freq1, MULT64_THR_FREQ);
1004668e:	4b2a      	ldr	r3, [pc, #168]	@ (10046738 <HAL_RADIO_TIMER_Init+0x200>)
10046690:	699b      	ldr	r3, [r3, #24]
  RADIO_TIMER_Context.calibrationData.calibration_machine_interval = blue_unit_conversion(RADIO_TIMER_Context.calibrationSettings.periodicCalibrationInterval,
10046692:	0019      	movs	r1, r3
10046694:	4b2d      	ldr	r3, [pc, #180]	@ (1004674c <HAL_RADIO_TIMER_Init+0x214>)
10046696:	001a      	movs	r2, r3
10046698:	f7f9 fd12 	bl	100400c0 <blue_unit_conversion>
1004669c:	0002      	movs	r2, r0
1004669e:	4b26      	ldr	r3, [pc, #152]	@ (10046738 <HAL_RADIO_TIMER_Init+0x200>)
100466a0:	631a      	str	r2, [r3, #48]	@ 0x30
  RADIO_TIMER_Context.wakeup_calibration = RADIO_TIMER_Context.calibrationSettings.periodicCalibration;
100466a2:	4b25      	ldr	r3, [pc, #148]	@ (10046738 <HAL_RADIO_TIMER_Init+0x200>)
100466a4:	7819      	ldrb	r1, [r3, #0]
100466a6:	4b24      	ldr	r3, [pc, #144]	@ (10046738 <HAL_RADIO_TIMER_Init+0x200>)
100466a8:	2294      	movs	r2, #148	@ 0x94
100466aa:	5499      	strb	r1, [r3, r2]

  /* Init the Virtual Timer queue */
  RADIO_TIMER_Context.rootNode = NULL;
100466ac:	4b22      	ldr	r3, [pc, #136]	@ (10046738 <HAL_RADIO_TIMER_Init+0x200>)
100466ae:	228c      	movs	r2, #140	@ 0x8c
100466b0:	2100      	movs	r1, #0
100466b2:	5099      	str	r1, [r3, r2]
  RADIO_TIMER_Context.enableTimeBase = TRUE;
100466b4:	4b20      	ldr	r3, [pc, #128]	@ (10046738 <HAL_RADIO_TIMER_Init+0x200>)
100466b6:	2290      	movs	r2, #144	@ 0x90
100466b8:	2101      	movs	r1, #1
100466ba:	5499      	strb	r1, [r3, r2]
  RADIO_TIMER_Context.stop_notimer_action = FALSE;
100466bc:	4b1e      	ldr	r3, [pc, #120]	@ (10046738 <HAL_RADIO_TIMER_Init+0x200>)
100466be:	2293      	movs	r2, #147	@ 0x93
100466c0:	2100      	movs	r1, #0
100466c2:	5499      	strb	r1, [r3, r2]
  RADIO_TIMER_Context.expired_count = 0;
100466c4:	4b1c      	ldr	r3, [pc, #112]	@ (10046738 <HAL_RADIO_TIMER_Init+0x200>)
100466c6:	2291      	movs	r2, #145	@ 0x91
100466c8:	2100      	movs	r1, #0
100466ca:	5499      	strb	r1, [r3, r2]
  RADIO_TIMER_Context.served_count = 0;
100466cc:	4b1a      	ldr	r3, [pc, #104]	@ (10046738 <HAL_RADIO_TIMER_Init+0x200>)
100466ce:	2292      	movs	r2, #146	@ 0x92
100466d0:	2100      	movs	r1, #0
100466d2:	5499      	strb	r1, [r3, r2]

  /* Init Radio Timer queue */
  RADIO_TIMER_Context.radioTimer.active = FALSE;
100466d4:	4b18      	ldr	r3, [pc, #96]	@ (10046738 <HAL_RADIO_TIMER_Init+0x200>)
100466d6:	2261      	movs	r2, #97	@ 0x61
100466d8:	2100      	movs	r1, #0
100466da:	5499      	strb	r1, [r3, r2]
  RADIO_TIMER_Context.radioTimer.pending = FALSE;
100466dc:	4b16      	ldr	r3, [pc, #88]	@ (10046738 <HAL_RADIO_TIMER_Init+0x200>)
100466de:	2262      	movs	r2, #98	@ 0x62
100466e0:	2100      	movs	r1, #0
100466e2:	5499      	strb	r1, [r3, r2]
  RADIO_TIMER_Context.radioTimer.intTxRx_to_be_served = FALSE;
100466e4:	4b14      	ldr	r3, [pc, #80]	@ (10046738 <HAL_RADIO_TIMER_Init+0x200>)
100466e6:	2263      	movs	r2, #99	@ 0x63
100466e8:	2100      	movs	r1, #0
100466ea:	5499      	strb	r1, [r3, r2]
  RADIO_TIMER_Context.radioTimer.expiryTime = 0;
100466ec:	4912      	ldr	r1, [pc, #72]	@ (10046738 <HAL_RADIO_TIMER_Init+0x200>)
100466ee:	2200      	movs	r2, #0
100466f0:	2300      	movs	r3, #0
100466f2:	658a      	str	r2, [r1, #88]	@ 0x58
100466f4:	65cb      	str	r3, [r1, #92]	@ 0x5c

  /* Configure the Calibration callback and schedule the next calibration */
  RADIO_TIMER_Context.calibrationTimer.callback = _calibration_callback;
100466f6:	4b10      	ldr	r3, [pc, #64]	@ (10046738 <HAL_RADIO_TIMER_Init+0x200>)
100466f8:	4a15      	ldr	r2, [pc, #84]	@ (10046750 <HAL_RADIO_TIMER_Init+0x218>)
100466fa:	649a      	str	r2, [r3, #72]	@ 0x48
  RADIO_TIMER_Context.calibrationTimer.userData = NULL;
100466fc:	4b0e      	ldr	r3, [pc, #56]	@ (10046738 <HAL_RADIO_TIMER_Init+0x200>)
100466fe:	2200      	movs	r2, #0
10046700:	655a      	str	r2, [r3, #84]	@ 0x54
  _start_timer(&RADIO_TIMER_Context.calibrationTimer,
               HAL_RADIO_TIMER_GetCurrentSysTime() + RADIO_TIMER_Context.calibrationSettings.periodicCalibrationInterval);
10046702:	f000 faf1 	bl	10046ce8 <HAL_RADIO_TIMER_GetCurrentSysTime>
10046706:	0002      	movs	r2, r0
10046708:	000b      	movs	r3, r1
1004670a:	490b      	ldr	r1, [pc, #44]	@ (10046738 <HAL_RADIO_TIMER_Init+0x200>)
1004670c:	6849      	ldr	r1, [r1, #4]
1004670e:	000c      	movs	r4, r1
10046710:	2100      	movs	r1, #0
10046712:	000d      	movs	r5, r1
  _start_timer(&RADIO_TIMER_Context.calibrationTimer,
10046714:	1912      	adds	r2, r2, r4
10046716:	416b      	adcs	r3, r5
10046718:	490e      	ldr	r1, [pc, #56]	@ (10046754 <HAL_RADIO_TIMER_Init+0x21c>)
1004671a:	0008      	movs	r0, r1
1004671c:	f000 fd66 	bl	100471ec <_start_timer>

  /* Tx & Rx delay configuration */
  _configureTxRxDelay(&RADIO_TIMER_Context, TRUE);
10046720:	4b05      	ldr	r3, [pc, #20]	@ (10046738 <HAL_RADIO_TIMER_Init+0x200>)
10046722:	2101      	movs	r1, #1
10046724:	0018      	movs	r0, r3
10046726:	f000 fc5b 	bl	10046fe0 <_configureTxRxDelay>
}
1004672a:	46c0      	nop			@ (mov r8, r8)
1004672c:	46bd      	mov	sp, r7
1004672e:	b003      	add	sp, #12
10046730:	bdf0      	pop	{r4, r5, r6, r7, pc}
10046732:	46c0      	nop			@ (mov r8, r8)
10046734:	60001800 	.word	0x60001800
10046738:	20000598 	.word	0x20000598
1004673c:	0028f5c2 	.word	0x0028f5c2
10046740:	00005b8d 	.word	0x00005b8d
10046744:	0165ebec 	.word	0x0165ebec
10046748:	ffffefff 	.word	0xffffefff
1004674c:	00000326 	.word	0x00000326
10046750:	100471c5 	.word	0x100471c5
10046754:	200005d8 	.word	0x200005d8

10046758 <HAL_RADIO_TIMER_Tick>:
  * Check expired timers and execute user callback.
  * It must be placed inside the infinite loop.
  * @retval None
  */
void HAL_RADIO_TIMER_Tick(void)
{
10046758:	b5b0      	push	{r4, r5, r7, lr}
1004675a:	b094      	sub	sp, #80	@ 0x50
1004675c:	af00      	add	r7, sp, #0
  uint8_t expired = 0;
1004675e:	230b      	movs	r3, #11
10046760:	2208      	movs	r2, #8
10046762:	189b      	adds	r3, r3, r2
10046764:	19db      	adds	r3, r3, r7
10046766:	2200      	movs	r2, #0
10046768:	701a      	strb	r2, [r3, #0]
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
1004676a:	f3ef 8310 	mrs	r3, PRIMASK
1004676e:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
10046770:	6b3b      	ldr	r3, [r7, #48]	@ 0x30

  ATOMIC_SECTION_BEGIN();
10046772:	64bb      	str	r3, [r7, #72]	@ 0x48
  __ASM volatile ("cpsid i" : : : "memory");
10046774:	b672      	cpsid	i
}
10046776:	46c0      	nop			@ (mov r8, r8)
  if (RADIO_TIMER_Context.radioTimer.active)
10046778:	4bc1      	ldr	r3, [pc, #772]	@ (10046a80 <HAL_RADIO_TIMER_Tick+0x328>)
1004677a:	2261      	movs	r2, #97	@ 0x61
1004677c:	5c9b      	ldrb	r3, [r3, r2]
1004677e:	2b00      	cmp	r3, #0
10046780:	d00f      	beq.n	100467a2 <HAL_RADIO_TIMER_Tick+0x4a>
  {
    if (RADIO_TIMER_Context.radioTimer.expiryTime < HAL_RADIO_TIMER_GetCurrentSysTime())
10046782:	4bbf      	ldr	r3, [pc, #764]	@ (10046a80 <HAL_RADIO_TIMER_Tick+0x328>)
10046784:	6d9c      	ldr	r4, [r3, #88]	@ 0x58
10046786:	6ddd      	ldr	r5, [r3, #92]	@ 0x5c
10046788:	f000 faae 	bl	10046ce8 <HAL_RADIO_TIMER_GetCurrentSysTime>
1004678c:	0002      	movs	r2, r0
1004678e:	000b      	movs	r3, r1
10046790:	42ab      	cmp	r3, r5
10046792:	d802      	bhi.n	1004679a <HAL_RADIO_TIMER_Tick+0x42>
10046794:	d105      	bne.n	100467a2 <HAL_RADIO_TIMER_Tick+0x4a>
10046796:	42a2      	cmp	r2, r4
10046798:	d903      	bls.n	100467a2 <HAL_RADIO_TIMER_Tick+0x4a>
    {
      RADIO_TIMER_Context.radioTimer.active = FALSE;
1004679a:	4bb9      	ldr	r3, [pc, #740]	@ (10046a80 <HAL_RADIO_TIMER_Tick+0x328>)
1004679c:	2261      	movs	r2, #97	@ 0x61
1004679e:	2100      	movs	r1, #0
100467a0:	5499      	strb	r1, [r3, r2]
100467a2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
100467a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
100467a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
100467a8:	f383 8810 	msr	PRIMASK, r3
}
100467ac:	46c0      	nop			@ (mov r8, r8)
    }
  }
  ATOMIC_SECTION_END();

  /* Check for expired timers */
  while (DIFF8(RADIO_TIMER_Context.expired_count, RADIO_TIMER_Context.served_count))
100467ae:	e072      	b.n	10046896 <HAL_RADIO_TIMER_Tick+0x13e>
  {
    VTIMER_HandleType *expiredList, *curr;
    uint8_t to_be_served = DIFF8(RADIO_TIMER_Context.expired_count, RADIO_TIMER_Context.served_count);
100467b0:	4bb3      	ldr	r3, [pc, #716]	@ (10046a80 <HAL_RADIO_TIMER_Tick+0x328>)
100467b2:	2291      	movs	r2, #145	@ 0x91
100467b4:	5c99      	ldrb	r1, [r3, r2]
100467b6:	4bb2      	ldr	r3, [pc, #712]	@ (10046a80 <HAL_RADIO_TIMER_Tick+0x328>)
100467b8:	2292      	movs	r2, #146	@ 0x92
100467ba:	5c9a      	ldrb	r2, [r3, r2]
100467bc:	2337      	movs	r3, #55	@ 0x37
100467be:	2008      	movs	r0, #8
100467c0:	181b      	adds	r3, r3, r0
100467c2:	19db      	adds	r3, r3, r7
100467c4:	1a8a      	subs	r2, r1, r2
100467c6:	701a      	strb	r2, [r3, #0]

    RADIO_TIMER_Context.rootNode = _check_callbacks(RADIO_TIMER_Context.rootNode, &expiredList);
100467c8:	4bad      	ldr	r3, [pc, #692]	@ (10046a80 <HAL_RADIO_TIMER_Tick+0x328>)
100467ca:	228c      	movs	r2, #140	@ 0x8c
100467cc:	589b      	ldr	r3, [r3, r2]
100467ce:	220c      	movs	r2, #12
100467d0:	18ba      	adds	r2, r7, r2
100467d2:	0011      	movs	r1, r2
100467d4:	0018      	movs	r0, r3
100467d6:	f000 ff0d 	bl	100475f4 <_check_callbacks>
100467da:	0002      	movs	r2, r0
100467dc:	4ba8      	ldr	r3, [pc, #672]	@ (10046a80 <HAL_RADIO_TIMER_Tick+0x328>)
100467de:	218c      	movs	r1, #140	@ 0x8c
100467e0:	505a      	str	r2, [r3, r1]

    /* Call all the user callbacks */
    curr = expiredList;
100467e2:	68fb      	ldr	r3, [r7, #12]
100467e4:	64fb      	str	r3, [r7, #76]	@ 0x4c
    while (curr != NULL)
100467e6:	e010      	b.n	1004680a <HAL_RADIO_TIMER_Tick+0xb2>
    {
      /* Save next pointer, in case callback start the timer again */
      VTIMER_HandleType *next = curr->next;
100467e8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
100467ea:	691b      	ldr	r3, [r3, #16]
100467ec:	637b      	str	r3, [r7, #52]	@ 0x34
      curr->active = FALSE;
100467ee:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
100467f0:	2200      	movs	r2, #0
100467f2:	731a      	strb	r2, [r3, #12]
      if (curr->callback)
100467f4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
100467f6:	689b      	ldr	r3, [r3, #8]
100467f8:	2b00      	cmp	r3, #0
100467fa:	d004      	beq.n	10046806 <HAL_RADIO_TIMER_Tick+0xae>
      {
        curr->callback(curr); /* we are sure a callback is set?*/
100467fc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
100467fe:	689b      	ldr	r3, [r3, #8]
10046800:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
10046802:	0010      	movs	r0, r2
10046804:	4798      	blx	r3
      }
      curr = next;
10046806:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
10046808:	64fb      	str	r3, [r7, #76]	@ 0x4c
    while (curr != NULL)
1004680a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
1004680c:	2b00      	cmp	r3, #0
1004680e:	d1eb      	bne.n	100467e8 <HAL_RADIO_TIMER_Tick+0x90>
    }

    RADIO_TIMER_Context.rootNode = _update_user_timeout(RADIO_TIMER_Context.rootNode, &expired);
10046810:	4b9b      	ldr	r3, [pc, #620]	@ (10046a80 <HAL_RADIO_TIMER_Tick+0x328>)
10046812:	228c      	movs	r2, #140	@ 0x8c
10046814:	589b      	ldr	r3, [r3, r2]
10046816:	240b      	movs	r4, #11
10046818:	2508      	movs	r5, #8
1004681a:	1962      	adds	r2, r4, r5
1004681c:	19d2      	adds	r2, r2, r7
1004681e:	0011      	movs	r1, r2
10046820:	0018      	movs	r0, r3
10046822:	f000 fda9 	bl	10047378 <_update_user_timeout>
10046826:	0002      	movs	r2, r0
10046828:	4b95      	ldr	r3, [pc, #596]	@ (10046a80 <HAL_RADIO_TIMER_Tick+0x328>)
1004682a:	218c      	movs	r1, #140	@ 0x8c
1004682c:	505a      	str	r2, [r3, r1]
    if (expired == 1)
1004682e:	1963      	adds	r3, r4, r5
10046830:	19db      	adds	r3, r3, r7
10046832:	781b      	ldrb	r3, [r3, #0]
10046834:	2b01      	cmp	r3, #1
10046836:	d121      	bne.n	1004687c <HAL_RADIO_TIMER_Tick+0x124>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
10046838:	f3ef 8310 	mrs	r3, PRIMASK
1004683c:	62bb      	str	r3, [r7, #40]	@ 0x28
  return(result);
1004683e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    {
      /* A new root timer is already expired, mimic timer expire */
      INCREMENT_EXPIRE_COUNT;
10046840:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("cpsid i" : : : "memory");
10046842:	b672      	cpsid	i
}
10046844:	46c0      	nop			@ (mov r8, r8)
10046846:	4b8e      	ldr	r3, [pc, #568]	@ (10046a80 <HAL_RADIO_TIMER_Tick+0x328>)
10046848:	2291      	movs	r2, #145	@ 0x91
1004684a:	5c9b      	ldrb	r3, [r3, r2]
1004684c:	3301      	adds	r3, #1
1004684e:	4a8c      	ldr	r2, [pc, #560]	@ (10046a80 <HAL_RADIO_TIMER_Tick+0x328>)
10046850:	2192      	movs	r1, #146	@ 0x92
10046852:	5c52      	ldrb	r2, [r2, r1]
10046854:	4293      	cmp	r3, r2
10046856:	d103      	bne.n	10046860 <HAL_RADIO_TIMER_Tick+0x108>
10046858:	4b89      	ldr	r3, [pc, #548]	@ (10046a80 <HAL_RADIO_TIMER_Tick+0x328>)
1004685a:	2291      	movs	r2, #145	@ 0x91
1004685c:	5c9b      	ldrb	r3, [r3, r2]
1004685e:	e004      	b.n	1004686a <HAL_RADIO_TIMER_Tick+0x112>
10046860:	4b87      	ldr	r3, [pc, #540]	@ (10046a80 <HAL_RADIO_TIMER_Tick+0x328>)
10046862:	2291      	movs	r2, #145	@ 0x91
10046864:	5c9b      	ldrb	r3, [r3, r2]
10046866:	3301      	adds	r3, #1
10046868:	b2db      	uxtb	r3, r3
1004686a:	4a85      	ldr	r2, [pc, #532]	@ (10046a80 <HAL_RADIO_TIMER_Tick+0x328>)
1004686c:	2191      	movs	r1, #145	@ 0x91
1004686e:	5453      	strb	r3, [r2, r1]
10046870:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
10046872:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
10046874:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10046876:	f383 8810 	msr	PRIMASK, r3
}
1004687a:	46c0      	nop			@ (mov r8, r8)
    }
    RADIO_TIMER_Context.served_count += to_be_served;
1004687c:	4b80      	ldr	r3, [pc, #512]	@ (10046a80 <HAL_RADIO_TIMER_Tick+0x328>)
1004687e:	2292      	movs	r2, #146	@ 0x92
10046880:	5c9a      	ldrb	r2, [r3, r2]
10046882:	2337      	movs	r3, #55	@ 0x37
10046884:	2108      	movs	r1, #8
10046886:	185b      	adds	r3, r3, r1
10046888:	19db      	adds	r3, r3, r7
1004688a:	781b      	ldrb	r3, [r3, #0]
1004688c:	18d3      	adds	r3, r2, r3
1004688e:	b2d9      	uxtb	r1, r3
10046890:	4b7b      	ldr	r3, [pc, #492]	@ (10046a80 <HAL_RADIO_TIMER_Tick+0x328>)
10046892:	2292      	movs	r2, #146	@ 0x92
10046894:	5499      	strb	r1, [r3, r2]
  while (DIFF8(RADIO_TIMER_Context.expired_count, RADIO_TIMER_Context.served_count))
10046896:	4b7a      	ldr	r3, [pc, #488]	@ (10046a80 <HAL_RADIO_TIMER_Tick+0x328>)
10046898:	2291      	movs	r2, #145	@ 0x91
1004689a:	5c9a      	ldrb	r2, [r3, r2]
1004689c:	4b78      	ldr	r3, [pc, #480]	@ (10046a80 <HAL_RADIO_TIMER_Tick+0x328>)
1004689e:	2192      	movs	r1, #146	@ 0x92
100468a0:	5c5b      	ldrb	r3, [r3, r1]
100468a2:	429a      	cmp	r2, r3
100468a4:	d30a      	bcc.n	100468bc <HAL_RADIO_TIMER_Tick+0x164>
100468a6:	4b76      	ldr	r3, [pc, #472]	@ (10046a80 <HAL_RADIO_TIMER_Tick+0x328>)
100468a8:	2291      	movs	r2, #145	@ 0x91
100468aa:	5c9a      	ldrb	r2, [r3, r2]
100468ac:	4b74      	ldr	r3, [pc, #464]	@ (10046a80 <HAL_RADIO_TIMER_Tick+0x328>)
100468ae:	2192      	movs	r1, #146	@ 0x92
100468b0:	5c5b      	ldrb	r3, [r3, r1]
100468b2:	1ad3      	subs	r3, r2, r3
100468b4:	1e5a      	subs	r2, r3, #1
100468b6:	4193      	sbcs	r3, r2
100468b8:	b2db      	uxtb	r3, r3
100468ba:	e00c      	b.n	100468d6 <HAL_RADIO_TIMER_Tick+0x17e>
100468bc:	4b70      	ldr	r3, [pc, #448]	@ (10046a80 <HAL_RADIO_TIMER_Tick+0x328>)
100468be:	2291      	movs	r2, #145	@ 0x91
100468c0:	5c9b      	ldrb	r3, [r3, r2]
100468c2:	0019      	movs	r1, r3
100468c4:	4b6e      	ldr	r3, [pc, #440]	@ (10046a80 <HAL_RADIO_TIMER_Tick+0x328>)
100468c6:	2292      	movs	r2, #146	@ 0x92
100468c8:	5c9b      	ldrb	r3, [r3, r2]
100468ca:	1acb      	subs	r3, r1, r3
100468cc:	3301      	adds	r3, #1
100468ce:	33ff      	adds	r3, #255	@ 0xff
100468d0:	1e5a      	subs	r2, r3, #1
100468d2:	4193      	sbcs	r3, r2
100468d4:	b2db      	uxtb	r3, r3
100468d6:	2b00      	cmp	r3, #0
100468d8:	d000      	beq.n	100468dc <HAL_RADIO_TIMER_Tick+0x184>
100468da:	e769      	b.n	100467b0 <HAL_RADIO_TIMER_Tick+0x58>
  }

  /* Check for periodic calibration */
  if (RADIO_TIMER_Context.calibrationSettings.calibration_in_progress)
100468dc:	4b68      	ldr	r3, [pc, #416]	@ (10046a80 <HAL_RADIO_TIMER_Tick+0x328>)
100468de:	7a1b      	ldrb	r3, [r3, #8]
100468e0:	2b00      	cmp	r3, #0
100468e2:	d100      	bne.n	100468e6 <HAL_RADIO_TIMER_Tick+0x18e>
100468e4:	e0b0      	b.n	10046a48 <HAL_RADIO_TIMER_Tick+0x2f0>
  {
    if (LL_RADIO_TIMER_IsActiveFlag_LSICalibrationEnded(RADIO_CTRL))
100468e6:	4b67      	ldr	r3, [pc, #412]	@ (10046a84 <HAL_RADIO_TIMER_Tick+0x32c>)
100468e8:	0018      	movs	r0, r3
100468ea:	f7ff fe14 	bl	10046516 <LL_RADIO_TIMER_IsActiveFlag_LSICalibrationEnded>
100468ee:	1e03      	subs	r3, r0, #0
100468f0:	d100      	bne.n	100468f4 <HAL_RADIO_TIMER_Tick+0x19c>
100468f2:	e0c1      	b.n	10046a78 <HAL_RADIO_TIMER_Tick+0x320>
    {
      /* Calibration is completed */
      RADIO_TIMER_Context.calibrationSettings.calibration_in_progress = FALSE;
100468f4:	4b62      	ldr	r3, [pc, #392]	@ (10046a80 <HAL_RADIO_TIMER_Tick+0x328>)
100468f6:	2200      	movs	r2, #0
100468f8:	721a      	strb	r2, [r3, #8]
      if ((RADIO_TIMER_Context.wakeup_calibration == FALSE) && RADIO_TIMER_Context.stop_notimer_action)
100468fa:	4b61      	ldr	r3, [pc, #388]	@ (10046a80 <HAL_RADIO_TIMER_Tick+0x328>)
100468fc:	2294      	movs	r2, #148	@ 0x94
100468fe:	5c9b      	ldrb	r3, [r3, r2]
10046900:	2b00      	cmp	r3, #0
10046902:	d109      	bne.n	10046918 <HAL_RADIO_TIMER_Tick+0x1c0>
10046904:	4b5e      	ldr	r3, [pc, #376]	@ (10046a80 <HAL_RADIO_TIMER_Tick+0x328>)
10046906:	2293      	movs	r2, #147	@ 0x93
10046908:	5c9b      	ldrb	r3, [r3, r2]
1004690a:	2b00      	cmp	r3, #0
1004690c:	d004      	beq.n	10046918 <HAL_RADIO_TIMER_Tick+0x1c0>
      {
        RADIO_TIMER_Context.stop_notimer_action = FALSE;
1004690e:	4b5c      	ldr	r3, [pc, #368]	@ (10046a80 <HAL_RADIO_TIMER_Tick+0x328>)
10046910:	2293      	movs	r2, #147	@ 0x93
10046912:	2100      	movs	r1, #0
10046914:	5499      	strb	r1, [r3, r2]
10046916:	e037      	b.n	10046988 <HAL_RADIO_TIMER_Tick+0x230>
      }
      else
      {
        /* Collect calibration data */
        _updateCalibrationData();
10046918:	f000 feb6 	bl	10047688 <_updateCalibrationData>
        RADIO_TIMER_Context.rootNode = _update_user_timeout(RADIO_TIMER_Context.rootNode, &expired);
1004691c:	4b58      	ldr	r3, [pc, #352]	@ (10046a80 <HAL_RADIO_TIMER_Tick+0x328>)
1004691e:	228c      	movs	r2, #140	@ 0x8c
10046920:	589b      	ldr	r3, [r3, r2]
10046922:	240b      	movs	r4, #11
10046924:	2508      	movs	r5, #8
10046926:	1962      	adds	r2, r4, r5
10046928:	19d2      	adds	r2, r2, r7
1004692a:	0011      	movs	r1, r2
1004692c:	0018      	movs	r0, r3
1004692e:	f000 fd23 	bl	10047378 <_update_user_timeout>
10046932:	0002      	movs	r2, r0
10046934:	4b52      	ldr	r3, [pc, #328]	@ (10046a80 <HAL_RADIO_TIMER_Tick+0x328>)
10046936:	218c      	movs	r1, #140	@ 0x8c
10046938:	505a      	str	r2, [r3, r1]
        if (expired == 1)
1004693a:	1963      	adds	r3, r4, r5
1004693c:	19db      	adds	r3, r3, r7
1004693e:	781b      	ldrb	r3, [r3, #0]
10046940:	2b01      	cmp	r3, #1
10046942:	d121      	bne.n	10046988 <HAL_RADIO_TIMER_Tick+0x230>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
10046944:	f3ef 8310 	mrs	r3, PRIMASK
10046948:	623b      	str	r3, [r7, #32]
  return(result);
1004694a:	6a3b      	ldr	r3, [r7, #32]
        {
          /* A new root timer is already expired, mimic timer expire */
          INCREMENT_EXPIRE_COUNT;
1004694c:	647b      	str	r3, [r7, #68]	@ 0x44
  __ASM volatile ("cpsid i" : : : "memory");
1004694e:	b672      	cpsid	i
}
10046950:	46c0      	nop			@ (mov r8, r8)
10046952:	4b4b      	ldr	r3, [pc, #300]	@ (10046a80 <HAL_RADIO_TIMER_Tick+0x328>)
10046954:	2291      	movs	r2, #145	@ 0x91
10046956:	5c9b      	ldrb	r3, [r3, r2]
10046958:	3301      	adds	r3, #1
1004695a:	4a49      	ldr	r2, [pc, #292]	@ (10046a80 <HAL_RADIO_TIMER_Tick+0x328>)
1004695c:	2192      	movs	r1, #146	@ 0x92
1004695e:	5c52      	ldrb	r2, [r2, r1]
10046960:	4293      	cmp	r3, r2
10046962:	d103      	bne.n	1004696c <HAL_RADIO_TIMER_Tick+0x214>
10046964:	4b46      	ldr	r3, [pc, #280]	@ (10046a80 <HAL_RADIO_TIMER_Tick+0x328>)
10046966:	2291      	movs	r2, #145	@ 0x91
10046968:	5c9b      	ldrb	r3, [r3, r2]
1004696a:	e004      	b.n	10046976 <HAL_RADIO_TIMER_Tick+0x21e>
1004696c:	4b44      	ldr	r3, [pc, #272]	@ (10046a80 <HAL_RADIO_TIMER_Tick+0x328>)
1004696e:	2291      	movs	r2, #145	@ 0x91
10046970:	5c9b      	ldrb	r3, [r3, r2]
10046972:	3301      	adds	r3, #1
10046974:	b2db      	uxtb	r3, r3
10046976:	4a42      	ldr	r2, [pc, #264]	@ (10046a80 <HAL_RADIO_TIMER_Tick+0x328>)
10046978:	2191      	movs	r1, #145	@ 0x91
1004697a:	5453      	strb	r3, [r2, r1]
1004697c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
1004697e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
10046980:	69fb      	ldr	r3, [r7, #28]
10046982:	f383 8810 	msr	PRIMASK, r3
}
10046986:	46c0      	nop			@ (mov r8, r8)
        }
      }

#if defined (STM32WB06) || defined (STM32WB07)
      if (RADIO_TIMER_Context.waitCal)
10046988:	4b3d      	ldr	r3, [pc, #244]	@ (10046a80 <HAL_RADIO_TIMER_Tick+0x328>)
1004698a:	229c      	movs	r2, #156	@ 0x9c
1004698c:	5c9b      	ldrb	r3, [r3, r2]
1004698e:	2b00      	cmp	r3, #0
10046990:	d044      	beq.n	10046a1c <HAL_RADIO_TIMER_Tick+0x2c4>
      {
        RADIO_TIMER_Context.waitCal = 0;
10046992:	4b3b      	ldr	r3, [pc, #236]	@ (10046a80 <HAL_RADIO_TIMER_Tick+0x328>)
10046994:	229c      	movs	r2, #156	@ 0x9c
10046996:	2100      	movs	r1, #0
10046998:	5499      	strb	r1, [r3, r2]
        RADIO_TIMER_Context.radioTimer.pending = TRUE;
1004699a:	4b39      	ldr	r3, [pc, #228]	@ (10046a80 <HAL_RADIO_TIMER_Tick+0x328>)
1004699c:	2262      	movs	r2, #98	@ 0x62
1004699e:	2101      	movs	r1, #1
100469a0:	5499      	strb	r1, [r3, r2]
        _check_radio_activity(&RADIO_TIMER_Context.radioTimer, &expired);
100469a2:	240b      	movs	r4, #11
100469a4:	2508      	movs	r5, #8
100469a6:	1963      	adds	r3, r4, r5
100469a8:	19da      	adds	r2, r3, r7
100469aa:	4b37      	ldr	r3, [pc, #220]	@ (10046a88 <HAL_RADIO_TIMER_Tick+0x330>)
100469ac:	0011      	movs	r1, r2
100469ae:	0018      	movs	r0, r3
100469b0:	f000 fefe 	bl	100477b0 <_check_radio_activity>
        RADIO_TIMER_Context.rootNode = _update_user_timeout(RADIO_TIMER_Context.rootNode, &expired);
100469b4:	4b32      	ldr	r3, [pc, #200]	@ (10046a80 <HAL_RADIO_TIMER_Tick+0x328>)
100469b6:	228c      	movs	r2, #140	@ 0x8c
100469b8:	589b      	ldr	r3, [r3, r2]
100469ba:	1962      	adds	r2, r4, r5
100469bc:	19d2      	adds	r2, r2, r7
100469be:	0011      	movs	r1, r2
100469c0:	0018      	movs	r0, r3
100469c2:	f000 fcd9 	bl	10047378 <_update_user_timeout>
100469c6:	0002      	movs	r2, r0
100469c8:	4b2d      	ldr	r3, [pc, #180]	@ (10046a80 <HAL_RADIO_TIMER_Tick+0x328>)
100469ca:	218c      	movs	r1, #140	@ 0x8c
100469cc:	505a      	str	r2, [r3, r1]
        if (expired == 1)
100469ce:	1963      	adds	r3, r4, r5
100469d0:	19db      	adds	r3, r3, r7
100469d2:	781b      	ldrb	r3, [r3, #0]
100469d4:	2b01      	cmp	r3, #1
100469d6:	d121      	bne.n	10046a1c <HAL_RADIO_TIMER_Tick+0x2c4>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
100469d8:	f3ef 8310 	mrs	r3, PRIMASK
100469dc:	61bb      	str	r3, [r7, #24]
  return(result);
100469de:	69bb      	ldr	r3, [r7, #24]
        {
          /* A new root timer is already expired, mimic timer expire */
          INCREMENT_EXPIRE_COUNT;
100469e0:	643b      	str	r3, [r7, #64]	@ 0x40
  __ASM volatile ("cpsid i" : : : "memory");
100469e2:	b672      	cpsid	i
}
100469e4:	46c0      	nop			@ (mov r8, r8)
100469e6:	4b26      	ldr	r3, [pc, #152]	@ (10046a80 <HAL_RADIO_TIMER_Tick+0x328>)
100469e8:	2291      	movs	r2, #145	@ 0x91
100469ea:	5c9b      	ldrb	r3, [r3, r2]
100469ec:	3301      	adds	r3, #1
100469ee:	4a24      	ldr	r2, [pc, #144]	@ (10046a80 <HAL_RADIO_TIMER_Tick+0x328>)
100469f0:	2192      	movs	r1, #146	@ 0x92
100469f2:	5c52      	ldrb	r2, [r2, r1]
100469f4:	4293      	cmp	r3, r2
100469f6:	d103      	bne.n	10046a00 <HAL_RADIO_TIMER_Tick+0x2a8>
100469f8:	4b21      	ldr	r3, [pc, #132]	@ (10046a80 <HAL_RADIO_TIMER_Tick+0x328>)
100469fa:	2291      	movs	r2, #145	@ 0x91
100469fc:	5c9b      	ldrb	r3, [r3, r2]
100469fe:	e004      	b.n	10046a0a <HAL_RADIO_TIMER_Tick+0x2b2>
10046a00:	4b1f      	ldr	r3, [pc, #124]	@ (10046a80 <HAL_RADIO_TIMER_Tick+0x328>)
10046a02:	2291      	movs	r2, #145	@ 0x91
10046a04:	5c9b      	ldrb	r3, [r3, r2]
10046a06:	3301      	adds	r3, #1
10046a08:	b2db      	uxtb	r3, r3
10046a0a:	4a1d      	ldr	r2, [pc, #116]	@ (10046a80 <HAL_RADIO_TIMER_Tick+0x328>)
10046a0c:	2191      	movs	r1, #145	@ 0x91
10046a0e:	5453      	strb	r3, [r2, r1]
10046a10:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
10046a12:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
10046a14:	697b      	ldr	r3, [r7, #20]
10046a16:	f383 8810 	msr	PRIMASK, r3
}
10046a1a:	46c0      	nop			@ (mov r8, r8)
      }
#else
      _check_radio_activity(&RADIO_TIMER_Context.radioTimer, &expired);
#endif

      HAL_RADIO_TIMER_StopVirtualTimer(&RADIO_TIMER_Context.calibrationTimer);
10046a1c:	4b1b      	ldr	r3, [pc, #108]	@ (10046a8c <HAL_RADIO_TIMER_Tick+0x334>)
10046a1e:	0018      	movs	r0, r3
10046a20:	f000 f974 	bl	10046d0c <HAL_RADIO_TIMER_StopVirtualTimer>
      /* Schedule next calibration event */
      _start_timer(&RADIO_TIMER_Context.calibrationTimer,
                   HAL_RADIO_TIMER_GetCurrentSysTime() + RADIO_TIMER_Context.calibrationSettings.periodicCalibrationInterval);
10046a24:	f000 f960 	bl	10046ce8 <HAL_RADIO_TIMER_GetCurrentSysTime>
10046a28:	0002      	movs	r2, r0
10046a2a:	000b      	movs	r3, r1
10046a2c:	4914      	ldr	r1, [pc, #80]	@ (10046a80 <HAL_RADIO_TIMER_Tick+0x328>)
10046a2e:	6849      	ldr	r1, [r1, #4]
10046a30:	6039      	str	r1, [r7, #0]
10046a32:	2100      	movs	r1, #0
10046a34:	6079      	str	r1, [r7, #4]
      _start_timer(&RADIO_TIMER_Context.calibrationTimer,
10046a36:	6838      	ldr	r0, [r7, #0]
10046a38:	6879      	ldr	r1, [r7, #4]
10046a3a:	1812      	adds	r2, r2, r0
10046a3c:	414b      	adcs	r3, r1
10046a3e:	4913      	ldr	r1, [pc, #76]	@ (10046a8c <HAL_RADIO_TIMER_Tick+0x334>)
10046a40:	0008      	movs	r0, r1
10046a42:	f000 fbd3 	bl	100471ec <_start_timer>
      {
        _calibration_callback(&RADIO_TIMER_Context.calibrationTimer);
      }
    }
  }
}
10046a46:	e017      	b.n	10046a78 <HAL_RADIO_TIMER_Tick+0x320>
    if (RADIO_TIMER_Context.calibrationSettings.periodicCalibration)
10046a48:	4b0d      	ldr	r3, [pc, #52]	@ (10046a80 <HAL_RADIO_TIMER_Tick+0x328>)
10046a4a:	781b      	ldrb	r3, [r3, #0]
10046a4c:	2b00      	cmp	r3, #0
10046a4e:	d013      	beq.n	10046a78 <HAL_RADIO_TIMER_Tick+0x320>
      if (HAL_RADIO_TIMER_GetCurrentSysTime() > (RADIO_TIMER_Context.calibrationData.last_calibration_time +
10046a50:	f000 f94a 	bl	10046ce8 <HAL_RADIO_TIMER_GetCurrentSysTime>
10046a54:	4b0a      	ldr	r3, [pc, #40]	@ (10046a80 <HAL_RADIO_TIMER_Tick+0x328>)
10046a56:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
10046a58:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
10046a5a:	24fa      	movs	r4, #250	@ 0xfa
10046a5c:	0364      	lsls	r4, r4, #13
10046a5e:	2500      	movs	r5, #0
10046a60:	1912      	adds	r2, r2, r4
10046a62:	416b      	adcs	r3, r5
10046a64:	4299      	cmp	r1, r3
10046a66:	d803      	bhi.n	10046a70 <HAL_RADIO_TIMER_Tick+0x318>
10046a68:	d106      	bne.n	10046a78 <HAL_RADIO_TIMER_Tick+0x320>
10046a6a:	4290      	cmp	r0, r2
10046a6c:	d800      	bhi.n	10046a70 <HAL_RADIO_TIMER_Tick+0x318>
}
10046a6e:	e003      	b.n	10046a78 <HAL_RADIO_TIMER_Tick+0x320>
        _calibration_callback(&RADIO_TIMER_Context.calibrationTimer);
10046a70:	4b06      	ldr	r3, [pc, #24]	@ (10046a8c <HAL_RADIO_TIMER_Tick+0x334>)
10046a72:	0018      	movs	r0, r3
10046a74:	f000 fba6 	bl	100471c4 <_calibration_callback>
}
10046a78:	46c0      	nop			@ (mov r8, r8)
10046a7a:	46bd      	mov	sp, r7
10046a7c:	b014      	add	sp, #80	@ 0x50
10046a7e:	bdb0      	pop	{r4, r5, r7, pc}
10046a80:	20000598 	.word	0x20000598
10046a84:	60001000 	.word	0x60001000
10046a88:	200005f0 	.word	0x200005f0
10046a8c:	200005d8 	.word	0x200005d8

10046a90 <HAL_RADIO_TIMER_GetAnchorPoint>:
  * @brief Get the last anchorPoint in system time unit.
  * @param current_system_time: Current System Time
  * @return TimerCapture register in system time unit.
  */
uint64_t HAL_RADIO_TIMER_GetAnchorPoint(uint64_t *current_system_time)
{
10046a90:	b580      	push	{r7, lr}
10046a92:	b082      	sub	sp, #8
10046a94:	af00      	add	r7, sp, #0
10046a96:	6078      	str	r0, [r7, #4]
  return TIMER_GetPastSysTime(BLUE->TIMERCAPTUREREG, current_system_time);
10046a98:	23c0      	movs	r3, #192	@ 0xc0
10046a9a:	05db      	lsls	r3, r3, #23
10046a9c:	695b      	ldr	r3, [r3, #20]
10046a9e:	687a      	ldr	r2, [r7, #4]
10046aa0:	0011      	movs	r1, r2
10046aa2:	0018      	movs	r0, r3
10046aa4:	f001 f8b8 	bl	10047c18 <TIMER_GetPastSysTime>
10046aa8:	0002      	movs	r2, r0
10046aaa:	000b      	movs	r3, r1
}
10046aac:	0010      	movs	r0, r2
10046aae:	0019      	movs	r1, r3
10046ab0:	46bd      	mov	sp, r7
10046ab2:	b002      	add	sp, #8
10046ab4:	bd80      	pop	{r7, pc}
	...

10046ab8 <HAL_RADIO_TIMER_SetRadioTimerValue>:
  * @param  cal_req: Specify if PLL calibration is requested (1) or not (0).
  * @retval 0 if radio activity has been scheduled successfully.
  * @retval 1 if radio activity has been rejected (it is too close or in the past).
  */
uint32_t HAL_RADIO_TIMER_SetRadioTimerValue(uint32_t time, uint8_t event_type, uint8_t cal_req)
{
10046ab8:	b5f0      	push	{r4, r5, r6, r7, lr}
10046aba:	b089      	sub	sp, #36	@ 0x24
10046abc:	af00      	add	r7, sp, #0
10046abe:	60f8      	str	r0, [r7, #12]
10046ac0:	0008      	movs	r0, r1
10046ac2:	0011      	movs	r1, r2
10046ac4:	230b      	movs	r3, #11
10046ac6:	18fb      	adds	r3, r7, r3
10046ac8:	1c02      	adds	r2, r0, #0
10046aca:	701a      	strb	r2, [r3, #0]
10046acc:	230a      	movs	r3, #10
10046ace:	18fb      	adds	r3, r7, r3
10046ad0:	1c0a      	adds	r2, r1, #0
10046ad2:	701a      	strb	r2, [r3, #0]
  uint8_t retVal = 0;
10046ad4:	260f      	movs	r6, #15
10046ad6:	2308      	movs	r3, #8
10046ad8:	18f3      	adds	r3, r6, r3
10046ada:	19db      	adds	r3, r3, r7
10046adc:	2200      	movs	r2, #0
10046ade:	701a      	strb	r2, [r3, #0]
#if defined (STM32WB06) || defined (STM32WB07)
  uint64_t current_time;
#endif

  RADIO_TIMER_Context.radioTimer.event_type = event_type;
10046ae0:	230b      	movs	r3, #11
10046ae2:	18fb      	adds	r3, r7, r3
10046ae4:	781b      	ldrb	r3, [r3, #0]
10046ae6:	1e5a      	subs	r2, r3, #1
10046ae8:	4193      	sbcs	r3, r2
10046aea:	b2d9      	uxtb	r1, r3
10046aec:	4b53      	ldr	r3, [pc, #332]	@ (10046c3c <HAL_RADIO_TIMER_SetRadioTimerValue+0x184>)
10046aee:	2264      	movs	r2, #100	@ 0x64
10046af0:	5499      	strb	r1, [r3, r2]
  RADIO_TIMER_Context.radioTimer.cal_req = cal_req;
10046af2:	230a      	movs	r3, #10
10046af4:	18fb      	adds	r3, r7, r3
10046af6:	781b      	ldrb	r3, [r3, #0]
10046af8:	1e5a      	subs	r2, r3, #1
10046afa:	4193      	sbcs	r3, r2
10046afc:	b2d9      	uxtb	r1, r3
10046afe:	4b4f      	ldr	r3, [pc, #316]	@ (10046c3c <HAL_RADIO_TIMER_SetRadioTimerValue+0x184>)
10046b00:	2260      	movs	r2, #96	@ 0x60
10046b02:	5499      	strb	r1, [r3, r2]
  RADIO_TIMER_Context.radioTimer.expiryTime = RADIO_TIMER_Context.calibrationData.last_calibration_time + (uint32_t)(time - (uint32_t)RADIO_TIMER_Context.calibrationData.last_calibration_time);
10046b04:	4b4d      	ldr	r3, [pc, #308]	@ (10046c3c <HAL_RADIO_TIMER_SetRadioTimerValue+0x184>)
10046b06:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
10046b08:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
10046b0a:	494c      	ldr	r1, [pc, #304]	@ (10046c3c <HAL_RADIO_TIMER_SetRadioTimerValue+0x184>)
10046b0c:	6a88      	ldr	r0, [r1, #40]	@ 0x28
10046b0e:	6ac9      	ldr	r1, [r1, #44]	@ 0x2c
10046b10:	68f9      	ldr	r1, [r7, #12]
10046b12:	1a09      	subs	r1, r1, r0
10046b14:	6039      	str	r1, [r7, #0]
10046b16:	2100      	movs	r1, #0
10046b18:	6079      	str	r1, [r7, #4]
10046b1a:	6838      	ldr	r0, [r7, #0]
10046b1c:	6879      	ldr	r1, [r7, #4]
10046b1e:	1812      	adds	r2, r2, r0
10046b20:	414b      	adcs	r3, r1
10046b22:	4946      	ldr	r1, [pc, #280]	@ (10046c3c <HAL_RADIO_TIMER_SetRadioTimerValue+0x184>)
10046b24:	658a      	str	r2, [r1, #88]	@ 0x58
10046b26:	65cb      	str	r3, [r1, #92]	@ 0x5c
  RADIO_TIMER_Context.radioTimer.active = FALSE;
10046b28:	4b44      	ldr	r3, [pc, #272]	@ (10046c3c <HAL_RADIO_TIMER_SetRadioTimerValue+0x184>)
10046b2a:	2261      	movs	r2, #97	@ 0x61
10046b2c:	2100      	movs	r1, #0
10046b2e:	5499      	strb	r1, [r3, r2]
  RADIO_TIMER_Context.radioTimer.intTxRx_to_be_served = FALSE;
10046b30:	4b42      	ldr	r3, [pc, #264]	@ (10046c3c <HAL_RADIO_TIMER_SetRadioTimerValue+0x184>)
10046b32:	2263      	movs	r2, #99	@ 0x63
10046b34:	2100      	movs	r1, #0
10046b36:	5499      	strb	r1, [r3, r2]
  RADIO_TIMER_Context.radioTimer.pending = TRUE;
10046b38:	4b40      	ldr	r3, [pc, #256]	@ (10046c3c <HAL_RADIO_TIMER_SetRadioTimerValue+0x184>)
10046b3a:	2262      	movs	r2, #98	@ 0x62
10046b3c:	2101      	movs	r1, #1
10046b3e:	5499      	strb	r1, [r3, r2]

#if defined (STM32WB06) || defined (STM32WB07)
  current_time = HAL_RADIO_TIMER_GetCurrentSysTime();
10046b40:	f000 f8d2 	bl	10046ce8 <HAL_RADIO_TIMER_GetCurrentSysTime>
10046b44:	0002      	movs	r2, r0
10046b46:	000b      	movs	r3, r1
10046b48:	61ba      	str	r2, [r7, #24]
10046b4a:	61fb      	str	r3, [r7, #28]

  if (RADIO_TIMER_Context.rootNode == NULL)
10046b4c:	4b3b      	ldr	r3, [pc, #236]	@ (10046c3c <HAL_RADIO_TIMER_SetRadioTimerValue+0x184>)
10046b4e:	228c      	movs	r2, #140	@ 0x8c
10046b50:	589b      	ldr	r3, [r3, r2]
10046b52:	2b00      	cmp	r3, #0
10046b54:	d108      	bne.n	10046b68 <HAL_RADIO_TIMER_SetRadioTimerValue+0xb0>
  {
    _check_radio_activity(&RADIO_TIMER_Context.radioTimer, &retVal);
10046b56:	2308      	movs	r3, #8
10046b58:	18f3      	adds	r3, r6, r3
10046b5a:	19da      	adds	r2, r3, r7
10046b5c:	4b38      	ldr	r3, [pc, #224]	@ (10046c40 <HAL_RADIO_TIMER_SetRadioTimerValue+0x188>)
10046b5e:	0011      	movs	r1, r2
10046b60:	0018      	movs	r0, r3
10046b62:	f000 fe25 	bl	100477b0 <_check_radio_activity>
10046b66:	e05c      	b.n	10046c22 <HAL_RADIO_TIMER_SetRadioTimerValue+0x16a>
  }
  else
  {
    if (RADIO_TIMER_Context.rootNode->expiryTime < current_time ||
10046b68:	4b34      	ldr	r3, [pc, #208]	@ (10046c3c <HAL_RADIO_TIMER_SetRadioTimerValue+0x184>)
10046b6a:	228c      	movs	r2, #140	@ 0x8c
10046b6c:	589b      	ldr	r3, [r3, r2]
10046b6e:	681a      	ldr	r2, [r3, #0]
10046b70:	685b      	ldr	r3, [r3, #4]
10046b72:	69f9      	ldr	r1, [r7, #28]
10046b74:	4299      	cmp	r1, r3
10046b76:	d82f      	bhi.n	10046bd8 <HAL_RADIO_TIMER_SetRadioTimerValue+0x120>
10046b78:	69f9      	ldr	r1, [r7, #28]
10046b7a:	4299      	cmp	r1, r3
10046b7c:	d102      	bne.n	10046b84 <HAL_RADIO_TIMER_SetRadioTimerValue+0xcc>
10046b7e:	69b9      	ldr	r1, [r7, #24]
10046b80:	4291      	cmp	r1, r2
10046b82:	d829      	bhi.n	10046bd8 <HAL_RADIO_TIMER_SetRadioTimerValue+0x120>
        ((RADIO_TIMER_Context.radioTimer.expiryTime < (RADIO_TIMER_Context.rootNode->expiryTime +
10046b84:	4b2d      	ldr	r3, [pc, #180]	@ (10046c3c <HAL_RADIO_TIMER_SetRadioTimerValue+0x184>)
10046b86:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
10046b88:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
10046b8a:	492c      	ldr	r1, [pc, #176]	@ (10046c3c <HAL_RADIO_TIMER_SetRadioTimerValue+0x184>)
10046b8c:	208c      	movs	r0, #140	@ 0x8c
10046b8e:	5809      	ldr	r1, [r1, r0]
10046b90:	6808      	ldr	r0, [r1, #0]
10046b92:	6849      	ldr	r1, [r1, #4]
10046b94:	6038      	str	r0, [r7, #0]
10046b96:	6079      	str	r1, [r7, #4]
                                                       RADIO_TIMER_Context.hostMargin)) && RADIO_TIMER_Context.rootNode->active) || !RADIO_TIMER_Context.rootNode->active)
10046b98:	4e28      	ldr	r6, [pc, #160]	@ (10046c3c <HAL_RADIO_TIMER_SetRadioTimerValue+0x184>)
10046b9a:	2198      	movs	r1, #152	@ 0x98
10046b9c:	468c      	mov	ip, r1
10046b9e:	4661      	mov	r1, ip
10046ba0:	5876      	ldr	r6, [r6, r1]
10046ba2:	0034      	movs	r4, r6
10046ba4:	2600      	movs	r6, #0
10046ba6:	0035      	movs	r5, r6
        ((RADIO_TIMER_Context.radioTimer.expiryTime < (RADIO_TIMER_Context.rootNode->expiryTime +
10046ba8:	6838      	ldr	r0, [r7, #0]
10046baa:	6879      	ldr	r1, [r7, #4]
10046bac:	1900      	adds	r0, r0, r4
10046bae:	4169      	adcs	r1, r5
    if (RADIO_TIMER_Context.rootNode->expiryTime < current_time ||
10046bb0:	4299      	cmp	r1, r3
10046bb2:	d802      	bhi.n	10046bba <HAL_RADIO_TIMER_SetRadioTimerValue+0x102>
10046bb4:	d107      	bne.n	10046bc6 <HAL_RADIO_TIMER_SetRadioTimerValue+0x10e>
10046bb6:	4290      	cmp	r0, r2
10046bb8:	d905      	bls.n	10046bc6 <HAL_RADIO_TIMER_SetRadioTimerValue+0x10e>
                                                       RADIO_TIMER_Context.hostMargin)) && RADIO_TIMER_Context.rootNode->active) || !RADIO_TIMER_Context.rootNode->active)
10046bba:	4b20      	ldr	r3, [pc, #128]	@ (10046c3c <HAL_RADIO_TIMER_SetRadioTimerValue+0x184>)
10046bbc:	228c      	movs	r2, #140	@ 0x8c
10046bbe:	589b      	ldr	r3, [r3, r2]
10046bc0:	7b1b      	ldrb	r3, [r3, #12]
10046bc2:	2b00      	cmp	r3, #0
10046bc4:	d108      	bne.n	10046bd8 <HAL_RADIO_TIMER_SetRadioTimerValue+0x120>
10046bc6:	4b1d      	ldr	r3, [pc, #116]	@ (10046c3c <HAL_RADIO_TIMER_SetRadioTimerValue+0x184>)
10046bc8:	228c      	movs	r2, #140	@ 0x8c
10046bca:	589b      	ldr	r3, [r3, r2]
10046bcc:	7b1b      	ldrb	r3, [r3, #12]
10046bce:	2201      	movs	r2, #1
10046bd0:	4053      	eors	r3, r2
10046bd2:	b2db      	uxtb	r3, r3
10046bd4:	2b00      	cmp	r3, #0
10046bd6:	d020      	beq.n	10046c1a <HAL_RADIO_TIMER_SetRadioTimerValue+0x162>
    {
      /* Program the radio timer */
      _check_radio_activity(&RADIO_TIMER_Context.radioTimer, &retVal);
10046bd8:	230f      	movs	r3, #15
10046bda:	2208      	movs	r2, #8
10046bdc:	189b      	adds	r3, r3, r2
10046bde:	19da      	adds	r2, r3, r7
10046be0:	4b17      	ldr	r3, [pc, #92]	@ (10046c40 <HAL_RADIO_TIMER_SetRadioTimerValue+0x188>)
10046be2:	0011      	movs	r1, r2
10046be4:	0018      	movs	r0, r3
10046be6:	f000 fde3 	bl	100477b0 <_check_radio_activity>
      if ((RADIO_TIMER_Context.radioTimer.expiryTime >= RADIO_TIMER_Context.rootNode->expiryTime)
10046bea:	4b14      	ldr	r3, [pc, #80]	@ (10046c3c <HAL_RADIO_TIMER_SetRadioTimerValue+0x184>)
10046bec:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
10046bee:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
10046bf0:	4912      	ldr	r1, [pc, #72]	@ (10046c3c <HAL_RADIO_TIMER_SetRadioTimerValue+0x184>)
10046bf2:	208c      	movs	r0, #140	@ 0x8c
10046bf4:	5809      	ldr	r1, [r1, r0]
10046bf6:	6808      	ldr	r0, [r1, #0]
10046bf8:	6849      	ldr	r1, [r1, #4]
10046bfa:	4299      	cmp	r1, r3
10046bfc:	d810      	bhi.n	10046c20 <HAL_RADIO_TIMER_SetRadioTimerValue+0x168>
10046bfe:	d101      	bne.n	10046c04 <HAL_RADIO_TIMER_SetRadioTimerValue+0x14c>
10046c00:	4290      	cmp	r0, r2
10046c02:	d80d      	bhi.n	10046c20 <HAL_RADIO_TIMER_SetRadioTimerValue+0x168>
          && RADIO_TIMER_Context.rootNode->active)
10046c04:	4b0d      	ldr	r3, [pc, #52]	@ (10046c3c <HAL_RADIO_TIMER_SetRadioTimerValue+0x184>)
10046c06:	228c      	movs	r2, #140	@ 0x8c
10046c08:	589b      	ldr	r3, [r3, r2]
10046c0a:	7b1b      	ldrb	r3, [r3, #12]
10046c0c:	2b00      	cmp	r3, #0
10046c0e:	d007      	beq.n	10046c20 <HAL_RADIO_TIMER_SetRadioTimerValue+0x168>
      {
        /*The radio operation is before or too close the host timeout*/
        RADIO_TIMER_Context.hostIsRadioPending = 1;
10046c10:	4b0a      	ldr	r3, [pc, #40]	@ (10046c3c <HAL_RADIO_TIMER_SetRadioTimerValue+0x184>)
10046c12:	2295      	movs	r2, #149	@ 0x95
10046c14:	2101      	movs	r1, #1
10046c16:	5499      	strb	r1, [r3, r2]
      if ((RADIO_TIMER_Context.radioTimer.expiryTime >= RADIO_TIMER_Context.rootNode->expiryTime)
10046c18:	e002      	b.n	10046c20 <HAL_RADIO_TIMER_SetRadioTimerValue+0x168>
    else
    {
      /* If radio timer is not programmed, an emulated host timer is already programmed.
      Make sure radio errors are disabled.
      This call is not needed if radio errors are not enabled by the BLE stack. */
      _set_controller_as_host();
10046c1a:	f000 febd 	bl	10047998 <_set_controller_as_host>
10046c1e:	e000      	b.n	10046c22 <HAL_RADIO_TIMER_SetRadioTimerValue+0x16a>
      if ((RADIO_TIMER_Context.radioTimer.expiryTime >= RADIO_TIMER_Context.rootNode->expiryTime)
10046c20:	46c0      	nop			@ (mov r8, r8)
  }
#else
  _check_radio_activity(&RADIO_TIMER_Context.radioTimer, &retVal);
#endif

  _virtualTimeBaseEnable(ENABLE);
10046c22:	2001      	movs	r0, #1
10046c24:	f000 fc8e 	bl	10047544 <_virtualTimeBaseEnable>

  return retVal;
10046c28:	230f      	movs	r3, #15
10046c2a:	2208      	movs	r2, #8
10046c2c:	189b      	adds	r3, r3, r2
10046c2e:	19db      	adds	r3, r3, r7
10046c30:	781b      	ldrb	r3, [r3, #0]
}
10046c32:	0018      	movs	r0, r3
10046c34:	46bd      	mov	sp, r7
10046c36:	b009      	add	sp, #36	@ 0x24
10046c38:	bdf0      	pop	{r4, r5, r6, r7, pc}
10046c3a:	46c0      	nop			@ (mov r8, r8)
10046c3c:	20000598 	.word	0x20000598
10046c40:	200005f0 	.word	0x200005f0

10046c44 <HAL_RADIO_TIMER_GetRadioTimerValue>:
  * @retval 1 if Timer1 has been programmed.
  * @retval 2 if Timer2 has been programmed.
  * @retval 3 if Wakeup Timer has been programmed.
  */
uint8_t HAL_RADIO_TIMER_GetRadioTimerValue(uint32_t *time)
{
10046c44:	b580      	push	{r7, lr}
10046c46:	b082      	sub	sp, #8
10046c48:	af00      	add	r7, sp, #0
10046c4a:	6078      	str	r0, [r7, #4]
  return TIMER_GetRadioTimerValue(time);
10046c4c:	687b      	ldr	r3, [r7, #4]
10046c4e:	0018      	movs	r0, r3
10046c50:	f001 f812 	bl	10047c78 <TIMER_GetRadioTimerValue>
10046c54:	0003      	movs	r3, r0
}
10046c56:	0018      	movs	r0, r3
10046c58:	46bd      	mov	sp, r7
10046c5a:	b002      	add	sp, #8
10046c5c:	bd80      	pop	{r7, pc}

10046c5e <HAL_RADIO_TIMER_RadioTimerIsr>:
/**
  * @brief  Radio activity finished.
  * @retval None
  */
void HAL_RADIO_TIMER_RadioTimerIsr(void)
{
10046c5e:	b580      	push	{r7, lr}
10046c60:	af00      	add	r7, sp, #0
#if defined (STM32WB06) || defined (STM32WB07)
  if (!(LL_RADIO_TIMER_IsEnabledTimer1(BLUE) || LL_RADIO_TIMER_IsEnabledTimer2(BLUE)))
10046c62:	23c0      	movs	r3, #192	@ 0xc0
10046c64:	05db      	lsls	r3, r3, #23
10046c66:	0018      	movs	r0, r3
10046c68:	f7ff fac3 	bl	100461f2 <LL_RADIO_TIMER_IsEnabledTimer1>
10046c6c:	1e03      	subs	r3, r0, #0
10046c6e:	d108      	bne.n	10046c82 <HAL_RADIO_TIMER_RadioTimerIsr+0x24>
10046c70:	23c0      	movs	r3, #192	@ 0xc0
10046c72:	05db      	lsls	r3, r3, #23
10046c74:	0018      	movs	r0, r3
10046c76:	f7ff fadc 	bl	10046232 <LL_RADIO_TIMER_IsEnabledTimer2>
10046c7a:	1e03      	subs	r3, r0, #0
10046c7c:	d101      	bne.n	10046c82 <HAL_RADIO_TIMER_RadioTimerIsr+0x24>
  {
    _check_host_activity();
10046c7e:	f000 fea1 	bl	100479c4 <_check_host_activity>
  }
#endif
}
10046c82:	46c0      	nop			@ (mov r8, r8)
10046c84:	46bd      	mov	sp, r7
10046c86:	bd80      	pop	{r7, pc}

10046c88 <HAL_RADIO_TIMER_EndOfRadioActivityIsr>:
/**
  * @brief  Timer State machine semaphore to signal the radio activity finished.
  * @retval None
  */
void HAL_RADIO_TIMER_EndOfRadioActivityIsr(void)
{
10046c88:	b580      	push	{r7, lr}
10046c8a:	af00      	add	r7, sp, #0
  RADIO_TIMER_Context.radioTimer.intTxRx_to_be_served = FALSE;
10046c8c:	4b03      	ldr	r3, [pc, #12]	@ (10046c9c <HAL_RADIO_TIMER_EndOfRadioActivityIsr+0x14>)
10046c8e:	2263      	movs	r2, #99	@ 0x63
10046c90:	2100      	movs	r1, #0
10046c92:	5499      	strb	r1, [r3, r2]
}
10046c94:	46c0      	nop			@ (mov r8, r8)
10046c96:	46bd      	mov	sp, r7
10046c98:	bd80      	pop	{r7, pc}
10046c9a:	46c0      	nop			@ (mov r8, r8)
10046c9c:	20000598 	.word	0x20000598

10046ca0 <HAL_RADIO_TIMER_UsToSystime>:
  * @brief  Translate time in microseconds into sys time units.
  * @param  time: Microseconds to be converted in STU
  * @return STU value
  */
uint32_t HAL_RADIO_TIMER_UsToSystime(uint32_t time)
{
10046ca0:	b580      	push	{r7, lr}
10046ca2:	b082      	sub	sp, #8
10046ca4:	af00      	add	r7, sp, #0
10046ca6:	6078      	str	r0, [r7, #4]
  return _us_to_systime(time);
10046ca8:	687b      	ldr	r3, [r7, #4]
10046caa:	0018      	movs	r0, r3
10046cac:	f000 fa14 	bl	100470d8 <_us_to_systime>
10046cb0:	0003      	movs	r3, r0
}
10046cb2:	0018      	movs	r0, r3
10046cb4:	46bd      	mov	sp, r7
10046cb6:	b002      	add	sp, #8
10046cb8:	bd80      	pop	{r7, pc}
	...

10046cbc <HAL_RADIO_TIMER_MachineTimeToSysTime>:
  *          storing the system time. It should be called only in
  *          user context and not in interrupt context.
  * @return  STU value
  */
uint32_t HAL_RADIO_TIMER_MachineTimeToSysTime(uint32_t time)
{
10046cbc:	b580      	push	{r7, lr}
10046cbe:	b082      	sub	sp, #8
10046cc0:	af00      	add	r7, sp, #0
10046cc2:	6078      	str	r0, [r7, #4]
  return blue_unit_conversion(time, RADIO_TIMER_Context.calibrationData.period1, MULT64_THR_PERIOD);
10046cc4:	4b06      	ldr	r3, [pc, #24]	@ (10046ce0 <HAL_RADIO_TIMER_MachineTimeToSysTime+0x24>)
10046cc6:	69db      	ldr	r3, [r3, #28]
10046cc8:	0019      	movs	r1, r3
10046cca:	4a06      	ldr	r2, [pc, #24]	@ (10046ce4 <HAL_RADIO_TIMER_MachineTimeToSysTime+0x28>)
10046ccc:	687b      	ldr	r3, [r7, #4]
10046cce:	0018      	movs	r0, r3
10046cd0:	f7f9 f9f6 	bl	100400c0 <blue_unit_conversion>
10046cd4:	0003      	movs	r3, r0
}
10046cd6:	0018      	movs	r0, r3
10046cd8:	46bd      	mov	sp, r7
10046cda:	b002      	add	sp, #8
10046cdc:	bd80      	pop	{r7, pc}
10046cde:	46c0      	nop			@ (mov r8, r8)
10046ce0:	20000598 	.word	0x20000598
10046ce4:	00000635 	.word	0x00000635

10046ce8 <HAL_RADIO_TIMER_GetCurrentSysTime>:
  *         The returned value can be used as absolute time parameter where needed in the other
  *         HAL_RADIO_TIMER* APIs
  * @return absolute current time expressed in system time units.
  */
uint64_t HAL_RADIO_TIMER_GetCurrentSysTime(void)
{
10046ce8:	b580      	push	{r7, lr}
10046cea:	b082      	sub	sp, #8
10046cec:	af00      	add	r7, sp, #0
  uint32_t current_machine_time;
  return _get_system_time_and_machine(&RADIO_TIMER_Context, &current_machine_time);
10046cee:	1d3a      	adds	r2, r7, #4
10046cf0:	4b05      	ldr	r3, [pc, #20]	@ (10046d08 <HAL_RADIO_TIMER_GetCurrentSysTime+0x20>)
10046cf2:	0011      	movs	r1, r2
10046cf4:	0018      	movs	r0, r3
10046cf6:	f000 fad7 	bl	100472a8 <_get_system_time_and_machine>
10046cfa:	0002      	movs	r2, r0
10046cfc:	000b      	movs	r3, r1
}
10046cfe:	0010      	movs	r0, r2
10046d00:	0019      	movs	r1, r3
10046d02:	46bd      	mov	sp, r7
10046d04:	b002      	add	sp, #8
10046d06:	bd80      	pop	{r7, pc}
10046d08:	20000598 	.word	0x20000598

10046d0c <HAL_RADIO_TIMER_StopVirtualTimer>:
  * @brief  Stops the one-shot virtual timer specified if found
  * @param  timerHandle: The virtual timer
  * @retval None
  */
void HAL_RADIO_TIMER_StopVirtualTimer(VTIMER_HandleType *timerHandle)
{
10046d0c:	b590      	push	{r4, r7, lr}
10046d0e:	b089      	sub	sp, #36	@ 0x24
10046d10:	af00      	add	r7, sp, #0
10046d12:	6078      	str	r0, [r7, #4]
  VTIMER_HandleType *rootNode = _remove_timer_in_queue(RADIO_TIMER_Context.rootNode, timerHandle);
10046d14:	4b28      	ldr	r3, [pc, #160]	@ (10046db8 <HAL_RADIO_TIMER_StopVirtualTimer+0xac>)
10046d16:	228c      	movs	r2, #140	@ 0x8c
10046d18:	589b      	ldr	r3, [r3, r2]
10046d1a:	687a      	ldr	r2, [r7, #4]
10046d1c:	0011      	movs	r1, r2
10046d1e:	0018      	movs	r0, r3
10046d20:	f000 fc3c 	bl	1004759c <_remove_timer_in_queue>
10046d24:	0003      	movs	r3, r0
10046d26:	61fb      	str	r3, [r7, #28]
  uint8_t expired = 0;
10046d28:	210f      	movs	r1, #15
10046d2a:	187b      	adds	r3, r7, r1
10046d2c:	2200      	movs	r2, #0
10046d2e:	701a      	strb	r2, [r3, #0]
  timerHandle->active = FALSE;
10046d30:	687b      	ldr	r3, [r7, #4]
10046d32:	2200      	movs	r2, #0
10046d34:	731a      	strb	r2, [r3, #12]
  if (RADIO_TIMER_Context.rootNode != rootNode)
10046d36:	4b20      	ldr	r3, [pc, #128]	@ (10046db8 <HAL_RADIO_TIMER_StopVirtualTimer+0xac>)
10046d38:	228c      	movs	r2, #140	@ 0x8c
10046d3a:	589b      	ldr	r3, [r3, r2]
10046d3c:	69fa      	ldr	r2, [r7, #28]
10046d3e:	429a      	cmp	r2, r3
10046d40:	d031      	beq.n	10046da6 <HAL_RADIO_TIMER_StopVirtualTimer+0x9a>
  {
    RADIO_TIMER_Context.rootNode = _update_user_timeout(rootNode, &expired);
10046d42:	000c      	movs	r4, r1
10046d44:	187a      	adds	r2, r7, r1
10046d46:	69fb      	ldr	r3, [r7, #28]
10046d48:	0011      	movs	r1, r2
10046d4a:	0018      	movs	r0, r3
10046d4c:	f000 fb14 	bl	10047378 <_update_user_timeout>
10046d50:	0002      	movs	r2, r0
10046d52:	4b19      	ldr	r3, [pc, #100]	@ (10046db8 <HAL_RADIO_TIMER_StopVirtualTimer+0xac>)
10046d54:	218c      	movs	r1, #140	@ 0x8c
10046d56:	505a      	str	r2, [r3, r1]
    if (expired)
10046d58:	193b      	adds	r3, r7, r4
10046d5a:	781b      	ldrb	r3, [r3, #0]
10046d5c:	2b00      	cmp	r3, #0
10046d5e:	d026      	beq.n	10046dae <HAL_RADIO_TIMER_StopVirtualTimer+0xa2>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
10046d60:	f3ef 8310 	mrs	r3, PRIMASK
10046d64:	617b      	str	r3, [r7, #20]
  return(result);
10046d66:	697b      	ldr	r3, [r7, #20]
    {
      /* A new root timer is already expired, mimic timer expire */
      INCREMENT_EXPIRE_COUNT;
10046d68:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("cpsid i" : : : "memory");
10046d6a:	b672      	cpsid	i
}
10046d6c:	46c0      	nop			@ (mov r8, r8)
10046d6e:	4b12      	ldr	r3, [pc, #72]	@ (10046db8 <HAL_RADIO_TIMER_StopVirtualTimer+0xac>)
10046d70:	2291      	movs	r2, #145	@ 0x91
10046d72:	5c9b      	ldrb	r3, [r3, r2]
10046d74:	3301      	adds	r3, #1
10046d76:	4a10      	ldr	r2, [pc, #64]	@ (10046db8 <HAL_RADIO_TIMER_StopVirtualTimer+0xac>)
10046d78:	2192      	movs	r1, #146	@ 0x92
10046d7a:	5c52      	ldrb	r2, [r2, r1]
10046d7c:	4293      	cmp	r3, r2
10046d7e:	d103      	bne.n	10046d88 <HAL_RADIO_TIMER_StopVirtualTimer+0x7c>
10046d80:	4b0d      	ldr	r3, [pc, #52]	@ (10046db8 <HAL_RADIO_TIMER_StopVirtualTimer+0xac>)
10046d82:	2291      	movs	r2, #145	@ 0x91
10046d84:	5c9b      	ldrb	r3, [r3, r2]
10046d86:	e004      	b.n	10046d92 <HAL_RADIO_TIMER_StopVirtualTimer+0x86>
10046d88:	4b0b      	ldr	r3, [pc, #44]	@ (10046db8 <HAL_RADIO_TIMER_StopVirtualTimer+0xac>)
10046d8a:	2291      	movs	r2, #145	@ 0x91
10046d8c:	5c9b      	ldrb	r3, [r3, r2]
10046d8e:	3301      	adds	r3, #1
10046d90:	b2db      	uxtb	r3, r3
10046d92:	4a09      	ldr	r2, [pc, #36]	@ (10046db8 <HAL_RADIO_TIMER_StopVirtualTimer+0xac>)
10046d94:	2191      	movs	r1, #145	@ 0x91
10046d96:	5453      	strb	r3, [r2, r1]
10046d98:	69bb      	ldr	r3, [r7, #24]
10046d9a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
10046d9c:	693b      	ldr	r3, [r7, #16]
10046d9e:	f383 8810 	msr	PRIMASK, r3
}
10046da2:	46c0      	nop			@ (mov r8, r8)
  }
  else
  {
    RADIO_TIMER_Context.rootNode = rootNode;
  }
}
10046da4:	e003      	b.n	10046dae <HAL_RADIO_TIMER_StopVirtualTimer+0xa2>
    RADIO_TIMER_Context.rootNode = rootNode;
10046da6:	4b04      	ldr	r3, [pc, #16]	@ (10046db8 <HAL_RADIO_TIMER_StopVirtualTimer+0xac>)
10046da8:	218c      	movs	r1, #140	@ 0x8c
10046daa:	69fa      	ldr	r2, [r7, #28]
10046dac:	505a      	str	r2, [r3, r1]
}
10046dae:	46c0      	nop			@ (mov r8, r8)
10046db0:	46bd      	mov	sp, r7
10046db2:	b009      	add	sp, #36	@ 0x24
10046db4:	bd90      	pop	{r4, r7, pc}
10046db6:	46c0      	nop			@ (mov r8, r8)
10046db8:	20000598 	.word	0x20000598

10046dbc <HAL_RADIO_TIMER_WakeUpCallback>:
  * @brief   If the wakeup timer triggers for a host wakeup, a pending radio activity is programmed.
  *          If the wakeup timer triggers for a radio activity, a pending virtual timer callback is executed.
  * @retval  None
  */
void HAL_RADIO_TIMER_WakeUpCallback(void)
{
10046dbc:	b580      	push	{r7, lr}
10046dbe:	b082      	sub	sp, #8
10046dc0:	af00      	add	r7, sp, #0
  volatile uint32_t status = 0;
10046dc2:	2300      	movs	r3, #0
10046dc4:	607b      	str	r3, [r7, #4]
  uint8_t expired;
  UNUSED(status);
10046dc6:	687b      	ldr	r3, [r7, #4]
  _check_radio_activity(&RADIO_TIMER_Context.radioTimer, &expired);
10046dc8:	1cfa      	adds	r2, r7, #3
10046dca:	4b0f      	ldr	r3, [pc, #60]	@ (10046e08 <HAL_RADIO_TIMER_WakeUpCallback+0x4c>)
10046dcc:	0011      	movs	r1, r2
10046dce:	0018      	movs	r0, r3
10046dd0:	f000 fcee 	bl	100477b0 <_check_radio_activity>
  if (RADIO_TIMER_Context.hostIsRadioPending)
10046dd4:	4b0d      	ldr	r3, [pc, #52]	@ (10046e0c <HAL_RADIO_TIMER_WakeUpCallback+0x50>)
10046dd6:	2295      	movs	r2, #149	@ 0x95
10046dd8:	5c9b      	ldrb	r3, [r3, r2]
10046dda:	2b00      	cmp	r3, #0
10046ddc:	d005      	beq.n	10046dea <HAL_RADIO_TIMER_WakeUpCallback+0x2e>
  {
    RADIO_TIMER_Context.hostIsRadioPending = 0;
10046dde:	4b0b      	ldr	r3, [pc, #44]	@ (10046e0c <HAL_RADIO_TIMER_WakeUpCallback+0x50>)
10046de0:	2295      	movs	r2, #149	@ 0x95
10046de2:	2100      	movs	r1, #0
10046de4:	5499      	strb	r1, [r3, r2]
    HAL_RADIO_TIMER_TimeoutCallback();
10046de6:	f000 f815 	bl	10046e14 <HAL_RADIO_TIMER_TimeoutCallback>
  }

  LL_RADIO_TIMER_ClearFlag_BLEWakeup(WAKEUP);
10046dea:	4b09      	ldr	r3, [pc, #36]	@ (10046e10 <HAL_RADIO_TIMER_WakeUpCallback+0x54>)
10046dec:	0018      	movs	r0, r3
10046dee:	f7ff fb1b 	bl	10046428 <LL_RADIO_TIMER_ClearFlag_BLEWakeup>
  status = LL_RADIO_TIMER_IsActiveFlag_BLEWakeup(WAKEUP);
10046df2:	4b07      	ldr	r3, [pc, #28]	@ (10046e10 <HAL_RADIO_TIMER_WakeUpCallback+0x54>)
10046df4:	0018      	movs	r0, r3
10046df6:	f7ff fb25 	bl	10046444 <LL_RADIO_TIMER_IsActiveFlag_BLEWakeup>
10046dfa:	0003      	movs	r3, r0
10046dfc:	607b      	str	r3, [r7, #4]
}
10046dfe:	46c0      	nop			@ (mov r8, r8)
10046e00:	46bd      	mov	sp, r7
10046e02:	b002      	add	sp, #8
10046e04:	bd80      	pop	{r7, pc}
10046e06:	46c0      	nop			@ (mov r8, r8)
10046e08:	200005f0 	.word	0x200005f0
10046e0c:	20000598 	.word	0x20000598
10046e10:	60001800 	.word	0x60001800

10046e14 <HAL_RADIO_TIMER_TimeoutCallback>:
/**
  * @brief  Virtual timer Timeout Callback. It signals that a host timeout occurred.
  * @retval None
  */
void HAL_RADIO_TIMER_TimeoutCallback(void)
{
10046e14:	b580      	push	{r7, lr}
10046e16:	b082      	sub	sp, #8
10046e18:	af00      	add	r7, sp, #0
  volatile uint32_t status = 0;
10046e1a:	2300      	movs	r3, #0
10046e1c:	607b      	str	r3, [r7, #4]
  UNUSED(status);
10046e1e:	687b      	ldr	r3, [r7, #4]
#if defined (STM32WB06) || defined (STM32WB07)
  RADIO_TIMER_Context.hostIsRadioPending = 0;
10046e20:	4b15      	ldr	r3, [pc, #84]	@ (10046e78 <HAL_RADIO_TIMER_TimeoutCallback+0x64>)
10046e22:	2295      	movs	r2, #149	@ 0x95
10046e24:	2100      	movs	r1, #0
10046e26:	5499      	strb	r1, [r3, r2]
#endif

  /* Disable host timer */
  LL_RADIO_TIMER_DisableCPUWakeupTimer(WAKEUP);
10046e28:	4b14      	ldr	r3, [pc, #80]	@ (10046e7c <HAL_RADIO_TIMER_TimeoutCallback+0x68>)
10046e2a:	0018      	movs	r0, r3
10046e2c:	f7ff fa6c 	bl	10046308 <LL_RADIO_TIMER_DisableCPUWakeupTimer>
  INCREMENT_EXPIRE_COUNT_ISR;
10046e30:	4b11      	ldr	r3, [pc, #68]	@ (10046e78 <HAL_RADIO_TIMER_TimeoutCallback+0x64>)
10046e32:	2291      	movs	r2, #145	@ 0x91
10046e34:	5c9b      	ldrb	r3, [r3, r2]
10046e36:	3301      	adds	r3, #1
10046e38:	4a0f      	ldr	r2, [pc, #60]	@ (10046e78 <HAL_RADIO_TIMER_TimeoutCallback+0x64>)
10046e3a:	2192      	movs	r1, #146	@ 0x92
10046e3c:	5c52      	ldrb	r2, [r2, r1]
10046e3e:	4293      	cmp	r3, r2
10046e40:	d103      	bne.n	10046e4a <HAL_RADIO_TIMER_TimeoutCallback+0x36>
10046e42:	4b0d      	ldr	r3, [pc, #52]	@ (10046e78 <HAL_RADIO_TIMER_TimeoutCallback+0x64>)
10046e44:	2291      	movs	r2, #145	@ 0x91
10046e46:	5c9b      	ldrb	r3, [r3, r2]
10046e48:	e004      	b.n	10046e54 <HAL_RADIO_TIMER_TimeoutCallback+0x40>
10046e4a:	4b0b      	ldr	r3, [pc, #44]	@ (10046e78 <HAL_RADIO_TIMER_TimeoutCallback+0x64>)
10046e4c:	2291      	movs	r2, #145	@ 0x91
10046e4e:	5c9b      	ldrb	r3, [r3, r2]
10046e50:	3301      	adds	r3, #1
10046e52:	b2db      	uxtb	r3, r3
10046e54:	4a08      	ldr	r2, [pc, #32]	@ (10046e78 <HAL_RADIO_TIMER_TimeoutCallback+0x64>)
10046e56:	2191      	movs	r1, #145	@ 0x91
10046e58:	5453      	strb	r3, [r2, r1]
  /* Clear the interrupt */
  LL_RADIO_TIMER_ClearFlag_CPUWakeup(WAKEUP);
10046e5a:	4b08      	ldr	r3, [pc, #32]	@ (10046e7c <HAL_RADIO_TIMER_TimeoutCallback+0x68>)
10046e5c:	0018      	movs	r0, r3
10046e5e:	f7ff fb02 	bl	10046466 <LL_RADIO_TIMER_ClearFlag_CPUWakeup>
  status = LL_RADIO_TIMER_IsActiveFlag_CPUWakeup(WAKEUP);
10046e62:	4b06      	ldr	r3, [pc, #24]	@ (10046e7c <HAL_RADIO_TIMER_TimeoutCallback+0x68>)
10046e64:	0018      	movs	r0, r3
10046e66:	f7ff fb0c 	bl	10046482 <LL_RADIO_TIMER_IsActiveFlag_CPUWakeup>
10046e6a:	0003      	movs	r3, r0
10046e6c:	607b      	str	r3, [r7, #4]
}
10046e6e:	46c0      	nop			@ (mov r8, r8)
10046e70:	46bd      	mov	sp, r7
10046e72:	b002      	add	sp, #8
10046e74:	bd80      	pop	{r7, pc}
10046e76:	46c0      	nop			@ (mov r8, r8)
10046e78:	20000598 	.word	0x20000598
10046e7c:	60001800 	.word	0x60001800

10046e80 <_calibrationProcedure>:
/** @defgroup RADIO_TIMER_Private_Functions  RADIO TIMER Private Functions
  * @{
  */

static void _calibrationProcedure(void)
{
10046e80:	b580      	push	{r7, lr}
10046e82:	af00      	add	r7, sp, #0
  /* Make sure any pending calibration is over */
  while (LL_RADIO_TIMER_IsActiveFlag_LSICalibrationEnded(RADIO_CTRL) == 0);
10046e84:	46c0      	nop			@ (mov r8, r8)
10046e86:	4b0b      	ldr	r3, [pc, #44]	@ (10046eb4 <_calibrationProcedure+0x34>)
10046e88:	0018      	movs	r0, r3
10046e8a:	f7ff fb44 	bl	10046516 <LL_RADIO_TIMER_IsActiveFlag_LSICalibrationEnded>
10046e8e:	1e03      	subs	r3, r0, #0
10046e90:	d0f9      	beq.n	10046e86 <_calibrationProcedure+0x6>

  /* Set SLOW_COUNT to 23, that is calibrate over 24 clock periods, this number
  cannot be changed without changing all the integer maths function in the
  file  */
  LL_RADIO_TIMER_SetLSIWindowCalibrationLength(RADIO_CTRL, 23);
10046e92:	4b08      	ldr	r3, [pc, #32]	@ (10046eb4 <_calibrationProcedure+0x34>)
10046e94:	2117      	movs	r1, #23
10046e96:	0018      	movs	r0, r3
10046e98:	f7ff fb04 	bl	100464a4 <LL_RADIO_TIMER_SetLSIWindowCalibrationLength>

  /* Start a calibration and take the correct freq */
  _timer_calibrate(&RADIO_TIMER_Context.calibrationData);
10046e9c:	4b06      	ldr	r3, [pc, #24]	@ (10046eb8 <_calibrationProcedure+0x38>)
10046e9e:	0018      	movs	r0, r3
10046ea0:	f000 f81e 	bl	10046ee0 <_timer_calibrate>
  /* For first time set last to current */
  RADIO_TIMER_Context.calibrationData.last_period1 = RADIO_TIMER_Context.calibrationData.period1;
10046ea4:	4b05      	ldr	r3, [pc, #20]	@ (10046ebc <_calibrationProcedure+0x3c>)
10046ea6:	69da      	ldr	r2, [r3, #28]
10046ea8:	4b04      	ldr	r3, [pc, #16]	@ (10046ebc <_calibrationProcedure+0x3c>)
10046eaa:	621a      	str	r2, [r3, #32]

}
10046eac:	46c0      	nop			@ (mov r8, r8)
10046eae:	46bd      	mov	sp, r7
10046eb0:	bd80      	pop	{r7, pc}
10046eb2:	46c0      	nop			@ (mov r8, r8)
10046eb4:	60001000 	.word	0x60001000
10046eb8:	200005a8 	.word	0x200005a8
10046ebc:	20000598 	.word	0x20000598

10046ec0 <_timer_start_calibration>:

static void _timer_start_calibration(void)
{
10046ec0:	b580      	push	{r7, lr}
10046ec2:	af00      	add	r7, sp, #0
  /* Clear any pending interrupt */
  LL_RADIO_TIMER_ClearFlag_LSICalibrationEnded(RADIO_CTRL);
10046ec4:	4b05      	ldr	r3, [pc, #20]	@ (10046edc <_timer_start_calibration+0x1c>)
10046ec6:	0018      	movs	r0, r3
10046ec8:	f7ff fb17 	bl	100464fa <LL_RADIO_TIMER_ClearFlag_LSICalibrationEnded>
  /* Start calibration */
  LL_RADIO_TIMER_StartLSICalibration(RADIO_CTRL);
10046ecc:	4b03      	ldr	r3, [pc, #12]	@ (10046edc <_timer_start_calibration+0x1c>)
10046ece:	0018      	movs	r0, r3
10046ed0:	f7ff faf4 	bl	100464bc <LL_RADIO_TIMER_StartLSICalibration>
}
10046ed4:	46c0      	nop			@ (mov r8, r8)
10046ed6:	46bd      	mov	sp, r7
10046ed8:	bd80      	pop	{r7, pc}
10046eda:	46c0      	nop			@ (mov r8, r8)
10046edc:	60001000 	.word	0x60001000

10046ee0 <_timer_calibrate>:

static void _timer_calibrate(CalibrationDataTypeDef *calibrationData)
{
10046ee0:	b580      	push	{r7, lr}
10046ee2:	b082      	sub	sp, #8
10046ee4:	af00      	add	r7, sp, #0
10046ee6:	6078      	str	r0, [r7, #4]
  _timer_start_calibration();
10046ee8:	f7ff ffea 	bl	10046ec0 <_timer_start_calibration>
  while (LL_RADIO_TIMER_IsActiveFlag_LSICalibrationEnded(RADIO_CTRL) == 0);
10046eec:	46c0      	nop			@ (mov r8, r8)
10046eee:	4b07      	ldr	r3, [pc, #28]	@ (10046f0c <_timer_calibrate+0x2c>)
10046ef0:	0018      	movs	r0, r3
10046ef2:	f7ff fb10 	bl	10046516 <LL_RADIO_TIMER_IsActiveFlag_LSICalibrationEnded>
10046ef6:	1e03      	subs	r3, r0, #0
10046ef8:	d0f9      	beq.n	10046eee <_timer_calibrate+0xe>
  _get_calibration_data(calibrationData);
10046efa:	687b      	ldr	r3, [r7, #4]
10046efc:	0018      	movs	r0, r3
10046efe:	f000 f807 	bl	10046f10 <_get_calibration_data>
}
10046f02:	46c0      	nop			@ (mov r8, r8)
10046f04:	46bd      	mov	sp, r7
10046f06:	b002      	add	sp, #8
10046f08:	bd80      	pop	{r7, pc}
10046f0a:	46c0      	nop			@ (mov r8, r8)
10046f0c:	60001000 	.word	0x60001000

10046f10 <_get_calibration_data>:

static void _get_calibration_data(CalibrationDataTypeDef *calibrationData)
{
10046f10:	b580      	push	{r7, lr}
10046f12:	b08a      	sub	sp, #40	@ 0x28
10046f14:	af00      	add	r7, sp, #0
10046f16:	6078      	str	r0, [r7, #4]
  int32_t b2;
  int32_t mult;
  int32_t a1;
  int32_t a2;

  period =  LL_RADIO_TIMER_GetLSIPeriod(RADIO_CTRL);
10046f18:	4b2e      	ldr	r3, [pc, #184]	@ (10046fd4 <_get_calibration_data+0xc4>)
10046f1a:	0018      	movs	r0, r3
10046f1c:	f7ff fad9 	bl	100464d2 <LL_RADIO_TIMER_GetLSIPeriod>
10046f20:	0003      	movs	r3, r0
10046f22:	627b      	str	r3, [r7, #36]	@ 0x24
  while (period != LL_RADIO_TIMER_GetLSIPeriod(RADIO_CTRL) || period == 0)
10046f24:	e005      	b.n	10046f32 <_get_calibration_data+0x22>
  {
    period = LL_RADIO_TIMER_GetLSIPeriod(RADIO_CTRL);
10046f26:	4b2b      	ldr	r3, [pc, #172]	@ (10046fd4 <_get_calibration_data+0xc4>)
10046f28:	0018      	movs	r0, r3
10046f2a:	f7ff fad2 	bl	100464d2 <LL_RADIO_TIMER_GetLSIPeriod>
10046f2e:	0003      	movs	r3, r0
10046f30:	627b      	str	r3, [r7, #36]	@ 0x24
  while (period != LL_RADIO_TIMER_GetLSIPeriod(RADIO_CTRL) || period == 0)
10046f32:	4b28      	ldr	r3, [pc, #160]	@ (10046fd4 <_get_calibration_data+0xc4>)
10046f34:	0018      	movs	r0, r3
10046f36:	f7ff facc 	bl	100464d2 <LL_RADIO_TIMER_GetLSIPeriod>
10046f3a:	0002      	movs	r2, r0
10046f3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10046f3e:	429a      	cmp	r2, r3
10046f40:	d1f1      	bne.n	10046f26 <_get_calibration_data+0x16>
10046f42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10046f44:	2b00      	cmp	r3, #0
10046f46:	d0ee      	beq.n	10046f26 <_get_calibration_data+0x16>
  }

  mul1 = 0x8BCF6 ;
10046f48:	4b23      	ldr	r3, [pc, #140]	@ (10046fd8 <_get_calibration_data+0xc8>)
10046f4a:	61fb      	str	r3, [r7, #28]
  b1 = period >> 8 ;
10046f4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10046f4e:	121b      	asrs	r3, r3, #8
10046f50:	61bb      	str	r3, [r7, #24]
  b2 = period & 0xff ;
10046f52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10046f54:	22ff      	movs	r2, #255	@ 0xff
10046f56:	4013      	ands	r3, r2
10046f58:	617b      	str	r3, [r7, #20]
  calibrationData->period1 = ((mul1 * b1) + ((b2 * mul1) >> 8) + 16) >> 5;
10046f5a:	69fb      	ldr	r3, [r7, #28]
10046f5c:	69ba      	ldr	r2, [r7, #24]
10046f5e:	435a      	muls	r2, r3
10046f60:	697b      	ldr	r3, [r7, #20]
10046f62:	69f9      	ldr	r1, [r7, #28]
10046f64:	434b      	muls	r3, r1
10046f66:	121b      	asrs	r3, r3, #8
10046f68:	18d3      	adds	r3, r2, r3
10046f6a:	3310      	adds	r3, #16
10046f6c:	115a      	asrs	r2, r3, #5
10046f6e:	687b      	ldr	r3, [r7, #4]
10046f70:	60da      	str	r2, [r3, #12]
  calibrationData->period = period;
10046f72:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
10046f74:	687b      	ldr	r3, [r7, #4]
10046f76:	601a      	str	r2, [r3, #0]

  mult = 0x753 ;
10046f78:	4b18      	ldr	r3, [pc, #96]	@ (10046fdc <_get_calibration_data+0xcc>)
10046f7a:	613b      	str	r3, [r7, #16]
  freq = LL_RADIO_TIMER_GetLSIFrequency(RADIO_CTRL);
10046f7c:	4b15      	ldr	r3, [pc, #84]	@ (10046fd4 <_get_calibration_data+0xc4>)
10046f7e:	0018      	movs	r0, r3
10046f80:	f7ff fab1 	bl	100464e6 <LL_RADIO_TIMER_GetLSIFrequency>
10046f84:	0003      	movs	r3, r0
10046f86:	623b      	str	r3, [r7, #32]

  while (freq != LL_RADIO_TIMER_GetLSIFrequency(RADIO_CTRL) || freq == 0)
10046f88:	e005      	b.n	10046f96 <_get_calibration_data+0x86>
  {
    freq = LL_RADIO_TIMER_GetLSIFrequency(RADIO_CTRL);
10046f8a:	4b12      	ldr	r3, [pc, #72]	@ (10046fd4 <_get_calibration_data+0xc4>)
10046f8c:	0018      	movs	r0, r3
10046f8e:	f7ff faaa 	bl	100464e6 <LL_RADIO_TIMER_GetLSIFrequency>
10046f92:	0003      	movs	r3, r0
10046f94:	623b      	str	r3, [r7, #32]
  while (freq != LL_RADIO_TIMER_GetLSIFrequency(RADIO_CTRL) || freq == 0)
10046f96:	4b0f      	ldr	r3, [pc, #60]	@ (10046fd4 <_get_calibration_data+0xc4>)
10046f98:	0018      	movs	r0, r3
10046f9a:	f7ff faa4 	bl	100464e6 <LL_RADIO_TIMER_GetLSIFrequency>
10046f9e:	0002      	movs	r2, r0
10046fa0:	6a3b      	ldr	r3, [r7, #32]
10046fa2:	429a      	cmp	r2, r3
10046fa4:	d1f1      	bne.n	10046f8a <_get_calibration_data+0x7a>
10046fa6:	6a3b      	ldr	r3, [r7, #32]
10046fa8:	2b00      	cmp	r3, #0
10046faa:	d0ee      	beq.n	10046f8a <_get_calibration_data+0x7a>
  }
  a1 = freq >> 6 ;
10046fac:	6a3b      	ldr	r3, [r7, #32]
10046fae:	119b      	asrs	r3, r3, #6
10046fb0:	60fb      	str	r3, [r7, #12]
  a2 = a1 * mult ;
10046fb2:	68fb      	ldr	r3, [r7, #12]
10046fb4:	693a      	ldr	r2, [r7, #16]
10046fb6:	4353      	muls	r3, r2
10046fb8:	60bb      	str	r3, [r7, #8]
  calibrationData->freq1 = (a2 + 128) >> 8 ;
10046fba:	68bb      	ldr	r3, [r7, #8]
10046fbc:	3380      	adds	r3, #128	@ 0x80
10046fbe:	121a      	asrs	r2, r3, #8
10046fc0:	687b      	ldr	r3, [r7, #4]
10046fc2:	609a      	str	r2, [r3, #8]
  calibrationData->freq = freq;
10046fc4:	6a3a      	ldr	r2, [r7, #32]
10046fc6:	687b      	ldr	r3, [r7, #4]
10046fc8:	605a      	str	r2, [r3, #4]
}
10046fca:	46c0      	nop			@ (mov r8, r8)
10046fcc:	46bd      	mov	sp, r7
10046fce:	b00a      	add	sp, #40	@ 0x28
10046fd0:	bd80      	pop	{r7, pc}
10046fd2:	46c0      	nop			@ (mov r8, r8)
10046fd4:	60001000 	.word	0x60001000
10046fd8:	0008bcf6 	.word	0x0008bcf6
10046fdc:	00000753 	.word	0x00000753

10046fe0 <_configureTxRxDelay>:

static void _configureTxRxDelay(RADIO_TIMER_ContextTypeDef *context, uint8_t calculate_st)
{
10046fe0:	b590      	push	{r4, r7, lr}
10046fe2:	b085      	sub	sp, #20
10046fe4:	af00      	add	r7, sp, #0
10046fe6:	6078      	str	r0, [r7, #4]
10046fe8:	000a      	movs	r2, r1
10046fea:	1cfb      	adds	r3, r7, #3
10046fec:	701a      	strb	r2, [r3, #0]
  uint8_t tx_delay_start;

  tx_delay_start = (BLUEGLOB->TXDELAYSTART * 125 / 1000) + 1;
10046fee:	4b38      	ldr	r3, [pc, #224]	@ (100470d0 <_configureTxRxDelay+0xf0>)
10046ff0:	7b9b      	ldrb	r3, [r3, #14]
10046ff2:	b2db      	uxtb	r3, r3
10046ff4:	2b00      	cmp	r3, #0
10046ff6:	da00      	bge.n	10046ffa <_configureTxRxDelay+0x1a>
10046ff8:	3307      	adds	r3, #7
10046ffa:	10db      	asrs	r3, r3, #3
10046ffc:	b2da      	uxtb	r2, r3
10046ffe:	240f      	movs	r4, #15
10047000:	193b      	adds	r3, r7, r4
10047002:	3201      	adds	r2, #1
10047004:	701a      	strb	r2, [r3, #0]

  BLUEGLOB->WAKEUPINITDELAY =  blue_unit_conversion(WAKEUP_INIT_DELAY, context->calibrationData.freq1, MULT64_THR_FREQ);
10047006:	687b      	ldr	r3, [r7, #4]
10047008:	699b      	ldr	r3, [r3, #24]
1004700a:	0019      	movs	r1, r3
1004700c:	4b31      	ldr	r3, [pc, #196]	@ (100470d4 <_configureTxRxDelay+0xf4>)
1004700e:	001a      	movs	r2, r3
10047010:	201b      	movs	r0, #27
10047012:	f7f9 f855 	bl	100400c0 <blue_unit_conversion>
10047016:	0002      	movs	r2, r0
10047018:	4b2d      	ldr	r3, [pc, #180]	@ (100470d0 <_configureTxRxDelay+0xf0>)
1004701a:	b2d2      	uxtb	r2, r2
1004701c:	715a      	strb	r2, [r3, #5]
  context->TxRxDelay.tim12_delay_mt = _us_to_machinetime(BLUEGLOB->TIMER12INITDELAYCAL);
1004701e:	4b2c      	ldr	r3, [pc, #176]	@ (100470d0 <_configureTxRxDelay+0xf0>)
10047020:	799b      	ldrb	r3, [r3, #6]
10047022:	b2db      	uxtb	r3, r3
10047024:	0018      	movs	r0, r3
10047026:	f000 f86d 	bl	10047104 <_us_to_machinetime>
1004702a:	0003      	movs	r3, r0
1004702c:	b2d9      	uxtb	r1, r3
1004702e:	687b      	ldr	r3, [r7, #4]
10047030:	223d      	movs	r2, #61	@ 0x3d
10047032:	5499      	strb	r1, [r3, r2]
  context->TxRxDelay.tx_cal_delay = _us_to_machinetime(BLUEGLOB->TRANSMITCALDELAYCHK + tx_delay_start);
10047034:	4b26      	ldr	r3, [pc, #152]	@ (100470d0 <_configureTxRxDelay+0xf0>)
10047036:	7a1b      	ldrb	r3, [r3, #8]
10047038:	b2db      	uxtb	r3, r3
1004703a:	001a      	movs	r2, r3
1004703c:	193b      	adds	r3, r7, r4
1004703e:	781b      	ldrb	r3, [r3, #0]
10047040:	18d3      	adds	r3, r2, r3
10047042:	0018      	movs	r0, r3
10047044:	f000 f85e 	bl	10047104 <_us_to_machinetime>
10047048:	0003      	movs	r3, r0
1004704a:	b2d9      	uxtb	r1, r3
1004704c:	687b      	ldr	r3, [r7, #4]
1004704e:	2238      	movs	r2, #56	@ 0x38
10047050:	5499      	strb	r1, [r3, r2]
  context->TxRxDelay.tx_no_cal_delay = _us_to_machinetime(BLUEGLOB->TRANSMITNOCALDELAYCHK + tx_delay_start);
10047052:	4b1f      	ldr	r3, [pc, #124]	@ (100470d0 <_configureTxRxDelay+0xf0>)
10047054:	7a5b      	ldrb	r3, [r3, #9]
10047056:	b2db      	uxtb	r3, r3
10047058:	001a      	movs	r2, r3
1004705a:	193b      	adds	r3, r7, r4
1004705c:	781b      	ldrb	r3, [r3, #0]
1004705e:	18d3      	adds	r3, r2, r3
10047060:	0018      	movs	r0, r3
10047062:	f000 f84f 	bl	10047104 <_us_to_machinetime>
10047066:	0003      	movs	r3, r0
10047068:	b2d9      	uxtb	r1, r3
1004706a:	687b      	ldr	r3, [r7, #4]
1004706c:	2239      	movs	r2, #57	@ 0x39
1004706e:	5499      	strb	r1, [r3, r2]
  context->TxRxDelay.rx_cal_delay = _us_to_machinetime(BLUEGLOB->RECEIVECALDELAYCHK);
10047070:	4b17      	ldr	r3, [pc, #92]	@ (100470d0 <_configureTxRxDelay+0xf0>)
10047072:	7a9b      	ldrb	r3, [r3, #10]
10047074:	b2db      	uxtb	r3, r3
10047076:	0018      	movs	r0, r3
10047078:	f000 f844 	bl	10047104 <_us_to_machinetime>
1004707c:	0003      	movs	r3, r0
1004707e:	b2d9      	uxtb	r1, r3
10047080:	687b      	ldr	r3, [r7, #4]
10047082:	223a      	movs	r2, #58	@ 0x3a
10047084:	5499      	strb	r1, [r3, r2]
  context->TxRxDelay.rx_no_cal_delay = _us_to_machinetime(BLUEGLOB->RECEIVENOCALDELAYCHK);
10047086:	4b12      	ldr	r3, [pc, #72]	@ (100470d0 <_configureTxRxDelay+0xf0>)
10047088:	7adb      	ldrb	r3, [r3, #11]
1004708a:	b2db      	uxtb	r3, r3
1004708c:	0018      	movs	r0, r3
1004708e:	f000 f839 	bl	10047104 <_us_to_machinetime>
10047092:	0003      	movs	r3, r0
10047094:	b2d9      	uxtb	r1, r3
10047096:	687b      	ldr	r3, [r7, #4]
10047098:	223b      	movs	r2, #59	@ 0x3b
1004709a:	5499      	strb	r1, [r3, r2]

  if (calculate_st)
1004709c:	1cfb      	adds	r3, r7, #3
1004709e:	781b      	ldrb	r3, [r3, #0]
100470a0:	2b00      	cmp	r3, #0
100470a2:	d010      	beq.n	100470c6 <_configureTxRxDelay+0xe6>
  {
    context->TxRxDelay.tx_cal_delay_st    = _us_to_systime(BLUEGLOB->TRANSMITCALDELAYCHK + tx_delay_start) + WAKEUP_INIT_DELAY;
100470a4:	4b0a      	ldr	r3, [pc, #40]	@ (100470d0 <_configureTxRxDelay+0xf0>)
100470a6:	7a1b      	ldrb	r3, [r3, #8]
100470a8:	b2db      	uxtb	r3, r3
100470aa:	001a      	movs	r2, r3
100470ac:	193b      	adds	r3, r7, r4
100470ae:	781b      	ldrb	r3, [r3, #0]
100470b0:	18d3      	adds	r3, r2, r3
100470b2:	0018      	movs	r0, r3
100470b4:	f000 f810 	bl	100470d8 <_us_to_systime>
100470b8:	0003      	movs	r3, r0
100470ba:	b2db      	uxtb	r3, r3
100470bc:	331b      	adds	r3, #27
100470be:	b2d9      	uxtb	r1, r3
100470c0:	687b      	ldr	r3, [r7, #4]
100470c2:	223c      	movs	r2, #60	@ 0x3c
100470c4:	5499      	strb	r1, [r3, r2]
  }

}
100470c6:	46c0      	nop			@ (mov r8, r8)
100470c8:	46bd      	mov	sp, r7
100470ca:	b005      	add	sp, #20
100470cc:	bd90      	pop	{r4, r7, pc}
100470ce:	46c0      	nop			@ (mov r8, r8)
100470d0:	200000c0 	.word	0x200000c0
100470d4:	00000326 	.word	0x00000326

100470d8 <_us_to_systime>:

static uint32_t _us_to_systime(uint32_t time)
{
100470d8:	b580      	push	{r7, lr}
100470da:	b084      	sub	sp, #16
100470dc:	af00      	add	r7, sp, #0
100470de:	6078      	str	r0, [r7, #4]
  uint32_t t1, t2;
  t1 = time * 0x68;
100470e0:	687b      	ldr	r3, [r7, #4]
100470e2:	2268      	movs	r2, #104	@ 0x68
100470e4:	4353      	muls	r3, r2
100470e6:	60fb      	str	r3, [r7, #12]
  t2 = time * 0xDB;
100470e8:	687b      	ldr	r3, [r7, #4]
100470ea:	22db      	movs	r2, #219	@ 0xdb
100470ec:	4353      	muls	r3, r2
100470ee:	60bb      	str	r3, [r7, #8]
  return (t1 >> 8) + (t2 >> 16);
100470f0:	68fb      	ldr	r3, [r7, #12]
100470f2:	0a1a      	lsrs	r2, r3, #8
100470f4:	68bb      	ldr	r3, [r7, #8]
100470f6:	0c1b      	lsrs	r3, r3, #16
100470f8:	18d3      	adds	r3, r2, r3
}
100470fa:	0018      	movs	r0, r3
100470fc:	46bd      	mov	sp, r7
100470fe:	b004      	add	sp, #16
10047100:	bd80      	pop	{r7, pc}
	...

10047104 <_us_to_machinetime>:

static uint32_t _us_to_machinetime(uint32_t time)
{
10047104:	b5b0      	push	{r4, r5, r7, lr}
10047106:	b088      	sub	sp, #32
10047108:	af00      	add	r7, sp, #0
1004710a:	60f8      	str	r0, [r7, #12]
  uint64_t tmp = (uint64_t)RADIO_TIMER_Context.calibrationData.freq * (uint64_t)time * (uint64_t)3U;
1004710c:	4915      	ldr	r1, [pc, #84]	@ (10047164 <_us_to_machinetime+0x60>)
1004710e:	6949      	ldr	r1, [r1, #20]
10047110:	6039      	str	r1, [r7, #0]
10047112:	2100      	movs	r1, #0
10047114:	6079      	str	r1, [r7, #4]
10047116:	68f9      	ldr	r1, [r7, #12]
10047118:	000a      	movs	r2, r1
1004711a:	2100      	movs	r1, #0
1004711c:	000b      	movs	r3, r1
1004711e:	6838      	ldr	r0, [r7, #0]
10047120:	6879      	ldr	r1, [r7, #4]
10047122:	f7f9 f98d 	bl	10040440 <__aeabi_lmul>
10047126:	0002      	movs	r2, r0
10047128:	000b      	movs	r3, r1
1004712a:	0010      	movs	r0, r2
1004712c:	0019      	movs	r1, r3
1004712e:	0002      	movs	r2, r0
10047130:	000b      	movs	r3, r1
10047132:	1892      	adds	r2, r2, r2
10047134:	415b      	adcs	r3, r3
10047136:	1812      	adds	r2, r2, r0
10047138:	414b      	adcs	r3, r1
1004713a:	61ba      	str	r2, [r7, #24]
1004713c:	61fb      	str	r3, [r7, #28]
  uint32_t time_mt = ((tmp + (1 << 26)) >> 27) & TIMER_MAX_VALUE;
1004713e:	69ba      	ldr	r2, [r7, #24]
10047140:	69fb      	ldr	r3, [r7, #28]
10047142:	2080      	movs	r0, #128	@ 0x80
10047144:	04c0      	lsls	r0, r0, #19
10047146:	2100      	movs	r1, #0
10047148:	1812      	adds	r2, r2, r0
1004714a:	414b      	adcs	r3, r1
1004714c:	0159      	lsls	r1, r3, #5
1004714e:	0ed4      	lsrs	r4, r2, #27
10047150:	430c      	orrs	r4, r1
10047152:	0edd      	lsrs	r5, r3, #27
10047154:	0023      	movs	r3, r4
10047156:	617b      	str	r3, [r7, #20]

  return time_mt;
10047158:	697b      	ldr	r3, [r7, #20]
}
1004715a:	0018      	movs	r0, r3
1004715c:	46bd      	mov	sp, r7
1004715e:	b008      	add	sp, #32
10047160:	bdb0      	pop	{r4, r5, r7, pc}
10047162:	46c0      	nop			@ (mov r8, r8)
10047164:	20000598 	.word	0x20000598

10047168 <_update_xtal_startup_time>:

static void _update_xtal_startup_time(uint16_t hs_startup_time, int32_t freq1)
{
10047168:	b580      	push	{r7, lr}
1004716a:	b084      	sub	sp, #16
1004716c:	af00      	add	r7, sp, #0
1004716e:	0002      	movs	r2, r0
10047170:	6039      	str	r1, [r7, #0]
10047172:	1dbb      	adds	r3, r7, #6
10047174:	801a      	strh	r2, [r3, #0]
  int32_t time1;

  time1 = blue_unit_conversion(hs_startup_time, freq1, MULT64_THR_FREQ);
10047176:	1dbb      	adds	r3, r7, #6
10047178:	881b      	ldrh	r3, [r3, #0]
1004717a:	6839      	ldr	r1, [r7, #0]
1004717c:	4a0e      	ldr	r2, [pc, #56]	@ (100471b8 <_update_xtal_startup_time+0x50>)
1004717e:	0018      	movs	r0, r3
10047180:	f7f8 ff9e 	bl	100400c0 <blue_unit_conversion>
10047184:	0003      	movs	r3, r0
10047186:	60fb      	str	r3, [r7, #12]
  if (time1 >= 4096)
10047188:	68fa      	ldr	r2, [r7, #12]
1004718a:	2380      	movs	r3, #128	@ 0x80
1004718c:	015b      	lsls	r3, r3, #5
1004718e:	429a      	cmp	r2, r3
10047190:	db01      	blt.n	10047196 <_update_xtal_startup_time+0x2e>
  {
    time1 = 4095;
10047192:	4b0a      	ldr	r3, [pc, #40]	@ (100471bc <_update_xtal_startup_time+0x54>)
10047194:	60fb      	str	r3, [r7, #12]
  }
  if (time1 < 16)
10047196:	68fb      	ldr	r3, [r7, #12]
10047198:	2b0f      	cmp	r3, #15
1004719a:	dc01      	bgt.n	100471a0 <_update_xtal_startup_time+0x38>
  {
    time1 = 16;
1004719c:	2310      	movs	r3, #16
1004719e:	60fb      	str	r3, [r7, #12]
  }
  LL_RADIO_TIMER_SetWakeupOffset(WAKEUP, (time1 >> 4));
100471a0:	68fb      	ldr	r3, [r7, #12]
100471a2:	111b      	asrs	r3, r3, #4
100471a4:	b2db      	uxtb	r3, r3
100471a6:	4a06      	ldr	r2, [pc, #24]	@ (100471c0 <_update_xtal_startup_time+0x58>)
100471a8:	0019      	movs	r1, r3
100471aa:	0010      	movs	r0, r2
100471ac:	f7ff f8bc 	bl	10046328 <LL_RADIO_TIMER_SetWakeupOffset>
}
100471b0:	46c0      	nop			@ (mov r8, r8)
100471b2:	46bd      	mov	sp, r7
100471b4:	b004      	add	sp, #16
100471b6:	bd80      	pop	{r7, pc}
100471b8:	00000326 	.word	0x00000326
100471bc:	00000fff 	.word	0x00000fff
100471c0:	60001800 	.word	0x60001800

100471c4 <_calibration_callback>:

static void _calibration_callback(void *handle)
{
100471c4:	b580      	push	{r7, lr}
100471c6:	b082      	sub	sp, #8
100471c8:	af00      	add	r7, sp, #0
100471ca:	6078      	str	r0, [r7, #4]
  if (RADIO_TIMER_Context.calibrationSettings.periodicCalibration)
100471cc:	4b06      	ldr	r3, [pc, #24]	@ (100471e8 <_calibration_callback+0x24>)
100471ce:	781b      	ldrb	r3, [r3, #0]
100471d0:	2b00      	cmp	r3, #0
100471d2:	d001      	beq.n	100471d8 <_calibration_callback+0x14>
  {
    _timer_start_calibration();
100471d4:	f7ff fe74 	bl	10046ec0 <_timer_start_calibration>
  }
  RADIO_TIMER_Context.calibrationSettings.calibration_in_progress = TRUE;
100471d8:	4b03      	ldr	r3, [pc, #12]	@ (100471e8 <_calibration_callback+0x24>)
100471da:	2201      	movs	r2, #1
100471dc:	721a      	strb	r2, [r3, #8]
}
100471de:	46c0      	nop			@ (mov r8, r8)
100471e0:	46bd      	mov	sp, r7
100471e2:	b002      	add	sp, #8
100471e4:	bd80      	pop	{r7, pc}
100471e6:	46c0      	nop			@ (mov r8, r8)
100471e8:	20000598 	.word	0x20000598

100471ec <_start_timer>:

static int32_t _start_timer(VTIMER_HandleType *timerHandle, uint64_t time)
{
100471ec:	b590      	push	{r4, r7, lr}
100471ee:	b089      	sub	sp, #36	@ 0x24
100471f0:	af00      	add	r7, sp, #0
100471f2:	60f8      	str	r0, [r7, #12]
100471f4:	603a      	str	r2, [r7, #0]
100471f6:	607b      	str	r3, [r7, #4]
  uint8_t expired = 0;
100471f8:	2313      	movs	r3, #19
100471fa:	18fb      	adds	r3, r7, r3
100471fc:	2200      	movs	r2, #0
100471fe:	701a      	strb	r2, [r3, #0]

  /* The timer is already started*/
  if (timerHandle->active)
10047200:	68fb      	ldr	r3, [r7, #12]
10047202:	7b1b      	ldrb	r3, [r3, #12]
10047204:	2b00      	cmp	r3, #0
10047206:	d001      	beq.n	1004720c <_start_timer+0x20>
  {
    return 1;
10047208:	2301      	movs	r3, #1
1004720a:	e047      	b.n	1004729c <_start_timer+0xb0>
  }
  timerHandle->expiryTime = time;
1004720c:	68f9      	ldr	r1, [r7, #12]
1004720e:	683a      	ldr	r2, [r7, #0]
10047210:	687b      	ldr	r3, [r7, #4]
10047212:	600a      	str	r2, [r1, #0]
10047214:	604b      	str	r3, [r1, #4]
  timerHandle->active = TRUE;
10047216:	68fb      	ldr	r3, [r7, #12]
10047218:	2201      	movs	r2, #1
1004721a:	731a      	strb	r2, [r3, #12]
  if (_insert_timer_in_queue(RADIO_TIMER_Context.rootNode, timerHandle) == timerHandle)
1004721c:	4b21      	ldr	r3, [pc, #132]	@ (100472a4 <_start_timer+0xb8>)
1004721e:	228c      	movs	r2, #140	@ 0x8c
10047220:	589b      	ldr	r3, [r3, r2]
10047222:	68fa      	ldr	r2, [r7, #12]
10047224:	0011      	movs	r1, r2
10047226:	0018      	movs	r0, r3
10047228:	f000 f95c 	bl	100474e4 <_insert_timer_in_queue>
1004722c:	0002      	movs	r2, r0
1004722e:	68fb      	ldr	r3, [r7, #12]
10047230:	4293      	cmp	r3, r2
10047232:	d130      	bne.n	10047296 <_start_timer+0xaa>
  {
    RADIO_TIMER_Context.rootNode = _update_user_timeout(timerHandle, &expired);
10047234:	2413      	movs	r4, #19
10047236:	193a      	adds	r2, r7, r4
10047238:	68fb      	ldr	r3, [r7, #12]
1004723a:	0011      	movs	r1, r2
1004723c:	0018      	movs	r0, r3
1004723e:	f000 f89b 	bl	10047378 <_update_user_timeout>
10047242:	0002      	movs	r2, r0
10047244:	4b17      	ldr	r3, [pc, #92]	@ (100472a4 <_start_timer+0xb8>)
10047246:	218c      	movs	r1, #140	@ 0x8c
10047248:	505a      	str	r2, [r3, r1]
    if (expired)
1004724a:	193b      	adds	r3, r7, r4
1004724c:	781b      	ldrb	r3, [r3, #0]
1004724e:	2b00      	cmp	r3, #0
10047250:	d021      	beq.n	10047296 <_start_timer+0xaa>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
10047252:	f3ef 8310 	mrs	r3, PRIMASK
10047256:	61bb      	str	r3, [r7, #24]
  return(result);
10047258:	69bb      	ldr	r3, [r7, #24]
    {
      /* A new root timer is already expired, mimic timer expire that is normally signaled
       through the interrupt handler that increase the number of expired timers*/
      INCREMENT_EXPIRE_COUNT;
1004725a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
1004725c:	b672      	cpsid	i
}
1004725e:	46c0      	nop			@ (mov r8, r8)
10047260:	4b10      	ldr	r3, [pc, #64]	@ (100472a4 <_start_timer+0xb8>)
10047262:	2291      	movs	r2, #145	@ 0x91
10047264:	5c9b      	ldrb	r3, [r3, r2]
10047266:	3301      	adds	r3, #1
10047268:	4a0e      	ldr	r2, [pc, #56]	@ (100472a4 <_start_timer+0xb8>)
1004726a:	2192      	movs	r1, #146	@ 0x92
1004726c:	5c52      	ldrb	r2, [r2, r1]
1004726e:	4293      	cmp	r3, r2
10047270:	d103      	bne.n	1004727a <_start_timer+0x8e>
10047272:	4b0c      	ldr	r3, [pc, #48]	@ (100472a4 <_start_timer+0xb8>)
10047274:	2291      	movs	r2, #145	@ 0x91
10047276:	5c9b      	ldrb	r3, [r3, r2]
10047278:	e004      	b.n	10047284 <_start_timer+0x98>
1004727a:	4b0a      	ldr	r3, [pc, #40]	@ (100472a4 <_start_timer+0xb8>)
1004727c:	2291      	movs	r2, #145	@ 0x91
1004727e:	5c9b      	ldrb	r3, [r3, r2]
10047280:	3301      	adds	r3, #1
10047282:	b2db      	uxtb	r3, r3
10047284:	4a07      	ldr	r2, [pc, #28]	@ (100472a4 <_start_timer+0xb8>)
10047286:	2191      	movs	r1, #145	@ 0x91
10047288:	5453      	strb	r3, [r2, r1]
1004728a:	69fb      	ldr	r3, [r7, #28]
1004728c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
1004728e:	697b      	ldr	r3, [r7, #20]
10047290:	f383 8810 	msr	PRIMASK, r3
}
10047294:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return expired;
10047296:	2313      	movs	r3, #19
10047298:	18fb      	adds	r3, r7, r3
1004729a:	781b      	ldrb	r3, [r3, #0]
}
1004729c:	0018      	movs	r0, r3
1004729e:	46bd      	mov	sp, r7
100472a0:	b009      	add	sp, #36	@ 0x24
100472a2:	bd90      	pop	{r4, r7, pc}
100472a4:	20000598 	.word	0x20000598

100472a8 <_get_system_time_and_machine>:

static uint64_t _get_system_time_and_machine(RADIO_TIMER_ContextTypeDef *context, uint32_t *current_machine_time)
{
100472a8:	b5b0      	push	{r4, r5, r7, lr}
100472aa:	b08a      	sub	sp, #40	@ 0x28
100472ac:	af00      	add	r7, sp, #0
100472ae:	60f8      	str	r0, [r7, #12]
100472b0:	60b9      	str	r1, [r7, #8]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
100472b2:	f3ef 8310 	mrs	r3, PRIMASK
100472b6:	617b      	str	r3, [r7, #20]
  return(result);
100472b8:	697b      	ldr	r3, [r7, #20]
  uint32_t difftime;
  uint64_t new_time;

  ATOMIC_SECTION_BEGIN();
100472ba:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
100472bc:	b672      	cpsid	i
}
100472be:	46c0      	nop			@ (mov r8, r8)
  new_time = context->cumulative_time;
100472c0:	68fb      	ldr	r3, [r7, #12]
100472c2:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
100472c4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
100472c6:	623a      	str	r2, [r7, #32]
100472c8:	627b      	str	r3, [r7, #36]	@ 0x24
  *current_machine_time =  LL_RADIO_TIMER_GetAbsoluteTime(WAKEUP);
100472ca:	4b29      	ldr	r3, [pc, #164]	@ (10047370 <_get_system_time_and_machine+0xc8>)
100472cc:	0018      	movs	r0, r3
100472ce:	f7ff f85c 	bl	1004638a <LL_RADIO_TIMER_GetAbsoluteTime>
100472d2:	0002      	movs	r2, r0
100472d4:	68bb      	ldr	r3, [r7, #8]
100472d6:	601a      	str	r2, [r3, #0]
  difftime = TIME_ABSDIFF(*current_machine_time, context->last_machine_time);
100472d8:	68bb      	ldr	r3, [r7, #8]
100472da:	681a      	ldr	r2, [r3, #0]
100472dc:	68fb      	ldr	r3, [r7, #12]
100472de:	2180      	movs	r1, #128	@ 0x80
100472e0:	585b      	ldr	r3, [r3, r1]
100472e2:	1ad3      	subs	r3, r2, r3
100472e4:	61bb      	str	r3, [r7, #24]
  new_time += blue_unit_conversion(difftime, context->calibrationData.period1, MULT64_THR_PERIOD);
100472e6:	68fb      	ldr	r3, [r7, #12]
100472e8:	69db      	ldr	r3, [r3, #28]
100472ea:	0019      	movs	r1, r3
100472ec:	4a21      	ldr	r2, [pc, #132]	@ (10047374 <_get_system_time_and_machine+0xcc>)
100472ee:	69bb      	ldr	r3, [r7, #24]
100472f0:	0018      	movs	r0, r3
100472f2:	f7f8 fee5 	bl	100400c0 <blue_unit_conversion>
100472f6:	0003      	movs	r3, r0
100472f8:	603b      	str	r3, [r7, #0]
100472fa:	2300      	movs	r3, #0
100472fc:	607b      	str	r3, [r7, #4]
100472fe:	6a3a      	ldr	r2, [r7, #32]
10047300:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10047302:	6838      	ldr	r0, [r7, #0]
10047304:	6879      	ldr	r1, [r7, #4]
10047306:	1812      	adds	r2, r2, r0
10047308:	414b      	adcs	r3, r1
1004730a:	623a      	str	r2, [r7, #32]
1004730c:	627b      	str	r3, [r7, #36]	@ 0x24
  if (new_time < context->last_system_time)
1004730e:	68fb      	ldr	r3, [r7, #12]
10047310:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
10047312:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
10047314:	6a79      	ldr	r1, [r7, #36]	@ 0x24
10047316:	4299      	cmp	r1, r3
10047318:	d305      	bcc.n	10047326 <_get_system_time_and_machine+0x7e>
1004731a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
1004731c:	4299      	cmp	r1, r3
1004731e:	d115      	bne.n	1004734c <_get_system_time_and_machine+0xa4>
10047320:	6a39      	ldr	r1, [r7, #32]
10047322:	4291      	cmp	r1, r2
10047324:	d212      	bcs.n	1004734c <_get_system_time_and_machine+0xa4>
  {
    new_time += blue_unit_conversion(TIMER_MAX_VALUE, context->calibrationData.period1, MULT64_THR_PERIOD);
10047326:	68fb      	ldr	r3, [r7, #12]
10047328:	69db      	ldr	r3, [r3, #28]
1004732a:	0019      	movs	r1, r3
1004732c:	4a11      	ldr	r2, [pc, #68]	@ (10047374 <_get_system_time_and_machine+0xcc>)
1004732e:	2301      	movs	r3, #1
10047330:	425b      	negs	r3, r3
10047332:	0018      	movs	r0, r3
10047334:	f7f8 fec4 	bl	100400c0 <blue_unit_conversion>
10047338:	0003      	movs	r3, r0
1004733a:	001c      	movs	r4, r3
1004733c:	2300      	movs	r3, #0
1004733e:	001d      	movs	r5, r3
10047340:	6a3a      	ldr	r2, [r7, #32]
10047342:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10047344:	1912      	adds	r2, r2, r4
10047346:	416b      	adcs	r3, r5
10047348:	623a      	str	r2, [r7, #32]
1004734a:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  context->last_system_time = new_time;
1004734c:	68f9      	ldr	r1, [r7, #12]
1004734e:	6a3a      	ldr	r2, [r7, #32]
10047350:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10047352:	678a      	str	r2, [r1, #120]	@ 0x78
10047354:	67cb      	str	r3, [r1, #124]	@ 0x7c
10047356:	69fb      	ldr	r3, [r7, #28]
10047358:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
1004735a:	693b      	ldr	r3, [r7, #16]
1004735c:	f383 8810 	msr	PRIMASK, r3
}
10047360:	46c0      	nop			@ (mov r8, r8)
  ATOMIC_SECTION_END();

  return new_time;
10047362:	6a3a      	ldr	r2, [r7, #32]
10047364:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
10047366:	0010      	movs	r0, r2
10047368:	0019      	movs	r1, r3
1004736a:	46bd      	mov	sp, r7
1004736c:	b00a      	add	sp, #40	@ 0x28
1004736e:	bdb0      	pop	{r4, r5, r7, pc}
10047370:	60001800 	.word	0x60001800
10047374:	00000635 	.word	0x00000635

10047378 <_update_user_timeout>:

/* Set timeout and skip non active timers */
static VTIMER_HandleType *_update_user_timeout(VTIMER_HandleType *rootNode, uint8_t *expired)
{
10047378:	b5b0      	push	{r4, r5, r7, lr}
1004737a:	b08e      	sub	sp, #56	@ 0x38
1004737c:	af00      	add	r7, sp, #0
1004737e:	60f8      	str	r0, [r7, #12]
10047380:	60b9      	str	r1, [r7, #8]
  VTIMER_HandleType *curr = rootNode;
10047382:	68fb      	ldr	r3, [r7, #12]
10047384:	637b      	str	r3, [r7, #52]	@ 0x34
  VTIMER_HandleType *rootOrig = rootNode;
10047386:	68fb      	ldr	r3, [r7, #12]
10047388:	633b      	str	r3, [r7, #48]	@ 0x30
  int64_t delay;
  *expired = 0;
1004738a:	68bb      	ldr	r3, [r7, #8]
1004738c:	2200      	movs	r2, #0
1004738e:	701a      	strb	r2, [r3, #0]
  while (curr != NULL)
10047390:	e094      	b.n	100474bc <_update_user_timeout+0x144>
  {
    if (curr->active)
10047392:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
10047394:	7b1b      	ldrb	r3, [r3, #12]
10047396:	2b00      	cmp	r3, #0
10047398:	d100      	bne.n	1004739c <_update_user_timeout+0x24>
1004739a:	e08c      	b.n	100474b6 <_update_user_timeout+0x13e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
1004739c:	f3ef 8310 	mrs	r3, PRIMASK
100473a0:	61fb      	str	r3, [r7, #28]
  return(result);
100473a2:	69fb      	ldr	r3, [r7, #28]
    {
      ATOMIC_SECTION_BEGIN();
100473a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("cpsid i" : : : "memory");
100473a6:	b672      	cpsid	i
}
100473a8:	46c0      	nop			@ (mov r8, r8)
#if defined (STM32WB06) || defined (STM32WB07)
      uint8_t dummy;
      bool share = FALSE;
100473aa:	230e      	movs	r3, #14
100473ac:	2108      	movs	r1, #8
100473ae:	185b      	adds	r3, r3, r1
100473b0:	19db      	adds	r3, r3, r7
100473b2:	2200      	movs	r2, #0
100473b4:	701a      	strb	r2, [r3, #0]
      _check_radio_activity(&RADIO_TIMER_Context.radioTimer, &dummy);
100473b6:	230f      	movs	r3, #15
100473b8:	185b      	adds	r3, r3, r1
100473ba:	19da      	adds	r2, r3, r7
100473bc:	4b47      	ldr	r3, [pc, #284]	@ (100474dc <_update_user_timeout+0x164>)
100473be:	0011      	movs	r1, r2
100473c0:	0018      	movs	r0, r3
100473c2:	f000 f9f5 	bl	100477b0 <_check_radio_activity>
#endif
      delay = curr->expiryTime - HAL_RADIO_TIMER_GetCurrentSysTime();
100473c6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
100473c8:	681c      	ldr	r4, [r3, #0]
100473ca:	685d      	ldr	r5, [r3, #4]
100473cc:	f7ff fc8c 	bl	10046ce8 <HAL_RADIO_TIMER_GetCurrentSysTime>
100473d0:	0002      	movs	r2, r0
100473d2:	000b      	movs	r3, r1
100473d4:	1aa4      	subs	r4, r4, r2
100473d6:	419d      	sbcs	r5, r3
100473d8:	0022      	movs	r2, r4
100473da:	002b      	movs	r3, r5
100473dc:	623a      	str	r2, [r7, #32]
100473de:	627b      	str	r3, [r7, #36]	@ 0x24
      if (delay > 0)
100473e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
100473e2:	2b00      	cmp	r3, #0
100473e4:	dc05      	bgt.n	100473f2 <_update_user_timeout+0x7a>
100473e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
100473e8:	2b00      	cmp	r3, #0
100473ea:	d15a      	bne.n	100474a2 <_update_user_timeout+0x12a>
100473ec:	6a3b      	ldr	r3, [r7, #32]
100473ee:	2b00      	cmp	r3, #0
100473f0:	d057      	beq.n	100474a2 <_update_user_timeout+0x12a>
         /* Protection against interrupt must be used to avoid that the called function will be interrupted
          and so the timer programming will happen after the target time is already passed
          leading to a timer expiring after timer wraps, instead of the expected delay */
#if defined (STM32WB06) || defined (STM32WB07)
        /* Is the active radio operation before or too close the host timeout? */
        if (((RADIO_TIMER_Context.radioTimer.expiryTime) < (curr->expiryTime + RADIO_TIMER_Context.hostMargin))
100473f2:	4b3b      	ldr	r3, [pc, #236]	@ (100474e0 <_update_user_timeout+0x168>)
100473f4:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
100473f6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
100473f8:	6b79      	ldr	r1, [r7, #52]	@ 0x34
100473fa:	6808      	ldr	r0, [r1, #0]
100473fc:	6849      	ldr	r1, [r1, #4]
100473fe:	4c38      	ldr	r4, [pc, #224]	@ (100474e0 <_update_user_timeout+0x168>)
10047400:	2598      	movs	r5, #152	@ 0x98
10047402:	5964      	ldr	r4, [r4, r5]
10047404:	603c      	str	r4, [r7, #0]
10047406:	2400      	movs	r4, #0
10047408:	607c      	str	r4, [r7, #4]
1004740a:	683c      	ldr	r4, [r7, #0]
1004740c:	687d      	ldr	r5, [r7, #4]
1004740e:	1900      	adds	r0, r0, r4
10047410:	4169      	adcs	r1, r5
10047412:	4299      	cmp	r1, r3
10047414:	d802      	bhi.n	1004741c <_update_user_timeout+0xa4>
10047416:	d11b      	bne.n	10047450 <_update_user_timeout+0xd8>
10047418:	4290      	cmp	r0, r2
1004741a:	d919      	bls.n	10047450 <_update_user_timeout+0xd8>
            && RADIO_TIMER_Context.radioTimer.active)
1004741c:	4b30      	ldr	r3, [pc, #192]	@ (100474e0 <_update_user_timeout+0x168>)
1004741e:	2261      	movs	r2, #97	@ 0x61
10047420:	5c9b      	ldrb	r3, [r3, r2]
10047422:	2b00      	cmp	r3, #0
10047424:	d014      	beq.n	10047450 <_update_user_timeout+0xd8>
        {
          if ((RADIO_TIMER_Context.radioTimer.expiryTime >= curr->expiryTime) && RADIO_TIMER_Context.radioTimer.active)
10047426:	4b2e      	ldr	r3, [pc, #184]	@ (100474e0 <_update_user_timeout+0x168>)
10047428:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
1004742a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
1004742c:	6b79      	ldr	r1, [r7, #52]	@ 0x34
1004742e:	6808      	ldr	r0, [r1, #0]
10047430:	6849      	ldr	r1, [r1, #4]
10047432:	4299      	cmp	r1, r3
10047434:	d813      	bhi.n	1004745e <_update_user_timeout+0xe6>
10047436:	d101      	bne.n	1004743c <_update_user_timeout+0xc4>
10047438:	4290      	cmp	r0, r2
1004743a:	d810      	bhi.n	1004745e <_update_user_timeout+0xe6>
1004743c:	4b28      	ldr	r3, [pc, #160]	@ (100474e0 <_update_user_timeout+0x168>)
1004743e:	2261      	movs	r2, #97	@ 0x61
10047440:	5c9b      	ldrb	r3, [r3, r2]
10047442:	2b00      	cmp	r3, #0
10047444:	d00b      	beq.n	1004745e <_update_user_timeout+0xe6>
          {
            RADIO_TIMER_Context.hostIsRadioPending = 1;
10047446:	4b26      	ldr	r3, [pc, #152]	@ (100474e0 <_update_user_timeout+0x168>)
10047448:	2295      	movs	r2, #149	@ 0x95
1004744a:	2101      	movs	r1, #1
1004744c:	5499      	strb	r1, [r3, r2]
          if ((RADIO_TIMER_Context.radioTimer.expiryTime >= curr->expiryTime) && RADIO_TIMER_Context.radioTimer.active)
1004744e:	e006      	b.n	1004745e <_update_user_timeout+0xe6>
          }          
        }
        else
        {
          /* It's fine to program the wakeup timer for an host wakeup */
          share = TRUE;
10047450:	230e      	movs	r3, #14
10047452:	2208      	movs	r2, #8
10047454:	189b      	adds	r3, r3, r2
10047456:	19db      	adds	r3, r3, r7
10047458:	2201      	movs	r2, #1
1004745a:	701a      	strb	r2, [r3, #0]
1004745c:	e000      	b.n	10047460 <_update_user_timeout+0xe8>
          if ((RADIO_TIMER_Context.radioTimer.expiryTime >= curr->expiryTime) && RADIO_TIMER_Context.radioTimer.active)
1004745e:	46c0      	nop			@ (mov r8, r8)
        }
        TIMER_SetRadioHostWakeupTime(delay, &share);
10047460:	6a3b      	ldr	r3, [r7, #32]
10047462:	240e      	movs	r4, #14
10047464:	2508      	movs	r5, #8
10047466:	1962      	adds	r2, r4, r5
10047468:	19d2      	adds	r2, r2, r7
1004746a:	0011      	movs	r1, r2
1004746c:	0018      	movs	r0, r3
1004746e:	f000 fa29 	bl	100478c4 <TIMER_SetRadioHostWakeupTime>
        if (share == TRUE)
10047472:	1963      	adds	r3, r4, r5
10047474:	19db      	adds	r3, r3, r7
10047476:	781b      	ldrb	r3, [r3, #0]
10047478:	2b00      	cmp	r3, #0
1004747a:	d015      	beq.n	100474a8 <_update_user_timeout+0x130>
        {
          RADIO_TIMER_Context.radioTimer.pending |= RADIO_TIMER_Context.radioTimer.active;
1004747c:	4b18      	ldr	r3, [pc, #96]	@ (100474e0 <_update_user_timeout+0x168>)
1004747e:	2262      	movs	r2, #98	@ 0x62
10047480:	5c9a      	ldrb	r2, [r3, r2]
10047482:	4b17      	ldr	r3, [pc, #92]	@ (100474e0 <_update_user_timeout+0x168>)
10047484:	2161      	movs	r1, #97	@ 0x61
10047486:	5c5b      	ldrb	r3, [r3, r1]
10047488:	4313      	orrs	r3, r2
1004748a:	b2db      	uxtb	r3, r3
1004748c:	1e5a      	subs	r2, r3, #1
1004748e:	4193      	sbcs	r3, r2
10047490:	b2d9      	uxtb	r1, r3
10047492:	4b13      	ldr	r3, [pc, #76]	@ (100474e0 <_update_user_timeout+0x168>)
10047494:	2262      	movs	r2, #98	@ 0x62
10047496:	5499      	strb	r1, [r3, r2]
          RADIO_TIMER_Context.radioTimer.active = FALSE;
10047498:	4b11      	ldr	r3, [pc, #68]	@ (100474e0 <_update_user_timeout+0x168>)
1004749a:	2261      	movs	r2, #97	@ 0x61
1004749c:	2100      	movs	r1, #0
1004749e:	5499      	strb	r1, [r3, r2]
100474a0:	e002      	b.n	100474a8 <_update_user_timeout+0x130>
        VTIMER_SetWakeupTime(delay, TRUE);
#endif
      }
      else
      {
        *expired = 1;
100474a2:	68bb      	ldr	r3, [r7, #8]
100474a4:	2201      	movs	r2, #1
100474a6:	701a      	strb	r2, [r3, #0]
100474a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
100474aa:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
100474ac:	69bb      	ldr	r3, [r7, #24]
100474ae:	f383 8810 	msr	PRIMASK, r3
}
100474b2:	46c0      	nop			@ (mov r8, r8)
      }
      ATOMIC_SECTION_END();
      break;
100474b4:	e006      	b.n	100474c4 <_update_user_timeout+0x14c>
    }
    curr = curr->next;
100474b6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
100474b8:	691b      	ldr	r3, [r3, #16]
100474ba:	637b      	str	r3, [r7, #52]	@ 0x34
  while (curr != NULL)
100474bc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
100474be:	2b00      	cmp	r3, #0
100474c0:	d000      	beq.n	100474c4 <_update_user_timeout+0x14c>
100474c2:	e766      	b.n	10047392 <_update_user_timeout+0x1a>
  }
  if (*expired)
100474c4:	68bb      	ldr	r3, [r7, #8]
100474c6:	781b      	ldrb	r3, [r3, #0]
100474c8:	2b00      	cmp	r3, #0
100474ca:	d001      	beq.n	100474d0 <_update_user_timeout+0x158>
  {
    return rootOrig;
100474cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
100474ce:	e000      	b.n	100474d2 <_update_user_timeout+0x15a>
  }

  return curr;
100474d0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
100474d2:	0018      	movs	r0, r3
100474d4:	46bd      	mov	sp, r7
100474d6:	b00e      	add	sp, #56	@ 0x38
100474d8:	bdb0      	pop	{r4, r5, r7, pc}
100474da:	46c0      	nop			@ (mov r8, r8)
100474dc:	200005f0 	.word	0x200005f0
100474e0:	20000598 	.word	0x20000598

100474e4 <_insert_timer_in_queue>:
  return current_time;
}
#endif

static VTIMER_HandleType *_insert_timer_in_queue(VTIMER_HandleType *rootNode, VTIMER_HandleType *handle)
{
100474e4:	b580      	push	{r7, lr}
100474e6:	b086      	sub	sp, #24
100474e8:	af00      	add	r7, sp, #0
100474ea:	6078      	str	r0, [r7, #4]
100474ec:	6039      	str	r1, [r7, #0]
  VTIMER_HandleType *current = rootNode;
100474ee:	687b      	ldr	r3, [r7, #4]
100474f0:	617b      	str	r3, [r7, #20]
  VTIMER_HandleType *prev = NULL;
100474f2:	2300      	movs	r3, #0
100474f4:	613b      	str	r3, [r7, #16]
  VTIMER_HandleType *returnValue = rootNode;
100474f6:	687b      	ldr	r3, [r7, #4]
100474f8:	60fb      	str	r3, [r7, #12]

  while ((current != NULL) && (current->expiryTime < handle->expiryTime))
100474fa:	e004      	b.n	10047506 <_insert_timer_in_queue+0x22>
  {
    prev = current;
100474fc:	697b      	ldr	r3, [r7, #20]
100474fe:	613b      	str	r3, [r7, #16]
    current = current->next;
10047500:	697b      	ldr	r3, [r7, #20]
10047502:	691b      	ldr	r3, [r3, #16]
10047504:	617b      	str	r3, [r7, #20]
  while ((current != NULL) && (current->expiryTime < handle->expiryTime))
10047506:	697b      	ldr	r3, [r7, #20]
10047508:	2b00      	cmp	r3, #0
1004750a:	d00a      	beq.n	10047522 <_insert_timer_in_queue+0x3e>
1004750c:	697b      	ldr	r3, [r7, #20]
1004750e:	681a      	ldr	r2, [r3, #0]
10047510:	685b      	ldr	r3, [r3, #4]
10047512:	6839      	ldr	r1, [r7, #0]
10047514:	6808      	ldr	r0, [r1, #0]
10047516:	6849      	ldr	r1, [r1, #4]
10047518:	4299      	cmp	r1, r3
1004751a:	d8ef      	bhi.n	100474fc <_insert_timer_in_queue+0x18>
1004751c:	d101      	bne.n	10047522 <_insert_timer_in_queue+0x3e>
1004751e:	4290      	cmp	r0, r2
10047520:	d8ec      	bhi.n	100474fc <_insert_timer_in_queue+0x18>
  }

  handle->next = current;
10047522:	683b      	ldr	r3, [r7, #0]
10047524:	697a      	ldr	r2, [r7, #20]
10047526:	611a      	str	r2, [r3, #16]

  if (prev == NULL)
10047528:	693b      	ldr	r3, [r7, #16]
1004752a:	2b00      	cmp	r3, #0
1004752c:	d102      	bne.n	10047534 <_insert_timer_in_queue+0x50>
  {
    /* We are the new root */
    returnValue = handle;
1004752e:	683b      	ldr	r3, [r7, #0]
10047530:	60fb      	str	r3, [r7, #12]
10047532:	e002      	b.n	1004753a <_insert_timer_in_queue+0x56>
  }
  else
  {
    prev->next = handle;
10047534:	693b      	ldr	r3, [r7, #16]
10047536:	683a      	ldr	r2, [r7, #0]
10047538:	611a      	str	r2, [r3, #16]
  }

  return returnValue;
1004753a:	68fb      	ldr	r3, [r7, #12]
}
1004753c:	0018      	movs	r0, r3
1004753e:	46bd      	mov	sp, r7
10047540:	b006      	add	sp, #24
10047542:	bd80      	pop	{r7, pc}

10047544 <_virtualTimeBaseEnable>:

static void _virtualTimeBaseEnable(FunctionalState state)
{
10047544:	b580      	push	{r7, lr}
10047546:	b082      	sub	sp, #8
10047548:	af00      	add	r7, sp, #0
1004754a:	0002      	movs	r2, r0
1004754c:	1dfb      	adds	r3, r7, #7
1004754e:	701a      	strb	r2, [r3, #0]
  if (state != DISABLE)
10047550:	1dfb      	adds	r3, r7, #7
10047552:	781b      	ldrb	r3, [r3, #0]
10047554:	2b00      	cmp	r3, #0
10047556:	d010      	beq.n	1004757a <_virtualTimeBaseEnable+0x36>
  {
    if (RADIO_TIMER_Context.enableTimeBase == FALSE)
10047558:	4b0e      	ldr	r3, [pc, #56]	@ (10047594 <_virtualTimeBaseEnable+0x50>)
1004755a:	2290      	movs	r2, #144	@ 0x90
1004755c:	5c9b      	ldrb	r3, [r3, r2]
1004755e:	2201      	movs	r2, #1
10047560:	4053      	eors	r3, r2
10047562:	b2db      	uxtb	r3, r3
10047564:	2b00      	cmp	r3, #0
10047566:	d010      	beq.n	1004758a <_virtualTimeBaseEnable+0x46>
    {
      _calibration_callback(&RADIO_TIMER_Context.calibrationTimer);
10047568:	4b0b      	ldr	r3, [pc, #44]	@ (10047598 <_virtualTimeBaseEnable+0x54>)
1004756a:	0018      	movs	r0, r3
1004756c:	f7ff fe2a 	bl	100471c4 <_calibration_callback>
      RADIO_TIMER_Context.enableTimeBase = TRUE;
10047570:	4b08      	ldr	r3, [pc, #32]	@ (10047594 <_virtualTimeBaseEnable+0x50>)
10047572:	2290      	movs	r2, #144	@ 0x90
10047574:	2101      	movs	r1, #1
10047576:	5499      	strb	r1, [r3, r2]
  else
  {
    HAL_RADIO_TIMER_StopVirtualTimer(&RADIO_TIMER_Context.calibrationTimer);
    RADIO_TIMER_Context.enableTimeBase = FALSE;
  }
}
10047578:	e007      	b.n	1004758a <_virtualTimeBaseEnable+0x46>
    HAL_RADIO_TIMER_StopVirtualTimer(&RADIO_TIMER_Context.calibrationTimer);
1004757a:	4b07      	ldr	r3, [pc, #28]	@ (10047598 <_virtualTimeBaseEnable+0x54>)
1004757c:	0018      	movs	r0, r3
1004757e:	f7ff fbc5 	bl	10046d0c <HAL_RADIO_TIMER_StopVirtualTimer>
    RADIO_TIMER_Context.enableTimeBase = FALSE;
10047582:	4b04      	ldr	r3, [pc, #16]	@ (10047594 <_virtualTimeBaseEnable+0x50>)
10047584:	2290      	movs	r2, #144	@ 0x90
10047586:	2100      	movs	r1, #0
10047588:	5499      	strb	r1, [r3, r2]
}
1004758a:	46c0      	nop			@ (mov r8, r8)
1004758c:	46bd      	mov	sp, r7
1004758e:	b002      	add	sp, #8
10047590:	bd80      	pop	{r7, pc}
10047592:	46c0      	nop			@ (mov r8, r8)
10047594:	20000598 	.word	0x20000598
10047598:	200005d8 	.word	0x200005d8

1004759c <_remove_timer_in_queue>:

static VTIMER_HandleType *_remove_timer_in_queue(VTIMER_HandleType *rootNode, VTIMER_HandleType *handle)
{
1004759c:	b580      	push	{r7, lr}
1004759e:	b086      	sub	sp, #24
100475a0:	af00      	add	r7, sp, #0
100475a2:	6078      	str	r0, [r7, #4]
100475a4:	6039      	str	r1, [r7, #0]
  VTIMER_HandleType *current = rootNode;
100475a6:	687b      	ldr	r3, [r7, #4]
100475a8:	617b      	str	r3, [r7, #20]
  VTIMER_HandleType *prev = NULL;
100475aa:	2300      	movs	r3, #0
100475ac:	613b      	str	r3, [r7, #16]
  VTIMER_HandleType *returnValue = rootNode;
100475ae:	687b      	ldr	r3, [r7, #4]
100475b0:	60fb      	str	r3, [r7, #12]

  while ((current != NULL) && (current != handle))
100475b2:	e004      	b.n	100475be <_remove_timer_in_queue+0x22>
  {
    prev = current;
100475b4:	697b      	ldr	r3, [r7, #20]
100475b6:	613b      	str	r3, [r7, #16]
    current = current->next;
100475b8:	697b      	ldr	r3, [r7, #20]
100475ba:	691b      	ldr	r3, [r3, #16]
100475bc:	617b      	str	r3, [r7, #20]
  while ((current != NULL) && (current != handle))
100475be:	697b      	ldr	r3, [r7, #20]
100475c0:	2b00      	cmp	r3, #0
100475c2:	d003      	beq.n	100475cc <_remove_timer_in_queue+0x30>
100475c4:	697a      	ldr	r2, [r7, #20]
100475c6:	683b      	ldr	r3, [r7, #0]
100475c8:	429a      	cmp	r2, r3
100475ca:	d1f3      	bne.n	100475b4 <_remove_timer_in_queue+0x18>
  }

  if (current == NULL)
100475cc:	697b      	ldr	r3, [r7, #20]
100475ce:	2b00      	cmp	r3, #0
100475d0:	d00b      	beq.n	100475ea <_remove_timer_in_queue+0x4e>
  {
    /* Not found */
  }
  else if (current == rootNode)
100475d2:	697a      	ldr	r2, [r7, #20]
100475d4:	687b      	ldr	r3, [r7, #4]
100475d6:	429a      	cmp	r2, r3
100475d8:	d103      	bne.n	100475e2 <_remove_timer_in_queue+0x46>
  {
    /* New root node */
    returnValue = current->next;
100475da:	697b      	ldr	r3, [r7, #20]
100475dc:	691b      	ldr	r3, [r3, #16]
100475de:	60fb      	str	r3, [r7, #12]
100475e0:	e003      	b.n	100475ea <_remove_timer_in_queue+0x4e>
  }
  else
  {
    prev->next = current->next;
100475e2:	697b      	ldr	r3, [r7, #20]
100475e4:	691a      	ldr	r2, [r3, #16]
100475e6:	693b      	ldr	r3, [r7, #16]
100475e8:	611a      	str	r2, [r3, #16]
  }

  return returnValue;
100475ea:	68fb      	ldr	r3, [r7, #12]
}
100475ec:	0018      	movs	r0, r3
100475ee:	46bd      	mov	sp, r7
100475f0:	b006      	add	sp, #24
100475f2:	bd80      	pop	{r7, pc}

100475f4 <_check_callbacks>:

/* Check the number of expired timer from rootNode (ordered list of timers) and return the list of expired timers */
static VTIMER_HandleType *_check_callbacks(VTIMER_HandleType *rootNode, VTIMER_HandleType **expiredList)
{
100475f4:	b5b0      	push	{r4, r5, r7, lr}
100475f6:	b088      	sub	sp, #32
100475f8:	af00      	add	r7, sp, #0
100475fa:	6078      	str	r0, [r7, #4]
100475fc:	6039      	str	r1, [r7, #0]

  VTIMER_HandleType *curr = rootNode;
100475fe:	687b      	ldr	r3, [r7, #4]
10047600:	61fb      	str	r3, [r7, #28]
  VTIMER_HandleType *prev = NULL;
10047602:	2300      	movs	r3, #0
10047604:	61bb      	str	r3, [r7, #24]
  VTIMER_HandleType *returnValue = rootNode;
10047606:	687b      	ldr	r3, [r7, #4]
10047608:	617b      	str	r3, [r7, #20]
  *expiredList = rootNode;
1004760a:	683b      	ldr	r3, [r7, #0]
1004760c:	687a      	ldr	r2, [r7, #4]
1004760e:	601a      	str	r2, [r3, #0]

  int64_t delay;
  uint32_t expiredCount = 0;
10047610:	2300      	movs	r3, #0
10047612:	613b      	str	r3, [r7, #16]

  while (curr != NULL)
10047614:	e021      	b.n	1004765a <_check_callbacks+0x66>
  {

    if (curr->active)
10047616:	69fb      	ldr	r3, [r7, #28]
10047618:	7b1b      	ldrb	r3, [r3, #12]
1004761a:	2b00      	cmp	r3, #0
1004761c:	d015      	beq.n	1004764a <_check_callbacks+0x56>
    {
      delay = curr->expiryTime - HAL_RADIO_TIMER_GetCurrentSysTime();
1004761e:	69fb      	ldr	r3, [r7, #28]
10047620:	681c      	ldr	r4, [r3, #0]
10047622:	685d      	ldr	r5, [r3, #4]
10047624:	f7ff fb60 	bl	10046ce8 <HAL_RADIO_TIMER_GetCurrentSysTime>
10047628:	0002      	movs	r2, r0
1004762a:	000b      	movs	r3, r1
1004762c:	1aa4      	subs	r4, r4, r2
1004762e:	419d      	sbcs	r5, r3
10047630:	0022      	movs	r2, r4
10047632:	002b      	movs	r3, r5
10047634:	60ba      	str	r2, [r7, #8]
10047636:	60fb      	str	r3, [r7, #12]

      if (delay > 5)   /*TBR*/
10047638:	68fb      	ldr	r3, [r7, #12]
1004763a:	2b00      	cmp	r3, #0
1004763c:	dc11      	bgt.n	10047662 <_check_callbacks+0x6e>
1004763e:	68fb      	ldr	r3, [r7, #12]
10047640:	2b00      	cmp	r3, #0
10047642:	d102      	bne.n	1004764a <_check_callbacks+0x56>
10047644:	68bb      	ldr	r3, [r7, #8]
10047646:	2b05      	cmp	r3, #5
10047648:	d80b      	bhi.n	10047662 <_check_callbacks+0x6e>
        /* End of expired timers list*/
        break;
      }
    }

    prev = curr;
1004764a:	69fb      	ldr	r3, [r7, #28]
1004764c:	61bb      	str	r3, [r7, #24]
    curr = curr->next;
1004764e:	69fb      	ldr	r3, [r7, #28]
10047650:	691b      	ldr	r3, [r3, #16]
10047652:	61fb      	str	r3, [r7, #28]
    expiredCount++;
10047654:	693b      	ldr	r3, [r7, #16]
10047656:	3301      	adds	r3, #1
10047658:	613b      	str	r3, [r7, #16]
  while (curr != NULL)
1004765a:	69fb      	ldr	r3, [r7, #28]
1004765c:	2b00      	cmp	r3, #0
1004765e:	d1da      	bne.n	10047616 <_check_callbacks+0x22>
10047660:	e000      	b.n	10047664 <_check_callbacks+0x70>
        break;
10047662:	46c0      	nop			@ (mov r8, r8)
  }

  if (expiredCount)
10047664:	693b      	ldr	r3, [r7, #16]
10047666:	2b00      	cmp	r3, #0
10047668:	d005      	beq.n	10047676 <_check_callbacks+0x82>
  {
    /* Some timers expired */
    prev->next = NULL;
1004766a:	69bb      	ldr	r3, [r7, #24]
1004766c:	2200      	movs	r2, #0
1004766e:	611a      	str	r2, [r3, #16]
    returnValue = curr;
10047670:	69fb      	ldr	r3, [r7, #28]
10047672:	617b      	str	r3, [r7, #20]
10047674:	e002      	b.n	1004767c <_check_callbacks+0x88>
  }
  else
  {
    /* No timer expired */
    *expiredList = NULL;
10047676:	683b      	ldr	r3, [r7, #0]
10047678:	2200      	movs	r2, #0
1004767a:	601a      	str	r2, [r3, #0]
  }

  return returnValue;
1004767c:	697b      	ldr	r3, [r7, #20]
}
1004767e:	0018      	movs	r0, r3
10047680:	46bd      	mov	sp, r7
10047682:	b008      	add	sp, #32
10047684:	bdb0      	pop	{r4, r5, r7, pc}
	...

10047688 <_updateCalibrationData>:

static void _updateCalibrationData(void)
{
10047688:	b580      	push	{r7, lr}
1004768a:	b084      	sub	sp, #16
1004768c:	af00      	add	r7, sp, #0
  if (RADIO_TIMER_Context.calibrationSettings.periodicCalibration)
1004768e:	4b17      	ldr	r3, [pc, #92]	@ (100476ec <_updateCalibrationData+0x64>)
10047690:	781b      	ldrb	r3, [r3, #0]
10047692:	2b00      	cmp	r3, #0
10047694:	d015      	beq.n	100476c2 <_updateCalibrationData+0x3a>
  {
    _get_calibration_data(&RADIO_TIMER_Context.calibrationData);
10047696:	4b16      	ldr	r3, [pc, #88]	@ (100476f0 <_updateCalibrationData+0x68>)
10047698:	0018      	movs	r0, r3
1004769a:	f7ff fc39 	bl	10046f10 <_get_calibration_data>
    _update_xtal_startup_time(RADIO_TIMER_Context.hs_startup_time, RADIO_TIMER_Context.calibrationData.freq1);
1004769e:	4b13      	ldr	r3, [pc, #76]	@ (100476ec <_updateCalibrationData+0x64>)
100476a0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
100476a2:	b29a      	uxth	r2, r3
100476a4:	4b11      	ldr	r3, [pc, #68]	@ (100476ec <_updateCalibrationData+0x64>)
100476a6:	699b      	ldr	r3, [r3, #24]
100476a8:	0019      	movs	r1, r3
100476aa:	0010      	movs	r0, r2
100476ac:	f7ff fd5c 	bl	10047168 <_update_xtal_startup_time>
    _configureTxRxDelay(&RADIO_TIMER_Context, FALSE);
100476b0:	4b0e      	ldr	r3, [pc, #56]	@ (100476ec <_updateCalibrationData+0x64>)
100476b2:	2100      	movs	r1, #0
100476b4:	0018      	movs	r0, r3
100476b6:	f7ff fc93 	bl	10046fe0 <_configureTxRxDelay>
    RADIO_TIMER_Context.calibrationData.calibration_data_available = 1;
100476ba:	4b0c      	ldr	r3, [pc, #48]	@ (100476ec <_updateCalibrationData+0x64>)
100476bc:	2234      	movs	r2, #52	@ 0x34
100476be:	2101      	movs	r1, #1
100476c0:	5499      	strb	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
100476c2:	f3ef 8310 	mrs	r3, PRIMASK
100476c6:	607b      	str	r3, [r7, #4]
  return(result);
100476c8:	687b      	ldr	r3, [r7, #4]
  }
  ATOMIC_SECTION_BEGIN();
100476ca:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
100476cc:	b672      	cpsid	i
}
100476ce:	46c0      	nop			@ (mov r8, r8)
  _update_system_time(&RADIO_TIMER_Context);
100476d0:	4b06      	ldr	r3, [pc, #24]	@ (100476ec <_updateCalibrationData+0x64>)
100476d2:	0018      	movs	r0, r3
100476d4:	f000 f80e 	bl	100476f4 <_update_system_time>
100476d8:	68fb      	ldr	r3, [r7, #12]
100476da:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
100476dc:	68bb      	ldr	r3, [r7, #8]
100476de:	f383 8810 	msr	PRIMASK, r3
}
100476e2:	46c0      	nop			@ (mov r8, r8)
  ATOMIC_SECTION_END();
}
100476e4:	46c0      	nop			@ (mov r8, r8)
100476e6:	46bd      	mov	sp, r7
100476e8:	b004      	add	sp, #16
100476ea:	bd80      	pop	{r7, pc}
100476ec:	20000598 	.word	0x20000598
100476f0:	200005a8 	.word	0x200005a8

100476f4 <_update_system_time>:

/* This function update the system time after a calibration.
 * If the user calls too often this function, you could have rounding issues in the integer maths.
 */
static void _update_system_time(RADIO_TIMER_ContextTypeDef *context)
{
100476f4:	b5b0      	push	{r4, r5, r7, lr}
100476f6:	b088      	sub	sp, #32
100476f8:	af00      	add	r7, sp, #0
100476fa:	6178      	str	r0, [r7, #20]
  uint32_t current_machine_time;
  uint32_t period;

  current_machine_time = LL_RADIO_TIMER_GetAbsoluteTime(WAKEUP);
100476fc:	4b2a      	ldr	r3, [pc, #168]	@ (100477a8 <_update_system_time+0xb4>)
100476fe:	0018      	movs	r0, r3
10047700:	f7fe fe43 	bl	1004638a <LL_RADIO_TIMER_GetAbsoluteTime>
10047704:	0003      	movs	r3, r0
10047706:	61fb      	str	r3, [r7, #28]
  period = context->calibrationData.last_period1;
10047708:	697b      	ldr	r3, [r7, #20]
1004770a:	6a1b      	ldr	r3, [r3, #32]
1004770c:	61bb      	str	r3, [r7, #24]
  context->cumulative_time = context->calibrationData.last_calibration_time + \
1004770e:	697b      	ldr	r3, [r7, #20]
10047710:	6a9c      	ldr	r4, [r3, #40]	@ 0x28
10047712:	6add      	ldr	r5, [r3, #44]	@ 0x2c
                             blue_unit_conversion(TIME_ABSDIFF(current_machine_time,
10047714:	697b      	ldr	r3, [r7, #20]
10047716:	2280      	movs	r2, #128	@ 0x80
10047718:	589b      	ldr	r3, [r3, r2]
1004771a:	69fa      	ldr	r2, [r7, #28]
1004771c:	1ad3      	subs	r3, r2, r3
1004771e:	4a23      	ldr	r2, [pc, #140]	@ (100477ac <_update_system_time+0xb8>)
10047720:	69b9      	ldr	r1, [r7, #24]
10047722:	0018      	movs	r0, r3
10047724:	f7f8 fccc 	bl	100400c0 <blue_unit_conversion>
10047728:	0003      	movs	r3, r0
1004772a:	60bb      	str	r3, [r7, #8]
1004772c:	2300      	movs	r3, #0
1004772e:	60fb      	str	r3, [r7, #12]
  context->cumulative_time = context->calibrationData.last_calibration_time + \
10047730:	68ba      	ldr	r2, [r7, #8]
10047732:	68fb      	ldr	r3, [r7, #12]
10047734:	1912      	adds	r2, r2, r4
10047736:	416b      	adcs	r3, r5
10047738:	6979      	ldr	r1, [r7, #20]
1004773a:	670a      	str	r2, [r1, #112]	@ 0x70
1004773c:	674b      	str	r3, [r1, #116]	@ 0x74
                                                               context->last_machine_time),
                                                  period, MULT64_THR_PERIOD);

  if ((context->calibrationSettings.periodicCalibration == 0)
1004773e:	697b      	ldr	r3, [r7, #20]
10047740:	781b      	ldrb	r3, [r3, #0]
10047742:	2b00      	cmp	r3, #0
10047744:	d11d      	bne.n	10047782 <_update_system_time+0x8e>
      && (TIME_ABSDIFF(current_machine_time,
10047746:	697b      	ldr	r3, [r7, #20]
10047748:	2280      	movs	r2, #128	@ 0x80
1004774a:	589b      	ldr	r3, [r3, r2]
1004774c:	69fa      	ldr	r2, [r7, #28]
1004774e:	1ad2      	subs	r2, r2, r3
                       context->last_machine_time) < context->calibrationData.calibration_machine_interval))
10047750:	697b      	ldr	r3, [r7, #20]
10047752:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
      && (TIME_ABSDIFF(current_machine_time,
10047754:	429a      	cmp	r2, r3
10047756:	d214      	bcs.n	10047782 <_update_system_time+0x8e>
  {
    context->cumulative_time += blue_unit_conversion(TIMER_MAX_VALUE, period, MULT64_THR_PERIOD);
10047758:	4a14      	ldr	r2, [pc, #80]	@ (100477ac <_update_system_time+0xb8>)
1004775a:	69b9      	ldr	r1, [r7, #24]
1004775c:	2301      	movs	r3, #1
1004775e:	425b      	negs	r3, r3
10047760:	0018      	movs	r0, r3
10047762:	f7f8 fcad 	bl	100400c0 <blue_unit_conversion>
10047766:	0001      	movs	r1, r0
10047768:	697b      	ldr	r3, [r7, #20]
1004776a:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
1004776c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
1004776e:	6039      	str	r1, [r7, #0]
10047770:	2100      	movs	r1, #0
10047772:	6079      	str	r1, [r7, #4]
10047774:	6838      	ldr	r0, [r7, #0]
10047776:	6879      	ldr	r1, [r7, #4]
10047778:	1812      	adds	r2, r2, r0
1004777a:	414b      	adcs	r3, r1
1004777c:	6979      	ldr	r1, [r7, #20]
1004777e:	670a      	str	r2, [r1, #112]	@ 0x70
10047780:	674b      	str	r3, [r1, #116]	@ 0x74
  }
  context->last_machine_time = current_machine_time;
10047782:	697b      	ldr	r3, [r7, #20]
10047784:	2180      	movs	r1, #128	@ 0x80
10047786:	69fa      	ldr	r2, [r7, #28]
10047788:	505a      	str	r2, [r3, r1]
  context->calibrationData.last_calibration_time = context->cumulative_time;
1004778a:	697b      	ldr	r3, [r7, #20]
1004778c:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
1004778e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
10047790:	6979      	ldr	r1, [r7, #20]
10047792:	628a      	str	r2, [r1, #40]	@ 0x28
10047794:	62cb      	str	r3, [r1, #44]	@ 0x2c
  context->calibrationData.last_period1 = context->calibrationData.period1;
10047796:	697b      	ldr	r3, [r7, #20]
10047798:	69da      	ldr	r2, [r3, #28]
1004779a:	697b      	ldr	r3, [r7, #20]
1004779c:	621a      	str	r2, [r3, #32]
}
1004779e:	46c0      	nop			@ (mov r8, r8)
100477a0:	46bd      	mov	sp, r7
100477a2:	b008      	add	sp, #32
100477a4:	bdb0      	pop	{r4, r5, r7, pc}
100477a6:	46c0      	nop			@ (mov r8, r8)
100477a8:	60001800 	.word	0x60001800
100477ac:	00000635 	.word	0x00000635

100477b0 <_check_radio_activity>:
   3) The radio event is after the next calibration event. Then the timer will be programmed with the latest values.
   The check on the next calibration event is made even though the calibration is disabled (max cal. interval)
   in order to avoid counter wrapping with timeouts far in the future.
*/
static void _check_radio_activity(RADIO_TIMER_RadioHandleTypeDef *timerHandle, uint8_t *expired)
{
100477b0:	b5b0      	push	{r4, r5, r7, lr}
100477b2:	b08a      	sub	sp, #40	@ 0x28
100477b4:	af00      	add	r7, sp, #0
100477b6:	6078      	str	r0, [r7, #4]
100477b8:	6039      	str	r1, [r7, #0]
  uint64_t nextCalibrationEvent, currentTime;
  *expired = 0;
100477ba:	683b      	ldr	r3, [r7, #0]
100477bc:	2200      	movs	r2, #0
100477be:	701a      	strb	r2, [r3, #0]
  if (timerHandle->pending)
100477c0:	687b      	ldr	r3, [r7, #4]
100477c2:	7a9b      	ldrb	r3, [r3, #10]
100477c4:	2b00      	cmp	r3, #0
100477c6:	d100      	bne.n	100477ca <_check_radio_activity+0x1a>
100477c8:	e075      	b.n	100478b6 <_check_radio_activity+0x106>
  {
    
    nextCalibrationEvent = RADIO_TIMER_Context.calibrationData.last_calibration_time + \
100477ca:	4b3d      	ldr	r3, [pc, #244]	@ (100478c0 <_check_radio_activity+0x110>)
100477cc:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
100477ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
                           RADIO_TIMER_Context.calibrationSettings.periodicCalibrationInterval;
100477d0:	493b      	ldr	r1, [pc, #236]	@ (100478c0 <_check_radio_activity+0x110>)
100477d2:	6849      	ldr	r1, [r1, #4]
100477d4:	000c      	movs	r4, r1
100477d6:	2100      	movs	r1, #0
100477d8:	000d      	movs	r5, r1
    nextCalibrationEvent = RADIO_TIMER_Context.calibrationData.last_calibration_time + \
100477da:	1912      	adds	r2, r2, r4
100477dc:	416b      	adcs	r3, r5
100477de:	623a      	str	r2, [r7, #32]
100477e0:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
100477e2:	f3ef 8310 	mrs	r3, PRIMASK
100477e6:	60fb      	str	r3, [r7, #12]
  return(result);
100477e8:	68fb      	ldr	r3, [r7, #12]

    ATOMIC_SECTION_BEGIN();
100477ea:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
100477ec:	b672      	cpsid	i
}
100477ee:	46c0      	nop			@ (mov r8, r8)
    currentTime = HAL_RADIO_TIMER_GetCurrentSysTime();
100477f0:	f7ff fa7a 	bl	10046ce8 <HAL_RADIO_TIMER_GetCurrentSysTime>
100477f4:	0002      	movs	r2, r0
100477f6:	000b      	movs	r3, r1
100477f8:	613a      	str	r2, [r7, #16]
100477fa:	617b      	str	r3, [r7, #20]
    if ((timerHandle->expiryTime < (nextCalibrationEvent + RADIO_ACTIVITY_MARGIN)) || \
100477fc:	687b      	ldr	r3, [r7, #4]
100477fe:	681a      	ldr	r2, [r3, #0]
10047800:	685b      	ldr	r3, [r3, #4]
10047802:	6a38      	ldr	r0, [r7, #32]
10047804:	6a79      	ldr	r1, [r7, #36]	@ 0x24
10047806:	24c8      	movs	r4, #200	@ 0xc8
10047808:	02a4      	lsls	r4, r4, #10
1004780a:	2500      	movs	r5, #0
1004780c:	1900      	adds	r0, r0, r4
1004780e:	4169      	adcs	r1, r5
10047810:	4299      	cmp	r1, r3
10047812:	d812      	bhi.n	1004783a <_check_radio_activity+0x8a>
10047814:	d101      	bne.n	1004781a <_check_radio_activity+0x6a>
10047816:	4290      	cmp	r0, r2
10047818:	d80f      	bhi.n	1004783a <_check_radio_activity+0x8a>
        (currentTime > (nextCalibrationEvent + CALIB_SAFE_THR)))
1004781a:	6a3a      	ldr	r2, [r7, #32]
1004781c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
1004781e:	20b9      	movs	r0, #185	@ 0xb9
10047820:	0040      	lsls	r0, r0, #1
10047822:	2100      	movs	r1, #0
10047824:	1812      	adds	r2, r2, r0
10047826:	414b      	adcs	r3, r1
    if ((timerHandle->expiryTime < (nextCalibrationEvent + RADIO_ACTIVITY_MARGIN)) || \
10047828:	6979      	ldr	r1, [r7, #20]
1004782a:	4299      	cmp	r1, r3
1004782c:	d805      	bhi.n	1004783a <_check_radio_activity+0x8a>
1004782e:	6979      	ldr	r1, [r7, #20]
10047830:	4299      	cmp	r1, r3
10047832:	d136      	bne.n	100478a2 <_check_radio_activity+0xf2>
10047834:	6939      	ldr	r1, [r7, #16]
10047836:	4291      	cmp	r1, r2
10047838:	d933      	bls.n	100478a2 <_check_radio_activity+0xf2>
    {
      if (timerHandle->expiryTime - TIMER1_INIT_DELAY > (currentTime + TIMER1_MARGIN))
1004783a:	687b      	ldr	r3, [r7, #4]
1004783c:	681a      	ldr	r2, [r3, #0]
1004783e:	685b      	ldr	r3, [r3, #4]
10047840:	204c      	movs	r0, #76	@ 0x4c
10047842:	4240      	negs	r0, r0
10047844:	17c1      	asrs	r1, r0, #31
10047846:	1880      	adds	r0, r0, r2
10047848:	4159      	adcs	r1, r3
1004784a:	693a      	ldr	r2, [r7, #16]
1004784c:	697b      	ldr	r3, [r7, #20]
1004784e:	240a      	movs	r4, #10
10047850:	2500      	movs	r5, #0
10047852:	1912      	adds	r2, r2, r4
10047854:	416b      	adcs	r3, r5
10047856:	4299      	cmp	r1, r3
10047858:	d802      	bhi.n	10047860 <_check_radio_activity+0xb0>
1004785a:	d11a      	bne.n	10047892 <_check_radio_activity+0xe2>
1004785c:	4290      	cmp	r0, r2
1004785e:	d918      	bls.n	10047892 <_check_radio_activity+0xe2>
      {
        *expired = TIMER_SetRadioTimerValue(timerHandle->expiryTime, timerHandle->event_type, timerHandle->cal_req);
10047860:	687b      	ldr	r3, [r7, #4]
10047862:	681a      	ldr	r2, [r3, #0]
10047864:	685b      	ldr	r3, [r3, #4]
10047866:	0010      	movs	r0, r2
10047868:	687b      	ldr	r3, [r7, #4]
1004786a:	7b19      	ldrb	r1, [r3, #12]
1004786c:	687b      	ldr	r3, [r7, #4]
1004786e:	7a1b      	ldrb	r3, [r3, #8]
10047870:	001a      	movs	r2, r3
10047872:	f000 f8d5 	bl	10047a20 <TIMER_SetRadioTimerValue>
10047876:	0003      	movs	r3, r0
10047878:	001a      	movs	r2, r3
1004787a:	683b      	ldr	r3, [r7, #0]
1004787c:	701a      	strb	r2, [r3, #0]
        timerHandle->pending = FALSE; /* timer has been served. No more pending */
1004787e:	687b      	ldr	r3, [r7, #4]
10047880:	2200      	movs	r2, #0
10047882:	729a      	strb	r2, [r3, #10]
        timerHandle->active = TRUE; /* timer has been programmed and it becomes ACTIVE */
10047884:	687b      	ldr	r3, [r7, #4]
10047886:	2201      	movs	r2, #1
10047888:	725a      	strb	r2, [r3, #9]
        timerHandle->intTxRx_to_be_served = TRUE;
1004788a:	687b      	ldr	r3, [r7, #4]
1004788c:	2201      	movs	r2, #1
1004788e:	72da      	strb	r2, [r3, #11]
      if (timerHandle->expiryTime - TIMER1_INIT_DELAY > (currentTime + TIMER1_MARGIN))
10047890:	e00b      	b.n	100478aa <_check_radio_activity+0xfa>
      }
      else
      {
        
        RADIO_TIMER_Context.radioTimer.pending = FALSE;
10047892:	4b0b      	ldr	r3, [pc, #44]	@ (100478c0 <_check_radio_activity+0x110>)
10047894:	2262      	movs	r2, #98	@ 0x62
10047896:	2100      	movs	r1, #0
10047898:	5499      	strb	r1, [r3, r2]
        *expired = 1;
1004789a:	683b      	ldr	r3, [r7, #0]
1004789c:	2201      	movs	r2, #1
1004789e:	701a      	strb	r2, [r3, #0]
      if (timerHandle->expiryTime - TIMER1_INIT_DELAY > (currentTime + TIMER1_MARGIN))
100478a0:	e003      	b.n	100478aa <_check_radio_activity+0xfa>
      }
    }
    else
    {
#if defined (STM32WB06) || defined (STM32WB07)
      RADIO_TIMER_Context.waitCal = 1;
100478a2:	4b07      	ldr	r3, [pc, #28]	@ (100478c0 <_check_radio_activity+0x110>)
100478a4:	229c      	movs	r2, #156	@ 0x9c
100478a6:	2101      	movs	r1, #1
100478a8:	5499      	strb	r1, [r3, r2]
100478aa:	69fb      	ldr	r3, [r7, #28]
100478ac:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
100478ae:	68bb      	ldr	r3, [r7, #8]
100478b0:	f383 8810 	msr	PRIMASK, r3
}
100478b4:	46c0      	nop			@ (mov r8, r8)
#endif
    }
    ATOMIC_SECTION_END();
    
  }
}
100478b6:	46c0      	nop			@ (mov r8, r8)
100478b8:	46bd      	mov	sp, r7
100478ba:	b00a      	add	sp, #40	@ 0x28
100478bc:	bdb0      	pop	{r4, r5, r7, pc}
100478be:	46c0      	nop			@ (mov r8, r8)
100478c0:	20000598 	.word	0x20000598

100478c4 <TIMER_SetRadioHostWakeupTime>:
  *          if other code commands the system to go to deep sleep.
  * @warning The API must be called with interrupts disabled to avoid programming the timer with a value in the past.
  * @return  Current time in MTU.
  */
static uint32_t TIMER_SetRadioHostWakeupTime(uint32_t delay, bool *share)
{
100478c4:	b580      	push	{r7, lr}
100478c6:	b084      	sub	sp, #16
100478c8:	af00      	add	r7, sp, #0
100478ca:	6078      	str	r0, [r7, #4]
100478cc:	6039      	str	r1, [r7, #0]
  uint32_t current_time;

  delay = blue_unit_conversion(delay, RADIO_TIMER_Context.calibrationData.freq1, MULT64_THR_FREQ) ;
100478ce:	4b2f      	ldr	r3, [pc, #188]	@ (1004798c <TIMER_SetRadioHostWakeupTime+0xc8>)
100478d0:	699b      	ldr	r3, [r3, #24]
100478d2:	0019      	movs	r1, r3
100478d4:	4a2e      	ldr	r2, [pc, #184]	@ (10047990 <TIMER_SetRadioHostWakeupTime+0xcc>)
100478d6:	687b      	ldr	r3, [r7, #4]
100478d8:	0018      	movs	r0, r3
100478da:	f7f8 fbf1 	bl	100400c0 <blue_unit_conversion>
100478de:	0003      	movs	r3, r0
100478e0:	607b      	str	r3, [r7, #4]
  /* If the delay is too small round to minimum 2 tick */
  delay = MAX(32, delay);
100478e2:	687b      	ldr	r3, [r7, #4]
100478e4:	2b20      	cmp	r3, #32
100478e6:	d200      	bcs.n	100478ea <TIMER_SetRadioHostWakeupTime+0x26>
100478e8:	2320      	movs	r3, #32
100478ea:	607b      	str	r3, [r7, #4]
  current_time = LL_RADIO_TIMER_GetAbsoluteTime(WAKEUP);
100478ec:	4b29      	ldr	r3, [pc, #164]	@ (10047994 <TIMER_SetRadioHostWakeupTime+0xd0>)
100478ee:	0018      	movs	r0, r3
100478f0:	f7fe fd4b 	bl	1004638a <LL_RADIO_TIMER_GetAbsoluteTime>
100478f4:	0003      	movs	r3, r0
100478f6:	60fb      	str	r3, [r7, #12]
  /* 4 least significant bits are not taken into account. Then let's round the value */
  LL_RADIO_TIMER_SetCPUWakeupTime(WAKEUP, ((current_time + (delay + 8)) & TIMER_MAX_VALUE));
100478f8:	687a      	ldr	r2, [r7, #4]
100478fa:	68fb      	ldr	r3, [r7, #12]
100478fc:	18d3      	adds	r3, r2, r3
100478fe:	3308      	adds	r3, #8
10047900:	4a24      	ldr	r2, [pc, #144]	@ (10047994 <TIMER_SetRadioHostWakeupTime+0xd0>)
10047902:	0019      	movs	r1, r3
10047904:	0010      	movs	r0, r2
10047906:	f7fe fd34 	bl	10046372 <LL_RADIO_TIMER_SetCPUWakeupTime>
  LL_RADIO_TIMER_EnableWakeupTimerLowPowerMode(WAKEUP);
1004790a:	4b22      	ldr	r3, [pc, #136]	@ (10047994 <TIMER_SetRadioHostWakeupTime+0xd0>)
1004790c:	0018      	movs	r0, r3
1004790e:	f7fe fd46 	bl	1004639e <LL_RADIO_TIMER_EnableWakeupTimerLowPowerMode>
  LL_RADIO_TIMER_EnableCPUWakeupTimer(WAKEUP);
10047912:	4b20      	ldr	r3, [pc, #128]	@ (10047994 <TIMER_SetRadioHostWakeupTime+0xd0>)
10047914:	0018      	movs	r0, r3
10047916:	f7fe fce7 	bl	100462e8 <LL_RADIO_TIMER_EnableCPUWakeupTimer>
  if ((LL_RADIO_TIMER_IsEnabledTimer1(BLUE) || LL_RADIO_TIMER_IsEnabledTimer2(BLUE) || (*share != TRUE)))
1004791a:	23c0      	movs	r3, #192	@ 0xc0
1004791c:	05db      	lsls	r3, r3, #23
1004791e:	0018      	movs	r0, r3
10047920:	f7fe fc67 	bl	100461f2 <LL_RADIO_TIMER_IsEnabledTimer1>
10047924:	1e03      	subs	r3, r0, #0
10047926:	d10d      	bne.n	10047944 <TIMER_SetRadioHostWakeupTime+0x80>
10047928:	23c0      	movs	r3, #192	@ 0xc0
1004792a:	05db      	lsls	r3, r3, #23
1004792c:	0018      	movs	r0, r3
1004792e:	f7fe fc80 	bl	10046232 <LL_RADIO_TIMER_IsEnabledTimer2>
10047932:	1e03      	subs	r3, r0, #0
10047934:	d106      	bne.n	10047944 <TIMER_SetRadioHostWakeupTime+0x80>
10047936:	683b      	ldr	r3, [r7, #0]
10047938:	781b      	ldrb	r3, [r3, #0]
1004793a:	2201      	movs	r2, #1
1004793c:	4053      	eors	r3, r2
1004793e:	b2db      	uxtb	r3, r3
10047940:	2b00      	cmp	r3, #0
10047942:	d004      	beq.n	1004794e <TIMER_SetRadioHostWakeupTime+0x8a>
  {
    *share = FALSE;
10047944:	683b      	ldr	r3, [r7, #0]
10047946:	2200      	movs	r2, #0
10047948:	701a      	strb	r2, [r3, #0]
    return current_time;
1004794a:	68fb      	ldr	r3, [r7, #12]
1004794c:	e01a      	b.n	10047984 <TIMER_SetRadioHostWakeupTime+0xc0>
  }
  _set_controller_as_host();
1004794e:	f000 f823 	bl	10047998 <_set_controller_as_host>
  /* 4 least significant bits are not taken into account. Then let's round the value */
  LL_RADIO_TIMER_SetBLEWakeupTime(WAKEUP, ((current_time + delay + 8) & 0xFFFFFFF0));
10047952:	68fa      	ldr	r2, [r7, #12]
10047954:	687b      	ldr	r3, [r7, #4]
10047956:	18d3      	adds	r3, r2, r3
10047958:	3308      	adds	r3, #8
1004795a:	220f      	movs	r2, #15
1004795c:	4393      	bics	r3, r2
1004795e:	4a0d      	ldr	r2, [pc, #52]	@ (10047994 <TIMER_SetRadioHostWakeupTime+0xd0>)
10047960:	0019      	movs	r1, r3
10047962:	0010      	movs	r0, r2
10047964:	f7fe fcef 	bl	10046346 <LL_RADIO_TIMER_SetBLEWakeupTime>
  LL_RADIO_TIMER_SetSleepRequestMode(WAKEUP, 0);
10047968:	4b0a      	ldr	r3, [pc, #40]	@ (10047994 <TIMER_SetRadioHostWakeupTime+0xd0>)
1004796a:	2100      	movs	r1, #0
1004796c:	0018      	movs	r0, r3
1004796e:	f7fe fd25 	bl	100463bc <LL_RADIO_TIMER_SetSleepRequestMode>
  LL_RADIO_TIMER_EnableBLEWakeupTimer(WAKEUP);
10047972:	4b08      	ldr	r3, [pc, #32]	@ (10047994 <TIMER_SetRadioHostWakeupTime+0xd0>)
10047974:	0018      	movs	r0, r3
10047976:	f7fe fc83 	bl	10046280 <LL_RADIO_TIMER_EnableBLEWakeupTimer>
  LL_RADIO_TIMER_EnableWakeupTimerLowPowerMode(WAKEUP);
1004797a:	4b06      	ldr	r3, [pc, #24]	@ (10047994 <TIMER_SetRadioHostWakeupTime+0xd0>)
1004797c:	0018      	movs	r0, r3
1004797e:	f7fe fd0e 	bl	1004639e <LL_RADIO_TIMER_EnableWakeupTimerLowPowerMode>
  return current_time;
10047982:	68fb      	ldr	r3, [r7, #12]
}
10047984:	0018      	movs	r0, r3
10047986:	46bd      	mov	sp, r7
10047988:	b004      	add	sp, #16
1004798a:	bd80      	pop	{r7, pc}
1004798c:	20000598 	.word	0x20000598
10047990:	00000326 	.word	0x00000326
10047994:	60001800 	.word	0x60001800

10047998 <_set_controller_as_host>:

static void _set_controller_as_host(void)
{
10047998:	b580      	push	{r7, lr}
1004799a:	af00      	add	r7, sp, #0
  BLUEGLOB->BYTE4 &= ~(1 << 7);
1004799c:	4b08      	ldr	r3, [pc, #32]	@ (100479c0 <_set_controller_as_host+0x28>)
1004799e:	791b      	ldrb	r3, [r3, #4]
100479a0:	b2db      	uxtb	r3, r3
100479a2:	4a07      	ldr	r2, [pc, #28]	@ (100479c0 <_set_controller_as_host+0x28>)
100479a4:	217f      	movs	r1, #127	@ 0x7f
100479a6:	400b      	ands	r3, r1
100479a8:	b2db      	uxtb	r3, r3
100479aa:	7113      	strb	r3, [r2, #4]
  BLUEGLOB->BYTE22 = 0x0;
100479ac:	4b04      	ldr	r3, [pc, #16]	@ (100479c0 <_set_controller_as_host+0x28>)
100479ae:	2200      	movs	r2, #0
100479b0:	759a      	strb	r2, [r3, #22]
  BLUEGLOB->BYTE23 = 0x0;
100479b2:	4b03      	ldr	r3, [pc, #12]	@ (100479c0 <_set_controller_as_host+0x28>)
100479b4:	2200      	movs	r2, #0
100479b6:	75da      	strb	r2, [r3, #23]
}
100479b8:	46c0      	nop			@ (mov r8, r8)
100479ba:	46bd      	mov	sp, r7
100479bc:	bd80      	pop	{r7, pc}
100479be:	46c0      	nop			@ (mov r8, r8)
100479c0:	200000c0 	.word	0x200000c0

100479c4 <_check_host_activity>:

static void _check_host_activity(void)
{
100479c4:	b580      	push	{r7, lr}
100479c6:	b082      	sub	sp, #8
100479c8:	af00      	add	r7, sp, #0
  uint8_t expired;
  RADIO_TIMER_Context.rootNode = _update_user_timeout(RADIO_TIMER_Context.rootNode, &expired);
100479ca:	4b14      	ldr	r3, [pc, #80]	@ (10047a1c <_check_host_activity+0x58>)
100479cc:	228c      	movs	r2, #140	@ 0x8c
100479ce:	589b      	ldr	r3, [r3, r2]
100479d0:	1dfa      	adds	r2, r7, #7
100479d2:	0011      	movs	r1, r2
100479d4:	0018      	movs	r0, r3
100479d6:	f7ff fccf 	bl	10047378 <_update_user_timeout>
100479da:	0002      	movs	r2, r0
100479dc:	4b0f      	ldr	r3, [pc, #60]	@ (10047a1c <_check_host_activity+0x58>)
100479de:	218c      	movs	r1, #140	@ 0x8c
100479e0:	505a      	str	r2, [r3, r1]
  if (expired == 1)
100479e2:	1dfb      	adds	r3, r7, #7
100479e4:	781b      	ldrb	r3, [r3, #0]
100479e6:	2b01      	cmp	r3, #1
100479e8:	d114      	bne.n	10047a14 <_check_host_activity+0x50>
  {
    /* A new root timer is already expired, mimic timer expire */
    INCREMENT_EXPIRE_COUNT_ISR;
100479ea:	4b0c      	ldr	r3, [pc, #48]	@ (10047a1c <_check_host_activity+0x58>)
100479ec:	2291      	movs	r2, #145	@ 0x91
100479ee:	5c9b      	ldrb	r3, [r3, r2]
100479f0:	3301      	adds	r3, #1
100479f2:	4a0a      	ldr	r2, [pc, #40]	@ (10047a1c <_check_host_activity+0x58>)
100479f4:	2192      	movs	r1, #146	@ 0x92
100479f6:	5c52      	ldrb	r2, [r2, r1]
100479f8:	4293      	cmp	r3, r2
100479fa:	d103      	bne.n	10047a04 <_check_host_activity+0x40>
100479fc:	4b07      	ldr	r3, [pc, #28]	@ (10047a1c <_check_host_activity+0x58>)
100479fe:	2291      	movs	r2, #145	@ 0x91
10047a00:	5c9b      	ldrb	r3, [r3, r2]
10047a02:	e004      	b.n	10047a0e <_check_host_activity+0x4a>
10047a04:	4b05      	ldr	r3, [pc, #20]	@ (10047a1c <_check_host_activity+0x58>)
10047a06:	2291      	movs	r2, #145	@ 0x91
10047a08:	5c9b      	ldrb	r3, [r3, r2]
10047a0a:	3301      	adds	r3, #1
10047a0c:	b2db      	uxtb	r3, r3
10047a0e:	4a03      	ldr	r2, [pc, #12]	@ (10047a1c <_check_host_activity+0x58>)
10047a10:	2191      	movs	r1, #145	@ 0x91
10047a12:	5453      	strb	r3, [r2, r1]
  }
}
10047a14:	46c0      	nop			@ (mov r8, r8)
10047a16:	46bd      	mov	sp, r7
10047a18:	b002      	add	sp, #8
10047a1a:	bd80      	pop	{r7, pc}
10047a1c:	20000598 	.word	0x20000598

10047a20 <TIMER_SetRadioTimerValue>:
  * @warning The API must be called with interrupts disabled to avoid programming the timer with a value in the past
  * @retval  0 if a correct timeout has been programmed in the timeout register
  * @retval  1 if a correct timeout cannot be programmed
  */
static uint8_t TIMER_SetRadioTimerValue(uint32_t timeout, bool event_type, bool cal_req)
{
10047a20:	b580      	push	{r7, lr}
10047a22:	b08a      	sub	sp, #40	@ 0x28
10047a24:	af00      	add	r7, sp, #0
10047a26:	6078      	str	r0, [r7, #4]
10047a28:	0008      	movs	r0, r1
10047a2a:	0011      	movs	r1, r2
10047a2c:	1cfb      	adds	r3, r7, #3
10047a2e:	1c02      	adds	r2, r0, #0
10047a30:	701a      	strb	r2, [r3, #0]
10047a32:	1cbb      	adds	r3, r7, #2
10047a34:	1c0a      	adds	r2, r1, #0
10047a36:	701a      	strb	r2, [r3, #0]
  uint32_t current_time, delay, radio_init_delay, device_delay, rel_timeout, rel_timeout_mt;
  uint8_t ret_val;

  /*choose the 2nd init duration. Check the event_type and cal. request*/
  if (event_type == TX)
10047a38:	1cfb      	adds	r3, r7, #3
10047a3a:	781b      	ldrb	r3, [r3, #0]
10047a3c:	2b00      	cmp	r3, #0
10047a3e:	d015      	beq.n	10047a6c <TIMER_SetRadioTimerValue+0x4c>
  {
    if (cal_req)
10047a40:	1cbb      	adds	r3, r7, #2
10047a42:	781b      	ldrb	r3, [r3, #0]
10047a44:	2b00      	cmp	r3, #0
10047a46:	d008      	beq.n	10047a5a <TIMER_SetRadioTimerValue+0x3a>
    {
      radio_init_delay = RADIO_TIMER_Context.TxRxDelay.tx_cal_delay;
10047a48:	4b6e      	ldr	r3, [pc, #440]	@ (10047c04 <TIMER_SetRadioTimerValue+0x1e4>)
10047a4a:	2238      	movs	r2, #56	@ 0x38
10047a4c:	5c9b      	ldrb	r3, [r3, r2]
10047a4e:	623b      	str	r3, [r7, #32]
      device_delay = RADIO_TIMER_Context.TxRxDelay.tx_cal_delay_st;
10047a50:	4b6c      	ldr	r3, [pc, #432]	@ (10047c04 <TIMER_SetRadioTimerValue+0x1e4>)
10047a52:	223c      	movs	r2, #60	@ 0x3c
10047a54:	5c9b      	ldrb	r3, [r3, r2]
10047a56:	61fb      	str	r3, [r7, #28]
10047a58:	e01d      	b.n	10047a96 <TIMER_SetRadioTimerValue+0x76>
    }
    else
    {
      radio_init_delay = RADIO_TIMER_Context.TxRxDelay.tx_no_cal_delay;
10047a5a:	4b6a      	ldr	r3, [pc, #424]	@ (10047c04 <TIMER_SetRadioTimerValue+0x1e4>)
10047a5c:	2239      	movs	r2, #57	@ 0x39
10047a5e:	5c9b      	ldrb	r3, [r3, r2]
10047a60:	623b      	str	r3, [r7, #32]
      device_delay = RADIO_TIMER_Context.TxRxDelay.tx_cal_delay_st;
10047a62:	4b68      	ldr	r3, [pc, #416]	@ (10047c04 <TIMER_SetRadioTimerValue+0x1e4>)
10047a64:	223c      	movs	r2, #60	@ 0x3c
10047a66:	5c9b      	ldrb	r3, [r3, r2]
10047a68:	61fb      	str	r3, [r7, #28]
10047a6a:	e014      	b.n	10047a96 <TIMER_SetRadioTimerValue+0x76>
    }
  }
  else
  {
    if (cal_req)
10047a6c:	1cbb      	adds	r3, r7, #2
10047a6e:	781b      	ldrb	r3, [r3, #0]
10047a70:	2b00      	cmp	r3, #0
10047a72:	d008      	beq.n	10047a86 <TIMER_SetRadioTimerValue+0x66>
    {
      radio_init_delay = RADIO_TIMER_Context.TxRxDelay.rx_cal_delay;
10047a74:	4b63      	ldr	r3, [pc, #396]	@ (10047c04 <TIMER_SetRadioTimerValue+0x1e4>)
10047a76:	223a      	movs	r2, #58	@ 0x3a
10047a78:	5c9b      	ldrb	r3, [r3, r2]
10047a7a:	623b      	str	r3, [r7, #32]
      device_delay = RADIO_TIMER_Context.TxRxDelay.tx_cal_delay_st;
10047a7c:	4b61      	ldr	r3, [pc, #388]	@ (10047c04 <TIMER_SetRadioTimerValue+0x1e4>)
10047a7e:	223c      	movs	r2, #60	@ 0x3c
10047a80:	5c9b      	ldrb	r3, [r3, r2]
10047a82:	61fb      	str	r3, [r7, #28]
10047a84:	e007      	b.n	10047a96 <TIMER_SetRadioTimerValue+0x76>
    }
    else
    {
      radio_init_delay = RADIO_TIMER_Context.TxRxDelay.rx_no_cal_delay;
10047a86:	4b5f      	ldr	r3, [pc, #380]	@ (10047c04 <TIMER_SetRadioTimerValue+0x1e4>)
10047a88:	223b      	movs	r2, #59	@ 0x3b
10047a8a:	5c9b      	ldrb	r3, [r3, r2]
10047a8c:	623b      	str	r3, [r7, #32]
      device_delay = RADIO_TIMER_Context.TxRxDelay.tx_cal_delay_st;
10047a8e:	4b5d      	ldr	r3, [pc, #372]	@ (10047c04 <TIMER_SetRadioTimerValue+0x1e4>)
10047a90:	223c      	movs	r2, #60	@ 0x3c
10047a92:	5c9b      	ldrb	r3, [r3, r2]
10047a94:	61fb      	str	r3, [r7, #28]
    }
  }

  /* At this point, it is care of the upper layers to guarantee that the timeout represents an absolute time in the future */
  rel_timeout = timeout - (uint32_t)_get_system_time_and_machine(&RADIO_TIMER_Context, &current_time);
10047a96:	230c      	movs	r3, #12
10047a98:	18fa      	adds	r2, r7, r3
10047a9a:	4b5a      	ldr	r3, [pc, #360]	@ (10047c04 <TIMER_SetRadioTimerValue+0x1e4>)
10047a9c:	0011      	movs	r1, r2
10047a9e:	0018      	movs	r0, r3
10047aa0:	f7ff fc02 	bl	100472a8 <_get_system_time_and_machine>
10047aa4:	0002      	movs	r2, r0
10047aa6:	000b      	movs	r3, r1
10047aa8:	687b      	ldr	r3, [r7, #4]
10047aaa:	1a9b      	subs	r3, r3, r2
10047aac:	617b      	str	r3, [r7, #20]

  rel_timeout_mt =  blue_unit_conversion(rel_timeout, RADIO_TIMER_Context.calibrationData.freq1, MULT64_THR_FREQ);
10047aae:	4b55      	ldr	r3, [pc, #340]	@ (10047c04 <TIMER_SetRadioTimerValue+0x1e4>)
10047ab0:	699b      	ldr	r3, [r3, #24]
10047ab2:	0019      	movs	r1, r3
10047ab4:	4a54      	ldr	r2, [pc, #336]	@ (10047c08 <TIMER_SetRadioTimerValue+0x1e8>)
10047ab6:	697b      	ldr	r3, [r7, #20]
10047ab8:	0018      	movs	r0, r3
10047aba:	f7f8 fb01 	bl	100400c0 <blue_unit_conversion>
10047abe:	0003      	movs	r3, r0
10047ac0:	613b      	str	r3, [r7, #16]

  /*Check if the timeout is beyond the wakeup time offset. Then program either the WakeUp timer or the Timer1*/
  if (rel_timeout > (device_delay + RADIO_TIMER_Context.hs_startup_time + MARGIN_EXT))
10047ac2:	4b50      	ldr	r3, [pc, #320]	@ (10047c04 <TIMER_SetRadioTimerValue+0x1e4>)
10047ac4:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
10047ac6:	69fb      	ldr	r3, [r7, #28]
10047ac8:	18d3      	adds	r3, r2, r3
10047aca:	33c8      	adds	r3, #200	@ 0xc8
10047acc:	697a      	ldr	r2, [r7, #20]
10047ace:	429a      	cmp	r2, r3
10047ad0:	d92f      	bls.n	10047b32 <TIMER_SetRadioTimerValue+0x112>
  {
    /*The timeout is after the wakeup_time_offset, So it is ok to program the wakeup timer*/
    delay = rel_timeout_mt - BLUEGLOB->WAKEUPINITDELAY - radio_init_delay;
10047ad2:	4b4e      	ldr	r3, [pc, #312]	@ (10047c0c <TIMER_SetRadioTimerValue+0x1ec>)
10047ad4:	795b      	ldrb	r3, [r3, #5]
10047ad6:	b2db      	uxtb	r3, r3
10047ad8:	001a      	movs	r2, r3
10047ada:	693b      	ldr	r3, [r7, #16]
10047adc:	1a9a      	subs	r2, r3, r2
10047ade:	6a3b      	ldr	r3, [r7, #32]
10047ae0:	1ad3      	subs	r3, r2, r3
10047ae2:	627b      	str	r3, [r7, #36]	@ 0x24
    LL_RADIO_TIMER_SetBLEWakeupTime(WAKEUP, ((current_time + delay) & TIMER_MAX_VALUE));
10047ae4:	68fa      	ldr	r2, [r7, #12]
10047ae6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10047ae8:	18d3      	adds	r3, r2, r3
10047aea:	4a49      	ldr	r2, [pc, #292]	@ (10047c10 <TIMER_SetRadioTimerValue+0x1f0>)
10047aec:	0019      	movs	r1, r3
10047aee:	0010      	movs	r0, r2
10047af0:	f7fe fc29 	bl	10046346 <LL_RADIO_TIMER_SetBLEWakeupTime>
    LL_RADIO_TIMER_SetSleepRequestMode(WAKEUP, 0);
10047af4:	4b46      	ldr	r3, [pc, #280]	@ (10047c10 <TIMER_SetRadioTimerValue+0x1f0>)
10047af6:	2100      	movs	r1, #0
10047af8:	0018      	movs	r0, r3
10047afa:	f7fe fc5f 	bl	100463bc <LL_RADIO_TIMER_SetSleepRequestMode>
    LL_RADIO_TIMER_DisableTimer1(BLUE);
10047afe:	23c0      	movs	r3, #192	@ 0xc0
10047b00:	05db      	lsls	r3, r3, #23
10047b02:	0018      	movs	r0, r3
10047b04:	f7fe fb66 	bl	100461d4 <LL_RADIO_TIMER_DisableTimer1>
    LL_RADIO_TIMER_DisableTimer2(BLUE);
10047b08:	23c0      	movs	r3, #192	@ 0xc0
10047b0a:	05db      	lsls	r3, r3, #23
10047b0c:	0018      	movs	r0, r3
10047b0e:	f7fe fb81 	bl	10046214 <LL_RADIO_TIMER_DisableTimer2>
    LL_RADIO_TIMER_EnableBLEWakeupTimer(WAKEUP);
10047b12:	4b3f      	ldr	r3, [pc, #252]	@ (10047c10 <TIMER_SetRadioTimerValue+0x1f0>)
10047b14:	0018      	movs	r0, r3
10047b16:	f7fe fbb3 	bl	10046280 <LL_RADIO_TIMER_EnableBLEWakeupTimer>
    LL_RADIO_TIMER_EnableWakeupTimerLowPowerMode(WAKEUP);
10047b1a:	4b3d      	ldr	r3, [pc, #244]	@ (10047c10 <TIMER_SetRadioTimerValue+0x1f0>)
10047b1c:	0018      	movs	r0, r3
10047b1e:	f7fe fc3e 	bl	1004639e <LL_RADIO_TIMER_EnableWakeupTimerLowPowerMode>
    radio_init_delay += BLUEGLOB->WAKEUPINITDELAY;
10047b22:	4b3a      	ldr	r3, [pc, #232]	@ (10047c0c <TIMER_SetRadioTimerValue+0x1ec>)
10047b24:	795b      	ldrb	r3, [r3, #5]
10047b26:	b2db      	uxtb	r3, r3
10047b28:	001a      	movs	r2, r3
10047b2a:	6a3b      	ldr	r3, [r7, #32]
10047b2c:	189b      	adds	r3, r3, r2
10047b2e:	623b      	str	r3, [r7, #32]
10047b30:	e021      	b.n	10047b76 <TIMER_SetRadioTimerValue+0x156>
  }
  else
  {
    delay = rel_timeout_mt - RADIO_TIMER_Context.TxRxDelay.tim12_delay_mt - radio_init_delay;
10047b32:	4b34      	ldr	r3, [pc, #208]	@ (10047c04 <TIMER_SetRadioTimerValue+0x1e4>)
10047b34:	223d      	movs	r2, #61	@ 0x3d
10047b36:	5c9b      	ldrb	r3, [r3, r2]
10047b38:	001a      	movs	r2, r3
10047b3a:	693b      	ldr	r3, [r7, #16]
10047b3c:	1a9a      	subs	r2, r3, r2
10047b3e:	6a3b      	ldr	r3, [r7, #32]
10047b40:	1ad3      	subs	r3, r2, r3
10047b42:	627b      	str	r3, [r7, #36]	@ 0x24
    LL_RADIO_TIMER_SetTimeout(BLUE, ((current_time + delay) & TIMER_MAX_VALUE));
10047b44:	68fa      	ldr	r2, [r7, #12]
10047b46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10047b48:	18d2      	adds	r2, r2, r3
10047b4a:	23c0      	movs	r3, #192	@ 0xc0
10047b4c:	05db      	lsls	r3, r3, #23
10047b4e:	0011      	movs	r1, r2
10047b50:	0018      	movs	r0, r3
10047b52:	f7fe fb7f 	bl	10046254 <LL_RADIO_TIMER_SetTimeout>
    LL_RADIO_TIMER_DisableBLEWakeupTimer(WAKEUP);
10047b56:	4b2e      	ldr	r3, [pc, #184]	@ (10047c10 <TIMER_SetRadioTimerValue+0x1f0>)
10047b58:	0018      	movs	r0, r3
10047b5a:	f7fe fba1 	bl	100462a0 <LL_RADIO_TIMER_DisableBLEWakeupTimer>
    LL_RADIO_TIMER_EnableTimer1(BLUE);
10047b5e:	23c0      	movs	r3, #192	@ 0xc0
10047b60:	05db      	lsls	r3, r3, #23
10047b62:	0018      	movs	r0, r3
10047b64:	f7fe fb26 	bl	100461b4 <LL_RADIO_TIMER_EnableTimer1>
    radio_init_delay += RADIO_TIMER_Context.TxRxDelay.tim12_delay_mt;
10047b68:	4b26      	ldr	r3, [pc, #152]	@ (10047c04 <TIMER_SetRadioTimerValue+0x1e4>)
10047b6a:	223d      	movs	r2, #61	@ 0x3d
10047b6c:	5c9b      	ldrb	r3, [r3, r2]
10047b6e:	001a      	movs	r2, r3
10047b70:	6a3b      	ldr	r3, [r7, #32]
10047b72:	189b      	adds	r3, r3, r2
10047b74:	623b      	str	r3, [r7, #32]
  }

  RADIO_TIMER_Context.last_anchor_mt = (current_time + rel_timeout_mt) & TIMER_MAX_VALUE;
10047b76:	68fa      	ldr	r2, [r7, #12]
10047b78:	693b      	ldr	r3, [r7, #16]
10047b7a:	18d2      	adds	r2, r2, r3
10047b7c:	4b21      	ldr	r3, [pc, #132]	@ (10047c04 <TIMER_SetRadioTimerValue+0x1e4>)
10047b7e:	2188      	movs	r1, #136	@ 0x88
10047b80:	505a      	str	r2, [r3, r1]

#if defined (STM32WB06) || defined (STM32WB07)
  BLUEGLOB->BYTE4 |= 1 << 7;
10047b82:	4b22      	ldr	r3, [pc, #136]	@ (10047c0c <TIMER_SetRadioTimerValue+0x1ec>)
10047b84:	791b      	ldrb	r3, [r3, #4]
10047b86:	b2db      	uxtb	r3, r3
10047b88:	4920      	ldr	r1, [pc, #128]	@ (10047c0c <TIMER_SetRadioTimerValue+0x1ec>)
10047b8a:	2280      	movs	r2, #128	@ 0x80
10047b8c:	4252      	negs	r2, r2
10047b8e:	4313      	orrs	r3, r2
10047b90:	b2db      	uxtb	r3, r3
10047b92:	710b      	strb	r3, [r1, #4]
  BLUEGLOB->BYTE22 = 0xF0;
10047b94:	4b1d      	ldr	r3, [pc, #116]	@ (10047c0c <TIMER_SetRadioTimerValue+0x1ec>)
10047b96:	22f0      	movs	r2, #240	@ 0xf0
10047b98:	759a      	strb	r2, [r3, #22]
  BLUEGLOB->BYTE23 = 0xFF;
10047b9a:	4b1c      	ldr	r3, [pc, #112]	@ (10047c0c <TIMER_SetRadioTimerValue+0x1ec>)
10047b9c:	22ff      	movs	r2, #255	@ 0xff
10047b9e:	75da      	strb	r2, [r3, #23]
#endif

  /* Basic low level check with an extra margin of machine units */
  if ((delay + radio_init_delay) < (radio_init_delay + 5))
10047ba0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
10047ba2:	6a3b      	ldr	r3, [r7, #32]
10047ba4:	18d2      	adds	r2, r2, r3
10047ba6:	6a3b      	ldr	r3, [r7, #32]
10047ba8:	3305      	adds	r3, #5
10047baa:	429a      	cmp	r2, r3
10047bac:	d212      	bcs.n	10047bd4 <TIMER_SetRadioTimerValue+0x1b4>
  {
    LL_RADIO_TIMER_DisableTimer1(BLUE);
10047bae:	23c0      	movs	r3, #192	@ 0xc0
10047bb0:	05db      	lsls	r3, r3, #23
10047bb2:	0018      	movs	r0, r3
10047bb4:	f7fe fb0e 	bl	100461d4 <LL_RADIO_TIMER_DisableTimer1>
    LL_RADIO_TIMER_DisableTimer2(BLUE);
10047bb8:	23c0      	movs	r3, #192	@ 0xc0
10047bba:	05db      	lsls	r3, r3, #23
10047bbc:	0018      	movs	r0, r3
10047bbe:	f7fe fb29 	bl	10046214 <LL_RADIO_TIMER_DisableTimer2>
    LL_RADIO_TIMER_DisableBLEWakeupTimer(WAKEUP);
10047bc2:	4b13      	ldr	r3, [pc, #76]	@ (10047c10 <TIMER_SetRadioTimerValue+0x1f0>)
10047bc4:	0018      	movs	r0, r3
10047bc6:	f7fe fb6b 	bl	100462a0 <LL_RADIO_TIMER_DisableBLEWakeupTimer>
    ret_val =  1;
10047bca:	231b      	movs	r3, #27
10047bcc:	18fb      	adds	r3, r7, r3
10047bce:	2201      	movs	r2, #1
10047bd0:	701a      	strb	r2, [r3, #0]
10047bd2:	e010      	b.n	10047bf6 <TIMER_SetRadioTimerValue+0x1d6>
  }
  else
  {
    RADIO_TIMER_Context.last_setup_time = blue_unit_conversion(radio_init_delay, RADIO_TIMER_Context.calibrationData.period1, MULT64_THR_PERIOD);
10047bd4:	4b0b      	ldr	r3, [pc, #44]	@ (10047c04 <TIMER_SetRadioTimerValue+0x1e4>)
10047bd6:	69db      	ldr	r3, [r3, #28]
10047bd8:	0019      	movs	r1, r3
10047bda:	4a0e      	ldr	r2, [pc, #56]	@ (10047c14 <TIMER_SetRadioTimerValue+0x1f4>)
10047bdc:	6a3b      	ldr	r3, [r7, #32]
10047bde:	0018      	movs	r0, r3
10047be0:	f7f8 fa6e 	bl	100400c0 <blue_unit_conversion>
10047be4:	0003      	movs	r3, r0
10047be6:	b2d9      	uxtb	r1, r3
10047be8:	4b06      	ldr	r3, [pc, #24]	@ (10047c04 <TIMER_SetRadioTimerValue+0x1e4>)
10047bea:	2284      	movs	r2, #132	@ 0x84
10047bec:	5499      	strb	r1, [r3, r2]
    ret_val = 0;
10047bee:	231b      	movs	r3, #27
10047bf0:	18fb      	adds	r3, r7, r3
10047bf2:	2200      	movs	r2, #0
10047bf4:	701a      	strb	r2, [r3, #0]
  }

  return ret_val;
10047bf6:	231b      	movs	r3, #27
10047bf8:	18fb      	adds	r3, r7, r3
10047bfa:	781b      	ldrb	r3, [r3, #0]
}
10047bfc:	0018      	movs	r0, r3
10047bfe:	46bd      	mov	sp, r7
10047c00:	b00a      	add	sp, #40	@ 0x28
10047c02:	bd80      	pop	{r7, pc}
10047c04:	20000598 	.word	0x20000598
10047c08:	00000326 	.word	0x00000326
10047c0c:	200000c0 	.word	0x200000c0
10047c10:	60001800 	.word	0x60001800
10047c14:	00000635 	.word	0x00000635

10047c18 <TIMER_GetPastSysTime>:
  * @param   current_system_time: Current System time
  * @warning User should guarantee that call to this function are performed in a non-interruptible context.
  * @return  STU value
  */
static uint64_t TIMER_GetPastSysTime(uint32_t time, uint64_t *current_system_time)
{
10047c18:	b5b0      	push	{r4, r5, r7, lr}
10047c1a:	b084      	sub	sp, #16
10047c1c:	af00      	add	r7, sp, #0
10047c1e:	6078      	str	r0, [r7, #4]
10047c20:	6039      	str	r1, [r7, #0]
  uint32_t delta_systime, current_machine_time;

  *current_system_time = _get_system_time_and_machine(&RADIO_TIMER_Context, &current_machine_time);
10047c22:	2308      	movs	r3, #8
10047c24:	18fa      	adds	r2, r7, r3
10047c26:	4b12      	ldr	r3, [pc, #72]	@ (10047c70 <TIMER_GetPastSysTime+0x58>)
10047c28:	0011      	movs	r1, r2
10047c2a:	0018      	movs	r0, r3
10047c2c:	f7ff fb3c 	bl	100472a8 <_get_system_time_and_machine>
10047c30:	0002      	movs	r2, r0
10047c32:	000b      	movs	r3, r1
10047c34:	6839      	ldr	r1, [r7, #0]
10047c36:	600a      	str	r2, [r1, #0]
10047c38:	604b      	str	r3, [r1, #4]
  delta_systime = blue_unit_conversion(TIME_DIFF(current_machine_time, time), RADIO_TIMER_Context.calibrationData.period1, MULT64_THR_PERIOD);
10047c3a:	68ba      	ldr	r2, [r7, #8]
10047c3c:	687b      	ldr	r3, [r7, #4]
10047c3e:	1ad0      	subs	r0, r2, r3
10047c40:	4b0b      	ldr	r3, [pc, #44]	@ (10047c70 <TIMER_GetPastSysTime+0x58>)
10047c42:	69db      	ldr	r3, [r3, #28]
10047c44:	0019      	movs	r1, r3
10047c46:	4b0b      	ldr	r3, [pc, #44]	@ (10047c74 <TIMER_GetPastSysTime+0x5c>)
10047c48:	001a      	movs	r2, r3
10047c4a:	f7f8 fa39 	bl	100400c0 <blue_unit_conversion>
10047c4e:	0003      	movs	r3, r0
10047c50:	60fb      	str	r3, [r7, #12]

  return (*current_system_time - delta_systime);
10047c52:	683b      	ldr	r3, [r7, #0]
10047c54:	681a      	ldr	r2, [r3, #0]
10047c56:	685b      	ldr	r3, [r3, #4]
10047c58:	68f9      	ldr	r1, [r7, #12]
10047c5a:	000c      	movs	r4, r1
10047c5c:	2100      	movs	r1, #0
10047c5e:	000d      	movs	r5, r1
10047c60:	1b12      	subs	r2, r2, r4
10047c62:	41ab      	sbcs	r3, r5
}
10047c64:	0010      	movs	r0, r2
10047c66:	0019      	movs	r1, r3
10047c68:	46bd      	mov	sp, r7
10047c6a:	b004      	add	sp, #16
10047c6c:	bdb0      	pop	{r4, r5, r7, pc}
10047c6e:	46c0      	nop			@ (mov r8, r8)
10047c70:	20000598 	.word	0x20000598
10047c74:	00000635 	.word	0x00000635

10047c78 <TIMER_GetRadioTimerValue>:
  * @retval 1 if Timer1 has been programmed.
  * @retval 2 if Timer2 has been programmed.
  * @retval 3 if Wakeup Timer has been programmed.
  */
static uint8_t TIMER_GetRadioTimerValue(uint32_t *time)
{
10047c78:	b580      	push	{r7, lr}
10047c7a:	b082      	sub	sp, #8
10047c7c:	af00      	add	r7, sp, #0
10047c7e:	6078      	str	r0, [r7, #4]
  if (LL_RADIO_TIMER_IsEnabledBLEWakeupTimer(WAKEUP))
10047c80:	4b1a      	ldr	r3, [pc, #104]	@ (10047cec <TIMER_GetRadioTimerValue+0x74>)
10047c82:	0018      	movs	r0, r3
10047c84:	f7fe fb1c 	bl	100462c0 <LL_RADIO_TIMER_IsEnabledBLEWakeupTimer>
10047c88:	1e03      	subs	r3, r0, #0
10047c8a:	d008      	beq.n	10047c9e <TIMER_GetRadioTimerValue+0x26>
  {
    *time = LL_RADIO_TIMER_GetBLEWakeupTime(WAKEUP);
10047c8c:	4b17      	ldr	r3, [pc, #92]	@ (10047cec <TIMER_GetRadioTimerValue+0x74>)
10047c8e:	0018      	movs	r0, r3
10047c90:	f7fe fb65 	bl	1004635e <LL_RADIO_TIMER_GetBLEWakeupTime>
10047c94:	0002      	movs	r2, r0
10047c96:	687b      	ldr	r3, [r7, #4]
10047c98:	601a      	str	r2, [r3, #0]
    return WAKEUP_RADIO_TIMER_BUSY;
10047c9a:	2303      	movs	r3, #3
10047c9c:	e022      	b.n	10047ce4 <TIMER_GetRadioTimerValue+0x6c>
  }
  else if (LL_RADIO_TIMER_IsEnabledTimer1(BLUE))
10047c9e:	23c0      	movs	r3, #192	@ 0xc0
10047ca0:	05db      	lsls	r3, r3, #23
10047ca2:	0018      	movs	r0, r3
10047ca4:	f7fe faa5 	bl	100461f2 <LL_RADIO_TIMER_IsEnabledTimer1>
10047ca8:	1e03      	subs	r3, r0, #0
10047caa:	d009      	beq.n	10047cc0 <TIMER_GetRadioTimerValue+0x48>
  {
    *time = LL_RADIO_TIMER_GetTimeout(BLUE);
10047cac:	23c0      	movs	r3, #192	@ 0xc0
10047cae:	05db      	lsls	r3, r3, #23
10047cb0:	0018      	movs	r0, r3
10047cb2:	f7fe fadb 	bl	1004626c <LL_RADIO_TIMER_GetTimeout>
10047cb6:	0002      	movs	r2, r0
10047cb8:	687b      	ldr	r3, [r7, #4]
10047cba:	601a      	str	r2, [r3, #0]
    return RADIO_TIMER1_BUSY;
10047cbc:	2301      	movs	r3, #1
10047cbe:	e011      	b.n	10047ce4 <TIMER_GetRadioTimerValue+0x6c>
  }
  else if (LL_RADIO_TIMER_IsEnabledTimer2(BLUE))
10047cc0:	23c0      	movs	r3, #192	@ 0xc0
10047cc2:	05db      	lsls	r3, r3, #23
10047cc4:	0018      	movs	r0, r3
10047cc6:	f7fe fab4 	bl	10046232 <LL_RADIO_TIMER_IsEnabledTimer2>
10047cca:	1e03      	subs	r3, r0, #0
10047ccc:	d009      	beq.n	10047ce2 <TIMER_GetRadioTimerValue+0x6a>
  {
    *time = LL_RADIO_TIMER_GetTimeout(BLUE);
10047cce:	23c0      	movs	r3, #192	@ 0xc0
10047cd0:	05db      	lsls	r3, r3, #23
10047cd2:	0018      	movs	r0, r3
10047cd4:	f7fe faca 	bl	1004626c <LL_RADIO_TIMER_GetTimeout>
10047cd8:	0002      	movs	r2, r0
10047cda:	687b      	ldr	r3, [r7, #4]
10047cdc:	601a      	str	r2, [r3, #0]
    return RADIO_TIMER2_BUSY;
10047cde:	2302      	movs	r3, #2
10047ce0:	e000      	b.n	10047ce4 <TIMER_GetRadioTimerValue+0x6c>
  }
  else
  {
    return 0;
10047ce2:	2300      	movs	r3, #0
  }
}
10047ce4:	0018      	movs	r0, r3
10047ce6:	46bd      	mov	sp, r7
10047ce8:	b002      	add	sp, #8
10047cea:	bd80      	pop	{r7, pc}
10047cec:	60001800 	.word	0x60001800

10047cf0 <HAL_RADIO_TIMER_CpuWakeUpCallback>:

__weak void HAL_RADIO_TIMER_CpuWakeUpCallback(void)
{
10047cf0:	b580      	push	{r7, lr}
10047cf2:	af00      	add	r7, sp, #0
}
10047cf4:	46c0      	nop			@ (mov r8, r8)
10047cf6:	46bd      	mov	sp, r7
10047cf8:	bd80      	pop	{r7, pc}

10047cfa <HAL_RADIO_TIMER_TxRxWakeUpCallback>:


__weak void HAL_RADIO_TIMER_TxRxWakeUpCallback(void)
{
10047cfa:	b580      	push	{r7, lr}
10047cfc:	af00      	add	r7, sp, #0
}
10047cfe:	46c0      	nop			@ (mov r8, r8)
10047d00:	46bd      	mov	sp, r7
10047d02:	bd80      	pop	{r7, pc}

10047d04 <HAL_RADIO_TIMER_CPU_WKUP_IRQHandler>:

void HAL_RADIO_TIMER_CPU_WKUP_IRQHandler(void)
{
10047d04:	b580      	push	{r7, lr}
10047d06:	af00      	add	r7, sp, #0
  HAL_RADIO_TIMER_TimeoutCallback();
10047d08:	f7ff f884 	bl	10046e14 <HAL_RADIO_TIMER_TimeoutCallback>

  HAL_RADIO_TIMER_CpuWakeUpCallback();
10047d0c:	f7ff fff0 	bl	10047cf0 <HAL_RADIO_TIMER_CpuWakeUpCallback>
}
10047d10:	46c0      	nop			@ (mov r8, r8)
10047d12:	46bd      	mov	sp, r7
10047d14:	bd80      	pop	{r7, pc}

10047d16 <HAL_RADIO_TIMER_TXRX_WKUP_IRQHandler>:

void HAL_RADIO_TIMER_TXRX_WKUP_IRQHandler(void)
{
10047d16:	b580      	push	{r7, lr}
10047d18:	af00      	add	r7, sp, #0
  HAL_RADIO_TIMER_TxRxWakeUpCallback();
10047d1a:	f7ff ffee 	bl	10047cfa <HAL_RADIO_TIMER_TxRxWakeUpCallback>
#if defined (STM32WB06) || defined (STM32WB07)
  HAL_RADIO_TIMER_WakeUpCallback();
10047d1e:	f7ff f84d 	bl	10046dbc <HAL_RADIO_TIMER_WakeUpCallback>
#endif
}
10047d22:	46c0      	nop			@ (mov r8, r8)
10047d24:	46bd      	mov	sp, r7
10047d26:	bd80      	pop	{r7, pc}

10047d28 <HAL_RADIO_TIMER_ERROR_IRQHandler>:

void HAL_RADIO_TIMER_ERROR_IRQHandler(void)
{
10047d28:	b580      	push	{r7, lr}
10047d2a:	b082      	sub	sp, #8
10047d2c:	af00      	add	r7, sp, #0
  volatile uint32_t debug_cmd = 0;
10047d2e:	2300      	movs	r3, #0
10047d30:	607b      	str	r3, [r7, #4]
  UNUSED(debug_cmd);
10047d32:	687b      	ldr	r3, [r7, #4]
  BLUE->DEBUGCMDREG |= 1;
10047d34:	23c0      	movs	r3, #192	@ 0xc0
10047d36:	05db      	lsls	r3, r3, #23
10047d38:	6f5a      	ldr	r2, [r3, #116]	@ 0x74
10047d3a:	23c0      	movs	r3, #192	@ 0xc0
10047d3c:	05db      	lsls	r3, r3, #23
10047d3e:	2101      	movs	r1, #1
10047d40:	430a      	orrs	r2, r1
10047d42:	675a      	str	r2, [r3, #116]	@ 0x74
  /* If the device is configured with
     System clock = 64 MHz and BLE clock = 16 MHz
     a register read is necessary to end fine
     the clear interrupt register operation,
     due the AHB down converter latency */
  debug_cmd = BLUE->DEBUGCMDREG;
10047d44:	23c0      	movs	r3, #192	@ 0xc0
10047d46:	05db      	lsls	r3, r3, #23
10047d48:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
10047d4a:	607b      	str	r3, [r7, #4]
}
10047d4c:	46c0      	nop			@ (mov r8, r8)
10047d4e:	46bd      	mov	sp, r7
10047d50:	b002      	add	sp, #8
10047d52:	bd80      	pop	{r7, pc}

10047d54 <LL_PWR_SetNoPullB>:
{
10047d54:	b580      	push	{r7, lr}
10047d56:	b082      	sub	sp, #8
10047d58:	af00      	add	r7, sp, #0
10047d5a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(PWR->PUCRB, GPIONumber);
10047d5c:	4b08      	ldr	r3, [pc, #32]	@ (10047d80 <LL_PWR_SetNoPullB+0x2c>)
10047d5e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
10047d60:	687b      	ldr	r3, [r7, #4]
10047d62:	43d9      	mvns	r1, r3
10047d64:	4b06      	ldr	r3, [pc, #24]	@ (10047d80 <LL_PWR_SetNoPullB+0x2c>)
10047d66:	400a      	ands	r2, r1
10047d68:	629a      	str	r2, [r3, #40]	@ 0x28
  CLEAR_BIT(PWR->PDCRB, GPIONumber);
10047d6a:	4b05      	ldr	r3, [pc, #20]	@ (10047d80 <LL_PWR_SetNoPullB+0x2c>)
10047d6c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
10047d6e:	687b      	ldr	r3, [r7, #4]
10047d70:	43d9      	mvns	r1, r3
10047d72:	4b03      	ldr	r3, [pc, #12]	@ (10047d80 <LL_PWR_SetNoPullB+0x2c>)
10047d74:	400a      	ands	r2, r1
10047d76:	62da      	str	r2, [r3, #44]	@ 0x2c
}
10047d78:	46c0      	nop			@ (mov r8, r8)
10047d7a:	46bd      	mov	sp, r7
10047d7c:	b002      	add	sp, #8
10047d7e:	bd80      	pop	{r7, pc}
10047d80:	48500000 	.word	0x48500000

10047d84 <LL_RCC_HSE_Enable>:
  * @brief  Enable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Enable(void)
{
10047d84:	b580      	push	{r7, lr}
10047d86:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
10047d88:	4b04      	ldr	r3, [pc, #16]	@ (10047d9c <LL_RCC_HSE_Enable+0x18>)
10047d8a:	681a      	ldr	r2, [r3, #0]
10047d8c:	4b03      	ldr	r3, [pc, #12]	@ (10047d9c <LL_RCC_HSE_Enable+0x18>)
10047d8e:	2180      	movs	r1, #128	@ 0x80
10047d90:	0249      	lsls	r1, r1, #9
10047d92:	430a      	orrs	r2, r1
10047d94:	601a      	str	r2, [r3, #0]
}
10047d96:	46c0      	nop			@ (mov r8, r8)
10047d98:	46bd      	mov	sp, r7
10047d9a:	bd80      	pop	{r7, pc}
10047d9c:	48400000 	.word	0x48400000

10047da0 <LL_RCC_HSE_Disable>:
  * @brief  Disable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Disable(void)
{
10047da0:	b580      	push	{r7, lr}
10047da2:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
10047da4:	4b04      	ldr	r3, [pc, #16]	@ (10047db8 <LL_RCC_HSE_Disable+0x18>)
10047da6:	681a      	ldr	r2, [r3, #0]
10047da8:	4b03      	ldr	r3, [pc, #12]	@ (10047db8 <LL_RCC_HSE_Disable+0x18>)
10047daa:	4904      	ldr	r1, [pc, #16]	@ (10047dbc <LL_RCC_HSE_Disable+0x1c>)
10047dac:	400a      	ands	r2, r1
10047dae:	601a      	str	r2, [r3, #0]
}
10047db0:	46c0      	nop			@ (mov r8, r8)
10047db2:	46bd      	mov	sp, r7
10047db4:	bd80      	pop	{r7, pc}
10047db6:	46c0      	nop			@ (mov r8, r8)
10047db8:	48400000 	.word	0x48400000
10047dbc:	fffeffff 	.word	0xfffeffff

10047dc0 <LL_RCC_HSE_IsReady>:
  * @brief  Check if HSE oscillator Ready
  * @rmtoll CR           HSERDY        LL_RCC_HSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsReady(void)
{
10047dc0:	b580      	push	{r7, lr}
10047dc2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
10047dc4:	4b07      	ldr	r3, [pc, #28]	@ (10047de4 <LL_RCC_HSE_IsReady+0x24>)
10047dc6:	681a      	ldr	r2, [r3, #0]
10047dc8:	2380      	movs	r3, #128	@ 0x80
10047dca:	029b      	lsls	r3, r3, #10
10047dcc:	401a      	ands	r2, r3
10047dce:	2380      	movs	r3, #128	@ 0x80
10047dd0:	029b      	lsls	r3, r3, #10
10047dd2:	429a      	cmp	r2, r3
10047dd4:	d101      	bne.n	10047dda <LL_RCC_HSE_IsReady+0x1a>
10047dd6:	2301      	movs	r3, #1
10047dd8:	e000      	b.n	10047ddc <LL_RCC_HSE_IsReady+0x1c>
10047dda:	2300      	movs	r3, #0
}
10047ddc:	0018      	movs	r0, r3
10047dde:	46bd      	mov	sp, r7
10047de0:	bd80      	pop	{r7, pc}
10047de2:	46c0      	nop			@ (mov r8, r8)
10047de4:	48400000 	.word	0x48400000

10047de8 <LL_RCC_HSE_SetCapacitorTuning>:
  * @rmtoll RFSWHSECR        SWXOTUNE       LL_RCC_HSE_SetCapacitorTuning
  * @param  Value Between Min_Data = 0 and Max_Data = 63
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_SetCapacitorTuning(uint32_t Value)
{
10047de8:	b580      	push	{r7, lr}
10047dea:	b082      	sub	sp, #8
10047dec:	af00      	add	r7, sp, #0
10047dee:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->RFSWHSECR, RCC_RFSWHSECR_SWXOTUNE, Value << RCC_RFSWHSECR_SWXOTUNE_Pos);
10047df0:	4a0b      	ldr	r2, [pc, #44]	@ (10047e20 <LL_RCC_HSE_SetCapacitorTuning+0x38>)
10047df2:	2398      	movs	r3, #152	@ 0x98
10047df4:	58d3      	ldr	r3, [r2, r3]
10047df6:	4a0b      	ldr	r2, [pc, #44]	@ (10047e24 <LL_RCC_HSE_SetCapacitorTuning+0x3c>)
10047df8:	401a      	ands	r2, r3
10047dfa:	687b      	ldr	r3, [r7, #4]
10047dfc:	021b      	lsls	r3, r3, #8
10047dfe:	4908      	ldr	r1, [pc, #32]	@ (10047e20 <LL_RCC_HSE_SetCapacitorTuning+0x38>)
10047e00:	4313      	orrs	r3, r2
10047e02:	2298      	movs	r2, #152	@ 0x98
10047e04:	508b      	str	r3, [r1, r2]
  SET_BIT(RCC->RFSWHSECR, RCC_RFSWHSECR_SWXOTUNEEN);
10047e06:	4a06      	ldr	r2, [pc, #24]	@ (10047e20 <LL_RCC_HSE_SetCapacitorTuning+0x38>)
10047e08:	2398      	movs	r3, #152	@ 0x98
10047e0a:	58d3      	ldr	r3, [r2, r3]
10047e0c:	4904      	ldr	r1, [pc, #16]	@ (10047e20 <LL_RCC_HSE_SetCapacitorTuning+0x38>)
10047e0e:	2280      	movs	r2, #128	@ 0x80
10047e10:	4313      	orrs	r3, r2
10047e12:	2298      	movs	r2, #152	@ 0x98
10047e14:	508b      	str	r3, [r1, r2]
}
10047e16:	46c0      	nop			@ (mov r8, r8)
10047e18:	46bd      	mov	sp, r7
10047e1a:	b002      	add	sp, #8
10047e1c:	bd80      	pop	{r7, pc}
10047e1e:	46c0      	nop			@ (mov r8, r8)
10047e20:	48400000 	.word	0x48400000
10047e24:	ffffc0ff 	.word	0xffffc0ff

10047e28 <LL_RCC_HSE_SetCurrentControl>:
  *         @arg @ref LL_RCC_HSE_CURRENTMAX_5
  *         @arg @ref LL_RCC_HSE_CURRENTMAX_6
  *         @arg @ref LL_RCC_HSE_CURRENTMAX_7
  */
__STATIC_INLINE void LL_RCC_HSE_SetCurrentControl(uint32_t CurrentMax)
{
10047e28:	b580      	push	{r7, lr}
10047e2a:	b082      	sub	sp, #8
10047e2c:	af00      	add	r7, sp, #0
10047e2e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->RFSWHSECR, RCC_RFSWHSECR_GMC, CurrentMax);
10047e30:	4a07      	ldr	r2, [pc, #28]	@ (10047e50 <LL_RCC_HSE_SetCurrentControl+0x28>)
10047e32:	2398      	movs	r3, #152	@ 0x98
10047e34:	58d3      	ldr	r3, [r2, r3]
10047e36:	2270      	movs	r2, #112	@ 0x70
10047e38:	4393      	bics	r3, r2
10047e3a:	001a      	movs	r2, r3
10047e3c:	4904      	ldr	r1, [pc, #16]	@ (10047e50 <LL_RCC_HSE_SetCurrentControl+0x28>)
10047e3e:	687b      	ldr	r3, [r7, #4]
10047e40:	4313      	orrs	r3, r2
10047e42:	2298      	movs	r2, #152	@ 0x98
10047e44:	508b      	str	r3, [r1, r2]
}
10047e46:	46c0      	nop			@ (mov r8, r8)
10047e48:	46bd      	mov	sp, r7
10047e4a:	b002      	add	sp, #8
10047e4c:	bd80      	pop	{r7, pc}
10047e4e:	46c0      	nop			@ (mov r8, r8)
10047e50:	48400000 	.word	0x48400000

10047e54 <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI
  * @rmtoll CFGR           STOPHSI        LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
10047e54:	b580      	push	{r7, lr}
10047e56:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CFGR, RCC_CFGR_STOPHSI);
10047e58:	4b07      	ldr	r3, [pc, #28]	@ (10047e78 <LL_RCC_HSI_Enable+0x24>)
10047e5a:	689a      	ldr	r2, [r3, #8]
10047e5c:	4b06      	ldr	r3, [pc, #24]	@ (10047e78 <LL_RCC_HSI_Enable+0x24>)
10047e5e:	2104      	movs	r1, #4
10047e60:	438a      	bics	r2, r1
10047e62:	609a      	str	r2, [r3, #8]
  CLEAR_BIT(RCC->CFGR, RCC_CFGR_HSESEL);
10047e64:	4b04      	ldr	r3, [pc, #16]	@ (10047e78 <LL_RCC_HSI_Enable+0x24>)
10047e66:	689a      	ldr	r2, [r3, #8]
10047e68:	4b03      	ldr	r3, [pc, #12]	@ (10047e78 <LL_RCC_HSI_Enable+0x24>)
10047e6a:	2102      	movs	r1, #2
10047e6c:	438a      	bics	r2, r1
10047e6e:	609a      	str	r2, [r3, #8]
}
10047e70:	46c0      	nop			@ (mov r8, r8)
10047e72:	46bd      	mov	sp, r7
10047e74:	bd80      	pop	{r7, pc}
10047e76:	46c0      	nop			@ (mov r8, r8)
10047e78:	48400000 	.word	0x48400000

10047e7c <LL_RCC_HSI_Disable>:
  * @brief  Disable HSI
  * @rmtoll CFGR           STOPHSI        LL_RCC_HSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Disable(void)
{
10047e7c:	b580      	push	{r7, lr}
10047e7e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CFGR, RCC_CFGR_HSESEL);
10047e80:	4b07      	ldr	r3, [pc, #28]	@ (10047ea0 <LL_RCC_HSI_Disable+0x24>)
10047e82:	689a      	ldr	r2, [r3, #8]
10047e84:	4b06      	ldr	r3, [pc, #24]	@ (10047ea0 <LL_RCC_HSI_Disable+0x24>)
10047e86:	2102      	movs	r1, #2
10047e88:	430a      	orrs	r2, r1
10047e8a:	609a      	str	r2, [r3, #8]
  SET_BIT(RCC->CFGR, RCC_CFGR_STOPHSI);
10047e8c:	4b04      	ldr	r3, [pc, #16]	@ (10047ea0 <LL_RCC_HSI_Disable+0x24>)
10047e8e:	689a      	ldr	r2, [r3, #8]
10047e90:	4b03      	ldr	r3, [pc, #12]	@ (10047ea0 <LL_RCC_HSI_Disable+0x24>)
10047e92:	2104      	movs	r1, #4
10047e94:	430a      	orrs	r2, r1
10047e96:	609a      	str	r2, [r3, #8]
}
10047e98:	46c0      	nop			@ (mov r8, r8)
10047e9a:	46bd      	mov	sp, r7
10047e9c:	bd80      	pop	{r7, pc}
10047e9e:	46c0      	nop			@ (mov r8, r8)
10047ea0:	48400000 	.word	0x48400000

10047ea4 <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
10047ea4:	b580      	push	{r7, lr}
10047ea6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
10047ea8:	4b07      	ldr	r3, [pc, #28]	@ (10047ec8 <LL_RCC_HSI_IsReady+0x24>)
10047eaa:	681a      	ldr	r2, [r3, #0]
10047eac:	2380      	movs	r3, #128	@ 0x80
10047eae:	00db      	lsls	r3, r3, #3
10047eb0:	401a      	ands	r2, r3
10047eb2:	2380      	movs	r3, #128	@ 0x80
10047eb4:	00db      	lsls	r3, r3, #3
10047eb6:	429a      	cmp	r2, r3
10047eb8:	d101      	bne.n	10047ebe <LL_RCC_HSI_IsReady+0x1a>
10047eba:	2301      	movs	r3, #1
10047ebc:	e000      	b.n	10047ec0 <LL_RCC_HSI_IsReady+0x1c>
10047ebe:	2300      	movs	r3, #0
}
10047ec0:	0018      	movs	r0, r3
10047ec2:	46bd      	mov	sp, r7
10047ec4:	bd80      	pop	{r7, pc}
10047ec6:	46c0      	nop			@ (mov r8, r8)
10047ec8:	48400000 	.word	0x48400000

10047ecc <LL_RCC_DIRECT_HSE_Enable>:
  * @brief  Enable DIRECT_HSE mode
  * @rmtoll CFGR       HSESEL/STOPHSI         LL_RCC_HSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_DIRECT_HSE_Enable(void)
{
10047ecc:	b580      	push	{r7, lr}
10047ece:	b082      	sub	sp, #8
10047ed0:	af00      	add	r7, sp, #0
  while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0);
10047ed2:	46c0      	nop			@ (mov r8, r8)
10047ed4:	4b0f      	ldr	r3, [pc, #60]	@ (10047f14 <LL_RCC_DIRECT_HSE_Enable+0x48>)
10047ed6:	681a      	ldr	r2, [r3, #0]
10047ed8:	2380      	movs	r3, #128	@ 0x80
10047eda:	029b      	lsls	r3, r3, #10
10047edc:	4013      	ands	r3, r2
10047ede:	d0f9      	beq.n	10047ed4 <LL_RCC_DIRECT_HSE_Enable+0x8>
  SET_BIT(RCC->CFGR, RCC_CFGR_HSESEL);
10047ee0:	4b0c      	ldr	r3, [pc, #48]	@ (10047f14 <LL_RCC_DIRECT_HSE_Enable+0x48>)
10047ee2:	689a      	ldr	r2, [r3, #8]
10047ee4:	4b0b      	ldr	r3, [pc, #44]	@ (10047f14 <LL_RCC_DIRECT_HSE_Enable+0x48>)
10047ee6:	2102      	movs	r1, #2
10047ee8:	430a      	orrs	r2, r1
10047eea:	609a      	str	r2, [r3, #8]
  for (volatile int i = 0; i < 6; i++)
10047eec:	2300      	movs	r3, #0
10047eee:	607b      	str	r3, [r7, #4]
10047ef0:	e003      	b.n	10047efa <LL_RCC_DIRECT_HSE_Enable+0x2e>
  {
    __asm("NOP");
10047ef2:	46c0      	nop			@ (mov r8, r8)
  for (volatile int i = 0; i < 6; i++)
10047ef4:	687b      	ldr	r3, [r7, #4]
10047ef6:	3301      	adds	r3, #1
10047ef8:	607b      	str	r3, [r7, #4]
10047efa:	687b      	ldr	r3, [r7, #4]
10047efc:	2b05      	cmp	r3, #5
10047efe:	ddf8      	ble.n	10047ef2 <LL_RCC_DIRECT_HSE_Enable+0x26>
  }
  SET_BIT(RCC->CFGR, RCC_CFGR_STOPHSI);
10047f00:	4b04      	ldr	r3, [pc, #16]	@ (10047f14 <LL_RCC_DIRECT_HSE_Enable+0x48>)
10047f02:	689a      	ldr	r2, [r3, #8]
10047f04:	4b03      	ldr	r3, [pc, #12]	@ (10047f14 <LL_RCC_DIRECT_HSE_Enable+0x48>)
10047f06:	2104      	movs	r1, #4
10047f08:	430a      	orrs	r2, r1
10047f0a:	609a      	str	r2, [r3, #8]
}
10047f0c:	46c0      	nop			@ (mov r8, r8)
10047f0e:	46bd      	mov	sp, r7
10047f10:	b002      	add	sp, #8
10047f12:	bd80      	pop	{r7, pc}
10047f14:	48400000 	.word	0x48400000

10047f18 <LL_RCC_LSCO_SetSource>:
  *         @arg @ref LL_RCC_LSCO_CLKSOURCE_LSI
  *         @arg @ref LL_RCC_LSCO_CLKSOURCE_HSI64M_DIV2048
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSCO_SetSource(uint32_t Source)
{
10047f18:	b580      	push	{r7, lr}
10047f1a:	b082      	sub	sp, #8
10047f1c:	af00      	add	r7, sp, #0
10047f1e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_CLKSLOWSEL, Source);
10047f20:	4b06      	ldr	r3, [pc, #24]	@ (10047f3c <LL_RCC_LSCO_SetSource+0x24>)
10047f22:	689b      	ldr	r3, [r3, #8]
10047f24:	4a06      	ldr	r2, [pc, #24]	@ (10047f40 <LL_RCC_LSCO_SetSource+0x28>)
10047f26:	4013      	ands	r3, r2
10047f28:	0019      	movs	r1, r3
10047f2a:	4b04      	ldr	r3, [pc, #16]	@ (10047f3c <LL_RCC_LSCO_SetSource+0x24>)
10047f2c:	687a      	ldr	r2, [r7, #4]
10047f2e:	430a      	orrs	r2, r1
10047f30:	609a      	str	r2, [r3, #8]
}
10047f32:	46c0      	nop			@ (mov r8, r8)
10047f34:	46bd      	mov	sp, r7
10047f36:	b002      	add	sp, #8
10047f38:	bd80      	pop	{r7, pc}
10047f3a:	46c0      	nop			@ (mov r8, r8)
10047f3c:	48400000 	.word	0x48400000
10047f40:	fffe7fff 	.word	0xfffe7fff

10047f44 <LL_RCC_LSE_Enable>:
  * @brief  Enable  Low Speed External (LSE) crystal.
  * @rmtoll CR         LSEON         LL_RCC_LSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_Enable(void)
{
10047f44:	b580      	push	{r7, lr}
10047f46:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_LSEON);
10047f48:	4b04      	ldr	r3, [pc, #16]	@ (10047f5c <LL_RCC_LSE_Enable+0x18>)
10047f4a:	681a      	ldr	r2, [r3, #0]
10047f4c:	4b03      	ldr	r3, [pc, #12]	@ (10047f5c <LL_RCC_LSE_Enable+0x18>)
10047f4e:	2110      	movs	r1, #16
10047f50:	430a      	orrs	r2, r1
10047f52:	601a      	str	r2, [r3, #0]
}
10047f54:	46c0      	nop			@ (mov r8, r8)
10047f56:	46bd      	mov	sp, r7
10047f58:	bd80      	pop	{r7, pc}
10047f5a:	46c0      	nop			@ (mov r8, r8)
10047f5c:	48400000 	.word	0x48400000

10047f60 <LL_RCC_LSE_Disable>:
  * @brief  Disable  Low Speed External (LSE) crystal.
  * @rmtoll CR         LSEON         LL_RCC_LSE_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_Disable(void)
{
10047f60:	b580      	push	{r7, lr}
10047f62:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_LSEON);
10047f64:	4b04      	ldr	r3, [pc, #16]	@ (10047f78 <LL_RCC_LSE_Disable+0x18>)
10047f66:	681a      	ldr	r2, [r3, #0]
10047f68:	4b03      	ldr	r3, [pc, #12]	@ (10047f78 <LL_RCC_LSE_Disable+0x18>)
10047f6a:	2110      	movs	r1, #16
10047f6c:	438a      	bics	r2, r1
10047f6e:	601a      	str	r2, [r3, #0]
}
10047f70:	46c0      	nop			@ (mov r8, r8)
10047f72:	46bd      	mov	sp, r7
10047f74:	bd80      	pop	{r7, pc}
10047f76:	46c0      	nop			@ (mov r8, r8)
10047f78:	48400000 	.word	0x48400000

10047f7c <LL_RCC_LSE_IsReady>:
  * @brief  Check if LSE oscillator Ready
  * @rmtoll CR         LSERDY        LL_RCC_LSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsReady(void)
{
10047f7c:	b580      	push	{r7, lr}
10047f7e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_LSERDY) == (RCC_CR_LSERDY)) ? 1UL : 0UL);
10047f80:	4b05      	ldr	r3, [pc, #20]	@ (10047f98 <LL_RCC_LSE_IsReady+0x1c>)
10047f82:	681b      	ldr	r3, [r3, #0]
10047f84:	2220      	movs	r2, #32
10047f86:	4013      	ands	r3, r2
10047f88:	2b20      	cmp	r3, #32
10047f8a:	d101      	bne.n	10047f90 <LL_RCC_LSE_IsReady+0x14>
10047f8c:	2301      	movs	r3, #1
10047f8e:	e000      	b.n	10047f92 <LL_RCC_LSE_IsReady+0x16>
10047f90:	2300      	movs	r3, #0
}
10047f92:	0018      	movs	r0, r3
10047f94:	46bd      	mov	sp, r7
10047f96:	bd80      	pop	{r7, pc}
10047f98:	48400000 	.word	0x48400000

10047f9c <LL_RCC_LSE_EnableBypass>:
  * @brief  Enable external clock source (LSE bypass).
  * @rmtoll CR         LSEBYP        LL_RCC_LSE_EnableBypass
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_EnableBypass(void)
{
10047f9c:	b580      	push	{r7, lr}
10047f9e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_LSEBYP);
10047fa0:	4b04      	ldr	r3, [pc, #16]	@ (10047fb4 <LL_RCC_LSE_EnableBypass+0x18>)
10047fa2:	681a      	ldr	r2, [r3, #0]
10047fa4:	4b03      	ldr	r3, [pc, #12]	@ (10047fb4 <LL_RCC_LSE_EnableBypass+0x18>)
10047fa6:	2140      	movs	r1, #64	@ 0x40
10047fa8:	430a      	orrs	r2, r1
10047faa:	601a      	str	r2, [r3, #0]
}
10047fac:	46c0      	nop			@ (mov r8, r8)
10047fae:	46bd      	mov	sp, r7
10047fb0:	bd80      	pop	{r7, pc}
10047fb2:	46c0      	nop			@ (mov r8, r8)
10047fb4:	48400000 	.word	0x48400000

10047fb8 <LL_RCC_LSE_DisableBypass>:
  * @brief  Disable external clock source (LSE bypass).
  * @rmtoll CR         LSEBYP        LL_RCC_LSE_DisableBypass
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_DisableBypass(void)
{
10047fb8:	b580      	push	{r7, lr}
10047fba:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_LSEBYP);
10047fbc:	4b04      	ldr	r3, [pc, #16]	@ (10047fd0 <LL_RCC_LSE_DisableBypass+0x18>)
10047fbe:	681a      	ldr	r2, [r3, #0]
10047fc0:	4b03      	ldr	r3, [pc, #12]	@ (10047fd0 <LL_RCC_LSE_DisableBypass+0x18>)
10047fc2:	2140      	movs	r1, #64	@ 0x40
10047fc4:	438a      	bics	r2, r1
10047fc6:	601a      	str	r2, [r3, #0]
}
10047fc8:	46c0      	nop			@ (mov r8, r8)
10047fca:	46bd      	mov	sp, r7
10047fcc:	bd80      	pop	{r7, pc}
10047fce:	46c0      	nop			@ (mov r8, r8)
10047fd0:	48400000 	.word	0x48400000

10047fd4 <LL_RCC_LSE_IsBypassEnabled>:
  * @brief  Check if LSE bypass configuration is enabled.
  * @rmtoll CR         LSEBYP        LL_RCC_LSE_IsBypassEnabled
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsBypassEnabled(void)
{
10047fd4:	b580      	push	{r7, lr}
10047fd6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_LSEBYP) == (RCC_CR_LSEBYP)) ? 1UL : 0UL);
10047fd8:	4b05      	ldr	r3, [pc, #20]	@ (10047ff0 <LL_RCC_LSE_IsBypassEnabled+0x1c>)
10047fda:	681b      	ldr	r3, [r3, #0]
10047fdc:	2240      	movs	r2, #64	@ 0x40
10047fde:	4013      	ands	r3, r2
10047fe0:	2b40      	cmp	r3, #64	@ 0x40
10047fe2:	d101      	bne.n	10047fe8 <LL_RCC_LSE_IsBypassEnabled+0x14>
10047fe4:	2301      	movs	r3, #1
10047fe6:	e000      	b.n	10047fea <LL_RCC_LSE_IsBypassEnabled+0x16>
10047fe8:	2300      	movs	r3, #0
}
10047fea:	0018      	movs	r0, r3
10047fec:	46bd      	mov	sp, r7
10047fee:	bd80      	pop	{r7, pc}
10047ff0:	48400000 	.word	0x48400000

10047ff4 <LL_RCC_LSE_SetDriveCapability>:
  *         @arg @ref LL_RCC_LSEDRIVE_MEDIUMHIGH
  *         @arg @ref LL_RCC_LSEDRIVE_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_SetDriveCapability(uint32_t LSEDrive)
{
10047ff4:	b580      	push	{r7, lr}
10047ff6:	b082      	sub	sp, #8
10047ff8:	af00      	add	r7, sp, #0
10047ffa:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSSWCR, RCC_CSSWCR_LSEDRV, LSEDrive);
10047ffc:	4b06      	ldr	r3, [pc, #24]	@ (10048018 <LL_RCC_LSE_SetDriveCapability+0x24>)
10047ffe:	68db      	ldr	r3, [r3, #12]
10048000:	2260      	movs	r2, #96	@ 0x60
10048002:	4393      	bics	r3, r2
10048004:	0019      	movs	r1, r3
10048006:	4b04      	ldr	r3, [pc, #16]	@ (10048018 <LL_RCC_LSE_SetDriveCapability+0x24>)
10048008:	687a      	ldr	r2, [r7, #4]
1004800a:	430a      	orrs	r2, r1
1004800c:	60da      	str	r2, [r3, #12]
}
1004800e:	46c0      	nop			@ (mov r8, r8)
10048010:	46bd      	mov	sp, r7
10048012:	b002      	add	sp, #8
10048014:	bd80      	pop	{r7, pc}
10048016:	46c0      	nop			@ (mov r8, r8)
10048018:	48400000 	.word	0x48400000

1004801c <LL_RCC_LSI_Enable>:
  * @brief  Enable LSI Oscillator
  * @rmtoll CR          LSION         LL_RCC_LSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI_Enable(void)
{
1004801c:	b580      	push	{r7, lr}
1004801e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_LSION);
10048020:	4b04      	ldr	r3, [pc, #16]	@ (10048034 <LL_RCC_LSI_Enable+0x18>)
10048022:	681a      	ldr	r2, [r3, #0]
10048024:	4b03      	ldr	r3, [pc, #12]	@ (10048034 <LL_RCC_LSI_Enable+0x18>)
10048026:	2104      	movs	r1, #4
10048028:	430a      	orrs	r2, r1
1004802a:	601a      	str	r2, [r3, #0]
}
1004802c:	46c0      	nop			@ (mov r8, r8)
1004802e:	46bd      	mov	sp, r7
10048030:	bd80      	pop	{r7, pc}
10048032:	46c0      	nop			@ (mov r8, r8)
10048034:	48400000 	.word	0x48400000

10048038 <LL_RCC_LSI_Disable>:
  * @brief  Disable LSI Oscillator
  * @rmtoll CR          LSION         LL_RCC_LSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI_Disable(void)
{
10048038:	b580      	push	{r7, lr}
1004803a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_LSION);
1004803c:	4b04      	ldr	r3, [pc, #16]	@ (10048050 <LL_RCC_LSI_Disable+0x18>)
1004803e:	681a      	ldr	r2, [r3, #0]
10048040:	4b03      	ldr	r3, [pc, #12]	@ (10048050 <LL_RCC_LSI_Disable+0x18>)
10048042:	2104      	movs	r1, #4
10048044:	438a      	bics	r2, r1
10048046:	601a      	str	r2, [r3, #0]
}
10048048:	46c0      	nop			@ (mov r8, r8)
1004804a:	46bd      	mov	sp, r7
1004804c:	bd80      	pop	{r7, pc}
1004804e:	46c0      	nop			@ (mov r8, r8)
10048050:	48400000 	.word	0x48400000

10048054 <LL_RCC_LSI_IsReady>:
  * @brief  Check if LSI is Ready
  * @rmtoll CR          LSIRDY        LL_RCC_LSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI_IsReady(void)
{
10048054:	b580      	push	{r7, lr}
10048056:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_LSIRDY) == (RCC_CR_LSIRDY)) ? 1UL : 0UL);
10048058:	4b05      	ldr	r3, [pc, #20]	@ (10048070 <LL_RCC_LSI_IsReady+0x1c>)
1004805a:	681b      	ldr	r3, [r3, #0]
1004805c:	2208      	movs	r2, #8
1004805e:	4013      	ands	r3, r2
10048060:	2b08      	cmp	r3, #8
10048062:	d101      	bne.n	10048068 <LL_RCC_LSI_IsReady+0x14>
10048064:	2301      	movs	r3, #1
10048066:	e000      	b.n	1004806a <LL_RCC_LSI_IsReady+0x16>
10048068:	2300      	movs	r3, #0
}
1004806a:	0018      	movs	r0, r3
1004806c:	46bd      	mov	sp, r7
1004806e:	bd80      	pop	{r7, pc}
10048070:	48400000 	.word	0x48400000

10048074 <LL_RCC_RC64MPLL_Enable>:
  * @brief  Enable RC64MPLL
  * @rmtoll CR           HSIPLLON         LL_RCC_RC64MPLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_RC64MPLL_Enable(void)
{
10048074:	b580      	push	{r7, lr}
10048076:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSIPLLON);
10048078:	4b04      	ldr	r3, [pc, #16]	@ (1004808c <LL_RCC_RC64MPLL_Enable+0x18>)
1004807a:	681a      	ldr	r2, [r3, #0]
1004807c:	4b03      	ldr	r3, [pc, #12]	@ (1004808c <LL_RCC_RC64MPLL_Enable+0x18>)
1004807e:	2180      	movs	r1, #128	@ 0x80
10048080:	0189      	lsls	r1, r1, #6
10048082:	430a      	orrs	r2, r1
10048084:	601a      	str	r2, [r3, #0]
}
10048086:	46c0      	nop			@ (mov r8, r8)
10048088:	46bd      	mov	sp, r7
1004808a:	bd80      	pop	{r7, pc}
1004808c:	48400000 	.word	0x48400000

10048090 <LL_RCC_RC64MPLL_Disable>:
  * @note Cannot be disabled if the RC64MPLL clock is used as the system clock
  * @rmtoll CR           HSIPLLON         LL_RCC_RC64MPLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_RC64MPLL_Disable(void)
{
10048090:	b580      	push	{r7, lr}
10048092:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSIPLLON);
10048094:	4b04      	ldr	r3, [pc, #16]	@ (100480a8 <LL_RCC_RC64MPLL_Disable+0x18>)
10048096:	681a      	ldr	r2, [r3, #0]
10048098:	4b03      	ldr	r3, [pc, #12]	@ (100480a8 <LL_RCC_RC64MPLL_Disable+0x18>)
1004809a:	4904      	ldr	r1, [pc, #16]	@ (100480ac <LL_RCC_RC64MPLL_Disable+0x1c>)
1004809c:	400a      	ands	r2, r1
1004809e:	601a      	str	r2, [r3, #0]
}
100480a0:	46c0      	nop			@ (mov r8, r8)
100480a2:	46bd      	mov	sp, r7
100480a4:	bd80      	pop	{r7, pc}
100480a6:	46c0      	nop			@ (mov r8, r8)
100480a8:	48400000 	.word	0x48400000
100480ac:	ffffdfff 	.word	0xffffdfff

100480b0 <LL_RCC_RC64MPLL_IsReady>:
  * @brief  Check if RC64MPLL is Ready
  * @rmtoll CR           HSIPLLRDY        LL_RCC_RC64MPLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_RC64MPLL_IsReady(void)
{
100480b0:	b580      	push	{r7, lr}
100480b2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIPLLRDY) == (RCC_CR_HSIPLLRDY)) ? 1UL : 0UL);
100480b4:	4b07      	ldr	r3, [pc, #28]	@ (100480d4 <LL_RCC_RC64MPLL_IsReady+0x24>)
100480b6:	681a      	ldr	r2, [r3, #0]
100480b8:	2380      	movs	r3, #128	@ 0x80
100480ba:	01db      	lsls	r3, r3, #7
100480bc:	401a      	ands	r2, r3
100480be:	2380      	movs	r3, #128	@ 0x80
100480c0:	01db      	lsls	r3, r3, #7
100480c2:	429a      	cmp	r2, r3
100480c4:	d101      	bne.n	100480ca <LL_RCC_RC64MPLL_IsReady+0x1a>
100480c6:	2301      	movs	r3, #1
100480c8:	e000      	b.n	100480cc <LL_RCC_RC64MPLL_IsReady+0x1c>
100480ca:	2300      	movs	r3, #0
}
100480cc:	0018      	movs	r0, r3
100480ce:	46bd      	mov	sp, r7
100480d0:	bd80      	pop	{r7, pc}
100480d2:	46c0      	nop			@ (mov r8, r8)
100480d4:	48400000 	.word	0x48400000

100480d8 <LL_RCC_SetRC64MPLLPrescaler>:
  *         @arg @ref LL_RCC_RC64MPLL_DIV_32
  *         @arg @ref LL_RCC_RC64MPLL_DIV_64
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetRC64MPLLPrescaler(uint32_t Prescaler)
{
100480d8:	b580      	push	{r7, lr}
100480da:	b082      	sub	sp, #8
100480dc:	af00      	add	r7, sp, #0
100480de:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_CLKSYSDIV, Prescaler);
100480e0:	4b06      	ldr	r3, [pc, #24]	@ (100480fc <LL_RCC_SetRC64MPLLPrescaler+0x24>)
100480e2:	689b      	ldr	r3, [r3, #8]
100480e4:	22e0      	movs	r2, #224	@ 0xe0
100480e6:	4393      	bics	r3, r2
100480e8:	0019      	movs	r1, r3
100480ea:	4b04      	ldr	r3, [pc, #16]	@ (100480fc <LL_RCC_SetRC64MPLLPrescaler+0x24>)
100480ec:	687a      	ldr	r2, [r7, #4]
100480ee:	430a      	orrs	r2, r1
100480f0:	609a      	str	r2, [r3, #8]
}
100480f2:	46c0      	nop			@ (mov r8, r8)
100480f4:	46bd      	mov	sp, r7
100480f6:	b002      	add	sp, #8
100480f8:	bd80      	pop	{r7, pc}
100480fa:	46c0      	nop			@ (mov r8, r8)
100480fc:	48400000 	.word	0x48400000

10048100 <HAL_RCC_OscConfig>:
  * @param  RCC_OscInitStruct  pointer to a @ref RCC_OscInitTypeDef structure that
  *         contains the configuration information for the RCC Oscillators.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
10048100:	b580      	push	{r7, lr}
10048102:	b084      	sub	sp, #16
10048104:	af00      	add	r7, sp, #0
10048106:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
10048108:	687b      	ldr	r3, [r7, #4]
1004810a:	2b00      	cmp	r3, #0
1004810c:	d101      	bne.n	10048112 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
1004810e:	2301      	movs	r3, #1
10048110:	e140      	b.n	10048394 <HAL_RCC_OscConfig+0x294>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  
  /*------------------------------- HSI Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
10048112:	687b      	ldr	r3, [r7, #4]
10048114:	681b      	ldr	r3, [r3, #0]
10048116:	2210      	movs	r2, #16
10048118:	4013      	ands	r3, r2
1004811a:	d033      	beq.n	10048184 <HAL_RCC_OscConfig+0x84>
  {
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
1004811c:	687b      	ldr	r3, [r7, #4]
1004811e:	689b      	ldr	r3, [r3, #8]
10048120:	2b00      	cmp	r3, #0
10048122:	d102      	bne.n	1004812a <HAL_RCC_OscConfig+0x2a>
10048124:	f7ff fe96 	bl	10047e54 <LL_RCC_HSI_Enable>
10048128:	e001      	b.n	1004812e <HAL_RCC_OscConfig+0x2e>
1004812a:	f7ff fea7 	bl	10047e7c <LL_RCC_HSI_Disable>

    if(RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
1004812e:	687b      	ldr	r3, [r7, #4]
10048130:	689b      	ldr	r3, [r3, #8]
10048132:	2b04      	cmp	r3, #4
10048134:	d113      	bne.n	1004815e <HAL_RCC_OscConfig+0x5e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
10048136:	f7fc faaf 	bl	10044698 <HAL_GetTick>
1004813a:	0003      	movs	r3, r0
1004813c:	60fb      	str	r3, [r7, #12]

      /* Wait till HSI is disabled */
      while (LL_RCC_HSI_IsReady() == 1U)
1004813e:	e008      	b.n	10048152 <HAL_RCC_OscConfig+0x52>
      {
        if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
10048140:	f7fc faaa 	bl	10044698 <HAL_GetTick>
10048144:	0002      	movs	r2, r0
10048146:	68fb      	ldr	r3, [r7, #12]
10048148:	1ad3      	subs	r3, r2, r3
1004814a:	2b64      	cmp	r3, #100	@ 0x64
1004814c:	d901      	bls.n	10048152 <HAL_RCC_OscConfig+0x52>
        {
          return HAL_TIMEOUT;
1004814e:	2303      	movs	r3, #3
10048150:	e120      	b.n	10048394 <HAL_RCC_OscConfig+0x294>
      while (LL_RCC_HSI_IsReady() == 1U)
10048152:	f7ff fea7 	bl	10047ea4 <LL_RCC_HSI_IsReady>
10048156:	0003      	movs	r3, r0
10048158:	2b01      	cmp	r3, #1
1004815a:	d0f1      	beq.n	10048140 <HAL_RCC_OscConfig+0x40>
1004815c:	e012      	b.n	10048184 <HAL_RCC_OscConfig+0x84>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
1004815e:	f7fc fa9b 	bl	10044698 <HAL_GetTick>
10048162:	0003      	movs	r3, r0
10048164:	60fb      	str	r3, [r7, #12]

      /* Wait till HSI is enabled */
      while (LL_RCC_HSI_IsReady() != 1U)
10048166:	e008      	b.n	1004817a <HAL_RCC_OscConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
10048168:	f7fc fa96 	bl	10044698 <HAL_GetTick>
1004816c:	0002      	movs	r2, r0
1004816e:	68fb      	ldr	r3, [r7, #12]
10048170:	1ad3      	subs	r3, r2, r3
10048172:	2b64      	cmp	r3, #100	@ 0x64
10048174:	d901      	bls.n	1004817a <HAL_RCC_OscConfig+0x7a>
        {
          return HAL_TIMEOUT;
10048176:	2303      	movs	r3, #3
10048178:	e10c      	b.n	10048394 <HAL_RCC_OscConfig+0x294>
      while (LL_RCC_HSI_IsReady() != 1U)
1004817a:	f7ff fe93 	bl	10047ea4 <LL_RCC_HSI_IsReady>
1004817e:	0003      	movs	r3, r0
10048180:	2b01      	cmp	r3, #1
10048182:	d1f1      	bne.n	10048168 <HAL_RCC_OscConfig+0x68>
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
10048184:	687b      	ldr	r3, [r7, #4]
10048186:	681b      	ldr	r3, [r3, #0]
10048188:	2201      	movs	r2, #1
1004818a:	4013      	ands	r3, r2
1004818c:	d039      	beq.n	10048202 <HAL_RCC_OscConfig+0x102>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* Set HSE Capacitor Tuning */
    LL_RCC_HSE_SetCapacitorTuning(CFG_HW_RCC_HSE_CAPACITOR_TUNE);
1004818e:	2020      	movs	r0, #32
10048190:	f7ff fe2a 	bl	10047de8 <LL_RCC_HSE_SetCapacitorTuning>

    /* Set HSE Current Control */
    LL_RCC_HSE_SetCurrentControl(LL_RCC_HSE_CURRENTMAX_3);
10048194:	2030      	movs	r0, #48	@ 0x30
10048196:	f7ff fe47 	bl	10047e28 <LL_RCC_HSE_SetCurrentControl>

    /* Set the new HSE configuration ---------------------------------------*/
    __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
1004819a:	687b      	ldr	r3, [r7, #4]
1004819c:	685a      	ldr	r2, [r3, #4]
1004819e:	2380      	movs	r3, #128	@ 0x80
100481a0:	025b      	lsls	r3, r3, #9
100481a2:	429a      	cmp	r2, r3
100481a4:	d102      	bne.n	100481ac <HAL_RCC_OscConfig+0xac>
100481a6:	f7ff fded 	bl	10047d84 <LL_RCC_HSE_Enable>
100481aa:	e001      	b.n	100481b0 <HAL_RCC_OscConfig+0xb0>
100481ac:	f7ff fdf8 	bl	10047da0 <LL_RCC_HSE_Disable>

    /* Check the HSE State */
    if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
100481b0:	687b      	ldr	r3, [r7, #4]
100481b2:	685b      	ldr	r3, [r3, #4]
100481b4:	2b00      	cmp	r3, #0
100481b6:	d012      	beq.n	100481de <HAL_RCC_OscConfig+0xde>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
100481b8:	f7fc fa6e 	bl	10044698 <HAL_GetTick>
100481bc:	0003      	movs	r3, r0
100481be:	60fb      	str	r3, [r7, #12]

      /* Wait till HSE is ready */
      while (LL_RCC_HSE_IsReady() == 0U)
100481c0:	e008      	b.n	100481d4 <HAL_RCC_OscConfig+0xd4>
      {
        if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
100481c2:	f7fc fa69 	bl	10044698 <HAL_GetTick>
100481c6:	0002      	movs	r2, r0
100481c8:	68fb      	ldr	r3, [r7, #12]
100481ca:	1ad3      	subs	r3, r2, r3
100481cc:	2b64      	cmp	r3, #100	@ 0x64
100481ce:	d901      	bls.n	100481d4 <HAL_RCC_OscConfig+0xd4>
        {
          return HAL_TIMEOUT;
100481d0:	2303      	movs	r3, #3
100481d2:	e0df      	b.n	10048394 <HAL_RCC_OscConfig+0x294>
      while (LL_RCC_HSE_IsReady() == 0U)
100481d4:	f7ff fdf4 	bl	10047dc0 <LL_RCC_HSE_IsReady>
100481d8:	1e03      	subs	r3, r0, #0
100481da:	d0f2      	beq.n	100481c2 <HAL_RCC_OscConfig+0xc2>
100481dc:	e011      	b.n	10048202 <HAL_RCC_OscConfig+0x102>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
100481de:	f7fc fa5b 	bl	10044698 <HAL_GetTick>
100481e2:	0003      	movs	r3, r0
100481e4:	60fb      	str	r3, [r7, #12]

      /* Wait till HSE is disabled */
      while (LL_RCC_HSE_IsReady() != 0U)
100481e6:	e008      	b.n	100481fa <HAL_RCC_OscConfig+0xfa>
      {
        if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
100481e8:	f7fc fa56 	bl	10044698 <HAL_GetTick>
100481ec:	0002      	movs	r2, r0
100481ee:	68fb      	ldr	r3, [r7, #12]
100481f0:	1ad3      	subs	r3, r2, r3
100481f2:	2b64      	cmp	r3, #100	@ 0x64
100481f4:	d901      	bls.n	100481fa <HAL_RCC_OscConfig+0xfa>
        {
          return HAL_TIMEOUT;
100481f6:	2303      	movs	r3, #3
100481f8:	e0cc      	b.n	10048394 <HAL_RCC_OscConfig+0x294>
      while (LL_RCC_HSE_IsReady() != 0U)
100481fa:	f7ff fde1 	bl	10047dc0 <LL_RCC_HSE_IsReady>
100481fe:	1e03      	subs	r3, r0, #0
10048200:	d1f2      	bne.n	100481e8 <HAL_RCC_OscConfig+0xe8>
      }
    }
  }

  /*--------------------------------- LSI Configuration -----------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
10048202:	687b      	ldr	r3, [r7, #4]
10048204:	681b      	ldr	r3, [r3, #0]
10048206:	2204      	movs	r2, #4
10048208:	4013      	ands	r3, r2
1004820a:	d03a      	beq.n	10048282 <HAL_RCC_OscConfig+0x182>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
1004820c:	687b      	ldr	r3, [r7, #4]
1004820e:	691b      	ldr	r3, [r3, #16]
10048210:	2b00      	cmp	r3, #0
10048212:	d022      	beq.n	1004825a <HAL_RCC_OscConfig+0x15a>
    {
      /* Disable the LSI */
      __HAL_RCC_LSI_DISABLE();
10048214:	f7ff ff10 	bl	10048038 <LL_RCC_LSI_Disable>
      while (__HAL_RCC_GET_LSI_READYFLAG() != 0U);
10048218:	46c0      	nop			@ (mov r8, r8)
1004821a:	f7ff ff1b 	bl	10048054 <LL_RCC_LSI_IsReady>
1004821e:	1e03      	subs	r3, r0, #0
10048220:	d1fb      	bne.n	1004821a <HAL_RCC_OscConfig+0x11a>

      /* Disable the LSE */
      __HAL_RCC_LSE_CONFIG(RCC_LSE_OFF);
10048222:	f7ff fe9d 	bl	10047f60 <LL_RCC_LSE_Disable>

      /* Configure the Low Speed Clock to LSI */
      LL_RCC_LSCO_SetSource(LL_RCC_LSCO_CLKSOURCE_LSI);
10048226:	2380      	movs	r3, #128	@ 0x80
10048228:	025b      	lsls	r3, r3, #9
1004822a:	0018      	movs	r0, r3
1004822c:	f7ff fe74 	bl	10047f18 <LL_RCC_LSCO_SetSource>

      /*  Enable the Internal Low Speed oscillator (LSI)  */
      __HAL_RCC_LSI_ENABLE();
10048230:	f7ff fef4 	bl	1004801c <LL_RCC_LSI_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
10048234:	f7fc fa30 	bl	10044698 <HAL_GetTick>
10048238:	0003      	movs	r3, r0
1004823a:	60fb      	str	r3, [r7, #12]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_LSI_READYFLAG() == 0U)
1004823c:	e008      	b.n	10048250 <HAL_RCC_OscConfig+0x150>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
1004823e:	f7fc fa2b 	bl	10044698 <HAL_GetTick>
10048242:	0002      	movs	r2, r0
10048244:	68fb      	ldr	r3, [r7, #12]
10048246:	1ad3      	subs	r3, r2, r3
10048248:	2b02      	cmp	r3, #2
1004824a:	d901      	bls.n	10048250 <HAL_RCC_OscConfig+0x150>
        {
          return HAL_TIMEOUT;
1004824c:	2303      	movs	r3, #3
1004824e:	e0a1      	b.n	10048394 <HAL_RCC_OscConfig+0x294>
      while (__HAL_RCC_GET_LSI_READYFLAG() == 0U)
10048250:	f7ff ff00 	bl	10048054 <LL_RCC_LSI_IsReady>
10048254:	1e03      	subs	r3, r0, #0
10048256:	d0f2      	beq.n	1004823e <HAL_RCC_OscConfig+0x13e>
10048258:	e013      	b.n	10048282 <HAL_RCC_OscConfig+0x182>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
1004825a:	f7ff feed 	bl	10048038 <LL_RCC_LSI_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
1004825e:	f7fc fa1b 	bl	10044698 <HAL_GetTick>
10048262:	0003      	movs	r3, r0
10048264:	60fb      	str	r3, [r7, #12]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_LSI_READYFLAG() != 0U)
10048266:	e008      	b.n	1004827a <HAL_RCC_OscConfig+0x17a>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
10048268:	f7fc fa16 	bl	10044698 <HAL_GetTick>
1004826c:	0002      	movs	r2, r0
1004826e:	68fb      	ldr	r3, [r7, #12]
10048270:	1ad3      	subs	r3, r2, r3
10048272:	2b02      	cmp	r3, #2
10048274:	d901      	bls.n	1004827a <HAL_RCC_OscConfig+0x17a>
        {
          return HAL_TIMEOUT;
10048276:	2303      	movs	r3, #3
10048278:	e08c      	b.n	10048394 <HAL_RCC_OscConfig+0x294>
      while (__HAL_RCC_GET_LSI_READYFLAG() != 0U)
1004827a:	f7ff feeb 	bl	10048054 <LL_RCC_LSI_IsReady>
1004827e:	1e03      	subs	r3, r0, #0
10048280:	d1f2      	bne.n	10048268 <HAL_RCC_OscConfig+0x168>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
10048282:	687b      	ldr	r3, [r7, #4]
10048284:	681b      	ldr	r3, [r3, #0]
10048286:	2202      	movs	r2, #2
10048288:	4013      	ands	r3, r2
1004828a:	d049      	beq.n	10048320 <HAL_RCC_OscConfig+0x220>

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Disable LSI */
    __HAL_RCC_LSI_DISABLE();
1004828c:	f7ff fed4 	bl	10048038 <LL_RCC_LSI_Disable>

    /* Disable LSE */
    __HAL_RCC_LSE_CONFIG(RCC_LSE_OFF);
10048290:	f7ff fe66 	bl	10047f60 <LL_RCC_LSE_Disable>
    while (__HAL_RCC_GET_LSE_READYFLAG() != 0);
10048294:	46c0      	nop			@ (mov r8, r8)
10048296:	f7ff fe71 	bl	10047f7c <LL_RCC_LSE_IsReady>
1004829a:	1e03      	subs	r3, r0, #0
1004829c:	d1fb      	bne.n	10048296 <HAL_RCC_OscConfig+0x196>

    /* Configure the PB12 and PB13 in NO PULL mode */
    LL_PWR_SetNoPullB(LL_PWR_GPIO_BIT_12 |
1004829e:	23c0      	movs	r3, #192	@ 0xc0
100482a0:	019b      	lsls	r3, r3, #6
100482a2:	0018      	movs	r0, r3
100482a4:	f7ff fd56 	bl	10047d54 <LL_PWR_SetNoPullB>
                      LL_PWR_GPIO_BIT_13);

    /* Configure the Low Speed Clock to LSE */
    LL_RCC_LSCO_SetSource(LL_RCC_LSCO_CLKSOURCE_LSE);
100482a8:	2380      	movs	r3, #128	@ 0x80
100482aa:	021b      	lsls	r3, r3, #8
100482ac:	0018      	movs	r0, r3
100482ae:	f7ff fe33 	bl	10047f18 <LL_RCC_LSCO_SetSource>

    /* Set LSE oscillator drive capability */
    __HAL_RCC_LSEDRIVE_CONFIG(LSE_DRIVE_LEVEL);
100482b2:	2020      	movs	r0, #32
100482b4:	f7ff fe9e 	bl	10047ff4 <LL_RCC_LSE_SetDriveCapability>


    /* Set the new LSE state */
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
100482b8:	687b      	ldr	r3, [r7, #4]
100482ba:	68db      	ldr	r3, [r3, #12]
100482bc:	2b10      	cmp	r3, #16
100482be:	d102      	bne.n	100482c6 <HAL_RCC_OscConfig+0x1c6>
100482c0:	f7ff fe40 	bl	10047f44 <LL_RCC_LSE_Enable>
100482c4:	e001      	b.n	100482ca <HAL_RCC_OscConfig+0x1ca>
100482c6:	f7ff fe4b 	bl	10047f60 <LL_RCC_LSE_Disable>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
100482ca:	687b      	ldr	r3, [r7, #4]
100482cc:	68db      	ldr	r3, [r3, #12]
100482ce:	2b00      	cmp	r3, #0
100482d0:	d013      	beq.n	100482fa <HAL_RCC_OscConfig+0x1fa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
100482d2:	f7fc f9e1 	bl	10044698 <HAL_GetTick>
100482d6:	0003      	movs	r3, r0
100482d8:	60fb      	str	r3, [r7, #12]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_LSE_READYFLAG() == 0U)
100482da:	e009      	b.n	100482f0 <HAL_RCC_OscConfig+0x1f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
100482dc:	f7fc f9dc 	bl	10044698 <HAL_GetTick>
100482e0:	0002      	movs	r2, r0
100482e2:	68fb      	ldr	r3, [r7, #12]
100482e4:	1ad3      	subs	r3, r2, r3
100482e6:	4a2d      	ldr	r2, [pc, #180]	@ (1004839c <HAL_RCC_OscConfig+0x29c>)
100482e8:	4293      	cmp	r3, r2
100482ea:	d901      	bls.n	100482f0 <HAL_RCC_OscConfig+0x1f0>
        {
          return HAL_TIMEOUT;
100482ec:	2303      	movs	r3, #3
100482ee:	e051      	b.n	10048394 <HAL_RCC_OscConfig+0x294>
      while (__HAL_RCC_GET_LSE_READYFLAG() == 0U)
100482f0:	f7ff fe44 	bl	10047f7c <LL_RCC_LSE_IsReady>
100482f4:	1e03      	subs	r3, r0, #0
100482f6:	d0f1      	beq.n	100482dc <HAL_RCC_OscConfig+0x1dc>
100482f8:	e012      	b.n	10048320 <HAL_RCC_OscConfig+0x220>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
100482fa:	f7fc f9cd 	bl	10044698 <HAL_GetTick>
100482fe:	0003      	movs	r3, r0
10048300:	60fb      	str	r3, [r7, #12]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_LSE_READYFLAG() != 0U)
10048302:	e009      	b.n	10048318 <HAL_RCC_OscConfig+0x218>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
10048304:	f7fc f9c8 	bl	10044698 <HAL_GetTick>
10048308:	0002      	movs	r2, r0
1004830a:	68fb      	ldr	r3, [r7, #12]
1004830c:	1ad3      	subs	r3, r2, r3
1004830e:	4a23      	ldr	r2, [pc, #140]	@ (1004839c <HAL_RCC_OscConfig+0x29c>)
10048310:	4293      	cmp	r3, r2
10048312:	d901      	bls.n	10048318 <HAL_RCC_OscConfig+0x218>
        {
          return HAL_TIMEOUT;
10048314:	2303      	movs	r3, #3
10048316:	e03d      	b.n	10048394 <HAL_RCC_OscConfig+0x294>
      while (__HAL_RCC_GET_LSE_READYFLAG() != 0U)
10048318:	f7ff fe30 	bl	10047f7c <LL_RCC_LSE_IsReady>
1004831c:	1e03      	subs	r3, r0, #0
1004831e:	d1f1      	bne.n	10048304 <HAL_RCC_OscConfig+0x204>
      }
    }
  }

  /*------------------------------ LSE Bypass Configuration ------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE_BYPASS) == RCC_OSCILLATORTYPE_LSE_BYPASS)
10048320:	687b      	ldr	r3, [r7, #4]
10048322:	681b      	ldr	r3, [r3, #0]
10048324:	2208      	movs	r2, #8
10048326:	4013      	ands	r3, r2
10048328:	d033      	beq.n	10048392 <HAL_RCC_OscConfig+0x292>

    /* Check the parameters */
    assert_param(IS_RCC_LSE_BYPASS(RCC_OscInitStruct->LSEBYPASSState));

    /* Set the new LSE Bypass configuration -----------------------------------------*/
    __HAL_RCC_LSE_BYPASS_CONFIG(RCC_OscInitStruct->LSEBYPASSState);
1004832a:	687b      	ldr	r3, [r7, #4]
1004832c:	695b      	ldr	r3, [r3, #20]
1004832e:	2b40      	cmp	r3, #64	@ 0x40
10048330:	d102      	bne.n	10048338 <HAL_RCC_OscConfig+0x238>
10048332:	f7ff fe33 	bl	10047f9c <LL_RCC_LSE_EnableBypass>
10048336:	e001      	b.n	1004833c <HAL_RCC_OscConfig+0x23c>
10048338:	f7ff fe3e 	bl	10047fb8 <LL_RCC_LSE_DisableBypass>

    /* Check the LSE Bypass State */
    if (RCC_OscInitStruct->LSEBYPASSState != RCC_LSE_OFF)
1004833c:	687b      	ldr	r3, [r7, #4]
1004833e:	695b      	ldr	r3, [r3, #20]
10048340:	2b00      	cmp	r3, #0
10048342:	d013      	beq.n	1004836c <HAL_RCC_OscConfig+0x26c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
10048344:	f7fc f9a8 	bl	10044698 <HAL_GetTick>
10048348:	0003      	movs	r3, r0
1004834a:	60fb      	str	r3, [r7, #12]

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsBypassEnabled() == 0U)
1004834c:	e009      	b.n	10048362 <HAL_RCC_OscConfig+0x262>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
1004834e:	f7fc f9a3 	bl	10044698 <HAL_GetTick>
10048352:	0002      	movs	r2, r0
10048354:	68fb      	ldr	r3, [r7, #12]
10048356:	1ad3      	subs	r3, r2, r3
10048358:	4a10      	ldr	r2, [pc, #64]	@ (1004839c <HAL_RCC_OscConfig+0x29c>)
1004835a:	4293      	cmp	r3, r2
1004835c:	d901      	bls.n	10048362 <HAL_RCC_OscConfig+0x262>
        {
          return HAL_TIMEOUT;
1004835e:	2303      	movs	r3, #3
10048360:	e018      	b.n	10048394 <HAL_RCC_OscConfig+0x294>
      while (LL_RCC_LSE_IsBypassEnabled() == 0U)
10048362:	f7ff fe37 	bl	10047fd4 <LL_RCC_LSE_IsBypassEnabled>
10048366:	1e03      	subs	r3, r0, #0
10048368:	d0f1      	beq.n	1004834e <HAL_RCC_OscConfig+0x24e>
1004836a:	e012      	b.n	10048392 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
1004836c:	f7fc f994 	bl	10044698 <HAL_GetTick>
10048370:	0003      	movs	r3, r0
10048372:	60fb      	str	r3, [r7, #12]

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsBypassEnabled() != 0U)
10048374:	e009      	b.n	1004838a <HAL_RCC_OscConfig+0x28a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
10048376:	f7fc f98f 	bl	10044698 <HAL_GetTick>
1004837a:	0002      	movs	r2, r0
1004837c:	68fb      	ldr	r3, [r7, #12]
1004837e:	1ad3      	subs	r3, r2, r3
10048380:	4a06      	ldr	r2, [pc, #24]	@ (1004839c <HAL_RCC_OscConfig+0x29c>)
10048382:	4293      	cmp	r3, r2
10048384:	d901      	bls.n	1004838a <HAL_RCC_OscConfig+0x28a>
        {
          return HAL_TIMEOUT;
10048386:	2303      	movs	r3, #3
10048388:	e004      	b.n	10048394 <HAL_RCC_OscConfig+0x294>
      while (LL_RCC_LSE_IsBypassEnabled() != 0U)
1004838a:	f7ff fe23 	bl	10047fd4 <LL_RCC_LSE_IsBypassEnabled>
1004838e:	1e03      	subs	r3, r0, #0
10048390:	d1f1      	bne.n	10048376 <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }

  return HAL_OK;
10048392:	2300      	movs	r3, #0
}
10048394:	0018      	movs	r0, r3
10048396:	46bd      	mov	sp, r7
10048398:	b004      	add	sp, #16
1004839a:	bd80      	pop	{r7, pc}
1004839c:	00001388 	.word	0x00001388

100483a0 <HAL_RCC_ClockConfig>:
  *         currently used as system clock source.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
100483a0:	b580      	push	{r7, lr}
100483a2:	b084      	sub	sp, #16
100483a4:	af00      	add	r7, sp, #0
100483a6:	6078      	str	r0, [r7, #4]
100483a8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
100483aa:	687b      	ldr	r3, [r7, #4]
100483ac:	2b00      	cmp	r3, #0
100483ae:	d101      	bne.n	100483b4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
100483b0:	2301      	movs	r3, #1
100483b2:	e098      	b.n	100484e6 <HAL_RCC_ClockConfig+0x146>

  /* Check the parameters */
  assert_param(IS_FLASH_WAIT_STATES(FLatency));

  /* Set FALSH_WAIT_STATES_1 */
  __HAL_FLASH_SET_WAIT_STATES(FLatency);
100483b4:	4b4e      	ldr	r3, [pc, #312]	@ (100484f0 <HAL_RCC_ClockConfig+0x150>)
100483b6:	685b      	ldr	r3, [r3, #4]
100483b8:	2230      	movs	r2, #48	@ 0x30
100483ba:	4393      	bics	r3, r2
100483bc:	0019      	movs	r1, r3
100483be:	4b4c      	ldr	r3, [pc, #304]	@ (100484f0 <HAL_RCC_ClockConfig+0x150>)
100483c0:	683a      	ldr	r2, [r7, #0]
100483c2:	430a      	orrs	r2, r1
100483c4:	605a      	str	r2, [r3, #4]
  /*------------------------- SYSCLK Configuration ---------------------------*/
  assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
  assert_param(IS_RCC_SYSCLK_DIVIDER(RCC_ClkInitStruct->SYSCLKDivider));

  /* HSI is selected as System Clock Source */
  if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
100483c6:	687b      	ldr	r3, [r7, #4]
100483c8:	681b      	ldr	r3, [r3, #0]
100483ca:	2b02      	cmp	r3, #2
100483cc:	d10e      	bne.n	100483ec <HAL_RCC_ClockConfig+0x4c>
  {
    LL_RCC_HSI_Enable();
100483ce:	f7ff fd41 	bl	10047e54 <LL_RCC_HSI_Enable>
    
    /* Check the HSI ready flag */
    if (LL_RCC_HSI_IsReady() == 0U)
100483d2:	f7ff fd67 	bl	10047ea4 <LL_RCC_HSI_IsReady>
100483d6:	1e03      	subs	r3, r0, #0
100483d8:	d101      	bne.n	100483de <HAL_RCC_ClockConfig+0x3e>
    {
      return HAL_ERROR;
100483da:	2301      	movs	r3, #1
100483dc:	e083      	b.n	100484e6 <HAL_RCC_ClockConfig+0x146>
    }

    /* Disable the RC64MPLL*/
    __HAL_RCC_RC64MPLL_DISABLE();
100483de:	f7ff fe57 	bl	10048090 <LL_RCC_RC64MPLL_Disable>
    
    /* Configure the RC64MPLL multiplication factor */
    __HAL_RCC_RC64MPLL_PRESC_CONFIG(RCC_ClkInitStruct->SYSCLKDivider);
100483e2:	687b      	ldr	r3, [r7, #4]
100483e4:	685b      	ldr	r3, [r3, #4]
100483e6:	0018      	movs	r0, r3
100483e8:	f7ff fe76 	bl	100480d8 <LL_RCC_SetRC64MPLLPrescaler>
  }

  /* RC64MPLL is selected as System Clock Source */
  if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_RC64MPLL)
100483ec:	687b      	ldr	r3, [r7, #4]
100483ee:	681b      	ldr	r3, [r3, #0]
100483f0:	2b00      	cmp	r3, #0
100483f2:	d124      	bne.n	1004843e <HAL_RCC_ClockConfig+0x9e>
  {
    /* Check the HSI ready flag */
    if (LL_RCC_HSI_IsReady() == 0U)
100483f4:	f7ff fd56 	bl	10047ea4 <LL_RCC_HSI_IsReady>
100483f8:	1e03      	subs	r3, r0, #0
100483fa:	d101      	bne.n	10048400 <HAL_RCC_ClockConfig+0x60>
    {
      return HAL_ERROR;
100483fc:	2301      	movs	r3, #1
100483fe:	e072      	b.n	100484e6 <HAL_RCC_ClockConfig+0x146>
    }

    /* Check the HSE ready flag */
    if (LL_RCC_HSE_IsReady() == 0U)
10048400:	f7ff fcde 	bl	10047dc0 <LL_RCC_HSE_IsReady>
10048404:	1e03      	subs	r3, r0, #0
10048406:	d101      	bne.n	1004840c <HAL_RCC_ClockConfig+0x6c>
    {
      return HAL_ERROR;
10048408:	2301      	movs	r3, #1
1004840a:	e06c      	b.n	100484e6 <HAL_RCC_ClockConfig+0x146>
    }

    /* Enable the RC64MPLL*/
    __HAL_RCC_RC64MPLL_ENABLE();
1004840c:	f7ff fe32 	bl	10048074 <LL_RCC_RC64MPLL_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
10048410:	f7fc f942 	bl	10044698 <HAL_GetTick>
10048414:	0003      	movs	r3, r0
10048416:	60fb      	str	r3, [r7, #12]

    /* Wait till RC64MPLL is ready */
    while (LL_RCC_RC64MPLL_IsReady() == 0)
10048418:	e008      	b.n	1004842c <HAL_RCC_ClockConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
1004841a:	f7fc f93d 	bl	10044698 <HAL_GetTick>
1004841e:	0002      	movs	r2, r0
10048420:	68fb      	ldr	r3, [r7, #12]
10048422:	1ad3      	subs	r3, r2, r3
10048424:	2b02      	cmp	r3, #2
10048426:	d901      	bls.n	1004842c <HAL_RCC_ClockConfig+0x8c>
      {
        return HAL_TIMEOUT;
10048428:	2303      	movs	r3, #3
1004842a:	e05c      	b.n	100484e6 <HAL_RCC_ClockConfig+0x146>
    while (LL_RCC_RC64MPLL_IsReady() == 0)
1004842c:	f7ff fe40 	bl	100480b0 <LL_RCC_RC64MPLL_IsReady>
10048430:	1e03      	subs	r3, r0, #0
10048432:	d0f2      	beq.n	1004841a <HAL_RCC_ClockConfig+0x7a>
      }
    }

    /* Configure the RC64MPLL multiplication factor */
    __HAL_RCC_RC64MPLL_PRESC_CONFIG(RCC_ClkInitStruct->SYSCLKDivider);
10048434:	687b      	ldr	r3, [r7, #4]
10048436:	685b      	ldr	r3, [r3, #4]
10048438:	0018      	movs	r0, r3
1004843a:	f7ff fe4d 	bl	100480d8 <LL_RCC_SetRC64MPLLPrescaler>
  }

  /* DIRECT_HSE is selected as System Clock Source */
  if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_DIRECT_HSE)
1004843e:	687b      	ldr	r3, [r7, #4]
10048440:	681b      	ldr	r3, [r3, #0]
10048442:	2b01      	cmp	r3, #1
10048444:	d117      	bne.n	10048476 <HAL_RCC_ClockConfig+0xd6>
  {
    /* Enable the DIRECT_HSE configuration */
    LL_RCC_DIRECT_HSE_Enable();
10048446:	f7ff fd41 	bl	10047ecc <LL_RCC_DIRECT_HSE_Enable>

    /* Check the HSI ready flag */
    if (LL_RCC_HSI_IsReady() != 0U)
1004844a:	f7ff fd2b 	bl	10047ea4 <LL_RCC_HSI_IsReady>
1004844e:	1e03      	subs	r3, r0, #0
10048450:	d001      	beq.n	10048456 <HAL_RCC_ClockConfig+0xb6>
    {
      return HAL_ERROR;
10048452:	2301      	movs	r3, #1
10048454:	e047      	b.n	100484e6 <HAL_RCC_ClockConfig+0x146>
    }

    /* Check the HSE ready flag */
    if (LL_RCC_HSE_IsReady() == 0U)
10048456:	f7ff fcb3 	bl	10047dc0 <LL_RCC_HSE_IsReady>
1004845a:	1e03      	subs	r3, r0, #0
1004845c:	d101      	bne.n	10048462 <HAL_RCC_ClockConfig+0xc2>
    {
      return HAL_ERROR;
1004845e:	2301      	movs	r3, #1
10048460:	e041      	b.n	100484e6 <HAL_RCC_ClockConfig+0x146>
    }

    /* Configure the DIRECT_HSE multiplication factor */
    __HAL_RCC_DIRECT_HSE_PRESC_CONFIG(RCC_ClkInitStruct->SYSCLKDivider);
10048462:	4b24      	ldr	r3, [pc, #144]	@ (100484f4 <HAL_RCC_ClockConfig+0x154>)
10048464:	689b      	ldr	r3, [r3, #8]
10048466:	22e0      	movs	r2, #224	@ 0xe0
10048468:	4393      	bics	r3, r2
1004846a:	0019      	movs	r1, r3
1004846c:	687b      	ldr	r3, [r7, #4]
1004846e:	685a      	ldr	r2, [r3, #4]
10048470:	4b20      	ldr	r3, [pc, #128]	@ (100484f4 <HAL_RCC_ClockConfig+0x154>)
10048472:	430a      	orrs	r2, r1
10048474:	609a      	str	r2, [r3, #8]
  /*----------------------- FLASH Latency Configuration ------------------------*/
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the FLASH clock */

  /* Setup flash wait states because according the system clock frequency */
  if (FLatency != __HAL_FLASH_GET_WAIT_STATES())
10048476:	4b1e      	ldr	r3, [pc, #120]	@ (100484f0 <HAL_RCC_ClockConfig+0x150>)
10048478:	685b      	ldr	r3, [r3, #4]
1004847a:	2230      	movs	r2, #48	@ 0x30
1004847c:	4013      	ands	r3, r2
1004847e:	683a      	ldr	r2, [r7, #0]
10048480:	429a      	cmp	r2, r3
10048482:	d01d      	beq.n	100484c0 <HAL_RCC_ClockConfig+0x120>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_CONFIG register */
    __HAL_FLASH_SET_WAIT_STATES(FLatency);
10048484:	4b1a      	ldr	r3, [pc, #104]	@ (100484f0 <HAL_RCC_ClockConfig+0x150>)
10048486:	685b      	ldr	r3, [r3, #4]
10048488:	2230      	movs	r2, #48	@ 0x30
1004848a:	4393      	bics	r3, r2
1004848c:	0019      	movs	r1, r3
1004848e:	4b18      	ldr	r3, [pc, #96]	@ (100484f0 <HAL_RCC_ClockConfig+0x150>)
10048490:	683a      	ldr	r2, [r7, #0]
10048492:	430a      	orrs	r2, r1
10048494:	605a      	str	r2, [r3, #4]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
10048496:	f7fc f8ff 	bl	10044698 <HAL_GetTick>
1004849a:	0003      	movs	r3, r0
1004849c:	60fb      	str	r3, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_CONFIG register */
    while (__HAL_FLASH_GET_WAIT_STATES() != FLatency)
1004849e:	e008      	b.n	100484b2 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
100484a0:	f7fc f8fa 	bl	10044698 <HAL_GetTick>
100484a4:	0002      	movs	r2, r0
100484a6:	68fb      	ldr	r3, [r7, #12]
100484a8:	1ad3      	subs	r3, r2, r3
100484aa:	2b02      	cmp	r3, #2
100484ac:	d901      	bls.n	100484b2 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
100484ae:	2303      	movs	r3, #3
100484b0:	e019      	b.n	100484e6 <HAL_RCC_ClockConfig+0x146>
    while (__HAL_FLASH_GET_WAIT_STATES() != FLatency)
100484b2:	4b0f      	ldr	r3, [pc, #60]	@ (100484f0 <HAL_RCC_ClockConfig+0x150>)
100484b4:	685b      	ldr	r3, [r3, #4]
100484b6:	2230      	movs	r2, #48	@ 0x30
100484b8:	4013      	ands	r3, r2
100484ba:	683a      	ldr	r2, [r7, #0]
100484bc:	429a      	cmp	r2, r3
100484be:	d1ef      	bne.n	100484a0 <HAL_RCC_ClockConfig+0x100>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  for (volatile int i = 0; i < 6; i++)
100484c0:	2300      	movs	r3, #0
100484c2:	60bb      	str	r3, [r7, #8]
100484c4:	e003      	b.n	100484ce <HAL_RCC_ClockConfig+0x12e>
  {
    __asm("NOP");
100484c6:	46c0      	nop			@ (mov r8, r8)
  for (volatile int i = 0; i < 6; i++)
100484c8:	68bb      	ldr	r3, [r7, #8]
100484ca:	3301      	adds	r3, #1
100484cc:	60bb      	str	r3, [r7, #8]
100484ce:	68bb      	ldr	r3, [r7, #8]
100484d0:	2b05      	cmp	r3, #5
100484d2:	ddf8      	ble.n	100484c6 <HAL_RCC_ClockConfig+0x126>
  }
  SystemCoreClockUpdate();
100484d4:	f7fa ff0c 	bl	100432f0 <SystemCoreClockUpdate>

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
100484d8:	f7fc f8e8 	bl	100446ac <HAL_GetTickPrio>
100484dc:	0003      	movs	r3, r0
100484de:	0018      	movs	r0, r3
100484e0:	f7fc f880 	bl	100445e4 <HAL_InitTick>
100484e4:	0003      	movs	r3, r0
}
100484e6:	0018      	movs	r0, r3
100484e8:	46bd      	mov	sp, r7
100484ea:	b004      	add	sp, #16
100484ec:	bd80      	pop	{r7, pc}
100484ee:	46c0      	nop			@ (mov r8, r8)
100484f0:	40001000 	.word	0x40001000
100484f4:	48400000 	.word	0x48400000

100484f8 <HAL_RCC_GetSysClockFreq>:
  *         content of the SystemCoreClock CMSIS variable
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
100484f8:	b580      	push	{r7, lr}
100484fa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
100484fc:	4b02      	ldr	r3, [pc, #8]	@ (10048508 <HAL_RCC_GetSysClockFreq+0x10>)
100484fe:	681b      	ldr	r3, [r3, #0]
}
10048500:	0018      	movs	r0, r3
10048502:	46bd      	mov	sp, r7
10048504:	bd80      	pop	{r7, pc}
10048506:	46c0      	nop			@ (mov r8, r8)
10048508:	2000064c 	.word	0x2000064c

1004850c <LL_RCC_LSCO_SetSource>:
{
1004850c:	b580      	push	{r7, lr}
1004850e:	b082      	sub	sp, #8
10048510:	af00      	add	r7, sp, #0
10048512:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_CLKSLOWSEL, Source);
10048514:	4b06      	ldr	r3, [pc, #24]	@ (10048530 <LL_RCC_LSCO_SetSource+0x24>)
10048516:	689b      	ldr	r3, [r3, #8]
10048518:	4a06      	ldr	r2, [pc, #24]	@ (10048534 <LL_RCC_LSCO_SetSource+0x28>)
1004851a:	4013      	ands	r3, r2
1004851c:	0019      	movs	r1, r3
1004851e:	4b04      	ldr	r3, [pc, #16]	@ (10048530 <LL_RCC_LSCO_SetSource+0x24>)
10048520:	687a      	ldr	r2, [r7, #4]
10048522:	430a      	orrs	r2, r1
10048524:	609a      	str	r2, [r3, #8]
}
10048526:	46c0      	nop			@ (mov r8, r8)
10048528:	46bd      	mov	sp, r7
1004852a:	b002      	add	sp, #8
1004852c:	bd80      	pop	{r7, pc}
1004852e:	46c0      	nop			@ (mov r8, r8)
10048530:	48400000 	.word	0x48400000
10048534:	fffe7fff 	.word	0xfffe7fff

10048538 <LL_RCC_SetRFClock>:
{
10048538:	b580      	push	{r7, lr}
1004853a:	b082      	sub	sp, #8
1004853c:	af00      	add	r7, sp, #0
1004853e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->APB2ENR, RCC_APB2ENR_CLKBLEDIV, Source);
10048540:	4b06      	ldr	r3, [pc, #24]	@ (1004855c <LL_RCC_SetRFClock+0x24>)
10048542:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
10048544:	2206      	movs	r2, #6
10048546:	4393      	bics	r3, r2
10048548:	0019      	movs	r1, r3
1004854a:	4b04      	ldr	r3, [pc, #16]	@ (1004855c <LL_RCC_SetRFClock+0x24>)
1004854c:	687a      	ldr	r2, [r7, #4]
1004854e:	430a      	orrs	r2, r1
10048550:	661a      	str	r2, [r3, #96]	@ 0x60
}
10048552:	46c0      	nop			@ (mov r8, r8)
10048554:	46bd      	mov	sp, r7
10048556:	b002      	add	sp, #8
10048558:	bd80      	pop	{r7, pc}
1004855a:	46c0      	nop			@ (mov r8, r8)
1004855c:	48400000 	.word	0x48400000

10048560 <LL_RCC_SetSMPSPrescaler>:
{
10048560:	b580      	push	{r7, lr}
10048562:	b082      	sub	sp, #8
10048564:	af00      	add	r7, sp, #0
10048566:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SMPSDIV, Prescaler);
10048568:	4b06      	ldr	r3, [pc, #24]	@ (10048584 <LL_RCC_SetSMPSPrescaler+0x24>)
1004856a:	689b      	ldr	r3, [r3, #8]
1004856c:	4a06      	ldr	r2, [pc, #24]	@ (10048588 <LL_RCC_SetSMPSPrescaler+0x28>)
1004856e:	4013      	ands	r3, r2
10048570:	0019      	movs	r1, r3
10048572:	4b04      	ldr	r3, [pc, #16]	@ (10048584 <LL_RCC_SetSMPSPrescaler+0x24>)
10048574:	687a      	ldr	r2, [r7, #4]
10048576:	430a      	orrs	r2, r1
10048578:	609a      	str	r2, [r3, #8]
}
1004857a:	46c0      	nop			@ (mov r8, r8)
1004857c:	46bd      	mov	sp, r7
1004857e:	b002      	add	sp, #8
10048580:	bd80      	pop	{r7, pc}
10048582:	46c0      	nop			@ (mov r8, r8)
10048584:	48400000 	.word	0x48400000
10048588:	ffffefff 	.word	0xffffefff

1004858c <LL_RCC_SetSPI2I2SClockSource>:
{
1004858c:	b580      	push	{r7, lr}
1004858e:	b082      	sub	sp, #8
10048590:	af00      	add	r7, sp, #0
10048592:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SPI2I2SCLKSEL, Source);
10048594:	4b06      	ldr	r3, [pc, #24]	@ (100485b0 <LL_RCC_SetSPI2I2SClockSource+0x24>)
10048596:	689b      	ldr	r3, [r3, #8]
10048598:	4a06      	ldr	r2, [pc, #24]	@ (100485b4 <LL_RCC_SetSPI2I2SClockSource+0x28>)
1004859a:	4013      	ands	r3, r2
1004859c:	0019      	movs	r1, r3
1004859e:	4b04      	ldr	r3, [pc, #16]	@ (100485b0 <LL_RCC_SetSPI2I2SClockSource+0x24>)
100485a0:	687a      	ldr	r2, [r7, #4]
100485a2:	430a      	orrs	r2, r1
100485a4:	609a      	str	r2, [r3, #8]
}
100485a6:	46c0      	nop			@ (mov r8, r8)
100485a8:	46bd      	mov	sp, r7
100485aa:	b002      	add	sp, #8
100485ac:	bd80      	pop	{r7, pc}
100485ae:	46c0      	nop			@ (mov r8, r8)
100485b0:	48400000 	.word	0x48400000
100485b4:	ff7fffff 	.word	0xff7fffff

100485b8 <LL_RCC_SetSPI3I2SClockSource>:
{
100485b8:	b580      	push	{r7, lr}
100485ba:	b082      	sub	sp, #8
100485bc:	af00      	add	r7, sp, #0
100485be:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SPI3I2SCLKSEL, Source);
100485c0:	4b06      	ldr	r3, [pc, #24]	@ (100485dc <LL_RCC_SetSPI3I2SClockSource+0x24>)
100485c2:	689b      	ldr	r3, [r3, #8]
100485c4:	4a06      	ldr	r2, [pc, #24]	@ (100485e0 <LL_RCC_SetSPI3I2SClockSource+0x28>)
100485c6:	4013      	ands	r3, r2
100485c8:	0019      	movs	r1, r3
100485ca:	4b04      	ldr	r3, [pc, #16]	@ (100485dc <LL_RCC_SetSPI3I2SClockSource+0x24>)
100485cc:	687a      	ldr	r2, [r7, #4]
100485ce:	430a      	orrs	r2, r1
100485d0:	609a      	str	r2, [r3, #8]
}
100485d2:	46c0      	nop			@ (mov r8, r8)
100485d4:	46bd      	mov	sp, r7
100485d6:	b002      	add	sp, #8
100485d8:	bd80      	pop	{r7, pc}
100485da:	46c0      	nop			@ (mov r8, r8)
100485dc:	48400000 	.word	0x48400000
100485e0:	ffbfffff 	.word	0xffbfffff

100485e4 <HAL_RCCEx_PeriphCLKConfig>:
  *  @note   (*) Peripherals are not available on all devices
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
100485e4:	b580      	push	{r7, lr}
100485e6:	b082      	sub	sp, #8
100485e8:	af00      	add	r7, sp, #0
100485ea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RF_BLE clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RF) == RCC_PERIPHCLK_RF))
100485ec:	687b      	ldr	r3, [r7, #4]
100485ee:	681b      	ldr	r3, [r3, #0]
100485f0:	2201      	movs	r2, #1
100485f2:	4013      	ands	r3, r2
100485f4:	d004      	beq.n	10048600 <HAL_RCCEx_PeriphCLKConfig+0x1c>
  {
    assert_param(IS_RCC_RF_BLE_CLOCK_SOURCE(PeriphClkInit->RFClockSelection));
    __HAL_RCC_RF_CLK_SET_CONFIG(PeriphClkInit->RFClockSelection);
100485f6:	687b      	ldr	r3, [r7, #4]
100485f8:	691b      	ldr	r3, [r3, #16]
100485fa:	0018      	movs	r0, r3
100485fc:	f7ff ff9c 	bl	10048538 <LL_RCC_SetRFClock>
  }

  /*-------------------------- SMPS clock configuration -------------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS))
10048600:	687b      	ldr	r3, [r7, #4]
10048602:	681b      	ldr	r3, [r3, #0]
10048604:	2202      	movs	r2, #2
10048606:	4013      	ands	r3, r2
10048608:	d004      	beq.n	10048614 <HAL_RCCEx_PeriphCLKConfig+0x30>
  {
    assert_param(IS_RCC_SMPS_CLOCK_PRESC(PeriphClkInit->SmpsDivSelection));
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
1004860a:	687b      	ldr	r3, [r7, #4]
1004860c:	695b      	ldr	r3, [r3, #20]
1004860e:	0018      	movs	r0, r3
10048610:	f7ff ffa6 	bl	10048560 <LL_RCC_SetSMPSPrescaler>
  }

#if defined(SPI2)
  /*-------------------------- SPI2_I2S clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI2_I2S) == RCC_PERIPHCLK_SPI2_I2S))
10048614:	687b      	ldr	r3, [r7, #4]
10048616:	681b      	ldr	r3, [r3, #0]
10048618:	2204      	movs	r2, #4
1004861a:	4013      	ands	r3, r2
1004861c:	d004      	beq.n	10048628 <HAL_RCCEx_PeriphCLKConfig+0x44>
  {
    assert_param(IS_RCC_SPI2I2S_CLOCK_SOURCE(PeriphClkInit->SPI2I2SClockSelection));
    __HAL_RCC_SPI2I2S_CLK_CONFIG(PeriphClkInit->SPI2I2SClockSelection);
1004861e:	687b      	ldr	r3, [r7, #4]
10048620:	685b      	ldr	r3, [r3, #4]
10048622:	0018      	movs	r0, r3
10048624:	f7ff ffb2 	bl	1004858c <LL_RCC_SetSPI2I2SClockSource>
  }
#endif
#if defined(SPI3)
  /*-------------------------- SPI3_I2S clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI3_I2S) == RCC_PERIPHCLK_SPI3_I2S))
10048628:	687b      	ldr	r3, [r7, #4]
1004862a:	681b      	ldr	r3, [r3, #0]
1004862c:	2208      	movs	r2, #8
1004862e:	4013      	ands	r3, r2
10048630:	d004      	beq.n	1004863c <HAL_RCCEx_PeriphCLKConfig+0x58>
  {
    assert_param(IS_RCC_SPI3I2S_CLOCK_SOURCE(PeriphClkInit->SPI3I2SClockSelection));
    __HAL_RCC_SPI3I2S_CLK_CONFIG(PeriphClkInit->SPI3I2SClockSelection);
10048632:	687b      	ldr	r3, [r7, #4]
10048634:	689b      	ldr	r3, [r3, #8]
10048636:	0018      	movs	r0, r3
10048638:	f7ff ffbe 	bl	100485b8 <LL_RCC_SetSPI3I2SClockSource>
    __HAL_RCC_LPUART1_CLK_CONFIG(PeriphClkInit->LPUART1ClockSelection);
  }
#endif /* RCC_CFGR_LPUCLKSEL */

  /*-------------------------- RTC WDG BLEWKUP clock source configuration ---------------------*/
  if ((((PeriphClkInit->RTCWDGBLEWKUPClockSelection) & RCC_PERIPHCLK_RTC_WDG_BLEWKUP) == RCC_PERIPHCLK_RTC_WDG_BLEWKUP))
1004863c:	687b      	ldr	r3, [r7, #4]
1004863e:	68db      	ldr	r3, [r3, #12]
10048640:	2220      	movs	r2, #32
10048642:	4013      	ands	r3, r2
10048644:	d004      	beq.n	10048650 <HAL_RCCEx_PeriphCLKConfig+0x6c>
  {
    assert_param(IS_RCC_RTC_WDG_BLEWKUP_CLOCK_SOURCE(PeriphClkInit->RTCWDGBLEWKUPClockSelection));
    __HAL_RCC_RTC_WDG_BLEWKUP_CLK_CONFIG(PeriphClkInit->RTCWDGBLEWKUPClockSelection);
10048646:	687b      	ldr	r3, [r7, #4]
10048648:	68db      	ldr	r3, [r3, #12]
1004864a:	0018      	movs	r0, r3
1004864c:	f7ff ff5e 	bl	1004850c <LL_RCC_LSCO_SetSource>
  }

  return HAL_OK;
10048650:	2300      	movs	r3, #0
}
10048652:	0018      	movs	r0, r3
10048654:	46bd      	mov	sp, r7
10048656:	b002      	add	sp, #8
10048658:	bd80      	pop	{r7, pc}
	...

1004865c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
1004865c:	b580      	push	{r7, lr}
1004865e:	b084      	sub	sp, #16
10048660:	af00      	add	r7, sp, #0
10048662:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
10048664:	687b      	ldr	r3, [r7, #4]
10048666:	2b00      	cmp	r3, #0
10048668:	d101      	bne.n	1004866e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
1004866a:	2301      	movs	r3, #1
1004866c:	e0a8      	b.n	100487c0 <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
1004866e:	687b      	ldr	r3, [r7, #4]
10048670:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
10048672:	2b00      	cmp	r3, #0
10048674:	d109      	bne.n	1004868a <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
10048676:	687b      	ldr	r3, [r7, #4]
10048678:	685a      	ldr	r2, [r3, #4]
1004867a:	2382      	movs	r3, #130	@ 0x82
1004867c:	005b      	lsls	r3, r3, #1
1004867e:	429a      	cmp	r2, r3
10048680:	d009      	beq.n	10048696 <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
10048682:	687b      	ldr	r3, [r7, #4]
10048684:	2200      	movs	r2, #0
10048686:	61da      	str	r2, [r3, #28]
10048688:	e005      	b.n	10048696 <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
1004868a:	687b      	ldr	r3, [r7, #4]
1004868c:	2200      	movs	r2, #0
1004868e:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
10048690:	687b      	ldr	r3, [r7, #4]
10048692:	2200      	movs	r2, #0
10048694:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
10048696:	687b      	ldr	r3, [r7, #4]
10048698:	2200      	movs	r2, #0
1004869a:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
1004869c:	687b      	ldr	r3, [r7, #4]
1004869e:	225d      	movs	r2, #93	@ 0x5d
100486a0:	5c9b      	ldrb	r3, [r3, r2]
100486a2:	b2db      	uxtb	r3, r3
100486a4:	2b00      	cmp	r3, #0
100486a6:	d107      	bne.n	100486b8 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
100486a8:	687b      	ldr	r3, [r7, #4]
100486aa:	225c      	movs	r2, #92	@ 0x5c
100486ac:	2100      	movs	r1, #0
100486ae:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
100486b0:	687b      	ldr	r3, [r7, #4]
100486b2:	0018      	movs	r0, r3
100486b4:	f7fa fc08 	bl	10042ec8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
100486b8:	687b      	ldr	r3, [r7, #4]
100486ba:	225d      	movs	r2, #93	@ 0x5d
100486bc:	2102      	movs	r1, #2
100486be:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
100486c0:	687b      	ldr	r3, [r7, #4]
100486c2:	681b      	ldr	r3, [r3, #0]
100486c4:	681a      	ldr	r2, [r3, #0]
100486c6:	687b      	ldr	r3, [r7, #4]
100486c8:	681b      	ldr	r3, [r3, #0]
100486ca:	2140      	movs	r1, #64	@ 0x40
100486cc:	438a      	bics	r2, r1
100486ce:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
100486d0:	687b      	ldr	r3, [r7, #4]
100486d2:	68da      	ldr	r2, [r3, #12]
100486d4:	23e0      	movs	r3, #224	@ 0xe0
100486d6:	00db      	lsls	r3, r3, #3
100486d8:	429a      	cmp	r2, r3
100486da:	d902      	bls.n	100486e2 <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
100486dc:	2300      	movs	r3, #0
100486de:	60fb      	str	r3, [r7, #12]
100486e0:	e002      	b.n	100486e8 <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
100486e2:	2380      	movs	r3, #128	@ 0x80
100486e4:	015b      	lsls	r3, r3, #5
100486e6:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
100486e8:	687b      	ldr	r3, [r7, #4]
100486ea:	68da      	ldr	r2, [r3, #12]
100486ec:	23f0      	movs	r3, #240	@ 0xf0
100486ee:	011b      	lsls	r3, r3, #4
100486f0:	429a      	cmp	r2, r3
100486f2:	d008      	beq.n	10048706 <HAL_SPI_Init+0xaa>
100486f4:	687b      	ldr	r3, [r7, #4]
100486f6:	68da      	ldr	r2, [r3, #12]
100486f8:	23e0      	movs	r3, #224	@ 0xe0
100486fa:	00db      	lsls	r3, r3, #3
100486fc:	429a      	cmp	r2, r3
100486fe:	d002      	beq.n	10048706 <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
10048700:	687b      	ldr	r3, [r7, #4]
10048702:	2200      	movs	r2, #0
10048704:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
10048706:	687b      	ldr	r3, [r7, #4]
10048708:	685a      	ldr	r2, [r3, #4]
1004870a:	2382      	movs	r3, #130	@ 0x82
1004870c:	005b      	lsls	r3, r3, #1
1004870e:	401a      	ands	r2, r3
10048710:	687b      	ldr	r3, [r7, #4]
10048712:	6899      	ldr	r1, [r3, #8]
10048714:	2384      	movs	r3, #132	@ 0x84
10048716:	021b      	lsls	r3, r3, #8
10048718:	400b      	ands	r3, r1
1004871a:	431a      	orrs	r2, r3
1004871c:	687b      	ldr	r3, [r7, #4]
1004871e:	691b      	ldr	r3, [r3, #16]
10048720:	2102      	movs	r1, #2
10048722:	400b      	ands	r3, r1
10048724:	431a      	orrs	r2, r3
10048726:	687b      	ldr	r3, [r7, #4]
10048728:	695b      	ldr	r3, [r3, #20]
1004872a:	2101      	movs	r1, #1
1004872c:	400b      	ands	r3, r1
1004872e:	431a      	orrs	r2, r3
10048730:	687b      	ldr	r3, [r7, #4]
10048732:	6999      	ldr	r1, [r3, #24]
10048734:	2380      	movs	r3, #128	@ 0x80
10048736:	009b      	lsls	r3, r3, #2
10048738:	400b      	ands	r3, r1
1004873a:	431a      	orrs	r2, r3
1004873c:	687b      	ldr	r3, [r7, #4]
1004873e:	69db      	ldr	r3, [r3, #28]
10048740:	2138      	movs	r1, #56	@ 0x38
10048742:	400b      	ands	r3, r1
10048744:	431a      	orrs	r2, r3
10048746:	687b      	ldr	r3, [r7, #4]
10048748:	6a1b      	ldr	r3, [r3, #32]
1004874a:	2180      	movs	r1, #128	@ 0x80
1004874c:	400b      	ands	r3, r1
1004874e:	431a      	orrs	r2, r3
10048750:	0011      	movs	r1, r2
10048752:	687b      	ldr	r3, [r7, #4]
10048754:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
10048756:	2380      	movs	r3, #128	@ 0x80
10048758:	019b      	lsls	r3, r3, #6
1004875a:	401a      	ands	r2, r3
1004875c:	687b      	ldr	r3, [r7, #4]
1004875e:	681b      	ldr	r3, [r3, #0]
10048760:	430a      	orrs	r2, r1
10048762:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
10048764:	687b      	ldr	r3, [r7, #4]
10048766:	699b      	ldr	r3, [r3, #24]
10048768:	0c1b      	lsrs	r3, r3, #16
1004876a:	2204      	movs	r2, #4
1004876c:	401a      	ands	r2, r3
1004876e:	687b      	ldr	r3, [r7, #4]
10048770:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
10048772:	2110      	movs	r1, #16
10048774:	400b      	ands	r3, r1
10048776:	431a      	orrs	r2, r3
10048778:	687b      	ldr	r3, [r7, #4]
1004877a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
1004877c:	2108      	movs	r1, #8
1004877e:	400b      	ands	r3, r1
10048780:	431a      	orrs	r2, r3
10048782:	687b      	ldr	r3, [r7, #4]
10048784:	68d9      	ldr	r1, [r3, #12]
10048786:	23f0      	movs	r3, #240	@ 0xf0
10048788:	011b      	lsls	r3, r3, #4
1004878a:	400b      	ands	r3, r1
1004878c:	431a      	orrs	r2, r3
1004878e:	0011      	movs	r1, r2
10048790:	68fa      	ldr	r2, [r7, #12]
10048792:	2380      	movs	r3, #128	@ 0x80
10048794:	015b      	lsls	r3, r3, #5
10048796:	401a      	ands	r2, r3
10048798:	687b      	ldr	r3, [r7, #4]
1004879a:	681b      	ldr	r3, [r3, #0]
1004879c:	430a      	orrs	r2, r1
1004879e:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
100487a0:	687b      	ldr	r3, [r7, #4]
100487a2:	681b      	ldr	r3, [r3, #0]
100487a4:	69da      	ldr	r2, [r3, #28]
100487a6:	687b      	ldr	r3, [r7, #4]
100487a8:	681b      	ldr	r3, [r3, #0]
100487aa:	4907      	ldr	r1, [pc, #28]	@ (100487c8 <HAL_SPI_Init+0x16c>)
100487ac:	400a      	ands	r2, r1
100487ae:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
100487b0:	687b      	ldr	r3, [r7, #4]
100487b2:	2200      	movs	r2, #0
100487b4:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
100487b6:	687b      	ldr	r3, [r7, #4]
100487b8:	225d      	movs	r2, #93	@ 0x5d
100487ba:	2101      	movs	r1, #1
100487bc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
100487be:	2300      	movs	r3, #0
}
100487c0:	0018      	movs	r0, r3
100487c2:	46bd      	mov	sp, r7
100487c4:	b004      	add	sp, #16
100487c6:	bd80      	pop	{r7, pc}
100487c8:	fffff7ff 	.word	0xfffff7ff

100487cc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
100487cc:	b580      	push	{r7, lr}
100487ce:	b082      	sub	sp, #8
100487d0:	af00      	add	r7, sp, #0
100487d2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
100487d4:	687b      	ldr	r3, [r7, #4]
100487d6:	2b00      	cmp	r3, #0
100487d8:	d101      	bne.n	100487de <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
100487da:	2301      	movs	r3, #1
100487dc:	e046      	b.n	1004886c <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
100487de:	687b      	ldr	r3, [r7, #4]
100487e0:	2288      	movs	r2, #136	@ 0x88
100487e2:	589b      	ldr	r3, [r3, r2]
100487e4:	2b00      	cmp	r3, #0
100487e6:	d107      	bne.n	100487f8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
100487e8:	687b      	ldr	r3, [r7, #4]
100487ea:	2284      	movs	r2, #132	@ 0x84
100487ec:	2100      	movs	r1, #0
100487ee:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
100487f0:	687b      	ldr	r3, [r7, #4]
100487f2:	0018      	movs	r0, r3
100487f4:	f7fa fba2 	bl	10042f3c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
100487f8:	687b      	ldr	r3, [r7, #4]
100487fa:	2288      	movs	r2, #136	@ 0x88
100487fc:	2124      	movs	r1, #36	@ 0x24
100487fe:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
10048800:	687b      	ldr	r3, [r7, #4]
10048802:	681b      	ldr	r3, [r3, #0]
10048804:	681a      	ldr	r2, [r3, #0]
10048806:	687b      	ldr	r3, [r7, #4]
10048808:	681b      	ldr	r3, [r3, #0]
1004880a:	2101      	movs	r1, #1
1004880c:	438a      	bics	r2, r1
1004880e:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
10048810:	687b      	ldr	r3, [r7, #4]
10048812:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
10048814:	2b00      	cmp	r3, #0
10048816:	d003      	beq.n	10048820 <HAL_UART_Init+0x54>
  {
    UART_AdvFeatureConfig(huart);
10048818:	687b      	ldr	r3, [r7, #4]
1004881a:	0018      	movs	r0, r3
1004881c:	f000 fa36 	bl	10048c8c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
10048820:	687b      	ldr	r3, [r7, #4]
10048822:	0018      	movs	r0, r3
10048824:	f000 f8cc 	bl	100489c0 <UART_SetConfig>
10048828:	0003      	movs	r3, r0
1004882a:	2b01      	cmp	r3, #1
1004882c:	d101      	bne.n	10048832 <HAL_UART_Init+0x66>
  {
    return HAL_ERROR;
1004882e:	2301      	movs	r3, #1
10048830:	e01c      	b.n	1004886c <HAL_UART_Init+0xa0>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
10048832:	687b      	ldr	r3, [r7, #4]
10048834:	681b      	ldr	r3, [r3, #0]
10048836:	685a      	ldr	r2, [r3, #4]
10048838:	687b      	ldr	r3, [r7, #4]
1004883a:	681b      	ldr	r3, [r3, #0]
1004883c:	490d      	ldr	r1, [pc, #52]	@ (10048874 <HAL_UART_Init+0xa8>)
1004883e:	400a      	ands	r2, r1
10048840:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
10048842:	687b      	ldr	r3, [r7, #4]
10048844:	681b      	ldr	r3, [r3, #0]
10048846:	689a      	ldr	r2, [r3, #8]
10048848:	687b      	ldr	r3, [r7, #4]
1004884a:	681b      	ldr	r3, [r3, #0]
1004884c:	212a      	movs	r1, #42	@ 0x2a
1004884e:	438a      	bics	r2, r1
10048850:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
10048852:	687b      	ldr	r3, [r7, #4]
10048854:	681b      	ldr	r3, [r3, #0]
10048856:	681a      	ldr	r2, [r3, #0]
10048858:	687b      	ldr	r3, [r7, #4]
1004885a:	681b      	ldr	r3, [r3, #0]
1004885c:	2101      	movs	r1, #1
1004885e:	430a      	orrs	r2, r1
10048860:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
10048862:	687b      	ldr	r3, [r7, #4]
10048864:	0018      	movs	r0, r3
10048866:	f000 fac5 	bl	10048df4 <UART_CheckIdleState>
1004886a:	0003      	movs	r3, r0
}
1004886c:	0018      	movs	r0, r3
1004886e:	46bd      	mov	sp, r7
10048870:	b002      	add	sp, #8
10048872:	bd80      	pop	{r7, pc}
10048874:	ffffb7ff 	.word	0xffffb7ff

10048878 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
10048878:	b580      	push	{r7, lr}
1004887a:	b08a      	sub	sp, #40	@ 0x28
1004887c:	af02      	add	r7, sp, #8
1004887e:	60f8      	str	r0, [r7, #12]
10048880:	60b9      	str	r1, [r7, #8]
10048882:	603b      	str	r3, [r7, #0]
10048884:	1dbb      	adds	r3, r7, #6
10048886:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
10048888:	68fb      	ldr	r3, [r7, #12]
1004888a:	2288      	movs	r2, #136	@ 0x88
1004888c:	589b      	ldr	r3, [r3, r2]
1004888e:	2b20      	cmp	r3, #32
10048890:	d000      	beq.n	10048894 <HAL_UART_Transmit+0x1c>
10048892:	e090      	b.n	100489b6 <HAL_UART_Transmit+0x13e>
  {
    if ((pData == NULL) || (Size == 0U))
10048894:	68bb      	ldr	r3, [r7, #8]
10048896:	2b00      	cmp	r3, #0
10048898:	d003      	beq.n	100488a2 <HAL_UART_Transmit+0x2a>
1004889a:	1dbb      	adds	r3, r7, #6
1004889c:	881b      	ldrh	r3, [r3, #0]
1004889e:	2b00      	cmp	r3, #0
100488a0:	d101      	bne.n	100488a6 <HAL_UART_Transmit+0x2e>
    {
      return  HAL_ERROR;
100488a2:	2301      	movs	r3, #1
100488a4:	e088      	b.n	100489b8 <HAL_UART_Transmit+0x140>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
100488a6:	68fb      	ldr	r3, [r7, #12]
100488a8:	689a      	ldr	r2, [r3, #8]
100488aa:	2380      	movs	r3, #128	@ 0x80
100488ac:	015b      	lsls	r3, r3, #5
100488ae:	429a      	cmp	r2, r3
100488b0:	d109      	bne.n	100488c6 <HAL_UART_Transmit+0x4e>
100488b2:	68fb      	ldr	r3, [r7, #12]
100488b4:	691b      	ldr	r3, [r3, #16]
100488b6:	2b00      	cmp	r3, #0
100488b8:	d105      	bne.n	100488c6 <HAL_UART_Transmit+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
100488ba:	68bb      	ldr	r3, [r7, #8]
100488bc:	2201      	movs	r2, #1
100488be:	4013      	ands	r3, r2
100488c0:	d001      	beq.n	100488c6 <HAL_UART_Transmit+0x4e>
      {
        return  HAL_ERROR;
100488c2:	2301      	movs	r3, #1
100488c4:	e078      	b.n	100489b8 <HAL_UART_Transmit+0x140>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
100488c6:	68fb      	ldr	r3, [r7, #12]
100488c8:	2290      	movs	r2, #144	@ 0x90
100488ca:	2100      	movs	r1, #0
100488cc:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
100488ce:	68fb      	ldr	r3, [r7, #12]
100488d0:	2288      	movs	r2, #136	@ 0x88
100488d2:	2121      	movs	r1, #33	@ 0x21
100488d4:	5099      	str	r1, [r3, r2]

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
100488d6:	f7fb fedf 	bl	10044698 <HAL_GetTick>
100488da:	0003      	movs	r3, r0
100488dc:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
100488de:	68fb      	ldr	r3, [r7, #12]
100488e0:	1dba      	adds	r2, r7, #6
100488e2:	2154      	movs	r1, #84	@ 0x54
100488e4:	8812      	ldrh	r2, [r2, #0]
100488e6:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
100488e8:	68fb      	ldr	r3, [r7, #12]
100488ea:	1dba      	adds	r2, r7, #6
100488ec:	2156      	movs	r1, #86	@ 0x56
100488ee:	8812      	ldrh	r2, [r2, #0]
100488f0:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
100488f2:	68fb      	ldr	r3, [r7, #12]
100488f4:	689a      	ldr	r2, [r3, #8]
100488f6:	2380      	movs	r3, #128	@ 0x80
100488f8:	015b      	lsls	r3, r3, #5
100488fa:	429a      	cmp	r2, r3
100488fc:	d108      	bne.n	10048910 <HAL_UART_Transmit+0x98>
100488fe:	68fb      	ldr	r3, [r7, #12]
10048900:	691b      	ldr	r3, [r3, #16]
10048902:	2b00      	cmp	r3, #0
10048904:	d104      	bne.n	10048910 <HAL_UART_Transmit+0x98>
    {
      pdata8bits  = NULL;
10048906:	2300      	movs	r3, #0
10048908:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
1004890a:	68bb      	ldr	r3, [r7, #8]
1004890c:	61bb      	str	r3, [r7, #24]
1004890e:	e003      	b.n	10048918 <HAL_UART_Transmit+0xa0>
    }
    else
    {
      pdata8bits  = pData;
10048910:	68bb      	ldr	r3, [r7, #8]
10048912:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
10048914:	2300      	movs	r3, #0
10048916:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
10048918:	e030      	b.n	1004897c <HAL_UART_Transmit+0x104>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
1004891a:	697a      	ldr	r2, [r7, #20]
1004891c:	68f8      	ldr	r0, [r7, #12]
1004891e:	683b      	ldr	r3, [r7, #0]
10048920:	9300      	str	r3, [sp, #0]
10048922:	0013      	movs	r3, r2
10048924:	2200      	movs	r2, #0
10048926:	2180      	movs	r1, #128	@ 0x80
10048928:	f000 fb0e 	bl	10048f48 <UART_WaitOnFlagUntilTimeout>
1004892c:	1e03      	subs	r3, r0, #0
1004892e:	d005      	beq.n	1004893c <HAL_UART_Transmit+0xc4>
      {

        huart->gState = HAL_UART_STATE_READY;
10048930:	68fb      	ldr	r3, [r7, #12]
10048932:	2288      	movs	r2, #136	@ 0x88
10048934:	2120      	movs	r1, #32
10048936:	5099      	str	r1, [r3, r2]

        return HAL_TIMEOUT;
10048938:	2303      	movs	r3, #3
1004893a:	e03d      	b.n	100489b8 <HAL_UART_Transmit+0x140>
      }
      if (pdata8bits == NULL)
1004893c:	69fb      	ldr	r3, [r7, #28]
1004893e:	2b00      	cmp	r3, #0
10048940:	d10b      	bne.n	1004895a <HAL_UART_Transmit+0xe2>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
10048942:	69bb      	ldr	r3, [r7, #24]
10048944:	881b      	ldrh	r3, [r3, #0]
10048946:	001a      	movs	r2, r3
10048948:	68fb      	ldr	r3, [r7, #12]
1004894a:	681b      	ldr	r3, [r3, #0]
1004894c:	05d2      	lsls	r2, r2, #23
1004894e:	0dd2      	lsrs	r2, r2, #23
10048950:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
10048952:	69bb      	ldr	r3, [r7, #24]
10048954:	3302      	adds	r3, #2
10048956:	61bb      	str	r3, [r7, #24]
10048958:	e007      	b.n	1004896a <HAL_UART_Transmit+0xf2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
1004895a:	69fb      	ldr	r3, [r7, #28]
1004895c:	781a      	ldrb	r2, [r3, #0]
1004895e:	68fb      	ldr	r3, [r7, #12]
10048960:	681b      	ldr	r3, [r3, #0]
10048962:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
10048964:	69fb      	ldr	r3, [r7, #28]
10048966:	3301      	adds	r3, #1
10048968:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
1004896a:	68fb      	ldr	r3, [r7, #12]
1004896c:	2256      	movs	r2, #86	@ 0x56
1004896e:	5a9b      	ldrh	r3, [r3, r2]
10048970:	b29b      	uxth	r3, r3
10048972:	3b01      	subs	r3, #1
10048974:	b299      	uxth	r1, r3
10048976:	68fb      	ldr	r3, [r7, #12]
10048978:	2256      	movs	r2, #86	@ 0x56
1004897a:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
1004897c:	68fb      	ldr	r3, [r7, #12]
1004897e:	2256      	movs	r2, #86	@ 0x56
10048980:	5a9b      	ldrh	r3, [r3, r2]
10048982:	b29b      	uxth	r3, r3
10048984:	2b00      	cmp	r3, #0
10048986:	d1c8      	bne.n	1004891a <HAL_UART_Transmit+0xa2>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
10048988:	697a      	ldr	r2, [r7, #20]
1004898a:	68f8      	ldr	r0, [r7, #12]
1004898c:	683b      	ldr	r3, [r7, #0]
1004898e:	9300      	str	r3, [sp, #0]
10048990:	0013      	movs	r3, r2
10048992:	2200      	movs	r2, #0
10048994:	2140      	movs	r1, #64	@ 0x40
10048996:	f000 fad7 	bl	10048f48 <UART_WaitOnFlagUntilTimeout>
1004899a:	1e03      	subs	r3, r0, #0
1004899c:	d005      	beq.n	100489aa <HAL_UART_Transmit+0x132>
    {
      huart->gState = HAL_UART_STATE_READY;
1004899e:	68fb      	ldr	r3, [r7, #12]
100489a0:	2288      	movs	r2, #136	@ 0x88
100489a2:	2120      	movs	r1, #32
100489a4:	5099      	str	r1, [r3, r2]

      return HAL_TIMEOUT;
100489a6:	2303      	movs	r3, #3
100489a8:	e006      	b.n	100489b8 <HAL_UART_Transmit+0x140>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
100489aa:	68fb      	ldr	r3, [r7, #12]
100489ac:	2288      	movs	r2, #136	@ 0x88
100489ae:	2120      	movs	r1, #32
100489b0:	5099      	str	r1, [r3, r2]

    return HAL_OK;
100489b2:	2300      	movs	r3, #0
100489b4:	e000      	b.n	100489b8 <HAL_UART_Transmit+0x140>
  }
  else
  {
    return HAL_BUSY;
100489b6:	2302      	movs	r3, #2
  }
}
100489b8:	0018      	movs	r0, r3
100489ba:	46bd      	mov	sp, r7
100489bc:	b008      	add	sp, #32
100489be:	bd80      	pop	{r7, pc}

100489c0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
100489c0:	b5b0      	push	{r4, r5, r7, lr}
100489c2:	b090      	sub	sp, #64	@ 0x40
100489c4:	af00      	add	r7, sp, #0
100489c6:	6278      	str	r0, [r7, #36]	@ 0x24
  uint32_t tmpreg;
  uint16_t brrtemp;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
100489c8:	231b      	movs	r3, #27
100489ca:	2220      	movs	r2, #32
100489cc:	189b      	adds	r3, r3, r2
100489ce:	19db      	adds	r3, r3, r7
100489d0:	2200      	movs	r2, #0
100489d2:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
100489d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
100489d6:	689a      	ldr	r2, [r3, #8]
100489d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
100489da:	691b      	ldr	r3, [r3, #16]
100489dc:	431a      	orrs	r2, r3
100489de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
100489e0:	695b      	ldr	r3, [r3, #20]
100489e2:	431a      	orrs	r2, r3
100489e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
100489e6:	69db      	ldr	r3, [r3, #28]
100489e8:	4313      	orrs	r3, r2
100489ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
100489ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
100489ee:	681b      	ldr	r3, [r3, #0]
100489f0:	681b      	ldr	r3, [r3, #0]
100489f2:	4aa0      	ldr	r2, [pc, #640]	@ (10048c74 <UART_SetConfig+0x2b4>)
100489f4:	4013      	ands	r3, r2
100489f6:	0019      	movs	r1, r3
100489f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
100489fa:	681a      	ldr	r2, [r3, #0]
100489fc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
100489fe:	430b      	orrs	r3, r1
10048a00:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
10048a02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10048a04:	681b      	ldr	r3, [r3, #0]
10048a06:	685b      	ldr	r3, [r3, #4]
10048a08:	4a9b      	ldr	r2, [pc, #620]	@ (10048c78 <UART_SetConfig+0x2b8>)
10048a0a:	4013      	ands	r3, r2
10048a0c:	0018      	movs	r0, r3
10048a0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10048a10:	68d9      	ldr	r1, [r3, #12]
10048a12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10048a14:	681a      	ldr	r2, [r3, #0]
10048a16:	0003      	movs	r3, r0
10048a18:	430b      	orrs	r3, r1
10048a1a:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
10048a1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10048a1e:	699b      	ldr	r3, [r3, #24]
10048a20:	63fb      	str	r3, [r7, #60]	@ 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
10048a22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10048a24:	681b      	ldr	r3, [r3, #0]
10048a26:	4a95      	ldr	r2, [pc, #596]	@ (10048c7c <UART_SetConfig+0x2bc>)
10048a28:	4293      	cmp	r3, r2
10048a2a:	d004      	beq.n	10048a36 <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
10048a2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10048a2e:	6a1b      	ldr	r3, [r3, #32]
10048a30:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
10048a32:	4313      	orrs	r3, r2
10048a34:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
10048a36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10048a38:	681b      	ldr	r3, [r3, #0]
10048a3a:	689b      	ldr	r3, [r3, #8]
10048a3c:	4a90      	ldr	r2, [pc, #576]	@ (10048c80 <UART_SetConfig+0x2c0>)
10048a3e:	4013      	ands	r3, r2
10048a40:	0019      	movs	r1, r3
10048a42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10048a44:	681a      	ldr	r2, [r3, #0]
10048a46:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
10048a48:	430b      	orrs	r3, r1
10048a4a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
10048a4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10048a4e:	681b      	ldr	r3, [r3, #0]
10048a50:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
10048a52:	220f      	movs	r2, #15
10048a54:	4393      	bics	r3, r2
10048a56:	0018      	movs	r0, r3
10048a58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10048a5a:	6a59      	ldr	r1, [r3, #36]	@ 0x24
10048a5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10048a5e:	681a      	ldr	r2, [r3, #0]
10048a60:	0003      	movs	r3, r0
10048a62:	430b      	orrs	r3, r1
10048a64:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
10048a66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10048a68:	681b      	ldr	r3, [r3, #0]
10048a6a:	4a84      	ldr	r2, [pc, #528]	@ (10048c7c <UART_SetConfig+0x2bc>)
10048a6c:	4293      	cmp	r3, r2
10048a6e:	d16a      	bne.n	10048b46 <UART_SetConfig+0x186>
  {
    /* Retrieve frequency clock */
#if defined(RCC_CFGR_LPUCLKSEL)
    pclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_LPUART1);
#else
    pclk = UART_PERIPHCLK;
10048a70:	4b84      	ldr	r3, [pc, #528]	@ (10048c84 <UART_SetConfig+0x2c4>)
10048a72:	637b      	str	r3, [r7, #52]	@ 0x34
#endif /* RCC_CFGR_LPUCLKSEL */

    /* If proper clock source reported */
    if (pclk != 0U)
10048a74:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
10048a76:	2b00      	cmp	r3, #0
10048a78:	d100      	bne.n	10048a7c <UART_SetConfig+0xbc>
10048a7a:	e0e3      	b.n	10048c44 <UART_SetConfig+0x284>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
10048a7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10048a7e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
10048a80:	4b81      	ldr	r3, [pc, #516]	@ (10048c88 <UART_SetConfig+0x2c8>)
10048a82:	0052      	lsls	r2, r2, #1
10048a84:	5ad3      	ldrh	r3, [r2, r3]
10048a86:	0019      	movs	r1, r3
10048a88:	6b78      	ldr	r0, [r7, #52]	@ 0x34
10048a8a:	f7f7 fb43 	bl	10040114 <__udivsi3>
10048a8e:	0003      	movs	r3, r0
10048a90:	62bb      	str	r3, [r7, #40]	@ 0x28

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
10048a92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10048a94:	685a      	ldr	r2, [r3, #4]
10048a96:	0013      	movs	r3, r2
10048a98:	005b      	lsls	r3, r3, #1
10048a9a:	189b      	adds	r3, r3, r2
10048a9c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
10048a9e:	429a      	cmp	r2, r3
10048aa0:	d305      	bcc.n	10048aae <UART_SetConfig+0xee>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
10048aa2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10048aa4:	685b      	ldr	r3, [r3, #4]
10048aa6:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
10048aa8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
10048aaa:	429a      	cmp	r2, r3
10048aac:	d906      	bls.n	10048abc <UART_SetConfig+0xfc>
      {
        ret = HAL_ERROR;
10048aae:	231b      	movs	r3, #27
10048ab0:	2220      	movs	r2, #32
10048ab2:	189b      	adds	r3, r3, r2
10048ab4:	19db      	adds	r3, r3, r7
10048ab6:	2201      	movs	r2, #1
10048ab8:	701a      	strb	r2, [r3, #0]
10048aba:	e0c3      	b.n	10048c44 <UART_SetConfig+0x284>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
10048abc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
10048abe:	61bb      	str	r3, [r7, #24]
10048ac0:	2300      	movs	r3, #0
10048ac2:	61fb      	str	r3, [r7, #28]
10048ac4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10048ac6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
10048ac8:	4b6f      	ldr	r3, [pc, #444]	@ (10048c88 <UART_SetConfig+0x2c8>)
10048aca:	0052      	lsls	r2, r2, #1
10048acc:	5ad3      	ldrh	r3, [r2, r3]
10048ace:	613b      	str	r3, [r7, #16]
10048ad0:	2300      	movs	r3, #0
10048ad2:	617b      	str	r3, [r7, #20]
10048ad4:	693a      	ldr	r2, [r7, #16]
10048ad6:	697b      	ldr	r3, [r7, #20]
10048ad8:	69b8      	ldr	r0, [r7, #24]
10048ada:	69f9      	ldr	r1, [r7, #28]
10048adc:	f7f7 fc90 	bl	10040400 <__aeabi_uldivmod>
10048ae0:	0002      	movs	r2, r0
10048ae2:	000b      	movs	r3, r1
10048ae4:	0e11      	lsrs	r1, r2, #24
10048ae6:	021d      	lsls	r5, r3, #8
10048ae8:	430d      	orrs	r5, r1
10048aea:	0214      	lsls	r4, r2, #8
10048aec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10048aee:	685b      	ldr	r3, [r3, #4]
10048af0:	085b      	lsrs	r3, r3, #1
10048af2:	60bb      	str	r3, [r7, #8]
10048af4:	2300      	movs	r3, #0
10048af6:	60fb      	str	r3, [r7, #12]
10048af8:	68b8      	ldr	r0, [r7, #8]
10048afa:	68f9      	ldr	r1, [r7, #12]
10048afc:	1900      	adds	r0, r0, r4
10048afe:	4169      	adcs	r1, r5
10048b00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10048b02:	685b      	ldr	r3, [r3, #4]
10048b04:	603b      	str	r3, [r7, #0]
10048b06:	2300      	movs	r3, #0
10048b08:	607b      	str	r3, [r7, #4]
10048b0a:	683a      	ldr	r2, [r7, #0]
10048b0c:	687b      	ldr	r3, [r7, #4]
10048b0e:	f7f7 fc77 	bl	10040400 <__aeabi_uldivmod>
10048b12:	0002      	movs	r2, r0
10048b14:	000b      	movs	r3, r1
10048b16:	0013      	movs	r3, r2
10048b18:	633b      	str	r3, [r7, #48]	@ 0x30
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
10048b1a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
10048b1c:	23c0      	movs	r3, #192	@ 0xc0
10048b1e:	009b      	lsls	r3, r3, #2
10048b20:	429a      	cmp	r2, r3
10048b22:	d309      	bcc.n	10048b38 <UART_SetConfig+0x178>
10048b24:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
10048b26:	2380      	movs	r3, #128	@ 0x80
10048b28:	035b      	lsls	r3, r3, #13
10048b2a:	429a      	cmp	r2, r3
10048b2c:	d204      	bcs.n	10048b38 <UART_SetConfig+0x178>
        {
          huart->Instance->BRR = usartdiv;
10048b2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10048b30:	681b      	ldr	r3, [r3, #0]
10048b32:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
10048b34:	60da      	str	r2, [r3, #12]
10048b36:	e085      	b.n	10048c44 <UART_SetConfig+0x284>
        }
        else
        {
          ret = HAL_ERROR;
10048b38:	231b      	movs	r3, #27
10048b3a:	2220      	movs	r2, #32
10048b3c:	189b      	adds	r3, r3, r2
10048b3e:	19db      	adds	r3, r3, r7
10048b40:	2201      	movs	r2, #1
10048b42:	701a      	strb	r2, [r3, #0]
10048b44:	e07e      	b.n	10048c44 <UART_SetConfig+0x284>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
10048b46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10048b48:	69da      	ldr	r2, [r3, #28]
10048b4a:	2380      	movs	r3, #128	@ 0x80
10048b4c:	021b      	lsls	r3, r3, #8
10048b4e:	429a      	cmp	r2, r3
10048b50:	d148      	bne.n	10048be4 <UART_SetConfig+0x224>
  {
    pclk = UART_PERIPHCLK;
10048b52:	4b4c      	ldr	r3, [pc, #304]	@ (10048c84 <UART_SetConfig+0x2c4>)
10048b54:	637b      	str	r3, [r7, #52]	@ 0x34

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
10048b56:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
10048b58:	2b00      	cmp	r3, #0
10048b5a:	d100      	bne.n	10048b5e <UART_SetConfig+0x19e>
10048b5c:	e072      	b.n	10048c44 <UART_SetConfig+0x284>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
10048b5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10048b60:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
10048b62:	4b49      	ldr	r3, [pc, #292]	@ (10048c88 <UART_SetConfig+0x2c8>)
10048b64:	0052      	lsls	r2, r2, #1
10048b66:	5ad3      	ldrh	r3, [r2, r3]
10048b68:	0019      	movs	r1, r3
10048b6a:	6b78      	ldr	r0, [r7, #52]	@ 0x34
10048b6c:	f7f7 fad2 	bl	10040114 <__udivsi3>
10048b70:	0003      	movs	r3, r0
10048b72:	005a      	lsls	r2, r3, #1
10048b74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10048b76:	685b      	ldr	r3, [r3, #4]
10048b78:	085b      	lsrs	r3, r3, #1
10048b7a:	18d2      	adds	r2, r2, r3
10048b7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10048b7e:	685b      	ldr	r3, [r3, #4]
10048b80:	0019      	movs	r1, r3
10048b82:	0010      	movs	r0, r2
10048b84:	f7f7 fac6 	bl	10040114 <__udivsi3>
10048b88:	0003      	movs	r3, r0
10048b8a:	633b      	str	r3, [r7, #48]	@ 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
10048b8c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
10048b8e:	2b0f      	cmp	r3, #15
10048b90:	d921      	bls.n	10048bd6 <UART_SetConfig+0x216>
10048b92:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
10048b94:	2380      	movs	r3, #128	@ 0x80
10048b96:	025b      	lsls	r3, r3, #9
10048b98:	429a      	cmp	r2, r3
10048b9a:	d21c      	bcs.n	10048bd6 <UART_SetConfig+0x216>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
10048b9c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
10048b9e:	b29a      	uxth	r2, r3
10048ba0:	200e      	movs	r0, #14
10048ba2:	2420      	movs	r4, #32
10048ba4:	1903      	adds	r3, r0, r4
10048ba6:	19db      	adds	r3, r3, r7
10048ba8:	210f      	movs	r1, #15
10048baa:	438a      	bics	r2, r1
10048bac:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
10048bae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
10048bb0:	085b      	lsrs	r3, r3, #1
10048bb2:	b29b      	uxth	r3, r3
10048bb4:	2207      	movs	r2, #7
10048bb6:	4013      	ands	r3, r2
10048bb8:	b299      	uxth	r1, r3
10048bba:	1903      	adds	r3, r0, r4
10048bbc:	19db      	adds	r3, r3, r7
10048bbe:	1902      	adds	r2, r0, r4
10048bc0:	19d2      	adds	r2, r2, r7
10048bc2:	8812      	ldrh	r2, [r2, #0]
10048bc4:	430a      	orrs	r2, r1
10048bc6:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
10048bc8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10048bca:	681b      	ldr	r3, [r3, #0]
10048bcc:	1902      	adds	r2, r0, r4
10048bce:	19d2      	adds	r2, r2, r7
10048bd0:	8812      	ldrh	r2, [r2, #0]
10048bd2:	60da      	str	r2, [r3, #12]
10048bd4:	e036      	b.n	10048c44 <UART_SetConfig+0x284>
      }
      else
      {
        ret = HAL_ERROR;
10048bd6:	231b      	movs	r3, #27
10048bd8:	2220      	movs	r2, #32
10048bda:	189b      	adds	r3, r3, r2
10048bdc:	19db      	adds	r3, r3, r7
10048bde:	2201      	movs	r2, #1
10048be0:	701a      	strb	r2, [r3, #0]
10048be2:	e02f      	b.n	10048c44 <UART_SetConfig+0x284>
      }
    }
  }
  else
  {
    pclk = UART_PERIPHCLK;
10048be4:	4b27      	ldr	r3, [pc, #156]	@ (10048c84 <UART_SetConfig+0x2c4>)
10048be6:	637b      	str	r3, [r7, #52]	@ 0x34

    if (pclk != 0U)
10048be8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
10048bea:	2b00      	cmp	r3, #0
10048bec:	d02a      	beq.n	10048c44 <UART_SetConfig+0x284>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
10048bee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10048bf0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
10048bf2:	4b25      	ldr	r3, [pc, #148]	@ (10048c88 <UART_SetConfig+0x2c8>)
10048bf4:	0052      	lsls	r2, r2, #1
10048bf6:	5ad3      	ldrh	r3, [r2, r3]
10048bf8:	0019      	movs	r1, r3
10048bfa:	6b78      	ldr	r0, [r7, #52]	@ 0x34
10048bfc:	f7f7 fa8a 	bl	10040114 <__udivsi3>
10048c00:	0003      	movs	r3, r0
10048c02:	001a      	movs	r2, r3
10048c04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10048c06:	685b      	ldr	r3, [r3, #4]
10048c08:	085b      	lsrs	r3, r3, #1
10048c0a:	18d2      	adds	r2, r2, r3
10048c0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10048c0e:	685b      	ldr	r3, [r3, #4]
10048c10:	0019      	movs	r1, r3
10048c12:	0010      	movs	r0, r2
10048c14:	f7f7 fa7e 	bl	10040114 <__udivsi3>
10048c18:	0003      	movs	r3, r0
10048c1a:	633b      	str	r3, [r7, #48]	@ 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
10048c1c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
10048c1e:	2b0f      	cmp	r3, #15
10048c20:	d90a      	bls.n	10048c38 <UART_SetConfig+0x278>
10048c22:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
10048c24:	2380      	movs	r3, #128	@ 0x80
10048c26:	025b      	lsls	r3, r3, #9
10048c28:	429a      	cmp	r2, r3
10048c2a:	d205      	bcs.n	10048c38 <UART_SetConfig+0x278>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
10048c2c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
10048c2e:	b29a      	uxth	r2, r3
10048c30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10048c32:	681b      	ldr	r3, [r3, #0]
10048c34:	60da      	str	r2, [r3, #12]
10048c36:	e005      	b.n	10048c44 <UART_SetConfig+0x284>
      }
      else
      {
        ret = HAL_ERROR;
10048c38:	231b      	movs	r3, #27
10048c3a:	2220      	movs	r2, #32
10048c3c:	189b      	adds	r3, r3, r2
10048c3e:	19db      	adds	r3, r3, r7
10048c40:	2201      	movs	r2, #1
10048c42:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
10048c44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10048c46:	226a      	movs	r2, #106	@ 0x6a
10048c48:	2101      	movs	r1, #1
10048c4a:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
10048c4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10048c4e:	2268      	movs	r2, #104	@ 0x68
10048c50:	2101      	movs	r1, #1
10048c52:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
10048c54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10048c56:	2200      	movs	r2, #0
10048c58:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
10048c5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10048c5c:	2200      	movs	r2, #0
10048c5e:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
10048c60:	231b      	movs	r3, #27
10048c62:	2220      	movs	r2, #32
10048c64:	189b      	adds	r3, r3, r2
10048c66:	19db      	adds	r3, r3, r7
10048c68:	781b      	ldrb	r3, [r3, #0]
}
10048c6a:	0018      	movs	r0, r3
10048c6c:	46bd      	mov	sp, r7
10048c6e:	b010      	add	sp, #64	@ 0x40
10048c70:	bdb0      	pop	{r4, r5, r7, pc}
10048c72:	46c0      	nop			@ (mov r8, r8)
10048c74:	cfff69f3 	.word	0xcfff69f3
10048c78:	ffffcfff 	.word	0xffffcfff
10048c7c:	41005000 	.word	0x41005000
10048c80:	11fff4ff 	.word	0x11fff4ff
10048c84:	00f42400 	.word	0x00f42400
10048c88:	100493a4 	.word	0x100493a4

10048c8c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
10048c8c:	b580      	push	{r7, lr}
10048c8e:	b082      	sub	sp, #8
10048c90:	af00      	add	r7, sp, #0
10048c92:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
10048c94:	687b      	ldr	r3, [r7, #4]
10048c96:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
10048c98:	2208      	movs	r2, #8
10048c9a:	4013      	ands	r3, r2
10048c9c:	d00b      	beq.n	10048cb6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
10048c9e:	687b      	ldr	r3, [r7, #4]
10048ca0:	681b      	ldr	r3, [r3, #0]
10048ca2:	685b      	ldr	r3, [r3, #4]
10048ca4:	4a4a      	ldr	r2, [pc, #296]	@ (10048dd0 <UART_AdvFeatureConfig+0x144>)
10048ca6:	4013      	ands	r3, r2
10048ca8:	0019      	movs	r1, r3
10048caa:	687b      	ldr	r3, [r7, #4]
10048cac:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
10048cae:	687b      	ldr	r3, [r7, #4]
10048cb0:	681b      	ldr	r3, [r3, #0]
10048cb2:	430a      	orrs	r2, r1
10048cb4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
10048cb6:	687b      	ldr	r3, [r7, #4]
10048cb8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
10048cba:	2201      	movs	r2, #1
10048cbc:	4013      	ands	r3, r2
10048cbe:	d00b      	beq.n	10048cd8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
10048cc0:	687b      	ldr	r3, [r7, #4]
10048cc2:	681b      	ldr	r3, [r3, #0]
10048cc4:	685b      	ldr	r3, [r3, #4]
10048cc6:	4a43      	ldr	r2, [pc, #268]	@ (10048dd4 <UART_AdvFeatureConfig+0x148>)
10048cc8:	4013      	ands	r3, r2
10048cca:	0019      	movs	r1, r3
10048ccc:	687b      	ldr	r3, [r7, #4]
10048cce:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
10048cd0:	687b      	ldr	r3, [r7, #4]
10048cd2:	681b      	ldr	r3, [r3, #0]
10048cd4:	430a      	orrs	r2, r1
10048cd6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
10048cd8:	687b      	ldr	r3, [r7, #4]
10048cda:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
10048cdc:	2202      	movs	r2, #2
10048cde:	4013      	ands	r3, r2
10048ce0:	d00b      	beq.n	10048cfa <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
10048ce2:	687b      	ldr	r3, [r7, #4]
10048ce4:	681b      	ldr	r3, [r3, #0]
10048ce6:	685b      	ldr	r3, [r3, #4]
10048ce8:	4a3b      	ldr	r2, [pc, #236]	@ (10048dd8 <UART_AdvFeatureConfig+0x14c>)
10048cea:	4013      	ands	r3, r2
10048cec:	0019      	movs	r1, r3
10048cee:	687b      	ldr	r3, [r7, #4]
10048cf0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
10048cf2:	687b      	ldr	r3, [r7, #4]
10048cf4:	681b      	ldr	r3, [r3, #0]
10048cf6:	430a      	orrs	r2, r1
10048cf8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
10048cfa:	687b      	ldr	r3, [r7, #4]
10048cfc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
10048cfe:	2204      	movs	r2, #4
10048d00:	4013      	ands	r3, r2
10048d02:	d00b      	beq.n	10048d1c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
10048d04:	687b      	ldr	r3, [r7, #4]
10048d06:	681b      	ldr	r3, [r3, #0]
10048d08:	685b      	ldr	r3, [r3, #4]
10048d0a:	4a34      	ldr	r2, [pc, #208]	@ (10048ddc <UART_AdvFeatureConfig+0x150>)
10048d0c:	4013      	ands	r3, r2
10048d0e:	0019      	movs	r1, r3
10048d10:	687b      	ldr	r3, [r7, #4]
10048d12:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
10048d14:	687b      	ldr	r3, [r7, #4]
10048d16:	681b      	ldr	r3, [r3, #0]
10048d18:	430a      	orrs	r2, r1
10048d1a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
10048d1c:	687b      	ldr	r3, [r7, #4]
10048d1e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
10048d20:	2210      	movs	r2, #16
10048d22:	4013      	ands	r3, r2
10048d24:	d00b      	beq.n	10048d3e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
10048d26:	687b      	ldr	r3, [r7, #4]
10048d28:	681b      	ldr	r3, [r3, #0]
10048d2a:	689b      	ldr	r3, [r3, #8]
10048d2c:	4a2c      	ldr	r2, [pc, #176]	@ (10048de0 <UART_AdvFeatureConfig+0x154>)
10048d2e:	4013      	ands	r3, r2
10048d30:	0019      	movs	r1, r3
10048d32:	687b      	ldr	r3, [r7, #4]
10048d34:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
10048d36:	687b      	ldr	r3, [r7, #4]
10048d38:	681b      	ldr	r3, [r3, #0]
10048d3a:	430a      	orrs	r2, r1
10048d3c:	609a      	str	r2, [r3, #8]
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
10048d3e:	687b      	ldr	r3, [r7, #4]
10048d40:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
10048d42:	2220      	movs	r2, #32
10048d44:	4013      	ands	r3, r2
10048d46:	d00b      	beq.n	10048d60 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
10048d48:	687b      	ldr	r3, [r7, #4]
10048d4a:	681b      	ldr	r3, [r3, #0]
10048d4c:	689b      	ldr	r3, [r3, #8]
10048d4e:	4a25      	ldr	r2, [pc, #148]	@ (10048de4 <UART_AdvFeatureConfig+0x158>)
10048d50:	4013      	ands	r3, r2
10048d52:	0019      	movs	r1, r3
10048d54:	687b      	ldr	r3, [r7, #4]
10048d56:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
10048d58:	687b      	ldr	r3, [r7, #4]
10048d5a:	681b      	ldr	r3, [r3, #0]
10048d5c:	430a      	orrs	r2, r1
10048d5e:	609a      	str	r2, [r3, #8]
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
10048d60:	687b      	ldr	r3, [r7, #4]
10048d62:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
10048d64:	2240      	movs	r2, #64	@ 0x40
10048d66:	4013      	ands	r3, r2
10048d68:	d01d      	beq.n	10048da6 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
10048d6a:	687b      	ldr	r3, [r7, #4]
10048d6c:	681b      	ldr	r3, [r3, #0]
10048d6e:	685b      	ldr	r3, [r3, #4]
10048d70:	4a1d      	ldr	r2, [pc, #116]	@ (10048de8 <UART_AdvFeatureConfig+0x15c>)
10048d72:	4013      	ands	r3, r2
10048d74:	0019      	movs	r1, r3
10048d76:	687b      	ldr	r3, [r7, #4]
10048d78:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
10048d7a:	687b      	ldr	r3, [r7, #4]
10048d7c:	681b      	ldr	r3, [r3, #0]
10048d7e:	430a      	orrs	r2, r1
10048d80:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
10048d82:	687b      	ldr	r3, [r7, #4]
10048d84:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
10048d86:	2380      	movs	r3, #128	@ 0x80
10048d88:	035b      	lsls	r3, r3, #13
10048d8a:	429a      	cmp	r2, r3
10048d8c:	d10b      	bne.n	10048da6 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
10048d8e:	687b      	ldr	r3, [r7, #4]
10048d90:	681b      	ldr	r3, [r3, #0]
10048d92:	685b      	ldr	r3, [r3, #4]
10048d94:	4a15      	ldr	r2, [pc, #84]	@ (10048dec <UART_AdvFeatureConfig+0x160>)
10048d96:	4013      	ands	r3, r2
10048d98:	0019      	movs	r1, r3
10048d9a:	687b      	ldr	r3, [r7, #4]
10048d9c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
10048d9e:	687b      	ldr	r3, [r7, #4]
10048da0:	681b      	ldr	r3, [r3, #0]
10048da2:	430a      	orrs	r2, r1
10048da4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
10048da6:	687b      	ldr	r3, [r7, #4]
10048da8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
10048daa:	2280      	movs	r2, #128	@ 0x80
10048dac:	4013      	ands	r3, r2
10048dae:	d00b      	beq.n	10048dc8 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
10048db0:	687b      	ldr	r3, [r7, #4]
10048db2:	681b      	ldr	r3, [r3, #0]
10048db4:	685b      	ldr	r3, [r3, #4]
10048db6:	4a0e      	ldr	r2, [pc, #56]	@ (10048df0 <UART_AdvFeatureConfig+0x164>)
10048db8:	4013      	ands	r3, r2
10048dba:	0019      	movs	r1, r3
10048dbc:	687b      	ldr	r3, [r7, #4]
10048dbe:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
10048dc0:	687b      	ldr	r3, [r7, #4]
10048dc2:	681b      	ldr	r3, [r3, #0]
10048dc4:	430a      	orrs	r2, r1
10048dc6:	605a      	str	r2, [r3, #4]
  }
}
10048dc8:	46c0      	nop			@ (mov r8, r8)
10048dca:	46bd      	mov	sp, r7
10048dcc:	b002      	add	sp, #8
10048dce:	bd80      	pop	{r7, pc}
10048dd0:	ffff7fff 	.word	0xffff7fff
10048dd4:	fffdffff 	.word	0xfffdffff
10048dd8:	fffeffff 	.word	0xfffeffff
10048ddc:	fffbffff 	.word	0xfffbffff
10048de0:	ffffefff 	.word	0xffffefff
10048de4:	ffffdfff 	.word	0xffffdfff
10048de8:	ffefffff 	.word	0xffefffff
10048dec:	ff9fffff 	.word	0xff9fffff
10048df0:	fff7ffff 	.word	0xfff7ffff

10048df4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
10048df4:	b580      	push	{r7, lr}
10048df6:	b092      	sub	sp, #72	@ 0x48
10048df8:	af02      	add	r7, sp, #8
10048dfa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
10048dfc:	687b      	ldr	r3, [r7, #4]
10048dfe:	2290      	movs	r2, #144	@ 0x90
10048e00:	2100      	movs	r1, #0
10048e02:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
10048e04:	f7fb fc48 	bl	10044698 <HAL_GetTick>
10048e08:	0003      	movs	r3, r0
10048e0a:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
10048e0c:	687b      	ldr	r3, [r7, #4]
10048e0e:	681b      	ldr	r3, [r3, #0]
10048e10:	681b      	ldr	r3, [r3, #0]
10048e12:	2208      	movs	r2, #8
10048e14:	4013      	ands	r3, r2
10048e16:	2b08      	cmp	r3, #8
10048e18:	d12d      	bne.n	10048e76 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
10048e1a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
10048e1c:	2280      	movs	r2, #128	@ 0x80
10048e1e:	0391      	lsls	r1, r2, #14
10048e20:	6878      	ldr	r0, [r7, #4]
10048e22:	4a47      	ldr	r2, [pc, #284]	@ (10048f40 <UART_CheckIdleState+0x14c>)
10048e24:	9200      	str	r2, [sp, #0]
10048e26:	2200      	movs	r2, #0
10048e28:	f000 f88e 	bl	10048f48 <UART_WaitOnFlagUntilTimeout>
10048e2c:	1e03      	subs	r3, r0, #0
10048e2e:	d022      	beq.n	10048e76 <UART_CheckIdleState+0x82>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
10048e30:	f3ef 8310 	mrs	r3, PRIMASK
10048e34:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
10048e36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
10048e38:	63bb      	str	r3, [r7, #56]	@ 0x38
10048e3a:	2301      	movs	r3, #1
10048e3c:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
10048e3e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
10048e40:	f383 8810 	msr	PRIMASK, r3
}
10048e44:	46c0      	nop			@ (mov r8, r8)
10048e46:	687b      	ldr	r3, [r7, #4]
10048e48:	681b      	ldr	r3, [r3, #0]
10048e4a:	681a      	ldr	r2, [r3, #0]
10048e4c:	687b      	ldr	r3, [r7, #4]
10048e4e:	681b      	ldr	r3, [r3, #0]
10048e50:	2180      	movs	r1, #128	@ 0x80
10048e52:	438a      	bics	r2, r1
10048e54:	601a      	str	r2, [r3, #0]
10048e56:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
10048e58:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
10048e5a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
10048e5c:	f383 8810 	msr	PRIMASK, r3
}
10048e60:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
10048e62:	687b      	ldr	r3, [r7, #4]
10048e64:	2288      	movs	r2, #136	@ 0x88
10048e66:	2120      	movs	r1, #32
10048e68:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
10048e6a:	687b      	ldr	r3, [r7, #4]
10048e6c:	2284      	movs	r2, #132	@ 0x84
10048e6e:	2100      	movs	r1, #0
10048e70:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
10048e72:	2303      	movs	r3, #3
10048e74:	e060      	b.n	10048f38 <UART_CheckIdleState+0x144>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
10048e76:	687b      	ldr	r3, [r7, #4]
10048e78:	681b      	ldr	r3, [r3, #0]
10048e7a:	681b      	ldr	r3, [r3, #0]
10048e7c:	2204      	movs	r2, #4
10048e7e:	4013      	ands	r3, r2
10048e80:	2b04      	cmp	r3, #4
10048e82:	d146      	bne.n	10048f12 <UART_CheckIdleState+0x11e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
10048e84:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
10048e86:	2280      	movs	r2, #128	@ 0x80
10048e88:	03d1      	lsls	r1, r2, #15
10048e8a:	6878      	ldr	r0, [r7, #4]
10048e8c:	4a2c      	ldr	r2, [pc, #176]	@ (10048f40 <UART_CheckIdleState+0x14c>)
10048e8e:	9200      	str	r2, [sp, #0]
10048e90:	2200      	movs	r2, #0
10048e92:	f000 f859 	bl	10048f48 <UART_WaitOnFlagUntilTimeout>
10048e96:	1e03      	subs	r3, r0, #0
10048e98:	d03b      	beq.n	10048f12 <UART_CheckIdleState+0x11e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
10048e9a:	f3ef 8310 	mrs	r3, PRIMASK
10048e9e:	60fb      	str	r3, [r7, #12]
  return(result);
10048ea0:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
10048ea2:	637b      	str	r3, [r7, #52]	@ 0x34
10048ea4:	2301      	movs	r3, #1
10048ea6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
10048ea8:	693b      	ldr	r3, [r7, #16]
10048eaa:	f383 8810 	msr	PRIMASK, r3
}
10048eae:	46c0      	nop			@ (mov r8, r8)
10048eb0:	687b      	ldr	r3, [r7, #4]
10048eb2:	681b      	ldr	r3, [r3, #0]
10048eb4:	681a      	ldr	r2, [r3, #0]
10048eb6:	687b      	ldr	r3, [r7, #4]
10048eb8:	681b      	ldr	r3, [r3, #0]
10048eba:	4922      	ldr	r1, [pc, #136]	@ (10048f44 <UART_CheckIdleState+0x150>)
10048ebc:	400a      	ands	r2, r1
10048ebe:	601a      	str	r2, [r3, #0]
10048ec0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
10048ec2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
10048ec4:	697b      	ldr	r3, [r7, #20]
10048ec6:	f383 8810 	msr	PRIMASK, r3
}
10048eca:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
10048ecc:	f3ef 8310 	mrs	r3, PRIMASK
10048ed0:	61bb      	str	r3, [r7, #24]
  return(result);
10048ed2:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
10048ed4:	633b      	str	r3, [r7, #48]	@ 0x30
10048ed6:	2301      	movs	r3, #1
10048ed8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
10048eda:	69fb      	ldr	r3, [r7, #28]
10048edc:	f383 8810 	msr	PRIMASK, r3
}
10048ee0:	46c0      	nop			@ (mov r8, r8)
10048ee2:	687b      	ldr	r3, [r7, #4]
10048ee4:	681b      	ldr	r3, [r3, #0]
10048ee6:	689a      	ldr	r2, [r3, #8]
10048ee8:	687b      	ldr	r3, [r7, #4]
10048eea:	681b      	ldr	r3, [r3, #0]
10048eec:	2101      	movs	r1, #1
10048eee:	438a      	bics	r2, r1
10048ef0:	609a      	str	r2, [r3, #8]
10048ef2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
10048ef4:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
10048ef6:	6a3b      	ldr	r3, [r7, #32]
10048ef8:	f383 8810 	msr	PRIMASK, r3
}
10048efc:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
10048efe:	687b      	ldr	r3, [r7, #4]
10048f00:	228c      	movs	r2, #140	@ 0x8c
10048f02:	2120      	movs	r1, #32
10048f04:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
10048f06:	687b      	ldr	r3, [r7, #4]
10048f08:	2284      	movs	r2, #132	@ 0x84
10048f0a:	2100      	movs	r1, #0
10048f0c:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
10048f0e:	2303      	movs	r3, #3
10048f10:	e012      	b.n	10048f38 <UART_CheckIdleState+0x144>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
10048f12:	687b      	ldr	r3, [r7, #4]
10048f14:	2288      	movs	r2, #136	@ 0x88
10048f16:	2120      	movs	r1, #32
10048f18:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
10048f1a:	687b      	ldr	r3, [r7, #4]
10048f1c:	228c      	movs	r2, #140	@ 0x8c
10048f1e:	2120      	movs	r1, #32
10048f20:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
10048f22:	687b      	ldr	r3, [r7, #4]
10048f24:	2200      	movs	r2, #0
10048f26:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
10048f28:	687b      	ldr	r3, [r7, #4]
10048f2a:	2200      	movs	r2, #0
10048f2c:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
10048f2e:	687b      	ldr	r3, [r7, #4]
10048f30:	2284      	movs	r2, #132	@ 0x84
10048f32:	2100      	movs	r1, #0
10048f34:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
10048f36:	2300      	movs	r3, #0
}
10048f38:	0018      	movs	r0, r3
10048f3a:	46bd      	mov	sp, r7
10048f3c:	b010      	add	sp, #64	@ 0x40
10048f3e:	bd80      	pop	{r7, pc}
10048f40:	01ffffff 	.word	0x01ffffff
10048f44:	fffffedf 	.word	0xfffffedf

10048f48 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
10048f48:	b580      	push	{r7, lr}
10048f4a:	b084      	sub	sp, #16
10048f4c:	af00      	add	r7, sp, #0
10048f4e:	60f8      	str	r0, [r7, #12]
10048f50:	60b9      	str	r1, [r7, #8]
10048f52:	603b      	str	r3, [r7, #0]
10048f54:	1dfb      	adds	r3, r7, #7
10048f56:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
10048f58:	e051      	b.n	10048ffe <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
10048f5a:	69bb      	ldr	r3, [r7, #24]
10048f5c:	3301      	adds	r3, #1
10048f5e:	d04e      	beq.n	10048ffe <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
10048f60:	f7fb fb9a 	bl	10044698 <HAL_GetTick>
10048f64:	0002      	movs	r2, r0
10048f66:	683b      	ldr	r3, [r7, #0]
10048f68:	1ad3      	subs	r3, r2, r3
10048f6a:	69ba      	ldr	r2, [r7, #24]
10048f6c:	429a      	cmp	r2, r3
10048f6e:	d302      	bcc.n	10048f76 <UART_WaitOnFlagUntilTimeout+0x2e>
10048f70:	69bb      	ldr	r3, [r7, #24]
10048f72:	2b00      	cmp	r3, #0
10048f74:	d101      	bne.n	10048f7a <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
10048f76:	2303      	movs	r3, #3
10048f78:	e051      	b.n	1004901e <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
10048f7a:	68fb      	ldr	r3, [r7, #12]
10048f7c:	681b      	ldr	r3, [r3, #0]
10048f7e:	681b      	ldr	r3, [r3, #0]
10048f80:	2204      	movs	r2, #4
10048f82:	4013      	ands	r3, r2
10048f84:	d03b      	beq.n	10048ffe <UART_WaitOnFlagUntilTimeout+0xb6>
10048f86:	68bb      	ldr	r3, [r7, #8]
10048f88:	2b80      	cmp	r3, #128	@ 0x80
10048f8a:	d038      	beq.n	10048ffe <UART_WaitOnFlagUntilTimeout+0xb6>
10048f8c:	68bb      	ldr	r3, [r7, #8]
10048f8e:	2b40      	cmp	r3, #64	@ 0x40
10048f90:	d035      	beq.n	10048ffe <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
10048f92:	68fb      	ldr	r3, [r7, #12]
10048f94:	681b      	ldr	r3, [r3, #0]
10048f96:	69db      	ldr	r3, [r3, #28]
10048f98:	2208      	movs	r2, #8
10048f9a:	4013      	ands	r3, r2
10048f9c:	2b08      	cmp	r3, #8
10048f9e:	d111      	bne.n	10048fc4 <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
10048fa0:	68fb      	ldr	r3, [r7, #12]
10048fa2:	681b      	ldr	r3, [r3, #0]
10048fa4:	2208      	movs	r2, #8
10048fa6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
10048fa8:	68fb      	ldr	r3, [r7, #12]
10048faa:	0018      	movs	r0, r3
10048fac:	f000 f83c 	bl	10049028 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
10048fb0:	68fb      	ldr	r3, [r7, #12]
10048fb2:	2290      	movs	r2, #144	@ 0x90
10048fb4:	2108      	movs	r1, #8
10048fb6:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
10048fb8:	68fb      	ldr	r3, [r7, #12]
10048fba:	2284      	movs	r2, #132	@ 0x84
10048fbc:	2100      	movs	r1, #0
10048fbe:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
10048fc0:	2301      	movs	r3, #1
10048fc2:	e02c      	b.n	1004901e <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
10048fc4:	68fb      	ldr	r3, [r7, #12]
10048fc6:	681b      	ldr	r3, [r3, #0]
10048fc8:	69da      	ldr	r2, [r3, #28]
10048fca:	2380      	movs	r3, #128	@ 0x80
10048fcc:	011b      	lsls	r3, r3, #4
10048fce:	401a      	ands	r2, r3
10048fd0:	2380      	movs	r3, #128	@ 0x80
10048fd2:	011b      	lsls	r3, r3, #4
10048fd4:	429a      	cmp	r2, r3
10048fd6:	d112      	bne.n	10048ffe <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
10048fd8:	68fb      	ldr	r3, [r7, #12]
10048fda:	681b      	ldr	r3, [r3, #0]
10048fdc:	2280      	movs	r2, #128	@ 0x80
10048fde:	0112      	lsls	r2, r2, #4
10048fe0:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
10048fe2:	68fb      	ldr	r3, [r7, #12]
10048fe4:	0018      	movs	r0, r3
10048fe6:	f000 f81f 	bl	10049028 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
10048fea:	68fb      	ldr	r3, [r7, #12]
10048fec:	2290      	movs	r2, #144	@ 0x90
10048fee:	2120      	movs	r1, #32
10048ff0:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
10048ff2:	68fb      	ldr	r3, [r7, #12]
10048ff4:	2284      	movs	r2, #132	@ 0x84
10048ff6:	2100      	movs	r1, #0
10048ff8:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
10048ffa:	2303      	movs	r3, #3
10048ffc:	e00f      	b.n	1004901e <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
10048ffe:	68fb      	ldr	r3, [r7, #12]
10049000:	681b      	ldr	r3, [r3, #0]
10049002:	69db      	ldr	r3, [r3, #28]
10049004:	68ba      	ldr	r2, [r7, #8]
10049006:	4013      	ands	r3, r2
10049008:	68ba      	ldr	r2, [r7, #8]
1004900a:	1ad3      	subs	r3, r2, r3
1004900c:	425a      	negs	r2, r3
1004900e:	4153      	adcs	r3, r2
10049010:	b2db      	uxtb	r3, r3
10049012:	001a      	movs	r2, r3
10049014:	1dfb      	adds	r3, r7, #7
10049016:	781b      	ldrb	r3, [r3, #0]
10049018:	429a      	cmp	r2, r3
1004901a:	d09e      	beq.n	10048f5a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
1004901c:	2300      	movs	r3, #0
}
1004901e:	0018      	movs	r0, r3
10049020:	46bd      	mov	sp, r7
10049022:	b004      	add	sp, #16
10049024:	bd80      	pop	{r7, pc}
	...

10049028 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
10049028:	b580      	push	{r7, lr}
1004902a:	b08e      	sub	sp, #56	@ 0x38
1004902c:	af00      	add	r7, sp, #0
1004902e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
10049030:	f3ef 8310 	mrs	r3, PRIMASK
10049034:	617b      	str	r3, [r7, #20]
  return(result);
10049036:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
10049038:	637b      	str	r3, [r7, #52]	@ 0x34
1004903a:	2301      	movs	r3, #1
1004903c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
1004903e:	69bb      	ldr	r3, [r7, #24]
10049040:	f383 8810 	msr	PRIMASK, r3
}
10049044:	46c0      	nop			@ (mov r8, r8)
10049046:	687b      	ldr	r3, [r7, #4]
10049048:	681b      	ldr	r3, [r3, #0]
1004904a:	681a      	ldr	r2, [r3, #0]
1004904c:	687b      	ldr	r3, [r7, #4]
1004904e:	681b      	ldr	r3, [r3, #0]
10049050:	4926      	ldr	r1, [pc, #152]	@ (100490ec <UART_EndRxTransfer+0xc4>)
10049052:	400a      	ands	r2, r1
10049054:	601a      	str	r2, [r3, #0]
10049056:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
10049058:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
1004905a:	69fb      	ldr	r3, [r7, #28]
1004905c:	f383 8810 	msr	PRIMASK, r3
}
10049060:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
10049062:	f3ef 8310 	mrs	r3, PRIMASK
10049066:	623b      	str	r3, [r7, #32]
  return(result);
10049068:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
1004906a:	633b      	str	r3, [r7, #48]	@ 0x30
1004906c:	2301      	movs	r3, #1
1004906e:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
10049070:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10049072:	f383 8810 	msr	PRIMASK, r3
}
10049076:	46c0      	nop			@ (mov r8, r8)
10049078:	687b      	ldr	r3, [r7, #4]
1004907a:	681b      	ldr	r3, [r3, #0]
1004907c:	689a      	ldr	r2, [r3, #8]
1004907e:	687b      	ldr	r3, [r7, #4]
10049080:	681b      	ldr	r3, [r3, #0]
10049082:	491b      	ldr	r1, [pc, #108]	@ (100490f0 <UART_EndRxTransfer+0xc8>)
10049084:	400a      	ands	r2, r1
10049086:	609a      	str	r2, [r3, #8]
10049088:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
1004908a:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
1004908c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
1004908e:	f383 8810 	msr	PRIMASK, r3
}
10049092:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
10049094:	687b      	ldr	r3, [r7, #4]
10049096:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
10049098:	2b01      	cmp	r3, #1
1004909a:	d118      	bne.n	100490ce <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
1004909c:	f3ef 8310 	mrs	r3, PRIMASK
100490a0:	60bb      	str	r3, [r7, #8]
  return(result);
100490a2:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
100490a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
100490a6:	2301      	movs	r3, #1
100490a8:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
100490aa:	68fb      	ldr	r3, [r7, #12]
100490ac:	f383 8810 	msr	PRIMASK, r3
}
100490b0:	46c0      	nop			@ (mov r8, r8)
100490b2:	687b      	ldr	r3, [r7, #4]
100490b4:	681b      	ldr	r3, [r3, #0]
100490b6:	681a      	ldr	r2, [r3, #0]
100490b8:	687b      	ldr	r3, [r7, #4]
100490ba:	681b      	ldr	r3, [r3, #0]
100490bc:	2110      	movs	r1, #16
100490be:	438a      	bics	r2, r1
100490c0:	601a      	str	r2, [r3, #0]
100490c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
100490c4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
100490c6:	693b      	ldr	r3, [r7, #16]
100490c8:	f383 8810 	msr	PRIMASK, r3
}
100490cc:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
100490ce:	687b      	ldr	r3, [r7, #4]
100490d0:	228c      	movs	r2, #140	@ 0x8c
100490d2:	2120      	movs	r1, #32
100490d4:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
100490d6:	687b      	ldr	r3, [r7, #4]
100490d8:	2200      	movs	r2, #0
100490da:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
100490dc:	687b      	ldr	r3, [r7, #4]
100490de:	2200      	movs	r2, #0
100490e0:	675a      	str	r2, [r3, #116]	@ 0x74
}
100490e2:	46c0      	nop			@ (mov r8, r8)
100490e4:	46bd      	mov	sp, r7
100490e6:	b00e      	add	sp, #56	@ 0x38
100490e8:	bd80      	pop	{r7, pc}
100490ea:	46c0      	nop			@ (mov r8, r8)
100490ec:	fffffedf 	.word	0xfffffedf
100490f0:	effffffe 	.word	0xeffffffe

100490f4 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
100490f4:	b580      	push	{r7, lr}
100490f6:	b084      	sub	sp, #16
100490f8:	af00      	add	r7, sp, #0
100490fa:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
100490fc:	687b      	ldr	r3, [r7, #4]
100490fe:	2284      	movs	r2, #132	@ 0x84
10049100:	5c9b      	ldrb	r3, [r3, r2]
10049102:	2b01      	cmp	r3, #1
10049104:	d101      	bne.n	1004910a <HAL_UARTEx_DisableFifoMode+0x16>
10049106:	2302      	movs	r3, #2
10049108:	e027      	b.n	1004915a <HAL_UARTEx_DisableFifoMode+0x66>
1004910a:	687b      	ldr	r3, [r7, #4]
1004910c:	2284      	movs	r2, #132	@ 0x84
1004910e:	2101      	movs	r1, #1
10049110:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
10049112:	687b      	ldr	r3, [r7, #4]
10049114:	2288      	movs	r2, #136	@ 0x88
10049116:	2124      	movs	r1, #36	@ 0x24
10049118:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
1004911a:	687b      	ldr	r3, [r7, #4]
1004911c:	681b      	ldr	r3, [r3, #0]
1004911e:	681b      	ldr	r3, [r3, #0]
10049120:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
10049122:	687b      	ldr	r3, [r7, #4]
10049124:	681b      	ldr	r3, [r3, #0]
10049126:	681a      	ldr	r2, [r3, #0]
10049128:	687b      	ldr	r3, [r7, #4]
1004912a:	681b      	ldr	r3, [r3, #0]
1004912c:	2101      	movs	r1, #1
1004912e:	438a      	bics	r2, r1
10049130:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
10049132:	68fb      	ldr	r3, [r7, #12]
10049134:	4a0b      	ldr	r2, [pc, #44]	@ (10049164 <HAL_UARTEx_DisableFifoMode+0x70>)
10049136:	4013      	ands	r3, r2
10049138:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
1004913a:	687b      	ldr	r3, [r7, #4]
1004913c:	2200      	movs	r2, #0
1004913e:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
10049140:	687b      	ldr	r3, [r7, #4]
10049142:	681b      	ldr	r3, [r3, #0]
10049144:	68fa      	ldr	r2, [r7, #12]
10049146:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
10049148:	687b      	ldr	r3, [r7, #4]
1004914a:	2288      	movs	r2, #136	@ 0x88
1004914c:	2120      	movs	r1, #32
1004914e:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
10049150:	687b      	ldr	r3, [r7, #4]
10049152:	2284      	movs	r2, #132	@ 0x84
10049154:	2100      	movs	r1, #0
10049156:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
10049158:	2300      	movs	r3, #0
}
1004915a:	0018      	movs	r0, r3
1004915c:	46bd      	mov	sp, r7
1004915e:	b004      	add	sp, #16
10049160:	bd80      	pop	{r7, pc}
10049162:	46c0      	nop			@ (mov r8, r8)
10049164:	dfffffff 	.word	0xdfffffff

10049168 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
10049168:	b580      	push	{r7, lr}
1004916a:	b084      	sub	sp, #16
1004916c:	af00      	add	r7, sp, #0
1004916e:	6078      	str	r0, [r7, #4]
10049170:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
10049172:	687b      	ldr	r3, [r7, #4]
10049174:	2284      	movs	r2, #132	@ 0x84
10049176:	5c9b      	ldrb	r3, [r3, r2]
10049178:	2b01      	cmp	r3, #1
1004917a:	d101      	bne.n	10049180 <HAL_UARTEx_SetTxFifoThreshold+0x18>
1004917c:	2302      	movs	r3, #2
1004917e:	e02e      	b.n	100491de <HAL_UARTEx_SetTxFifoThreshold+0x76>
10049180:	687b      	ldr	r3, [r7, #4]
10049182:	2284      	movs	r2, #132	@ 0x84
10049184:	2101      	movs	r1, #1
10049186:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
10049188:	687b      	ldr	r3, [r7, #4]
1004918a:	2288      	movs	r2, #136	@ 0x88
1004918c:	2124      	movs	r1, #36	@ 0x24
1004918e:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
10049190:	687b      	ldr	r3, [r7, #4]
10049192:	681b      	ldr	r3, [r3, #0]
10049194:	681b      	ldr	r3, [r3, #0]
10049196:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
10049198:	687b      	ldr	r3, [r7, #4]
1004919a:	681b      	ldr	r3, [r3, #0]
1004919c:	681a      	ldr	r2, [r3, #0]
1004919e:	687b      	ldr	r3, [r7, #4]
100491a0:	681b      	ldr	r3, [r3, #0]
100491a2:	2101      	movs	r1, #1
100491a4:	438a      	bics	r2, r1
100491a6:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
100491a8:	687b      	ldr	r3, [r7, #4]
100491aa:	681b      	ldr	r3, [r3, #0]
100491ac:	689b      	ldr	r3, [r3, #8]
100491ae:	00db      	lsls	r3, r3, #3
100491b0:	08d9      	lsrs	r1, r3, #3
100491b2:	687b      	ldr	r3, [r7, #4]
100491b4:	681b      	ldr	r3, [r3, #0]
100491b6:	683a      	ldr	r2, [r7, #0]
100491b8:	430a      	orrs	r2, r1
100491ba:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
100491bc:	687b      	ldr	r3, [r7, #4]
100491be:	0018      	movs	r0, r3
100491c0:	f000 f854 	bl	1004926c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
100491c4:	687b      	ldr	r3, [r7, #4]
100491c6:	681b      	ldr	r3, [r3, #0]
100491c8:	68fa      	ldr	r2, [r7, #12]
100491ca:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
100491cc:	687b      	ldr	r3, [r7, #4]
100491ce:	2288      	movs	r2, #136	@ 0x88
100491d0:	2120      	movs	r1, #32
100491d2:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
100491d4:	687b      	ldr	r3, [r7, #4]
100491d6:	2284      	movs	r2, #132	@ 0x84
100491d8:	2100      	movs	r1, #0
100491da:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
100491dc:	2300      	movs	r3, #0
}
100491de:	0018      	movs	r0, r3
100491e0:	46bd      	mov	sp, r7
100491e2:	b004      	add	sp, #16
100491e4:	bd80      	pop	{r7, pc}
	...

100491e8 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
100491e8:	b580      	push	{r7, lr}
100491ea:	b084      	sub	sp, #16
100491ec:	af00      	add	r7, sp, #0
100491ee:	6078      	str	r0, [r7, #4]
100491f0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
100491f2:	687b      	ldr	r3, [r7, #4]
100491f4:	2284      	movs	r2, #132	@ 0x84
100491f6:	5c9b      	ldrb	r3, [r3, r2]
100491f8:	2b01      	cmp	r3, #1
100491fa:	d101      	bne.n	10049200 <HAL_UARTEx_SetRxFifoThreshold+0x18>
100491fc:	2302      	movs	r3, #2
100491fe:	e02f      	b.n	10049260 <HAL_UARTEx_SetRxFifoThreshold+0x78>
10049200:	687b      	ldr	r3, [r7, #4]
10049202:	2284      	movs	r2, #132	@ 0x84
10049204:	2101      	movs	r1, #1
10049206:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
10049208:	687b      	ldr	r3, [r7, #4]
1004920a:	2288      	movs	r2, #136	@ 0x88
1004920c:	2124      	movs	r1, #36	@ 0x24
1004920e:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
10049210:	687b      	ldr	r3, [r7, #4]
10049212:	681b      	ldr	r3, [r3, #0]
10049214:	681b      	ldr	r3, [r3, #0]
10049216:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
10049218:	687b      	ldr	r3, [r7, #4]
1004921a:	681b      	ldr	r3, [r3, #0]
1004921c:	681a      	ldr	r2, [r3, #0]
1004921e:	687b      	ldr	r3, [r7, #4]
10049220:	681b      	ldr	r3, [r3, #0]
10049222:	2101      	movs	r1, #1
10049224:	438a      	bics	r2, r1
10049226:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
10049228:	687b      	ldr	r3, [r7, #4]
1004922a:	681b      	ldr	r3, [r3, #0]
1004922c:	689b      	ldr	r3, [r3, #8]
1004922e:	4a0e      	ldr	r2, [pc, #56]	@ (10049268 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
10049230:	4013      	ands	r3, r2
10049232:	0019      	movs	r1, r3
10049234:	687b      	ldr	r3, [r7, #4]
10049236:	681b      	ldr	r3, [r3, #0]
10049238:	683a      	ldr	r2, [r7, #0]
1004923a:	430a      	orrs	r2, r1
1004923c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
1004923e:	687b      	ldr	r3, [r7, #4]
10049240:	0018      	movs	r0, r3
10049242:	f000 f813 	bl	1004926c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
10049246:	687b      	ldr	r3, [r7, #4]
10049248:	681b      	ldr	r3, [r3, #0]
1004924a:	68fa      	ldr	r2, [r7, #12]
1004924c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
1004924e:	687b      	ldr	r3, [r7, #4]
10049250:	2288      	movs	r2, #136	@ 0x88
10049252:	2120      	movs	r1, #32
10049254:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
10049256:	687b      	ldr	r3, [r7, #4]
10049258:	2284      	movs	r2, #132	@ 0x84
1004925a:	2100      	movs	r1, #0
1004925c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
1004925e:	2300      	movs	r3, #0
}
10049260:	0018      	movs	r0, r3
10049262:	46bd      	mov	sp, r7
10049264:	b004      	add	sp, #16
10049266:	bd80      	pop	{r7, pc}
10049268:	f1ffffff 	.word	0xf1ffffff

1004926c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
1004926c:	b5f0      	push	{r4, r5, r6, r7, lr}
1004926e:	b085      	sub	sp, #20
10049270:	af00      	add	r7, sp, #0
10049272:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
10049274:	687b      	ldr	r3, [r7, #4]
10049276:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
10049278:	2b00      	cmp	r3, #0
1004927a:	d108      	bne.n	1004928e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
1004927c:	687b      	ldr	r3, [r7, #4]
1004927e:	226a      	movs	r2, #106	@ 0x6a
10049280:	2101      	movs	r1, #1
10049282:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
10049284:	687b      	ldr	r3, [r7, #4]
10049286:	2268      	movs	r2, #104	@ 0x68
10049288:	2101      	movs	r1, #1
1004928a:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
1004928c:	e043      	b.n	10049316 <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
1004928e:	260f      	movs	r6, #15
10049290:	19bb      	adds	r3, r7, r6
10049292:	2208      	movs	r2, #8
10049294:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
10049296:	200e      	movs	r0, #14
10049298:	183b      	adds	r3, r7, r0
1004929a:	2208      	movs	r2, #8
1004929c:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
1004929e:	687b      	ldr	r3, [r7, #4]
100492a0:	681b      	ldr	r3, [r3, #0]
100492a2:	689b      	ldr	r3, [r3, #8]
100492a4:	0e5b      	lsrs	r3, r3, #25
100492a6:	b2da      	uxtb	r2, r3
100492a8:	240d      	movs	r4, #13
100492aa:	193b      	adds	r3, r7, r4
100492ac:	2107      	movs	r1, #7
100492ae:	400a      	ands	r2, r1
100492b0:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
100492b2:	687b      	ldr	r3, [r7, #4]
100492b4:	681b      	ldr	r3, [r3, #0]
100492b6:	689b      	ldr	r3, [r3, #8]
100492b8:	0f5b      	lsrs	r3, r3, #29
100492ba:	b2da      	uxtb	r2, r3
100492bc:	250c      	movs	r5, #12
100492be:	197b      	adds	r3, r7, r5
100492c0:	2107      	movs	r1, #7
100492c2:	400a      	ands	r2, r1
100492c4:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
100492c6:	183b      	adds	r3, r7, r0
100492c8:	781b      	ldrb	r3, [r3, #0]
100492ca:	197a      	adds	r2, r7, r5
100492cc:	7812      	ldrb	r2, [r2, #0]
100492ce:	4914      	ldr	r1, [pc, #80]	@ (10049320 <UARTEx_SetNbDataToProcess+0xb4>)
100492d0:	5c8a      	ldrb	r2, [r1, r2]
100492d2:	435a      	muls	r2, r3
100492d4:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
100492d6:	197b      	adds	r3, r7, r5
100492d8:	781b      	ldrb	r3, [r3, #0]
100492da:	4a12      	ldr	r2, [pc, #72]	@ (10049324 <UARTEx_SetNbDataToProcess+0xb8>)
100492dc:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
100492de:	0019      	movs	r1, r3
100492e0:	f7f6 ffa2 	bl	10040228 <__divsi3>
100492e4:	0003      	movs	r3, r0
100492e6:	b299      	uxth	r1, r3
100492e8:	687b      	ldr	r3, [r7, #4]
100492ea:	226a      	movs	r2, #106	@ 0x6a
100492ec:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
100492ee:	19bb      	adds	r3, r7, r6
100492f0:	781b      	ldrb	r3, [r3, #0]
100492f2:	193a      	adds	r2, r7, r4
100492f4:	7812      	ldrb	r2, [r2, #0]
100492f6:	490a      	ldr	r1, [pc, #40]	@ (10049320 <UARTEx_SetNbDataToProcess+0xb4>)
100492f8:	5c8a      	ldrb	r2, [r1, r2]
100492fa:	435a      	muls	r2, r3
100492fc:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
100492fe:	193b      	adds	r3, r7, r4
10049300:	781b      	ldrb	r3, [r3, #0]
10049302:	4a08      	ldr	r2, [pc, #32]	@ (10049324 <UARTEx_SetNbDataToProcess+0xb8>)
10049304:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
10049306:	0019      	movs	r1, r3
10049308:	f7f6 ff8e 	bl	10040228 <__divsi3>
1004930c:	0003      	movs	r3, r0
1004930e:	b299      	uxth	r1, r3
10049310:	687b      	ldr	r3, [r7, #4]
10049312:	2268      	movs	r2, #104	@ 0x68
10049314:	5299      	strh	r1, [r3, r2]
}
10049316:	46c0      	nop			@ (mov r8, r8)
10049318:	46bd      	mov	sp, r7
1004931a:	b005      	add	sp, #20
1004931c:	bdf0      	pop	{r4, r5, r6, r7, pc}
1004931e:	46c0      	nop			@ (mov r8, r8)
10049320:	100493bc 	.word	0x100493bc
10049324:	100493c4 	.word	0x100493c4

10049328 <memcmp>:
10049328:	b530      	push	{r4, r5, lr}
1004932a:	2400      	movs	r4, #0
1004932c:	3901      	subs	r1, #1
1004932e:	42a2      	cmp	r2, r4
10049330:	d101      	bne.n	10049336 <memcmp+0xe>
10049332:	2000      	movs	r0, #0
10049334:	e005      	b.n	10049342 <memcmp+0x1a>
10049336:	5d03      	ldrb	r3, [r0, r4]
10049338:	3401      	adds	r4, #1
1004933a:	5d0d      	ldrb	r5, [r1, r4]
1004933c:	42ab      	cmp	r3, r5
1004933e:	d0f6      	beq.n	1004932e <memcmp+0x6>
10049340:	1b58      	subs	r0, r3, r5
10049342:	bd30      	pop	{r4, r5, pc}

10049344 <memset>:
10049344:	0003      	movs	r3, r0
10049346:	1882      	adds	r2, r0, r2
10049348:	4293      	cmp	r3, r2
1004934a:	d100      	bne.n	1004934e <memset+0xa>
1004934c:	4770      	bx	lr
1004934e:	7019      	strb	r1, [r3, #0]
10049350:	3301      	adds	r3, #1
10049352:	e7f9      	b.n	10049348 <memset+0x4>

Disassembly of section .init:

10049354 <_init>:
10049354:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10049356:	46c0      	nop			@ (mov r8, r8)

Disassembly of section .fini:

10049358 <_fini>:
10049358:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1004935a:	46c0      	nop			@ (mov r8, r8)
