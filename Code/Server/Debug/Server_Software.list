
Server_Software.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .intvec       000000c0  10040000  10040000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000092ac  100400c0  100400c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .init         00000004  1004936c  1004936c  0000a36c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .fini         00000004  10049370  10049370  0000a370  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  4 .rodata       00000070  10049374  10049374  0000a374  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .ARM          00000008  100493e4  100493e4  0000a3e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         0000006c  20000638  100493ec  0000a638  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .ram_preamble 0000002c  20000004  20000004  0000b004  2**2
                  ALLOC
  8 .bss.blueRAM  000000bc  200000c0  200000c0  0000b004  2**2
                  ALLOC
  9 .bss          000004bc  2000017c  2000017c  0000b004  2**2
                  ALLOC
 10 .noinit       00000000  200006a4  10049458  00000000  2**0
                  ALLOC
 11 .ota_region_end 00000000  10049458  10049458  0000a6a4  2**0
                  CONTENTS
 12 .heap         00000000  200006a4  200006a4  0000a6a4  2**0
                  CONTENTS
 13 .stack        00000c00  2000f400  2000f400  0000b400  2**0
                  ALLOC
 14 .rom_info     00000000  10000000  10000000  0000a6a4  2**0
                  CONTENTS
 15 .ARM.attributes 00000028  00000000  00000000  0000a6a4  2**0
                  CONTENTS, READONLY
 16 .debug_line   000122b6  00000000  00000000  0000a6cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line_str 000000cf  00000000  00000000  0001c982  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_info   000128b1  00000000  00000000  0001ca51  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_abbrev 00002a03  00000000  00000000  0002f302  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_aranges 00001100  00000000  00000000  00031d08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_str    000b6cb5  00000000  00000000  00032e08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_rnglists 00000d04  00000000  00000000  000e9abd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_macro  0001c9db  00000000  00000000  000ea7c1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 24 .comment      00000043  00000000  00000000  0010719c  2**0
                  CONTENTS, READONLY
 25 .debug_frame  000040d4  00000000  00000000  001071e0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

100400c0 <blue_unit_conversion>:
                __CODE__
                __THUMB__
                __EXPORT__ blue_unit_conversion

EXPORT_FUNC(blue_unit_conversion)
                  PUSH    {r4, lr}
100400c0:	b510      	push	{r4, lr}
                  CMP     r0, r2
100400c2:	4290      	cmp	r0, r2
                  BLS     mul32
100400c4:	d916      	bls.n	100400f4 <mul32>
                  UXTH    r2, r1
100400c6:	b28a      	uxth	r2, r1
                  LSRS    r3, r0, #16
100400c8:	0c03      	lsrs	r3, r0, #16
                  LSRS    r1, r1, #16
100400ca:	0c09      	lsrs	r1, r1, #16
                  MOV     r4, r1
100400cc:	460c      	mov	r4, r1
                  MULS    r1, r3, r1
100400ce:	4359      	muls	r1, r3
                  UXTH    r0, r0
100400d0:	b280      	uxth	r0, r0
                  MULS    r3, r2, r3
100400d2:	4353      	muls	r3, r2
                  MULS    r4, r0, r4
100400d4:	4344      	muls	r4, r0
                  MULS    r0, r2, r0
100400d6:	4350      	muls	r0, r2
                  ADDS    r3, r3, r4
100400d8:	191b      	adds	r3, r3, r4
                  LSLS    r2, r3, #16
100400da:	041a      	lsls	r2, r3, #16
                  LSRS    r3, r3, #16
100400dc:	0c1b      	lsrs	r3, r3, #16
                  ADDS    r0, r2, r0
100400de:	1810      	adds	r0, r2, r0
                  ADCS    r1, r3
100400e0:	4159      	adcs	r1, r3

                  MOVS    r2, #128
100400e2:	2280      	movs	r2, #128	@ 0x80
                  LSLS    r2, r2, #13
100400e4:	0352      	lsls	r2, r2, #13
                  MOVS    r3, #0
100400e6:	2300      	movs	r3, #0
                  ADDS    r2, r2, r0
100400e8:	1812      	adds	r2, r2, r0
                  ADCS    r3, r1
100400ea:	414b      	adcs	r3, r1
                  LSRS    r2, r2, #21
100400ec:	0d52      	lsrs	r2, r2, #21
                  LSLS    r0, r3, #11
100400ee:	02d8      	lsls	r0, r3, #11
                  ORRS    r0, r2
100400f0:	4310      	orrs	r0, r2

                  POP {r4, pc}
100400f2:	bd10      	pop	{r4, pc}

100400f4 <mul32>:

                  ENDFUNC

EXPORT_FUNC(mul32)
                  MULS    r0, r1, r0
100400f4:	4348      	muls	r0, r1
                  MOVS    r2, #128
100400f6:	2280      	movs	r2, #128	@ 0x80
                  LSLS    r2, r2, #13
100400f8:	0352      	lsls	r2, r2, #13
                  ADDS    r2, r2, r0
100400fa:	1812      	adds	r2, r2, r0
                  LSRS    r2, r2, #21
100400fc:	0d52      	lsrs	r2, r2, #21
                  MOV     r0, r2
100400fe:	4610      	mov	r0, r2

                  POP {r4, pc}
10040100:	bd10      	pop	{r4, pc}
10040102:	46c0      	nop			@ (mov r8, r8)

10040104 <__udivsi3>:
10040104:	2200      	movs	r2, #0
10040106:	0843      	lsrs	r3, r0, #1
10040108:	428b      	cmp	r3, r1
1004010a:	d374      	bcc.n	100401f6 <__udivsi3+0xf2>
1004010c:	0903      	lsrs	r3, r0, #4
1004010e:	428b      	cmp	r3, r1
10040110:	d35f      	bcc.n	100401d2 <__udivsi3+0xce>
10040112:	0a03      	lsrs	r3, r0, #8
10040114:	428b      	cmp	r3, r1
10040116:	d344      	bcc.n	100401a2 <__udivsi3+0x9e>
10040118:	0b03      	lsrs	r3, r0, #12
1004011a:	428b      	cmp	r3, r1
1004011c:	d328      	bcc.n	10040170 <__udivsi3+0x6c>
1004011e:	0c03      	lsrs	r3, r0, #16
10040120:	428b      	cmp	r3, r1
10040122:	d30d      	bcc.n	10040140 <__udivsi3+0x3c>
10040124:	22ff      	movs	r2, #255	@ 0xff
10040126:	0209      	lsls	r1, r1, #8
10040128:	ba12      	rev	r2, r2
1004012a:	0c03      	lsrs	r3, r0, #16
1004012c:	428b      	cmp	r3, r1
1004012e:	d302      	bcc.n	10040136 <__udivsi3+0x32>
10040130:	1212      	asrs	r2, r2, #8
10040132:	0209      	lsls	r1, r1, #8
10040134:	d065      	beq.n	10040202 <__udivsi3+0xfe>
10040136:	0b03      	lsrs	r3, r0, #12
10040138:	428b      	cmp	r3, r1
1004013a:	d319      	bcc.n	10040170 <__udivsi3+0x6c>
1004013c:	e000      	b.n	10040140 <__udivsi3+0x3c>
1004013e:	0a09      	lsrs	r1, r1, #8
10040140:	0bc3      	lsrs	r3, r0, #15
10040142:	428b      	cmp	r3, r1
10040144:	d301      	bcc.n	1004014a <__udivsi3+0x46>
10040146:	03cb      	lsls	r3, r1, #15
10040148:	1ac0      	subs	r0, r0, r3
1004014a:	4152      	adcs	r2, r2
1004014c:	0b83      	lsrs	r3, r0, #14
1004014e:	428b      	cmp	r3, r1
10040150:	d301      	bcc.n	10040156 <__udivsi3+0x52>
10040152:	038b      	lsls	r3, r1, #14
10040154:	1ac0      	subs	r0, r0, r3
10040156:	4152      	adcs	r2, r2
10040158:	0b43      	lsrs	r3, r0, #13
1004015a:	428b      	cmp	r3, r1
1004015c:	d301      	bcc.n	10040162 <__udivsi3+0x5e>
1004015e:	034b      	lsls	r3, r1, #13
10040160:	1ac0      	subs	r0, r0, r3
10040162:	4152      	adcs	r2, r2
10040164:	0b03      	lsrs	r3, r0, #12
10040166:	428b      	cmp	r3, r1
10040168:	d301      	bcc.n	1004016e <__udivsi3+0x6a>
1004016a:	030b      	lsls	r3, r1, #12
1004016c:	1ac0      	subs	r0, r0, r3
1004016e:	4152      	adcs	r2, r2
10040170:	0ac3      	lsrs	r3, r0, #11
10040172:	428b      	cmp	r3, r1
10040174:	d301      	bcc.n	1004017a <__udivsi3+0x76>
10040176:	02cb      	lsls	r3, r1, #11
10040178:	1ac0      	subs	r0, r0, r3
1004017a:	4152      	adcs	r2, r2
1004017c:	0a83      	lsrs	r3, r0, #10
1004017e:	428b      	cmp	r3, r1
10040180:	d301      	bcc.n	10040186 <__udivsi3+0x82>
10040182:	028b      	lsls	r3, r1, #10
10040184:	1ac0      	subs	r0, r0, r3
10040186:	4152      	adcs	r2, r2
10040188:	0a43      	lsrs	r3, r0, #9
1004018a:	428b      	cmp	r3, r1
1004018c:	d301      	bcc.n	10040192 <__udivsi3+0x8e>
1004018e:	024b      	lsls	r3, r1, #9
10040190:	1ac0      	subs	r0, r0, r3
10040192:	4152      	adcs	r2, r2
10040194:	0a03      	lsrs	r3, r0, #8
10040196:	428b      	cmp	r3, r1
10040198:	d301      	bcc.n	1004019e <__udivsi3+0x9a>
1004019a:	020b      	lsls	r3, r1, #8
1004019c:	1ac0      	subs	r0, r0, r3
1004019e:	4152      	adcs	r2, r2
100401a0:	d2cd      	bcs.n	1004013e <__udivsi3+0x3a>
100401a2:	09c3      	lsrs	r3, r0, #7
100401a4:	428b      	cmp	r3, r1
100401a6:	d301      	bcc.n	100401ac <__udivsi3+0xa8>
100401a8:	01cb      	lsls	r3, r1, #7
100401aa:	1ac0      	subs	r0, r0, r3
100401ac:	4152      	adcs	r2, r2
100401ae:	0983      	lsrs	r3, r0, #6
100401b0:	428b      	cmp	r3, r1
100401b2:	d301      	bcc.n	100401b8 <__udivsi3+0xb4>
100401b4:	018b      	lsls	r3, r1, #6
100401b6:	1ac0      	subs	r0, r0, r3
100401b8:	4152      	adcs	r2, r2
100401ba:	0943      	lsrs	r3, r0, #5
100401bc:	428b      	cmp	r3, r1
100401be:	d301      	bcc.n	100401c4 <__udivsi3+0xc0>
100401c0:	014b      	lsls	r3, r1, #5
100401c2:	1ac0      	subs	r0, r0, r3
100401c4:	4152      	adcs	r2, r2
100401c6:	0903      	lsrs	r3, r0, #4
100401c8:	428b      	cmp	r3, r1
100401ca:	d301      	bcc.n	100401d0 <__udivsi3+0xcc>
100401cc:	010b      	lsls	r3, r1, #4
100401ce:	1ac0      	subs	r0, r0, r3
100401d0:	4152      	adcs	r2, r2
100401d2:	08c3      	lsrs	r3, r0, #3
100401d4:	428b      	cmp	r3, r1
100401d6:	d301      	bcc.n	100401dc <__udivsi3+0xd8>
100401d8:	00cb      	lsls	r3, r1, #3
100401da:	1ac0      	subs	r0, r0, r3
100401dc:	4152      	adcs	r2, r2
100401de:	0883      	lsrs	r3, r0, #2
100401e0:	428b      	cmp	r3, r1
100401e2:	d301      	bcc.n	100401e8 <__udivsi3+0xe4>
100401e4:	008b      	lsls	r3, r1, #2
100401e6:	1ac0      	subs	r0, r0, r3
100401e8:	4152      	adcs	r2, r2
100401ea:	0843      	lsrs	r3, r0, #1
100401ec:	428b      	cmp	r3, r1
100401ee:	d301      	bcc.n	100401f4 <__udivsi3+0xf0>
100401f0:	004b      	lsls	r3, r1, #1
100401f2:	1ac0      	subs	r0, r0, r3
100401f4:	4152      	adcs	r2, r2
100401f6:	1a41      	subs	r1, r0, r1
100401f8:	d200      	bcs.n	100401fc <__udivsi3+0xf8>
100401fa:	4601      	mov	r1, r0
100401fc:	4152      	adcs	r2, r2
100401fe:	4610      	mov	r0, r2
10040200:	4770      	bx	lr
10040202:	e7ff      	b.n	10040204 <__udivsi3+0x100>
10040204:	b501      	push	{r0, lr}
10040206:	2000      	movs	r0, #0
10040208:	f000 f8f0 	bl	100403ec <__aeabi_idiv0>
1004020c:	bd02      	pop	{r1, pc}
1004020e:	46c0      	nop			@ (mov r8, r8)

10040210 <__aeabi_uidivmod>:
10040210:	2900      	cmp	r1, #0
10040212:	d0f7      	beq.n	10040204 <__udivsi3+0x100>
10040214:	e776      	b.n	10040104 <__udivsi3>
10040216:	4770      	bx	lr

10040218 <__divsi3>:
10040218:	4603      	mov	r3, r0
1004021a:	430b      	orrs	r3, r1
1004021c:	d47f      	bmi.n	1004031e <__divsi3+0x106>
1004021e:	2200      	movs	r2, #0
10040220:	0843      	lsrs	r3, r0, #1
10040222:	428b      	cmp	r3, r1
10040224:	d374      	bcc.n	10040310 <__divsi3+0xf8>
10040226:	0903      	lsrs	r3, r0, #4
10040228:	428b      	cmp	r3, r1
1004022a:	d35f      	bcc.n	100402ec <__divsi3+0xd4>
1004022c:	0a03      	lsrs	r3, r0, #8
1004022e:	428b      	cmp	r3, r1
10040230:	d344      	bcc.n	100402bc <__divsi3+0xa4>
10040232:	0b03      	lsrs	r3, r0, #12
10040234:	428b      	cmp	r3, r1
10040236:	d328      	bcc.n	1004028a <__divsi3+0x72>
10040238:	0c03      	lsrs	r3, r0, #16
1004023a:	428b      	cmp	r3, r1
1004023c:	d30d      	bcc.n	1004025a <__divsi3+0x42>
1004023e:	22ff      	movs	r2, #255	@ 0xff
10040240:	0209      	lsls	r1, r1, #8
10040242:	ba12      	rev	r2, r2
10040244:	0c03      	lsrs	r3, r0, #16
10040246:	428b      	cmp	r3, r1
10040248:	d302      	bcc.n	10040250 <__divsi3+0x38>
1004024a:	1212      	asrs	r2, r2, #8
1004024c:	0209      	lsls	r1, r1, #8
1004024e:	d065      	beq.n	1004031c <__divsi3+0x104>
10040250:	0b03      	lsrs	r3, r0, #12
10040252:	428b      	cmp	r3, r1
10040254:	d319      	bcc.n	1004028a <__divsi3+0x72>
10040256:	e000      	b.n	1004025a <__divsi3+0x42>
10040258:	0a09      	lsrs	r1, r1, #8
1004025a:	0bc3      	lsrs	r3, r0, #15
1004025c:	428b      	cmp	r3, r1
1004025e:	d301      	bcc.n	10040264 <__divsi3+0x4c>
10040260:	03cb      	lsls	r3, r1, #15
10040262:	1ac0      	subs	r0, r0, r3
10040264:	4152      	adcs	r2, r2
10040266:	0b83      	lsrs	r3, r0, #14
10040268:	428b      	cmp	r3, r1
1004026a:	d301      	bcc.n	10040270 <__divsi3+0x58>
1004026c:	038b      	lsls	r3, r1, #14
1004026e:	1ac0      	subs	r0, r0, r3
10040270:	4152      	adcs	r2, r2
10040272:	0b43      	lsrs	r3, r0, #13
10040274:	428b      	cmp	r3, r1
10040276:	d301      	bcc.n	1004027c <__divsi3+0x64>
10040278:	034b      	lsls	r3, r1, #13
1004027a:	1ac0      	subs	r0, r0, r3
1004027c:	4152      	adcs	r2, r2
1004027e:	0b03      	lsrs	r3, r0, #12
10040280:	428b      	cmp	r3, r1
10040282:	d301      	bcc.n	10040288 <__divsi3+0x70>
10040284:	030b      	lsls	r3, r1, #12
10040286:	1ac0      	subs	r0, r0, r3
10040288:	4152      	adcs	r2, r2
1004028a:	0ac3      	lsrs	r3, r0, #11
1004028c:	428b      	cmp	r3, r1
1004028e:	d301      	bcc.n	10040294 <__divsi3+0x7c>
10040290:	02cb      	lsls	r3, r1, #11
10040292:	1ac0      	subs	r0, r0, r3
10040294:	4152      	adcs	r2, r2
10040296:	0a83      	lsrs	r3, r0, #10
10040298:	428b      	cmp	r3, r1
1004029a:	d301      	bcc.n	100402a0 <__divsi3+0x88>
1004029c:	028b      	lsls	r3, r1, #10
1004029e:	1ac0      	subs	r0, r0, r3
100402a0:	4152      	adcs	r2, r2
100402a2:	0a43      	lsrs	r3, r0, #9
100402a4:	428b      	cmp	r3, r1
100402a6:	d301      	bcc.n	100402ac <__divsi3+0x94>
100402a8:	024b      	lsls	r3, r1, #9
100402aa:	1ac0      	subs	r0, r0, r3
100402ac:	4152      	adcs	r2, r2
100402ae:	0a03      	lsrs	r3, r0, #8
100402b0:	428b      	cmp	r3, r1
100402b2:	d301      	bcc.n	100402b8 <__divsi3+0xa0>
100402b4:	020b      	lsls	r3, r1, #8
100402b6:	1ac0      	subs	r0, r0, r3
100402b8:	4152      	adcs	r2, r2
100402ba:	d2cd      	bcs.n	10040258 <__divsi3+0x40>
100402bc:	09c3      	lsrs	r3, r0, #7
100402be:	428b      	cmp	r3, r1
100402c0:	d301      	bcc.n	100402c6 <__divsi3+0xae>
100402c2:	01cb      	lsls	r3, r1, #7
100402c4:	1ac0      	subs	r0, r0, r3
100402c6:	4152      	adcs	r2, r2
100402c8:	0983      	lsrs	r3, r0, #6
100402ca:	428b      	cmp	r3, r1
100402cc:	d301      	bcc.n	100402d2 <__divsi3+0xba>
100402ce:	018b      	lsls	r3, r1, #6
100402d0:	1ac0      	subs	r0, r0, r3
100402d2:	4152      	adcs	r2, r2
100402d4:	0943      	lsrs	r3, r0, #5
100402d6:	428b      	cmp	r3, r1
100402d8:	d301      	bcc.n	100402de <__divsi3+0xc6>
100402da:	014b      	lsls	r3, r1, #5
100402dc:	1ac0      	subs	r0, r0, r3
100402de:	4152      	adcs	r2, r2
100402e0:	0903      	lsrs	r3, r0, #4
100402e2:	428b      	cmp	r3, r1
100402e4:	d301      	bcc.n	100402ea <__divsi3+0xd2>
100402e6:	010b      	lsls	r3, r1, #4
100402e8:	1ac0      	subs	r0, r0, r3
100402ea:	4152      	adcs	r2, r2
100402ec:	08c3      	lsrs	r3, r0, #3
100402ee:	428b      	cmp	r3, r1
100402f0:	d301      	bcc.n	100402f6 <__divsi3+0xde>
100402f2:	00cb      	lsls	r3, r1, #3
100402f4:	1ac0      	subs	r0, r0, r3
100402f6:	4152      	adcs	r2, r2
100402f8:	0883      	lsrs	r3, r0, #2
100402fa:	428b      	cmp	r3, r1
100402fc:	d301      	bcc.n	10040302 <__divsi3+0xea>
100402fe:	008b      	lsls	r3, r1, #2
10040300:	1ac0      	subs	r0, r0, r3
10040302:	4152      	adcs	r2, r2
10040304:	0843      	lsrs	r3, r0, #1
10040306:	428b      	cmp	r3, r1
10040308:	d301      	bcc.n	1004030e <__divsi3+0xf6>
1004030a:	004b      	lsls	r3, r1, #1
1004030c:	1ac0      	subs	r0, r0, r3
1004030e:	4152      	adcs	r2, r2
10040310:	1a41      	subs	r1, r0, r1
10040312:	d200      	bcs.n	10040316 <__divsi3+0xfe>
10040314:	4601      	mov	r1, r0
10040316:	4152      	adcs	r2, r2
10040318:	4610      	mov	r0, r2
1004031a:	4770      	bx	lr
1004031c:	e05d      	b.n	100403da <__divsi3+0x1c2>
1004031e:	0fca      	lsrs	r2, r1, #31
10040320:	d000      	beq.n	10040324 <__divsi3+0x10c>
10040322:	4249      	negs	r1, r1
10040324:	1003      	asrs	r3, r0, #32
10040326:	d300      	bcc.n	1004032a <__divsi3+0x112>
10040328:	4240      	negs	r0, r0
1004032a:	4053      	eors	r3, r2
1004032c:	2200      	movs	r2, #0
1004032e:	469c      	mov	ip, r3
10040330:	0903      	lsrs	r3, r0, #4
10040332:	428b      	cmp	r3, r1
10040334:	d32d      	bcc.n	10040392 <__divsi3+0x17a>
10040336:	0a03      	lsrs	r3, r0, #8
10040338:	428b      	cmp	r3, r1
1004033a:	d312      	bcc.n	10040362 <__divsi3+0x14a>
1004033c:	22fc      	movs	r2, #252	@ 0xfc
1004033e:	0189      	lsls	r1, r1, #6
10040340:	ba12      	rev	r2, r2
10040342:	0a03      	lsrs	r3, r0, #8
10040344:	428b      	cmp	r3, r1
10040346:	d30c      	bcc.n	10040362 <__divsi3+0x14a>
10040348:	0189      	lsls	r1, r1, #6
1004034a:	1192      	asrs	r2, r2, #6
1004034c:	428b      	cmp	r3, r1
1004034e:	d308      	bcc.n	10040362 <__divsi3+0x14a>
10040350:	0189      	lsls	r1, r1, #6
10040352:	1192      	asrs	r2, r2, #6
10040354:	428b      	cmp	r3, r1
10040356:	d304      	bcc.n	10040362 <__divsi3+0x14a>
10040358:	0189      	lsls	r1, r1, #6
1004035a:	d03a      	beq.n	100403d2 <__divsi3+0x1ba>
1004035c:	1192      	asrs	r2, r2, #6
1004035e:	e000      	b.n	10040362 <__divsi3+0x14a>
10040360:	0989      	lsrs	r1, r1, #6
10040362:	09c3      	lsrs	r3, r0, #7
10040364:	428b      	cmp	r3, r1
10040366:	d301      	bcc.n	1004036c <__divsi3+0x154>
10040368:	01cb      	lsls	r3, r1, #7
1004036a:	1ac0      	subs	r0, r0, r3
1004036c:	4152      	adcs	r2, r2
1004036e:	0983      	lsrs	r3, r0, #6
10040370:	428b      	cmp	r3, r1
10040372:	d301      	bcc.n	10040378 <__divsi3+0x160>
10040374:	018b      	lsls	r3, r1, #6
10040376:	1ac0      	subs	r0, r0, r3
10040378:	4152      	adcs	r2, r2
1004037a:	0943      	lsrs	r3, r0, #5
1004037c:	428b      	cmp	r3, r1
1004037e:	d301      	bcc.n	10040384 <__divsi3+0x16c>
10040380:	014b      	lsls	r3, r1, #5
10040382:	1ac0      	subs	r0, r0, r3
10040384:	4152      	adcs	r2, r2
10040386:	0903      	lsrs	r3, r0, #4
10040388:	428b      	cmp	r3, r1
1004038a:	d301      	bcc.n	10040390 <__divsi3+0x178>
1004038c:	010b      	lsls	r3, r1, #4
1004038e:	1ac0      	subs	r0, r0, r3
10040390:	4152      	adcs	r2, r2
10040392:	08c3      	lsrs	r3, r0, #3
10040394:	428b      	cmp	r3, r1
10040396:	d301      	bcc.n	1004039c <__divsi3+0x184>
10040398:	00cb      	lsls	r3, r1, #3
1004039a:	1ac0      	subs	r0, r0, r3
1004039c:	4152      	adcs	r2, r2
1004039e:	0883      	lsrs	r3, r0, #2
100403a0:	428b      	cmp	r3, r1
100403a2:	d301      	bcc.n	100403a8 <__divsi3+0x190>
100403a4:	008b      	lsls	r3, r1, #2
100403a6:	1ac0      	subs	r0, r0, r3
100403a8:	4152      	adcs	r2, r2
100403aa:	d2d9      	bcs.n	10040360 <__divsi3+0x148>
100403ac:	0843      	lsrs	r3, r0, #1
100403ae:	428b      	cmp	r3, r1
100403b0:	d301      	bcc.n	100403b6 <__divsi3+0x19e>
100403b2:	004b      	lsls	r3, r1, #1
100403b4:	1ac0      	subs	r0, r0, r3
100403b6:	4152      	adcs	r2, r2
100403b8:	1a41      	subs	r1, r0, r1
100403ba:	d200      	bcs.n	100403be <__divsi3+0x1a6>
100403bc:	4601      	mov	r1, r0
100403be:	4663      	mov	r3, ip
100403c0:	4152      	adcs	r2, r2
100403c2:	105b      	asrs	r3, r3, #1
100403c4:	4610      	mov	r0, r2
100403c6:	d301      	bcc.n	100403cc <__divsi3+0x1b4>
100403c8:	4240      	negs	r0, r0
100403ca:	2b00      	cmp	r3, #0
100403cc:	d500      	bpl.n	100403d0 <__divsi3+0x1b8>
100403ce:	4249      	negs	r1, r1
100403d0:	4770      	bx	lr
100403d2:	4663      	mov	r3, ip
100403d4:	105b      	asrs	r3, r3, #1
100403d6:	d300      	bcc.n	100403da <__divsi3+0x1c2>
100403d8:	4240      	negs	r0, r0
100403da:	b501      	push	{r0, lr}
100403dc:	2000      	movs	r0, #0
100403de:	f000 f805 	bl	100403ec <__aeabi_idiv0>
100403e2:	bd02      	pop	{r1, pc}

100403e4 <__aeabi_idivmod>:
100403e4:	2900      	cmp	r1, #0
100403e6:	d0f8      	beq.n	100403da <__divsi3+0x1c2>
100403e8:	e716      	b.n	10040218 <__divsi3>
100403ea:	4770      	bx	lr

100403ec <__aeabi_idiv0>:
100403ec:	4770      	bx	lr
100403ee:	46c0      	nop			@ (mov r8, r8)

100403f0 <__aeabi_uldivmod>:
100403f0:	2b00      	cmp	r3, #0
100403f2:	d111      	bne.n	10040418 <__aeabi_uldivmod+0x28>
100403f4:	2a00      	cmp	r2, #0
100403f6:	d10f      	bne.n	10040418 <__aeabi_uldivmod+0x28>
100403f8:	2900      	cmp	r1, #0
100403fa:	d100      	bne.n	100403fe <__aeabi_uldivmod+0xe>
100403fc:	2800      	cmp	r0, #0
100403fe:	d002      	beq.n	10040406 <__aeabi_uldivmod+0x16>
10040400:	2100      	movs	r1, #0
10040402:	43c9      	mvns	r1, r1
10040404:	0008      	movs	r0, r1
10040406:	b407      	push	{r0, r1, r2}
10040408:	4802      	ldr	r0, [pc, #8]	@ (10040414 <__aeabi_uldivmod+0x24>)
1004040a:	a102      	add	r1, pc, #8	@ (adr r1, 10040414 <__aeabi_uldivmod+0x24>)
1004040c:	1840      	adds	r0, r0, r1
1004040e:	9002      	str	r0, [sp, #8]
10040410:	bd03      	pop	{r0, r1, pc}
10040412:	46c0      	nop			@ (mov r8, r8)
10040414:	ffffffd9 	.word	0xffffffd9
10040418:	b403      	push	{r0, r1}
1004041a:	4668      	mov	r0, sp
1004041c:	b501      	push	{r0, lr}
1004041e:	9802      	ldr	r0, [sp, #8]
10040420:	f000 f8a2 	bl	10040568 <__udivmoddi4>
10040424:	9b01      	ldr	r3, [sp, #4]
10040426:	469e      	mov	lr, r3
10040428:	b002      	add	sp, #8
1004042a:	bc0c      	pop	{r2, r3}
1004042c:	4770      	bx	lr
1004042e:	46c0      	nop			@ (mov r8, r8)

10040430 <__aeabi_lmul>:
10040430:	b5f0      	push	{r4, r5, r6, r7, lr}
10040432:	46ce      	mov	lr, r9
10040434:	4699      	mov	r9, r3
10040436:	0c03      	lsrs	r3, r0, #16
10040438:	469c      	mov	ip, r3
1004043a:	0413      	lsls	r3, r2, #16
1004043c:	4647      	mov	r7, r8
1004043e:	0c1b      	lsrs	r3, r3, #16
10040440:	001d      	movs	r5, r3
10040442:	000e      	movs	r6, r1
10040444:	4661      	mov	r1, ip
10040446:	0404      	lsls	r4, r0, #16
10040448:	0c24      	lsrs	r4, r4, #16
1004044a:	b580      	push	{r7, lr}
1004044c:	0007      	movs	r7, r0
1004044e:	0c10      	lsrs	r0, r2, #16
10040450:	434b      	muls	r3, r1
10040452:	4365      	muls	r5, r4
10040454:	4341      	muls	r1, r0
10040456:	4360      	muls	r0, r4
10040458:	0c2c      	lsrs	r4, r5, #16
1004045a:	18c0      	adds	r0, r0, r3
1004045c:	1824      	adds	r4, r4, r0
1004045e:	468c      	mov	ip, r1
10040460:	42a3      	cmp	r3, r4
10040462:	d903      	bls.n	1004046c <__aeabi_lmul+0x3c>
10040464:	2380      	movs	r3, #128	@ 0x80
10040466:	025b      	lsls	r3, r3, #9
10040468:	4698      	mov	r8, r3
1004046a:	44c4      	add	ip, r8
1004046c:	4649      	mov	r1, r9
1004046e:	4379      	muls	r1, r7
10040470:	4356      	muls	r6, r2
10040472:	0c23      	lsrs	r3, r4, #16
10040474:	042d      	lsls	r5, r5, #16
10040476:	0c2d      	lsrs	r5, r5, #16
10040478:	1989      	adds	r1, r1, r6
1004047a:	4463      	add	r3, ip
1004047c:	0424      	lsls	r4, r4, #16
1004047e:	1960      	adds	r0, r4, r5
10040480:	18c9      	adds	r1, r1, r3
10040482:	bcc0      	pop	{r6, r7}
10040484:	46b9      	mov	r9, r7
10040486:	46b0      	mov	r8, r6
10040488:	bdf0      	pop	{r4, r5, r6, r7, pc}
1004048a:	46c0      	nop			@ (mov r8, r8)

1004048c <__aeabi_d2uiz>:
1004048c:	b570      	push	{r4, r5, r6, lr}
1004048e:	2200      	movs	r2, #0
10040490:	4b0c      	ldr	r3, [pc, #48]	@ (100404c4 <__aeabi_d2uiz+0x38>)
10040492:	0004      	movs	r4, r0
10040494:	000d      	movs	r5, r1
10040496:	f001 fed7 	bl	10042248 <__aeabi_dcmpge>
1004049a:	2800      	cmp	r0, #0
1004049c:	d104      	bne.n	100404a8 <__aeabi_d2uiz+0x1c>
1004049e:	0020      	movs	r0, r4
100404a0:	0029      	movs	r1, r5
100404a2:	f001 fe0f 	bl	100420c4 <__aeabi_d2iz>
100404a6:	bd70      	pop	{r4, r5, r6, pc}
100404a8:	4b06      	ldr	r3, [pc, #24]	@ (100404c4 <__aeabi_d2uiz+0x38>)
100404aa:	2200      	movs	r2, #0
100404ac:	0020      	movs	r0, r4
100404ae:	0029      	movs	r1, r5
100404b0:	f001 fa6c 	bl	1004198c <__aeabi_dsub>
100404b4:	f001 fe06 	bl	100420c4 <__aeabi_d2iz>
100404b8:	2380      	movs	r3, #128	@ 0x80
100404ba:	061b      	lsls	r3, r3, #24
100404bc:	469c      	mov	ip, r3
100404be:	4460      	add	r0, ip
100404c0:	e7f1      	b.n	100404a6 <__aeabi_d2uiz+0x1a>
100404c2:	46c0      	nop			@ (mov r8, r8)
100404c4:	41e00000 	.word	0x41e00000

100404c8 <__aeabi_d2lz>:
100404c8:	b570      	push	{r4, r5, r6, lr}
100404ca:	2200      	movs	r2, #0
100404cc:	2300      	movs	r3, #0
100404ce:	0004      	movs	r4, r0
100404d0:	000d      	movs	r5, r1
100404d2:	f001 fe9b 	bl	1004220c <__aeabi_dcmplt>
100404d6:	2800      	cmp	r0, #0
100404d8:	d108      	bne.n	100404ec <__aeabi_d2lz+0x24>
100404da:	0020      	movs	r0, r4
100404dc:	0029      	movs	r1, r5
100404de:	f000 f80f 	bl	10040500 <__aeabi_d2ulz>
100404e2:	0002      	movs	r2, r0
100404e4:	000b      	movs	r3, r1
100404e6:	0010      	movs	r0, r2
100404e8:	0019      	movs	r1, r3
100404ea:	bd70      	pop	{r4, r5, r6, pc}
100404ec:	2380      	movs	r3, #128	@ 0x80
100404ee:	061b      	lsls	r3, r3, #24
100404f0:	18e9      	adds	r1, r5, r3
100404f2:	0020      	movs	r0, r4
100404f4:	f000 f804 	bl	10040500 <__aeabi_d2ulz>
100404f8:	2300      	movs	r3, #0
100404fa:	4242      	negs	r2, r0
100404fc:	418b      	sbcs	r3, r1
100404fe:	e7f2      	b.n	100404e6 <__aeabi_d2lz+0x1e>

10040500 <__aeabi_d2ulz>:
10040500:	b570      	push	{r4, r5, r6, lr}
10040502:	2200      	movs	r2, #0
10040504:	4b0b      	ldr	r3, [pc, #44]	@ (10040534 <__aeabi_d2ulz+0x34>)
10040506:	000d      	movs	r5, r1
10040508:	0004      	movs	r4, r0
1004050a:	f000 ff77 	bl	100413fc <__aeabi_dmul>
1004050e:	f7ff ffbd 	bl	1004048c <__aeabi_d2uiz>
10040512:	0006      	movs	r6, r0
10040514:	f001 fe40 	bl	10042198 <__aeabi_ui2d>
10040518:	2200      	movs	r2, #0
1004051a:	4b07      	ldr	r3, [pc, #28]	@ (10040538 <__aeabi_d2ulz+0x38>)
1004051c:	f000 ff6e 	bl	100413fc <__aeabi_dmul>
10040520:	0002      	movs	r2, r0
10040522:	000b      	movs	r3, r1
10040524:	0020      	movs	r0, r4
10040526:	0029      	movs	r1, r5
10040528:	f001 fa30 	bl	1004198c <__aeabi_dsub>
1004052c:	f7ff ffae 	bl	1004048c <__aeabi_d2uiz>
10040530:	0031      	movs	r1, r6
10040532:	bd70      	pop	{r4, r5, r6, pc}
10040534:	3df00000 	.word	0x3df00000
10040538:	41f00000 	.word	0x41f00000

1004053c <__aeabi_l2d>:
1004053c:	b570      	push	{r4, r5, r6, lr}
1004053e:	0006      	movs	r6, r0
10040540:	0008      	movs	r0, r1
10040542:	f001 fdfb 	bl	1004213c <__aeabi_i2d>
10040546:	2200      	movs	r2, #0
10040548:	4b06      	ldr	r3, [pc, #24]	@ (10040564 <__aeabi_l2d+0x28>)
1004054a:	f000 ff57 	bl	100413fc <__aeabi_dmul>
1004054e:	000d      	movs	r5, r1
10040550:	0004      	movs	r4, r0
10040552:	0030      	movs	r0, r6
10040554:	f001 fe20 	bl	10042198 <__aeabi_ui2d>
10040558:	002b      	movs	r3, r5
1004055a:	0022      	movs	r2, r4
1004055c:	f000 f8d0 	bl	10040700 <__aeabi_dadd>
10040560:	bd70      	pop	{r4, r5, r6, pc}
10040562:	46c0      	nop			@ (mov r8, r8)
10040564:	41f00000 	.word	0x41f00000

10040568 <__udivmoddi4>:
10040568:	b5f0      	push	{r4, r5, r6, r7, lr}
1004056a:	4657      	mov	r7, sl
1004056c:	464e      	mov	r6, r9
1004056e:	4645      	mov	r5, r8
10040570:	46de      	mov	lr, fp
10040572:	b5e0      	push	{r5, r6, r7, lr}
10040574:	0004      	movs	r4, r0
10040576:	000d      	movs	r5, r1
10040578:	4692      	mov	sl, r2
1004057a:	4699      	mov	r9, r3
1004057c:	b083      	sub	sp, #12
1004057e:	428b      	cmp	r3, r1
10040580:	d830      	bhi.n	100405e4 <__udivmoddi4+0x7c>
10040582:	d02d      	beq.n	100405e0 <__udivmoddi4+0x78>
10040584:	4649      	mov	r1, r9
10040586:	4650      	mov	r0, sl
10040588:	f001 fe86 	bl	10042298 <__clzdi2>
1004058c:	0029      	movs	r1, r5
1004058e:	0006      	movs	r6, r0
10040590:	0020      	movs	r0, r4
10040592:	f001 fe81 	bl	10042298 <__clzdi2>
10040596:	1a33      	subs	r3, r6, r0
10040598:	4698      	mov	r8, r3
1004059a:	3b20      	subs	r3, #32
1004059c:	d434      	bmi.n	10040608 <__udivmoddi4+0xa0>
1004059e:	469b      	mov	fp, r3
100405a0:	4653      	mov	r3, sl
100405a2:	465a      	mov	r2, fp
100405a4:	4093      	lsls	r3, r2
100405a6:	4642      	mov	r2, r8
100405a8:	001f      	movs	r7, r3
100405aa:	4653      	mov	r3, sl
100405ac:	4093      	lsls	r3, r2
100405ae:	001e      	movs	r6, r3
100405b0:	42af      	cmp	r7, r5
100405b2:	d83b      	bhi.n	1004062c <__udivmoddi4+0xc4>
100405b4:	42af      	cmp	r7, r5
100405b6:	d100      	bne.n	100405ba <__udivmoddi4+0x52>
100405b8:	e079      	b.n	100406ae <__udivmoddi4+0x146>
100405ba:	465b      	mov	r3, fp
100405bc:	1ba4      	subs	r4, r4, r6
100405be:	41bd      	sbcs	r5, r7
100405c0:	2b00      	cmp	r3, #0
100405c2:	da00      	bge.n	100405c6 <__udivmoddi4+0x5e>
100405c4:	e076      	b.n	100406b4 <__udivmoddi4+0x14c>
100405c6:	2200      	movs	r2, #0
100405c8:	2300      	movs	r3, #0
100405ca:	9200      	str	r2, [sp, #0]
100405cc:	9301      	str	r3, [sp, #4]
100405ce:	2301      	movs	r3, #1
100405d0:	465a      	mov	r2, fp
100405d2:	4093      	lsls	r3, r2
100405d4:	9301      	str	r3, [sp, #4]
100405d6:	2301      	movs	r3, #1
100405d8:	4642      	mov	r2, r8
100405da:	4093      	lsls	r3, r2
100405dc:	9300      	str	r3, [sp, #0]
100405de:	e029      	b.n	10040634 <__udivmoddi4+0xcc>
100405e0:	4282      	cmp	r2, r0
100405e2:	d9cf      	bls.n	10040584 <__udivmoddi4+0x1c>
100405e4:	2200      	movs	r2, #0
100405e6:	2300      	movs	r3, #0
100405e8:	9200      	str	r2, [sp, #0]
100405ea:	9301      	str	r3, [sp, #4]
100405ec:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
100405ee:	2b00      	cmp	r3, #0
100405f0:	d001      	beq.n	100405f6 <__udivmoddi4+0x8e>
100405f2:	601c      	str	r4, [r3, #0]
100405f4:	605d      	str	r5, [r3, #4]
100405f6:	9800      	ldr	r0, [sp, #0]
100405f8:	9901      	ldr	r1, [sp, #4]
100405fa:	b003      	add	sp, #12
100405fc:	bcf0      	pop	{r4, r5, r6, r7}
100405fe:	46bb      	mov	fp, r7
10040600:	46b2      	mov	sl, r6
10040602:	46a9      	mov	r9, r5
10040604:	46a0      	mov	r8, r4
10040606:	bdf0      	pop	{r4, r5, r6, r7, pc}
10040608:	4642      	mov	r2, r8
1004060a:	469b      	mov	fp, r3
1004060c:	2320      	movs	r3, #32
1004060e:	1a9b      	subs	r3, r3, r2
10040610:	4652      	mov	r2, sl
10040612:	40da      	lsrs	r2, r3
10040614:	4641      	mov	r1, r8
10040616:	0013      	movs	r3, r2
10040618:	464a      	mov	r2, r9
1004061a:	408a      	lsls	r2, r1
1004061c:	0017      	movs	r7, r2
1004061e:	4642      	mov	r2, r8
10040620:	431f      	orrs	r7, r3
10040622:	4653      	mov	r3, sl
10040624:	4093      	lsls	r3, r2
10040626:	001e      	movs	r6, r3
10040628:	42af      	cmp	r7, r5
1004062a:	d9c3      	bls.n	100405b4 <__udivmoddi4+0x4c>
1004062c:	2200      	movs	r2, #0
1004062e:	2300      	movs	r3, #0
10040630:	9200      	str	r2, [sp, #0]
10040632:	9301      	str	r3, [sp, #4]
10040634:	4643      	mov	r3, r8
10040636:	2b00      	cmp	r3, #0
10040638:	d0d8      	beq.n	100405ec <__udivmoddi4+0x84>
1004063a:	07fb      	lsls	r3, r7, #31
1004063c:	0872      	lsrs	r2, r6, #1
1004063e:	431a      	orrs	r2, r3
10040640:	4646      	mov	r6, r8
10040642:	087b      	lsrs	r3, r7, #1
10040644:	e00e      	b.n	10040664 <__udivmoddi4+0xfc>
10040646:	42ab      	cmp	r3, r5
10040648:	d101      	bne.n	1004064e <__udivmoddi4+0xe6>
1004064a:	42a2      	cmp	r2, r4
1004064c:	d80c      	bhi.n	10040668 <__udivmoddi4+0x100>
1004064e:	1aa4      	subs	r4, r4, r2
10040650:	419d      	sbcs	r5, r3
10040652:	2001      	movs	r0, #1
10040654:	1924      	adds	r4, r4, r4
10040656:	416d      	adcs	r5, r5
10040658:	2100      	movs	r1, #0
1004065a:	3e01      	subs	r6, #1
1004065c:	1824      	adds	r4, r4, r0
1004065e:	414d      	adcs	r5, r1
10040660:	2e00      	cmp	r6, #0
10040662:	d006      	beq.n	10040672 <__udivmoddi4+0x10a>
10040664:	42ab      	cmp	r3, r5
10040666:	d9ee      	bls.n	10040646 <__udivmoddi4+0xde>
10040668:	3e01      	subs	r6, #1
1004066a:	1924      	adds	r4, r4, r4
1004066c:	416d      	adcs	r5, r5
1004066e:	2e00      	cmp	r6, #0
10040670:	d1f8      	bne.n	10040664 <__udivmoddi4+0xfc>
10040672:	9800      	ldr	r0, [sp, #0]
10040674:	9901      	ldr	r1, [sp, #4]
10040676:	465b      	mov	r3, fp
10040678:	1900      	adds	r0, r0, r4
1004067a:	4169      	adcs	r1, r5
1004067c:	2b00      	cmp	r3, #0
1004067e:	db24      	blt.n	100406ca <__udivmoddi4+0x162>
10040680:	002b      	movs	r3, r5
10040682:	465a      	mov	r2, fp
10040684:	4644      	mov	r4, r8
10040686:	40d3      	lsrs	r3, r2
10040688:	002a      	movs	r2, r5
1004068a:	40e2      	lsrs	r2, r4
1004068c:	001c      	movs	r4, r3
1004068e:	465b      	mov	r3, fp
10040690:	0015      	movs	r5, r2
10040692:	2b00      	cmp	r3, #0
10040694:	db2a      	blt.n	100406ec <__udivmoddi4+0x184>
10040696:	0026      	movs	r6, r4
10040698:	409e      	lsls	r6, r3
1004069a:	0033      	movs	r3, r6
1004069c:	0026      	movs	r6, r4
1004069e:	4647      	mov	r7, r8
100406a0:	40be      	lsls	r6, r7
100406a2:	0032      	movs	r2, r6
100406a4:	1a80      	subs	r0, r0, r2
100406a6:	4199      	sbcs	r1, r3
100406a8:	9000      	str	r0, [sp, #0]
100406aa:	9101      	str	r1, [sp, #4]
100406ac:	e79e      	b.n	100405ec <__udivmoddi4+0x84>
100406ae:	42a3      	cmp	r3, r4
100406b0:	d8bc      	bhi.n	1004062c <__udivmoddi4+0xc4>
100406b2:	e782      	b.n	100405ba <__udivmoddi4+0x52>
100406b4:	4642      	mov	r2, r8
100406b6:	2320      	movs	r3, #32
100406b8:	2100      	movs	r1, #0
100406ba:	1a9b      	subs	r3, r3, r2
100406bc:	2200      	movs	r2, #0
100406be:	9100      	str	r1, [sp, #0]
100406c0:	9201      	str	r2, [sp, #4]
100406c2:	2201      	movs	r2, #1
100406c4:	40da      	lsrs	r2, r3
100406c6:	9201      	str	r2, [sp, #4]
100406c8:	e785      	b.n	100405d6 <__udivmoddi4+0x6e>
100406ca:	4642      	mov	r2, r8
100406cc:	2320      	movs	r3, #32
100406ce:	1a9b      	subs	r3, r3, r2
100406d0:	002a      	movs	r2, r5
100406d2:	4646      	mov	r6, r8
100406d4:	409a      	lsls	r2, r3
100406d6:	0023      	movs	r3, r4
100406d8:	40f3      	lsrs	r3, r6
100406da:	4644      	mov	r4, r8
100406dc:	4313      	orrs	r3, r2
100406de:	002a      	movs	r2, r5
100406e0:	40e2      	lsrs	r2, r4
100406e2:	001c      	movs	r4, r3
100406e4:	465b      	mov	r3, fp
100406e6:	0015      	movs	r5, r2
100406e8:	2b00      	cmp	r3, #0
100406ea:	dad4      	bge.n	10040696 <__udivmoddi4+0x12e>
100406ec:	4642      	mov	r2, r8
100406ee:	002f      	movs	r7, r5
100406f0:	2320      	movs	r3, #32
100406f2:	0026      	movs	r6, r4
100406f4:	4097      	lsls	r7, r2
100406f6:	1a9b      	subs	r3, r3, r2
100406f8:	40de      	lsrs	r6, r3
100406fa:	003b      	movs	r3, r7
100406fc:	4333      	orrs	r3, r6
100406fe:	e7cd      	b.n	1004069c <__udivmoddi4+0x134>

10040700 <__aeabi_dadd>:
10040700:	b5f0      	push	{r4, r5, r6, r7, lr}
10040702:	4657      	mov	r7, sl
10040704:	464e      	mov	r6, r9
10040706:	4645      	mov	r5, r8
10040708:	46de      	mov	lr, fp
1004070a:	b5e0      	push	{r5, r6, r7, lr}
1004070c:	b083      	sub	sp, #12
1004070e:	9000      	str	r0, [sp, #0]
10040710:	9101      	str	r1, [sp, #4]
10040712:	030c      	lsls	r4, r1, #12
10040714:	004f      	lsls	r7, r1, #1
10040716:	0fce      	lsrs	r6, r1, #31
10040718:	0a61      	lsrs	r1, r4, #9
1004071a:	9c00      	ldr	r4, [sp, #0]
1004071c:	031d      	lsls	r5, r3, #12
1004071e:	0f64      	lsrs	r4, r4, #29
10040720:	430c      	orrs	r4, r1
10040722:	9900      	ldr	r1, [sp, #0]
10040724:	9200      	str	r2, [sp, #0]
10040726:	9301      	str	r3, [sp, #4]
10040728:	00c8      	lsls	r0, r1, #3
1004072a:	0059      	lsls	r1, r3, #1
1004072c:	0d4b      	lsrs	r3, r1, #21
1004072e:	4699      	mov	r9, r3
10040730:	9a00      	ldr	r2, [sp, #0]
10040732:	9b01      	ldr	r3, [sp, #4]
10040734:	0a6d      	lsrs	r5, r5, #9
10040736:	0fd9      	lsrs	r1, r3, #31
10040738:	0f53      	lsrs	r3, r2, #29
1004073a:	432b      	orrs	r3, r5
1004073c:	469a      	mov	sl, r3
1004073e:	9b00      	ldr	r3, [sp, #0]
10040740:	0d7f      	lsrs	r7, r7, #21
10040742:	00da      	lsls	r2, r3, #3
10040744:	4694      	mov	ip, r2
10040746:	464a      	mov	r2, r9
10040748:	46b0      	mov	r8, r6
1004074a:	1aba      	subs	r2, r7, r2
1004074c:	428e      	cmp	r6, r1
1004074e:	d100      	bne.n	10040752 <__aeabi_dadd+0x52>
10040750:	e0b0      	b.n	100408b4 <__aeabi_dadd+0x1b4>
10040752:	2a00      	cmp	r2, #0
10040754:	dc00      	bgt.n	10040758 <__aeabi_dadd+0x58>
10040756:	e078      	b.n	1004084a <__aeabi_dadd+0x14a>
10040758:	4649      	mov	r1, r9
1004075a:	2900      	cmp	r1, #0
1004075c:	d100      	bne.n	10040760 <__aeabi_dadd+0x60>
1004075e:	e0e9      	b.n	10040934 <__aeabi_dadd+0x234>
10040760:	49c9      	ldr	r1, [pc, #804]	@ (10040a88 <__aeabi_dadd+0x388>)
10040762:	428f      	cmp	r7, r1
10040764:	d100      	bne.n	10040768 <__aeabi_dadd+0x68>
10040766:	e195      	b.n	10040a94 <__aeabi_dadd+0x394>
10040768:	2501      	movs	r5, #1
1004076a:	2a38      	cmp	r2, #56	@ 0x38
1004076c:	dc16      	bgt.n	1004079c <__aeabi_dadd+0x9c>
1004076e:	2180      	movs	r1, #128	@ 0x80
10040770:	4653      	mov	r3, sl
10040772:	0409      	lsls	r1, r1, #16
10040774:	430b      	orrs	r3, r1
10040776:	469a      	mov	sl, r3
10040778:	2a1f      	cmp	r2, #31
1004077a:	dd00      	ble.n	1004077e <__aeabi_dadd+0x7e>
1004077c:	e1e7      	b.n	10040b4e <__aeabi_dadd+0x44e>
1004077e:	2120      	movs	r1, #32
10040780:	4655      	mov	r5, sl
10040782:	1a8b      	subs	r3, r1, r2
10040784:	4661      	mov	r1, ip
10040786:	409d      	lsls	r5, r3
10040788:	40d1      	lsrs	r1, r2
1004078a:	430d      	orrs	r5, r1
1004078c:	4661      	mov	r1, ip
1004078e:	4099      	lsls	r1, r3
10040790:	1e4b      	subs	r3, r1, #1
10040792:	4199      	sbcs	r1, r3
10040794:	4653      	mov	r3, sl
10040796:	40d3      	lsrs	r3, r2
10040798:	430d      	orrs	r5, r1
1004079a:	1ae4      	subs	r4, r4, r3
1004079c:	1b45      	subs	r5, r0, r5
1004079e:	42a8      	cmp	r0, r5
100407a0:	4180      	sbcs	r0, r0
100407a2:	4240      	negs	r0, r0
100407a4:	1a24      	subs	r4, r4, r0
100407a6:	0223      	lsls	r3, r4, #8
100407a8:	d400      	bmi.n	100407ac <__aeabi_dadd+0xac>
100407aa:	e10f      	b.n	100409cc <__aeabi_dadd+0x2cc>
100407ac:	0264      	lsls	r4, r4, #9
100407ae:	0a64      	lsrs	r4, r4, #9
100407b0:	2c00      	cmp	r4, #0
100407b2:	d100      	bne.n	100407b6 <__aeabi_dadd+0xb6>
100407b4:	e139      	b.n	10040a2a <__aeabi_dadd+0x32a>
100407b6:	0020      	movs	r0, r4
100407b8:	f001 fd50 	bl	1004225c <__clzsi2>
100407bc:	0003      	movs	r3, r0
100407be:	3b08      	subs	r3, #8
100407c0:	2120      	movs	r1, #32
100407c2:	0028      	movs	r0, r5
100407c4:	1aca      	subs	r2, r1, r3
100407c6:	40d0      	lsrs	r0, r2
100407c8:	409c      	lsls	r4, r3
100407ca:	0002      	movs	r2, r0
100407cc:	409d      	lsls	r5, r3
100407ce:	4322      	orrs	r2, r4
100407d0:	429f      	cmp	r7, r3
100407d2:	dd00      	ble.n	100407d6 <__aeabi_dadd+0xd6>
100407d4:	e173      	b.n	10040abe <__aeabi_dadd+0x3be>
100407d6:	1bd8      	subs	r0, r3, r7
100407d8:	3001      	adds	r0, #1
100407da:	1a09      	subs	r1, r1, r0
100407dc:	002c      	movs	r4, r5
100407de:	408d      	lsls	r5, r1
100407e0:	40c4      	lsrs	r4, r0
100407e2:	1e6b      	subs	r3, r5, #1
100407e4:	419d      	sbcs	r5, r3
100407e6:	0013      	movs	r3, r2
100407e8:	40c2      	lsrs	r2, r0
100407ea:	408b      	lsls	r3, r1
100407ec:	4325      	orrs	r5, r4
100407ee:	2700      	movs	r7, #0
100407f0:	0014      	movs	r4, r2
100407f2:	431d      	orrs	r5, r3
100407f4:	076b      	lsls	r3, r5, #29
100407f6:	d009      	beq.n	1004080c <__aeabi_dadd+0x10c>
100407f8:	230f      	movs	r3, #15
100407fa:	402b      	ands	r3, r5
100407fc:	2b04      	cmp	r3, #4
100407fe:	d005      	beq.n	1004080c <__aeabi_dadd+0x10c>
10040800:	1d2b      	adds	r3, r5, #4
10040802:	42ab      	cmp	r3, r5
10040804:	41ad      	sbcs	r5, r5
10040806:	426d      	negs	r5, r5
10040808:	1964      	adds	r4, r4, r5
1004080a:	001d      	movs	r5, r3
1004080c:	0223      	lsls	r3, r4, #8
1004080e:	d400      	bmi.n	10040812 <__aeabi_dadd+0x112>
10040810:	e12d      	b.n	10040a6e <__aeabi_dadd+0x36e>
10040812:	4a9d      	ldr	r2, [pc, #628]	@ (10040a88 <__aeabi_dadd+0x388>)
10040814:	3701      	adds	r7, #1
10040816:	4297      	cmp	r7, r2
10040818:	d100      	bne.n	1004081c <__aeabi_dadd+0x11c>
1004081a:	e0d3      	b.n	100409c4 <__aeabi_dadd+0x2c4>
1004081c:	4646      	mov	r6, r8
1004081e:	499b      	ldr	r1, [pc, #620]	@ (10040a8c <__aeabi_dadd+0x38c>)
10040820:	08ed      	lsrs	r5, r5, #3
10040822:	4021      	ands	r1, r4
10040824:	074a      	lsls	r2, r1, #29
10040826:	432a      	orrs	r2, r5
10040828:	057c      	lsls	r4, r7, #21
1004082a:	024d      	lsls	r5, r1, #9
1004082c:	0b2d      	lsrs	r5, r5, #12
1004082e:	0d64      	lsrs	r4, r4, #21
10040830:	0524      	lsls	r4, r4, #20
10040832:	432c      	orrs	r4, r5
10040834:	07f6      	lsls	r6, r6, #31
10040836:	4334      	orrs	r4, r6
10040838:	0010      	movs	r0, r2
1004083a:	0021      	movs	r1, r4
1004083c:	b003      	add	sp, #12
1004083e:	bcf0      	pop	{r4, r5, r6, r7}
10040840:	46bb      	mov	fp, r7
10040842:	46b2      	mov	sl, r6
10040844:	46a9      	mov	r9, r5
10040846:	46a0      	mov	r8, r4
10040848:	bdf0      	pop	{r4, r5, r6, r7, pc}
1004084a:	2a00      	cmp	r2, #0
1004084c:	d100      	bne.n	10040850 <__aeabi_dadd+0x150>
1004084e:	e084      	b.n	1004095a <__aeabi_dadd+0x25a>
10040850:	464a      	mov	r2, r9
10040852:	1bd2      	subs	r2, r2, r7
10040854:	2f00      	cmp	r7, #0
10040856:	d000      	beq.n	1004085a <__aeabi_dadd+0x15a>
10040858:	e16d      	b.n	10040b36 <__aeabi_dadd+0x436>
1004085a:	0025      	movs	r5, r4
1004085c:	4305      	orrs	r5, r0
1004085e:	d100      	bne.n	10040862 <__aeabi_dadd+0x162>
10040860:	e127      	b.n	10040ab2 <__aeabi_dadd+0x3b2>
10040862:	1e56      	subs	r6, r2, #1
10040864:	2a01      	cmp	r2, #1
10040866:	d100      	bne.n	1004086a <__aeabi_dadd+0x16a>
10040868:	e23b      	b.n	10040ce2 <__aeabi_dadd+0x5e2>
1004086a:	4d87      	ldr	r5, [pc, #540]	@ (10040a88 <__aeabi_dadd+0x388>)
1004086c:	42aa      	cmp	r2, r5
1004086e:	d100      	bne.n	10040872 <__aeabi_dadd+0x172>
10040870:	e26a      	b.n	10040d48 <__aeabi_dadd+0x648>
10040872:	2501      	movs	r5, #1
10040874:	2e38      	cmp	r6, #56	@ 0x38
10040876:	dc12      	bgt.n	1004089e <__aeabi_dadd+0x19e>
10040878:	0032      	movs	r2, r6
1004087a:	2a1f      	cmp	r2, #31
1004087c:	dd00      	ble.n	10040880 <__aeabi_dadd+0x180>
1004087e:	e1f8      	b.n	10040c72 <__aeabi_dadd+0x572>
10040880:	2620      	movs	r6, #32
10040882:	0025      	movs	r5, r4
10040884:	1ab6      	subs	r6, r6, r2
10040886:	0007      	movs	r7, r0
10040888:	4653      	mov	r3, sl
1004088a:	40b0      	lsls	r0, r6
1004088c:	40d4      	lsrs	r4, r2
1004088e:	40b5      	lsls	r5, r6
10040890:	40d7      	lsrs	r7, r2
10040892:	1e46      	subs	r6, r0, #1
10040894:	41b0      	sbcs	r0, r6
10040896:	1b1b      	subs	r3, r3, r4
10040898:	469a      	mov	sl, r3
1004089a:	433d      	orrs	r5, r7
1004089c:	4305      	orrs	r5, r0
1004089e:	4662      	mov	r2, ip
100408a0:	1b55      	subs	r5, r2, r5
100408a2:	45ac      	cmp	ip, r5
100408a4:	4192      	sbcs	r2, r2
100408a6:	4653      	mov	r3, sl
100408a8:	4252      	negs	r2, r2
100408aa:	000e      	movs	r6, r1
100408ac:	464f      	mov	r7, r9
100408ae:	4688      	mov	r8, r1
100408b0:	1a9c      	subs	r4, r3, r2
100408b2:	e778      	b.n	100407a6 <__aeabi_dadd+0xa6>
100408b4:	2a00      	cmp	r2, #0
100408b6:	dc00      	bgt.n	100408ba <__aeabi_dadd+0x1ba>
100408b8:	e08e      	b.n	100409d8 <__aeabi_dadd+0x2d8>
100408ba:	4649      	mov	r1, r9
100408bc:	2900      	cmp	r1, #0
100408be:	d175      	bne.n	100409ac <__aeabi_dadd+0x2ac>
100408c0:	4661      	mov	r1, ip
100408c2:	4653      	mov	r3, sl
100408c4:	4319      	orrs	r1, r3
100408c6:	d100      	bne.n	100408ca <__aeabi_dadd+0x1ca>
100408c8:	e0f6      	b.n	10040ab8 <__aeabi_dadd+0x3b8>
100408ca:	1e51      	subs	r1, r2, #1
100408cc:	2a01      	cmp	r2, #1
100408ce:	d100      	bne.n	100408d2 <__aeabi_dadd+0x1d2>
100408d0:	e191      	b.n	10040bf6 <__aeabi_dadd+0x4f6>
100408d2:	4d6d      	ldr	r5, [pc, #436]	@ (10040a88 <__aeabi_dadd+0x388>)
100408d4:	42aa      	cmp	r2, r5
100408d6:	d100      	bne.n	100408da <__aeabi_dadd+0x1da>
100408d8:	e0dc      	b.n	10040a94 <__aeabi_dadd+0x394>
100408da:	2501      	movs	r5, #1
100408dc:	2938      	cmp	r1, #56	@ 0x38
100408de:	dc14      	bgt.n	1004090a <__aeabi_dadd+0x20a>
100408e0:	000a      	movs	r2, r1
100408e2:	2a1f      	cmp	r2, #31
100408e4:	dd00      	ble.n	100408e8 <__aeabi_dadd+0x1e8>
100408e6:	e1a2      	b.n	10040c2e <__aeabi_dadd+0x52e>
100408e8:	2120      	movs	r1, #32
100408ea:	4653      	mov	r3, sl
100408ec:	1a89      	subs	r1, r1, r2
100408ee:	408b      	lsls	r3, r1
100408f0:	001d      	movs	r5, r3
100408f2:	4663      	mov	r3, ip
100408f4:	40d3      	lsrs	r3, r2
100408f6:	431d      	orrs	r5, r3
100408f8:	4663      	mov	r3, ip
100408fa:	408b      	lsls	r3, r1
100408fc:	0019      	movs	r1, r3
100408fe:	1e4b      	subs	r3, r1, #1
10040900:	4199      	sbcs	r1, r3
10040902:	4653      	mov	r3, sl
10040904:	40d3      	lsrs	r3, r2
10040906:	430d      	orrs	r5, r1
10040908:	18e4      	adds	r4, r4, r3
1004090a:	182d      	adds	r5, r5, r0
1004090c:	4285      	cmp	r5, r0
1004090e:	4180      	sbcs	r0, r0
10040910:	4240      	negs	r0, r0
10040912:	1824      	adds	r4, r4, r0
10040914:	0223      	lsls	r3, r4, #8
10040916:	d559      	bpl.n	100409cc <__aeabi_dadd+0x2cc>
10040918:	4b5b      	ldr	r3, [pc, #364]	@ (10040a88 <__aeabi_dadd+0x388>)
1004091a:	3701      	adds	r7, #1
1004091c:	429f      	cmp	r7, r3
1004091e:	d051      	beq.n	100409c4 <__aeabi_dadd+0x2c4>
10040920:	2101      	movs	r1, #1
10040922:	4b5a      	ldr	r3, [pc, #360]	@ (10040a8c <__aeabi_dadd+0x38c>)
10040924:	086a      	lsrs	r2, r5, #1
10040926:	401c      	ands	r4, r3
10040928:	4029      	ands	r1, r5
1004092a:	430a      	orrs	r2, r1
1004092c:	07e5      	lsls	r5, r4, #31
1004092e:	4315      	orrs	r5, r2
10040930:	0864      	lsrs	r4, r4, #1
10040932:	e75f      	b.n	100407f4 <__aeabi_dadd+0xf4>
10040934:	4661      	mov	r1, ip
10040936:	4653      	mov	r3, sl
10040938:	4319      	orrs	r1, r3
1004093a:	d100      	bne.n	1004093e <__aeabi_dadd+0x23e>
1004093c:	e0bc      	b.n	10040ab8 <__aeabi_dadd+0x3b8>
1004093e:	1e51      	subs	r1, r2, #1
10040940:	2a01      	cmp	r2, #1
10040942:	d100      	bne.n	10040946 <__aeabi_dadd+0x246>
10040944:	e164      	b.n	10040c10 <__aeabi_dadd+0x510>
10040946:	4d50      	ldr	r5, [pc, #320]	@ (10040a88 <__aeabi_dadd+0x388>)
10040948:	42aa      	cmp	r2, r5
1004094a:	d100      	bne.n	1004094e <__aeabi_dadd+0x24e>
1004094c:	e16a      	b.n	10040c24 <__aeabi_dadd+0x524>
1004094e:	2501      	movs	r5, #1
10040950:	2938      	cmp	r1, #56	@ 0x38
10040952:	dd00      	ble.n	10040956 <__aeabi_dadd+0x256>
10040954:	e722      	b.n	1004079c <__aeabi_dadd+0x9c>
10040956:	000a      	movs	r2, r1
10040958:	e70e      	b.n	10040778 <__aeabi_dadd+0x78>
1004095a:	4a4d      	ldr	r2, [pc, #308]	@ (10040a90 <__aeabi_dadd+0x390>)
1004095c:	1c7d      	adds	r5, r7, #1
1004095e:	4215      	tst	r5, r2
10040960:	d000      	beq.n	10040964 <__aeabi_dadd+0x264>
10040962:	e0d0      	b.n	10040b06 <__aeabi_dadd+0x406>
10040964:	0025      	movs	r5, r4
10040966:	4662      	mov	r2, ip
10040968:	4653      	mov	r3, sl
1004096a:	4305      	orrs	r5, r0
1004096c:	431a      	orrs	r2, r3
1004096e:	2f00      	cmp	r7, #0
10040970:	d000      	beq.n	10040974 <__aeabi_dadd+0x274>
10040972:	e137      	b.n	10040be4 <__aeabi_dadd+0x4e4>
10040974:	2d00      	cmp	r5, #0
10040976:	d100      	bne.n	1004097a <__aeabi_dadd+0x27a>
10040978:	e1a8      	b.n	10040ccc <__aeabi_dadd+0x5cc>
1004097a:	2a00      	cmp	r2, #0
1004097c:	d100      	bne.n	10040980 <__aeabi_dadd+0x280>
1004097e:	e16a      	b.n	10040c56 <__aeabi_dadd+0x556>
10040980:	4663      	mov	r3, ip
10040982:	1ac5      	subs	r5, r0, r3
10040984:	4653      	mov	r3, sl
10040986:	1ae2      	subs	r2, r4, r3
10040988:	42a8      	cmp	r0, r5
1004098a:	419b      	sbcs	r3, r3
1004098c:	425b      	negs	r3, r3
1004098e:	1ad3      	subs	r3, r2, r3
10040990:	021a      	lsls	r2, r3, #8
10040992:	d400      	bmi.n	10040996 <__aeabi_dadd+0x296>
10040994:	e203      	b.n	10040d9e <__aeabi_dadd+0x69e>
10040996:	4663      	mov	r3, ip
10040998:	1a1d      	subs	r5, r3, r0
1004099a:	45ac      	cmp	ip, r5
1004099c:	4192      	sbcs	r2, r2
1004099e:	4653      	mov	r3, sl
100409a0:	4252      	negs	r2, r2
100409a2:	1b1c      	subs	r4, r3, r4
100409a4:	000e      	movs	r6, r1
100409a6:	4688      	mov	r8, r1
100409a8:	1aa4      	subs	r4, r4, r2
100409aa:	e723      	b.n	100407f4 <__aeabi_dadd+0xf4>
100409ac:	4936      	ldr	r1, [pc, #216]	@ (10040a88 <__aeabi_dadd+0x388>)
100409ae:	428f      	cmp	r7, r1
100409b0:	d070      	beq.n	10040a94 <__aeabi_dadd+0x394>
100409b2:	2501      	movs	r5, #1
100409b4:	2a38      	cmp	r2, #56	@ 0x38
100409b6:	dca8      	bgt.n	1004090a <__aeabi_dadd+0x20a>
100409b8:	2180      	movs	r1, #128	@ 0x80
100409ba:	4653      	mov	r3, sl
100409bc:	0409      	lsls	r1, r1, #16
100409be:	430b      	orrs	r3, r1
100409c0:	469a      	mov	sl, r3
100409c2:	e78e      	b.n	100408e2 <__aeabi_dadd+0x1e2>
100409c4:	003c      	movs	r4, r7
100409c6:	2500      	movs	r5, #0
100409c8:	2200      	movs	r2, #0
100409ca:	e731      	b.n	10040830 <__aeabi_dadd+0x130>
100409cc:	2307      	movs	r3, #7
100409ce:	402b      	ands	r3, r5
100409d0:	2b00      	cmp	r3, #0
100409d2:	d000      	beq.n	100409d6 <__aeabi_dadd+0x2d6>
100409d4:	e710      	b.n	100407f8 <__aeabi_dadd+0xf8>
100409d6:	e093      	b.n	10040b00 <__aeabi_dadd+0x400>
100409d8:	2a00      	cmp	r2, #0
100409da:	d074      	beq.n	10040ac6 <__aeabi_dadd+0x3c6>
100409dc:	464a      	mov	r2, r9
100409de:	1bd2      	subs	r2, r2, r7
100409e0:	2f00      	cmp	r7, #0
100409e2:	d100      	bne.n	100409e6 <__aeabi_dadd+0x2e6>
100409e4:	e0c7      	b.n	10040b76 <__aeabi_dadd+0x476>
100409e6:	4928      	ldr	r1, [pc, #160]	@ (10040a88 <__aeabi_dadd+0x388>)
100409e8:	4589      	cmp	r9, r1
100409ea:	d100      	bne.n	100409ee <__aeabi_dadd+0x2ee>
100409ec:	e185      	b.n	10040cfa <__aeabi_dadd+0x5fa>
100409ee:	2501      	movs	r5, #1
100409f0:	2a38      	cmp	r2, #56	@ 0x38
100409f2:	dc12      	bgt.n	10040a1a <__aeabi_dadd+0x31a>
100409f4:	2180      	movs	r1, #128	@ 0x80
100409f6:	0409      	lsls	r1, r1, #16
100409f8:	430c      	orrs	r4, r1
100409fa:	2a1f      	cmp	r2, #31
100409fc:	dd00      	ble.n	10040a00 <__aeabi_dadd+0x300>
100409fe:	e1ab      	b.n	10040d58 <__aeabi_dadd+0x658>
10040a00:	2120      	movs	r1, #32
10040a02:	0025      	movs	r5, r4
10040a04:	1a89      	subs	r1, r1, r2
10040a06:	0007      	movs	r7, r0
10040a08:	4088      	lsls	r0, r1
10040a0a:	408d      	lsls	r5, r1
10040a0c:	40d7      	lsrs	r7, r2
10040a0e:	1e41      	subs	r1, r0, #1
10040a10:	4188      	sbcs	r0, r1
10040a12:	40d4      	lsrs	r4, r2
10040a14:	433d      	orrs	r5, r7
10040a16:	4305      	orrs	r5, r0
10040a18:	44a2      	add	sl, r4
10040a1a:	4465      	add	r5, ip
10040a1c:	4565      	cmp	r5, ip
10040a1e:	4192      	sbcs	r2, r2
10040a20:	4252      	negs	r2, r2
10040a22:	4452      	add	r2, sl
10040a24:	0014      	movs	r4, r2
10040a26:	464f      	mov	r7, r9
10040a28:	e774      	b.n	10040914 <__aeabi_dadd+0x214>
10040a2a:	0028      	movs	r0, r5
10040a2c:	f001 fc16 	bl	1004225c <__clzsi2>
10040a30:	0003      	movs	r3, r0
10040a32:	3318      	adds	r3, #24
10040a34:	2b1f      	cmp	r3, #31
10040a36:	dc00      	bgt.n	10040a3a <__aeabi_dadd+0x33a>
10040a38:	e6c2      	b.n	100407c0 <__aeabi_dadd+0xc0>
10040a3a:	002a      	movs	r2, r5
10040a3c:	3808      	subs	r0, #8
10040a3e:	4082      	lsls	r2, r0
10040a40:	429f      	cmp	r7, r3
10040a42:	dd00      	ble.n	10040a46 <__aeabi_dadd+0x346>
10040a44:	e0a9      	b.n	10040b9a <__aeabi_dadd+0x49a>
10040a46:	1bdb      	subs	r3, r3, r7
10040a48:	1c58      	adds	r0, r3, #1
10040a4a:	281f      	cmp	r0, #31
10040a4c:	dc00      	bgt.n	10040a50 <__aeabi_dadd+0x350>
10040a4e:	e1ac      	b.n	10040daa <__aeabi_dadd+0x6aa>
10040a50:	0015      	movs	r5, r2
10040a52:	3b1f      	subs	r3, #31
10040a54:	40dd      	lsrs	r5, r3
10040a56:	2820      	cmp	r0, #32
10040a58:	d005      	beq.n	10040a66 <__aeabi_dadd+0x366>
10040a5a:	2340      	movs	r3, #64	@ 0x40
10040a5c:	1a1b      	subs	r3, r3, r0
10040a5e:	409a      	lsls	r2, r3
10040a60:	1e53      	subs	r3, r2, #1
10040a62:	419a      	sbcs	r2, r3
10040a64:	4315      	orrs	r5, r2
10040a66:	2307      	movs	r3, #7
10040a68:	2700      	movs	r7, #0
10040a6a:	402b      	ands	r3, r5
10040a6c:	e7b0      	b.n	100409d0 <__aeabi_dadd+0x2d0>
10040a6e:	08ed      	lsrs	r5, r5, #3
10040a70:	4b05      	ldr	r3, [pc, #20]	@ (10040a88 <__aeabi_dadd+0x388>)
10040a72:	0762      	lsls	r2, r4, #29
10040a74:	432a      	orrs	r2, r5
10040a76:	08e4      	lsrs	r4, r4, #3
10040a78:	429f      	cmp	r7, r3
10040a7a:	d00f      	beq.n	10040a9c <__aeabi_dadd+0x39c>
10040a7c:	0324      	lsls	r4, r4, #12
10040a7e:	0b25      	lsrs	r5, r4, #12
10040a80:	057c      	lsls	r4, r7, #21
10040a82:	0d64      	lsrs	r4, r4, #21
10040a84:	e6d4      	b.n	10040830 <__aeabi_dadd+0x130>
10040a86:	46c0      	nop			@ (mov r8, r8)
10040a88:	000007ff 	.word	0x000007ff
10040a8c:	ff7fffff 	.word	0xff7fffff
10040a90:	000007fe 	.word	0x000007fe
10040a94:	08c0      	lsrs	r0, r0, #3
10040a96:	0762      	lsls	r2, r4, #29
10040a98:	4302      	orrs	r2, r0
10040a9a:	08e4      	lsrs	r4, r4, #3
10040a9c:	0013      	movs	r3, r2
10040a9e:	4323      	orrs	r3, r4
10040aa0:	d100      	bne.n	10040aa4 <__aeabi_dadd+0x3a4>
10040aa2:	e186      	b.n	10040db2 <__aeabi_dadd+0x6b2>
10040aa4:	2580      	movs	r5, #128	@ 0x80
10040aa6:	032d      	lsls	r5, r5, #12
10040aa8:	4325      	orrs	r5, r4
10040aaa:	032d      	lsls	r5, r5, #12
10040aac:	4cc3      	ldr	r4, [pc, #780]	@ (10040dbc <__aeabi_dadd+0x6bc>)
10040aae:	0b2d      	lsrs	r5, r5, #12
10040ab0:	e6be      	b.n	10040830 <__aeabi_dadd+0x130>
10040ab2:	4660      	mov	r0, ip
10040ab4:	4654      	mov	r4, sl
10040ab6:	000e      	movs	r6, r1
10040ab8:	0017      	movs	r7, r2
10040aba:	08c5      	lsrs	r5, r0, #3
10040abc:	e7d8      	b.n	10040a70 <__aeabi_dadd+0x370>
10040abe:	4cc0      	ldr	r4, [pc, #768]	@ (10040dc0 <__aeabi_dadd+0x6c0>)
10040ac0:	1aff      	subs	r7, r7, r3
10040ac2:	4014      	ands	r4, r2
10040ac4:	e696      	b.n	100407f4 <__aeabi_dadd+0xf4>
10040ac6:	4abf      	ldr	r2, [pc, #764]	@ (10040dc4 <__aeabi_dadd+0x6c4>)
10040ac8:	1c79      	adds	r1, r7, #1
10040aca:	4211      	tst	r1, r2
10040acc:	d16b      	bne.n	10040ba6 <__aeabi_dadd+0x4a6>
10040ace:	0022      	movs	r2, r4
10040ad0:	4302      	orrs	r2, r0
10040ad2:	2f00      	cmp	r7, #0
10040ad4:	d000      	beq.n	10040ad8 <__aeabi_dadd+0x3d8>
10040ad6:	e0db      	b.n	10040c90 <__aeabi_dadd+0x590>
10040ad8:	2a00      	cmp	r2, #0
10040ada:	d100      	bne.n	10040ade <__aeabi_dadd+0x3de>
10040adc:	e12d      	b.n	10040d3a <__aeabi_dadd+0x63a>
10040ade:	4662      	mov	r2, ip
10040ae0:	4653      	mov	r3, sl
10040ae2:	431a      	orrs	r2, r3
10040ae4:	d100      	bne.n	10040ae8 <__aeabi_dadd+0x3e8>
10040ae6:	e0b6      	b.n	10040c56 <__aeabi_dadd+0x556>
10040ae8:	4663      	mov	r3, ip
10040aea:	18c5      	adds	r5, r0, r3
10040aec:	4285      	cmp	r5, r0
10040aee:	4180      	sbcs	r0, r0
10040af0:	4454      	add	r4, sl
10040af2:	4240      	negs	r0, r0
10040af4:	1824      	adds	r4, r4, r0
10040af6:	0223      	lsls	r3, r4, #8
10040af8:	d502      	bpl.n	10040b00 <__aeabi_dadd+0x400>
10040afa:	000f      	movs	r7, r1
10040afc:	4bb0      	ldr	r3, [pc, #704]	@ (10040dc0 <__aeabi_dadd+0x6c0>)
10040afe:	401c      	ands	r4, r3
10040b00:	003a      	movs	r2, r7
10040b02:	0028      	movs	r0, r5
10040b04:	e7d8      	b.n	10040ab8 <__aeabi_dadd+0x3b8>
10040b06:	4662      	mov	r2, ip
10040b08:	1a85      	subs	r5, r0, r2
10040b0a:	42a8      	cmp	r0, r5
10040b0c:	4192      	sbcs	r2, r2
10040b0e:	4653      	mov	r3, sl
10040b10:	4252      	negs	r2, r2
10040b12:	4691      	mov	r9, r2
10040b14:	1ae3      	subs	r3, r4, r3
10040b16:	001a      	movs	r2, r3
10040b18:	464b      	mov	r3, r9
10040b1a:	1ad2      	subs	r2, r2, r3
10040b1c:	0013      	movs	r3, r2
10040b1e:	4691      	mov	r9, r2
10040b20:	021a      	lsls	r2, r3, #8
10040b22:	d454      	bmi.n	10040bce <__aeabi_dadd+0x4ce>
10040b24:	464a      	mov	r2, r9
10040b26:	464c      	mov	r4, r9
10040b28:	432a      	orrs	r2, r5
10040b2a:	d000      	beq.n	10040b2e <__aeabi_dadd+0x42e>
10040b2c:	e640      	b.n	100407b0 <__aeabi_dadd+0xb0>
10040b2e:	2600      	movs	r6, #0
10040b30:	2400      	movs	r4, #0
10040b32:	2500      	movs	r5, #0
10040b34:	e67c      	b.n	10040830 <__aeabi_dadd+0x130>
10040b36:	4da1      	ldr	r5, [pc, #644]	@ (10040dbc <__aeabi_dadd+0x6bc>)
10040b38:	45a9      	cmp	r9, r5
10040b3a:	d100      	bne.n	10040b3e <__aeabi_dadd+0x43e>
10040b3c:	e090      	b.n	10040c60 <__aeabi_dadd+0x560>
10040b3e:	2501      	movs	r5, #1
10040b40:	2a38      	cmp	r2, #56	@ 0x38
10040b42:	dd00      	ble.n	10040b46 <__aeabi_dadd+0x446>
10040b44:	e6ab      	b.n	1004089e <__aeabi_dadd+0x19e>
10040b46:	2580      	movs	r5, #128	@ 0x80
10040b48:	042d      	lsls	r5, r5, #16
10040b4a:	432c      	orrs	r4, r5
10040b4c:	e695      	b.n	1004087a <__aeabi_dadd+0x17a>
10040b4e:	0011      	movs	r1, r2
10040b50:	4655      	mov	r5, sl
10040b52:	3920      	subs	r1, #32
10040b54:	40cd      	lsrs	r5, r1
10040b56:	46a9      	mov	r9, r5
10040b58:	2a20      	cmp	r2, #32
10040b5a:	d006      	beq.n	10040b6a <__aeabi_dadd+0x46a>
10040b5c:	2140      	movs	r1, #64	@ 0x40
10040b5e:	4653      	mov	r3, sl
10040b60:	1a8a      	subs	r2, r1, r2
10040b62:	4093      	lsls	r3, r2
10040b64:	4662      	mov	r2, ip
10040b66:	431a      	orrs	r2, r3
10040b68:	4694      	mov	ip, r2
10040b6a:	4665      	mov	r5, ip
10040b6c:	1e6b      	subs	r3, r5, #1
10040b6e:	419d      	sbcs	r5, r3
10040b70:	464b      	mov	r3, r9
10040b72:	431d      	orrs	r5, r3
10040b74:	e612      	b.n	1004079c <__aeabi_dadd+0x9c>
10040b76:	0021      	movs	r1, r4
10040b78:	4301      	orrs	r1, r0
10040b7a:	d100      	bne.n	10040b7e <__aeabi_dadd+0x47e>
10040b7c:	e0c4      	b.n	10040d08 <__aeabi_dadd+0x608>
10040b7e:	1e51      	subs	r1, r2, #1
10040b80:	2a01      	cmp	r2, #1
10040b82:	d100      	bne.n	10040b86 <__aeabi_dadd+0x486>
10040b84:	e0fb      	b.n	10040d7e <__aeabi_dadd+0x67e>
10040b86:	4d8d      	ldr	r5, [pc, #564]	@ (10040dbc <__aeabi_dadd+0x6bc>)
10040b88:	42aa      	cmp	r2, r5
10040b8a:	d100      	bne.n	10040b8e <__aeabi_dadd+0x48e>
10040b8c:	e0b5      	b.n	10040cfa <__aeabi_dadd+0x5fa>
10040b8e:	2501      	movs	r5, #1
10040b90:	2938      	cmp	r1, #56	@ 0x38
10040b92:	dd00      	ble.n	10040b96 <__aeabi_dadd+0x496>
10040b94:	e741      	b.n	10040a1a <__aeabi_dadd+0x31a>
10040b96:	000a      	movs	r2, r1
10040b98:	e72f      	b.n	100409fa <__aeabi_dadd+0x2fa>
10040b9a:	4c89      	ldr	r4, [pc, #548]	@ (10040dc0 <__aeabi_dadd+0x6c0>)
10040b9c:	1aff      	subs	r7, r7, r3
10040b9e:	4014      	ands	r4, r2
10040ba0:	0762      	lsls	r2, r4, #29
10040ba2:	08e4      	lsrs	r4, r4, #3
10040ba4:	e76a      	b.n	10040a7c <__aeabi_dadd+0x37c>
10040ba6:	4a85      	ldr	r2, [pc, #532]	@ (10040dbc <__aeabi_dadd+0x6bc>)
10040ba8:	4291      	cmp	r1, r2
10040baa:	d100      	bne.n	10040bae <__aeabi_dadd+0x4ae>
10040bac:	e0e3      	b.n	10040d76 <__aeabi_dadd+0x676>
10040bae:	4663      	mov	r3, ip
10040bb0:	18c2      	adds	r2, r0, r3
10040bb2:	4282      	cmp	r2, r0
10040bb4:	4180      	sbcs	r0, r0
10040bb6:	0023      	movs	r3, r4
10040bb8:	4240      	negs	r0, r0
10040bba:	4453      	add	r3, sl
10040bbc:	181b      	adds	r3, r3, r0
10040bbe:	07dd      	lsls	r5, r3, #31
10040bc0:	085c      	lsrs	r4, r3, #1
10040bc2:	2307      	movs	r3, #7
10040bc4:	0852      	lsrs	r2, r2, #1
10040bc6:	4315      	orrs	r5, r2
10040bc8:	000f      	movs	r7, r1
10040bca:	402b      	ands	r3, r5
10040bcc:	e700      	b.n	100409d0 <__aeabi_dadd+0x2d0>
10040bce:	4663      	mov	r3, ip
10040bd0:	1a1d      	subs	r5, r3, r0
10040bd2:	45ac      	cmp	ip, r5
10040bd4:	4192      	sbcs	r2, r2
10040bd6:	4653      	mov	r3, sl
10040bd8:	4252      	negs	r2, r2
10040bda:	1b1c      	subs	r4, r3, r4
10040bdc:	000e      	movs	r6, r1
10040bde:	4688      	mov	r8, r1
10040be0:	1aa4      	subs	r4, r4, r2
10040be2:	e5e5      	b.n	100407b0 <__aeabi_dadd+0xb0>
10040be4:	2d00      	cmp	r5, #0
10040be6:	d000      	beq.n	10040bea <__aeabi_dadd+0x4ea>
10040be8:	e091      	b.n	10040d0e <__aeabi_dadd+0x60e>
10040bea:	2a00      	cmp	r2, #0
10040bec:	d138      	bne.n	10040c60 <__aeabi_dadd+0x560>
10040bee:	2480      	movs	r4, #128	@ 0x80
10040bf0:	2600      	movs	r6, #0
10040bf2:	0324      	lsls	r4, r4, #12
10040bf4:	e756      	b.n	10040aa4 <__aeabi_dadd+0x3a4>
10040bf6:	4663      	mov	r3, ip
10040bf8:	18c5      	adds	r5, r0, r3
10040bfa:	4285      	cmp	r5, r0
10040bfc:	4180      	sbcs	r0, r0
10040bfe:	4454      	add	r4, sl
10040c00:	4240      	negs	r0, r0
10040c02:	1824      	adds	r4, r4, r0
10040c04:	2701      	movs	r7, #1
10040c06:	0223      	lsls	r3, r4, #8
10040c08:	d400      	bmi.n	10040c0c <__aeabi_dadd+0x50c>
10040c0a:	e6df      	b.n	100409cc <__aeabi_dadd+0x2cc>
10040c0c:	2702      	movs	r7, #2
10040c0e:	e687      	b.n	10040920 <__aeabi_dadd+0x220>
10040c10:	4663      	mov	r3, ip
10040c12:	1ac5      	subs	r5, r0, r3
10040c14:	42a8      	cmp	r0, r5
10040c16:	4180      	sbcs	r0, r0
10040c18:	4653      	mov	r3, sl
10040c1a:	4240      	negs	r0, r0
10040c1c:	1ae4      	subs	r4, r4, r3
10040c1e:	2701      	movs	r7, #1
10040c20:	1a24      	subs	r4, r4, r0
10040c22:	e5c0      	b.n	100407a6 <__aeabi_dadd+0xa6>
10040c24:	0762      	lsls	r2, r4, #29
10040c26:	08c0      	lsrs	r0, r0, #3
10040c28:	4302      	orrs	r2, r0
10040c2a:	08e4      	lsrs	r4, r4, #3
10040c2c:	e736      	b.n	10040a9c <__aeabi_dadd+0x39c>
10040c2e:	0011      	movs	r1, r2
10040c30:	4653      	mov	r3, sl
10040c32:	3920      	subs	r1, #32
10040c34:	40cb      	lsrs	r3, r1
10040c36:	4699      	mov	r9, r3
10040c38:	2a20      	cmp	r2, #32
10040c3a:	d006      	beq.n	10040c4a <__aeabi_dadd+0x54a>
10040c3c:	2140      	movs	r1, #64	@ 0x40
10040c3e:	4653      	mov	r3, sl
10040c40:	1a8a      	subs	r2, r1, r2
10040c42:	4093      	lsls	r3, r2
10040c44:	4662      	mov	r2, ip
10040c46:	431a      	orrs	r2, r3
10040c48:	4694      	mov	ip, r2
10040c4a:	4665      	mov	r5, ip
10040c4c:	1e6b      	subs	r3, r5, #1
10040c4e:	419d      	sbcs	r5, r3
10040c50:	464b      	mov	r3, r9
10040c52:	431d      	orrs	r5, r3
10040c54:	e659      	b.n	1004090a <__aeabi_dadd+0x20a>
10040c56:	0762      	lsls	r2, r4, #29
10040c58:	08c0      	lsrs	r0, r0, #3
10040c5a:	4302      	orrs	r2, r0
10040c5c:	08e4      	lsrs	r4, r4, #3
10040c5e:	e70d      	b.n	10040a7c <__aeabi_dadd+0x37c>
10040c60:	4653      	mov	r3, sl
10040c62:	075a      	lsls	r2, r3, #29
10040c64:	4663      	mov	r3, ip
10040c66:	08d8      	lsrs	r0, r3, #3
10040c68:	4653      	mov	r3, sl
10040c6a:	000e      	movs	r6, r1
10040c6c:	4302      	orrs	r2, r0
10040c6e:	08dc      	lsrs	r4, r3, #3
10040c70:	e714      	b.n	10040a9c <__aeabi_dadd+0x39c>
10040c72:	0015      	movs	r5, r2
10040c74:	0026      	movs	r6, r4
10040c76:	3d20      	subs	r5, #32
10040c78:	40ee      	lsrs	r6, r5
10040c7a:	2a20      	cmp	r2, #32
10040c7c:	d003      	beq.n	10040c86 <__aeabi_dadd+0x586>
10040c7e:	2540      	movs	r5, #64	@ 0x40
10040c80:	1aaa      	subs	r2, r5, r2
10040c82:	4094      	lsls	r4, r2
10040c84:	4320      	orrs	r0, r4
10040c86:	1e42      	subs	r2, r0, #1
10040c88:	4190      	sbcs	r0, r2
10040c8a:	0005      	movs	r5, r0
10040c8c:	4335      	orrs	r5, r6
10040c8e:	e606      	b.n	1004089e <__aeabi_dadd+0x19e>
10040c90:	2a00      	cmp	r2, #0
10040c92:	d07c      	beq.n	10040d8e <__aeabi_dadd+0x68e>
10040c94:	4662      	mov	r2, ip
10040c96:	4653      	mov	r3, sl
10040c98:	08c0      	lsrs	r0, r0, #3
10040c9a:	431a      	orrs	r2, r3
10040c9c:	d100      	bne.n	10040ca0 <__aeabi_dadd+0x5a0>
10040c9e:	e6fa      	b.n	10040a96 <__aeabi_dadd+0x396>
10040ca0:	0762      	lsls	r2, r4, #29
10040ca2:	4310      	orrs	r0, r2
10040ca4:	2280      	movs	r2, #128	@ 0x80
10040ca6:	08e4      	lsrs	r4, r4, #3
10040ca8:	0312      	lsls	r2, r2, #12
10040caa:	4214      	tst	r4, r2
10040cac:	d008      	beq.n	10040cc0 <__aeabi_dadd+0x5c0>
10040cae:	08d9      	lsrs	r1, r3, #3
10040cb0:	4211      	tst	r1, r2
10040cb2:	d105      	bne.n	10040cc0 <__aeabi_dadd+0x5c0>
10040cb4:	4663      	mov	r3, ip
10040cb6:	08d8      	lsrs	r0, r3, #3
10040cb8:	4653      	mov	r3, sl
10040cba:	000c      	movs	r4, r1
10040cbc:	075b      	lsls	r3, r3, #29
10040cbe:	4318      	orrs	r0, r3
10040cc0:	0f42      	lsrs	r2, r0, #29
10040cc2:	00c0      	lsls	r0, r0, #3
10040cc4:	08c0      	lsrs	r0, r0, #3
10040cc6:	0752      	lsls	r2, r2, #29
10040cc8:	4302      	orrs	r2, r0
10040cca:	e6e7      	b.n	10040a9c <__aeabi_dadd+0x39c>
10040ccc:	2a00      	cmp	r2, #0
10040cce:	d100      	bne.n	10040cd2 <__aeabi_dadd+0x5d2>
10040cd0:	e72d      	b.n	10040b2e <__aeabi_dadd+0x42e>
10040cd2:	4663      	mov	r3, ip
10040cd4:	08d8      	lsrs	r0, r3, #3
10040cd6:	4653      	mov	r3, sl
10040cd8:	075a      	lsls	r2, r3, #29
10040cda:	000e      	movs	r6, r1
10040cdc:	4302      	orrs	r2, r0
10040cde:	08dc      	lsrs	r4, r3, #3
10040ce0:	e6cc      	b.n	10040a7c <__aeabi_dadd+0x37c>
10040ce2:	4663      	mov	r3, ip
10040ce4:	1a1d      	subs	r5, r3, r0
10040ce6:	45ac      	cmp	ip, r5
10040ce8:	4192      	sbcs	r2, r2
10040cea:	4653      	mov	r3, sl
10040cec:	4252      	negs	r2, r2
10040cee:	1b1c      	subs	r4, r3, r4
10040cf0:	000e      	movs	r6, r1
10040cf2:	4688      	mov	r8, r1
10040cf4:	1aa4      	subs	r4, r4, r2
10040cf6:	3701      	adds	r7, #1
10040cf8:	e555      	b.n	100407a6 <__aeabi_dadd+0xa6>
10040cfa:	4663      	mov	r3, ip
10040cfc:	08d9      	lsrs	r1, r3, #3
10040cfe:	4653      	mov	r3, sl
10040d00:	075a      	lsls	r2, r3, #29
10040d02:	430a      	orrs	r2, r1
10040d04:	08dc      	lsrs	r4, r3, #3
10040d06:	e6c9      	b.n	10040a9c <__aeabi_dadd+0x39c>
10040d08:	4660      	mov	r0, ip
10040d0a:	4654      	mov	r4, sl
10040d0c:	e6d4      	b.n	10040ab8 <__aeabi_dadd+0x3b8>
10040d0e:	08c0      	lsrs	r0, r0, #3
10040d10:	2a00      	cmp	r2, #0
10040d12:	d100      	bne.n	10040d16 <__aeabi_dadd+0x616>
10040d14:	e6bf      	b.n	10040a96 <__aeabi_dadd+0x396>
10040d16:	0762      	lsls	r2, r4, #29
10040d18:	4310      	orrs	r0, r2
10040d1a:	2280      	movs	r2, #128	@ 0x80
10040d1c:	08e4      	lsrs	r4, r4, #3
10040d1e:	0312      	lsls	r2, r2, #12
10040d20:	4214      	tst	r4, r2
10040d22:	d0cd      	beq.n	10040cc0 <__aeabi_dadd+0x5c0>
10040d24:	08dd      	lsrs	r5, r3, #3
10040d26:	4215      	tst	r5, r2
10040d28:	d1ca      	bne.n	10040cc0 <__aeabi_dadd+0x5c0>
10040d2a:	4663      	mov	r3, ip
10040d2c:	08d8      	lsrs	r0, r3, #3
10040d2e:	4653      	mov	r3, sl
10040d30:	075b      	lsls	r3, r3, #29
10040d32:	000e      	movs	r6, r1
10040d34:	002c      	movs	r4, r5
10040d36:	4318      	orrs	r0, r3
10040d38:	e7c2      	b.n	10040cc0 <__aeabi_dadd+0x5c0>
10040d3a:	4663      	mov	r3, ip
10040d3c:	08d9      	lsrs	r1, r3, #3
10040d3e:	4653      	mov	r3, sl
10040d40:	075a      	lsls	r2, r3, #29
10040d42:	430a      	orrs	r2, r1
10040d44:	08dc      	lsrs	r4, r3, #3
10040d46:	e699      	b.n	10040a7c <__aeabi_dadd+0x37c>
10040d48:	4663      	mov	r3, ip
10040d4a:	08d8      	lsrs	r0, r3, #3
10040d4c:	4653      	mov	r3, sl
10040d4e:	075a      	lsls	r2, r3, #29
10040d50:	000e      	movs	r6, r1
10040d52:	4302      	orrs	r2, r0
10040d54:	08dc      	lsrs	r4, r3, #3
10040d56:	e6a1      	b.n	10040a9c <__aeabi_dadd+0x39c>
10040d58:	0011      	movs	r1, r2
10040d5a:	0027      	movs	r7, r4
10040d5c:	3920      	subs	r1, #32
10040d5e:	40cf      	lsrs	r7, r1
10040d60:	2a20      	cmp	r2, #32
10040d62:	d003      	beq.n	10040d6c <__aeabi_dadd+0x66c>
10040d64:	2140      	movs	r1, #64	@ 0x40
10040d66:	1a8a      	subs	r2, r1, r2
10040d68:	4094      	lsls	r4, r2
10040d6a:	4320      	orrs	r0, r4
10040d6c:	1e42      	subs	r2, r0, #1
10040d6e:	4190      	sbcs	r0, r2
10040d70:	0005      	movs	r5, r0
10040d72:	433d      	orrs	r5, r7
10040d74:	e651      	b.n	10040a1a <__aeabi_dadd+0x31a>
10040d76:	000c      	movs	r4, r1
10040d78:	2500      	movs	r5, #0
10040d7a:	2200      	movs	r2, #0
10040d7c:	e558      	b.n	10040830 <__aeabi_dadd+0x130>
10040d7e:	4460      	add	r0, ip
10040d80:	4560      	cmp	r0, ip
10040d82:	4192      	sbcs	r2, r2
10040d84:	4454      	add	r4, sl
10040d86:	4252      	negs	r2, r2
10040d88:	0005      	movs	r5, r0
10040d8a:	18a4      	adds	r4, r4, r2
10040d8c:	e73a      	b.n	10040c04 <__aeabi_dadd+0x504>
10040d8e:	4653      	mov	r3, sl
10040d90:	075a      	lsls	r2, r3, #29
10040d92:	4663      	mov	r3, ip
10040d94:	08d9      	lsrs	r1, r3, #3
10040d96:	4653      	mov	r3, sl
10040d98:	430a      	orrs	r2, r1
10040d9a:	08dc      	lsrs	r4, r3, #3
10040d9c:	e67e      	b.n	10040a9c <__aeabi_dadd+0x39c>
10040d9e:	001a      	movs	r2, r3
10040da0:	001c      	movs	r4, r3
10040da2:	432a      	orrs	r2, r5
10040da4:	d000      	beq.n	10040da8 <__aeabi_dadd+0x6a8>
10040da6:	e6ab      	b.n	10040b00 <__aeabi_dadd+0x400>
10040da8:	e6c1      	b.n	10040b2e <__aeabi_dadd+0x42e>
10040daa:	2120      	movs	r1, #32
10040dac:	2500      	movs	r5, #0
10040dae:	1a09      	subs	r1, r1, r0
10040db0:	e519      	b.n	100407e6 <__aeabi_dadd+0xe6>
10040db2:	2200      	movs	r2, #0
10040db4:	2500      	movs	r5, #0
10040db6:	4c01      	ldr	r4, [pc, #4]	@ (10040dbc <__aeabi_dadd+0x6bc>)
10040db8:	e53a      	b.n	10040830 <__aeabi_dadd+0x130>
10040dba:	46c0      	nop			@ (mov r8, r8)
10040dbc:	000007ff 	.word	0x000007ff
10040dc0:	ff7fffff 	.word	0xff7fffff
10040dc4:	000007fe 	.word	0x000007fe

10040dc8 <__aeabi_ddiv>:
10040dc8:	b5f0      	push	{r4, r5, r6, r7, lr}
10040dca:	46de      	mov	lr, fp
10040dcc:	4645      	mov	r5, r8
10040dce:	4657      	mov	r7, sl
10040dd0:	464e      	mov	r6, r9
10040dd2:	b5e0      	push	{r5, r6, r7, lr}
10040dd4:	b087      	sub	sp, #28
10040dd6:	9200      	str	r2, [sp, #0]
10040dd8:	9301      	str	r3, [sp, #4]
10040dda:	030b      	lsls	r3, r1, #12
10040ddc:	0b1b      	lsrs	r3, r3, #12
10040dde:	469b      	mov	fp, r3
10040de0:	0fca      	lsrs	r2, r1, #31
10040de2:	004b      	lsls	r3, r1, #1
10040de4:	0004      	movs	r4, r0
10040de6:	4680      	mov	r8, r0
10040de8:	0d5b      	lsrs	r3, r3, #21
10040dea:	9202      	str	r2, [sp, #8]
10040dec:	d100      	bne.n	10040df0 <__aeabi_ddiv+0x28>
10040dee:	e16a      	b.n	100410c6 <__aeabi_ddiv+0x2fe>
10040df0:	4ad4      	ldr	r2, [pc, #848]	@ (10041144 <__aeabi_ddiv+0x37c>)
10040df2:	4293      	cmp	r3, r2
10040df4:	d100      	bne.n	10040df8 <__aeabi_ddiv+0x30>
10040df6:	e18c      	b.n	10041112 <__aeabi_ddiv+0x34a>
10040df8:	4659      	mov	r1, fp
10040dfa:	0f42      	lsrs	r2, r0, #29
10040dfc:	00c9      	lsls	r1, r1, #3
10040dfe:	430a      	orrs	r2, r1
10040e00:	2180      	movs	r1, #128	@ 0x80
10040e02:	0409      	lsls	r1, r1, #16
10040e04:	4311      	orrs	r1, r2
10040e06:	00c2      	lsls	r2, r0, #3
10040e08:	4690      	mov	r8, r2
10040e0a:	4acf      	ldr	r2, [pc, #828]	@ (10041148 <__aeabi_ddiv+0x380>)
10040e0c:	4689      	mov	r9, r1
10040e0e:	4692      	mov	sl, r2
10040e10:	449a      	add	sl, r3
10040e12:	2300      	movs	r3, #0
10040e14:	2400      	movs	r4, #0
10040e16:	9303      	str	r3, [sp, #12]
10040e18:	9e00      	ldr	r6, [sp, #0]
10040e1a:	9f01      	ldr	r7, [sp, #4]
10040e1c:	033b      	lsls	r3, r7, #12
10040e1e:	0b1b      	lsrs	r3, r3, #12
10040e20:	469b      	mov	fp, r3
10040e22:	007b      	lsls	r3, r7, #1
10040e24:	0030      	movs	r0, r6
10040e26:	0d5b      	lsrs	r3, r3, #21
10040e28:	0ffd      	lsrs	r5, r7, #31
10040e2a:	2b00      	cmp	r3, #0
10040e2c:	d100      	bne.n	10040e30 <__aeabi_ddiv+0x68>
10040e2e:	e128      	b.n	10041082 <__aeabi_ddiv+0x2ba>
10040e30:	4ac4      	ldr	r2, [pc, #784]	@ (10041144 <__aeabi_ddiv+0x37c>)
10040e32:	4293      	cmp	r3, r2
10040e34:	d100      	bne.n	10040e38 <__aeabi_ddiv+0x70>
10040e36:	e177      	b.n	10041128 <__aeabi_ddiv+0x360>
10040e38:	4659      	mov	r1, fp
10040e3a:	0f72      	lsrs	r2, r6, #29
10040e3c:	00c9      	lsls	r1, r1, #3
10040e3e:	430a      	orrs	r2, r1
10040e40:	2180      	movs	r1, #128	@ 0x80
10040e42:	0409      	lsls	r1, r1, #16
10040e44:	4311      	orrs	r1, r2
10040e46:	468b      	mov	fp, r1
10040e48:	49bf      	ldr	r1, [pc, #764]	@ (10041148 <__aeabi_ddiv+0x380>)
10040e4a:	00f2      	lsls	r2, r6, #3
10040e4c:	468c      	mov	ip, r1
10040e4e:	4651      	mov	r1, sl
10040e50:	4463      	add	r3, ip
10040e52:	1acb      	subs	r3, r1, r3
10040e54:	469a      	mov	sl, r3
10040e56:	2300      	movs	r3, #0
10040e58:	9e02      	ldr	r6, [sp, #8]
10040e5a:	406e      	eors	r6, r5
10040e5c:	2c0f      	cmp	r4, #15
10040e5e:	d827      	bhi.n	10040eb0 <__aeabi_ddiv+0xe8>
10040e60:	49ba      	ldr	r1, [pc, #744]	@ (1004114c <__aeabi_ddiv+0x384>)
10040e62:	00a4      	lsls	r4, r4, #2
10040e64:	5909      	ldr	r1, [r1, r4]
10040e66:	468f      	mov	pc, r1
10040e68:	46cb      	mov	fp, r9
10040e6a:	4642      	mov	r2, r8
10040e6c:	9e02      	ldr	r6, [sp, #8]
10040e6e:	9b03      	ldr	r3, [sp, #12]
10040e70:	2b02      	cmp	r3, #2
10040e72:	d016      	beq.n	10040ea2 <__aeabi_ddiv+0xda>
10040e74:	2b03      	cmp	r3, #3
10040e76:	d100      	bne.n	10040e7a <__aeabi_ddiv+0xb2>
10040e78:	e2a6      	b.n	100413c8 <__aeabi_ddiv+0x600>
10040e7a:	2b01      	cmp	r3, #1
10040e7c:	d000      	beq.n	10040e80 <__aeabi_ddiv+0xb8>
10040e7e:	e0df      	b.n	10041040 <__aeabi_ddiv+0x278>
10040e80:	2200      	movs	r2, #0
10040e82:	2300      	movs	r3, #0
10040e84:	2400      	movs	r4, #0
10040e86:	4690      	mov	r8, r2
10040e88:	051b      	lsls	r3, r3, #20
10040e8a:	4323      	orrs	r3, r4
10040e8c:	07f6      	lsls	r6, r6, #31
10040e8e:	4333      	orrs	r3, r6
10040e90:	4640      	mov	r0, r8
10040e92:	0019      	movs	r1, r3
10040e94:	b007      	add	sp, #28
10040e96:	bcf0      	pop	{r4, r5, r6, r7}
10040e98:	46bb      	mov	fp, r7
10040e9a:	46b2      	mov	sl, r6
10040e9c:	46a9      	mov	r9, r5
10040e9e:	46a0      	mov	r8, r4
10040ea0:	bdf0      	pop	{r4, r5, r6, r7, pc}
10040ea2:	2200      	movs	r2, #0
10040ea4:	2400      	movs	r4, #0
10040ea6:	4690      	mov	r8, r2
10040ea8:	4ba6      	ldr	r3, [pc, #664]	@ (10041144 <__aeabi_ddiv+0x37c>)
10040eaa:	e7ed      	b.n	10040e88 <__aeabi_ddiv+0xc0>
10040eac:	002e      	movs	r6, r5
10040eae:	e7df      	b.n	10040e70 <__aeabi_ddiv+0xa8>
10040eb0:	45cb      	cmp	fp, r9
10040eb2:	d200      	bcs.n	10040eb6 <__aeabi_ddiv+0xee>
10040eb4:	e1d4      	b.n	10041260 <__aeabi_ddiv+0x498>
10040eb6:	d100      	bne.n	10040eba <__aeabi_ddiv+0xf2>
10040eb8:	e1cf      	b.n	1004125a <__aeabi_ddiv+0x492>
10040eba:	2301      	movs	r3, #1
10040ebc:	425b      	negs	r3, r3
10040ebe:	469c      	mov	ip, r3
10040ec0:	4644      	mov	r4, r8
10040ec2:	4648      	mov	r0, r9
10040ec4:	2700      	movs	r7, #0
10040ec6:	44e2      	add	sl, ip
10040ec8:	465b      	mov	r3, fp
10040eca:	0e15      	lsrs	r5, r2, #24
10040ecc:	021b      	lsls	r3, r3, #8
10040ece:	431d      	orrs	r5, r3
10040ed0:	0c19      	lsrs	r1, r3, #16
10040ed2:	042b      	lsls	r3, r5, #16
10040ed4:	0212      	lsls	r2, r2, #8
10040ed6:	9500      	str	r5, [sp, #0]
10040ed8:	0c1d      	lsrs	r5, r3, #16
10040eda:	4691      	mov	r9, r2
10040edc:	9102      	str	r1, [sp, #8]
10040ede:	9503      	str	r5, [sp, #12]
10040ee0:	f7ff f996 	bl	10040210 <__aeabi_uidivmod>
10040ee4:	0002      	movs	r2, r0
10040ee6:	436a      	muls	r2, r5
10040ee8:	040b      	lsls	r3, r1, #16
10040eea:	0c21      	lsrs	r1, r4, #16
10040eec:	4680      	mov	r8, r0
10040eee:	4319      	orrs	r1, r3
10040ef0:	428a      	cmp	r2, r1
10040ef2:	d909      	bls.n	10040f08 <__aeabi_ddiv+0x140>
10040ef4:	9d00      	ldr	r5, [sp, #0]
10040ef6:	2301      	movs	r3, #1
10040ef8:	46ac      	mov	ip, r5
10040efa:	425b      	negs	r3, r3
10040efc:	4461      	add	r1, ip
10040efe:	469c      	mov	ip, r3
10040f00:	44e0      	add	r8, ip
10040f02:	428d      	cmp	r5, r1
10040f04:	d800      	bhi.n	10040f08 <__aeabi_ddiv+0x140>
10040f06:	e1fb      	b.n	10041300 <__aeabi_ddiv+0x538>
10040f08:	1a88      	subs	r0, r1, r2
10040f0a:	9902      	ldr	r1, [sp, #8]
10040f0c:	f7ff f980 	bl	10040210 <__aeabi_uidivmod>
10040f10:	9a03      	ldr	r2, [sp, #12]
10040f12:	0424      	lsls	r4, r4, #16
10040f14:	4342      	muls	r2, r0
10040f16:	0409      	lsls	r1, r1, #16
10040f18:	0c24      	lsrs	r4, r4, #16
10040f1a:	0003      	movs	r3, r0
10040f1c:	430c      	orrs	r4, r1
10040f1e:	42a2      	cmp	r2, r4
10040f20:	d906      	bls.n	10040f30 <__aeabi_ddiv+0x168>
10040f22:	9900      	ldr	r1, [sp, #0]
10040f24:	3b01      	subs	r3, #1
10040f26:	468c      	mov	ip, r1
10040f28:	4464      	add	r4, ip
10040f2a:	42a1      	cmp	r1, r4
10040f2c:	d800      	bhi.n	10040f30 <__aeabi_ddiv+0x168>
10040f2e:	e1e1      	b.n	100412f4 <__aeabi_ddiv+0x52c>
10040f30:	1aa0      	subs	r0, r4, r2
10040f32:	4642      	mov	r2, r8
10040f34:	0412      	lsls	r2, r2, #16
10040f36:	431a      	orrs	r2, r3
10040f38:	4693      	mov	fp, r2
10040f3a:	464b      	mov	r3, r9
10040f3c:	4659      	mov	r1, fp
10040f3e:	0c1b      	lsrs	r3, r3, #16
10040f40:	001d      	movs	r5, r3
10040f42:	9304      	str	r3, [sp, #16]
10040f44:	040b      	lsls	r3, r1, #16
10040f46:	4649      	mov	r1, r9
10040f48:	0409      	lsls	r1, r1, #16
10040f4a:	0c09      	lsrs	r1, r1, #16
10040f4c:	000c      	movs	r4, r1
10040f4e:	0c1b      	lsrs	r3, r3, #16
10040f50:	435c      	muls	r4, r3
10040f52:	0c12      	lsrs	r2, r2, #16
10040f54:	436b      	muls	r3, r5
10040f56:	4688      	mov	r8, r1
10040f58:	4351      	muls	r1, r2
10040f5a:	436a      	muls	r2, r5
10040f5c:	0c25      	lsrs	r5, r4, #16
10040f5e:	46ac      	mov	ip, r5
10040f60:	185b      	adds	r3, r3, r1
10040f62:	4463      	add	r3, ip
10040f64:	4299      	cmp	r1, r3
10040f66:	d903      	bls.n	10040f70 <__aeabi_ddiv+0x1a8>
10040f68:	2180      	movs	r1, #128	@ 0x80
10040f6a:	0249      	lsls	r1, r1, #9
10040f6c:	468c      	mov	ip, r1
10040f6e:	4462      	add	r2, ip
10040f70:	0c19      	lsrs	r1, r3, #16
10040f72:	0424      	lsls	r4, r4, #16
10040f74:	041b      	lsls	r3, r3, #16
10040f76:	0c24      	lsrs	r4, r4, #16
10040f78:	188a      	adds	r2, r1, r2
10040f7a:	191c      	adds	r4, r3, r4
10040f7c:	4290      	cmp	r0, r2
10040f7e:	d302      	bcc.n	10040f86 <__aeabi_ddiv+0x1be>
10040f80:	d116      	bne.n	10040fb0 <__aeabi_ddiv+0x1e8>
10040f82:	42a7      	cmp	r7, r4
10040f84:	d214      	bcs.n	10040fb0 <__aeabi_ddiv+0x1e8>
10040f86:	465b      	mov	r3, fp
10040f88:	9d00      	ldr	r5, [sp, #0]
10040f8a:	3b01      	subs	r3, #1
10040f8c:	444f      	add	r7, r9
10040f8e:	9305      	str	r3, [sp, #20]
10040f90:	454f      	cmp	r7, r9
10040f92:	419b      	sbcs	r3, r3
10040f94:	46ac      	mov	ip, r5
10040f96:	425b      	negs	r3, r3
10040f98:	4463      	add	r3, ip
10040f9a:	18c0      	adds	r0, r0, r3
10040f9c:	4285      	cmp	r5, r0
10040f9e:	d300      	bcc.n	10040fa2 <__aeabi_ddiv+0x1da>
10040fa0:	e1a1      	b.n	100412e6 <__aeabi_ddiv+0x51e>
10040fa2:	4282      	cmp	r2, r0
10040fa4:	d900      	bls.n	10040fa8 <__aeabi_ddiv+0x1e0>
10040fa6:	e1f6      	b.n	10041396 <__aeabi_ddiv+0x5ce>
10040fa8:	d100      	bne.n	10040fac <__aeabi_ddiv+0x1e4>
10040faa:	e1f1      	b.n	10041390 <__aeabi_ddiv+0x5c8>
10040fac:	9b05      	ldr	r3, [sp, #20]
10040fae:	469b      	mov	fp, r3
10040fb0:	1b3c      	subs	r4, r7, r4
10040fb2:	42a7      	cmp	r7, r4
10040fb4:	41bf      	sbcs	r7, r7
10040fb6:	9d00      	ldr	r5, [sp, #0]
10040fb8:	1a80      	subs	r0, r0, r2
10040fba:	427f      	negs	r7, r7
10040fbc:	1bc0      	subs	r0, r0, r7
10040fbe:	4285      	cmp	r5, r0
10040fc0:	d100      	bne.n	10040fc4 <__aeabi_ddiv+0x1fc>
10040fc2:	e1d0      	b.n	10041366 <__aeabi_ddiv+0x59e>
10040fc4:	9902      	ldr	r1, [sp, #8]
10040fc6:	f7ff f923 	bl	10040210 <__aeabi_uidivmod>
10040fca:	9a03      	ldr	r2, [sp, #12]
10040fcc:	040b      	lsls	r3, r1, #16
10040fce:	4342      	muls	r2, r0
10040fd0:	0c21      	lsrs	r1, r4, #16
10040fd2:	0007      	movs	r7, r0
10040fd4:	4319      	orrs	r1, r3
10040fd6:	428a      	cmp	r2, r1
10040fd8:	d900      	bls.n	10040fdc <__aeabi_ddiv+0x214>
10040fda:	e178      	b.n	100412ce <__aeabi_ddiv+0x506>
10040fdc:	1a88      	subs	r0, r1, r2
10040fde:	9902      	ldr	r1, [sp, #8]
10040fe0:	f7ff f916 	bl	10040210 <__aeabi_uidivmod>
10040fe4:	9a03      	ldr	r2, [sp, #12]
10040fe6:	0424      	lsls	r4, r4, #16
10040fe8:	4342      	muls	r2, r0
10040fea:	0409      	lsls	r1, r1, #16
10040fec:	0c24      	lsrs	r4, r4, #16
10040fee:	0003      	movs	r3, r0
10040ff0:	430c      	orrs	r4, r1
10040ff2:	42a2      	cmp	r2, r4
10040ff4:	d900      	bls.n	10040ff8 <__aeabi_ddiv+0x230>
10040ff6:	e15d      	b.n	100412b4 <__aeabi_ddiv+0x4ec>
10040ff8:	4641      	mov	r1, r8
10040ffa:	1aa4      	subs	r4, r4, r2
10040ffc:	043a      	lsls	r2, r7, #16
10040ffe:	431a      	orrs	r2, r3
10041000:	9d04      	ldr	r5, [sp, #16]
10041002:	0413      	lsls	r3, r2, #16
10041004:	0c1b      	lsrs	r3, r3, #16
10041006:	4359      	muls	r1, r3
10041008:	4647      	mov	r7, r8
1004100a:	436b      	muls	r3, r5
1004100c:	469c      	mov	ip, r3
1004100e:	0c10      	lsrs	r0, r2, #16
10041010:	4347      	muls	r7, r0
10041012:	0c0b      	lsrs	r3, r1, #16
10041014:	44bc      	add	ip, r7
10041016:	4463      	add	r3, ip
10041018:	4368      	muls	r0, r5
1004101a:	429f      	cmp	r7, r3
1004101c:	d903      	bls.n	10041026 <__aeabi_ddiv+0x25e>
1004101e:	2580      	movs	r5, #128	@ 0x80
10041020:	026d      	lsls	r5, r5, #9
10041022:	46ac      	mov	ip, r5
10041024:	4460      	add	r0, ip
10041026:	0c1f      	lsrs	r7, r3, #16
10041028:	0409      	lsls	r1, r1, #16
1004102a:	041b      	lsls	r3, r3, #16
1004102c:	0c09      	lsrs	r1, r1, #16
1004102e:	183f      	adds	r7, r7, r0
10041030:	185b      	adds	r3, r3, r1
10041032:	42bc      	cmp	r4, r7
10041034:	d200      	bcs.n	10041038 <__aeabi_ddiv+0x270>
10041036:	e102      	b.n	1004123e <__aeabi_ddiv+0x476>
10041038:	d100      	bne.n	1004103c <__aeabi_ddiv+0x274>
1004103a:	e0fd      	b.n	10041238 <__aeabi_ddiv+0x470>
1004103c:	2301      	movs	r3, #1
1004103e:	431a      	orrs	r2, r3
10041040:	4b43      	ldr	r3, [pc, #268]	@ (10041150 <__aeabi_ddiv+0x388>)
10041042:	4453      	add	r3, sl
10041044:	2b00      	cmp	r3, #0
10041046:	dc00      	bgt.n	1004104a <__aeabi_ddiv+0x282>
10041048:	e0ae      	b.n	100411a8 <__aeabi_ddiv+0x3e0>
1004104a:	0751      	lsls	r1, r2, #29
1004104c:	d000      	beq.n	10041050 <__aeabi_ddiv+0x288>
1004104e:	e198      	b.n	10041382 <__aeabi_ddiv+0x5ba>
10041050:	4659      	mov	r1, fp
10041052:	01c9      	lsls	r1, r1, #7
10041054:	d506      	bpl.n	10041064 <__aeabi_ddiv+0x29c>
10041056:	4659      	mov	r1, fp
10041058:	4b3e      	ldr	r3, [pc, #248]	@ (10041154 <__aeabi_ddiv+0x38c>)
1004105a:	4019      	ands	r1, r3
1004105c:	2380      	movs	r3, #128	@ 0x80
1004105e:	468b      	mov	fp, r1
10041060:	00db      	lsls	r3, r3, #3
10041062:	4453      	add	r3, sl
10041064:	493c      	ldr	r1, [pc, #240]	@ (10041158 <__aeabi_ddiv+0x390>)
10041066:	428b      	cmp	r3, r1
10041068:	dd00      	ble.n	1004106c <__aeabi_ddiv+0x2a4>
1004106a:	e71a      	b.n	10040ea2 <__aeabi_ddiv+0xda>
1004106c:	4659      	mov	r1, fp
1004106e:	08d2      	lsrs	r2, r2, #3
10041070:	0749      	lsls	r1, r1, #29
10041072:	4311      	orrs	r1, r2
10041074:	465a      	mov	r2, fp
10041076:	055b      	lsls	r3, r3, #21
10041078:	0254      	lsls	r4, r2, #9
1004107a:	4688      	mov	r8, r1
1004107c:	0b24      	lsrs	r4, r4, #12
1004107e:	0d5b      	lsrs	r3, r3, #21
10041080:	e702      	b.n	10040e88 <__aeabi_ddiv+0xc0>
10041082:	465a      	mov	r2, fp
10041084:	9b00      	ldr	r3, [sp, #0]
10041086:	431a      	orrs	r2, r3
10041088:	d100      	bne.n	1004108c <__aeabi_ddiv+0x2c4>
1004108a:	e07e      	b.n	1004118a <__aeabi_ddiv+0x3c2>
1004108c:	465b      	mov	r3, fp
1004108e:	2b00      	cmp	r3, #0
10041090:	d100      	bne.n	10041094 <__aeabi_ddiv+0x2cc>
10041092:	e100      	b.n	10041296 <__aeabi_ddiv+0x4ce>
10041094:	4658      	mov	r0, fp
10041096:	f001 f8e1 	bl	1004225c <__clzsi2>
1004109a:	0002      	movs	r2, r0
1004109c:	0003      	movs	r3, r0
1004109e:	3a0b      	subs	r2, #11
100410a0:	271d      	movs	r7, #29
100410a2:	9e00      	ldr	r6, [sp, #0]
100410a4:	1aba      	subs	r2, r7, r2
100410a6:	0019      	movs	r1, r3
100410a8:	4658      	mov	r0, fp
100410aa:	40d6      	lsrs	r6, r2
100410ac:	3908      	subs	r1, #8
100410ae:	4088      	lsls	r0, r1
100410b0:	0032      	movs	r2, r6
100410b2:	4302      	orrs	r2, r0
100410b4:	4693      	mov	fp, r2
100410b6:	9a00      	ldr	r2, [sp, #0]
100410b8:	408a      	lsls	r2, r1
100410ba:	4928      	ldr	r1, [pc, #160]	@ (1004115c <__aeabi_ddiv+0x394>)
100410bc:	4453      	add	r3, sl
100410be:	468a      	mov	sl, r1
100410c0:	449a      	add	sl, r3
100410c2:	2300      	movs	r3, #0
100410c4:	e6c8      	b.n	10040e58 <__aeabi_ddiv+0x90>
100410c6:	465b      	mov	r3, fp
100410c8:	4303      	orrs	r3, r0
100410ca:	4699      	mov	r9, r3
100410cc:	d056      	beq.n	1004117c <__aeabi_ddiv+0x3b4>
100410ce:	465b      	mov	r3, fp
100410d0:	2b00      	cmp	r3, #0
100410d2:	d100      	bne.n	100410d6 <__aeabi_ddiv+0x30e>
100410d4:	e0cd      	b.n	10041272 <__aeabi_ddiv+0x4aa>
100410d6:	4658      	mov	r0, fp
100410d8:	f001 f8c0 	bl	1004225c <__clzsi2>
100410dc:	230b      	movs	r3, #11
100410de:	425b      	negs	r3, r3
100410e0:	469c      	mov	ip, r3
100410e2:	0002      	movs	r2, r0
100410e4:	4484      	add	ip, r0
100410e6:	4666      	mov	r6, ip
100410e8:	231d      	movs	r3, #29
100410ea:	1b9b      	subs	r3, r3, r6
100410ec:	0026      	movs	r6, r4
100410ee:	0011      	movs	r1, r2
100410f0:	4658      	mov	r0, fp
100410f2:	40de      	lsrs	r6, r3
100410f4:	3908      	subs	r1, #8
100410f6:	4088      	lsls	r0, r1
100410f8:	0033      	movs	r3, r6
100410fa:	4303      	orrs	r3, r0
100410fc:	4699      	mov	r9, r3
100410fe:	0023      	movs	r3, r4
10041100:	408b      	lsls	r3, r1
10041102:	4698      	mov	r8, r3
10041104:	4b16      	ldr	r3, [pc, #88]	@ (10041160 <__aeabi_ddiv+0x398>)
10041106:	2400      	movs	r4, #0
10041108:	1a9b      	subs	r3, r3, r2
1004110a:	469a      	mov	sl, r3
1004110c:	2300      	movs	r3, #0
1004110e:	9303      	str	r3, [sp, #12]
10041110:	e682      	b.n	10040e18 <__aeabi_ddiv+0x50>
10041112:	465a      	mov	r2, fp
10041114:	4302      	orrs	r2, r0
10041116:	4691      	mov	r9, r2
10041118:	d12a      	bne.n	10041170 <__aeabi_ddiv+0x3a8>
1004111a:	2200      	movs	r2, #0
1004111c:	469a      	mov	sl, r3
1004111e:	2302      	movs	r3, #2
10041120:	4690      	mov	r8, r2
10041122:	2408      	movs	r4, #8
10041124:	9303      	str	r3, [sp, #12]
10041126:	e677      	b.n	10040e18 <__aeabi_ddiv+0x50>
10041128:	465a      	mov	r2, fp
1004112a:	9b00      	ldr	r3, [sp, #0]
1004112c:	431a      	orrs	r2, r3
1004112e:	4b0d      	ldr	r3, [pc, #52]	@ (10041164 <__aeabi_ddiv+0x39c>)
10041130:	469c      	mov	ip, r3
10041132:	44e2      	add	sl, ip
10041134:	2a00      	cmp	r2, #0
10041136:	d117      	bne.n	10041168 <__aeabi_ddiv+0x3a0>
10041138:	2302      	movs	r3, #2
1004113a:	431c      	orrs	r4, r3
1004113c:	2300      	movs	r3, #0
1004113e:	469b      	mov	fp, r3
10041140:	3302      	adds	r3, #2
10041142:	e689      	b.n	10040e58 <__aeabi_ddiv+0x90>
10041144:	000007ff 	.word	0x000007ff
10041148:	fffffc01 	.word	0xfffffc01
1004114c:	1004937c 	.word	0x1004937c
10041150:	000003ff 	.word	0x000003ff
10041154:	feffffff 	.word	0xfeffffff
10041158:	000007fe 	.word	0x000007fe
1004115c:	000003f3 	.word	0x000003f3
10041160:	fffffc0d 	.word	0xfffffc0d
10041164:	fffff801 	.word	0xfffff801
10041168:	2303      	movs	r3, #3
1004116a:	0032      	movs	r2, r6
1004116c:	431c      	orrs	r4, r3
1004116e:	e673      	b.n	10040e58 <__aeabi_ddiv+0x90>
10041170:	469a      	mov	sl, r3
10041172:	2303      	movs	r3, #3
10041174:	46d9      	mov	r9, fp
10041176:	240c      	movs	r4, #12
10041178:	9303      	str	r3, [sp, #12]
1004117a:	e64d      	b.n	10040e18 <__aeabi_ddiv+0x50>
1004117c:	2300      	movs	r3, #0
1004117e:	4698      	mov	r8, r3
10041180:	469a      	mov	sl, r3
10041182:	3301      	adds	r3, #1
10041184:	2404      	movs	r4, #4
10041186:	9303      	str	r3, [sp, #12]
10041188:	e646      	b.n	10040e18 <__aeabi_ddiv+0x50>
1004118a:	2301      	movs	r3, #1
1004118c:	431c      	orrs	r4, r3
1004118e:	2300      	movs	r3, #0
10041190:	469b      	mov	fp, r3
10041192:	3301      	adds	r3, #1
10041194:	e660      	b.n	10040e58 <__aeabi_ddiv+0x90>
10041196:	2300      	movs	r3, #0
10041198:	2480      	movs	r4, #128	@ 0x80
1004119a:	4698      	mov	r8, r3
1004119c:	2600      	movs	r6, #0
1004119e:	4b92      	ldr	r3, [pc, #584]	@ (100413e8 <__aeabi_ddiv+0x620>)
100411a0:	0324      	lsls	r4, r4, #12
100411a2:	e671      	b.n	10040e88 <__aeabi_ddiv+0xc0>
100411a4:	2201      	movs	r2, #1
100411a6:	4252      	negs	r2, r2
100411a8:	2101      	movs	r1, #1
100411aa:	1ac9      	subs	r1, r1, r3
100411ac:	2938      	cmp	r1, #56	@ 0x38
100411ae:	dd00      	ble.n	100411b2 <__aeabi_ddiv+0x3ea>
100411b0:	e666      	b.n	10040e80 <__aeabi_ddiv+0xb8>
100411b2:	291f      	cmp	r1, #31
100411b4:	dc00      	bgt.n	100411b8 <__aeabi_ddiv+0x3f0>
100411b6:	e0ab      	b.n	10041310 <__aeabi_ddiv+0x548>
100411b8:	201f      	movs	r0, #31
100411ba:	4240      	negs	r0, r0
100411bc:	1ac3      	subs	r3, r0, r3
100411be:	4658      	mov	r0, fp
100411c0:	40d8      	lsrs	r0, r3
100411c2:	0003      	movs	r3, r0
100411c4:	2920      	cmp	r1, #32
100411c6:	d004      	beq.n	100411d2 <__aeabi_ddiv+0x40a>
100411c8:	4658      	mov	r0, fp
100411ca:	4988      	ldr	r1, [pc, #544]	@ (100413ec <__aeabi_ddiv+0x624>)
100411cc:	4451      	add	r1, sl
100411ce:	4088      	lsls	r0, r1
100411d0:	4302      	orrs	r2, r0
100411d2:	1e51      	subs	r1, r2, #1
100411d4:	418a      	sbcs	r2, r1
100411d6:	431a      	orrs	r2, r3
100411d8:	2307      	movs	r3, #7
100411da:	0019      	movs	r1, r3
100411dc:	2400      	movs	r4, #0
100411de:	4011      	ands	r1, r2
100411e0:	4213      	tst	r3, r2
100411e2:	d00c      	beq.n	100411fe <__aeabi_ddiv+0x436>
100411e4:	230f      	movs	r3, #15
100411e6:	4013      	ands	r3, r2
100411e8:	2b04      	cmp	r3, #4
100411ea:	d100      	bne.n	100411ee <__aeabi_ddiv+0x426>
100411ec:	e0f9      	b.n	100413e2 <__aeabi_ddiv+0x61a>
100411ee:	1d11      	adds	r1, r2, #4
100411f0:	4291      	cmp	r1, r2
100411f2:	419b      	sbcs	r3, r3
100411f4:	000a      	movs	r2, r1
100411f6:	425b      	negs	r3, r3
100411f8:	0759      	lsls	r1, r3, #29
100411fa:	025b      	lsls	r3, r3, #9
100411fc:	0b1c      	lsrs	r4, r3, #12
100411fe:	08d2      	lsrs	r2, r2, #3
10041200:	430a      	orrs	r2, r1
10041202:	4690      	mov	r8, r2
10041204:	2300      	movs	r3, #0
10041206:	e63f      	b.n	10040e88 <__aeabi_ddiv+0xc0>
10041208:	2480      	movs	r4, #128	@ 0x80
1004120a:	464b      	mov	r3, r9
1004120c:	0324      	lsls	r4, r4, #12
1004120e:	4223      	tst	r3, r4
10041210:	d009      	beq.n	10041226 <__aeabi_ddiv+0x45e>
10041212:	465b      	mov	r3, fp
10041214:	4223      	tst	r3, r4
10041216:	d106      	bne.n	10041226 <__aeabi_ddiv+0x45e>
10041218:	431c      	orrs	r4, r3
1004121a:	0324      	lsls	r4, r4, #12
1004121c:	002e      	movs	r6, r5
1004121e:	4690      	mov	r8, r2
10041220:	4b71      	ldr	r3, [pc, #452]	@ (100413e8 <__aeabi_ddiv+0x620>)
10041222:	0b24      	lsrs	r4, r4, #12
10041224:	e630      	b.n	10040e88 <__aeabi_ddiv+0xc0>
10041226:	2480      	movs	r4, #128	@ 0x80
10041228:	464b      	mov	r3, r9
1004122a:	0324      	lsls	r4, r4, #12
1004122c:	431c      	orrs	r4, r3
1004122e:	0324      	lsls	r4, r4, #12
10041230:	9e02      	ldr	r6, [sp, #8]
10041232:	4b6d      	ldr	r3, [pc, #436]	@ (100413e8 <__aeabi_ddiv+0x620>)
10041234:	0b24      	lsrs	r4, r4, #12
10041236:	e627      	b.n	10040e88 <__aeabi_ddiv+0xc0>
10041238:	2b00      	cmp	r3, #0
1004123a:	d100      	bne.n	1004123e <__aeabi_ddiv+0x476>
1004123c:	e700      	b.n	10041040 <__aeabi_ddiv+0x278>
1004123e:	9800      	ldr	r0, [sp, #0]
10041240:	1e51      	subs	r1, r2, #1
10041242:	4684      	mov	ip, r0
10041244:	4464      	add	r4, ip
10041246:	4284      	cmp	r4, r0
10041248:	d200      	bcs.n	1004124c <__aeabi_ddiv+0x484>
1004124a:	e084      	b.n	10041356 <__aeabi_ddiv+0x58e>
1004124c:	42bc      	cmp	r4, r7
1004124e:	d200      	bcs.n	10041252 <__aeabi_ddiv+0x48a>
10041250:	e0ae      	b.n	100413b0 <__aeabi_ddiv+0x5e8>
10041252:	d100      	bne.n	10041256 <__aeabi_ddiv+0x48e>
10041254:	e0c1      	b.n	100413da <__aeabi_ddiv+0x612>
10041256:	000a      	movs	r2, r1
10041258:	e6f0      	b.n	1004103c <__aeabi_ddiv+0x274>
1004125a:	4542      	cmp	r2, r8
1004125c:	d900      	bls.n	10041260 <__aeabi_ddiv+0x498>
1004125e:	e62c      	b.n	10040eba <__aeabi_ddiv+0xf2>
10041260:	464b      	mov	r3, r9
10041262:	07dc      	lsls	r4, r3, #31
10041264:	0858      	lsrs	r0, r3, #1
10041266:	4643      	mov	r3, r8
10041268:	085b      	lsrs	r3, r3, #1
1004126a:	431c      	orrs	r4, r3
1004126c:	4643      	mov	r3, r8
1004126e:	07df      	lsls	r7, r3, #31
10041270:	e62a      	b.n	10040ec8 <__aeabi_ddiv+0x100>
10041272:	f000 fff3 	bl	1004225c <__clzsi2>
10041276:	2315      	movs	r3, #21
10041278:	469c      	mov	ip, r3
1004127a:	4484      	add	ip, r0
1004127c:	0002      	movs	r2, r0
1004127e:	4663      	mov	r3, ip
10041280:	3220      	adds	r2, #32
10041282:	2b1c      	cmp	r3, #28
10041284:	dc00      	bgt.n	10041288 <__aeabi_ddiv+0x4c0>
10041286:	e72e      	b.n	100410e6 <__aeabi_ddiv+0x31e>
10041288:	0023      	movs	r3, r4
1004128a:	3808      	subs	r0, #8
1004128c:	4083      	lsls	r3, r0
1004128e:	4699      	mov	r9, r3
10041290:	2300      	movs	r3, #0
10041292:	4698      	mov	r8, r3
10041294:	e736      	b.n	10041104 <__aeabi_ddiv+0x33c>
10041296:	f000 ffe1 	bl	1004225c <__clzsi2>
1004129a:	0002      	movs	r2, r0
1004129c:	0003      	movs	r3, r0
1004129e:	3215      	adds	r2, #21
100412a0:	3320      	adds	r3, #32
100412a2:	2a1c      	cmp	r2, #28
100412a4:	dc00      	bgt.n	100412a8 <__aeabi_ddiv+0x4e0>
100412a6:	e6fb      	b.n	100410a0 <__aeabi_ddiv+0x2d8>
100412a8:	9900      	ldr	r1, [sp, #0]
100412aa:	3808      	subs	r0, #8
100412ac:	4081      	lsls	r1, r0
100412ae:	2200      	movs	r2, #0
100412b0:	468b      	mov	fp, r1
100412b2:	e702      	b.n	100410ba <__aeabi_ddiv+0x2f2>
100412b4:	9900      	ldr	r1, [sp, #0]
100412b6:	3b01      	subs	r3, #1
100412b8:	468c      	mov	ip, r1
100412ba:	4464      	add	r4, ip
100412bc:	42a1      	cmp	r1, r4
100412be:	d900      	bls.n	100412c2 <__aeabi_ddiv+0x4fa>
100412c0:	e69a      	b.n	10040ff8 <__aeabi_ddiv+0x230>
100412c2:	42a2      	cmp	r2, r4
100412c4:	d800      	bhi.n	100412c8 <__aeabi_ddiv+0x500>
100412c6:	e697      	b.n	10040ff8 <__aeabi_ddiv+0x230>
100412c8:	1e83      	subs	r3, r0, #2
100412ca:	4464      	add	r4, ip
100412cc:	e694      	b.n	10040ff8 <__aeabi_ddiv+0x230>
100412ce:	46ac      	mov	ip, r5
100412d0:	4461      	add	r1, ip
100412d2:	3f01      	subs	r7, #1
100412d4:	428d      	cmp	r5, r1
100412d6:	d900      	bls.n	100412da <__aeabi_ddiv+0x512>
100412d8:	e680      	b.n	10040fdc <__aeabi_ddiv+0x214>
100412da:	428a      	cmp	r2, r1
100412dc:	d800      	bhi.n	100412e0 <__aeabi_ddiv+0x518>
100412de:	e67d      	b.n	10040fdc <__aeabi_ddiv+0x214>
100412e0:	1e87      	subs	r7, r0, #2
100412e2:	4461      	add	r1, ip
100412e4:	e67a      	b.n	10040fdc <__aeabi_ddiv+0x214>
100412e6:	4285      	cmp	r5, r0
100412e8:	d000      	beq.n	100412ec <__aeabi_ddiv+0x524>
100412ea:	e65f      	b.n	10040fac <__aeabi_ddiv+0x1e4>
100412ec:	45b9      	cmp	r9, r7
100412ee:	d900      	bls.n	100412f2 <__aeabi_ddiv+0x52a>
100412f0:	e65c      	b.n	10040fac <__aeabi_ddiv+0x1e4>
100412f2:	e656      	b.n	10040fa2 <__aeabi_ddiv+0x1da>
100412f4:	42a2      	cmp	r2, r4
100412f6:	d800      	bhi.n	100412fa <__aeabi_ddiv+0x532>
100412f8:	e61a      	b.n	10040f30 <__aeabi_ddiv+0x168>
100412fa:	1e83      	subs	r3, r0, #2
100412fc:	4464      	add	r4, ip
100412fe:	e617      	b.n	10040f30 <__aeabi_ddiv+0x168>
10041300:	428a      	cmp	r2, r1
10041302:	d800      	bhi.n	10041306 <__aeabi_ddiv+0x53e>
10041304:	e600      	b.n	10040f08 <__aeabi_ddiv+0x140>
10041306:	46ac      	mov	ip, r5
10041308:	1e83      	subs	r3, r0, #2
1004130a:	4698      	mov	r8, r3
1004130c:	4461      	add	r1, ip
1004130e:	e5fb      	b.n	10040f08 <__aeabi_ddiv+0x140>
10041310:	4837      	ldr	r0, [pc, #220]	@ (100413f0 <__aeabi_ddiv+0x628>)
10041312:	0014      	movs	r4, r2
10041314:	4450      	add	r0, sl
10041316:	4082      	lsls	r2, r0
10041318:	465b      	mov	r3, fp
1004131a:	0017      	movs	r7, r2
1004131c:	4083      	lsls	r3, r0
1004131e:	40cc      	lsrs	r4, r1
10041320:	1e7a      	subs	r2, r7, #1
10041322:	4197      	sbcs	r7, r2
10041324:	4323      	orrs	r3, r4
10041326:	433b      	orrs	r3, r7
10041328:	001a      	movs	r2, r3
1004132a:	465b      	mov	r3, fp
1004132c:	40cb      	lsrs	r3, r1
1004132e:	0751      	lsls	r1, r2, #29
10041330:	d009      	beq.n	10041346 <__aeabi_ddiv+0x57e>
10041332:	210f      	movs	r1, #15
10041334:	4011      	ands	r1, r2
10041336:	2904      	cmp	r1, #4
10041338:	d005      	beq.n	10041346 <__aeabi_ddiv+0x57e>
1004133a:	1d11      	adds	r1, r2, #4
1004133c:	4291      	cmp	r1, r2
1004133e:	4192      	sbcs	r2, r2
10041340:	4252      	negs	r2, r2
10041342:	189b      	adds	r3, r3, r2
10041344:	000a      	movs	r2, r1
10041346:	0219      	lsls	r1, r3, #8
10041348:	d400      	bmi.n	1004134c <__aeabi_ddiv+0x584>
1004134a:	e755      	b.n	100411f8 <__aeabi_ddiv+0x430>
1004134c:	2200      	movs	r2, #0
1004134e:	2301      	movs	r3, #1
10041350:	2400      	movs	r4, #0
10041352:	4690      	mov	r8, r2
10041354:	e598      	b.n	10040e88 <__aeabi_ddiv+0xc0>
10041356:	000a      	movs	r2, r1
10041358:	42bc      	cmp	r4, r7
1004135a:	d000      	beq.n	1004135e <__aeabi_ddiv+0x596>
1004135c:	e66e      	b.n	1004103c <__aeabi_ddiv+0x274>
1004135e:	454b      	cmp	r3, r9
10041360:	d000      	beq.n	10041364 <__aeabi_ddiv+0x59c>
10041362:	e66b      	b.n	1004103c <__aeabi_ddiv+0x274>
10041364:	e66c      	b.n	10041040 <__aeabi_ddiv+0x278>
10041366:	4b23      	ldr	r3, [pc, #140]	@ (100413f4 <__aeabi_ddiv+0x62c>)
10041368:	4a23      	ldr	r2, [pc, #140]	@ (100413f8 <__aeabi_ddiv+0x630>)
1004136a:	4453      	add	r3, sl
1004136c:	4592      	cmp	sl, r2
1004136e:	da00      	bge.n	10041372 <__aeabi_ddiv+0x5aa>
10041370:	e718      	b.n	100411a4 <__aeabi_ddiv+0x3dc>
10041372:	2101      	movs	r1, #1
10041374:	4249      	negs	r1, r1
10041376:	1d0a      	adds	r2, r1, #4
10041378:	428a      	cmp	r2, r1
1004137a:	4189      	sbcs	r1, r1
1004137c:	4249      	negs	r1, r1
1004137e:	448b      	add	fp, r1
10041380:	e666      	b.n	10041050 <__aeabi_ddiv+0x288>
10041382:	210f      	movs	r1, #15
10041384:	4011      	ands	r1, r2
10041386:	2904      	cmp	r1, #4
10041388:	d100      	bne.n	1004138c <__aeabi_ddiv+0x5c4>
1004138a:	e661      	b.n	10041050 <__aeabi_ddiv+0x288>
1004138c:	0011      	movs	r1, r2
1004138e:	e7f2      	b.n	10041376 <__aeabi_ddiv+0x5ae>
10041390:	42bc      	cmp	r4, r7
10041392:	d800      	bhi.n	10041396 <__aeabi_ddiv+0x5ce>
10041394:	e60a      	b.n	10040fac <__aeabi_ddiv+0x1e4>
10041396:	2302      	movs	r3, #2
10041398:	425b      	negs	r3, r3
1004139a:	469c      	mov	ip, r3
1004139c:	9900      	ldr	r1, [sp, #0]
1004139e:	444f      	add	r7, r9
100413a0:	454f      	cmp	r7, r9
100413a2:	419b      	sbcs	r3, r3
100413a4:	44e3      	add	fp, ip
100413a6:	468c      	mov	ip, r1
100413a8:	425b      	negs	r3, r3
100413aa:	4463      	add	r3, ip
100413ac:	18c0      	adds	r0, r0, r3
100413ae:	e5ff      	b.n	10040fb0 <__aeabi_ddiv+0x1e8>
100413b0:	4649      	mov	r1, r9
100413b2:	9d00      	ldr	r5, [sp, #0]
100413b4:	0048      	lsls	r0, r1, #1
100413b6:	4548      	cmp	r0, r9
100413b8:	4189      	sbcs	r1, r1
100413ba:	46ac      	mov	ip, r5
100413bc:	4249      	negs	r1, r1
100413be:	4461      	add	r1, ip
100413c0:	4681      	mov	r9, r0
100413c2:	3a02      	subs	r2, #2
100413c4:	1864      	adds	r4, r4, r1
100413c6:	e7c7      	b.n	10041358 <__aeabi_ddiv+0x590>
100413c8:	2480      	movs	r4, #128	@ 0x80
100413ca:	465b      	mov	r3, fp
100413cc:	0324      	lsls	r4, r4, #12
100413ce:	431c      	orrs	r4, r3
100413d0:	0324      	lsls	r4, r4, #12
100413d2:	4690      	mov	r8, r2
100413d4:	4b04      	ldr	r3, [pc, #16]	@ (100413e8 <__aeabi_ddiv+0x620>)
100413d6:	0b24      	lsrs	r4, r4, #12
100413d8:	e556      	b.n	10040e88 <__aeabi_ddiv+0xc0>
100413da:	4599      	cmp	r9, r3
100413dc:	d3e8      	bcc.n	100413b0 <__aeabi_ddiv+0x5e8>
100413de:	000a      	movs	r2, r1
100413e0:	e7bd      	b.n	1004135e <__aeabi_ddiv+0x596>
100413e2:	2300      	movs	r3, #0
100413e4:	e708      	b.n	100411f8 <__aeabi_ddiv+0x430>
100413e6:	46c0      	nop			@ (mov r8, r8)
100413e8:	000007ff 	.word	0x000007ff
100413ec:	0000043e 	.word	0x0000043e
100413f0:	0000041e 	.word	0x0000041e
100413f4:	000003ff 	.word	0x000003ff
100413f8:	fffffc02 	.word	0xfffffc02

100413fc <__aeabi_dmul>:
100413fc:	b5f0      	push	{r4, r5, r6, r7, lr}
100413fe:	4657      	mov	r7, sl
10041400:	46de      	mov	lr, fp
10041402:	464e      	mov	r6, r9
10041404:	4645      	mov	r5, r8
10041406:	b5e0      	push	{r5, r6, r7, lr}
10041408:	001f      	movs	r7, r3
1004140a:	030b      	lsls	r3, r1, #12
1004140c:	0b1b      	lsrs	r3, r3, #12
1004140e:	0016      	movs	r6, r2
10041410:	469a      	mov	sl, r3
10041412:	0fca      	lsrs	r2, r1, #31
10041414:	004b      	lsls	r3, r1, #1
10041416:	0004      	movs	r4, r0
10041418:	4693      	mov	fp, r2
1004141a:	b087      	sub	sp, #28
1004141c:	0d5b      	lsrs	r3, r3, #21
1004141e:	d100      	bne.n	10041422 <__aeabi_dmul+0x26>
10041420:	e0d5      	b.n	100415ce <__aeabi_dmul+0x1d2>
10041422:	4abb      	ldr	r2, [pc, #748]	@ (10041710 <__aeabi_dmul+0x314>)
10041424:	4293      	cmp	r3, r2
10041426:	d100      	bne.n	1004142a <__aeabi_dmul+0x2e>
10041428:	e0f8      	b.n	1004161c <__aeabi_dmul+0x220>
1004142a:	4651      	mov	r1, sl
1004142c:	0f42      	lsrs	r2, r0, #29
1004142e:	00c9      	lsls	r1, r1, #3
10041430:	430a      	orrs	r2, r1
10041432:	2180      	movs	r1, #128	@ 0x80
10041434:	0409      	lsls	r1, r1, #16
10041436:	4311      	orrs	r1, r2
10041438:	00c2      	lsls	r2, r0, #3
1004143a:	4691      	mov	r9, r2
1004143c:	4ab5      	ldr	r2, [pc, #724]	@ (10041714 <__aeabi_dmul+0x318>)
1004143e:	468a      	mov	sl, r1
10041440:	189d      	adds	r5, r3, r2
10041442:	2300      	movs	r3, #0
10041444:	4698      	mov	r8, r3
10041446:	9302      	str	r3, [sp, #8]
10041448:	033c      	lsls	r4, r7, #12
1004144a:	007b      	lsls	r3, r7, #1
1004144c:	0ffa      	lsrs	r2, r7, #31
1004144e:	0030      	movs	r0, r6
10041450:	0b24      	lsrs	r4, r4, #12
10041452:	0d5b      	lsrs	r3, r3, #21
10041454:	9200      	str	r2, [sp, #0]
10041456:	d100      	bne.n	1004145a <__aeabi_dmul+0x5e>
10041458:	e096      	b.n	10041588 <__aeabi_dmul+0x18c>
1004145a:	4aad      	ldr	r2, [pc, #692]	@ (10041710 <__aeabi_dmul+0x314>)
1004145c:	4293      	cmp	r3, r2
1004145e:	d031      	beq.n	100414c4 <__aeabi_dmul+0xc8>
10041460:	0f72      	lsrs	r2, r6, #29
10041462:	00e4      	lsls	r4, r4, #3
10041464:	4322      	orrs	r2, r4
10041466:	2480      	movs	r4, #128	@ 0x80
10041468:	0424      	lsls	r4, r4, #16
1004146a:	4314      	orrs	r4, r2
1004146c:	4aa9      	ldr	r2, [pc, #676]	@ (10041714 <__aeabi_dmul+0x318>)
1004146e:	00f0      	lsls	r0, r6, #3
10041470:	4694      	mov	ip, r2
10041472:	4463      	add	r3, ip
10041474:	195b      	adds	r3, r3, r5
10041476:	1c5a      	adds	r2, r3, #1
10041478:	9201      	str	r2, [sp, #4]
1004147a:	4642      	mov	r2, r8
1004147c:	2600      	movs	r6, #0
1004147e:	2a0a      	cmp	r2, #10
10041480:	dc42      	bgt.n	10041508 <__aeabi_dmul+0x10c>
10041482:	465a      	mov	r2, fp
10041484:	9900      	ldr	r1, [sp, #0]
10041486:	404a      	eors	r2, r1
10041488:	4693      	mov	fp, r2
1004148a:	4642      	mov	r2, r8
1004148c:	2a02      	cmp	r2, #2
1004148e:	dc32      	bgt.n	100414f6 <__aeabi_dmul+0xfa>
10041490:	3a01      	subs	r2, #1
10041492:	2a01      	cmp	r2, #1
10041494:	d900      	bls.n	10041498 <__aeabi_dmul+0x9c>
10041496:	e149      	b.n	1004172c <__aeabi_dmul+0x330>
10041498:	2e02      	cmp	r6, #2
1004149a:	d100      	bne.n	1004149e <__aeabi_dmul+0xa2>
1004149c:	e0ca      	b.n	10041634 <__aeabi_dmul+0x238>
1004149e:	2e01      	cmp	r6, #1
100414a0:	d13d      	bne.n	1004151e <__aeabi_dmul+0x122>
100414a2:	2300      	movs	r3, #0
100414a4:	2400      	movs	r4, #0
100414a6:	2200      	movs	r2, #0
100414a8:	0010      	movs	r0, r2
100414aa:	465a      	mov	r2, fp
100414ac:	051b      	lsls	r3, r3, #20
100414ae:	4323      	orrs	r3, r4
100414b0:	07d2      	lsls	r2, r2, #31
100414b2:	4313      	orrs	r3, r2
100414b4:	0019      	movs	r1, r3
100414b6:	b007      	add	sp, #28
100414b8:	bcf0      	pop	{r4, r5, r6, r7}
100414ba:	46bb      	mov	fp, r7
100414bc:	46b2      	mov	sl, r6
100414be:	46a9      	mov	r9, r5
100414c0:	46a0      	mov	r8, r4
100414c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
100414c4:	4b92      	ldr	r3, [pc, #584]	@ (10041710 <__aeabi_dmul+0x314>)
100414c6:	4326      	orrs	r6, r4
100414c8:	18eb      	adds	r3, r5, r3
100414ca:	2e00      	cmp	r6, #0
100414cc:	d100      	bne.n	100414d0 <__aeabi_dmul+0xd4>
100414ce:	e0bb      	b.n	10041648 <__aeabi_dmul+0x24c>
100414d0:	2203      	movs	r2, #3
100414d2:	4641      	mov	r1, r8
100414d4:	4311      	orrs	r1, r2
100414d6:	465a      	mov	r2, fp
100414d8:	4688      	mov	r8, r1
100414da:	9900      	ldr	r1, [sp, #0]
100414dc:	404a      	eors	r2, r1
100414de:	2180      	movs	r1, #128	@ 0x80
100414e0:	0109      	lsls	r1, r1, #4
100414e2:	468c      	mov	ip, r1
100414e4:	0029      	movs	r1, r5
100414e6:	4461      	add	r1, ip
100414e8:	9101      	str	r1, [sp, #4]
100414ea:	4641      	mov	r1, r8
100414ec:	290a      	cmp	r1, #10
100414ee:	dd00      	ble.n	100414f2 <__aeabi_dmul+0xf6>
100414f0:	e233      	b.n	1004195a <__aeabi_dmul+0x55e>
100414f2:	4693      	mov	fp, r2
100414f4:	2603      	movs	r6, #3
100414f6:	4642      	mov	r2, r8
100414f8:	2701      	movs	r7, #1
100414fa:	4097      	lsls	r7, r2
100414fc:	21a6      	movs	r1, #166	@ 0xa6
100414fe:	003a      	movs	r2, r7
10041500:	00c9      	lsls	r1, r1, #3
10041502:	400a      	ands	r2, r1
10041504:	420f      	tst	r7, r1
10041506:	d031      	beq.n	1004156c <__aeabi_dmul+0x170>
10041508:	9e02      	ldr	r6, [sp, #8]
1004150a:	2e02      	cmp	r6, #2
1004150c:	d100      	bne.n	10041510 <__aeabi_dmul+0x114>
1004150e:	e235      	b.n	1004197c <__aeabi_dmul+0x580>
10041510:	2e03      	cmp	r6, #3
10041512:	d100      	bne.n	10041516 <__aeabi_dmul+0x11a>
10041514:	e1d2      	b.n	100418bc <__aeabi_dmul+0x4c0>
10041516:	4654      	mov	r4, sl
10041518:	4648      	mov	r0, r9
1004151a:	2e01      	cmp	r6, #1
1004151c:	d0c1      	beq.n	100414a2 <__aeabi_dmul+0xa6>
1004151e:	9a01      	ldr	r2, [sp, #4]
10041520:	4b7d      	ldr	r3, [pc, #500]	@ (10041718 <__aeabi_dmul+0x31c>)
10041522:	4694      	mov	ip, r2
10041524:	4463      	add	r3, ip
10041526:	2b00      	cmp	r3, #0
10041528:	dc00      	bgt.n	1004152c <__aeabi_dmul+0x130>
1004152a:	e0c0      	b.n	100416ae <__aeabi_dmul+0x2b2>
1004152c:	0742      	lsls	r2, r0, #29
1004152e:	d009      	beq.n	10041544 <__aeabi_dmul+0x148>
10041530:	220f      	movs	r2, #15
10041532:	4002      	ands	r2, r0
10041534:	2a04      	cmp	r2, #4
10041536:	d005      	beq.n	10041544 <__aeabi_dmul+0x148>
10041538:	1d02      	adds	r2, r0, #4
1004153a:	4282      	cmp	r2, r0
1004153c:	4180      	sbcs	r0, r0
1004153e:	4240      	negs	r0, r0
10041540:	1824      	adds	r4, r4, r0
10041542:	0010      	movs	r0, r2
10041544:	01e2      	lsls	r2, r4, #7
10041546:	d506      	bpl.n	10041556 <__aeabi_dmul+0x15a>
10041548:	4b74      	ldr	r3, [pc, #464]	@ (1004171c <__aeabi_dmul+0x320>)
1004154a:	9a01      	ldr	r2, [sp, #4]
1004154c:	401c      	ands	r4, r3
1004154e:	2380      	movs	r3, #128	@ 0x80
10041550:	4694      	mov	ip, r2
10041552:	00db      	lsls	r3, r3, #3
10041554:	4463      	add	r3, ip
10041556:	4a72      	ldr	r2, [pc, #456]	@ (10041720 <__aeabi_dmul+0x324>)
10041558:	4293      	cmp	r3, r2
1004155a:	dc6b      	bgt.n	10041634 <__aeabi_dmul+0x238>
1004155c:	0762      	lsls	r2, r4, #29
1004155e:	08c0      	lsrs	r0, r0, #3
10041560:	0264      	lsls	r4, r4, #9
10041562:	055b      	lsls	r3, r3, #21
10041564:	4302      	orrs	r2, r0
10041566:	0b24      	lsrs	r4, r4, #12
10041568:	0d5b      	lsrs	r3, r3, #21
1004156a:	e79d      	b.n	100414a8 <__aeabi_dmul+0xac>
1004156c:	2190      	movs	r1, #144	@ 0x90
1004156e:	0089      	lsls	r1, r1, #2
10041570:	420f      	tst	r7, r1
10041572:	d163      	bne.n	1004163c <__aeabi_dmul+0x240>
10041574:	2288      	movs	r2, #136	@ 0x88
10041576:	423a      	tst	r2, r7
10041578:	d100      	bne.n	1004157c <__aeabi_dmul+0x180>
1004157a:	e0d7      	b.n	1004172c <__aeabi_dmul+0x330>
1004157c:	9b00      	ldr	r3, [sp, #0]
1004157e:	46a2      	mov	sl, r4
10041580:	469b      	mov	fp, r3
10041582:	4681      	mov	r9, r0
10041584:	9602      	str	r6, [sp, #8]
10041586:	e7bf      	b.n	10041508 <__aeabi_dmul+0x10c>
10041588:	0023      	movs	r3, r4
1004158a:	4333      	orrs	r3, r6
1004158c:	d100      	bne.n	10041590 <__aeabi_dmul+0x194>
1004158e:	e07f      	b.n	10041690 <__aeabi_dmul+0x294>
10041590:	2c00      	cmp	r4, #0
10041592:	d100      	bne.n	10041596 <__aeabi_dmul+0x19a>
10041594:	e1ad      	b.n	100418f2 <__aeabi_dmul+0x4f6>
10041596:	0020      	movs	r0, r4
10041598:	f000 fe60 	bl	1004225c <__clzsi2>
1004159c:	0002      	movs	r2, r0
1004159e:	0003      	movs	r3, r0
100415a0:	3a0b      	subs	r2, #11
100415a2:	201d      	movs	r0, #29
100415a4:	0019      	movs	r1, r3
100415a6:	1a82      	subs	r2, r0, r2
100415a8:	0030      	movs	r0, r6
100415aa:	3908      	subs	r1, #8
100415ac:	40d0      	lsrs	r0, r2
100415ae:	408c      	lsls	r4, r1
100415b0:	4304      	orrs	r4, r0
100415b2:	0030      	movs	r0, r6
100415b4:	4088      	lsls	r0, r1
100415b6:	4a5b      	ldr	r2, [pc, #364]	@ (10041724 <__aeabi_dmul+0x328>)
100415b8:	1aeb      	subs	r3, r5, r3
100415ba:	4694      	mov	ip, r2
100415bc:	4463      	add	r3, ip
100415be:	1c5a      	adds	r2, r3, #1
100415c0:	9201      	str	r2, [sp, #4]
100415c2:	4642      	mov	r2, r8
100415c4:	2600      	movs	r6, #0
100415c6:	2a0a      	cmp	r2, #10
100415c8:	dc00      	bgt.n	100415cc <__aeabi_dmul+0x1d0>
100415ca:	e75a      	b.n	10041482 <__aeabi_dmul+0x86>
100415cc:	e79c      	b.n	10041508 <__aeabi_dmul+0x10c>
100415ce:	4653      	mov	r3, sl
100415d0:	4303      	orrs	r3, r0
100415d2:	4699      	mov	r9, r3
100415d4:	d054      	beq.n	10041680 <__aeabi_dmul+0x284>
100415d6:	4653      	mov	r3, sl
100415d8:	2b00      	cmp	r3, #0
100415da:	d100      	bne.n	100415de <__aeabi_dmul+0x1e2>
100415dc:	e177      	b.n	100418ce <__aeabi_dmul+0x4d2>
100415de:	4650      	mov	r0, sl
100415e0:	f000 fe3c 	bl	1004225c <__clzsi2>
100415e4:	230b      	movs	r3, #11
100415e6:	425b      	negs	r3, r3
100415e8:	469c      	mov	ip, r3
100415ea:	0002      	movs	r2, r0
100415ec:	4484      	add	ip, r0
100415ee:	0011      	movs	r1, r2
100415f0:	4650      	mov	r0, sl
100415f2:	3908      	subs	r1, #8
100415f4:	4088      	lsls	r0, r1
100415f6:	231d      	movs	r3, #29
100415f8:	4680      	mov	r8, r0
100415fa:	4660      	mov	r0, ip
100415fc:	1a1b      	subs	r3, r3, r0
100415fe:	0020      	movs	r0, r4
10041600:	40d8      	lsrs	r0, r3
10041602:	0003      	movs	r3, r0
10041604:	4640      	mov	r0, r8
10041606:	4303      	orrs	r3, r0
10041608:	469a      	mov	sl, r3
1004160a:	0023      	movs	r3, r4
1004160c:	408b      	lsls	r3, r1
1004160e:	4699      	mov	r9, r3
10041610:	2300      	movs	r3, #0
10041612:	4d44      	ldr	r5, [pc, #272]	@ (10041724 <__aeabi_dmul+0x328>)
10041614:	4698      	mov	r8, r3
10041616:	1aad      	subs	r5, r5, r2
10041618:	9302      	str	r3, [sp, #8]
1004161a:	e715      	b.n	10041448 <__aeabi_dmul+0x4c>
1004161c:	4652      	mov	r2, sl
1004161e:	4302      	orrs	r2, r0
10041620:	4691      	mov	r9, r2
10041622:	d126      	bne.n	10041672 <__aeabi_dmul+0x276>
10041624:	2200      	movs	r2, #0
10041626:	001d      	movs	r5, r3
10041628:	2302      	movs	r3, #2
1004162a:	4692      	mov	sl, r2
1004162c:	3208      	adds	r2, #8
1004162e:	4690      	mov	r8, r2
10041630:	9302      	str	r3, [sp, #8]
10041632:	e709      	b.n	10041448 <__aeabi_dmul+0x4c>
10041634:	2400      	movs	r4, #0
10041636:	2200      	movs	r2, #0
10041638:	4b35      	ldr	r3, [pc, #212]	@ (10041710 <__aeabi_dmul+0x314>)
1004163a:	e735      	b.n	100414a8 <__aeabi_dmul+0xac>
1004163c:	2300      	movs	r3, #0
1004163e:	2480      	movs	r4, #128	@ 0x80
10041640:	469b      	mov	fp, r3
10041642:	0324      	lsls	r4, r4, #12
10041644:	4b32      	ldr	r3, [pc, #200]	@ (10041710 <__aeabi_dmul+0x314>)
10041646:	e72f      	b.n	100414a8 <__aeabi_dmul+0xac>
10041648:	2202      	movs	r2, #2
1004164a:	4641      	mov	r1, r8
1004164c:	4311      	orrs	r1, r2
1004164e:	2280      	movs	r2, #128	@ 0x80
10041650:	0112      	lsls	r2, r2, #4
10041652:	4694      	mov	ip, r2
10041654:	002a      	movs	r2, r5
10041656:	4462      	add	r2, ip
10041658:	4688      	mov	r8, r1
1004165a:	9201      	str	r2, [sp, #4]
1004165c:	290a      	cmp	r1, #10
1004165e:	dd00      	ble.n	10041662 <__aeabi_dmul+0x266>
10041660:	e752      	b.n	10041508 <__aeabi_dmul+0x10c>
10041662:	465a      	mov	r2, fp
10041664:	2000      	movs	r0, #0
10041666:	9900      	ldr	r1, [sp, #0]
10041668:	0004      	movs	r4, r0
1004166a:	404a      	eors	r2, r1
1004166c:	4693      	mov	fp, r2
1004166e:	2602      	movs	r6, #2
10041670:	e70b      	b.n	1004148a <__aeabi_dmul+0x8e>
10041672:	220c      	movs	r2, #12
10041674:	001d      	movs	r5, r3
10041676:	2303      	movs	r3, #3
10041678:	4681      	mov	r9, r0
1004167a:	4690      	mov	r8, r2
1004167c:	9302      	str	r3, [sp, #8]
1004167e:	e6e3      	b.n	10041448 <__aeabi_dmul+0x4c>
10041680:	2300      	movs	r3, #0
10041682:	469a      	mov	sl, r3
10041684:	3304      	adds	r3, #4
10041686:	4698      	mov	r8, r3
10041688:	3b03      	subs	r3, #3
1004168a:	2500      	movs	r5, #0
1004168c:	9302      	str	r3, [sp, #8]
1004168e:	e6db      	b.n	10041448 <__aeabi_dmul+0x4c>
10041690:	4642      	mov	r2, r8
10041692:	3301      	adds	r3, #1
10041694:	431a      	orrs	r2, r3
10041696:	002b      	movs	r3, r5
10041698:	4690      	mov	r8, r2
1004169a:	1c5a      	adds	r2, r3, #1
1004169c:	9201      	str	r2, [sp, #4]
1004169e:	4642      	mov	r2, r8
100416a0:	2400      	movs	r4, #0
100416a2:	2000      	movs	r0, #0
100416a4:	2601      	movs	r6, #1
100416a6:	2a0a      	cmp	r2, #10
100416a8:	dc00      	bgt.n	100416ac <__aeabi_dmul+0x2b0>
100416aa:	e6ea      	b.n	10041482 <__aeabi_dmul+0x86>
100416ac:	e72c      	b.n	10041508 <__aeabi_dmul+0x10c>
100416ae:	2201      	movs	r2, #1
100416b0:	1ad2      	subs	r2, r2, r3
100416b2:	2a38      	cmp	r2, #56	@ 0x38
100416b4:	dd00      	ble.n	100416b8 <__aeabi_dmul+0x2bc>
100416b6:	e6f4      	b.n	100414a2 <__aeabi_dmul+0xa6>
100416b8:	2a1f      	cmp	r2, #31
100416ba:	dc00      	bgt.n	100416be <__aeabi_dmul+0x2c2>
100416bc:	e12a      	b.n	10041914 <__aeabi_dmul+0x518>
100416be:	211f      	movs	r1, #31
100416c0:	4249      	negs	r1, r1
100416c2:	1acb      	subs	r3, r1, r3
100416c4:	0021      	movs	r1, r4
100416c6:	40d9      	lsrs	r1, r3
100416c8:	000b      	movs	r3, r1
100416ca:	2a20      	cmp	r2, #32
100416cc:	d005      	beq.n	100416da <__aeabi_dmul+0x2de>
100416ce:	4a16      	ldr	r2, [pc, #88]	@ (10041728 <__aeabi_dmul+0x32c>)
100416d0:	9d01      	ldr	r5, [sp, #4]
100416d2:	4694      	mov	ip, r2
100416d4:	4465      	add	r5, ip
100416d6:	40ac      	lsls	r4, r5
100416d8:	4320      	orrs	r0, r4
100416da:	1e42      	subs	r2, r0, #1
100416dc:	4190      	sbcs	r0, r2
100416de:	4318      	orrs	r0, r3
100416e0:	2307      	movs	r3, #7
100416e2:	0019      	movs	r1, r3
100416e4:	2400      	movs	r4, #0
100416e6:	4001      	ands	r1, r0
100416e8:	4203      	tst	r3, r0
100416ea:	d00c      	beq.n	10041706 <__aeabi_dmul+0x30a>
100416ec:	230f      	movs	r3, #15
100416ee:	4003      	ands	r3, r0
100416f0:	2b04      	cmp	r3, #4
100416f2:	d100      	bne.n	100416f6 <__aeabi_dmul+0x2fa>
100416f4:	e140      	b.n	10041978 <__aeabi_dmul+0x57c>
100416f6:	1d03      	adds	r3, r0, #4
100416f8:	4283      	cmp	r3, r0
100416fa:	41a4      	sbcs	r4, r4
100416fc:	0018      	movs	r0, r3
100416fe:	4264      	negs	r4, r4
10041700:	0761      	lsls	r1, r4, #29
10041702:	0264      	lsls	r4, r4, #9
10041704:	0b24      	lsrs	r4, r4, #12
10041706:	08c2      	lsrs	r2, r0, #3
10041708:	2300      	movs	r3, #0
1004170a:	430a      	orrs	r2, r1
1004170c:	e6cc      	b.n	100414a8 <__aeabi_dmul+0xac>
1004170e:	46c0      	nop			@ (mov r8, r8)
10041710:	000007ff 	.word	0x000007ff
10041714:	fffffc01 	.word	0xfffffc01
10041718:	000003ff 	.word	0x000003ff
1004171c:	feffffff 	.word	0xfeffffff
10041720:	000007fe 	.word	0x000007fe
10041724:	fffffc0d 	.word	0xfffffc0d
10041728:	0000043e 	.word	0x0000043e
1004172c:	4649      	mov	r1, r9
1004172e:	464a      	mov	r2, r9
10041730:	0409      	lsls	r1, r1, #16
10041732:	0c09      	lsrs	r1, r1, #16
10041734:	000d      	movs	r5, r1
10041736:	0c16      	lsrs	r6, r2, #16
10041738:	0c02      	lsrs	r2, r0, #16
1004173a:	0400      	lsls	r0, r0, #16
1004173c:	0c00      	lsrs	r0, r0, #16
1004173e:	4345      	muls	r5, r0
10041740:	46ac      	mov	ip, r5
10041742:	0005      	movs	r5, r0
10041744:	4375      	muls	r5, r6
10041746:	46a8      	mov	r8, r5
10041748:	0015      	movs	r5, r2
1004174a:	000f      	movs	r7, r1
1004174c:	4375      	muls	r5, r6
1004174e:	9200      	str	r2, [sp, #0]
10041750:	9502      	str	r5, [sp, #8]
10041752:	002a      	movs	r2, r5
10041754:	9d00      	ldr	r5, [sp, #0]
10041756:	436f      	muls	r7, r5
10041758:	4665      	mov	r5, ip
1004175a:	0c2d      	lsrs	r5, r5, #16
1004175c:	46a9      	mov	r9, r5
1004175e:	4447      	add	r7, r8
10041760:	444f      	add	r7, r9
10041762:	45b8      	cmp	r8, r7
10041764:	d905      	bls.n	10041772 <__aeabi_dmul+0x376>
10041766:	0015      	movs	r5, r2
10041768:	2280      	movs	r2, #128	@ 0x80
1004176a:	0252      	lsls	r2, r2, #9
1004176c:	4690      	mov	r8, r2
1004176e:	4445      	add	r5, r8
10041770:	9502      	str	r5, [sp, #8]
10041772:	0c3d      	lsrs	r5, r7, #16
10041774:	9503      	str	r5, [sp, #12]
10041776:	4665      	mov	r5, ip
10041778:	042d      	lsls	r5, r5, #16
1004177a:	043f      	lsls	r7, r7, #16
1004177c:	0c2d      	lsrs	r5, r5, #16
1004177e:	46ac      	mov	ip, r5
10041780:	003d      	movs	r5, r7
10041782:	4465      	add	r5, ip
10041784:	9504      	str	r5, [sp, #16]
10041786:	0c25      	lsrs	r5, r4, #16
10041788:	0424      	lsls	r4, r4, #16
1004178a:	0c24      	lsrs	r4, r4, #16
1004178c:	46ac      	mov	ip, r5
1004178e:	0025      	movs	r5, r4
10041790:	4375      	muls	r5, r6
10041792:	46a8      	mov	r8, r5
10041794:	4665      	mov	r5, ip
10041796:	000f      	movs	r7, r1
10041798:	4369      	muls	r1, r5
1004179a:	4441      	add	r1, r8
1004179c:	4689      	mov	r9, r1
1004179e:	4367      	muls	r7, r4
100417a0:	0c39      	lsrs	r1, r7, #16
100417a2:	4449      	add	r1, r9
100417a4:	436e      	muls	r6, r5
100417a6:	4588      	cmp	r8, r1
100417a8:	d903      	bls.n	100417b2 <__aeabi_dmul+0x3b6>
100417aa:	2280      	movs	r2, #128	@ 0x80
100417ac:	0252      	lsls	r2, r2, #9
100417ae:	4690      	mov	r8, r2
100417b0:	4446      	add	r6, r8
100417b2:	0c0d      	lsrs	r5, r1, #16
100417b4:	46a8      	mov	r8, r5
100417b6:	0035      	movs	r5, r6
100417b8:	4445      	add	r5, r8
100417ba:	9505      	str	r5, [sp, #20]
100417bc:	9d03      	ldr	r5, [sp, #12]
100417be:	043f      	lsls	r7, r7, #16
100417c0:	46a8      	mov	r8, r5
100417c2:	0c3f      	lsrs	r7, r7, #16
100417c4:	0409      	lsls	r1, r1, #16
100417c6:	19c9      	adds	r1, r1, r7
100417c8:	4488      	add	r8, r1
100417ca:	4645      	mov	r5, r8
100417cc:	9503      	str	r5, [sp, #12]
100417ce:	4655      	mov	r5, sl
100417d0:	042e      	lsls	r6, r5, #16
100417d2:	0c36      	lsrs	r6, r6, #16
100417d4:	0c2f      	lsrs	r7, r5, #16
100417d6:	0035      	movs	r5, r6
100417d8:	4345      	muls	r5, r0
100417da:	4378      	muls	r0, r7
100417dc:	4681      	mov	r9, r0
100417de:	0038      	movs	r0, r7
100417e0:	46a8      	mov	r8, r5
100417e2:	0c2d      	lsrs	r5, r5, #16
100417e4:	46aa      	mov	sl, r5
100417e6:	9a00      	ldr	r2, [sp, #0]
100417e8:	4350      	muls	r0, r2
100417ea:	4372      	muls	r2, r6
100417ec:	444a      	add	r2, r9
100417ee:	4452      	add	r2, sl
100417f0:	4591      	cmp	r9, r2
100417f2:	d903      	bls.n	100417fc <__aeabi_dmul+0x400>
100417f4:	2580      	movs	r5, #128	@ 0x80
100417f6:	026d      	lsls	r5, r5, #9
100417f8:	46a9      	mov	r9, r5
100417fa:	4448      	add	r0, r9
100417fc:	0c15      	lsrs	r5, r2, #16
100417fe:	46a9      	mov	r9, r5
10041800:	4645      	mov	r5, r8
10041802:	042d      	lsls	r5, r5, #16
10041804:	0c2d      	lsrs	r5, r5, #16
10041806:	46a8      	mov	r8, r5
10041808:	4665      	mov	r5, ip
1004180a:	437d      	muls	r5, r7
1004180c:	0412      	lsls	r2, r2, #16
1004180e:	4448      	add	r0, r9
10041810:	4490      	add	r8, r2
10041812:	46a9      	mov	r9, r5
10041814:	0032      	movs	r2, r6
10041816:	4665      	mov	r5, ip
10041818:	4362      	muls	r2, r4
1004181a:	436e      	muls	r6, r5
1004181c:	437c      	muls	r4, r7
1004181e:	0c17      	lsrs	r7, r2, #16
10041820:	1936      	adds	r6, r6, r4
10041822:	19bf      	adds	r7, r7, r6
10041824:	42bc      	cmp	r4, r7
10041826:	d903      	bls.n	10041830 <__aeabi_dmul+0x434>
10041828:	2480      	movs	r4, #128	@ 0x80
1004182a:	0264      	lsls	r4, r4, #9
1004182c:	46a4      	mov	ip, r4
1004182e:	44e1      	add	r9, ip
10041830:	9c02      	ldr	r4, [sp, #8]
10041832:	9e03      	ldr	r6, [sp, #12]
10041834:	46a4      	mov	ip, r4
10041836:	9d05      	ldr	r5, [sp, #20]
10041838:	4466      	add	r6, ip
1004183a:	428e      	cmp	r6, r1
1004183c:	4189      	sbcs	r1, r1
1004183e:	46ac      	mov	ip, r5
10041840:	0412      	lsls	r2, r2, #16
10041842:	043c      	lsls	r4, r7, #16
10041844:	0c12      	lsrs	r2, r2, #16
10041846:	18a2      	adds	r2, r4, r2
10041848:	4462      	add	r2, ip
1004184a:	4249      	negs	r1, r1
1004184c:	1854      	adds	r4, r2, r1
1004184e:	4446      	add	r6, r8
10041850:	46a4      	mov	ip, r4
10041852:	4546      	cmp	r6, r8
10041854:	41a4      	sbcs	r4, r4
10041856:	4682      	mov	sl, r0
10041858:	4264      	negs	r4, r4
1004185a:	46a0      	mov	r8, r4
1004185c:	42aa      	cmp	r2, r5
1004185e:	4192      	sbcs	r2, r2
10041860:	458c      	cmp	ip, r1
10041862:	4189      	sbcs	r1, r1
10041864:	44e2      	add	sl, ip
10041866:	44d0      	add	r8, sl
10041868:	4249      	negs	r1, r1
1004186a:	4252      	negs	r2, r2
1004186c:	430a      	orrs	r2, r1
1004186e:	45a0      	cmp	r8, r4
10041870:	41a4      	sbcs	r4, r4
10041872:	4582      	cmp	sl, r0
10041874:	4189      	sbcs	r1, r1
10041876:	4264      	negs	r4, r4
10041878:	4249      	negs	r1, r1
1004187a:	430c      	orrs	r4, r1
1004187c:	4641      	mov	r1, r8
1004187e:	0c3f      	lsrs	r7, r7, #16
10041880:	19d2      	adds	r2, r2, r7
10041882:	1912      	adds	r2, r2, r4
10041884:	0dcc      	lsrs	r4, r1, #23
10041886:	9904      	ldr	r1, [sp, #16]
10041888:	0270      	lsls	r0, r6, #9
1004188a:	4308      	orrs	r0, r1
1004188c:	1e41      	subs	r1, r0, #1
1004188e:	4188      	sbcs	r0, r1
10041890:	4641      	mov	r1, r8
10041892:	444a      	add	r2, r9
10041894:	0df6      	lsrs	r6, r6, #23
10041896:	0252      	lsls	r2, r2, #9
10041898:	4330      	orrs	r0, r6
1004189a:	0249      	lsls	r1, r1, #9
1004189c:	4314      	orrs	r4, r2
1004189e:	4308      	orrs	r0, r1
100418a0:	01d2      	lsls	r2, r2, #7
100418a2:	d535      	bpl.n	10041910 <__aeabi_dmul+0x514>
100418a4:	2201      	movs	r2, #1
100418a6:	0843      	lsrs	r3, r0, #1
100418a8:	4002      	ands	r2, r0
100418aa:	4313      	orrs	r3, r2
100418ac:	07e0      	lsls	r0, r4, #31
100418ae:	4318      	orrs	r0, r3
100418b0:	0864      	lsrs	r4, r4, #1
100418b2:	e634      	b.n	1004151e <__aeabi_dmul+0x122>
100418b4:	9b00      	ldr	r3, [sp, #0]
100418b6:	46a2      	mov	sl, r4
100418b8:	469b      	mov	fp, r3
100418ba:	4681      	mov	r9, r0
100418bc:	2480      	movs	r4, #128	@ 0x80
100418be:	4653      	mov	r3, sl
100418c0:	0324      	lsls	r4, r4, #12
100418c2:	431c      	orrs	r4, r3
100418c4:	0324      	lsls	r4, r4, #12
100418c6:	464a      	mov	r2, r9
100418c8:	4b2e      	ldr	r3, [pc, #184]	@ (10041984 <__aeabi_dmul+0x588>)
100418ca:	0b24      	lsrs	r4, r4, #12
100418cc:	e5ec      	b.n	100414a8 <__aeabi_dmul+0xac>
100418ce:	f000 fcc5 	bl	1004225c <__clzsi2>
100418d2:	2315      	movs	r3, #21
100418d4:	469c      	mov	ip, r3
100418d6:	4484      	add	ip, r0
100418d8:	0002      	movs	r2, r0
100418da:	4663      	mov	r3, ip
100418dc:	3220      	adds	r2, #32
100418de:	2b1c      	cmp	r3, #28
100418e0:	dc00      	bgt.n	100418e4 <__aeabi_dmul+0x4e8>
100418e2:	e684      	b.n	100415ee <__aeabi_dmul+0x1f2>
100418e4:	2300      	movs	r3, #0
100418e6:	4699      	mov	r9, r3
100418e8:	0023      	movs	r3, r4
100418ea:	3808      	subs	r0, #8
100418ec:	4083      	lsls	r3, r0
100418ee:	469a      	mov	sl, r3
100418f0:	e68e      	b.n	10041610 <__aeabi_dmul+0x214>
100418f2:	f000 fcb3 	bl	1004225c <__clzsi2>
100418f6:	0002      	movs	r2, r0
100418f8:	0003      	movs	r3, r0
100418fa:	3215      	adds	r2, #21
100418fc:	3320      	adds	r3, #32
100418fe:	2a1c      	cmp	r2, #28
10041900:	dc00      	bgt.n	10041904 <__aeabi_dmul+0x508>
10041902:	e64e      	b.n	100415a2 <__aeabi_dmul+0x1a6>
10041904:	0002      	movs	r2, r0
10041906:	0034      	movs	r4, r6
10041908:	3a08      	subs	r2, #8
1004190a:	2000      	movs	r0, #0
1004190c:	4094      	lsls	r4, r2
1004190e:	e652      	b.n	100415b6 <__aeabi_dmul+0x1ba>
10041910:	9301      	str	r3, [sp, #4]
10041912:	e604      	b.n	1004151e <__aeabi_dmul+0x122>
10041914:	4b1c      	ldr	r3, [pc, #112]	@ (10041988 <__aeabi_dmul+0x58c>)
10041916:	0021      	movs	r1, r4
10041918:	469c      	mov	ip, r3
1004191a:	0003      	movs	r3, r0
1004191c:	9d01      	ldr	r5, [sp, #4]
1004191e:	40d3      	lsrs	r3, r2
10041920:	4465      	add	r5, ip
10041922:	40a9      	lsls	r1, r5
10041924:	4319      	orrs	r1, r3
10041926:	0003      	movs	r3, r0
10041928:	40ab      	lsls	r3, r5
1004192a:	1e58      	subs	r0, r3, #1
1004192c:	4183      	sbcs	r3, r0
1004192e:	4319      	orrs	r1, r3
10041930:	0008      	movs	r0, r1
10041932:	40d4      	lsrs	r4, r2
10041934:	074b      	lsls	r3, r1, #29
10041936:	d009      	beq.n	1004194c <__aeabi_dmul+0x550>
10041938:	230f      	movs	r3, #15
1004193a:	400b      	ands	r3, r1
1004193c:	2b04      	cmp	r3, #4
1004193e:	d005      	beq.n	1004194c <__aeabi_dmul+0x550>
10041940:	1d0b      	adds	r3, r1, #4
10041942:	428b      	cmp	r3, r1
10041944:	4180      	sbcs	r0, r0
10041946:	4240      	negs	r0, r0
10041948:	1824      	adds	r4, r4, r0
1004194a:	0018      	movs	r0, r3
1004194c:	0223      	lsls	r3, r4, #8
1004194e:	d400      	bmi.n	10041952 <__aeabi_dmul+0x556>
10041950:	e6d6      	b.n	10041700 <__aeabi_dmul+0x304>
10041952:	2301      	movs	r3, #1
10041954:	2400      	movs	r4, #0
10041956:	2200      	movs	r2, #0
10041958:	e5a6      	b.n	100414a8 <__aeabi_dmul+0xac>
1004195a:	290f      	cmp	r1, #15
1004195c:	d1aa      	bne.n	100418b4 <__aeabi_dmul+0x4b8>
1004195e:	2380      	movs	r3, #128	@ 0x80
10041960:	4652      	mov	r2, sl
10041962:	031b      	lsls	r3, r3, #12
10041964:	421a      	tst	r2, r3
10041966:	d0a9      	beq.n	100418bc <__aeabi_dmul+0x4c0>
10041968:	421c      	tst	r4, r3
1004196a:	d1a7      	bne.n	100418bc <__aeabi_dmul+0x4c0>
1004196c:	431c      	orrs	r4, r3
1004196e:	9b00      	ldr	r3, [sp, #0]
10041970:	0002      	movs	r2, r0
10041972:	469b      	mov	fp, r3
10041974:	4b03      	ldr	r3, [pc, #12]	@ (10041984 <__aeabi_dmul+0x588>)
10041976:	e597      	b.n	100414a8 <__aeabi_dmul+0xac>
10041978:	2400      	movs	r4, #0
1004197a:	e6c1      	b.n	10041700 <__aeabi_dmul+0x304>
1004197c:	2400      	movs	r4, #0
1004197e:	4b01      	ldr	r3, [pc, #4]	@ (10041984 <__aeabi_dmul+0x588>)
10041980:	0022      	movs	r2, r4
10041982:	e591      	b.n	100414a8 <__aeabi_dmul+0xac>
10041984:	000007ff 	.word	0x000007ff
10041988:	0000041e 	.word	0x0000041e

1004198c <__aeabi_dsub>:
1004198c:	b5f0      	push	{r4, r5, r6, r7, lr}
1004198e:	464e      	mov	r6, r9
10041990:	4645      	mov	r5, r8
10041992:	46de      	mov	lr, fp
10041994:	4657      	mov	r7, sl
10041996:	b5e0      	push	{r5, r6, r7, lr}
10041998:	b085      	sub	sp, #20
1004199a:	9000      	str	r0, [sp, #0]
1004199c:	9101      	str	r1, [sp, #4]
1004199e:	030c      	lsls	r4, r1, #12
100419a0:	004f      	lsls	r7, r1, #1
100419a2:	0fce      	lsrs	r6, r1, #31
100419a4:	0a61      	lsrs	r1, r4, #9
100419a6:	9c00      	ldr	r4, [sp, #0]
100419a8:	46b0      	mov	r8, r6
100419aa:	0f64      	lsrs	r4, r4, #29
100419ac:	430c      	orrs	r4, r1
100419ae:	9900      	ldr	r1, [sp, #0]
100419b0:	0d7f      	lsrs	r7, r7, #21
100419b2:	00c8      	lsls	r0, r1, #3
100419b4:	0011      	movs	r1, r2
100419b6:	001a      	movs	r2, r3
100419b8:	031b      	lsls	r3, r3, #12
100419ba:	469c      	mov	ip, r3
100419bc:	9100      	str	r1, [sp, #0]
100419be:	9201      	str	r2, [sp, #4]
100419c0:	0051      	lsls	r1, r2, #1
100419c2:	0d4b      	lsrs	r3, r1, #21
100419c4:	4699      	mov	r9, r3
100419c6:	9b01      	ldr	r3, [sp, #4]
100419c8:	9d00      	ldr	r5, [sp, #0]
100419ca:	0fd9      	lsrs	r1, r3, #31
100419cc:	4663      	mov	r3, ip
100419ce:	0f6a      	lsrs	r2, r5, #29
100419d0:	0a5b      	lsrs	r3, r3, #9
100419d2:	4313      	orrs	r3, r2
100419d4:	00ea      	lsls	r2, r5, #3
100419d6:	4694      	mov	ip, r2
100419d8:	4693      	mov	fp, r2
100419da:	4ac1      	ldr	r2, [pc, #772]	@ (10041ce0 <__aeabi_dsub+0x354>)
100419dc:	9003      	str	r0, [sp, #12]
100419de:	9302      	str	r3, [sp, #8]
100419e0:	4591      	cmp	r9, r2
100419e2:	d100      	bne.n	100419e6 <__aeabi_dsub+0x5a>
100419e4:	e0cd      	b.n	10041b82 <__aeabi_dsub+0x1f6>
100419e6:	2501      	movs	r5, #1
100419e8:	4069      	eors	r1, r5
100419ea:	464d      	mov	r5, r9
100419ec:	1b7d      	subs	r5, r7, r5
100419ee:	46aa      	mov	sl, r5
100419f0:	428e      	cmp	r6, r1
100419f2:	d100      	bne.n	100419f6 <__aeabi_dsub+0x6a>
100419f4:	e080      	b.n	10041af8 <__aeabi_dsub+0x16c>
100419f6:	2d00      	cmp	r5, #0
100419f8:	dc00      	bgt.n	100419fc <__aeabi_dsub+0x70>
100419fa:	e335      	b.n	10042068 <__aeabi_dsub+0x6dc>
100419fc:	4649      	mov	r1, r9
100419fe:	2900      	cmp	r1, #0
10041a00:	d100      	bne.n	10041a04 <__aeabi_dsub+0x78>
10041a02:	e0df      	b.n	10041bc4 <__aeabi_dsub+0x238>
10041a04:	4297      	cmp	r7, r2
10041a06:	d100      	bne.n	10041a0a <__aeabi_dsub+0x7e>
10041a08:	e194      	b.n	10041d34 <__aeabi_dsub+0x3a8>
10041a0a:	4652      	mov	r2, sl
10041a0c:	2501      	movs	r5, #1
10041a0e:	2a38      	cmp	r2, #56	@ 0x38
10041a10:	dc19      	bgt.n	10041a46 <__aeabi_dsub+0xba>
10041a12:	2280      	movs	r2, #128	@ 0x80
10041a14:	9b02      	ldr	r3, [sp, #8]
10041a16:	0412      	lsls	r2, r2, #16
10041a18:	4313      	orrs	r3, r2
10041a1a:	9302      	str	r3, [sp, #8]
10041a1c:	4652      	mov	r2, sl
10041a1e:	2a1f      	cmp	r2, #31
10041a20:	dd00      	ble.n	10041a24 <__aeabi_dsub+0x98>
10041a22:	e1e3      	b.n	10041dec <__aeabi_dsub+0x460>
10041a24:	4653      	mov	r3, sl
10041a26:	2220      	movs	r2, #32
10041a28:	4661      	mov	r1, ip
10041a2a:	9d02      	ldr	r5, [sp, #8]
10041a2c:	1ad2      	subs	r2, r2, r3
10041a2e:	4095      	lsls	r5, r2
10041a30:	40d9      	lsrs	r1, r3
10041a32:	430d      	orrs	r5, r1
10041a34:	4661      	mov	r1, ip
10041a36:	4091      	lsls	r1, r2
10041a38:	000a      	movs	r2, r1
10041a3a:	1e51      	subs	r1, r2, #1
10041a3c:	418a      	sbcs	r2, r1
10041a3e:	4315      	orrs	r5, r2
10041a40:	9a02      	ldr	r2, [sp, #8]
10041a42:	40da      	lsrs	r2, r3
10041a44:	1aa4      	subs	r4, r4, r2
10041a46:	1b45      	subs	r5, r0, r5
10041a48:	42a8      	cmp	r0, r5
10041a4a:	4180      	sbcs	r0, r0
10041a4c:	4240      	negs	r0, r0
10041a4e:	1a24      	subs	r4, r4, r0
10041a50:	0223      	lsls	r3, r4, #8
10041a52:	d400      	bmi.n	10041a56 <__aeabi_dsub+0xca>
10041a54:	e13d      	b.n	10041cd2 <__aeabi_dsub+0x346>
10041a56:	0264      	lsls	r4, r4, #9
10041a58:	0a64      	lsrs	r4, r4, #9
10041a5a:	2c00      	cmp	r4, #0
10041a5c:	d100      	bne.n	10041a60 <__aeabi_dsub+0xd4>
10041a5e:	e147      	b.n	10041cf0 <__aeabi_dsub+0x364>
10041a60:	0020      	movs	r0, r4
10041a62:	f000 fbfb 	bl	1004225c <__clzsi2>
10041a66:	0003      	movs	r3, r0
10041a68:	3b08      	subs	r3, #8
10041a6a:	2120      	movs	r1, #32
10041a6c:	0028      	movs	r0, r5
10041a6e:	1aca      	subs	r2, r1, r3
10041a70:	40d0      	lsrs	r0, r2
10041a72:	409c      	lsls	r4, r3
10041a74:	0002      	movs	r2, r0
10041a76:	409d      	lsls	r5, r3
10041a78:	4322      	orrs	r2, r4
10041a7a:	429f      	cmp	r7, r3
10041a7c:	dd00      	ble.n	10041a80 <__aeabi_dsub+0xf4>
10041a7e:	e177      	b.n	10041d70 <__aeabi_dsub+0x3e4>
10041a80:	1bd8      	subs	r0, r3, r7
10041a82:	3001      	adds	r0, #1
10041a84:	1a09      	subs	r1, r1, r0
10041a86:	002c      	movs	r4, r5
10041a88:	408d      	lsls	r5, r1
10041a8a:	40c4      	lsrs	r4, r0
10041a8c:	1e6b      	subs	r3, r5, #1
10041a8e:	419d      	sbcs	r5, r3
10041a90:	0013      	movs	r3, r2
10041a92:	40c2      	lsrs	r2, r0
10041a94:	408b      	lsls	r3, r1
10041a96:	4325      	orrs	r5, r4
10041a98:	2700      	movs	r7, #0
10041a9a:	0014      	movs	r4, r2
10041a9c:	431d      	orrs	r5, r3
10041a9e:	076b      	lsls	r3, r5, #29
10041aa0:	d009      	beq.n	10041ab6 <__aeabi_dsub+0x12a>
10041aa2:	230f      	movs	r3, #15
10041aa4:	402b      	ands	r3, r5
10041aa6:	2b04      	cmp	r3, #4
10041aa8:	d005      	beq.n	10041ab6 <__aeabi_dsub+0x12a>
10041aaa:	1d2b      	adds	r3, r5, #4
10041aac:	42ab      	cmp	r3, r5
10041aae:	41ad      	sbcs	r5, r5
10041ab0:	426d      	negs	r5, r5
10041ab2:	1964      	adds	r4, r4, r5
10041ab4:	001d      	movs	r5, r3
10041ab6:	0223      	lsls	r3, r4, #8
10041ab8:	d400      	bmi.n	10041abc <__aeabi_dsub+0x130>
10041aba:	e140      	b.n	10041d3e <__aeabi_dsub+0x3b2>
10041abc:	4a88      	ldr	r2, [pc, #544]	@ (10041ce0 <__aeabi_dsub+0x354>)
10041abe:	3701      	adds	r7, #1
10041ac0:	4297      	cmp	r7, r2
10041ac2:	d100      	bne.n	10041ac6 <__aeabi_dsub+0x13a>
10041ac4:	e101      	b.n	10041cca <__aeabi_dsub+0x33e>
10041ac6:	2601      	movs	r6, #1
10041ac8:	4643      	mov	r3, r8
10041aca:	4986      	ldr	r1, [pc, #536]	@ (10041ce4 <__aeabi_dsub+0x358>)
10041acc:	08ed      	lsrs	r5, r5, #3
10041ace:	4021      	ands	r1, r4
10041ad0:	074a      	lsls	r2, r1, #29
10041ad2:	432a      	orrs	r2, r5
10041ad4:	057c      	lsls	r4, r7, #21
10041ad6:	024d      	lsls	r5, r1, #9
10041ad8:	0b2d      	lsrs	r5, r5, #12
10041ada:	0d64      	lsrs	r4, r4, #21
10041adc:	401e      	ands	r6, r3
10041ade:	0524      	lsls	r4, r4, #20
10041ae0:	432c      	orrs	r4, r5
10041ae2:	07f6      	lsls	r6, r6, #31
10041ae4:	4334      	orrs	r4, r6
10041ae6:	0010      	movs	r0, r2
10041ae8:	0021      	movs	r1, r4
10041aea:	b005      	add	sp, #20
10041aec:	bcf0      	pop	{r4, r5, r6, r7}
10041aee:	46bb      	mov	fp, r7
10041af0:	46b2      	mov	sl, r6
10041af2:	46a9      	mov	r9, r5
10041af4:	46a0      	mov	r8, r4
10041af6:	bdf0      	pop	{r4, r5, r6, r7, pc}
10041af8:	2d00      	cmp	r5, #0
10041afa:	dc00      	bgt.n	10041afe <__aeabi_dsub+0x172>
10041afc:	e2d0      	b.n	100420a0 <__aeabi_dsub+0x714>
10041afe:	4649      	mov	r1, r9
10041b00:	2900      	cmp	r1, #0
10041b02:	d000      	beq.n	10041b06 <__aeabi_dsub+0x17a>
10041b04:	e0d4      	b.n	10041cb0 <__aeabi_dsub+0x324>
10041b06:	4661      	mov	r1, ip
10041b08:	9b02      	ldr	r3, [sp, #8]
10041b0a:	4319      	orrs	r1, r3
10041b0c:	d100      	bne.n	10041b10 <__aeabi_dsub+0x184>
10041b0e:	e12b      	b.n	10041d68 <__aeabi_dsub+0x3dc>
10041b10:	1e69      	subs	r1, r5, #1
10041b12:	2d01      	cmp	r5, #1
10041b14:	d100      	bne.n	10041b18 <__aeabi_dsub+0x18c>
10041b16:	e1d9      	b.n	10041ecc <__aeabi_dsub+0x540>
10041b18:	4295      	cmp	r5, r2
10041b1a:	d100      	bne.n	10041b1e <__aeabi_dsub+0x192>
10041b1c:	e10a      	b.n	10041d34 <__aeabi_dsub+0x3a8>
10041b1e:	2501      	movs	r5, #1
10041b20:	2938      	cmp	r1, #56	@ 0x38
10041b22:	dc17      	bgt.n	10041b54 <__aeabi_dsub+0x1c8>
10041b24:	468a      	mov	sl, r1
10041b26:	4653      	mov	r3, sl
10041b28:	2b1f      	cmp	r3, #31
10041b2a:	dd00      	ble.n	10041b2e <__aeabi_dsub+0x1a2>
10041b2c:	e1e7      	b.n	10041efe <__aeabi_dsub+0x572>
10041b2e:	2220      	movs	r2, #32
10041b30:	1ad2      	subs	r2, r2, r3
10041b32:	9b02      	ldr	r3, [sp, #8]
10041b34:	4661      	mov	r1, ip
10041b36:	4093      	lsls	r3, r2
10041b38:	001d      	movs	r5, r3
10041b3a:	4653      	mov	r3, sl
10041b3c:	40d9      	lsrs	r1, r3
10041b3e:	4663      	mov	r3, ip
10041b40:	4093      	lsls	r3, r2
10041b42:	001a      	movs	r2, r3
10041b44:	430d      	orrs	r5, r1
10041b46:	1e51      	subs	r1, r2, #1
10041b48:	418a      	sbcs	r2, r1
10041b4a:	4653      	mov	r3, sl
10041b4c:	4315      	orrs	r5, r2
10041b4e:	9a02      	ldr	r2, [sp, #8]
10041b50:	40da      	lsrs	r2, r3
10041b52:	18a4      	adds	r4, r4, r2
10041b54:	182d      	adds	r5, r5, r0
10041b56:	4285      	cmp	r5, r0
10041b58:	4180      	sbcs	r0, r0
10041b5a:	4240      	negs	r0, r0
10041b5c:	1824      	adds	r4, r4, r0
10041b5e:	0223      	lsls	r3, r4, #8
10041b60:	d400      	bmi.n	10041b64 <__aeabi_dsub+0x1d8>
10041b62:	e0b6      	b.n	10041cd2 <__aeabi_dsub+0x346>
10041b64:	4b5e      	ldr	r3, [pc, #376]	@ (10041ce0 <__aeabi_dsub+0x354>)
10041b66:	3701      	adds	r7, #1
10041b68:	429f      	cmp	r7, r3
10041b6a:	d100      	bne.n	10041b6e <__aeabi_dsub+0x1e2>
10041b6c:	e0ad      	b.n	10041cca <__aeabi_dsub+0x33e>
10041b6e:	2101      	movs	r1, #1
10041b70:	4b5c      	ldr	r3, [pc, #368]	@ (10041ce4 <__aeabi_dsub+0x358>)
10041b72:	086a      	lsrs	r2, r5, #1
10041b74:	401c      	ands	r4, r3
10041b76:	4029      	ands	r1, r5
10041b78:	430a      	orrs	r2, r1
10041b7a:	07e5      	lsls	r5, r4, #31
10041b7c:	4315      	orrs	r5, r2
10041b7e:	0864      	lsrs	r4, r4, #1
10041b80:	e78d      	b.n	10041a9e <__aeabi_dsub+0x112>
10041b82:	4a59      	ldr	r2, [pc, #356]	@ (10041ce8 <__aeabi_dsub+0x35c>)
10041b84:	9b02      	ldr	r3, [sp, #8]
10041b86:	4692      	mov	sl, r2
10041b88:	4662      	mov	r2, ip
10041b8a:	44ba      	add	sl, r7
10041b8c:	431a      	orrs	r2, r3
10041b8e:	d02c      	beq.n	10041bea <__aeabi_dsub+0x25e>
10041b90:	428e      	cmp	r6, r1
10041b92:	d02e      	beq.n	10041bf2 <__aeabi_dsub+0x266>
10041b94:	4652      	mov	r2, sl
10041b96:	2a00      	cmp	r2, #0
10041b98:	d060      	beq.n	10041c5c <__aeabi_dsub+0x2d0>
10041b9a:	2f00      	cmp	r7, #0
10041b9c:	d100      	bne.n	10041ba0 <__aeabi_dsub+0x214>
10041b9e:	e0db      	b.n	10041d58 <__aeabi_dsub+0x3cc>
10041ba0:	4663      	mov	r3, ip
10041ba2:	000e      	movs	r6, r1
10041ba4:	9c02      	ldr	r4, [sp, #8]
10041ba6:	08d8      	lsrs	r0, r3, #3
10041ba8:	0762      	lsls	r2, r4, #29
10041baa:	4302      	orrs	r2, r0
10041bac:	08e4      	lsrs	r4, r4, #3
10041bae:	0013      	movs	r3, r2
10041bb0:	4323      	orrs	r3, r4
10041bb2:	d100      	bne.n	10041bb6 <__aeabi_dsub+0x22a>
10041bb4:	e254      	b.n	10042060 <__aeabi_dsub+0x6d4>
10041bb6:	2580      	movs	r5, #128	@ 0x80
10041bb8:	032d      	lsls	r5, r5, #12
10041bba:	4325      	orrs	r5, r4
10041bbc:	032d      	lsls	r5, r5, #12
10041bbe:	4c48      	ldr	r4, [pc, #288]	@ (10041ce0 <__aeabi_dsub+0x354>)
10041bc0:	0b2d      	lsrs	r5, r5, #12
10041bc2:	e78c      	b.n	10041ade <__aeabi_dsub+0x152>
10041bc4:	4661      	mov	r1, ip
10041bc6:	9b02      	ldr	r3, [sp, #8]
10041bc8:	4319      	orrs	r1, r3
10041bca:	d100      	bne.n	10041bce <__aeabi_dsub+0x242>
10041bcc:	e0cc      	b.n	10041d68 <__aeabi_dsub+0x3dc>
10041bce:	0029      	movs	r1, r5
10041bd0:	3901      	subs	r1, #1
10041bd2:	2d01      	cmp	r5, #1
10041bd4:	d100      	bne.n	10041bd8 <__aeabi_dsub+0x24c>
10041bd6:	e188      	b.n	10041eea <__aeabi_dsub+0x55e>
10041bd8:	4295      	cmp	r5, r2
10041bda:	d100      	bne.n	10041bde <__aeabi_dsub+0x252>
10041bdc:	e0aa      	b.n	10041d34 <__aeabi_dsub+0x3a8>
10041bde:	2501      	movs	r5, #1
10041be0:	2938      	cmp	r1, #56	@ 0x38
10041be2:	dd00      	ble.n	10041be6 <__aeabi_dsub+0x25a>
10041be4:	e72f      	b.n	10041a46 <__aeabi_dsub+0xba>
10041be6:	468a      	mov	sl, r1
10041be8:	e718      	b.n	10041a1c <__aeabi_dsub+0x90>
10041bea:	2201      	movs	r2, #1
10041bec:	4051      	eors	r1, r2
10041bee:	428e      	cmp	r6, r1
10041bf0:	d1d0      	bne.n	10041b94 <__aeabi_dsub+0x208>
10041bf2:	4653      	mov	r3, sl
10041bf4:	2b00      	cmp	r3, #0
10041bf6:	d100      	bne.n	10041bfa <__aeabi_dsub+0x26e>
10041bf8:	e0be      	b.n	10041d78 <__aeabi_dsub+0x3ec>
10041bfa:	2f00      	cmp	r7, #0
10041bfc:	d000      	beq.n	10041c00 <__aeabi_dsub+0x274>
10041bfe:	e138      	b.n	10041e72 <__aeabi_dsub+0x4e6>
10041c00:	46ca      	mov	sl, r9
10041c02:	0022      	movs	r2, r4
10041c04:	4302      	orrs	r2, r0
10041c06:	d100      	bne.n	10041c0a <__aeabi_dsub+0x27e>
10041c08:	e1e2      	b.n	10041fd0 <__aeabi_dsub+0x644>
10041c0a:	4653      	mov	r3, sl
10041c0c:	1e59      	subs	r1, r3, #1
10041c0e:	2b01      	cmp	r3, #1
10041c10:	d100      	bne.n	10041c14 <__aeabi_dsub+0x288>
10041c12:	e20d      	b.n	10042030 <__aeabi_dsub+0x6a4>
10041c14:	4a32      	ldr	r2, [pc, #200]	@ (10041ce0 <__aeabi_dsub+0x354>)
10041c16:	4592      	cmp	sl, r2
10041c18:	d100      	bne.n	10041c1c <__aeabi_dsub+0x290>
10041c1a:	e1d2      	b.n	10041fc2 <__aeabi_dsub+0x636>
10041c1c:	2701      	movs	r7, #1
10041c1e:	2938      	cmp	r1, #56	@ 0x38
10041c20:	dc13      	bgt.n	10041c4a <__aeabi_dsub+0x2be>
10041c22:	291f      	cmp	r1, #31
10041c24:	dd00      	ble.n	10041c28 <__aeabi_dsub+0x29c>
10041c26:	e1ee      	b.n	10042006 <__aeabi_dsub+0x67a>
10041c28:	2220      	movs	r2, #32
10041c2a:	9b02      	ldr	r3, [sp, #8]
10041c2c:	1a52      	subs	r2, r2, r1
10041c2e:	0025      	movs	r5, r4
10041c30:	0007      	movs	r7, r0
10041c32:	469a      	mov	sl, r3
10041c34:	40cc      	lsrs	r4, r1
10041c36:	4090      	lsls	r0, r2
10041c38:	4095      	lsls	r5, r2
10041c3a:	40cf      	lsrs	r7, r1
10041c3c:	44a2      	add	sl, r4
10041c3e:	1e42      	subs	r2, r0, #1
10041c40:	4190      	sbcs	r0, r2
10041c42:	4653      	mov	r3, sl
10041c44:	432f      	orrs	r7, r5
10041c46:	4307      	orrs	r7, r0
10041c48:	9302      	str	r3, [sp, #8]
10041c4a:	003d      	movs	r5, r7
10041c4c:	4465      	add	r5, ip
10041c4e:	4565      	cmp	r5, ip
10041c50:	4192      	sbcs	r2, r2
10041c52:	9b02      	ldr	r3, [sp, #8]
10041c54:	4252      	negs	r2, r2
10041c56:	464f      	mov	r7, r9
10041c58:	18d4      	adds	r4, r2, r3
10041c5a:	e780      	b.n	10041b5e <__aeabi_dsub+0x1d2>
10041c5c:	4a23      	ldr	r2, [pc, #140]	@ (10041cec <__aeabi_dsub+0x360>)
10041c5e:	1c7d      	adds	r5, r7, #1
10041c60:	4215      	tst	r5, r2
10041c62:	d000      	beq.n	10041c66 <__aeabi_dsub+0x2da>
10041c64:	e0aa      	b.n	10041dbc <__aeabi_dsub+0x430>
10041c66:	4662      	mov	r2, ip
10041c68:	0025      	movs	r5, r4
10041c6a:	9b02      	ldr	r3, [sp, #8]
10041c6c:	4305      	orrs	r5, r0
10041c6e:	431a      	orrs	r2, r3
10041c70:	2f00      	cmp	r7, #0
10041c72:	d000      	beq.n	10041c76 <__aeabi_dsub+0x2ea>
10041c74:	e0f5      	b.n	10041e62 <__aeabi_dsub+0x4d6>
10041c76:	2d00      	cmp	r5, #0
10041c78:	d100      	bne.n	10041c7c <__aeabi_dsub+0x2f0>
10041c7a:	e16b      	b.n	10041f54 <__aeabi_dsub+0x5c8>
10041c7c:	2a00      	cmp	r2, #0
10041c7e:	d100      	bne.n	10041c82 <__aeabi_dsub+0x2f6>
10041c80:	e152      	b.n	10041f28 <__aeabi_dsub+0x59c>
10041c82:	4663      	mov	r3, ip
10041c84:	1ac5      	subs	r5, r0, r3
10041c86:	9b02      	ldr	r3, [sp, #8]
10041c88:	1ae2      	subs	r2, r4, r3
10041c8a:	42a8      	cmp	r0, r5
10041c8c:	419b      	sbcs	r3, r3
10041c8e:	425b      	negs	r3, r3
10041c90:	1ad3      	subs	r3, r2, r3
10041c92:	021a      	lsls	r2, r3, #8
10041c94:	d400      	bmi.n	10041c98 <__aeabi_dsub+0x30c>
10041c96:	e1d5      	b.n	10042044 <__aeabi_dsub+0x6b8>
10041c98:	4663      	mov	r3, ip
10041c9a:	1a1d      	subs	r5, r3, r0
10041c9c:	45ac      	cmp	ip, r5
10041c9e:	4192      	sbcs	r2, r2
10041ca0:	2601      	movs	r6, #1
10041ca2:	9b02      	ldr	r3, [sp, #8]
10041ca4:	4252      	negs	r2, r2
10041ca6:	1b1c      	subs	r4, r3, r4
10041ca8:	4688      	mov	r8, r1
10041caa:	1aa4      	subs	r4, r4, r2
10041cac:	400e      	ands	r6, r1
10041cae:	e6f6      	b.n	10041a9e <__aeabi_dsub+0x112>
10041cb0:	4297      	cmp	r7, r2
10041cb2:	d03f      	beq.n	10041d34 <__aeabi_dsub+0x3a8>
10041cb4:	4652      	mov	r2, sl
10041cb6:	2501      	movs	r5, #1
10041cb8:	2a38      	cmp	r2, #56	@ 0x38
10041cba:	dd00      	ble.n	10041cbe <__aeabi_dsub+0x332>
10041cbc:	e74a      	b.n	10041b54 <__aeabi_dsub+0x1c8>
10041cbe:	2280      	movs	r2, #128	@ 0x80
10041cc0:	9b02      	ldr	r3, [sp, #8]
10041cc2:	0412      	lsls	r2, r2, #16
10041cc4:	4313      	orrs	r3, r2
10041cc6:	9302      	str	r3, [sp, #8]
10041cc8:	e72d      	b.n	10041b26 <__aeabi_dsub+0x19a>
10041cca:	003c      	movs	r4, r7
10041ccc:	2500      	movs	r5, #0
10041cce:	2200      	movs	r2, #0
10041cd0:	e705      	b.n	10041ade <__aeabi_dsub+0x152>
10041cd2:	2307      	movs	r3, #7
10041cd4:	402b      	ands	r3, r5
10041cd6:	2b00      	cmp	r3, #0
10041cd8:	d000      	beq.n	10041cdc <__aeabi_dsub+0x350>
10041cda:	e6e2      	b.n	10041aa2 <__aeabi_dsub+0x116>
10041cdc:	e06b      	b.n	10041db6 <__aeabi_dsub+0x42a>
10041cde:	46c0      	nop			@ (mov r8, r8)
10041ce0:	000007ff 	.word	0x000007ff
10041ce4:	ff7fffff 	.word	0xff7fffff
10041ce8:	fffff801 	.word	0xfffff801
10041cec:	000007fe 	.word	0x000007fe
10041cf0:	0028      	movs	r0, r5
10041cf2:	f000 fab3 	bl	1004225c <__clzsi2>
10041cf6:	0003      	movs	r3, r0
10041cf8:	3318      	adds	r3, #24
10041cfa:	2b1f      	cmp	r3, #31
10041cfc:	dc00      	bgt.n	10041d00 <__aeabi_dsub+0x374>
10041cfe:	e6b4      	b.n	10041a6a <__aeabi_dsub+0xde>
10041d00:	002a      	movs	r2, r5
10041d02:	3808      	subs	r0, #8
10041d04:	4082      	lsls	r2, r0
10041d06:	429f      	cmp	r7, r3
10041d08:	dd00      	ble.n	10041d0c <__aeabi_dsub+0x380>
10041d0a:	e0b9      	b.n	10041e80 <__aeabi_dsub+0x4f4>
10041d0c:	1bdb      	subs	r3, r3, r7
10041d0e:	1c58      	adds	r0, r3, #1
10041d10:	281f      	cmp	r0, #31
10041d12:	dc00      	bgt.n	10041d16 <__aeabi_dsub+0x38a>
10041d14:	e1a0      	b.n	10042058 <__aeabi_dsub+0x6cc>
10041d16:	0015      	movs	r5, r2
10041d18:	3b1f      	subs	r3, #31
10041d1a:	40dd      	lsrs	r5, r3
10041d1c:	2820      	cmp	r0, #32
10041d1e:	d005      	beq.n	10041d2c <__aeabi_dsub+0x3a0>
10041d20:	2340      	movs	r3, #64	@ 0x40
10041d22:	1a1b      	subs	r3, r3, r0
10041d24:	409a      	lsls	r2, r3
10041d26:	1e53      	subs	r3, r2, #1
10041d28:	419a      	sbcs	r2, r3
10041d2a:	4315      	orrs	r5, r2
10041d2c:	2307      	movs	r3, #7
10041d2e:	2700      	movs	r7, #0
10041d30:	402b      	ands	r3, r5
10041d32:	e7d0      	b.n	10041cd6 <__aeabi_dsub+0x34a>
10041d34:	08c0      	lsrs	r0, r0, #3
10041d36:	0762      	lsls	r2, r4, #29
10041d38:	4302      	orrs	r2, r0
10041d3a:	08e4      	lsrs	r4, r4, #3
10041d3c:	e737      	b.n	10041bae <__aeabi_dsub+0x222>
10041d3e:	08ea      	lsrs	r2, r5, #3
10041d40:	0763      	lsls	r3, r4, #29
10041d42:	431a      	orrs	r2, r3
10041d44:	4bd3      	ldr	r3, [pc, #844]	@ (10042094 <__aeabi_dsub+0x708>)
10041d46:	08e4      	lsrs	r4, r4, #3
10041d48:	429f      	cmp	r7, r3
10041d4a:	d100      	bne.n	10041d4e <__aeabi_dsub+0x3c2>
10041d4c:	e72f      	b.n	10041bae <__aeabi_dsub+0x222>
10041d4e:	0324      	lsls	r4, r4, #12
10041d50:	0b25      	lsrs	r5, r4, #12
10041d52:	057c      	lsls	r4, r7, #21
10041d54:	0d64      	lsrs	r4, r4, #21
10041d56:	e6c2      	b.n	10041ade <__aeabi_dsub+0x152>
10041d58:	46ca      	mov	sl, r9
10041d5a:	0022      	movs	r2, r4
10041d5c:	4302      	orrs	r2, r0
10041d5e:	d158      	bne.n	10041e12 <__aeabi_dsub+0x486>
10041d60:	4663      	mov	r3, ip
10041d62:	000e      	movs	r6, r1
10041d64:	9c02      	ldr	r4, [sp, #8]
10041d66:	9303      	str	r3, [sp, #12]
10041d68:	9b03      	ldr	r3, [sp, #12]
10041d6a:	4657      	mov	r7, sl
10041d6c:	08da      	lsrs	r2, r3, #3
10041d6e:	e7e7      	b.n	10041d40 <__aeabi_dsub+0x3b4>
10041d70:	4cc9      	ldr	r4, [pc, #804]	@ (10042098 <__aeabi_dsub+0x70c>)
10041d72:	1aff      	subs	r7, r7, r3
10041d74:	4014      	ands	r4, r2
10041d76:	e692      	b.n	10041a9e <__aeabi_dsub+0x112>
10041d78:	4dc8      	ldr	r5, [pc, #800]	@ (1004209c <__aeabi_dsub+0x710>)
10041d7a:	1c7a      	adds	r2, r7, #1
10041d7c:	422a      	tst	r2, r5
10041d7e:	d000      	beq.n	10041d82 <__aeabi_dsub+0x3f6>
10041d80:	e084      	b.n	10041e8c <__aeabi_dsub+0x500>
10041d82:	0022      	movs	r2, r4
10041d84:	4302      	orrs	r2, r0
10041d86:	2f00      	cmp	r7, #0
10041d88:	d000      	beq.n	10041d8c <__aeabi_dsub+0x400>
10041d8a:	e0ef      	b.n	10041f6c <__aeabi_dsub+0x5e0>
10041d8c:	2a00      	cmp	r2, #0
10041d8e:	d100      	bne.n	10041d92 <__aeabi_dsub+0x406>
10041d90:	e0e5      	b.n	10041f5e <__aeabi_dsub+0x5d2>
10041d92:	4662      	mov	r2, ip
10041d94:	9902      	ldr	r1, [sp, #8]
10041d96:	430a      	orrs	r2, r1
10041d98:	d100      	bne.n	10041d9c <__aeabi_dsub+0x410>
10041d9a:	e0c5      	b.n	10041f28 <__aeabi_dsub+0x59c>
10041d9c:	4663      	mov	r3, ip
10041d9e:	18c5      	adds	r5, r0, r3
10041da0:	468c      	mov	ip, r1
10041da2:	4285      	cmp	r5, r0
10041da4:	4180      	sbcs	r0, r0
10041da6:	4464      	add	r4, ip
10041da8:	4240      	negs	r0, r0
10041daa:	1824      	adds	r4, r4, r0
10041dac:	0223      	lsls	r3, r4, #8
10041dae:	d502      	bpl.n	10041db6 <__aeabi_dsub+0x42a>
10041db0:	4bb9      	ldr	r3, [pc, #740]	@ (10042098 <__aeabi_dsub+0x70c>)
10041db2:	3701      	adds	r7, #1
10041db4:	401c      	ands	r4, r3
10041db6:	46ba      	mov	sl, r7
10041db8:	9503      	str	r5, [sp, #12]
10041dba:	e7d5      	b.n	10041d68 <__aeabi_dsub+0x3dc>
10041dbc:	4662      	mov	r2, ip
10041dbe:	1a85      	subs	r5, r0, r2
10041dc0:	42a8      	cmp	r0, r5
10041dc2:	4192      	sbcs	r2, r2
10041dc4:	4252      	negs	r2, r2
10041dc6:	4691      	mov	r9, r2
10041dc8:	9b02      	ldr	r3, [sp, #8]
10041dca:	1ae3      	subs	r3, r4, r3
10041dcc:	001a      	movs	r2, r3
10041dce:	464b      	mov	r3, r9
10041dd0:	1ad2      	subs	r2, r2, r3
10041dd2:	0013      	movs	r3, r2
10041dd4:	4691      	mov	r9, r2
10041dd6:	021a      	lsls	r2, r3, #8
10041dd8:	d46c      	bmi.n	10041eb4 <__aeabi_dsub+0x528>
10041dda:	464a      	mov	r2, r9
10041ddc:	464c      	mov	r4, r9
10041dde:	432a      	orrs	r2, r5
10041de0:	d000      	beq.n	10041de4 <__aeabi_dsub+0x458>
10041de2:	e63a      	b.n	10041a5a <__aeabi_dsub+0xce>
10041de4:	2600      	movs	r6, #0
10041de6:	2400      	movs	r4, #0
10041de8:	2500      	movs	r5, #0
10041dea:	e678      	b.n	10041ade <__aeabi_dsub+0x152>
10041dec:	9902      	ldr	r1, [sp, #8]
10041dee:	4653      	mov	r3, sl
10041df0:	000d      	movs	r5, r1
10041df2:	3a20      	subs	r2, #32
10041df4:	40d5      	lsrs	r5, r2
10041df6:	2b20      	cmp	r3, #32
10041df8:	d006      	beq.n	10041e08 <__aeabi_dsub+0x47c>
10041dfa:	2240      	movs	r2, #64	@ 0x40
10041dfc:	1ad2      	subs	r2, r2, r3
10041dfe:	000b      	movs	r3, r1
10041e00:	4093      	lsls	r3, r2
10041e02:	4662      	mov	r2, ip
10041e04:	431a      	orrs	r2, r3
10041e06:	4693      	mov	fp, r2
10041e08:	465b      	mov	r3, fp
10041e0a:	1e5a      	subs	r2, r3, #1
10041e0c:	4193      	sbcs	r3, r2
10041e0e:	431d      	orrs	r5, r3
10041e10:	e619      	b.n	10041a46 <__aeabi_dsub+0xba>
10041e12:	4653      	mov	r3, sl
10041e14:	1e5a      	subs	r2, r3, #1
10041e16:	2b01      	cmp	r3, #1
10041e18:	d100      	bne.n	10041e1c <__aeabi_dsub+0x490>
10041e1a:	e0c6      	b.n	10041faa <__aeabi_dsub+0x61e>
10041e1c:	4e9d      	ldr	r6, [pc, #628]	@ (10042094 <__aeabi_dsub+0x708>)
10041e1e:	45b2      	cmp	sl, r6
10041e20:	d100      	bne.n	10041e24 <__aeabi_dsub+0x498>
10041e22:	e6bd      	b.n	10041ba0 <__aeabi_dsub+0x214>
10041e24:	4688      	mov	r8, r1
10041e26:	000e      	movs	r6, r1
10041e28:	2501      	movs	r5, #1
10041e2a:	2a38      	cmp	r2, #56	@ 0x38
10041e2c:	dc10      	bgt.n	10041e50 <__aeabi_dsub+0x4c4>
10041e2e:	2a1f      	cmp	r2, #31
10041e30:	dc7f      	bgt.n	10041f32 <__aeabi_dsub+0x5a6>
10041e32:	2120      	movs	r1, #32
10041e34:	0025      	movs	r5, r4
10041e36:	1a89      	subs	r1, r1, r2
10041e38:	0007      	movs	r7, r0
10041e3a:	4088      	lsls	r0, r1
10041e3c:	408d      	lsls	r5, r1
10041e3e:	40d7      	lsrs	r7, r2
10041e40:	40d4      	lsrs	r4, r2
10041e42:	1e41      	subs	r1, r0, #1
10041e44:	4188      	sbcs	r0, r1
10041e46:	9b02      	ldr	r3, [sp, #8]
10041e48:	433d      	orrs	r5, r7
10041e4a:	1b1b      	subs	r3, r3, r4
10041e4c:	4305      	orrs	r5, r0
10041e4e:	9302      	str	r3, [sp, #8]
10041e50:	4662      	mov	r2, ip
10041e52:	1b55      	subs	r5, r2, r5
10041e54:	45ac      	cmp	ip, r5
10041e56:	4192      	sbcs	r2, r2
10041e58:	9b02      	ldr	r3, [sp, #8]
10041e5a:	4252      	negs	r2, r2
10041e5c:	464f      	mov	r7, r9
10041e5e:	1a9c      	subs	r4, r3, r2
10041e60:	e5f6      	b.n	10041a50 <__aeabi_dsub+0xc4>
10041e62:	2d00      	cmp	r5, #0
10041e64:	d000      	beq.n	10041e68 <__aeabi_dsub+0x4dc>
10041e66:	e0b7      	b.n	10041fd8 <__aeabi_dsub+0x64c>
10041e68:	2a00      	cmp	r2, #0
10041e6a:	d100      	bne.n	10041e6e <__aeabi_dsub+0x4e2>
10041e6c:	e0f0      	b.n	10042050 <__aeabi_dsub+0x6c4>
10041e6e:	2601      	movs	r6, #1
10041e70:	400e      	ands	r6, r1
10041e72:	4663      	mov	r3, ip
10041e74:	9802      	ldr	r0, [sp, #8]
10041e76:	08d9      	lsrs	r1, r3, #3
10041e78:	0742      	lsls	r2, r0, #29
10041e7a:	430a      	orrs	r2, r1
10041e7c:	08c4      	lsrs	r4, r0, #3
10041e7e:	e696      	b.n	10041bae <__aeabi_dsub+0x222>
10041e80:	4c85      	ldr	r4, [pc, #532]	@ (10042098 <__aeabi_dsub+0x70c>)
10041e82:	1aff      	subs	r7, r7, r3
10041e84:	4014      	ands	r4, r2
10041e86:	0762      	lsls	r2, r4, #29
10041e88:	08e4      	lsrs	r4, r4, #3
10041e8a:	e760      	b.n	10041d4e <__aeabi_dsub+0x3c2>
10041e8c:	4981      	ldr	r1, [pc, #516]	@ (10042094 <__aeabi_dsub+0x708>)
10041e8e:	428a      	cmp	r2, r1
10041e90:	d100      	bne.n	10041e94 <__aeabi_dsub+0x508>
10041e92:	e0c9      	b.n	10042028 <__aeabi_dsub+0x69c>
10041e94:	4663      	mov	r3, ip
10041e96:	18c1      	adds	r1, r0, r3
10041e98:	4281      	cmp	r1, r0
10041e9a:	4180      	sbcs	r0, r0
10041e9c:	9b02      	ldr	r3, [sp, #8]
10041e9e:	4240      	negs	r0, r0
10041ea0:	18e3      	adds	r3, r4, r3
10041ea2:	181b      	adds	r3, r3, r0
10041ea4:	07dd      	lsls	r5, r3, #31
10041ea6:	085c      	lsrs	r4, r3, #1
10041ea8:	2307      	movs	r3, #7
10041eaa:	0849      	lsrs	r1, r1, #1
10041eac:	430d      	orrs	r5, r1
10041eae:	0017      	movs	r7, r2
10041eb0:	402b      	ands	r3, r5
10041eb2:	e710      	b.n	10041cd6 <__aeabi_dsub+0x34a>
10041eb4:	4663      	mov	r3, ip
10041eb6:	1a1d      	subs	r5, r3, r0
10041eb8:	45ac      	cmp	ip, r5
10041eba:	4192      	sbcs	r2, r2
10041ebc:	2601      	movs	r6, #1
10041ebe:	9b02      	ldr	r3, [sp, #8]
10041ec0:	4252      	negs	r2, r2
10041ec2:	1b1c      	subs	r4, r3, r4
10041ec4:	4688      	mov	r8, r1
10041ec6:	1aa4      	subs	r4, r4, r2
10041ec8:	400e      	ands	r6, r1
10041eca:	e5c6      	b.n	10041a5a <__aeabi_dsub+0xce>
10041ecc:	4663      	mov	r3, ip
10041ece:	18c5      	adds	r5, r0, r3
10041ed0:	9b02      	ldr	r3, [sp, #8]
10041ed2:	4285      	cmp	r5, r0
10041ed4:	4180      	sbcs	r0, r0
10041ed6:	469c      	mov	ip, r3
10041ed8:	4240      	negs	r0, r0
10041eda:	4464      	add	r4, ip
10041edc:	1824      	adds	r4, r4, r0
10041ede:	2701      	movs	r7, #1
10041ee0:	0223      	lsls	r3, r4, #8
10041ee2:	d400      	bmi.n	10041ee6 <__aeabi_dsub+0x55a>
10041ee4:	e6f5      	b.n	10041cd2 <__aeabi_dsub+0x346>
10041ee6:	2702      	movs	r7, #2
10041ee8:	e641      	b.n	10041b6e <__aeabi_dsub+0x1e2>
10041eea:	4663      	mov	r3, ip
10041eec:	1ac5      	subs	r5, r0, r3
10041eee:	42a8      	cmp	r0, r5
10041ef0:	4180      	sbcs	r0, r0
10041ef2:	9b02      	ldr	r3, [sp, #8]
10041ef4:	4240      	negs	r0, r0
10041ef6:	1ae4      	subs	r4, r4, r3
10041ef8:	2701      	movs	r7, #1
10041efa:	1a24      	subs	r4, r4, r0
10041efc:	e5a8      	b.n	10041a50 <__aeabi_dsub+0xc4>
10041efe:	9d02      	ldr	r5, [sp, #8]
10041f00:	4652      	mov	r2, sl
10041f02:	002b      	movs	r3, r5
10041f04:	3a20      	subs	r2, #32
10041f06:	40d3      	lsrs	r3, r2
10041f08:	0019      	movs	r1, r3
10041f0a:	4653      	mov	r3, sl
10041f0c:	2b20      	cmp	r3, #32
10041f0e:	d006      	beq.n	10041f1e <__aeabi_dsub+0x592>
10041f10:	2240      	movs	r2, #64	@ 0x40
10041f12:	1ad2      	subs	r2, r2, r3
10041f14:	002b      	movs	r3, r5
10041f16:	4093      	lsls	r3, r2
10041f18:	4662      	mov	r2, ip
10041f1a:	431a      	orrs	r2, r3
10041f1c:	4693      	mov	fp, r2
10041f1e:	465d      	mov	r5, fp
10041f20:	1e6b      	subs	r3, r5, #1
10041f22:	419d      	sbcs	r5, r3
10041f24:	430d      	orrs	r5, r1
10041f26:	e615      	b.n	10041b54 <__aeabi_dsub+0x1c8>
10041f28:	0762      	lsls	r2, r4, #29
10041f2a:	08c0      	lsrs	r0, r0, #3
10041f2c:	4302      	orrs	r2, r0
10041f2e:	08e4      	lsrs	r4, r4, #3
10041f30:	e70d      	b.n	10041d4e <__aeabi_dsub+0x3c2>
10041f32:	0011      	movs	r1, r2
10041f34:	0027      	movs	r7, r4
10041f36:	3920      	subs	r1, #32
10041f38:	40cf      	lsrs	r7, r1
10041f3a:	2a20      	cmp	r2, #32
10041f3c:	d005      	beq.n	10041f4a <__aeabi_dsub+0x5be>
10041f3e:	2140      	movs	r1, #64	@ 0x40
10041f40:	1a8a      	subs	r2, r1, r2
10041f42:	4094      	lsls	r4, r2
10041f44:	0025      	movs	r5, r4
10041f46:	4305      	orrs	r5, r0
10041f48:	9503      	str	r5, [sp, #12]
10041f4a:	9d03      	ldr	r5, [sp, #12]
10041f4c:	1e6a      	subs	r2, r5, #1
10041f4e:	4195      	sbcs	r5, r2
10041f50:	433d      	orrs	r5, r7
10041f52:	e77d      	b.n	10041e50 <__aeabi_dsub+0x4c4>
10041f54:	2a00      	cmp	r2, #0
10041f56:	d100      	bne.n	10041f5a <__aeabi_dsub+0x5ce>
10041f58:	e744      	b.n	10041de4 <__aeabi_dsub+0x458>
10041f5a:	2601      	movs	r6, #1
10041f5c:	400e      	ands	r6, r1
10041f5e:	4663      	mov	r3, ip
10041f60:	08d9      	lsrs	r1, r3, #3
10041f62:	9b02      	ldr	r3, [sp, #8]
10041f64:	075a      	lsls	r2, r3, #29
10041f66:	430a      	orrs	r2, r1
10041f68:	08dc      	lsrs	r4, r3, #3
10041f6a:	e6f0      	b.n	10041d4e <__aeabi_dsub+0x3c2>
10041f6c:	2a00      	cmp	r2, #0
10041f6e:	d028      	beq.n	10041fc2 <__aeabi_dsub+0x636>
10041f70:	4662      	mov	r2, ip
10041f72:	9f02      	ldr	r7, [sp, #8]
10041f74:	08c0      	lsrs	r0, r0, #3
10041f76:	433a      	orrs	r2, r7
10041f78:	d100      	bne.n	10041f7c <__aeabi_dsub+0x5f0>
10041f7a:	e6dc      	b.n	10041d36 <__aeabi_dsub+0x3aa>
10041f7c:	0762      	lsls	r2, r4, #29
10041f7e:	4310      	orrs	r0, r2
10041f80:	2280      	movs	r2, #128	@ 0x80
10041f82:	08e4      	lsrs	r4, r4, #3
10041f84:	0312      	lsls	r2, r2, #12
10041f86:	4214      	tst	r4, r2
10041f88:	d009      	beq.n	10041f9e <__aeabi_dsub+0x612>
10041f8a:	08fd      	lsrs	r5, r7, #3
10041f8c:	4215      	tst	r5, r2
10041f8e:	d106      	bne.n	10041f9e <__aeabi_dsub+0x612>
10041f90:	4663      	mov	r3, ip
10041f92:	2601      	movs	r6, #1
10041f94:	002c      	movs	r4, r5
10041f96:	08d8      	lsrs	r0, r3, #3
10041f98:	077b      	lsls	r3, r7, #29
10041f9a:	4318      	orrs	r0, r3
10041f9c:	400e      	ands	r6, r1
10041f9e:	0f42      	lsrs	r2, r0, #29
10041fa0:	00c0      	lsls	r0, r0, #3
10041fa2:	08c0      	lsrs	r0, r0, #3
10041fa4:	0752      	lsls	r2, r2, #29
10041fa6:	4302      	orrs	r2, r0
10041fa8:	e601      	b.n	10041bae <__aeabi_dsub+0x222>
10041faa:	4663      	mov	r3, ip
10041fac:	1a1d      	subs	r5, r3, r0
10041fae:	45ac      	cmp	ip, r5
10041fb0:	4192      	sbcs	r2, r2
10041fb2:	9b02      	ldr	r3, [sp, #8]
10041fb4:	4252      	negs	r2, r2
10041fb6:	1b1c      	subs	r4, r3, r4
10041fb8:	000e      	movs	r6, r1
10041fba:	4688      	mov	r8, r1
10041fbc:	2701      	movs	r7, #1
10041fbe:	1aa4      	subs	r4, r4, r2
10041fc0:	e546      	b.n	10041a50 <__aeabi_dsub+0xc4>
10041fc2:	4663      	mov	r3, ip
10041fc4:	08d9      	lsrs	r1, r3, #3
10041fc6:	9b02      	ldr	r3, [sp, #8]
10041fc8:	075a      	lsls	r2, r3, #29
10041fca:	430a      	orrs	r2, r1
10041fcc:	08dc      	lsrs	r4, r3, #3
10041fce:	e5ee      	b.n	10041bae <__aeabi_dsub+0x222>
10041fd0:	4663      	mov	r3, ip
10041fd2:	9c02      	ldr	r4, [sp, #8]
10041fd4:	9303      	str	r3, [sp, #12]
10041fd6:	e6c7      	b.n	10041d68 <__aeabi_dsub+0x3dc>
10041fd8:	08c0      	lsrs	r0, r0, #3
10041fda:	2a00      	cmp	r2, #0
10041fdc:	d100      	bne.n	10041fe0 <__aeabi_dsub+0x654>
10041fde:	e6aa      	b.n	10041d36 <__aeabi_dsub+0x3aa>
10041fe0:	0762      	lsls	r2, r4, #29
10041fe2:	4310      	orrs	r0, r2
10041fe4:	2280      	movs	r2, #128	@ 0x80
10041fe6:	08e4      	lsrs	r4, r4, #3
10041fe8:	0312      	lsls	r2, r2, #12
10041fea:	4214      	tst	r4, r2
10041fec:	d0d7      	beq.n	10041f9e <__aeabi_dsub+0x612>
10041fee:	9f02      	ldr	r7, [sp, #8]
10041ff0:	08fd      	lsrs	r5, r7, #3
10041ff2:	4215      	tst	r5, r2
10041ff4:	d1d3      	bne.n	10041f9e <__aeabi_dsub+0x612>
10041ff6:	4663      	mov	r3, ip
10041ff8:	2601      	movs	r6, #1
10041ffa:	08d8      	lsrs	r0, r3, #3
10041ffc:	077b      	lsls	r3, r7, #29
10041ffe:	002c      	movs	r4, r5
10042000:	4318      	orrs	r0, r3
10042002:	400e      	ands	r6, r1
10042004:	e7cb      	b.n	10041f9e <__aeabi_dsub+0x612>
10042006:	000a      	movs	r2, r1
10042008:	0027      	movs	r7, r4
1004200a:	3a20      	subs	r2, #32
1004200c:	40d7      	lsrs	r7, r2
1004200e:	2920      	cmp	r1, #32
10042010:	d005      	beq.n	1004201e <__aeabi_dsub+0x692>
10042012:	2240      	movs	r2, #64	@ 0x40
10042014:	1a52      	subs	r2, r2, r1
10042016:	4094      	lsls	r4, r2
10042018:	0025      	movs	r5, r4
1004201a:	4305      	orrs	r5, r0
1004201c:	9503      	str	r5, [sp, #12]
1004201e:	9d03      	ldr	r5, [sp, #12]
10042020:	1e6a      	subs	r2, r5, #1
10042022:	4195      	sbcs	r5, r2
10042024:	432f      	orrs	r7, r5
10042026:	e610      	b.n	10041c4a <__aeabi_dsub+0x2be>
10042028:	0014      	movs	r4, r2
1004202a:	2500      	movs	r5, #0
1004202c:	2200      	movs	r2, #0
1004202e:	e556      	b.n	10041ade <__aeabi_dsub+0x152>
10042030:	9b02      	ldr	r3, [sp, #8]
10042032:	4460      	add	r0, ip
10042034:	4699      	mov	r9, r3
10042036:	4560      	cmp	r0, ip
10042038:	4192      	sbcs	r2, r2
1004203a:	444c      	add	r4, r9
1004203c:	4252      	negs	r2, r2
1004203e:	0005      	movs	r5, r0
10042040:	18a4      	adds	r4, r4, r2
10042042:	e74c      	b.n	10041ede <__aeabi_dsub+0x552>
10042044:	001a      	movs	r2, r3
10042046:	001c      	movs	r4, r3
10042048:	432a      	orrs	r2, r5
1004204a:	d000      	beq.n	1004204e <__aeabi_dsub+0x6c2>
1004204c:	e6b3      	b.n	10041db6 <__aeabi_dsub+0x42a>
1004204e:	e6c9      	b.n	10041de4 <__aeabi_dsub+0x458>
10042050:	2480      	movs	r4, #128	@ 0x80
10042052:	2600      	movs	r6, #0
10042054:	0324      	lsls	r4, r4, #12
10042056:	e5ae      	b.n	10041bb6 <__aeabi_dsub+0x22a>
10042058:	2120      	movs	r1, #32
1004205a:	2500      	movs	r5, #0
1004205c:	1a09      	subs	r1, r1, r0
1004205e:	e517      	b.n	10041a90 <__aeabi_dsub+0x104>
10042060:	2200      	movs	r2, #0
10042062:	2500      	movs	r5, #0
10042064:	4c0b      	ldr	r4, [pc, #44]	@ (10042094 <__aeabi_dsub+0x708>)
10042066:	e53a      	b.n	10041ade <__aeabi_dsub+0x152>
10042068:	2d00      	cmp	r5, #0
1004206a:	d100      	bne.n	1004206e <__aeabi_dsub+0x6e2>
1004206c:	e5f6      	b.n	10041c5c <__aeabi_dsub+0x2d0>
1004206e:	464b      	mov	r3, r9
10042070:	1bda      	subs	r2, r3, r7
10042072:	4692      	mov	sl, r2
10042074:	2f00      	cmp	r7, #0
10042076:	d100      	bne.n	1004207a <__aeabi_dsub+0x6ee>
10042078:	e66f      	b.n	10041d5a <__aeabi_dsub+0x3ce>
1004207a:	2a38      	cmp	r2, #56	@ 0x38
1004207c:	dc05      	bgt.n	1004208a <__aeabi_dsub+0x6fe>
1004207e:	2680      	movs	r6, #128	@ 0x80
10042080:	0436      	lsls	r6, r6, #16
10042082:	4334      	orrs	r4, r6
10042084:	4688      	mov	r8, r1
10042086:	000e      	movs	r6, r1
10042088:	e6d1      	b.n	10041e2e <__aeabi_dsub+0x4a2>
1004208a:	4688      	mov	r8, r1
1004208c:	000e      	movs	r6, r1
1004208e:	2501      	movs	r5, #1
10042090:	e6de      	b.n	10041e50 <__aeabi_dsub+0x4c4>
10042092:	46c0      	nop			@ (mov r8, r8)
10042094:	000007ff 	.word	0x000007ff
10042098:	ff7fffff 	.word	0xff7fffff
1004209c:	000007fe 	.word	0x000007fe
100420a0:	2d00      	cmp	r5, #0
100420a2:	d100      	bne.n	100420a6 <__aeabi_dsub+0x71a>
100420a4:	e668      	b.n	10041d78 <__aeabi_dsub+0x3ec>
100420a6:	464b      	mov	r3, r9
100420a8:	1bd9      	subs	r1, r3, r7
100420aa:	2f00      	cmp	r7, #0
100420ac:	d101      	bne.n	100420b2 <__aeabi_dsub+0x726>
100420ae:	468a      	mov	sl, r1
100420b0:	e5a7      	b.n	10041c02 <__aeabi_dsub+0x276>
100420b2:	2701      	movs	r7, #1
100420b4:	2938      	cmp	r1, #56	@ 0x38
100420b6:	dd00      	ble.n	100420ba <__aeabi_dsub+0x72e>
100420b8:	e5c7      	b.n	10041c4a <__aeabi_dsub+0x2be>
100420ba:	2280      	movs	r2, #128	@ 0x80
100420bc:	0412      	lsls	r2, r2, #16
100420be:	4314      	orrs	r4, r2
100420c0:	e5af      	b.n	10041c22 <__aeabi_dsub+0x296>
100420c2:	46c0      	nop			@ (mov r8, r8)

100420c4 <__aeabi_d2iz>:
100420c4:	000b      	movs	r3, r1
100420c6:	0002      	movs	r2, r0
100420c8:	b570      	push	{r4, r5, r6, lr}
100420ca:	4d16      	ldr	r5, [pc, #88]	@ (10042124 <__aeabi_d2iz+0x60>)
100420cc:	030c      	lsls	r4, r1, #12
100420ce:	b082      	sub	sp, #8
100420d0:	0049      	lsls	r1, r1, #1
100420d2:	2000      	movs	r0, #0
100420d4:	9200      	str	r2, [sp, #0]
100420d6:	9301      	str	r3, [sp, #4]
100420d8:	0b24      	lsrs	r4, r4, #12
100420da:	0d49      	lsrs	r1, r1, #21
100420dc:	0fde      	lsrs	r6, r3, #31
100420de:	42a9      	cmp	r1, r5
100420e0:	dd04      	ble.n	100420ec <__aeabi_d2iz+0x28>
100420e2:	4811      	ldr	r0, [pc, #68]	@ (10042128 <__aeabi_d2iz+0x64>)
100420e4:	4281      	cmp	r1, r0
100420e6:	dd03      	ble.n	100420f0 <__aeabi_d2iz+0x2c>
100420e8:	4b10      	ldr	r3, [pc, #64]	@ (1004212c <__aeabi_d2iz+0x68>)
100420ea:	18f0      	adds	r0, r6, r3
100420ec:	b002      	add	sp, #8
100420ee:	bd70      	pop	{r4, r5, r6, pc}
100420f0:	2080      	movs	r0, #128	@ 0x80
100420f2:	0340      	lsls	r0, r0, #13
100420f4:	4320      	orrs	r0, r4
100420f6:	4c0e      	ldr	r4, [pc, #56]	@ (10042130 <__aeabi_d2iz+0x6c>)
100420f8:	1a64      	subs	r4, r4, r1
100420fa:	2c1f      	cmp	r4, #31
100420fc:	dd08      	ble.n	10042110 <__aeabi_d2iz+0x4c>
100420fe:	4b0d      	ldr	r3, [pc, #52]	@ (10042134 <__aeabi_d2iz+0x70>)
10042100:	1a5b      	subs	r3, r3, r1
10042102:	40d8      	lsrs	r0, r3
10042104:	0003      	movs	r3, r0
10042106:	4258      	negs	r0, r3
10042108:	2e00      	cmp	r6, #0
1004210a:	d1ef      	bne.n	100420ec <__aeabi_d2iz+0x28>
1004210c:	0018      	movs	r0, r3
1004210e:	e7ed      	b.n	100420ec <__aeabi_d2iz+0x28>
10042110:	4b09      	ldr	r3, [pc, #36]	@ (10042138 <__aeabi_d2iz+0x74>)
10042112:	9a00      	ldr	r2, [sp, #0]
10042114:	469c      	mov	ip, r3
10042116:	0003      	movs	r3, r0
10042118:	4461      	add	r1, ip
1004211a:	408b      	lsls	r3, r1
1004211c:	40e2      	lsrs	r2, r4
1004211e:	4313      	orrs	r3, r2
10042120:	e7f1      	b.n	10042106 <__aeabi_d2iz+0x42>
10042122:	46c0      	nop			@ (mov r8, r8)
10042124:	000003fe 	.word	0x000003fe
10042128:	0000041d 	.word	0x0000041d
1004212c:	7fffffff 	.word	0x7fffffff
10042130:	00000433 	.word	0x00000433
10042134:	00000413 	.word	0x00000413
10042138:	fffffbed 	.word	0xfffffbed

1004213c <__aeabi_i2d>:
1004213c:	b570      	push	{r4, r5, r6, lr}
1004213e:	2800      	cmp	r0, #0
10042140:	d016      	beq.n	10042170 <__aeabi_i2d+0x34>
10042142:	17c3      	asrs	r3, r0, #31
10042144:	18c5      	adds	r5, r0, r3
10042146:	405d      	eors	r5, r3
10042148:	0fc4      	lsrs	r4, r0, #31
1004214a:	0028      	movs	r0, r5
1004214c:	f000 f886 	bl	1004225c <__clzsi2>
10042150:	4b10      	ldr	r3, [pc, #64]	@ (10042194 <__aeabi_i2d+0x58>)
10042152:	1a1b      	subs	r3, r3, r0
10042154:	055b      	lsls	r3, r3, #21
10042156:	0d5b      	lsrs	r3, r3, #21
10042158:	280a      	cmp	r0, #10
1004215a:	dc14      	bgt.n	10042186 <__aeabi_i2d+0x4a>
1004215c:	0002      	movs	r2, r0
1004215e:	002e      	movs	r6, r5
10042160:	3215      	adds	r2, #21
10042162:	4096      	lsls	r6, r2
10042164:	220b      	movs	r2, #11
10042166:	1a12      	subs	r2, r2, r0
10042168:	40d5      	lsrs	r5, r2
1004216a:	032d      	lsls	r5, r5, #12
1004216c:	0b2d      	lsrs	r5, r5, #12
1004216e:	e003      	b.n	10042178 <__aeabi_i2d+0x3c>
10042170:	2400      	movs	r4, #0
10042172:	2300      	movs	r3, #0
10042174:	2500      	movs	r5, #0
10042176:	2600      	movs	r6, #0
10042178:	051b      	lsls	r3, r3, #20
1004217a:	432b      	orrs	r3, r5
1004217c:	07e4      	lsls	r4, r4, #31
1004217e:	4323      	orrs	r3, r4
10042180:	0030      	movs	r0, r6
10042182:	0019      	movs	r1, r3
10042184:	bd70      	pop	{r4, r5, r6, pc}
10042186:	380b      	subs	r0, #11
10042188:	4085      	lsls	r5, r0
1004218a:	032d      	lsls	r5, r5, #12
1004218c:	2600      	movs	r6, #0
1004218e:	0b2d      	lsrs	r5, r5, #12
10042190:	e7f2      	b.n	10042178 <__aeabi_i2d+0x3c>
10042192:	46c0      	nop			@ (mov r8, r8)
10042194:	0000041e 	.word	0x0000041e

10042198 <__aeabi_ui2d>:
10042198:	b510      	push	{r4, lr}
1004219a:	1e04      	subs	r4, r0, #0
1004219c:	d010      	beq.n	100421c0 <__aeabi_ui2d+0x28>
1004219e:	f000 f85d 	bl	1004225c <__clzsi2>
100421a2:	4b0e      	ldr	r3, [pc, #56]	@ (100421dc <__aeabi_ui2d+0x44>)
100421a4:	1a1b      	subs	r3, r3, r0
100421a6:	055b      	lsls	r3, r3, #21
100421a8:	0d5b      	lsrs	r3, r3, #21
100421aa:	280a      	cmp	r0, #10
100421ac:	dc0f      	bgt.n	100421ce <__aeabi_ui2d+0x36>
100421ae:	220b      	movs	r2, #11
100421b0:	0021      	movs	r1, r4
100421b2:	1a12      	subs	r2, r2, r0
100421b4:	40d1      	lsrs	r1, r2
100421b6:	3015      	adds	r0, #21
100421b8:	030a      	lsls	r2, r1, #12
100421ba:	4084      	lsls	r4, r0
100421bc:	0b12      	lsrs	r2, r2, #12
100421be:	e001      	b.n	100421c4 <__aeabi_ui2d+0x2c>
100421c0:	2300      	movs	r3, #0
100421c2:	2200      	movs	r2, #0
100421c4:	051b      	lsls	r3, r3, #20
100421c6:	4313      	orrs	r3, r2
100421c8:	0020      	movs	r0, r4
100421ca:	0019      	movs	r1, r3
100421cc:	bd10      	pop	{r4, pc}
100421ce:	0022      	movs	r2, r4
100421d0:	380b      	subs	r0, #11
100421d2:	4082      	lsls	r2, r0
100421d4:	0312      	lsls	r2, r2, #12
100421d6:	2400      	movs	r4, #0
100421d8:	0b12      	lsrs	r2, r2, #12
100421da:	e7f3      	b.n	100421c4 <__aeabi_ui2d+0x2c>
100421dc:	0000041e 	.word	0x0000041e

100421e0 <__aeabi_cdrcmple>:
100421e0:	4684      	mov	ip, r0
100421e2:	0010      	movs	r0, r2
100421e4:	4662      	mov	r2, ip
100421e6:	468c      	mov	ip, r1
100421e8:	0019      	movs	r1, r3
100421ea:	4663      	mov	r3, ip
100421ec:	e000      	b.n	100421f0 <__aeabi_cdcmpeq>
100421ee:	46c0      	nop			@ (mov r8, r8)

100421f0 <__aeabi_cdcmpeq>:
100421f0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
100421f2:	f000 f915 	bl	10042420 <__ledf2>
100421f6:	2800      	cmp	r0, #0
100421f8:	d401      	bmi.n	100421fe <__aeabi_cdcmpeq+0xe>
100421fa:	2100      	movs	r1, #0
100421fc:	42c8      	cmn	r0, r1
100421fe:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

10042200 <__aeabi_dcmpeq>:
10042200:	b510      	push	{r4, lr}
10042202:	f000 f855 	bl	100422b0 <__eqdf2>
10042206:	4240      	negs	r0, r0
10042208:	3001      	adds	r0, #1
1004220a:	bd10      	pop	{r4, pc}

1004220c <__aeabi_dcmplt>:
1004220c:	b510      	push	{r4, lr}
1004220e:	f000 f907 	bl	10042420 <__ledf2>
10042212:	2800      	cmp	r0, #0
10042214:	db01      	blt.n	1004221a <__aeabi_dcmplt+0xe>
10042216:	2000      	movs	r0, #0
10042218:	bd10      	pop	{r4, pc}
1004221a:	2001      	movs	r0, #1
1004221c:	bd10      	pop	{r4, pc}
1004221e:	46c0      	nop			@ (mov r8, r8)

10042220 <__aeabi_dcmple>:
10042220:	b510      	push	{r4, lr}
10042222:	f000 f8fd 	bl	10042420 <__ledf2>
10042226:	2800      	cmp	r0, #0
10042228:	dd01      	ble.n	1004222e <__aeabi_dcmple+0xe>
1004222a:	2000      	movs	r0, #0
1004222c:	bd10      	pop	{r4, pc}
1004222e:	2001      	movs	r0, #1
10042230:	bd10      	pop	{r4, pc}
10042232:	46c0      	nop			@ (mov r8, r8)

10042234 <__aeabi_dcmpgt>:
10042234:	b510      	push	{r4, lr}
10042236:	f000 f87f 	bl	10042338 <__gedf2>
1004223a:	2800      	cmp	r0, #0
1004223c:	dc01      	bgt.n	10042242 <__aeabi_dcmpgt+0xe>
1004223e:	2000      	movs	r0, #0
10042240:	bd10      	pop	{r4, pc}
10042242:	2001      	movs	r0, #1
10042244:	bd10      	pop	{r4, pc}
10042246:	46c0      	nop			@ (mov r8, r8)

10042248 <__aeabi_dcmpge>:
10042248:	b510      	push	{r4, lr}
1004224a:	f000 f875 	bl	10042338 <__gedf2>
1004224e:	2800      	cmp	r0, #0
10042250:	da01      	bge.n	10042256 <__aeabi_dcmpge+0xe>
10042252:	2000      	movs	r0, #0
10042254:	bd10      	pop	{r4, pc}
10042256:	2001      	movs	r0, #1
10042258:	bd10      	pop	{r4, pc}
1004225a:	46c0      	nop			@ (mov r8, r8)

1004225c <__clzsi2>:
1004225c:	211c      	movs	r1, #28
1004225e:	2301      	movs	r3, #1
10042260:	041b      	lsls	r3, r3, #16
10042262:	4298      	cmp	r0, r3
10042264:	d301      	bcc.n	1004226a <__clzsi2+0xe>
10042266:	0c00      	lsrs	r0, r0, #16
10042268:	3910      	subs	r1, #16
1004226a:	0a1b      	lsrs	r3, r3, #8
1004226c:	4298      	cmp	r0, r3
1004226e:	d301      	bcc.n	10042274 <__clzsi2+0x18>
10042270:	0a00      	lsrs	r0, r0, #8
10042272:	3908      	subs	r1, #8
10042274:	091b      	lsrs	r3, r3, #4
10042276:	4298      	cmp	r0, r3
10042278:	d301      	bcc.n	1004227e <__clzsi2+0x22>
1004227a:	0900      	lsrs	r0, r0, #4
1004227c:	3904      	subs	r1, #4
1004227e:	a202      	add	r2, pc, #8	@ (adr r2, 10042288 <__clzsi2+0x2c>)
10042280:	5c10      	ldrb	r0, [r2, r0]
10042282:	1840      	adds	r0, r0, r1
10042284:	4770      	bx	lr
10042286:	46c0      	nop			@ (mov r8, r8)
10042288:	02020304 	.word	0x02020304
1004228c:	01010101 	.word	0x01010101
	...

10042298 <__clzdi2>:
10042298:	b510      	push	{r4, lr}
1004229a:	2900      	cmp	r1, #0
1004229c:	d103      	bne.n	100422a6 <__clzdi2+0xe>
1004229e:	f7ff ffdd 	bl	1004225c <__clzsi2>
100422a2:	3020      	adds	r0, #32
100422a4:	e002      	b.n	100422ac <__clzdi2+0x14>
100422a6:	0008      	movs	r0, r1
100422a8:	f7ff ffd8 	bl	1004225c <__clzsi2>
100422ac:	bd10      	pop	{r4, pc}
100422ae:	46c0      	nop			@ (mov r8, r8)

100422b0 <__eqdf2>:
100422b0:	b5f0      	push	{r4, r5, r6, r7, lr}
100422b2:	4657      	mov	r7, sl
100422b4:	46de      	mov	lr, fp
100422b6:	464e      	mov	r6, r9
100422b8:	4645      	mov	r5, r8
100422ba:	b5e0      	push	{r5, r6, r7, lr}
100422bc:	000d      	movs	r5, r1
100422be:	0004      	movs	r4, r0
100422c0:	0fe8      	lsrs	r0, r5, #31
100422c2:	4683      	mov	fp, r0
100422c4:	0309      	lsls	r1, r1, #12
100422c6:	0fd8      	lsrs	r0, r3, #31
100422c8:	0b09      	lsrs	r1, r1, #12
100422ca:	4682      	mov	sl, r0
100422cc:	4819      	ldr	r0, [pc, #100]	@ (10042334 <__eqdf2+0x84>)
100422ce:	468c      	mov	ip, r1
100422d0:	031f      	lsls	r7, r3, #12
100422d2:	0069      	lsls	r1, r5, #1
100422d4:	005e      	lsls	r6, r3, #1
100422d6:	0d49      	lsrs	r1, r1, #21
100422d8:	0b3f      	lsrs	r7, r7, #12
100422da:	0d76      	lsrs	r6, r6, #21
100422dc:	4281      	cmp	r1, r0
100422de:	d018      	beq.n	10042312 <__eqdf2+0x62>
100422e0:	4286      	cmp	r6, r0
100422e2:	d00f      	beq.n	10042304 <__eqdf2+0x54>
100422e4:	2001      	movs	r0, #1
100422e6:	42b1      	cmp	r1, r6
100422e8:	d10d      	bne.n	10042306 <__eqdf2+0x56>
100422ea:	45bc      	cmp	ip, r7
100422ec:	d10b      	bne.n	10042306 <__eqdf2+0x56>
100422ee:	4294      	cmp	r4, r2
100422f0:	d109      	bne.n	10042306 <__eqdf2+0x56>
100422f2:	45d3      	cmp	fp, sl
100422f4:	d01c      	beq.n	10042330 <__eqdf2+0x80>
100422f6:	2900      	cmp	r1, #0
100422f8:	d105      	bne.n	10042306 <__eqdf2+0x56>
100422fa:	4660      	mov	r0, ip
100422fc:	4320      	orrs	r0, r4
100422fe:	1e43      	subs	r3, r0, #1
10042300:	4198      	sbcs	r0, r3
10042302:	e000      	b.n	10042306 <__eqdf2+0x56>
10042304:	2001      	movs	r0, #1
10042306:	bcf0      	pop	{r4, r5, r6, r7}
10042308:	46bb      	mov	fp, r7
1004230a:	46b2      	mov	sl, r6
1004230c:	46a9      	mov	r9, r5
1004230e:	46a0      	mov	r8, r4
10042310:	bdf0      	pop	{r4, r5, r6, r7, pc}
10042312:	2001      	movs	r0, #1
10042314:	428e      	cmp	r6, r1
10042316:	d1f6      	bne.n	10042306 <__eqdf2+0x56>
10042318:	4661      	mov	r1, ip
1004231a:	4339      	orrs	r1, r7
1004231c:	000f      	movs	r7, r1
1004231e:	4317      	orrs	r7, r2
10042320:	4327      	orrs	r7, r4
10042322:	d1f0      	bne.n	10042306 <__eqdf2+0x56>
10042324:	465b      	mov	r3, fp
10042326:	4652      	mov	r2, sl
10042328:	1a98      	subs	r0, r3, r2
1004232a:	1e43      	subs	r3, r0, #1
1004232c:	4198      	sbcs	r0, r3
1004232e:	e7ea      	b.n	10042306 <__eqdf2+0x56>
10042330:	2000      	movs	r0, #0
10042332:	e7e8      	b.n	10042306 <__eqdf2+0x56>
10042334:	000007ff 	.word	0x000007ff

10042338 <__gedf2>:
10042338:	b5f0      	push	{r4, r5, r6, r7, lr}
1004233a:	4657      	mov	r7, sl
1004233c:	464e      	mov	r6, r9
1004233e:	4645      	mov	r5, r8
10042340:	46de      	mov	lr, fp
10042342:	b5e0      	push	{r5, r6, r7, lr}
10042344:	000d      	movs	r5, r1
10042346:	030f      	lsls	r7, r1, #12
10042348:	0b39      	lsrs	r1, r7, #12
1004234a:	b083      	sub	sp, #12
1004234c:	0004      	movs	r4, r0
1004234e:	4680      	mov	r8, r0
10042350:	9101      	str	r1, [sp, #4]
10042352:	0058      	lsls	r0, r3, #1
10042354:	0fe9      	lsrs	r1, r5, #31
10042356:	4f31      	ldr	r7, [pc, #196]	@ (1004241c <__gedf2+0xe4>)
10042358:	0d40      	lsrs	r0, r0, #21
1004235a:	468c      	mov	ip, r1
1004235c:	006e      	lsls	r6, r5, #1
1004235e:	0319      	lsls	r1, r3, #12
10042360:	4682      	mov	sl, r0
10042362:	4691      	mov	r9, r2
10042364:	0d76      	lsrs	r6, r6, #21
10042366:	0b09      	lsrs	r1, r1, #12
10042368:	0fd8      	lsrs	r0, r3, #31
1004236a:	42be      	cmp	r6, r7
1004236c:	d01f      	beq.n	100423ae <__gedf2+0x76>
1004236e:	45ba      	cmp	sl, r7
10042370:	d00f      	beq.n	10042392 <__gedf2+0x5a>
10042372:	2e00      	cmp	r6, #0
10042374:	d12f      	bne.n	100423d6 <__gedf2+0x9e>
10042376:	4655      	mov	r5, sl
10042378:	9e01      	ldr	r6, [sp, #4]
1004237a:	4334      	orrs	r4, r6
1004237c:	2d00      	cmp	r5, #0
1004237e:	d127      	bne.n	100423d0 <__gedf2+0x98>
10042380:	430a      	orrs	r2, r1
10042382:	d03a      	beq.n	100423fa <__gedf2+0xc2>
10042384:	2c00      	cmp	r4, #0
10042386:	d145      	bne.n	10042414 <__gedf2+0xdc>
10042388:	2800      	cmp	r0, #0
1004238a:	d11a      	bne.n	100423c2 <__gedf2+0x8a>
1004238c:	2001      	movs	r0, #1
1004238e:	4240      	negs	r0, r0
10042390:	e017      	b.n	100423c2 <__gedf2+0x8a>
10042392:	4311      	orrs	r1, r2
10042394:	d13b      	bne.n	1004240e <__gedf2+0xd6>
10042396:	2e00      	cmp	r6, #0
10042398:	d102      	bne.n	100423a0 <__gedf2+0x68>
1004239a:	9f01      	ldr	r7, [sp, #4]
1004239c:	4327      	orrs	r7, r4
1004239e:	d0f3      	beq.n	10042388 <__gedf2+0x50>
100423a0:	4584      	cmp	ip, r0
100423a2:	d109      	bne.n	100423b8 <__gedf2+0x80>
100423a4:	4663      	mov	r3, ip
100423a6:	2b00      	cmp	r3, #0
100423a8:	d0f0      	beq.n	1004238c <__gedf2+0x54>
100423aa:	4660      	mov	r0, ip
100423ac:	e009      	b.n	100423c2 <__gedf2+0x8a>
100423ae:	9f01      	ldr	r7, [sp, #4]
100423b0:	4327      	orrs	r7, r4
100423b2:	d12c      	bne.n	1004240e <__gedf2+0xd6>
100423b4:	45b2      	cmp	sl, r6
100423b6:	d024      	beq.n	10042402 <__gedf2+0xca>
100423b8:	4663      	mov	r3, ip
100423ba:	2002      	movs	r0, #2
100423bc:	3b01      	subs	r3, #1
100423be:	4018      	ands	r0, r3
100423c0:	3801      	subs	r0, #1
100423c2:	b003      	add	sp, #12
100423c4:	bcf0      	pop	{r4, r5, r6, r7}
100423c6:	46bb      	mov	fp, r7
100423c8:	46b2      	mov	sl, r6
100423ca:	46a9      	mov	r9, r5
100423cc:	46a0      	mov	r8, r4
100423ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
100423d0:	2c00      	cmp	r4, #0
100423d2:	d0d9      	beq.n	10042388 <__gedf2+0x50>
100423d4:	e7e4      	b.n	100423a0 <__gedf2+0x68>
100423d6:	4654      	mov	r4, sl
100423d8:	2c00      	cmp	r4, #0
100423da:	d0ed      	beq.n	100423b8 <__gedf2+0x80>
100423dc:	4584      	cmp	ip, r0
100423de:	d1eb      	bne.n	100423b8 <__gedf2+0x80>
100423e0:	4556      	cmp	r6, sl
100423e2:	dce9      	bgt.n	100423b8 <__gedf2+0x80>
100423e4:	dbde      	blt.n	100423a4 <__gedf2+0x6c>
100423e6:	9b01      	ldr	r3, [sp, #4]
100423e8:	428b      	cmp	r3, r1
100423ea:	d8e5      	bhi.n	100423b8 <__gedf2+0x80>
100423ec:	d1da      	bne.n	100423a4 <__gedf2+0x6c>
100423ee:	45c8      	cmp	r8, r9
100423f0:	d8e2      	bhi.n	100423b8 <__gedf2+0x80>
100423f2:	2000      	movs	r0, #0
100423f4:	45c8      	cmp	r8, r9
100423f6:	d2e4      	bcs.n	100423c2 <__gedf2+0x8a>
100423f8:	e7d4      	b.n	100423a4 <__gedf2+0x6c>
100423fa:	2000      	movs	r0, #0
100423fc:	2c00      	cmp	r4, #0
100423fe:	d0e0      	beq.n	100423c2 <__gedf2+0x8a>
10042400:	e7da      	b.n	100423b8 <__gedf2+0x80>
10042402:	4311      	orrs	r1, r2
10042404:	d103      	bne.n	1004240e <__gedf2+0xd6>
10042406:	4584      	cmp	ip, r0
10042408:	d1d6      	bne.n	100423b8 <__gedf2+0x80>
1004240a:	2000      	movs	r0, #0
1004240c:	e7d9      	b.n	100423c2 <__gedf2+0x8a>
1004240e:	2002      	movs	r0, #2
10042410:	4240      	negs	r0, r0
10042412:	e7d6      	b.n	100423c2 <__gedf2+0x8a>
10042414:	4584      	cmp	ip, r0
10042416:	d0e6      	beq.n	100423e6 <__gedf2+0xae>
10042418:	e7ce      	b.n	100423b8 <__gedf2+0x80>
1004241a:	46c0      	nop			@ (mov r8, r8)
1004241c:	000007ff 	.word	0x000007ff

10042420 <__ledf2>:
10042420:	b5f0      	push	{r4, r5, r6, r7, lr}
10042422:	4657      	mov	r7, sl
10042424:	464e      	mov	r6, r9
10042426:	4645      	mov	r5, r8
10042428:	46de      	mov	lr, fp
1004242a:	b5e0      	push	{r5, r6, r7, lr}
1004242c:	000d      	movs	r5, r1
1004242e:	030f      	lsls	r7, r1, #12
10042430:	0004      	movs	r4, r0
10042432:	4680      	mov	r8, r0
10042434:	0fe8      	lsrs	r0, r5, #31
10042436:	0b39      	lsrs	r1, r7, #12
10042438:	4684      	mov	ip, r0
1004243a:	b083      	sub	sp, #12
1004243c:	0058      	lsls	r0, r3, #1
1004243e:	4f30      	ldr	r7, [pc, #192]	@ (10042500 <__ledf2+0xe0>)
10042440:	0d40      	lsrs	r0, r0, #21
10042442:	9101      	str	r1, [sp, #4]
10042444:	031e      	lsls	r6, r3, #12
10042446:	0069      	lsls	r1, r5, #1
10042448:	4682      	mov	sl, r0
1004244a:	4691      	mov	r9, r2
1004244c:	0d49      	lsrs	r1, r1, #21
1004244e:	0b36      	lsrs	r6, r6, #12
10042450:	0fd8      	lsrs	r0, r3, #31
10042452:	42b9      	cmp	r1, r7
10042454:	d020      	beq.n	10042498 <__ledf2+0x78>
10042456:	45ba      	cmp	sl, r7
10042458:	d00f      	beq.n	1004247a <__ledf2+0x5a>
1004245a:	2900      	cmp	r1, #0
1004245c:	d12b      	bne.n	100424b6 <__ledf2+0x96>
1004245e:	9901      	ldr	r1, [sp, #4]
10042460:	430c      	orrs	r4, r1
10042462:	4651      	mov	r1, sl
10042464:	2900      	cmp	r1, #0
10042466:	d137      	bne.n	100424d8 <__ledf2+0xb8>
10042468:	4332      	orrs	r2, r6
1004246a:	d038      	beq.n	100424de <__ledf2+0xbe>
1004246c:	2c00      	cmp	r4, #0
1004246e:	d144      	bne.n	100424fa <__ledf2+0xda>
10042470:	2800      	cmp	r0, #0
10042472:	d119      	bne.n	100424a8 <__ledf2+0x88>
10042474:	2001      	movs	r0, #1
10042476:	4240      	negs	r0, r0
10042478:	e016      	b.n	100424a8 <__ledf2+0x88>
1004247a:	4316      	orrs	r6, r2
1004247c:	d113      	bne.n	100424a6 <__ledf2+0x86>
1004247e:	2900      	cmp	r1, #0
10042480:	d102      	bne.n	10042488 <__ledf2+0x68>
10042482:	9f01      	ldr	r7, [sp, #4]
10042484:	4327      	orrs	r7, r4
10042486:	d0f3      	beq.n	10042470 <__ledf2+0x50>
10042488:	4584      	cmp	ip, r0
1004248a:	d020      	beq.n	100424ce <__ledf2+0xae>
1004248c:	4663      	mov	r3, ip
1004248e:	2002      	movs	r0, #2
10042490:	3b01      	subs	r3, #1
10042492:	4018      	ands	r0, r3
10042494:	3801      	subs	r0, #1
10042496:	e007      	b.n	100424a8 <__ledf2+0x88>
10042498:	9f01      	ldr	r7, [sp, #4]
1004249a:	4327      	orrs	r7, r4
1004249c:	d103      	bne.n	100424a6 <__ledf2+0x86>
1004249e:	458a      	cmp	sl, r1
100424a0:	d1f4      	bne.n	1004248c <__ledf2+0x6c>
100424a2:	4316      	orrs	r6, r2
100424a4:	d01f      	beq.n	100424e6 <__ledf2+0xc6>
100424a6:	2002      	movs	r0, #2
100424a8:	b003      	add	sp, #12
100424aa:	bcf0      	pop	{r4, r5, r6, r7}
100424ac:	46bb      	mov	fp, r7
100424ae:	46b2      	mov	sl, r6
100424b0:	46a9      	mov	r9, r5
100424b2:	46a0      	mov	r8, r4
100424b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
100424b6:	4654      	mov	r4, sl
100424b8:	2c00      	cmp	r4, #0
100424ba:	d0e7      	beq.n	1004248c <__ledf2+0x6c>
100424bc:	4584      	cmp	ip, r0
100424be:	d1e5      	bne.n	1004248c <__ledf2+0x6c>
100424c0:	4551      	cmp	r1, sl
100424c2:	dce3      	bgt.n	1004248c <__ledf2+0x6c>
100424c4:	db03      	blt.n	100424ce <__ledf2+0xae>
100424c6:	9b01      	ldr	r3, [sp, #4]
100424c8:	42b3      	cmp	r3, r6
100424ca:	d8df      	bhi.n	1004248c <__ledf2+0x6c>
100424cc:	d00f      	beq.n	100424ee <__ledf2+0xce>
100424ce:	4663      	mov	r3, ip
100424d0:	2b00      	cmp	r3, #0
100424d2:	d0cf      	beq.n	10042474 <__ledf2+0x54>
100424d4:	4660      	mov	r0, ip
100424d6:	e7e7      	b.n	100424a8 <__ledf2+0x88>
100424d8:	2c00      	cmp	r4, #0
100424da:	d0c9      	beq.n	10042470 <__ledf2+0x50>
100424dc:	e7d4      	b.n	10042488 <__ledf2+0x68>
100424de:	2000      	movs	r0, #0
100424e0:	2c00      	cmp	r4, #0
100424e2:	d0e1      	beq.n	100424a8 <__ledf2+0x88>
100424e4:	e7d2      	b.n	1004248c <__ledf2+0x6c>
100424e6:	4584      	cmp	ip, r0
100424e8:	d1d0      	bne.n	1004248c <__ledf2+0x6c>
100424ea:	2000      	movs	r0, #0
100424ec:	e7dc      	b.n	100424a8 <__ledf2+0x88>
100424ee:	45c8      	cmp	r8, r9
100424f0:	d8cc      	bhi.n	1004248c <__ledf2+0x6c>
100424f2:	2000      	movs	r0, #0
100424f4:	45c8      	cmp	r8, r9
100424f6:	d2d7      	bcs.n	100424a8 <__ledf2+0x88>
100424f8:	e7e9      	b.n	100424ce <__ledf2+0xae>
100424fa:	4584      	cmp	ip, r0
100424fc:	d0e3      	beq.n	100424c6 <__ledf2+0xa6>
100424fe:	e7c5      	b.n	1004248c <__ledf2+0x6c>
10042500:	000007ff 	.word	0x000007ff

10042504 <LL_PWR_EnableGPIOPullUp>:
  *         @arg @ref LL_PWR_GPIO_BIT_14
  *         @arg @ref LL_PWR_GPIO_BIT_15
  * @retval None
  */
__STATIC_INLINE void LL_PWR_EnableGPIOPullUp(uint32_t GPIO, uint32_t GPIONumber)
{
10042504:	b580      	push	{r7, lr}
10042506:	b082      	sub	sp, #8
10042508:	af00      	add	r7, sp, #0
1004250a:	6078      	str	r0, [r7, #4]
1004250c:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(*((__IO uint32_t *)(GPIO + 4UL)), GPIONumber);
1004250e:	687b      	ldr	r3, [r7, #4]
10042510:	3304      	adds	r3, #4
10042512:	681a      	ldr	r2, [r3, #0]
10042514:	683b      	ldr	r3, [r7, #0]
10042516:	43d9      	mvns	r1, r3
10042518:	687b      	ldr	r3, [r7, #4]
1004251a:	3304      	adds	r3, #4
1004251c:	400a      	ands	r2, r1
1004251e:	601a      	str	r2, [r3, #0]
  SET_BIT(*((__IO uint32_t *)GPIO), GPIONumber);
10042520:	687b      	ldr	r3, [r7, #4]
10042522:	6819      	ldr	r1, [r3, #0]
10042524:	687b      	ldr	r3, [r7, #4]
10042526:	683a      	ldr	r2, [r7, #0]
10042528:	430a      	orrs	r2, r1
1004252a:	601a      	str	r2, [r3, #0]
}
1004252c:	46c0      	nop			@ (mov r8, r8)
1004252e:	46bd      	mov	sp, r7
10042530:	b002      	add	sp, #8
10042532:	bd80      	pop	{r7, pc}

10042534 <LL_PWR_SetNoPullA>:
  *         @arg @ref LL_PWR_GPIO_BIT_15(*)
  *         (*) available only on STM32WB06 and STM32WB07 devices
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SetNoPullA(uint32_t GPIONumber)
{
10042534:	b580      	push	{r7, lr}
10042536:	b082      	sub	sp, #8
10042538:	af00      	add	r7, sp, #0
1004253a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(PWR->PUCRA, GPIONumber);
1004253c:	4b08      	ldr	r3, [pc, #32]	@ (10042560 <LL_PWR_SetNoPullA+0x2c>)
1004253e:	6a1a      	ldr	r2, [r3, #32]
10042540:	687b      	ldr	r3, [r7, #4]
10042542:	43d9      	mvns	r1, r3
10042544:	4b06      	ldr	r3, [pc, #24]	@ (10042560 <LL_PWR_SetNoPullA+0x2c>)
10042546:	400a      	ands	r2, r1
10042548:	621a      	str	r2, [r3, #32]
  CLEAR_BIT(PWR->PDCRA, GPIONumber);
1004254a:	4b05      	ldr	r3, [pc, #20]	@ (10042560 <LL_PWR_SetNoPullA+0x2c>)
1004254c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
1004254e:	687b      	ldr	r3, [r7, #4]
10042550:	43d9      	mvns	r1, r3
10042552:	4b03      	ldr	r3, [pc, #12]	@ (10042560 <LL_PWR_SetNoPullA+0x2c>)
10042554:	400a      	ands	r2, r1
10042556:	625a      	str	r2, [r3, #36]	@ 0x24
}
10042558:	46c0      	nop			@ (mov r8, r8)
1004255a:	46bd      	mov	sp, r7
1004255c:	b002      	add	sp, #8
1004255e:	bd80      	pop	{r7, pc}
10042560:	48500000 	.word	0x48500000

10042564 <LL_PWR_SetNoPullB>:
  *         @arg @ref LL_PWR_GPIO_BIT_15
  *         (*) available only oon STM32WB06 and STM32WB07 devices
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SetNoPullB(uint32_t GPIONumber)
{
10042564:	b580      	push	{r7, lr}
10042566:	b082      	sub	sp, #8
10042568:	af00      	add	r7, sp, #0
1004256a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(PWR->PUCRB, GPIONumber);
1004256c:	4b08      	ldr	r3, [pc, #32]	@ (10042590 <LL_PWR_SetNoPullB+0x2c>)
1004256e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
10042570:	687b      	ldr	r3, [r7, #4]
10042572:	43d9      	mvns	r1, r3
10042574:	4b06      	ldr	r3, [pc, #24]	@ (10042590 <LL_PWR_SetNoPullB+0x2c>)
10042576:	400a      	ands	r2, r1
10042578:	629a      	str	r2, [r3, #40]	@ 0x28
  CLEAR_BIT(PWR->PDCRB, GPIONumber);
1004257a:	4b05      	ldr	r3, [pc, #20]	@ (10042590 <LL_PWR_SetNoPullB+0x2c>)
1004257c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
1004257e:	687b      	ldr	r3, [r7, #4]
10042580:	43d9      	mvns	r1, r3
10042582:	4b03      	ldr	r3, [pc, #12]	@ (10042590 <LL_PWR_SetNoPullB+0x2c>)
10042584:	400a      	ands	r2, r1
10042586:	62da      	str	r2, [r3, #44]	@ 0x2c
}
10042588:	46c0      	nop			@ (mov r8, r8)
1004258a:	46bd      	mov	sp, r7
1004258c:	b002      	add	sp, #8
1004258e:	bd80      	pop	{r7, pc}
10042590:	48500000 	.word	0x48500000

10042594 <LL_RADIO_TIMER_GetAbsoluteTime>:
  * @brief  Get the Absolute Time of the wakeup timer (Granularity unit is 16 x slow clock period).
  * @param  WAKEUPx Radio Timer instance
  * @retval Absolute Time of Wakeup Timer
  */
__STATIC_INLINE uint32_t LL_RADIO_TIMER_GetAbsoluteTime(WAKEUP_TypeDef *WAKEUPx)
{
10042594:	b580      	push	{r7, lr}
10042596:	b082      	sub	sp, #8
10042598:	af00      	add	r7, sp, #0
1004259a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_REG(WAKEUPx->ABSOLUTE_TIME));
1004259c:	687b      	ldr	r3, [r7, #4]
1004259e:	691b      	ldr	r3, [r3, #16]
}
100425a0:	0018      	movs	r0, r3
100425a2:	46bd      	mov	sp, r7
100425a4:	b002      	add	sp, #8
100425a6:	bd80      	pop	{r7, pc}

100425a8 <LL_AHB1_GRP1_EnableClock>:
  * @arg LL_AHB1_GRP1_PERIPH_RNG
  * @retval None
  * @note   LL_AHB1_GRP1_PERIPH_PKA
  */
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
100425a8:	b580      	push	{r7, lr}
100425aa:	b084      	sub	sp, #16
100425ac:	af00      	add	r7, sp, #0
100425ae:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHBENR, Periphs);
100425b0:	4b07      	ldr	r3, [pc, #28]	@ (100425d0 <LL_AHB1_GRP1_EnableClock+0x28>)
100425b2:	6d19      	ldr	r1, [r3, #80]	@ 0x50
100425b4:	4b06      	ldr	r3, [pc, #24]	@ (100425d0 <LL_AHB1_GRP1_EnableClock+0x28>)
100425b6:	687a      	ldr	r2, [r7, #4]
100425b8:	430a      	orrs	r2, r1
100425ba:	651a      	str	r2, [r3, #80]	@ 0x50
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
100425bc:	4b04      	ldr	r3, [pc, #16]	@ (100425d0 <LL_AHB1_GRP1_EnableClock+0x28>)
100425be:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
100425c0:	687a      	ldr	r2, [r7, #4]
100425c2:	4013      	ands	r3, r2
100425c4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
100425c6:	68fb      	ldr	r3, [r7, #12]
}
100425c8:	46c0      	nop			@ (mov r8, r8)
100425ca:	46bd      	mov	sp, r7
100425cc:	b004      	add	sp, #16
100425ce:	bd80      	pop	{r7, pc}
100425d0:	48400000 	.word	0x48400000

100425d4 <LL_APB2_GRP1_EnableClock>:
  * @arg LL_APB2_GRP1_PERIPH_MRBLE
  * @retval None
  * @note   LL_APB2_GRP1_PERIPH_MRBLE
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
100425d4:	b580      	push	{r7, lr}
100425d6:	b084      	sub	sp, #16
100425d8:	af00      	add	r7, sp, #0
100425da:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
100425dc:	4b07      	ldr	r3, [pc, #28]	@ (100425fc <LL_APB2_GRP1_EnableClock+0x28>)
100425de:	6e19      	ldr	r1, [r3, #96]	@ 0x60
100425e0:	4b06      	ldr	r3, [pc, #24]	@ (100425fc <LL_APB2_GRP1_EnableClock+0x28>)
100425e2:	687a      	ldr	r2, [r7, #4]
100425e4:	430a      	orrs	r2, r1
100425e6:	661a      	str	r2, [r3, #96]	@ 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
100425e8:	4b04      	ldr	r3, [pc, #16]	@ (100425fc <LL_APB2_GRP1_EnableClock+0x28>)
100425ea:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
100425ec:	687a      	ldr	r2, [r7, #4]
100425ee:	4013      	ands	r3, r2
100425f0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
100425f2:	68fb      	ldr	r3, [r7, #12]
}
100425f4:	46c0      	nop			@ (mov r8, r8)
100425f6:	46bd      	mov	sp, r7
100425f8:	b004      	add	sp, #16
100425fa:	bd80      	pop	{r7, pc}
100425fc:	48400000 	.word	0x48400000

10042600 <LL_APB2_GRP1_IsEnabledClock>:
  * @arg LL_APB2_GRP1_PERIPH_MRBLE
  * @retval uint32_t
  * @note   LL_APB2_GRP1_PERIPH_MRBLE
  */
__STATIC_INLINE uint32_t LL_APB2_GRP1_IsEnabledClock(uint32_t Periphs)
{
10042600:	b580      	push	{r7, lr}
10042602:	b082      	sub	sp, #8
10042604:	af00      	add	r7, sp, #0
10042606:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(RCC->APB2ENR, Periphs) == (Periphs)) ? 1UL : 0UL);
10042608:	4b06      	ldr	r3, [pc, #24]	@ (10042624 <LL_APB2_GRP1_IsEnabledClock+0x24>)
1004260a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
1004260c:	687a      	ldr	r2, [r7, #4]
1004260e:	4013      	ands	r3, r2
10042610:	687a      	ldr	r2, [r7, #4]
10042612:	429a      	cmp	r2, r3
10042614:	d101      	bne.n	1004261a <LL_APB2_GRP1_IsEnabledClock+0x1a>
10042616:	2301      	movs	r3, #1
10042618:	e000      	b.n	1004261c <LL_APB2_GRP1_IsEnabledClock+0x1c>
1004261a:	2300      	movs	r3, #0
}
1004261c:	0018      	movs	r0, r3
1004261e:	46bd      	mov	sp, r7
10042620:	b002      	add	sp, #8
10042622:	bd80      	pop	{r7, pc}
10042624:	48400000 	.word	0x48400000

10042628 <LL_APB2_GRP1_ForceReset>:
  * @arg LL_APB2_GRP1_PERIPH_MRBLE
  * @retval None
  * @note   LL_APB2_GRP1_PERIPH_MRBLE
  */
__STATIC_INLINE void LL_APB2_GRP1_ForceReset(uint32_t Periphs)
{
10042628:	b580      	push	{r7, lr}
1004262a:	b082      	sub	sp, #8
1004262c:	af00      	add	r7, sp, #0
1004262e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2RSTR, Periphs);
10042630:	4b04      	ldr	r3, [pc, #16]	@ (10042644 <LL_APB2_GRP1_ForceReset+0x1c>)
10042632:	6c19      	ldr	r1, [r3, #64]	@ 0x40
10042634:	4b03      	ldr	r3, [pc, #12]	@ (10042644 <LL_APB2_GRP1_ForceReset+0x1c>)
10042636:	687a      	ldr	r2, [r7, #4]
10042638:	430a      	orrs	r2, r1
1004263a:	641a      	str	r2, [r3, #64]	@ 0x40
}
1004263c:	46c0      	nop			@ (mov r8, r8)
1004263e:	46bd      	mov	sp, r7
10042640:	b002      	add	sp, #8
10042642:	bd80      	pop	{r7, pc}
10042644:	48400000 	.word	0x48400000

10042648 <LL_APB2_GRP1_ReleaseReset>:
  * @arg LL_APB2_GRP1_PERIPH_MRBLE
  * @retval None
  * @note   LL_APB2_GRP1_PERIPH_MRBLE
  */
__STATIC_INLINE void LL_APB2_GRP1_ReleaseReset(uint32_t Periphs)
{
10042648:	b580      	push	{r7, lr}
1004264a:	b082      	sub	sp, #8
1004264c:	af00      	add	r7, sp, #0
1004264e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB2RSTR, Periphs);
10042650:	4b05      	ldr	r3, [pc, #20]	@ (10042668 <LL_APB2_GRP1_ReleaseReset+0x20>)
10042652:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
10042654:	687b      	ldr	r3, [r7, #4]
10042656:	43d9      	mvns	r1, r3
10042658:	4b03      	ldr	r3, [pc, #12]	@ (10042668 <LL_APB2_GRP1_ReleaseReset+0x20>)
1004265a:	400a      	ands	r2, r1
1004265c:	641a      	str	r2, [r3, #64]	@ 0x40
}
1004265e:	46c0      	nop			@ (mov r8, r8)
10042660:	46bd      	mov	sp, r7
10042662:	b002      	add	sp, #8
10042664:	bd80      	pop	{r7, pc}
10042666:	46c0      	nop			@ (mov r8, r8)
10042668:	48400000 	.word	0x48400000

1004266c <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
1004266c:	b5f0      	push	{r4, r5, r6, r7, lr}
1004266e:	b08d      	sub	sp, #52	@ 0x34
10042670:	af04      	add	r7, sp, #16
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
10042672:	f001 ffab 	bl	100445cc <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
10042676:	f000 f8ef 	bl	10042858 <SystemClock_Config>

	/* Configure the peripherals common clocks */
	PeriphCommonClock_Config();
1004267a:	f000 f924 	bl	100428c6 <PeriphCommonClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
1004267e:	f000 fa0f 	bl	10042aa0 <MX_GPIO_Init>
	MX_SPI2_Init();
10042682:	f000 f981 	bl	10042988 <MX_SPI2_Init>
	MX_USART1_UART_Init();
10042686:	f000 f9bd 	bl	10042a04 <MX_USART1_UART_Init>
	MX_RADIO_Init();
1004268a:	f000 f939 	bl	10042900 <MX_RADIO_Init>
	MX_RADIO_TIMER_Init();
1004268e:	f000 f947 	bl	10042920 <MX_RADIO_TIMER_Init>
	/* USER CODE BEGIN 2 */
	DW1000_init(&dw1000);
10042692:	4b63      	ldr	r3, [pc, #396]	@ (10042820 <main+0x1b4>)
10042694:	0018      	movs	r0, r3
10042696:	f000 ff65 	bl	10043564 <DW1000_init>
	uint8_t pll_lock = DW1000_config(&dw1000, &dw1000_cfg);
1004269a:	2316      	movs	r3, #22
1004269c:	18fe      	adds	r6, r7, r3
1004269e:	4a61      	ldr	r2, [pc, #388]	@ (10042824 <main+0x1b8>)
100426a0:	4b5f      	ldr	r3, [pc, #380]	@ (10042820 <main+0x1b4>)
100426a2:	0011      	movs	r1, r2
100426a4:	0018      	movs	r0, r3
100426a6:	f001 f8bd 	bl	10043824 <DW1000_config>
100426aa:	0003      	movs	r3, r0
100426ac:	7033      	strb	r3, [r6, #0]
	if (pll_lock) {
100426ae:	2316      	movs	r3, #22
100426b0:	18fb      	adds	r3, r7, r3
100426b2:	781b      	ldrb	r3, [r3, #0]
100426b4:	2b00      	cmp	r3, #0
100426b6:	d006      	beq.n	100426c6 <main+0x5a>
		hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
100426b8:	4b5b      	ldr	r3, [pc, #364]	@ (10042828 <main+0x1bc>)
100426ba:	2208      	movs	r2, #8
100426bc:	61da      	str	r2, [r3, #28]
		HAL_SPI_Init(&hspi2);
100426be:	4b5a      	ldr	r3, [pc, #360]	@ (10042828 <main+0x1bc>)
100426c0:	0018      	movs	r0, r3
100426c2:	f005 ffd7 	bl	10048674 <HAL_SPI_Init>
	}
	uint64_t ID = *((uint64_t*) UID64_BASE);
100426c6:	4b59      	ldr	r3, [pc, #356]	@ (1004282c <main+0x1c0>)
100426c8:	681a      	ldr	r2, [r3, #0]
100426ca:	685b      	ldr	r3, [r3, #4]
100426cc:	61ba      	str	r2, [r7, #24]
100426ce:	61fb      	str	r3, [r7, #28]
	uint8_t i = 2;
100426d0:	2317      	movs	r3, #23
100426d2:	18fb      	adds	r3, r7, r3
100426d4:	2202      	movs	r2, #2
100426d6:	701a      	strb	r2, [r3, #0]
	sendAckData[0] = 0x1D;
100426d8:	4b55      	ldr	r3, [pc, #340]	@ (10042830 <main+0x1c4>)
100426da:	221d      	movs	r2, #29
100426dc:	701a      	strb	r2, [r3, #0]
	sendAckData[1] = 8;
100426de:	4b54      	ldr	r3, [pc, #336]	@ (10042830 <main+0x1c4>)
100426e0:	2208      	movs	r2, #8
100426e2:	705a      	strb	r2, [r3, #1]
	do {
		sendAckData[i++] = ID & 0xFF;
100426e4:	2217      	movs	r2, #23
100426e6:	18bb      	adds	r3, r7, r2
100426e8:	781b      	ldrb	r3, [r3, #0]
100426ea:	18ba      	adds	r2, r7, r2
100426ec:	1c59      	adds	r1, r3, #1
100426ee:	7011      	strb	r1, [r2, #0]
100426f0:	0019      	movs	r1, r3
100426f2:	69ba      	ldr	r2, [r7, #24]
100426f4:	69fb      	ldr	r3, [r7, #28]
100426f6:	1c13      	adds	r3, r2, #0
100426f8:	b2da      	uxtb	r2, r3
100426fa:	4b4d      	ldr	r3, [pc, #308]	@ (10042830 <main+0x1c4>)
100426fc:	545a      	strb	r2, [r3, r1]
	} while (ID >>= 8);
100426fe:	69fb      	ldr	r3, [r7, #28]
10042700:	061b      	lsls	r3, r3, #24
10042702:	69ba      	ldr	r2, [r7, #24]
10042704:	0a14      	lsrs	r4, r2, #8
10042706:	431c      	orrs	r4, r3
10042708:	69fb      	ldr	r3, [r7, #28]
1004270a:	0a1d      	lsrs	r5, r3, #8
1004270c:	61bc      	str	r4, [r7, #24]
1004270e:	61fd      	str	r5, [r7, #28]
10042710:	69bb      	ldr	r3, [r7, #24]
10042712:	69fa      	ldr	r2, [r7, #28]
10042714:	4313      	orrs	r3, r2
10042716:	d1e5      	bne.n	100426e4 <main+0x78>
	HAL_RADIO_SetNetworkID(0x88DF88DF);
10042718:	4b46      	ldr	r3, [pc, #280]	@ (10042834 <main+0x1c8>)
1004271a:	0018      	movs	r0, r3
1004271c:	f003 fc40 	bl	10045fa0 <HAL_RADIO_SetNetworkID>
	HAL_RADIO_SetTxPower(0x18);
10042720:	2018      	movs	r0, #24
10042722:	f003 fc13 	bl	10045f4c <HAL_RADIO_SetTxPower>
	HAL_RADIO_ReceivePacketWithAck(beacon_channel, RX_WAKEUP_TIME, receivedData,
10042726:	4b44      	ldr	r3, [pc, #272]	@ (10042838 <main+0x1cc>)
10042728:	7818      	ldrb	r0, [r3, #0]
1004272a:	4c41      	ldr	r4, [pc, #260]	@ (10042830 <main+0x1c4>)
1004272c:	4a43      	ldr	r2, [pc, #268]	@ (1004283c <main+0x1d0>)
1004272e:	23be      	movs	r3, #190	@ 0xbe
10042730:	0059      	lsls	r1, r3, #1
10042732:	4b43      	ldr	r3, [pc, #268]	@ (10042840 <main+0x1d4>)
10042734:	9302      	str	r3, [sp, #8]
10042736:	23ff      	movs	r3, #255	@ 0xff
10042738:	9301      	str	r3, [sp, #4]
1004273a:	4b42      	ldr	r3, [pc, #264]	@ (10042844 <main+0x1d8>)
1004273c:	9300      	str	r3, [sp, #0]
1004273e:	0023      	movs	r3, r4
10042740:	f003 fc3c 	bl	10045fbc <HAL_RADIO_ReceivePacketWithAck>
	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
		HAL_RADIO_TIMER_Tick();
10042744:	f004 f814 	bl	10046770 <HAL_RADIO_TIMER_Tick>
		if (ranging == TRUE) {
10042748:	4b3f      	ldr	r3, [pc, #252]	@ (10042848 <main+0x1dc>)
1004274a:	781b      	ldrb	r3, [r3, #0]
1004274c:	2b01      	cmp	r3, #1
1004274e:	d148      	bne.n	100427e2 <main+0x176>
			double distance = DW1000_responder(&dw1000, beacon_channel);
10042750:	4b39      	ldr	r3, [pc, #228]	@ (10042838 <main+0x1cc>)
10042752:	781a      	ldrb	r2, [r3, #0]
10042754:	4b32      	ldr	r3, [pc, #200]	@ (10042820 <main+0x1b4>)
10042756:	0011      	movs	r1, r2
10042758:	0018      	movs	r0, r3
1004275a:	f001 fb3b 	bl	10043dd4 <DW1000_responder>
1004275e:	0002      	movs	r2, r0
10042760:	000b      	movs	r3, r1
10042762:	60ba      	str	r2, [r7, #8]
10042764:	60fb      	str	r3, [r7, #12]
			uint8_t meters = (uint8_t) distance;
10042766:	1dfc      	adds	r4, r7, #7
10042768:	68b8      	ldr	r0, [r7, #8]
1004276a:	68f9      	ldr	r1, [r7, #12]
1004276c:	f7fd fe8e 	bl	1004048c <__aeabi_d2uiz>
10042770:	0003      	movs	r3, r0
10042772:	7023      	strb	r3, [r4, #0]
			uint8_t centimeters = (uint8_t) ((distance - meters) * 100);
10042774:	1dfb      	adds	r3, r7, #7
10042776:	781b      	ldrb	r3, [r3, #0]
10042778:	0018      	movs	r0, r3
1004277a:	f7ff fcdf 	bl	1004213c <__aeabi_i2d>
1004277e:	0002      	movs	r2, r0
10042780:	000b      	movs	r3, r1
10042782:	68b8      	ldr	r0, [r7, #8]
10042784:	68f9      	ldr	r1, [r7, #12]
10042786:	f7ff f901 	bl	1004198c <__aeabi_dsub>
1004278a:	0002      	movs	r2, r0
1004278c:	000b      	movs	r3, r1
1004278e:	0010      	movs	r0, r2
10042790:	0019      	movs	r1, r3
10042792:	2200      	movs	r2, #0
10042794:	4b2d      	ldr	r3, [pc, #180]	@ (1004284c <main+0x1e0>)
10042796:	f7fe fe31 	bl	100413fc <__aeabi_dmul>
1004279a:	0002      	movs	r2, r0
1004279c:	000b      	movs	r3, r1
1004279e:	1dbc      	adds	r4, r7, #6
100427a0:	0010      	movs	r0, r2
100427a2:	0019      	movs	r1, r3
100427a4:	f7fd fe72 	bl	1004048c <__aeabi_d2uiz>
100427a8:	0003      	movs	r3, r0
100427aa:	7023      	strb	r3, [r4, #0]
			if (meters != 0 || centimeters != 0) {
100427ac:	1dfb      	adds	r3, r7, #7
100427ae:	781b      	ldrb	r3, [r3, #0]
100427b0:	2b00      	cmp	r3, #0
100427b2:	d103      	bne.n	100427bc <main+0x150>
100427b4:	1dbb      	adds	r3, r7, #6
100427b6:	781b      	ldrb	r3, [r3, #0]
100427b8:	2b00      	cmp	r3, #0
100427ba:	d0c3      	beq.n	10042744 <main+0xd8>
				sendAckData[1] = 10;
100427bc:	4b1c      	ldr	r3, [pc, #112]	@ (10042830 <main+0x1c4>)
100427be:	220a      	movs	r2, #10
100427c0:	705a      	strb	r2, [r3, #1]
				sendAckData[10] = meters;
100427c2:	4b1b      	ldr	r3, [pc, #108]	@ (10042830 <main+0x1c4>)
100427c4:	1dfa      	adds	r2, r7, #7
100427c6:	7812      	ldrb	r2, [r2, #0]
100427c8:	729a      	strb	r2, [r3, #10]
				sendAckData[11] = centimeters;
100427ca:	4b19      	ldr	r3, [pc, #100]	@ (10042830 <main+0x1c4>)
100427cc:	1dba      	adds	r2, r7, #6
100427ce:	7812      	ldrb	r2, [r2, #0]
100427d0:	72da      	strb	r2, [r3, #11]
				ranging = FALSE;
100427d2:	4b1d      	ldr	r3, [pc, #116]	@ (10042848 <main+0x1dc>)
100427d4:	2200      	movs	r2, #0
100427d6:	701a      	strb	r2, [r3, #0]
				distance = 0;
100427d8:	2200      	movs	r2, #0
100427da:	2300      	movs	r3, #0
100427dc:	60ba      	str	r2, [r7, #8]
100427de:	60fb      	str	r3, [r7, #12]
100427e0:	e7b0      	b.n	10042744 <main+0xd8>
			}
		} else if (printPacket == TRUE) {
100427e2:	4b1b      	ldr	r3, [pc, #108]	@ (10042850 <main+0x1e4>)
100427e4:	781b      	ldrb	r3, [r3, #0]
100427e6:	2b01      	cmp	r3, #1
100427e8:	d1ac      	bne.n	10042744 <main+0xd8>
			receivedData[receivedData[1]] = 0xFE;
100427ea:	4b14      	ldr	r3, [pc, #80]	@ (1004283c <main+0x1d0>)
100427ec:	785b      	ldrb	r3, [r3, #1]
100427ee:	001a      	movs	r2, r3
100427f0:	4b12      	ldr	r3, [pc, #72]	@ (1004283c <main+0x1d0>)
100427f2:	21fe      	movs	r1, #254	@ 0xfe
100427f4:	5499      	strb	r1, [r3, r2]
			HAL_UART_Transmit(&huart1, (const uint8_t*) receivedData,
					receivedData[1] + 1, 100);
100427f6:	4b11      	ldr	r3, [pc, #68]	@ (1004283c <main+0x1d0>)
100427f8:	785b      	ldrb	r3, [r3, #1]
			HAL_UART_Transmit(&huart1, (const uint8_t*) receivedData,
100427fa:	3301      	adds	r3, #1
100427fc:	b29a      	uxth	r2, r3
100427fe:	490f      	ldr	r1, [pc, #60]	@ (1004283c <main+0x1d0>)
10042800:	4814      	ldr	r0, [pc, #80]	@ (10042854 <main+0x1e8>)
10042802:	2364      	movs	r3, #100	@ 0x64
10042804:	f006 f844 	bl	10048890 <HAL_UART_Transmit>
			printPacket = FALSE;
10042808:	4b11      	ldr	r3, [pc, #68]	@ (10042850 <main+0x1e4>)
1004280a:	2200      	movs	r2, #0
1004280c:	701a      	strb	r2, [r3, #0]
			memset(receivedData, 0, sizeof receivedData);
1004280e:	2302      	movs	r3, #2
10042810:	33ff      	adds	r3, #255	@ 0xff
10042812:	001a      	movs	r2, r3
10042814:	4b09      	ldr	r3, [pc, #36]	@ (1004283c <main+0x1d0>)
10042816:	2100      	movs	r1, #0
10042818:	0018      	movs	r0, r3
1004281a:	f006 fd9f 	bl	1004935c <memset>
		HAL_RADIO_TIMER_Tick();
1004281e:	e791      	b.n	10042744 <main+0xd8>
10042820:	20000638 	.word	0x20000638
10042824:	20000650 	.word	0x20000650
10042828:	2000017c 	.word	0x2000017c
1004282c:	10001ef0 	.word	0x10001ef0
10042830:	20000278 	.word	0x20000278
10042834:	88df88df 	.word	0x88df88df
10042838:	2000047d 	.word	0x2000047d
1004283c:	2000037c 	.word	0x2000037c
10042840:	10045629 	.word	0x10045629
10042844:	000186a0 	.word	0x000186a0
10042848:	20000274 	.word	0x20000274
1004284c:	40590000 	.word	0x40590000
10042850:	20000275 	.word	0x20000275
10042854:	200001e0 	.word	0x200001e0

10042858 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
10042858:	b590      	push	{r4, r7, lr}
1004285a:	b089      	sub	sp, #36	@ 0x24
1004285c:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
1004285e:	2408      	movs	r4, #8
10042860:	193b      	adds	r3, r7, r4
10042862:	0018      	movs	r0, r3
10042864:	2318      	movs	r3, #24
10042866:	001a      	movs	r2, r3
10042868:	2100      	movs	r1, #0
1004286a:	f006 fd77 	bl	1004935c <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
1004286e:	003b      	movs	r3, r7
10042870:	0018      	movs	r0, r3
10042872:	2308      	movs	r3, #8
10042874:	001a      	movs	r2, r3
10042876:	2100      	movs	r1, #0
10042878:	f006 fd70 	bl	1004935c <memset>

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE
1004287c:	193b      	adds	r3, r7, r4
1004287e:	2203      	movs	r2, #3
10042880:	601a      	str	r2, [r3, #0]
			| RCC_OSCILLATORTYPE_LSE;
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
10042882:	193b      	adds	r3, r7, r4
10042884:	2280      	movs	r2, #128	@ 0x80
10042886:	0252      	lsls	r2, r2, #9
10042888:	605a      	str	r2, [r3, #4]
	RCC_OscInitStruct.LSEState = RCC_LSE_ON;
1004288a:	193b      	adds	r3, r7, r4
1004288c:	2210      	movs	r2, #16
1004288e:	60da      	str	r2, [r3, #12]
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
10042890:	193b      	adds	r3, r7, r4
10042892:	0018      	movs	r0, r3
10042894:	f005 fc40 	bl	10048118 <HAL_RCC_OscConfig>
10042898:	1e03      	subs	r3, r0, #0
1004289a:	d001      	beq.n	100428a0 <SystemClock_Config+0x48>
		Error_Handler();
1004289c:	f000 fa28 	bl	10042cf0 <Error_Handler>
	}

	/** Configure the SYSCLKSource and SYSCLKDivider
	 */
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_RC64MPLL;
100428a0:	003b      	movs	r3, r7
100428a2:	2200      	movs	r2, #0
100428a4:	601a      	str	r2, [r3, #0]
	RCC_ClkInitStruct.SYSCLKDivider = RCC_RC64MPLL_DIV1;
100428a6:	003b      	movs	r3, r7
100428a8:	2200      	movs	r2, #0
100428aa:	605a      	str	r2, [r3, #4]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_WAIT_STATES_1)
100428ac:	003b      	movs	r3, r7
100428ae:	2110      	movs	r1, #16
100428b0:	0018      	movs	r0, r3
100428b2:	f005 fd81 	bl	100483b8 <HAL_RCC_ClockConfig>
100428b6:	1e03      	subs	r3, r0, #0
100428b8:	d001      	beq.n	100428be <SystemClock_Config+0x66>
			!= HAL_OK) {
		Error_Handler();
100428ba:	f000 fa19 	bl	10042cf0 <Error_Handler>
	}
}
100428be:	46c0      	nop			@ (mov r8, r8)
100428c0:	46bd      	mov	sp, r7
100428c2:	b009      	add	sp, #36	@ 0x24
100428c4:	bd90      	pop	{r4, r7, pc}

100428c6 <PeriphCommonClock_Config>:

/**
 * @brief Peripherals Common Clock Configuration
 * @retval None
 */
void PeriphCommonClock_Config(void) {
100428c6:	b580      	push	{r7, lr}
100428c8:	b086      	sub	sp, #24
100428ca:	af00      	add	r7, sp, #0
	RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = { 0 };
100428cc:	003b      	movs	r3, r7
100428ce:	0018      	movs	r0, r3
100428d0:	2318      	movs	r3, #24
100428d2:	001a      	movs	r2, r3
100428d4:	2100      	movs	r1, #0
100428d6:	f006 fd41 	bl	1004935c <memset>

	/** Initializes the peripherals clock
	 */
	PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS;
100428da:	003b      	movs	r3, r7
100428dc:	2202      	movs	r2, #2
100428de:	601a      	str	r2, [r3, #0]
	PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLK_DIV4;
100428e0:	003b      	movs	r3, r7
100428e2:	2280      	movs	r2, #128	@ 0x80
100428e4:	0152      	lsls	r2, r2, #5
100428e6:	615a      	str	r2, [r3, #20]

	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK) {
100428e8:	003b      	movs	r3, r7
100428ea:	0018      	movs	r0, r3
100428ec:	f005 fe86 	bl	100485fc <HAL_RCCEx_PeriphCLKConfig>
100428f0:	1e03      	subs	r3, r0, #0
100428f2:	d001      	beq.n	100428f8 <PeriphCommonClock_Config+0x32>
		Error_Handler();
100428f4:	f000 f9fc 	bl	10042cf0 <Error_Handler>
	}
}
100428f8:	46c0      	nop			@ (mov r8, r8)
100428fa:	46bd      	mov	sp, r7
100428fc:	b006      	add	sp, #24
100428fe:	bd80      	pop	{r7, pc}

10042900 <MX_RADIO_Init>:
/**
 * @brief RADIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_RADIO_Init(void) {
10042900:	b580      	push	{r7, lr}
10042902:	b082      	sub	sp, #8
10042904:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN RADIO_Init 0 */

	/* USER CODE END RADIO_Init 0 */

	RADIO_HandleTypeDef hradio = { 0 };
10042906:	2300      	movs	r3, #0
10042908:	607b      	str	r3, [r7, #4]

	/* USER CODE BEGIN RADIO_Init 1 */

	/* USER CODE END RADIO_Init 1 */
	hradio.Instance = RADIO;
1004290a:	23c0      	movs	r3, #192	@ 0xc0
1004290c:	05db      	lsls	r3, r3, #23
1004290e:	607b      	str	r3, [r7, #4]
	HAL_RADIO_Init(&hradio);
10042910:	1d3b      	adds	r3, r7, #4
10042912:	0018      	movs	r0, r3
10042914:	f002 fb50 	bl	10044fb8 <HAL_RADIO_Init>
	/* USER CODE BEGIN RADIO_Init 2 */

	/* USER CODE END RADIO_Init 2 */

}
10042918:	46c0      	nop			@ (mov r8, r8)
1004291a:	46bd      	mov	sp, r7
1004291c:	b002      	add	sp, #8
1004291e:	bd80      	pop	{r7, pc}

10042920 <MX_RADIO_TIMER_Init>:
/**
 * @brief RADIO_TIMER Initialization Function
 * @param None
 * @retval None
 */
static void MX_RADIO_TIMER_Init(void) {
10042920:	b580      	push	{r7, lr}
10042922:	b082      	sub	sp, #8
10042924:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN RADIO_TIMER_Init 0 */

	/* USER CODE END RADIO_TIMER_Init 0 */

	RADIO_TIMER_InitTypeDef RADIO_TIMER_InitStruct = { 0 };
10042926:	003b      	movs	r3, r7
10042928:	0018      	movs	r0, r3
1004292a:	2308      	movs	r3, #8
1004292c:	001a      	movs	r2, r3
1004292e:	2100      	movs	r1, #0
10042930:	f006 fd14 	bl	1004935c <memset>

	/* USER CODE BEGIN RADIO_TIMER_Init 1 */

	/* USER CODE END RADIO_TIMER_Init 1 */

	if (__HAL_RCC_RADIO_IS_CLK_DISABLED()) {
10042934:	2001      	movs	r0, #1
10042936:	f7ff fe63 	bl	10042600 <LL_APB2_GRP1_IsEnabledClock>
1004293a:	1e03      	subs	r3, r0, #0
1004293c:	d108      	bne.n	10042950 <MX_RADIO_TIMER_Init+0x30>
		/* Radio Peripheral reset */
		__HAL_RCC_RADIO_FORCE_RESET();
1004293e:	2001      	movs	r0, #1
10042940:	f7ff fe72 	bl	10042628 <LL_APB2_GRP1_ForceReset>
		__HAL_RCC_RADIO_RELEASE_RESET();
10042944:	2001      	movs	r0, #1
10042946:	f7ff fe7f 	bl	10042648 <LL_APB2_GRP1_ReleaseReset>

		/* Enable Radio peripheral clock */
		__HAL_RCC_RADIO_CLK_ENABLE();
1004294a:	2001      	movs	r0, #1
1004294c:	f7ff fe42 	bl	100425d4 <LL_APB2_GRP1_EnableClock>
	}
	/* Wait to be sure that the Radio Timer is active */
	while (LL_RADIO_TIMER_GetAbsoluteTime(WAKEUP) < 0x10)
10042950:	46c0      	nop			@ (mov r8, r8)
10042952:	4b0c      	ldr	r3, [pc, #48]	@ (10042984 <MX_RADIO_TIMER_Init+0x64>)
10042954:	0018      	movs	r0, r3
10042956:	f7ff fe1d 	bl	10042594 <LL_RADIO_TIMER_GetAbsoluteTime>
1004295a:	0003      	movs	r3, r0
1004295c:	2b0f      	cmp	r3, #15
1004295e:	d9f8      	bls.n	10042952 <MX_RADIO_TIMER_Init+0x32>
		;
	RADIO_TIMER_InitStruct.XTAL_StartupTime = 320;
10042960:	003b      	movs	r3, r7
10042962:	22a0      	movs	r2, #160	@ 0xa0
10042964:	0052      	lsls	r2, r2, #1
10042966:	801a      	strh	r2, [r3, #0]
	RADIO_TIMER_InitStruct.enableInitialCalibration = FALSE;
10042968:	003b      	movs	r3, r7
1004296a:	2200      	movs	r2, #0
1004296c:	709a      	strb	r2, [r3, #2]
	RADIO_TIMER_InitStruct.periodicCalibrationInterval = 0;
1004296e:	003b      	movs	r3, r7
10042970:	2200      	movs	r2, #0
10042972:	605a      	str	r2, [r3, #4]
	HAL_RADIO_TIMER_Init(&RADIO_TIMER_InitStruct);
10042974:	003b      	movs	r3, r7
10042976:	0018      	movs	r0, r3
10042978:	f003 fdea 	bl	10046550 <HAL_RADIO_TIMER_Init>
	/* USER CODE BEGIN RADIO_TIMER_Init 2 */

	/* USER CODE END RADIO_TIMER_Init 2 */

}
1004297c:	46c0      	nop			@ (mov r8, r8)
1004297e:	46bd      	mov	sp, r7
10042980:	b002      	add	sp, #8
10042982:	bd80      	pop	{r7, pc}
10042984:	60001800 	.word	0x60001800

10042988 <MX_SPI2_Init>:
/**
 * @brief SPI2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI2_Init(void) {
10042988:	b580      	push	{r7, lr}
1004298a:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI2_Init 1 */

	/* USER CODE END SPI2_Init 1 */
	/* SPI2 parameter configuration*/
	hspi2.Instance = SPI2;
1004298c:	4b1b      	ldr	r3, [pc, #108]	@ (100429fc <MX_SPI2_Init+0x74>)
1004298e:	4a1c      	ldr	r2, [pc, #112]	@ (10042a00 <MX_SPI2_Init+0x78>)
10042990:	601a      	str	r2, [r3, #0]
	hspi2.Init.Mode = SPI_MODE_MASTER;
10042992:	4b1a      	ldr	r3, [pc, #104]	@ (100429fc <MX_SPI2_Init+0x74>)
10042994:	2282      	movs	r2, #130	@ 0x82
10042996:	0052      	lsls	r2, r2, #1
10042998:	605a      	str	r2, [r3, #4]
	hspi2.Init.Direction = SPI_DIRECTION_2LINES;
1004299a:	4b18      	ldr	r3, [pc, #96]	@ (100429fc <MX_SPI2_Init+0x74>)
1004299c:	2200      	movs	r2, #0
1004299e:	609a      	str	r2, [r3, #8]
	hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
100429a0:	4b16      	ldr	r3, [pc, #88]	@ (100429fc <MX_SPI2_Init+0x74>)
100429a2:	22e0      	movs	r2, #224	@ 0xe0
100429a4:	00d2      	lsls	r2, r2, #3
100429a6:	60da      	str	r2, [r3, #12]
	hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
100429a8:	4b14      	ldr	r3, [pc, #80]	@ (100429fc <MX_SPI2_Init+0x74>)
100429aa:	2200      	movs	r2, #0
100429ac:	611a      	str	r2, [r3, #16]
	hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
100429ae:	4b13      	ldr	r3, [pc, #76]	@ (100429fc <MX_SPI2_Init+0x74>)
100429b0:	2200      	movs	r2, #0
100429b2:	615a      	str	r2, [r3, #20]
	hspi2.Init.NSS = SPI_NSS_SOFT;
100429b4:	4b11      	ldr	r3, [pc, #68]	@ (100429fc <MX_SPI2_Init+0x74>)
100429b6:	2280      	movs	r2, #128	@ 0x80
100429b8:	0092      	lsls	r2, r2, #2
100429ba:	619a      	str	r2, [r3, #24]
	hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
100429bc:	4b0f      	ldr	r3, [pc, #60]	@ (100429fc <MX_SPI2_Init+0x74>)
100429be:	2218      	movs	r2, #24
100429c0:	61da      	str	r2, [r3, #28]
	hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
100429c2:	4b0e      	ldr	r3, [pc, #56]	@ (100429fc <MX_SPI2_Init+0x74>)
100429c4:	2200      	movs	r2, #0
100429c6:	621a      	str	r2, [r3, #32]
	hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
100429c8:	4b0c      	ldr	r3, [pc, #48]	@ (100429fc <MX_SPI2_Init+0x74>)
100429ca:	2200      	movs	r2, #0
100429cc:	625a      	str	r2, [r3, #36]	@ 0x24
	hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
100429ce:	4b0b      	ldr	r3, [pc, #44]	@ (100429fc <MX_SPI2_Init+0x74>)
100429d0:	2200      	movs	r2, #0
100429d2:	629a      	str	r2, [r3, #40]	@ 0x28
	hspi2.Init.CRCPolynomial = 7;
100429d4:	4b09      	ldr	r3, [pc, #36]	@ (100429fc <MX_SPI2_Init+0x74>)
100429d6:	2207      	movs	r2, #7
100429d8:	62da      	str	r2, [r3, #44]	@ 0x2c
	hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
100429da:	4b08      	ldr	r3, [pc, #32]	@ (100429fc <MX_SPI2_Init+0x74>)
100429dc:	2200      	movs	r2, #0
100429de:	631a      	str	r2, [r3, #48]	@ 0x30
	hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
100429e0:	4b06      	ldr	r3, [pc, #24]	@ (100429fc <MX_SPI2_Init+0x74>)
100429e2:	2208      	movs	r2, #8
100429e4:	635a      	str	r2, [r3, #52]	@ 0x34
	if (HAL_SPI_Init(&hspi2) != HAL_OK) {
100429e6:	4b05      	ldr	r3, [pc, #20]	@ (100429fc <MX_SPI2_Init+0x74>)
100429e8:	0018      	movs	r0, r3
100429ea:	f005 fe43 	bl	10048674 <HAL_SPI_Init>
100429ee:	1e03      	subs	r3, r0, #0
100429f0:	d001      	beq.n	100429f6 <MX_SPI2_Init+0x6e>
		Error_Handler();
100429f2:	f000 f97d 	bl	10042cf0 <Error_Handler>
	}
	/* USER CODE BEGIN SPI2_Init 2 */

	/* USER CODE END SPI2_Init 2 */

}
100429f6:	46c0      	nop			@ (mov r8, r8)
100429f8:	46bd      	mov	sp, r7
100429fa:	bd80      	pop	{r7, pc}
100429fc:	2000017c 	.word	0x2000017c
10042a00:	41003000 	.word	0x41003000

10042a04 <MX_USART1_UART_Init>:
/**
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void) {
10042a04:	b580      	push	{r7, lr}
10042a06:	af00      	add	r7, sp, #0
	/* USER CODE END USART1_Init 0 */

	/* USER CODE BEGIN USART1_Init 1 */

	/* USER CODE END USART1_Init 1 */
	huart1.Instance = USART1;
10042a08:	4b23      	ldr	r3, [pc, #140]	@ (10042a98 <MX_USART1_UART_Init+0x94>)
10042a0a:	4a24      	ldr	r2, [pc, #144]	@ (10042a9c <MX_USART1_UART_Init+0x98>)
10042a0c:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 115200;
10042a0e:	4b22      	ldr	r3, [pc, #136]	@ (10042a98 <MX_USART1_UART_Init+0x94>)
10042a10:	22e1      	movs	r2, #225	@ 0xe1
10042a12:	0252      	lsls	r2, r2, #9
10042a14:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
10042a16:	4b20      	ldr	r3, [pc, #128]	@ (10042a98 <MX_USART1_UART_Init+0x94>)
10042a18:	2200      	movs	r2, #0
10042a1a:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
10042a1c:	4b1e      	ldr	r3, [pc, #120]	@ (10042a98 <MX_USART1_UART_Init+0x94>)
10042a1e:	2200      	movs	r2, #0
10042a20:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
10042a22:	4b1d      	ldr	r3, [pc, #116]	@ (10042a98 <MX_USART1_UART_Init+0x94>)
10042a24:	2200      	movs	r2, #0
10042a26:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
10042a28:	4b1b      	ldr	r3, [pc, #108]	@ (10042a98 <MX_USART1_UART_Init+0x94>)
10042a2a:	220c      	movs	r2, #12
10042a2c:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
10042a2e:	4b1a      	ldr	r3, [pc, #104]	@ (10042a98 <MX_USART1_UART_Init+0x94>)
10042a30:	2200      	movs	r2, #0
10042a32:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
10042a34:	4b18      	ldr	r3, [pc, #96]	@ (10042a98 <MX_USART1_UART_Init+0x94>)
10042a36:	2200      	movs	r2, #0
10042a38:	61da      	str	r2, [r3, #28]
	huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
10042a3a:	4b17      	ldr	r3, [pc, #92]	@ (10042a98 <MX_USART1_UART_Init+0x94>)
10042a3c:	2200      	movs	r2, #0
10042a3e:	621a      	str	r2, [r3, #32]
	huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
10042a40:	4b15      	ldr	r3, [pc, #84]	@ (10042a98 <MX_USART1_UART_Init+0x94>)
10042a42:	2200      	movs	r2, #0
10042a44:	625a      	str	r2, [r3, #36]	@ 0x24
	huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
10042a46:	4b14      	ldr	r3, [pc, #80]	@ (10042a98 <MX_USART1_UART_Init+0x94>)
10042a48:	2200      	movs	r2, #0
10042a4a:	629a      	str	r2, [r3, #40]	@ 0x28
	if (HAL_UART_Init(&huart1) != HAL_OK) {
10042a4c:	4b12      	ldr	r3, [pc, #72]	@ (10042a98 <MX_USART1_UART_Init+0x94>)
10042a4e:	0018      	movs	r0, r3
10042a50:	f005 fec8 	bl	100487e4 <HAL_UART_Init>
10042a54:	1e03      	subs	r3, r0, #0
10042a56:	d001      	beq.n	10042a5c <MX_USART1_UART_Init+0x58>
		Error_Handler();
10042a58:	f000 f94a 	bl	10042cf0 <Error_Handler>
	}
	if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8)
10042a5c:	4b0e      	ldr	r3, [pc, #56]	@ (10042a98 <MX_USART1_UART_Init+0x94>)
10042a5e:	2100      	movs	r1, #0
10042a60:	0018      	movs	r0, r3
10042a62:	f006 fb8d 	bl	10049180 <HAL_UARTEx_SetTxFifoThreshold>
10042a66:	1e03      	subs	r3, r0, #0
10042a68:	d001      	beq.n	10042a6e <MX_USART1_UART_Init+0x6a>
			!= HAL_OK) {
		Error_Handler();
10042a6a:	f000 f941 	bl	10042cf0 <Error_Handler>
	}
	if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8)
10042a6e:	4b0a      	ldr	r3, [pc, #40]	@ (10042a98 <MX_USART1_UART_Init+0x94>)
10042a70:	2100      	movs	r1, #0
10042a72:	0018      	movs	r0, r3
10042a74:	f006 fbc4 	bl	10049200 <HAL_UARTEx_SetRxFifoThreshold>
10042a78:	1e03      	subs	r3, r0, #0
10042a7a:	d001      	beq.n	10042a80 <MX_USART1_UART_Init+0x7c>
			!= HAL_OK) {
		Error_Handler();
10042a7c:	f000 f938 	bl	10042cf0 <Error_Handler>
	}
	if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK) {
10042a80:	4b05      	ldr	r3, [pc, #20]	@ (10042a98 <MX_USART1_UART_Init+0x94>)
10042a82:	0018      	movs	r0, r3
10042a84:	f006 fb42 	bl	1004910c <HAL_UARTEx_DisableFifoMode>
10042a88:	1e03      	subs	r3, r0, #0
10042a8a:	d001      	beq.n	10042a90 <MX_USART1_UART_Init+0x8c>
		Error_Handler();
10042a8c:	f000 f930 	bl	10042cf0 <Error_Handler>
	}
	/* USER CODE BEGIN USART1_Init 2 */

	/* USER CODE END USART1_Init 2 */

}
10042a90:	46c0      	nop			@ (mov r8, r8)
10042a92:	46bd      	mov	sp, r7
10042a94:	bd80      	pop	{r7, pc}
10042a96:	46c0      	nop			@ (mov r8, r8)
10042a98:	200001e0 	.word	0x200001e0
10042a9c:	41004000 	.word	0x41004000

10042aa0 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
10042aa0:	b580      	push	{r7, lr}
10042aa2:	b086      	sub	sp, #24
10042aa4:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
10042aa6:	1d3b      	adds	r3, r7, #4
10042aa8:	0018      	movs	r0, r3
10042aaa:	2314      	movs	r3, #20
10042aac:	001a      	movs	r2, r3
10042aae:	2100      	movs	r1, #0
10042ab0:	f006 fc54 	bl	1004935c <memset>
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOA_CLK_ENABLE();
10042ab4:	2004      	movs	r0, #4
10042ab6:	f7ff fd77 	bl	100425a8 <LL_AHB1_GRP1_EnableClock>
	__HAL_RCC_GPIOB_CLK_ENABLE();
10042aba:	2008      	movs	r0, #8
10042abc:	f7ff fd74 	bl	100425a8 <LL_AHB1_GRP1_EnableClock>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
10042ac0:	2390      	movs	r3, #144	@ 0x90
10042ac2:	05db      	lsls	r3, r3, #23
10042ac4:	2200      	movs	r2, #0
10042ac6:	2110      	movs	r1, #16
10042ac8:	0018      	movs	r0, r3
10042aca:	f002 f8b0 	bl	10044c2e <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_RESET);
10042ace:	2380      	movs	r3, #128	@ 0x80
10042ad0:	00db      	lsls	r3, r3, #3
10042ad2:	4831      	ldr	r0, [pc, #196]	@ (10042b98 <MX_GPIO_Init+0xf8>)
10042ad4:	2200      	movs	r2, #0
10042ad6:	0019      	movs	r1, r3
10042ad8:	f002 f8a9 	bl	10044c2e <HAL_GPIO_WritePin>

	/*Configure GPIO pin : PA2 */
	GPIO_InitStruct.Pin = GPIO_PIN_2;
10042adc:	1d3b      	adds	r3, r7, #4
10042ade:	2204      	movs	r2, #4
10042ae0:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
10042ae2:	1d3b      	adds	r3, r7, #4
10042ae4:	2202      	movs	r2, #2
10042ae6:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
10042ae8:	1d3b      	adds	r3, r7, #4
10042aea:	2201      	movs	r2, #1
10042aec:	609a      	str	r2, [r3, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
10042aee:	1d3b      	adds	r3, r7, #4
10042af0:	2200      	movs	r2, #0
10042af2:	60da      	str	r2, [r3, #12]
	GPIO_InitStruct.Alternate = GPIO_AF5_SWDIO;
10042af4:	1d3b      	adds	r3, r7, #4
10042af6:	2205      	movs	r2, #5
10042af8:	611a      	str	r2, [r3, #16]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
10042afa:	1d3a      	adds	r2, r7, #4
10042afc:	2390      	movs	r3, #144	@ 0x90
10042afe:	05db      	lsls	r3, r3, #23
10042b00:	0011      	movs	r1, r2
10042b02:	0018      	movs	r0, r3
10042b04:	f001 feea 	bl	100448dc <HAL_GPIO_Init>

	/*Configure GPIO pin : PA4 */
	GPIO_InitStruct.Pin = GPIO_PIN_4;
10042b08:	1d3b      	adds	r3, r7, #4
10042b0a:	2210      	movs	r2, #16
10042b0c:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
10042b0e:	1d3b      	adds	r3, r7, #4
10042b10:	2201      	movs	r2, #1
10042b12:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
10042b14:	1d3b      	adds	r3, r7, #4
10042b16:	2200      	movs	r2, #0
10042b18:	609a      	str	r2, [r3, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
10042b1a:	1d3b      	adds	r3, r7, #4
10042b1c:	2200      	movs	r2, #0
10042b1e:	60da      	str	r2, [r3, #12]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
10042b20:	1d3a      	adds	r2, r7, #4
10042b22:	2390      	movs	r3, #144	@ 0x90
10042b24:	05db      	lsls	r3, r3, #23
10042b26:	0011      	movs	r1, r2
10042b28:	0018      	movs	r0, r3
10042b2a:	f001 fed7 	bl	100448dc <HAL_GPIO_Init>

	/*Configure GPIO pin : PB10 */
	GPIO_InitStruct.Pin = GPIO_PIN_10;
10042b2e:	1d3b      	adds	r3, r7, #4
10042b30:	2280      	movs	r2, #128	@ 0x80
10042b32:	00d2      	lsls	r2, r2, #3
10042b34:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
10042b36:	1d3b      	adds	r3, r7, #4
10042b38:	2201      	movs	r2, #1
10042b3a:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
10042b3c:	1d3b      	adds	r3, r7, #4
10042b3e:	2200      	movs	r2, #0
10042b40:	609a      	str	r2, [r3, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
10042b42:	1d3b      	adds	r3, r7, #4
10042b44:	2200      	movs	r2, #0
10042b46:	60da      	str	r2, [r3, #12]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
10042b48:	1d3b      	adds	r3, r7, #4
10042b4a:	4a13      	ldr	r2, [pc, #76]	@ (10042b98 <MX_GPIO_Init+0xf8>)
10042b4c:	0019      	movs	r1, r3
10042b4e:	0010      	movs	r0, r2
10042b50:	f001 fec4 	bl	100448dc <HAL_GPIO_Init>

	/*Configure GPIO pin : PB5 */
	GPIO_InitStruct.Pin = GPIO_PIN_5;
10042b54:	1d3b      	adds	r3, r7, #4
10042b56:	2220      	movs	r2, #32
10042b58:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
10042b5a:	1d3b      	adds	r3, r7, #4
10042b5c:	2282      	movs	r2, #130	@ 0x82
10042b5e:	03d2      	lsls	r2, r2, #15
10042b60:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
10042b62:	1d3b      	adds	r3, r7, #4
10042b64:	2200      	movs	r2, #0
10042b66:	609a      	str	r2, [r3, #8]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
10042b68:	1d3b      	adds	r3, r7, #4
10042b6a:	4a0b      	ldr	r2, [pc, #44]	@ (10042b98 <MX_GPIO_Init+0xf8>)
10042b6c:	0019      	movs	r1, r3
10042b6e:	0010      	movs	r0, r2
10042b70:	f001 feb4 	bl	100448dc <HAL_GPIO_Init>

	/**/
	LL_PWR_EnableGPIOPullUp(LL_PWR_GPIO_A, LL_PWR_GPIO_BIT_2);
10042b74:	4b09      	ldr	r3, [pc, #36]	@ (10042b9c <MX_GPIO_Init+0xfc>)
10042b76:	2104      	movs	r1, #4
10042b78:	0018      	movs	r0, r3
10042b7a:	f7ff fcc3 	bl	10042504 <LL_PWR_EnableGPIOPullUp>

	/**/
	LL_PWR_SetNoPullA(LL_PWR_GPIO_BIT_4);
10042b7e:	2010      	movs	r0, #16
10042b80:	f7ff fcd8 	bl	10042534 <LL_PWR_SetNoPullA>

	/**/
	LL_PWR_SetNoPullB(LL_PWR_GPIO_BIT_10);
10042b84:	2380      	movs	r3, #128	@ 0x80
10042b86:	00db      	lsls	r3, r3, #3
10042b88:	0018      	movs	r0, r3
10042b8a:	f7ff fceb 	bl	10042564 <LL_PWR_SetNoPullB>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
10042b8e:	46c0      	nop			@ (mov r8, r8)
10042b90:	46bd      	mov	sp, r7
10042b92:	b006      	add	sp, #24
10042b94:	bd80      	pop	{r7, pc}
10042b96:	46c0      	nop			@ (mov r8, r8)
10042b98:	48100000 	.word	0x48100000
10042b9c:	48500020 	.word	0x48500020

10042ba0 <HAL_RADIO_CallbackRcvError>:

/* USER CODE BEGIN 4 */
void HAL_RADIO_CallbackRcvError(RxStats_t *rxPacketStats) {
10042ba0:	b590      	push	{r4, r7, lr}
10042ba2:	b087      	sub	sp, #28
10042ba4:	af04      	add	r7, sp, #16
10042ba6:	6078      	str	r0, [r7, #4]

	HAL_RADIO_ReceivePacketWithAck(beacon_channel, RX_WAKEUP_TIME, receivedData,
10042ba8:	4b09      	ldr	r3, [pc, #36]	@ (10042bd0 <HAL_RADIO_CallbackRcvError+0x30>)
10042baa:	7818      	ldrb	r0, [r3, #0]
10042bac:	4c09      	ldr	r4, [pc, #36]	@ (10042bd4 <HAL_RADIO_CallbackRcvError+0x34>)
10042bae:	4a0a      	ldr	r2, [pc, #40]	@ (10042bd8 <HAL_RADIO_CallbackRcvError+0x38>)
10042bb0:	23be      	movs	r3, #190	@ 0xbe
10042bb2:	0059      	lsls	r1, r3, #1
10042bb4:	4b09      	ldr	r3, [pc, #36]	@ (10042bdc <HAL_RADIO_CallbackRcvError+0x3c>)
10042bb6:	9302      	str	r3, [sp, #8]
10042bb8:	23ff      	movs	r3, #255	@ 0xff
10042bba:	9301      	str	r3, [sp, #4]
10042bbc:	4b08      	ldr	r3, [pc, #32]	@ (10042be0 <HAL_RADIO_CallbackRcvError+0x40>)
10042bbe:	9300      	str	r3, [sp, #0]
10042bc0:	0023      	movs	r3, r4
10042bc2:	f003 f9fb 	bl	10045fbc <HAL_RADIO_ReceivePacketWithAck>
			sendAckData, RX_TIMEOUT, MAX_LL_PACKET_LENGTH, HAL_RADIO_Callback);

}
10042bc6:	46c0      	nop			@ (mov r8, r8)
10042bc8:	46bd      	mov	sp, r7
10042bca:	b003      	add	sp, #12
10042bcc:	bd90      	pop	{r4, r7, pc}
10042bce:	46c0      	nop			@ (mov r8, r8)
10042bd0:	2000047d 	.word	0x2000047d
10042bd4:	20000278 	.word	0x20000278
10042bd8:	2000037c 	.word	0x2000037c
10042bdc:	10045629 	.word	0x10045629
10042be0:	000186a0 	.word	0x000186a0

10042be4 <HAL_RADIO_CallbackRcvTimeout>:

void HAL_RADIO_CallbackRcvTimeout(RxStats_t *rxPacketStats) {
10042be4:	b590      	push	{r4, r7, lr}
10042be6:	b087      	sub	sp, #28
10042be8:	af04      	add	r7, sp, #16
10042bea:	6078      	str	r0, [r7, #4]

	HAL_RADIO_ReceivePacketWithAck(beacon_channel, RX_WAKEUP_TIME, receivedData,
10042bec:	4b09      	ldr	r3, [pc, #36]	@ (10042c14 <HAL_RADIO_CallbackRcvTimeout+0x30>)
10042bee:	7818      	ldrb	r0, [r3, #0]
10042bf0:	4c09      	ldr	r4, [pc, #36]	@ (10042c18 <HAL_RADIO_CallbackRcvTimeout+0x34>)
10042bf2:	4a0a      	ldr	r2, [pc, #40]	@ (10042c1c <HAL_RADIO_CallbackRcvTimeout+0x38>)
10042bf4:	23be      	movs	r3, #190	@ 0xbe
10042bf6:	0059      	lsls	r1, r3, #1
10042bf8:	4b09      	ldr	r3, [pc, #36]	@ (10042c20 <HAL_RADIO_CallbackRcvTimeout+0x3c>)
10042bfa:	9302      	str	r3, [sp, #8]
10042bfc:	23ff      	movs	r3, #255	@ 0xff
10042bfe:	9301      	str	r3, [sp, #4]
10042c00:	4b08      	ldr	r3, [pc, #32]	@ (10042c24 <HAL_RADIO_CallbackRcvTimeout+0x40>)
10042c02:	9300      	str	r3, [sp, #0]
10042c04:	0023      	movs	r3, r4
10042c06:	f003 f9d9 	bl	10045fbc <HAL_RADIO_ReceivePacketWithAck>
			sendAckData, RX_TIMEOUT, MAX_LL_PACKET_LENGTH, HAL_RADIO_Callback);

}
10042c0a:	46c0      	nop			@ (mov r8, r8)
10042c0c:	46bd      	mov	sp, r7
10042c0e:	b003      	add	sp, #12
10042c10:	bd90      	pop	{r4, r7, pc}
10042c12:	46c0      	nop			@ (mov r8, r8)
10042c14:	2000047d 	.word	0x2000047d
10042c18:	20000278 	.word	0x20000278
10042c1c:	2000037c 	.word	0x2000037c
10042c20:	10045629 	.word	0x10045629
10042c24:	000186a0 	.word	0x000186a0

10042c28 <HAL_RADIO_CallbackTxDone>:

void HAL_RADIO_CallbackTxDone(void) {
10042c28:	b590      	push	{r4, r7, lr}
10042c2a:	b085      	sub	sp, #20
10042c2c:	af04      	add	r7, sp, #16

	HAL_RADIO_ReceivePacketWithAck(beacon_channel, RX_WAKEUP_TIME, receivedData,
10042c2e:	4b09      	ldr	r3, [pc, #36]	@ (10042c54 <HAL_RADIO_CallbackTxDone+0x2c>)
10042c30:	7818      	ldrb	r0, [r3, #0]
10042c32:	4c09      	ldr	r4, [pc, #36]	@ (10042c58 <HAL_RADIO_CallbackTxDone+0x30>)
10042c34:	4a09      	ldr	r2, [pc, #36]	@ (10042c5c <HAL_RADIO_CallbackTxDone+0x34>)
10042c36:	23be      	movs	r3, #190	@ 0xbe
10042c38:	0059      	lsls	r1, r3, #1
10042c3a:	4b09      	ldr	r3, [pc, #36]	@ (10042c60 <HAL_RADIO_CallbackTxDone+0x38>)
10042c3c:	9302      	str	r3, [sp, #8]
10042c3e:	23ff      	movs	r3, #255	@ 0xff
10042c40:	9301      	str	r3, [sp, #4]
10042c42:	4b08      	ldr	r3, [pc, #32]	@ (10042c64 <HAL_RADIO_CallbackTxDone+0x3c>)
10042c44:	9300      	str	r3, [sp, #0]
10042c46:	0023      	movs	r3, r4
10042c48:	f003 f9b8 	bl	10045fbc <HAL_RADIO_ReceivePacketWithAck>
			sendAckData, RX_TIMEOUT, MAX_LL_PACKET_LENGTH, HAL_RADIO_Callback);

}
10042c4c:	46c0      	nop			@ (mov r8, r8)
10042c4e:	46bd      	mov	sp, r7
10042c50:	b001      	add	sp, #4
10042c52:	bd90      	pop	{r4, r7, pc}
10042c54:	2000047d 	.word	0x2000047d
10042c58:	20000278 	.word	0x20000278
10042c5c:	2000037c 	.word	0x2000037c
10042c60:	10045629 	.word	0x10045629
10042c64:	000186a0 	.word	0x000186a0

10042c68 <HAL_RADIO_CallbackRcvOk>:

void HAL_RADIO_CallbackRcvOk(RxStats_t *rxPacketStats) {
10042c68:	b590      	push	{r4, r7, lr}
10042c6a:	b087      	sub	sp, #28
10042c6c:	af04      	add	r7, sp, #16
10042c6e:	6078      	str	r0, [r7, #4]
	if (receivedData[0] == 0x1D) {
10042c70:	4b18      	ldr	r3, [pc, #96]	@ (10042cd4 <HAL_RADIO_CallbackRcvOk+0x6c>)
10042c72:	781b      	ldrb	r3, [r3, #0]
10042c74:	2b1d      	cmp	r3, #29
10042c76:	d109      	bne.n	10042c8c <HAL_RADIO_CallbackRcvOk+0x24>
		sendAckData[10] = 0;
10042c78:	4b17      	ldr	r3, [pc, #92]	@ (10042cd8 <HAL_RADIO_CallbackRcvOk+0x70>)
10042c7a:	2200      	movs	r2, #0
10042c7c:	729a      	strb	r2, [r3, #10]
		sendAckData[11] = 0;
10042c7e:	4b16      	ldr	r3, [pc, #88]	@ (10042cd8 <HAL_RADIO_CallbackRcvOk+0x70>)
10042c80:	2200      	movs	r2, #0
10042c82:	72da      	strb	r2, [r3, #11]
		ranging = TRUE;
10042c84:	4b15      	ldr	r3, [pc, #84]	@ (10042cdc <HAL_RADIO_CallbackRcvOk+0x74>)
10042c86:	2201      	movs	r2, #1
10042c88:	701a      	strb	r2, [r3, #0]
10042c8a:	e00f      	b.n	10042cac <HAL_RADIO_CallbackRcvOk+0x44>
	} else if (receivedData[0] == 0xFF) {
10042c8c:	4b11      	ldr	r3, [pc, #68]	@ (10042cd4 <HAL_RADIO_CallbackRcvOk+0x6c>)
10042c8e:	781b      	ldrb	r3, [r3, #0]
10042c90:	2bff      	cmp	r3, #255	@ 0xff
10042c92:	d10b      	bne.n	10042cac <HAL_RADIO_CallbackRcvOk+0x44>
		sendAckData[10] = 0;
10042c94:	4b10      	ldr	r3, [pc, #64]	@ (10042cd8 <HAL_RADIO_CallbackRcvOk+0x70>)
10042c96:	2200      	movs	r2, #0
10042c98:	729a      	strb	r2, [r3, #10]
		sendAckData[11] = 0;
10042c9a:	4b0f      	ldr	r3, [pc, #60]	@ (10042cd8 <HAL_RADIO_CallbackRcvOk+0x70>)
10042c9c:	2200      	movs	r2, #0
10042c9e:	72da      	strb	r2, [r3, #11]
		printPacket = TRUE;
10042ca0:	4b0f      	ldr	r3, [pc, #60]	@ (10042ce0 <HAL_RADIO_CallbackRcvOk+0x78>)
10042ca2:	2201      	movs	r2, #1
10042ca4:	701a      	strb	r2, [r3, #0]
		ranging = FALSE;
10042ca6:	4b0d      	ldr	r3, [pc, #52]	@ (10042cdc <HAL_RADIO_CallbackRcvOk+0x74>)
10042ca8:	2200      	movs	r2, #0
10042caa:	701a      	strb	r2, [r3, #0]
	}
	HAL_RADIO_ReceivePacketWithAck(beacon_channel, RX_WAKEUP_TIME, receivedData,
10042cac:	4b0d      	ldr	r3, [pc, #52]	@ (10042ce4 <HAL_RADIO_CallbackRcvOk+0x7c>)
10042cae:	7818      	ldrb	r0, [r3, #0]
10042cb0:	4c09      	ldr	r4, [pc, #36]	@ (10042cd8 <HAL_RADIO_CallbackRcvOk+0x70>)
10042cb2:	4a08      	ldr	r2, [pc, #32]	@ (10042cd4 <HAL_RADIO_CallbackRcvOk+0x6c>)
10042cb4:	23be      	movs	r3, #190	@ 0xbe
10042cb6:	0059      	lsls	r1, r3, #1
10042cb8:	4b0b      	ldr	r3, [pc, #44]	@ (10042ce8 <HAL_RADIO_CallbackRcvOk+0x80>)
10042cba:	9302      	str	r3, [sp, #8]
10042cbc:	23ff      	movs	r3, #255	@ 0xff
10042cbe:	9301      	str	r3, [sp, #4]
10042cc0:	4b0a      	ldr	r3, [pc, #40]	@ (10042cec <HAL_RADIO_CallbackRcvOk+0x84>)
10042cc2:	9300      	str	r3, [sp, #0]
10042cc4:	0023      	movs	r3, r4
10042cc6:	f003 f979 	bl	10045fbc <HAL_RADIO_ReceivePacketWithAck>
			sendAckData, RX_TIMEOUT, MAX_LL_PACKET_LENGTH, HAL_RADIO_Callback);
}
10042cca:	46c0      	nop			@ (mov r8, r8)
10042ccc:	46bd      	mov	sp, r7
10042cce:	b003      	add	sp, #12
10042cd0:	bd90      	pop	{r4, r7, pc}
10042cd2:	46c0      	nop			@ (mov r8, r8)
10042cd4:	2000037c 	.word	0x2000037c
10042cd8:	20000278 	.word	0x20000278
10042cdc:	20000274 	.word	0x20000274
10042ce0:	20000275 	.word	0x20000275
10042ce4:	2000047d 	.word	0x2000047d
10042ce8:	10045629 	.word	0x10045629
10042cec:	000186a0 	.word	0x000186a0

10042cf0 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
10042cf0:	b580      	push	{r7, lr}
10042cf2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
10042cf4:	b672      	cpsid	i
}
10042cf6:	46c0      	nop			@ (mov r8, r8)
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
10042cf8:	46c0      	nop			@ (mov r8, r8)
10042cfa:	e7fd      	b.n	10042cf8 <Error_Handler+0x8>

10042cfc <LL_PWR_SetNoPullA>:
{
10042cfc:	b580      	push	{r7, lr}
10042cfe:	b082      	sub	sp, #8
10042d00:	af00      	add	r7, sp, #0
10042d02:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(PWR->PUCRA, GPIONumber);
10042d04:	4b08      	ldr	r3, [pc, #32]	@ (10042d28 <LL_PWR_SetNoPullA+0x2c>)
10042d06:	6a1a      	ldr	r2, [r3, #32]
10042d08:	687b      	ldr	r3, [r7, #4]
10042d0a:	43d9      	mvns	r1, r3
10042d0c:	4b06      	ldr	r3, [pc, #24]	@ (10042d28 <LL_PWR_SetNoPullA+0x2c>)
10042d0e:	400a      	ands	r2, r1
10042d10:	621a      	str	r2, [r3, #32]
  CLEAR_BIT(PWR->PDCRA, GPIONumber);
10042d12:	4b05      	ldr	r3, [pc, #20]	@ (10042d28 <LL_PWR_SetNoPullA+0x2c>)
10042d14:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
10042d16:	687b      	ldr	r3, [r7, #4]
10042d18:	43d9      	mvns	r1, r3
10042d1a:	4b03      	ldr	r3, [pc, #12]	@ (10042d28 <LL_PWR_SetNoPullA+0x2c>)
10042d1c:	400a      	ands	r2, r1
10042d1e:	625a      	str	r2, [r3, #36]	@ 0x24
}
10042d20:	46c0      	nop			@ (mov r8, r8)
10042d22:	46bd      	mov	sp, r7
10042d24:	b002      	add	sp, #8
10042d26:	bd80      	pop	{r7, pc}
10042d28:	48500000 	.word	0x48500000

10042d2c <LL_AHB1_GRP1_EnableClock>:
{
10042d2c:	b580      	push	{r7, lr}
10042d2e:	b084      	sub	sp, #16
10042d30:	af00      	add	r7, sp, #0
10042d32:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHBENR, Periphs);
10042d34:	4b07      	ldr	r3, [pc, #28]	@ (10042d54 <LL_AHB1_GRP1_EnableClock+0x28>)
10042d36:	6d19      	ldr	r1, [r3, #80]	@ 0x50
10042d38:	4b06      	ldr	r3, [pc, #24]	@ (10042d54 <LL_AHB1_GRP1_EnableClock+0x28>)
10042d3a:	687a      	ldr	r2, [r7, #4]
10042d3c:	430a      	orrs	r2, r1
10042d3e:	651a      	str	r2, [r3, #80]	@ 0x50
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
10042d40:	4b04      	ldr	r3, [pc, #16]	@ (10042d54 <LL_AHB1_GRP1_EnableClock+0x28>)
10042d42:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
10042d44:	687a      	ldr	r2, [r7, #4]
10042d46:	4013      	ands	r3, r2
10042d48:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
10042d4a:	68fb      	ldr	r3, [r7, #12]
}
10042d4c:	46c0      	nop			@ (mov r8, r8)
10042d4e:	46bd      	mov	sp, r7
10042d50:	b004      	add	sp, #16
10042d52:	bd80      	pop	{r7, pc}
10042d54:	48400000 	.word	0x48400000

10042d58 <LL_APB0_GRP1_EnableClock>:
{
10042d58:	b580      	push	{r7, lr}
10042d5a:	b084      	sub	sp, #16
10042d5c:	af00      	add	r7, sp, #0
10042d5e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB0ENR, Periphs);
10042d60:	4b07      	ldr	r3, [pc, #28]	@ (10042d80 <LL_APB0_GRP1_EnableClock+0x28>)
10042d62:	6d59      	ldr	r1, [r3, #84]	@ 0x54
10042d64:	4b06      	ldr	r3, [pc, #24]	@ (10042d80 <LL_APB0_GRP1_EnableClock+0x28>)
10042d66:	687a      	ldr	r2, [r7, #4]
10042d68:	430a      	orrs	r2, r1
10042d6a:	655a      	str	r2, [r3, #84]	@ 0x54
  tmpreg = READ_BIT(RCC->APB0ENR, Periphs);
10042d6c:	4b04      	ldr	r3, [pc, #16]	@ (10042d80 <LL_APB0_GRP1_EnableClock+0x28>)
10042d6e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
10042d70:	687a      	ldr	r2, [r7, #4]
10042d72:	4013      	ands	r3, r2
10042d74:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
10042d76:	68fb      	ldr	r3, [r7, #12]
}
10042d78:	46c0      	nop			@ (mov r8, r8)
10042d7a:	46bd      	mov	sp, r7
10042d7c:	b004      	add	sp, #16
10042d7e:	bd80      	pop	{r7, pc}
10042d80:	48400000 	.word	0x48400000

10042d84 <LL_APB1_GRP1_EnableClock>:
{
10042d84:	b580      	push	{r7, lr}
10042d86:	b084      	sub	sp, #16
10042d88:	af00      	add	r7, sp, #0
10042d8a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
10042d8c:	4b07      	ldr	r3, [pc, #28]	@ (10042dac <LL_APB1_GRP1_EnableClock+0x28>)
10042d8e:	6d99      	ldr	r1, [r3, #88]	@ 0x58
10042d90:	4b06      	ldr	r3, [pc, #24]	@ (10042dac <LL_APB1_GRP1_EnableClock+0x28>)
10042d92:	687a      	ldr	r2, [r7, #4]
10042d94:	430a      	orrs	r2, r1
10042d96:	659a      	str	r2, [r3, #88]	@ 0x58
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
10042d98:	4b04      	ldr	r3, [pc, #16]	@ (10042dac <LL_APB1_GRP1_EnableClock+0x28>)
10042d9a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
10042d9c:	687a      	ldr	r2, [r7, #4]
10042d9e:	4013      	ands	r3, r2
10042da0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
10042da2:	68fb      	ldr	r3, [r7, #12]
}
10042da4:	46c0      	nop			@ (mov r8, r8)
10042da6:	46bd      	mov	sp, r7
10042da8:	b004      	add	sp, #16
10042daa:	bd80      	pop	{r7, pc}
10042dac:	48400000 	.word	0x48400000

10042db0 <LL_APB2_GRP1_EnableClock>:
{
10042db0:	b580      	push	{r7, lr}
10042db2:	b084      	sub	sp, #16
10042db4:	af00      	add	r7, sp, #0
10042db6:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
10042db8:	4b07      	ldr	r3, [pc, #28]	@ (10042dd8 <LL_APB2_GRP1_EnableClock+0x28>)
10042dba:	6e19      	ldr	r1, [r3, #96]	@ 0x60
10042dbc:	4b06      	ldr	r3, [pc, #24]	@ (10042dd8 <LL_APB2_GRP1_EnableClock+0x28>)
10042dbe:	687a      	ldr	r2, [r7, #4]
10042dc0:	430a      	orrs	r2, r1
10042dc2:	661a      	str	r2, [r3, #96]	@ 0x60
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
10042dc4:	4b04      	ldr	r3, [pc, #16]	@ (10042dd8 <LL_APB2_GRP1_EnableClock+0x28>)
10042dc6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
10042dc8:	687a      	ldr	r2, [r7, #4]
10042dca:	4013      	ands	r3, r2
10042dcc:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
10042dce:	68fb      	ldr	r3, [r7, #12]
}
10042dd0:	46c0      	nop			@ (mov r8, r8)
10042dd2:	46bd      	mov	sp, r7
10042dd4:	b004      	add	sp, #16
10042dd6:	bd80      	pop	{r7, pc}
10042dd8:	48400000 	.word	0x48400000

10042ddc <LL_APB2_GRP1_IsEnabledClock>:
{
10042ddc:	b580      	push	{r7, lr}
10042dde:	b082      	sub	sp, #8
10042de0:	af00      	add	r7, sp, #0
10042de2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(RCC->APB2ENR, Periphs) == (Periphs)) ? 1UL : 0UL);
10042de4:	4b06      	ldr	r3, [pc, #24]	@ (10042e00 <LL_APB2_GRP1_IsEnabledClock+0x24>)
10042de6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
10042de8:	687a      	ldr	r2, [r7, #4]
10042dea:	4013      	ands	r3, r2
10042dec:	687a      	ldr	r2, [r7, #4]
10042dee:	429a      	cmp	r2, r3
10042df0:	d101      	bne.n	10042df6 <LL_APB2_GRP1_IsEnabledClock+0x1a>
10042df2:	2301      	movs	r3, #1
10042df4:	e000      	b.n	10042df8 <LL_APB2_GRP1_IsEnabledClock+0x1c>
10042df6:	2300      	movs	r3, #0
}
10042df8:	0018      	movs	r0, r3
10042dfa:	46bd      	mov	sp, r7
10042dfc:	b002      	add	sp, #8
10042dfe:	bd80      	pop	{r7, pc}
10042e00:	48400000 	.word	0x48400000

10042e04 <LL_APB2_GRP1_ForceReset>:
{
10042e04:	b580      	push	{r7, lr}
10042e06:	b082      	sub	sp, #8
10042e08:	af00      	add	r7, sp, #0
10042e0a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2RSTR, Periphs);
10042e0c:	4b04      	ldr	r3, [pc, #16]	@ (10042e20 <LL_APB2_GRP1_ForceReset+0x1c>)
10042e0e:	6c19      	ldr	r1, [r3, #64]	@ 0x40
10042e10:	4b03      	ldr	r3, [pc, #12]	@ (10042e20 <LL_APB2_GRP1_ForceReset+0x1c>)
10042e12:	687a      	ldr	r2, [r7, #4]
10042e14:	430a      	orrs	r2, r1
10042e16:	641a      	str	r2, [r3, #64]	@ 0x40
}
10042e18:	46c0      	nop			@ (mov r8, r8)
10042e1a:	46bd      	mov	sp, r7
10042e1c:	b002      	add	sp, #8
10042e1e:	bd80      	pop	{r7, pc}
10042e20:	48400000 	.word	0x48400000

10042e24 <LL_APB2_GRP1_ReleaseReset>:
{
10042e24:	b580      	push	{r7, lr}
10042e26:	b082      	sub	sp, #8
10042e28:	af00      	add	r7, sp, #0
10042e2a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB2RSTR, Periphs);
10042e2c:	4b05      	ldr	r3, [pc, #20]	@ (10042e44 <LL_APB2_GRP1_ReleaseReset+0x20>)
10042e2e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
10042e30:	687b      	ldr	r3, [r7, #4]
10042e32:	43d9      	mvns	r1, r3
10042e34:	4b03      	ldr	r3, [pc, #12]	@ (10042e44 <LL_APB2_GRP1_ReleaseReset+0x20>)
10042e36:	400a      	ands	r2, r1
10042e38:	641a      	str	r2, [r3, #64]	@ 0x40
}
10042e3a:	46c0      	nop			@ (mov r8, r8)
10042e3c:	46bd      	mov	sp, r7
10042e3e:	b002      	add	sp, #8
10042e40:	bd80      	pop	{r7, pc}
10042e42:	46c0      	nop			@ (mov r8, r8)
10042e44:	48400000 	.word	0x48400000

10042e48 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
10042e48:	b580      	push	{r7, lr}
10042e4a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
10042e4c:	2380      	movs	r3, #128	@ 0x80
10042e4e:	005b      	lsls	r3, r3, #1
10042e50:	0018      	movs	r0, r3
10042e52:	f7ff ff81 	bl	10042d58 <LL_APB0_GRP1_EnableClock>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
10042e56:	46c0      	nop			@ (mov r8, r8)
10042e58:	46bd      	mov	sp, r7
10042e5a:	bd80      	pop	{r7, pc}

10042e5c <HAL_RADIO_MspInit>:
* This function configures the hardware resources used in this example
* @param hradio: RADIO handle pointer
* @retval None
*/
void HAL_RADIO_MspInit(RADIO_HandleTypeDef* hradio)
{
10042e5c:	b590      	push	{r4, r7, lr}
10042e5e:	b089      	sub	sp, #36	@ 0x24
10042e60:	af00      	add	r7, sp, #0
10042e62:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
10042e64:	2408      	movs	r4, #8
10042e66:	193b      	adds	r3, r7, r4
10042e68:	0018      	movs	r0, r3
10042e6a:	2318      	movs	r3, #24
10042e6c:	001a      	movs	r2, r3
10042e6e:	2100      	movs	r1, #0
10042e70:	f006 fa74 	bl	1004935c <memset>
  if(hradio->Instance==RADIO)
10042e74:	687b      	ldr	r3, [r7, #4]
10042e76:	681a      	ldr	r2, [r3, #0]
10042e78:	23c0      	movs	r3, #192	@ 0xc0
10042e7a:	05db      	lsls	r3, r3, #23
10042e7c:	429a      	cmp	r2, r3
10042e7e:	d12b      	bne.n	10042ed8 <HAL_RADIO_MspInit+0x7c>

  /* USER CODE END RADIO_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RF;
10042e80:	193b      	adds	r3, r7, r4
10042e82:	2201      	movs	r2, #1
10042e84:	601a      	str	r2, [r3, #0]
    PeriphClkInitStruct.RFClockSelection = RCC_RF_CLK_32M;
10042e86:	193b      	adds	r3, r7, r4
10042e88:	2202      	movs	r2, #2
10042e8a:	611a      	str	r2, [r3, #16]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
10042e8c:	193b      	adds	r3, r7, r4
10042e8e:	0018      	movs	r0, r3
10042e90:	f005 fbb4 	bl	100485fc <HAL_RCCEx_PeriphCLKConfig>
10042e94:	1e03      	subs	r3, r0, #0
10042e96:	d001      	beq.n	10042e9c <HAL_RADIO_MspInit+0x40>
    {
      Error_Handler();
10042e98:	f7ff ff2a 	bl	10042cf0 <Error_Handler>
    }

    /* Peripheral clock enable */
    if (__HAL_RCC_RADIO_IS_CLK_DISABLED())
10042e9c:	2001      	movs	r0, #1
10042e9e:	f7ff ff9d 	bl	10042ddc <LL_APB2_GRP1_IsEnabledClock>
10042ea2:	1e03      	subs	r3, r0, #0
10042ea4:	d108      	bne.n	10042eb8 <HAL_RADIO_MspInit+0x5c>
    {
      /* Radio reset */
      __HAL_RCC_RADIO_FORCE_RESET();
10042ea6:	2001      	movs	r0, #1
10042ea8:	f7ff ffac 	bl	10042e04 <LL_APB2_GRP1_ForceReset>
      __HAL_RCC_RADIO_RELEASE_RESET();
10042eac:	2001      	movs	r0, #1
10042eae:	f7ff ffb9 	bl	10042e24 <LL_APB2_GRP1_ReleaseReset>

      /* Enable Radio peripheral clock */
      __HAL_RCC_RADIO_CLK_ENABLE();
10042eb2:	2001      	movs	r0, #1
10042eb4:	f7ff ff7c 	bl	10042db0 <LL_APB2_GRP1_EnableClock>
    }

    /* RADIO interrupt Init */
    HAL_NVIC_SetPriority(RADIO_TXRX_IRQn, 0, 0);
10042eb8:	2200      	movs	r2, #0
10042eba:	2100      	movs	r1, #0
10042ebc:	2012      	movs	r0, #18
10042ebe:	f001 fcdb 	bl	10044878 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RADIO_TXRX_IRQn);
10042ec2:	2012      	movs	r0, #18
10042ec4:	f001 fced 	bl	100448a2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(RADIO_TXRX_SEQ_IRQn, 0, 0);
10042ec8:	2200      	movs	r2, #0
10042eca:	2100      	movs	r1, #0
10042ecc:	2019      	movs	r0, #25
10042ece:	f001 fcd3 	bl	10044878 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RADIO_TXRX_SEQ_IRQn);
10042ed2:	2019      	movs	r0, #25
10042ed4:	f001 fce5 	bl	100448a2 <HAL_NVIC_EnableIRQ>

  /* USER CODE END RADIO_MspInit 1 */

  }

}
10042ed8:	46c0      	nop			@ (mov r8, r8)
10042eda:	46bd      	mov	sp, r7
10042edc:	b009      	add	sp, #36	@ 0x24
10042ede:	bd90      	pop	{r4, r7, pc}

10042ee0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
10042ee0:	b590      	push	{r4, r7, lr}
10042ee2:	b089      	sub	sp, #36	@ 0x24
10042ee4:	af00      	add	r7, sp, #0
10042ee6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
10042ee8:	240c      	movs	r4, #12
10042eea:	193b      	adds	r3, r7, r4
10042eec:	0018      	movs	r0, r3
10042eee:	2314      	movs	r3, #20
10042ef0:	001a      	movs	r2, r3
10042ef2:	2100      	movs	r1, #0
10042ef4:	f006 fa32 	bl	1004935c <memset>
  if(hspi->Instance==SPI2)
10042ef8:	687b      	ldr	r3, [r7, #4]
10042efa:	681b      	ldr	r3, [r3, #0]
10042efc:	4a14      	ldr	r2, [pc, #80]	@ (10042f50 <HAL_SPI_MspInit+0x70>)
10042efe:	4293      	cmp	r3, r2
10042f00:	d121      	bne.n	10042f46 <HAL_SPI_MspInit+0x66>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
10042f02:	2380      	movs	r3, #128	@ 0x80
10042f04:	015b      	lsls	r3, r3, #5
10042f06:	0018      	movs	r0, r3
10042f08:	f7ff ff3c 	bl	10042d84 <LL_APB1_GRP1_EnableClock>

    __HAL_RCC_GPIOA_CLK_ENABLE();
10042f0c:	2004      	movs	r0, #4
10042f0e:	f7ff ff0d 	bl	10042d2c <LL_AHB1_GRP1_EnableClock>
    /**SPI2 GPIO Configuration
    PA5     ------> SPI2_SCK
    PA6     ------> SPI2_MOSI
    PA7     ------> SPI2_MISO
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
10042f12:	0021      	movs	r1, r4
10042f14:	187b      	adds	r3, r7, r1
10042f16:	22e0      	movs	r2, #224	@ 0xe0
10042f18:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
10042f1a:	187b      	adds	r3, r7, r1
10042f1c:	2202      	movs	r2, #2
10042f1e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
10042f20:	187b      	adds	r3, r7, r1
10042f22:	2200      	movs	r2, #0
10042f24:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
10042f26:	187b      	adds	r3, r7, r1
10042f28:	2200      	movs	r2, #0
10042f2a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_SPI2;
10042f2c:	187b      	adds	r3, r7, r1
10042f2e:	2201      	movs	r2, #1
10042f30:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
10042f32:	187a      	adds	r2, r7, r1
10042f34:	2390      	movs	r3, #144	@ 0x90
10042f36:	05db      	lsls	r3, r3, #23
10042f38:	0011      	movs	r1, r2
10042f3a:	0018      	movs	r0, r3
10042f3c:	f001 fcce 	bl	100448dc <HAL_GPIO_Init>

    LL_PWR_SetNoPullA(LL_PWR_GPIO_BIT_5|LL_PWR_GPIO_BIT_6|LL_PWR_GPIO_BIT_7);
10042f40:	20e0      	movs	r0, #224	@ 0xe0
10042f42:	f7ff fedb 	bl	10042cfc <LL_PWR_SetNoPullA>

  /* USER CODE END SPI2_MspInit 1 */

  }

}
10042f46:	46c0      	nop			@ (mov r8, r8)
10042f48:	46bd      	mov	sp, r7
10042f4a:	b009      	add	sp, #36	@ 0x24
10042f4c:	bd90      	pop	{r4, r7, pc}
10042f4e:	46c0      	nop			@ (mov r8, r8)
10042f50:	41003000 	.word	0x41003000

10042f54 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
10042f54:	b590      	push	{r4, r7, lr}
10042f56:	b089      	sub	sp, #36	@ 0x24
10042f58:	af00      	add	r7, sp, #0
10042f5a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
10042f5c:	240c      	movs	r4, #12
10042f5e:	193b      	adds	r3, r7, r4
10042f60:	0018      	movs	r0, r3
10042f62:	2314      	movs	r3, #20
10042f64:	001a      	movs	r2, r3
10042f66:	2100      	movs	r1, #0
10042f68:	f006 f9f8 	bl	1004935c <memset>
  if(huart->Instance==USART1)
10042f6c:	687b      	ldr	r3, [r7, #4]
10042f6e:	681b      	ldr	r3, [r3, #0]
10042f70:	4a15      	ldr	r2, [pc, #84]	@ (10042fc8 <HAL_UART_MspInit+0x74>)
10042f72:	4293      	cmp	r3, r2
10042f74:	d124      	bne.n	10042fc0 <HAL_UART_MspInit+0x6c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
10042f76:	2380      	movs	r3, #128	@ 0x80
10042f78:	00db      	lsls	r3, r3, #3
10042f7a:	0018      	movs	r0, r3
10042f7c:	f7ff ff02 	bl	10042d84 <LL_APB1_GRP1_EnableClock>

    __HAL_RCC_GPIOA_CLK_ENABLE();
10042f80:	2004      	movs	r0, #4
10042f82:	f7ff fed3 	bl	10042d2c <LL_AHB1_GRP1_EnableClock>
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA8     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_8;
10042f86:	193b      	adds	r3, r7, r4
10042f88:	22c0      	movs	r2, #192	@ 0xc0
10042f8a:	0092      	lsls	r2, r2, #2
10042f8c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
10042f8e:	0021      	movs	r1, r4
10042f90:	187b      	adds	r3, r7, r1
10042f92:	2202      	movs	r2, #2
10042f94:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
10042f96:	187b      	adds	r3, r7, r1
10042f98:	2200      	movs	r2, #0
10042f9a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
10042f9c:	187b      	adds	r3, r7, r1
10042f9e:	2200      	movs	r2, #0
10042fa0:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_USART1;
10042fa2:	187b      	adds	r3, r7, r1
10042fa4:	2200      	movs	r2, #0
10042fa6:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
10042fa8:	187a      	adds	r2, r7, r1
10042faa:	2390      	movs	r3, #144	@ 0x90
10042fac:	05db      	lsls	r3, r3, #23
10042fae:	0011      	movs	r1, r2
10042fb0:	0018      	movs	r0, r3
10042fb2:	f001 fc93 	bl	100448dc <HAL_GPIO_Init>

    LL_PWR_SetNoPullA(LL_PWR_GPIO_BIT_9|LL_PWR_GPIO_BIT_8);
10042fb6:	23c0      	movs	r3, #192	@ 0xc0
10042fb8:	009b      	lsls	r3, r3, #2
10042fba:	0018      	movs	r0, r3
10042fbc:	f7ff fe9e 	bl	10042cfc <LL_PWR_SetNoPullA>

  /* USER CODE END USART1_MspInit 1 */

  }

}
10042fc0:	46c0      	nop			@ (mov r8, r8)
10042fc2:	46bd      	mov	sp, r7
10042fc4:	b009      	add	sp, #36	@ 0x24
10042fc6:	bd90      	pop	{r4, r7, pc}
10042fc8:	41004000 	.word	0x41004000

10042fcc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
10042fcc:	b580      	push	{r7, lr}
10042fce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
10042fd0:	46c0      	nop			@ (mov r8, r8)
10042fd2:	e7fd      	b.n	10042fd0 <NMI_Handler+0x4>

10042fd4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
10042fd4:	b580      	push	{r7, lr}
10042fd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
10042fd8:	46c0      	nop			@ (mov r8, r8)
10042fda:	e7fd      	b.n	10042fd8 <HardFault_Handler+0x4>

10042fdc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
10042fdc:	b580      	push	{r7, lr}
10042fde:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
10042fe0:	46c0      	nop			@ (mov r8, r8)
10042fe2:	46bd      	mov	sp, r7
10042fe4:	bd80      	pop	{r7, pc}

10042fe6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
10042fe6:	b580      	push	{r7, lr}
10042fe8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
10042fea:	46c0      	nop			@ (mov r8, r8)
10042fec:	46bd      	mov	sp, r7
10042fee:	bd80      	pop	{r7, pc}

10042ff0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
10042ff0:	b580      	push	{r7, lr}
10042ff2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
10042ff4:	f001 fb4a 	bl	1004468c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
10042ff8:	46c0      	nop			@ (mov r8, r8)
10042ffa:	46bd      	mov	sp, r7
10042ffc:	bd80      	pop	{r7, pc}

10042ffe <RADIO_TIMER_CPU_WKUP_IRQHandler>:

/**
  * @brief This function handles RADIO_TIMER_CPU_WKUP global interrupt.
  */
void RADIO_TIMER_CPU_WKUP_IRQHandler(void)
{
10042ffe:	b580      	push	{r7, lr}
10043000:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RADIO_TIMER_CPU_WKUP_IRQn 0 */

  /* USER CODE END RADIO_TIMER_CPU_WKUP_IRQn 0 */
  HAL_RADIO_TIMER_CPU_WKUP_IRQHandler();
10043002:	f004 fe8b 	bl	10047d1c <HAL_RADIO_TIMER_CPU_WKUP_IRQHandler>
  /* USER CODE BEGIN RADIO_TIMER_CPU_WKUP_IRQn 1 */

  /* USER CODE END RADIO_TIMER_CPU_WKUP_IRQn 1 */
}
10043006:	46c0      	nop			@ (mov r8, r8)
10043008:	46bd      	mov	sp, r7
1004300a:	bd80      	pop	{r7, pc}

1004300c <RADIO_TIMER_TXRX_WKUP_IRQHandler>:

/**
  * @brief This function handles RADIO_TIMER_TXRX_WKUP global interrupt.
  */
void RADIO_TIMER_TXRX_WKUP_IRQHandler(void)
{
1004300c:	b580      	push	{r7, lr}
1004300e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RADIO_TIMER_TXRX_WKUP_IRQn 0 */

  /* USER CODE END RADIO_TIMER_TXRX_WKUP_IRQn 0 */
  HAL_RADIO_TIMER_TXRX_WKUP_IRQHandler();
10043010:	f004 fe8d 	bl	10047d2e <HAL_RADIO_TIMER_TXRX_WKUP_IRQHandler>
  /* USER CODE BEGIN RADIO_TIMER_TXRX_WKUP_IRQn 1 */

  /* USER CODE END RADIO_TIMER_TXRX_WKUP_IRQn 1 */
}
10043014:	46c0      	nop			@ (mov r8, r8)
10043016:	46bd      	mov	sp, r7
10043018:	bd80      	pop	{r7, pc}

1004301a <RADIO_TIMER_ERROR_IRQHandler>:

/**
  * @brief This function handles RADIO_TIMER_ERROR global interrupt.
  */
void RADIO_TIMER_ERROR_IRQHandler(void)
{
1004301a:	b580      	push	{r7, lr}
1004301c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RADIO_TIMER_ERROR_IRQn 0 */

  /* USER CODE END RADIO_TIMER_ERROR_IRQn 0 */
  HAL_RADIO_TIMER_ERROR_IRQHandler();
1004301e:	f004 fe8f 	bl	10047d40 <HAL_RADIO_TIMER_ERROR_IRQHandler>
  /* USER CODE BEGIN RADIO_TIMER_ERROR_IRQn 1 */

  /* USER CODE END RADIO_TIMER_ERROR_IRQn 1 */
}
10043022:	46c0      	nop			@ (mov r8, r8)
10043024:	46bd      	mov	sp, r7
10043026:	bd80      	pop	{r7, pc}

10043028 <RADIO_TXRX_IRQHandler>:

/**
  * @brief This function handles RADIO_TXRX global interrupt.
  */
void RADIO_TXRX_IRQHandler(void)
{
10043028:	b580      	push	{r7, lr}
1004302a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RADIO_TXRX_IRQn 0 */

  /* USER CODE END RADIO_TXRX_IRQn 0 */
  HAL_RADIO_TXRX_IRQHandler();
1004302c:	f003 f885 	bl	1004613a <HAL_RADIO_TXRX_IRQHandler>
  /* USER CODE BEGIN RADIO_TXRX_IRQn 1 */

  /* USER CODE END RADIO_TXRX_IRQn 1 */
}
10043030:	46c0      	nop			@ (mov r8, r8)
10043032:	46bd      	mov	sp, r7
10043034:	bd80      	pop	{r7, pc}

10043036 <RADIO_TXRX_SEQ_IRQHandler>:

/**
  * @brief This function handles RADIO_TXRX_SEQ global interrupt.
  */
void RADIO_TXRX_SEQ_IRQHandler(void)
{
10043036:	b580      	push	{r7, lr}
10043038:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RADIO_TXRX_SEQ_IRQn 0 */

  /* USER CODE END RADIO_TXRX_SEQ_IRQn 0 */
  HAL_RADIO_TXRX_SEQ_IRQHandler();
1004303a:	f003 f8a5 	bl	10046188 <HAL_RADIO_TXRX_SEQ_IRQHandler>
  /* USER CODE BEGIN RADIO_TXRX_SEQ_IRQn 1 */

  /* USER CODE END RADIO_TXRX_SEQ_IRQn 1 */
}
1004303e:	46c0      	nop			@ (mov r8, r8)
10043040:	46bd      	mov	sp, r7
10043042:	bd80      	pop	{r7, pc}

10043044 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
10043044:	b590      	push	{r4, r7, lr}
10043046:	b083      	sub	sp, #12
10043048:	af00      	add	r7, sp, #0
1004304a:	0002      	movs	r2, r0
1004304c:	6039      	str	r1, [r7, #0]
1004304e:	1dfb      	adds	r3, r7, #7
10043050:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
10043052:	1dfb      	adds	r3, r7, #7
10043054:	781b      	ldrb	r3, [r3, #0]
10043056:	2b7f      	cmp	r3, #127	@ 0x7f
10043058:	d828      	bhi.n	100430ac <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
1004305a:	4a2f      	ldr	r2, [pc, #188]	@ (10043118 <__NVIC_SetPriority+0xd4>)
1004305c:	1dfb      	adds	r3, r7, #7
1004305e:	781b      	ldrb	r3, [r3, #0]
10043060:	b25b      	sxtb	r3, r3
10043062:	089b      	lsrs	r3, r3, #2
10043064:	33c0      	adds	r3, #192	@ 0xc0
10043066:	009b      	lsls	r3, r3, #2
10043068:	589b      	ldr	r3, [r3, r2]
1004306a:	1dfa      	adds	r2, r7, #7
1004306c:	7812      	ldrb	r2, [r2, #0]
1004306e:	0011      	movs	r1, r2
10043070:	2203      	movs	r2, #3
10043072:	400a      	ands	r2, r1
10043074:	00d2      	lsls	r2, r2, #3
10043076:	21ff      	movs	r1, #255	@ 0xff
10043078:	4091      	lsls	r1, r2
1004307a:	000a      	movs	r2, r1
1004307c:	43d2      	mvns	r2, r2
1004307e:	401a      	ands	r2, r3
10043080:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
10043082:	683b      	ldr	r3, [r7, #0]
10043084:	019b      	lsls	r3, r3, #6
10043086:	22ff      	movs	r2, #255	@ 0xff
10043088:	401a      	ands	r2, r3
1004308a:	1dfb      	adds	r3, r7, #7
1004308c:	781b      	ldrb	r3, [r3, #0]
1004308e:	0018      	movs	r0, r3
10043090:	2303      	movs	r3, #3
10043092:	4003      	ands	r3, r0
10043094:	00db      	lsls	r3, r3, #3
10043096:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
10043098:	481f      	ldr	r0, [pc, #124]	@ (10043118 <__NVIC_SetPriority+0xd4>)
1004309a:	1dfb      	adds	r3, r7, #7
1004309c:	781b      	ldrb	r3, [r3, #0]
1004309e:	b25b      	sxtb	r3, r3
100430a0:	089b      	lsrs	r3, r3, #2
100430a2:	430a      	orrs	r2, r1
100430a4:	33c0      	adds	r3, #192	@ 0xc0
100430a6:	009b      	lsls	r3, r3, #2
100430a8:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
100430aa:	e031      	b.n	10043110 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
100430ac:	4a1b      	ldr	r2, [pc, #108]	@ (1004311c <__NVIC_SetPriority+0xd8>)
100430ae:	1dfb      	adds	r3, r7, #7
100430b0:	781b      	ldrb	r3, [r3, #0]
100430b2:	0019      	movs	r1, r3
100430b4:	230f      	movs	r3, #15
100430b6:	400b      	ands	r3, r1
100430b8:	3b08      	subs	r3, #8
100430ba:	089b      	lsrs	r3, r3, #2
100430bc:	3306      	adds	r3, #6
100430be:	009b      	lsls	r3, r3, #2
100430c0:	18d3      	adds	r3, r2, r3
100430c2:	3304      	adds	r3, #4
100430c4:	681b      	ldr	r3, [r3, #0]
100430c6:	1dfa      	adds	r2, r7, #7
100430c8:	7812      	ldrb	r2, [r2, #0]
100430ca:	0011      	movs	r1, r2
100430cc:	2203      	movs	r2, #3
100430ce:	400a      	ands	r2, r1
100430d0:	00d2      	lsls	r2, r2, #3
100430d2:	21ff      	movs	r1, #255	@ 0xff
100430d4:	4091      	lsls	r1, r2
100430d6:	000a      	movs	r2, r1
100430d8:	43d2      	mvns	r2, r2
100430da:	401a      	ands	r2, r3
100430dc:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
100430de:	683b      	ldr	r3, [r7, #0]
100430e0:	019b      	lsls	r3, r3, #6
100430e2:	22ff      	movs	r2, #255	@ 0xff
100430e4:	401a      	ands	r2, r3
100430e6:	1dfb      	adds	r3, r7, #7
100430e8:	781b      	ldrb	r3, [r3, #0]
100430ea:	0018      	movs	r0, r3
100430ec:	2303      	movs	r3, #3
100430ee:	4003      	ands	r3, r0
100430f0:	00db      	lsls	r3, r3, #3
100430f2:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
100430f4:	4809      	ldr	r0, [pc, #36]	@ (1004311c <__NVIC_SetPriority+0xd8>)
100430f6:	1dfb      	adds	r3, r7, #7
100430f8:	781b      	ldrb	r3, [r3, #0]
100430fa:	001c      	movs	r4, r3
100430fc:	230f      	movs	r3, #15
100430fe:	4023      	ands	r3, r4
10043100:	3b08      	subs	r3, #8
10043102:	089b      	lsrs	r3, r3, #2
10043104:	430a      	orrs	r2, r1
10043106:	3306      	adds	r3, #6
10043108:	009b      	lsls	r3, r3, #2
1004310a:	18c3      	adds	r3, r0, r3
1004310c:	3304      	adds	r3, #4
1004310e:	601a      	str	r2, [r3, #0]
}
10043110:	46c0      	nop			@ (mov r8, r8)
10043112:	46bd      	mov	sp, r7
10043114:	b003      	add	sp, #12
10043116:	bd90      	pop	{r4, r7, pc}
10043118:	e000e100 	.word	0xe000e100
1004311c:	e000ed00 	.word	0xe000ed00

10043120 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
10043120:	b580      	push	{r7, lr}
10043122:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
10043124:	f3bf 8f4f 	dsb	sy
}
10043128:	46c0      	nop			@ (mov r8, r8)
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = ((0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
1004312a:	4b04      	ldr	r3, [pc, #16]	@ (1004313c <__NVIC_SystemReset+0x1c>)
1004312c:	4a04      	ldr	r2, [pc, #16]	@ (10043140 <__NVIC_SystemReset+0x20>)
1004312e:	60da      	str	r2, [r3, #12]
  __ASM volatile ("dsb 0xF":::"memory");
10043130:	f3bf 8f4f 	dsb	sy
}
10043134:	46c0      	nop			@ (mov r8, r8)
                 SCB_AIRCR_SYSRESETREQ_Msk);
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
10043136:	46c0      	nop			@ (mov r8, r8)
10043138:	e7fd      	b.n	10043136 <__NVIC_SystemReset+0x16>
1004313a:	46c0      	nop			@ (mov r8, r8)
1004313c:	e000ed00 	.word	0xe000ed00
10043140:	05fa0004 	.word	0x05fa0004

10043144 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
10043144:	b590      	push	{r4, r7, lr}
10043146:	b087      	sub	sp, #28
10043148:	af00      	add	r7, sp, #0
  uint32_t lsiBw;
#endif
  uint8_t i;
  
  /* If the reset reason is a wakeup from power save restore the context */
  if ((RCC->CSR == 0) && ((PWR->SR1 != 0)||(PWR->SR3 != 0))) {
1004314a:	4a64      	ldr	r2, [pc, #400]	@ (100432dc <SystemInit+0x198>)
1004314c:	2394      	movs	r3, #148	@ 0x94
1004314e:	58d3      	ldr	r3, [r2, r3]
10043150:	2b00      	cmp	r3, #0
10043152:	d10e      	bne.n	10043172 <SystemInit+0x2e>
10043154:	4b62      	ldr	r3, [pc, #392]	@ (100432e0 <SystemInit+0x19c>)
10043156:	691b      	ldr	r3, [r3, #16]
10043158:	2b00      	cmp	r3, #0
1004315a:	d103      	bne.n	10043164 <SystemInit+0x20>
1004315c:	4b60      	ldr	r3, [pc, #384]	@ (100432e0 <SystemInit+0x19c>)
1004315e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
10043160:	2b00      	cmp	r3, #0
10043162:	d006      	beq.n	10043172 <SystemInit+0x2e>
    RAM_VR.WakeupFromSleepFlag = 1; /* A wakeup from power save occurred */
10043164:	4b5f      	ldr	r3, [pc, #380]	@ (100432e4 <SystemInit+0x1a0>)
10043166:	2201      	movs	r2, #1
10043168:	609a      	str	r2, [r3, #8]
    CPUcontextRestore();            /* Restore the context */
1004316a:	f000 f8ff 	bl	1004336c <CPUcontextRestore>
    /* if the context restore worked properly, we should never return here */
    while(1) { 
      NVIC_SystemReset(); 
1004316e:	f7ff ffd7 	bl	10043120 <__NVIC_SystemReset>

  /* Configure the Vector Table location */
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#else
  SCB->VTOR = (uint32_t) (__vector_table);
10043172:	4b5d      	ldr	r3, [pc, #372]	@ (100432e8 <SystemInit+0x1a4>)
10043174:	4a5d      	ldr	r2, [pc, #372]	@ (100432ec <SystemInit+0x1a8>)
10043176:	609a      	str	r2, [r3, #8]
#endif /* USER_VECT_TAB_ADDRESS */

  /* Store in RAM the AppBase information */
  RAM_VR.AppBase = (uint32_t) SCB->VTOR;
10043178:	4b5b      	ldr	r3, [pc, #364]	@ (100432e8 <SystemInit+0x1a4>)
1004317a:	689a      	ldr	r2, [r3, #8]
1004317c:	4b59      	ldr	r3, [pc, #356]	@ (100432e4 <SystemInit+0x1a0>)
1004317e:	611a      	str	r2, [r3, #16]

  /* Enable all the RAM banks in retention during power save */
#if defined(PWR_CR2_RAMRET1)
  SET_BIT(PWR->CR2, PWR_CR2_RAMRET1);
10043180:	4b57      	ldr	r3, [pc, #348]	@ (100432e0 <SystemInit+0x19c>)
10043182:	685a      	ldr	r2, [r3, #4]
10043184:	4b56      	ldr	r3, [pc, #344]	@ (100432e0 <SystemInit+0x19c>)
10043186:	2120      	movs	r1, #32
10043188:	430a      	orrs	r2, r1
1004318a:	605a      	str	r2, [r3, #4]
#endif /* PWR_CR2_RAMRET1 */
  
#if defined(PWR_CR2_RAMRET2)
  SET_BIT(PWR->CR2, PWR_CR2_RAMRET2);
1004318c:	4b54      	ldr	r3, [pc, #336]	@ (100432e0 <SystemInit+0x19c>)
1004318e:	685a      	ldr	r2, [r3, #4]
10043190:	4b53      	ldr	r3, [pc, #332]	@ (100432e0 <SystemInit+0x19c>)
10043192:	2140      	movs	r1, #64	@ 0x40
10043194:	430a      	orrs	r2, r1
10043196:	605a      	str	r2, [r3, #4]
#endif /* PWR_CR2_RAMRET2 */
  
#if defined(PWR_CR2_RAMRET3)
  SET_BIT(PWR->CR2, PWR_CR2_RAMRET3);
10043198:	4b51      	ldr	r3, [pc, #324]	@ (100432e0 <SystemInit+0x19c>)
1004319a:	685a      	ldr	r2, [r3, #4]
1004319c:	4b50      	ldr	r3, [pc, #320]	@ (100432e0 <SystemInit+0x19c>)
1004319e:	2180      	movs	r1, #128	@ 0x80
100431a0:	430a      	orrs	r2, r1
100431a2:	605a      	str	r2, [r3, #4]
#endif /* PWR_CR2_GPIORET */
   
  /* SMPS setup */
  if ((CFG_HW_SMPS == SMPS_ON) || (CFG_HW_SMPS == SMPS_BYPAPSS))
  {
    while(READ_BIT(PWR->SR2, PWR_SR2_SMPSRDY) != PWR_SR2_SMPSRDY); // Wait until SMPS is ready
100431a4:	46c0      	nop			@ (mov r8, r8)
100431a6:	4b4e      	ldr	r3, [pc, #312]	@ (100432e0 <SystemInit+0x19c>)
100431a8:	695b      	ldr	r3, [r3, #20]
100431aa:	2204      	movs	r2, #4
100431ac:	4013      	ands	r3, r2
100431ae:	2b04      	cmp	r3, #4
100431b0:	d1f9      	bne.n	100431a6 <SystemInit+0x62>
    MODIFY_REG(PWR->CR5, PWR_CR5_SMPSBOMSEL, (CFG_HW_SMPS_BOM<<PWR_CR5_SMPSBOMSEL_Pos)); // Configure the SMPS BOM
100431b2:	4b4b      	ldr	r3, [pc, #300]	@ (100432e0 <SystemInit+0x19c>)
100431b4:	69db      	ldr	r3, [r3, #28]
100431b6:	2230      	movs	r2, #48	@ 0x30
100431b8:	4393      	bics	r3, r2
100431ba:	001a      	movs	r2, r3
100431bc:	4b48      	ldr	r3, [pc, #288]	@ (100432e0 <SystemInit+0x19c>)
100431be:	2120      	movs	r1, #32
100431c0:	430a      	orrs	r2, r1
100431c2:	61da      	str	r2, [r3, #28]
  }
  if ((CFG_HW_SMPS == SMPS_ON) || (CFG_HW_SMPS == SMPS_OFF))
  {
    MODIFY_REG(PWR->CR5, PWR_CR5_NOSMPS, (CFG_HW_SMPS<<PWR_CR5_NOSMPS_Pos)); // SMPS ON/OFF Configuration
100431c4:	4b46      	ldr	r3, [pc, #280]	@ (100432e0 <SystemInit+0x19c>)
100431c6:	69da      	ldr	r2, [r3, #28]
100431c8:	4b45      	ldr	r3, [pc, #276]	@ (100432e0 <SystemInit+0x19c>)
100431ca:	4949      	ldr	r1, [pc, #292]	@ (100432f0 <SystemInit+0x1ac>)
100431cc:	400a      	ands	r2, r1
100431ce:	61da      	str	r2, [r3, #28]
  }
  else
  {
    MODIFY_REG(PWR->CR5, PWR_CR5_SMPSFBYP, (1<<PWR_CR5_SMPSFBYP_Pos)); // SMPS BYPASS Configuration
  }
  MODIFY_REG(PWR->CR5, PWR_CR5_SMPSLPOPEN, (CFG_HW_SMPS_LOW_POWER<<PWR_CR5_SMPSLPOPEN_Pos)); // SMPS configuration during power save
100431d0:	4b43      	ldr	r3, [pc, #268]	@ (100432e0 <SystemInit+0x19c>)
100431d2:	69da      	ldr	r2, [r3, #28]
100431d4:	4b42      	ldr	r3, [pc, #264]	@ (100432e0 <SystemInit+0x19c>)
100431d6:	2180      	movs	r1, #128	@ 0x80
100431d8:	0049      	lsls	r1, r1, #1
100431da:	430a      	orrs	r2, r1
100431dc:	61da      	str	r2, [r3, #28]
  
  /* If Trimming values from engineering in flash locations are not present load default values */
  if (*(volatile uint32_t*)VALIDITY_LOCATION != VALIDITY_TAG)
100431de:	4b45      	ldr	r3, [pc, #276]	@ (100432f4 <SystemInit+0x1b0>)
100431e0:	681b      	ldr	r3, [r3, #0]
100431e2:	4a45      	ldr	r2, [pc, #276]	@ (100432f8 <SystemInit+0x1b4>)
100431e4:	4293      	cmp	r3, r2
100431e6:	d05b      	beq.n	100432a0 <SystemInit+0x15c>
  {
#if defined(STM32WB06) || defined(STM32WB07)
    hsiCalib       = 0x1E;
100431e8:	231e      	movs	r3, #30
100431ea:	613b      	str	r3, [r7, #16]
    mainRegulator  = 0x08;
100431ec:	2308      	movs	r3, #8
100431ee:	60fb      	str	r3, [r7, #12]
    smpsOutVoltage = 0x03;
100431f0:	2303      	movs	r3, #3
100431f2:	60bb      	str	r3, [r7, #8]
    lsiLpmu        = 0x08;
100431f4:	2308      	movs	r3, #8
100431f6:	607b      	str	r3, [r7, #4]

    /* Set Low Speed Internal oscillator LPMU trimming value. */
    MODIFY_REG(PWR->ENGTRIM, PWR_ENGTRIM_TRIM_LSI_LPMU, ((lsiLpmu << PWR_ENGTRIM_TRIM_LSI_LPMU_Pos) & PWR_ENGTRIM_TRIM_LSI_LPMU));
100431f8:	4a39      	ldr	r2, [pc, #228]	@ (100432e0 <SystemInit+0x19c>)
100431fa:	2394      	movs	r3, #148	@ 0x94
100431fc:	58d3      	ldr	r3, [r2, r3]
100431fe:	221e      	movs	r2, #30
10043200:	4393      	bics	r3, r2
10043202:	001a      	movs	r2, r3
10043204:	687b      	ldr	r3, [r7, #4]
10043206:	005b      	lsls	r3, r3, #1
10043208:	211e      	movs	r1, #30
1004320a:	400b      	ands	r3, r1
1004320c:	4934      	ldr	r1, [pc, #208]	@ (100432e0 <SystemInit+0x19c>)
1004320e:	4313      	orrs	r3, r2
10043210:	2294      	movs	r2, #148	@ 0x94
10043212:	508b      	str	r3, [r1, r2]
    SET_BIT(PWR->ENGTRIM, PWR_ENGTRIM_TRIMLSILPMUEN);
10043214:	4a32      	ldr	r2, [pc, #200]	@ (100432e0 <SystemInit+0x19c>)
10043216:	2394      	movs	r3, #148	@ 0x94
10043218:	58d3      	ldr	r3, [r2, r3]
1004321a:	4931      	ldr	r1, [pc, #196]	@ (100432e0 <SystemInit+0x19c>)
1004321c:	2201      	movs	r2, #1
1004321e:	4313      	orrs	r3, r2
10043220:	2294      	movs	r2, #148	@ 0x94
10043222:	508b      	str	r3, [r1, r2]
    MODIFY_REG(RCC->CSSWCR, RCC_CSSWCR_LSISWBW, lsiBw << RCC_CSSWCR_LSISWBW_Pos);
    SET_BIT(RCC->CSSWCR, RCC_CSSWCR_LSISWTRIMEN);
#endif
    
    /* Set HSI Calibration Trimming value */
    MODIFY_REG(RCC->CSSWCR, RCC_CSSWCR_HSITRIMSW, hsiCalib << RCC_CSSWCR_HSITRIMSW_Pos);
10043224:	4b2d      	ldr	r3, [pc, #180]	@ (100432dc <SystemInit+0x198>)
10043226:	68db      	ldr	r3, [r3, #12]
10043228:	4a34      	ldr	r2, [pc, #208]	@ (100432fc <SystemInit+0x1b8>)
1004322a:	4013      	ands	r3, r2
1004322c:	0019      	movs	r1, r3
1004322e:	693b      	ldr	r3, [r7, #16]
10043230:	061a      	lsls	r2, r3, #24
10043232:	4b2a      	ldr	r3, [pc, #168]	@ (100432dc <SystemInit+0x198>)
10043234:	430a      	orrs	r2, r1
10043236:	60da      	str	r2, [r3, #12]
    SET_BIT(RCC->CSSWCR, RCC_CSSWCR_HSISWTRIMEN);
10043238:	4b28      	ldr	r3, [pc, #160]	@ (100432dc <SystemInit+0x198>)
1004323a:	68da      	ldr	r2, [r3, #12]
1004323c:	4b27      	ldr	r3, [pc, #156]	@ (100432dc <SystemInit+0x198>)
1004323e:	2180      	movs	r1, #128	@ 0x80
10043240:	0409      	lsls	r1, r1, #16
10043242:	430a      	orrs	r2, r1
10043244:	60da      	str	r2, [r3, #12]
              
    /* Set Main Regulator voltage Trimming value */ 
    MODIFY_REG(PWR->ENGTRIM, PWR_ENGTRIM_TRIM_MR, ((mainRegulator << PWR_ENGTRIM_TRIM_MR_Pos) & PWR_ENGTRIM_TRIM_MR));
10043246:	4a26      	ldr	r2, [pc, #152]	@ (100432e0 <SystemInit+0x19c>)
10043248:	2394      	movs	r3, #148	@ 0x94
1004324a:	58d3      	ldr	r3, [r2, r3]
1004324c:	4a2c      	ldr	r2, [pc, #176]	@ (10043300 <SystemInit+0x1bc>)
1004324e:	401a      	ands	r2, r3
10043250:	68fb      	ldr	r3, [r7, #12]
10043252:	0199      	lsls	r1, r3, #6
10043254:	23f0      	movs	r3, #240	@ 0xf0
10043256:	009b      	lsls	r3, r3, #2
10043258:	400b      	ands	r3, r1
1004325a:	4921      	ldr	r1, [pc, #132]	@ (100432e0 <SystemInit+0x19c>)
1004325c:	4313      	orrs	r3, r2
1004325e:	2294      	movs	r2, #148	@ 0x94
10043260:	508b      	str	r3, [r1, r2]
    SET_BIT(PWR->ENGTRIM, PWR_ENGTRIM_TRIMMREN);
10043262:	4a1f      	ldr	r2, [pc, #124]	@ (100432e0 <SystemInit+0x19c>)
10043264:	2394      	movs	r3, #148	@ 0x94
10043266:	58d3      	ldr	r3, [r2, r3]
10043268:	491d      	ldr	r1, [pc, #116]	@ (100432e0 <SystemInit+0x19c>)
1004326a:	2220      	movs	r2, #32
1004326c:	4313      	orrs	r3, r2
1004326e:	2294      	movs	r2, #148	@ 0x94
10043270:	508b      	str	r3, [r1, r2]

    /* Set SMPS output voltage Trimming value */
    MODIFY_REG(PWR->ENGTRIM, PWR_ENGTRIM_SMPS_TRIM, ((smpsOutVoltage << PWR_ENGTRIM_SMPS_TRIM_Pos) & PWR_ENGTRIM_SMPS_TRIM));
10043272:	4a1b      	ldr	r2, [pc, #108]	@ (100432e0 <SystemInit+0x19c>)
10043274:	2394      	movs	r3, #148	@ 0x94
10043276:	58d3      	ldr	r3, [r2, r3]
10043278:	4a22      	ldr	r2, [pc, #136]	@ (10043304 <SystemInit+0x1c0>)
1004327a:	401a      	ands	r2, r3
1004327c:	68bb      	ldr	r3, [r7, #8]
1004327e:	02d9      	lsls	r1, r3, #11
10043280:	23e0      	movs	r3, #224	@ 0xe0
10043282:	019b      	lsls	r3, r3, #6
10043284:	400b      	ands	r3, r1
10043286:	4916      	ldr	r1, [pc, #88]	@ (100432e0 <SystemInit+0x19c>)
10043288:	4313      	orrs	r3, r2
1004328a:	2294      	movs	r2, #148	@ 0x94
1004328c:	508b      	str	r3, [r1, r2]
    SET_BIT(PWR->ENGTRIM, PWR_ENGTRIM_SMPSTRIMEN);    
1004328e:	4a14      	ldr	r2, [pc, #80]	@ (100432e0 <SystemInit+0x19c>)
10043290:	2394      	movs	r3, #148	@ 0x94
10043292:	58d3      	ldr	r3, [r2, r3]
10043294:	4912      	ldr	r1, [pc, #72]	@ (100432e0 <SystemInit+0x19c>)
10043296:	2280      	movs	r2, #128	@ 0x80
10043298:	00d2      	lsls	r2, r2, #3
1004329a:	4313      	orrs	r3, r2
1004329c:	2294      	movs	r2, #148	@ 0x94
1004329e:	508b      	str	r3, [r1, r2]
  }

  /* Set all the interrupt with low priprity */
  for (i=0; i<32; i++)
100432a0:	2317      	movs	r3, #23
100432a2:	18fb      	adds	r3, r7, r3
100432a4:	2200      	movs	r2, #0
100432a6:	701a      	strb	r2, [r3, #0]
100432a8:	e00d      	b.n	100432c6 <SystemInit+0x182>
  {
    NVIC_SetPriority((IRQn_Type)i, IRQ_LOW_PRIORITY);
100432aa:	2417      	movs	r4, #23
100432ac:	193b      	adds	r3, r7, r4
100432ae:	781b      	ldrb	r3, [r3, #0]
100432b0:	b25b      	sxtb	r3, r3
100432b2:	2103      	movs	r1, #3
100432b4:	0018      	movs	r0, r3
100432b6:	f7ff fec5 	bl	10043044 <__NVIC_SetPriority>
  for (i=0; i<32; i++)
100432ba:	0021      	movs	r1, r4
100432bc:	187b      	adds	r3, r7, r1
100432be:	781a      	ldrb	r2, [r3, #0]
100432c0:	187b      	adds	r3, r7, r1
100432c2:	3201      	adds	r2, #1
100432c4:	701a      	strb	r2, [r3, #0]
100432c6:	2317      	movs	r3, #23
100432c8:	18fb      	adds	r3, r7, r3
100432ca:	781b      	ldrb	r3, [r3, #0]
100432cc:	2b1f      	cmp	r3, #31
100432ce:	d9ec      	bls.n	100432aa <SystemInit+0x166>
  __ASM volatile ("cpsie i" : : : "memory");
100432d0:	b662      	cpsie	i
}
100432d2:	46c0      	nop			@ (mov r8, r8)
  }
  
  /* Enable all the irqs */
  __enable_irq();
}
100432d4:	46c0      	nop			@ (mov r8, r8)
100432d6:	46bd      	mov	sp, r7
100432d8:	b007      	add	sp, #28
100432da:	bd90      	pop	{r4, r7, pc}
100432dc:	48400000 	.word	0x48400000
100432e0:	48500000 	.word	0x48500000
100432e4:	20000004 	.word	0x20000004
100432e8:	e000ed00 	.word	0xe000ed00
100432ec:	10040000 	.word	0x10040000
100432f0:	fffffbff 	.word	0xfffffbff
100432f4:	10001ef8 	.word	0x10001ef8
100432f8:	fcbceccc 	.word	0xfcbceccc
100432fc:	c0ffffff 	.word	0xc0ffffff
10043300:	fffffc3f 	.word	0xfffffc3f
10043304:	ffffc7ff 	.word	0xffffc7ff

10043308 <SystemCoreClockUpdate>:
  *
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
10043308:	b580      	push	{r7, lr}
1004330a:	b082      	sub	sp, #8
1004330c:	af00      	add	r7, sp, #0
  uint8_t directHSE_enabled;
  uint8_t divPrescaler;

  /* Get SYSCLK source HSE or HSI+PLL64MHz */
  directHSE_enabled = (RCC->CFGR & RCC_CFGR_HSESEL) >> RCC_CFGR_HSESEL_Pos;
1004330e:	4b13      	ldr	r3, [pc, #76]	@ (1004335c <SystemCoreClockUpdate+0x54>)
10043310:	689b      	ldr	r3, [r3, #8]
10043312:	085b      	lsrs	r3, r3, #1
10043314:	b2da      	uxtb	r2, r3
10043316:	1dfb      	adds	r3, r7, #7
10043318:	2101      	movs	r1, #1
1004331a:	400a      	ands	r2, r1
1004331c:	701a      	strb	r2, [r3, #0]

#if defined(STM32WB06) || defined(STM32WB07)
  /* Get the clock divider */
    divPrescaler = (RCC->CFGR & RCC_CFGR_CLKSYSDIV) >> RCC_CFGR_CLKSYSDIV_Pos;
1004331e:	4b0f      	ldr	r3, [pc, #60]	@ (1004335c <SystemCoreClockUpdate+0x54>)
10043320:	689b      	ldr	r3, [r3, #8]
10043322:	095b      	lsrs	r3, r3, #5
10043324:	b2da      	uxtb	r2, r3
10043326:	1dbb      	adds	r3, r7, #6
10043328:	2107      	movs	r1, #7
1004332a:	400a      	ands	r2, r1
1004332c:	701a      	strb	r2, [r3, #0]
#else
  /* Get the clock divider */
  divPrescaler = (RCC->CFGR & RCC_CFGR_CLKSYSDIV_STATUS) >> RCC_CFGR_CLKSYSDIV_STATUS_Pos;
#endif

  if (directHSE_enabled)
1004332e:	1dfb      	adds	r3, r7, #7
10043330:	781b      	ldrb	r3, [r3, #0]
10043332:	2b00      	cmp	r3, #0
10043334:	d007      	beq.n	10043346 <SystemCoreClockUpdate+0x3e>
  {
    SystemCoreClock = HSE_VALUE >> (divPrescaler - 1U);
10043336:	1dbb      	adds	r3, r7, #6
10043338:	781b      	ldrb	r3, [r3, #0]
1004333a:	3b01      	subs	r3, #1
1004333c:	4a08      	ldr	r2, [pc, #32]	@ (10043360 <SystemCoreClockUpdate+0x58>)
1004333e:	40da      	lsrs	r2, r3
10043340:	4b08      	ldr	r3, [pc, #32]	@ (10043364 <SystemCoreClockUpdate+0x5c>)
10043342:	601a      	str	r2, [r3, #0]
  }
  else
  {
    SystemCoreClock = HSI_VALUE >> divPrescaler;
  }  
}
10043344:	e005      	b.n	10043352 <SystemCoreClockUpdate+0x4a>
    SystemCoreClock = HSI_VALUE >> divPrescaler;
10043346:	1dbb      	adds	r3, r7, #6
10043348:	781b      	ldrb	r3, [r3, #0]
1004334a:	4a07      	ldr	r2, [pc, #28]	@ (10043368 <SystemCoreClockUpdate+0x60>)
1004334c:	40da      	lsrs	r2, r3
1004334e:	4b05      	ldr	r3, [pc, #20]	@ (10043364 <SystemCoreClockUpdate+0x5c>)
10043350:	601a      	str	r2, [r3, #0]
}
10043352:	46c0      	nop			@ (mov r8, r8)
10043354:	46bd      	mov	sp, r7
10043356:	b002      	add	sp, #8
10043358:	bd80      	pop	{r7, pc}
1004335a:	46c0      	nop			@ (mov r8, r8)
1004335c:	48400000 	.word	0x48400000
10043360:	01e84800 	.word	0x01e84800
10043364:	2000064c 	.word	0x2000064c
10043368:	03d09000 	.word	0x03d09000

1004336c <CPUcontextRestore>:
  *         by popping it from the stack 
  * @param  None
  * @retval None
  */
__WEAK void CPUcontextRestore(void)
{
1004336c:	b580      	push	{r7, lr}
1004336e:	af00      	add	r7, sp, #0
}
10043370:	46c0      	nop			@ (mov r8, r8)
10043372:	46bd      	mov	sp, r7
10043374:	bd80      	pop	{r7, pc}
	...

10043378 <Reset_Handler>:
10043378:	4810      	ldr	r0, [pc, #64]	@ (100433bc <LoopForever+0x2>)
1004337a:	4685      	mov	sp, r0
1004337c:	f7ff fee2 	bl	10043144 <SystemInit>
10043380:	2100      	movs	r1, #0
10043382:	e003      	b.n	1004338c <LoopCopyDataInit>

10043384 <CopyDataInit>:
10043384:	4b0e      	ldr	r3, [pc, #56]	@ (100433c0 <LoopForever+0x6>)
10043386:	585b      	ldr	r3, [r3, r1]
10043388:	5043      	str	r3, [r0, r1]
1004338a:	3104      	adds	r1, #4

1004338c <LoopCopyDataInit>:
1004338c:	480d      	ldr	r0, [pc, #52]	@ (100433c4 <LoopForever+0xa>)
1004338e:	4b0e      	ldr	r3, [pc, #56]	@ (100433c8 <LoopForever+0xe>)
10043390:	1842      	adds	r2, r0, r1
10043392:	429a      	cmp	r2, r3
10043394:	d3f6      	bcc.n	10043384 <CopyDataInit>
10043396:	4a0d      	ldr	r2, [pc, #52]	@ (100433cc <LoopForever+0x12>)
10043398:	e002      	b.n	100433a0 <LoopFillZerobss>

1004339a <FillZerobss>:
1004339a:	2300      	movs	r3, #0
1004339c:	6013      	str	r3, [r2, #0]
1004339e:	3204      	adds	r2, #4

100433a0 <LoopFillZerobss>:
100433a0:	4b0b      	ldr	r3, [pc, #44]	@ (100433d0 <LoopForever+0x16>)
100433a2:	429a      	cmp	r2, r3
100433a4:	d3f9      	bcc.n	1004339a <FillZerobss>
100433a6:	4a0b      	ldr	r2, [pc, #44]	@ (100433d4 <LoopForever+0x1a>)
100433a8:	e002      	b.n	100433b0 <LoopFillZeroBlueRam>

100433aa <FillZerobssram>:
100433aa:	2300      	movs	r3, #0
100433ac:	6013      	str	r3, [r2, #0]
100433ae:	3204      	adds	r2, #4

100433b0 <LoopFillZeroBlueRam>:
100433b0:	4b09      	ldr	r3, [pc, #36]	@ (100433d8 <LoopForever+0x1e>)
100433b2:	429a      	cmp	r2, r3
100433b4:	d3f9      	bcc.n	100433aa <FillZerobssram>
100433b6:	f7ff f959 	bl	1004266c <main>

100433ba <LoopForever>:
100433ba:	e7fe      	b.n	100433ba <LoopForever>
100433bc:	20010000 	.word	0x20010000
100433c0:	100493ec 	.word	0x100493ec
100433c4:	20000638 	.word	0x20000638
100433c8:	200006a4 	.word	0x200006a4
100433cc:	2000017c 	.word	0x2000017c
100433d0:	20000638 	.word	0x20000638
100433d4:	200000c0 	.word	0x200000c0
100433d8:	2000017c 	.word	0x2000017c

100433dc <ADC_IRQHandler>:
100433dc:	e7fe      	b.n	100433dc <ADC_IRQHandler>
	...

100433e0 <DW1000_read_reg>:
/*!<
 * LL functions
 * */

static inline void DW1000_read_reg(DW1000_t *dw1000, uint32_t reg,
		uint16_t offset, uint8_t *buffer, uint32_t size) {
100433e0:	b580      	push	{r7, lr}
100433e2:	b084      	sub	sp, #16
100433e4:	af00      	add	r7, sp, #0
100433e6:	60f8      	str	r0, [r7, #12]
100433e8:	60b9      	str	r1, [r7, #8]
100433ea:	603b      	str	r3, [r7, #0]
100433ec:	1dbb      	adds	r3, r7, #6
100433ee:	801a      	strh	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
100433f0:	b672      	cpsid	i
}
100433f2:	46c0      	nop			@ (mov r8, r8)
	__disable_irq();
	reg &= 0x3FU;
100433f4:	68bb      	ldr	r3, [r7, #8]
100433f6:	223f      	movs	r2, #63	@ 0x3f
100433f8:	4013      	ands	r3, r2
100433fa:	60bb      	str	r3, [r7, #8]
	HAL_GPIO_WritePin(dw1000->NSS_port, dw1000->NSS_pin, 0);
100433fc:	68fb      	ldr	r3, [r7, #12]
100433fe:	6858      	ldr	r0, [r3, #4]
10043400:	68fb      	ldr	r3, [r7, #12]
10043402:	899b      	ldrh	r3, [r3, #12]
10043404:	2200      	movs	r2, #0
10043406:	0019      	movs	r1, r3
10043408:	f001 fc11 	bl	10044c2e <HAL_GPIO_WritePin>
	if (offset & 0xFF00) {
1004340c:	1dbb      	adds	r3, r7, #6
1004340e:	881a      	ldrh	r2, [r3, #0]
10043410:	23ff      	movs	r3, #255	@ 0xff
10043412:	021b      	lsls	r3, r3, #8
10043414:	4013      	ands	r3, r2
10043416:	d010      	beq.n	1004343a <DW1000_read_reg+0x5a>
		reg |= 0x8040U | (offset << 8);
10043418:	1dbb      	adds	r3, r7, #6
1004341a:	881b      	ldrh	r3, [r3, #0]
1004341c:	021a      	lsls	r2, r3, #8
1004341e:	68bb      	ldr	r3, [r7, #8]
10043420:	4313      	orrs	r3, r2
10043422:	4a1f      	ldr	r2, [pc, #124]	@ (100434a0 <DW1000_read_reg+0xc0>)
10043424:	4313      	orrs	r3, r2
10043426:	60bb      	str	r3, [r7, #8]
		SPI_write8(dw1000->spi, (void*) &reg, 3, DW1000_TIMEOUT);
10043428:	68fb      	ldr	r3, [r7, #12]
1004342a:	6818      	ldr	r0, [r3, #0]
1004342c:	2308      	movs	r3, #8
1004342e:	18f9      	adds	r1, r7, r3
10043430:	230a      	movs	r3, #10
10043432:	2203      	movs	r2, #3
10043434:	f000 ff9c 	bl	10044370 <SPI_write8>
10043438:	e01c      	b.n	10043474 <DW1000_read_reg+0x94>
	} else if (offset) {
1004343a:	1dbb      	adds	r3, r7, #6
1004343c:	881b      	ldrh	r3, [r3, #0]
1004343e:	2b00      	cmp	r3, #0
10043440:	d010      	beq.n	10043464 <DW1000_read_reg+0x84>
		reg |= 0x40U | (offset << 8);
10043442:	1dbb      	adds	r3, r7, #6
10043444:	881b      	ldrh	r3, [r3, #0]
10043446:	021a      	lsls	r2, r3, #8
10043448:	68bb      	ldr	r3, [r7, #8]
1004344a:	4313      	orrs	r3, r2
1004344c:	2240      	movs	r2, #64	@ 0x40
1004344e:	4313      	orrs	r3, r2
10043450:	60bb      	str	r3, [r7, #8]
		SPI_write8(dw1000->spi, (void*) &reg, 2, DW1000_TIMEOUT);
10043452:	68fb      	ldr	r3, [r7, #12]
10043454:	6818      	ldr	r0, [r3, #0]
10043456:	2308      	movs	r3, #8
10043458:	18f9      	adds	r1, r7, r3
1004345a:	230a      	movs	r3, #10
1004345c:	2202      	movs	r2, #2
1004345e:	f000 ff87 	bl	10044370 <SPI_write8>
10043462:	e007      	b.n	10043474 <DW1000_read_reg+0x94>
	} else {
		SPI_write8(dw1000->spi, (void*) &reg, 1, DW1000_TIMEOUT);
10043464:	68fb      	ldr	r3, [r7, #12]
10043466:	6818      	ldr	r0, [r3, #0]
10043468:	2308      	movs	r3, #8
1004346a:	18f9      	adds	r1, r7, r3
1004346c:	230a      	movs	r3, #10
1004346e:	2201      	movs	r2, #1
10043470:	f000 ff7e 	bl	10044370 <SPI_write8>
	}
	SPI_read8(dw1000->spi, buffer, size, DW1000_TIMEOUT);
10043474:	68fb      	ldr	r3, [r7, #12]
10043476:	6818      	ldr	r0, [r3, #0]
10043478:	69ba      	ldr	r2, [r7, #24]
1004347a:	6839      	ldr	r1, [r7, #0]
1004347c:	230a      	movs	r3, #10
1004347e:	f000 fff3 	bl	10044468 <SPI_read8>
	HAL_GPIO_WritePin(dw1000->NSS_port, dw1000->NSS_pin, 1);
10043482:	68fb      	ldr	r3, [r7, #12]
10043484:	6858      	ldr	r0, [r3, #4]
10043486:	68fb      	ldr	r3, [r7, #12]
10043488:	899b      	ldrh	r3, [r3, #12]
1004348a:	2201      	movs	r2, #1
1004348c:	0019      	movs	r1, r3
1004348e:	f001 fbce 	bl	10044c2e <HAL_GPIO_WritePin>
  __ASM volatile ("cpsie i" : : : "memory");
10043492:	b662      	cpsie	i
}
10043494:	46c0      	nop			@ (mov r8, r8)
	__enable_irq();
}
10043496:	46c0      	nop			@ (mov r8, r8)
10043498:	46bd      	mov	sp, r7
1004349a:	b004      	add	sp, #16
1004349c:	bd80      	pop	{r7, pc}
1004349e:	46c0      	nop			@ (mov r8, r8)
100434a0:	00008040 	.word	0x00008040

100434a4 <DW1000_write_reg>:

static inline void DW1000_write_reg(DW1000_t *dw1000, uint32_t reg,
		uint16_t offset, uint8_t *buffer, uint32_t size) {
100434a4:	b580      	push	{r7, lr}
100434a6:	b084      	sub	sp, #16
100434a8:	af00      	add	r7, sp, #0
100434aa:	60f8      	str	r0, [r7, #12]
100434ac:	60b9      	str	r1, [r7, #8]
100434ae:	603b      	str	r3, [r7, #0]
100434b0:	1dbb      	adds	r3, r7, #6
100434b2:	801a      	strh	r2, [r3, #0]
	reg = (reg & 0x3FU) | 0x80;
100434b4:	68bb      	ldr	r3, [r7, #8]
100434b6:	223f      	movs	r2, #63	@ 0x3f
100434b8:	4013      	ands	r3, r2
100434ba:	2280      	movs	r2, #128	@ 0x80
100434bc:	4313      	orrs	r3, r2
100434be:	60bb      	str	r3, [r7, #8]
	HAL_GPIO_WritePin(dw1000->NSS_port, dw1000->NSS_pin, 0);
100434c0:	68fb      	ldr	r3, [r7, #12]
100434c2:	6858      	ldr	r0, [r3, #4]
100434c4:	68fb      	ldr	r3, [r7, #12]
100434c6:	899b      	ldrh	r3, [r3, #12]
100434c8:	2200      	movs	r2, #0
100434ca:	0019      	movs	r1, r3
100434cc:	f001 fbaf 	bl	10044c2e <HAL_GPIO_WritePin>
	if (offset & 0xFF00) {
100434d0:	1dbb      	adds	r3, r7, #6
100434d2:	881a      	ldrh	r2, [r3, #0]
100434d4:	23ff      	movs	r3, #255	@ 0xff
100434d6:	021b      	lsls	r3, r3, #8
100434d8:	4013      	ands	r3, r2
100434da:	d010      	beq.n	100434fe <DW1000_write_reg+0x5a>
		reg |= 0x8040U | (offset << 8);
100434dc:	1dbb      	adds	r3, r7, #6
100434de:	881b      	ldrh	r3, [r3, #0]
100434e0:	021a      	lsls	r2, r3, #8
100434e2:	68bb      	ldr	r3, [r7, #8]
100434e4:	4313      	orrs	r3, r2
100434e6:	4a1e      	ldr	r2, [pc, #120]	@ (10043560 <DW1000_write_reg+0xbc>)
100434e8:	4313      	orrs	r3, r2
100434ea:	60bb      	str	r3, [r7, #8]
		SPI_write8(dw1000->spi, (void*) &reg, 3, DW1000_TIMEOUT);
100434ec:	68fb      	ldr	r3, [r7, #12]
100434ee:	6818      	ldr	r0, [r3, #0]
100434f0:	2308      	movs	r3, #8
100434f2:	18f9      	adds	r1, r7, r3
100434f4:	230a      	movs	r3, #10
100434f6:	2203      	movs	r2, #3
100434f8:	f000 ff3a 	bl	10044370 <SPI_write8>
100434fc:	e01c      	b.n	10043538 <DW1000_write_reg+0x94>
	} else if (offset) {
100434fe:	1dbb      	adds	r3, r7, #6
10043500:	881b      	ldrh	r3, [r3, #0]
10043502:	2b00      	cmp	r3, #0
10043504:	d010      	beq.n	10043528 <DW1000_write_reg+0x84>
		reg |= 0x40U | (offset << 8);
10043506:	1dbb      	adds	r3, r7, #6
10043508:	881b      	ldrh	r3, [r3, #0]
1004350a:	021a      	lsls	r2, r3, #8
1004350c:	68bb      	ldr	r3, [r7, #8]
1004350e:	4313      	orrs	r3, r2
10043510:	2240      	movs	r2, #64	@ 0x40
10043512:	4313      	orrs	r3, r2
10043514:	60bb      	str	r3, [r7, #8]
		SPI_write8(dw1000->spi, (void*) &reg, 2, DW1000_TIMEOUT);
10043516:	68fb      	ldr	r3, [r7, #12]
10043518:	6818      	ldr	r0, [r3, #0]
1004351a:	2308      	movs	r3, #8
1004351c:	18f9      	adds	r1, r7, r3
1004351e:	230a      	movs	r3, #10
10043520:	2202      	movs	r2, #2
10043522:	f000 ff25 	bl	10044370 <SPI_write8>
10043526:	e007      	b.n	10043538 <DW1000_write_reg+0x94>
	} else {
		SPI_write8(dw1000->spi, (void*) &reg, 1, DW1000_TIMEOUT);
10043528:	68fb      	ldr	r3, [r7, #12]
1004352a:	6818      	ldr	r0, [r3, #0]
1004352c:	2308      	movs	r3, #8
1004352e:	18f9      	adds	r1, r7, r3
10043530:	230a      	movs	r3, #10
10043532:	2201      	movs	r2, #1
10043534:	f000 ff1c 	bl	10044370 <SPI_write8>
	}
	SPI_write8(dw1000->spi, buffer, size, DW1000_TIMEOUT);
10043538:	68fb      	ldr	r3, [r7, #12]
1004353a:	6818      	ldr	r0, [r3, #0]
1004353c:	69ba      	ldr	r2, [r7, #24]
1004353e:	6839      	ldr	r1, [r7, #0]
10043540:	230a      	movs	r3, #10
10043542:	f000 ff15 	bl	10044370 <SPI_write8>
	HAL_GPIO_WritePin(dw1000->NSS_port, dw1000->NSS_pin, 1);
10043546:	68fb      	ldr	r3, [r7, #12]
10043548:	6858      	ldr	r0, [r3, #4]
1004354a:	68fb      	ldr	r3, [r7, #12]
1004354c:	899b      	ldrh	r3, [r3, #12]
1004354e:	2201      	movs	r2, #1
10043550:	0019      	movs	r1, r3
10043552:	f001 fb6c 	bl	10044c2e <HAL_GPIO_WritePin>
}
10043556:	46c0      	nop			@ (mov r8, r8)
10043558:	46bd      	mov	sp, r7
1004355a:	b004      	add	sp, #16
1004355c:	bd80      	pop	{r7, pc}
1004355e:	46c0      	nop			@ (mov r8, r8)
10043560:	00008040 	.word	0x00008040

10043564 <DW1000_init>:

/*!<
 * functions
 * */
void DW1000_init(DW1000_t *dw1000) {
10043564:	b590      	push	{r4, r7, lr}
10043566:	b087      	sub	sp, #28
10043568:	af02      	add	r7, sp, #8
1004356a:	6078      	str	r0, [r7, #4]
	uint32_t tmp;
	// reset
	HAL_GPIO_WritePin(dw1000->NRST_port, dw1000->NRST_pin, 0);
1004356c:	687b      	ldr	r3, [r7, #4]
1004356e:	6898      	ldr	r0, [r3, #8]
10043570:	687b      	ldr	r3, [r7, #4]
10043572:	89db      	ldrh	r3, [r3, #14]
10043574:	2200      	movs	r2, #0
10043576:	0019      	movs	r1, r3
10043578:	f001 fb59 	bl	10044c2e <HAL_GPIO_WritePin>
	HAL_Delay(1);
1004357c:	2001      	movs	r0, #1
1004357e:	f001 f8ab 	bl	100446d8 <HAL_Delay>

	HAL_GPIO_WritePin(dw1000->NRST_port, dw1000->NRST_pin, 1);
10043582:	687b      	ldr	r3, [r7, #4]
10043584:	6898      	ldr	r0, [r3, #8]
10043586:	687b      	ldr	r3, [r7, #4]
10043588:	89db      	ldrh	r3, [r3, #14]
1004358a:	2201      	movs	r2, #1
1004358c:	0019      	movs	r1, r3
1004358e:	f001 fb4e 	bl	10044c2e <HAL_GPIO_WritePin>

	// check devid
	DW1000_read_reg(dw1000, DEV_ID_ID, 0, (void*) &tmp, 4);
10043592:	230c      	movs	r3, #12
10043594:	18fb      	adds	r3, r7, r3
10043596:	6878      	ldr	r0, [r7, #4]
10043598:	2204      	movs	r2, #4
1004359a:	9200      	str	r2, [sp, #0]
1004359c:	2200      	movs	r2, #0
1004359e:	2100      	movs	r1, #0
100435a0:	f7ff ff1e 	bl	100433e0 <DW1000_read_reg>
	if (tmp != 0xDECA0130UL) {
100435a4:	68fb      	ldr	r3, [r7, #12]
100435a6:	4a9c      	ldr	r2, [pc, #624]	@ (10043818 <DW1000_init+0x2b4>)
100435a8:	4293      	cmp	r3, r2
100435aa:	d001      	beq.n	100435b0 <DW1000_init+0x4c>
		for (;;)
100435ac:	46c0      	nop			@ (mov r8, r8)
100435ae:	e7fd      	b.n	100435ac <DW1000_init+0x48>
			;
	}

	// enable clock
	DW1000_read_reg(dw1000, PMSC_ID, PMSC_CTRL0_OFFSET, (void*) &tmp, 2);
100435b0:	240c      	movs	r4, #12
100435b2:	193b      	adds	r3, r7, r4
100435b4:	6878      	ldr	r0, [r7, #4]
100435b6:	2202      	movs	r2, #2
100435b8:	9200      	str	r2, [sp, #0]
100435ba:	2200      	movs	r2, #0
100435bc:	2136      	movs	r1, #54	@ 0x36
100435be:	f7ff ff0f 	bl	100433e0 <DW1000_read_reg>
	tmp &= 0xFFFCU;	// reset sys_clk select
100435c2:	68fb      	ldr	r3, [r7, #12]
100435c4:	4a95      	ldr	r2, [pc, #596]	@ (1004381c <DW1000_init+0x2b8>)
100435c6:	4013      	ands	r3, r2
100435c8:	60fb      	str	r3, [r7, #12]
	tmp |= 0x0001U;	// select XTI as sys_clk
100435ca:	68fb      	ldr	r3, [r7, #12]
100435cc:	2201      	movs	r2, #1
100435ce:	4313      	orrs	r3, r2
100435d0:	60fb      	str	r3, [r7, #12]
	DW1000_write_reg(dw1000, PMSC_ID, PMSC_CTRL0_OFFSET, (void*) &tmp, 2);
100435d2:	193b      	adds	r3, r7, r4
100435d4:	6878      	ldr	r0, [r7, #4]
100435d6:	2202      	movs	r2, #2
100435d8:	9200      	str	r2, [sp, #0]
100435da:	2200      	movs	r2, #0
100435dc:	2136      	movs	r1, #54	@ 0x36
100435de:	f7ff ff61 	bl	100434a4 <DW1000_write_reg>

	tmp = PMSC_CTRL1_PKTSEQ_DISABLE;
100435e2:	2300      	movs	r3, #0
100435e4:	60fb      	str	r3, [r7, #12]
	DW1000_write_reg(dw1000, PMSC_ID, PMSC_CTRL1_OFFSET, (void*) &tmp, 2); // Disable PMSC ctrl of RF and RX clk blocks
100435e6:	193b      	adds	r3, r7, r4
100435e8:	6878      	ldr	r0, [r7, #4]
100435ea:	2202      	movs	r2, #2
100435ec:	9200      	str	r2, [sp, #0]
100435ee:	2204      	movs	r2, #4
100435f0:	2136      	movs	r1, #54	@ 0x36
100435f2:	f7ff ff57 	bl	100434a4 <DW1000_write_reg>

	// Clear any AON auto download bits (as reset will trigger AON download)
	tmp = 0x00;
100435f6:	2300      	movs	r3, #0
100435f8:	60fb      	str	r3, [r7, #12]
	DW1000_write_reg(dw1000, AON_ID, AON_WCFG_OFFSET, (void*) &tmp, 2);
100435fa:	193b      	adds	r3, r7, r4
100435fc:	6878      	ldr	r0, [r7, #4]
100435fe:	2202      	movs	r2, #2
10043600:	9200      	str	r2, [sp, #0]
10043602:	2200      	movs	r2, #0
10043604:	212c      	movs	r1, #44	@ 0x2c
10043606:	f7ff ff4d 	bl	100434a4 <DW1000_write_reg>
	// Clear the wake-up configuration
	DW1000_write_reg(dw1000, AON_ID, AON_CFG0_OFFSET, (void*) &tmp, 1);
1004360a:	193b      	adds	r3, r7, r4
1004360c:	6878      	ldr	r0, [r7, #4]
1004360e:	2201      	movs	r2, #1
10043610:	9200      	str	r2, [sp, #0]
10043612:	2206      	movs	r2, #6
10043614:	212c      	movs	r1, #44	@ 0x2c
10043616:	f7ff ff45 	bl	100434a4 <DW1000_write_reg>
	// Upload the new configuration
	DW1000_write_reg(dw1000, AON_ID, AON_CTRL_OFFSET, (void*) &tmp, 1); // Clear the register
1004361a:	193b      	adds	r3, r7, r4
1004361c:	6878      	ldr	r0, [r7, #4]
1004361e:	2201      	movs	r2, #1
10043620:	9200      	str	r2, [sp, #0]
10043622:	2202      	movs	r2, #2
10043624:	212c      	movs	r1, #44	@ 0x2c
10043626:	f7ff ff3d 	bl	100434a4 <DW1000_write_reg>
	tmp = AON_CTRL_SAVE;
1004362a:	2302      	movs	r3, #2
1004362c:	60fb      	str	r3, [r7, #12]
	DW1000_write_reg(dw1000, AON_ID, AON_CTRL_OFFSET, (void*) &tmp, 1);
1004362e:	193b      	adds	r3, r7, r4
10043630:	6878      	ldr	r0, [r7, #4]
10043632:	2201      	movs	r2, #1
10043634:	9200      	str	r2, [sp, #0]
10043636:	2202      	movs	r2, #2
10043638:	212c      	movs	r1, #44	@ 0x2c
1004363a:	f7ff ff33 	bl	100434a4 <DW1000_write_reg>

	// Reset HIF, TX, RX and PMSC (set the reset bits)
	tmp = PMSC_CTRL0_RESET_ALL;
1004363e:	2300      	movs	r3, #0
10043640:	60fb      	str	r3, [r7, #12]
	DW1000_write_reg(dw1000, PMSC_ID, PMSC_CTRL0_SOFTRESET_OFFSET, (void*) &tmp,
10043642:	193b      	adds	r3, r7, r4
10043644:	6878      	ldr	r0, [r7, #4]
10043646:	2201      	movs	r2, #1
10043648:	9200      	str	r2, [sp, #0]
1004364a:	2203      	movs	r2, #3
1004364c:	2136      	movs	r1, #54	@ 0x36
1004364e:	f7ff ff29 	bl	100434a4 <DW1000_write_reg>
			1);

	// DW1000 needs a 10us sleep to let clk PLL lock after reset - the PLL will automatically lock after the reset
	// Could also have polled the PLL lock flag, but then the SPI needs to be < 3MHz !! So a simple delay is easier
	HAL_Delay(1);
10043652:	2001      	movs	r0, #1
10043654:	f001 f840 	bl	100446d8 <HAL_Delay>

	// Clear the reset bits
	tmp = PMSC_CTRL0_RESET_CLEAR;
10043658:	23f0      	movs	r3, #240	@ 0xf0
1004365a:	60fb      	str	r3, [r7, #12]
	DW1000_write_reg(dw1000, PMSC_ID, PMSC_CTRL0_SOFTRESET_OFFSET, (void*) &tmp,
1004365c:	193b      	adds	r3, r7, r4
1004365e:	6878      	ldr	r0, [r7, #4]
10043660:	2201      	movs	r2, #1
10043662:	9200      	str	r2, [sp, #0]
10043664:	2203      	movs	r2, #3
10043666:	2136      	movs	r1, #54	@ 0x36
10043668:	f7ff ff1c 	bl	100434a4 <DW1000_write_reg>
			1);

	// enable clock
	DW1000_read_reg(dw1000, PMSC_ID, PMSC_CTRL0_OFFSET, (void*) &tmp, 2);
1004366c:	193b      	adds	r3, r7, r4
1004366e:	6878      	ldr	r0, [r7, #4]
10043670:	2202      	movs	r2, #2
10043672:	9200      	str	r2, [sp, #0]
10043674:	2200      	movs	r2, #0
10043676:	2136      	movs	r1, #54	@ 0x36
10043678:	f7ff feb2 	bl	100433e0 <DW1000_read_reg>
	tmp &= 0xFFFCU;	// reset sys_clk select
1004367c:	68fb      	ldr	r3, [r7, #12]
1004367e:	4a67      	ldr	r2, [pc, #412]	@ (1004381c <DW1000_init+0x2b8>)
10043680:	4013      	ands	r3, r2
10043682:	60fb      	str	r3, [r7, #12]
	tmp |= 0x0001U;	// select XTI as sys_clk
10043684:	68fb      	ldr	r3, [r7, #12]
10043686:	2201      	movs	r2, #1
10043688:	4313      	orrs	r3, r2
1004368a:	60fb      	str	r3, [r7, #12]
	DW1000_write_reg(dw1000, PMSC_ID, PMSC_CTRL0_OFFSET, (void*) &tmp, 2);
1004368c:	193b      	adds	r3, r7, r4
1004368e:	6878      	ldr	r0, [r7, #4]
10043690:	2202      	movs	r2, #2
10043692:	9200      	str	r2, [sp, #0]
10043694:	2200      	movs	r2, #0
10043696:	2136      	movs	r1, #54	@ 0x36
10043698:	f7ff ff04 	bl	100434a4 <DW1000_write_reg>

	// configure the CPLL lock detect
	tmp = EC_CTRL_PLLLCK;
1004369c:	2304      	movs	r3, #4
1004369e:	60fb      	str	r3, [r7, #12]
	DW1000_write_reg(dw1000, EXT_SYNC_ID, EC_CTRL_OFFSET, (void*) &tmp, 1);
100436a0:	193b      	adds	r3, r7, r4
100436a2:	6878      	ldr	r0, [r7, #4]
100436a4:	2201      	movs	r2, #1
100436a6:	9200      	str	r2, [sp, #0]
100436a8:	2200      	movs	r2, #0
100436aa:	2124      	movs	r1, #36	@ 0x24
100436ac:	f7ff fefa 	bl	100434a4 <DW1000_write_reg>

	// LDO tune config
	// Write the address
	tmp = LDOTUNE_ADDRESS;
100436b0:	2304      	movs	r3, #4
100436b2:	60fb      	str	r3, [r7, #12]
	DW1000_write_reg(dw1000, OTP_IF_ID, OTP_ADDR, (void*) &tmp, 2);
100436b4:	193b      	adds	r3, r7, r4
100436b6:	6878      	ldr	r0, [r7, #4]
100436b8:	2202      	movs	r2, #2
100436ba:	9200      	str	r2, [sp, #0]
100436bc:	2204      	movs	r2, #4
100436be:	212d      	movs	r1, #45	@ 0x2d
100436c0:	f7ff fef0 	bl	100434a4 <DW1000_write_reg>

	// Perform OTP Read - Manual read mode has to be set
	tmp = OTP_CTRL_OTPREAD | OTP_CTRL_OTPRDEN;
100436c4:	2303      	movs	r3, #3
100436c6:	60fb      	str	r3, [r7, #12]
	DW1000_write_reg(dw1000, OTP_IF_ID, OTP_CTRL, (void*) &tmp, 1);
100436c8:	193b      	adds	r3, r7, r4
100436ca:	6878      	ldr	r0, [r7, #4]
100436cc:	2201      	movs	r2, #1
100436ce:	9200      	str	r2, [sp, #0]
100436d0:	2206      	movs	r2, #6
100436d2:	212d      	movs	r1, #45	@ 0x2d
100436d4:	f7ff fee6 	bl	100434a4 <DW1000_write_reg>
	tmp = 0;
100436d8:	2300      	movs	r3, #0
100436da:	60fb      	str	r3, [r7, #12]
	DW1000_write_reg(dw1000, OTP_IF_ID, OTP_CTRL, (void*) &tmp, 1);
100436dc:	193b      	adds	r3, r7, r4
100436de:	6878      	ldr	r0, [r7, #4]
100436e0:	2201      	movs	r2, #1
100436e2:	9200      	str	r2, [sp, #0]
100436e4:	2206      	movs	r2, #6
100436e6:	212d      	movs	r1, #45	@ 0x2d
100436e8:	f7ff fedc 	bl	100434a4 <DW1000_write_reg>
	DW1000_read_reg(dw1000, OTP_IF_ID, OTP_RDAT, (void*) &tmp, 4);
100436ec:	193b      	adds	r3, r7, r4
100436ee:	6878      	ldr	r0, [r7, #4]
100436f0:	2204      	movs	r2, #4
100436f2:	9200      	str	r2, [sp, #0]
100436f4:	220a      	movs	r2, #10
100436f6:	212d      	movs	r1, #45	@ 0x2d
100436f8:	f7ff fe72 	bl	100433e0 <DW1000_read_reg>
	if ((tmp & 0xFF) != 0) {
100436fc:	68fb      	ldr	r3, [r7, #12]
100436fe:	22ff      	movs	r2, #255	@ 0xff
10043700:	4013      	ands	r3, r2
10043702:	d009      	beq.n	10043718 <DW1000_init+0x1b4>
		tmp = OTP_SF_LDO_KICK;
10043704:	2302      	movs	r3, #2
10043706:	60fb      	str	r3, [r7, #12]
		DW1000_write_reg(dw1000, OTP_IF_ID, OTP_SF, (void*) &tmp, 1); // Set load LDO kick bit
10043708:	193b      	adds	r3, r7, r4
1004370a:	6878      	ldr	r0, [r7, #4]
1004370c:	2201      	movs	r2, #1
1004370e:	9200      	str	r2, [sp, #0]
10043710:	2212      	movs	r2, #18
10043712:	212d      	movs	r1, #45	@ 0x2d
10043714:	f7ff fec6 	bl	100434a4 <DW1000_write_reg>
	}

	// xtrim OTP
	// Write the address
	tmp = XTRIM_ADDRESS;
10043718:	231e      	movs	r3, #30
1004371a:	60fb      	str	r3, [r7, #12]
	DW1000_write_reg(dw1000, OTP_IF_ID, OTP_ADDR, (void*) &tmp, 2);
1004371c:	240c      	movs	r4, #12
1004371e:	193b      	adds	r3, r7, r4
10043720:	6878      	ldr	r0, [r7, #4]
10043722:	2202      	movs	r2, #2
10043724:	9200      	str	r2, [sp, #0]
10043726:	2204      	movs	r2, #4
10043728:	212d      	movs	r1, #45	@ 0x2d
1004372a:	f7ff febb 	bl	100434a4 <DW1000_write_reg>

	// Perform OTP Read - Manual read mode has to be set
	tmp = OTP_CTRL_OTPREAD | OTP_CTRL_OTPRDEN;
1004372e:	2303      	movs	r3, #3
10043730:	60fb      	str	r3, [r7, #12]
	DW1000_write_reg(dw1000, OTP_IF_ID, OTP_CTRL, (void*) &tmp, 1);
10043732:	193b      	adds	r3, r7, r4
10043734:	6878      	ldr	r0, [r7, #4]
10043736:	2201      	movs	r2, #1
10043738:	9200      	str	r2, [sp, #0]
1004373a:	2206      	movs	r2, #6
1004373c:	212d      	movs	r1, #45	@ 0x2d
1004373e:	f7ff feb1 	bl	100434a4 <DW1000_write_reg>
	tmp = 0x00;
10043742:	2300      	movs	r3, #0
10043744:	60fb      	str	r3, [r7, #12]
	DW1000_write_reg(dw1000, OTP_IF_ID, OTP_CTRL, (void*) &tmp, 1); // OTPREAD is self clearing but OTPRDEN is not
10043746:	193b      	adds	r3, r7, r4
10043748:	6878      	ldr	r0, [r7, #4]
1004374a:	2201      	movs	r2, #1
1004374c:	9200      	str	r2, [sp, #0]
1004374e:	2206      	movs	r2, #6
10043750:	212d      	movs	r1, #45	@ 0x2d
10043752:	f7ff fea7 	bl	100434a4 <DW1000_write_reg>

	// Read read data, available 40ns after rising edge of OTP_READ

	DW1000_read_reg(dw1000, OTP_IF_ID, OTP_RDAT, (void*) &tmp, 4);
10043756:	193b      	adds	r3, r7, r4
10043758:	6878      	ldr	r0, [r7, #4]
1004375a:	2204      	movs	r2, #4
1004375c:	9200      	str	r2, [sp, #0]
1004375e:	220a      	movs	r2, #10
10043760:	212d      	movs	r1, #45	@ 0x2d
10043762:	f7ff fe3d 	bl	100433e0 <DW1000_read_reg>
	tmp &= 0xffff;
10043766:	68fb      	ldr	r3, [r7, #12]
10043768:	041b      	lsls	r3, r3, #16
1004376a:	0c1b      	lsrs	r3, r3, #16
1004376c:	60fb      	str	r3, [r7, #12]

	if ((tmp & 0x1F) == 0) // A value of 0 means that the crystal has not been trimmed
1004376e:	68fb      	ldr	r3, [r7, #12]
10043770:	221f      	movs	r2, #31
10043772:	4013      	ands	r3, r2
10043774:	d101      	bne.n	1004377a <DW1000_init+0x216>
			{
		tmp = FS_XTALT_MIDRANGE; // Set to mid-range if no calibration value inside
10043776:	2310      	movs	r3, #16
10043778:	60fb      	str	r3, [r7, #12]
	}
	// Configure XTAL trim
	uint8_t reg_val = (3 << 5) | (tmp & FS_XTALT_MASK);
1004377a:	68fb      	ldr	r3, [r7, #12]
1004377c:	b2db      	uxtb	r3, r3
1004377e:	221f      	movs	r2, #31
10043780:	4013      	ands	r3, r2
10043782:	b2db      	uxtb	r3, r3
10043784:	2260      	movs	r2, #96	@ 0x60
10043786:	4313      	orrs	r3, r2
10043788:	b2da      	uxtb	r2, r3
1004378a:	210b      	movs	r1, #11
1004378c:	187b      	adds	r3, r7, r1
1004378e:	701a      	strb	r2, [r3, #0]
	DW1000_write_reg(dw1000, FS_CTRL_ID, FS_XTALT_OFFSET, (void*) &reg_val, 1);
10043790:	187b      	adds	r3, r7, r1
10043792:	6878      	ldr	r0, [r7, #4]
10043794:	2201      	movs	r2, #1
10043796:	9200      	str	r2, [sp, #0]
10043798:	220e      	movs	r2, #14
1004379a:	212b      	movs	r1, #43	@ 0x2b
1004379c:	f7ff fe82 	bl	100434a4 <DW1000_write_reg>

	// force enable LDE
	tmp = 0x0301U;
100437a0:	4b1f      	ldr	r3, [pc, #124]	@ (10043820 <DW1000_init+0x2bc>)
100437a2:	60fb      	str	r3, [r7, #12]
	DW1000_write_reg(dw1000, PMSC_ID, PMSC_CTRL0_OFFSET, (void*) &tmp, 2);
100437a4:	240c      	movs	r4, #12
100437a6:	193b      	adds	r3, r7, r4
100437a8:	6878      	ldr	r0, [r7, #4]
100437aa:	2202      	movs	r2, #2
100437ac:	9200      	str	r2, [sp, #0]
100437ae:	2200      	movs	r2, #0
100437b0:	2136      	movs	r1, #54	@ 0x36
100437b2:	f7ff fe77 	bl	100434a4 <DW1000_write_reg>
	tmp = OTP_CTRL_LDELOAD;
100437b6:	2380      	movs	r3, #128	@ 0x80
100437b8:	021b      	lsls	r3, r3, #8
100437ba:	60fb      	str	r3, [r7, #12]
	DW1000_write_reg(dw1000, OTP_IF_ID, OTP_CTRL, (void*) &tmp, 2); // Set load LDE kick bit
100437bc:	193b      	adds	r3, r7, r4
100437be:	6878      	ldr	r0, [r7, #4]
100437c0:	2202      	movs	r2, #2
100437c2:	9200      	str	r2, [sp, #0]
100437c4:	2206      	movs	r2, #6
100437c6:	212d      	movs	r1, #45	@ 0x2d
100437c8:	f7ff fe6c 	bl	100434a4 <DW1000_write_reg>
	HAL_Delay(1);
100437cc:	2001      	movs	r0, #1
100437ce:	f000 ff83 	bl	100446d8 <HAL_Delay>
	DW1000_read_reg(dw1000, PMSC_ID, PMSC_CTRL0_OFFSET, (void*) &tmp, 2);
100437d2:	193b      	adds	r3, r7, r4
100437d4:	6878      	ldr	r0, [r7, #4]
100437d6:	2202      	movs	r2, #2
100437d8:	9200      	str	r2, [sp, #0]
100437da:	2200      	movs	r2, #0
100437dc:	2136      	movs	r1, #54	@ 0x36
100437de:	f7ff fdff 	bl	100433e0 <DW1000_read_reg>
	tmp &= 0xFE00U;
100437e2:	68fa      	ldr	r2, [r7, #12]
100437e4:	23fe      	movs	r3, #254	@ 0xfe
100437e6:	021b      	lsls	r3, r3, #8
100437e8:	4013      	ands	r3, r2
100437ea:	60fb      	str	r3, [r7, #12]
	DW1000_write_reg(dw1000, PMSC_ID, PMSC_CTRL0_OFFSET, (void*) &tmp, 2);
100437ec:	193b      	adds	r3, r7, r4
100437ee:	6878      	ldr	r0, [r7, #4]
100437f0:	2202      	movs	r2, #2
100437f2:	9200      	str	r2, [sp, #0]
100437f4:	2200      	movs	r2, #0
100437f6:	2136      	movs	r1, #54	@ 0x36
100437f8:	f7ff fe54 	bl	100434a4 <DW1000_write_reg>

	// AON
	tmp = 0x00;
100437fc:	2300      	movs	r3, #0
100437fe:	60fb      	str	r3, [r7, #12]
	DW1000_write_reg(dw1000, AON_ID, AON_CFG1_OFFSET, (void*) &tmp, 1);
10043800:	193b      	adds	r3, r7, r4
10043802:	6878      	ldr	r0, [r7, #4]
10043804:	2201      	movs	r2, #1
10043806:	9200      	str	r2, [sp, #0]
10043808:	220a      	movs	r2, #10
1004380a:	212c      	movs	r1, #44	@ 0x2c
1004380c:	f7ff fe4a 	bl	100434a4 <DW1000_write_reg>
}
10043810:	46c0      	nop			@ (mov r8, r8)
10043812:	46bd      	mov	sp, r7
10043814:	b005      	add	sp, #20
10043816:	bd90      	pop	{r4, r7, pc}
10043818:	deca0130 	.word	0xdeca0130
1004381c:	0000fffc 	.word	0x0000fffc
10043820:	00000301 	.word	0x00000301

10043824 <DW1000_config>:

uint8_t DW1000_config(DW1000_t *dw1000, DW1000_config_t *cfg) {
10043824:	b5f0      	push	{r4, r5, r6, r7, lr}
10043826:	b08d      	sub	sp, #52	@ 0x34
10043828:	af02      	add	r7, sp, #8
1004382a:	6078      	str	r0, [r7, #4]
1004382c:	6039      	str	r1, [r7, #0]
	uint32_t tmp = 0;
1004382e:	2300      	movs	r3, #0
10043830:	623b      	str	r3, [r7, #32]
	uint32_t sysCFGreg;
	uint16_t reg16 = 0x28F4; // rx code 9 (lde_replicaCoeff)
10043832:	241a      	movs	r4, #26
10043834:	193b      	adds	r3, r7, r4
10043836:	4ae5      	ldr	r2, [pc, #916]	@ (10043bcc <DW1000_config+0x3a8>)
10043838:	801a      	strh	r2, [r3, #0]

	DW1000_read_reg(dw1000, SYS_CFG_ID, 0x00, (void*) &sysCFGreg, 4);
1004383a:	231c      	movs	r3, #28
1004383c:	18fb      	adds	r3, r7, r3
1004383e:	6878      	ldr	r0, [r7, #4]
10043840:	2204      	movs	r2, #4
10043842:	9200      	str	r2, [sp, #0]
10043844:	2200      	movs	r2, #0
10043846:	2104      	movs	r1, #4
10043848:	f7ff fdca 	bl	100433e0 <DW1000_read_reg>
	if (DWT_BR_110K == cfg->dataRate) {
1004384c:	683b      	ldr	r3, [r7, #0]
1004384e:	79db      	ldrb	r3, [r3, #7]
10043850:	2b00      	cmp	r3, #0
10043852:	d10b      	bne.n	1004386c <DW1000_config+0x48>
		sysCFGreg |= SYS_CFG_RXM110K;
10043854:	69fb      	ldr	r3, [r7, #28]
10043856:	2280      	movs	r2, #128	@ 0x80
10043858:	03d2      	lsls	r2, r2, #15
1004385a:	4313      	orrs	r3, r2
1004385c:	61fb      	str	r3, [r7, #28]
		reg16 >>= 3; // lde_replicaCoeff must be divided by 8
1004385e:	193b      	adds	r3, r7, r4
10043860:	881b      	ldrh	r3, [r3, #0]
10043862:	08db      	lsrs	r3, r3, #3
10043864:	b29a      	uxth	r2, r3
10043866:	193b      	adds	r3, r7, r4
10043868:	801a      	strh	r2, [r3, #0]
1004386a:	e003      	b.n	10043874 <DW1000_config+0x50>
	} else {
		sysCFGreg &= (~SYS_CFG_RXM110K);
1004386c:	69fb      	ldr	r3, [r7, #28]
1004386e:	4ad8      	ldr	r2, [pc, #864]	@ (10043bd0 <DW1000_config+0x3ac>)
10043870:	4013      	ands	r3, r2
10043872:	61fb      	str	r3, [r7, #28]
	}

	sysCFGreg &= ~SYS_CFG_PHR_MODE_11;
10043874:	69fb      	ldr	r3, [r7, #28]
10043876:	4ad7      	ldr	r2, [pc, #860]	@ (10043bd4 <DW1000_config+0x3b0>)
10043878:	4013      	ands	r3, r2
1004387a:	61fb      	str	r3, [r7, #28]
	sysCFGreg |= (SYS_CFG_PHR_MODE_11
			& ((uint32_t) cfg->phrMode << SYS_CFG_PHR_MODE_SHFT));
1004387c:	683b      	ldr	r3, [r7, #0]
1004387e:	7a1b      	ldrb	r3, [r3, #8]
10043880:	041a      	lsls	r2, r3, #16
10043882:	23c0      	movs	r3, #192	@ 0xc0
10043884:	029b      	lsls	r3, r3, #10
10043886:	401a      	ands	r2, r3
	sysCFGreg |= (SYS_CFG_PHR_MODE_11
10043888:	69fb      	ldr	r3, [r7, #28]
1004388a:	4313      	orrs	r3, r2
1004388c:	61fb      	str	r3, [r7, #28]

	DW1000_write_reg(dw1000, SYS_CFG_ID, 0x00, (void*) &sysCFGreg, 4);
1004388e:	231c      	movs	r3, #28
10043890:	18fb      	adds	r3, r7, r3
10043892:	6878      	ldr	r0, [r7, #4]
10043894:	2204      	movs	r2, #4
10043896:	9200      	str	r2, [sp, #0]
10043898:	2200      	movs	r2, #0
1004389a:	2104      	movs	r1, #4
1004389c:	f7ff fe02 	bl	100434a4 <DW1000_write_reg>

	// Set the lde_replicaCoeff
	DW1000_write_reg(dw1000, LDE_IF_ID, LDE_REPC_OFFSET, (void*) &reg16, 2);
100438a0:	231a      	movs	r3, #26
100438a2:	18fb      	adds	r3, r7, r3
100438a4:	49cc      	ldr	r1, [pc, #816]	@ (10043bd8 <DW1000_config+0x3b4>)
100438a6:	6878      	ldr	r0, [r7, #4]
100438a8:	2202      	movs	r2, #2
100438aa:	9200      	str	r2, [sp, #0]
100438ac:	000a      	movs	r2, r1
100438ae:	212e      	movs	r1, #46	@ 0x2e
100438b0:	f7ff fdf8 	bl	100434a4 <DW1000_write_reg>

	tmp = LDE_PARAM1;
100438b4:	236d      	movs	r3, #109	@ 0x6d
100438b6:	623b      	str	r3, [r7, #32]
	DW1000_write_reg(dw1000, LDE_IF_ID, LDE_CFG1_OFFSET, (void*) &tmp, 1); // 8-bit configuration register
100438b8:	2420      	movs	r4, #32
100438ba:	193b      	adds	r3, r7, r4
100438bc:	49c7      	ldr	r1, [pc, #796]	@ (10043bdc <DW1000_config+0x3b8>)
100438be:	6878      	ldr	r0, [r7, #4]
100438c0:	2201      	movs	r2, #1
100438c2:	9200      	str	r2, [sp, #0]
100438c4:	000a      	movs	r2, r1
100438c6:	212e      	movs	r1, #46	@ 0x2e
100438c8:	f7ff fdec 	bl	100434a4 <DW1000_write_reg>

	if (dw1000_cfg.prf - DWT_PRF_16M) {
100438cc:	4bc4      	ldr	r3, [pc, #784]	@ (10043be0 <DW1000_config+0x3bc>)
100438ce:	785b      	ldrb	r3, [r3, #1]
100438d0:	2b01      	cmp	r3, #1
100438d2:	d00b      	beq.n	100438ec <DW1000_config+0xc8>
		tmp = LDE_PARAM3_64;
100438d4:	4bc3      	ldr	r3, [pc, #780]	@ (10043be4 <DW1000_config+0x3c0>)
100438d6:	623b      	str	r3, [r7, #32]
		DW1000_write_reg(dw1000, LDE_IF_ID, LDE_CFG2_OFFSET, (void*) &tmp, 2); // 16-bit LDE configuration tuning register
100438d8:	193b      	adds	r3, r7, r4
100438da:	49c3      	ldr	r1, [pc, #780]	@ (10043be8 <DW1000_config+0x3c4>)
100438dc:	6878      	ldr	r0, [r7, #4]
100438de:	2202      	movs	r2, #2
100438e0:	9200      	str	r2, [sp, #0]
100438e2:	000a      	movs	r2, r1
100438e4:	212e      	movs	r1, #46	@ 0x2e
100438e6:	f7ff fddd 	bl	100434a4 <DW1000_write_reg>
100438ea:	e00b      	b.n	10043904 <DW1000_config+0xe0>
	} else {
		tmp = LDE_PARAM3_16;
100438ec:	4bbf      	ldr	r3, [pc, #764]	@ (10043bec <DW1000_config+0x3c8>)
100438ee:	623b      	str	r3, [r7, #32]
		DW1000_write_reg(dw1000, LDE_IF_ID, LDE_CFG2_OFFSET, (void*) &tmp, 2);
100438f0:	2320      	movs	r3, #32
100438f2:	18fb      	adds	r3, r7, r3
100438f4:	49bc      	ldr	r1, [pc, #752]	@ (10043be8 <DW1000_config+0x3c4>)
100438f6:	6878      	ldr	r0, [r7, #4]
100438f8:	2202      	movs	r2, #2
100438fa:	9200      	str	r2, [sp, #0]
100438fc:	000a      	movs	r2, r1
100438fe:	212e      	movs	r1, #46	@ 0x2e
10043900:	f7ff fdd0 	bl	100434a4 <DW1000_write_reg>
	}

	// Configure PLL2/RF PLL block CFG/TUNE (for a given channel)
	tmp = FS_PLLCFG_CH2;
10043904:	4bba      	ldr	r3, [pc, #744]	@ (10043bf0 <DW1000_config+0x3cc>)
10043906:	623b      	str	r3, [r7, #32]
	DW1000_write_reg(dw1000, FS_CTRL_ID, FS_PLLCFG_OFFSET, (void*) &tmp, 4);
10043908:	2420      	movs	r4, #32
1004390a:	193b      	adds	r3, r7, r4
1004390c:	6878      	ldr	r0, [r7, #4]
1004390e:	2204      	movs	r2, #4
10043910:	9200      	str	r2, [sp, #0]
10043912:	2207      	movs	r2, #7
10043914:	212b      	movs	r1, #43	@ 0x2b
10043916:	f7ff fdc5 	bl	100434a4 <DW1000_write_reg>
	tmp = FS_PLLTUNE_CH2;
1004391a:	2326      	movs	r3, #38	@ 0x26
1004391c:	623b      	str	r3, [r7, #32]
	DW1000_write_reg(dw1000, FS_CTRL_ID, FS_PLLTUNE_OFFSET, (void*) &tmp, 1);
1004391e:	193b      	adds	r3, r7, r4
10043920:	6878      	ldr	r0, [r7, #4]
10043922:	2201      	movs	r2, #1
10043924:	9200      	str	r2, [sp, #0]
10043926:	220b      	movs	r2, #11
10043928:	212b      	movs	r1, #43	@ 0x2b
1004392a:	f7ff fdbb 	bl	100434a4 <DW1000_write_reg>

	// Configure RF RX blocks (for specified channel/bandwidth)
	tmp = RF_RXCTRLH_NBW;
1004392e:	23d8      	movs	r3, #216	@ 0xd8
10043930:	623b      	str	r3, [r7, #32]
	DW1000_write_reg(dw1000, RF_CONF_ID, RF_RXCTRLH_OFFSET, (void*) &tmp, 1);
10043932:	193b      	adds	r3, r7, r4
10043934:	6878      	ldr	r0, [r7, #4]
10043936:	2201      	movs	r2, #1
10043938:	9200      	str	r2, [sp, #0]
1004393a:	220b      	movs	r2, #11
1004393c:	2128      	movs	r1, #40	@ 0x28
1004393e:	f7ff fdb1 	bl	100434a4 <DW1000_write_reg>

	// Configure RF TX blocks (for specified channel and PRF)
	// Configure RF TX control
	tmp = RF_TXCTRL_CH2;
10043942:	4bac      	ldr	r3, [pc, #688]	@ (10043bf4 <DW1000_config+0x3d0>)
10043944:	623b      	str	r3, [r7, #32]
	DW1000_write_reg(dw1000, RF_CONF_ID, RF_TXCTRL_OFFSET, (void*) &tmp, 4);
10043946:	193b      	adds	r3, r7, r4
10043948:	6878      	ldr	r0, [r7, #4]
1004394a:	2204      	movs	r2, #4
1004394c:	9200      	str	r2, [sp, #0]
1004394e:	220c      	movs	r2, #12
10043950:	2128      	movs	r1, #40	@ 0x28
10043952:	f7ff fda7 	bl	100434a4 <DW1000_write_reg>

	// Configure the baseband parameters (for specified PRF, bit rate, PAC, and SFD settings)
	// DTUNE0
	tmp = DRX_TUNE0b_110K_NSTD;
10043956:	2316      	movs	r3, #22
10043958:	623b      	str	r3, [r7, #32]
	DW1000_write_reg(dw1000, DRX_CONF_ID, DRX_TUNE0b_OFFSET, (void*) &tmp, 2);
1004395a:	193b      	adds	r3, r7, r4
1004395c:	6878      	ldr	r0, [r7, #4]
1004395e:	2202      	movs	r2, #2
10043960:	9200      	str	r2, [sp, #0]
10043962:	2202      	movs	r2, #2
10043964:	2127      	movs	r1, #39	@ 0x27
10043966:	f7ff fd9d 	bl	100434a4 <DW1000_write_reg>

	// DTUNE1
	tmp = DRX_TUNE1a_PRF64;
1004396a:	238d      	movs	r3, #141	@ 0x8d
1004396c:	623b      	str	r3, [r7, #32]
	DW1000_write_reg(dw1000, DRX_CONF_ID, DRX_TUNE1a_OFFSET, (void*) &tmp, 2);
1004396e:	193b      	adds	r3, r7, r4
10043970:	6878      	ldr	r0, [r7, #4]
10043972:	2202      	movs	r2, #2
10043974:	9200      	str	r2, [sp, #0]
10043976:	2204      	movs	r2, #4
10043978:	2127      	movs	r1, #39	@ 0x27
1004397a:	f7ff fd93 	bl	100434a4 <DW1000_write_reg>
	tmp = DRX_TUNE1b_110K;
1004397e:	2364      	movs	r3, #100	@ 0x64
10043980:	623b      	str	r3, [r7, #32]
	DW1000_write_reg(dw1000, DRX_CONF_ID, DRX_TUNE1b_OFFSET, (void*) &tmp, 2);
10043982:	193b      	adds	r3, r7, r4
10043984:	6878      	ldr	r0, [r7, #4]
10043986:	2202      	movs	r2, #2
10043988:	9200      	str	r2, [sp, #0]
1004398a:	2206      	movs	r2, #6
1004398c:	2127      	movs	r1, #39	@ 0x27
1004398e:	f7ff fd89 	bl	100434a4 <DW1000_write_reg>

	// DTUNE2
	tmp = DRX_TUNE2_PRF64_PAC32;
10043992:	4b99      	ldr	r3, [pc, #612]	@ (10043bf8 <DW1000_config+0x3d4>)
10043994:	623b      	str	r3, [r7, #32]
	DW1000_write_reg(dw1000, DRX_CONF_ID, DRX_TUNE2_OFFSET, (void*) &tmp, 4);
10043996:	193b      	adds	r3, r7, r4
10043998:	6878      	ldr	r0, [r7, #4]
1004399a:	2204      	movs	r2, #4
1004399c:	9200      	str	r2, [sp, #0]
1004399e:	2208      	movs	r2, #8
100439a0:	2127      	movs	r1, #39	@ 0x27
100439a2:	f7ff fd7f 	bl	100434a4 <DW1000_write_reg>

	// DTUNE3 (SFD timeout)
	// Don't allow 0 - SFD timeout will always be enabled
	if (cfg->sfdTO == 0) {
100439a6:	683b      	ldr	r3, [r7, #0]
100439a8:	895b      	ldrh	r3, [r3, #10]
100439aa:	2b00      	cmp	r3, #0
100439ac:	d102      	bne.n	100439b4 <DW1000_config+0x190>
		cfg->sfdTO = DWT_SFDTOC_DEF;
100439ae:	683b      	ldr	r3, [r7, #0]
100439b0:	4a92      	ldr	r2, [pc, #584]	@ (10043bfc <DW1000_config+0x3d8>)
100439b2:	815a      	strh	r2, [r3, #10]
	}
	tmp = cfg->sfdTO;
100439b4:	683b      	ldr	r3, [r7, #0]
100439b6:	895b      	ldrh	r3, [r3, #10]
100439b8:	623b      	str	r3, [r7, #32]
	DW1000_write_reg(dw1000, DRX_CONF_ID, DRX_SFDTOC_OFFSET, (void*) &tmp, 2);
100439ba:	2420      	movs	r4, #32
100439bc:	193b      	adds	r3, r7, r4
100439be:	6878      	ldr	r0, [r7, #4]
100439c0:	2202      	movs	r2, #2
100439c2:	9200      	str	r2, [sp, #0]
100439c4:	2220      	movs	r2, #32
100439c6:	2127      	movs	r1, #39	@ 0x27
100439c8:	f7ff fd6c 	bl	100434a4 <DW1000_write_reg>

	// Configure AGC parameters
	tmp = AGC_TUNE2_VAL;
100439cc:	4b8c      	ldr	r3, [pc, #560]	@ (10043c00 <DW1000_config+0x3dc>)
100439ce:	623b      	str	r3, [r7, #32]
	DW1000_write_reg(dw1000, AGC_CFG_STS_ID, 0xC, (void*) &tmp, 4);
100439d0:	193b      	adds	r3, r7, r4
100439d2:	6878      	ldr	r0, [r7, #4]
100439d4:	2204      	movs	r2, #4
100439d6:	9200      	str	r2, [sp, #0]
100439d8:	220c      	movs	r2, #12
100439da:	2123      	movs	r1, #35	@ 0x23
100439dc:	f7ff fd62 	bl	100434a4 <DW1000_write_reg>
	tmp = AGC_TUNE1_64M;
100439e0:	4b88      	ldr	r3, [pc, #544]	@ (10043c04 <DW1000_config+0x3e0>)
100439e2:	623b      	str	r3, [r7, #32]
	DW1000_write_reg(dw1000, AGC_CFG_STS_ID, 0x4, (void*) &tmp, 2);
100439e4:	193b      	adds	r3, r7, r4
100439e6:	6878      	ldr	r0, [r7, #4]
100439e8:	2202      	movs	r2, #2
100439ea:	9200      	str	r2, [sp, #0]
100439ec:	2204      	movs	r2, #4
100439ee:	2123      	movs	r1, #35	@ 0x23
100439f0:	f7ff fd58 	bl	100434a4 <DW1000_write_reg>

	// Set (non-standard) user SFD for improved performance,
	uint8_t nsSfd_result = 0;
100439f4:	2527      	movs	r5, #39	@ 0x27
100439f6:	197b      	adds	r3, r7, r5
100439f8:	2200      	movs	r2, #0
100439fa:	701a      	strb	r2, [r3, #0]
	uint8_t useDWnsSFD = 0;
100439fc:	2626      	movs	r6, #38	@ 0x26
100439fe:	19bb      	adds	r3, r7, r6
10043a00:	2200      	movs	r2, #0
10043a02:	701a      	strb	r2, [r3, #0]
	if (cfg->nsSFD) {
10043a04:	683b      	ldr	r3, [r7, #0]
10043a06:	799b      	ldrb	r3, [r3, #6]
10043a08:	2b00      	cmp	r3, #0
10043a0a:	d00f      	beq.n	10043a2c <DW1000_config+0x208>
		// Write non standard (DW) SFD length
		tmp = DW_NS_SFD_LEN_110K;
10043a0c:	2340      	movs	r3, #64	@ 0x40
10043a0e:	623b      	str	r3, [r7, #32]
		DW1000_write_reg(dw1000, USR_SFD_ID, 0x00, (void*) &tmp, 1);
10043a10:	193b      	adds	r3, r7, r4
10043a12:	6878      	ldr	r0, [r7, #4]
10043a14:	2201      	movs	r2, #1
10043a16:	9200      	str	r2, [sp, #0]
10043a18:	2200      	movs	r2, #0
10043a1a:	2121      	movs	r1, #33	@ 0x21
10043a1c:	f7ff fd42 	bl	100434a4 <DW1000_write_reg>
		nsSfd_result = 3;
10043a20:	197b      	adds	r3, r7, r5
10043a22:	2203      	movs	r2, #3
10043a24:	701a      	strb	r2, [r3, #0]
		useDWnsSFD = 1;
10043a26:	19bb      	adds	r3, r7, r6
10043a28:	2201      	movs	r2, #1
10043a2a:	701a      	strb	r2, [r3, #0]
	}

	uint8_t chan = cfg->chan;
10043a2c:	2125      	movs	r1, #37	@ 0x25
10043a2e:	187b      	adds	r3, r7, r1
10043a30:	683a      	ldr	r2, [r7, #0]
10043a32:	7812      	ldrb	r2, [r2, #0]
10043a34:	701a      	strb	r2, [r3, #0]
	uint32_t regval = (CHAN_CTRL_TX_CHAN_MASK
			& (chan << CHAN_CTRL_TX_CHAN_SHIFT))
10043a36:	187b      	adds	r3, r7, r1
10043a38:	781b      	ldrb	r3, [r3, #0]
10043a3a:	220f      	movs	r2, #15
10043a3c:	401a      	ands	r2, r3
			| // Transmit Channel
			(CHAN_CTRL_RX_CHAN_MASK & (chan << CHAN_CTRL_RX_CHAN_SHIFT))
10043a3e:	187b      	adds	r3, r7, r1
10043a40:	781b      	ldrb	r3, [r3, #0]
10043a42:	011b      	lsls	r3, r3, #4
10043a44:	21ff      	movs	r1, #255	@ 0xff
10043a46:	400b      	ands	r3, r1
			| // Transmit Channel
10043a48:	431a      	orrs	r2, r3
			| // Receive Channel
			(CHAN_CTRL_RXFPRF_MASK
					& ((uint32_t) cfg->prf << CHAN_CTRL_RXFPRF_SHIFT))
10043a4a:	683b      	ldr	r3, [r7, #0]
10043a4c:	785b      	ldrb	r3, [r3, #1]
10043a4e:	0499      	lsls	r1, r3, #18
10043a50:	23c0      	movs	r3, #192	@ 0xc0
10043a52:	031b      	lsls	r3, r3, #12
10043a54:	400b      	ands	r3, r1
			| // Receive Channel
10043a56:	431a      	orrs	r2, r3
			| // RX PRF
			((CHAN_CTRL_TNSSFD | CHAN_CTRL_RNSSFD)
					& ((uint32_t) nsSfd_result << CHAN_CTRL_TNSSFD_SHIFT))
10043a58:	2327      	movs	r3, #39	@ 0x27
10043a5a:	18fb      	adds	r3, r7, r3
10043a5c:	781b      	ldrb	r3, [r3, #0]
10043a5e:	0519      	lsls	r1, r3, #20
10043a60:	23c0      	movs	r3, #192	@ 0xc0
10043a62:	039b      	lsls	r3, r3, #14
10043a64:	400b      	ands	r3, r1
			| // RX PRF
10043a66:	431a      	orrs	r2, r3
			| // nsSFD enable RX&TX
			(CHAN_CTRL_DWSFD & ((uint32_t) useDWnsSFD << CHAN_CTRL_DWSFD_SHIFT))
10043a68:	2326      	movs	r3, #38	@ 0x26
10043a6a:	18fb      	adds	r3, r7, r3
10043a6c:	781b      	ldrb	r3, [r3, #0]
10043a6e:	0459      	lsls	r1, r3, #17
10043a70:	2380      	movs	r3, #128	@ 0x80
10043a72:	029b      	lsls	r3, r3, #10
10043a74:	400b      	ands	r3, r1
			| // nsSFD enable RX&TX
10043a76:	431a      	orrs	r2, r3
			| // Use DW nsSFD
			(CHAN_CTRL_TX_PCOD_MASK
					& ((uint32_t) cfg->txCode << CHAN_CTRL_TX_PCOD_SHIFT)) | // TX Preamble Code
10043a78:	683b      	ldr	r3, [r7, #0]
10043a7a:	791b      	ldrb	r3, [r3, #4]
10043a7c:	0599      	lsls	r1, r3, #22
10043a7e:	23f8      	movs	r3, #248	@ 0xf8
10043a80:	04db      	lsls	r3, r3, #19
10043a82:	400b      	ands	r3, r1
			| // Use DW nsSFD
10043a84:	431a      	orrs	r2, r3
			(CHAN_CTRL_RX_PCOD_MASK
					& ((uint32_t) cfg->rxCode << CHAN_CTRL_RX_PCOD_SHIFT)); // RX Preamble Code
10043a86:	683b      	ldr	r3, [r7, #0]
10043a88:	795b      	ldrb	r3, [r3, #5]
10043a8a:	06db      	lsls	r3, r3, #27
					& ((uint32_t) cfg->txCode << CHAN_CTRL_TX_PCOD_SHIFT)) | // TX Preamble Code
10043a8c:	4313      	orrs	r3, r2
	uint32_t regval = (CHAN_CTRL_TX_CHAN_MASK
10043a8e:	617b      	str	r3, [r7, #20]

	DW1000_write_reg(dw1000, CHAN_CTRL_ID, 0x00, (void*) &regval, 4);
10043a90:	2314      	movs	r3, #20
10043a92:	18fb      	adds	r3, r7, r3
10043a94:	6878      	ldr	r0, [r7, #4]
10043a96:	2204      	movs	r2, #4
10043a98:	9200      	str	r2, [sp, #0]
10043a9a:	2200      	movs	r2, #0
10043a9c:	211f      	movs	r1, #31
10043a9e:	f7ff fd01 	bl	100434a4 <DW1000_write_reg>

	// Set up TX Preamble Size, PRF and Data Rate
	txFCTRL = ((uint32_t) (cfg->txPreambLength | cfg->prf)
10043aa2:	683b      	ldr	r3, [r7, #0]
10043aa4:	789a      	ldrb	r2, [r3, #2]
10043aa6:	683b      	ldr	r3, [r7, #0]
10043aa8:	785b      	ldrb	r3, [r3, #1]
10043aaa:	4313      	orrs	r3, r2
10043aac:	b2db      	uxtb	r3, r3
			<< TX_FCTRL_TXPRF_SHFT)
10043aae:	041a      	lsls	r2, r3, #16
			| ((uint32_t) cfg->dataRate << TX_FCTRL_TXBR_SHFT);
10043ab0:	683b      	ldr	r3, [r7, #0]
10043ab2:	79db      	ldrb	r3, [r3, #7]
10043ab4:	035b      	lsls	r3, r3, #13
10043ab6:	431a      	orrs	r2, r3
	txFCTRL = ((uint32_t) (cfg->txPreambLength | cfg->prf)
10043ab8:	4b53      	ldr	r3, [pc, #332]	@ (10043c08 <DW1000_config+0x3e4>)
10043aba:	601a      	str	r2, [r3, #0]

	DW1000_write_reg(dw1000, TX_FCTRL_ID, 0x00, (void*) &txFCTRL, 4);
10043abc:	4b52      	ldr	r3, [pc, #328]	@ (10043c08 <DW1000_config+0x3e4>)
10043abe:	6878      	ldr	r0, [r7, #4]
10043ac0:	2204      	movs	r2, #4
10043ac2:	9200      	str	r2, [sp, #0]
10043ac4:	2200      	movs	r2, #0
10043ac6:	2108      	movs	r1, #8
10043ac8:	f7ff fcec 	bl	100434a4 <DW1000_write_reg>

	// Request TX start and TRX off at the same time
	tmp = SYS_CTRL_TXSTRT | SYS_CTRL_TRXOFF;
10043acc:	2342      	movs	r3, #66	@ 0x42
10043ace:	623b      	str	r3, [r7, #32]
	DW1000_write_reg(dw1000, SYS_CTRL_ID, SYS_CTRL_OFFSET, (void*) &tmp, 1);
10043ad0:	2420      	movs	r4, #32
10043ad2:	193b      	adds	r3, r7, r4
10043ad4:	6878      	ldr	r0, [r7, #4]
10043ad6:	2201      	movs	r2, #1
10043ad8:	9200      	str	r2, [sp, #0]
10043ada:	2200      	movs	r2, #0
10043adc:	210d      	movs	r1, #13
10043ade:	f7ff fce1 	bl	100434a4 <DW1000_write_reg>

	// set rx antenna delay
	tmp = RX_ANT_DLY;
10043ae2:	4b4a      	ldr	r3, [pc, #296]	@ (10043c0c <DW1000_config+0x3e8>)
10043ae4:	623b      	str	r3, [r7, #32]
	DW1000_write_reg(dw1000, LDE_IF_ID, LDE_RXANTD_OFFSET, (void*) &tmp, 2);
10043ae6:	193b      	adds	r3, r7, r4
10043ae8:	4949      	ldr	r1, [pc, #292]	@ (10043c10 <DW1000_config+0x3ec>)
10043aea:	6878      	ldr	r0, [r7, #4]
10043aec:	2202      	movs	r2, #2
10043aee:	9200      	str	r2, [sp, #0]
10043af0:	000a      	movs	r2, r1
10043af2:	212e      	movs	r1, #46	@ 0x2e
10043af4:	f7ff fcd6 	bl	100434a4 <DW1000_write_reg>
	// set tx antenna delay
	tmp = TX_ANT_DLY;
10043af8:	4b44      	ldr	r3, [pc, #272]	@ (10043c0c <DW1000_config+0x3e8>)
10043afa:	623b      	str	r3, [r7, #32]
	DW1000_write_reg(dw1000, LDE_IF_ID, TX_ANTD_OFFSET, (void*) &tmp, 2);
10043afc:	193b      	adds	r3, r7, r4
10043afe:	6878      	ldr	r0, [r7, #4]
10043b00:	2202      	movs	r2, #2
10043b02:	9200      	str	r2, [sp, #0]
10043b04:	2200      	movs	r2, #0
10043b06:	212e      	movs	r1, #46	@ 0x2e
10043b08:	f7ff fccc 	bl	100434a4 <DW1000_write_reg>

	/* tx specific functions */
	if (dw1000->tx) {
10043b0c:	687b      	ldr	r3, [r7, #4]
10043b0e:	7c1b      	ldrb	r3, [r3, #16]
10043b10:	2201      	movs	r2, #1
10043b12:	4013      	ands	r3, r2
10043b14:	b2db      	uxtb	r3, r3
10043b16:	2b00      	cmp	r3, #0
10043b18:	d038      	beq.n	10043b8c <DW1000_config+0x368>
		// set rx after tx delay
		uint32_t val;
		DW1000_read_reg(dw1000, ACK_RESP_T_ID, 0x00, (void*) &val, 4); // Read ACK_RESP_T_ID register
10043b1a:	250c      	movs	r5, #12
10043b1c:	197b      	adds	r3, r7, r5
10043b1e:	6878      	ldr	r0, [r7, #4]
10043b20:	2204      	movs	r2, #4
10043b22:	9200      	str	r2, [sp, #0]
10043b24:	2200      	movs	r2, #0
10043b26:	211a      	movs	r1, #26
10043b28:	f7ff fc5a 	bl	100433e0 <DW1000_read_reg>
		val &= ~(ACK_RESP_T_W4R_TIM_MASK); // Clear the timer (19:0)
10043b2c:	68fb      	ldr	r3, [r7, #12]
10043b2e:	0d1b      	lsrs	r3, r3, #20
10043b30:	051b      	lsls	r3, r3, #20
10043b32:	60fb      	str	r3, [r7, #12]
		val |= (POLL_TX_TO_RESP_RX_DLY_UUS & ACK_RESP_T_W4R_TIM_MASK); // In UWB microseconds (e.g. turn the receiver on 20uus after TX)
10043b34:	68fb      	ldr	r3, [r7, #12]
10043b36:	2296      	movs	r2, #150	@ 0x96
10043b38:	0052      	lsls	r2, r2, #1
10043b3a:	4313      	orrs	r3, r2
10043b3c:	60fb      	str	r3, [r7, #12]
		DW1000_write_reg(dw1000, ACK_RESP_T_ID, 0x00, (void*) &val, 4);
10043b3e:	197b      	adds	r3, r7, r5
10043b40:	6878      	ldr	r0, [r7, #4]
10043b42:	2204      	movs	r2, #4
10043b44:	9200      	str	r2, [sp, #0]
10043b46:	2200      	movs	r2, #0
10043b48:	211a      	movs	r1, #26
10043b4a:	f7ff fcab 	bl	100434a4 <DW1000_write_reg>

		uint32_t time = RESP_RX_TIMEOUT_UUS;
10043b4e:	4b31      	ldr	r3, [pc, #196]	@ (10043c14 <DW1000_config+0x3f0>)
10043b50:	60bb      	str	r3, [r7, #8]
		// set tx timeout
		DW1000_write_reg(dw1000, RX_FWTO_ID, RX_FWTO_OFFSET, (void*) &time, 2);
10043b52:	2308      	movs	r3, #8
10043b54:	18fb      	adds	r3, r7, r3
10043b56:	6878      	ldr	r0, [r7, #4]
10043b58:	2202      	movs	r2, #2
10043b5a:	9200      	str	r2, [sp, #0]
10043b5c:	2200      	movs	r2, #0
10043b5e:	210c      	movs	r1, #12
10043b60:	f7ff fca0 	bl	100434a4 <DW1000_write_reg>
		DW1000_read_reg(dw1000, SYS_CFG_ID, 0x03, (void*) &tmp, 1); // Read at offset 3 to get the upper byte only
10043b64:	193b      	adds	r3, r7, r4
10043b66:	6878      	ldr	r0, [r7, #4]
10043b68:	2201      	movs	r2, #1
10043b6a:	9200      	str	r2, [sp, #0]
10043b6c:	2203      	movs	r2, #3
10043b6e:	2104      	movs	r1, #4
10043b70:	f7ff fc36 	bl	100433e0 <DW1000_read_reg>
		tmp |= (SYS_CFG_RXWTOE >> 24); // Shift RXWTOE mask as we read the upper byte only
10043b74:	6a3b      	ldr	r3, [r7, #32]
10043b76:	2210      	movs	r2, #16
10043b78:	4313      	orrs	r3, r2
10043b7a:	623b      	str	r3, [r7, #32]
		// OR in 32bit value (1 bit set), I know this is in high byte.

		DW1000_write_reg(dw1000, SYS_CFG_ID, 0x03, (void*) &tmp, 1); // Write at offset 3 to write the upper byte only
10043b7c:	193b      	adds	r3, r7, r4
10043b7e:	6878      	ldr	r0, [r7, #4]
10043b80:	2201      	movs	r2, #1
10043b82:	9200      	str	r2, [sp, #0]
10043b84:	2203      	movs	r2, #3
10043b86:	2104      	movs	r1, #4
10043b88:	f7ff fc8c 	bl	100434a4 <DW1000_write_reg>

	}
	/* end of tx specific functions */

	// set preamble timeout
	tmp = PRE_TIMEOUT;
10043b8c:	2320      	movs	r3, #32
10043b8e:	623b      	str	r3, [r7, #32]
	DW1000_write_reg(dw1000, DRX_CONF_ID, DRX_PRETOC_OFFSET, (void*) &tmp, 2);
10043b90:	2320      	movs	r3, #32
10043b92:	18fb      	adds	r3, r7, r3
10043b94:	6878      	ldr	r0, [r7, #4]
10043b96:	2202      	movs	r2, #2
10043b98:	9200      	str	r2, [sp, #0]
10043b9a:	2224      	movs	r2, #36	@ 0x24
10043b9c:	2127      	movs	r1, #39	@ 0x27
10043b9e:	f7ff fc81 	bl	100434a4 <DW1000_write_reg>

	uint32_t sys_status;
	DW1000_read_reg(dw1000, SYS_STATUS_ID, 0x00, (void*) &sys_status, 4); // Read at offset 3 to get the upper 2 bytes out of 5
10043ba2:	2310      	movs	r3, #16
10043ba4:	18fb      	adds	r3, r7, r3
10043ba6:	6878      	ldr	r0, [r7, #4]
10043ba8:	2204      	movs	r2, #4
10043baa:	9200      	str	r2, [sp, #0]
10043bac:	2200      	movs	r2, #0
10043bae:	210f      	movs	r1, #15
10043bb0:	f7ff fc16 	bl	100433e0 <DW1000_read_reg>
	if (sys_status & 0x2) {
10043bb4:	693b      	ldr	r3, [r7, #16]
10043bb6:	2202      	movs	r2, #2
10043bb8:	4013      	ands	r3, r2
10043bba:	d001      	beq.n	10043bc0 <DW1000_config+0x39c>
		return 1;
10043bbc:	2301      	movs	r3, #1
10043bbe:	e000      	b.n	10043bc2 <DW1000_config+0x39e>
	} else {
		return 0;
10043bc0:	2300      	movs	r3, #0
	}

}
10043bc2:	0018      	movs	r0, r3
10043bc4:	46bd      	mov	sp, r7
10043bc6:	b00b      	add	sp, #44	@ 0x2c
10043bc8:	bdf0      	pop	{r4, r5, r6, r7, pc}
10043bca:	46c0      	nop			@ (mov r8, r8)
10043bcc:	000028f4 	.word	0x000028f4
10043bd0:	ffbfffff 	.word	0xffbfffff
10043bd4:	fffcffff 	.word	0xfffcffff
10043bd8:	00002804 	.word	0x00002804
10043bdc:	00000806 	.word	0x00000806
10043be0:	20000650 	.word	0x20000650
10043be4:	00000607 	.word	0x00000607
10043be8:	00001806 	.word	0x00001806
10043bec:	00001607 	.word	0x00001607
10043bf0:	08400508 	.word	0x08400508
10043bf4:	00045ca0 	.word	0x00045ca0
10043bf8:	353b015e 	.word	0x353b015e
10043bfc:	00001041 	.word	0x00001041
10043c00:	2502a907 	.word	0x2502a907
10043c04:	0000889b 	.word	0x0000889b
10043c08:	20000480 	.word	0x20000480
10043c0c:	00004034 	.word	0x00004034
10043c10:	00001804 	.word	0x00001804
10043c14:	00001388 	.word	0x00001388

10043c18 <get_tx_timestamp_u64>:

static uint64_t get_tx_timestamp_u64(DW1000_t *dw1000) {
10043c18:	b5f0      	push	{r4, r5, r6, r7, lr}
10043c1a:	b08d      	sub	sp, #52	@ 0x34
10043c1c:	af02      	add	r7, sp, #8
10043c1e:	6178      	str	r0, [r7, #20]
	uint8_t ts_tab[5];
	uint64_t ts = 0;
10043c20:	2200      	movs	r2, #0
10043c22:	2300      	movs	r3, #0
10043c24:	623a      	str	r2, [r7, #32]
10043c26:	627b      	str	r3, [r7, #36]	@ 0x24
	int8_t i;
	DW1000_read_reg(dw1000, TX_TIME_ID, TX_TIME_TX_STAMP_OFFSET,
10043c28:	2308      	movs	r3, #8
10043c2a:	2610      	movs	r6, #16
10043c2c:	199b      	adds	r3, r3, r6
10043c2e:	19db      	adds	r3, r3, r7
10043c30:	6978      	ldr	r0, [r7, #20]
10043c32:	2205      	movs	r2, #5
10043c34:	9200      	str	r2, [sp, #0]
10043c36:	2200      	movs	r2, #0
10043c38:	2117      	movs	r1, #23
10043c3a:	f7ff fbd1 	bl	100433e0 <DW1000_read_reg>
			(void*) &ts_tab, TX_TIME_TX_STAMP_LEN);
	for (i = 4; i >= 0; i--) {
10043c3e:	230f      	movs	r3, #15
10043c40:	199b      	adds	r3, r3, r6
10043c42:	19db      	adds	r3, r3, r7
10043c44:	2204      	movs	r2, #4
10043c46:	701a      	strb	r2, [r3, #0]
10043c48:	e02d      	b.n	10043ca6 <get_tx_timestamp_u64+0x8e>
		ts <<= 8;
10043c4a:	6a3b      	ldr	r3, [r7, #32]
10043c4c:	0e1b      	lsrs	r3, r3, #24
10043c4e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
10043c50:	0215      	lsls	r5, r2, #8
10043c52:	431d      	orrs	r5, r3
10043c54:	6a3b      	ldr	r3, [r7, #32]
10043c56:	021c      	lsls	r4, r3, #8
10043c58:	623c      	str	r4, [r7, #32]
10043c5a:	627d      	str	r5, [r7, #36]	@ 0x24
		ts |= ts_tab[i];
10043c5c:	200f      	movs	r0, #15
10043c5e:	2110      	movs	r1, #16
10043c60:	1843      	adds	r3, r0, r1
10043c62:	19db      	adds	r3, r3, r7
10043c64:	781b      	ldrb	r3, [r3, #0]
10043c66:	b25b      	sxtb	r3, r3
10043c68:	2208      	movs	r2, #8
10043c6a:	1852      	adds	r2, r2, r1
10043c6c:	19d2      	adds	r2, r2, r7
10043c6e:	5cd3      	ldrb	r3, [r2, r3]
10043c70:	60bb      	str	r3, [r7, #8]
10043c72:	2300      	movs	r3, #0
10043c74:	60fb      	str	r3, [r7, #12]
10043c76:	6a3b      	ldr	r3, [r7, #32]
10043c78:	68b9      	ldr	r1, [r7, #8]
10043c7a:	68fa      	ldr	r2, [r7, #12]
10043c7c:	000e      	movs	r6, r1
10043c7e:	431e      	orrs	r6, r3
10043c80:	603e      	str	r6, [r7, #0]
10043c82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10043c84:	431a      	orrs	r2, r3
10043c86:	607a      	str	r2, [r7, #4]
10043c88:	683a      	ldr	r2, [r7, #0]
10043c8a:	687b      	ldr	r3, [r7, #4]
10043c8c:	623a      	str	r2, [r7, #32]
10043c8e:	627b      	str	r3, [r7, #36]	@ 0x24
	for (i = 4; i >= 0; i--) {
10043c90:	2110      	movs	r1, #16
10043c92:	1843      	adds	r3, r0, r1
10043c94:	19db      	adds	r3, r3, r7
10043c96:	781b      	ldrb	r3, [r3, #0]
10043c98:	b25b      	sxtb	r3, r3
10043c9a:	b2db      	uxtb	r3, r3
10043c9c:	3b01      	subs	r3, #1
10043c9e:	b2da      	uxtb	r2, r3
10043ca0:	1843      	adds	r3, r0, r1
10043ca2:	19db      	adds	r3, r3, r7
10043ca4:	701a      	strb	r2, [r3, #0]
10043ca6:	230f      	movs	r3, #15
10043ca8:	2210      	movs	r2, #16
10043caa:	189b      	adds	r3, r3, r2
10043cac:	19db      	adds	r3, r3, r7
10043cae:	781b      	ldrb	r3, [r3, #0]
10043cb0:	2b7f      	cmp	r3, #127	@ 0x7f
10043cb2:	d9ca      	bls.n	10043c4a <get_tx_timestamp_u64+0x32>
	}
	return ts;
10043cb4:	6a3a      	ldr	r2, [r7, #32]
10043cb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
10043cb8:	0010      	movs	r0, r2
10043cba:	0019      	movs	r1, r3
10043cbc:	46bd      	mov	sp, r7
10043cbe:	b00b      	add	sp, #44	@ 0x2c
10043cc0:	bdf0      	pop	{r4, r5, r6, r7, pc}

10043cc2 <get_rx_timestamp_u64>:

static uint64_t get_rx_timestamp_u64(DW1000_t *dw1000) {
10043cc2:	b5f0      	push	{r4, r5, r6, r7, lr}
10043cc4:	b08d      	sub	sp, #52	@ 0x34
10043cc6:	af02      	add	r7, sp, #8
10043cc8:	6178      	str	r0, [r7, #20]
	uint8_t ts_tab[5];
	uint64_t ts = 0;
10043cca:	2200      	movs	r2, #0
10043ccc:	2300      	movs	r3, #0
10043cce:	623a      	str	r2, [r7, #32]
10043cd0:	627b      	str	r3, [r7, #36]	@ 0x24
	int8_t i;
	DW1000_read_reg(dw1000, RX_TIME_ID, RX_TIME_RX_STAMP_OFFSET,
10043cd2:	2308      	movs	r3, #8
10043cd4:	2610      	movs	r6, #16
10043cd6:	199b      	adds	r3, r3, r6
10043cd8:	19db      	adds	r3, r3, r7
10043cda:	6978      	ldr	r0, [r7, #20]
10043cdc:	2205      	movs	r2, #5
10043cde:	9200      	str	r2, [sp, #0]
10043ce0:	2200      	movs	r2, #0
10043ce2:	2115      	movs	r1, #21
10043ce4:	f7ff fb7c 	bl	100433e0 <DW1000_read_reg>
			(void*) &ts_tab, RX_TIME_RX_STAMP_LEN);
	for (i = 4; i >= 0; i--) {
10043ce8:	230f      	movs	r3, #15
10043cea:	199b      	adds	r3, r3, r6
10043cec:	19db      	adds	r3, r3, r7
10043cee:	2204      	movs	r2, #4
10043cf0:	701a      	strb	r2, [r3, #0]
10043cf2:	e02d      	b.n	10043d50 <get_rx_timestamp_u64+0x8e>
		ts <<= 8;
10043cf4:	6a3b      	ldr	r3, [r7, #32]
10043cf6:	0e1b      	lsrs	r3, r3, #24
10043cf8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
10043cfa:	0215      	lsls	r5, r2, #8
10043cfc:	431d      	orrs	r5, r3
10043cfe:	6a3b      	ldr	r3, [r7, #32]
10043d00:	021c      	lsls	r4, r3, #8
10043d02:	623c      	str	r4, [r7, #32]
10043d04:	627d      	str	r5, [r7, #36]	@ 0x24
		ts |= ts_tab[i];
10043d06:	200f      	movs	r0, #15
10043d08:	2110      	movs	r1, #16
10043d0a:	1843      	adds	r3, r0, r1
10043d0c:	19db      	adds	r3, r3, r7
10043d0e:	781b      	ldrb	r3, [r3, #0]
10043d10:	b25b      	sxtb	r3, r3
10043d12:	2208      	movs	r2, #8
10043d14:	1852      	adds	r2, r2, r1
10043d16:	19d2      	adds	r2, r2, r7
10043d18:	5cd3      	ldrb	r3, [r2, r3]
10043d1a:	60bb      	str	r3, [r7, #8]
10043d1c:	2300      	movs	r3, #0
10043d1e:	60fb      	str	r3, [r7, #12]
10043d20:	6a3b      	ldr	r3, [r7, #32]
10043d22:	68b9      	ldr	r1, [r7, #8]
10043d24:	68fa      	ldr	r2, [r7, #12]
10043d26:	000e      	movs	r6, r1
10043d28:	431e      	orrs	r6, r3
10043d2a:	603e      	str	r6, [r7, #0]
10043d2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10043d2e:	431a      	orrs	r2, r3
10043d30:	607a      	str	r2, [r7, #4]
10043d32:	683a      	ldr	r2, [r7, #0]
10043d34:	687b      	ldr	r3, [r7, #4]
10043d36:	623a      	str	r2, [r7, #32]
10043d38:	627b      	str	r3, [r7, #36]	@ 0x24
	for (i = 4; i >= 0; i--) {
10043d3a:	2110      	movs	r1, #16
10043d3c:	1843      	adds	r3, r0, r1
10043d3e:	19db      	adds	r3, r3, r7
10043d40:	781b      	ldrb	r3, [r3, #0]
10043d42:	b25b      	sxtb	r3, r3
10043d44:	b2db      	uxtb	r3, r3
10043d46:	3b01      	subs	r3, #1
10043d48:	b2da      	uxtb	r2, r3
10043d4a:	1843      	adds	r3, r0, r1
10043d4c:	19db      	adds	r3, r3, r7
10043d4e:	701a      	strb	r2, [r3, #0]
10043d50:	230f      	movs	r3, #15
10043d52:	2210      	movs	r2, #16
10043d54:	189b      	adds	r3, r3, r2
10043d56:	19db      	adds	r3, r3, r7
10043d58:	781b      	ldrb	r3, [r3, #0]
10043d5a:	2b7f      	cmp	r3, #127	@ 0x7f
10043d5c:	d9ca      	bls.n	10043cf4 <get_rx_timestamp_u64+0x32>
	}
	return ts;
10043d5e:	6a3a      	ldr	r2, [r7, #32]
10043d60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
10043d62:	0010      	movs	r0, r2
10043d64:	0019      	movs	r1, r3
10043d66:	46bd      	mov	sp, r7
10043d68:	b00b      	add	sp, #44	@ 0x2c
10043d6a:	bdf0      	pop	{r4, r5, r6, r7, pc}

10043d6c <final_msg_get_ts>:
		ts_field[i] = (uint8_t) ts;
		ts >>= 8;
	}
}

static void final_msg_get_ts(const uint8_t *ts_field, uint32_t *ts) {
10043d6c:	b580      	push	{r7, lr}
10043d6e:	b084      	sub	sp, #16
10043d70:	af00      	add	r7, sp, #0
10043d72:	6078      	str	r0, [r7, #4]
10043d74:	6039      	str	r1, [r7, #0]
	int8_t i;
	*ts = 0;
10043d76:	683b      	ldr	r3, [r7, #0]
10043d78:	2200      	movs	r2, #0
10043d7a:	601a      	str	r2, [r3, #0]
	for (i = 0; i < FINAL_MSG_TS_LEN; i++) {
10043d7c:	230f      	movs	r3, #15
10043d7e:	18fb      	adds	r3, r7, r3
10043d80:	2200      	movs	r2, #0
10043d82:	701a      	strb	r2, [r3, #0]
10043d84:	e01a      	b.n	10043dbc <final_msg_get_ts+0x50>
		*ts += ts_field[i] << (i * 8);
10043d86:	683b      	ldr	r3, [r7, #0]
10043d88:	681b      	ldr	r3, [r3, #0]
10043d8a:	200f      	movs	r0, #15
10043d8c:	183a      	adds	r2, r7, r0
10043d8e:	7812      	ldrb	r2, [r2, #0]
10043d90:	b252      	sxtb	r2, r2
10043d92:	6879      	ldr	r1, [r7, #4]
10043d94:	188a      	adds	r2, r1, r2
10043d96:	7812      	ldrb	r2, [r2, #0]
10043d98:	0011      	movs	r1, r2
10043d9a:	183a      	adds	r2, r7, r0
10043d9c:	7812      	ldrb	r2, [r2, #0]
10043d9e:	b252      	sxtb	r2, r2
10043da0:	00d2      	lsls	r2, r2, #3
10043da2:	4091      	lsls	r1, r2
10043da4:	000a      	movs	r2, r1
10043da6:	189a      	adds	r2, r3, r2
10043da8:	683b      	ldr	r3, [r7, #0]
10043daa:	601a      	str	r2, [r3, #0]
	for (i = 0; i < FINAL_MSG_TS_LEN; i++) {
10043dac:	183b      	adds	r3, r7, r0
10043dae:	781b      	ldrb	r3, [r3, #0]
10043db0:	b25b      	sxtb	r3, r3
10043db2:	b2db      	uxtb	r3, r3
10043db4:	3301      	adds	r3, #1
10043db6:	b2da      	uxtb	r2, r3
10043db8:	183b      	adds	r3, r7, r0
10043dba:	701a      	strb	r2, [r3, #0]
10043dbc:	230f      	movs	r3, #15
10043dbe:	18fb      	adds	r3, r7, r3
10043dc0:	781b      	ldrb	r3, [r3, #0]
10043dc2:	b25b      	sxtb	r3, r3
10043dc4:	2b03      	cmp	r3, #3
10043dc6:	ddde      	ble.n	10043d86 <final_msg_get_ts+0x1a>
	}
}
10043dc8:	46c0      	nop			@ (mov r8, r8)
10043dca:	46c0      	nop			@ (mov r8, r8)
10043dcc:	46bd      	mov	sp, r7
10043dce:	b004      	add	sp, #16
10043dd0:	bd80      	pop	{r7, pc}
	...

10043dd4 <DW1000_responder>:
				(void*) &tmp, 1);
	}

}

double DW1000_responder(DW1000_t *dw1000, uint8_t channel) {
10043dd4:	b5f0      	push	{r4, r5, r6, r7, lr}
10043dd6:	b09b      	sub	sp, #108	@ 0x6c
10043dd8:	af02      	add	r7, sp, #8
10043dda:	6078      	str	r0, [r7, #4]
10043ddc:	000a      	movs	r2, r1
10043dde:	1cfb      	adds	r3, r7, #3
10043de0:	701a      	strb	r2, [r3, #0]

	/* Clear reception timeout to start next ranging process. */
	uint32_t tmp;

	DW1000_read_reg(dw1000, SYS_CFG_ID, 3, (void*) &tmp, 1); // Read at offset 3 to get the upper byte only
10043de2:	2624      	movs	r6, #36	@ 0x24
10043de4:	19bb      	adds	r3, r7, r6
10043de6:	6878      	ldr	r0, [r7, #4]
10043de8:	2201      	movs	r2, #1
10043dea:	9200      	str	r2, [sp, #0]
10043dec:	2203      	movs	r2, #3
10043dee:	2104      	movs	r1, #4
10043df0:	f7ff faf6 	bl	100433e0 <DW1000_read_reg>
	tmp &= ~(SYS_CFG_RXWTOE >> 24); // Shift RXWTOE mask as we read the upper byte only
10043df4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10043df6:	2210      	movs	r2, #16
10043df8:	4393      	bics	r3, r2
10043dfa:	627b      	str	r3, [r7, #36]	@ 0x24
	DW1000_write_reg(dw1000, SYS_CFG_ID, 3, (void*) &tmp, 1);
10043dfc:	19bb      	adds	r3, r7, r6
10043dfe:	6878      	ldr	r0, [r7, #4]
10043e00:	2201      	movs	r2, #1
10043e02:	9200      	str	r2, [sp, #0]
10043e04:	2203      	movs	r2, #3
10043e06:	2104      	movs	r1, #4
10043e08:	f7ff fb4c 	bl	100434a4 <DW1000_write_reg>

	/* Activate reception immediately. */
	DW1000_read_reg(dw1000, SYS_STATUS_ID, 3, (void*) &tmp, 1); // Read 1 byte at offset 3 to get the 4th byte out of 5
10043e0c:	19bb      	adds	r3, r7, r6
10043e0e:	6878      	ldr	r0, [r7, #4]
10043e10:	2201      	movs	r2, #1
10043e12:	9200      	str	r2, [sp, #0]
10043e14:	2203      	movs	r2, #3
10043e16:	210f      	movs	r1, #15
10043e18:	f7ff fae2 	bl	100433e0 <DW1000_read_reg>

	if ((tmp & (SYS_STATUS_ICRBP >> 24)) !=   // IC side Receive Buffer Pointer
			((tmp & (SYS_STATUS_HSRBP >> 24)) << 1)) // Host Side Receive Buffer Pointer
10043e1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10043e1e:	005a      	lsls	r2, r3, #1
	if ((tmp & (SYS_STATUS_ICRBP >> 24)) !=   // IC side Receive Buffer Pointer
10043e20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10043e22:	4053      	eors	r3, r2
10043e24:	2280      	movs	r2, #128	@ 0x80
10043e26:	4013      	ands	r3, r2
10043e28:	d009      	beq.n	10043e3e <DW1000_responder+0x6a>
			{
		tmp = 0x01;
10043e2a:	2301      	movs	r3, #1
10043e2c:	627b      	str	r3, [r7, #36]	@ 0x24
		DW1000_write_reg(dw1000, SYS_CTRL_ID, SYS_CTRL_HRBT_OFFSET,
10043e2e:	19bb      	adds	r3, r7, r6
10043e30:	6878      	ldr	r0, [r7, #4]
10043e32:	2201      	movs	r2, #1
10043e34:	9200      	str	r2, [sp, #0]
10043e36:	2203      	movs	r2, #3
10043e38:	210d      	movs	r1, #13
10043e3a:	f7ff fb33 	bl	100434a4 <DW1000_write_reg>
				(void*) &tmp, 1); // We need to swap RX buffer status reg (write one to toggle internally)
	}

	tmp = SYS_CTRL_RXENAB;
10043e3e:	2380      	movs	r3, #128	@ 0x80
10043e40:	005b      	lsls	r3, r3, #1
10043e42:	627b      	str	r3, [r7, #36]	@ 0x24
	DW1000_write_reg(dw1000, SYS_CTRL_ID, SYS_CTRL_OFFSET, (void*) &tmp, 2);
10043e44:	2324      	movs	r3, #36	@ 0x24
10043e46:	18fb      	adds	r3, r7, r3
10043e48:	6878      	ldr	r0, [r7, #4]
10043e4a:	2202      	movs	r2, #2
10043e4c:	9200      	str	r2, [sp, #0]
10043e4e:	2200      	movs	r2, #0
10043e50:	210d      	movs	r1, #13
10043e52:	f7ff fb27 	bl	100434a4 <DW1000_write_reg>

	/* Poll for reception of a frame or error/timeout. See NOTE 8 below. */
	do {
		DW1000_read_reg(dw1000, SYS_STATUS_ID, 0x0, (void*) &status_reg, 4);
10043e56:	4b75      	ldr	r3, [pc, #468]	@ (1004402c <DW1000_responder+0x258>)
10043e58:	6878      	ldr	r0, [r7, #4]
10043e5a:	2204      	movs	r2, #4
10043e5c:	9200      	str	r2, [sp, #0]
10043e5e:	2200      	movs	r2, #0
10043e60:	210f      	movs	r1, #15
10043e62:	f7ff fabd 	bl	100433e0 <DW1000_read_reg>
	} while (!(status_reg
			& (SYS_STATUS_RXFCG | SYS_STATUS_ALL_RX_TO | SYS_STATUS_ALL_RX_ERR)));
10043e66:	4b71      	ldr	r3, [pc, #452]	@ (1004402c <DW1000_responder+0x258>)
10043e68:	681b      	ldr	r3, [r3, #0]
10043e6a:	4a71      	ldr	r2, [pc, #452]	@ (10044030 <DW1000_responder+0x25c>)
10043e6c:	4013      	ands	r3, r2
	} while (!(status_reg
10043e6e:	d0f2      	beq.n	10043e56 <DW1000_responder+0x82>

	if (status_reg & SYS_STATUS_RXFCG) {
10043e70:	4b6e      	ldr	r3, [pc, #440]	@ (1004402c <DW1000_responder+0x258>)
10043e72:	681a      	ldr	r2, [r3, #0]
10043e74:	2380      	movs	r3, #128	@ 0x80
10043e76:	01db      	lsls	r3, r3, #7
10043e78:	4013      	ands	r3, r2
10043e7a:	d100      	bne.n	10043e7e <DW1000_responder+0xaa>
10043e7c:	e22b      	b.n	100442d6 <DW1000_responder+0x502>

		uint32_t frame_len;

		/* Clear good RX frame event in the DW1000 status register. */
		tmp = SYS_STATUS_RXFCG;
10043e7e:	2380      	movs	r3, #128	@ 0x80
10043e80:	01db      	lsls	r3, r3, #7
10043e82:	627b      	str	r3, [r7, #36]	@ 0x24
		DW1000_write_reg(dw1000, SYS_STATUS_ID, 0x00, (void*) &tmp, 4);
10043e84:	2324      	movs	r3, #36	@ 0x24
10043e86:	18fb      	adds	r3, r7, r3
10043e88:	6878      	ldr	r0, [r7, #4]
10043e8a:	2204      	movs	r2, #4
10043e8c:	9200      	str	r2, [sp, #0]
10043e8e:	2200      	movs	r2, #0
10043e90:	210f      	movs	r1, #15
10043e92:	f7ff fb07 	bl	100434a4 <DW1000_write_reg>
		memset(rx_buffer, 0, sizeof(rx_buffer));
10043e96:	4b67      	ldr	r3, [pc, #412]	@ (10044034 <DW1000_responder+0x260>)
10043e98:	2219      	movs	r2, #25
10043e9a:	2100      	movs	r1, #0
10043e9c:	0018      	movs	r0, r3
10043e9e:	f005 fa5d 	bl	1004935c <memset>
		/* A frame has been received, read it into the local buffer. */
		DW1000_read_reg(dw1000, RX_FINFO_ID, 0x00, (void*) &frame_len, 4);
10043ea2:	2320      	movs	r3, #32
10043ea4:	18fb      	adds	r3, r7, r3
10043ea6:	6878      	ldr	r0, [r7, #4]
10043ea8:	2204      	movs	r2, #4
10043eaa:	9200      	str	r2, [sp, #0]
10043eac:	2200      	movs	r2, #0
10043eae:	2110      	movs	r1, #16
10043eb0:	f7ff fa96 	bl	100433e0 <DW1000_read_reg>
		frame_len &= RX_FINFO_RXFL_MASK_1023;
10043eb4:	6a3b      	ldr	r3, [r7, #32]
10043eb6:	059b      	lsls	r3, r3, #22
10043eb8:	0d9b      	lsrs	r3, r3, #22
10043eba:	623b      	str	r3, [r7, #32]
		if (frame_len <= RX_BUF_LEN) {
10043ebc:	6a3b      	ldr	r3, [r7, #32]
10043ebe:	2b19      	cmp	r3, #25
10043ec0:	d808      	bhi.n	10043ed4 <DW1000_responder+0x100>
			DW1000_read_reg(dw1000, RX_BUFFER_ID, 0x00, (void*) &rx_buffer,
10043ec2:	6a3b      	ldr	r3, [r7, #32]
10043ec4:	4a5b      	ldr	r2, [pc, #364]	@ (10044034 <DW1000_responder+0x260>)
10043ec6:	6878      	ldr	r0, [r7, #4]
10043ec8:	9300      	str	r3, [sp, #0]
10043eca:	0013      	movs	r3, r2
10043ecc:	2200      	movs	r2, #0
10043ece:	2111      	movs	r1, #17
10043ed0:	f7ff fa86 	bl	100433e0 <DW1000_read_reg>
					frame_len);
		}

		rx_buffer[ALL_MSG_SN_IDX] = 0;
10043ed4:	4b57      	ldr	r3, [pc, #348]	@ (10044034 <DW1000_responder+0x260>)
10043ed6:	2200      	movs	r2, #0
10043ed8:	709a      	strb	r2, [r3, #2]

		if (memcmp(rx_buffer, rx_poll_msg, ALL_MSG_COMMON_LEN) == 0
10043eda:	4957      	ldr	r1, [pc, #348]	@ (10044038 <DW1000_responder+0x264>)
10043edc:	4b55      	ldr	r3, [pc, #340]	@ (10044034 <DW1000_responder+0x260>)
10043ede:	220a      	movs	r2, #10
10043ee0:	0018      	movs	r0, r3
10043ee2:	f005 fa2d 	bl	10049340 <memcmp>
10043ee6:	1e03      	subs	r3, r0, #0
10043ee8:	d000      	beq.n	10043eec <DW1000_responder+0x118>
10043eea:	e214      	b.n	10044316 <DW1000_responder+0x542>
				&& rx_buffer[10] == channel) {
10043eec:	4b51      	ldr	r3, [pc, #324]	@ (10044034 <DW1000_responder+0x260>)
10043eee:	7a9b      	ldrb	r3, [r3, #10]
10043ef0:	1cfa      	adds	r2, r7, #3
10043ef2:	7812      	ldrb	r2, [r2, #0]
10043ef4:	429a      	cmp	r2, r3
10043ef6:	d000      	beq.n	10043efa <DW1000_responder+0x126>
10043ef8:	e20d      	b.n	10044316 <DW1000_responder+0x542>
			uint32_t resp_tx_time;

			/* Retrieve poll reception timestamp. */
			poll_rx_ts = get_rx_timestamp_u64(dw1000);
10043efa:	687b      	ldr	r3, [r7, #4]
10043efc:	0018      	movs	r0, r3
10043efe:	f7ff fee0 	bl	10043cc2 <get_rx_timestamp_u64>
10043f02:	0002      	movs	r2, r0
10043f04:	000b      	movs	r3, r1
10043f06:	494d      	ldr	r1, [pc, #308]	@ (1004403c <DW1000_responder+0x268>)
10043f08:	600a      	str	r2, [r1, #0]
10043f0a:	604b      	str	r3, [r1, #4]

			// set rx after tx delay
			DW1000_read_reg(dw1000, ACK_RESP_T_ID, 0x00, (void*) &tmp, 4); // Read ACK_RESP_T_ID register
10043f0c:	2624      	movs	r6, #36	@ 0x24
10043f0e:	19bb      	adds	r3, r7, r6
10043f10:	6878      	ldr	r0, [r7, #4]
10043f12:	2204      	movs	r2, #4
10043f14:	9200      	str	r2, [sp, #0]
10043f16:	2200      	movs	r2, #0
10043f18:	211a      	movs	r1, #26
10043f1a:	f7ff fa61 	bl	100433e0 <DW1000_read_reg>
			tmp &= ~(ACK_RESP_T_W4R_TIM_MASK); // Clear the timer (19:0)
10043f1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10043f20:	0d1b      	lsrs	r3, r3, #20
10043f22:	051b      	lsls	r3, r3, #20
10043f24:	627b      	str	r3, [r7, #36]	@ 0x24
			tmp |= (RESP_TX_TO_FINAL_RX_DLY_UUS & ACK_RESP_T_W4R_TIM_MASK); // In UWB microseconds (e.g. turn the receiver on 20uus after TX)
10043f26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10043f28:	22fa      	movs	r2, #250	@ 0xfa
10043f2a:	0052      	lsls	r2, r2, #1
10043f2c:	4313      	orrs	r3, r2
10043f2e:	627b      	str	r3, [r7, #36]	@ 0x24
			DW1000_write_reg(dw1000, ACK_RESP_T_ID, 0x00, (void*) &tmp, 4);
10043f30:	19bb      	adds	r3, r7, r6
10043f32:	6878      	ldr	r0, [r7, #4]
10043f34:	2204      	movs	r2, #4
10043f36:	9200      	str	r2, [sp, #0]
10043f38:	2200      	movs	r2, #0
10043f3a:	211a      	movs	r1, #26
10043f3c:	f7ff fab2 	bl	100434a4 <DW1000_write_reg>

			// set rx timeout
			tmp = 0;
10043f40:	2300      	movs	r3, #0
10043f42:	627b      	str	r3, [r7, #36]	@ 0x24
			DW1000_read_reg(dw1000, SYS_CFG_ID, 0x03, (void*) &tmp, 1); // Read at offset 3 to get the upper byte only
10043f44:	19bb      	adds	r3, r7, r6
10043f46:	6878      	ldr	r0, [r7, #4]
10043f48:	2201      	movs	r2, #1
10043f4a:	9200      	str	r2, [sp, #0]
10043f4c:	2203      	movs	r2, #3
10043f4e:	2104      	movs	r1, #4
10043f50:	f7ff fa46 	bl	100433e0 <DW1000_read_reg>

			uint32_t time = FINAL_RX_TIMEOUT_UUS;
10043f54:	4b3a      	ldr	r3, [pc, #232]	@ (10044040 <DW1000_responder+0x26c>)
10043f56:	61bb      	str	r3, [r7, #24]
			DW1000_write_reg(dw1000, RX_FWTO_ID, RX_FWTO_OFFSET, (void*) &time,
10043f58:	2318      	movs	r3, #24
10043f5a:	18fb      	adds	r3, r7, r3
10043f5c:	6878      	ldr	r0, [r7, #4]
10043f5e:	2202      	movs	r2, #2
10043f60:	9200      	str	r2, [sp, #0]
10043f62:	2200      	movs	r2, #0
10043f64:	210c      	movs	r1, #12
10043f66:	f7ff fa9d 	bl	100434a4 <DW1000_write_reg>
					2);
			tmp |= (SYS_CFG_RXWTOE >> 24); // Shift RXWTOE mask as we read the upper byte only
10043f6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10043f6c:	2210      	movs	r2, #16
10043f6e:	4313      	orrs	r3, r2
10043f70:	627b      	str	r3, [r7, #36]	@ 0x24
			// OR in 32bit value (1 bit set), I know this is in high byte.
			DW1000_write_reg(dw1000, SYS_CFG_ID, 0x03, (void*) &tmp, 1); // Write at offset 3 to write the upper byte only
10043f72:	19bb      	adds	r3, r7, r6
10043f74:	6878      	ldr	r0, [r7, #4]
10043f76:	2201      	movs	r2, #1
10043f78:	9200      	str	r2, [sp, #0]
10043f7a:	2203      	movs	r2, #3
10043f7c:	2104      	movs	r1, #4
10043f7e:	f7ff fa91 	bl	100434a4 <DW1000_write_reg>

			tx_resp_msg[ALL_MSG_SN_IDX] = frame_seq_nb;
10043f82:	4b30      	ldr	r3, [pc, #192]	@ (10044044 <DW1000_responder+0x270>)
10043f84:	781a      	ldrb	r2, [r3, #0]
10043f86:	4b30      	ldr	r3, [pc, #192]	@ (10044048 <DW1000_responder+0x274>)
10043f88:	709a      	strb	r2, [r3, #2]
			tx_resp_msg[13] = channel;
10043f8a:	4b2f      	ldr	r3, [pc, #188]	@ (10044048 <DW1000_responder+0x274>)
10043f8c:	1cfa      	adds	r2, r7, #3
10043f8e:	7812      	ldrb	r2, [r2, #0]
10043f90:	735a      	strb	r2, [r3, #13]
			DW1000_write_reg(dw1000, TX_BUFFER_ID, 0, tx_resp_msg,
10043f92:	4b2d      	ldr	r3, [pc, #180]	@ (10044048 <DW1000_responder+0x274>)
10043f94:	6878      	ldr	r0, [r7, #4]
10043f96:	220e      	movs	r2, #14
10043f98:	9200      	str	r2, [sp, #0]
10043f9a:	2200      	movs	r2, #0
10043f9c:	2109      	movs	r1, #9
10043f9e:	f7ff fa81 	bl	100434a4 <DW1000_write_reg>
					sizeof(tx_resp_msg) - 2);

			tmp = txFCTRL | sizeof(tx_resp_msg)
					| ((uint32_t) 0x0U << TX_FCTRL_TXBOFFS_SHFT)
					| ((uint32_t) 0x1U << TX_FCTRL_TR_SHFT);
10043fa2:	4b2a      	ldr	r3, [pc, #168]	@ (1004404c <DW1000_responder+0x278>)
10043fa4:	681b      	ldr	r3, [r3, #0]
10043fa6:	4a2a      	ldr	r2, [pc, #168]	@ (10044050 <DW1000_responder+0x27c>)
10043fa8:	4313      	orrs	r3, r2
			tmp = txFCTRL | sizeof(tx_resp_msg)
10043faa:	627b      	str	r3, [r7, #36]	@ 0x24
			DW1000_write_reg(dw1000, TX_FCTRL_ID, 0x00, (void*) &tmp, 4);
10043fac:	19bb      	adds	r3, r7, r6
10043fae:	6878      	ldr	r0, [r7, #4]
10043fb0:	2204      	movs	r2, #4
10043fb2:	9200      	str	r2, [sp, #0]
10043fb4:	2200      	movs	r2, #0
10043fb6:	2108      	movs	r1, #8
10043fb8:	f7ff fa74 	bl	100434a4 <DW1000_write_reg>

			/* Set send time for response. See NOTE 9 below. */
			resp_tx_time = (poll_rx_ts
					+ (POLL_RX_TO_RESP_TX_DLY_UUS * UUS_TO_DWT_TIME)) >> 8;
10043fbc:	4b1f      	ldr	r3, [pc, #124]	@ (1004403c <DW1000_responder+0x268>)
10043fbe:	681a      	ldr	r2, [r3, #0]
10043fc0:	685b      	ldr	r3, [r3, #4]
10043fc2:	4824      	ldr	r0, [pc, #144]	@ (10044054 <DW1000_responder+0x280>)
10043fc4:	2100      	movs	r1, #0
10043fc6:	1812      	adds	r2, r2, r0
10043fc8:	414b      	adcs	r3, r1
10043fca:	0619      	lsls	r1, r3, #24
10043fcc:	0a14      	lsrs	r4, r2, #8
10043fce:	430c      	orrs	r4, r1
10043fd0:	0a1d      	lsrs	r5, r3, #8
			resp_tx_time = (poll_rx_ts
10043fd2:	0023      	movs	r3, r4
10043fd4:	61fb      	str	r3, [r7, #28]
			DW1000_write_reg(dw1000, DX_TIME_ID, 0x01, (void*) &resp_tx_time,
10043fd6:	231c      	movs	r3, #28
10043fd8:	18fb      	adds	r3, r7, r3
10043fda:	6878      	ldr	r0, [r7, #4]
10043fdc:	2204      	movs	r2, #4
10043fde:	9200      	str	r2, [sp, #0]
10043fe0:	2201      	movs	r2, #1
10043fe2:	210a      	movs	r1, #10
10043fe4:	f7ff fa5e 	bl	100434a4 <DW1000_write_reg>
					4);

			// start TX
			tmp = SYS_CTRL_WAIT4RESP | SYS_CTRL_TXDLYS | SYS_CTRL_TXSTRT;
10043fe8:	2386      	movs	r3, #134	@ 0x86
10043fea:	627b      	str	r3, [r7, #36]	@ 0x24
			DW1000_write_reg(dw1000, SYS_CTRL_ID, SYS_CTRL_OFFSET, (void*) &tmp,
10043fec:	19bb      	adds	r3, r7, r6
10043fee:	6878      	ldr	r0, [r7, #4]
10043ff0:	2201      	movs	r2, #1
10043ff2:	9200      	str	r2, [sp, #0]
10043ff4:	2200      	movs	r2, #0
10043ff6:	210d      	movs	r1, #13
10043ff8:	f7ff fa54 	bl	100434a4 <DW1000_write_reg>
					1);

			DW1000_read_reg(dw1000, SYS_STATUS_ID, 0x03, (void*) &tmp, 2); // Read at offset 3 to get the upper 2 bytes out of 5
10043ffc:	19bb      	adds	r3, r7, r6
10043ffe:	6878      	ldr	r0, [r7, #4]
10044000:	2202      	movs	r2, #2
10044002:	9200      	str	r2, [sp, #0]
10044004:	2203      	movs	r2, #3
10044006:	210f      	movs	r1, #15
10044008:	f7ff f9ea 	bl	100433e0 <DW1000_read_reg>

			if (tmp & SYS_STATUS_TXERR) {
1004400c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
1004400e:	2381      	movs	r3, #129	@ 0x81
10044010:	00db      	lsls	r3, r3, #3
10044012:	4013      	ands	r3, r2
10044014:	d020      	beq.n	10044058 <DW1000_responder+0x284>
				tmp = SYS_CTRL_TRXOFF;
10044016:	2340      	movs	r3, #64	@ 0x40
10044018:	627b      	str	r3, [r7, #36]	@ 0x24
				DW1000_write_reg(dw1000, SYS_CTRL_ID, SYS_CTRL_OFFSET,
1004401a:	19bb      	adds	r3, r7, r6
1004401c:	6878      	ldr	r0, [r7, #4]
1004401e:	2201      	movs	r2, #1
10044020:	9200      	str	r2, [sp, #0]
10044022:	2200      	movs	r2, #0
10044024:	210d      	movs	r1, #13
10044026:	f7ff fa3d 	bl	100434a4 <DW1000_write_reg>
1004402a:	e155      	b.n	100442d8 <DW1000_responder+0x504>
1004402c:	20000484 	.word	0x20000484
10044030:	2427d000 	.word	0x2427d000
10044034:	20000498 	.word	0x20000498
10044038:	2000065c 	.word	0x2000065c
1004403c:	200004b8 	.word	0x200004b8
10044040:	00001388 	.word	0x00001388
10044044:	200004d0 	.word	0x200004d0
10044048:	2000066c 	.word	0x2000066c
1004404c:	20000480 	.word	0x20000480
10044050:	00008010 	.word	0x00008010
10044054:	0bb80000 	.word	0x0bb80000
						(void*) &tmp, 1);
				goto TXError;
			}
			uint32_t sys_status;
			DW1000_read_reg(dw1000, SYS_STATUS_ID, 0x00, (void*) &sys_status,
10044058:	2314      	movs	r3, #20
1004405a:	18fb      	adds	r3, r7, r3
1004405c:	6878      	ldr	r0, [r7, #4]
1004405e:	2204      	movs	r2, #4
10044060:	9200      	str	r2, [sp, #0]
10044062:	2200      	movs	r2, #0
10044064:	210f      	movs	r1, #15
10044066:	f7ff f9bb 	bl	100433e0 <DW1000_read_reg>
					4); // Read at offset 3 to get the upper 2 bytes out of 5
			// poll for reception
			status_reg = 0;
1004406a:	4bae      	ldr	r3, [pc, #696]	@ (10044324 <DW1000_responder+0x550>)
1004406c:	2200      	movs	r2, #0
1004406e:	601a      	str	r2, [r3, #0]
			do {
				DW1000_read_reg(dw1000, SYS_STATUS_ID, 0x0, (void*) &status_reg,
10044070:	4bac      	ldr	r3, [pc, #688]	@ (10044324 <DW1000_responder+0x550>)
10044072:	6878      	ldr	r0, [r7, #4]
10044074:	2204      	movs	r2, #4
10044076:	9200      	str	r2, [sp, #0]
10044078:	2200      	movs	r2, #0
1004407a:	210f      	movs	r1, #15
1004407c:	f7ff f9b0 	bl	100433e0 <DW1000_read_reg>
						4);
			} while (!(status_reg
					& (SYS_STATUS_RXFCG | SYS_STATUS_ALL_RX_TO
10044080:	4ba8      	ldr	r3, [pc, #672]	@ (10044324 <DW1000_responder+0x550>)
10044082:	681b      	ldr	r3, [r3, #0]
10044084:	4aa8      	ldr	r2, [pc, #672]	@ (10044328 <DW1000_responder+0x554>)
10044086:	4013      	ands	r3, r2
			} while (!(status_reg
10044088:	d0f2      	beq.n	10044070 <DW1000_responder+0x29c>
							| SYS_STATUS_ALL_RX_ERR)));
			/* Increment frame sequence number after transmission of the response message (modulo 256). */
			frame_seq_nb++;
1004408a:	4ba8      	ldr	r3, [pc, #672]	@ (1004432c <DW1000_responder+0x558>)
1004408c:	781b      	ldrb	r3, [r3, #0]
1004408e:	3301      	adds	r3, #1
10044090:	b2da      	uxtb	r2, r3
10044092:	4ba6      	ldr	r3, [pc, #664]	@ (1004432c <DW1000_responder+0x558>)
10044094:	701a      	strb	r2, [r3, #0]

			if (status_reg & SYS_STATUS_RXFCG) {
10044096:	4ba3      	ldr	r3, [pc, #652]	@ (10044324 <DW1000_responder+0x550>)
10044098:	681a      	ldr	r2, [r3, #0]
1004409a:	2380      	movs	r3, #128	@ 0x80
1004409c:	01db      	lsls	r3, r3, #7
1004409e:	4013      	ands	r3, r2
100440a0:	d100      	bne.n	100440a4 <DW1000_responder+0x2d0>
100440a2:	e0f8      	b.n	10044296 <DW1000_responder+0x4c2>
				tmp = SYS_STATUS_RXFCG | SYS_STATUS_TXFRS;
100440a4:	2381      	movs	r3, #129	@ 0x81
100440a6:	01db      	lsls	r3, r3, #7
100440a8:	627b      	str	r3, [r7, #36]	@ 0x24
				DW1000_write_reg(dw1000, SYS_STATUS_ID, 0x00, (void*) &tmp, 4);
100440aa:	2324      	movs	r3, #36	@ 0x24
100440ac:	18fb      	adds	r3, r7, r3
100440ae:	6878      	ldr	r0, [r7, #4]
100440b0:	2204      	movs	r2, #4
100440b2:	9200      	str	r2, [sp, #0]
100440b4:	2200      	movs	r2, #0
100440b6:	210f      	movs	r1, #15
100440b8:	f7ff f9f4 	bl	100434a4 <DW1000_write_reg>
				/* A frame has been received, read it into the local buffer. */
				DW1000_read_reg(dw1000, RX_FINFO_ID, 0x00, (void*) &frame_len,
100440bc:	2320      	movs	r3, #32
100440be:	18fb      	adds	r3, r7, r3
100440c0:	6878      	ldr	r0, [r7, #4]
100440c2:	2204      	movs	r2, #4
100440c4:	9200      	str	r2, [sp, #0]
100440c6:	2200      	movs	r2, #0
100440c8:	2110      	movs	r1, #16
100440ca:	f7ff f989 	bl	100433e0 <DW1000_read_reg>
						4);
				frame_len &= RX_FINFO_RXFLEN_MASK;
100440ce:	6a3b      	ldr	r3, [r7, #32]
100440d0:	227f      	movs	r2, #127	@ 0x7f
100440d2:	4013      	ands	r3, r2
100440d4:	623b      	str	r3, [r7, #32]
				if (frame_len <= RX_BUF_LEN) {
100440d6:	6a3b      	ldr	r3, [r7, #32]
100440d8:	2b19      	cmp	r3, #25
100440da:	d808      	bhi.n	100440ee <DW1000_responder+0x31a>
					DW1000_read_reg(dw1000, RX_BUFFER_ID, 0x00,
100440dc:	6a3b      	ldr	r3, [r7, #32]
100440de:	4a94      	ldr	r2, [pc, #592]	@ (10044330 <DW1000_responder+0x55c>)
100440e0:	6878      	ldr	r0, [r7, #4]
100440e2:	9300      	str	r3, [sp, #0]
100440e4:	0013      	movs	r3, r2
100440e6:	2200      	movs	r2, #0
100440e8:	2111      	movs	r1, #17
100440ea:	f7ff f979 	bl	100433e0 <DW1000_read_reg>
							(void*) &rx_buffer, frame_len);
				}
				rx_buffer[ALL_MSG_SN_IDX] = 0;
100440ee:	4b90      	ldr	r3, [pc, #576]	@ (10044330 <DW1000_responder+0x55c>)
100440f0:	2200      	movs	r2, #0
100440f2:	709a      	strb	r2, [r3, #2]
				if (memcmp(rx_buffer, rx_final_msg, ALL_MSG_COMMON_LEN) == 0) {
100440f4:	498f      	ldr	r1, [pc, #572]	@ (10044334 <DW1000_responder+0x560>)
100440f6:	4b8e      	ldr	r3, [pc, #568]	@ (10044330 <DW1000_responder+0x55c>)
100440f8:	220a      	movs	r2, #10
100440fa:	0018      	movs	r0, r3
100440fc:	f005 f920 	bl	10049340 <memcmp>
10044100:	1e03      	subs	r3, r0, #0
10044102:	d000      	beq.n	10044106 <DW1000_responder+0x332>
10044104:	e107      	b.n	10044316 <DW1000_responder+0x542>
					uint32_t poll_rx_ts_32, resp_tx_ts_32, final_rx_ts_32;
					double Ra, Rb, Da, Db;
					int64_t tof_dtu;

					/* Retrieve response transmission and final reception timestamps. */
					resp_tx_ts = get_tx_timestamp_u64(dw1000);
10044106:	687b      	ldr	r3, [r7, #4]
10044108:	0018      	movs	r0, r3
1004410a:	f7ff fd85 	bl	10043c18 <get_tx_timestamp_u64>
1004410e:	0002      	movs	r2, r0
10044110:	000b      	movs	r3, r1
10044112:	4989      	ldr	r1, [pc, #548]	@ (10044338 <DW1000_responder+0x564>)
10044114:	600a      	str	r2, [r1, #0]
10044116:	604b      	str	r3, [r1, #4]
					final_rx_ts = get_rx_timestamp_u64(dw1000);
10044118:	687b      	ldr	r3, [r7, #4]
1004411a:	0018      	movs	r0, r3
1004411c:	f7ff fdd1 	bl	10043cc2 <get_rx_timestamp_u64>
10044120:	0002      	movs	r2, r0
10044122:	000b      	movs	r3, r1
10044124:	4985      	ldr	r1, [pc, #532]	@ (1004433c <DW1000_responder+0x568>)
10044126:	600a      	str	r2, [r1, #0]
10044128:	604b      	str	r3, [r1, #4]

					/* Get timestamps embedded in the final message. */
					final_msg_get_ts(&rx_buffer[FINAL_MSG_POLL_TX_TS_IDX],
1004412a:	2310      	movs	r3, #16
1004412c:	18fa      	adds	r2, r7, r3
1004412e:	4b84      	ldr	r3, [pc, #528]	@ (10044340 <DW1000_responder+0x56c>)
10044130:	0011      	movs	r1, r2
10044132:	0018      	movs	r0, r3
10044134:	f7ff fe1a 	bl	10043d6c <final_msg_get_ts>
							&poll_tx_ts);
					final_msg_get_ts(&rx_buffer[FINAL_MSG_RESP_RX_TS_IDX],
10044138:	230c      	movs	r3, #12
1004413a:	18fa      	adds	r2, r7, r3
1004413c:	4b81      	ldr	r3, [pc, #516]	@ (10044344 <DW1000_responder+0x570>)
1004413e:	0011      	movs	r1, r2
10044140:	0018      	movs	r0, r3
10044142:	f7ff fe13 	bl	10043d6c <final_msg_get_ts>
							&resp_rx_ts);
					final_msg_get_ts(&rx_buffer[FINAL_MSG_FINAL_TX_TS_IDX],
10044146:	2308      	movs	r3, #8
10044148:	18fa      	adds	r2, r7, r3
1004414a:	4b7f      	ldr	r3, [pc, #508]	@ (10044348 <DW1000_responder+0x574>)
1004414c:	0011      	movs	r1, r2
1004414e:	0018      	movs	r0, r3
10044150:	f7ff fe0c 	bl	10043d6c <final_msg_get_ts>
							&final_tx_ts);

					/* Compute time of flight. 32-bit subtractions give correct answers even if clock has wrapped. See NOTE 12 below. */
					poll_rx_ts_32 = (uint32_t) poll_rx_ts;
10044154:	4b7d      	ldr	r3, [pc, #500]	@ (1004434c <DW1000_responder+0x578>)
10044156:	681a      	ldr	r2, [r3, #0]
10044158:	685b      	ldr	r3, [r3, #4]
1004415a:	0013      	movs	r3, r2
1004415c:	65fb      	str	r3, [r7, #92]	@ 0x5c
					resp_tx_ts_32 = (uint32_t) resp_tx_ts;
1004415e:	4b76      	ldr	r3, [pc, #472]	@ (10044338 <DW1000_responder+0x564>)
10044160:	681a      	ldr	r2, [r3, #0]
10044162:	685b      	ldr	r3, [r3, #4]
10044164:	0013      	movs	r3, r2
10044166:	65bb      	str	r3, [r7, #88]	@ 0x58
					final_rx_ts_32 = (uint32_t) final_rx_ts;
10044168:	4b74      	ldr	r3, [pc, #464]	@ (1004433c <DW1000_responder+0x568>)
1004416a:	681a      	ldr	r2, [r3, #0]
1004416c:	685b      	ldr	r3, [r3, #4]
1004416e:	0013      	movs	r3, r2
10044170:	657b      	str	r3, [r7, #84]	@ 0x54
					Ra = (double) (resp_rx_ts - poll_tx_ts);
10044172:	68fa      	ldr	r2, [r7, #12]
10044174:	693b      	ldr	r3, [r7, #16]
10044176:	1ad3      	subs	r3, r2, r3
10044178:	0018      	movs	r0, r3
1004417a:	f7fe f80d 	bl	10042198 <__aeabi_ui2d>
1004417e:	0002      	movs	r2, r0
10044180:	000b      	movs	r3, r1
10044182:	64ba      	str	r2, [r7, #72]	@ 0x48
10044184:	64fb      	str	r3, [r7, #76]	@ 0x4c
					Rb = (double) (final_rx_ts_32 - resp_tx_ts_32);
10044186:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
10044188:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
1004418a:	1ad3      	subs	r3, r2, r3
1004418c:	0018      	movs	r0, r3
1004418e:	f7fe f803 	bl	10042198 <__aeabi_ui2d>
10044192:	0002      	movs	r2, r0
10044194:	000b      	movs	r3, r1
10044196:	643a      	str	r2, [r7, #64]	@ 0x40
10044198:	647b      	str	r3, [r7, #68]	@ 0x44
					Da = (double) (final_tx_ts - resp_rx_ts);
1004419a:	68ba      	ldr	r2, [r7, #8]
1004419c:	68fb      	ldr	r3, [r7, #12]
1004419e:	1ad3      	subs	r3, r2, r3
100441a0:	0018      	movs	r0, r3
100441a2:	f7fd fff9 	bl	10042198 <__aeabi_ui2d>
100441a6:	0002      	movs	r2, r0
100441a8:	000b      	movs	r3, r1
100441aa:	63ba      	str	r2, [r7, #56]	@ 0x38
100441ac:	63fb      	str	r3, [r7, #60]	@ 0x3c
					Db = (double) (resp_tx_ts_32 - poll_rx_ts_32);
100441ae:	6dba      	ldr	r2, [r7, #88]	@ 0x58
100441b0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
100441b2:	1ad3      	subs	r3, r2, r3
100441b4:	0018      	movs	r0, r3
100441b6:	f7fd ffef 	bl	10042198 <__aeabi_ui2d>
100441ba:	0002      	movs	r2, r0
100441bc:	000b      	movs	r3, r1
100441be:	633a      	str	r2, [r7, #48]	@ 0x30
100441c0:	637b      	str	r3, [r7, #52]	@ 0x34
					tof_dtu = (int64_t) ((Ra * Rb - Da * Db)
100441c2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
100441c4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
100441c6:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
100441c8:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
100441ca:	f7fd f917 	bl	100413fc <__aeabi_dmul>
100441ce:	0002      	movs	r2, r0
100441d0:	000b      	movs	r3, r1
100441d2:	0014      	movs	r4, r2
100441d4:	001d      	movs	r5, r3
100441d6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
100441d8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
100441da:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
100441dc:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
100441de:	f7fd f90d 	bl	100413fc <__aeabi_dmul>
100441e2:	0002      	movs	r2, r0
100441e4:	000b      	movs	r3, r1
100441e6:	0020      	movs	r0, r4
100441e8:	0029      	movs	r1, r5
100441ea:	f7fd fbcf 	bl	1004198c <__aeabi_dsub>
100441ee:	0002      	movs	r2, r0
100441f0:	000b      	movs	r3, r1
100441f2:	0014      	movs	r4, r2
100441f4:	001d      	movs	r5, r3
							/ (Ra + Rb + Da + Db));
100441f6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
100441f8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
100441fa:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
100441fc:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
100441fe:	f7fc fa7f 	bl	10040700 <__aeabi_dadd>
10044202:	0002      	movs	r2, r0
10044204:	000b      	movs	r3, r1
10044206:	0010      	movs	r0, r2
10044208:	0019      	movs	r1, r3
1004420a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
1004420c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
1004420e:	f7fc fa77 	bl	10040700 <__aeabi_dadd>
10044212:	0002      	movs	r2, r0
10044214:	000b      	movs	r3, r1
10044216:	0010      	movs	r0, r2
10044218:	0019      	movs	r1, r3
1004421a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
1004421c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
1004421e:	f7fc fa6f 	bl	10040700 <__aeabi_dadd>
10044222:	0002      	movs	r2, r0
10044224:	000b      	movs	r3, r1
10044226:	0020      	movs	r0, r4
10044228:	0029      	movs	r1, r5
1004422a:	f7fc fdcd 	bl	10040dc8 <__aeabi_ddiv>
1004422e:	0002      	movs	r2, r0
10044230:	000b      	movs	r3, r1
					tof_dtu = (int64_t) ((Ra * Rb - Da * Db)
10044232:	0010      	movs	r0, r2
10044234:	0019      	movs	r1, r3
10044236:	f7fc f947 	bl	100404c8 <__aeabi_d2lz>
1004423a:	0002      	movs	r2, r0
1004423c:	000b      	movs	r3, r1
1004423e:	62ba      	str	r2, [r7, #40]	@ 0x28
10044240:	62fb      	str	r3, [r7, #44]	@ 0x2c
					tof = tof_dtu * DWT_TIME_UNITS;
10044242:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
10044244:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
10044246:	f7fc f979 	bl	1004053c <__aeabi_l2d>
1004424a:	4a41      	ldr	r2, [pc, #260]	@ (10044350 <DW1000_responder+0x57c>)
1004424c:	4b41      	ldr	r3, [pc, #260]	@ (10044354 <DW1000_responder+0x580>)
1004424e:	f7fd f8d5 	bl	100413fc <__aeabi_dmul>
10044252:	0002      	movs	r2, r0
10044254:	000b      	movs	r3, r1
10044256:	4940      	ldr	r1, [pc, #256]	@ (10044358 <DW1000_responder+0x584>)
10044258:	600a      	str	r2, [r1, #0]
1004425a:	604b      	str	r3, [r1, #4]
					distance = tof * SPEED_OF_LIGHT;
1004425c:	4b3e      	ldr	r3, [pc, #248]	@ (10044358 <DW1000_responder+0x584>)
1004425e:	6818      	ldr	r0, [r3, #0]
10044260:	6859      	ldr	r1, [r3, #4]
10044262:	2298      	movs	r2, #152	@ 0x98
10044264:	0552      	lsls	r2, r2, #21
10044266:	4b3d      	ldr	r3, [pc, #244]	@ (1004435c <DW1000_responder+0x588>)
10044268:	f7fd f8c8 	bl	100413fc <__aeabi_dmul>
1004426c:	0002      	movs	r2, r0
1004426e:	000b      	movs	r3, r1
10044270:	493b      	ldr	r1, [pc, #236]	@ (10044360 <DW1000_responder+0x58c>)
10044272:	600a      	str	r2, [r1, #0]
10044274:	604b      	str	r3, [r1, #4]
					distance -= 137.34302980478139;
10044276:	4b3a      	ldr	r3, [pc, #232]	@ (10044360 <DW1000_responder+0x58c>)
10044278:	6818      	ldr	r0, [r3, #0]
1004427a:	6859      	ldr	r1, [r3, #4]
1004427c:	4a39      	ldr	r2, [pc, #228]	@ (10044364 <DW1000_responder+0x590>)
1004427e:	4b3a      	ldr	r3, [pc, #232]	@ (10044368 <DW1000_responder+0x594>)
10044280:	f7fd fb84 	bl	1004198c <__aeabi_dsub>
10044284:	0002      	movs	r2, r0
10044286:	000b      	movs	r3, r1
10044288:	4935      	ldr	r1, [pc, #212]	@ (10044360 <DW1000_responder+0x58c>)
1004428a:	600a      	str	r2, [r1, #0]
1004428c:	604b      	str	r3, [r1, #4]
					return distance;
1004428e:	4b34      	ldr	r3, [pc, #208]	@ (10044360 <DW1000_responder+0x58c>)
10044290:	681a      	ldr	r2, [r3, #0]
10044292:	685b      	ldr	r3, [r3, #4]
10044294:	e041      	b.n	1004431a <DW1000_responder+0x546>
				}
			} else {
				/* Clear RX error/timeout events in the DW1000 status register. */
				tmp = SYS_STATUS_ALL_RX_TO | SYS_STATUS_ALL_RX_ERR;
10044296:	4b35      	ldr	r3, [pc, #212]	@ (1004436c <DW1000_responder+0x598>)
10044298:	627b      	str	r3, [r7, #36]	@ 0x24
				DW1000_write_reg(dw1000, SYS_STATUS_ID, 0x00, (void*) &tmp, 4);
1004429a:	2424      	movs	r4, #36	@ 0x24
1004429c:	193b      	adds	r3, r7, r4
1004429e:	6878      	ldr	r0, [r7, #4]
100442a0:	2204      	movs	r2, #4
100442a2:	9200      	str	r2, [sp, #0]
100442a4:	2200      	movs	r2, #0
100442a6:	210f      	movs	r1, #15
100442a8:	f7ff f8fc 	bl	100434a4 <DW1000_write_reg>
				/* Reset RX to properly reinitialise LDE operation. */
				tmp = PMSC_CTRL0_RESET_RX;
100442ac:	23e0      	movs	r3, #224	@ 0xe0
100442ae:	627b      	str	r3, [r7, #36]	@ 0x24
				DW1000_write_reg(dw1000, PMSC_ID, PMSC_CTRL0_SOFTRESET_OFFSET,
100442b0:	193b      	adds	r3, r7, r4
100442b2:	6878      	ldr	r0, [r7, #4]
100442b4:	2201      	movs	r2, #1
100442b6:	9200      	str	r2, [sp, #0]
100442b8:	2203      	movs	r2, #3
100442ba:	2136      	movs	r1, #54	@ 0x36
100442bc:	f7ff f8f2 	bl	100434a4 <DW1000_write_reg>
						(void*) &tmp, 1);
				// Clear RX reset
				tmp = PMSC_CTRL0_RESET_CLEAR;
100442c0:	23f0      	movs	r3, #240	@ 0xf0
100442c2:	627b      	str	r3, [r7, #36]	@ 0x24
				DW1000_write_reg(dw1000, PMSC_ID, PMSC_CTRL0_SOFTRESET_OFFSET,
100442c4:	193b      	adds	r3, r7, r4
100442c6:	6878      	ldr	r0, [r7, #4]
100442c8:	2201      	movs	r2, #1
100442ca:	9200      	str	r2, [sp, #0]
100442cc:	2203      	movs	r2, #3
100442ce:	2136      	movs	r1, #54	@ 0x36
100442d0:	f7ff f8e8 	bl	100434a4 <DW1000_write_reg>
100442d4:	e01f      	b.n	10044316 <DW1000_responder+0x542>
						(void*) &tmp, 1);
			}
		}
	} else {
		TXError:
100442d6:	46c0      	nop			@ (mov r8, r8)
		/* Clear RX error/timeout events in the DW1000 status register. */
		tmp = SYS_STATUS_ALL_RX_TO | SYS_STATUS_ALL_RX_ERR;
100442d8:	4b24      	ldr	r3, [pc, #144]	@ (1004436c <DW1000_responder+0x598>)
100442da:	627b      	str	r3, [r7, #36]	@ 0x24
		DW1000_write_reg(dw1000, SYS_STATUS_ID, 0x00, (void*) &tmp, 4);
100442dc:	2424      	movs	r4, #36	@ 0x24
100442de:	193b      	adds	r3, r7, r4
100442e0:	6878      	ldr	r0, [r7, #4]
100442e2:	2204      	movs	r2, #4
100442e4:	9200      	str	r2, [sp, #0]
100442e6:	2200      	movs	r2, #0
100442e8:	210f      	movs	r1, #15
100442ea:	f7ff f8db 	bl	100434a4 <DW1000_write_reg>
		/* Reset RX to properly reinitialise LDE operation. */
		tmp = PMSC_CTRL0_RESET_RX;
100442ee:	23e0      	movs	r3, #224	@ 0xe0
100442f0:	627b      	str	r3, [r7, #36]	@ 0x24
		DW1000_write_reg(dw1000, PMSC_ID, PMSC_CTRL0_SOFTRESET_OFFSET,
100442f2:	193b      	adds	r3, r7, r4
100442f4:	6878      	ldr	r0, [r7, #4]
100442f6:	2201      	movs	r2, #1
100442f8:	9200      	str	r2, [sp, #0]
100442fa:	2203      	movs	r2, #3
100442fc:	2136      	movs	r1, #54	@ 0x36
100442fe:	f7ff f8d1 	bl	100434a4 <DW1000_write_reg>
				(void*) &tmp, 1);
		// Clear RX reset
		tmp = PMSC_CTRL0_RESET_CLEAR;
10044302:	23f0      	movs	r3, #240	@ 0xf0
10044304:	627b      	str	r3, [r7, #36]	@ 0x24
		DW1000_write_reg(dw1000, PMSC_ID, PMSC_CTRL0_SOFTRESET_OFFSET,
10044306:	193b      	adds	r3, r7, r4
10044308:	6878      	ldr	r0, [r7, #4]
1004430a:	2201      	movs	r2, #1
1004430c:	9200      	str	r2, [sp, #0]
1004430e:	2203      	movs	r2, #3
10044310:	2136      	movs	r1, #54	@ 0x36
10044312:	f7ff f8c7 	bl	100434a4 <DW1000_write_reg>
				(void*) &tmp, 1);

	}
	return 0;
10044316:	2200      	movs	r2, #0
10044318:	2300      	movs	r3, #0
}
1004431a:	0010      	movs	r0, r2
1004431c:	0019      	movs	r1, r3
1004431e:	46bd      	mov	sp, r7
10044320:	b019      	add	sp, #100	@ 0x64
10044322:	bdf0      	pop	{r4, r5, r6, r7, pc}
10044324:	20000484 	.word	0x20000484
10044328:	2427d000 	.word	0x2427d000
1004432c:	200004d0 	.word	0x200004d0
10044330:	20000498 	.word	0x20000498
10044334:	2000067c 	.word	0x2000067c
10044338:	200004c0 	.word	0x200004c0
1004433c:	200004c8 	.word	0x200004c8
10044340:	200004a2 	.word	0x200004a2
10044344:	200004a6 	.word	0x200004a6
10044348:	200004aa 	.word	0x200004aa
1004434c:	200004b8 	.word	0x200004b8
10044350:	3bce48fa 	.word	0x3bce48fa
10044354:	3db13518 	.word	0x3db13518
10044358:	20000488 	.word	0x20000488
1004435c:	41b1dd19 	.word	0x41b1dd19
10044360:	20000490 	.word	0x20000490
10044364:	19a422dc 	.word	0x19a422dc
10044368:	40612afa 	.word	0x40612afa
1004436c:	24279000 	.word	0x24279000

10044370 <SPI_write8>:


/*!<
 * usage
 * */
uint32_t SPI_write8(SPI_HandleTypeDef* spi, const uint8_t* buffer, uint32_t size, uint32_t timeout) {
10044370:	b5f0      	push	{r4, r5, r6, r7, lr}
10044372:	b08f      	sub	sp, #60	@ 0x3c
10044374:	af00      	add	r7, sp, #0
10044376:	6278      	str	r0, [r7, #36]	@ 0x24
10044378:	6239      	str	r1, [r7, #32]
1004437a:	61fa      	str	r2, [r7, #28]
1004437c:	61bb      	str	r3, [r7, #24]
	spi->Instance->CR1 |= 0x00000040UL;
1004437e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10044380:	681b      	ldr	r3, [r3, #0]
10044382:	681a      	ldr	r2, [r3, #0]
10044384:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10044386:	681b      	ldr	r3, [r3, #0]
10044388:	2140      	movs	r1, #64	@ 0x40
1004438a:	430a      	orrs	r2, r1
1004438c:	601a      	str	r2, [r3, #0]
	uint64_t start = uwTick;
1004438e:	4b35      	ldr	r3, [pc, #212]	@ (10044464 <SPI_write8+0xf4>)
10044390:	681b      	ldr	r3, [r3, #0]
10044392:	62bb      	str	r3, [r7, #40]	@ 0x28
10044394:	2300      	movs	r3, #0
10044396:	62fb      	str	r3, [r7, #44]	@ 0x2c
	uint32_t i = 0;
10044398:	2300      	movs	r3, #0
1004439a:	637b      	str	r3, [r7, #52]	@ 0x34
	for (; i < size; i++) {
1004439c:	e02c      	b.n	100443f8 <SPI_write8+0x88>
		while (!(spi->Instance->SR & 0x00000002UL))	{ if ( uwTick - start > timeout) { goto SPI_master_write8_end; } }
1004439e:	4b31      	ldr	r3, [pc, #196]	@ (10044464 <SPI_write8+0xf4>)
100443a0:	681b      	ldr	r3, [r3, #0]
100443a2:	613b      	str	r3, [r7, #16]
100443a4:	2300      	movs	r3, #0
100443a6:	617b      	str	r3, [r7, #20]
100443a8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
100443aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
100443ac:	6938      	ldr	r0, [r7, #16]
100443ae:	6979      	ldr	r1, [r7, #20]
100443b0:	1a80      	subs	r0, r0, r2
100443b2:	4199      	sbcs	r1, r3
100443b4:	0002      	movs	r2, r0
100443b6:	000b      	movs	r3, r1
100443b8:	69b9      	ldr	r1, [r7, #24]
100443ba:	60b9      	str	r1, [r7, #8]
100443bc:	2100      	movs	r1, #0
100443be:	60f9      	str	r1, [r7, #12]
100443c0:	68b8      	ldr	r0, [r7, #8]
100443c2:	68f9      	ldr	r1, [r7, #12]
100443c4:	000e      	movs	r6, r1
100443c6:	42b3      	cmp	r3, r6
100443c8:	d83b      	bhi.n	10044442 <SPI_write8+0xd2>
100443ca:	000e      	movs	r6, r1
100443cc:	42b3      	cmp	r3, r6
100443ce:	d102      	bne.n	100443d6 <SPI_write8+0x66>
100443d0:	0001      	movs	r1, r0
100443d2:	428a      	cmp	r2, r1
100443d4:	d835      	bhi.n	10044442 <SPI_write8+0xd2>
100443d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
100443d8:	681b      	ldr	r3, [r3, #0]
100443da:	689b      	ldr	r3, [r3, #8]
100443dc:	2202      	movs	r2, #2
100443de:	4013      	ands	r3, r2
100443e0:	d0dd      	beq.n	1004439e <SPI_write8+0x2e>
		*((volatile uint8_t*)&spi->Instance->DR) = buffer[i];
100443e2:	6a3a      	ldr	r2, [r7, #32]
100443e4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
100443e6:	18d2      	adds	r2, r2, r3
100443e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
100443ea:	681b      	ldr	r3, [r3, #0]
100443ec:	330c      	adds	r3, #12
100443ee:	7812      	ldrb	r2, [r2, #0]
100443f0:	701a      	strb	r2, [r3, #0]
	for (; i < size; i++) {
100443f2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
100443f4:	3301      	adds	r3, #1
100443f6:	637b      	str	r3, [r7, #52]	@ 0x34
100443f8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
100443fa:	69fb      	ldr	r3, [r7, #28]
100443fc:	429a      	cmp	r2, r3
100443fe:	d3ea      	bcc.n	100443d6 <SPI_write8+0x66>
	}
	while (spi->Instance->SR & 0x00000080UL)			{ if ( uwTick - start > timeout) { goto SPI_master_write8_end; } }
10044400:	e015      	b.n	1004442e <SPI_write8+0xbe>
10044402:	4b18      	ldr	r3, [pc, #96]	@ (10044464 <SPI_write8+0xf4>)
10044404:	681b      	ldr	r3, [r3, #0]
10044406:	603b      	str	r3, [r7, #0]
10044408:	2300      	movs	r3, #0
1004440a:	607b      	str	r3, [r7, #4]
1004440c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
1004440e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
10044410:	6838      	ldr	r0, [r7, #0]
10044412:	6879      	ldr	r1, [r7, #4]
10044414:	1a80      	subs	r0, r0, r2
10044416:	4199      	sbcs	r1, r3
10044418:	0002      	movs	r2, r0
1004441a:	000b      	movs	r3, r1
1004441c:	69b9      	ldr	r1, [r7, #24]
1004441e:	000c      	movs	r4, r1
10044420:	2100      	movs	r1, #0
10044422:	000d      	movs	r5, r1
10044424:	42ab      	cmp	r3, r5
10044426:	d80e      	bhi.n	10044446 <SPI_write8+0xd6>
10044428:	d101      	bne.n	1004442e <SPI_write8+0xbe>
1004442a:	42a2      	cmp	r2, r4
1004442c:	d80b      	bhi.n	10044446 <SPI_write8+0xd6>
1004442e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10044430:	681b      	ldr	r3, [r3, #0]
10044432:	689b      	ldr	r3, [r3, #8]
10044434:	2280      	movs	r2, #128	@ 0x80
10044436:	4013      	ands	r3, r2
10044438:	d1e3      	bne.n	10044402 <SPI_write8+0x92>
	i++; SPI_master_write8_end:
1004443a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
1004443c:	3301      	adds	r3, #1
1004443e:	637b      	str	r3, [r7, #52]	@ 0x34
10044440:	e002      	b.n	10044448 <SPI_write8+0xd8>
		while (!(spi->Instance->SR & 0x00000002UL))	{ if ( uwTick - start > timeout) { goto SPI_master_write8_end; } }
10044442:	46c0      	nop			@ (mov r8, r8)
10044444:	e000      	b.n	10044448 <SPI_write8+0xd8>
	while (spi->Instance->SR & 0x00000080UL)			{ if ( uwTick - start > timeout) { goto SPI_master_write8_end; } }
10044446:	46c0      	nop			@ (mov r8, r8)
	spi->Instance->CR1 &= ~0x00000040UL;
10044448:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
1004444a:	681b      	ldr	r3, [r3, #0]
1004444c:	681a      	ldr	r2, [r3, #0]
1004444e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10044450:	681b      	ldr	r3, [r3, #0]
10044452:	2140      	movs	r1, #64	@ 0x40
10044454:	438a      	bics	r2, r1
10044456:	601a      	str	r2, [r3, #0]
	return i;
10044458:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
1004445a:	0018      	movs	r0, r3
1004445c:	46bd      	mov	sp, r7
1004445e:	b00f      	add	sp, #60	@ 0x3c
10044460:	bdf0      	pop	{r4, r5, r6, r7, pc}
10044462:	46c0      	nop			@ (mov r8, r8)
10044464:	200004d4 	.word	0x200004d4

10044468 <SPI_read8>:

uint32_t SPI_read8(SPI_HandleTypeDef* spi, uint8_t* buffer, uint32_t size, uint32_t timeout) {
10044468:	b5f0      	push	{r4, r5, r6, r7, lr}
1004446a:	b093      	sub	sp, #76	@ 0x4c
1004446c:	af00      	add	r7, sp, #0
1004446e:	6378      	str	r0, [r7, #52]	@ 0x34
10044470:	6339      	str	r1, [r7, #48]	@ 0x30
10044472:	62fa      	str	r2, [r7, #44]	@ 0x2c
10044474:	62bb      	str	r3, [r7, #40]	@ 0x28
	spi->Instance->CR1 |= 0x00000040UL;
10044476:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
10044478:	681b      	ldr	r3, [r3, #0]
1004447a:	6819      	ldr	r1, [r3, #0]
1004447c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
1004447e:	681a      	ldr	r2, [r3, #0]
10044480:	2340      	movs	r3, #64	@ 0x40
10044482:	430b      	orrs	r3, r1
10044484:	6013      	str	r3, [r2, #0]
	uint64_t start = uwTick;
10044486:	4b50      	ldr	r3, [pc, #320]	@ (100445c8 <SPI_read8+0x160>)
10044488:	681b      	ldr	r3, [r3, #0]
1004448a:	63bb      	str	r3, [r7, #56]	@ 0x38
1004448c:	2300      	movs	r3, #0
1004448e:	63fb      	str	r3, [r7, #60]	@ 0x3c
	uint32_t i = 0;
10044490:	2300      	movs	r3, #0
10044492:	647b      	str	r3, [r7, #68]	@ 0x44

	while (spi->Instance->SR & 0x00000001UL) {
10044494:	e002      	b.n	1004449c <SPI_read8+0x34>
		(void)(volatile uint8_t)spi->Instance->DR;  // flush buffer
10044496:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
10044498:	681b      	ldr	r3, [r3, #0]
1004449a:	68db      	ldr	r3, [r3, #12]
	while (spi->Instance->SR & 0x00000001UL) {
1004449c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
1004449e:	681b      	ldr	r3, [r3, #0]
100444a0:	689a      	ldr	r2, [r3, #8]
100444a2:	2301      	movs	r3, #1
100444a4:	4013      	ands	r3, r2
100444a6:	d1f6      	bne.n	10044496 <SPI_read8+0x2e>
	}

	for (; i < size; i++) {
100444a8:	e056      	b.n	10044558 <SPI_read8+0xf0>
		while (!(spi->Instance->SR & 0x00000002UL))	{ if ( uwTick - start > timeout) { goto SPI_master_read8_end; } }
100444aa:	4b47      	ldr	r3, [pc, #284]	@ (100445c8 <SPI_read8+0x160>)
100444ac:	681b      	ldr	r3, [r3, #0]
100444ae:	623b      	str	r3, [r7, #32]
100444b0:	2300      	movs	r3, #0
100444b2:	627b      	str	r3, [r7, #36]	@ 0x24
100444b4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
100444b6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
100444b8:	6a38      	ldr	r0, [r7, #32]
100444ba:	6a79      	ldr	r1, [r7, #36]	@ 0x24
100444bc:	1a80      	subs	r0, r0, r2
100444be:	4199      	sbcs	r1, r3
100444c0:	0002      	movs	r2, r0
100444c2:	000b      	movs	r3, r1
100444c4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
100444c6:	61b9      	str	r1, [r7, #24]
100444c8:	2100      	movs	r1, #0
100444ca:	61f9      	str	r1, [r7, #28]
100444cc:	69b8      	ldr	r0, [r7, #24]
100444ce:	69f9      	ldr	r1, [r7, #28]
100444d0:	000e      	movs	r6, r1
100444d2:	42b3      	cmp	r3, r6
100444d4:	d900      	bls.n	100444d8 <SPI_read8+0x70>
100444d6:	e064      	b.n	100445a2 <SPI_read8+0x13a>
100444d8:	000e      	movs	r6, r1
100444da:	42b3      	cmp	r3, r6
100444dc:	d102      	bne.n	100444e4 <SPI_read8+0x7c>
100444de:	0001      	movs	r1, r0
100444e0:	428a      	cmp	r2, r1
100444e2:	d85e      	bhi.n	100445a2 <SPI_read8+0x13a>
100444e4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
100444e6:	681b      	ldr	r3, [r3, #0]
100444e8:	689a      	ldr	r2, [r3, #8]
100444ea:	2302      	movs	r3, #2
100444ec:	4013      	ands	r3, r2
100444ee:	d0dc      	beq.n	100444aa <SPI_read8+0x42>
		*((volatile uint8_t*)&spi->Instance->DR) = 0;
100444f0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
100444f2:	681b      	ldr	r3, [r3, #0]
100444f4:	330c      	adds	r3, #12
100444f6:	001a      	movs	r2, r3
100444f8:	2300      	movs	r3, #0
100444fa:	7013      	strb	r3, [r2, #0]
		while (!(spi->Instance->SR & 0x00000001UL))	{ if ( uwTick - start > timeout) { goto SPI_master_read8_end; } }
100444fc:	e01b      	b.n	10044536 <SPI_read8+0xce>
100444fe:	4b32      	ldr	r3, [pc, #200]	@ (100445c8 <SPI_read8+0x160>)
10044500:	681b      	ldr	r3, [r3, #0]
10044502:	613b      	str	r3, [r7, #16]
10044504:	2300      	movs	r3, #0
10044506:	617b      	str	r3, [r7, #20]
10044508:	6bba      	ldr	r2, [r7, #56]	@ 0x38
1004450a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
1004450c:	6938      	ldr	r0, [r7, #16]
1004450e:	6979      	ldr	r1, [r7, #20]
10044510:	1a80      	subs	r0, r0, r2
10044512:	4199      	sbcs	r1, r3
10044514:	0002      	movs	r2, r0
10044516:	000b      	movs	r3, r1
10044518:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
1004451a:	60b9      	str	r1, [r7, #8]
1004451c:	2100      	movs	r1, #0
1004451e:	60f9      	str	r1, [r7, #12]
10044520:	68b8      	ldr	r0, [r7, #8]
10044522:	68f9      	ldr	r1, [r7, #12]
10044524:	000e      	movs	r6, r1
10044526:	42b3      	cmp	r3, r6
10044528:	d83d      	bhi.n	100445a6 <SPI_read8+0x13e>
1004452a:	000e      	movs	r6, r1
1004452c:	42b3      	cmp	r3, r6
1004452e:	d102      	bne.n	10044536 <SPI_read8+0xce>
10044530:	0001      	movs	r1, r0
10044532:	428a      	cmp	r2, r1
10044534:	d837      	bhi.n	100445a6 <SPI_read8+0x13e>
10044536:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
10044538:	681b      	ldr	r3, [r3, #0]
1004453a:	689a      	ldr	r2, [r3, #8]
1004453c:	2301      	movs	r3, #1
1004453e:	4013      	ands	r3, r2
10044540:	d0dd      	beq.n	100444fe <SPI_read8+0x96>
		buffer[i] = (volatile uint8_t)spi->Instance->DR;
10044542:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
10044544:	681b      	ldr	r3, [r3, #0]
10044546:	68d9      	ldr	r1, [r3, #12]
10044548:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
1004454a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
1004454c:	18d2      	adds	r2, r2, r3
1004454e:	b2cb      	uxtb	r3, r1
10044550:	7013      	strb	r3, [r2, #0]
	for (; i < size; i++) {
10044552:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
10044554:	3301      	adds	r3, #1
10044556:	647b      	str	r3, [r7, #68]	@ 0x44
10044558:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
1004455a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
1004455c:	429a      	cmp	r2, r3
1004455e:	d3c1      	bcc.n	100444e4 <SPI_read8+0x7c>
	}
	while (spi->Instance->SR & 0x00000080UL)			{ if ( uwTick - start > timeout) { goto SPI_master_read8_end; } }
10044560:	e015      	b.n	1004458e <SPI_read8+0x126>
10044562:	4b19      	ldr	r3, [pc, #100]	@ (100445c8 <SPI_read8+0x160>)
10044564:	681b      	ldr	r3, [r3, #0]
10044566:	603b      	str	r3, [r7, #0]
10044568:	2300      	movs	r3, #0
1004456a:	607b      	str	r3, [r7, #4]
1004456c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
1004456e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
10044570:	6838      	ldr	r0, [r7, #0]
10044572:	6879      	ldr	r1, [r7, #4]
10044574:	1a80      	subs	r0, r0, r2
10044576:	4199      	sbcs	r1, r3
10044578:	0002      	movs	r2, r0
1004457a:	000b      	movs	r3, r1
1004457c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
1004457e:	000c      	movs	r4, r1
10044580:	2100      	movs	r1, #0
10044582:	000d      	movs	r5, r1
10044584:	42ab      	cmp	r3, r5
10044586:	d810      	bhi.n	100445aa <SPI_read8+0x142>
10044588:	d101      	bne.n	1004458e <SPI_read8+0x126>
1004458a:	42a2      	cmp	r2, r4
1004458c:	d80d      	bhi.n	100445aa <SPI_read8+0x142>
1004458e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
10044590:	681b      	ldr	r3, [r3, #0]
10044592:	689b      	ldr	r3, [r3, #8]
10044594:	2280      	movs	r2, #128	@ 0x80
10044596:	4013      	ands	r3, r2
10044598:	d1e3      	bne.n	10044562 <SPI_read8+0xfa>
	i++; SPI_master_read8_end:
1004459a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
1004459c:	3301      	adds	r3, #1
1004459e:	647b      	str	r3, [r7, #68]	@ 0x44
100445a0:	e004      	b.n	100445ac <SPI_read8+0x144>
		while (!(spi->Instance->SR & 0x00000002UL))	{ if ( uwTick - start > timeout) { goto SPI_master_read8_end; } }
100445a2:	46c0      	nop			@ (mov r8, r8)
100445a4:	e002      	b.n	100445ac <SPI_read8+0x144>
		while (!(spi->Instance->SR & 0x00000001UL))	{ if ( uwTick - start > timeout) { goto SPI_master_read8_end; } }
100445a6:	46c0      	nop			@ (mov r8, r8)
100445a8:	e000      	b.n	100445ac <SPI_read8+0x144>
	while (spi->Instance->SR & 0x00000080UL)			{ if ( uwTick - start > timeout) { goto SPI_master_read8_end; } }
100445aa:	46c0      	nop			@ (mov r8, r8)
	spi->Instance->CR1 &= ~0x00000040UL;
100445ac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
100445ae:	681b      	ldr	r3, [r3, #0]
100445b0:	681a      	ldr	r2, [r3, #0]
100445b2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
100445b4:	681b      	ldr	r3, [r3, #0]
100445b6:	2140      	movs	r1, #64	@ 0x40
100445b8:	438a      	bics	r2, r1
100445ba:	601a      	str	r2, [r3, #0]
	return i;
100445bc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
}
100445be:	0018      	movs	r0, r3
100445c0:	46bd      	mov	sp, r7
100445c2:	b013      	add	sp, #76	@ 0x4c
100445c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
100445c6:	46c0      	nop			@ (mov r8, r8)
100445c8:	200004d4 	.word	0x200004d4

100445cc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
100445cc:	b580      	push	{r7, lr}
100445ce:	b082      	sub	sp, #8
100445d0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
100445d2:	1dfb      	adds	r3, r7, #7
100445d4:	2200      	movs	r2, #0
100445d6:	701a      	strb	r2, [r3, #0]

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
100445d8:	2003      	movs	r0, #3
100445da:	f000 f80f 	bl	100445fc <HAL_InitTick>
100445de:	1e03      	subs	r3, r0, #0
100445e0:	d003      	beq.n	100445ea <HAL_Init+0x1e>
  {
    status = HAL_ERROR;
100445e2:	1dfb      	adds	r3, r7, #7
100445e4:	2201      	movs	r2, #1
100445e6:	701a      	strb	r2, [r3, #0]
100445e8:	e001      	b.n	100445ee <HAL_Init+0x22>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
100445ea:	f7fe fc2d 	bl	10042e48 <HAL_MspInit>
  }

  /* Return function status */
  return status;
100445ee:	1dfb      	adds	r3, r7, #7
100445f0:	781b      	ldrb	r3, [r3, #0]
}
100445f2:	0018      	movs	r0, r3
100445f4:	46bd      	mov	sp, r7
100445f6:	b002      	add	sp, #8
100445f8:	bd80      	pop	{r7, pc}
	...

100445fc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
100445fc:	b590      	push	{r4, r7, lr}
100445fe:	b085      	sub	sp, #20
10044600:	af00      	add	r7, sp, #0
10044602:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
10044604:	230f      	movs	r3, #15
10044606:	18fb      	adds	r3, r7, r3
10044608:	2200      	movs	r2, #0
1004460a:	701a      	strb	r2, [r3, #0]

  if (uwTickFreq != 0U)
1004460c:	4b1d      	ldr	r3, [pc, #116]	@ (10044684 <HAL_InitTick+0x88>)
1004460e:	781b      	ldrb	r3, [r3, #0]
10044610:	2b00      	cmp	r3, #0
10044612:	d02c      	beq.n	1004466e <HAL_InitTick+0x72>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(HAL_RCC_GetSysClockFreq() / (1000U / uwTickFreq)) == 0U)
10044614:	f003 ff7c 	bl	10048510 <HAL_RCC_GetSysClockFreq>
10044618:	0004      	movs	r4, r0
1004461a:	4b1a      	ldr	r3, [pc, #104]	@ (10044684 <HAL_InitTick+0x88>)
1004461c:	781b      	ldrb	r3, [r3, #0]
1004461e:	0019      	movs	r1, r3
10044620:	23fa      	movs	r3, #250	@ 0xfa
10044622:	0098      	lsls	r0, r3, #2
10044624:	f7fb fd6e 	bl	10040104 <__udivsi3>
10044628:	0003      	movs	r3, r0
1004462a:	0019      	movs	r1, r3
1004462c:	0020      	movs	r0, r4
1004462e:	f7fb fd69 	bl	10040104 <__udivsi3>
10044632:	0003      	movs	r3, r0
10044634:	0018      	movs	r0, r3
10044636:	f000 f944 	bl	100448c2 <HAL_SYSTICK_Config>
1004463a:	1e03      	subs	r3, r0, #0
1004463c:	d112      	bne.n	10044664 <HAL_InitTick+0x68>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
1004463e:	687b      	ldr	r3, [r7, #4]
10044640:	2b03      	cmp	r3, #3
10044642:	d80a      	bhi.n	1004465a <HAL_InitTick+0x5e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0);
10044644:	6879      	ldr	r1, [r7, #4]
10044646:	2301      	movs	r3, #1
10044648:	425b      	negs	r3, r3
1004464a:	2200      	movs	r2, #0
1004464c:	0018      	movs	r0, r3
1004464e:	f000 f913 	bl	10044878 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
10044652:	4b0d      	ldr	r3, [pc, #52]	@ (10044688 <HAL_InitTick+0x8c>)
10044654:	687a      	ldr	r2, [r7, #4]
10044656:	601a      	str	r2, [r3, #0]
10044658:	e00d      	b.n	10044676 <HAL_InitTick+0x7a>
      }
      else
      {
        status = HAL_ERROR;
1004465a:	230f      	movs	r3, #15
1004465c:	18fb      	adds	r3, r7, r3
1004465e:	2201      	movs	r2, #1
10044660:	701a      	strb	r2, [r3, #0]
10044662:	e008      	b.n	10044676 <HAL_InitTick+0x7a>
      }
    }
    else
    {
      status = HAL_ERROR;
10044664:	230f      	movs	r3, #15
10044666:	18fb      	adds	r3, r7, r3
10044668:	2201      	movs	r2, #1
1004466a:	701a      	strb	r2, [r3, #0]
1004466c:	e003      	b.n	10044676 <HAL_InitTick+0x7a>
    }
  }
  else
  {
    status = HAL_ERROR;
1004466e:	230f      	movs	r3, #15
10044670:	18fb      	adds	r3, r7, r3
10044672:	2201      	movs	r2, #1
10044674:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
10044676:	230f      	movs	r3, #15
10044678:	18fb      	adds	r3, r7, r3
1004467a:	781b      	ldrb	r3, [r3, #0]
}
1004467c:	0018      	movs	r0, r3
1004467e:	46bd      	mov	sp, r7
10044680:	b005      	add	sp, #20
10044682:	bd90      	pop	{r4, r7, pc}
10044684:	2000069c 	.word	0x2000069c
10044688:	20000698 	.word	0x20000698

1004468c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
1004468c:	b580      	push	{r7, lr}
1004468e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
10044690:	4b05      	ldr	r3, [pc, #20]	@ (100446a8 <HAL_IncTick+0x1c>)
10044692:	781b      	ldrb	r3, [r3, #0]
10044694:	001a      	movs	r2, r3
10044696:	4b05      	ldr	r3, [pc, #20]	@ (100446ac <HAL_IncTick+0x20>)
10044698:	681b      	ldr	r3, [r3, #0]
1004469a:	18d2      	adds	r2, r2, r3
1004469c:	4b03      	ldr	r3, [pc, #12]	@ (100446ac <HAL_IncTick+0x20>)
1004469e:	601a      	str	r2, [r3, #0]
}
100446a0:	46c0      	nop			@ (mov r8, r8)
100446a2:	46bd      	mov	sp, r7
100446a4:	bd80      	pop	{r7, pc}
100446a6:	46c0      	nop			@ (mov r8, r8)
100446a8:	2000069c 	.word	0x2000069c
100446ac:	200004d4 	.word	0x200004d4

100446b0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
100446b0:	b580      	push	{r7, lr}
100446b2:	af00      	add	r7, sp, #0
  return uwTick;
100446b4:	4b02      	ldr	r3, [pc, #8]	@ (100446c0 <HAL_GetTick+0x10>)
100446b6:	681b      	ldr	r3, [r3, #0]
}
100446b8:	0018      	movs	r0, r3
100446ba:	46bd      	mov	sp, r7
100446bc:	bd80      	pop	{r7, pc}
100446be:	46c0      	nop			@ (mov r8, r8)
100446c0:	200004d4 	.word	0x200004d4

100446c4 <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
100446c4:	b580      	push	{r7, lr}
100446c6:	af00      	add	r7, sp, #0
  return uwTickPrio;
100446c8:	4b02      	ldr	r3, [pc, #8]	@ (100446d4 <HAL_GetTickPrio+0x10>)
100446ca:	681b      	ldr	r3, [r3, #0]
}
100446cc:	0018      	movs	r0, r3
100446ce:	46bd      	mov	sp, r7
100446d0:	bd80      	pop	{r7, pc}
100446d2:	46c0      	nop			@ (mov r8, r8)
100446d4:	20000698 	.word	0x20000698

100446d8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
100446d8:	b580      	push	{r7, lr}
100446da:	b084      	sub	sp, #16
100446dc:	af00      	add	r7, sp, #0
100446de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
100446e0:	f7ff ffe6 	bl	100446b0 <HAL_GetTick>
100446e4:	0003      	movs	r3, r0
100446e6:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
100446e8:	687b      	ldr	r3, [r7, #4]
100446ea:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
100446ec:	68fb      	ldr	r3, [r7, #12]
100446ee:	3301      	adds	r3, #1
100446f0:	d005      	beq.n	100446fe <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
100446f2:	4b0a      	ldr	r3, [pc, #40]	@ (1004471c <HAL_Delay+0x44>)
100446f4:	781b      	ldrb	r3, [r3, #0]
100446f6:	001a      	movs	r2, r3
100446f8:	68fb      	ldr	r3, [r7, #12]
100446fa:	189b      	adds	r3, r3, r2
100446fc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
100446fe:	46c0      	nop			@ (mov r8, r8)
10044700:	f7ff ffd6 	bl	100446b0 <HAL_GetTick>
10044704:	0002      	movs	r2, r0
10044706:	68bb      	ldr	r3, [r7, #8]
10044708:	1ad3      	subs	r3, r2, r3
1004470a:	68fa      	ldr	r2, [r7, #12]
1004470c:	429a      	cmp	r2, r3
1004470e:	d8f7      	bhi.n	10044700 <HAL_Delay+0x28>
  {
  }
}
10044710:	46c0      	nop			@ (mov r8, r8)
10044712:	46c0      	nop			@ (mov r8, r8)
10044714:	46bd      	mov	sp, r7
10044716:	b004      	add	sp, #16
10044718:	bd80      	pop	{r7, pc}
1004471a:	46c0      	nop			@ (mov r8, r8)
1004471c:	2000069c 	.word	0x2000069c

10044720 <__NVIC_EnableIRQ>:
{
10044720:	b580      	push	{r7, lr}
10044722:	b082      	sub	sp, #8
10044724:	af00      	add	r7, sp, #0
10044726:	0002      	movs	r2, r0
10044728:	1dfb      	adds	r3, r7, #7
1004472a:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
1004472c:	1dfb      	adds	r3, r7, #7
1004472e:	781b      	ldrb	r3, [r3, #0]
10044730:	2b7f      	cmp	r3, #127	@ 0x7f
10044732:	d809      	bhi.n	10044748 <__NVIC_EnableIRQ+0x28>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
10044734:	1dfb      	adds	r3, r7, #7
10044736:	781b      	ldrb	r3, [r3, #0]
10044738:	001a      	movs	r2, r3
1004473a:	231f      	movs	r3, #31
1004473c:	401a      	ands	r2, r3
1004473e:	4b04      	ldr	r3, [pc, #16]	@ (10044750 <__NVIC_EnableIRQ+0x30>)
10044740:	2101      	movs	r1, #1
10044742:	4091      	lsls	r1, r2
10044744:	000a      	movs	r2, r1
10044746:	601a      	str	r2, [r3, #0]
}
10044748:	46c0      	nop			@ (mov r8, r8)
1004474a:	46bd      	mov	sp, r7
1004474c:	b002      	add	sp, #8
1004474e:	bd80      	pop	{r7, pc}
10044750:	e000e100 	.word	0xe000e100

10044754 <__NVIC_SetPriority>:
{
10044754:	b590      	push	{r4, r7, lr}
10044756:	b083      	sub	sp, #12
10044758:	af00      	add	r7, sp, #0
1004475a:	0002      	movs	r2, r0
1004475c:	6039      	str	r1, [r7, #0]
1004475e:	1dfb      	adds	r3, r7, #7
10044760:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
10044762:	1dfb      	adds	r3, r7, #7
10044764:	781b      	ldrb	r3, [r3, #0]
10044766:	2b7f      	cmp	r3, #127	@ 0x7f
10044768:	d828      	bhi.n	100447bc <__NVIC_SetPriority+0x68>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
1004476a:	4a2f      	ldr	r2, [pc, #188]	@ (10044828 <__NVIC_SetPriority+0xd4>)
1004476c:	1dfb      	adds	r3, r7, #7
1004476e:	781b      	ldrb	r3, [r3, #0]
10044770:	b25b      	sxtb	r3, r3
10044772:	089b      	lsrs	r3, r3, #2
10044774:	33c0      	adds	r3, #192	@ 0xc0
10044776:	009b      	lsls	r3, r3, #2
10044778:	589b      	ldr	r3, [r3, r2]
1004477a:	1dfa      	adds	r2, r7, #7
1004477c:	7812      	ldrb	r2, [r2, #0]
1004477e:	0011      	movs	r1, r2
10044780:	2203      	movs	r2, #3
10044782:	400a      	ands	r2, r1
10044784:	00d2      	lsls	r2, r2, #3
10044786:	21ff      	movs	r1, #255	@ 0xff
10044788:	4091      	lsls	r1, r2
1004478a:	000a      	movs	r2, r1
1004478c:	43d2      	mvns	r2, r2
1004478e:	401a      	ands	r2, r3
10044790:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
10044792:	683b      	ldr	r3, [r7, #0]
10044794:	019b      	lsls	r3, r3, #6
10044796:	22ff      	movs	r2, #255	@ 0xff
10044798:	401a      	ands	r2, r3
1004479a:	1dfb      	adds	r3, r7, #7
1004479c:	781b      	ldrb	r3, [r3, #0]
1004479e:	0018      	movs	r0, r3
100447a0:	2303      	movs	r3, #3
100447a2:	4003      	ands	r3, r0
100447a4:	00db      	lsls	r3, r3, #3
100447a6:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
100447a8:	481f      	ldr	r0, [pc, #124]	@ (10044828 <__NVIC_SetPriority+0xd4>)
100447aa:	1dfb      	adds	r3, r7, #7
100447ac:	781b      	ldrb	r3, [r3, #0]
100447ae:	b25b      	sxtb	r3, r3
100447b0:	089b      	lsrs	r3, r3, #2
100447b2:	430a      	orrs	r2, r1
100447b4:	33c0      	adds	r3, #192	@ 0xc0
100447b6:	009b      	lsls	r3, r3, #2
100447b8:	501a      	str	r2, [r3, r0]
}
100447ba:	e031      	b.n	10044820 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
100447bc:	4a1b      	ldr	r2, [pc, #108]	@ (1004482c <__NVIC_SetPriority+0xd8>)
100447be:	1dfb      	adds	r3, r7, #7
100447c0:	781b      	ldrb	r3, [r3, #0]
100447c2:	0019      	movs	r1, r3
100447c4:	230f      	movs	r3, #15
100447c6:	400b      	ands	r3, r1
100447c8:	3b08      	subs	r3, #8
100447ca:	089b      	lsrs	r3, r3, #2
100447cc:	3306      	adds	r3, #6
100447ce:	009b      	lsls	r3, r3, #2
100447d0:	18d3      	adds	r3, r2, r3
100447d2:	3304      	adds	r3, #4
100447d4:	681b      	ldr	r3, [r3, #0]
100447d6:	1dfa      	adds	r2, r7, #7
100447d8:	7812      	ldrb	r2, [r2, #0]
100447da:	0011      	movs	r1, r2
100447dc:	2203      	movs	r2, #3
100447de:	400a      	ands	r2, r1
100447e0:	00d2      	lsls	r2, r2, #3
100447e2:	21ff      	movs	r1, #255	@ 0xff
100447e4:	4091      	lsls	r1, r2
100447e6:	000a      	movs	r2, r1
100447e8:	43d2      	mvns	r2, r2
100447ea:	401a      	ands	r2, r3
100447ec:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
100447ee:	683b      	ldr	r3, [r7, #0]
100447f0:	019b      	lsls	r3, r3, #6
100447f2:	22ff      	movs	r2, #255	@ 0xff
100447f4:	401a      	ands	r2, r3
100447f6:	1dfb      	adds	r3, r7, #7
100447f8:	781b      	ldrb	r3, [r3, #0]
100447fa:	0018      	movs	r0, r3
100447fc:	2303      	movs	r3, #3
100447fe:	4003      	ands	r3, r0
10044800:	00db      	lsls	r3, r3, #3
10044802:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
10044804:	4809      	ldr	r0, [pc, #36]	@ (1004482c <__NVIC_SetPriority+0xd8>)
10044806:	1dfb      	adds	r3, r7, #7
10044808:	781b      	ldrb	r3, [r3, #0]
1004480a:	001c      	movs	r4, r3
1004480c:	230f      	movs	r3, #15
1004480e:	4023      	ands	r3, r4
10044810:	3b08      	subs	r3, #8
10044812:	089b      	lsrs	r3, r3, #2
10044814:	430a      	orrs	r2, r1
10044816:	3306      	adds	r3, #6
10044818:	009b      	lsls	r3, r3, #2
1004481a:	18c3      	adds	r3, r0, r3
1004481c:	3304      	adds	r3, #4
1004481e:	601a      	str	r2, [r3, #0]
}
10044820:	46c0      	nop			@ (mov r8, r8)
10044822:	46bd      	mov	sp, r7
10044824:	b003      	add	sp, #12
10044826:	bd90      	pop	{r4, r7, pc}
10044828:	e000e100 	.word	0xe000e100
1004482c:	e000ed00 	.word	0xe000ed00

10044830 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
10044830:	b580      	push	{r7, lr}
10044832:	b082      	sub	sp, #8
10044834:	af00      	add	r7, sp, #0
10044836:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
10044838:	687b      	ldr	r3, [r7, #4]
1004483a:	1e5a      	subs	r2, r3, #1
1004483c:	2380      	movs	r3, #128	@ 0x80
1004483e:	045b      	lsls	r3, r3, #17
10044840:	429a      	cmp	r2, r3
10044842:	d301      	bcc.n	10044848 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
10044844:	2301      	movs	r3, #1
10044846:	e010      	b.n	1004486a <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
10044848:	4b0a      	ldr	r3, [pc, #40]	@ (10044874 <SysTick_Config+0x44>)
1004484a:	687a      	ldr	r2, [r7, #4]
1004484c:	3a01      	subs	r2, #1
1004484e:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
10044850:	2301      	movs	r3, #1
10044852:	425b      	negs	r3, r3
10044854:	2103      	movs	r1, #3
10044856:	0018      	movs	r0, r3
10044858:	f7ff ff7c 	bl	10044754 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
1004485c:	4b05      	ldr	r3, [pc, #20]	@ (10044874 <SysTick_Config+0x44>)
1004485e:	2200      	movs	r2, #0
10044860:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
10044862:	4b04      	ldr	r3, [pc, #16]	@ (10044874 <SysTick_Config+0x44>)
10044864:	2207      	movs	r2, #7
10044866:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
10044868:	2300      	movs	r3, #0
}
1004486a:	0018      	movs	r0, r3
1004486c:	46bd      	mov	sp, r7
1004486e:	b002      	add	sp, #8
10044870:	bd80      	pop	{r7, pc}
10044872:	46c0      	nop			@ (mov r8, r8)
10044874:	e000e010 	.word	0xe000e010

10044878 <HAL_NVIC_SetPriority>:
  *         with stm32wb0x devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
10044878:	b580      	push	{r7, lr}
1004487a:	b084      	sub	sp, #16
1004487c:	af00      	add	r7, sp, #0
1004487e:	60b9      	str	r1, [r7, #8]
10044880:	607a      	str	r2, [r7, #4]
10044882:	210f      	movs	r1, #15
10044884:	187b      	adds	r3, r7, r1
10044886:	1c02      	adds	r2, r0, #0
10044888:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
1004488a:	68ba      	ldr	r2, [r7, #8]
1004488c:	187b      	adds	r3, r7, r1
1004488e:	781b      	ldrb	r3, [r3, #0]
10044890:	b25b      	sxtb	r3, r3
10044892:	0011      	movs	r1, r2
10044894:	0018      	movs	r0, r3
10044896:	f7ff ff5d 	bl	10044754 <__NVIC_SetPriority>
}
1004489a:	46c0      	nop			@ (mov r8, r8)
1004489c:	46bd      	mov	sp, r7
1004489e:	b004      	add	sp, #16
100448a0:	bd80      	pop	{r7, pc}

100448a2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file)
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
100448a2:	b580      	push	{r7, lr}
100448a4:	b082      	sub	sp, #8
100448a6:	af00      	add	r7, sp, #0
100448a8:	0002      	movs	r2, r0
100448aa:	1dfb      	adds	r3, r7, #7
100448ac:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
100448ae:	1dfb      	adds	r3, r7, #7
100448b0:	781b      	ldrb	r3, [r3, #0]
100448b2:	b25b      	sxtb	r3, r3
100448b4:	0018      	movs	r0, r3
100448b6:	f7ff ff33 	bl	10044720 <__NVIC_EnableIRQ>
}
100448ba:	46c0      	nop			@ (mov r8, r8)
100448bc:	46bd      	mov	sp, r7
100448be:	b002      	add	sp, #8
100448c0:	bd80      	pop	{r7, pc}

100448c2 <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
100448c2:	b580      	push	{r7, lr}
100448c4:	b082      	sub	sp, #8
100448c6:	af00      	add	r7, sp, #0
100448c8:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
100448ca:	687b      	ldr	r3, [r7, #4]
100448cc:	0018      	movs	r0, r3
100448ce:	f7ff ffaf 	bl	10044830 <SysTick_Config>
100448d2:	0003      	movs	r3, r0
}
100448d4:	0018      	movs	r0, r3
100448d6:	46bd      	mov	sp, r7
100448d8:	b002      	add	sp, #8
100448da:	bd80      	pop	{r7, pc}

100448dc <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
100448dc:	b580      	push	{r7, lr}
100448de:	b086      	sub	sp, #24
100448e0:	af00      	add	r7, sp, #0
100448e2:	6078      	str	r0, [r7, #4]
100448e4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
100448e6:	2300      	movs	r3, #0
100448e8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
100448ea:	e194      	b.n	10044c16 <HAL_GPIO_Init+0x33a>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
100448ec:	683b      	ldr	r3, [r7, #0]
100448ee:	681b      	ldr	r3, [r3, #0]
100448f0:	2101      	movs	r1, #1
100448f2:	697a      	ldr	r2, [r7, #20]
100448f4:	4091      	lsls	r1, r2
100448f6:	000a      	movs	r2, r1
100448f8:	4013      	ands	r3, r2
100448fa:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
100448fc:	68fb      	ldr	r3, [r7, #12]
100448fe:	2b00      	cmp	r3, #0
10044900:	d100      	bne.n	10044904 <HAL_GPIO_Init+0x28>
10044902:	e185      	b.n	10044c10 <HAL_GPIO_Init+0x334>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
10044904:	683b      	ldr	r3, [r7, #0]
10044906:	685b      	ldr	r3, [r3, #4]
10044908:	2203      	movs	r2, #3
1004490a:	4013      	ands	r3, r2
1004490c:	2b01      	cmp	r3, #1
1004490e:	d005      	beq.n	1004491c <HAL_GPIO_Init+0x40>
10044910:	683b      	ldr	r3, [r7, #0]
10044912:	685b      	ldr	r3, [r3, #4]
10044914:	2203      	movs	r2, #3
10044916:	4013      	ands	r3, r2
10044918:	2b02      	cmp	r3, #2
1004491a:	d130      	bne.n	1004497e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
1004491c:	687b      	ldr	r3, [r7, #4]
1004491e:	689b      	ldr	r3, [r3, #8]
10044920:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
10044922:	697b      	ldr	r3, [r7, #20]
10044924:	005b      	lsls	r3, r3, #1
10044926:	2203      	movs	r2, #3
10044928:	409a      	lsls	r2, r3
1004492a:	0013      	movs	r3, r2
1004492c:	43da      	mvns	r2, r3
1004492e:	693b      	ldr	r3, [r7, #16]
10044930:	4013      	ands	r3, r2
10044932:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
10044934:	683b      	ldr	r3, [r7, #0]
10044936:	68da      	ldr	r2, [r3, #12]
10044938:	697b      	ldr	r3, [r7, #20]
1004493a:	005b      	lsls	r3, r3, #1
1004493c:	409a      	lsls	r2, r3
1004493e:	0013      	movs	r3, r2
10044940:	693a      	ldr	r2, [r7, #16]
10044942:	4313      	orrs	r3, r2
10044944:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
10044946:	687b      	ldr	r3, [r7, #4]
10044948:	693a      	ldr	r2, [r7, #16]
1004494a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
1004494c:	687b      	ldr	r3, [r7, #4]
1004494e:	685b      	ldr	r3, [r3, #4]
10044950:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
10044952:	2201      	movs	r2, #1
10044954:	697b      	ldr	r3, [r7, #20]
10044956:	409a      	lsls	r2, r3
10044958:	0013      	movs	r3, r2
1004495a:	43da      	mvns	r2, r3
1004495c:	693b      	ldr	r3, [r7, #16]
1004495e:	4013      	ands	r3, r2
10044960:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
10044962:	683b      	ldr	r3, [r7, #0]
10044964:	685b      	ldr	r3, [r3, #4]
10044966:	091b      	lsrs	r3, r3, #4
10044968:	2201      	movs	r2, #1
1004496a:	401a      	ands	r2, r3
1004496c:	697b      	ldr	r3, [r7, #20]
1004496e:	409a      	lsls	r2, r3
10044970:	0013      	movs	r3, r2
10044972:	693a      	ldr	r2, [r7, #16]
10044974:	4313      	orrs	r3, r2
10044976:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
10044978:	687b      	ldr	r3, [r7, #4]
1004497a:	693a      	ldr	r2, [r7, #16]
1004497c:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
1004497e:	683b      	ldr	r3, [r7, #0]
10044980:	685b      	ldr	r3, [r3, #4]
10044982:	2203      	movs	r2, #3
10044984:	4013      	ands	r3, r2
10044986:	2b03      	cmp	r3, #3
10044988:	d017      	beq.n	100449ba <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
1004498a:	687b      	ldr	r3, [r7, #4]
1004498c:	68db      	ldr	r3, [r3, #12]
1004498e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
10044990:	697b      	ldr	r3, [r7, #20]
10044992:	005b      	lsls	r3, r3, #1
10044994:	2203      	movs	r2, #3
10044996:	409a      	lsls	r2, r3
10044998:	0013      	movs	r3, r2
1004499a:	43da      	mvns	r2, r3
1004499c:	693b      	ldr	r3, [r7, #16]
1004499e:	4013      	ands	r3, r2
100449a0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
100449a2:	683b      	ldr	r3, [r7, #0]
100449a4:	689a      	ldr	r2, [r3, #8]
100449a6:	697b      	ldr	r3, [r7, #20]
100449a8:	005b      	lsls	r3, r3, #1
100449aa:	409a      	lsls	r2, r3
100449ac:	0013      	movs	r3, r2
100449ae:	693a      	ldr	r2, [r7, #16]
100449b0:	4313      	orrs	r3, r2
100449b2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
100449b4:	687b      	ldr	r3, [r7, #4]
100449b6:	693a      	ldr	r2, [r7, #16]
100449b8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
100449ba:	683b      	ldr	r3, [r7, #0]
100449bc:	685b      	ldr	r3, [r3, #4]
100449be:	2203      	movs	r2, #3
100449c0:	4013      	ands	r3, r2
100449c2:	2b02      	cmp	r3, #2
100449c4:	d123      	bne.n	10044a0e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
100449c6:	697b      	ldr	r3, [r7, #20]
100449c8:	08da      	lsrs	r2, r3, #3
100449ca:	687b      	ldr	r3, [r7, #4]
100449cc:	3208      	adds	r2, #8
100449ce:	0092      	lsls	r2, r2, #2
100449d0:	58d3      	ldr	r3, [r2, r3]
100449d2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
100449d4:	697b      	ldr	r3, [r7, #20]
100449d6:	2207      	movs	r2, #7
100449d8:	4013      	ands	r3, r2
100449da:	009b      	lsls	r3, r3, #2
100449dc:	220f      	movs	r2, #15
100449de:	409a      	lsls	r2, r3
100449e0:	0013      	movs	r3, r2
100449e2:	43da      	mvns	r2, r3
100449e4:	693b      	ldr	r3, [r7, #16]
100449e6:	4013      	ands	r3, r2
100449e8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
100449ea:	683b      	ldr	r3, [r7, #0]
100449ec:	691a      	ldr	r2, [r3, #16]
100449ee:	697b      	ldr	r3, [r7, #20]
100449f0:	2107      	movs	r1, #7
100449f2:	400b      	ands	r3, r1
100449f4:	009b      	lsls	r3, r3, #2
100449f6:	409a      	lsls	r2, r3
100449f8:	0013      	movs	r3, r2
100449fa:	693a      	ldr	r2, [r7, #16]
100449fc:	4313      	orrs	r3, r2
100449fe:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
10044a00:	697b      	ldr	r3, [r7, #20]
10044a02:	08da      	lsrs	r2, r3, #3
10044a04:	687b      	ldr	r3, [r7, #4]
10044a06:	3208      	adds	r2, #8
10044a08:	0092      	lsls	r2, r2, #2
10044a0a:	6939      	ldr	r1, [r7, #16]
10044a0c:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
10044a0e:	687b      	ldr	r3, [r7, #4]
10044a10:	681b      	ldr	r3, [r3, #0]
10044a12:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
10044a14:	697b      	ldr	r3, [r7, #20]
10044a16:	005b      	lsls	r3, r3, #1
10044a18:	2203      	movs	r2, #3
10044a1a:	409a      	lsls	r2, r3
10044a1c:	0013      	movs	r3, r2
10044a1e:	43da      	mvns	r2, r3
10044a20:	693b      	ldr	r3, [r7, #16]
10044a22:	4013      	ands	r3, r2
10044a24:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
10044a26:	683b      	ldr	r3, [r7, #0]
10044a28:	685b      	ldr	r3, [r3, #4]
10044a2a:	2203      	movs	r2, #3
10044a2c:	401a      	ands	r2, r3
10044a2e:	697b      	ldr	r3, [r7, #20]
10044a30:	005b      	lsls	r3, r3, #1
10044a32:	409a      	lsls	r2, r3
10044a34:	0013      	movs	r3, r2
10044a36:	693a      	ldr	r2, [r7, #16]
10044a38:	4313      	orrs	r3, r2
10044a3a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
10044a3c:	687b      	ldr	r3, [r7, #4]
10044a3e:	693a      	ldr	r2, [r7, #16]
10044a40:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
10044a42:	683b      	ldr	r3, [r7, #0]
10044a44:	685a      	ldr	r2, [r3, #4]
10044a46:	23c0      	movs	r3, #192	@ 0xc0
10044a48:	029b      	lsls	r3, r3, #10
10044a4a:	4013      	ands	r3, r2
10044a4c:	d100      	bne.n	10044a50 <HAL_GPIO_Init+0x174>
10044a4e:	e0df      	b.n	10044c10 <HAL_GPIO_Init+0x334>
      {

        /* Edge/Level line configuration */
        if ((GPIO_Init->Mode & DETECTION_TYPE) != 0x00u)
10044a50:	683b      	ldr	r3, [r7, #0]
10044a52:	685a      	ldr	r2, [r3, #4]
10044a54:	2380      	movs	r3, #128	@ 0x80
10044a56:	02db      	lsls	r3, r3, #11
10044a58:	4013      	ands	r3, r2
10044a5a:	d031      	beq.n	10044ac0 <HAL_GPIO_Init+0x1e4>
        {
          temp = SYSCFG->IO_DTR;
10044a5c:	2380      	movs	r3, #128	@ 0x80
10044a5e:	05db      	lsls	r3, r3, #23
10044a60:	68db      	ldr	r3, [r3, #12]
10044a62:	613b      	str	r3, [r7, #16]
          if (GPIOx == GPIOA)
10044a64:	687a      	ldr	r2, [r7, #4]
10044a66:	2390      	movs	r3, #144	@ 0x90
10044a68:	05db      	lsls	r3, r3, #23
10044a6a:	429a      	cmp	r2, r3
10044a6c:	d111      	bne.n	10044a92 <HAL_GPIO_Init+0x1b6>
          {
            temp &= ~(1 << position);
10044a6e:	2201      	movs	r2, #1
10044a70:	697b      	ldr	r3, [r7, #20]
10044a72:	409a      	lsls	r2, r3
10044a74:	0013      	movs	r3, r2
10044a76:	43db      	mvns	r3, r3
10044a78:	001a      	movs	r2, r3
10044a7a:	693b      	ldr	r3, [r7, #16]
10044a7c:	4013      	ands	r3, r2
10044a7e:	613b      	str	r3, [r7, #16]
            temp |= (1 << position);
10044a80:	2201      	movs	r2, #1
10044a82:	697b      	ldr	r3, [r7, #20]
10044a84:	409a      	lsls	r2, r3
10044a86:	0013      	movs	r3, r2
10044a88:	001a      	movs	r2, r3
10044a8a:	693b      	ldr	r3, [r7, #16]
10044a8c:	4313      	orrs	r3, r2
10044a8e:	613b      	str	r3, [r7, #16]
10044a90:	e012      	b.n	10044ab8 <HAL_GPIO_Init+0x1dc>
          }
          else
          {
            temp &= ~((1 << position) << 16);
10044a92:	2201      	movs	r2, #1
10044a94:	697b      	ldr	r3, [r7, #20]
10044a96:	409a      	lsls	r2, r3
10044a98:	0013      	movs	r3, r2
10044a9a:	041b      	lsls	r3, r3, #16
10044a9c:	43db      	mvns	r3, r3
10044a9e:	001a      	movs	r2, r3
10044aa0:	693b      	ldr	r3, [r7, #16]
10044aa2:	4013      	ands	r3, r2
10044aa4:	613b      	str	r3, [r7, #16]
            temp |= ((1 << position) << 16);
10044aa6:	2201      	movs	r2, #1
10044aa8:	697b      	ldr	r3, [r7, #20]
10044aaa:	409a      	lsls	r2, r3
10044aac:	0013      	movs	r3, r2
10044aae:	041b      	lsls	r3, r3, #16
10044ab0:	001a      	movs	r2, r3
10044ab2:	693b      	ldr	r3, [r7, #16]
10044ab4:	4313      	orrs	r3, r2
10044ab6:	613b      	str	r3, [r7, #16]
          }
          SYSCFG->IO_DTR = temp;
10044ab8:	2380      	movs	r3, #128	@ 0x80
10044aba:	05db      	lsls	r3, r3, #23
10044abc:	693a      	ldr	r2, [r7, #16]
10044abe:	60da      	str	r2, [r3, #12]
        }

		/* Edge selection configuration */
		if ((GPIO_Init->Mode & EDGE_SELECTION) != 0x00u)
10044ac0:	683b      	ldr	r3, [r7, #0]
10044ac2:	685a      	ldr	r2, [r3, #4]
10044ac4:	2380      	movs	r3, #128	@ 0x80
10044ac6:	035b      	lsls	r3, r3, #13
10044ac8:	4013      	ands	r3, r2
10044aca:	d031      	beq.n	10044b30 <HAL_GPIO_Init+0x254>
        {
          temp = SYSCFG->IO_IBER;
10044acc:	2380      	movs	r3, #128	@ 0x80
10044ace:	05db      	lsls	r3, r3, #23
10044ad0:	691b      	ldr	r3, [r3, #16]
10044ad2:	613b      	str	r3, [r7, #16]

          if (GPIOx == GPIOA)
10044ad4:	687a      	ldr	r2, [r7, #4]
10044ad6:	2390      	movs	r3, #144	@ 0x90
10044ad8:	05db      	lsls	r3, r3, #23
10044ada:	429a      	cmp	r2, r3
10044adc:	d111      	bne.n	10044b02 <HAL_GPIO_Init+0x226>
          {
            temp &= ~(1 << position);
10044ade:	2201      	movs	r2, #1
10044ae0:	697b      	ldr	r3, [r7, #20]
10044ae2:	409a      	lsls	r2, r3
10044ae4:	0013      	movs	r3, r2
10044ae6:	43db      	mvns	r3, r3
10044ae8:	001a      	movs	r2, r3
10044aea:	693b      	ldr	r3, [r7, #16]
10044aec:	4013      	ands	r3, r2
10044aee:	613b      	str	r3, [r7, #16]
            temp |= (1 << position);
10044af0:	2201      	movs	r2, #1
10044af2:	697b      	ldr	r3, [r7, #20]
10044af4:	409a      	lsls	r2, r3
10044af6:	0013      	movs	r3, r2
10044af8:	001a      	movs	r2, r3
10044afa:	693b      	ldr	r3, [r7, #16]
10044afc:	4313      	orrs	r3, r2
10044afe:	613b      	str	r3, [r7, #16]
10044b00:	e012      	b.n	10044b28 <HAL_GPIO_Init+0x24c>
          }
          else
          {
            temp &= ~((1 << position) << 16);
10044b02:	2201      	movs	r2, #1
10044b04:	697b      	ldr	r3, [r7, #20]
10044b06:	409a      	lsls	r2, r3
10044b08:	0013      	movs	r3, r2
10044b0a:	041b      	lsls	r3, r3, #16
10044b0c:	43db      	mvns	r3, r3
10044b0e:	001a      	movs	r2, r3
10044b10:	693b      	ldr	r3, [r7, #16]
10044b12:	4013      	ands	r3, r2
10044b14:	613b      	str	r3, [r7, #16]
            temp |= ((1 << position) << 16);
10044b16:	2201      	movs	r2, #1
10044b18:	697b      	ldr	r3, [r7, #20]
10044b1a:	409a      	lsls	r2, r3
10044b1c:	0013      	movs	r3, r2
10044b1e:	041b      	lsls	r3, r3, #16
10044b20:	001a      	movs	r2, r3
10044b22:	693b      	ldr	r3, [r7, #16]
10044b24:	4313      	orrs	r3, r2
10044b26:	613b      	str	r3, [r7, #16]
          }
          SYSCFG->IO_IBER= temp;
10044b28:	2380      	movs	r3, #128	@ 0x80
10044b2a:	05db      	lsls	r3, r3, #23
10044b2c:	693a      	ldr	r2, [r7, #16]
10044b2e:	611a      	str	r2, [r3, #16]
        }

        /* Trigger mode configuration */
		if ((GPIO_Init->Mode & TRIGGER_MODE) != 0x00u)
10044b30:	683b      	ldr	r3, [r7, #0]
10044b32:	685a      	ldr	r2, [r3, #4]
10044b34:	2380      	movs	r3, #128	@ 0x80
10044b36:	03db      	lsls	r3, r3, #15
10044b38:	4013      	ands	r3, r2
10044b3a:	d031      	beq.n	10044ba0 <HAL_GPIO_Init+0x2c4>
        {
          temp = SYSCFG->IO_IEVR;
10044b3c:	2380      	movs	r3, #128	@ 0x80
10044b3e:	05db      	lsls	r3, r3, #23
10044b40:	695b      	ldr	r3, [r3, #20]
10044b42:	613b      	str	r3, [r7, #16]

          if (GPIOx == GPIOA)
10044b44:	687a      	ldr	r2, [r7, #4]
10044b46:	2390      	movs	r3, #144	@ 0x90
10044b48:	05db      	lsls	r3, r3, #23
10044b4a:	429a      	cmp	r2, r3
10044b4c:	d111      	bne.n	10044b72 <HAL_GPIO_Init+0x296>
          {
            temp &= ~(1 << position);
10044b4e:	2201      	movs	r2, #1
10044b50:	697b      	ldr	r3, [r7, #20]
10044b52:	409a      	lsls	r2, r3
10044b54:	0013      	movs	r3, r2
10044b56:	43db      	mvns	r3, r3
10044b58:	001a      	movs	r2, r3
10044b5a:	693b      	ldr	r3, [r7, #16]
10044b5c:	4013      	ands	r3, r2
10044b5e:	613b      	str	r3, [r7, #16]
            temp |= (1 << position);
10044b60:	2201      	movs	r2, #1
10044b62:	697b      	ldr	r3, [r7, #20]
10044b64:	409a      	lsls	r2, r3
10044b66:	0013      	movs	r3, r2
10044b68:	001a      	movs	r2, r3
10044b6a:	693b      	ldr	r3, [r7, #16]
10044b6c:	4313      	orrs	r3, r2
10044b6e:	613b      	str	r3, [r7, #16]
10044b70:	e012      	b.n	10044b98 <HAL_GPIO_Init+0x2bc>
          }
          else
          {
            temp &= ~((1 << position) << 16);
10044b72:	2201      	movs	r2, #1
10044b74:	697b      	ldr	r3, [r7, #20]
10044b76:	409a      	lsls	r2, r3
10044b78:	0013      	movs	r3, r2
10044b7a:	041b      	lsls	r3, r3, #16
10044b7c:	43db      	mvns	r3, r3
10044b7e:	001a      	movs	r2, r3
10044b80:	693b      	ldr	r3, [r7, #16]
10044b82:	4013      	ands	r3, r2
10044b84:	613b      	str	r3, [r7, #16]
            temp |= ((1 << position) << 16);
10044b86:	2201      	movs	r2, #1
10044b88:	697b      	ldr	r3, [r7, #20]
10044b8a:	409a      	lsls	r2, r3
10044b8c:	0013      	movs	r3, r2
10044b8e:	041b      	lsls	r3, r3, #16
10044b90:	001a      	movs	r2, r3
10044b92:	693b      	ldr	r3, [r7, #16]
10044b94:	4313      	orrs	r3, r2
10044b96:	613b      	str	r3, [r7, #16]
          }
          SYSCFG->IO_IEVR= temp;
10044b98:	2380      	movs	r3, #128	@ 0x80
10044b9a:	05db      	lsls	r3, r3, #23
10044b9c:	693a      	ldr	r2, [r7, #16]
10044b9e:	615a      	str	r2, [r3, #20]
        }

        /* Enable the specified EXTI interrupt line */
        if ((GPIO_Init->Mode & EXTI_IT) == EXTI_IT)
10044ba0:	683b      	ldr	r3, [r7, #0]
10044ba2:	685a      	ldr	r2, [r3, #4]
10044ba4:	2380      	movs	r3, #128	@ 0x80
10044ba6:	025b      	lsls	r3, r3, #9
10044ba8:	4013      	ands	r3, r2
10044baa:	d031      	beq.n	10044c10 <HAL_GPIO_Init+0x334>
        {
          temp = SYSCFG->IO_IER;
10044bac:	2380      	movs	r3, #128	@ 0x80
10044bae:	05db      	lsls	r3, r3, #23
10044bb0:	699b      	ldr	r3, [r3, #24]
10044bb2:	613b      	str	r3, [r7, #16]

          if (GPIOx == GPIOA)
10044bb4:	687a      	ldr	r2, [r7, #4]
10044bb6:	2390      	movs	r3, #144	@ 0x90
10044bb8:	05db      	lsls	r3, r3, #23
10044bba:	429a      	cmp	r2, r3
10044bbc:	d111      	bne.n	10044be2 <HAL_GPIO_Init+0x306>
          {
            temp &= ~(1 << position);
10044bbe:	2201      	movs	r2, #1
10044bc0:	697b      	ldr	r3, [r7, #20]
10044bc2:	409a      	lsls	r2, r3
10044bc4:	0013      	movs	r3, r2
10044bc6:	43db      	mvns	r3, r3
10044bc8:	001a      	movs	r2, r3
10044bca:	693b      	ldr	r3, [r7, #16]
10044bcc:	4013      	ands	r3, r2
10044bce:	613b      	str	r3, [r7, #16]
            temp |= (1 << position);
10044bd0:	2201      	movs	r2, #1
10044bd2:	697b      	ldr	r3, [r7, #20]
10044bd4:	409a      	lsls	r2, r3
10044bd6:	0013      	movs	r3, r2
10044bd8:	001a      	movs	r2, r3
10044bda:	693b      	ldr	r3, [r7, #16]
10044bdc:	4313      	orrs	r3, r2
10044bde:	613b      	str	r3, [r7, #16]
10044be0:	e012      	b.n	10044c08 <HAL_GPIO_Init+0x32c>
          }
          else
          {
            temp &= ~((1 << position) << 16);
10044be2:	2201      	movs	r2, #1
10044be4:	697b      	ldr	r3, [r7, #20]
10044be6:	409a      	lsls	r2, r3
10044be8:	0013      	movs	r3, r2
10044bea:	041b      	lsls	r3, r3, #16
10044bec:	43db      	mvns	r3, r3
10044bee:	001a      	movs	r2, r3
10044bf0:	693b      	ldr	r3, [r7, #16]
10044bf2:	4013      	ands	r3, r2
10044bf4:	613b      	str	r3, [r7, #16]
            temp |= ((1 << position) << 16);
10044bf6:	2201      	movs	r2, #1
10044bf8:	697b      	ldr	r3, [r7, #20]
10044bfa:	409a      	lsls	r2, r3
10044bfc:	0013      	movs	r3, r2
10044bfe:	041b      	lsls	r3, r3, #16
10044c00:	001a      	movs	r2, r3
10044c02:	693b      	ldr	r3, [r7, #16]
10044c04:	4313      	orrs	r3, r2
10044c06:	613b      	str	r3, [r7, #16]
          }
          SYSCFG->IO_IER= temp;
10044c08:	2380      	movs	r3, #128	@ 0x80
10044c0a:	05db      	lsls	r3, r3, #23
10044c0c:	693a      	ldr	r2, [r7, #16]
10044c0e:	619a      	str	r2, [r3, #24]
        }
      }
    }

    position++;
10044c10:	697b      	ldr	r3, [r7, #20]
10044c12:	3301      	adds	r3, #1
10044c14:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
10044c16:	683b      	ldr	r3, [r7, #0]
10044c18:	681a      	ldr	r2, [r3, #0]
10044c1a:	697b      	ldr	r3, [r7, #20]
10044c1c:	40da      	lsrs	r2, r3
10044c1e:	1e13      	subs	r3, r2, #0
10044c20:	d000      	beq.n	10044c24 <HAL_GPIO_Init+0x348>
10044c22:	e663      	b.n	100448ec <HAL_GPIO_Init+0x10>
  }
}
10044c24:	46c0      	nop			@ (mov r8, r8)
10044c26:	46c0      	nop			@ (mov r8, r8)
10044c28:	46bd      	mov	sp, r7
10044c2a:	b006      	add	sp, #24
10044c2c:	bd80      	pop	{r7, pc}

10044c2e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
10044c2e:	b580      	push	{r7, lr}
10044c30:	b082      	sub	sp, #8
10044c32:	af00      	add	r7, sp, #0
10044c34:	6078      	str	r0, [r7, #4]
10044c36:	0008      	movs	r0, r1
10044c38:	0011      	movs	r1, r2
10044c3a:	1cbb      	adds	r3, r7, #2
10044c3c:	1c02      	adds	r2, r0, #0
10044c3e:	801a      	strh	r2, [r3, #0]
10044c40:	1c7b      	adds	r3, r7, #1
10044c42:	1c0a      	adds	r2, r1, #0
10044c44:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
10044c46:	1c7b      	adds	r3, r7, #1
10044c48:	781b      	ldrb	r3, [r3, #0]
10044c4a:	2b00      	cmp	r3, #0
10044c4c:	d004      	beq.n	10044c58 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
10044c4e:	1cbb      	adds	r3, r7, #2
10044c50:	881a      	ldrh	r2, [r3, #0]
10044c52:	687b      	ldr	r3, [r7, #4]
10044c54:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
10044c56:	e003      	b.n	10044c60 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
10044c58:	1cbb      	adds	r3, r7, #2
10044c5a:	881a      	ldrh	r2, [r3, #0]
10044c5c:	687b      	ldr	r3, [r7, #4]
10044c5e:	629a      	str	r2, [r3, #40]	@ 0x28
}
10044c60:	46c0      	nop			@ (mov r8, r8)
10044c62:	46bd      	mov	sp, r7
10044c64:	b002      	add	sp, #8
10044c66:	bd80      	pop	{r7, pc}

10044c68 <LL_RADIO_SetRadioConfigurationAddressPointer>:
  * @rmtoll WORD0          RADIOCONFIGPTR       LL_RADIO_SetRadioConfigurationAddressPointer
  * @param  value
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_SetRadioConfigurationAddressPointer(uint32_t value)
{
10044c68:	b580      	push	{r7, lr}
10044c6a:	b082      	sub	sp, #8
10044c6c:	af00      	add	r7, sp, #0
10044c6e:	6078      	str	r0, [r7, #4]
  MODIFY_REG_FIELD(BLUEGLOBWORD->WORD0, GLOBAL_WORD0_RADIOCONFIGPTR, value);
10044c70:	4b04      	ldr	r3, [pc, #16]	@ (10044c84 <LL_RADIO_SetRadioConfigurationAddressPointer+0x1c>)
10044c72:	681b      	ldr	r3, [r3, #0]
10044c74:	4b03      	ldr	r3, [pc, #12]	@ (10044c84 <LL_RADIO_SetRadioConfigurationAddressPointer+0x1c>)
10044c76:	687a      	ldr	r2, [r7, #4]
10044c78:	601a      	str	r2, [r3, #0]
}
10044c7a:	46c0      	nop			@ (mov r8, r8)
10044c7c:	46bd      	mov	sp, r7
10044c7e:	b002      	add	sp, #8
10044c80:	bd80      	pop	{r7, pc}
10044c82:	46c0      	nop			@ (mov r8, r8)
10044c84:	200000c0 	.word	0x200000c0

10044c88 <LL_RADIO_SetWakeupInitDelay>:
  * @rmtoll WORD1          WAKEUPINITDELAY       LL_RADIO_SetWakeupInitDelay
  * @param  value
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_SetWakeupInitDelay(uint32_t value)
{
10044c88:	b580      	push	{r7, lr}
10044c8a:	b082      	sub	sp, #8
10044c8c:	af00      	add	r7, sp, #0
10044c8e:	6078      	str	r0, [r7, #4]
  MODIFY_REG_FIELD(BLUEGLOBWORD->WORD1, GLOBAL_WORD1_WAKEUPINITDELAY, value);
10044c90:	4b07      	ldr	r3, [pc, #28]	@ (10044cb0 <LL_RADIO_SetWakeupInitDelay+0x28>)
10044c92:	685b      	ldr	r3, [r3, #4]
10044c94:	4a07      	ldr	r2, [pc, #28]	@ (10044cb4 <LL_RADIO_SetWakeupInitDelay+0x2c>)
10044c96:	4013      	ands	r3, r2
10044c98:	0019      	movs	r1, r3
10044c9a:	687b      	ldr	r3, [r7, #4]
10044c9c:	021b      	lsls	r3, r3, #8
10044c9e:	041b      	lsls	r3, r3, #16
10044ca0:	0c1a      	lsrs	r2, r3, #16
10044ca2:	4b03      	ldr	r3, [pc, #12]	@ (10044cb0 <LL_RADIO_SetWakeupInitDelay+0x28>)
10044ca4:	430a      	orrs	r2, r1
10044ca6:	605a      	str	r2, [r3, #4]
}
10044ca8:	46c0      	nop			@ (mov r8, r8)
10044caa:	46bd      	mov	sp, r7
10044cac:	b002      	add	sp, #8
10044cae:	bd80      	pop	{r7, pc}
10044cb0:	200000c0 	.word	0x200000c0
10044cb4:	ffff00ff 	.word	0xffff00ff

10044cb8 <LL_RADIO_SetTimer12InitDelayCal>:
  * @rmtoll WORD1          TIMER12INITDELAYCAL       LL_RADIO_SetTimer12InitDelayCal
  * @param  value
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_SetTimer12InitDelayCal(uint32_t value)
{
10044cb8:	b580      	push	{r7, lr}
10044cba:	b082      	sub	sp, #8
10044cbc:	af00      	add	r7, sp, #0
10044cbe:	6078      	str	r0, [r7, #4]
  MODIFY_REG_FIELD(BLUEGLOBWORD->WORD1, GLOBAL_WORD1_TIMER12INITDELAYCAL, value);
10044cc0:	4b08      	ldr	r3, [pc, #32]	@ (10044ce4 <LL_RADIO_SetTimer12InitDelayCal+0x2c>)
10044cc2:	685b      	ldr	r3, [r3, #4]
10044cc4:	4a08      	ldr	r2, [pc, #32]	@ (10044ce8 <LL_RADIO_SetTimer12InitDelayCal+0x30>)
10044cc6:	4013      	ands	r3, r2
10044cc8:	0019      	movs	r1, r3
10044cca:	687b      	ldr	r3, [r7, #4]
10044ccc:	041a      	lsls	r2, r3, #16
10044cce:	23ff      	movs	r3, #255	@ 0xff
10044cd0:	041b      	lsls	r3, r3, #16
10044cd2:	401a      	ands	r2, r3
10044cd4:	4b03      	ldr	r3, [pc, #12]	@ (10044ce4 <LL_RADIO_SetTimer12InitDelayCal+0x2c>)
10044cd6:	430a      	orrs	r2, r1
10044cd8:	605a      	str	r2, [r3, #4]
}
10044cda:	46c0      	nop			@ (mov r8, r8)
10044cdc:	46bd      	mov	sp, r7
10044cde:	b002      	add	sp, #8
10044ce0:	bd80      	pop	{r7, pc}
10044ce2:	46c0      	nop			@ (mov r8, r8)
10044ce4:	200000c0 	.word	0x200000c0
10044ce8:	ff00ffff 	.word	0xff00ffff

10044cec <LL_RADIO_SetTimer12InitDelayNoCal>:
  * @rmtoll WORD1          TIMER2INITDELAYNOCAL       LL_RADIO_SetTimer12InitDelayNoCal
  * @param  value
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_SetTimer12InitDelayNoCal(uint32_t value)
{
10044cec:	b580      	push	{r7, lr}
10044cee:	b082      	sub	sp, #8
10044cf0:	af00      	add	r7, sp, #0
10044cf2:	6078      	str	r0, [r7, #4]
  MODIFY_REG_FIELD(BLUEGLOBWORD->WORD1, GLOBAL_WORD1_TIMER2INITDELAYNOCAL, value);
10044cf4:	4b06      	ldr	r3, [pc, #24]	@ (10044d10 <LL_RADIO_SetTimer12InitDelayNoCal+0x24>)
10044cf6:	685b      	ldr	r3, [r3, #4]
10044cf8:	021b      	lsls	r3, r3, #8
10044cfa:	0a19      	lsrs	r1, r3, #8
10044cfc:	687b      	ldr	r3, [r7, #4]
10044cfe:	061a      	lsls	r2, r3, #24
10044d00:	4b03      	ldr	r3, [pc, #12]	@ (10044d10 <LL_RADIO_SetTimer12InitDelayNoCal+0x24>)
10044d02:	430a      	orrs	r2, r1
10044d04:	605a      	str	r2, [r3, #4]
}
10044d06:	46c0      	nop			@ (mov r8, r8)
10044d08:	46bd      	mov	sp, r7
10044d0a:	b002      	add	sp, #8
10044d0c:	bd80      	pop	{r7, pc}
10044d0e:	46c0      	nop			@ (mov r8, r8)
10044d10:	200000c0 	.word	0x200000c0

10044d14 <LL_RADIO_SetTransmitCalDelayChk>:
  * @rmtoll WORD2          TRANSMITCALDELAYCHK       LL_RADIO_SetTransmitCalDelayChk
  * @param  value
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_SetTransmitCalDelayChk(uint32_t value)
{
10044d14:	b580      	push	{r7, lr}
10044d16:	b082      	sub	sp, #8
10044d18:	af00      	add	r7, sp, #0
10044d1a:	6078      	str	r0, [r7, #4]
  MODIFY_REG_FIELD(BLUEGLOBWORD->WORD2, GLOBAL_WORD2_TRANSMITCALDELAYCHK, value);
10044d1c:	4b07      	ldr	r3, [pc, #28]	@ (10044d3c <LL_RADIO_SetTransmitCalDelayChk+0x28>)
10044d1e:	689b      	ldr	r3, [r3, #8]
10044d20:	22ff      	movs	r2, #255	@ 0xff
10044d22:	4393      	bics	r3, r2
10044d24:	0019      	movs	r1, r3
10044d26:	687b      	ldr	r3, [r7, #4]
10044d28:	22ff      	movs	r2, #255	@ 0xff
10044d2a:	401a      	ands	r2, r3
10044d2c:	4b03      	ldr	r3, [pc, #12]	@ (10044d3c <LL_RADIO_SetTransmitCalDelayChk+0x28>)
10044d2e:	430a      	orrs	r2, r1
10044d30:	609a      	str	r2, [r3, #8]
}
10044d32:	46c0      	nop			@ (mov r8, r8)
10044d34:	46bd      	mov	sp, r7
10044d36:	b002      	add	sp, #8
10044d38:	bd80      	pop	{r7, pc}
10044d3a:	46c0      	nop			@ (mov r8, r8)
10044d3c:	200000c0 	.word	0x200000c0

10044d40 <LL_RADIO_SetTransmitNoCalDelayChk>:
  * @rmtoll WORD2          TRANSMITNOCALDELAYCHK       LL_RADIO_SetTransmitNoCalDelayChk
  * @param  value
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_SetTransmitNoCalDelayChk(uint32_t value)
{
10044d40:	b580      	push	{r7, lr}
10044d42:	b082      	sub	sp, #8
10044d44:	af00      	add	r7, sp, #0
10044d46:	6078      	str	r0, [r7, #4]
  MODIFY_REG_FIELD(BLUEGLOBWORD->WORD2, GLOBAL_WORD2_TRANSMITNOCALDELAYCHK, value);
10044d48:	4b07      	ldr	r3, [pc, #28]	@ (10044d68 <LL_RADIO_SetTransmitNoCalDelayChk+0x28>)
10044d4a:	689b      	ldr	r3, [r3, #8]
10044d4c:	4a07      	ldr	r2, [pc, #28]	@ (10044d6c <LL_RADIO_SetTransmitNoCalDelayChk+0x2c>)
10044d4e:	4013      	ands	r3, r2
10044d50:	0019      	movs	r1, r3
10044d52:	687b      	ldr	r3, [r7, #4]
10044d54:	021b      	lsls	r3, r3, #8
10044d56:	041b      	lsls	r3, r3, #16
10044d58:	0c1a      	lsrs	r2, r3, #16
10044d5a:	4b03      	ldr	r3, [pc, #12]	@ (10044d68 <LL_RADIO_SetTransmitNoCalDelayChk+0x28>)
10044d5c:	430a      	orrs	r2, r1
10044d5e:	609a      	str	r2, [r3, #8]
}
10044d60:	46c0      	nop			@ (mov r8, r8)
10044d62:	46bd      	mov	sp, r7
10044d64:	b002      	add	sp, #8
10044d66:	bd80      	pop	{r7, pc}
10044d68:	200000c0 	.word	0x200000c0
10044d6c:	ffff00ff 	.word	0xffff00ff

10044d70 <LL_RADIO_SetReceivedCalDelayChk>:
  * @rmtoll WORD2          RECEIVECALDELAYCHK       LL_RADIO_SetReceivedCalDelayChk
  * @param  value
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_SetReceivedCalDelayChk(uint32_t value)
{
10044d70:	b580      	push	{r7, lr}
10044d72:	b082      	sub	sp, #8
10044d74:	af00      	add	r7, sp, #0
10044d76:	6078      	str	r0, [r7, #4]
  MODIFY_REG_FIELD(BLUEGLOBWORD->WORD2, GLOBAL_WORD2_RECEIVECALDELAYCHK, value);
10044d78:	4b08      	ldr	r3, [pc, #32]	@ (10044d9c <LL_RADIO_SetReceivedCalDelayChk+0x2c>)
10044d7a:	689b      	ldr	r3, [r3, #8]
10044d7c:	4a08      	ldr	r2, [pc, #32]	@ (10044da0 <LL_RADIO_SetReceivedCalDelayChk+0x30>)
10044d7e:	4013      	ands	r3, r2
10044d80:	0019      	movs	r1, r3
10044d82:	687b      	ldr	r3, [r7, #4]
10044d84:	041a      	lsls	r2, r3, #16
10044d86:	23ff      	movs	r3, #255	@ 0xff
10044d88:	041b      	lsls	r3, r3, #16
10044d8a:	401a      	ands	r2, r3
10044d8c:	4b03      	ldr	r3, [pc, #12]	@ (10044d9c <LL_RADIO_SetReceivedCalDelayChk+0x2c>)
10044d8e:	430a      	orrs	r2, r1
10044d90:	609a      	str	r2, [r3, #8]
}
10044d92:	46c0      	nop			@ (mov r8, r8)
10044d94:	46bd      	mov	sp, r7
10044d96:	b002      	add	sp, #8
10044d98:	bd80      	pop	{r7, pc}
10044d9a:	46c0      	nop			@ (mov r8, r8)
10044d9c:	200000c0 	.word	0x200000c0
10044da0:	ff00ffff 	.word	0xff00ffff

10044da4 <LL_RADIO_SetReceivedNoCalDelayChk>:
  * @rmtoll WORD2          RECEIVENOCALDELAYCHK       LL_RADIO_SetReceivedNoCalDelayChk
  * @param  value
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_SetReceivedNoCalDelayChk(uint32_t value)
{
10044da4:	b580      	push	{r7, lr}
10044da6:	b082      	sub	sp, #8
10044da8:	af00      	add	r7, sp, #0
10044daa:	6078      	str	r0, [r7, #4]
  MODIFY_REG_FIELD(BLUEGLOBWORD->WORD2, GLOBAL_WORD2_RECEIVENOCALDELAYCHK, value);
10044dac:	4b06      	ldr	r3, [pc, #24]	@ (10044dc8 <LL_RADIO_SetReceivedNoCalDelayChk+0x24>)
10044dae:	689b      	ldr	r3, [r3, #8]
10044db0:	021b      	lsls	r3, r3, #8
10044db2:	0a19      	lsrs	r1, r3, #8
10044db4:	687b      	ldr	r3, [r7, #4]
10044db6:	061a      	lsls	r2, r3, #24
10044db8:	4b03      	ldr	r3, [pc, #12]	@ (10044dc8 <LL_RADIO_SetReceivedNoCalDelayChk+0x24>)
10044dba:	430a      	orrs	r2, r1
10044dbc:	609a      	str	r2, [r3, #8]
}
10044dbe:	46c0      	nop			@ (mov r8, r8)
10044dc0:	46bd      	mov	sp, r7
10044dc2:	b002      	add	sp, #8
10044dc4:	bd80      	pop	{r7, pc}
10044dc6:	46c0      	nop			@ (mov r8, r8)
10044dc8:	200000c0 	.word	0x200000c0

10044dcc <LL_RADIO_SetConfigurationEndDuration>:
  * @rmtoll WORD3          CONFIGENDDURATION       LL_RADIO_SetConfigurationEndDuration
  * @param  value
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_SetConfigurationEndDuration(uint32_t value)
{
10044dcc:	b580      	push	{r7, lr}
10044dce:	b082      	sub	sp, #8
10044dd0:	af00      	add	r7, sp, #0
10044dd2:	6078      	str	r0, [r7, #4]
  MODIFY_REG_FIELD(BLUEGLOBWORD->WORD3, GLOBAL_WORD3_CONFIGENDDURATION, value);
10044dd4:	4b07      	ldr	r3, [pc, #28]	@ (10044df4 <LL_RADIO_SetConfigurationEndDuration+0x28>)
10044dd6:	68db      	ldr	r3, [r3, #12]
10044dd8:	22ff      	movs	r2, #255	@ 0xff
10044dda:	4393      	bics	r3, r2
10044ddc:	0019      	movs	r1, r3
10044dde:	687b      	ldr	r3, [r7, #4]
10044de0:	22ff      	movs	r2, #255	@ 0xff
10044de2:	401a      	ands	r2, r3
10044de4:	4b03      	ldr	r3, [pc, #12]	@ (10044df4 <LL_RADIO_SetConfigurationEndDuration+0x28>)
10044de6:	430a      	orrs	r2, r1
10044de8:	60da      	str	r2, [r3, #12]
}
10044dea:	46c0      	nop			@ (mov r8, r8)
10044dec:	46bd      	mov	sp, r7
10044dee:	b002      	add	sp, #8
10044df0:	bd80      	pop	{r7, pc}
10044df2:	46c0      	nop			@ (mov r8, r8)
10044df4:	200000c0 	.word	0x200000c0

10044df8 <LL_RADIO_SetTxDataReadyCheck>:
  * @rmtoll WORD3          TXDATAREADYCHECK       LL_RADIO_SetTxDataReadyCheck
  * @param  value
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_SetTxDataReadyCheck(uint32_t value)
{
10044df8:	b580      	push	{r7, lr}
10044dfa:	b082      	sub	sp, #8
10044dfc:	af00      	add	r7, sp, #0
10044dfe:	6078      	str	r0, [r7, #4]
  MODIFY_REG_FIELD(BLUEGLOBWORD->WORD3, GLOBAL_WORD3_TXDATAREADYCHECK, value);
10044e00:	4b07      	ldr	r3, [pc, #28]	@ (10044e20 <LL_RADIO_SetTxDataReadyCheck+0x28>)
10044e02:	68db      	ldr	r3, [r3, #12]
10044e04:	4a07      	ldr	r2, [pc, #28]	@ (10044e24 <LL_RADIO_SetTxDataReadyCheck+0x2c>)
10044e06:	4013      	ands	r3, r2
10044e08:	0019      	movs	r1, r3
10044e0a:	687b      	ldr	r3, [r7, #4]
10044e0c:	021b      	lsls	r3, r3, #8
10044e0e:	041b      	lsls	r3, r3, #16
10044e10:	0c1a      	lsrs	r2, r3, #16
10044e12:	4b03      	ldr	r3, [pc, #12]	@ (10044e20 <LL_RADIO_SetTxDataReadyCheck+0x28>)
10044e14:	430a      	orrs	r2, r1
10044e16:	60da      	str	r2, [r3, #12]
}
10044e18:	46c0      	nop			@ (mov r8, r8)
10044e1a:	46bd      	mov	sp, r7
10044e1c:	b002      	add	sp, #8
10044e1e:	bd80      	pop	{r7, pc}
10044e20:	200000c0 	.word	0x200000c0
10044e24:	ffff00ff 	.word	0xffff00ff

10044e28 <LL_RADIO_SetTxDelayStart>:
  * @rmtoll WORD3          TXDELAYSTART       LL_RADIO_SetTxDelayStart
  * @param  value
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_SetTxDelayStart(uint32_t value)
{
10044e28:	b580      	push	{r7, lr}
10044e2a:	b082      	sub	sp, #8
10044e2c:	af00      	add	r7, sp, #0
10044e2e:	6078      	str	r0, [r7, #4]
  MODIFY_REG_FIELD(BLUEGLOBWORD->WORD3, GLOBAL_WORD3_TXDELAYSTART, value);
10044e30:	4b08      	ldr	r3, [pc, #32]	@ (10044e54 <LL_RADIO_SetTxDelayStart+0x2c>)
10044e32:	68db      	ldr	r3, [r3, #12]
10044e34:	4a08      	ldr	r2, [pc, #32]	@ (10044e58 <LL_RADIO_SetTxDelayStart+0x30>)
10044e36:	4013      	ands	r3, r2
10044e38:	0019      	movs	r1, r3
10044e3a:	687b      	ldr	r3, [r7, #4]
10044e3c:	041a      	lsls	r2, r3, #16
10044e3e:	23ff      	movs	r3, #255	@ 0xff
10044e40:	041b      	lsls	r3, r3, #16
10044e42:	401a      	ands	r2, r3
10044e44:	4b03      	ldr	r3, [pc, #12]	@ (10044e54 <LL_RADIO_SetTxDelayStart+0x2c>)
10044e46:	430a      	orrs	r2, r1
10044e48:	60da      	str	r2, [r3, #12]
}
10044e4a:	46c0      	nop			@ (mov r8, r8)
10044e4c:	46bd      	mov	sp, r7
10044e4e:	b002      	add	sp, #8
10044e50:	bd80      	pop	{r7, pc}
10044e52:	46c0      	nop			@ (mov r8, r8)
10044e54:	200000c0 	.word	0x200000c0
10044e58:	ff00ffff 	.word	0xff00ffff

10044e5c <LL_RADIO_SetTxDelayEnd>:
  * @rmtoll WORD3          TXDELAYEND       LL_RADIO_SetTxDelayEnd
  * @param  value
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_SetTxDelayEnd(uint32_t value)
{
10044e5c:	b580      	push	{r7, lr}
10044e5e:	b082      	sub	sp, #8
10044e60:	af00      	add	r7, sp, #0
10044e62:	6078      	str	r0, [r7, #4]
  MODIFY_REG_FIELD(BLUEGLOBWORD->WORD3, GLOBAL_WORD3_TXDELAYEND, value);
10044e64:	4b08      	ldr	r3, [pc, #32]	@ (10044e88 <LL_RADIO_SetTxDelayEnd+0x2c>)
10044e66:	68db      	ldr	r3, [r3, #12]
10044e68:	4a08      	ldr	r2, [pc, #32]	@ (10044e8c <LL_RADIO_SetTxDelayEnd+0x30>)
10044e6a:	4013      	ands	r3, r2
10044e6c:	0019      	movs	r1, r3
10044e6e:	687b      	ldr	r3, [r7, #4]
10044e70:	061a      	lsls	r2, r3, #24
10044e72:	23fc      	movs	r3, #252	@ 0xfc
10044e74:	059b      	lsls	r3, r3, #22
10044e76:	401a      	ands	r2, r3
10044e78:	4b03      	ldr	r3, [pc, #12]	@ (10044e88 <LL_RADIO_SetTxDelayEnd+0x2c>)
10044e7a:	430a      	orrs	r2, r1
10044e7c:	60da      	str	r2, [r3, #12]
}
10044e7e:	46c0      	nop			@ (mov r8, r8)
10044e80:	46bd      	mov	sp, r7
10044e82:	b002      	add	sp, #8
10044e84:	bd80      	pop	{r7, pc}
10044e86:	46c0      	nop			@ (mov r8, r8)
10044e88:	200000c0 	.word	0x200000c0
10044e8c:	c0ffffff 	.word	0xc0ffffff

10044e90 <LL_RADIO_SetTransmissionReadyTimeout>:
  * @rmtoll WORD4          TXREADYTIMEOUT       LL_RADIO_SetTransmissionReadyTimeout
  * @param  value
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_SetTransmissionReadyTimeout(uint32_t value)
{
10044e90:	b580      	push	{r7, lr}
10044e92:	b082      	sub	sp, #8
10044e94:	af00      	add	r7, sp, #0
10044e96:	6078      	str	r0, [r7, #4]
  MODIFY_REG_FIELD(BLUEGLOBWORD->WORD4, GLOBAL_WORD4_TXREADYTIMEOUT, value);
10044e98:	4b07      	ldr	r3, [pc, #28]	@ (10044eb8 <LL_RADIO_SetTransmissionReadyTimeout+0x28>)
10044e9a:	691b      	ldr	r3, [r3, #16]
10044e9c:	22ff      	movs	r2, #255	@ 0xff
10044e9e:	4393      	bics	r3, r2
10044ea0:	0019      	movs	r1, r3
10044ea2:	687b      	ldr	r3, [r7, #4]
10044ea4:	22ff      	movs	r2, #255	@ 0xff
10044ea6:	401a      	ands	r2, r3
10044ea8:	4b03      	ldr	r3, [pc, #12]	@ (10044eb8 <LL_RADIO_SetTransmissionReadyTimeout+0x28>)
10044eaa:	430a      	orrs	r2, r1
10044eac:	611a      	str	r2, [r3, #16]
}
10044eae:	46c0      	nop			@ (mov r8, r8)
10044eb0:	46bd      	mov	sp, r7
10044eb2:	b002      	add	sp, #8
10044eb4:	bd80      	pop	{r7, pc}
10044eb6:	46c0      	nop			@ (mov r8, r8)
10044eb8:	200000c0 	.word	0x200000c0

10044ebc <LL_RADIO_ChkFlagAutoclearEnable_Enable>:
  * @brief  RADIO Enable
  * @rmtoll WORD5          CHKFLAGAUTOCLEARENA            LL_RADIO_ChkFlagAutoclearEnable_Enable
  * @retval uint32_t
  */
__STATIC_INLINE void LL_RADIO_ChkFlagAutoclearEnable_Enable(void)
{
10044ebc:	b580      	push	{r7, lr}
10044ebe:	af00      	add	r7, sp, #0
  SET_BIT(BLUEGLOBWORD->WORD5, GLOBAL_WORD5_CHKFLAGAUTOCLEARENA);
10044ec0:	4b04      	ldr	r3, [pc, #16]	@ (10044ed4 <LL_RADIO_ChkFlagAutoclearEnable_Enable+0x18>)
10044ec2:	695a      	ldr	r2, [r3, #20]
10044ec4:	4b03      	ldr	r3, [pc, #12]	@ (10044ed4 <LL_RADIO_ChkFlagAutoclearEnable_Enable+0x18>)
10044ec6:	2104      	movs	r1, #4
10044ec8:	430a      	orrs	r2, r1
10044eca:	615a      	str	r2, [r3, #20]
}
10044ecc:	46c0      	nop			@ (mov r8, r8)
10044ece:	46bd      	mov	sp, r7
10044ed0:	bd80      	pop	{r7, pc}
10044ed2:	46c0      	nop			@ (mov r8, r8)
10044ed4:	200000c0 	.word	0x200000c0

10044ed8 <LL_RADIO_NoActiveLErrorInterrupt_Enable>:
  * @brief  Indicate if INTNOACTIVELERROR is enabled
  * @rmtoll WORD5          INTNOACTIVELERROR            LL_RADIO_NoActiveLErrorInterrupt_Enable
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE void LL_RADIO_NoActiveLErrorInterrupt_Enable(void)
{
10044ed8:	b580      	push	{r7, lr}
10044eda:	af00      	add	r7, sp, #0
  SET_BIT(BLUEGLOBWORD->WORD5, GLOBAL_WORD5_INTNOACTIVELERROR);
10044edc:	4b04      	ldr	r3, [pc, #16]	@ (10044ef0 <LL_RADIO_NoActiveLErrorInterrupt_Enable+0x18>)
10044ede:	695a      	ldr	r2, [r3, #20]
10044ee0:	4b03      	ldr	r3, [pc, #12]	@ (10044ef0 <LL_RADIO_NoActiveLErrorInterrupt_Enable+0x18>)
10044ee2:	2180      	movs	r1, #128	@ 0x80
10044ee4:	0409      	lsls	r1, r1, #16
10044ee6:	430a      	orrs	r2, r1
10044ee8:	615a      	str	r2, [r3, #20]
}
10044eea:	46c0      	nop			@ (mov r8, r8)
10044eec:	46bd      	mov	sp, r7
10044eee:	bd80      	pop	{r7, pc}
10044ef0:	200000c0 	.word	0x200000c0

10044ef4 <LL_RADIO_TxRxSkipInterrupt_Enable>:
  * @brief  RADIO Enable
  * @rmtoll WORD5          INTTXRXSKIP            LL_RADIO_TxRxSkipInterrupt_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_TxRxSkipInterrupt_Enable(void)
{
10044ef4:	b580      	push	{r7, lr}
10044ef6:	af00      	add	r7, sp, #0
  SET_BIT(BLUEGLOBWORD->WORD5, GLOBAL_WORD5_INTTXRXSKIP);
10044ef8:	4b04      	ldr	r3, [pc, #16]	@ (10044f0c <LL_RADIO_TxRxSkipInterrupt_Enable+0x18>)
10044efa:	695a      	ldr	r2, [r3, #20]
10044efc:	4b03      	ldr	r3, [pc, #12]	@ (10044f0c <LL_RADIO_TxRxSkipInterrupt_Enable+0x18>)
10044efe:	2180      	movs	r1, #128	@ 0x80
10044f00:	0589      	lsls	r1, r1, #22
10044f02:	430a      	orrs	r2, r1
10044f04:	615a      	str	r2, [r3, #20]
}
10044f06:	46c0      	nop			@ (mov r8, r8)
10044f08:	46bd      	mov	sp, r7
10044f0a:	bd80      	pop	{r7, pc}
10044f0c:	200000c0 	.word	0x200000c0

10044f10 <LL_RADIO_Active2ErrorInterrupt_Enable>:
  * @brief  RADIO Enable
  * @rmtoll WORD5          INTACTIVE2ERR            LL_RADIO_Active2ErrorInterrupt_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_Active2ErrorInterrupt_Enable(void)
{
10044f10:	b580      	push	{r7, lr}
10044f12:	af00      	add	r7, sp, #0
  SET_BIT(BLUEGLOBWORD->WORD5, GLOBAL_WORD5_INTACTIVE2ERR);
10044f14:	4b04      	ldr	r3, [pc, #16]	@ (10044f28 <LL_RADIO_Active2ErrorInterrupt_Enable+0x18>)
10044f16:	695a      	ldr	r2, [r3, #20]
10044f18:	4b03      	ldr	r3, [pc, #12]	@ (10044f28 <LL_RADIO_Active2ErrorInterrupt_Enable+0x18>)
10044f1a:	2180      	movs	r1, #128	@ 0x80
10044f1c:	05c9      	lsls	r1, r1, #23
10044f1e:	430a      	orrs	r2, r1
10044f20:	615a      	str	r2, [r3, #20]
}
10044f22:	46c0      	nop			@ (mov r8, r8)
10044f24:	46bd      	mov	sp, r7
10044f26:	bd80      	pop	{r7, pc}
10044f28:	200000c0 	.word	0x200000c0

10044f2c <LL_RADIO_TIMER_DisableTimer1>:
{
10044f2c:	b580      	push	{r7, lr}
10044f2e:	b082      	sub	sp, #8
10044f30:	af00      	add	r7, sp, #0
10044f32:	6078      	str	r0, [r7, #4]
  MODIFY_REG_FIELD(BLUEx->TIMEOUTDESTREG, BLUE_TIMEOUTDESTREG_DESTINATION, 0);
10044f34:	687b      	ldr	r3, [r7, #4]
10044f36:	68db      	ldr	r3, [r3, #12]
10044f38:	2203      	movs	r2, #3
10044f3a:	4393      	bics	r3, r2
10044f3c:	001a      	movs	r2, r3
10044f3e:	687b      	ldr	r3, [r7, #4]
10044f40:	60da      	str	r2, [r3, #12]
}
10044f42:	46c0      	nop			@ (mov r8, r8)
10044f44:	46bd      	mov	sp, r7
10044f46:	b002      	add	sp, #8
10044f48:	bd80      	pop	{r7, pc}

10044f4a <LL_RADIO_TIMER_DisableTimer2>:
{
10044f4a:	b580      	push	{r7, lr}
10044f4c:	b082      	sub	sp, #8
10044f4e:	af00      	add	r7, sp, #0
10044f50:	6078      	str	r0, [r7, #4]
  MODIFY_REG_FIELD(BLUEx->TIMEOUTDESTREG, BLUE_TIMEOUTDESTREG_DESTINATION, 0);
10044f52:	687b      	ldr	r3, [r7, #4]
10044f54:	68db      	ldr	r3, [r3, #12]
10044f56:	2203      	movs	r2, #3
10044f58:	4393      	bics	r3, r2
10044f5a:	001a      	movs	r2, r3
10044f5c:	687b      	ldr	r3, [r7, #4]
10044f5e:	60da      	str	r2, [r3, #12]
}
10044f60:	46c0      	nop			@ (mov r8, r8)
10044f62:	46bd      	mov	sp, r7
10044f64:	b002      	add	sp, #8
10044f66:	bd80      	pop	{r7, pc}

10044f68 <LL_RADIO_TIMER_DisableBLEWakeupTimer>:
{
10044f68:	b580      	push	{r7, lr}
10044f6a:	b082      	sub	sp, #8
10044f6c:	af00      	add	r7, sp, #0
10044f6e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(WAKEUPx->BLUE_SLEEP_REQUEST_MODE, WAKEUP_BLUE_SLEEP_REQUEST_MODE_BLE_WAKEUP_EN);
10044f70:	687b      	ldr	r3, [r7, #4]
10044f72:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
10044f74:	4a03      	ldr	r2, [pc, #12]	@ (10044f84 <LL_RADIO_TIMER_DisableBLEWakeupTimer+0x1c>)
10044f76:	401a      	ands	r2, r3
10044f78:	687b      	ldr	r3, [r7, #4]
10044f7a:	629a      	str	r2, [r3, #40]	@ 0x28
}
10044f7c:	46c0      	nop			@ (mov r8, r8)
10044f7e:	46bd      	mov	sp, r7
10044f80:	b002      	add	sp, #8
10044f82:	bd80      	pop	{r7, pc}
10044f84:	bfffffff 	.word	0xbfffffff

10044f88 <CondRoutineTrue>:
  */

#if USE_RADIO_PROPRIETARY_DRIVER

static uint8_t CondRoutineTrue(ActionPacket *p)
{
10044f88:	b580      	push	{r7, lr}
10044f8a:	b082      	sub	sp, #8
10044f8c:	af00      	add	r7, sp, #0
10044f8e:	6078      	str	r0, [r7, #4]
  return TRUE;
10044f90:	2301      	movs	r3, #1
}
10044f92:	0018      	movs	r0, r3
10044f94:	46bd      	mov	sp, r7
10044f96:	b002      	add	sp, #8
10044f98:	bd80      	pop	{r7, pc}

10044f9a <CondRoutineRxTrue>:
{
  return TRUE;
}

static uint8_t CondRoutineRxTrue(ActionPacket *p)
{
10044f9a:	b580      	push	{r7, lr}
10044f9c:	b082      	sub	sp, #8
10044f9e:	af00      	add	r7, sp, #0
10044fa0:	6078      	str	r0, [r7, #4]
  /* received a packet */
  if ((p->status & BLUE_INTERRUPT1REG_RCVOK) != 0)
10044fa2:	687b      	ldr	r3, [r7, #4]
10044fa4:	68db      	ldr	r3, [r3, #12]
10044fa6:	2b00      	cmp	r3, #0
10044fa8:	da01      	bge.n	10044fae <CondRoutineRxTrue+0x14>
  {
    /* packet received without CRC error */
    return TRUE;
10044faa:	2301      	movs	r3, #1
10044fac:	e000      	b.n	10044fb0 <CondRoutineRxTrue+0x16>
  }
  return FALSE;
10044fae:	2300      	movs	r3, #0
}
10044fb0:	0018      	movs	r0, r3
10044fb2:	46bd      	mov	sp, r7
10044fb4:	b002      	add	sp, #8
10044fb6:	bd80      	pop	{r7, pc}

10044fb8 <HAL_RADIO_Init>:
/**
  * @brief  Initializes the radio.
  * @retval None
  */
void HAL_RADIO_Init(RADIO_HandleTypeDef *hradio)
{
10044fb8:	b590      	push	{r4, r7, lr}
10044fba:	b08d      	sub	sp, #52	@ 0x34
10044fbc:	af00      	add	r7, sp, #0
10044fbe:	6078      	str	r0, [r7, #4]
  uint32_t mr_ble_iptat;
  uint32_t mr_ble_vbg;
  uint32_t mr_ble_rxadc_delay_i;
  uint32_t mr_ble_rxadc_delay_q;
  uint8_t mr_ble_rxadc_delay_flag;
  uint8_t *hot_table_radio_config = (uint8_t *)&hot_table_radio_config_u32[4];
10044fc0:	4b14      	ldr	r3, [pc, #80]	@ (10045014 <HAL_RADIO_Init+0x5c>)
10044fc2:	617b      	str	r3, [r7, #20]
  uint8_t index;

  /* Retrieve Trimming values from engineering flash locations */
  if (*(volatile uint32_t *)VALIDITY_LOCATION == VALIDITY_TAG)
10044fc4:	4b14      	ldr	r3, [pc, #80]	@ (10045018 <HAL_RADIO_Init+0x60>)
10044fc6:	681b      	ldr	r3, [r3, #0]
10044fc8:	4a14      	ldr	r2, [pc, #80]	@ (1004501c <HAL_RADIO_Init+0x64>)
10044fca:	4293      	cmp	r3, r2
10044fcc:	d12a      	bne.n	10045024 <HAL_RADIO_Init+0x6c>
  {
    mr_ble_ibias            = ((*(volatile uint32_t *)MR_TRIMMING_LOCATION) & MR_BLE_IBIAS_TRIM_Msk) >> MR_BLE_IBIAS_TRIM_Pos;
10044fce:	4b14      	ldr	r3, [pc, #80]	@ (10045020 <HAL_RADIO_Init+0x68>)
10044fd0:	681b      	ldr	r3, [r3, #0]
10044fd2:	0a1b      	lsrs	r3, r3, #8
10044fd4:	220f      	movs	r2, #15
10044fd6:	4013      	ands	r3, r2
10044fd8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    mr_ble_iptat            = ((*(volatile uint32_t *)MR_TRIMMING_LOCATION) & MR_BLE_IPTAT_TRIM_Msk) >> MR_BLE_IPTAT_TRIM_Pos;
10044fda:	4b11      	ldr	r3, [pc, #68]	@ (10045020 <HAL_RADIO_Init+0x68>)
10044fdc:	681b      	ldr	r3, [r3, #0]
10044fde:	0b1b      	lsrs	r3, r3, #12
10044fe0:	220f      	movs	r2, #15
10044fe2:	4013      	ands	r3, r2
10044fe4:	62bb      	str	r3, [r7, #40]	@ 0x28
    mr_ble_vbg              = ((*(volatile uint32_t *)MR_TRIMMING_LOCATION) & MR_BLE_VBG_TRIM_Msk) >> MR_BLE_VBG_TRIM_Pos;
10044fe6:	4b0e      	ldr	r3, [pc, #56]	@ (10045020 <HAL_RADIO_Init+0x68>)
10044fe8:	681b      	ldr	r3, [r3, #0]
10044fea:	0c1b      	lsrs	r3, r3, #16
10044fec:	220f      	movs	r2, #15
10044fee:	4013      	ands	r3, r2
10044ff0:	627b      	str	r3, [r7, #36]	@ 0x24
    mr_ble_rxadc_delay_i    = ((*(volatile uint32_t *)MR_TRIMMING_LOCATION) & MR_BLE_RXADC_DELAY_I_TRIM_Msk) >> MR_BLE_RXADC_DELAY_I_TRIM_Pos;
10044ff2:	4b0b      	ldr	r3, [pc, #44]	@ (10045020 <HAL_RADIO_Init+0x68>)
10044ff4:	681b      	ldr	r3, [r3, #0]
10044ff6:	0d1b      	lsrs	r3, r3, #20
10044ff8:	2207      	movs	r2, #7
10044ffa:	4013      	ands	r3, r2
10044ffc:	623b      	str	r3, [r7, #32]
    mr_ble_rxadc_delay_q    = ((*(volatile uint32_t *)MR_TRIMMING_LOCATION) & MR_BLE_RXADC_DELAY_Q_TRIM_Msk) >> MR_BLE_RXADC_DELAY_Q_TRIM_Pos;
10044ffe:	4b08      	ldr	r3, [pc, #32]	@ (10045020 <HAL_RADIO_Init+0x68>)
10045000:	681b      	ldr	r3, [r3, #0]
10045002:	0e1b      	lsrs	r3, r3, #24
10045004:	2207      	movs	r2, #7
10045006:	4013      	ands	r3, r2
10045008:	61fb      	str	r3, [r7, #28]
    mr_ble_rxadc_delay_flag = TRUE;
1004500a:	231b      	movs	r3, #27
1004500c:	18fb      	adds	r3, r7, r3
1004500e:	2201      	movs	r2, #1
10045010:	701a      	strb	r2, [r3, #0]
10045012:	e011      	b.n	10045038 <HAL_RADIO_Init+0x80>
10045014:	20000574 	.word	0x20000574
10045018:	10001ef8 	.word	0x10001ef8
1004501c:	fcbceccc 	.word	0xfcbceccc
10045020:	10001ee8 	.word	0x10001ee8
  }
  else
  {
    mr_ble_ibias = 0x08;
10045024:	2308      	movs	r3, #8
10045026:	62fb      	str	r3, [r7, #44]	@ 0x2c
    mr_ble_iptat = 0x07;
10045028:	2307      	movs	r3, #7
1004502a:	62bb      	str	r3, [r7, #40]	@ 0x28
    mr_ble_vbg   = 0x08;
1004502c:	2308      	movs	r3, #8
1004502e:	627b      	str	r3, [r7, #36]	@ 0x24
    mr_ble_rxadc_delay_flag = FALSE;
10045030:	231b      	movs	r3, #27
10045032:	18fb      	adds	r3, r7, r3
10045034:	2200      	movs	r2, #0
10045036:	701a      	strb	r2, [r3, #0]
    mr_ble_rxadc_delay_q    = 3;
    mr_ble_rxadc_delay_flag = TRUE;
#endif /* STM32WB05 or STM32WB09 */
  }

  BLUEGLOB->BYTE4 = BLUE_IDLE_0;
10045038:	4bfc      	ldr	r3, [pc, #1008]	@ (1004542c <HAL_RADIO_Init+0x474>)
1004503a:	2200      	movs	r2, #0
1004503c:	711a      	strb	r2, [r3, #4]
  if (hradio != NULL)
1004503e:	687b      	ldr	r3, [r7, #4]
10045040:	2b00      	cmp	r3, #0
10045042:	d003      	beq.n	1004504c <HAL_RADIO_Init+0x94>
  {
    HAL_RADIO_MspInit(hradio);
10045044:	687b      	ldr	r3, [r7, #4]
10045046:	0018      	movs	r0, r3
10045048:	f7fd ff08 	bl	10042e5c <HAL_RADIO_MspInit>
  }
  LL_RADIO_TIMER_DisableTimer1(BLUE);
1004504c:	23c0      	movs	r3, #192	@ 0xc0
1004504e:	05db      	lsls	r3, r3, #23
10045050:	0018      	movs	r0, r3
10045052:	f7ff ff6b 	bl	10044f2c <LL_RADIO_TIMER_DisableTimer1>
  LL_RADIO_TIMER_DisableTimer2(BLUE);
10045056:	23c0      	movs	r3, #192	@ 0xc0
10045058:	05db      	lsls	r3, r3, #23
1004505a:	0018      	movs	r0, r3
1004505c:	f7ff ff75 	bl	10044f4a <LL_RADIO_TIMER_DisableTimer2>
  LL_RADIO_TIMER_DisableBLEWakeupTimer(WAKEUP);
10045060:	4bf3      	ldr	r3, [pc, #972]	@ (10045430 <HAL_RADIO_Init+0x478>)
10045062:	0018      	movs	r0, r3
10045064:	f7ff ff80 	bl	10044f68 <LL_RADIO_TIMER_DisableBLEWakeupTimer>

  /* Write Radio Trimming values in the registers: Cbias' VBG, Cbias' IPTAT, Cbias' IBIAS, RxAnaUsr Delay Trim I & Q */
  MODIFY_REG_FIELD(RRM->CBIAS1_ANA_ENG, RRM_CBIAS1_ANA_ENG_RFD_CBIAS_VBG_TRIM, mr_ble_vbg);
10045068:	4af2      	ldr	r2, [pc, #968]	@ (10045434 <HAL_RADIO_Init+0x47c>)
1004506a:	239e      	movs	r3, #158	@ 0x9e
1004506c:	009b      	lsls	r3, r3, #2
1004506e:	58d3      	ldr	r3, [r2, r3]
10045070:	220f      	movs	r2, #15
10045072:	4393      	bics	r3, r2
10045074:	001a      	movs	r2, r3
10045076:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10045078:	210f      	movs	r1, #15
1004507a:	400b      	ands	r3, r1
1004507c:	49ed      	ldr	r1, [pc, #948]	@ (10045434 <HAL_RADIO_Init+0x47c>)
1004507e:	431a      	orrs	r2, r3
10045080:	239e      	movs	r3, #158	@ 0x9e
10045082:	009b      	lsls	r3, r3, #2
10045084:	50ca      	str	r2, [r1, r3]
  MODIFY_REG_FIELD(RRM->CBIAS0_ANA_ENG, RRM_CBIAS0_ANA_ENG_RFD_CBIAS_IPTAT_TRIM, mr_ble_iptat);
10045086:	4aeb      	ldr	r2, [pc, #940]	@ (10045434 <HAL_RADIO_Init+0x47c>)
10045088:	239d      	movs	r3, #157	@ 0x9d
1004508a:	009b      	lsls	r3, r3, #2
1004508c:	58d3      	ldr	r3, [r2, r3]
1004508e:	22f0      	movs	r2, #240	@ 0xf0
10045090:	4393      	bics	r3, r2
10045092:	001a      	movs	r2, r3
10045094:	6abb      	ldr	r3, [r7, #40]	@ 0x28
10045096:	011b      	lsls	r3, r3, #4
10045098:	21ff      	movs	r1, #255	@ 0xff
1004509a:	400b      	ands	r3, r1
1004509c:	49e5      	ldr	r1, [pc, #916]	@ (10045434 <HAL_RADIO_Init+0x47c>)
1004509e:	431a      	orrs	r2, r3
100450a0:	239d      	movs	r3, #157	@ 0x9d
100450a2:	009b      	lsls	r3, r3, #2
100450a4:	50ca      	str	r2, [r1, r3]
  MODIFY_REG_FIELD(RRM->CBIAS0_ANA_ENG, RRM_CBIAS0_ANA_ENG_RFD_CBIAS_IBIAS_TRIM, mr_ble_ibias);
100450a6:	4ae3      	ldr	r2, [pc, #908]	@ (10045434 <HAL_RADIO_Init+0x47c>)
100450a8:	239d      	movs	r3, #157	@ 0x9d
100450aa:	009b      	lsls	r3, r3, #2
100450ac:	58d3      	ldr	r3, [r2, r3]
100450ae:	220f      	movs	r2, #15
100450b0:	4393      	bics	r3, r2
100450b2:	001a      	movs	r2, r3
100450b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
100450b6:	210f      	movs	r1, #15
100450b8:	400b      	ands	r3, r1
100450ba:	49de      	ldr	r1, [pc, #888]	@ (10045434 <HAL_RADIO_Init+0x47c>)
100450bc:	431a      	orrs	r2, r3
100450be:	239d      	movs	r3, #157	@ 0x9d
100450c0:	009b      	lsls	r3, r3, #2
100450c2:	50ca      	str	r2, [r1, r3]
  if (mr_ble_rxadc_delay_flag)
100450c4:	231b      	movs	r3, #27
100450c6:	18fb      	adds	r3, r7, r3
100450c8:	781b      	ldrb	r3, [r3, #0]
100450ca:	2b00      	cmp	r3, #0
100450cc:	d01e      	beq.n	1004510c <HAL_RADIO_Init+0x154>
  {
    MODIFY_REG_FIELD(RRM->RXADC_ANA_USR, RRM_RXADC_ANA_USR_RFD_RXADC_DELAYTRIM_I, mr_ble_rxadc_delay_i);
100450ce:	4ad9      	ldr	r2, [pc, #868]	@ (10045434 <HAL_RADIO_Init+0x47c>)
100450d0:	2392      	movs	r3, #146	@ 0x92
100450d2:	009b      	lsls	r3, r3, #2
100450d4:	58d3      	ldr	r3, [r2, r3]
100450d6:	2207      	movs	r2, #7
100450d8:	4393      	bics	r3, r2
100450da:	001a      	movs	r2, r3
100450dc:	6a3b      	ldr	r3, [r7, #32]
100450de:	2107      	movs	r1, #7
100450e0:	400b      	ands	r3, r1
100450e2:	49d4      	ldr	r1, [pc, #848]	@ (10045434 <HAL_RADIO_Init+0x47c>)
100450e4:	431a      	orrs	r2, r3
100450e6:	2392      	movs	r3, #146	@ 0x92
100450e8:	009b      	lsls	r3, r3, #2
100450ea:	50ca      	str	r2, [r1, r3]
    MODIFY_REG_FIELD(RRM->RXADC_ANA_USR, RRM_RXADC_ANA_USR_RFD_RXADC_DELAYTRIM_Q, mr_ble_rxadc_delay_q);
100450ec:	4ad1      	ldr	r2, [pc, #836]	@ (10045434 <HAL_RADIO_Init+0x47c>)
100450ee:	2392      	movs	r3, #146	@ 0x92
100450f0:	009b      	lsls	r3, r3, #2
100450f2:	58d3      	ldr	r3, [r2, r3]
100450f4:	2238      	movs	r2, #56	@ 0x38
100450f6:	4393      	bics	r3, r2
100450f8:	001a      	movs	r2, r3
100450fa:	69fb      	ldr	r3, [r7, #28]
100450fc:	00db      	lsls	r3, r3, #3
100450fe:	2138      	movs	r1, #56	@ 0x38
10045100:	400b      	ands	r3, r1
10045102:	49cc      	ldr	r1, [pc, #816]	@ (10045434 <HAL_RADIO_Init+0x47c>)
10045104:	431a      	orrs	r2, r3
10045106:	2392      	movs	r3, #146	@ 0x92
10045108:	009b      	lsls	r3, r3, #2
1004510a:	50ca      	str	r2, [r1, r3]
  }

  /* Radio AFC configuration */
  MODIFY_REG(RRM->AFC1_DIG_ENG, RRM_AFC1_DIG_ENG_AFC_DELAY_AFTER | RRM_AFC1_DIG_ENG_AFC_DELAY_BEFORE,
1004510c:	4ac9      	ldr	r2, [pc, #804]	@ (10045434 <HAL_RADIO_Init+0x47c>)
1004510e:	23a4      	movs	r3, #164	@ 0xa4
10045110:	005b      	lsls	r3, r3, #1
10045112:	58d3      	ldr	r3, [r2, r3]
10045114:	22ff      	movs	r2, #255	@ 0xff
10045116:	4393      	bics	r3, r2
10045118:	49c6      	ldr	r1, [pc, #792]	@ (10045434 <HAL_RADIO_Init+0x47c>)
1004511a:	2255      	movs	r2, #85	@ 0x55
1004511c:	431a      	orrs	r2, r3
1004511e:	23a4      	movs	r3, #164	@ 0xa4
10045120:	005b      	lsls	r3, r3, #1
10045122:	50ca      	str	r2, [r1, r3]
             ((AFC_DELAY_BEFORE << RRM_AFC1_DIG_ENG_AFC_DELAY_BEFORE_Pos) & RRM_AFC1_DIG_ENG_AFC_DELAY_BEFORE_Msk) |
             ((AFC_DELAY_AFTER << RRM_AFC1_DIG_ENG_AFC_DELAY_AFTER_Pos) & RRM_AFC1_DIG_ENG_AFC_DELAY_AFTER_Msk));
  MODIFY_REG(RRM->CR0_DIG_ENG, RRM_CR0_DIG_ENG_CR_GAIN_BEFORE | RRM_CR0_DIG_ENG_CR_GAIN_AFTER,
10045124:	4ac3      	ldr	r2, [pc, #780]	@ (10045434 <HAL_RADIO_Init+0x47c>)
10045126:	23aa      	movs	r3, #170	@ 0xaa
10045128:	005b      	lsls	r3, r3, #1
1004512a:	58d3      	ldr	r3, [r2, r3]
1004512c:	22ff      	movs	r2, #255	@ 0xff
1004512e:	4393      	bics	r3, r2
10045130:	49c0      	ldr	r1, [pc, #768]	@ (10045434 <HAL_RADIO_Init+0x47c>)
10045132:	2266      	movs	r2, #102	@ 0x66
10045134:	431a      	orrs	r2, r3
10045136:	23aa      	movs	r3, #170	@ 0xaa
10045138:	005b      	lsls	r3, r3, #1
1004513a:	50ca      	str	r2, [r1, r3]
             ((CR_GAIN_BEFORE << RRM_CR0_DIG_ENG_CR_GAIN_BEFORE_Pos) & RRM_CR0_DIG_ENG_CR_GAIN_BEFORE_Msk) |
             ((CR_GAIN_AFTER << RRM_CR0_DIG_ENG_CR_GAIN_AFTER_Pos) & RRM_CR0_DIG_ENG_CR_GAIN_AFTER_Msk));
  MODIFY_REG(RRM->CR0_LR, RRM_CR0_LR_CR_LR_GAIN_BEFORE | RRM_CR0_LR_CR_LR_GAIN_AFTER,
1004513c:	4abd      	ldr	r2, [pc, #756]	@ (10045434 <HAL_RADIO_Init+0x47c>)
1004513e:	23b4      	movs	r3, #180	@ 0xb4
10045140:	005b      	lsls	r3, r3, #1
10045142:	58d3      	ldr	r3, [r2, r3]
10045144:	22ff      	movs	r2, #255	@ 0xff
10045146:	4393      	bics	r3, r2
10045148:	49ba      	ldr	r1, [pc, #744]	@ (10045434 <HAL_RADIO_Init+0x47c>)
1004514a:	2255      	movs	r2, #85	@ 0x55
1004514c:	431a      	orrs	r2, r3
1004514e:	23b4      	movs	r3, #180	@ 0xb4
10045150:	005b      	lsls	r3, r3, #1
10045152:	50ca      	str	r2, [r1, r3]
             ((CR_LR_GAIN_BEFORE << RRM_CR0_LR_CR_LR_GAIN_BEFORE_Pos) & RRM_CR0_LR_CR_LR_GAIN_BEFORE_Msk) |
             ((CR_LR_GAIN_AFTER << RRM_CR0_LR_CR_LR_GAIN_AFTER_Pos) & RRM_CR0_LR_CR_LR_GAIN_AFTER_Msk));

  /* Radio RSSI Threshold configuration */
  MODIFY_REG_FIELD(RRM->LR_RSSI_THR_DIG_ENG, RRM_LR_RSSI_THR_DIG_ENG_LR_RSSI_THR, LR_RSSI_THR);
10045154:	4ab7      	ldr	r2, [pc, #732]	@ (10045434 <HAL_RADIO_Init+0x47c>)
10045156:	23c4      	movs	r3, #196	@ 0xc4
10045158:	005b      	lsls	r3, r3, #1
1004515a:	58d3      	ldr	r3, [r2, r3]
1004515c:	22ff      	movs	r2, #255	@ 0xff
1004515e:	4393      	bics	r3, r2
10045160:	49b4      	ldr	r1, [pc, #720]	@ (10045434 <HAL_RADIO_Init+0x47c>)
10045162:	221d      	movs	r2, #29
10045164:	431a      	orrs	r2, r3
10045166:	23c4      	movs	r3, #196	@ 0xc4
10045168:	005b      	lsls	r3, r3, #1
1004516a:	50ca      	str	r2, [r1, r3]
  MODIFY_REG_FIELD(RRM->LR_PD_THR_DIG_ENG, RRM_LR_PD_THR_DIG_ENG_LR_PD_THR, LR_PD_THR);
1004516c:	4ab1      	ldr	r2, [pc, #708]	@ (10045434 <HAL_RADIO_Init+0x47c>)
1004516e:	23c2      	movs	r3, #194	@ 0xc2
10045170:	005b      	lsls	r3, r3, #1
10045172:	58d3      	ldr	r3, [r2, r3]
10045174:	22ff      	movs	r2, #255	@ 0xff
10045176:	4393      	bics	r3, r2
10045178:	49ae      	ldr	r1, [pc, #696]	@ (10045434 <HAL_RADIO_Init+0x47c>)
1004517a:	2259      	movs	r2, #89	@ 0x59
1004517c:	431a      	orrs	r2, r3
1004517e:	23c2      	movs	r3, #194	@ 0xc2
10045180:	005b      	lsls	r3, r3, #1
10045182:	50ca      	str	r2, [r1, r3]
  MODIFY_REG_FIELD(RRM->LR_AAC_THR_DIG_ENG, RRM_LR_AAC_THR_DIG_ENG_LR_AAC_THR, LR_AAC_THR);
10045184:	4aab      	ldr	r2, [pc, #684]	@ (10045434 <HAL_RADIO_Init+0x47c>)
10045186:	23c6      	movs	r3, #198	@ 0xc6
10045188:	005b      	lsls	r3, r3, #1
1004518a:	58d3      	ldr	r3, [r2, r3]
1004518c:	22ff      	movs	r2, #255	@ 0xff
1004518e:	4393      	bics	r3, r2
10045190:	49a8      	ldr	r1, [pc, #672]	@ (10045434 <HAL_RADIO_Init+0x47c>)
10045192:	2232      	movs	r2, #50	@ 0x32
10045194:	431a      	orrs	r2, r3
10045196:	23c6      	movs	r3, #198	@ 0xc6
10045198:	005b      	lsls	r3, r3, #1
1004519a:	50ca      	str	r2, [r1, r3]

  /* Enable Viterbi */
  SET_BIT(RRM->VIT_CONF_DIG_ENG, RRM_VIT_CONF_DIG_ENG_VIT_CONF_0);
1004519c:	4aa5      	ldr	r2, [pc, #660]	@ (10045434 <HAL_RADIO_Init+0x47c>)
1004519e:	23b6      	movs	r3, #182	@ 0xb6
100451a0:	005b      	lsls	r3, r3, #1
100451a2:	58d3      	ldr	r3, [r2, r3]
100451a4:	49a3      	ldr	r1, [pc, #652]	@ (10045434 <HAL_RADIO_Init+0x47c>)
100451a6:	2201      	movs	r2, #1
100451a8:	431a      	orrs	r2, r3
100451aa:	23b6      	movs	r3, #182	@ 0xb6
100451ac:	005b      	lsls	r3, r3, #1
100451ae:	50ca      	str	r2, [r1, r3]
  MODIFY_REG_FIELD(RRM->ANTSW_DIG0_USR, RRM_ANTSW0_DIG_USR_RX_TIME_TO_SAMPLE, RX_TIME_TO_SAMPLE);
  MODIFY_REG_FIELD(RRM->ANTSW_DIG1_USR, RRM_ANTSW1_DIG_USR_RX_TIME_TO_SWITCH, RX_TIME_TO_SWITCH);
#endif /* STM32WB05 or STM32WB09 */

  /*Set InitDelay*/
  LL_RADIO_SetWakeupInitDelay(INITDELAY_WAKEUP);
100451b0:	2040      	movs	r0, #64	@ 0x40
100451b2:	f7ff fd69 	bl	10044c88 <LL_RADIO_SetWakeupInitDelay>
  LL_RADIO_SetTimer12InitDelayCal(INITDELAY_TIMER12_CAL);
100451b6:	203f      	movs	r0, #63	@ 0x3f
100451b8:	f7ff fd7e 	bl	10044cb8 <LL_RADIO_SetTimer12InitDelayCal>
  LL_RADIO_SetTimer12InitDelayNoCal(INITDELAY_TIMER2_NOCAL);
100451bc:	2009      	movs	r0, #9
100451be:	f7ff fd95 	bl	10044cec <LL_RADIO_SetTimer12InitDelayNoCal>

  /*Set Init_radio_delay*/
  LL_RADIO_SetReceivedCalDelayChk(DELAYCHK_RECEIVE_CAL);
100451c2:	2074      	movs	r0, #116	@ 0x74
100451c4:	f7ff fdd4 	bl	10044d70 <LL_RADIO_SetReceivedCalDelayChk>
  LL_RADIO_SetReceivedNoCalDelayChk(DELAYCHK_RECEIVE_NOCAL);
100451c8:	2038      	movs	r0, #56	@ 0x38
100451ca:	f7ff fdeb 	bl	10044da4 <LL_RADIO_SetReceivedNoCalDelayChk>
  LL_RADIO_SetTransmitCalDelayChk(DELAYCHK_TRANSMIT_CAL);
100451ce:	2076      	movs	r0, #118	@ 0x76
100451d0:	f7ff fda0 	bl	10044d14 <LL_RADIO_SetTransmitCalDelayChk>
  LL_RADIO_SetTransmitNoCalDelayChk(DELAYCHK_TRANSMIT_NOCAL);
100451d4:	203a      	movs	r0, #58	@ 0x3a
100451d6:	f7ff fdb3 	bl	10044d40 <LL_RADIO_SetTransmitNoCalDelayChk>

  /* Initial and final TX delays: control the on-air start time of the TX packet
  *  and the length of the packet "tail" after last bit is transmitted
  */
  LL_RADIO_SetTxDelayStart(TXDELAY_START);
100451da:	2010      	movs	r0, #16
100451dc:	f7ff fe24 	bl	10044e28 <LL_RADIO_SetTxDelayStart>
  LL_RADIO_SetTxDelayEnd(TXDELAY_END);
100451e0:	2010      	movs	r0, #16
100451e2:	f7ff fe3b 	bl	10044e5c <LL_RADIO_SetTxDelayEnd>

  /* Timeout for TX ready signal from the radio FSM after the 2nd init phase
  *  has expired
  */
  LL_RADIO_SetTransmissionReadyTimeout(TXREADY_TIMEOUT);
100451e6:	2005      	movs	r0, #5
100451e8:	f7ff fe52 	bl	10044e90 <LL_RADIO_SetTransmissionReadyTimeout>

  /* Timing for the various programming phases of the radio, modem and memory
  *  pointers.
  */
  LL_RADIO_SetConfigurationEndDuration(CONFIG_END_DURATION);
100451ec:	2014      	movs	r0, #20
100451ee:	f7ff fded 	bl	10044dcc <LL_RADIO_SetConfigurationEndDuration>
  LL_RADIO_SetTxDataReadyCheck(CHECK_TXDATAREADY);
100451f2:	2005      	movs	r0, #5
100451f4:	f7ff fe00 	bl	10044df8 <LL_RADIO_SetTxDataReadyCheck>

  LL_RADIO_ChkFlagAutoclearEnable_Enable();
100451f8:	f7ff fe60 	bl	10044ebc <LL_RADIO_ChkFlagAutoclearEnable_Enable>
  LL_RADIO_NoActiveLErrorInterrupt_Enable();
100451fc:	f7ff fe6c 	bl	10044ed8 <LL_RADIO_NoActiveLErrorInterrupt_Enable>
  LL_RADIO_TxRxSkipInterrupt_Enable();
10045200:	f7ff fe78 	bl	10044ef4 <LL_RADIO_TxRxSkipInterrupt_Enable>
  /* The commands in the hot table start at word 4
  * The words 0 to 2 are used to point to the command list
  * for the various trigger events, word 3 is a null command
  * (see function BLEPLAT_CNTR_SetRadioConfigData)
  */
  index = 0;
10045204:	2013      	movs	r0, #19
10045206:	183b      	adds	r3, r7, r0
10045208:	2200      	movs	r2, #0
1004520a:	701a      	strb	r2, [r3, #0]
  hot_table_radio_config[index++] = 0x01;
1004520c:	183b      	adds	r3, r7, r0
1004520e:	781b      	ldrb	r3, [r3, #0]
10045210:	183a      	adds	r2, r7, r0
10045212:	1c59      	adds	r1, r3, #1
10045214:	7011      	strb	r1, [r2, #0]
10045216:	001a      	movs	r2, r3
10045218:	697b      	ldr	r3, [r7, #20]
1004521a:	189b      	adds	r3, r3, r2
1004521c:	2201      	movs	r2, #1
1004521e:	701a      	strb	r2, [r3, #0]
  hot_table_radio_config[index++] = RRM_CBIAS1_ANA_ENG;
10045220:	183b      	adds	r3, r7, r0
10045222:	781b      	ldrb	r3, [r3, #0]
10045224:	183a      	adds	r2, r7, r0
10045226:	1c59      	adds	r1, r3, #1
10045228:	7011      	strb	r1, [r2, #0]
1004522a:	001a      	movs	r2, r3
1004522c:	697b      	ldr	r3, [r7, #20]
1004522e:	189b      	adds	r3, r3, r2
10045230:	225e      	movs	r2, #94	@ 0x5e
10045232:	701a      	strb	r2, [r3, #0]
  hot_table_radio_config[index++] = RRM->CBIAS1_ANA_ENG;
10045234:	4a7f      	ldr	r2, [pc, #508]	@ (10045434 <HAL_RADIO_Init+0x47c>)
10045236:	239e      	movs	r3, #158	@ 0x9e
10045238:	009b      	lsls	r3, r3, #2
1004523a:	58d1      	ldr	r1, [r2, r3]
1004523c:	183b      	adds	r3, r7, r0
1004523e:	781b      	ldrb	r3, [r3, #0]
10045240:	0004      	movs	r4, r0
10045242:	183a      	adds	r2, r7, r0
10045244:	1c58      	adds	r0, r3, #1
10045246:	7010      	strb	r0, [r2, #0]
10045248:	001a      	movs	r2, r3
1004524a:	697b      	ldr	r3, [r7, #20]
1004524c:	189b      	adds	r3, r3, r2
1004524e:	b2ca      	uxtb	r2, r1
10045250:	701a      	strb	r2, [r3, #0]
  hot_table_radio_config[index++] = 0x01;
10045252:	0020      	movs	r0, r4
10045254:	183b      	adds	r3, r7, r0
10045256:	781b      	ldrb	r3, [r3, #0]
10045258:	183a      	adds	r2, r7, r0
1004525a:	1c59      	adds	r1, r3, #1
1004525c:	7011      	strb	r1, [r2, #0]
1004525e:	001a      	movs	r2, r3
10045260:	697b      	ldr	r3, [r7, #20]
10045262:	189b      	adds	r3, r3, r2
10045264:	2201      	movs	r2, #1
10045266:	701a      	strb	r2, [r3, #0]
  hot_table_radio_config[index++] = RRM_CBIAS0_ANA_ENG;
10045268:	183b      	adds	r3, r7, r0
1004526a:	781b      	ldrb	r3, [r3, #0]
1004526c:	183a      	adds	r2, r7, r0
1004526e:	1c59      	adds	r1, r3, #1
10045270:	7011      	strb	r1, [r2, #0]
10045272:	001a      	movs	r2, r3
10045274:	697b      	ldr	r3, [r7, #20]
10045276:	189b      	adds	r3, r3, r2
10045278:	225d      	movs	r2, #93	@ 0x5d
1004527a:	701a      	strb	r2, [r3, #0]
  hot_table_radio_config[index++] = RRM->CBIAS0_ANA_ENG;
1004527c:	4a6d      	ldr	r2, [pc, #436]	@ (10045434 <HAL_RADIO_Init+0x47c>)
1004527e:	239d      	movs	r3, #157	@ 0x9d
10045280:	009b      	lsls	r3, r3, #2
10045282:	58d1      	ldr	r1, [r2, r3]
10045284:	183b      	adds	r3, r7, r0
10045286:	781b      	ldrb	r3, [r3, #0]
10045288:	0004      	movs	r4, r0
1004528a:	183a      	adds	r2, r7, r0
1004528c:	1c58      	adds	r0, r3, #1
1004528e:	7010      	strb	r0, [r2, #0]
10045290:	001a      	movs	r2, r3
10045292:	697b      	ldr	r3, [r7, #20]
10045294:	189b      	adds	r3, r3, r2
10045296:	b2ca      	uxtb	r2, r1
10045298:	701a      	strb	r2, [r3, #0]

  hot_table_radio_config[index++] = 0x01;
1004529a:	0020      	movs	r0, r4
1004529c:	183b      	adds	r3, r7, r0
1004529e:	781b      	ldrb	r3, [r3, #0]
100452a0:	183a      	adds	r2, r7, r0
100452a2:	1c59      	adds	r1, r3, #1
100452a4:	7011      	strb	r1, [r2, #0]
100452a6:	001a      	movs	r2, r3
100452a8:	697b      	ldr	r3, [r7, #20]
100452aa:	189b      	adds	r3, r3, r2
100452ac:	2201      	movs	r2, #1
100452ae:	701a      	strb	r2, [r3, #0]
  hot_table_radio_config[index++] = RRM_RXADC_ANA_USR;
100452b0:	183b      	adds	r3, r7, r0
100452b2:	781b      	ldrb	r3, [r3, #0]
100452b4:	183a      	adds	r2, r7, r0
100452b6:	1c59      	adds	r1, r3, #1
100452b8:	7011      	strb	r1, [r2, #0]
100452ba:	001a      	movs	r2, r3
100452bc:	697b      	ldr	r3, [r7, #20]
100452be:	189b      	adds	r3, r3, r2
100452c0:	2252      	movs	r2, #82	@ 0x52
100452c2:	701a      	strb	r2, [r3, #0]
  hot_table_radio_config[index++] = RRM->RXADC_ANA_USR;
100452c4:	4a5b      	ldr	r2, [pc, #364]	@ (10045434 <HAL_RADIO_Init+0x47c>)
100452c6:	2392      	movs	r3, #146	@ 0x92
100452c8:	009b      	lsls	r3, r3, #2
100452ca:	58d1      	ldr	r1, [r2, r3]
100452cc:	183b      	adds	r3, r7, r0
100452ce:	781b      	ldrb	r3, [r3, #0]
100452d0:	0004      	movs	r4, r0
100452d2:	183a      	adds	r2, r7, r0
100452d4:	1c58      	adds	r0, r3, #1
100452d6:	7010      	strb	r0, [r2, #0]
100452d8:	001a      	movs	r2, r3
100452da:	697b      	ldr	r3, [r7, #20]
100452dc:	189b      	adds	r3, r3, r2
100452de:	b2ca      	uxtb	r2, r1
100452e0:	701a      	strb	r2, [r3, #0]

  hot_table_radio_config[index++] = 0x01;
100452e2:	0020      	movs	r0, r4
100452e4:	183b      	adds	r3, r7, r0
100452e6:	781b      	ldrb	r3, [r3, #0]
100452e8:	183a      	adds	r2, r7, r0
100452ea:	1c59      	adds	r1, r3, #1
100452ec:	7011      	strb	r1, [r2, #0]
100452ee:	001a      	movs	r2, r3
100452f0:	697b      	ldr	r3, [r7, #20]
100452f2:	189b      	adds	r3, r3, r2
100452f4:	2201      	movs	r2, #1
100452f6:	701a      	strb	r2, [r3, #0]
  hot_table_radio_config[index++] = RRM_AFC1_DIG_ENG;
100452f8:	183b      	adds	r3, r7, r0
100452fa:	781b      	ldrb	r3, [r3, #0]
100452fc:	183a      	adds	r2, r7, r0
100452fe:	1c59      	adds	r1, r3, #1
10045300:	7011      	strb	r1, [r2, #0]
10045302:	001a      	movs	r2, r3
10045304:	697b      	ldr	r3, [r7, #20]
10045306:	189b      	adds	r3, r3, r2
10045308:	2212      	movs	r2, #18
1004530a:	701a      	strb	r2, [r3, #0]
  hot_table_radio_config[index++] = RRM->AFC1_DIG_ENG;
1004530c:	4a49      	ldr	r2, [pc, #292]	@ (10045434 <HAL_RADIO_Init+0x47c>)
1004530e:	23a4      	movs	r3, #164	@ 0xa4
10045310:	005b      	lsls	r3, r3, #1
10045312:	58d1      	ldr	r1, [r2, r3]
10045314:	183b      	adds	r3, r7, r0
10045316:	781b      	ldrb	r3, [r3, #0]
10045318:	0004      	movs	r4, r0
1004531a:	183a      	adds	r2, r7, r0
1004531c:	1c58      	adds	r0, r3, #1
1004531e:	7010      	strb	r0, [r2, #0]
10045320:	001a      	movs	r2, r3
10045322:	697b      	ldr	r3, [r7, #20]
10045324:	189b      	adds	r3, r3, r2
10045326:	b2ca      	uxtb	r2, r1
10045328:	701a      	strb	r2, [r3, #0]
  hot_table_radio_config[index++] = 0x01;
1004532a:	0020      	movs	r0, r4
1004532c:	183b      	adds	r3, r7, r0
1004532e:	781b      	ldrb	r3, [r3, #0]
10045330:	183a      	adds	r2, r7, r0
10045332:	1c59      	adds	r1, r3, #1
10045334:	7011      	strb	r1, [r2, #0]
10045336:	001a      	movs	r2, r3
10045338:	697b      	ldr	r3, [r7, #20]
1004533a:	189b      	adds	r3, r3, r2
1004533c:	2201      	movs	r2, #1
1004533e:	701a      	strb	r2, [r3, #0]
  hot_table_radio_config[index++] = RRM_CR0_DIG_ENG;
10045340:	183b      	adds	r3, r7, r0
10045342:	781b      	ldrb	r3, [r3, #0]
10045344:	183a      	adds	r2, r7, r0
10045346:	1c59      	adds	r1, r3, #1
10045348:	7011      	strb	r1, [r2, #0]
1004534a:	001a      	movs	r2, r3
1004534c:	697b      	ldr	r3, [r7, #20]
1004534e:	189b      	adds	r3, r3, r2
10045350:	2215      	movs	r2, #21
10045352:	701a      	strb	r2, [r3, #0]
  hot_table_radio_config[index++] = RRM->CR0_DIG_ENG;
10045354:	4a37      	ldr	r2, [pc, #220]	@ (10045434 <HAL_RADIO_Init+0x47c>)
10045356:	23aa      	movs	r3, #170	@ 0xaa
10045358:	005b      	lsls	r3, r3, #1
1004535a:	58d1      	ldr	r1, [r2, r3]
1004535c:	183b      	adds	r3, r7, r0
1004535e:	781b      	ldrb	r3, [r3, #0]
10045360:	0004      	movs	r4, r0
10045362:	183a      	adds	r2, r7, r0
10045364:	1c58      	adds	r0, r3, #1
10045366:	7010      	strb	r0, [r2, #0]
10045368:	001a      	movs	r2, r3
1004536a:	697b      	ldr	r3, [r7, #20]
1004536c:	189b      	adds	r3, r3, r2
1004536e:	b2ca      	uxtb	r2, r1
10045370:	701a      	strb	r2, [r3, #0]
  hot_table_radio_config[index++] = 0x01;
10045372:	0020      	movs	r0, r4
10045374:	183b      	adds	r3, r7, r0
10045376:	781b      	ldrb	r3, [r3, #0]
10045378:	183a      	adds	r2, r7, r0
1004537a:	1c59      	adds	r1, r3, #1
1004537c:	7011      	strb	r1, [r2, #0]
1004537e:	001a      	movs	r2, r3
10045380:	697b      	ldr	r3, [r7, #20]
10045382:	189b      	adds	r3, r3, r2
10045384:	2201      	movs	r2, #1
10045386:	701a      	strb	r2, [r3, #0]
  hot_table_radio_config[index++] = RRM_CR0_LR;
10045388:	183b      	adds	r3, r7, r0
1004538a:	781b      	ldrb	r3, [r3, #0]
1004538c:	183a      	adds	r2, r7, r0
1004538e:	1c59      	adds	r1, r3, #1
10045390:	7011      	strb	r1, [r2, #0]
10045392:	001a      	movs	r2, r3
10045394:	697b      	ldr	r3, [r7, #20]
10045396:	189b      	adds	r3, r3, r2
10045398:	221a      	movs	r2, #26
1004539a:	701a      	strb	r2, [r3, #0]
  hot_table_radio_config[index++] = RRM->CR0_LR;
1004539c:	4a25      	ldr	r2, [pc, #148]	@ (10045434 <HAL_RADIO_Init+0x47c>)
1004539e:	23b4      	movs	r3, #180	@ 0xb4
100453a0:	005b      	lsls	r3, r3, #1
100453a2:	58d1      	ldr	r1, [r2, r3]
100453a4:	183b      	adds	r3, r7, r0
100453a6:	781b      	ldrb	r3, [r3, #0]
100453a8:	0004      	movs	r4, r0
100453aa:	183a      	adds	r2, r7, r0
100453ac:	1c58      	adds	r0, r3, #1
100453ae:	7010      	strb	r0, [r2, #0]
100453b0:	001a      	movs	r2, r3
100453b2:	697b      	ldr	r3, [r7, #20]
100453b4:	189b      	adds	r3, r3, r2
100453b6:	b2ca      	uxtb	r2, r1
100453b8:	701a      	strb	r2, [r3, #0]
  hot_table_radio_config[index++] = 0x01;
100453ba:	0020      	movs	r0, r4
100453bc:	183b      	adds	r3, r7, r0
100453be:	781b      	ldrb	r3, [r3, #0]
100453c0:	183a      	adds	r2, r7, r0
100453c2:	1c59      	adds	r1, r3, #1
100453c4:	7011      	strb	r1, [r2, #0]
100453c6:	001a      	movs	r2, r3
100453c8:	697b      	ldr	r3, [r7, #20]
100453ca:	189b      	adds	r3, r3, r2
100453cc:	2201      	movs	r2, #1
100453ce:	701a      	strb	r2, [r3, #0]
  hot_table_radio_config[index++] = RRM_LR_RSSI_THR_DIG_ENG;
100453d0:	183b      	adds	r3, r7, r0
100453d2:	781b      	ldrb	r3, [r3, #0]
100453d4:	183a      	adds	r2, r7, r0
100453d6:	1c59      	adds	r1, r3, #1
100453d8:	7011      	strb	r1, [r2, #0]
100453da:	001a      	movs	r2, r3
100453dc:	697b      	ldr	r3, [r7, #20]
100453de:	189b      	adds	r3, r3, r2
100453e0:	2222      	movs	r2, #34	@ 0x22
100453e2:	701a      	strb	r2, [r3, #0]
  hot_table_radio_config[index++] = RRM->LR_RSSI_THR_DIG_ENG;
100453e4:	4a13      	ldr	r2, [pc, #76]	@ (10045434 <HAL_RADIO_Init+0x47c>)
100453e6:	23c4      	movs	r3, #196	@ 0xc4
100453e8:	005b      	lsls	r3, r3, #1
100453ea:	58d1      	ldr	r1, [r2, r3]
100453ec:	183b      	adds	r3, r7, r0
100453ee:	781b      	ldrb	r3, [r3, #0]
100453f0:	0004      	movs	r4, r0
100453f2:	183a      	adds	r2, r7, r0
100453f4:	1c58      	adds	r0, r3, #1
100453f6:	7010      	strb	r0, [r2, #0]
100453f8:	001a      	movs	r2, r3
100453fa:	697b      	ldr	r3, [r7, #20]
100453fc:	189b      	adds	r3, r3, r2
100453fe:	b2ca      	uxtb	r2, r1
10045400:	701a      	strb	r2, [r3, #0]
  hot_table_radio_config[index++] = 0x01;
10045402:	0020      	movs	r0, r4
10045404:	183b      	adds	r3, r7, r0
10045406:	781b      	ldrb	r3, [r3, #0]
10045408:	183a      	adds	r2, r7, r0
1004540a:	1c59      	adds	r1, r3, #1
1004540c:	7011      	strb	r1, [r2, #0]
1004540e:	001a      	movs	r2, r3
10045410:	697b      	ldr	r3, [r7, #20]
10045412:	189b      	adds	r3, r3, r2
10045414:	2201      	movs	r2, #1
10045416:	701a      	strb	r2, [r3, #0]
  hot_table_radio_config[index++] = RRM_LR_PD_THR_DIG_ENG;
10045418:	183b      	adds	r3, r7, r0
1004541a:	781b      	ldrb	r3, [r3, #0]
1004541c:	183a      	adds	r2, r7, r0
1004541e:	1c59      	adds	r1, r3, #1
10045420:	7011      	strb	r1, [r2, #0]
10045422:	001a      	movs	r2, r3
10045424:	697b      	ldr	r3, [r7, #20]
10045426:	189b      	adds	r3, r3, r2
10045428:	e006      	b.n	10045438 <HAL_RADIO_Init+0x480>
1004542a:	46c0      	nop			@ (mov r8, r8)
1004542c:	200000c0 	.word	0x200000c0
10045430:	60001800 	.word	0x60001800
10045434:	60001400 	.word	0x60001400
10045438:	2221      	movs	r2, #33	@ 0x21
1004543a:	701a      	strb	r2, [r3, #0]
  hot_table_radio_config[index++] = RRM->LR_PD_THR_DIG_ENG;
1004543c:	4a4c      	ldr	r2, [pc, #304]	@ (10045570 <HAL_RADIO_Init+0x5b8>)
1004543e:	23c2      	movs	r3, #194	@ 0xc2
10045440:	005b      	lsls	r3, r3, #1
10045442:	58d1      	ldr	r1, [r2, r3]
10045444:	183b      	adds	r3, r7, r0
10045446:	781b      	ldrb	r3, [r3, #0]
10045448:	0004      	movs	r4, r0
1004544a:	183a      	adds	r2, r7, r0
1004544c:	1c58      	adds	r0, r3, #1
1004544e:	7010      	strb	r0, [r2, #0]
10045450:	001a      	movs	r2, r3
10045452:	697b      	ldr	r3, [r7, #20]
10045454:	189b      	adds	r3, r3, r2
10045456:	b2ca      	uxtb	r2, r1
10045458:	701a      	strb	r2, [r3, #0]
  hot_table_radio_config[index++] = 0x01;
1004545a:	0020      	movs	r0, r4
1004545c:	183b      	adds	r3, r7, r0
1004545e:	781b      	ldrb	r3, [r3, #0]
10045460:	183a      	adds	r2, r7, r0
10045462:	1c59      	adds	r1, r3, #1
10045464:	7011      	strb	r1, [r2, #0]
10045466:	001a      	movs	r2, r3
10045468:	697b      	ldr	r3, [r7, #20]
1004546a:	189b      	adds	r3, r3, r2
1004546c:	2201      	movs	r2, #1
1004546e:	701a      	strb	r2, [r3, #0]
  hot_table_radio_config[index++] = RRM_LR_AAC_THR_DIG_ENG;
10045470:	183b      	adds	r3, r7, r0
10045472:	781b      	ldrb	r3, [r3, #0]
10045474:	183a      	adds	r2, r7, r0
10045476:	1c59      	adds	r1, r3, #1
10045478:	7011      	strb	r1, [r2, #0]
1004547a:	001a      	movs	r2, r3
1004547c:	697b      	ldr	r3, [r7, #20]
1004547e:	189b      	adds	r3, r3, r2
10045480:	2223      	movs	r2, #35	@ 0x23
10045482:	701a      	strb	r2, [r3, #0]
  hot_table_radio_config[index++] = RRM->LR_AAC_THR_DIG_ENG;
10045484:	4a3a      	ldr	r2, [pc, #232]	@ (10045570 <HAL_RADIO_Init+0x5b8>)
10045486:	23c6      	movs	r3, #198	@ 0xc6
10045488:	005b      	lsls	r3, r3, #1
1004548a:	58d1      	ldr	r1, [r2, r3]
1004548c:	183b      	adds	r3, r7, r0
1004548e:	781b      	ldrb	r3, [r3, #0]
10045490:	0004      	movs	r4, r0
10045492:	183a      	adds	r2, r7, r0
10045494:	1c58      	adds	r0, r3, #1
10045496:	7010      	strb	r0, [r2, #0]
10045498:	001a      	movs	r2, r3
1004549a:	697b      	ldr	r3, [r7, #20]
1004549c:	189b      	adds	r3, r3, r2
1004549e:	b2ca      	uxtb	r2, r1
100454a0:	701a      	strb	r2, [r3, #0]
  hot_table_radio_config[index++] = 0x01;
100454a2:	0020      	movs	r0, r4
100454a4:	183b      	adds	r3, r7, r0
100454a6:	781b      	ldrb	r3, [r3, #0]
100454a8:	183a      	adds	r2, r7, r0
100454aa:	1c59      	adds	r1, r3, #1
100454ac:	7011      	strb	r1, [r2, #0]
100454ae:	001a      	movs	r2, r3
100454b0:	697b      	ldr	r3, [r7, #20]
100454b2:	189b      	adds	r3, r3, r2
100454b4:	2201      	movs	r2, #1
100454b6:	701a      	strb	r2, [r3, #0]
  hot_table_radio_config[index++] = RRM_VIT_CONF_DIG_ENG;
100454b8:	183b      	adds	r3, r7, r0
100454ba:	781b      	ldrb	r3, [r3, #0]
100454bc:	183a      	adds	r2, r7, r0
100454be:	1c59      	adds	r1, r3, #1
100454c0:	7011      	strb	r1, [r2, #0]
100454c2:	001a      	movs	r2, r3
100454c4:	697b      	ldr	r3, [r7, #20]
100454c6:	189b      	adds	r3, r3, r2
100454c8:	221b      	movs	r2, #27
100454ca:	701a      	strb	r2, [r3, #0]
  hot_table_radio_config[index++] = RRM->VIT_CONF_DIG_ENG;
100454cc:	4a28      	ldr	r2, [pc, #160]	@ (10045570 <HAL_RADIO_Init+0x5b8>)
100454ce:	23b6      	movs	r3, #182	@ 0xb6
100454d0:	005b      	lsls	r3, r3, #1
100454d2:	58d1      	ldr	r1, [r2, r3]
100454d4:	183b      	adds	r3, r7, r0
100454d6:	781b      	ldrb	r3, [r3, #0]
100454d8:	0004      	movs	r4, r0
100454da:	183a      	adds	r2, r7, r0
100454dc:	1c58      	adds	r0, r3, #1
100454de:	7010      	strb	r0, [r2, #0]
100454e0:	001a      	movs	r2, r3
100454e2:	697b      	ldr	r3, [r7, #20]
100454e4:	189b      	adds	r3, r3, r2
100454e6:	b2ca      	uxtb	r2, r1
100454e8:	701a      	strb	r2, [r3, #0]
  hot_table_radio_config[index++] = RRM->ANTSW_DIG0_USR;
  hot_table_radio_config[index++] = 0x01;
  hot_table_radio_config[index++] = RRM_ANTSW_DIG1_USR;
  hot_table_radio_config[index++] = RRM->ANTSW_DIG1_USR;
#endif
  hot_table_radio_config[index++] = 0x00;
100454ea:	193b      	adds	r3, r7, r4
100454ec:	781b      	ldrb	r3, [r3, #0]
100454ee:	193a      	adds	r2, r7, r4
100454f0:	1c59      	adds	r1, r3, #1
100454f2:	7011      	strb	r1, [r2, #0]
100454f4:	001a      	movs	r2, r3
100454f6:	697b      	ldr	r3, [r7, #20]
100454f8:	189b      	adds	r3, r3, r2
100454fa:	2200      	movs	r2, #0
100454fc:	701a      	strb	r2, [r3, #0]

  hot_table_radio_config_u32[0] = (uint32_t)(&hot_table_radio_config_u32[4]); /* Point to Port 0 command list 1 executed when Wakeup timer triggers */
100454fe:	4a1d      	ldr	r2, [pc, #116]	@ (10045574 <HAL_RADIO_Init+0x5bc>)
10045500:	4b1d      	ldr	r3, [pc, #116]	@ (10045578 <HAL_RADIO_Init+0x5c0>)
10045502:	601a      	str	r2, [r3, #0]
  hot_table_radio_config_u32[1] = (uint32_t)(&hot_table_radio_config_u32[4]); /* Point to Port 0 command list 2 executed when Timer1 triggers       */
10045504:	4a1b      	ldr	r2, [pc, #108]	@ (10045574 <HAL_RADIO_Init+0x5bc>)
10045506:	4b1c      	ldr	r3, [pc, #112]	@ (10045578 <HAL_RADIO_Init+0x5c0>)
10045508:	605a      	str	r2, [r3, #4]
  hot_table_radio_config_u32[2] = (uint32_t)(&hot_table_radio_config_u32[3]); /* Point to Port 0 command list 3 executed when Timer2 triggers       */
1004550a:	4a1c      	ldr	r2, [pc, #112]	@ (1004557c <HAL_RADIO_Init+0x5c4>)
1004550c:	4b1a      	ldr	r3, [pc, #104]	@ (10045578 <HAL_RADIO_Init+0x5c0>)
1004550e:	609a      	str	r2, [r3, #8]
  hot_table_radio_config_u32[3] = 0x00000000;                /* Null command */
10045510:	4b19      	ldr	r3, [pc, #100]	@ (10045578 <HAL_RADIO_Init+0x5c0>)
10045512:	2200      	movs	r2, #0
10045514:	60da      	str	r2, [r3, #12]

  LL_RADIO_SetRadioConfigurationAddressPointer(hot_table_radio_config_u32[0]);
10045516:	4b18      	ldr	r3, [pc, #96]	@ (10045578 <HAL_RADIO_Init+0x5c0>)
10045518:	681b      	ldr	r3, [r3, #0]
1004551a:	0018      	movs	r0, r3
1004551c:	f7ff fba4 	bl	10044c68 <LL_RADIO_SetRadioConfigurationAddressPointer>
  /* Reload radio config pointer */
  RRM->UDRA_CTRL0 = RRM_UDRA_CTRL0_RELOAD_RDCFGPTR;
10045520:	4b13      	ldr	r3, [pc, #76]	@ (10045570 <HAL_RADIO_Init+0x5b8>)
10045522:	2201      	movs	r2, #1
10045524:	611a      	str	r2, [r3, #16]
  LL_RADIO_Active2ErrorInterrupt_Enable();
10045526:	f7ff fcf3 	bl	10044f10 <LL_RADIO_Active2ErrorInterrupt_Enable>

#if USE_RADIO_PROPRIETARY_DRIVER
  globalParameters.back2backTime = BACK_TO_BACK_TIME;
1004552a:	4b15      	ldr	r3, [pc, #84]	@ (10045580 <HAL_RADIO_Init+0x5c8>)
1004552c:	2296      	movs	r2, #150	@ 0x96
1004552e:	601a      	str	r2, [r3, #0]
  globalParameters.tone_start_stop_flag = 0;
10045530:	4b13      	ldr	r3, [pc, #76]	@ (10045580 <HAL_RADIO_Init+0x5c8>)
10045532:	2200      	movs	r2, #0
10045534:	711a      	strb	r2, [r3, #4]
#endif

  /*Clear all interrupts of the BLUE Controller*/
  uint32_t int_val_tmp = BLUE->INTERRUPT1REG;
10045536:	23c0      	movs	r3, #192	@ 0xc0
10045538:	05db      	lsls	r3, r3, #23
1004553a:	685b      	ldr	r3, [r3, #4]
1004553c:	60fb      	str	r3, [r7, #12]
  BLUE->INTERRUPT1REG = int_val_tmp;
1004553e:	23c0      	movs	r3, #192	@ 0xc0
10045540:	05db      	lsls	r3, r3, #23
10045542:	68fa      	ldr	r2, [r7, #12]
10045544:	605a      	str	r2, [r3, #4]

  /*BLE wake up IRQ Status clearing and enable*/
  WAKEUP->WAKEUP_BLE_IRQ_STATUS |= 1;
10045546:	4b0f      	ldr	r3, [pc, #60]	@ (10045584 <HAL_RADIO_Init+0x5cc>)
10045548:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
1004554a:	4b0e      	ldr	r3, [pc, #56]	@ (10045584 <HAL_RADIO_Init+0x5cc>)
1004554c:	2101      	movs	r1, #1
1004554e:	430a      	orrs	r2, r1
10045550:	645a      	str	r2, [r3, #68]	@ 0x44
  WAKEUP->WAKEUP_BLE_IRQ_ENABLE |= 1;
10045552:	4b0c      	ldr	r3, [pc, #48]	@ (10045584 <HAL_RADIO_Init+0x5cc>)
10045554:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
10045556:	4b0b      	ldr	r3, [pc, #44]	@ (10045584 <HAL_RADIO_Init+0x5cc>)
10045558:	2101      	movs	r1, #1
1004555a:	430a      	orrs	r2, r1
1004555c:	641a      	str	r2, [r3, #64]	@ 0x40
  /* If the device is configured with
     System clock = 64 MHz and BLE clock = 16 MHz
     a register read is necessary to end fine
     the clear interrupt register operation,
     due the AHB down converter latency */
  int_val_tmp = BLUE->INTERRUPT1REG;
1004555e:	23c0      	movs	r3, #192	@ 0xc0
10045560:	05db      	lsls	r3, r3, #23
10045562:	685b      	ldr	r3, [r3, #4]
10045564:	60fb      	str	r3, [r7, #12]

  return;
10045566:	46c0      	nop			@ (mov r8, r8)
}
10045568:	46bd      	mov	sp, r7
1004556a:	b00d      	add	sp, #52	@ 0x34
1004556c:	bd90      	pop	{r4, r7, pc}
1004556e:	46c0      	nop			@ (mov r8, r8)
10045570:	60001400 	.word	0x60001400
10045574:	20000574 	.word	0x20000574
10045578:	20000564 	.word	0x20000564
1004557c:	20000570 	.word	0x20000570
10045580:	200004d8 	.word	0x200004d8
10045584:	60001800 	.word	0x60001800

10045588 <HAL_RADIO_ReadRSSI>:
/**
  * @brief  Read RSSI
  * @retval int8_t: RSSI in dBm
  */
int8_t HAL_RADIO_ReadRSSI(void)
{
10045588:	b580      	push	{r7, lr}
1004558a:	b086      	sub	sp, #24
1004558c:	af00      	add	r7, sp, #0
  int32_t rssi_dbm;
  uint32_t rssi0 = RRM->RSSI0_DIG_OUT;
1004558e:	4a24      	ldr	r2, [pc, #144]	@ (10045620 <HAL_RADIO_ReadRSSI+0x98>)
10045590:	23a9      	movs	r3, #169	@ 0xa9
10045592:	009b      	lsls	r3, r3, #2
10045594:	58d3      	ldr	r3, [r2, r3]
10045596:	60fb      	str	r3, [r7, #12]
  uint32_t rssi1 = RRM->RSSI1_DIG_OUT;
10045598:	4a21      	ldr	r2, [pc, #132]	@ (10045620 <HAL_RADIO_ReadRSSI+0x98>)
1004559a:	23aa      	movs	r3, #170	@ 0xaa
1004559c:	009b      	lsls	r3, r3, #2
1004559e:	58d3      	ldr	r3, [r2, r3]
100455a0:	60bb      	str	r3, [r7, #8]

  uint32_t rssi_int16 = ((rssi1 & 0xFF) << 8) | (rssi0 & 0xFF);
100455a2:	68bb      	ldr	r3, [r7, #8]
100455a4:	021b      	lsls	r3, r3, #8
100455a6:	041b      	lsls	r3, r3, #16
100455a8:	0c1a      	lsrs	r2, r3, #16
100455aa:	68fb      	ldr	r3, [r7, #12]
100455ac:	21ff      	movs	r1, #255	@ 0xff
100455ae:	400b      	ands	r3, r1
100455b0:	4313      	orrs	r3, r2
100455b2:	613b      	str	r3, [r7, #16]
  uint32_t reg_agc = RRM->AGC_DIG_OUT;
100455b4:	4a1a      	ldr	r2, [pc, #104]	@ (10045620 <HAL_RADIO_ReadRSSI+0x98>)
100455b6:	23ab      	movs	r3, #171	@ 0xab
100455b8:	009b      	lsls	r3, r3, #2
100455ba:	58d3      	ldr	r3, [r2, r3]
100455bc:	607b      	str	r3, [r7, #4]

  if ((rssi_int16 == 0U) || (reg_agc > 0xbU))
100455be:	693b      	ldr	r3, [r7, #16]
100455c0:	2b00      	cmp	r3, #0
100455c2:	d002      	beq.n	100455ca <HAL_RADIO_ReadRSSI+0x42>
100455c4:	687b      	ldr	r3, [r7, #4]
100455c6:	2b0b      	cmp	r3, #11
100455c8:	d902      	bls.n	100455d0 <HAL_RADIO_ReadRSSI+0x48>
  {
    rssi_dbm = 127 ;
100455ca:	237f      	movs	r3, #127	@ 0x7f
100455cc:	617b      	str	r3, [r7, #20]
100455ce:	e020      	b.n	10045612 <HAL_RADIO_ReadRSSI+0x8a>
  }
  else
  {
    rssi_dbm = (int32_t)reg_agc * 6 - RSSI_OFFSET;//127 ;
100455d0:	687a      	ldr	r2, [r7, #4]
100455d2:	0013      	movs	r3, r2
100455d4:	005b      	lsls	r3, r3, #1
100455d6:	189b      	adds	r3, r3, r2
100455d8:	005b      	lsls	r3, r3, #1
100455da:	3b77      	subs	r3, #119	@ 0x77
100455dc:	617b      	str	r3, [r7, #20]
    while (rssi_int16 > 30U)
100455de:	e005      	b.n	100455ec <HAL_RADIO_ReadRSSI+0x64>
    {
      rssi_dbm = rssi_dbm + 6 ;
100455e0:	697b      	ldr	r3, [r7, #20]
100455e2:	3306      	adds	r3, #6
100455e4:	617b      	str	r3, [r7, #20]
      rssi_int16 = (rssi_int16 >> 1) ;
100455e6:	693b      	ldr	r3, [r7, #16]
100455e8:	085b      	lsrs	r3, r3, #1
100455ea:	613b      	str	r3, [r7, #16]
    while (rssi_int16 > 30U)
100455ec:	693b      	ldr	r3, [r7, #16]
100455ee:	2b1e      	cmp	r3, #30
100455f0:	d8f6      	bhi.n	100455e0 <HAL_RADIO_ReadRSSI+0x58>
    }
    rssi_dbm = rssi_dbm + (int32_t)(uint32_t)((417U * rssi_int16 + 18080U) >> 10);
100455f2:	693a      	ldr	r2, [r7, #16]
100455f4:	0013      	movs	r3, r2
100455f6:	005b      	lsls	r3, r3, #1
100455f8:	189b      	adds	r3, r3, r2
100455fa:	009b      	lsls	r3, r3, #2
100455fc:	189b      	adds	r3, r3, r2
100455fe:	015b      	lsls	r3, r3, #5
10045600:	189b      	adds	r3, r3, r2
10045602:	4a08      	ldr	r2, [pc, #32]	@ (10045624 <HAL_RADIO_ReadRSSI+0x9c>)
10045604:	4694      	mov	ip, r2
10045606:	4463      	add	r3, ip
10045608:	0a9b      	lsrs	r3, r3, #10
1004560a:	001a      	movs	r2, r3
1004560c:	697b      	ldr	r3, [r7, #20]
1004560e:	189b      	adds	r3, r3, r2
10045610:	617b      	str	r3, [r7, #20]
  }
  return (int8_t)rssi_dbm;
10045612:	697b      	ldr	r3, [r7, #20]
10045614:	b25b      	sxtb	r3, r3
}
10045616:	0018      	movs	r0, r3
10045618:	46bd      	mov	sp, r7
1004561a:	b006      	add	sp, #24
1004561c:	bd80      	pop	{r7, pc}
1004561e:	46c0      	nop			@ (mov r8, r8)
10045620:	60001400 	.word	0x60001400
10045624:	000046a0 	.word	0x000046a0

10045628 <HAL_RADIO_Callback>:
  * @param  p: Current action packet which its transaction has been completed.
  * @param  next: Next action packet which is going to be scheduled.
  * @retval return value: TRUE
  */
uint8_t HAL_RADIO_Callback(ActionPacket *p, ActionPacket *next)
{
10045628:	b590      	push	{r4, r7, lr}
1004562a:	b085      	sub	sp, #20
1004562c:	af00      	add	r7, sp, #0
1004562e:	6078      	str	r0, [r7, #4]
10045630:	6039      	str	r1, [r7, #0]
  /* Event is a reception */
  if ((p->status & BLUE_STATUSREG_PREVTRANSMIT) == 0)
10045632:	687b      	ldr	r3, [r7, #4]
10045634:	68db      	ldr	r3, [r3, #12]
10045636:	2240      	movs	r2, #64	@ 0x40
10045638:	4013      	ands	r3, r2
1004563a:	d153      	bne.n	100456e4 <HAL_RADIO_Callback+0xbc>
  {
    RxStats_t receivedStats = {0};
1004563c:	2408      	movs	r4, #8
1004563e:	193b      	adds	r3, r7, r4
10045640:	0018      	movs	r0, r3
10045642:	2308      	movs	r3, #8
10045644:	001a      	movs	r2, r3
10045646:	2100      	movs	r1, #0
10045648:	f003 fe88 	bl	1004935c <memset>
    /* Reception ends with no errors */
    if ((p->status & BLUE_INTERRUPT1REG_RCVOK) != 0)
1004564c:	687b      	ldr	r3, [r7, #4]
1004564e:	68db      	ldr	r3, [r3, #12]
10045650:	2b00      	cmp	r3, #0
10045652:	da20      	bge.n	10045696 <HAL_RADIO_Callback+0x6e>
    {
      if ((p->status & BLUE_INTERRUPT1REG_ENCERROR) != 0)
10045654:	687b      	ldr	r3, [r7, #4]
10045656:	68da      	ldr	r2, [r3, #12]
10045658:	2380      	movs	r3, #128	@ 0x80
1004565a:	019b      	lsls	r3, r3, #6
1004565c:	4013      	ands	r3, r2
1004565e:	d00c      	beq.n	1004567a <HAL_RADIO_Callback+0x52>
      {
        receivedStats.rssi = p->rssi;
10045660:	687b      	ldr	r3, [r7, #4]
10045662:	695a      	ldr	r2, [r3, #20]
10045664:	193b      	adds	r3, r7, r4
10045666:	601a      	str	r2, [r3, #0]
        receivedStats.timestamp_receive = p->timestamp_receive;
10045668:	687b      	ldr	r3, [r7, #4]
1004566a:	691a      	ldr	r2, [r3, #16]
1004566c:	193b      	adds	r3, r7, r4
1004566e:	605a      	str	r2, [r3, #4]
        HAL_RADIO_CallbackRcvEncryptErr(&receivedStats);
10045670:	193b      	adds	r3, r7, r4
10045672:	0018      	movs	r0, r3
10045674:	f000 f843 	bl	100456fe <HAL_RADIO_CallbackRcvEncryptErr>
10045678:	e03c      	b.n	100456f4 <HAL_RADIO_Callback+0xcc>
      }
      else
      {
        receivedStats.rssi = p->rssi;
1004567a:	687b      	ldr	r3, [r7, #4]
1004567c:	695a      	ldr	r2, [r3, #20]
1004567e:	2108      	movs	r1, #8
10045680:	187b      	adds	r3, r7, r1
10045682:	601a      	str	r2, [r3, #0]
        receivedStats.timestamp_receive = p->timestamp_receive;
10045684:	687b      	ldr	r3, [r7, #4]
10045686:	691a      	ldr	r2, [r3, #16]
10045688:	187b      	adds	r3, r7, r1
1004568a:	605a      	str	r2, [r3, #4]
        HAL_RADIO_CallbackRcvOk(&receivedStats);
1004568c:	187b      	adds	r3, r7, r1
1004568e:	0018      	movs	r0, r3
10045690:	f7fd faea 	bl	10042c68 <HAL_RADIO_CallbackRcvOk>
10045694:	e02e      	b.n	100456f4 <HAL_RADIO_Callback+0xcc>
      }
    }
    /* Reception ends with timeout */
    else if ((p->status & BLUE_INTERRUPT1REG_RCVTIMEOUT) != 0)
10045696:	687b      	ldr	r3, [r7, #4]
10045698:	68da      	ldr	r2, [r3, #12]
1004569a:	2380      	movs	r3, #128	@ 0x80
1004569c:	04db      	lsls	r3, r3, #19
1004569e:	4013      	ands	r3, r2
100456a0:	d00c      	beq.n	100456bc <HAL_RADIO_Callback+0x94>
    {
      receivedStats.rssi = p->rssi;
100456a2:	687b      	ldr	r3, [r7, #4]
100456a4:	695a      	ldr	r2, [r3, #20]
100456a6:	2108      	movs	r1, #8
100456a8:	187b      	adds	r3, r7, r1
100456aa:	601a      	str	r2, [r3, #0]
      receivedStats.timestamp_receive = 0;
100456ac:	187b      	adds	r3, r7, r1
100456ae:	2200      	movs	r2, #0
100456b0:	605a      	str	r2, [r3, #4]
      HAL_RADIO_CallbackRcvTimeout(&receivedStats);
100456b2:	187b      	adds	r3, r7, r1
100456b4:	0018      	movs	r0, r3
100456b6:	f7fd fa95 	bl	10042be4 <HAL_RADIO_CallbackRcvTimeout>
100456ba:	e01b      	b.n	100456f4 <HAL_RADIO_Callback+0xcc>
    }
    /* Reception ends with errors */
    else if ((p->status & BLUE_INTERRUPT1REG_RCVCRCERR) != 0)
100456bc:	687b      	ldr	r3, [r7, #4]
100456be:	68da      	ldr	r2, [r3, #12]
100456c0:	2380      	movs	r3, #128	@ 0x80
100456c2:	05db      	lsls	r3, r3, #23
100456c4:	4013      	ands	r3, r2
100456c6:	d015      	beq.n	100456f4 <HAL_RADIO_Callback+0xcc>
    {
      receivedStats.rssi = p->rssi;
100456c8:	687b      	ldr	r3, [r7, #4]
100456ca:	695a      	ldr	r2, [r3, #20]
100456cc:	2108      	movs	r1, #8
100456ce:	187b      	adds	r3, r7, r1
100456d0:	601a      	str	r2, [r3, #0]
      receivedStats.timestamp_receive = p->timestamp_receive;
100456d2:	687b      	ldr	r3, [r7, #4]
100456d4:	691a      	ldr	r2, [r3, #16]
100456d6:	187b      	adds	r3, r7, r1
100456d8:	605a      	str	r2, [r3, #4]
      HAL_RADIO_CallbackRcvError(&receivedStats);
100456da:	187b      	adds	r3, r7, r1
100456dc:	0018      	movs	r0, r3
100456de:	f7fd fa5f 	bl	10042ba0 <HAL_RADIO_CallbackRcvError>
100456e2:	e007      	b.n	100456f4 <HAL_RADIO_Callback+0xcc>
    }
  }
  /* Event is a transmission */
  else if ((p->status & BLUE_INTERRUPT1REG_DONE) != 0)
100456e4:	687b      	ldr	r3, [r7, #4]
100456e6:	68da      	ldr	r2, [r3, #12]
100456e8:	2380      	movs	r3, #128	@ 0x80
100456ea:	049b      	lsls	r3, r3, #18
100456ec:	4013      	ands	r3, r2
100456ee:	d001      	beq.n	100456f4 <HAL_RADIO_Callback+0xcc>
  {
    /* RADIO TX operation done */
    HAL_RADIO_CallbackTxDone();
100456f0:	f7fd fa9a 	bl	10042c28 <HAL_RADIO_CallbackTxDone>
  }
  return TRUE;
100456f4:	2301      	movs	r3, #1
}
100456f6:	0018      	movs	r0, r3
100456f8:	46bd      	mov	sp, r7
100456fa:	b005      	add	sp, #20
100456fc:	bd90      	pop	{r4, r7, pc}

100456fe <HAL_RADIO_CallbackRcvEncryptErr>:

__weak void HAL_RADIO_CallbackRcvError(RxStats_t *rxPacketStats) {}
__weak void HAL_RADIO_CallbackRcvTimeout(RxStats_t *rxPacketStats) {}
__weak void HAL_RADIO_CallbackRcvEncryptErr(RxStats_t *rxPacketStats) {}
100456fe:	b580      	push	{r7, lr}
10045700:	b082      	sub	sp, #8
10045702:	af00      	add	r7, sp, #0
10045704:	6078      	str	r0, [r7, #4]
10045706:	46c0      	nop			@ (mov r8, r8)
10045708:	46bd      	mov	sp, r7
1004570a:	b002      	add	sp, #8
1004570c:	bd80      	pop	{r7, pc}
	...

10045710 <HAL_RADIO_ActionPacketIsr>:
  * @brief  Radio ISR.
  *         Besides, next packet is scheduled here.
  * @retval None
  */
static void HAL_RADIO_ActionPacketIsr(uint32_t int_flags)
{
10045710:	b590      	push	{r4, r7, lr}
10045712:	b089      	sub	sp, #36	@ 0x24
10045714:	af00      	add	r7, sp, #0
10045716:	6078      	str	r0, [r7, #4]
  if ((int_flags & BLUE_INTERRUPT1REG_DONE) != 0)
10045718:	687a      	ldr	r2, [r7, #4]
1004571a:	2380      	movs	r3, #128	@ 0x80
1004571c:	049b      	lsls	r3, r3, #18
1004571e:	4013      	ands	r3, r2
10045720:	d100      	bne.n	10045724 <HAL_RADIO_ActionPacketIsr+0x14>
10045722:	e105      	b.n	10045930 <HAL_RADIO_ActionPacketIsr+0x220>
    BlueTransStruct *p;
    uint32_t time;

    /* Copy status in order for callback to access it. */
    globalParameters.current_action_packet->status = int_flags | \
                                                     (BLUE->STATUSREG & BLUE_STATUSREG_PREVTRANSMIT_Msk);
10045724:	23c0      	movs	r3, #192	@ 0xc0
10045726:	05db      	lsls	r3, r3, #23
10045728:	69db      	ldr	r3, [r3, #28]
1004572a:	2240      	movs	r2, #64	@ 0x40
1004572c:	4013      	ands	r3, r2
1004572e:	0019      	movs	r1, r3
    globalParameters.current_action_packet->status = int_flags | \
10045730:	4b81      	ldr	r3, [pc, #516]	@ (10045938 <HAL_RADIO_ActionPacketIsr+0x228>)
10045732:	689b      	ldr	r3, [r3, #8]
10045734:	687a      	ldr	r2, [r7, #4]
10045736:	430a      	orrs	r2, r1
10045738:	60da      	str	r2, [r3, #12]

    if ((globalParameters.current_action_packet->condRoutine(globalParameters.current_action_packet)) == TRUE)
1004573a:	4b7f      	ldr	r3, [pc, #508]	@ (10045938 <HAL_RADIO_ActionPacketIsr+0x228>)
1004573c:	689b      	ldr	r3, [r3, #8]
1004573e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
10045740:	4b7d      	ldr	r3, [pc, #500]	@ (10045938 <HAL_RADIO_ActionPacketIsr+0x228>)
10045742:	689b      	ldr	r3, [r3, #8]
10045744:	0018      	movs	r0, r3
10045746:	4790      	blx	r2
10045748:	0003      	movs	r3, r0
1004574a:	2b01      	cmp	r3, #1
1004574c:	d104      	bne.n	10045758 <HAL_RADIO_ActionPacketIsr+0x48>
    {
      next = globalParameters.current_action_packet->next_true;
1004574e:	4b7a      	ldr	r3, [pc, #488]	@ (10045938 <HAL_RADIO_ActionPacketIsr+0x228>)
10045750:	689b      	ldr	r3, [r3, #8]
10045752:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
10045754:	61fb      	str	r3, [r7, #28]
10045756:	e003      	b.n	10045760 <HAL_RADIO_ActionPacketIsr+0x50>
    }
    else
    {
      next = globalParameters.current_action_packet->next_false;
10045758:	4b77      	ldr	r3, [pc, #476]	@ (10045938 <HAL_RADIO_ActionPacketIsr+0x228>)
1004575a:	689b      	ldr	r3, [r3, #8]
1004575c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
1004575e:	61fb      	str	r3, [r7, #28]
    }
    /*The radio event is started. So here a check on the next packet of the event is made*/
    if (next == NULL_0)
10045760:	69fb      	ldr	r3, [r7, #28]
10045762:	2b00      	cmp	r3, #0
10045764:	d116      	bne.n	10045794 <HAL_RADIO_ActionPacketIsr+0x84>
    {
      /* timer2 off */
      LL_RADIO_TIMER_DisableTimer1(BLUE);
10045766:	23c0      	movs	r3, #192	@ 0xc0
10045768:	05db      	lsls	r3, r3, #23
1004576a:	0018      	movs	r0, r3
1004576c:	f7ff fbde 	bl	10044f2c <LL_RADIO_TIMER_DisableTimer1>
      LL_RADIO_TIMER_DisableTimer2(BLUE);
10045770:	23c0      	movs	r3, #192	@ 0xc0
10045772:	05db      	lsls	r3, r3, #23
10045774:	0018      	movs	r0, r3
10045776:	f7ff fbe8 	bl	10044f4a <LL_RADIO_TIMER_DisableTimer2>
      LL_RADIO_TIMER_DisableBLEWakeupTimer(WAKEUP);
1004577a:	4b70      	ldr	r3, [pc, #448]	@ (1004593c <HAL_RADIO_ActionPacketIsr+0x22c>)
1004577c:	0018      	movs	r0, r3
1004577e:	f7ff fbf3 	bl	10044f68 <LL_RADIO_TIMER_DisableBLEWakeupTimer>
      MODIFY_REG(BLUEGLOB->BYTE4, GLOBAL_BYTE4_ACTIVE_Msk, BLUE_IDLE_0);
10045782:	4b6f      	ldr	r3, [pc, #444]	@ (10045940 <HAL_RADIO_ActionPacketIsr+0x230>)
10045784:	791b      	ldrb	r3, [r3, #4]
10045786:	b2db      	uxtb	r3, r3
10045788:	4a6d      	ldr	r2, [pc, #436]	@ (10045940 <HAL_RADIO_ActionPacketIsr+0x230>)
1004578a:	217f      	movs	r1, #127	@ 0x7f
1004578c:	400b      	ands	r3, r1
1004578e:	b2db      	uxtb	r3, r3
10045790:	7113      	strb	r3, [r2, #4]
10045792:	e099      	b.n	100458c8 <HAL_RADIO_ActionPacketIsr+0x1b8>
    }
    else
    {
      BLUEGLOB->BYTE4 = (next->StateMachineNo | GLOBAL_BYTE4_ACTIVE_Msk);
10045794:	69fb      	ldr	r3, [r7, #28]
10045796:	781b      	ldrb	r3, [r3, #0]
10045798:	4969      	ldr	r1, [pc, #420]	@ (10045940 <HAL_RADIO_ActionPacketIsr+0x230>)
1004579a:	2280      	movs	r2, #128	@ 0x80
1004579c:	4252      	negs	r2, r2
1004579e:	4313      	orrs	r3, r2
100457a0:	b2db      	uxtb	r3, r3
100457a2:	710b      	strb	r3, [r1, #4]
      p = &next->trans_packet;
100457a4:	69fb      	ldr	r3, [r7, #28]
100457a6:	3318      	adds	r3, #24
100457a8:	61bb      	str	r3, [r7, #24]
      MODIFY_REG((bluedata + next->StateMachineNo)->BYTE0, STATEMACH_BYTE0_TXMODE_Msk,
100457aa:	69fb      	ldr	r3, [r7, #28]
100457ac:	781b      	ldrb	r3, [r3, #0]
100457ae:	001a      	movs	r2, r3
100457b0:	0013      	movs	r3, r2
100457b2:	009b      	lsls	r3, r3, #2
100457b4:	189b      	adds	r3, r3, r2
100457b6:	011b      	lsls	r3, r3, #4
100457b8:	4a62      	ldr	r2, [pc, #392]	@ (10045944 <HAL_RADIO_ActionPacketIsr+0x234>)
100457ba:	4694      	mov	ip, r2
100457bc:	4463      	add	r3, ip
100457be:	781b      	ldrb	r3, [r3, #0]
100457c0:	b2db      	uxtb	r3, r3
100457c2:	b25b      	sxtb	r3, r3
100457c4:	227f      	movs	r2, #127	@ 0x7f
100457c6:	4013      	ands	r3, r2
100457c8:	b25a      	sxtb	r2, r3
100457ca:	69fb      	ldr	r3, [r7, #28]
100457cc:	213c      	movs	r1, #60	@ 0x3c
100457ce:	5c5b      	ldrb	r3, [r3, r1]
100457d0:	b25b      	sxtb	r3, r3
100457d2:	4313      	orrs	r3, r2
100457d4:	b259      	sxtb	r1, r3
100457d6:	69fb      	ldr	r3, [r7, #28]
100457d8:	781b      	ldrb	r3, [r3, #0]
100457da:	001a      	movs	r2, r3
100457dc:	0013      	movs	r3, r2
100457de:	009b      	lsls	r3, r3, #2
100457e0:	189b      	adds	r3, r3, r2
100457e2:	011b      	lsls	r3, r3, #4
100457e4:	4a57      	ldr	r2, [pc, #348]	@ (10045944 <HAL_RADIO_ActionPacketIsr+0x234>)
100457e6:	4694      	mov	ip, r2
100457e8:	4463      	add	r3, ip
100457ea:	b2ca      	uxtb	r2, r1
100457ec:	701a      	strb	r2, [r3, #0]
                 next->trans_config);/* Transmission or reception*/
      (bluedata + next->StateMachineNo)->TXPOINT = BLUE_STRUCT_PTR_CAST(p);
100457ee:	69fb      	ldr	r3, [r7, #28]
100457f0:	781b      	ldrb	r3, [r3, #0]
100457f2:	001a      	movs	r2, r3
100457f4:	0013      	movs	r3, r2
100457f6:	009b      	lsls	r3, r3, #2
100457f8:	189b      	adds	r3, r3, r2
100457fa:	011b      	lsls	r3, r3, #4
100457fc:	4a51      	ldr	r2, [pc, #324]	@ (10045944 <HAL_RADIO_ActionPacketIsr+0x234>)
100457fe:	4694      	mov	ip, r2
10045800:	4463      	add	r3, ip
10045802:	69ba      	ldr	r2, [r7, #24]
10045804:	605a      	str	r2, [r3, #4]
      (bluedata + next->StateMachineNo)->RCVPOINT = BLUE_STRUCT_PTR_CAST(p);
10045806:	69fb      	ldr	r3, [r7, #28]
10045808:	781b      	ldrb	r3, [r3, #0]
1004580a:	001a      	movs	r2, r3
1004580c:	0013      	movs	r3, r2
1004580e:	009b      	lsls	r3, r3, #2
10045810:	189b      	adds	r3, r3, r2
10045812:	011b      	lsls	r3, r3, #4
10045814:	4a4b      	ldr	r2, [pc, #300]	@ (10045944 <HAL_RADIO_ActionPacketIsr+0x234>)
10045816:	4694      	mov	ip, r2
10045818:	4463      	add	r3, ip
1004581a:	69ba      	ldr	r2, [r7, #24]
1004581c:	609a      	str	r2, [r3, #8]
      (bluedata + next->StateMachineNo)->MAXRECEIVEDLENGTH = next->MaxReceiveLength;
1004581e:	69fb      	ldr	r3, [r7, #28]
10045820:	781b      	ldrb	r3, [r3, #0]
10045822:	001a      	movs	r2, r3
10045824:	0013      	movs	r3, r2
10045826:	009b      	lsls	r3, r3, #2
10045828:	189b      	adds	r3, r3, r2
1004582a:	011b      	lsls	r3, r3, #4
1004582c:	4a45      	ldr	r2, [pc, #276]	@ (10045944 <HAL_RADIO_ActionPacketIsr+0x234>)
1004582e:	4694      	mov	ip, r2
10045830:	4463      	add	r3, ip
10045832:	69fa      	ldr	r2, [r7, #28]
10045834:	7891      	ldrb	r1, [r2, #2]
10045836:	222b      	movs	r2, #43	@ 0x2b
10045838:	5499      	strb	r1, [r3, r2]

      /* Packet will execute on time specified by WakeupTime */
      if ((next->ActionTag & TIMER_WAKEUP) != 0)
1004583a:	69fb      	ldr	r3, [r7, #28]
1004583c:	785b      	ldrb	r3, [r3, #1]
1004583e:	001a      	movs	r2, r3
10045840:	2304      	movs	r3, #4
10045842:	4013      	ands	r3, r2
10045844:	d040      	beq.n	100458c8 <HAL_RADIO_ActionPacketIsr+0x1b8>
      {
        /* timer1/2 off */
        LL_RADIO_TIMER_DisableTimer1(BLUE);
10045846:	23c0      	movs	r3, #192	@ 0xc0
10045848:	05db      	lsls	r3, r3, #23
1004584a:	0018      	movs	r0, r3
1004584c:	f7ff fb6e 	bl	10044f2c <LL_RADIO_TIMER_DisableTimer1>
        LL_RADIO_TIMER_DisableTimer2(BLUE);
10045850:	23c0      	movs	r3, #192	@ 0xc0
10045852:	05db      	lsls	r3, r3, #23
10045854:	0018      	movs	r0, r3
10045856:	f7ff fb78 	bl	10044f4a <LL_RADIO_TIMER_DisableTimer2>

        /* program timer at next->wakeuptime */
        if ((next->ActionTag & RELATIVE) != 0)
1004585a:	69fb      	ldr	r3, [r7, #28]
1004585c:	785b      	ldrb	r3, [r3, #1]
1004585e:	001a      	movs	r2, r3
10045860:	2320      	movs	r3, #32
10045862:	4013      	ands	r3, r2
10045864:	d01e      	beq.n	100458a4 <HAL_RADIO_ActionPacketIsr+0x194>
        {
          time = HAL_RADIO_TIMER_GetCurrentSysTime() + HAL_RADIO_TIMER_UsToSystime(next->WakeupTime);
10045866:	f001 fa4b 	bl	10046d00 <HAL_RADIO_TIMER_GetCurrentSysTime>
1004586a:	0002      	movs	r2, r0
1004586c:	000b      	movs	r3, r1
1004586e:	0014      	movs	r4, r2
10045870:	69fb      	ldr	r3, [r7, #28]
10045872:	685b      	ldr	r3, [r3, #4]
10045874:	0018      	movs	r0, r3
10045876:	f001 fa1f 	bl	10046cb8 <HAL_RADIO_TIMER_UsToSystime>
1004587a:	0003      	movs	r3, r0
1004587c:	18e3      	adds	r3, r4, r3
1004587e:	617b      	str	r3, [r7, #20]
          HAL_RADIO_TIMER_SetRadioTimerValue(time, (next->trans_config == STATEMACH_BYTE0_TXMODE_Msk), (next->ActionTag & PLL_TRIG));
10045880:	69fb      	ldr	r3, [r7, #28]
10045882:	223c      	movs	r2, #60	@ 0x3c
10045884:	5c9b      	ldrb	r3, [r3, r2]
10045886:	3b80      	subs	r3, #128	@ 0x80
10045888:	425a      	negs	r2, r3
1004588a:	4153      	adcs	r3, r2
1004588c:	b2db      	uxtb	r3, r3
1004588e:	0019      	movs	r1, r3
10045890:	69fb      	ldr	r3, [r7, #28]
10045892:	785b      	ldrb	r3, [r3, #1]
10045894:	2201      	movs	r2, #1
10045896:	4013      	ands	r3, r2
10045898:	b2da      	uxtb	r2, r3
1004589a:	697b      	ldr	r3, [r7, #20]
1004589c:	0018      	movs	r0, r3
1004589e:	f001 f917 	bl	10046ad0 <HAL_RADIO_TIMER_SetRadioTimerValue>
100458a2:	e011      	b.n	100458c8 <HAL_RADIO_ActionPacketIsr+0x1b8>
        }
        else
        {
          HAL_RADIO_TIMER_SetRadioTimerValue(next->WakeupTime, (next->trans_config == STATEMACH_BYTE0_TXMODE_Msk), (next->ActionTag & PLL_TRIG));
100458a4:	69fb      	ldr	r3, [r7, #28]
100458a6:	6858      	ldr	r0, [r3, #4]
100458a8:	69fb      	ldr	r3, [r7, #28]
100458aa:	223c      	movs	r2, #60	@ 0x3c
100458ac:	5c9b      	ldrb	r3, [r3, r2]
100458ae:	3b80      	subs	r3, #128	@ 0x80
100458b0:	425a      	negs	r2, r3
100458b2:	4153      	adcs	r3, r2
100458b4:	b2db      	uxtb	r3, r3
100458b6:	0019      	movs	r1, r3
100458b8:	69fb      	ldr	r3, [r7, #28]
100458ba:	785b      	ldrb	r3, [r3, #1]
100458bc:	2201      	movs	r2, #1
100458be:	4013      	ands	r3, r2
100458c0:	b2db      	uxtb	r3, r3
100458c2:	001a      	movs	r2, r3
100458c4:	f001 f904 	bl	10046ad0 <HAL_RADIO_TIMER_SetRadioTimerValue>
        /* back to back */
      }
    }

    /* Accept the packet even with CRC Error */
    if (((int_flags & BLUE_INTERRUPT1REG_RCVOK) != 0) || ((int_flags & BLUE_INTERRUPT1REG_RCVCRCERR) != 0))
100458c8:	687b      	ldr	r3, [r7, #4]
100458ca:	2b00      	cmp	r3, #0
100458cc:	db04      	blt.n	100458d8 <HAL_RADIO_ActionPacketIsr+0x1c8>
100458ce:	687a      	ldr	r2, [r7, #4]
100458d0:	2380      	movs	r3, #128	@ 0x80
100458d2:	05db      	lsls	r3, r3, #23
100458d4:	4013      	ands	r3, r2
100458d6:	d012      	beq.n	100458fe <HAL_RADIO_ActionPacketIsr+0x1ee>
    {

      uint64_t current_system_time;
      /* read RSSI */
      globalParameters.current_action_packet->rssi =  HAL_RADIO_ReadRSSI();
100458d8:	f7ff fe56 	bl	10045588 <HAL_RADIO_ReadRSSI>
100458dc:	0003      	movs	r3, r0
100458de:	001a      	movs	r2, r3
100458e0:	4b15      	ldr	r3, [pc, #84]	@ (10045938 <HAL_RADIO_ActionPacketIsr+0x228>)
100458e2:	689b      	ldr	r3, [r3, #8]
100458e4:	615a      	str	r2, [r3, #20]

      /* bluedata->config = bluedata->config ^ 0x80 ;  toggle NESN bit
      bluedata->config = bluedata->config & 0x7F ;  //reset NESN bit */

      /* read time stamp */
      globalParameters.current_action_packet->timestamp_receive = HAL_RADIO_TIMER_GetAnchorPoint(&current_system_time);
100458e6:	2308      	movs	r3, #8
100458e8:	18fb      	adds	r3, r7, r3
100458ea:	0018      	movs	r0, r3
100458ec:	f001 f8dc 	bl	10046aa8 <HAL_RADIO_TIMER_GetAnchorPoint>
100458f0:	0002      	movs	r2, r0
100458f2:	000b      	movs	r3, r1
100458f4:	4910      	ldr	r1, [pc, #64]	@ (10045938 <HAL_RADIO_ActionPacketIsr+0x228>)
100458f6:	6889      	ldr	r1, [r1, #8]
100458f8:	0013      	movs	r3, r2
100458fa:	610b      	str	r3, [r1, #16]
    {
100458fc:	e00b      	b.n	10045916 <HAL_RADIO_ActionPacketIsr+0x206>
    }
    else if ((int_flags & BLUE_INTERRUPT1REG_RCVTIMEOUT) != 0)
100458fe:	687a      	ldr	r2, [r7, #4]
10045900:	2380      	movs	r3, #128	@ 0x80
10045902:	04db      	lsls	r3, r3, #19
10045904:	4013      	ands	r3, r2
10045906:	d006      	beq.n	10045916 <HAL_RADIO_ActionPacketIsr+0x206>
    {
      /* read RSSI even if a timeout happens */
      globalParameters.current_action_packet->rssi =  HAL_RADIO_ReadRSSI();
10045908:	f7ff fe3e 	bl	10045588 <HAL_RADIO_ReadRSSI>
1004590c:	0003      	movs	r3, r0
1004590e:	001a      	movs	r2, r3
10045910:	4b09      	ldr	r3, [pc, #36]	@ (10045938 <HAL_RADIO_ActionPacketIsr+0x228>)
10045912:	689b      	ldr	r3, [r3, #8]
10045914:	615a      	str	r2, [r3, #20]
    }

    actionPacketBackup = globalParameters.current_action_packet;
10045916:	4b08      	ldr	r3, [pc, #32]	@ (10045938 <HAL_RADIO_ActionPacketIsr+0x228>)
10045918:	689b      	ldr	r3, [r3, #8]
1004591a:	613b      	str	r3, [r7, #16]
    globalParameters.current_action_packet = next;
1004591c:	4b06      	ldr	r3, [pc, #24]	@ (10045938 <HAL_RADIO_ActionPacketIsr+0x228>)
1004591e:	69fa      	ldr	r2, [r7, #28]
10045920:	609a      	str	r2, [r3, #8]
    actionPacketBackup->dataRoutine(actionPacketBackup, next);
10045922:	693b      	ldr	r3, [r7, #16]
10045924:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
10045926:	69f9      	ldr	r1, [r7, #28]
10045928:	693a      	ldr	r2, [r7, #16]
1004592a:	0010      	movs	r0, r2
1004592c:	4798      	blx	r3
  }

  return ;
1004592e:	46c0      	nop			@ (mov r8, r8)
10045930:	46c0      	nop			@ (mov r8, r8)
}
10045932:	46bd      	mov	sp, r7
10045934:	b009      	add	sp, #36	@ 0x24
10045936:	bd90      	pop	{r4, r7, pc}
10045938:	200004d8 	.word	0x200004d8
1004593c:	60001800 	.word	0x60001800
10045940:	200000c0 	.word	0x200000c0
10045944:	200000dc 	.word	0x200000dc

10045948 <HAL_RADIO_SetChannelMap>:
  * @param  StateMachineNo: state machine number in multi state.
  * @param  chan_remap: a 37-bit vector, one bit per channel from 0 to 36, with the LSB corresponding to the channel 0
  * @retval None
  */
void HAL_RADIO_SetChannelMap(uint8_t StateMachineNo, uint8_t *chan_remap)
{
10045948:	b590      	push	{r4, r7, lr}
1004594a:	b085      	sub	sp, #20
1004594c:	af00      	add	r7, sp, #0
1004594e:	0002      	movs	r2, r0
10045950:	6039      	str	r1, [r7, #0]
10045952:	1dfb      	adds	r3, r7, #7
10045954:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_STATE_VALID(StateMachineNo));

  for (uint8_t i = 0; i < 5; i++)
10045956:	230f      	movs	r3, #15
10045958:	18fb      	adds	r3, r7, r3
1004595a:	2200      	movs	r2, #0
1004595c:	701a      	strb	r2, [r3, #0]
1004595e:	e01a      	b.n	10045996 <HAL_RADIO_SetChannelMap+0x4e>
  {
    (bluedata + StateMachineNo)->USEDCHANNELFLAGS[i] = chan_remap[i];
10045960:	200f      	movs	r0, #15
10045962:	183b      	adds	r3, r7, r0
10045964:	781b      	ldrb	r3, [r3, #0]
10045966:	683a      	ldr	r2, [r7, #0]
10045968:	18d1      	adds	r1, r2, r3
1004596a:	1dfb      	adds	r3, r7, #7
1004596c:	781a      	ldrb	r2, [r3, #0]
1004596e:	0013      	movs	r3, r2
10045970:	009b      	lsls	r3, r3, #2
10045972:	189b      	adds	r3, r3, r2
10045974:	011b      	lsls	r3, r3, #4
10045976:	4a19      	ldr	r2, [pc, #100]	@ (100459dc <HAL_RADIO_SetChannelMap+0x94>)
10045978:	189a      	adds	r2, r3, r2
1004597a:	0004      	movs	r4, r0
1004597c:	183b      	adds	r3, r7, r0
1004597e:	781b      	ldrb	r3, [r3, #0]
10045980:	7808      	ldrb	r0, [r1, #0]
10045982:	212e      	movs	r1, #46	@ 0x2e
10045984:	18d3      	adds	r3, r2, r3
10045986:	185b      	adds	r3, r3, r1
10045988:	1c02      	adds	r2, r0, #0
1004598a:	701a      	strb	r2, [r3, #0]
  for (uint8_t i = 0; i < 5; i++)
1004598c:	193b      	adds	r3, r7, r4
1004598e:	781a      	ldrb	r2, [r3, #0]
10045990:	193b      	adds	r3, r7, r4
10045992:	3201      	adds	r2, #1
10045994:	701a      	strb	r2, [r3, #0]
10045996:	230f      	movs	r3, #15
10045998:	18fb      	adds	r3, r7, r3
1004599a:	781b      	ldrb	r3, [r3, #0]
1004599c:	2b04      	cmp	r3, #4
1004599e:	d9df      	bls.n	10045960 <HAL_RADIO_SetChannelMap+0x18>
  }
  (bluedata + StateMachineNo)->USEDCHANNELFLAGS[4] &= 0x1F;
100459a0:	1dfb      	adds	r3, r7, #7
100459a2:	781a      	ldrb	r2, [r3, #0]
100459a4:	0013      	movs	r3, r2
100459a6:	009b      	lsls	r3, r3, #2
100459a8:	189b      	adds	r3, r3, r2
100459aa:	011b      	lsls	r3, r3, #4
100459ac:	4a0b      	ldr	r2, [pc, #44]	@ (100459dc <HAL_RADIO_SetChannelMap+0x94>)
100459ae:	4694      	mov	ip, r2
100459b0:	4463      	add	r3, ip
100459b2:	2232      	movs	r2, #50	@ 0x32
100459b4:	5c9b      	ldrb	r3, [r3, r2]
100459b6:	b2d9      	uxtb	r1, r3
100459b8:	1dfb      	adds	r3, r7, #7
100459ba:	781a      	ldrb	r2, [r3, #0]
100459bc:	0013      	movs	r3, r2
100459be:	009b      	lsls	r3, r3, #2
100459c0:	189b      	adds	r3, r3, r2
100459c2:	011b      	lsls	r3, r3, #4
100459c4:	4a05      	ldr	r2, [pc, #20]	@ (100459dc <HAL_RADIO_SetChannelMap+0x94>)
100459c6:	4694      	mov	ip, r2
100459c8:	4463      	add	r3, ip
100459ca:	221f      	movs	r2, #31
100459cc:	400a      	ands	r2, r1
100459ce:	b2d1      	uxtb	r1, r2
100459d0:	2232      	movs	r2, #50	@ 0x32
100459d2:	5499      	strb	r1, [r3, r2]
  return;
100459d4:	46c0      	nop			@ (mov r8, r8)
}
100459d6:	46bd      	mov	sp, r7
100459d8:	b005      	add	sp, #20
100459da:	bd90      	pop	{r4, r7, pc}
100459dc:	200000dc 	.word	0x200000dc

100459e0 <HAL_RADIO_SetChannel>:
  * @param  channel: ble channel index. From 0 to 39.
  * @param  channel_increment: determines the hoping value.
  * @retval None
  */
void HAL_RADIO_SetChannel(uint8_t StateMachineNo, uint8_t channel, uint8_t channel_increment)
{
100459e0:	b590      	push	{r4, r7, lr}
100459e2:	b083      	sub	sp, #12
100459e4:	af00      	add	r7, sp, #0
100459e6:	0004      	movs	r4, r0
100459e8:	0008      	movs	r0, r1
100459ea:	0011      	movs	r1, r2
100459ec:	1dfb      	adds	r3, r7, #7
100459ee:	1c22      	adds	r2, r4, #0
100459f0:	701a      	strb	r2, [r3, #0]
100459f2:	1dbb      	adds	r3, r7, #6
100459f4:	1c02      	adds	r2, r0, #0
100459f6:	701a      	strb	r2, [r3, #0]
100459f8:	1d7b      	adds	r3, r7, #5
100459fa:	1c0a      	adds	r2, r1, #0
100459fc:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_STATE_VALID(StateMachineNo));
  assert_param(IS_RFCHANNEL_VALID(channel));

  MODIFY_REG((bluedata + StateMachineNo)->BYTE0, STATEMACH_BYTE0_UCHAN_Msk, channel);
100459fe:	1dfb      	adds	r3, r7, #7
10045a00:	781a      	ldrb	r2, [r3, #0]
10045a02:	0013      	movs	r3, r2
10045a04:	009b      	lsls	r3, r3, #2
10045a06:	189b      	adds	r3, r3, r2
10045a08:	011b      	lsls	r3, r3, #4
10045a0a:	4a24      	ldr	r2, [pc, #144]	@ (10045a9c <HAL_RADIO_SetChannel+0xbc>)
10045a0c:	4694      	mov	ip, r2
10045a0e:	4463      	add	r3, ip
10045a10:	781b      	ldrb	r3, [r3, #0]
10045a12:	b2db      	uxtb	r3, r3
10045a14:	b25b      	sxtb	r3, r3
10045a16:	223f      	movs	r2, #63	@ 0x3f
10045a18:	4393      	bics	r3, r2
10045a1a:	b25a      	sxtb	r2, r3
10045a1c:	1dbb      	adds	r3, r7, #6
10045a1e:	781b      	ldrb	r3, [r3, #0]
10045a20:	b25b      	sxtb	r3, r3
10045a22:	4313      	orrs	r3, r2
10045a24:	b259      	sxtb	r1, r3
10045a26:	1dfb      	adds	r3, r7, #7
10045a28:	781a      	ldrb	r2, [r3, #0]
10045a2a:	0013      	movs	r3, r2
10045a2c:	009b      	lsls	r3, r3, #2
10045a2e:	189b      	adds	r3, r3, r2
10045a30:	011b      	lsls	r3, r3, #4
10045a32:	4a1a      	ldr	r2, [pc, #104]	@ (10045a9c <HAL_RADIO_SetChannel+0xbc>)
10045a34:	4694      	mov	ip, r2
10045a36:	4463      	add	r3, ip
10045a38:	b2ca      	uxtb	r2, r1
10045a3a:	701a      	strb	r2, [r3, #0]
  /*if TxRxPack.incchan = 0, then remap_chan is used as physical channel*/
  MODIFY_REG((bluedata + StateMachineNo)->BYTE1, STATEMACH_BYTE1_REMAP_CHAN_Msk, channel);
10045a3c:	1dfb      	adds	r3, r7, #7
10045a3e:	781a      	ldrb	r2, [r3, #0]
10045a40:	0013      	movs	r3, r2
10045a42:	009b      	lsls	r3, r3, #2
10045a44:	189b      	adds	r3, r3, r2
10045a46:	011b      	lsls	r3, r3, #4
10045a48:	4a14      	ldr	r2, [pc, #80]	@ (10045a9c <HAL_RADIO_SetChannel+0xbc>)
10045a4a:	4694      	mov	ip, r2
10045a4c:	4463      	add	r3, ip
10045a4e:	785b      	ldrb	r3, [r3, #1]
10045a50:	b2db      	uxtb	r3, r3
10045a52:	b25b      	sxtb	r3, r3
10045a54:	223f      	movs	r2, #63	@ 0x3f
10045a56:	4393      	bics	r3, r2
10045a58:	b25a      	sxtb	r2, r3
10045a5a:	1dbb      	adds	r3, r7, #6
10045a5c:	781b      	ldrb	r3, [r3, #0]
10045a5e:	b25b      	sxtb	r3, r3
10045a60:	4313      	orrs	r3, r2
10045a62:	b259      	sxtb	r1, r3
10045a64:	1dfb      	adds	r3, r7, #7
10045a66:	781a      	ldrb	r2, [r3, #0]
10045a68:	0013      	movs	r3, r2
10045a6a:	009b      	lsls	r3, r3, #2
10045a6c:	189b      	adds	r3, r3, r2
10045a6e:	011b      	lsls	r3, r3, #4
10045a70:	4a0a      	ldr	r2, [pc, #40]	@ (10045a9c <HAL_RADIO_SetChannel+0xbc>)
10045a72:	4694      	mov	ip, r2
10045a74:	4463      	add	r3, ip
10045a76:	b2ca      	uxtb	r2, r1
10045a78:	705a      	strb	r2, [r3, #1]
  (bluedata + StateMachineNo)->HOPINCR = channel_increment;
10045a7a:	1dfb      	adds	r3, r7, #7
10045a7c:	781a      	ldrb	r2, [r3, #0]
10045a7e:	0013      	movs	r3, r2
10045a80:	009b      	lsls	r3, r3, #2
10045a82:	189b      	adds	r3, r3, r2
10045a84:	011b      	lsls	r3, r3, #4
10045a86:	4a05      	ldr	r2, [pc, #20]	@ (10045a9c <HAL_RADIO_SetChannel+0xbc>)
10045a88:	4694      	mov	ip, r2
10045a8a:	4463      	add	r3, ip
10045a8c:	1d7a      	adds	r2, r7, #5
10045a8e:	212d      	movs	r1, #45	@ 0x2d
10045a90:	7812      	ldrb	r2, [r2, #0]
10045a92:	545a      	strb	r2, [r3, r1]
  return;
10045a94:	46c0      	nop			@ (mov r8, r8)
}
10045a96:	46bd      	mov	sp, r7
10045a98:	b003      	add	sp, #12
10045a9a:	bd90      	pop	{r4, r7, pc}
10045a9c:	200000dc 	.word	0x200000dc

10045aa0 <HAL_RADIO_SetTxAttributes>:
  * @param  crc_init: CRC initialization value.
  *         This value must be 0x555555 when channel frequency is one of these values: 37, 38, 39.
  * @retval None
  */
void HAL_RADIO_SetTxAttributes(uint8_t StateMachineNo, uint32_t NetworkID, uint32_t crc_init)
{
10045aa0:	b580      	push	{r7, lr}
10045aa2:	b084      	sub	sp, #16
10045aa4:	af00      	add	r7, sp, #0
10045aa6:	60b9      	str	r1, [r7, #8]
10045aa8:	607a      	str	r2, [r7, #4]
10045aaa:	210f      	movs	r1, #15
10045aac:	187b      	adds	r3, r7, r1
10045aae:	1c02      	adds	r2, r0, #0
10045ab0:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_STATE_VALID(StateMachineNo));

  (bluedata + StateMachineNo)->ACCADDR = NetworkID;
10045ab2:	0008      	movs	r0, r1
10045ab4:	183b      	adds	r3, r7, r0
10045ab6:	781a      	ldrb	r2, [r3, #0]
10045ab8:	0013      	movs	r3, r2
10045aba:	009b      	lsls	r3, r3, #2
10045abc:	189b      	adds	r3, r3, r2
10045abe:	011b      	lsls	r3, r3, #4
10045ac0:	4a18      	ldr	r2, [pc, #96]	@ (10045b24 <HAL_RADIO_SetTxAttributes+0x84>)
10045ac2:	4694      	mov	ip, r2
10045ac4:	4463      	add	r3, ip
10045ac6:	68ba      	ldr	r2, [r7, #8]
10045ac8:	625a      	str	r2, [r3, #36]	@ 0x24
  (bluedata + StateMachineNo)->CRCINIT[0] = crc_init;
10045aca:	183b      	adds	r3, r7, r0
10045acc:	781a      	ldrb	r2, [r3, #0]
10045ace:	0013      	movs	r3, r2
10045ad0:	009b      	lsls	r3, r3, #2
10045ad2:	189b      	adds	r3, r3, r2
10045ad4:	011b      	lsls	r3, r3, #4
10045ad6:	4a13      	ldr	r2, [pc, #76]	@ (10045b24 <HAL_RADIO_SetTxAttributes+0x84>)
10045ad8:	4694      	mov	ip, r2
10045ada:	4463      	add	r3, ip
10045adc:	687a      	ldr	r2, [r7, #4]
10045ade:	b2d1      	uxtb	r1, r2
10045ae0:	2228      	movs	r2, #40	@ 0x28
10045ae2:	5499      	strb	r1, [r3, r2]
  (bluedata + StateMachineNo)->CRCINIT[1] = crc_init >> 8;
10045ae4:	687b      	ldr	r3, [r7, #4]
10045ae6:	0a19      	lsrs	r1, r3, #8
10045ae8:	183b      	adds	r3, r7, r0
10045aea:	781a      	ldrb	r2, [r3, #0]
10045aec:	0013      	movs	r3, r2
10045aee:	009b      	lsls	r3, r3, #2
10045af0:	189b      	adds	r3, r3, r2
10045af2:	011b      	lsls	r3, r3, #4
10045af4:	4a0b      	ldr	r2, [pc, #44]	@ (10045b24 <HAL_RADIO_SetTxAttributes+0x84>)
10045af6:	4694      	mov	ip, r2
10045af8:	4463      	add	r3, ip
10045afa:	b2c9      	uxtb	r1, r1
10045afc:	2229      	movs	r2, #41	@ 0x29
10045afe:	5499      	strb	r1, [r3, r2]
  (bluedata + StateMachineNo)->CRCINIT[2] = crc_init >> 16;
10045b00:	687b      	ldr	r3, [r7, #4]
10045b02:	0c19      	lsrs	r1, r3, #16
10045b04:	183b      	adds	r3, r7, r0
10045b06:	781a      	ldrb	r2, [r3, #0]
10045b08:	0013      	movs	r3, r2
10045b0a:	009b      	lsls	r3, r3, #2
10045b0c:	189b      	adds	r3, r3, r2
10045b0e:	011b      	lsls	r3, r3, #4
10045b10:	4a04      	ldr	r2, [pc, #16]	@ (10045b24 <HAL_RADIO_SetTxAttributes+0x84>)
10045b12:	4694      	mov	ip, r2
10045b14:	4463      	add	r3, ip
10045b16:	b2c9      	uxtb	r1, r1
10045b18:	222a      	movs	r2, #42	@ 0x2a
10045b1a:	5499      	strb	r1, [r3, r2]
  return;
10045b1c:	46c0      	nop			@ (mov r8, r8)
}
10045b1e:	46bd      	mov	sp, r7
10045b20:	b004      	add	sp, #16
10045b22:	bd80      	pop	{r7, pc}
10045b24:	200000dc 	.word	0x200000dc

10045b28 <HAL_RADIO_SetGlobalReceiveTimeout>:
  *         and access address detection.
  * @param  ReceiveTimeout: receive window length in microseconds.
  * @retval None
  */
void HAL_RADIO_SetGlobalReceiveTimeout(uint32_t ReceiveTimeout)
{
10045b28:	b580      	push	{r7, lr}
10045b2a:	b082      	sub	sp, #8
10045b2c:	af00      	add	r7, sp, #0
10045b2e:	6078      	str	r0, [r7, #4]
  /* Set the Rx window Timeout expressed as: 4^(RCVTIMEOUT_19_18)*RCVTIMEOUT_17_0 */
  if (ReceiveTimeout < 0x40000)
10045b30:	687a      	ldr	r2, [r7, #4]
10045b32:	2380      	movs	r3, #128	@ 0x80
10045b34:	02db      	lsls	r3, r3, #11
10045b36:	429a      	cmp	r2, r3
10045b38:	d211      	bcs.n	10045b5e <HAL_RADIO_SetGlobalReceiveTimeout+0x36>
  {
    BLUEGLOB->RCVTIMEOUT[0] = (ReceiveTimeout)       & 0x000000FF;
10045b3a:	4b3a      	ldr	r3, [pc, #232]	@ (10045c24 <HAL_RADIO_SetGlobalReceiveTimeout+0xfc>)
10045b3c:	687a      	ldr	r2, [r7, #4]
10045b3e:	b2d2      	uxtb	r2, r2
10045b40:	745a      	strb	r2, [r3, #17]
    BLUEGLOB->RCVTIMEOUT[1] = (ReceiveTimeout >> 8)  & 0x000000FF;
10045b42:	687b      	ldr	r3, [r7, #4]
10045b44:	0a1a      	lsrs	r2, r3, #8
10045b46:	4b37      	ldr	r3, [pc, #220]	@ (10045c24 <HAL_RADIO_SetGlobalReceiveTimeout+0xfc>)
10045b48:	b2d2      	uxtb	r2, r2
10045b4a:	749a      	strb	r2, [r3, #18]
    BLUEGLOB->RCVTIMEOUT[2] = (ReceiveTimeout >> 16) & 0x00000003;
10045b4c:	687b      	ldr	r3, [r7, #4]
10045b4e:	0c1b      	lsrs	r3, r3, #16
10045b50:	b2db      	uxtb	r3, r3
10045b52:	4a34      	ldr	r2, [pc, #208]	@ (10045c24 <HAL_RADIO_SetGlobalReceiveTimeout+0xfc>)
10045b54:	2103      	movs	r1, #3
10045b56:	400b      	ands	r3, r1
10045b58:	b2db      	uxtb	r3, r3
10045b5a:	74d3      	strb	r3, [r2, #19]
  }
  else
  {
    /* error */
  }
}
10045b5c:	e05e      	b.n	10045c1c <HAL_RADIO_SetGlobalReceiveTimeout+0xf4>
  else if (ReceiveTimeout < 0x100000)
10045b5e:	687a      	ldr	r2, [r7, #4]
10045b60:	2380      	movs	r3, #128	@ 0x80
10045b62:	035b      	lsls	r3, r3, #13
10045b64:	429a      	cmp	r2, r3
10045b66:	d21a      	bcs.n	10045b9e <HAL_RADIO_SetGlobalReceiveTimeout+0x76>
    BLUEGLOB->RCVTIMEOUT[0] = (ReceiveTimeout >> 2)  & 0x000000FF;
10045b68:	687b      	ldr	r3, [r7, #4]
10045b6a:	089a      	lsrs	r2, r3, #2
10045b6c:	4b2d      	ldr	r3, [pc, #180]	@ (10045c24 <HAL_RADIO_SetGlobalReceiveTimeout+0xfc>)
10045b6e:	b2d2      	uxtb	r2, r2
10045b70:	745a      	strb	r2, [r3, #17]
    BLUEGLOB->RCVTIMEOUT[1] = (ReceiveTimeout >> 10) & 0x000000FF;
10045b72:	687b      	ldr	r3, [r7, #4]
10045b74:	0a9a      	lsrs	r2, r3, #10
10045b76:	4b2b      	ldr	r3, [pc, #172]	@ (10045c24 <HAL_RADIO_SetGlobalReceiveTimeout+0xfc>)
10045b78:	b2d2      	uxtb	r2, r2
10045b7a:	749a      	strb	r2, [r3, #18]
    BLUEGLOB->RCVTIMEOUT[2] = (ReceiveTimeout >> 18) & 0x00000003;
10045b7c:	687b      	ldr	r3, [r7, #4]
10045b7e:	0c9b      	lsrs	r3, r3, #18
10045b80:	b2db      	uxtb	r3, r3
10045b82:	4a28      	ldr	r2, [pc, #160]	@ (10045c24 <HAL_RADIO_SetGlobalReceiveTimeout+0xfc>)
10045b84:	2103      	movs	r1, #3
10045b86:	400b      	ands	r3, r1
10045b88:	b2db      	uxtb	r3, r3
10045b8a:	74d3      	strb	r3, [r2, #19]
    BLUEGLOB->RCVTIMEOUT[2] |= 0x04;
10045b8c:	4b25      	ldr	r3, [pc, #148]	@ (10045c24 <HAL_RADIO_SetGlobalReceiveTimeout+0xfc>)
10045b8e:	7cdb      	ldrb	r3, [r3, #19]
10045b90:	b2db      	uxtb	r3, r3
10045b92:	4a24      	ldr	r2, [pc, #144]	@ (10045c24 <HAL_RADIO_SetGlobalReceiveTimeout+0xfc>)
10045b94:	2104      	movs	r1, #4
10045b96:	430b      	orrs	r3, r1
10045b98:	b2db      	uxtb	r3, r3
10045b9a:	74d3      	strb	r3, [r2, #19]
}
10045b9c:	e03e      	b.n	10045c1c <HAL_RADIO_SetGlobalReceiveTimeout+0xf4>
  else if (ReceiveTimeout < 0x400000)
10045b9e:	687a      	ldr	r2, [r7, #4]
10045ba0:	2380      	movs	r3, #128	@ 0x80
10045ba2:	03db      	lsls	r3, r3, #15
10045ba4:	429a      	cmp	r2, r3
10045ba6:	d21a      	bcs.n	10045bde <HAL_RADIO_SetGlobalReceiveTimeout+0xb6>
    BLUEGLOB->RCVTIMEOUT[0] = (ReceiveTimeout >> 4)  & 0x000000FF;
10045ba8:	687b      	ldr	r3, [r7, #4]
10045baa:	091a      	lsrs	r2, r3, #4
10045bac:	4b1d      	ldr	r3, [pc, #116]	@ (10045c24 <HAL_RADIO_SetGlobalReceiveTimeout+0xfc>)
10045bae:	b2d2      	uxtb	r2, r2
10045bb0:	745a      	strb	r2, [r3, #17]
    BLUEGLOB->RCVTIMEOUT[1] = (ReceiveTimeout >> 12) & 0x000000FF;
10045bb2:	687b      	ldr	r3, [r7, #4]
10045bb4:	0b1a      	lsrs	r2, r3, #12
10045bb6:	4b1b      	ldr	r3, [pc, #108]	@ (10045c24 <HAL_RADIO_SetGlobalReceiveTimeout+0xfc>)
10045bb8:	b2d2      	uxtb	r2, r2
10045bba:	749a      	strb	r2, [r3, #18]
    BLUEGLOB->RCVTIMEOUT[2] = (ReceiveTimeout >> 20) & 0x00000003;
10045bbc:	687b      	ldr	r3, [r7, #4]
10045bbe:	0d1b      	lsrs	r3, r3, #20
10045bc0:	b2db      	uxtb	r3, r3
10045bc2:	4a18      	ldr	r2, [pc, #96]	@ (10045c24 <HAL_RADIO_SetGlobalReceiveTimeout+0xfc>)
10045bc4:	2103      	movs	r1, #3
10045bc6:	400b      	ands	r3, r1
10045bc8:	b2db      	uxtb	r3, r3
10045bca:	74d3      	strb	r3, [r2, #19]
    BLUEGLOB->RCVTIMEOUT[2] |= 0x08;
10045bcc:	4b15      	ldr	r3, [pc, #84]	@ (10045c24 <HAL_RADIO_SetGlobalReceiveTimeout+0xfc>)
10045bce:	7cdb      	ldrb	r3, [r3, #19]
10045bd0:	b2db      	uxtb	r3, r3
10045bd2:	4a14      	ldr	r2, [pc, #80]	@ (10045c24 <HAL_RADIO_SetGlobalReceiveTimeout+0xfc>)
10045bd4:	2108      	movs	r1, #8
10045bd6:	430b      	orrs	r3, r1
10045bd8:	b2db      	uxtb	r3, r3
10045bda:	74d3      	strb	r3, [r2, #19]
}
10045bdc:	e01e      	b.n	10045c1c <HAL_RADIO_SetGlobalReceiveTimeout+0xf4>
  else if (ReceiveTimeout < 0x1000000)
10045bde:	687a      	ldr	r2, [r7, #4]
10045be0:	2380      	movs	r3, #128	@ 0x80
10045be2:	045b      	lsls	r3, r3, #17
10045be4:	429a      	cmp	r2, r3
10045be6:	d219      	bcs.n	10045c1c <HAL_RADIO_SetGlobalReceiveTimeout+0xf4>
    BLUEGLOB->RCVTIMEOUT[0] = (ReceiveTimeout >> 6)  & 0x000000FF ;
10045be8:	687b      	ldr	r3, [r7, #4]
10045bea:	099a      	lsrs	r2, r3, #6
10045bec:	4b0d      	ldr	r3, [pc, #52]	@ (10045c24 <HAL_RADIO_SetGlobalReceiveTimeout+0xfc>)
10045bee:	b2d2      	uxtb	r2, r2
10045bf0:	745a      	strb	r2, [r3, #17]
    BLUEGLOB->RCVTIMEOUT[1] = (ReceiveTimeout >> 14) & 0x000000FF ;
10045bf2:	687b      	ldr	r3, [r7, #4]
10045bf4:	0b9a      	lsrs	r2, r3, #14
10045bf6:	4b0b      	ldr	r3, [pc, #44]	@ (10045c24 <HAL_RADIO_SetGlobalReceiveTimeout+0xfc>)
10045bf8:	b2d2      	uxtb	r2, r2
10045bfa:	749a      	strb	r2, [r3, #18]
    BLUEGLOB->RCVTIMEOUT[2] = (ReceiveTimeout >> 22) & 0x00000003 ;
10045bfc:	687b      	ldr	r3, [r7, #4]
10045bfe:	0d9b      	lsrs	r3, r3, #22
10045c00:	b2db      	uxtb	r3, r3
10045c02:	4a08      	ldr	r2, [pc, #32]	@ (10045c24 <HAL_RADIO_SetGlobalReceiveTimeout+0xfc>)
10045c04:	2103      	movs	r1, #3
10045c06:	400b      	ands	r3, r1
10045c08:	b2db      	uxtb	r3, r3
10045c0a:	74d3      	strb	r3, [r2, #19]
    BLUEGLOB->RCVTIMEOUT[2] |= 0x0C;
10045c0c:	4b05      	ldr	r3, [pc, #20]	@ (10045c24 <HAL_RADIO_SetGlobalReceiveTimeout+0xfc>)
10045c0e:	7cdb      	ldrb	r3, [r3, #19]
10045c10:	b2db      	uxtb	r3, r3
10045c12:	4a04      	ldr	r2, [pc, #16]	@ (10045c24 <HAL_RADIO_SetGlobalReceiveTimeout+0xfc>)
10045c14:	210c      	movs	r1, #12
10045c16:	430b      	orrs	r3, r1
10045c18:	b2db      	uxtb	r3, r3
10045c1a:	74d3      	strb	r3, [r2, #19]
}
10045c1c:	46c0      	nop			@ (mov r8, r8)
10045c1e:	46bd      	mov	sp, r7
10045c20:	b002      	add	sp, #8
10045c22:	bd80      	pop	{r7, pc}
10045c24:	200000c0 	.word	0x200000c0

10045c28 <HAL_RADIO_SetReservedArea>:
  *         is executed via either the API mechanism, or the next mechanism.
  * @param  p: pointer to action packet.
  * @retval None
  */
void HAL_RADIO_SetReservedArea(ActionPacket *p)
{
10045c28:	b580      	push	{r7, lr}
10045c2a:	b084      	sub	sp, #16
10045c2c:	af00      	add	r7, sp, #0
10045c2e:	6078      	str	r0, [r7, #4]
  uint32_t relTimeout;
  uint32_t cnt;

  /*Init to 0 the TxRxPack*/
  for (cnt = 0; cnt < sizeof(p->trans_packet); cnt++)
10045c30:	2300      	movs	r3, #0
10045c32:	60fb      	str	r3, [r7, #12]
10045c34:	e009      	b.n	10045c4a <HAL_RADIO_SetReservedArea+0x22>
  {
    ((uint8_t *)(&(p->trans_packet)))[cnt] = 0;
10045c36:	687b      	ldr	r3, [r7, #4]
10045c38:	3318      	adds	r3, #24
10045c3a:	001a      	movs	r2, r3
10045c3c:	68fb      	ldr	r3, [r7, #12]
10045c3e:	18d3      	adds	r3, r2, r3
10045c40:	2200      	movs	r2, #0
10045c42:	701a      	strb	r2, [r3, #0]
  for (cnt = 0; cnt < sizeof(p->trans_packet); cnt++)
10045c44:	68fb      	ldr	r3, [r7, #12]
10045c46:	3301      	adds	r3, #1
10045c48:	60fb      	str	r3, [r7, #12]
10045c4a:	68fb      	ldr	r3, [r7, #12]
10045c4c:	2b13      	cmp	r3, #19
10045c4e:	d9f2      	bls.n	10045c36 <HAL_RADIO_SetReservedArea+0xe>
  }

  /*Set the TxRxPack for the next transaction. The list cannot be empty.
  At least,it can be composed by one only packet that points to itself*/
  p->trans_packet.NEXTPTR = BLUE_STRUCT_PTR_CAST(&(p->trans_packet));
10045c50:	687b      	ldr	r3, [r7, #4]
10045c52:	3318      	adds	r3, #24
10045c54:	001a      	movs	r2, r3
10045c56:	687b      	ldr	r3, [r7, #4]
10045c58:	619a      	str	r2, [r3, #24]

  /* Set the buffer that contains the values to send or that stores
  the data received */
  p->trans_packet.DATAPTR = BLUE_DATA_PTR_CAST(p->data);
10045c5a:	687b      	ldr	r3, [r7, #4]
10045c5c:	689b      	ldr	r3, [r3, #8]
10045c5e:	001a      	movs	r2, r3
10045c60:	687b      	ldr	r3, [r7, #4]
10045c62:	621a      	str	r2, [r3, #32]

  /* Compensate the radio setup time from the back2back time */
  relTimeout = globalParameters.back2backTime - 70;
10045c64:	4b46      	ldr	r3, [pc, #280]	@ (10045d80 <HAL_RADIO_SetReservedArea+0x158>)
10045c66:	681b      	ldr	r3, [r3, #0]
10045c68:	3b46      	subs	r3, #70	@ 0x46
10045c6a:	60bb      	str	r3, [r7, #8]

  /*Check if there is some action to perform next*/
//  if (p->next_false || p->next_true){ /* Host timer workaround */
  /* Set the Timeout for the Timer2 */
  p->trans_packet.TIMER2[0] = relTimeout & 0xFF;
10045c6c:	68bb      	ldr	r3, [r7, #8]
10045c6e:	b2d9      	uxtb	r1, r3
10045c70:	687b      	ldr	r3, [r7, #4]
10045c72:	2224      	movs	r2, #36	@ 0x24
10045c74:	5499      	strb	r1, [r3, r2]
  p->trans_packet.TIMER2[1] = (relTimeout >> 8) & 0xFF;
10045c76:	68bb      	ldr	r3, [r7, #8]
10045c78:	0a1b      	lsrs	r3, r3, #8
10045c7a:	b2d9      	uxtb	r1, r3
10045c7c:	687b      	ldr	r3, [r7, #4]
10045c7e:	2225      	movs	r2, #37	@ 0x25
10045c80:	5499      	strb	r1, [r3, r2]
  p->trans_packet.BYTE14 = (relTimeout >> 16) & TXRXPACK_BYTE14_TIMER2_19_16_Msk;
10045c82:	68bb      	ldr	r3, [r7, #8]
10045c84:	0c1b      	lsrs	r3, r3, #16
10045c86:	b2db      	uxtb	r3, r3
10045c88:	220f      	movs	r2, #15
10045c8a:	4013      	ands	r3, r2
10045c8c:	b2d9      	uxtb	r1, r3
10045c8e:	687b      	ldr	r3, [r7, #4]
10045c90:	2226      	movs	r2, #38	@ 0x26
10045c92:	5499      	strb	r1, [r3, r2]
  /*Enable relative timer*/
  p->trans_packet.BYTE14 |= TXRXPACK_BYTE14_TIMER2EN_Msk;
10045c94:	687b      	ldr	r3, [r7, #4]
10045c96:	2226      	movs	r2, #38	@ 0x26
10045c98:	5c9b      	ldrb	r3, [r3, r2]
10045c9a:	b2db      	uxtb	r3, r3
10045c9c:	2210      	movs	r2, #16
10045c9e:	4313      	orrs	r3, r2
10045ca0:	b2d9      	uxtb	r1, r3
10045ca2:	687b      	ldr	r3, [r7, #4]
10045ca4:	2226      	movs	r2, #38	@ 0x26
10045ca6:	5499      	strb	r1, [r3, r2]
//  }

  /* TrigDone or TrigReceive */
  if ((p->ActionTag & TIMESTAMP_POSITION) == 0)
10045ca8:	687b      	ldr	r3, [r7, #4]
10045caa:	785b      	ldrb	r3, [r3, #1]
10045cac:	001a      	movs	r2, r3
10045cae:	2340      	movs	r3, #64	@ 0x40
10045cb0:	4013      	ands	r3, r2
10045cb2:	d10b      	bne.n	10045ccc <HAL_RADIO_SetReservedArea+0xa4>
  {
    p->trans_packet.BYTE14 |= TIMESTAMP_POSITION_LASTBIT;
10045cb4:	687b      	ldr	r3, [r7, #4]
10045cb6:	2226      	movs	r2, #38	@ 0x26
10045cb8:	5c9b      	ldrb	r3, [r3, r2]
10045cba:	b2db      	uxtb	r3, r3
10045cbc:	2280      	movs	r2, #128	@ 0x80
10045cbe:	4252      	negs	r2, r2
10045cc0:	4313      	orrs	r3, r2
10045cc2:	b2d9      	uxtb	r1, r3
10045cc4:	687b      	ldr	r3, [r7, #4]
10045cc6:	2226      	movs	r2, #38	@ 0x26
10045cc8:	5499      	strb	r1, [r3, r2]
10045cca:	e009      	b.n	10045ce0 <HAL_RADIO_SetReservedArea+0xb8>
  }
  else
  {
    p->trans_packet.BYTE14 |= TIMESTAMP_POSITION_ACCESSADDRESS;
10045ccc:	687b      	ldr	r3, [r7, #4]
10045cce:	2226      	movs	r2, #38	@ 0x26
10045cd0:	5c9b      	ldrb	r3, [r3, r2]
10045cd2:	b2db      	uxtb	r3, r3
10045cd4:	2240      	movs	r2, #64	@ 0x40
10045cd6:	4313      	orrs	r3, r2
10045cd8:	b2d9      	uxtb	r1, r3
10045cda:	687b      	ldr	r3, [r7, #4]
10045cdc:	2226      	movs	r2, #38	@ 0x26
10045cde:	5499      	strb	r1, [r3, r2]
  }

  p->trans_packet.BYTE4 |= TXRXPACK_BYTE4_KEEPSEMAREQ_Msk | \
10045ce0:	687b      	ldr	r3, [r7, #4]
10045ce2:	7f1b      	ldrb	r3, [r3, #28]
10045ce4:	b2db      	uxtb	r3, r3
10045ce6:	b25a      	sxtb	r2, r3
                           (p->ActionTag & INC_CHAN) | \
10045ce8:	687b      	ldr	r3, [r7, #4]
10045cea:	785b      	ldrb	r3, [r3, #1]
10045cec:	b25b      	sxtb	r3, r3
10045cee:	217f      	movs	r1, #127	@ 0x7f
10045cf0:	438b      	bics	r3, r1
10045cf2:	b25b      	sxtb	r3, r3
  p->trans_packet.BYTE4 |= TXRXPACK_BYTE4_KEEPSEMAREQ_Msk | \
10045cf4:	2104      	movs	r1, #4
10045cf6:	430b      	orrs	r3, r1
10045cf8:	b259      	sxtb	r1, r3
                           (p->ActionTag & PLL_TRIG);
10045cfa:	687b      	ldr	r3, [r7, #4]
10045cfc:	785b      	ldrb	r3, [r3, #1]
10045cfe:	b25b      	sxtb	r3, r3
10045d00:	2001      	movs	r0, #1
10045d02:	4003      	ands	r3, r0
10045d04:	b25b      	sxtb	r3, r3
                           (p->ActionTag & INC_CHAN) | \
10045d06:	430b      	orrs	r3, r1
10045d08:	b25b      	sxtb	r3, r3
  p->trans_packet.BYTE4 |= TXRXPACK_BYTE4_KEEPSEMAREQ_Msk | \
10045d0a:	4313      	orrs	r3, r2
10045d0c:	b25b      	sxtb	r3, r3
10045d0e:	b2da      	uxtb	r2, r3
10045d10:	687b      	ldr	r3, [r7, #4]
10045d12:	771a      	strb	r2, [r3, #28]

  p->trans_packet.BYTE5 |= (p->ActionTag & WHITENING_DISABLE) | \
10045d14:	687b      	ldr	r3, [r7, #4]
10045d16:	7f5b      	ldrb	r3, [r3, #29]
10045d18:	b2da      	uxtb	r2, r3
10045d1a:	687b      	ldr	r3, [r7, #4]
10045d1c:	785b      	ldrb	r3, [r3, #1]
10045d1e:	2110      	movs	r1, #16
10045d20:	400b      	ands	r3, r1
10045d22:	b2db      	uxtb	r3, r3
10045d24:	4313      	orrs	r3, r2
10045d26:	b2db      	uxtb	r3, r3
10045d28:	2206      	movs	r2, #6
10045d2a:	4313      	orrs	r3, r2
10045d2c:	b2da      	uxtb	r2, r3
10045d2e:	687b      	ldr	r3, [r7, #4]
10045d30:	775a      	strb	r2, [r3, #29]
                           TXRXPACK_BYTE5_TXDATAREADY_Msk | \
                           TXRXPACK_BYTE5_ALLTABLEREADY_Msk;

  /* Enable all interrupts */
  p->trans_packet.BYTE15 = TXRXPACK_BYTE15_INT_EN_Msk;
10045d32:	687b      	ldr	r3, [r7, #4]
10045d34:	2227      	movs	r2, #39	@ 0x27
10045d36:	21ff      	movs	r1, #255	@ 0xff
10045d38:	5499      	strb	r1, [r3, r2]

  /* By Default the next action is considered as next_true */
  if ((p->next_true->ActionTag & TXRX) != 0)
10045d3a:	687b      	ldr	r3, [r7, #4]
10045d3c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
10045d3e:	785b      	ldrb	r3, [r3, #1]
10045d40:	001a      	movs	r2, r3
10045d42:	2302      	movs	r3, #2
10045d44:	4013      	ands	r3, r2
10045d46:	d007      	beq.n	10045d58 <HAL_RADIO_SetReservedArea+0x130>
  {
    /* Set the type of the next activity */
    p->trans_packet.BYTE5 |= TXRXPACK_BYTE5_NEXTTXMODE_Msk;
10045d48:	687b      	ldr	r3, [r7, #4]
10045d4a:	7f5b      	ldrb	r3, [r3, #29]
10045d4c:	b2db      	uxtb	r3, r3
10045d4e:	2201      	movs	r2, #1
10045d50:	4313      	orrs	r3, r2
10045d52:	b2da      	uxtb	r2, r3
10045d54:	687b      	ldr	r3, [r7, #4]
10045d56:	775a      	strb	r2, [r3, #29]
  }

  p->trans_config = 0; // Rx
10045d58:	687b      	ldr	r3, [r7, #4]
10045d5a:	223c      	movs	r2, #60	@ 0x3c
10045d5c:	2100      	movs	r1, #0
10045d5e:	5499      	strb	r1, [r3, r2]
  if ((p->ActionTag & TXRX) != 0)
10045d60:	687b      	ldr	r3, [r7, #4]
10045d62:	785b      	ldrb	r3, [r3, #1]
10045d64:	001a      	movs	r2, r3
10045d66:	2302      	movs	r3, #2
10045d68:	4013      	ands	r3, r2
10045d6a:	d004      	beq.n	10045d76 <HAL_RADIO_SetReservedArea+0x14e>
  {
    p->trans_config = STATEMACH_BYTE0_TXMODE_Msk; // Tx
10045d6c:	687b      	ldr	r3, [r7, #4]
10045d6e:	223c      	movs	r2, #60	@ 0x3c
10045d70:	2180      	movs	r1, #128	@ 0x80
10045d72:	5499      	strb	r1, [r3, r2]
  }
  return ;
10045d74:	46c0      	nop			@ (mov r8, r8)
10045d76:	46c0      	nop			@ (mov r8, r8)
}
10045d78:	46bd      	mov	sp, r7
10045d7a:	b004      	add	sp, #16
10045d7c:	bd80      	pop	{r7, pc}
10045d7e:	46c0      	nop			@ (mov r8, r8)
10045d80:	200004d8 	.word	0x200004d8

10045d84 <HAL_RADIO_MakeActionPacketPending>:
  * @retval uint8_t with following values:
  *          - 0x00 : Success.
  *          - 0xC4 : Radio is busy, action packet has not been executed.
  */
uint8_t HAL_RADIO_MakeActionPacketPending(ActionPacket *p)
{
10045d84:	b5b0      	push	{r4, r5, r7, lr}
10045d86:	b086      	sub	sp, #24
10045d88:	af00      	add	r7, sp, #0
10045d8a:	6078      	str	r0, [r7, #4]
  uint8_t returnValue = SUCCESS_0;
10045d8c:	2517      	movs	r5, #23
10045d8e:	197b      	adds	r3, r7, r5
10045d90:	2200      	movs	r2, #0
10045d92:	701a      	strb	r2, [r3, #0]
  uint32_t time;
  uint32_t dummyTime;
  if (HAL_RADIO_GetStatus(&dummyTime) == BLUE_IDLE_0)
10045d94:	2308      	movs	r3, #8
10045d96:	18fb      	adds	r3, r7, r3
10045d98:	0018      	movs	r0, r3
10045d9a:	f000 f8b9 	bl	10045f10 <HAL_RADIO_GetStatus>
10045d9e:	1e03      	subs	r3, r0, #0
10045da0:	d000      	beq.n	10045da4 <HAL_RADIO_MakeActionPacketPending+0x20>
10045da2:	e0a3      	b.n	10045eec <HAL_RADIO_MakeActionPacketPending+0x168>
  {
    uint8_t  statemachineNo;
    BlueTransStruct *p1 ;

    /* timer1/2 off */
    LL_RADIO_TIMER_DisableTimer1(BLUE);
10045da4:	23c0      	movs	r3, #192	@ 0xc0
10045da6:	05db      	lsls	r3, r3, #23
10045da8:	0018      	movs	r0, r3
10045daa:	f7ff f8bf 	bl	10044f2c <LL_RADIO_TIMER_DisableTimer1>
    LL_RADIO_TIMER_DisableTimer2(BLUE);
10045dae:	23c0      	movs	r3, #192	@ 0xc0
10045db0:	05db      	lsls	r3, r3, #23
10045db2:	0018      	movs	r0, r3
10045db4:	f7ff f8c9 	bl	10044f4a <LL_RADIO_TIMER_DisableTimer2>

    statemachineNo = 0x7F & p->StateMachineNo;
10045db8:	687b      	ldr	r3, [r7, #4]
10045dba:	781a      	ldrb	r2, [r3, #0]
10045dbc:	2016      	movs	r0, #22
10045dbe:	183b      	adds	r3, r7, r0
10045dc0:	217f      	movs	r1, #127	@ 0x7f
10045dc2:	400a      	ands	r2, r1
10045dc4:	701a      	strb	r2, [r3, #0]

    BLUEGLOB->BYTE4 = (p->StateMachineNo | GLOBAL_BYTE4_ACTIVE_Msk);
10045dc6:	687b      	ldr	r3, [r7, #4]
10045dc8:	781b      	ldrb	r3, [r3, #0]
10045dca:	494e      	ldr	r1, [pc, #312]	@ (10045f04 <HAL_RADIO_MakeActionPacketPending+0x180>)
10045dcc:	2280      	movs	r2, #128	@ 0x80
10045dce:	4252      	negs	r2, r2
10045dd0:	4313      	orrs	r3, r2
10045dd2:	b2db      	uxtb	r3, r3
10045dd4:	710b      	strb	r3, [r1, #4]

    p1 = &p->trans_packet;
10045dd6:	687b      	ldr	r3, [r7, #4]
10045dd8:	3318      	adds	r3, #24
10045dda:	613b      	str	r3, [r7, #16]
    (bluedata + statemachineNo)->RCVPOINT = BLUE_STRUCT_PTR_CAST(p1);
10045ddc:	183b      	adds	r3, r7, r0
10045dde:	781a      	ldrb	r2, [r3, #0]
10045de0:	0013      	movs	r3, r2
10045de2:	009b      	lsls	r3, r3, #2
10045de4:	189b      	adds	r3, r3, r2
10045de6:	011b      	lsls	r3, r3, #4
10045de8:	4a47      	ldr	r2, [pc, #284]	@ (10045f08 <HAL_RADIO_MakeActionPacketPending+0x184>)
10045dea:	4694      	mov	ip, r2
10045dec:	4463      	add	r3, ip
10045dee:	693a      	ldr	r2, [r7, #16]
10045df0:	609a      	str	r2, [r3, #8]
    (bluedata + statemachineNo)->TXPOINT = BLUE_STRUCT_PTR_CAST(p1);
10045df2:	183b      	adds	r3, r7, r0
10045df4:	781a      	ldrb	r2, [r3, #0]
10045df6:	0013      	movs	r3, r2
10045df8:	009b      	lsls	r3, r3, #2
10045dfa:	189b      	adds	r3, r3, r2
10045dfc:	011b      	lsls	r3, r3, #4
10045dfe:	4a42      	ldr	r2, [pc, #264]	@ (10045f08 <HAL_RADIO_MakeActionPacketPending+0x184>)
10045e00:	4694      	mov	ip, r2
10045e02:	4463      	add	r3, ip
10045e04:	693a      	ldr	r2, [r7, #16]
10045e06:	605a      	str	r2, [r3, #4]
    (bluedata + statemachineNo)->MAXRECEIVEDLENGTH = p->MaxReceiveLength;
10045e08:	183b      	adds	r3, r7, r0
10045e0a:	781a      	ldrb	r2, [r3, #0]
10045e0c:	0013      	movs	r3, r2
10045e0e:	009b      	lsls	r3, r3, #2
10045e10:	189b      	adds	r3, r3, r2
10045e12:	011b      	lsls	r3, r3, #4
10045e14:	4a3c      	ldr	r2, [pc, #240]	@ (10045f08 <HAL_RADIO_MakeActionPacketPending+0x184>)
10045e16:	4694      	mov	ip, r2
10045e18:	4463      	add	r3, ip
10045e1a:	687a      	ldr	r2, [r7, #4]
10045e1c:	7891      	ldrb	r1, [r2, #2]
10045e1e:	222b      	movs	r2, #43	@ 0x2b
10045e20:	5499      	strb	r1, [r3, r2]

#if defined (STM32WB05) || defined(STM32WB09 )
    (bluedata + statemachineNo)->BYTE3 |= 1 << 3;
#endif

    globalParameters.current_action_packet = p;
10045e22:	4b3a      	ldr	r3, [pc, #232]	@ (10045f0c <HAL_RADIO_MakeActionPacketPending+0x188>)
10045e24:	687a      	ldr	r2, [r7, #4]
10045e26:	609a      	str	r2, [r3, #8]

    MODIFY_REG((bluedata + statemachineNo)->BYTE0, STATEMACH_BYTE0_TXMODE_Msk,
10045e28:	183b      	adds	r3, r7, r0
10045e2a:	781a      	ldrb	r2, [r3, #0]
10045e2c:	0013      	movs	r3, r2
10045e2e:	009b      	lsls	r3, r3, #2
10045e30:	189b      	adds	r3, r3, r2
10045e32:	011b      	lsls	r3, r3, #4
10045e34:	4a34      	ldr	r2, [pc, #208]	@ (10045f08 <HAL_RADIO_MakeActionPacketPending+0x184>)
10045e36:	4694      	mov	ip, r2
10045e38:	4463      	add	r3, ip
10045e3a:	781b      	ldrb	r3, [r3, #0]
10045e3c:	b2db      	uxtb	r3, r3
10045e3e:	b25b      	sxtb	r3, r3
10045e40:	227f      	movs	r2, #127	@ 0x7f
10045e42:	4013      	ands	r3, r2
10045e44:	b25a      	sxtb	r2, r3
10045e46:	687b      	ldr	r3, [r7, #4]
10045e48:	213c      	movs	r1, #60	@ 0x3c
10045e4a:	5c5b      	ldrb	r3, [r3, r1]
10045e4c:	b25b      	sxtb	r3, r3
10045e4e:	4313      	orrs	r3, r2
10045e50:	b259      	sxtb	r1, r3
10045e52:	183b      	adds	r3, r7, r0
10045e54:	781a      	ldrb	r2, [r3, #0]
10045e56:	0013      	movs	r3, r2
10045e58:	009b      	lsls	r3, r3, #2
10045e5a:	189b      	adds	r3, r3, r2
10045e5c:	011b      	lsls	r3, r3, #4
10045e5e:	4a2a      	ldr	r2, [pc, #168]	@ (10045f08 <HAL_RADIO_MakeActionPacketPending+0x184>)
10045e60:	4694      	mov	ip, r2
10045e62:	4463      	add	r3, ip
10045e64:	b2ca      	uxtb	r2, r1
10045e66:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
10045e68:	b672      	cpsid	i
}
10045e6a:	46c0      	nop			@ (mov r8, r8)
               p->trans_config); /* Transmission or reception */

    /* program timer at next->wakeuptime */
    MASK_INTERRUPTS();
    if ((p->ActionTag & RELATIVE) != 0)
10045e6c:	687b      	ldr	r3, [r7, #4]
10045e6e:	785b      	ldrb	r3, [r3, #1]
10045e70:	001a      	movs	r2, r3
10045e72:	2320      	movs	r3, #32
10045e74:	4013      	ands	r3, r2
10045e76:	d021      	beq.n	10045ebc <HAL_RADIO_MakeActionPacketPending+0x138>
    {
      time = HAL_RADIO_TIMER_GetCurrentSysTime() + HAL_RADIO_TIMER_UsToSystime(p->WakeupTime);
10045e78:	f000 ff42 	bl	10046d00 <HAL_RADIO_TIMER_GetCurrentSysTime>
10045e7c:	0002      	movs	r2, r0
10045e7e:	000b      	movs	r3, r1
10045e80:	0014      	movs	r4, r2
10045e82:	687b      	ldr	r3, [r7, #4]
10045e84:	685b      	ldr	r3, [r3, #4]
10045e86:	0018      	movs	r0, r3
10045e88:	f000 ff16 	bl	10046cb8 <HAL_RADIO_TIMER_UsToSystime>
10045e8c:	0003      	movs	r3, r0
10045e8e:	18e3      	adds	r3, r4, r3
10045e90:	60fb      	str	r3, [r7, #12]
      returnValue = HAL_RADIO_TIMER_SetRadioTimerValue(time, (p->trans_config == STATEMACH_BYTE0_TXMODE_Msk), (p->ActionTag & PLL_TRIG));
10045e92:	687b      	ldr	r3, [r7, #4]
10045e94:	223c      	movs	r2, #60	@ 0x3c
10045e96:	5c9b      	ldrb	r3, [r3, r2]
10045e98:	3b80      	subs	r3, #128	@ 0x80
10045e9a:	425a      	negs	r2, r3
10045e9c:	4153      	adcs	r3, r2
10045e9e:	b2db      	uxtb	r3, r3
10045ea0:	0019      	movs	r1, r3
10045ea2:	687b      	ldr	r3, [r7, #4]
10045ea4:	785b      	ldrb	r3, [r3, #1]
10045ea6:	2201      	movs	r2, #1
10045ea8:	4013      	ands	r3, r2
10045eaa:	b2da      	uxtb	r2, r3
10045eac:	68fb      	ldr	r3, [r7, #12]
10045eae:	0018      	movs	r0, r3
10045eb0:	f000 fe0e 	bl	10046ad0 <HAL_RADIO_TIMER_SetRadioTimerValue>
10045eb4:	0002      	movs	r2, r0
10045eb6:	197b      	adds	r3, r7, r5
10045eb8:	701a      	strb	r2, [r3, #0]
10045eba:	e015      	b.n	10045ee8 <HAL_RADIO_MakeActionPacketPending+0x164>
    }
    else /*absolute time*/
    {
      returnValue = HAL_RADIO_TIMER_SetRadioTimerValue(p->WakeupTime, (p->trans_config == STATEMACH_BYTE0_TXMODE_Msk), (p->ActionTag & PLL_TRIG));
10045ebc:	687b      	ldr	r3, [r7, #4]
10045ebe:	6858      	ldr	r0, [r3, #4]
10045ec0:	687b      	ldr	r3, [r7, #4]
10045ec2:	223c      	movs	r2, #60	@ 0x3c
10045ec4:	5c9b      	ldrb	r3, [r3, r2]
10045ec6:	3b80      	subs	r3, #128	@ 0x80
10045ec8:	425a      	negs	r2, r3
10045eca:	4153      	adcs	r3, r2
10045ecc:	b2db      	uxtb	r3, r3
10045ece:	0019      	movs	r1, r3
10045ed0:	687b      	ldr	r3, [r7, #4]
10045ed2:	785b      	ldrb	r3, [r3, #1]
10045ed4:	2201      	movs	r2, #1
10045ed6:	4013      	ands	r3, r2
10045ed8:	b2db      	uxtb	r3, r3
10045eda:	001a      	movs	r2, r3
10045edc:	f000 fdf8 	bl	10046ad0 <HAL_RADIO_TIMER_SetRadioTimerValue>
10045ee0:	0002      	movs	r2, r0
10045ee2:	2317      	movs	r3, #23
10045ee4:	18fb      	adds	r3, r7, r3
10045ee6:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
10045ee8:	b662      	cpsie	i
}
10045eea:	e003      	b.n	10045ef4 <HAL_RADIO_MakeActionPacketPending+0x170>

    UNMASK_INTERRUPTS();
  }
  else
  {
    returnValue = RADIO_BUSY_C4;
10045eec:	2317      	movs	r3, #23
10045eee:	18fb      	adds	r3, r7, r3
10045ef0:	22c4      	movs	r2, #196	@ 0xc4
10045ef2:	701a      	strb	r2, [r3, #0]
  }
  return returnValue;
10045ef4:	2317      	movs	r3, #23
10045ef6:	18fb      	adds	r3, r7, r3
10045ef8:	781b      	ldrb	r3, [r3, #0]
}
10045efa:	0018      	movs	r0, r3
10045efc:	46bd      	mov	sp, r7
10045efe:	b006      	add	sp, #24
10045f00:	bdb0      	pop	{r4, r5, r7, pc}
10045f02:	46c0      	nop			@ (mov r8, r8)
10045f04:	200000c0 	.word	0x200000c0
10045f08:	200000dc 	.word	0x200000dc
10045f0c:	200004d8 	.word	0x200004d8

10045f10 <HAL_RADIO_GetStatus>:
  * @param  time: where to store the last value programmed.
  * @retval 0 if the radio controller is IDLE or no timer has been programmed
  * @retval 1 if the radio is ACTIVE and a radio timer has been programmed
  */
uint8_t HAL_RADIO_GetStatus(uint32_t *time)
{
10045f10:	b590      	push	{r4, r7, lr}
10045f12:	b085      	sub	sp, #20
10045f14:	af00      	add	r7, sp, #0
10045f16:	6078      	str	r0, [r7, #4]
  uint8_t retValue = BLUE_IDLE_0;
10045f18:	210f      	movs	r1, #15
10045f1a:	187b      	adds	r3, r7, r1
10045f1c:	2200      	movs	r2, #0
10045f1e:	701a      	strb	r2, [r3, #0]
  if ((BLUEGLOB->BYTE4 & GLOBAL_BYTE4_ACTIVE_Msk) != 0)
10045f20:	4b09      	ldr	r3, [pc, #36]	@ (10045f48 <HAL_RADIO_GetStatus+0x38>)
10045f22:	791b      	ldrb	r3, [r3, #4]
10045f24:	b2db      	uxtb	r3, r3
10045f26:	b25b      	sxtb	r3, r3
10045f28:	2b00      	cmp	r3, #0
10045f2a:	da06      	bge.n	10045f3a <HAL_RADIO_GetStatus+0x2a>
  {
    retValue = HAL_RADIO_TIMER_GetRadioTimerValue(time);
10045f2c:	187c      	adds	r4, r7, r1
10045f2e:	687b      	ldr	r3, [r7, #4]
10045f30:	0018      	movs	r0, r3
10045f32:	f000 fe93 	bl	10046c5c <HAL_RADIO_TIMER_GetRadioTimerValue>
10045f36:	0003      	movs	r3, r0
10045f38:	7023      	strb	r3, [r4, #0]
  }
  return retValue;
10045f3a:	230f      	movs	r3, #15
10045f3c:	18fb      	adds	r3, r7, r3
10045f3e:	781b      	ldrb	r3, [r3, #0]
}
10045f40:	0018      	movs	r0, r3
10045f42:	46bd      	mov	sp, r7
10045f44:	b005      	add	sp, #20
10045f46:	bd90      	pop	{r4, r7, pc}
10045f48:	200000c0 	.word	0x200000c0

10045f4c <HAL_RADIO_SetTxPower>:
  * @param  PowerLevel: power level which should set to this value.
  *         See the documentation inside the datasheet.
  * @retval None
  */
void HAL_RADIO_SetTxPower(uint8_t PowerLevel)
{
10045f4c:	b580      	push	{r7, lr}
10045f4e:	b084      	sub	sp, #16
10045f50:	af00      	add	r7, sp, #0
10045f52:	0002      	movs	r2, r0
10045f54:	1dfb      	adds	r3, r7, #7
10045f56:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_POWERLEVEL_VALID(PowerLevel));

  for (uint8_t n = 0; n < STATEMACHINE_COUNT ; n++)
10045f58:	230f      	movs	r3, #15
10045f5a:	18fb      	adds	r3, r7, r3
10045f5c:	2200      	movs	r2, #0
10045f5e:	701a      	strb	r2, [r3, #0]
10045f60:	e012      	b.n	10045f88 <HAL_RADIO_SetTxPower+0x3c>
  {
    (bluedata + n)->PAPOWER = PowerLevel;
10045f62:	200f      	movs	r0, #15
10045f64:	183b      	adds	r3, r7, r0
10045f66:	781a      	ldrb	r2, [r3, #0]
10045f68:	0013      	movs	r3, r2
10045f6a:	009b      	lsls	r3, r3, #2
10045f6c:	189b      	adds	r3, r3, r2
10045f6e:	011b      	lsls	r3, r3, #4
10045f70:	4a0a      	ldr	r2, [pc, #40]	@ (10045f9c <HAL_RADIO_SetTxPower+0x50>)
10045f72:	4694      	mov	ip, r2
10045f74:	4463      	add	r3, ip
10045f76:	1dfa      	adds	r2, r7, #7
10045f78:	212c      	movs	r1, #44	@ 0x2c
10045f7a:	7812      	ldrb	r2, [r2, #0]
10045f7c:	545a      	strb	r2, [r3, r1]
  for (uint8_t n = 0; n < STATEMACHINE_COUNT ; n++)
10045f7e:	183b      	adds	r3, r7, r0
10045f80:	781a      	ldrb	r2, [r3, #0]
10045f82:	183b      	adds	r3, r7, r0
10045f84:	3201      	adds	r2, #1
10045f86:	701a      	strb	r2, [r3, #0]
10045f88:	230f      	movs	r3, #15
10045f8a:	18fb      	adds	r3, r7, r3
10045f8c:	781b      	ldrb	r3, [r3, #0]
10045f8e:	2b01      	cmp	r3, #1
10045f90:	d9e7      	bls.n	10045f62 <HAL_RADIO_SetTxPower+0x16>
  }
  return;
10045f92:	46c0      	nop			@ (mov r8, r8)
}
10045f94:	46bd      	mov	sp, r7
10045f96:	b004      	add	sp, #16
10045f98:	bd80      	pop	{r7, pc}
10045f9a:	46c0      	nop			@ (mov r8, r8)
10045f9c:	200000dc 	.word	0x200000dc

10045fa0 <HAL_RADIO_SetNetworkID>:
  * @retval uint8_t: return value
  *           - 0x00 : Success.
  *           - 0xC0 : Invalid parameter.
  */
uint8_t HAL_RADIO_SetNetworkID(uint32_t ID)
{
10045fa0:	b580      	push	{r7, lr}
10045fa2:	b082      	sub	sp, #8
10045fa4:	af00      	add	r7, sp, #0
10045fa6:	6078      	str	r0, [r7, #4]
  networkID = ID;
10045fa8:	4b03      	ldr	r3, [pc, #12]	@ (10045fb8 <HAL_RADIO_SetNetworkID+0x18>)
10045faa:	687a      	ldr	r2, [r7, #4]
10045fac:	601a      	str	r2, [r3, #0]
  return 0;
10045fae:	2300      	movs	r3, #0
}
10045fb0:	0018      	movs	r0, r3
10045fb2:	46bd      	mov	sp, r7
10045fb4:	b002      	add	sp, #8
10045fb6:	bd80      	pop	{r7, pc}
10045fb8:	200006a0 	.word	0x200006a0

10045fbc <HAL_RADIO_ReceivePacketWithAck>:
  */
uint8_t HAL_RADIO_ReceivePacketWithAck(uint8_t channel, uint32_t wakeup_time, uint8_t *rxBuffer, uint8_t *txBuffer,
                                       uint32_t receive_timeout,
                                       uint8_t receive_length,
                                       uint8_t (*Callback)(ActionPacket *, ActionPacket *))
{
10045fbc:	b5f0      	push	{r4, r5, r6, r7, lr}
10045fbe:	b08b      	sub	sp, #44	@ 0x2c
10045fc0:	af00      	add	r7, sp, #0
10045fc2:	60b9      	str	r1, [r7, #8]
10045fc4:	607a      	str	r2, [r7, #4]
10045fc6:	603b      	str	r3, [r7, #0]
10045fc8:	250f      	movs	r5, #15
10045fca:	197b      	adds	r3, r7, r5
10045fcc:	1c02      	adds	r2, r0, #0
10045fce:	701a      	strb	r2, [r3, #0]
  uint8_t returnValue = SUCCESS_0;
10045fd0:	2627      	movs	r6, #39	@ 0x27
10045fd2:	19bb      	adds	r3, r7, r6
10045fd4:	2200      	movs	r2, #0
10045fd6:	701a      	strb	r2, [r3, #0]
  uint32_t dummy;
  uint32_t time;

  time = (uint32_t)HAL_RADIO_TIMER_GetCurrentSysTime() + HAL_RADIO_TIMER_UsToSystime(wakeup_time);
10045fd8:	f000 fe92 	bl	10046d00 <HAL_RADIO_TIMER_GetCurrentSysTime>
10045fdc:	0002      	movs	r2, r0
10045fde:	000b      	movs	r3, r1
10045fe0:	0014      	movs	r4, r2
10045fe2:	68bb      	ldr	r3, [r7, #8]
10045fe4:	0018      	movs	r0, r3
10045fe6:	f000 fe67 	bl	10046cb8 <HAL_RADIO_TIMER_UsToSystime>
10045fea:	0003      	movs	r3, r0
10045fec:	18e3      	adds	r3, r4, r3
10045fee:	623b      	str	r3, [r7, #32]

  if (channel > 39)
10045ff0:	197b      	adds	r3, r7, r5
10045ff2:	781b      	ldrb	r3, [r3, #0]
10045ff4:	2b27      	cmp	r3, #39	@ 0x27
10045ff6:	d902      	bls.n	10045ffe <HAL_RADIO_ReceivePacketWithAck+0x42>
  {
    returnValue = INVALID_PARAMETER_C0;
10045ff8:	19bb      	adds	r3, r7, r6
10045ffa:	22c0      	movs	r2, #192	@ 0xc0
10045ffc:	701a      	strb	r2, [r3, #0]
  }

  if (HAL_RADIO_GetStatus(&dummy) != BLUE_IDLE_0)
10045ffe:	231c      	movs	r3, #28
10046000:	18fb      	adds	r3, r7, r3
10046002:	0018      	movs	r0, r3
10046004:	f7ff ff84 	bl	10045f10 <HAL_RADIO_GetStatus>
10046008:	1e03      	subs	r3, r0, #0
1004600a:	d003      	beq.n	10046014 <HAL_RADIO_ReceivePacketWithAck+0x58>
  {
    returnValue = RADIO_BUSY_C4;
1004600c:	2327      	movs	r3, #39	@ 0x27
1004600e:	18fb      	adds	r3, r7, r3
10046010:	22c4      	movs	r2, #196	@ 0xc4
10046012:	701a      	strb	r2, [r3, #0]
  }

  if (returnValue == SUCCESS_0)
10046014:	2427      	movs	r4, #39	@ 0x27
10046016:	193b      	adds	r3, r7, r4
10046018:	781b      	ldrb	r3, [r3, #0]
1004601a:	2b00      	cmp	r3, #0
1004601c:	d16a      	bne.n	100460f4 <HAL_RADIO_ReceivePacketWithAck+0x138>
  {
    uint8_t map[5] = {0xFFU, 0xFFU, 0xFFU, 0xFFU, 0xFFU};
1004601e:	2014      	movs	r0, #20
10046020:	183b      	adds	r3, r7, r0
10046022:	4a38      	ldr	r2, [pc, #224]	@ (10046104 <HAL_RADIO_ReceivePacketWithAck+0x148>)
10046024:	6811      	ldr	r1, [r2, #0]
10046026:	6019      	str	r1, [r3, #0]
10046028:	7912      	ldrb	r2, [r2, #4]
1004602a:	711a      	strb	r2, [r3, #4]

    HAL_RADIO_SetChannelMap(0, &map[0]);
1004602c:	183b      	adds	r3, r7, r0
1004602e:	0019      	movs	r1, r3
10046030:	2000      	movs	r0, #0
10046032:	f7ff fc89 	bl	10045948 <HAL_RADIO_SetChannelMap>
    HAL_RADIO_SetChannel(0, channel, 0);
10046036:	230f      	movs	r3, #15
10046038:	18fb      	adds	r3, r7, r3
1004603a:	781b      	ldrb	r3, [r3, #0]
1004603c:	2200      	movs	r2, #0
1004603e:	0019      	movs	r1, r3
10046040:	2000      	movs	r0, #0
10046042:	f7ff fccd 	bl	100459e0 <HAL_RADIO_SetChannel>
    HAL_RADIO_SetTxAttributes(0, networkID, 0x555555);
10046046:	4b30      	ldr	r3, [pc, #192]	@ (10046108 <HAL_RADIO_ReceivePacketWithAck+0x14c>)
10046048:	681b      	ldr	r3, [r3, #0]
1004604a:	4a30      	ldr	r2, [pc, #192]	@ (1004610c <HAL_RADIO_ReceivePacketWithAck+0x150>)
1004604c:	0019      	movs	r1, r3
1004604e:	2000      	movs	r0, #0
10046050:	f7ff fd26 	bl	10045aa0 <HAL_RADIO_SetTxAttributes>
    HAL_RADIO_SetGlobalReceiveTimeout(receive_timeout);
10046054:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
10046056:	0018      	movs	r0, r3
10046058:	f7ff fd66 	bl	10045b28 <HAL_RADIO_SetGlobalReceiveTimeout>

    aPacket[0].StateMachineNo = 0;
1004605c:	4b2c      	ldr	r3, [pc, #176]	@ (10046110 <HAL_RADIO_ReceivePacketWithAck+0x154>)
1004605e:	2200      	movs	r2, #0
10046060:	701a      	strb	r2, [r3, #0]
    aPacket[0].ActionTag =  PLL_TRIG;
10046062:	4b2b      	ldr	r3, [pc, #172]	@ (10046110 <HAL_RADIO_ReceivePacketWithAck+0x154>)
10046064:	2201      	movs	r2, #1
10046066:	705a      	strb	r2, [r3, #1]
    aPacket[0].WakeupTime = time;
10046068:	4b29      	ldr	r3, [pc, #164]	@ (10046110 <HAL_RADIO_ReceivePacketWithAck+0x154>)
1004606a:	6a3a      	ldr	r2, [r7, #32]
1004606c:	605a      	str	r2, [r3, #4]
    aPacket[0].MaxReceiveLength = receive_length;
1004606e:	4b28      	ldr	r3, [pc, #160]	@ (10046110 <HAL_RADIO_ReceivePacketWithAck+0x154>)
10046070:	223c      	movs	r2, #60	@ 0x3c
10046072:	2108      	movs	r1, #8
10046074:	1852      	adds	r2, r2, r1
10046076:	19d2      	adds	r2, r2, r7
10046078:	7812      	ldrb	r2, [r2, #0]
1004607a:	709a      	strb	r2, [r3, #2]
    aPacket[0].data = rxBuffer;
1004607c:	4b24      	ldr	r3, [pc, #144]	@ (10046110 <HAL_RADIO_ReceivePacketWithAck+0x154>)
1004607e:	687a      	ldr	r2, [r7, #4]
10046080:	609a      	str	r2, [r3, #8]
    aPacket[0].next_true = &aPacket[1];
10046082:	4b23      	ldr	r3, [pc, #140]	@ (10046110 <HAL_RADIO_ReceivePacketWithAck+0x154>)
10046084:	4a23      	ldr	r2, [pc, #140]	@ (10046114 <HAL_RADIO_ReceivePacketWithAck+0x158>)
10046086:	62da      	str	r2, [r3, #44]	@ 0x2c
    aPacket[0].next_false = NULL_0;
10046088:	4b21      	ldr	r3, [pc, #132]	@ (10046110 <HAL_RADIO_ReceivePacketWithAck+0x154>)
1004608a:	2200      	movs	r2, #0
1004608c:	631a      	str	r2, [r3, #48]	@ 0x30
    aPacket[0].condRoutine = CondRoutineRxTrue;
1004608e:	4b20      	ldr	r3, [pc, #128]	@ (10046110 <HAL_RADIO_ReceivePacketWithAck+0x154>)
10046090:	4a21      	ldr	r2, [pc, #132]	@ (10046118 <HAL_RADIO_ReceivePacketWithAck+0x15c>)
10046092:	635a      	str	r2, [r3, #52]	@ 0x34
    aPacket[0].dataRoutine = Callback;
10046094:	4b1e      	ldr	r3, [pc, #120]	@ (10046110 <HAL_RADIO_ReceivePacketWithAck+0x154>)
10046096:	6cba      	ldr	r2, [r7, #72]	@ 0x48
10046098:	639a      	str	r2, [r3, #56]	@ 0x38

    aPacket[1].StateMachineNo = 0;
1004609a:	4b1d      	ldr	r3, [pc, #116]	@ (10046110 <HAL_RADIO_ReceivePacketWithAck+0x154>)
1004609c:	2240      	movs	r2, #64	@ 0x40
1004609e:	2100      	movs	r1, #0
100460a0:	5499      	strb	r1, [r3, r2]
    aPacket[1].ActionTag =  TXRX;
100460a2:	4b1b      	ldr	r3, [pc, #108]	@ (10046110 <HAL_RADIO_ReceivePacketWithAck+0x154>)
100460a4:	2241      	movs	r2, #65	@ 0x41
100460a6:	2102      	movs	r1, #2
100460a8:	5499      	strb	r1, [r3, r2]
    aPacket[1].WakeupTime = time;
100460aa:	4b19      	ldr	r3, [pc, #100]	@ (10046110 <HAL_RADIO_ReceivePacketWithAck+0x154>)
100460ac:	6a3a      	ldr	r2, [r7, #32]
100460ae:	645a      	str	r2, [r3, #68]	@ 0x44
    aPacket[1].MaxReceiveLength = 0; /* does not affect for Tx */
100460b0:	4b17      	ldr	r3, [pc, #92]	@ (10046110 <HAL_RADIO_ReceivePacketWithAck+0x154>)
100460b2:	2242      	movs	r2, #66	@ 0x42
100460b4:	2100      	movs	r1, #0
100460b6:	5499      	strb	r1, [r3, r2]
    aPacket[1].data = txBuffer;
100460b8:	4b15      	ldr	r3, [pc, #84]	@ (10046110 <HAL_RADIO_ReceivePacketWithAck+0x154>)
100460ba:	683a      	ldr	r2, [r7, #0]
100460bc:	649a      	str	r2, [r3, #72]	@ 0x48
    aPacket[1].next_true = NULL_0;
100460be:	4b14      	ldr	r3, [pc, #80]	@ (10046110 <HAL_RADIO_ReceivePacketWithAck+0x154>)
100460c0:	2200      	movs	r2, #0
100460c2:	66da      	str	r2, [r3, #108]	@ 0x6c
    aPacket[1].next_false = NULL_0;
100460c4:	4b12      	ldr	r3, [pc, #72]	@ (10046110 <HAL_RADIO_ReceivePacketWithAck+0x154>)
100460c6:	2200      	movs	r2, #0
100460c8:	671a      	str	r2, [r3, #112]	@ 0x70
    aPacket[1].condRoutine = CondRoutineTrue;
100460ca:	4b11      	ldr	r3, [pc, #68]	@ (10046110 <HAL_RADIO_ReceivePacketWithAck+0x154>)
100460cc:	4a13      	ldr	r2, [pc, #76]	@ (1004611c <HAL_RADIO_ReceivePacketWithAck+0x160>)
100460ce:	675a      	str	r2, [r3, #116]	@ 0x74
    aPacket[1].dataRoutine = Callback;
100460d0:	4b0f      	ldr	r3, [pc, #60]	@ (10046110 <HAL_RADIO_ReceivePacketWithAck+0x154>)
100460d2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
100460d4:	679a      	str	r2, [r3, #120]	@ 0x78

    HAL_RADIO_SetReservedArea(&aPacket[0]);
100460d6:	4b0e      	ldr	r3, [pc, #56]	@ (10046110 <HAL_RADIO_ReceivePacketWithAck+0x154>)
100460d8:	0018      	movs	r0, r3
100460da:	f7ff fda5 	bl	10045c28 <HAL_RADIO_SetReservedArea>
    HAL_RADIO_SetReservedArea(&aPacket[1]);
100460de:	4b0d      	ldr	r3, [pc, #52]	@ (10046114 <HAL_RADIO_ReceivePacketWithAck+0x158>)
100460e0:	0018      	movs	r0, r3
100460e2:	f7ff fda1 	bl	10045c28 <HAL_RADIO_SetReservedArea>
    returnValue = HAL_RADIO_MakeActionPacketPending(&aPacket[0]);
100460e6:	193c      	adds	r4, r7, r4
100460e8:	4b09      	ldr	r3, [pc, #36]	@ (10046110 <HAL_RADIO_ReceivePacketWithAck+0x154>)
100460ea:	0018      	movs	r0, r3
100460ec:	f7ff fe4a 	bl	10045d84 <HAL_RADIO_MakeActionPacketPending>
100460f0:	0003      	movs	r3, r0
100460f2:	7023      	strb	r3, [r4, #0]
  }

  return returnValue;
100460f4:	2327      	movs	r3, #39	@ 0x27
100460f6:	18fb      	adds	r3, r7, r3
100460f8:	781b      	ldrb	r3, [r3, #0]
}
100460fa:	0018      	movs	r0, r3
100460fc:	46bd      	mov	sp, r7
100460fe:	b00b      	add	sp, #44	@ 0x2c
10046100:	bdf0      	pop	{r4, r5, r6, r7, pc}
10046102:	46c0      	nop			@ (mov r8, r8)
10046104:	10049374 	.word	0x10049374
10046108:	200006a0 	.word	0x200006a0
1004610c:	00555555 	.word	0x00555555
10046110:	200004e4 	.word	0x200004e4
10046114:	20000524 	.word	0x20000524
10046118:	10044f9b 	.word	0x10044f9b
1004611c:	10044f89 	.word	0x10044f89

10046120 <HAL_RADIO_TxRxCallback>:

#endif /* USE_RADIO_PROPRIETARY_DRIVER */

__weak void HAL_RADIO_TxRxCallback(uint32_t flags)
{
10046120:	b580      	push	{r7, lr}
10046122:	b082      	sub	sp, #8
10046124:	af00      	add	r7, sp, #0
10046126:	6078      	str	r0, [r7, #4]
}
10046128:	46c0      	nop			@ (mov r8, r8)
1004612a:	46bd      	mov	sp, r7
1004612c:	b002      	add	sp, #8
1004612e:	bd80      	pop	{r7, pc}

10046130 <HAL_RADIO_TxRxSeqCallback>:


__weak void HAL_RADIO_TxRxSeqCallback(void)
{
10046130:	b580      	push	{r7, lr}
10046132:	af00      	add	r7, sp, #0
}
10046134:	46c0      	nop			@ (mov r8, r8)
10046136:	46bd      	mov	sp, r7
10046138:	bd80      	pop	{r7, pc}

1004613a <HAL_RADIO_TXRX_IRQHandler>:

void HAL_RADIO_TXRX_IRQHandler(void)
{
1004613a:	b580      	push	{r7, lr}
1004613c:	b082      	sub	sp, #8
1004613e:	af00      	add	r7, sp, #0
  uint32_t blue_status = BLUE->STATUSREG;
10046140:	23c0      	movs	r3, #192	@ 0xc0
10046142:	05db      	lsls	r3, r3, #23
10046144:	69db      	ldr	r3, [r3, #28]
10046146:	607b      	str	r3, [r7, #4]
  uint32_t blue_interrupt = BLUE->INTERRUPT1REG;
10046148:	23c0      	movs	r3, #192	@ 0xc0
1004614a:	05db      	lsls	r3, r3, #23
1004614c:	685b      	ldr	r3, [r3, #4]
1004614e:	603b      	str	r3, [r7, #0]

  /** clear all pending interrupts */
  BLUE->INTERRUPT1REG = blue_interrupt;
10046150:	23c0      	movs	r3, #192	@ 0xc0
10046152:	05db      	lsls	r3, r3, #23
10046154:	683a      	ldr	r2, [r7, #0]
10046156:	605a      	str	r2, [r3, #4]

  HAL_RADIO_TIMER_EndOfRadioActivityIsr();
10046158:	f000 fda2 	bl	10046ca0 <HAL_RADIO_TIMER_EndOfRadioActivityIsr>

#if (USE_RADIO_PROPRIETARY_DRIVER == 1)
  HAL_RADIO_ActionPacketIsr(blue_status | blue_interrupt);
1004615c:	687a      	ldr	r2, [r7, #4]
1004615e:	683b      	ldr	r3, [r7, #0]
10046160:	4313      	orrs	r3, r2
10046162:	0018      	movs	r0, r3
10046164:	f7ff fad4 	bl	10045710 <HAL_RADIO_ActionPacketIsr>
#endif

  HAL_RADIO_TxRxCallback(blue_status | blue_interrupt);
10046168:	687a      	ldr	r2, [r7, #4]
1004616a:	683b      	ldr	r3, [r7, #0]
1004616c:	4313      	orrs	r3, r2
1004616e:	0018      	movs	r0, r3
10046170:	f7ff ffd6 	bl	10046120 <HAL_RADIO_TxRxCallback>

  HAL_RADIO_TIMER_RadioTimerIsr();
10046174:	f000 fd7f 	bl	10046c76 <HAL_RADIO_TIMER_RadioTimerIsr>
  /* If the device is configured with
     System clock = 64 MHz and BLE clock = 16 MHz
     a register read is necessary to end fine
     the clear interrupt register operation,
     due the AHB down converter latency */
  blue_interrupt = BLUE->INTERRUPT1REG;
10046178:	23c0      	movs	r3, #192	@ 0xc0
1004617a:	05db      	lsls	r3, r3, #23
1004617c:	685b      	ldr	r3, [r3, #4]
1004617e:	603b      	str	r3, [r7, #0]
}
10046180:	46c0      	nop			@ (mov r8, r8)
10046182:	46bd      	mov	sp, r7
10046184:	b002      	add	sp, #8
10046186:	bd80      	pop	{r7, pc}

10046188 <HAL_RADIO_TXRX_SEQ_IRQHandler>:


void HAL_RADIO_TXRX_SEQ_IRQHandler(void)
{
10046188:	b580      	push	{r7, lr}
1004618a:	af00      	add	r7, sp, #0
  HAL_RADIO_TxRxSeqCallback();
1004618c:	f7ff ffd0 	bl	10046130 <HAL_RADIO_TxRxSeqCallback>
}
10046190:	46c0      	nop			@ (mov r8, r8)
10046192:	46bd      	mov	sp, r7
10046194:	bd80      	pop	{r7, pc}
	...

10046198 <__NVIC_EnableIRQ>:
{
10046198:	b580      	push	{r7, lr}
1004619a:	b082      	sub	sp, #8
1004619c:	af00      	add	r7, sp, #0
1004619e:	0002      	movs	r2, r0
100461a0:	1dfb      	adds	r3, r7, #7
100461a2:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
100461a4:	1dfb      	adds	r3, r7, #7
100461a6:	781b      	ldrb	r3, [r3, #0]
100461a8:	2b7f      	cmp	r3, #127	@ 0x7f
100461aa:	d809      	bhi.n	100461c0 <__NVIC_EnableIRQ+0x28>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
100461ac:	1dfb      	adds	r3, r7, #7
100461ae:	781b      	ldrb	r3, [r3, #0]
100461b0:	001a      	movs	r2, r3
100461b2:	231f      	movs	r3, #31
100461b4:	401a      	ands	r2, r3
100461b6:	4b04      	ldr	r3, [pc, #16]	@ (100461c8 <__NVIC_EnableIRQ+0x30>)
100461b8:	2101      	movs	r1, #1
100461ba:	4091      	lsls	r1, r2
100461bc:	000a      	movs	r2, r1
100461be:	601a      	str	r2, [r3, #0]
}
100461c0:	46c0      	nop			@ (mov r8, r8)
100461c2:	46bd      	mov	sp, r7
100461c4:	b002      	add	sp, #8
100461c6:	bd80      	pop	{r7, pc}
100461c8:	e000e100 	.word	0xe000e100

100461cc <LL_RADIO_TIMER_EnableTimer1>:
{
100461cc:	b580      	push	{r7, lr}
100461ce:	b082      	sub	sp, #8
100461d0:	af00      	add	r7, sp, #0
100461d2:	6078      	str	r0, [r7, #4]
  MODIFY_REG_FIELD(BLUEx->TIMEOUTDESTREG, BLUE_TIMEOUTDESTREG_DESTINATION, LL_RADIO_TIMER_1);
100461d4:	687b      	ldr	r3, [r7, #4]
100461d6:	68db      	ldr	r3, [r3, #12]
100461d8:	2203      	movs	r2, #3
100461da:	4393      	bics	r3, r2
100461dc:	2202      	movs	r2, #2
100461de:	431a      	orrs	r2, r3
100461e0:	687b      	ldr	r3, [r7, #4]
100461e2:	60da      	str	r2, [r3, #12]
}
100461e4:	46c0      	nop			@ (mov r8, r8)
100461e6:	46bd      	mov	sp, r7
100461e8:	b002      	add	sp, #8
100461ea:	bd80      	pop	{r7, pc}

100461ec <LL_RADIO_TIMER_DisableTimer1>:
{
100461ec:	b580      	push	{r7, lr}
100461ee:	b082      	sub	sp, #8
100461f0:	af00      	add	r7, sp, #0
100461f2:	6078      	str	r0, [r7, #4]
  MODIFY_REG_FIELD(BLUEx->TIMEOUTDESTREG, BLUE_TIMEOUTDESTREG_DESTINATION, 0);
100461f4:	687b      	ldr	r3, [r7, #4]
100461f6:	68db      	ldr	r3, [r3, #12]
100461f8:	2203      	movs	r2, #3
100461fa:	4393      	bics	r3, r2
100461fc:	001a      	movs	r2, r3
100461fe:	687b      	ldr	r3, [r7, #4]
10046200:	60da      	str	r2, [r3, #12]
}
10046202:	46c0      	nop			@ (mov r8, r8)
10046204:	46bd      	mov	sp, r7
10046206:	b002      	add	sp, #8
10046208:	bd80      	pop	{r7, pc}

1004620a <LL_RADIO_TIMER_IsEnabledTimer1>:
{
1004620a:	b580      	push	{r7, lr}
1004620c:	b082      	sub	sp, #8
1004620e:	af00      	add	r7, sp, #0
10046210:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(BLUEx->TIMEOUTDESTREG, BLUE_TIMEOUTDESTREG_DESTINATION) == (LL_RADIO_TIMER_1)) ? 1UL : 0UL);
10046212:	687b      	ldr	r3, [r7, #4]
10046214:	68db      	ldr	r3, [r3, #12]
10046216:	2203      	movs	r2, #3
10046218:	4013      	ands	r3, r2
1004621a:	2b02      	cmp	r3, #2
1004621c:	d101      	bne.n	10046222 <LL_RADIO_TIMER_IsEnabledTimer1+0x18>
1004621e:	2301      	movs	r3, #1
10046220:	e000      	b.n	10046224 <LL_RADIO_TIMER_IsEnabledTimer1+0x1a>
10046222:	2300      	movs	r3, #0
}
10046224:	0018      	movs	r0, r3
10046226:	46bd      	mov	sp, r7
10046228:	b002      	add	sp, #8
1004622a:	bd80      	pop	{r7, pc}

1004622c <LL_RADIO_TIMER_DisableTimer2>:
{
1004622c:	b580      	push	{r7, lr}
1004622e:	b082      	sub	sp, #8
10046230:	af00      	add	r7, sp, #0
10046232:	6078      	str	r0, [r7, #4]
  MODIFY_REG_FIELD(BLUEx->TIMEOUTDESTREG, BLUE_TIMEOUTDESTREG_DESTINATION, 0);
10046234:	687b      	ldr	r3, [r7, #4]
10046236:	68db      	ldr	r3, [r3, #12]
10046238:	2203      	movs	r2, #3
1004623a:	4393      	bics	r3, r2
1004623c:	001a      	movs	r2, r3
1004623e:	687b      	ldr	r3, [r7, #4]
10046240:	60da      	str	r2, [r3, #12]
}
10046242:	46c0      	nop			@ (mov r8, r8)
10046244:	46bd      	mov	sp, r7
10046246:	b002      	add	sp, #8
10046248:	bd80      	pop	{r7, pc}

1004624a <LL_RADIO_TIMER_IsEnabledTimer2>:
{
1004624a:	b580      	push	{r7, lr}
1004624c:	b082      	sub	sp, #8
1004624e:	af00      	add	r7, sp, #0
10046250:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(BLUEx->TIMEOUTDESTREG, BLUE_TIMEOUTDESTREG_DESTINATION) == (LL_RADIO_TIMER_2)) ? 1UL : 0UL);
10046252:	687b      	ldr	r3, [r7, #4]
10046254:	68db      	ldr	r3, [r3, #12]
10046256:	2203      	movs	r2, #3
10046258:	4013      	ands	r3, r2
1004625a:	2b03      	cmp	r3, #3
1004625c:	d101      	bne.n	10046262 <LL_RADIO_TIMER_IsEnabledTimer2+0x18>
1004625e:	2301      	movs	r3, #1
10046260:	e000      	b.n	10046264 <LL_RADIO_TIMER_IsEnabledTimer2+0x1a>
10046262:	2300      	movs	r3, #0
}
10046264:	0018      	movs	r0, r3
10046266:	46bd      	mov	sp, r7
10046268:	b002      	add	sp, #8
1004626a:	bd80      	pop	{r7, pc}

1004626c <LL_RADIO_TIMER_SetTimeout>:
{
1004626c:	b580      	push	{r7, lr}
1004626e:	b082      	sub	sp, #8
10046270:	af00      	add	r7, sp, #0
10046272:	6078      	str	r0, [r7, #4]
10046274:	6039      	str	r1, [r7, #0]
  WRITE_REG(BLUEx->TIMEOUTREG, timeout);
10046276:	687b      	ldr	r3, [r7, #4]
10046278:	683a      	ldr	r2, [r7, #0]
1004627a:	611a      	str	r2, [r3, #16]
}
1004627c:	46c0      	nop			@ (mov r8, r8)
1004627e:	46bd      	mov	sp, r7
10046280:	b002      	add	sp, #8
10046282:	bd80      	pop	{r7, pc}

10046284 <LL_RADIO_TIMER_GetTimeout>:
{
10046284:	b580      	push	{r7, lr}
10046286:	b082      	sub	sp, #8
10046288:	af00      	add	r7, sp, #0
1004628a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_REG(BLUEx->TIMEOUTREG));
1004628c:	687b      	ldr	r3, [r7, #4]
1004628e:	691b      	ldr	r3, [r3, #16]
}
10046290:	0018      	movs	r0, r3
10046292:	46bd      	mov	sp, r7
10046294:	b002      	add	sp, #8
10046296:	bd80      	pop	{r7, pc}

10046298 <LL_RADIO_TIMER_EnableBLEWakeupTimer>:
{
10046298:	b580      	push	{r7, lr}
1004629a:	b082      	sub	sp, #8
1004629c:	af00      	add	r7, sp, #0
1004629e:	6078      	str	r0, [r7, #4]
  SET_BIT(WAKEUPx->BLUE_SLEEP_REQUEST_MODE, WAKEUP_BLUE_SLEEP_REQUEST_MODE_BLE_WAKEUP_EN);
100462a0:	687b      	ldr	r3, [r7, #4]
100462a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
100462a4:	2280      	movs	r2, #128	@ 0x80
100462a6:	05d2      	lsls	r2, r2, #23
100462a8:	431a      	orrs	r2, r3
100462aa:	687b      	ldr	r3, [r7, #4]
100462ac:	629a      	str	r2, [r3, #40]	@ 0x28
}
100462ae:	46c0      	nop			@ (mov r8, r8)
100462b0:	46bd      	mov	sp, r7
100462b2:	b002      	add	sp, #8
100462b4:	bd80      	pop	{r7, pc}
	...

100462b8 <LL_RADIO_TIMER_DisableBLEWakeupTimer>:
{
100462b8:	b580      	push	{r7, lr}
100462ba:	b082      	sub	sp, #8
100462bc:	af00      	add	r7, sp, #0
100462be:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(WAKEUPx->BLUE_SLEEP_REQUEST_MODE, WAKEUP_BLUE_SLEEP_REQUEST_MODE_BLE_WAKEUP_EN);
100462c0:	687b      	ldr	r3, [r7, #4]
100462c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
100462c4:	4a03      	ldr	r2, [pc, #12]	@ (100462d4 <LL_RADIO_TIMER_DisableBLEWakeupTimer+0x1c>)
100462c6:	401a      	ands	r2, r3
100462c8:	687b      	ldr	r3, [r7, #4]
100462ca:	629a      	str	r2, [r3, #40]	@ 0x28
}
100462cc:	46c0      	nop			@ (mov r8, r8)
100462ce:	46bd      	mov	sp, r7
100462d0:	b002      	add	sp, #8
100462d2:	bd80      	pop	{r7, pc}
100462d4:	bfffffff 	.word	0xbfffffff

100462d8 <LL_RADIO_TIMER_IsEnabledBLEWakeupTimer>:
{
100462d8:	b580      	push	{r7, lr}
100462da:	b082      	sub	sp, #8
100462dc:	af00      	add	r7, sp, #0
100462de:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(WAKEUPx->BLUE_SLEEP_REQUEST_MODE, WAKEUP_BLUE_SLEEP_REQUEST_MODE_BLE_WAKEUP_EN) == (WAKEUP_BLUE_SLEEP_REQUEST_MODE_BLE_WAKEUP_EN)) ? 1UL : 0UL);
100462e0:	687b      	ldr	r3, [r7, #4]
100462e2:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
100462e4:	2380      	movs	r3, #128	@ 0x80
100462e6:	05db      	lsls	r3, r3, #23
100462e8:	401a      	ands	r2, r3
100462ea:	2380      	movs	r3, #128	@ 0x80
100462ec:	05db      	lsls	r3, r3, #23
100462ee:	429a      	cmp	r2, r3
100462f0:	d101      	bne.n	100462f6 <LL_RADIO_TIMER_IsEnabledBLEWakeupTimer+0x1e>
100462f2:	2301      	movs	r3, #1
100462f4:	e000      	b.n	100462f8 <LL_RADIO_TIMER_IsEnabledBLEWakeupTimer+0x20>
100462f6:	2300      	movs	r3, #0
}
100462f8:	0018      	movs	r0, r3
100462fa:	46bd      	mov	sp, r7
100462fc:	b002      	add	sp, #8
100462fe:	bd80      	pop	{r7, pc}

10046300 <LL_RADIO_TIMER_EnableCPUWakeupTimer>:
{
10046300:	b580      	push	{r7, lr}
10046302:	b082      	sub	sp, #8
10046304:	af00      	add	r7, sp, #0
10046306:	6078      	str	r0, [r7, #4]
  SET_BIT(WAKEUPx->CM0_SLEEP_REQUEST_MODE, WAKEUP_CM0_SLEEP_REQUEST_MODE_CPU_WAKEUP_EN);
10046308:	687b      	ldr	r3, [r7, #4]
1004630a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
1004630c:	2280      	movs	r2, #128	@ 0x80
1004630e:	05d2      	lsls	r2, r2, #23
10046310:	431a      	orrs	r2, r3
10046312:	687b      	ldr	r3, [r7, #4]
10046314:	631a      	str	r2, [r3, #48]	@ 0x30
}
10046316:	46c0      	nop			@ (mov r8, r8)
10046318:	46bd      	mov	sp, r7
1004631a:	b002      	add	sp, #8
1004631c:	bd80      	pop	{r7, pc}
	...

10046320 <LL_RADIO_TIMER_DisableCPUWakeupTimer>:
{
10046320:	b580      	push	{r7, lr}
10046322:	b082      	sub	sp, #8
10046324:	af00      	add	r7, sp, #0
10046326:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(WAKEUPx->CM0_SLEEP_REQUEST_MODE, WAKEUP_CM0_SLEEP_REQUEST_MODE_CPU_WAKEUP_EN);
10046328:	687b      	ldr	r3, [r7, #4]
1004632a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
1004632c:	4a03      	ldr	r2, [pc, #12]	@ (1004633c <LL_RADIO_TIMER_DisableCPUWakeupTimer+0x1c>)
1004632e:	401a      	ands	r2, r3
10046330:	687b      	ldr	r3, [r7, #4]
10046332:	631a      	str	r2, [r3, #48]	@ 0x30
}
10046334:	46c0      	nop			@ (mov r8, r8)
10046336:	46bd      	mov	sp, r7
10046338:	b002      	add	sp, #8
1004633a:	bd80      	pop	{r7, pc}
1004633c:	bfffffff 	.word	0xbfffffff

10046340 <LL_RADIO_TIMER_SetWakeupOffset>:
{
10046340:	b580      	push	{r7, lr}
10046342:	b082      	sub	sp, #8
10046344:	af00      	add	r7, sp, #0
10046346:	6078      	str	r0, [r7, #4]
10046348:	000a      	movs	r2, r1
1004634a:	1cfb      	adds	r3, r7, #3
1004634c:	701a      	strb	r2, [r3, #0]
  WRITE_REG(WAKEUPx->WAKEUP_OFFSET[0], (Time & 0xFF));
1004634e:	1cfb      	adds	r3, r7, #3
10046350:	781a      	ldrb	r2, [r3, #0]
10046352:	687b      	ldr	r3, [r7, #4]
10046354:	609a      	str	r2, [r3, #8]
}
10046356:	46c0      	nop			@ (mov r8, r8)
10046358:	46bd      	mov	sp, r7
1004635a:	b002      	add	sp, #8
1004635c:	bd80      	pop	{r7, pc}

1004635e <LL_RADIO_TIMER_SetBLEWakeupTime>:
{
1004635e:	b580      	push	{r7, lr}
10046360:	b082      	sub	sp, #8
10046362:	af00      	add	r7, sp, #0
10046364:	6078      	str	r0, [r7, #4]
10046366:	6039      	str	r1, [r7, #0]
  WRITE_REG(WAKEUPx->BLUE_WAKEUP_TIME, Time);
10046368:	687b      	ldr	r3, [r7, #4]
1004636a:	683a      	ldr	r2, [r7, #0]
1004636c:	625a      	str	r2, [r3, #36]	@ 0x24
}
1004636e:	46c0      	nop			@ (mov r8, r8)
10046370:	46bd      	mov	sp, r7
10046372:	b002      	add	sp, #8
10046374:	bd80      	pop	{r7, pc}

10046376 <LL_RADIO_TIMER_GetBLEWakeupTime>:
{
10046376:	b580      	push	{r7, lr}
10046378:	b082      	sub	sp, #8
1004637a:	af00      	add	r7, sp, #0
1004637c:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_REG(WAKEUPx->BLUE_WAKEUP_TIME));
1004637e:	687b      	ldr	r3, [r7, #4]
10046380:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
}
10046382:	0018      	movs	r0, r3
10046384:	46bd      	mov	sp, r7
10046386:	b002      	add	sp, #8
10046388:	bd80      	pop	{r7, pc}

1004638a <LL_RADIO_TIMER_SetCPUWakeupTime>:
{
1004638a:	b580      	push	{r7, lr}
1004638c:	b082      	sub	sp, #8
1004638e:	af00      	add	r7, sp, #0
10046390:	6078      	str	r0, [r7, #4]
10046392:	6039      	str	r1, [r7, #0]
  WRITE_REG(WAKEUPx->CM0_WAKEUP_TIME, Time);
10046394:	687b      	ldr	r3, [r7, #4]
10046396:	683a      	ldr	r2, [r7, #0]
10046398:	62da      	str	r2, [r3, #44]	@ 0x2c
}
1004639a:	46c0      	nop			@ (mov r8, r8)
1004639c:	46bd      	mov	sp, r7
1004639e:	b002      	add	sp, #8
100463a0:	bd80      	pop	{r7, pc}

100463a2 <LL_RADIO_TIMER_GetAbsoluteTime>:
{
100463a2:	b580      	push	{r7, lr}
100463a4:	b082      	sub	sp, #8
100463a6:	af00      	add	r7, sp, #0
100463a8:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_REG(WAKEUPx->ABSOLUTE_TIME));
100463aa:	687b      	ldr	r3, [r7, #4]
100463ac:	691b      	ldr	r3, [r3, #16]
}
100463ae:	0018      	movs	r0, r3
100463b0:	46bd      	mov	sp, r7
100463b2:	b002      	add	sp, #8
100463b4:	bd80      	pop	{r7, pc}

100463b6 <LL_RADIO_TIMER_EnableWakeupTimerLowPowerMode>:
  * @rmtoll BLUE_SLEEP_REQUEST_MODE    SLEEP_EN   LL_RADIO_TIMER_EnableWakeupTimerLowPowerMode
  * @param  WAKEUPx Radio Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_TIMER_EnableWakeupTimerLowPowerMode(WAKEUP_TypeDef *WAKEUPx)
{
100463b6:	b580      	push	{r7, lr}
100463b8:	b082      	sub	sp, #8
100463ba:	af00      	add	r7, sp, #0
100463bc:	6078      	str	r0, [r7, #4]
  SET_BIT(WAKEUPx->BLUE_SLEEP_REQUEST_MODE, WAKEUP_BLUE_SLEEP_REQUEST_MODE_SLEEP_EN);
100463be:	687b      	ldr	r3, [r7, #4]
100463c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
100463c2:	2280      	movs	r2, #128	@ 0x80
100463c4:	0592      	lsls	r2, r2, #22
100463c6:	431a      	orrs	r2, r3
100463c8:	687b      	ldr	r3, [r7, #4]
100463ca:	629a      	str	r2, [r3, #40]	@ 0x28
}
100463cc:	46c0      	nop			@ (mov r8, r8)
100463ce:	46bd      	mov	sp, r7
100463d0:	b002      	add	sp, #8
100463d2:	bd80      	pop	{r7, pc}

100463d4 <LL_RADIO_TIMER_SetSleepRequestMode>:
  * @param  WAKEUPx Radio Timer instance
  * @param  mode Sleep mode value in range 0-7
  * @retval None.
  */
__STATIC_INLINE void LL_RADIO_TIMER_SetSleepRequestMode(WAKEUP_TypeDef *WAKEUPx, uint8_t mode)
{
100463d4:	b580      	push	{r7, lr}
100463d6:	b082      	sub	sp, #8
100463d8:	af00      	add	r7, sp, #0
100463da:	6078      	str	r0, [r7, #4]
100463dc:	000a      	movs	r2, r1
100463de:	1cfb      	adds	r3, r7, #3
100463e0:	701a      	strb	r2, [r3, #0]
#if defined(STM32WB09)
  return;
#else
  MODIFY_REG_FIELD(WAKEUP->BLUE_SLEEP_REQUEST_MODE, WAKEUP_BLUE_SLEEP_REQUEST_MODE_SLEEP_REQ_MODE, (mode & 0x7));
100463e2:	4b08      	ldr	r3, [pc, #32]	@ (10046404 <LL_RADIO_TIMER_SetSleepRequestMode+0x30>)
100463e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
100463e6:	2207      	movs	r2, #7
100463e8:	4393      	bics	r3, r2
100463ea:	0019      	movs	r1, r3
100463ec:	1cfb      	adds	r3, r7, #3
100463ee:	781b      	ldrb	r3, [r3, #0]
100463f0:	2207      	movs	r2, #7
100463f2:	401a      	ands	r2, r3
100463f4:	4b03      	ldr	r3, [pc, #12]	@ (10046404 <LL_RADIO_TIMER_SetSleepRequestMode+0x30>)
100463f6:	430a      	orrs	r2, r1
100463f8:	629a      	str	r2, [r3, #40]	@ 0x28
#endif
}
100463fa:	46c0      	nop			@ (mov r8, r8)
100463fc:	46bd      	mov	sp, r7
100463fe:	b002      	add	sp, #8
10046400:	bd80      	pop	{r7, pc}
10046402:	46c0      	nop			@ (mov r8, r8)
10046404:	60001800 	.word	0x60001800

10046408 <LL_RADIO_TIMER_EnableBLEWakeupIT>:
  * @rmtoll WAKEUP_BLE_IRQ_ENABLE    WAKEUP_IT   LL_RADIO_TIMER_EnableBLEWakeupIT
  * @param  WAKEUPx Radio Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_TIMER_EnableBLEWakeupIT(WAKEUP_TypeDef *WAKEUPx)
{
10046408:	b580      	push	{r7, lr}
1004640a:	b082      	sub	sp, #8
1004640c:	af00      	add	r7, sp, #0
1004640e:	6078      	str	r0, [r7, #4]
  SET_BIT(WAKEUPx->WAKEUP_BLE_IRQ_ENABLE, WAKEUP_WAKEUP_BLE_IRQ_ENABLE_WAKEUP_IT);
10046410:	687b      	ldr	r3, [r7, #4]
10046412:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
10046414:	2201      	movs	r2, #1
10046416:	431a      	orrs	r2, r3
10046418:	687b      	ldr	r3, [r7, #4]
1004641a:	641a      	str	r2, [r3, #64]	@ 0x40
}
1004641c:	46c0      	nop			@ (mov r8, r8)
1004641e:	46bd      	mov	sp, r7
10046420:	b002      	add	sp, #8
10046422:	bd80      	pop	{r7, pc}

10046424 <LL_RADIO_TIMER_EnableCPUWakeupIT>:
  * @rmtoll WAKEUP_CM0_IRQ_ENABLE    WAKEUP_IT   LL_RADIO_TIMER_EnableCPUWakeupIT
  * @param  WAKEUPx Radio Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_TIMER_EnableCPUWakeupIT(WAKEUP_TypeDef *WAKEUPx)
{
10046424:	b580      	push	{r7, lr}
10046426:	b082      	sub	sp, #8
10046428:	af00      	add	r7, sp, #0
1004642a:	6078      	str	r0, [r7, #4]
  SET_BIT(WAKEUPx->WAKEUP_CM0_IRQ_ENABLE, WAKEUP_WAKEUP_CM0_IRQ_ENABLE_WAKEUP_IT);
1004642c:	687b      	ldr	r3, [r7, #4]
1004642e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
10046430:	2201      	movs	r2, #1
10046432:	431a      	orrs	r2, r3
10046434:	687b      	ldr	r3, [r7, #4]
10046436:	649a      	str	r2, [r3, #72]	@ 0x48
}
10046438:	46c0      	nop			@ (mov r8, r8)
1004643a:	46bd      	mov	sp, r7
1004643c:	b002      	add	sp, #8
1004643e:	bd80      	pop	{r7, pc}

10046440 <LL_RADIO_TIMER_ClearFlag_BLEWakeup>:
  * @rmtoll WAKEUP_BLE_IRQ_STATUS   WAKEUP_IT   LL_RADIO_TIMER_ClearFlag_BLEWakeup
  * @param  WAKEUPx Radio Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_TIMER_ClearFlag_BLEWakeup(WAKEUP_TypeDef *WAKEUPx)
{
10046440:	b580      	push	{r7, lr}
10046442:	b082      	sub	sp, #8
10046444:	af00      	add	r7, sp, #0
10046446:	6078      	str	r0, [r7, #4]
  SET_BIT(WAKEUPx->WAKEUP_BLE_IRQ_STATUS, WAKEUP_WAKEUP_BLE_IRQ_STATUS_WAKEUP_IT);
10046448:	687b      	ldr	r3, [r7, #4]
1004644a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
1004644c:	2201      	movs	r2, #1
1004644e:	431a      	orrs	r2, r3
10046450:	687b      	ldr	r3, [r7, #4]
10046452:	645a      	str	r2, [r3, #68]	@ 0x44
}
10046454:	46c0      	nop			@ (mov r8, r8)
10046456:	46bd      	mov	sp, r7
10046458:	b002      	add	sp, #8
1004645a:	bd80      	pop	{r7, pc}

1004645c <LL_RADIO_TIMER_IsActiveFlag_BLEWakeup>:
  * @rmtoll WAKEUP_BLE_IRQ_STATUS   WAKEUP_IT   LL_RADIO_TIMER_IsActiveFlag_BLEWakeup
  * @param  WAKEUPx Radio Timer instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RADIO_TIMER_IsActiveFlag_BLEWakeup(WAKEUP_TypeDef *WAKEUPx)
{
1004645c:	b580      	push	{r7, lr}
1004645e:	b082      	sub	sp, #8
10046460:	af00      	add	r7, sp, #0
10046462:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(WAKEUPx->WAKEUP_BLE_IRQ_STATUS, WAKEUP_WAKEUP_BLE_IRQ_STATUS_WAKEUP_IT) == (WAKEUP_WAKEUP_BLE_IRQ_STATUS_WAKEUP_IT)) ? 1UL : 0UL);
10046464:	687b      	ldr	r3, [r7, #4]
10046466:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
10046468:	2201      	movs	r2, #1
1004646a:	4013      	ands	r3, r2
1004646c:	2b01      	cmp	r3, #1
1004646e:	d101      	bne.n	10046474 <LL_RADIO_TIMER_IsActiveFlag_BLEWakeup+0x18>
10046470:	2301      	movs	r3, #1
10046472:	e000      	b.n	10046476 <LL_RADIO_TIMER_IsActiveFlag_BLEWakeup+0x1a>
10046474:	2300      	movs	r3, #0
}
10046476:	0018      	movs	r0, r3
10046478:	46bd      	mov	sp, r7
1004647a:	b002      	add	sp, #8
1004647c:	bd80      	pop	{r7, pc}

1004647e <LL_RADIO_TIMER_ClearFlag_CPUWakeup>:
  * @rmtoll WAKEUP_CM0_IRQ_STATUS   WAKEUP_IT   LL_RADIO_TIMER_ClearFlag_CPUWakeup
  * @param  WAKEUPx Radio Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_TIMER_ClearFlag_CPUWakeup(WAKEUP_TypeDef *WAKEUPx)
{
1004647e:	b580      	push	{r7, lr}
10046480:	b082      	sub	sp, #8
10046482:	af00      	add	r7, sp, #0
10046484:	6078      	str	r0, [r7, #4]
  SET_BIT(WAKEUPx->WAKEUP_CM0_IRQ_STATUS, WAKEUP_WAKEUP_CM0_IRQ_STATUS_WAKEUP_IT);
10046486:	687b      	ldr	r3, [r7, #4]
10046488:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
1004648a:	2201      	movs	r2, #1
1004648c:	431a      	orrs	r2, r3
1004648e:	687b      	ldr	r3, [r7, #4]
10046490:	64da      	str	r2, [r3, #76]	@ 0x4c
}
10046492:	46c0      	nop			@ (mov r8, r8)
10046494:	46bd      	mov	sp, r7
10046496:	b002      	add	sp, #8
10046498:	bd80      	pop	{r7, pc}

1004649a <LL_RADIO_TIMER_IsActiveFlag_CPUWakeup>:
  * @rmtoll WAKEUP_CM0_IRQ_STATUS   WAKEUP_IT   LL_RADIO_TIMER_IsActiveFlag_CPUWakeup
  * @param  WAKEUPx Radio Timer instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RADIO_TIMER_IsActiveFlag_CPUWakeup(WAKEUP_TypeDef *WAKEUPx)
{
1004649a:	b580      	push	{r7, lr}
1004649c:	b082      	sub	sp, #8
1004649e:	af00      	add	r7, sp, #0
100464a0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(WAKEUPx->WAKEUP_CM0_IRQ_STATUS, WAKEUP_WAKEUP_CM0_IRQ_STATUS_WAKEUP_IT) == (WAKEUP_WAKEUP_CM0_IRQ_STATUS_WAKEUP_IT)) ? 1UL : 0UL);
100464a2:	687b      	ldr	r3, [r7, #4]
100464a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
100464a6:	2201      	movs	r2, #1
100464a8:	4013      	ands	r3, r2
100464aa:	2b01      	cmp	r3, #1
100464ac:	d101      	bne.n	100464b2 <LL_RADIO_TIMER_IsActiveFlag_CPUWakeup+0x18>
100464ae:	2301      	movs	r3, #1
100464b0:	e000      	b.n	100464b4 <LL_RADIO_TIMER_IsActiveFlag_CPUWakeup+0x1a>
100464b2:	2300      	movs	r3, #0
}
100464b4:	0018      	movs	r0, r3
100464b6:	46bd      	mov	sp, r7
100464b8:	b002      	add	sp, #8
100464ba:	bd80      	pop	{r7, pc}

100464bc <LL_RADIO_TIMER_SetLSIWindowCalibrationLength>:
  * @param RADIO_CTRLx: Radio Control instance
  * @param  Count Slow clock is measured in a window of SLOW_COUNT+1 slow clock cycles
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_TIMER_SetLSIWindowCalibrationLength(RADIO_CTRL_TypeDef *RADIO_CTRLx, uint32_t Count)
{
100464bc:	b580      	push	{r7, lr}
100464be:	b082      	sub	sp, #8
100464c0:	af00      	add	r7, sp, #0
100464c2:	6078      	str	r0, [r7, #4]
100464c4:	6039      	str	r1, [r7, #0]
  WRITE_REG(RADIO_CTRLx->CLK32COUNT_REG, Count);
100464c6:	687b      	ldr	r3, [r7, #4]
100464c8:	683a      	ldr	r2, [r7, #0]
100464ca:	605a      	str	r2, [r3, #4]
}
100464cc:	46c0      	nop			@ (mov r8, r8)
100464ce:	46bd      	mov	sp, r7
100464d0:	b002      	add	sp, #8
100464d2:	bd80      	pop	{r7, pc}

100464d4 <LL_RADIO_TIMER_StartLSICalibration>:
  * @brief  Start the LSI calibration procedure.
  * @param RADIO_CTRLx: Radio Control instance
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_TIMER_StartLSICalibration(RADIO_CTRL_TypeDef *RADIO_CTRLx)
{
100464d4:	b580      	push	{r7, lr}
100464d6:	b082      	sub	sp, #8
100464d8:	af00      	add	r7, sp, #0
100464da:	6078      	str	r0, [r7, #4]
  WRITE_REG(RADIO_CTRLx->CLK32PERIOD_REG, 0);
100464dc:	687b      	ldr	r3, [r7, #4]
100464de:	2200      	movs	r2, #0
100464e0:	609a      	str	r2, [r3, #8]
}
100464e2:	46c0      	nop			@ (mov r8, r8)
100464e4:	46bd      	mov	sp, r7
100464e6:	b002      	add	sp, #8
100464e8:	bd80      	pop	{r7, pc}

100464ea <LL_RADIO_TIMER_GetLSIPeriod>:
  * @brief  Get the LSI clock Period calibrated.
  * @param RADIO_CTRLx: Radio Control instance
  * @retval The LSI clock period calibrated
  */
__STATIC_INLINE uint32_t LL_RADIO_TIMER_GetLSIPeriod(RADIO_CTRL_TypeDef *RADIO_CTRLx)
{
100464ea:	b580      	push	{r7, lr}
100464ec:	b082      	sub	sp, #8
100464ee:	af00      	add	r7, sp, #0
100464f0:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_REG(RADIO_CTRLx->CLK32PERIOD_REG));
100464f2:	687b      	ldr	r3, [r7, #4]
100464f4:	689b      	ldr	r3, [r3, #8]
}
100464f6:	0018      	movs	r0, r3
100464f8:	46bd      	mov	sp, r7
100464fa:	b002      	add	sp, #8
100464fc:	bd80      	pop	{r7, pc}

100464fe <LL_RADIO_TIMER_GetLSIFrequency>:
  * @brief  Get the LSI clock Frequency calibrated.
  * @param RADIO_CTRLx: Radio Control instance
  * @retval The LSI clock frequency calibrated
  */
__STATIC_INLINE uint32_t LL_RADIO_TIMER_GetLSIFrequency(RADIO_CTRL_TypeDef *RADIO_CTRLx)
{
100464fe:	b580      	push	{r7, lr}
10046500:	b082      	sub	sp, #8
10046502:	af00      	add	r7, sp, #0
10046504:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_REG(RADIO_CTRLx->CLK32FREQUENCY_REG));
10046506:	687b      	ldr	r3, [r7, #4]
10046508:	68db      	ldr	r3, [r3, #12]
}
1004650a:	0018      	movs	r0, r3
1004650c:	46bd      	mov	sp, r7
1004650e:	b002      	add	sp, #8
10046510:	bd80      	pop	{r7, pc}

10046512 <LL_RADIO_TIMER_ClearFlag_LSICalibrationEnded>:
  * @brief  Clear the LSI calibration ended flag.
  * @param RADIO_CTRLx: Radio Control instance
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_TIMER_ClearFlag_LSICalibrationEnded(RADIO_CTRL_TypeDef *RADIO_CTRLx)
{
10046512:	b580      	push	{r7, lr}
10046514:	b082      	sub	sp, #8
10046516:	af00      	add	r7, sp, #0
10046518:	6078      	str	r0, [r7, #4]
  SET_BIT(RADIO_CTRLx->RADIO_CONTROL_IRQ_STATUS, RADIO_CTRL_RADIO_CONTROL_IRQ_STATUS_SLOW_CLK_IRQ);
1004651a:	687b      	ldr	r3, [r7, #4]
1004651c:	691b      	ldr	r3, [r3, #16]
1004651e:	2201      	movs	r2, #1
10046520:	431a      	orrs	r2, r3
10046522:	687b      	ldr	r3, [r7, #4]
10046524:	611a      	str	r2, [r3, #16]
}
10046526:	46c0      	nop			@ (mov r8, r8)
10046528:	46bd      	mov	sp, r7
1004652a:	b002      	add	sp, #8
1004652c:	bd80      	pop	{r7, pc}

1004652e <LL_RADIO_TIMER_IsActiveFlag_LSICalibrationEnded>:
  * @brief  Check if the LSI calibration ended flag is set or not.
  * @param RADIO_CTRLx: Radio Control instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RADIO_TIMER_IsActiveFlag_LSICalibrationEnded(RADIO_CTRL_TypeDef *RADIO_CTRLx)
{
1004652e:	b580      	push	{r7, lr}
10046530:	b082      	sub	sp, #8
10046532:	af00      	add	r7, sp, #0
10046534:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(RADIO_CTRLx->RADIO_CONTROL_IRQ_STATUS, RADIO_CTRL_RADIO_CONTROL_IRQ_STATUS_SLOW_CLK_IRQ) == (RADIO_CTRL_RADIO_CONTROL_IRQ_STATUS_SLOW_CLK_IRQ)) ? 1UL : 0UL);
10046536:	687b      	ldr	r3, [r7, #4]
10046538:	691b      	ldr	r3, [r3, #16]
1004653a:	2201      	movs	r2, #1
1004653c:	4013      	ands	r3, r2
1004653e:	2b01      	cmp	r3, #1
10046540:	d101      	bne.n	10046546 <LL_RADIO_TIMER_IsActiveFlag_LSICalibrationEnded+0x18>
10046542:	2301      	movs	r3, #1
10046544:	e000      	b.n	10046548 <LL_RADIO_TIMER_IsActiveFlag_LSICalibrationEnded+0x1a>
10046546:	2300      	movs	r3, #0
}
10046548:	0018      	movs	r0, r3
1004654a:	46bd      	mov	sp, r7
1004654c:	b002      	add	sp, #8
1004654e:	bd80      	pop	{r7, pc}

10046550 <HAL_RADIO_TIMER_Init>:
  *         section of the application.
  * @param RADIO_TIMER_InitStruct Radio Timer Initialization parameters
  * @retval None
  */
void HAL_RADIO_TIMER_Init(RADIO_TIMER_InitTypeDef *RADIO_TIMER_InitStruct)
{
10046550:	b5f0      	push	{r4, r5, r6, r7, lr}
10046552:	b083      	sub	sp, #12
10046554:	af00      	add	r7, sp, #0
10046556:	6078      	str	r0, [r7, #4]
  /* Interrupt Configuration */
  LL_RADIO_TIMER_ClearFlag_CPUWakeup(WAKEUP);
10046558:	4b7c      	ldr	r3, [pc, #496]	@ (1004674c <HAL_RADIO_TIMER_Init+0x1fc>)
1004655a:	0018      	movs	r0, r3
1004655c:	f7ff ff8f 	bl	1004647e <LL_RADIO_TIMER_ClearFlag_CPUWakeup>
  LL_RADIO_TIMER_EnableCPUWakeupIT(WAKEUP);
10046560:	4b7a      	ldr	r3, [pc, #488]	@ (1004674c <HAL_RADIO_TIMER_Init+0x1fc>)
10046562:	0018      	movs	r0, r3
10046564:	f7ff ff5e 	bl	10046424 <LL_RADIO_TIMER_EnableCPUWakeupIT>
  NVIC_EnableIRQ(RADIO_TIMER_CPU_WKUP_IRQn);
10046568:	2017      	movs	r0, #23
1004656a:	f7ff fe15 	bl	10046198 <__NVIC_EnableIRQ>
  NVIC_EnableIRQ(RADIO_TIMER_ERROR_IRQn);
1004656e:	2014      	movs	r0, #20
10046570:	f7ff fe12 	bl	10046198 <__NVIC_EnableIRQ>

#if defined (STM32WB06) || defined (STM32WB07)
  LL_RADIO_TIMER_ClearFlag_BLEWakeup(WAKEUP);
10046574:	4b75      	ldr	r3, [pc, #468]	@ (1004674c <HAL_RADIO_TIMER_Init+0x1fc>)
10046576:	0018      	movs	r0, r3
10046578:	f7ff ff62 	bl	10046440 <LL_RADIO_TIMER_ClearFlag_BLEWakeup>
  LL_RADIO_TIMER_EnableBLEWakeupIT(WAKEUP);
1004657c:	4b73      	ldr	r3, [pc, #460]	@ (1004674c <HAL_RADIO_TIMER_Init+0x1fc>)
1004657e:	0018      	movs	r0, r3
10046580:	f7ff ff42 	bl	10046408 <LL_RADIO_TIMER_EnableBLEWakeupIT>
  NVIC_EnableIRQ(RADIO_TIMER_TXRX_WKUP_IRQn);
10046584:	2018      	movs	r0, #24
10046586:	f7ff fe07 	bl	10046198 <__NVIC_EnableIRQ>
  RADIO_TIMER_Context.hostMargin = MAX(HOST_MARGIN, RADIO_TIMER_InitStruct->XTAL_StartupTime);
1004658a:	687b      	ldr	r3, [r7, #4]
1004658c:	881b      	ldrh	r3, [r3, #0]
1004658e:	1c1a      	adds	r2, r3, #0
10046590:	b293      	uxth	r3, r2
10046592:	2bc8      	cmp	r3, #200	@ 0xc8
10046594:	d201      	bcs.n	1004659a <HAL_RADIO_TIMER_Init+0x4a>
10046596:	23c8      	movs	r3, #200	@ 0xc8
10046598:	1c1a      	adds	r2, r3, #0
1004659a:	b293      	uxth	r3, r2
1004659c:	0019      	movs	r1, r3
1004659e:	4b6c      	ldr	r3, [pc, #432]	@ (10046750 <HAL_RADIO_TIMER_Init+0x200>)
100465a0:	2298      	movs	r2, #152	@ 0x98
100465a2:	5099      	str	r1, [r3, r2]
#endif

  /* Calibration Setting */
  RADIO_TIMER_Context.calibrationSettings.periodicCalibration = (RADIO_TIMER_InitStruct->periodicCalibrationInterval != 0);
100465a4:	687b      	ldr	r3, [r7, #4]
100465a6:	685b      	ldr	r3, [r3, #4]
100465a8:	1e5a      	subs	r2, r3, #1
100465aa:	4193      	sbcs	r3, r2
100465ac:	b2db      	uxtb	r3, r3
100465ae:	001a      	movs	r2, r3
100465b0:	4b67      	ldr	r3, [pc, #412]	@ (10046750 <HAL_RADIO_TIMER_Init+0x200>)
100465b2:	701a      	strb	r2, [r3, #0]
  if (RADIO_TIMER_Context.calibrationSettings.periodicCalibration || RADIO_TIMER_InitStruct->enableInitialCalibration)
100465b4:	4b66      	ldr	r3, [pc, #408]	@ (10046750 <HAL_RADIO_TIMER_Init+0x200>)
100465b6:	781b      	ldrb	r3, [r3, #0]
100465b8:	2b00      	cmp	r3, #0
100465ba:	d103      	bne.n	100465c4 <HAL_RADIO_TIMER_Init+0x74>
100465bc:	687b      	ldr	r3, [r7, #4]
100465be:	789b      	ldrb	r3, [r3, #2]
100465c0:	2b00      	cmp	r3, #0
100465c2:	d002      	beq.n	100465ca <HAL_RADIO_TIMER_Init+0x7a>
  {
    _calibrationProcedure();
100465c4:	f000 fc68 	bl	10046e98 <_calibrationProcedure>
100465c8:	e010      	b.n	100465ec <HAL_RADIO_TIMER_Init+0x9c>
  }
  else
  {
    /* Assume fix frequency at 32.768 kHz */
    RADIO_TIMER_Context.calibrationData.last_period1 = 0x00190000;
100465ca:	4b61      	ldr	r3, [pc, #388]	@ (10046750 <HAL_RADIO_TIMER_Init+0x200>)
100465cc:	22c8      	movs	r2, #200	@ 0xc8
100465ce:	0352      	lsls	r2, r2, #13
100465d0:	621a      	str	r2, [r3, #32]
    RADIO_TIMER_Context.calibrationData.period1 = 0x00190000 ;
100465d2:	4b5f      	ldr	r3, [pc, #380]	@ (10046750 <HAL_RADIO_TIMER_Init+0x200>)
100465d4:	22c8      	movs	r2, #200	@ 0xc8
100465d6:	0352      	lsls	r2, r2, #13
100465d8:	61da      	str	r2, [r3, #28]
    RADIO_TIMER_Context.calibrationData.freq1 = 0x0028F5C2 ;
100465da:	4b5d      	ldr	r3, [pc, #372]	@ (10046750 <HAL_RADIO_TIMER_Init+0x200>)
100465dc:	4a5d      	ldr	r2, [pc, #372]	@ (10046754 <HAL_RADIO_TIMER_Init+0x204>)
100465de:	619a      	str	r2, [r3, #24]
    RADIO_TIMER_Context.calibrationData.period = 23437;
100465e0:	4b5b      	ldr	r3, [pc, #364]	@ (10046750 <HAL_RADIO_TIMER_Init+0x200>)
100465e2:	4a5d      	ldr	r2, [pc, #372]	@ (10046758 <HAL_RADIO_TIMER_Init+0x208>)
100465e4:	611a      	str	r2, [r3, #16]
    RADIO_TIMER_Context.calibrationData.freq = 23456748;
100465e6:	4b5a      	ldr	r3, [pc, #360]	@ (10046750 <HAL_RADIO_TIMER_Init+0x200>)
100465e8:	4a5c      	ldr	r2, [pc, #368]	@ (1004675c <HAL_RADIO_TIMER_Init+0x20c>)
100465ea:	615a      	str	r2, [r3, #20]
  }
  if (RADIO_TIMER_InitStruct->periodicCalibrationInterval == 0)
100465ec:	687b      	ldr	r3, [r7, #4]
100465ee:	685b      	ldr	r3, [r3, #4]
100465f0:	2b00      	cmp	r3, #0
100465f2:	d108      	bne.n	10046606 <HAL_RADIO_TIMER_Init+0xb6>
  {
    RADIO_TIMER_Context.calibrationSettings.periodicCalibrationInterval = HAL_RADIO_TIMER_MachineTimeToSysTime(0x50000000);
100465f4:	23a0      	movs	r3, #160	@ 0xa0
100465f6:	05db      	lsls	r3, r3, #23
100465f8:	0018      	movs	r0, r3
100465fa:	f000 fb6b 	bl	10046cd4 <HAL_RADIO_TIMER_MachineTimeToSysTime>
100465fe:	0002      	movs	r2, r0
10046600:	4b53      	ldr	r3, [pc, #332]	@ (10046750 <HAL_RADIO_TIMER_Init+0x200>)
10046602:	605a      	str	r2, [r3, #4]
10046604:	e01d      	b.n	10046642 <HAL_RADIO_TIMER_Init+0xf2>
  }
  else
  {
    RADIO_TIMER_Context.calibrationSettings.periodicCalibrationInterval = (TIMER_SYSTICK_PER_10MS * RADIO_TIMER_InitStruct->periodicCalibrationInterval) / 10;
10046606:	687b      	ldr	r3, [r7, #4]
10046608:	685b      	ldr	r3, [r3, #4]
1004660a:	031b      	lsls	r3, r3, #12
1004660c:	210a      	movs	r1, #10
1004660e:	0018      	movs	r0, r3
10046610:	f7f9 fd78 	bl	10040104 <__udivsi3>
10046614:	0003      	movs	r3, r0
10046616:	001a      	movs	r2, r3
10046618:	4b4d      	ldr	r3, [pc, #308]	@ (10046750 <HAL_RADIO_TIMER_Init+0x200>)
1004661a:	605a      	str	r2, [r3, #4]
    RADIO_TIMER_Context.calibrationSettings.periodicCalibrationInterval = MIN(RADIO_TIMER_Context.calibrationSettings.periodicCalibrationInterval,
1004661c:	4b4c      	ldr	r3, [pc, #304]	@ (10046750 <HAL_RADIO_TIMER_Init+0x200>)
1004661e:	685e      	ldr	r6, [r3, #4]
10046620:	4b4f      	ldr	r3, [pc, #316]	@ (10046760 <HAL_RADIO_TIMER_Init+0x210>)
10046622:	0018      	movs	r0, r3
10046624:	f000 fb56 	bl	10046cd4 <HAL_RADIO_TIMER_MachineTimeToSysTime>
10046628:	0003      	movs	r3, r0
1004662a:	429e      	cmp	r6, r3
1004662c:	d202      	bcs.n	10046634 <HAL_RADIO_TIMER_Init+0xe4>
1004662e:	4b48      	ldr	r3, [pc, #288]	@ (10046750 <HAL_RADIO_TIMER_Init+0x200>)
10046630:	685a      	ldr	r2, [r3, #4]
10046632:	e004      	b.n	1004663e <HAL_RADIO_TIMER_Init+0xee>
10046634:	4b4a      	ldr	r3, [pc, #296]	@ (10046760 <HAL_RADIO_TIMER_Init+0x210>)
10046636:	0018      	movs	r0, r3
10046638:	f000 fb4c 	bl	10046cd4 <HAL_RADIO_TIMER_MachineTimeToSysTime>
1004663c:	0002      	movs	r2, r0
1004663e:	4b44      	ldr	r3, [pc, #272]	@ (10046750 <HAL_RADIO_TIMER_Init+0x200>)
10046640:	605a      	str	r2, [r3, #4]
                                                                              HAL_RADIO_TIMER_MachineTimeToSysTime(TIMER_MAX_VALUE - TIMER_WRAPPING_MARGIN));
  }
  RADIO_TIMER_Context.calibrationSettings.calibration_in_progress = FALSE;
10046642:	4b43      	ldr	r3, [pc, #268]	@ (10046750 <HAL_RADIO_TIMER_Init+0x200>)
10046644:	2200      	movs	r2, #0
10046646:	721a      	strb	r2, [r3, #8]

  /* XTAL startup time configuration */
  RADIO_TIMER_Context.hs_startup_time = RADIO_TIMER_InitStruct->XTAL_StartupTime;
10046648:	687b      	ldr	r3, [r7, #4]
1004664a:	881b      	ldrh	r3, [r3, #0]
1004664c:	001a      	movs	r2, r3
1004664e:	4b40      	ldr	r3, [pc, #256]	@ (10046750 <HAL_RADIO_TIMER_Init+0x200>)
10046650:	669a      	str	r2, [r3, #104]	@ 0x68
  _update_xtal_startup_time(RADIO_TIMER_Context.hs_startup_time, RADIO_TIMER_Context.calibrationData.freq1);
10046652:	4b3f      	ldr	r3, [pc, #252]	@ (10046750 <HAL_RADIO_TIMER_Init+0x200>)
10046654:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
10046656:	b29a      	uxth	r2, r3
10046658:	4b3d      	ldr	r3, [pc, #244]	@ (10046750 <HAL_RADIO_TIMER_Init+0x200>)
1004665a:	699b      	ldr	r3, [r3, #24]
1004665c:	0019      	movs	r1, r3
1004665e:	0010      	movs	r0, r2
10046660:	f000 fd8e 	bl	10047180 <_update_xtal_startup_time>

  /* Init Radio Timer Context */
  RADIO_TIMER_Context.last_setup_time = 0;
10046664:	4b3a      	ldr	r3, [pc, #232]	@ (10046750 <HAL_RADIO_TIMER_Init+0x200>)
10046666:	2284      	movs	r2, #132	@ 0x84
10046668:	2100      	movs	r1, #0
1004666a:	5499      	strb	r1, [r3, r2]
  RADIO_TIMER_Context.cumulative_time = 0;
1004666c:	4938      	ldr	r1, [pc, #224]	@ (10046750 <HAL_RADIO_TIMER_Init+0x200>)
1004666e:	2200      	movs	r2, #0
10046670:	2300      	movs	r3, #0
10046672:	670a      	str	r2, [r1, #112]	@ 0x70
10046674:	674b      	str	r3, [r1, #116]	@ 0x74
  RADIO_TIMER_Context.last_machine_time = LL_RADIO_TIMER_GetAbsoluteTime(WAKEUP);
10046676:	4b35      	ldr	r3, [pc, #212]	@ (1004674c <HAL_RADIO_TIMER_Init+0x1fc>)
10046678:	0018      	movs	r0, r3
1004667a:	f7ff fe92 	bl	100463a2 <LL_RADIO_TIMER_GetAbsoluteTime>
1004667e:	0002      	movs	r2, r0
10046680:	4b33      	ldr	r3, [pc, #204]	@ (10046750 <HAL_RADIO_TIMER_Init+0x200>)
10046682:	2180      	movs	r1, #128	@ 0x80
10046684:	505a      	str	r2, [r3, r1]
  RADIO_TIMER_Context.last_system_time = 0;
10046686:	4932      	ldr	r1, [pc, #200]	@ (10046750 <HAL_RADIO_TIMER_Init+0x200>)
10046688:	2200      	movs	r2, #0
1004668a:	2300      	movs	r3, #0
1004668c:	678a      	str	r2, [r1, #120]	@ 0x78
1004668e:	67cb      	str	r3, [r1, #124]	@ 0x7c
  RADIO_TIMER_Context.calibrationData.last_calibration_time = 0;
10046690:	492f      	ldr	r1, [pc, #188]	@ (10046750 <HAL_RADIO_TIMER_Init+0x200>)
10046692:	2200      	movs	r2, #0
10046694:	2300      	movs	r3, #0
10046696:	628a      	str	r2, [r1, #40]	@ 0x28
10046698:	62cb      	str	r3, [r1, #44]	@ 0x2c
  RADIO_TIMER_Context.calibrationData.calibration_data_available = 0;
1004669a:	4b2d      	ldr	r3, [pc, #180]	@ (10046750 <HAL_RADIO_TIMER_Init+0x200>)
1004669c:	2234      	movs	r2, #52	@ 0x34
1004669e:	2100      	movs	r1, #0
100466a0:	5499      	strb	r1, [r3, r2]
  RADIO_TIMER_Context.calibrationData.calibration_machine_interval = blue_unit_conversion(RADIO_TIMER_Context.calibrationSettings.periodicCalibrationInterval,
100466a2:	4b2b      	ldr	r3, [pc, #172]	@ (10046750 <HAL_RADIO_TIMER_Init+0x200>)
100466a4:	6858      	ldr	r0, [r3, #4]
                                                                     RADIO_TIMER_Context.calibrationData.freq1, MULT64_THR_FREQ);
100466a6:	4b2a      	ldr	r3, [pc, #168]	@ (10046750 <HAL_RADIO_TIMER_Init+0x200>)
100466a8:	699b      	ldr	r3, [r3, #24]
  RADIO_TIMER_Context.calibrationData.calibration_machine_interval = blue_unit_conversion(RADIO_TIMER_Context.calibrationSettings.periodicCalibrationInterval,
100466aa:	0019      	movs	r1, r3
100466ac:	4b2d      	ldr	r3, [pc, #180]	@ (10046764 <HAL_RADIO_TIMER_Init+0x214>)
100466ae:	001a      	movs	r2, r3
100466b0:	f7f9 fd06 	bl	100400c0 <blue_unit_conversion>
100466b4:	0002      	movs	r2, r0
100466b6:	4b26      	ldr	r3, [pc, #152]	@ (10046750 <HAL_RADIO_TIMER_Init+0x200>)
100466b8:	631a      	str	r2, [r3, #48]	@ 0x30
  RADIO_TIMER_Context.wakeup_calibration = RADIO_TIMER_Context.calibrationSettings.periodicCalibration;
100466ba:	4b25      	ldr	r3, [pc, #148]	@ (10046750 <HAL_RADIO_TIMER_Init+0x200>)
100466bc:	7819      	ldrb	r1, [r3, #0]
100466be:	4b24      	ldr	r3, [pc, #144]	@ (10046750 <HAL_RADIO_TIMER_Init+0x200>)
100466c0:	2294      	movs	r2, #148	@ 0x94
100466c2:	5499      	strb	r1, [r3, r2]

  /* Init the Virtual Timer queue */
  RADIO_TIMER_Context.rootNode = NULL;
100466c4:	4b22      	ldr	r3, [pc, #136]	@ (10046750 <HAL_RADIO_TIMER_Init+0x200>)
100466c6:	228c      	movs	r2, #140	@ 0x8c
100466c8:	2100      	movs	r1, #0
100466ca:	5099      	str	r1, [r3, r2]
  RADIO_TIMER_Context.enableTimeBase = TRUE;
100466cc:	4b20      	ldr	r3, [pc, #128]	@ (10046750 <HAL_RADIO_TIMER_Init+0x200>)
100466ce:	2290      	movs	r2, #144	@ 0x90
100466d0:	2101      	movs	r1, #1
100466d2:	5499      	strb	r1, [r3, r2]
  RADIO_TIMER_Context.stop_notimer_action = FALSE;
100466d4:	4b1e      	ldr	r3, [pc, #120]	@ (10046750 <HAL_RADIO_TIMER_Init+0x200>)
100466d6:	2293      	movs	r2, #147	@ 0x93
100466d8:	2100      	movs	r1, #0
100466da:	5499      	strb	r1, [r3, r2]
  RADIO_TIMER_Context.expired_count = 0;
100466dc:	4b1c      	ldr	r3, [pc, #112]	@ (10046750 <HAL_RADIO_TIMER_Init+0x200>)
100466de:	2291      	movs	r2, #145	@ 0x91
100466e0:	2100      	movs	r1, #0
100466e2:	5499      	strb	r1, [r3, r2]
  RADIO_TIMER_Context.served_count = 0;
100466e4:	4b1a      	ldr	r3, [pc, #104]	@ (10046750 <HAL_RADIO_TIMER_Init+0x200>)
100466e6:	2292      	movs	r2, #146	@ 0x92
100466e8:	2100      	movs	r1, #0
100466ea:	5499      	strb	r1, [r3, r2]

  /* Init Radio Timer queue */
  RADIO_TIMER_Context.radioTimer.active = FALSE;
100466ec:	4b18      	ldr	r3, [pc, #96]	@ (10046750 <HAL_RADIO_TIMER_Init+0x200>)
100466ee:	2261      	movs	r2, #97	@ 0x61
100466f0:	2100      	movs	r1, #0
100466f2:	5499      	strb	r1, [r3, r2]
  RADIO_TIMER_Context.radioTimer.pending = FALSE;
100466f4:	4b16      	ldr	r3, [pc, #88]	@ (10046750 <HAL_RADIO_TIMER_Init+0x200>)
100466f6:	2262      	movs	r2, #98	@ 0x62
100466f8:	2100      	movs	r1, #0
100466fa:	5499      	strb	r1, [r3, r2]
  RADIO_TIMER_Context.radioTimer.intTxRx_to_be_served = FALSE;
100466fc:	4b14      	ldr	r3, [pc, #80]	@ (10046750 <HAL_RADIO_TIMER_Init+0x200>)
100466fe:	2263      	movs	r2, #99	@ 0x63
10046700:	2100      	movs	r1, #0
10046702:	5499      	strb	r1, [r3, r2]
  RADIO_TIMER_Context.radioTimer.expiryTime = 0;
10046704:	4912      	ldr	r1, [pc, #72]	@ (10046750 <HAL_RADIO_TIMER_Init+0x200>)
10046706:	2200      	movs	r2, #0
10046708:	2300      	movs	r3, #0
1004670a:	658a      	str	r2, [r1, #88]	@ 0x58
1004670c:	65cb      	str	r3, [r1, #92]	@ 0x5c

  /* Configure the Calibration callback and schedule the next calibration */
  RADIO_TIMER_Context.calibrationTimer.callback = _calibration_callback;
1004670e:	4b10      	ldr	r3, [pc, #64]	@ (10046750 <HAL_RADIO_TIMER_Init+0x200>)
10046710:	4a15      	ldr	r2, [pc, #84]	@ (10046768 <HAL_RADIO_TIMER_Init+0x218>)
10046712:	649a      	str	r2, [r3, #72]	@ 0x48
  RADIO_TIMER_Context.calibrationTimer.userData = NULL;
10046714:	4b0e      	ldr	r3, [pc, #56]	@ (10046750 <HAL_RADIO_TIMER_Init+0x200>)
10046716:	2200      	movs	r2, #0
10046718:	655a      	str	r2, [r3, #84]	@ 0x54
  _start_timer(&RADIO_TIMER_Context.calibrationTimer,
               HAL_RADIO_TIMER_GetCurrentSysTime() + RADIO_TIMER_Context.calibrationSettings.periodicCalibrationInterval);
1004671a:	f000 faf1 	bl	10046d00 <HAL_RADIO_TIMER_GetCurrentSysTime>
1004671e:	0002      	movs	r2, r0
10046720:	000b      	movs	r3, r1
10046722:	490b      	ldr	r1, [pc, #44]	@ (10046750 <HAL_RADIO_TIMER_Init+0x200>)
10046724:	6849      	ldr	r1, [r1, #4]
10046726:	000c      	movs	r4, r1
10046728:	2100      	movs	r1, #0
1004672a:	000d      	movs	r5, r1
  _start_timer(&RADIO_TIMER_Context.calibrationTimer,
1004672c:	1912      	adds	r2, r2, r4
1004672e:	416b      	adcs	r3, r5
10046730:	490e      	ldr	r1, [pc, #56]	@ (1004676c <HAL_RADIO_TIMER_Init+0x21c>)
10046732:	0008      	movs	r0, r1
10046734:	f000 fd66 	bl	10047204 <_start_timer>

  /* Tx & Rx delay configuration */
  _configureTxRxDelay(&RADIO_TIMER_Context, TRUE);
10046738:	4b05      	ldr	r3, [pc, #20]	@ (10046750 <HAL_RADIO_TIMER_Init+0x200>)
1004673a:	2101      	movs	r1, #1
1004673c:	0018      	movs	r0, r3
1004673e:	f000 fc5b 	bl	10046ff8 <_configureTxRxDelay>
}
10046742:	46c0      	nop			@ (mov r8, r8)
10046744:	46bd      	mov	sp, r7
10046746:	b003      	add	sp, #12
10046748:	bdf0      	pop	{r4, r5, r6, r7, pc}
1004674a:	46c0      	nop			@ (mov r8, r8)
1004674c:	60001800 	.word	0x60001800
10046750:	20000598 	.word	0x20000598
10046754:	0028f5c2 	.word	0x0028f5c2
10046758:	00005b8d 	.word	0x00005b8d
1004675c:	0165ebec 	.word	0x0165ebec
10046760:	ffffefff 	.word	0xffffefff
10046764:	00000326 	.word	0x00000326
10046768:	100471dd 	.word	0x100471dd
1004676c:	200005d8 	.word	0x200005d8

10046770 <HAL_RADIO_TIMER_Tick>:
  * Check expired timers and execute user callback.
  * It must be placed inside the infinite loop.
  * @retval None
  */
void HAL_RADIO_TIMER_Tick(void)
{
10046770:	b5b0      	push	{r4, r5, r7, lr}
10046772:	b094      	sub	sp, #80	@ 0x50
10046774:	af00      	add	r7, sp, #0
  uint8_t expired = 0;
10046776:	230b      	movs	r3, #11
10046778:	2208      	movs	r2, #8
1004677a:	189b      	adds	r3, r3, r2
1004677c:	19db      	adds	r3, r3, r7
1004677e:	2200      	movs	r2, #0
10046780:	701a      	strb	r2, [r3, #0]
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
10046782:	f3ef 8310 	mrs	r3, PRIMASK
10046786:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
10046788:	6b3b      	ldr	r3, [r7, #48]	@ 0x30

  ATOMIC_SECTION_BEGIN();
1004678a:	64bb      	str	r3, [r7, #72]	@ 0x48
  __ASM volatile ("cpsid i" : : : "memory");
1004678c:	b672      	cpsid	i
}
1004678e:	46c0      	nop			@ (mov r8, r8)
  if (RADIO_TIMER_Context.radioTimer.active)
10046790:	4bc1      	ldr	r3, [pc, #772]	@ (10046a98 <HAL_RADIO_TIMER_Tick+0x328>)
10046792:	2261      	movs	r2, #97	@ 0x61
10046794:	5c9b      	ldrb	r3, [r3, r2]
10046796:	2b00      	cmp	r3, #0
10046798:	d00f      	beq.n	100467ba <HAL_RADIO_TIMER_Tick+0x4a>
  {
    if (RADIO_TIMER_Context.radioTimer.expiryTime < HAL_RADIO_TIMER_GetCurrentSysTime())
1004679a:	4bbf      	ldr	r3, [pc, #764]	@ (10046a98 <HAL_RADIO_TIMER_Tick+0x328>)
1004679c:	6d9c      	ldr	r4, [r3, #88]	@ 0x58
1004679e:	6ddd      	ldr	r5, [r3, #92]	@ 0x5c
100467a0:	f000 faae 	bl	10046d00 <HAL_RADIO_TIMER_GetCurrentSysTime>
100467a4:	0002      	movs	r2, r0
100467a6:	000b      	movs	r3, r1
100467a8:	42ab      	cmp	r3, r5
100467aa:	d802      	bhi.n	100467b2 <HAL_RADIO_TIMER_Tick+0x42>
100467ac:	d105      	bne.n	100467ba <HAL_RADIO_TIMER_Tick+0x4a>
100467ae:	42a2      	cmp	r2, r4
100467b0:	d903      	bls.n	100467ba <HAL_RADIO_TIMER_Tick+0x4a>
    {
      RADIO_TIMER_Context.radioTimer.active = FALSE;
100467b2:	4bb9      	ldr	r3, [pc, #740]	@ (10046a98 <HAL_RADIO_TIMER_Tick+0x328>)
100467b4:	2261      	movs	r2, #97	@ 0x61
100467b6:	2100      	movs	r1, #0
100467b8:	5499      	strb	r1, [r3, r2]
100467ba:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
100467bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
100467be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
100467c0:	f383 8810 	msr	PRIMASK, r3
}
100467c4:	46c0      	nop			@ (mov r8, r8)
    }
  }
  ATOMIC_SECTION_END();

  /* Check for expired timers */
  while (DIFF8(RADIO_TIMER_Context.expired_count, RADIO_TIMER_Context.served_count))
100467c6:	e072      	b.n	100468ae <HAL_RADIO_TIMER_Tick+0x13e>
  {
    VTIMER_HandleType *expiredList, *curr;
    uint8_t to_be_served = DIFF8(RADIO_TIMER_Context.expired_count, RADIO_TIMER_Context.served_count);
100467c8:	4bb3      	ldr	r3, [pc, #716]	@ (10046a98 <HAL_RADIO_TIMER_Tick+0x328>)
100467ca:	2291      	movs	r2, #145	@ 0x91
100467cc:	5c99      	ldrb	r1, [r3, r2]
100467ce:	4bb2      	ldr	r3, [pc, #712]	@ (10046a98 <HAL_RADIO_TIMER_Tick+0x328>)
100467d0:	2292      	movs	r2, #146	@ 0x92
100467d2:	5c9a      	ldrb	r2, [r3, r2]
100467d4:	2337      	movs	r3, #55	@ 0x37
100467d6:	2008      	movs	r0, #8
100467d8:	181b      	adds	r3, r3, r0
100467da:	19db      	adds	r3, r3, r7
100467dc:	1a8a      	subs	r2, r1, r2
100467de:	701a      	strb	r2, [r3, #0]

    RADIO_TIMER_Context.rootNode = _check_callbacks(RADIO_TIMER_Context.rootNode, &expiredList);
100467e0:	4bad      	ldr	r3, [pc, #692]	@ (10046a98 <HAL_RADIO_TIMER_Tick+0x328>)
100467e2:	228c      	movs	r2, #140	@ 0x8c
100467e4:	589b      	ldr	r3, [r3, r2]
100467e6:	220c      	movs	r2, #12
100467e8:	18ba      	adds	r2, r7, r2
100467ea:	0011      	movs	r1, r2
100467ec:	0018      	movs	r0, r3
100467ee:	f000 ff0d 	bl	1004760c <_check_callbacks>
100467f2:	0002      	movs	r2, r0
100467f4:	4ba8      	ldr	r3, [pc, #672]	@ (10046a98 <HAL_RADIO_TIMER_Tick+0x328>)
100467f6:	218c      	movs	r1, #140	@ 0x8c
100467f8:	505a      	str	r2, [r3, r1]

    /* Call all the user callbacks */
    curr = expiredList;
100467fa:	68fb      	ldr	r3, [r7, #12]
100467fc:	64fb      	str	r3, [r7, #76]	@ 0x4c
    while (curr != NULL)
100467fe:	e010      	b.n	10046822 <HAL_RADIO_TIMER_Tick+0xb2>
    {
      /* Save next pointer, in case callback start the timer again */
      VTIMER_HandleType *next = curr->next;
10046800:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
10046802:	691b      	ldr	r3, [r3, #16]
10046804:	637b      	str	r3, [r7, #52]	@ 0x34
      curr->active = FALSE;
10046806:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
10046808:	2200      	movs	r2, #0
1004680a:	731a      	strb	r2, [r3, #12]
      if (curr->callback)
1004680c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
1004680e:	689b      	ldr	r3, [r3, #8]
10046810:	2b00      	cmp	r3, #0
10046812:	d004      	beq.n	1004681e <HAL_RADIO_TIMER_Tick+0xae>
      {
        curr->callback(curr); /* we are sure a callback is set?*/
10046814:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
10046816:	689b      	ldr	r3, [r3, #8]
10046818:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
1004681a:	0010      	movs	r0, r2
1004681c:	4798      	blx	r3
      }
      curr = next;
1004681e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
10046820:	64fb      	str	r3, [r7, #76]	@ 0x4c
    while (curr != NULL)
10046822:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
10046824:	2b00      	cmp	r3, #0
10046826:	d1eb      	bne.n	10046800 <HAL_RADIO_TIMER_Tick+0x90>
    }

    RADIO_TIMER_Context.rootNode = _update_user_timeout(RADIO_TIMER_Context.rootNode, &expired);
10046828:	4b9b      	ldr	r3, [pc, #620]	@ (10046a98 <HAL_RADIO_TIMER_Tick+0x328>)
1004682a:	228c      	movs	r2, #140	@ 0x8c
1004682c:	589b      	ldr	r3, [r3, r2]
1004682e:	240b      	movs	r4, #11
10046830:	2508      	movs	r5, #8
10046832:	1962      	adds	r2, r4, r5
10046834:	19d2      	adds	r2, r2, r7
10046836:	0011      	movs	r1, r2
10046838:	0018      	movs	r0, r3
1004683a:	f000 fda9 	bl	10047390 <_update_user_timeout>
1004683e:	0002      	movs	r2, r0
10046840:	4b95      	ldr	r3, [pc, #596]	@ (10046a98 <HAL_RADIO_TIMER_Tick+0x328>)
10046842:	218c      	movs	r1, #140	@ 0x8c
10046844:	505a      	str	r2, [r3, r1]
    if (expired == 1)
10046846:	1963      	adds	r3, r4, r5
10046848:	19db      	adds	r3, r3, r7
1004684a:	781b      	ldrb	r3, [r3, #0]
1004684c:	2b01      	cmp	r3, #1
1004684e:	d121      	bne.n	10046894 <HAL_RADIO_TIMER_Tick+0x124>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
10046850:	f3ef 8310 	mrs	r3, PRIMASK
10046854:	62bb      	str	r3, [r7, #40]	@ 0x28
  return(result);
10046856:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    {
      /* A new root timer is already expired, mimic timer expire */
      INCREMENT_EXPIRE_COUNT;
10046858:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("cpsid i" : : : "memory");
1004685a:	b672      	cpsid	i
}
1004685c:	46c0      	nop			@ (mov r8, r8)
1004685e:	4b8e      	ldr	r3, [pc, #568]	@ (10046a98 <HAL_RADIO_TIMER_Tick+0x328>)
10046860:	2291      	movs	r2, #145	@ 0x91
10046862:	5c9b      	ldrb	r3, [r3, r2]
10046864:	3301      	adds	r3, #1
10046866:	4a8c      	ldr	r2, [pc, #560]	@ (10046a98 <HAL_RADIO_TIMER_Tick+0x328>)
10046868:	2192      	movs	r1, #146	@ 0x92
1004686a:	5c52      	ldrb	r2, [r2, r1]
1004686c:	4293      	cmp	r3, r2
1004686e:	d103      	bne.n	10046878 <HAL_RADIO_TIMER_Tick+0x108>
10046870:	4b89      	ldr	r3, [pc, #548]	@ (10046a98 <HAL_RADIO_TIMER_Tick+0x328>)
10046872:	2291      	movs	r2, #145	@ 0x91
10046874:	5c9b      	ldrb	r3, [r3, r2]
10046876:	e004      	b.n	10046882 <HAL_RADIO_TIMER_Tick+0x112>
10046878:	4b87      	ldr	r3, [pc, #540]	@ (10046a98 <HAL_RADIO_TIMER_Tick+0x328>)
1004687a:	2291      	movs	r2, #145	@ 0x91
1004687c:	5c9b      	ldrb	r3, [r3, r2]
1004687e:	3301      	adds	r3, #1
10046880:	b2db      	uxtb	r3, r3
10046882:	4a85      	ldr	r2, [pc, #532]	@ (10046a98 <HAL_RADIO_TIMER_Tick+0x328>)
10046884:	2191      	movs	r1, #145	@ 0x91
10046886:	5453      	strb	r3, [r2, r1]
10046888:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
1004688a:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
1004688c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
1004688e:	f383 8810 	msr	PRIMASK, r3
}
10046892:	46c0      	nop			@ (mov r8, r8)
    }
    RADIO_TIMER_Context.served_count += to_be_served;
10046894:	4b80      	ldr	r3, [pc, #512]	@ (10046a98 <HAL_RADIO_TIMER_Tick+0x328>)
10046896:	2292      	movs	r2, #146	@ 0x92
10046898:	5c9a      	ldrb	r2, [r3, r2]
1004689a:	2337      	movs	r3, #55	@ 0x37
1004689c:	2108      	movs	r1, #8
1004689e:	185b      	adds	r3, r3, r1
100468a0:	19db      	adds	r3, r3, r7
100468a2:	781b      	ldrb	r3, [r3, #0]
100468a4:	18d3      	adds	r3, r2, r3
100468a6:	b2d9      	uxtb	r1, r3
100468a8:	4b7b      	ldr	r3, [pc, #492]	@ (10046a98 <HAL_RADIO_TIMER_Tick+0x328>)
100468aa:	2292      	movs	r2, #146	@ 0x92
100468ac:	5499      	strb	r1, [r3, r2]
  while (DIFF8(RADIO_TIMER_Context.expired_count, RADIO_TIMER_Context.served_count))
100468ae:	4b7a      	ldr	r3, [pc, #488]	@ (10046a98 <HAL_RADIO_TIMER_Tick+0x328>)
100468b0:	2291      	movs	r2, #145	@ 0x91
100468b2:	5c9a      	ldrb	r2, [r3, r2]
100468b4:	4b78      	ldr	r3, [pc, #480]	@ (10046a98 <HAL_RADIO_TIMER_Tick+0x328>)
100468b6:	2192      	movs	r1, #146	@ 0x92
100468b8:	5c5b      	ldrb	r3, [r3, r1]
100468ba:	429a      	cmp	r2, r3
100468bc:	d30a      	bcc.n	100468d4 <HAL_RADIO_TIMER_Tick+0x164>
100468be:	4b76      	ldr	r3, [pc, #472]	@ (10046a98 <HAL_RADIO_TIMER_Tick+0x328>)
100468c0:	2291      	movs	r2, #145	@ 0x91
100468c2:	5c9a      	ldrb	r2, [r3, r2]
100468c4:	4b74      	ldr	r3, [pc, #464]	@ (10046a98 <HAL_RADIO_TIMER_Tick+0x328>)
100468c6:	2192      	movs	r1, #146	@ 0x92
100468c8:	5c5b      	ldrb	r3, [r3, r1]
100468ca:	1ad3      	subs	r3, r2, r3
100468cc:	1e5a      	subs	r2, r3, #1
100468ce:	4193      	sbcs	r3, r2
100468d0:	b2db      	uxtb	r3, r3
100468d2:	e00c      	b.n	100468ee <HAL_RADIO_TIMER_Tick+0x17e>
100468d4:	4b70      	ldr	r3, [pc, #448]	@ (10046a98 <HAL_RADIO_TIMER_Tick+0x328>)
100468d6:	2291      	movs	r2, #145	@ 0x91
100468d8:	5c9b      	ldrb	r3, [r3, r2]
100468da:	0019      	movs	r1, r3
100468dc:	4b6e      	ldr	r3, [pc, #440]	@ (10046a98 <HAL_RADIO_TIMER_Tick+0x328>)
100468de:	2292      	movs	r2, #146	@ 0x92
100468e0:	5c9b      	ldrb	r3, [r3, r2]
100468e2:	1acb      	subs	r3, r1, r3
100468e4:	3301      	adds	r3, #1
100468e6:	33ff      	adds	r3, #255	@ 0xff
100468e8:	1e5a      	subs	r2, r3, #1
100468ea:	4193      	sbcs	r3, r2
100468ec:	b2db      	uxtb	r3, r3
100468ee:	2b00      	cmp	r3, #0
100468f0:	d000      	beq.n	100468f4 <HAL_RADIO_TIMER_Tick+0x184>
100468f2:	e769      	b.n	100467c8 <HAL_RADIO_TIMER_Tick+0x58>
  }

  /* Check for periodic calibration */
  if (RADIO_TIMER_Context.calibrationSettings.calibration_in_progress)
100468f4:	4b68      	ldr	r3, [pc, #416]	@ (10046a98 <HAL_RADIO_TIMER_Tick+0x328>)
100468f6:	7a1b      	ldrb	r3, [r3, #8]
100468f8:	2b00      	cmp	r3, #0
100468fa:	d100      	bne.n	100468fe <HAL_RADIO_TIMER_Tick+0x18e>
100468fc:	e0b0      	b.n	10046a60 <HAL_RADIO_TIMER_Tick+0x2f0>
  {
    if (LL_RADIO_TIMER_IsActiveFlag_LSICalibrationEnded(RADIO_CTRL))
100468fe:	4b67      	ldr	r3, [pc, #412]	@ (10046a9c <HAL_RADIO_TIMER_Tick+0x32c>)
10046900:	0018      	movs	r0, r3
10046902:	f7ff fe14 	bl	1004652e <LL_RADIO_TIMER_IsActiveFlag_LSICalibrationEnded>
10046906:	1e03      	subs	r3, r0, #0
10046908:	d100      	bne.n	1004690c <HAL_RADIO_TIMER_Tick+0x19c>
1004690a:	e0c1      	b.n	10046a90 <HAL_RADIO_TIMER_Tick+0x320>
    {
      /* Calibration is completed */
      RADIO_TIMER_Context.calibrationSettings.calibration_in_progress = FALSE;
1004690c:	4b62      	ldr	r3, [pc, #392]	@ (10046a98 <HAL_RADIO_TIMER_Tick+0x328>)
1004690e:	2200      	movs	r2, #0
10046910:	721a      	strb	r2, [r3, #8]
      if ((RADIO_TIMER_Context.wakeup_calibration == FALSE) && RADIO_TIMER_Context.stop_notimer_action)
10046912:	4b61      	ldr	r3, [pc, #388]	@ (10046a98 <HAL_RADIO_TIMER_Tick+0x328>)
10046914:	2294      	movs	r2, #148	@ 0x94
10046916:	5c9b      	ldrb	r3, [r3, r2]
10046918:	2b00      	cmp	r3, #0
1004691a:	d109      	bne.n	10046930 <HAL_RADIO_TIMER_Tick+0x1c0>
1004691c:	4b5e      	ldr	r3, [pc, #376]	@ (10046a98 <HAL_RADIO_TIMER_Tick+0x328>)
1004691e:	2293      	movs	r2, #147	@ 0x93
10046920:	5c9b      	ldrb	r3, [r3, r2]
10046922:	2b00      	cmp	r3, #0
10046924:	d004      	beq.n	10046930 <HAL_RADIO_TIMER_Tick+0x1c0>
      {
        RADIO_TIMER_Context.stop_notimer_action = FALSE;
10046926:	4b5c      	ldr	r3, [pc, #368]	@ (10046a98 <HAL_RADIO_TIMER_Tick+0x328>)
10046928:	2293      	movs	r2, #147	@ 0x93
1004692a:	2100      	movs	r1, #0
1004692c:	5499      	strb	r1, [r3, r2]
1004692e:	e037      	b.n	100469a0 <HAL_RADIO_TIMER_Tick+0x230>
      }
      else
      {
        /* Collect calibration data */
        _updateCalibrationData();
10046930:	f000 feb6 	bl	100476a0 <_updateCalibrationData>
        RADIO_TIMER_Context.rootNode = _update_user_timeout(RADIO_TIMER_Context.rootNode, &expired);
10046934:	4b58      	ldr	r3, [pc, #352]	@ (10046a98 <HAL_RADIO_TIMER_Tick+0x328>)
10046936:	228c      	movs	r2, #140	@ 0x8c
10046938:	589b      	ldr	r3, [r3, r2]
1004693a:	240b      	movs	r4, #11
1004693c:	2508      	movs	r5, #8
1004693e:	1962      	adds	r2, r4, r5
10046940:	19d2      	adds	r2, r2, r7
10046942:	0011      	movs	r1, r2
10046944:	0018      	movs	r0, r3
10046946:	f000 fd23 	bl	10047390 <_update_user_timeout>
1004694a:	0002      	movs	r2, r0
1004694c:	4b52      	ldr	r3, [pc, #328]	@ (10046a98 <HAL_RADIO_TIMER_Tick+0x328>)
1004694e:	218c      	movs	r1, #140	@ 0x8c
10046950:	505a      	str	r2, [r3, r1]
        if (expired == 1)
10046952:	1963      	adds	r3, r4, r5
10046954:	19db      	adds	r3, r3, r7
10046956:	781b      	ldrb	r3, [r3, #0]
10046958:	2b01      	cmp	r3, #1
1004695a:	d121      	bne.n	100469a0 <HAL_RADIO_TIMER_Tick+0x230>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
1004695c:	f3ef 8310 	mrs	r3, PRIMASK
10046960:	623b      	str	r3, [r7, #32]
  return(result);
10046962:	6a3b      	ldr	r3, [r7, #32]
        {
          /* A new root timer is already expired, mimic timer expire */
          INCREMENT_EXPIRE_COUNT;
10046964:	647b      	str	r3, [r7, #68]	@ 0x44
  __ASM volatile ("cpsid i" : : : "memory");
10046966:	b672      	cpsid	i
}
10046968:	46c0      	nop			@ (mov r8, r8)
1004696a:	4b4b      	ldr	r3, [pc, #300]	@ (10046a98 <HAL_RADIO_TIMER_Tick+0x328>)
1004696c:	2291      	movs	r2, #145	@ 0x91
1004696e:	5c9b      	ldrb	r3, [r3, r2]
10046970:	3301      	adds	r3, #1
10046972:	4a49      	ldr	r2, [pc, #292]	@ (10046a98 <HAL_RADIO_TIMER_Tick+0x328>)
10046974:	2192      	movs	r1, #146	@ 0x92
10046976:	5c52      	ldrb	r2, [r2, r1]
10046978:	4293      	cmp	r3, r2
1004697a:	d103      	bne.n	10046984 <HAL_RADIO_TIMER_Tick+0x214>
1004697c:	4b46      	ldr	r3, [pc, #280]	@ (10046a98 <HAL_RADIO_TIMER_Tick+0x328>)
1004697e:	2291      	movs	r2, #145	@ 0x91
10046980:	5c9b      	ldrb	r3, [r3, r2]
10046982:	e004      	b.n	1004698e <HAL_RADIO_TIMER_Tick+0x21e>
10046984:	4b44      	ldr	r3, [pc, #272]	@ (10046a98 <HAL_RADIO_TIMER_Tick+0x328>)
10046986:	2291      	movs	r2, #145	@ 0x91
10046988:	5c9b      	ldrb	r3, [r3, r2]
1004698a:	3301      	adds	r3, #1
1004698c:	b2db      	uxtb	r3, r3
1004698e:	4a42      	ldr	r2, [pc, #264]	@ (10046a98 <HAL_RADIO_TIMER_Tick+0x328>)
10046990:	2191      	movs	r1, #145	@ 0x91
10046992:	5453      	strb	r3, [r2, r1]
10046994:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
10046996:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
10046998:	69fb      	ldr	r3, [r7, #28]
1004699a:	f383 8810 	msr	PRIMASK, r3
}
1004699e:	46c0      	nop			@ (mov r8, r8)
        }
      }

#if defined (STM32WB06) || defined (STM32WB07)
      if (RADIO_TIMER_Context.waitCal)
100469a0:	4b3d      	ldr	r3, [pc, #244]	@ (10046a98 <HAL_RADIO_TIMER_Tick+0x328>)
100469a2:	229c      	movs	r2, #156	@ 0x9c
100469a4:	5c9b      	ldrb	r3, [r3, r2]
100469a6:	2b00      	cmp	r3, #0
100469a8:	d044      	beq.n	10046a34 <HAL_RADIO_TIMER_Tick+0x2c4>
      {
        RADIO_TIMER_Context.waitCal = 0;
100469aa:	4b3b      	ldr	r3, [pc, #236]	@ (10046a98 <HAL_RADIO_TIMER_Tick+0x328>)
100469ac:	229c      	movs	r2, #156	@ 0x9c
100469ae:	2100      	movs	r1, #0
100469b0:	5499      	strb	r1, [r3, r2]
        RADIO_TIMER_Context.radioTimer.pending = TRUE;
100469b2:	4b39      	ldr	r3, [pc, #228]	@ (10046a98 <HAL_RADIO_TIMER_Tick+0x328>)
100469b4:	2262      	movs	r2, #98	@ 0x62
100469b6:	2101      	movs	r1, #1
100469b8:	5499      	strb	r1, [r3, r2]
        _check_radio_activity(&RADIO_TIMER_Context.radioTimer, &expired);
100469ba:	240b      	movs	r4, #11
100469bc:	2508      	movs	r5, #8
100469be:	1963      	adds	r3, r4, r5
100469c0:	19da      	adds	r2, r3, r7
100469c2:	4b37      	ldr	r3, [pc, #220]	@ (10046aa0 <HAL_RADIO_TIMER_Tick+0x330>)
100469c4:	0011      	movs	r1, r2
100469c6:	0018      	movs	r0, r3
100469c8:	f000 fefe 	bl	100477c8 <_check_radio_activity>
        RADIO_TIMER_Context.rootNode = _update_user_timeout(RADIO_TIMER_Context.rootNode, &expired);
100469cc:	4b32      	ldr	r3, [pc, #200]	@ (10046a98 <HAL_RADIO_TIMER_Tick+0x328>)
100469ce:	228c      	movs	r2, #140	@ 0x8c
100469d0:	589b      	ldr	r3, [r3, r2]
100469d2:	1962      	adds	r2, r4, r5
100469d4:	19d2      	adds	r2, r2, r7
100469d6:	0011      	movs	r1, r2
100469d8:	0018      	movs	r0, r3
100469da:	f000 fcd9 	bl	10047390 <_update_user_timeout>
100469de:	0002      	movs	r2, r0
100469e0:	4b2d      	ldr	r3, [pc, #180]	@ (10046a98 <HAL_RADIO_TIMER_Tick+0x328>)
100469e2:	218c      	movs	r1, #140	@ 0x8c
100469e4:	505a      	str	r2, [r3, r1]
        if (expired == 1)
100469e6:	1963      	adds	r3, r4, r5
100469e8:	19db      	adds	r3, r3, r7
100469ea:	781b      	ldrb	r3, [r3, #0]
100469ec:	2b01      	cmp	r3, #1
100469ee:	d121      	bne.n	10046a34 <HAL_RADIO_TIMER_Tick+0x2c4>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
100469f0:	f3ef 8310 	mrs	r3, PRIMASK
100469f4:	61bb      	str	r3, [r7, #24]
  return(result);
100469f6:	69bb      	ldr	r3, [r7, #24]
        {
          /* A new root timer is already expired, mimic timer expire */
          INCREMENT_EXPIRE_COUNT;
100469f8:	643b      	str	r3, [r7, #64]	@ 0x40
  __ASM volatile ("cpsid i" : : : "memory");
100469fa:	b672      	cpsid	i
}
100469fc:	46c0      	nop			@ (mov r8, r8)
100469fe:	4b26      	ldr	r3, [pc, #152]	@ (10046a98 <HAL_RADIO_TIMER_Tick+0x328>)
10046a00:	2291      	movs	r2, #145	@ 0x91
10046a02:	5c9b      	ldrb	r3, [r3, r2]
10046a04:	3301      	adds	r3, #1
10046a06:	4a24      	ldr	r2, [pc, #144]	@ (10046a98 <HAL_RADIO_TIMER_Tick+0x328>)
10046a08:	2192      	movs	r1, #146	@ 0x92
10046a0a:	5c52      	ldrb	r2, [r2, r1]
10046a0c:	4293      	cmp	r3, r2
10046a0e:	d103      	bne.n	10046a18 <HAL_RADIO_TIMER_Tick+0x2a8>
10046a10:	4b21      	ldr	r3, [pc, #132]	@ (10046a98 <HAL_RADIO_TIMER_Tick+0x328>)
10046a12:	2291      	movs	r2, #145	@ 0x91
10046a14:	5c9b      	ldrb	r3, [r3, r2]
10046a16:	e004      	b.n	10046a22 <HAL_RADIO_TIMER_Tick+0x2b2>
10046a18:	4b1f      	ldr	r3, [pc, #124]	@ (10046a98 <HAL_RADIO_TIMER_Tick+0x328>)
10046a1a:	2291      	movs	r2, #145	@ 0x91
10046a1c:	5c9b      	ldrb	r3, [r3, r2]
10046a1e:	3301      	adds	r3, #1
10046a20:	b2db      	uxtb	r3, r3
10046a22:	4a1d      	ldr	r2, [pc, #116]	@ (10046a98 <HAL_RADIO_TIMER_Tick+0x328>)
10046a24:	2191      	movs	r1, #145	@ 0x91
10046a26:	5453      	strb	r3, [r2, r1]
10046a28:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
10046a2a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
10046a2c:	697b      	ldr	r3, [r7, #20]
10046a2e:	f383 8810 	msr	PRIMASK, r3
}
10046a32:	46c0      	nop			@ (mov r8, r8)
      }
#else
      _check_radio_activity(&RADIO_TIMER_Context.radioTimer, &expired);
#endif

      HAL_RADIO_TIMER_StopVirtualTimer(&RADIO_TIMER_Context.calibrationTimer);
10046a34:	4b1b      	ldr	r3, [pc, #108]	@ (10046aa4 <HAL_RADIO_TIMER_Tick+0x334>)
10046a36:	0018      	movs	r0, r3
10046a38:	f000 f974 	bl	10046d24 <HAL_RADIO_TIMER_StopVirtualTimer>
      /* Schedule next calibration event */
      _start_timer(&RADIO_TIMER_Context.calibrationTimer,
                   HAL_RADIO_TIMER_GetCurrentSysTime() + RADIO_TIMER_Context.calibrationSettings.periodicCalibrationInterval);
10046a3c:	f000 f960 	bl	10046d00 <HAL_RADIO_TIMER_GetCurrentSysTime>
10046a40:	0002      	movs	r2, r0
10046a42:	000b      	movs	r3, r1
10046a44:	4914      	ldr	r1, [pc, #80]	@ (10046a98 <HAL_RADIO_TIMER_Tick+0x328>)
10046a46:	6849      	ldr	r1, [r1, #4]
10046a48:	6039      	str	r1, [r7, #0]
10046a4a:	2100      	movs	r1, #0
10046a4c:	6079      	str	r1, [r7, #4]
      _start_timer(&RADIO_TIMER_Context.calibrationTimer,
10046a4e:	6838      	ldr	r0, [r7, #0]
10046a50:	6879      	ldr	r1, [r7, #4]
10046a52:	1812      	adds	r2, r2, r0
10046a54:	414b      	adcs	r3, r1
10046a56:	4913      	ldr	r1, [pc, #76]	@ (10046aa4 <HAL_RADIO_TIMER_Tick+0x334>)
10046a58:	0008      	movs	r0, r1
10046a5a:	f000 fbd3 	bl	10047204 <_start_timer>
      {
        _calibration_callback(&RADIO_TIMER_Context.calibrationTimer);
      }
    }
  }
}
10046a5e:	e017      	b.n	10046a90 <HAL_RADIO_TIMER_Tick+0x320>
    if (RADIO_TIMER_Context.calibrationSettings.periodicCalibration)
10046a60:	4b0d      	ldr	r3, [pc, #52]	@ (10046a98 <HAL_RADIO_TIMER_Tick+0x328>)
10046a62:	781b      	ldrb	r3, [r3, #0]
10046a64:	2b00      	cmp	r3, #0
10046a66:	d013      	beq.n	10046a90 <HAL_RADIO_TIMER_Tick+0x320>
      if (HAL_RADIO_TIMER_GetCurrentSysTime() > (RADIO_TIMER_Context.calibrationData.last_calibration_time +
10046a68:	f000 f94a 	bl	10046d00 <HAL_RADIO_TIMER_GetCurrentSysTime>
10046a6c:	4b0a      	ldr	r3, [pc, #40]	@ (10046a98 <HAL_RADIO_TIMER_Tick+0x328>)
10046a6e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
10046a70:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
10046a72:	24fa      	movs	r4, #250	@ 0xfa
10046a74:	0364      	lsls	r4, r4, #13
10046a76:	2500      	movs	r5, #0
10046a78:	1912      	adds	r2, r2, r4
10046a7a:	416b      	adcs	r3, r5
10046a7c:	4299      	cmp	r1, r3
10046a7e:	d803      	bhi.n	10046a88 <HAL_RADIO_TIMER_Tick+0x318>
10046a80:	d106      	bne.n	10046a90 <HAL_RADIO_TIMER_Tick+0x320>
10046a82:	4290      	cmp	r0, r2
10046a84:	d800      	bhi.n	10046a88 <HAL_RADIO_TIMER_Tick+0x318>
}
10046a86:	e003      	b.n	10046a90 <HAL_RADIO_TIMER_Tick+0x320>
        _calibration_callback(&RADIO_TIMER_Context.calibrationTimer);
10046a88:	4b06      	ldr	r3, [pc, #24]	@ (10046aa4 <HAL_RADIO_TIMER_Tick+0x334>)
10046a8a:	0018      	movs	r0, r3
10046a8c:	f000 fba6 	bl	100471dc <_calibration_callback>
}
10046a90:	46c0      	nop			@ (mov r8, r8)
10046a92:	46bd      	mov	sp, r7
10046a94:	b014      	add	sp, #80	@ 0x50
10046a96:	bdb0      	pop	{r4, r5, r7, pc}
10046a98:	20000598 	.word	0x20000598
10046a9c:	60001000 	.word	0x60001000
10046aa0:	200005f0 	.word	0x200005f0
10046aa4:	200005d8 	.word	0x200005d8

10046aa8 <HAL_RADIO_TIMER_GetAnchorPoint>:
  * @brief Get the last anchorPoint in system time unit.
  * @param current_system_time: Current System Time
  * @return TimerCapture register in system time unit.
  */
uint64_t HAL_RADIO_TIMER_GetAnchorPoint(uint64_t *current_system_time)
{
10046aa8:	b580      	push	{r7, lr}
10046aaa:	b082      	sub	sp, #8
10046aac:	af00      	add	r7, sp, #0
10046aae:	6078      	str	r0, [r7, #4]
  return TIMER_GetPastSysTime(BLUE->TIMERCAPTUREREG, current_system_time);
10046ab0:	23c0      	movs	r3, #192	@ 0xc0
10046ab2:	05db      	lsls	r3, r3, #23
10046ab4:	695b      	ldr	r3, [r3, #20]
10046ab6:	687a      	ldr	r2, [r7, #4]
10046ab8:	0011      	movs	r1, r2
10046aba:	0018      	movs	r0, r3
10046abc:	f001 f8b8 	bl	10047c30 <TIMER_GetPastSysTime>
10046ac0:	0002      	movs	r2, r0
10046ac2:	000b      	movs	r3, r1
}
10046ac4:	0010      	movs	r0, r2
10046ac6:	0019      	movs	r1, r3
10046ac8:	46bd      	mov	sp, r7
10046aca:	b002      	add	sp, #8
10046acc:	bd80      	pop	{r7, pc}
	...

10046ad0 <HAL_RADIO_TIMER_SetRadioTimerValue>:
  * @param  cal_req: Specify if PLL calibration is requested (1) or not (0).
  * @retval 0 if radio activity has been scheduled successfully.
  * @retval 1 if radio activity has been rejected (it is too close or in the past).
  */
uint32_t HAL_RADIO_TIMER_SetRadioTimerValue(uint32_t time, uint8_t event_type, uint8_t cal_req)
{
10046ad0:	b5f0      	push	{r4, r5, r6, r7, lr}
10046ad2:	b089      	sub	sp, #36	@ 0x24
10046ad4:	af00      	add	r7, sp, #0
10046ad6:	60f8      	str	r0, [r7, #12]
10046ad8:	0008      	movs	r0, r1
10046ada:	0011      	movs	r1, r2
10046adc:	230b      	movs	r3, #11
10046ade:	18fb      	adds	r3, r7, r3
10046ae0:	1c02      	adds	r2, r0, #0
10046ae2:	701a      	strb	r2, [r3, #0]
10046ae4:	230a      	movs	r3, #10
10046ae6:	18fb      	adds	r3, r7, r3
10046ae8:	1c0a      	adds	r2, r1, #0
10046aea:	701a      	strb	r2, [r3, #0]
  uint8_t retVal = 0;
10046aec:	260f      	movs	r6, #15
10046aee:	2308      	movs	r3, #8
10046af0:	18f3      	adds	r3, r6, r3
10046af2:	19db      	adds	r3, r3, r7
10046af4:	2200      	movs	r2, #0
10046af6:	701a      	strb	r2, [r3, #0]
#if defined (STM32WB06) || defined (STM32WB07)
  uint64_t current_time;
#endif

  RADIO_TIMER_Context.radioTimer.event_type = event_type;
10046af8:	230b      	movs	r3, #11
10046afa:	18fb      	adds	r3, r7, r3
10046afc:	781b      	ldrb	r3, [r3, #0]
10046afe:	1e5a      	subs	r2, r3, #1
10046b00:	4193      	sbcs	r3, r2
10046b02:	b2d9      	uxtb	r1, r3
10046b04:	4b53      	ldr	r3, [pc, #332]	@ (10046c54 <HAL_RADIO_TIMER_SetRadioTimerValue+0x184>)
10046b06:	2264      	movs	r2, #100	@ 0x64
10046b08:	5499      	strb	r1, [r3, r2]
  RADIO_TIMER_Context.radioTimer.cal_req = cal_req;
10046b0a:	230a      	movs	r3, #10
10046b0c:	18fb      	adds	r3, r7, r3
10046b0e:	781b      	ldrb	r3, [r3, #0]
10046b10:	1e5a      	subs	r2, r3, #1
10046b12:	4193      	sbcs	r3, r2
10046b14:	b2d9      	uxtb	r1, r3
10046b16:	4b4f      	ldr	r3, [pc, #316]	@ (10046c54 <HAL_RADIO_TIMER_SetRadioTimerValue+0x184>)
10046b18:	2260      	movs	r2, #96	@ 0x60
10046b1a:	5499      	strb	r1, [r3, r2]
  RADIO_TIMER_Context.radioTimer.expiryTime = RADIO_TIMER_Context.calibrationData.last_calibration_time + (uint32_t)(time - (uint32_t)RADIO_TIMER_Context.calibrationData.last_calibration_time);
10046b1c:	4b4d      	ldr	r3, [pc, #308]	@ (10046c54 <HAL_RADIO_TIMER_SetRadioTimerValue+0x184>)
10046b1e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
10046b20:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
10046b22:	494c      	ldr	r1, [pc, #304]	@ (10046c54 <HAL_RADIO_TIMER_SetRadioTimerValue+0x184>)
10046b24:	6a88      	ldr	r0, [r1, #40]	@ 0x28
10046b26:	6ac9      	ldr	r1, [r1, #44]	@ 0x2c
10046b28:	68f9      	ldr	r1, [r7, #12]
10046b2a:	1a09      	subs	r1, r1, r0
10046b2c:	6039      	str	r1, [r7, #0]
10046b2e:	2100      	movs	r1, #0
10046b30:	6079      	str	r1, [r7, #4]
10046b32:	6838      	ldr	r0, [r7, #0]
10046b34:	6879      	ldr	r1, [r7, #4]
10046b36:	1812      	adds	r2, r2, r0
10046b38:	414b      	adcs	r3, r1
10046b3a:	4946      	ldr	r1, [pc, #280]	@ (10046c54 <HAL_RADIO_TIMER_SetRadioTimerValue+0x184>)
10046b3c:	658a      	str	r2, [r1, #88]	@ 0x58
10046b3e:	65cb      	str	r3, [r1, #92]	@ 0x5c
  RADIO_TIMER_Context.radioTimer.active = FALSE;
10046b40:	4b44      	ldr	r3, [pc, #272]	@ (10046c54 <HAL_RADIO_TIMER_SetRadioTimerValue+0x184>)
10046b42:	2261      	movs	r2, #97	@ 0x61
10046b44:	2100      	movs	r1, #0
10046b46:	5499      	strb	r1, [r3, r2]
  RADIO_TIMER_Context.radioTimer.intTxRx_to_be_served = FALSE;
10046b48:	4b42      	ldr	r3, [pc, #264]	@ (10046c54 <HAL_RADIO_TIMER_SetRadioTimerValue+0x184>)
10046b4a:	2263      	movs	r2, #99	@ 0x63
10046b4c:	2100      	movs	r1, #0
10046b4e:	5499      	strb	r1, [r3, r2]
  RADIO_TIMER_Context.radioTimer.pending = TRUE;
10046b50:	4b40      	ldr	r3, [pc, #256]	@ (10046c54 <HAL_RADIO_TIMER_SetRadioTimerValue+0x184>)
10046b52:	2262      	movs	r2, #98	@ 0x62
10046b54:	2101      	movs	r1, #1
10046b56:	5499      	strb	r1, [r3, r2]

#if defined (STM32WB06) || defined (STM32WB07)
  current_time = HAL_RADIO_TIMER_GetCurrentSysTime();
10046b58:	f000 f8d2 	bl	10046d00 <HAL_RADIO_TIMER_GetCurrentSysTime>
10046b5c:	0002      	movs	r2, r0
10046b5e:	000b      	movs	r3, r1
10046b60:	61ba      	str	r2, [r7, #24]
10046b62:	61fb      	str	r3, [r7, #28]

  if (RADIO_TIMER_Context.rootNode == NULL)
10046b64:	4b3b      	ldr	r3, [pc, #236]	@ (10046c54 <HAL_RADIO_TIMER_SetRadioTimerValue+0x184>)
10046b66:	228c      	movs	r2, #140	@ 0x8c
10046b68:	589b      	ldr	r3, [r3, r2]
10046b6a:	2b00      	cmp	r3, #0
10046b6c:	d108      	bne.n	10046b80 <HAL_RADIO_TIMER_SetRadioTimerValue+0xb0>
  {
    _check_radio_activity(&RADIO_TIMER_Context.radioTimer, &retVal);
10046b6e:	2308      	movs	r3, #8
10046b70:	18f3      	adds	r3, r6, r3
10046b72:	19da      	adds	r2, r3, r7
10046b74:	4b38      	ldr	r3, [pc, #224]	@ (10046c58 <HAL_RADIO_TIMER_SetRadioTimerValue+0x188>)
10046b76:	0011      	movs	r1, r2
10046b78:	0018      	movs	r0, r3
10046b7a:	f000 fe25 	bl	100477c8 <_check_radio_activity>
10046b7e:	e05c      	b.n	10046c3a <HAL_RADIO_TIMER_SetRadioTimerValue+0x16a>
  }
  else
  {
    if (RADIO_TIMER_Context.rootNode->expiryTime < current_time ||
10046b80:	4b34      	ldr	r3, [pc, #208]	@ (10046c54 <HAL_RADIO_TIMER_SetRadioTimerValue+0x184>)
10046b82:	228c      	movs	r2, #140	@ 0x8c
10046b84:	589b      	ldr	r3, [r3, r2]
10046b86:	681a      	ldr	r2, [r3, #0]
10046b88:	685b      	ldr	r3, [r3, #4]
10046b8a:	69f9      	ldr	r1, [r7, #28]
10046b8c:	4299      	cmp	r1, r3
10046b8e:	d82f      	bhi.n	10046bf0 <HAL_RADIO_TIMER_SetRadioTimerValue+0x120>
10046b90:	69f9      	ldr	r1, [r7, #28]
10046b92:	4299      	cmp	r1, r3
10046b94:	d102      	bne.n	10046b9c <HAL_RADIO_TIMER_SetRadioTimerValue+0xcc>
10046b96:	69b9      	ldr	r1, [r7, #24]
10046b98:	4291      	cmp	r1, r2
10046b9a:	d829      	bhi.n	10046bf0 <HAL_RADIO_TIMER_SetRadioTimerValue+0x120>
        ((RADIO_TIMER_Context.radioTimer.expiryTime < (RADIO_TIMER_Context.rootNode->expiryTime +
10046b9c:	4b2d      	ldr	r3, [pc, #180]	@ (10046c54 <HAL_RADIO_TIMER_SetRadioTimerValue+0x184>)
10046b9e:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
10046ba0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
10046ba2:	492c      	ldr	r1, [pc, #176]	@ (10046c54 <HAL_RADIO_TIMER_SetRadioTimerValue+0x184>)
10046ba4:	208c      	movs	r0, #140	@ 0x8c
10046ba6:	5809      	ldr	r1, [r1, r0]
10046ba8:	6808      	ldr	r0, [r1, #0]
10046baa:	6849      	ldr	r1, [r1, #4]
10046bac:	6038      	str	r0, [r7, #0]
10046bae:	6079      	str	r1, [r7, #4]
                                                       RADIO_TIMER_Context.hostMargin)) && RADIO_TIMER_Context.rootNode->active) || !RADIO_TIMER_Context.rootNode->active)
10046bb0:	4e28      	ldr	r6, [pc, #160]	@ (10046c54 <HAL_RADIO_TIMER_SetRadioTimerValue+0x184>)
10046bb2:	2198      	movs	r1, #152	@ 0x98
10046bb4:	468c      	mov	ip, r1
10046bb6:	4661      	mov	r1, ip
10046bb8:	5876      	ldr	r6, [r6, r1]
10046bba:	0034      	movs	r4, r6
10046bbc:	2600      	movs	r6, #0
10046bbe:	0035      	movs	r5, r6
        ((RADIO_TIMER_Context.radioTimer.expiryTime < (RADIO_TIMER_Context.rootNode->expiryTime +
10046bc0:	6838      	ldr	r0, [r7, #0]
10046bc2:	6879      	ldr	r1, [r7, #4]
10046bc4:	1900      	adds	r0, r0, r4
10046bc6:	4169      	adcs	r1, r5
    if (RADIO_TIMER_Context.rootNode->expiryTime < current_time ||
10046bc8:	4299      	cmp	r1, r3
10046bca:	d802      	bhi.n	10046bd2 <HAL_RADIO_TIMER_SetRadioTimerValue+0x102>
10046bcc:	d107      	bne.n	10046bde <HAL_RADIO_TIMER_SetRadioTimerValue+0x10e>
10046bce:	4290      	cmp	r0, r2
10046bd0:	d905      	bls.n	10046bde <HAL_RADIO_TIMER_SetRadioTimerValue+0x10e>
                                                       RADIO_TIMER_Context.hostMargin)) && RADIO_TIMER_Context.rootNode->active) || !RADIO_TIMER_Context.rootNode->active)
10046bd2:	4b20      	ldr	r3, [pc, #128]	@ (10046c54 <HAL_RADIO_TIMER_SetRadioTimerValue+0x184>)
10046bd4:	228c      	movs	r2, #140	@ 0x8c
10046bd6:	589b      	ldr	r3, [r3, r2]
10046bd8:	7b1b      	ldrb	r3, [r3, #12]
10046bda:	2b00      	cmp	r3, #0
10046bdc:	d108      	bne.n	10046bf0 <HAL_RADIO_TIMER_SetRadioTimerValue+0x120>
10046bde:	4b1d      	ldr	r3, [pc, #116]	@ (10046c54 <HAL_RADIO_TIMER_SetRadioTimerValue+0x184>)
10046be0:	228c      	movs	r2, #140	@ 0x8c
10046be2:	589b      	ldr	r3, [r3, r2]
10046be4:	7b1b      	ldrb	r3, [r3, #12]
10046be6:	2201      	movs	r2, #1
10046be8:	4053      	eors	r3, r2
10046bea:	b2db      	uxtb	r3, r3
10046bec:	2b00      	cmp	r3, #0
10046bee:	d020      	beq.n	10046c32 <HAL_RADIO_TIMER_SetRadioTimerValue+0x162>
    {
      /* Program the radio timer */
      _check_radio_activity(&RADIO_TIMER_Context.radioTimer, &retVal);
10046bf0:	230f      	movs	r3, #15
10046bf2:	2208      	movs	r2, #8
10046bf4:	189b      	adds	r3, r3, r2
10046bf6:	19da      	adds	r2, r3, r7
10046bf8:	4b17      	ldr	r3, [pc, #92]	@ (10046c58 <HAL_RADIO_TIMER_SetRadioTimerValue+0x188>)
10046bfa:	0011      	movs	r1, r2
10046bfc:	0018      	movs	r0, r3
10046bfe:	f000 fde3 	bl	100477c8 <_check_radio_activity>
      if ((RADIO_TIMER_Context.radioTimer.expiryTime >= RADIO_TIMER_Context.rootNode->expiryTime)
10046c02:	4b14      	ldr	r3, [pc, #80]	@ (10046c54 <HAL_RADIO_TIMER_SetRadioTimerValue+0x184>)
10046c04:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
10046c06:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
10046c08:	4912      	ldr	r1, [pc, #72]	@ (10046c54 <HAL_RADIO_TIMER_SetRadioTimerValue+0x184>)
10046c0a:	208c      	movs	r0, #140	@ 0x8c
10046c0c:	5809      	ldr	r1, [r1, r0]
10046c0e:	6808      	ldr	r0, [r1, #0]
10046c10:	6849      	ldr	r1, [r1, #4]
10046c12:	4299      	cmp	r1, r3
10046c14:	d810      	bhi.n	10046c38 <HAL_RADIO_TIMER_SetRadioTimerValue+0x168>
10046c16:	d101      	bne.n	10046c1c <HAL_RADIO_TIMER_SetRadioTimerValue+0x14c>
10046c18:	4290      	cmp	r0, r2
10046c1a:	d80d      	bhi.n	10046c38 <HAL_RADIO_TIMER_SetRadioTimerValue+0x168>
          && RADIO_TIMER_Context.rootNode->active)
10046c1c:	4b0d      	ldr	r3, [pc, #52]	@ (10046c54 <HAL_RADIO_TIMER_SetRadioTimerValue+0x184>)
10046c1e:	228c      	movs	r2, #140	@ 0x8c
10046c20:	589b      	ldr	r3, [r3, r2]
10046c22:	7b1b      	ldrb	r3, [r3, #12]
10046c24:	2b00      	cmp	r3, #0
10046c26:	d007      	beq.n	10046c38 <HAL_RADIO_TIMER_SetRadioTimerValue+0x168>
      {
        /*The radio operation is before or too close the host timeout*/
        RADIO_TIMER_Context.hostIsRadioPending = 1;
10046c28:	4b0a      	ldr	r3, [pc, #40]	@ (10046c54 <HAL_RADIO_TIMER_SetRadioTimerValue+0x184>)
10046c2a:	2295      	movs	r2, #149	@ 0x95
10046c2c:	2101      	movs	r1, #1
10046c2e:	5499      	strb	r1, [r3, r2]
      if ((RADIO_TIMER_Context.radioTimer.expiryTime >= RADIO_TIMER_Context.rootNode->expiryTime)
10046c30:	e002      	b.n	10046c38 <HAL_RADIO_TIMER_SetRadioTimerValue+0x168>
    else
    {
      /* If radio timer is not programmed, an emulated host timer is already programmed.
      Make sure radio errors are disabled.
      This call is not needed if radio errors are not enabled by the BLE stack. */
      _set_controller_as_host();
10046c32:	f000 febd 	bl	100479b0 <_set_controller_as_host>
10046c36:	e000      	b.n	10046c3a <HAL_RADIO_TIMER_SetRadioTimerValue+0x16a>
      if ((RADIO_TIMER_Context.radioTimer.expiryTime >= RADIO_TIMER_Context.rootNode->expiryTime)
10046c38:	46c0      	nop			@ (mov r8, r8)
  }
#else
  _check_radio_activity(&RADIO_TIMER_Context.radioTimer, &retVal);
#endif

  _virtualTimeBaseEnable(ENABLE);
10046c3a:	2001      	movs	r0, #1
10046c3c:	f000 fc8e 	bl	1004755c <_virtualTimeBaseEnable>

  return retVal;
10046c40:	230f      	movs	r3, #15
10046c42:	2208      	movs	r2, #8
10046c44:	189b      	adds	r3, r3, r2
10046c46:	19db      	adds	r3, r3, r7
10046c48:	781b      	ldrb	r3, [r3, #0]
}
10046c4a:	0018      	movs	r0, r3
10046c4c:	46bd      	mov	sp, r7
10046c4e:	b009      	add	sp, #36	@ 0x24
10046c50:	bdf0      	pop	{r4, r5, r6, r7, pc}
10046c52:	46c0      	nop			@ (mov r8, r8)
10046c54:	20000598 	.word	0x20000598
10046c58:	200005f0 	.word	0x200005f0

10046c5c <HAL_RADIO_TIMER_GetRadioTimerValue>:
  * @retval 1 if Timer1 has been programmed.
  * @retval 2 if Timer2 has been programmed.
  * @retval 3 if Wakeup Timer has been programmed.
  */
uint8_t HAL_RADIO_TIMER_GetRadioTimerValue(uint32_t *time)
{
10046c5c:	b580      	push	{r7, lr}
10046c5e:	b082      	sub	sp, #8
10046c60:	af00      	add	r7, sp, #0
10046c62:	6078      	str	r0, [r7, #4]
  return TIMER_GetRadioTimerValue(time);
10046c64:	687b      	ldr	r3, [r7, #4]
10046c66:	0018      	movs	r0, r3
10046c68:	f001 f812 	bl	10047c90 <TIMER_GetRadioTimerValue>
10046c6c:	0003      	movs	r3, r0
}
10046c6e:	0018      	movs	r0, r3
10046c70:	46bd      	mov	sp, r7
10046c72:	b002      	add	sp, #8
10046c74:	bd80      	pop	{r7, pc}

10046c76 <HAL_RADIO_TIMER_RadioTimerIsr>:
/**
  * @brief  Radio activity finished.
  * @retval None
  */
void HAL_RADIO_TIMER_RadioTimerIsr(void)
{
10046c76:	b580      	push	{r7, lr}
10046c78:	af00      	add	r7, sp, #0
#if defined (STM32WB06) || defined (STM32WB07)
  if (!(LL_RADIO_TIMER_IsEnabledTimer1(BLUE) || LL_RADIO_TIMER_IsEnabledTimer2(BLUE)))
10046c7a:	23c0      	movs	r3, #192	@ 0xc0
10046c7c:	05db      	lsls	r3, r3, #23
10046c7e:	0018      	movs	r0, r3
10046c80:	f7ff fac3 	bl	1004620a <LL_RADIO_TIMER_IsEnabledTimer1>
10046c84:	1e03      	subs	r3, r0, #0
10046c86:	d108      	bne.n	10046c9a <HAL_RADIO_TIMER_RadioTimerIsr+0x24>
10046c88:	23c0      	movs	r3, #192	@ 0xc0
10046c8a:	05db      	lsls	r3, r3, #23
10046c8c:	0018      	movs	r0, r3
10046c8e:	f7ff fadc 	bl	1004624a <LL_RADIO_TIMER_IsEnabledTimer2>
10046c92:	1e03      	subs	r3, r0, #0
10046c94:	d101      	bne.n	10046c9a <HAL_RADIO_TIMER_RadioTimerIsr+0x24>
  {
    _check_host_activity();
10046c96:	f000 fea1 	bl	100479dc <_check_host_activity>
  }
#endif
}
10046c9a:	46c0      	nop			@ (mov r8, r8)
10046c9c:	46bd      	mov	sp, r7
10046c9e:	bd80      	pop	{r7, pc}

10046ca0 <HAL_RADIO_TIMER_EndOfRadioActivityIsr>:
/**
  * @brief  Timer State machine semaphore to signal the radio activity finished.
  * @retval None
  */
void HAL_RADIO_TIMER_EndOfRadioActivityIsr(void)
{
10046ca0:	b580      	push	{r7, lr}
10046ca2:	af00      	add	r7, sp, #0
  RADIO_TIMER_Context.radioTimer.intTxRx_to_be_served = FALSE;
10046ca4:	4b03      	ldr	r3, [pc, #12]	@ (10046cb4 <HAL_RADIO_TIMER_EndOfRadioActivityIsr+0x14>)
10046ca6:	2263      	movs	r2, #99	@ 0x63
10046ca8:	2100      	movs	r1, #0
10046caa:	5499      	strb	r1, [r3, r2]
}
10046cac:	46c0      	nop			@ (mov r8, r8)
10046cae:	46bd      	mov	sp, r7
10046cb0:	bd80      	pop	{r7, pc}
10046cb2:	46c0      	nop			@ (mov r8, r8)
10046cb4:	20000598 	.word	0x20000598

10046cb8 <HAL_RADIO_TIMER_UsToSystime>:
  * @brief  Translate time in microseconds into sys time units.
  * @param  time: Microseconds to be converted in STU
  * @return STU value
  */
uint32_t HAL_RADIO_TIMER_UsToSystime(uint32_t time)
{
10046cb8:	b580      	push	{r7, lr}
10046cba:	b082      	sub	sp, #8
10046cbc:	af00      	add	r7, sp, #0
10046cbe:	6078      	str	r0, [r7, #4]
  return _us_to_systime(time);
10046cc0:	687b      	ldr	r3, [r7, #4]
10046cc2:	0018      	movs	r0, r3
10046cc4:	f000 fa14 	bl	100470f0 <_us_to_systime>
10046cc8:	0003      	movs	r3, r0
}
10046cca:	0018      	movs	r0, r3
10046ccc:	46bd      	mov	sp, r7
10046cce:	b002      	add	sp, #8
10046cd0:	bd80      	pop	{r7, pc}
	...

10046cd4 <HAL_RADIO_TIMER_MachineTimeToSysTime>:
  *          storing the system time. It should be called only in
  *          user context and not in interrupt context.
  * @return  STU value
  */
uint32_t HAL_RADIO_TIMER_MachineTimeToSysTime(uint32_t time)
{
10046cd4:	b580      	push	{r7, lr}
10046cd6:	b082      	sub	sp, #8
10046cd8:	af00      	add	r7, sp, #0
10046cda:	6078      	str	r0, [r7, #4]
  return blue_unit_conversion(time, RADIO_TIMER_Context.calibrationData.period1, MULT64_THR_PERIOD);
10046cdc:	4b06      	ldr	r3, [pc, #24]	@ (10046cf8 <HAL_RADIO_TIMER_MachineTimeToSysTime+0x24>)
10046cde:	69db      	ldr	r3, [r3, #28]
10046ce0:	0019      	movs	r1, r3
10046ce2:	4a06      	ldr	r2, [pc, #24]	@ (10046cfc <HAL_RADIO_TIMER_MachineTimeToSysTime+0x28>)
10046ce4:	687b      	ldr	r3, [r7, #4]
10046ce6:	0018      	movs	r0, r3
10046ce8:	f7f9 f9ea 	bl	100400c0 <blue_unit_conversion>
10046cec:	0003      	movs	r3, r0
}
10046cee:	0018      	movs	r0, r3
10046cf0:	46bd      	mov	sp, r7
10046cf2:	b002      	add	sp, #8
10046cf4:	bd80      	pop	{r7, pc}
10046cf6:	46c0      	nop			@ (mov r8, r8)
10046cf8:	20000598 	.word	0x20000598
10046cfc:	00000635 	.word	0x00000635

10046d00 <HAL_RADIO_TIMER_GetCurrentSysTime>:
  *         The returned value can be used as absolute time parameter where needed in the other
  *         HAL_RADIO_TIMER* APIs
  * @return absolute current time expressed in system time units.
  */
uint64_t HAL_RADIO_TIMER_GetCurrentSysTime(void)
{
10046d00:	b580      	push	{r7, lr}
10046d02:	b082      	sub	sp, #8
10046d04:	af00      	add	r7, sp, #0
  uint32_t current_machine_time;
  return _get_system_time_and_machine(&RADIO_TIMER_Context, &current_machine_time);
10046d06:	1d3a      	adds	r2, r7, #4
10046d08:	4b05      	ldr	r3, [pc, #20]	@ (10046d20 <HAL_RADIO_TIMER_GetCurrentSysTime+0x20>)
10046d0a:	0011      	movs	r1, r2
10046d0c:	0018      	movs	r0, r3
10046d0e:	f000 fad7 	bl	100472c0 <_get_system_time_and_machine>
10046d12:	0002      	movs	r2, r0
10046d14:	000b      	movs	r3, r1
}
10046d16:	0010      	movs	r0, r2
10046d18:	0019      	movs	r1, r3
10046d1a:	46bd      	mov	sp, r7
10046d1c:	b002      	add	sp, #8
10046d1e:	bd80      	pop	{r7, pc}
10046d20:	20000598 	.word	0x20000598

10046d24 <HAL_RADIO_TIMER_StopVirtualTimer>:
  * @brief  Stops the one-shot virtual timer specified if found
  * @param  timerHandle: The virtual timer
  * @retval None
  */
void HAL_RADIO_TIMER_StopVirtualTimer(VTIMER_HandleType *timerHandle)
{
10046d24:	b590      	push	{r4, r7, lr}
10046d26:	b089      	sub	sp, #36	@ 0x24
10046d28:	af00      	add	r7, sp, #0
10046d2a:	6078      	str	r0, [r7, #4]
  VTIMER_HandleType *rootNode = _remove_timer_in_queue(RADIO_TIMER_Context.rootNode, timerHandle);
10046d2c:	4b28      	ldr	r3, [pc, #160]	@ (10046dd0 <HAL_RADIO_TIMER_StopVirtualTimer+0xac>)
10046d2e:	228c      	movs	r2, #140	@ 0x8c
10046d30:	589b      	ldr	r3, [r3, r2]
10046d32:	687a      	ldr	r2, [r7, #4]
10046d34:	0011      	movs	r1, r2
10046d36:	0018      	movs	r0, r3
10046d38:	f000 fc3c 	bl	100475b4 <_remove_timer_in_queue>
10046d3c:	0003      	movs	r3, r0
10046d3e:	61fb      	str	r3, [r7, #28]
  uint8_t expired = 0;
10046d40:	210f      	movs	r1, #15
10046d42:	187b      	adds	r3, r7, r1
10046d44:	2200      	movs	r2, #0
10046d46:	701a      	strb	r2, [r3, #0]
  timerHandle->active = FALSE;
10046d48:	687b      	ldr	r3, [r7, #4]
10046d4a:	2200      	movs	r2, #0
10046d4c:	731a      	strb	r2, [r3, #12]
  if (RADIO_TIMER_Context.rootNode != rootNode)
10046d4e:	4b20      	ldr	r3, [pc, #128]	@ (10046dd0 <HAL_RADIO_TIMER_StopVirtualTimer+0xac>)
10046d50:	228c      	movs	r2, #140	@ 0x8c
10046d52:	589b      	ldr	r3, [r3, r2]
10046d54:	69fa      	ldr	r2, [r7, #28]
10046d56:	429a      	cmp	r2, r3
10046d58:	d031      	beq.n	10046dbe <HAL_RADIO_TIMER_StopVirtualTimer+0x9a>
  {
    RADIO_TIMER_Context.rootNode = _update_user_timeout(rootNode, &expired);
10046d5a:	000c      	movs	r4, r1
10046d5c:	187a      	adds	r2, r7, r1
10046d5e:	69fb      	ldr	r3, [r7, #28]
10046d60:	0011      	movs	r1, r2
10046d62:	0018      	movs	r0, r3
10046d64:	f000 fb14 	bl	10047390 <_update_user_timeout>
10046d68:	0002      	movs	r2, r0
10046d6a:	4b19      	ldr	r3, [pc, #100]	@ (10046dd0 <HAL_RADIO_TIMER_StopVirtualTimer+0xac>)
10046d6c:	218c      	movs	r1, #140	@ 0x8c
10046d6e:	505a      	str	r2, [r3, r1]
    if (expired)
10046d70:	193b      	adds	r3, r7, r4
10046d72:	781b      	ldrb	r3, [r3, #0]
10046d74:	2b00      	cmp	r3, #0
10046d76:	d026      	beq.n	10046dc6 <HAL_RADIO_TIMER_StopVirtualTimer+0xa2>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
10046d78:	f3ef 8310 	mrs	r3, PRIMASK
10046d7c:	617b      	str	r3, [r7, #20]
  return(result);
10046d7e:	697b      	ldr	r3, [r7, #20]
    {
      /* A new root timer is already expired, mimic timer expire */
      INCREMENT_EXPIRE_COUNT;
10046d80:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("cpsid i" : : : "memory");
10046d82:	b672      	cpsid	i
}
10046d84:	46c0      	nop			@ (mov r8, r8)
10046d86:	4b12      	ldr	r3, [pc, #72]	@ (10046dd0 <HAL_RADIO_TIMER_StopVirtualTimer+0xac>)
10046d88:	2291      	movs	r2, #145	@ 0x91
10046d8a:	5c9b      	ldrb	r3, [r3, r2]
10046d8c:	3301      	adds	r3, #1
10046d8e:	4a10      	ldr	r2, [pc, #64]	@ (10046dd0 <HAL_RADIO_TIMER_StopVirtualTimer+0xac>)
10046d90:	2192      	movs	r1, #146	@ 0x92
10046d92:	5c52      	ldrb	r2, [r2, r1]
10046d94:	4293      	cmp	r3, r2
10046d96:	d103      	bne.n	10046da0 <HAL_RADIO_TIMER_StopVirtualTimer+0x7c>
10046d98:	4b0d      	ldr	r3, [pc, #52]	@ (10046dd0 <HAL_RADIO_TIMER_StopVirtualTimer+0xac>)
10046d9a:	2291      	movs	r2, #145	@ 0x91
10046d9c:	5c9b      	ldrb	r3, [r3, r2]
10046d9e:	e004      	b.n	10046daa <HAL_RADIO_TIMER_StopVirtualTimer+0x86>
10046da0:	4b0b      	ldr	r3, [pc, #44]	@ (10046dd0 <HAL_RADIO_TIMER_StopVirtualTimer+0xac>)
10046da2:	2291      	movs	r2, #145	@ 0x91
10046da4:	5c9b      	ldrb	r3, [r3, r2]
10046da6:	3301      	adds	r3, #1
10046da8:	b2db      	uxtb	r3, r3
10046daa:	4a09      	ldr	r2, [pc, #36]	@ (10046dd0 <HAL_RADIO_TIMER_StopVirtualTimer+0xac>)
10046dac:	2191      	movs	r1, #145	@ 0x91
10046dae:	5453      	strb	r3, [r2, r1]
10046db0:	69bb      	ldr	r3, [r7, #24]
10046db2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
10046db4:	693b      	ldr	r3, [r7, #16]
10046db6:	f383 8810 	msr	PRIMASK, r3
}
10046dba:	46c0      	nop			@ (mov r8, r8)
  }
  else
  {
    RADIO_TIMER_Context.rootNode = rootNode;
  }
}
10046dbc:	e003      	b.n	10046dc6 <HAL_RADIO_TIMER_StopVirtualTimer+0xa2>
    RADIO_TIMER_Context.rootNode = rootNode;
10046dbe:	4b04      	ldr	r3, [pc, #16]	@ (10046dd0 <HAL_RADIO_TIMER_StopVirtualTimer+0xac>)
10046dc0:	218c      	movs	r1, #140	@ 0x8c
10046dc2:	69fa      	ldr	r2, [r7, #28]
10046dc4:	505a      	str	r2, [r3, r1]
}
10046dc6:	46c0      	nop			@ (mov r8, r8)
10046dc8:	46bd      	mov	sp, r7
10046dca:	b009      	add	sp, #36	@ 0x24
10046dcc:	bd90      	pop	{r4, r7, pc}
10046dce:	46c0      	nop			@ (mov r8, r8)
10046dd0:	20000598 	.word	0x20000598

10046dd4 <HAL_RADIO_TIMER_WakeUpCallback>:
  * @brief   If the wakeup timer triggers for a host wakeup, a pending radio activity is programmed.
  *          If the wakeup timer triggers for a radio activity, a pending virtual timer callback is executed.
  * @retval  None
  */
void HAL_RADIO_TIMER_WakeUpCallback(void)
{
10046dd4:	b580      	push	{r7, lr}
10046dd6:	b082      	sub	sp, #8
10046dd8:	af00      	add	r7, sp, #0
  volatile uint32_t status = 0;
10046dda:	2300      	movs	r3, #0
10046ddc:	607b      	str	r3, [r7, #4]
  uint8_t expired;
  UNUSED(status);
10046dde:	687b      	ldr	r3, [r7, #4]
  _check_radio_activity(&RADIO_TIMER_Context.radioTimer, &expired);
10046de0:	1cfa      	adds	r2, r7, #3
10046de2:	4b0f      	ldr	r3, [pc, #60]	@ (10046e20 <HAL_RADIO_TIMER_WakeUpCallback+0x4c>)
10046de4:	0011      	movs	r1, r2
10046de6:	0018      	movs	r0, r3
10046de8:	f000 fcee 	bl	100477c8 <_check_radio_activity>
  if (RADIO_TIMER_Context.hostIsRadioPending)
10046dec:	4b0d      	ldr	r3, [pc, #52]	@ (10046e24 <HAL_RADIO_TIMER_WakeUpCallback+0x50>)
10046dee:	2295      	movs	r2, #149	@ 0x95
10046df0:	5c9b      	ldrb	r3, [r3, r2]
10046df2:	2b00      	cmp	r3, #0
10046df4:	d005      	beq.n	10046e02 <HAL_RADIO_TIMER_WakeUpCallback+0x2e>
  {
    RADIO_TIMER_Context.hostIsRadioPending = 0;
10046df6:	4b0b      	ldr	r3, [pc, #44]	@ (10046e24 <HAL_RADIO_TIMER_WakeUpCallback+0x50>)
10046df8:	2295      	movs	r2, #149	@ 0x95
10046dfa:	2100      	movs	r1, #0
10046dfc:	5499      	strb	r1, [r3, r2]
    HAL_RADIO_TIMER_TimeoutCallback();
10046dfe:	f000 f815 	bl	10046e2c <HAL_RADIO_TIMER_TimeoutCallback>
  }

  LL_RADIO_TIMER_ClearFlag_BLEWakeup(WAKEUP);
10046e02:	4b09      	ldr	r3, [pc, #36]	@ (10046e28 <HAL_RADIO_TIMER_WakeUpCallback+0x54>)
10046e04:	0018      	movs	r0, r3
10046e06:	f7ff fb1b 	bl	10046440 <LL_RADIO_TIMER_ClearFlag_BLEWakeup>
  status = LL_RADIO_TIMER_IsActiveFlag_BLEWakeup(WAKEUP);
10046e0a:	4b07      	ldr	r3, [pc, #28]	@ (10046e28 <HAL_RADIO_TIMER_WakeUpCallback+0x54>)
10046e0c:	0018      	movs	r0, r3
10046e0e:	f7ff fb25 	bl	1004645c <LL_RADIO_TIMER_IsActiveFlag_BLEWakeup>
10046e12:	0003      	movs	r3, r0
10046e14:	607b      	str	r3, [r7, #4]
}
10046e16:	46c0      	nop			@ (mov r8, r8)
10046e18:	46bd      	mov	sp, r7
10046e1a:	b002      	add	sp, #8
10046e1c:	bd80      	pop	{r7, pc}
10046e1e:	46c0      	nop			@ (mov r8, r8)
10046e20:	200005f0 	.word	0x200005f0
10046e24:	20000598 	.word	0x20000598
10046e28:	60001800 	.word	0x60001800

10046e2c <HAL_RADIO_TIMER_TimeoutCallback>:
/**
  * @brief  Virtual timer Timeout Callback. It signals that a host timeout occurred.
  * @retval None
  */
void HAL_RADIO_TIMER_TimeoutCallback(void)
{
10046e2c:	b580      	push	{r7, lr}
10046e2e:	b082      	sub	sp, #8
10046e30:	af00      	add	r7, sp, #0
  volatile uint32_t status = 0;
10046e32:	2300      	movs	r3, #0
10046e34:	607b      	str	r3, [r7, #4]
  UNUSED(status);
10046e36:	687b      	ldr	r3, [r7, #4]
#if defined (STM32WB06) || defined (STM32WB07)
  RADIO_TIMER_Context.hostIsRadioPending = 0;
10046e38:	4b15      	ldr	r3, [pc, #84]	@ (10046e90 <HAL_RADIO_TIMER_TimeoutCallback+0x64>)
10046e3a:	2295      	movs	r2, #149	@ 0x95
10046e3c:	2100      	movs	r1, #0
10046e3e:	5499      	strb	r1, [r3, r2]
#endif

  /* Disable host timer */
  LL_RADIO_TIMER_DisableCPUWakeupTimer(WAKEUP);
10046e40:	4b14      	ldr	r3, [pc, #80]	@ (10046e94 <HAL_RADIO_TIMER_TimeoutCallback+0x68>)
10046e42:	0018      	movs	r0, r3
10046e44:	f7ff fa6c 	bl	10046320 <LL_RADIO_TIMER_DisableCPUWakeupTimer>
  INCREMENT_EXPIRE_COUNT_ISR;
10046e48:	4b11      	ldr	r3, [pc, #68]	@ (10046e90 <HAL_RADIO_TIMER_TimeoutCallback+0x64>)
10046e4a:	2291      	movs	r2, #145	@ 0x91
10046e4c:	5c9b      	ldrb	r3, [r3, r2]
10046e4e:	3301      	adds	r3, #1
10046e50:	4a0f      	ldr	r2, [pc, #60]	@ (10046e90 <HAL_RADIO_TIMER_TimeoutCallback+0x64>)
10046e52:	2192      	movs	r1, #146	@ 0x92
10046e54:	5c52      	ldrb	r2, [r2, r1]
10046e56:	4293      	cmp	r3, r2
10046e58:	d103      	bne.n	10046e62 <HAL_RADIO_TIMER_TimeoutCallback+0x36>
10046e5a:	4b0d      	ldr	r3, [pc, #52]	@ (10046e90 <HAL_RADIO_TIMER_TimeoutCallback+0x64>)
10046e5c:	2291      	movs	r2, #145	@ 0x91
10046e5e:	5c9b      	ldrb	r3, [r3, r2]
10046e60:	e004      	b.n	10046e6c <HAL_RADIO_TIMER_TimeoutCallback+0x40>
10046e62:	4b0b      	ldr	r3, [pc, #44]	@ (10046e90 <HAL_RADIO_TIMER_TimeoutCallback+0x64>)
10046e64:	2291      	movs	r2, #145	@ 0x91
10046e66:	5c9b      	ldrb	r3, [r3, r2]
10046e68:	3301      	adds	r3, #1
10046e6a:	b2db      	uxtb	r3, r3
10046e6c:	4a08      	ldr	r2, [pc, #32]	@ (10046e90 <HAL_RADIO_TIMER_TimeoutCallback+0x64>)
10046e6e:	2191      	movs	r1, #145	@ 0x91
10046e70:	5453      	strb	r3, [r2, r1]
  /* Clear the interrupt */
  LL_RADIO_TIMER_ClearFlag_CPUWakeup(WAKEUP);
10046e72:	4b08      	ldr	r3, [pc, #32]	@ (10046e94 <HAL_RADIO_TIMER_TimeoutCallback+0x68>)
10046e74:	0018      	movs	r0, r3
10046e76:	f7ff fb02 	bl	1004647e <LL_RADIO_TIMER_ClearFlag_CPUWakeup>
  status = LL_RADIO_TIMER_IsActiveFlag_CPUWakeup(WAKEUP);
10046e7a:	4b06      	ldr	r3, [pc, #24]	@ (10046e94 <HAL_RADIO_TIMER_TimeoutCallback+0x68>)
10046e7c:	0018      	movs	r0, r3
10046e7e:	f7ff fb0c 	bl	1004649a <LL_RADIO_TIMER_IsActiveFlag_CPUWakeup>
10046e82:	0003      	movs	r3, r0
10046e84:	607b      	str	r3, [r7, #4]
}
10046e86:	46c0      	nop			@ (mov r8, r8)
10046e88:	46bd      	mov	sp, r7
10046e8a:	b002      	add	sp, #8
10046e8c:	bd80      	pop	{r7, pc}
10046e8e:	46c0      	nop			@ (mov r8, r8)
10046e90:	20000598 	.word	0x20000598
10046e94:	60001800 	.word	0x60001800

10046e98 <_calibrationProcedure>:
/** @defgroup RADIO_TIMER_Private_Functions  RADIO TIMER Private Functions
  * @{
  */

static void _calibrationProcedure(void)
{
10046e98:	b580      	push	{r7, lr}
10046e9a:	af00      	add	r7, sp, #0
  /* Make sure any pending calibration is over */
  while (LL_RADIO_TIMER_IsActiveFlag_LSICalibrationEnded(RADIO_CTRL) == 0);
10046e9c:	46c0      	nop			@ (mov r8, r8)
10046e9e:	4b0b      	ldr	r3, [pc, #44]	@ (10046ecc <_calibrationProcedure+0x34>)
10046ea0:	0018      	movs	r0, r3
10046ea2:	f7ff fb44 	bl	1004652e <LL_RADIO_TIMER_IsActiveFlag_LSICalibrationEnded>
10046ea6:	1e03      	subs	r3, r0, #0
10046ea8:	d0f9      	beq.n	10046e9e <_calibrationProcedure+0x6>

  /* Set SLOW_COUNT to 23, that is calibrate over 24 clock periods, this number
  cannot be changed without changing all the integer maths function in the
  file  */
  LL_RADIO_TIMER_SetLSIWindowCalibrationLength(RADIO_CTRL, 23);
10046eaa:	4b08      	ldr	r3, [pc, #32]	@ (10046ecc <_calibrationProcedure+0x34>)
10046eac:	2117      	movs	r1, #23
10046eae:	0018      	movs	r0, r3
10046eb0:	f7ff fb04 	bl	100464bc <LL_RADIO_TIMER_SetLSIWindowCalibrationLength>

  /* Start a calibration and take the correct freq */
  _timer_calibrate(&RADIO_TIMER_Context.calibrationData);
10046eb4:	4b06      	ldr	r3, [pc, #24]	@ (10046ed0 <_calibrationProcedure+0x38>)
10046eb6:	0018      	movs	r0, r3
10046eb8:	f000 f81e 	bl	10046ef8 <_timer_calibrate>
  /* For first time set last to current */
  RADIO_TIMER_Context.calibrationData.last_period1 = RADIO_TIMER_Context.calibrationData.period1;
10046ebc:	4b05      	ldr	r3, [pc, #20]	@ (10046ed4 <_calibrationProcedure+0x3c>)
10046ebe:	69da      	ldr	r2, [r3, #28]
10046ec0:	4b04      	ldr	r3, [pc, #16]	@ (10046ed4 <_calibrationProcedure+0x3c>)
10046ec2:	621a      	str	r2, [r3, #32]

}
10046ec4:	46c0      	nop			@ (mov r8, r8)
10046ec6:	46bd      	mov	sp, r7
10046ec8:	bd80      	pop	{r7, pc}
10046eca:	46c0      	nop			@ (mov r8, r8)
10046ecc:	60001000 	.word	0x60001000
10046ed0:	200005a8 	.word	0x200005a8
10046ed4:	20000598 	.word	0x20000598

10046ed8 <_timer_start_calibration>:

static void _timer_start_calibration(void)
{
10046ed8:	b580      	push	{r7, lr}
10046eda:	af00      	add	r7, sp, #0
  /* Clear any pending interrupt */
  LL_RADIO_TIMER_ClearFlag_LSICalibrationEnded(RADIO_CTRL);
10046edc:	4b05      	ldr	r3, [pc, #20]	@ (10046ef4 <_timer_start_calibration+0x1c>)
10046ede:	0018      	movs	r0, r3
10046ee0:	f7ff fb17 	bl	10046512 <LL_RADIO_TIMER_ClearFlag_LSICalibrationEnded>
  /* Start calibration */
  LL_RADIO_TIMER_StartLSICalibration(RADIO_CTRL);
10046ee4:	4b03      	ldr	r3, [pc, #12]	@ (10046ef4 <_timer_start_calibration+0x1c>)
10046ee6:	0018      	movs	r0, r3
10046ee8:	f7ff faf4 	bl	100464d4 <LL_RADIO_TIMER_StartLSICalibration>
}
10046eec:	46c0      	nop			@ (mov r8, r8)
10046eee:	46bd      	mov	sp, r7
10046ef0:	bd80      	pop	{r7, pc}
10046ef2:	46c0      	nop			@ (mov r8, r8)
10046ef4:	60001000 	.word	0x60001000

10046ef8 <_timer_calibrate>:

static void _timer_calibrate(CalibrationDataTypeDef *calibrationData)
{
10046ef8:	b580      	push	{r7, lr}
10046efa:	b082      	sub	sp, #8
10046efc:	af00      	add	r7, sp, #0
10046efe:	6078      	str	r0, [r7, #4]
  _timer_start_calibration();
10046f00:	f7ff ffea 	bl	10046ed8 <_timer_start_calibration>
  while (LL_RADIO_TIMER_IsActiveFlag_LSICalibrationEnded(RADIO_CTRL) == 0);
10046f04:	46c0      	nop			@ (mov r8, r8)
10046f06:	4b07      	ldr	r3, [pc, #28]	@ (10046f24 <_timer_calibrate+0x2c>)
10046f08:	0018      	movs	r0, r3
10046f0a:	f7ff fb10 	bl	1004652e <LL_RADIO_TIMER_IsActiveFlag_LSICalibrationEnded>
10046f0e:	1e03      	subs	r3, r0, #0
10046f10:	d0f9      	beq.n	10046f06 <_timer_calibrate+0xe>
  _get_calibration_data(calibrationData);
10046f12:	687b      	ldr	r3, [r7, #4]
10046f14:	0018      	movs	r0, r3
10046f16:	f000 f807 	bl	10046f28 <_get_calibration_data>
}
10046f1a:	46c0      	nop			@ (mov r8, r8)
10046f1c:	46bd      	mov	sp, r7
10046f1e:	b002      	add	sp, #8
10046f20:	bd80      	pop	{r7, pc}
10046f22:	46c0      	nop			@ (mov r8, r8)
10046f24:	60001000 	.word	0x60001000

10046f28 <_get_calibration_data>:

static void _get_calibration_data(CalibrationDataTypeDef *calibrationData)
{
10046f28:	b580      	push	{r7, lr}
10046f2a:	b08a      	sub	sp, #40	@ 0x28
10046f2c:	af00      	add	r7, sp, #0
10046f2e:	6078      	str	r0, [r7, #4]
  int32_t b2;
  int32_t mult;
  int32_t a1;
  int32_t a2;

  period =  LL_RADIO_TIMER_GetLSIPeriod(RADIO_CTRL);
10046f30:	4b2e      	ldr	r3, [pc, #184]	@ (10046fec <_get_calibration_data+0xc4>)
10046f32:	0018      	movs	r0, r3
10046f34:	f7ff fad9 	bl	100464ea <LL_RADIO_TIMER_GetLSIPeriod>
10046f38:	0003      	movs	r3, r0
10046f3a:	627b      	str	r3, [r7, #36]	@ 0x24
  while (period != LL_RADIO_TIMER_GetLSIPeriod(RADIO_CTRL) || period == 0)
10046f3c:	e005      	b.n	10046f4a <_get_calibration_data+0x22>
  {
    period = LL_RADIO_TIMER_GetLSIPeriod(RADIO_CTRL);
10046f3e:	4b2b      	ldr	r3, [pc, #172]	@ (10046fec <_get_calibration_data+0xc4>)
10046f40:	0018      	movs	r0, r3
10046f42:	f7ff fad2 	bl	100464ea <LL_RADIO_TIMER_GetLSIPeriod>
10046f46:	0003      	movs	r3, r0
10046f48:	627b      	str	r3, [r7, #36]	@ 0x24
  while (period != LL_RADIO_TIMER_GetLSIPeriod(RADIO_CTRL) || period == 0)
10046f4a:	4b28      	ldr	r3, [pc, #160]	@ (10046fec <_get_calibration_data+0xc4>)
10046f4c:	0018      	movs	r0, r3
10046f4e:	f7ff facc 	bl	100464ea <LL_RADIO_TIMER_GetLSIPeriod>
10046f52:	0002      	movs	r2, r0
10046f54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10046f56:	429a      	cmp	r2, r3
10046f58:	d1f1      	bne.n	10046f3e <_get_calibration_data+0x16>
10046f5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10046f5c:	2b00      	cmp	r3, #0
10046f5e:	d0ee      	beq.n	10046f3e <_get_calibration_data+0x16>
  }

  mul1 = 0x8BCF6 ;
10046f60:	4b23      	ldr	r3, [pc, #140]	@ (10046ff0 <_get_calibration_data+0xc8>)
10046f62:	61fb      	str	r3, [r7, #28]
  b1 = period >> 8 ;
10046f64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10046f66:	121b      	asrs	r3, r3, #8
10046f68:	61bb      	str	r3, [r7, #24]
  b2 = period & 0xff ;
10046f6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10046f6c:	22ff      	movs	r2, #255	@ 0xff
10046f6e:	4013      	ands	r3, r2
10046f70:	617b      	str	r3, [r7, #20]
  calibrationData->period1 = ((mul1 * b1) + ((b2 * mul1) >> 8) + 16) >> 5;
10046f72:	69fb      	ldr	r3, [r7, #28]
10046f74:	69ba      	ldr	r2, [r7, #24]
10046f76:	435a      	muls	r2, r3
10046f78:	697b      	ldr	r3, [r7, #20]
10046f7a:	69f9      	ldr	r1, [r7, #28]
10046f7c:	434b      	muls	r3, r1
10046f7e:	121b      	asrs	r3, r3, #8
10046f80:	18d3      	adds	r3, r2, r3
10046f82:	3310      	adds	r3, #16
10046f84:	115a      	asrs	r2, r3, #5
10046f86:	687b      	ldr	r3, [r7, #4]
10046f88:	60da      	str	r2, [r3, #12]
  calibrationData->period = period;
10046f8a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
10046f8c:	687b      	ldr	r3, [r7, #4]
10046f8e:	601a      	str	r2, [r3, #0]

  mult = 0x753 ;
10046f90:	4b18      	ldr	r3, [pc, #96]	@ (10046ff4 <_get_calibration_data+0xcc>)
10046f92:	613b      	str	r3, [r7, #16]
  freq = LL_RADIO_TIMER_GetLSIFrequency(RADIO_CTRL);
10046f94:	4b15      	ldr	r3, [pc, #84]	@ (10046fec <_get_calibration_data+0xc4>)
10046f96:	0018      	movs	r0, r3
10046f98:	f7ff fab1 	bl	100464fe <LL_RADIO_TIMER_GetLSIFrequency>
10046f9c:	0003      	movs	r3, r0
10046f9e:	623b      	str	r3, [r7, #32]

  while (freq != LL_RADIO_TIMER_GetLSIFrequency(RADIO_CTRL) || freq == 0)
10046fa0:	e005      	b.n	10046fae <_get_calibration_data+0x86>
  {
    freq = LL_RADIO_TIMER_GetLSIFrequency(RADIO_CTRL);
10046fa2:	4b12      	ldr	r3, [pc, #72]	@ (10046fec <_get_calibration_data+0xc4>)
10046fa4:	0018      	movs	r0, r3
10046fa6:	f7ff faaa 	bl	100464fe <LL_RADIO_TIMER_GetLSIFrequency>
10046faa:	0003      	movs	r3, r0
10046fac:	623b      	str	r3, [r7, #32]
  while (freq != LL_RADIO_TIMER_GetLSIFrequency(RADIO_CTRL) || freq == 0)
10046fae:	4b0f      	ldr	r3, [pc, #60]	@ (10046fec <_get_calibration_data+0xc4>)
10046fb0:	0018      	movs	r0, r3
10046fb2:	f7ff faa4 	bl	100464fe <LL_RADIO_TIMER_GetLSIFrequency>
10046fb6:	0002      	movs	r2, r0
10046fb8:	6a3b      	ldr	r3, [r7, #32]
10046fba:	429a      	cmp	r2, r3
10046fbc:	d1f1      	bne.n	10046fa2 <_get_calibration_data+0x7a>
10046fbe:	6a3b      	ldr	r3, [r7, #32]
10046fc0:	2b00      	cmp	r3, #0
10046fc2:	d0ee      	beq.n	10046fa2 <_get_calibration_data+0x7a>
  }
  a1 = freq >> 6 ;
10046fc4:	6a3b      	ldr	r3, [r7, #32]
10046fc6:	119b      	asrs	r3, r3, #6
10046fc8:	60fb      	str	r3, [r7, #12]
  a2 = a1 * mult ;
10046fca:	68fb      	ldr	r3, [r7, #12]
10046fcc:	693a      	ldr	r2, [r7, #16]
10046fce:	4353      	muls	r3, r2
10046fd0:	60bb      	str	r3, [r7, #8]
  calibrationData->freq1 = (a2 + 128) >> 8 ;
10046fd2:	68bb      	ldr	r3, [r7, #8]
10046fd4:	3380      	adds	r3, #128	@ 0x80
10046fd6:	121a      	asrs	r2, r3, #8
10046fd8:	687b      	ldr	r3, [r7, #4]
10046fda:	609a      	str	r2, [r3, #8]
  calibrationData->freq = freq;
10046fdc:	6a3a      	ldr	r2, [r7, #32]
10046fde:	687b      	ldr	r3, [r7, #4]
10046fe0:	605a      	str	r2, [r3, #4]
}
10046fe2:	46c0      	nop			@ (mov r8, r8)
10046fe4:	46bd      	mov	sp, r7
10046fe6:	b00a      	add	sp, #40	@ 0x28
10046fe8:	bd80      	pop	{r7, pc}
10046fea:	46c0      	nop			@ (mov r8, r8)
10046fec:	60001000 	.word	0x60001000
10046ff0:	0008bcf6 	.word	0x0008bcf6
10046ff4:	00000753 	.word	0x00000753

10046ff8 <_configureTxRxDelay>:

static void _configureTxRxDelay(RADIO_TIMER_ContextTypeDef *context, uint8_t calculate_st)
{
10046ff8:	b590      	push	{r4, r7, lr}
10046ffa:	b085      	sub	sp, #20
10046ffc:	af00      	add	r7, sp, #0
10046ffe:	6078      	str	r0, [r7, #4]
10047000:	000a      	movs	r2, r1
10047002:	1cfb      	adds	r3, r7, #3
10047004:	701a      	strb	r2, [r3, #0]
  uint8_t tx_delay_start;

  tx_delay_start = (BLUEGLOB->TXDELAYSTART * 125 / 1000) + 1;
10047006:	4b38      	ldr	r3, [pc, #224]	@ (100470e8 <_configureTxRxDelay+0xf0>)
10047008:	7b9b      	ldrb	r3, [r3, #14]
1004700a:	b2db      	uxtb	r3, r3
1004700c:	2b00      	cmp	r3, #0
1004700e:	da00      	bge.n	10047012 <_configureTxRxDelay+0x1a>
10047010:	3307      	adds	r3, #7
10047012:	10db      	asrs	r3, r3, #3
10047014:	b2da      	uxtb	r2, r3
10047016:	240f      	movs	r4, #15
10047018:	193b      	adds	r3, r7, r4
1004701a:	3201      	adds	r2, #1
1004701c:	701a      	strb	r2, [r3, #0]

  BLUEGLOB->WAKEUPINITDELAY =  blue_unit_conversion(WAKEUP_INIT_DELAY, context->calibrationData.freq1, MULT64_THR_FREQ);
1004701e:	687b      	ldr	r3, [r7, #4]
10047020:	699b      	ldr	r3, [r3, #24]
10047022:	0019      	movs	r1, r3
10047024:	4b31      	ldr	r3, [pc, #196]	@ (100470ec <_configureTxRxDelay+0xf4>)
10047026:	001a      	movs	r2, r3
10047028:	201b      	movs	r0, #27
1004702a:	f7f9 f849 	bl	100400c0 <blue_unit_conversion>
1004702e:	0002      	movs	r2, r0
10047030:	4b2d      	ldr	r3, [pc, #180]	@ (100470e8 <_configureTxRxDelay+0xf0>)
10047032:	b2d2      	uxtb	r2, r2
10047034:	715a      	strb	r2, [r3, #5]
  context->TxRxDelay.tim12_delay_mt = _us_to_machinetime(BLUEGLOB->TIMER12INITDELAYCAL);
10047036:	4b2c      	ldr	r3, [pc, #176]	@ (100470e8 <_configureTxRxDelay+0xf0>)
10047038:	799b      	ldrb	r3, [r3, #6]
1004703a:	b2db      	uxtb	r3, r3
1004703c:	0018      	movs	r0, r3
1004703e:	f000 f86d 	bl	1004711c <_us_to_machinetime>
10047042:	0003      	movs	r3, r0
10047044:	b2d9      	uxtb	r1, r3
10047046:	687b      	ldr	r3, [r7, #4]
10047048:	223d      	movs	r2, #61	@ 0x3d
1004704a:	5499      	strb	r1, [r3, r2]
  context->TxRxDelay.tx_cal_delay = _us_to_machinetime(BLUEGLOB->TRANSMITCALDELAYCHK + tx_delay_start);
1004704c:	4b26      	ldr	r3, [pc, #152]	@ (100470e8 <_configureTxRxDelay+0xf0>)
1004704e:	7a1b      	ldrb	r3, [r3, #8]
10047050:	b2db      	uxtb	r3, r3
10047052:	001a      	movs	r2, r3
10047054:	193b      	adds	r3, r7, r4
10047056:	781b      	ldrb	r3, [r3, #0]
10047058:	18d3      	adds	r3, r2, r3
1004705a:	0018      	movs	r0, r3
1004705c:	f000 f85e 	bl	1004711c <_us_to_machinetime>
10047060:	0003      	movs	r3, r0
10047062:	b2d9      	uxtb	r1, r3
10047064:	687b      	ldr	r3, [r7, #4]
10047066:	2238      	movs	r2, #56	@ 0x38
10047068:	5499      	strb	r1, [r3, r2]
  context->TxRxDelay.tx_no_cal_delay = _us_to_machinetime(BLUEGLOB->TRANSMITNOCALDELAYCHK + tx_delay_start);
1004706a:	4b1f      	ldr	r3, [pc, #124]	@ (100470e8 <_configureTxRxDelay+0xf0>)
1004706c:	7a5b      	ldrb	r3, [r3, #9]
1004706e:	b2db      	uxtb	r3, r3
10047070:	001a      	movs	r2, r3
10047072:	193b      	adds	r3, r7, r4
10047074:	781b      	ldrb	r3, [r3, #0]
10047076:	18d3      	adds	r3, r2, r3
10047078:	0018      	movs	r0, r3
1004707a:	f000 f84f 	bl	1004711c <_us_to_machinetime>
1004707e:	0003      	movs	r3, r0
10047080:	b2d9      	uxtb	r1, r3
10047082:	687b      	ldr	r3, [r7, #4]
10047084:	2239      	movs	r2, #57	@ 0x39
10047086:	5499      	strb	r1, [r3, r2]
  context->TxRxDelay.rx_cal_delay = _us_to_machinetime(BLUEGLOB->RECEIVECALDELAYCHK);
10047088:	4b17      	ldr	r3, [pc, #92]	@ (100470e8 <_configureTxRxDelay+0xf0>)
1004708a:	7a9b      	ldrb	r3, [r3, #10]
1004708c:	b2db      	uxtb	r3, r3
1004708e:	0018      	movs	r0, r3
10047090:	f000 f844 	bl	1004711c <_us_to_machinetime>
10047094:	0003      	movs	r3, r0
10047096:	b2d9      	uxtb	r1, r3
10047098:	687b      	ldr	r3, [r7, #4]
1004709a:	223a      	movs	r2, #58	@ 0x3a
1004709c:	5499      	strb	r1, [r3, r2]
  context->TxRxDelay.rx_no_cal_delay = _us_to_machinetime(BLUEGLOB->RECEIVENOCALDELAYCHK);
1004709e:	4b12      	ldr	r3, [pc, #72]	@ (100470e8 <_configureTxRxDelay+0xf0>)
100470a0:	7adb      	ldrb	r3, [r3, #11]
100470a2:	b2db      	uxtb	r3, r3
100470a4:	0018      	movs	r0, r3
100470a6:	f000 f839 	bl	1004711c <_us_to_machinetime>
100470aa:	0003      	movs	r3, r0
100470ac:	b2d9      	uxtb	r1, r3
100470ae:	687b      	ldr	r3, [r7, #4]
100470b0:	223b      	movs	r2, #59	@ 0x3b
100470b2:	5499      	strb	r1, [r3, r2]

  if (calculate_st)
100470b4:	1cfb      	adds	r3, r7, #3
100470b6:	781b      	ldrb	r3, [r3, #0]
100470b8:	2b00      	cmp	r3, #0
100470ba:	d010      	beq.n	100470de <_configureTxRxDelay+0xe6>
  {
    context->TxRxDelay.tx_cal_delay_st    = _us_to_systime(BLUEGLOB->TRANSMITCALDELAYCHK + tx_delay_start) + WAKEUP_INIT_DELAY;
100470bc:	4b0a      	ldr	r3, [pc, #40]	@ (100470e8 <_configureTxRxDelay+0xf0>)
100470be:	7a1b      	ldrb	r3, [r3, #8]
100470c0:	b2db      	uxtb	r3, r3
100470c2:	001a      	movs	r2, r3
100470c4:	193b      	adds	r3, r7, r4
100470c6:	781b      	ldrb	r3, [r3, #0]
100470c8:	18d3      	adds	r3, r2, r3
100470ca:	0018      	movs	r0, r3
100470cc:	f000 f810 	bl	100470f0 <_us_to_systime>
100470d0:	0003      	movs	r3, r0
100470d2:	b2db      	uxtb	r3, r3
100470d4:	331b      	adds	r3, #27
100470d6:	b2d9      	uxtb	r1, r3
100470d8:	687b      	ldr	r3, [r7, #4]
100470da:	223c      	movs	r2, #60	@ 0x3c
100470dc:	5499      	strb	r1, [r3, r2]
  }

}
100470de:	46c0      	nop			@ (mov r8, r8)
100470e0:	46bd      	mov	sp, r7
100470e2:	b005      	add	sp, #20
100470e4:	bd90      	pop	{r4, r7, pc}
100470e6:	46c0      	nop			@ (mov r8, r8)
100470e8:	200000c0 	.word	0x200000c0
100470ec:	00000326 	.word	0x00000326

100470f0 <_us_to_systime>:

static uint32_t _us_to_systime(uint32_t time)
{
100470f0:	b580      	push	{r7, lr}
100470f2:	b084      	sub	sp, #16
100470f4:	af00      	add	r7, sp, #0
100470f6:	6078      	str	r0, [r7, #4]
  uint32_t t1, t2;
  t1 = time * 0x68;
100470f8:	687b      	ldr	r3, [r7, #4]
100470fa:	2268      	movs	r2, #104	@ 0x68
100470fc:	4353      	muls	r3, r2
100470fe:	60fb      	str	r3, [r7, #12]
  t2 = time * 0xDB;
10047100:	687b      	ldr	r3, [r7, #4]
10047102:	22db      	movs	r2, #219	@ 0xdb
10047104:	4353      	muls	r3, r2
10047106:	60bb      	str	r3, [r7, #8]
  return (t1 >> 8) + (t2 >> 16);
10047108:	68fb      	ldr	r3, [r7, #12]
1004710a:	0a1a      	lsrs	r2, r3, #8
1004710c:	68bb      	ldr	r3, [r7, #8]
1004710e:	0c1b      	lsrs	r3, r3, #16
10047110:	18d3      	adds	r3, r2, r3
}
10047112:	0018      	movs	r0, r3
10047114:	46bd      	mov	sp, r7
10047116:	b004      	add	sp, #16
10047118:	bd80      	pop	{r7, pc}
	...

1004711c <_us_to_machinetime>:

static uint32_t _us_to_machinetime(uint32_t time)
{
1004711c:	b5b0      	push	{r4, r5, r7, lr}
1004711e:	b088      	sub	sp, #32
10047120:	af00      	add	r7, sp, #0
10047122:	60f8      	str	r0, [r7, #12]
  uint64_t tmp = (uint64_t)RADIO_TIMER_Context.calibrationData.freq * (uint64_t)time * (uint64_t)3U;
10047124:	4915      	ldr	r1, [pc, #84]	@ (1004717c <_us_to_machinetime+0x60>)
10047126:	6949      	ldr	r1, [r1, #20]
10047128:	6039      	str	r1, [r7, #0]
1004712a:	2100      	movs	r1, #0
1004712c:	6079      	str	r1, [r7, #4]
1004712e:	68f9      	ldr	r1, [r7, #12]
10047130:	000a      	movs	r2, r1
10047132:	2100      	movs	r1, #0
10047134:	000b      	movs	r3, r1
10047136:	6838      	ldr	r0, [r7, #0]
10047138:	6879      	ldr	r1, [r7, #4]
1004713a:	f7f9 f979 	bl	10040430 <__aeabi_lmul>
1004713e:	0002      	movs	r2, r0
10047140:	000b      	movs	r3, r1
10047142:	0010      	movs	r0, r2
10047144:	0019      	movs	r1, r3
10047146:	0002      	movs	r2, r0
10047148:	000b      	movs	r3, r1
1004714a:	1892      	adds	r2, r2, r2
1004714c:	415b      	adcs	r3, r3
1004714e:	1812      	adds	r2, r2, r0
10047150:	414b      	adcs	r3, r1
10047152:	61ba      	str	r2, [r7, #24]
10047154:	61fb      	str	r3, [r7, #28]
  uint32_t time_mt = ((tmp + (1 << 26)) >> 27) & TIMER_MAX_VALUE;
10047156:	69ba      	ldr	r2, [r7, #24]
10047158:	69fb      	ldr	r3, [r7, #28]
1004715a:	2080      	movs	r0, #128	@ 0x80
1004715c:	04c0      	lsls	r0, r0, #19
1004715e:	2100      	movs	r1, #0
10047160:	1812      	adds	r2, r2, r0
10047162:	414b      	adcs	r3, r1
10047164:	0159      	lsls	r1, r3, #5
10047166:	0ed4      	lsrs	r4, r2, #27
10047168:	430c      	orrs	r4, r1
1004716a:	0edd      	lsrs	r5, r3, #27
1004716c:	0023      	movs	r3, r4
1004716e:	617b      	str	r3, [r7, #20]

  return time_mt;
10047170:	697b      	ldr	r3, [r7, #20]
}
10047172:	0018      	movs	r0, r3
10047174:	46bd      	mov	sp, r7
10047176:	b008      	add	sp, #32
10047178:	bdb0      	pop	{r4, r5, r7, pc}
1004717a:	46c0      	nop			@ (mov r8, r8)
1004717c:	20000598 	.word	0x20000598

10047180 <_update_xtal_startup_time>:

static void _update_xtal_startup_time(uint16_t hs_startup_time, int32_t freq1)
{
10047180:	b580      	push	{r7, lr}
10047182:	b084      	sub	sp, #16
10047184:	af00      	add	r7, sp, #0
10047186:	0002      	movs	r2, r0
10047188:	6039      	str	r1, [r7, #0]
1004718a:	1dbb      	adds	r3, r7, #6
1004718c:	801a      	strh	r2, [r3, #0]
  int32_t time1;

  time1 = blue_unit_conversion(hs_startup_time, freq1, MULT64_THR_FREQ);
1004718e:	1dbb      	adds	r3, r7, #6
10047190:	881b      	ldrh	r3, [r3, #0]
10047192:	6839      	ldr	r1, [r7, #0]
10047194:	4a0e      	ldr	r2, [pc, #56]	@ (100471d0 <_update_xtal_startup_time+0x50>)
10047196:	0018      	movs	r0, r3
10047198:	f7f8 ff92 	bl	100400c0 <blue_unit_conversion>
1004719c:	0003      	movs	r3, r0
1004719e:	60fb      	str	r3, [r7, #12]
  if (time1 >= 4096)
100471a0:	68fa      	ldr	r2, [r7, #12]
100471a2:	2380      	movs	r3, #128	@ 0x80
100471a4:	015b      	lsls	r3, r3, #5
100471a6:	429a      	cmp	r2, r3
100471a8:	db01      	blt.n	100471ae <_update_xtal_startup_time+0x2e>
  {
    time1 = 4095;
100471aa:	4b0a      	ldr	r3, [pc, #40]	@ (100471d4 <_update_xtal_startup_time+0x54>)
100471ac:	60fb      	str	r3, [r7, #12]
  }
  if (time1 < 16)
100471ae:	68fb      	ldr	r3, [r7, #12]
100471b0:	2b0f      	cmp	r3, #15
100471b2:	dc01      	bgt.n	100471b8 <_update_xtal_startup_time+0x38>
  {
    time1 = 16;
100471b4:	2310      	movs	r3, #16
100471b6:	60fb      	str	r3, [r7, #12]
  }
  LL_RADIO_TIMER_SetWakeupOffset(WAKEUP, (time1 >> 4));
100471b8:	68fb      	ldr	r3, [r7, #12]
100471ba:	111b      	asrs	r3, r3, #4
100471bc:	b2db      	uxtb	r3, r3
100471be:	4a06      	ldr	r2, [pc, #24]	@ (100471d8 <_update_xtal_startup_time+0x58>)
100471c0:	0019      	movs	r1, r3
100471c2:	0010      	movs	r0, r2
100471c4:	f7ff f8bc 	bl	10046340 <LL_RADIO_TIMER_SetWakeupOffset>
}
100471c8:	46c0      	nop			@ (mov r8, r8)
100471ca:	46bd      	mov	sp, r7
100471cc:	b004      	add	sp, #16
100471ce:	bd80      	pop	{r7, pc}
100471d0:	00000326 	.word	0x00000326
100471d4:	00000fff 	.word	0x00000fff
100471d8:	60001800 	.word	0x60001800

100471dc <_calibration_callback>:

static void _calibration_callback(void *handle)
{
100471dc:	b580      	push	{r7, lr}
100471de:	b082      	sub	sp, #8
100471e0:	af00      	add	r7, sp, #0
100471e2:	6078      	str	r0, [r7, #4]
  if (RADIO_TIMER_Context.calibrationSettings.periodicCalibration)
100471e4:	4b06      	ldr	r3, [pc, #24]	@ (10047200 <_calibration_callback+0x24>)
100471e6:	781b      	ldrb	r3, [r3, #0]
100471e8:	2b00      	cmp	r3, #0
100471ea:	d001      	beq.n	100471f0 <_calibration_callback+0x14>
  {
    _timer_start_calibration();
100471ec:	f7ff fe74 	bl	10046ed8 <_timer_start_calibration>
  }
  RADIO_TIMER_Context.calibrationSettings.calibration_in_progress = TRUE;
100471f0:	4b03      	ldr	r3, [pc, #12]	@ (10047200 <_calibration_callback+0x24>)
100471f2:	2201      	movs	r2, #1
100471f4:	721a      	strb	r2, [r3, #8]
}
100471f6:	46c0      	nop			@ (mov r8, r8)
100471f8:	46bd      	mov	sp, r7
100471fa:	b002      	add	sp, #8
100471fc:	bd80      	pop	{r7, pc}
100471fe:	46c0      	nop			@ (mov r8, r8)
10047200:	20000598 	.word	0x20000598

10047204 <_start_timer>:

static int32_t _start_timer(VTIMER_HandleType *timerHandle, uint64_t time)
{
10047204:	b590      	push	{r4, r7, lr}
10047206:	b089      	sub	sp, #36	@ 0x24
10047208:	af00      	add	r7, sp, #0
1004720a:	60f8      	str	r0, [r7, #12]
1004720c:	603a      	str	r2, [r7, #0]
1004720e:	607b      	str	r3, [r7, #4]
  uint8_t expired = 0;
10047210:	2313      	movs	r3, #19
10047212:	18fb      	adds	r3, r7, r3
10047214:	2200      	movs	r2, #0
10047216:	701a      	strb	r2, [r3, #0]

  /* The timer is already started*/
  if (timerHandle->active)
10047218:	68fb      	ldr	r3, [r7, #12]
1004721a:	7b1b      	ldrb	r3, [r3, #12]
1004721c:	2b00      	cmp	r3, #0
1004721e:	d001      	beq.n	10047224 <_start_timer+0x20>
  {
    return 1;
10047220:	2301      	movs	r3, #1
10047222:	e047      	b.n	100472b4 <_start_timer+0xb0>
  }
  timerHandle->expiryTime = time;
10047224:	68f9      	ldr	r1, [r7, #12]
10047226:	683a      	ldr	r2, [r7, #0]
10047228:	687b      	ldr	r3, [r7, #4]
1004722a:	600a      	str	r2, [r1, #0]
1004722c:	604b      	str	r3, [r1, #4]
  timerHandle->active = TRUE;
1004722e:	68fb      	ldr	r3, [r7, #12]
10047230:	2201      	movs	r2, #1
10047232:	731a      	strb	r2, [r3, #12]
  if (_insert_timer_in_queue(RADIO_TIMER_Context.rootNode, timerHandle) == timerHandle)
10047234:	4b21      	ldr	r3, [pc, #132]	@ (100472bc <_start_timer+0xb8>)
10047236:	228c      	movs	r2, #140	@ 0x8c
10047238:	589b      	ldr	r3, [r3, r2]
1004723a:	68fa      	ldr	r2, [r7, #12]
1004723c:	0011      	movs	r1, r2
1004723e:	0018      	movs	r0, r3
10047240:	f000 f95c 	bl	100474fc <_insert_timer_in_queue>
10047244:	0002      	movs	r2, r0
10047246:	68fb      	ldr	r3, [r7, #12]
10047248:	4293      	cmp	r3, r2
1004724a:	d130      	bne.n	100472ae <_start_timer+0xaa>
  {
    RADIO_TIMER_Context.rootNode = _update_user_timeout(timerHandle, &expired);
1004724c:	2413      	movs	r4, #19
1004724e:	193a      	adds	r2, r7, r4
10047250:	68fb      	ldr	r3, [r7, #12]
10047252:	0011      	movs	r1, r2
10047254:	0018      	movs	r0, r3
10047256:	f000 f89b 	bl	10047390 <_update_user_timeout>
1004725a:	0002      	movs	r2, r0
1004725c:	4b17      	ldr	r3, [pc, #92]	@ (100472bc <_start_timer+0xb8>)
1004725e:	218c      	movs	r1, #140	@ 0x8c
10047260:	505a      	str	r2, [r3, r1]
    if (expired)
10047262:	193b      	adds	r3, r7, r4
10047264:	781b      	ldrb	r3, [r3, #0]
10047266:	2b00      	cmp	r3, #0
10047268:	d021      	beq.n	100472ae <_start_timer+0xaa>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
1004726a:	f3ef 8310 	mrs	r3, PRIMASK
1004726e:	61bb      	str	r3, [r7, #24]
  return(result);
10047270:	69bb      	ldr	r3, [r7, #24]
    {
      /* A new root timer is already expired, mimic timer expire that is normally signaled
       through the interrupt handler that increase the number of expired timers*/
      INCREMENT_EXPIRE_COUNT;
10047272:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
10047274:	b672      	cpsid	i
}
10047276:	46c0      	nop			@ (mov r8, r8)
10047278:	4b10      	ldr	r3, [pc, #64]	@ (100472bc <_start_timer+0xb8>)
1004727a:	2291      	movs	r2, #145	@ 0x91
1004727c:	5c9b      	ldrb	r3, [r3, r2]
1004727e:	3301      	adds	r3, #1
10047280:	4a0e      	ldr	r2, [pc, #56]	@ (100472bc <_start_timer+0xb8>)
10047282:	2192      	movs	r1, #146	@ 0x92
10047284:	5c52      	ldrb	r2, [r2, r1]
10047286:	4293      	cmp	r3, r2
10047288:	d103      	bne.n	10047292 <_start_timer+0x8e>
1004728a:	4b0c      	ldr	r3, [pc, #48]	@ (100472bc <_start_timer+0xb8>)
1004728c:	2291      	movs	r2, #145	@ 0x91
1004728e:	5c9b      	ldrb	r3, [r3, r2]
10047290:	e004      	b.n	1004729c <_start_timer+0x98>
10047292:	4b0a      	ldr	r3, [pc, #40]	@ (100472bc <_start_timer+0xb8>)
10047294:	2291      	movs	r2, #145	@ 0x91
10047296:	5c9b      	ldrb	r3, [r3, r2]
10047298:	3301      	adds	r3, #1
1004729a:	b2db      	uxtb	r3, r3
1004729c:	4a07      	ldr	r2, [pc, #28]	@ (100472bc <_start_timer+0xb8>)
1004729e:	2191      	movs	r1, #145	@ 0x91
100472a0:	5453      	strb	r3, [r2, r1]
100472a2:	69fb      	ldr	r3, [r7, #28]
100472a4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
100472a6:	697b      	ldr	r3, [r7, #20]
100472a8:	f383 8810 	msr	PRIMASK, r3
}
100472ac:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return expired;
100472ae:	2313      	movs	r3, #19
100472b0:	18fb      	adds	r3, r7, r3
100472b2:	781b      	ldrb	r3, [r3, #0]
}
100472b4:	0018      	movs	r0, r3
100472b6:	46bd      	mov	sp, r7
100472b8:	b009      	add	sp, #36	@ 0x24
100472ba:	bd90      	pop	{r4, r7, pc}
100472bc:	20000598 	.word	0x20000598

100472c0 <_get_system_time_and_machine>:

static uint64_t _get_system_time_and_machine(RADIO_TIMER_ContextTypeDef *context, uint32_t *current_machine_time)
{
100472c0:	b5b0      	push	{r4, r5, r7, lr}
100472c2:	b08a      	sub	sp, #40	@ 0x28
100472c4:	af00      	add	r7, sp, #0
100472c6:	60f8      	str	r0, [r7, #12]
100472c8:	60b9      	str	r1, [r7, #8]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
100472ca:	f3ef 8310 	mrs	r3, PRIMASK
100472ce:	617b      	str	r3, [r7, #20]
  return(result);
100472d0:	697b      	ldr	r3, [r7, #20]
  uint32_t difftime;
  uint64_t new_time;

  ATOMIC_SECTION_BEGIN();
100472d2:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
100472d4:	b672      	cpsid	i
}
100472d6:	46c0      	nop			@ (mov r8, r8)
  new_time = context->cumulative_time;
100472d8:	68fb      	ldr	r3, [r7, #12]
100472da:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
100472dc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
100472de:	623a      	str	r2, [r7, #32]
100472e0:	627b      	str	r3, [r7, #36]	@ 0x24
  *current_machine_time =  LL_RADIO_TIMER_GetAbsoluteTime(WAKEUP);
100472e2:	4b29      	ldr	r3, [pc, #164]	@ (10047388 <_get_system_time_and_machine+0xc8>)
100472e4:	0018      	movs	r0, r3
100472e6:	f7ff f85c 	bl	100463a2 <LL_RADIO_TIMER_GetAbsoluteTime>
100472ea:	0002      	movs	r2, r0
100472ec:	68bb      	ldr	r3, [r7, #8]
100472ee:	601a      	str	r2, [r3, #0]
  difftime = TIME_ABSDIFF(*current_machine_time, context->last_machine_time);
100472f0:	68bb      	ldr	r3, [r7, #8]
100472f2:	681a      	ldr	r2, [r3, #0]
100472f4:	68fb      	ldr	r3, [r7, #12]
100472f6:	2180      	movs	r1, #128	@ 0x80
100472f8:	585b      	ldr	r3, [r3, r1]
100472fa:	1ad3      	subs	r3, r2, r3
100472fc:	61bb      	str	r3, [r7, #24]
  new_time += blue_unit_conversion(difftime, context->calibrationData.period1, MULT64_THR_PERIOD);
100472fe:	68fb      	ldr	r3, [r7, #12]
10047300:	69db      	ldr	r3, [r3, #28]
10047302:	0019      	movs	r1, r3
10047304:	4a21      	ldr	r2, [pc, #132]	@ (1004738c <_get_system_time_and_machine+0xcc>)
10047306:	69bb      	ldr	r3, [r7, #24]
10047308:	0018      	movs	r0, r3
1004730a:	f7f8 fed9 	bl	100400c0 <blue_unit_conversion>
1004730e:	0003      	movs	r3, r0
10047310:	603b      	str	r3, [r7, #0]
10047312:	2300      	movs	r3, #0
10047314:	607b      	str	r3, [r7, #4]
10047316:	6a3a      	ldr	r2, [r7, #32]
10047318:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
1004731a:	6838      	ldr	r0, [r7, #0]
1004731c:	6879      	ldr	r1, [r7, #4]
1004731e:	1812      	adds	r2, r2, r0
10047320:	414b      	adcs	r3, r1
10047322:	623a      	str	r2, [r7, #32]
10047324:	627b      	str	r3, [r7, #36]	@ 0x24
  if (new_time < context->last_system_time)
10047326:	68fb      	ldr	r3, [r7, #12]
10047328:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
1004732a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
1004732c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
1004732e:	4299      	cmp	r1, r3
10047330:	d305      	bcc.n	1004733e <_get_system_time_and_machine+0x7e>
10047332:	6a79      	ldr	r1, [r7, #36]	@ 0x24
10047334:	4299      	cmp	r1, r3
10047336:	d115      	bne.n	10047364 <_get_system_time_and_machine+0xa4>
10047338:	6a39      	ldr	r1, [r7, #32]
1004733a:	4291      	cmp	r1, r2
1004733c:	d212      	bcs.n	10047364 <_get_system_time_and_machine+0xa4>
  {
    new_time += blue_unit_conversion(TIMER_MAX_VALUE, context->calibrationData.period1, MULT64_THR_PERIOD);
1004733e:	68fb      	ldr	r3, [r7, #12]
10047340:	69db      	ldr	r3, [r3, #28]
10047342:	0019      	movs	r1, r3
10047344:	4a11      	ldr	r2, [pc, #68]	@ (1004738c <_get_system_time_and_machine+0xcc>)
10047346:	2301      	movs	r3, #1
10047348:	425b      	negs	r3, r3
1004734a:	0018      	movs	r0, r3
1004734c:	f7f8 feb8 	bl	100400c0 <blue_unit_conversion>
10047350:	0003      	movs	r3, r0
10047352:	001c      	movs	r4, r3
10047354:	2300      	movs	r3, #0
10047356:	001d      	movs	r5, r3
10047358:	6a3a      	ldr	r2, [r7, #32]
1004735a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
1004735c:	1912      	adds	r2, r2, r4
1004735e:	416b      	adcs	r3, r5
10047360:	623a      	str	r2, [r7, #32]
10047362:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  context->last_system_time = new_time;
10047364:	68f9      	ldr	r1, [r7, #12]
10047366:	6a3a      	ldr	r2, [r7, #32]
10047368:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
1004736a:	678a      	str	r2, [r1, #120]	@ 0x78
1004736c:	67cb      	str	r3, [r1, #124]	@ 0x7c
1004736e:	69fb      	ldr	r3, [r7, #28]
10047370:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
10047372:	693b      	ldr	r3, [r7, #16]
10047374:	f383 8810 	msr	PRIMASK, r3
}
10047378:	46c0      	nop			@ (mov r8, r8)
  ATOMIC_SECTION_END();

  return new_time;
1004737a:	6a3a      	ldr	r2, [r7, #32]
1004737c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
1004737e:	0010      	movs	r0, r2
10047380:	0019      	movs	r1, r3
10047382:	46bd      	mov	sp, r7
10047384:	b00a      	add	sp, #40	@ 0x28
10047386:	bdb0      	pop	{r4, r5, r7, pc}
10047388:	60001800 	.word	0x60001800
1004738c:	00000635 	.word	0x00000635

10047390 <_update_user_timeout>:

/* Set timeout and skip non active timers */
static VTIMER_HandleType *_update_user_timeout(VTIMER_HandleType *rootNode, uint8_t *expired)
{
10047390:	b5b0      	push	{r4, r5, r7, lr}
10047392:	b08e      	sub	sp, #56	@ 0x38
10047394:	af00      	add	r7, sp, #0
10047396:	60f8      	str	r0, [r7, #12]
10047398:	60b9      	str	r1, [r7, #8]
  VTIMER_HandleType *curr = rootNode;
1004739a:	68fb      	ldr	r3, [r7, #12]
1004739c:	637b      	str	r3, [r7, #52]	@ 0x34
  VTIMER_HandleType *rootOrig = rootNode;
1004739e:	68fb      	ldr	r3, [r7, #12]
100473a0:	633b      	str	r3, [r7, #48]	@ 0x30
  int64_t delay;
  *expired = 0;
100473a2:	68bb      	ldr	r3, [r7, #8]
100473a4:	2200      	movs	r2, #0
100473a6:	701a      	strb	r2, [r3, #0]
  while (curr != NULL)
100473a8:	e094      	b.n	100474d4 <_update_user_timeout+0x144>
  {
    if (curr->active)
100473aa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
100473ac:	7b1b      	ldrb	r3, [r3, #12]
100473ae:	2b00      	cmp	r3, #0
100473b0:	d100      	bne.n	100473b4 <_update_user_timeout+0x24>
100473b2:	e08c      	b.n	100474ce <_update_user_timeout+0x13e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
100473b4:	f3ef 8310 	mrs	r3, PRIMASK
100473b8:	61fb      	str	r3, [r7, #28]
  return(result);
100473ba:	69fb      	ldr	r3, [r7, #28]
    {
      ATOMIC_SECTION_BEGIN();
100473bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("cpsid i" : : : "memory");
100473be:	b672      	cpsid	i
}
100473c0:	46c0      	nop			@ (mov r8, r8)
#if defined (STM32WB06) || defined (STM32WB07)
      uint8_t dummy;
      bool share = FALSE;
100473c2:	230e      	movs	r3, #14
100473c4:	2108      	movs	r1, #8
100473c6:	185b      	adds	r3, r3, r1
100473c8:	19db      	adds	r3, r3, r7
100473ca:	2200      	movs	r2, #0
100473cc:	701a      	strb	r2, [r3, #0]
      _check_radio_activity(&RADIO_TIMER_Context.radioTimer, &dummy);
100473ce:	230f      	movs	r3, #15
100473d0:	185b      	adds	r3, r3, r1
100473d2:	19da      	adds	r2, r3, r7
100473d4:	4b47      	ldr	r3, [pc, #284]	@ (100474f4 <_update_user_timeout+0x164>)
100473d6:	0011      	movs	r1, r2
100473d8:	0018      	movs	r0, r3
100473da:	f000 f9f5 	bl	100477c8 <_check_radio_activity>
#endif
      delay = curr->expiryTime - HAL_RADIO_TIMER_GetCurrentSysTime();
100473de:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
100473e0:	681c      	ldr	r4, [r3, #0]
100473e2:	685d      	ldr	r5, [r3, #4]
100473e4:	f7ff fc8c 	bl	10046d00 <HAL_RADIO_TIMER_GetCurrentSysTime>
100473e8:	0002      	movs	r2, r0
100473ea:	000b      	movs	r3, r1
100473ec:	1aa4      	subs	r4, r4, r2
100473ee:	419d      	sbcs	r5, r3
100473f0:	0022      	movs	r2, r4
100473f2:	002b      	movs	r3, r5
100473f4:	623a      	str	r2, [r7, #32]
100473f6:	627b      	str	r3, [r7, #36]	@ 0x24
      if (delay > 0)
100473f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
100473fa:	2b00      	cmp	r3, #0
100473fc:	dc05      	bgt.n	1004740a <_update_user_timeout+0x7a>
100473fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10047400:	2b00      	cmp	r3, #0
10047402:	d15a      	bne.n	100474ba <_update_user_timeout+0x12a>
10047404:	6a3b      	ldr	r3, [r7, #32]
10047406:	2b00      	cmp	r3, #0
10047408:	d057      	beq.n	100474ba <_update_user_timeout+0x12a>
         /* Protection against interrupt must be used to avoid that the called function will be interrupted
          and so the timer programming will happen after the target time is already passed
          leading to a timer expiring after timer wraps, instead of the expected delay */
#if defined (STM32WB06) || defined (STM32WB07)
        /* Is the active radio operation before or too close the host timeout? */
        if (((RADIO_TIMER_Context.radioTimer.expiryTime) < (curr->expiryTime + RADIO_TIMER_Context.hostMargin))
1004740a:	4b3b      	ldr	r3, [pc, #236]	@ (100474f8 <_update_user_timeout+0x168>)
1004740c:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
1004740e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
10047410:	6b79      	ldr	r1, [r7, #52]	@ 0x34
10047412:	6808      	ldr	r0, [r1, #0]
10047414:	6849      	ldr	r1, [r1, #4]
10047416:	4c38      	ldr	r4, [pc, #224]	@ (100474f8 <_update_user_timeout+0x168>)
10047418:	2598      	movs	r5, #152	@ 0x98
1004741a:	5964      	ldr	r4, [r4, r5]
1004741c:	603c      	str	r4, [r7, #0]
1004741e:	2400      	movs	r4, #0
10047420:	607c      	str	r4, [r7, #4]
10047422:	683c      	ldr	r4, [r7, #0]
10047424:	687d      	ldr	r5, [r7, #4]
10047426:	1900      	adds	r0, r0, r4
10047428:	4169      	adcs	r1, r5
1004742a:	4299      	cmp	r1, r3
1004742c:	d802      	bhi.n	10047434 <_update_user_timeout+0xa4>
1004742e:	d11b      	bne.n	10047468 <_update_user_timeout+0xd8>
10047430:	4290      	cmp	r0, r2
10047432:	d919      	bls.n	10047468 <_update_user_timeout+0xd8>
            && RADIO_TIMER_Context.radioTimer.active)
10047434:	4b30      	ldr	r3, [pc, #192]	@ (100474f8 <_update_user_timeout+0x168>)
10047436:	2261      	movs	r2, #97	@ 0x61
10047438:	5c9b      	ldrb	r3, [r3, r2]
1004743a:	2b00      	cmp	r3, #0
1004743c:	d014      	beq.n	10047468 <_update_user_timeout+0xd8>
        {
          if ((RADIO_TIMER_Context.radioTimer.expiryTime >= curr->expiryTime) && RADIO_TIMER_Context.radioTimer.active)
1004743e:	4b2e      	ldr	r3, [pc, #184]	@ (100474f8 <_update_user_timeout+0x168>)
10047440:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
10047442:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
10047444:	6b79      	ldr	r1, [r7, #52]	@ 0x34
10047446:	6808      	ldr	r0, [r1, #0]
10047448:	6849      	ldr	r1, [r1, #4]
1004744a:	4299      	cmp	r1, r3
1004744c:	d813      	bhi.n	10047476 <_update_user_timeout+0xe6>
1004744e:	d101      	bne.n	10047454 <_update_user_timeout+0xc4>
10047450:	4290      	cmp	r0, r2
10047452:	d810      	bhi.n	10047476 <_update_user_timeout+0xe6>
10047454:	4b28      	ldr	r3, [pc, #160]	@ (100474f8 <_update_user_timeout+0x168>)
10047456:	2261      	movs	r2, #97	@ 0x61
10047458:	5c9b      	ldrb	r3, [r3, r2]
1004745a:	2b00      	cmp	r3, #0
1004745c:	d00b      	beq.n	10047476 <_update_user_timeout+0xe6>
          {
            RADIO_TIMER_Context.hostIsRadioPending = 1;
1004745e:	4b26      	ldr	r3, [pc, #152]	@ (100474f8 <_update_user_timeout+0x168>)
10047460:	2295      	movs	r2, #149	@ 0x95
10047462:	2101      	movs	r1, #1
10047464:	5499      	strb	r1, [r3, r2]
          if ((RADIO_TIMER_Context.radioTimer.expiryTime >= curr->expiryTime) && RADIO_TIMER_Context.radioTimer.active)
10047466:	e006      	b.n	10047476 <_update_user_timeout+0xe6>
          }          
        }
        else
        {
          /* It's fine to program the wakeup timer for an host wakeup */
          share = TRUE;
10047468:	230e      	movs	r3, #14
1004746a:	2208      	movs	r2, #8
1004746c:	189b      	adds	r3, r3, r2
1004746e:	19db      	adds	r3, r3, r7
10047470:	2201      	movs	r2, #1
10047472:	701a      	strb	r2, [r3, #0]
10047474:	e000      	b.n	10047478 <_update_user_timeout+0xe8>
          if ((RADIO_TIMER_Context.radioTimer.expiryTime >= curr->expiryTime) && RADIO_TIMER_Context.radioTimer.active)
10047476:	46c0      	nop			@ (mov r8, r8)
        }
        TIMER_SetRadioHostWakeupTime(delay, &share);
10047478:	6a3b      	ldr	r3, [r7, #32]
1004747a:	240e      	movs	r4, #14
1004747c:	2508      	movs	r5, #8
1004747e:	1962      	adds	r2, r4, r5
10047480:	19d2      	adds	r2, r2, r7
10047482:	0011      	movs	r1, r2
10047484:	0018      	movs	r0, r3
10047486:	f000 fa29 	bl	100478dc <TIMER_SetRadioHostWakeupTime>
        if (share == TRUE)
1004748a:	1963      	adds	r3, r4, r5
1004748c:	19db      	adds	r3, r3, r7
1004748e:	781b      	ldrb	r3, [r3, #0]
10047490:	2b00      	cmp	r3, #0
10047492:	d015      	beq.n	100474c0 <_update_user_timeout+0x130>
        {
          RADIO_TIMER_Context.radioTimer.pending |= RADIO_TIMER_Context.radioTimer.active;
10047494:	4b18      	ldr	r3, [pc, #96]	@ (100474f8 <_update_user_timeout+0x168>)
10047496:	2262      	movs	r2, #98	@ 0x62
10047498:	5c9a      	ldrb	r2, [r3, r2]
1004749a:	4b17      	ldr	r3, [pc, #92]	@ (100474f8 <_update_user_timeout+0x168>)
1004749c:	2161      	movs	r1, #97	@ 0x61
1004749e:	5c5b      	ldrb	r3, [r3, r1]
100474a0:	4313      	orrs	r3, r2
100474a2:	b2db      	uxtb	r3, r3
100474a4:	1e5a      	subs	r2, r3, #1
100474a6:	4193      	sbcs	r3, r2
100474a8:	b2d9      	uxtb	r1, r3
100474aa:	4b13      	ldr	r3, [pc, #76]	@ (100474f8 <_update_user_timeout+0x168>)
100474ac:	2262      	movs	r2, #98	@ 0x62
100474ae:	5499      	strb	r1, [r3, r2]
          RADIO_TIMER_Context.radioTimer.active = FALSE;
100474b0:	4b11      	ldr	r3, [pc, #68]	@ (100474f8 <_update_user_timeout+0x168>)
100474b2:	2261      	movs	r2, #97	@ 0x61
100474b4:	2100      	movs	r1, #0
100474b6:	5499      	strb	r1, [r3, r2]
100474b8:	e002      	b.n	100474c0 <_update_user_timeout+0x130>
        VTIMER_SetWakeupTime(delay, TRUE);
#endif
      }
      else
      {
        *expired = 1;
100474ba:	68bb      	ldr	r3, [r7, #8]
100474bc:	2201      	movs	r2, #1
100474be:	701a      	strb	r2, [r3, #0]
100474c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
100474c2:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
100474c4:	69bb      	ldr	r3, [r7, #24]
100474c6:	f383 8810 	msr	PRIMASK, r3
}
100474ca:	46c0      	nop			@ (mov r8, r8)
      }
      ATOMIC_SECTION_END();
      break;
100474cc:	e006      	b.n	100474dc <_update_user_timeout+0x14c>
    }
    curr = curr->next;
100474ce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
100474d0:	691b      	ldr	r3, [r3, #16]
100474d2:	637b      	str	r3, [r7, #52]	@ 0x34
  while (curr != NULL)
100474d4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
100474d6:	2b00      	cmp	r3, #0
100474d8:	d000      	beq.n	100474dc <_update_user_timeout+0x14c>
100474da:	e766      	b.n	100473aa <_update_user_timeout+0x1a>
  }
  if (*expired)
100474dc:	68bb      	ldr	r3, [r7, #8]
100474de:	781b      	ldrb	r3, [r3, #0]
100474e0:	2b00      	cmp	r3, #0
100474e2:	d001      	beq.n	100474e8 <_update_user_timeout+0x158>
  {
    return rootOrig;
100474e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
100474e6:	e000      	b.n	100474ea <_update_user_timeout+0x15a>
  }

  return curr;
100474e8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
100474ea:	0018      	movs	r0, r3
100474ec:	46bd      	mov	sp, r7
100474ee:	b00e      	add	sp, #56	@ 0x38
100474f0:	bdb0      	pop	{r4, r5, r7, pc}
100474f2:	46c0      	nop			@ (mov r8, r8)
100474f4:	200005f0 	.word	0x200005f0
100474f8:	20000598 	.word	0x20000598

100474fc <_insert_timer_in_queue>:
  return current_time;
}
#endif

static VTIMER_HandleType *_insert_timer_in_queue(VTIMER_HandleType *rootNode, VTIMER_HandleType *handle)
{
100474fc:	b580      	push	{r7, lr}
100474fe:	b086      	sub	sp, #24
10047500:	af00      	add	r7, sp, #0
10047502:	6078      	str	r0, [r7, #4]
10047504:	6039      	str	r1, [r7, #0]
  VTIMER_HandleType *current = rootNode;
10047506:	687b      	ldr	r3, [r7, #4]
10047508:	617b      	str	r3, [r7, #20]
  VTIMER_HandleType *prev = NULL;
1004750a:	2300      	movs	r3, #0
1004750c:	613b      	str	r3, [r7, #16]
  VTIMER_HandleType *returnValue = rootNode;
1004750e:	687b      	ldr	r3, [r7, #4]
10047510:	60fb      	str	r3, [r7, #12]

  while ((current != NULL) && (current->expiryTime < handle->expiryTime))
10047512:	e004      	b.n	1004751e <_insert_timer_in_queue+0x22>
  {
    prev = current;
10047514:	697b      	ldr	r3, [r7, #20]
10047516:	613b      	str	r3, [r7, #16]
    current = current->next;
10047518:	697b      	ldr	r3, [r7, #20]
1004751a:	691b      	ldr	r3, [r3, #16]
1004751c:	617b      	str	r3, [r7, #20]
  while ((current != NULL) && (current->expiryTime < handle->expiryTime))
1004751e:	697b      	ldr	r3, [r7, #20]
10047520:	2b00      	cmp	r3, #0
10047522:	d00a      	beq.n	1004753a <_insert_timer_in_queue+0x3e>
10047524:	697b      	ldr	r3, [r7, #20]
10047526:	681a      	ldr	r2, [r3, #0]
10047528:	685b      	ldr	r3, [r3, #4]
1004752a:	6839      	ldr	r1, [r7, #0]
1004752c:	6808      	ldr	r0, [r1, #0]
1004752e:	6849      	ldr	r1, [r1, #4]
10047530:	4299      	cmp	r1, r3
10047532:	d8ef      	bhi.n	10047514 <_insert_timer_in_queue+0x18>
10047534:	d101      	bne.n	1004753a <_insert_timer_in_queue+0x3e>
10047536:	4290      	cmp	r0, r2
10047538:	d8ec      	bhi.n	10047514 <_insert_timer_in_queue+0x18>
  }

  handle->next = current;
1004753a:	683b      	ldr	r3, [r7, #0]
1004753c:	697a      	ldr	r2, [r7, #20]
1004753e:	611a      	str	r2, [r3, #16]

  if (prev == NULL)
10047540:	693b      	ldr	r3, [r7, #16]
10047542:	2b00      	cmp	r3, #0
10047544:	d102      	bne.n	1004754c <_insert_timer_in_queue+0x50>
  {
    /* We are the new root */
    returnValue = handle;
10047546:	683b      	ldr	r3, [r7, #0]
10047548:	60fb      	str	r3, [r7, #12]
1004754a:	e002      	b.n	10047552 <_insert_timer_in_queue+0x56>
  }
  else
  {
    prev->next = handle;
1004754c:	693b      	ldr	r3, [r7, #16]
1004754e:	683a      	ldr	r2, [r7, #0]
10047550:	611a      	str	r2, [r3, #16]
  }

  return returnValue;
10047552:	68fb      	ldr	r3, [r7, #12]
}
10047554:	0018      	movs	r0, r3
10047556:	46bd      	mov	sp, r7
10047558:	b006      	add	sp, #24
1004755a:	bd80      	pop	{r7, pc}

1004755c <_virtualTimeBaseEnable>:

static void _virtualTimeBaseEnable(FunctionalState state)
{
1004755c:	b580      	push	{r7, lr}
1004755e:	b082      	sub	sp, #8
10047560:	af00      	add	r7, sp, #0
10047562:	0002      	movs	r2, r0
10047564:	1dfb      	adds	r3, r7, #7
10047566:	701a      	strb	r2, [r3, #0]
  if (state != DISABLE)
10047568:	1dfb      	adds	r3, r7, #7
1004756a:	781b      	ldrb	r3, [r3, #0]
1004756c:	2b00      	cmp	r3, #0
1004756e:	d010      	beq.n	10047592 <_virtualTimeBaseEnable+0x36>
  {
    if (RADIO_TIMER_Context.enableTimeBase == FALSE)
10047570:	4b0e      	ldr	r3, [pc, #56]	@ (100475ac <_virtualTimeBaseEnable+0x50>)
10047572:	2290      	movs	r2, #144	@ 0x90
10047574:	5c9b      	ldrb	r3, [r3, r2]
10047576:	2201      	movs	r2, #1
10047578:	4053      	eors	r3, r2
1004757a:	b2db      	uxtb	r3, r3
1004757c:	2b00      	cmp	r3, #0
1004757e:	d010      	beq.n	100475a2 <_virtualTimeBaseEnable+0x46>
    {
      _calibration_callback(&RADIO_TIMER_Context.calibrationTimer);
10047580:	4b0b      	ldr	r3, [pc, #44]	@ (100475b0 <_virtualTimeBaseEnable+0x54>)
10047582:	0018      	movs	r0, r3
10047584:	f7ff fe2a 	bl	100471dc <_calibration_callback>
      RADIO_TIMER_Context.enableTimeBase = TRUE;
10047588:	4b08      	ldr	r3, [pc, #32]	@ (100475ac <_virtualTimeBaseEnable+0x50>)
1004758a:	2290      	movs	r2, #144	@ 0x90
1004758c:	2101      	movs	r1, #1
1004758e:	5499      	strb	r1, [r3, r2]
  else
  {
    HAL_RADIO_TIMER_StopVirtualTimer(&RADIO_TIMER_Context.calibrationTimer);
    RADIO_TIMER_Context.enableTimeBase = FALSE;
  }
}
10047590:	e007      	b.n	100475a2 <_virtualTimeBaseEnable+0x46>
    HAL_RADIO_TIMER_StopVirtualTimer(&RADIO_TIMER_Context.calibrationTimer);
10047592:	4b07      	ldr	r3, [pc, #28]	@ (100475b0 <_virtualTimeBaseEnable+0x54>)
10047594:	0018      	movs	r0, r3
10047596:	f7ff fbc5 	bl	10046d24 <HAL_RADIO_TIMER_StopVirtualTimer>
    RADIO_TIMER_Context.enableTimeBase = FALSE;
1004759a:	4b04      	ldr	r3, [pc, #16]	@ (100475ac <_virtualTimeBaseEnable+0x50>)
1004759c:	2290      	movs	r2, #144	@ 0x90
1004759e:	2100      	movs	r1, #0
100475a0:	5499      	strb	r1, [r3, r2]
}
100475a2:	46c0      	nop			@ (mov r8, r8)
100475a4:	46bd      	mov	sp, r7
100475a6:	b002      	add	sp, #8
100475a8:	bd80      	pop	{r7, pc}
100475aa:	46c0      	nop			@ (mov r8, r8)
100475ac:	20000598 	.word	0x20000598
100475b0:	200005d8 	.word	0x200005d8

100475b4 <_remove_timer_in_queue>:

static VTIMER_HandleType *_remove_timer_in_queue(VTIMER_HandleType *rootNode, VTIMER_HandleType *handle)
{
100475b4:	b580      	push	{r7, lr}
100475b6:	b086      	sub	sp, #24
100475b8:	af00      	add	r7, sp, #0
100475ba:	6078      	str	r0, [r7, #4]
100475bc:	6039      	str	r1, [r7, #0]
  VTIMER_HandleType *current = rootNode;
100475be:	687b      	ldr	r3, [r7, #4]
100475c0:	617b      	str	r3, [r7, #20]
  VTIMER_HandleType *prev = NULL;
100475c2:	2300      	movs	r3, #0
100475c4:	613b      	str	r3, [r7, #16]
  VTIMER_HandleType *returnValue = rootNode;
100475c6:	687b      	ldr	r3, [r7, #4]
100475c8:	60fb      	str	r3, [r7, #12]

  while ((current != NULL) && (current != handle))
100475ca:	e004      	b.n	100475d6 <_remove_timer_in_queue+0x22>
  {
    prev = current;
100475cc:	697b      	ldr	r3, [r7, #20]
100475ce:	613b      	str	r3, [r7, #16]
    current = current->next;
100475d0:	697b      	ldr	r3, [r7, #20]
100475d2:	691b      	ldr	r3, [r3, #16]
100475d4:	617b      	str	r3, [r7, #20]
  while ((current != NULL) && (current != handle))
100475d6:	697b      	ldr	r3, [r7, #20]
100475d8:	2b00      	cmp	r3, #0
100475da:	d003      	beq.n	100475e4 <_remove_timer_in_queue+0x30>
100475dc:	697a      	ldr	r2, [r7, #20]
100475de:	683b      	ldr	r3, [r7, #0]
100475e0:	429a      	cmp	r2, r3
100475e2:	d1f3      	bne.n	100475cc <_remove_timer_in_queue+0x18>
  }

  if (current == NULL)
100475e4:	697b      	ldr	r3, [r7, #20]
100475e6:	2b00      	cmp	r3, #0
100475e8:	d00b      	beq.n	10047602 <_remove_timer_in_queue+0x4e>
  {
    /* Not found */
  }
  else if (current == rootNode)
100475ea:	697a      	ldr	r2, [r7, #20]
100475ec:	687b      	ldr	r3, [r7, #4]
100475ee:	429a      	cmp	r2, r3
100475f0:	d103      	bne.n	100475fa <_remove_timer_in_queue+0x46>
  {
    /* New root node */
    returnValue = current->next;
100475f2:	697b      	ldr	r3, [r7, #20]
100475f4:	691b      	ldr	r3, [r3, #16]
100475f6:	60fb      	str	r3, [r7, #12]
100475f8:	e003      	b.n	10047602 <_remove_timer_in_queue+0x4e>
  }
  else
  {
    prev->next = current->next;
100475fa:	697b      	ldr	r3, [r7, #20]
100475fc:	691a      	ldr	r2, [r3, #16]
100475fe:	693b      	ldr	r3, [r7, #16]
10047600:	611a      	str	r2, [r3, #16]
  }

  return returnValue;
10047602:	68fb      	ldr	r3, [r7, #12]
}
10047604:	0018      	movs	r0, r3
10047606:	46bd      	mov	sp, r7
10047608:	b006      	add	sp, #24
1004760a:	bd80      	pop	{r7, pc}

1004760c <_check_callbacks>:

/* Check the number of expired timer from rootNode (ordered list of timers) and return the list of expired timers */
static VTIMER_HandleType *_check_callbacks(VTIMER_HandleType *rootNode, VTIMER_HandleType **expiredList)
{
1004760c:	b5b0      	push	{r4, r5, r7, lr}
1004760e:	b088      	sub	sp, #32
10047610:	af00      	add	r7, sp, #0
10047612:	6078      	str	r0, [r7, #4]
10047614:	6039      	str	r1, [r7, #0]

  VTIMER_HandleType *curr = rootNode;
10047616:	687b      	ldr	r3, [r7, #4]
10047618:	61fb      	str	r3, [r7, #28]
  VTIMER_HandleType *prev = NULL;
1004761a:	2300      	movs	r3, #0
1004761c:	61bb      	str	r3, [r7, #24]
  VTIMER_HandleType *returnValue = rootNode;
1004761e:	687b      	ldr	r3, [r7, #4]
10047620:	617b      	str	r3, [r7, #20]
  *expiredList = rootNode;
10047622:	683b      	ldr	r3, [r7, #0]
10047624:	687a      	ldr	r2, [r7, #4]
10047626:	601a      	str	r2, [r3, #0]

  int64_t delay;
  uint32_t expiredCount = 0;
10047628:	2300      	movs	r3, #0
1004762a:	613b      	str	r3, [r7, #16]

  while (curr != NULL)
1004762c:	e021      	b.n	10047672 <_check_callbacks+0x66>
  {

    if (curr->active)
1004762e:	69fb      	ldr	r3, [r7, #28]
10047630:	7b1b      	ldrb	r3, [r3, #12]
10047632:	2b00      	cmp	r3, #0
10047634:	d015      	beq.n	10047662 <_check_callbacks+0x56>
    {
      delay = curr->expiryTime - HAL_RADIO_TIMER_GetCurrentSysTime();
10047636:	69fb      	ldr	r3, [r7, #28]
10047638:	681c      	ldr	r4, [r3, #0]
1004763a:	685d      	ldr	r5, [r3, #4]
1004763c:	f7ff fb60 	bl	10046d00 <HAL_RADIO_TIMER_GetCurrentSysTime>
10047640:	0002      	movs	r2, r0
10047642:	000b      	movs	r3, r1
10047644:	1aa4      	subs	r4, r4, r2
10047646:	419d      	sbcs	r5, r3
10047648:	0022      	movs	r2, r4
1004764a:	002b      	movs	r3, r5
1004764c:	60ba      	str	r2, [r7, #8]
1004764e:	60fb      	str	r3, [r7, #12]

      if (delay > 5)   /*TBR*/
10047650:	68fb      	ldr	r3, [r7, #12]
10047652:	2b00      	cmp	r3, #0
10047654:	dc11      	bgt.n	1004767a <_check_callbacks+0x6e>
10047656:	68fb      	ldr	r3, [r7, #12]
10047658:	2b00      	cmp	r3, #0
1004765a:	d102      	bne.n	10047662 <_check_callbacks+0x56>
1004765c:	68bb      	ldr	r3, [r7, #8]
1004765e:	2b05      	cmp	r3, #5
10047660:	d80b      	bhi.n	1004767a <_check_callbacks+0x6e>
        /* End of expired timers list*/
        break;
      }
    }

    prev = curr;
10047662:	69fb      	ldr	r3, [r7, #28]
10047664:	61bb      	str	r3, [r7, #24]
    curr = curr->next;
10047666:	69fb      	ldr	r3, [r7, #28]
10047668:	691b      	ldr	r3, [r3, #16]
1004766a:	61fb      	str	r3, [r7, #28]
    expiredCount++;
1004766c:	693b      	ldr	r3, [r7, #16]
1004766e:	3301      	adds	r3, #1
10047670:	613b      	str	r3, [r7, #16]
  while (curr != NULL)
10047672:	69fb      	ldr	r3, [r7, #28]
10047674:	2b00      	cmp	r3, #0
10047676:	d1da      	bne.n	1004762e <_check_callbacks+0x22>
10047678:	e000      	b.n	1004767c <_check_callbacks+0x70>
        break;
1004767a:	46c0      	nop			@ (mov r8, r8)
  }

  if (expiredCount)
1004767c:	693b      	ldr	r3, [r7, #16]
1004767e:	2b00      	cmp	r3, #0
10047680:	d005      	beq.n	1004768e <_check_callbacks+0x82>
  {
    /* Some timers expired */
    prev->next = NULL;
10047682:	69bb      	ldr	r3, [r7, #24]
10047684:	2200      	movs	r2, #0
10047686:	611a      	str	r2, [r3, #16]
    returnValue = curr;
10047688:	69fb      	ldr	r3, [r7, #28]
1004768a:	617b      	str	r3, [r7, #20]
1004768c:	e002      	b.n	10047694 <_check_callbacks+0x88>
  }
  else
  {
    /* No timer expired */
    *expiredList = NULL;
1004768e:	683b      	ldr	r3, [r7, #0]
10047690:	2200      	movs	r2, #0
10047692:	601a      	str	r2, [r3, #0]
  }

  return returnValue;
10047694:	697b      	ldr	r3, [r7, #20]
}
10047696:	0018      	movs	r0, r3
10047698:	46bd      	mov	sp, r7
1004769a:	b008      	add	sp, #32
1004769c:	bdb0      	pop	{r4, r5, r7, pc}
	...

100476a0 <_updateCalibrationData>:

static void _updateCalibrationData(void)
{
100476a0:	b580      	push	{r7, lr}
100476a2:	b084      	sub	sp, #16
100476a4:	af00      	add	r7, sp, #0
  if (RADIO_TIMER_Context.calibrationSettings.periodicCalibration)
100476a6:	4b17      	ldr	r3, [pc, #92]	@ (10047704 <_updateCalibrationData+0x64>)
100476a8:	781b      	ldrb	r3, [r3, #0]
100476aa:	2b00      	cmp	r3, #0
100476ac:	d015      	beq.n	100476da <_updateCalibrationData+0x3a>
  {
    _get_calibration_data(&RADIO_TIMER_Context.calibrationData);
100476ae:	4b16      	ldr	r3, [pc, #88]	@ (10047708 <_updateCalibrationData+0x68>)
100476b0:	0018      	movs	r0, r3
100476b2:	f7ff fc39 	bl	10046f28 <_get_calibration_data>
    _update_xtal_startup_time(RADIO_TIMER_Context.hs_startup_time, RADIO_TIMER_Context.calibrationData.freq1);
100476b6:	4b13      	ldr	r3, [pc, #76]	@ (10047704 <_updateCalibrationData+0x64>)
100476b8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
100476ba:	b29a      	uxth	r2, r3
100476bc:	4b11      	ldr	r3, [pc, #68]	@ (10047704 <_updateCalibrationData+0x64>)
100476be:	699b      	ldr	r3, [r3, #24]
100476c0:	0019      	movs	r1, r3
100476c2:	0010      	movs	r0, r2
100476c4:	f7ff fd5c 	bl	10047180 <_update_xtal_startup_time>
    _configureTxRxDelay(&RADIO_TIMER_Context, FALSE);
100476c8:	4b0e      	ldr	r3, [pc, #56]	@ (10047704 <_updateCalibrationData+0x64>)
100476ca:	2100      	movs	r1, #0
100476cc:	0018      	movs	r0, r3
100476ce:	f7ff fc93 	bl	10046ff8 <_configureTxRxDelay>
    RADIO_TIMER_Context.calibrationData.calibration_data_available = 1;
100476d2:	4b0c      	ldr	r3, [pc, #48]	@ (10047704 <_updateCalibrationData+0x64>)
100476d4:	2234      	movs	r2, #52	@ 0x34
100476d6:	2101      	movs	r1, #1
100476d8:	5499      	strb	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
100476da:	f3ef 8310 	mrs	r3, PRIMASK
100476de:	607b      	str	r3, [r7, #4]
  return(result);
100476e0:	687b      	ldr	r3, [r7, #4]
  }
  ATOMIC_SECTION_BEGIN();
100476e2:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
100476e4:	b672      	cpsid	i
}
100476e6:	46c0      	nop			@ (mov r8, r8)
  _update_system_time(&RADIO_TIMER_Context);
100476e8:	4b06      	ldr	r3, [pc, #24]	@ (10047704 <_updateCalibrationData+0x64>)
100476ea:	0018      	movs	r0, r3
100476ec:	f000 f80e 	bl	1004770c <_update_system_time>
100476f0:	68fb      	ldr	r3, [r7, #12]
100476f2:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
100476f4:	68bb      	ldr	r3, [r7, #8]
100476f6:	f383 8810 	msr	PRIMASK, r3
}
100476fa:	46c0      	nop			@ (mov r8, r8)
  ATOMIC_SECTION_END();
}
100476fc:	46c0      	nop			@ (mov r8, r8)
100476fe:	46bd      	mov	sp, r7
10047700:	b004      	add	sp, #16
10047702:	bd80      	pop	{r7, pc}
10047704:	20000598 	.word	0x20000598
10047708:	200005a8 	.word	0x200005a8

1004770c <_update_system_time>:

/* This function update the system time after a calibration.
 * If the user calls too often this function, you could have rounding issues in the integer maths.
 */
static void _update_system_time(RADIO_TIMER_ContextTypeDef *context)
{
1004770c:	b5b0      	push	{r4, r5, r7, lr}
1004770e:	b088      	sub	sp, #32
10047710:	af00      	add	r7, sp, #0
10047712:	6178      	str	r0, [r7, #20]
  uint32_t current_machine_time;
  uint32_t period;

  current_machine_time = LL_RADIO_TIMER_GetAbsoluteTime(WAKEUP);
10047714:	4b2a      	ldr	r3, [pc, #168]	@ (100477c0 <_update_system_time+0xb4>)
10047716:	0018      	movs	r0, r3
10047718:	f7fe fe43 	bl	100463a2 <LL_RADIO_TIMER_GetAbsoluteTime>
1004771c:	0003      	movs	r3, r0
1004771e:	61fb      	str	r3, [r7, #28]
  period = context->calibrationData.last_period1;
10047720:	697b      	ldr	r3, [r7, #20]
10047722:	6a1b      	ldr	r3, [r3, #32]
10047724:	61bb      	str	r3, [r7, #24]
  context->cumulative_time = context->calibrationData.last_calibration_time + \
10047726:	697b      	ldr	r3, [r7, #20]
10047728:	6a9c      	ldr	r4, [r3, #40]	@ 0x28
1004772a:	6add      	ldr	r5, [r3, #44]	@ 0x2c
                             blue_unit_conversion(TIME_ABSDIFF(current_machine_time,
1004772c:	697b      	ldr	r3, [r7, #20]
1004772e:	2280      	movs	r2, #128	@ 0x80
10047730:	589b      	ldr	r3, [r3, r2]
10047732:	69fa      	ldr	r2, [r7, #28]
10047734:	1ad3      	subs	r3, r2, r3
10047736:	4a23      	ldr	r2, [pc, #140]	@ (100477c4 <_update_system_time+0xb8>)
10047738:	69b9      	ldr	r1, [r7, #24]
1004773a:	0018      	movs	r0, r3
1004773c:	f7f8 fcc0 	bl	100400c0 <blue_unit_conversion>
10047740:	0003      	movs	r3, r0
10047742:	60bb      	str	r3, [r7, #8]
10047744:	2300      	movs	r3, #0
10047746:	60fb      	str	r3, [r7, #12]
  context->cumulative_time = context->calibrationData.last_calibration_time + \
10047748:	68ba      	ldr	r2, [r7, #8]
1004774a:	68fb      	ldr	r3, [r7, #12]
1004774c:	1912      	adds	r2, r2, r4
1004774e:	416b      	adcs	r3, r5
10047750:	6979      	ldr	r1, [r7, #20]
10047752:	670a      	str	r2, [r1, #112]	@ 0x70
10047754:	674b      	str	r3, [r1, #116]	@ 0x74
                                                               context->last_machine_time),
                                                  period, MULT64_THR_PERIOD);

  if ((context->calibrationSettings.periodicCalibration == 0)
10047756:	697b      	ldr	r3, [r7, #20]
10047758:	781b      	ldrb	r3, [r3, #0]
1004775a:	2b00      	cmp	r3, #0
1004775c:	d11d      	bne.n	1004779a <_update_system_time+0x8e>
      && (TIME_ABSDIFF(current_machine_time,
1004775e:	697b      	ldr	r3, [r7, #20]
10047760:	2280      	movs	r2, #128	@ 0x80
10047762:	589b      	ldr	r3, [r3, r2]
10047764:	69fa      	ldr	r2, [r7, #28]
10047766:	1ad2      	subs	r2, r2, r3
                       context->last_machine_time) < context->calibrationData.calibration_machine_interval))
10047768:	697b      	ldr	r3, [r7, #20]
1004776a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
      && (TIME_ABSDIFF(current_machine_time,
1004776c:	429a      	cmp	r2, r3
1004776e:	d214      	bcs.n	1004779a <_update_system_time+0x8e>
  {
    context->cumulative_time += blue_unit_conversion(TIMER_MAX_VALUE, period, MULT64_THR_PERIOD);
10047770:	4a14      	ldr	r2, [pc, #80]	@ (100477c4 <_update_system_time+0xb8>)
10047772:	69b9      	ldr	r1, [r7, #24]
10047774:	2301      	movs	r3, #1
10047776:	425b      	negs	r3, r3
10047778:	0018      	movs	r0, r3
1004777a:	f7f8 fca1 	bl	100400c0 <blue_unit_conversion>
1004777e:	0001      	movs	r1, r0
10047780:	697b      	ldr	r3, [r7, #20]
10047782:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
10047784:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
10047786:	6039      	str	r1, [r7, #0]
10047788:	2100      	movs	r1, #0
1004778a:	6079      	str	r1, [r7, #4]
1004778c:	6838      	ldr	r0, [r7, #0]
1004778e:	6879      	ldr	r1, [r7, #4]
10047790:	1812      	adds	r2, r2, r0
10047792:	414b      	adcs	r3, r1
10047794:	6979      	ldr	r1, [r7, #20]
10047796:	670a      	str	r2, [r1, #112]	@ 0x70
10047798:	674b      	str	r3, [r1, #116]	@ 0x74
  }
  context->last_machine_time = current_machine_time;
1004779a:	697b      	ldr	r3, [r7, #20]
1004779c:	2180      	movs	r1, #128	@ 0x80
1004779e:	69fa      	ldr	r2, [r7, #28]
100477a0:	505a      	str	r2, [r3, r1]
  context->calibrationData.last_calibration_time = context->cumulative_time;
100477a2:	697b      	ldr	r3, [r7, #20]
100477a4:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
100477a6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
100477a8:	6979      	ldr	r1, [r7, #20]
100477aa:	628a      	str	r2, [r1, #40]	@ 0x28
100477ac:	62cb      	str	r3, [r1, #44]	@ 0x2c
  context->calibrationData.last_period1 = context->calibrationData.period1;
100477ae:	697b      	ldr	r3, [r7, #20]
100477b0:	69da      	ldr	r2, [r3, #28]
100477b2:	697b      	ldr	r3, [r7, #20]
100477b4:	621a      	str	r2, [r3, #32]
}
100477b6:	46c0      	nop			@ (mov r8, r8)
100477b8:	46bd      	mov	sp, r7
100477ba:	b008      	add	sp, #32
100477bc:	bdb0      	pop	{r4, r5, r7, pc}
100477be:	46c0      	nop			@ (mov r8, r8)
100477c0:	60001800 	.word	0x60001800
100477c4:	00000635 	.word	0x00000635

100477c8 <_check_radio_activity>:
   3) The radio event is after the next calibration event. Then the timer will be programmed with the latest values.
   The check on the next calibration event is made even though the calibration is disabled (max cal. interval)
   in order to avoid counter wrapping with timeouts far in the future.
*/
static void _check_radio_activity(RADIO_TIMER_RadioHandleTypeDef *timerHandle, uint8_t *expired)
{
100477c8:	b5b0      	push	{r4, r5, r7, lr}
100477ca:	b08a      	sub	sp, #40	@ 0x28
100477cc:	af00      	add	r7, sp, #0
100477ce:	6078      	str	r0, [r7, #4]
100477d0:	6039      	str	r1, [r7, #0]
  uint64_t nextCalibrationEvent, currentTime;
  *expired = 0;
100477d2:	683b      	ldr	r3, [r7, #0]
100477d4:	2200      	movs	r2, #0
100477d6:	701a      	strb	r2, [r3, #0]
  if (timerHandle->pending)
100477d8:	687b      	ldr	r3, [r7, #4]
100477da:	7a9b      	ldrb	r3, [r3, #10]
100477dc:	2b00      	cmp	r3, #0
100477de:	d100      	bne.n	100477e2 <_check_radio_activity+0x1a>
100477e0:	e075      	b.n	100478ce <_check_radio_activity+0x106>
  {
    
    nextCalibrationEvent = RADIO_TIMER_Context.calibrationData.last_calibration_time + \
100477e2:	4b3d      	ldr	r3, [pc, #244]	@ (100478d8 <_check_radio_activity+0x110>)
100477e4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
100477e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
                           RADIO_TIMER_Context.calibrationSettings.periodicCalibrationInterval;
100477e8:	493b      	ldr	r1, [pc, #236]	@ (100478d8 <_check_radio_activity+0x110>)
100477ea:	6849      	ldr	r1, [r1, #4]
100477ec:	000c      	movs	r4, r1
100477ee:	2100      	movs	r1, #0
100477f0:	000d      	movs	r5, r1
    nextCalibrationEvent = RADIO_TIMER_Context.calibrationData.last_calibration_time + \
100477f2:	1912      	adds	r2, r2, r4
100477f4:	416b      	adcs	r3, r5
100477f6:	623a      	str	r2, [r7, #32]
100477f8:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
100477fa:	f3ef 8310 	mrs	r3, PRIMASK
100477fe:	60fb      	str	r3, [r7, #12]
  return(result);
10047800:	68fb      	ldr	r3, [r7, #12]

    ATOMIC_SECTION_BEGIN();
10047802:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
10047804:	b672      	cpsid	i
}
10047806:	46c0      	nop			@ (mov r8, r8)
    currentTime = HAL_RADIO_TIMER_GetCurrentSysTime();
10047808:	f7ff fa7a 	bl	10046d00 <HAL_RADIO_TIMER_GetCurrentSysTime>
1004780c:	0002      	movs	r2, r0
1004780e:	000b      	movs	r3, r1
10047810:	613a      	str	r2, [r7, #16]
10047812:	617b      	str	r3, [r7, #20]
    if ((timerHandle->expiryTime < (nextCalibrationEvent + RADIO_ACTIVITY_MARGIN)) || \
10047814:	687b      	ldr	r3, [r7, #4]
10047816:	681a      	ldr	r2, [r3, #0]
10047818:	685b      	ldr	r3, [r3, #4]
1004781a:	6a38      	ldr	r0, [r7, #32]
1004781c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
1004781e:	24c8      	movs	r4, #200	@ 0xc8
10047820:	02a4      	lsls	r4, r4, #10
10047822:	2500      	movs	r5, #0
10047824:	1900      	adds	r0, r0, r4
10047826:	4169      	adcs	r1, r5
10047828:	4299      	cmp	r1, r3
1004782a:	d812      	bhi.n	10047852 <_check_radio_activity+0x8a>
1004782c:	d101      	bne.n	10047832 <_check_radio_activity+0x6a>
1004782e:	4290      	cmp	r0, r2
10047830:	d80f      	bhi.n	10047852 <_check_radio_activity+0x8a>
        (currentTime > (nextCalibrationEvent + CALIB_SAFE_THR)))
10047832:	6a3a      	ldr	r2, [r7, #32]
10047834:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10047836:	20b9      	movs	r0, #185	@ 0xb9
10047838:	0040      	lsls	r0, r0, #1
1004783a:	2100      	movs	r1, #0
1004783c:	1812      	adds	r2, r2, r0
1004783e:	414b      	adcs	r3, r1
    if ((timerHandle->expiryTime < (nextCalibrationEvent + RADIO_ACTIVITY_MARGIN)) || \
10047840:	6979      	ldr	r1, [r7, #20]
10047842:	4299      	cmp	r1, r3
10047844:	d805      	bhi.n	10047852 <_check_radio_activity+0x8a>
10047846:	6979      	ldr	r1, [r7, #20]
10047848:	4299      	cmp	r1, r3
1004784a:	d136      	bne.n	100478ba <_check_radio_activity+0xf2>
1004784c:	6939      	ldr	r1, [r7, #16]
1004784e:	4291      	cmp	r1, r2
10047850:	d933      	bls.n	100478ba <_check_radio_activity+0xf2>
    {
      if (timerHandle->expiryTime - TIMER1_INIT_DELAY > (currentTime + TIMER1_MARGIN))
10047852:	687b      	ldr	r3, [r7, #4]
10047854:	681a      	ldr	r2, [r3, #0]
10047856:	685b      	ldr	r3, [r3, #4]
10047858:	204c      	movs	r0, #76	@ 0x4c
1004785a:	4240      	negs	r0, r0
1004785c:	17c1      	asrs	r1, r0, #31
1004785e:	1880      	adds	r0, r0, r2
10047860:	4159      	adcs	r1, r3
10047862:	693a      	ldr	r2, [r7, #16]
10047864:	697b      	ldr	r3, [r7, #20]
10047866:	240a      	movs	r4, #10
10047868:	2500      	movs	r5, #0
1004786a:	1912      	adds	r2, r2, r4
1004786c:	416b      	adcs	r3, r5
1004786e:	4299      	cmp	r1, r3
10047870:	d802      	bhi.n	10047878 <_check_radio_activity+0xb0>
10047872:	d11a      	bne.n	100478aa <_check_radio_activity+0xe2>
10047874:	4290      	cmp	r0, r2
10047876:	d918      	bls.n	100478aa <_check_radio_activity+0xe2>
      {
        *expired = TIMER_SetRadioTimerValue(timerHandle->expiryTime, timerHandle->event_type, timerHandle->cal_req);
10047878:	687b      	ldr	r3, [r7, #4]
1004787a:	681a      	ldr	r2, [r3, #0]
1004787c:	685b      	ldr	r3, [r3, #4]
1004787e:	0010      	movs	r0, r2
10047880:	687b      	ldr	r3, [r7, #4]
10047882:	7b19      	ldrb	r1, [r3, #12]
10047884:	687b      	ldr	r3, [r7, #4]
10047886:	7a1b      	ldrb	r3, [r3, #8]
10047888:	001a      	movs	r2, r3
1004788a:	f000 f8d5 	bl	10047a38 <TIMER_SetRadioTimerValue>
1004788e:	0003      	movs	r3, r0
10047890:	001a      	movs	r2, r3
10047892:	683b      	ldr	r3, [r7, #0]
10047894:	701a      	strb	r2, [r3, #0]
        timerHandle->pending = FALSE; /* timer has been served. No more pending */
10047896:	687b      	ldr	r3, [r7, #4]
10047898:	2200      	movs	r2, #0
1004789a:	729a      	strb	r2, [r3, #10]
        timerHandle->active = TRUE; /* timer has been programmed and it becomes ACTIVE */
1004789c:	687b      	ldr	r3, [r7, #4]
1004789e:	2201      	movs	r2, #1
100478a0:	725a      	strb	r2, [r3, #9]
        timerHandle->intTxRx_to_be_served = TRUE;
100478a2:	687b      	ldr	r3, [r7, #4]
100478a4:	2201      	movs	r2, #1
100478a6:	72da      	strb	r2, [r3, #11]
      if (timerHandle->expiryTime - TIMER1_INIT_DELAY > (currentTime + TIMER1_MARGIN))
100478a8:	e00b      	b.n	100478c2 <_check_radio_activity+0xfa>
      }
      else
      {
        
        RADIO_TIMER_Context.radioTimer.pending = FALSE;
100478aa:	4b0b      	ldr	r3, [pc, #44]	@ (100478d8 <_check_radio_activity+0x110>)
100478ac:	2262      	movs	r2, #98	@ 0x62
100478ae:	2100      	movs	r1, #0
100478b0:	5499      	strb	r1, [r3, r2]
        *expired = 1;
100478b2:	683b      	ldr	r3, [r7, #0]
100478b4:	2201      	movs	r2, #1
100478b6:	701a      	strb	r2, [r3, #0]
      if (timerHandle->expiryTime - TIMER1_INIT_DELAY > (currentTime + TIMER1_MARGIN))
100478b8:	e003      	b.n	100478c2 <_check_radio_activity+0xfa>
      }
    }
    else
    {
#if defined (STM32WB06) || defined (STM32WB07)
      RADIO_TIMER_Context.waitCal = 1;
100478ba:	4b07      	ldr	r3, [pc, #28]	@ (100478d8 <_check_radio_activity+0x110>)
100478bc:	229c      	movs	r2, #156	@ 0x9c
100478be:	2101      	movs	r1, #1
100478c0:	5499      	strb	r1, [r3, r2]
100478c2:	69fb      	ldr	r3, [r7, #28]
100478c4:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
100478c6:	68bb      	ldr	r3, [r7, #8]
100478c8:	f383 8810 	msr	PRIMASK, r3
}
100478cc:	46c0      	nop			@ (mov r8, r8)
#endif
    }
    ATOMIC_SECTION_END();
    
  }
}
100478ce:	46c0      	nop			@ (mov r8, r8)
100478d0:	46bd      	mov	sp, r7
100478d2:	b00a      	add	sp, #40	@ 0x28
100478d4:	bdb0      	pop	{r4, r5, r7, pc}
100478d6:	46c0      	nop			@ (mov r8, r8)
100478d8:	20000598 	.word	0x20000598

100478dc <TIMER_SetRadioHostWakeupTime>:
  *          if other code commands the system to go to deep sleep.
  * @warning The API must be called with interrupts disabled to avoid programming the timer with a value in the past.
  * @return  Current time in MTU.
  */
static uint32_t TIMER_SetRadioHostWakeupTime(uint32_t delay, bool *share)
{
100478dc:	b580      	push	{r7, lr}
100478de:	b084      	sub	sp, #16
100478e0:	af00      	add	r7, sp, #0
100478e2:	6078      	str	r0, [r7, #4]
100478e4:	6039      	str	r1, [r7, #0]
  uint32_t current_time;

  delay = blue_unit_conversion(delay, RADIO_TIMER_Context.calibrationData.freq1, MULT64_THR_FREQ) ;
100478e6:	4b2f      	ldr	r3, [pc, #188]	@ (100479a4 <TIMER_SetRadioHostWakeupTime+0xc8>)
100478e8:	699b      	ldr	r3, [r3, #24]
100478ea:	0019      	movs	r1, r3
100478ec:	4a2e      	ldr	r2, [pc, #184]	@ (100479a8 <TIMER_SetRadioHostWakeupTime+0xcc>)
100478ee:	687b      	ldr	r3, [r7, #4]
100478f0:	0018      	movs	r0, r3
100478f2:	f7f8 fbe5 	bl	100400c0 <blue_unit_conversion>
100478f6:	0003      	movs	r3, r0
100478f8:	607b      	str	r3, [r7, #4]
  /* If the delay is too small round to minimum 2 tick */
  delay = MAX(32, delay);
100478fa:	687b      	ldr	r3, [r7, #4]
100478fc:	2b20      	cmp	r3, #32
100478fe:	d200      	bcs.n	10047902 <TIMER_SetRadioHostWakeupTime+0x26>
10047900:	2320      	movs	r3, #32
10047902:	607b      	str	r3, [r7, #4]
  current_time = LL_RADIO_TIMER_GetAbsoluteTime(WAKEUP);
10047904:	4b29      	ldr	r3, [pc, #164]	@ (100479ac <TIMER_SetRadioHostWakeupTime+0xd0>)
10047906:	0018      	movs	r0, r3
10047908:	f7fe fd4b 	bl	100463a2 <LL_RADIO_TIMER_GetAbsoluteTime>
1004790c:	0003      	movs	r3, r0
1004790e:	60fb      	str	r3, [r7, #12]
  /* 4 least significant bits are not taken into account. Then let's round the value */
  LL_RADIO_TIMER_SetCPUWakeupTime(WAKEUP, ((current_time + (delay + 8)) & TIMER_MAX_VALUE));
10047910:	687a      	ldr	r2, [r7, #4]
10047912:	68fb      	ldr	r3, [r7, #12]
10047914:	18d3      	adds	r3, r2, r3
10047916:	3308      	adds	r3, #8
10047918:	4a24      	ldr	r2, [pc, #144]	@ (100479ac <TIMER_SetRadioHostWakeupTime+0xd0>)
1004791a:	0019      	movs	r1, r3
1004791c:	0010      	movs	r0, r2
1004791e:	f7fe fd34 	bl	1004638a <LL_RADIO_TIMER_SetCPUWakeupTime>
  LL_RADIO_TIMER_EnableWakeupTimerLowPowerMode(WAKEUP);
10047922:	4b22      	ldr	r3, [pc, #136]	@ (100479ac <TIMER_SetRadioHostWakeupTime+0xd0>)
10047924:	0018      	movs	r0, r3
10047926:	f7fe fd46 	bl	100463b6 <LL_RADIO_TIMER_EnableWakeupTimerLowPowerMode>
  LL_RADIO_TIMER_EnableCPUWakeupTimer(WAKEUP);
1004792a:	4b20      	ldr	r3, [pc, #128]	@ (100479ac <TIMER_SetRadioHostWakeupTime+0xd0>)
1004792c:	0018      	movs	r0, r3
1004792e:	f7fe fce7 	bl	10046300 <LL_RADIO_TIMER_EnableCPUWakeupTimer>
  if ((LL_RADIO_TIMER_IsEnabledTimer1(BLUE) || LL_RADIO_TIMER_IsEnabledTimer2(BLUE) || (*share != TRUE)))
10047932:	23c0      	movs	r3, #192	@ 0xc0
10047934:	05db      	lsls	r3, r3, #23
10047936:	0018      	movs	r0, r3
10047938:	f7fe fc67 	bl	1004620a <LL_RADIO_TIMER_IsEnabledTimer1>
1004793c:	1e03      	subs	r3, r0, #0
1004793e:	d10d      	bne.n	1004795c <TIMER_SetRadioHostWakeupTime+0x80>
10047940:	23c0      	movs	r3, #192	@ 0xc0
10047942:	05db      	lsls	r3, r3, #23
10047944:	0018      	movs	r0, r3
10047946:	f7fe fc80 	bl	1004624a <LL_RADIO_TIMER_IsEnabledTimer2>
1004794a:	1e03      	subs	r3, r0, #0
1004794c:	d106      	bne.n	1004795c <TIMER_SetRadioHostWakeupTime+0x80>
1004794e:	683b      	ldr	r3, [r7, #0]
10047950:	781b      	ldrb	r3, [r3, #0]
10047952:	2201      	movs	r2, #1
10047954:	4053      	eors	r3, r2
10047956:	b2db      	uxtb	r3, r3
10047958:	2b00      	cmp	r3, #0
1004795a:	d004      	beq.n	10047966 <TIMER_SetRadioHostWakeupTime+0x8a>
  {
    *share = FALSE;
1004795c:	683b      	ldr	r3, [r7, #0]
1004795e:	2200      	movs	r2, #0
10047960:	701a      	strb	r2, [r3, #0]
    return current_time;
10047962:	68fb      	ldr	r3, [r7, #12]
10047964:	e01a      	b.n	1004799c <TIMER_SetRadioHostWakeupTime+0xc0>
  }
  _set_controller_as_host();
10047966:	f000 f823 	bl	100479b0 <_set_controller_as_host>
  /* 4 least significant bits are not taken into account. Then let's round the value */
  LL_RADIO_TIMER_SetBLEWakeupTime(WAKEUP, ((current_time + delay + 8) & 0xFFFFFFF0));
1004796a:	68fa      	ldr	r2, [r7, #12]
1004796c:	687b      	ldr	r3, [r7, #4]
1004796e:	18d3      	adds	r3, r2, r3
10047970:	3308      	adds	r3, #8
10047972:	220f      	movs	r2, #15
10047974:	4393      	bics	r3, r2
10047976:	4a0d      	ldr	r2, [pc, #52]	@ (100479ac <TIMER_SetRadioHostWakeupTime+0xd0>)
10047978:	0019      	movs	r1, r3
1004797a:	0010      	movs	r0, r2
1004797c:	f7fe fcef 	bl	1004635e <LL_RADIO_TIMER_SetBLEWakeupTime>
  LL_RADIO_TIMER_SetSleepRequestMode(WAKEUP, 0);
10047980:	4b0a      	ldr	r3, [pc, #40]	@ (100479ac <TIMER_SetRadioHostWakeupTime+0xd0>)
10047982:	2100      	movs	r1, #0
10047984:	0018      	movs	r0, r3
10047986:	f7fe fd25 	bl	100463d4 <LL_RADIO_TIMER_SetSleepRequestMode>
  LL_RADIO_TIMER_EnableBLEWakeupTimer(WAKEUP);
1004798a:	4b08      	ldr	r3, [pc, #32]	@ (100479ac <TIMER_SetRadioHostWakeupTime+0xd0>)
1004798c:	0018      	movs	r0, r3
1004798e:	f7fe fc83 	bl	10046298 <LL_RADIO_TIMER_EnableBLEWakeupTimer>
  LL_RADIO_TIMER_EnableWakeupTimerLowPowerMode(WAKEUP);
10047992:	4b06      	ldr	r3, [pc, #24]	@ (100479ac <TIMER_SetRadioHostWakeupTime+0xd0>)
10047994:	0018      	movs	r0, r3
10047996:	f7fe fd0e 	bl	100463b6 <LL_RADIO_TIMER_EnableWakeupTimerLowPowerMode>
  return current_time;
1004799a:	68fb      	ldr	r3, [r7, #12]
}
1004799c:	0018      	movs	r0, r3
1004799e:	46bd      	mov	sp, r7
100479a0:	b004      	add	sp, #16
100479a2:	bd80      	pop	{r7, pc}
100479a4:	20000598 	.word	0x20000598
100479a8:	00000326 	.word	0x00000326
100479ac:	60001800 	.word	0x60001800

100479b0 <_set_controller_as_host>:

static void _set_controller_as_host(void)
{
100479b0:	b580      	push	{r7, lr}
100479b2:	af00      	add	r7, sp, #0
  BLUEGLOB->BYTE4 &= ~(1 << 7);
100479b4:	4b08      	ldr	r3, [pc, #32]	@ (100479d8 <_set_controller_as_host+0x28>)
100479b6:	791b      	ldrb	r3, [r3, #4]
100479b8:	b2db      	uxtb	r3, r3
100479ba:	4a07      	ldr	r2, [pc, #28]	@ (100479d8 <_set_controller_as_host+0x28>)
100479bc:	217f      	movs	r1, #127	@ 0x7f
100479be:	400b      	ands	r3, r1
100479c0:	b2db      	uxtb	r3, r3
100479c2:	7113      	strb	r3, [r2, #4]
  BLUEGLOB->BYTE22 = 0x0;
100479c4:	4b04      	ldr	r3, [pc, #16]	@ (100479d8 <_set_controller_as_host+0x28>)
100479c6:	2200      	movs	r2, #0
100479c8:	759a      	strb	r2, [r3, #22]
  BLUEGLOB->BYTE23 = 0x0;
100479ca:	4b03      	ldr	r3, [pc, #12]	@ (100479d8 <_set_controller_as_host+0x28>)
100479cc:	2200      	movs	r2, #0
100479ce:	75da      	strb	r2, [r3, #23]
}
100479d0:	46c0      	nop			@ (mov r8, r8)
100479d2:	46bd      	mov	sp, r7
100479d4:	bd80      	pop	{r7, pc}
100479d6:	46c0      	nop			@ (mov r8, r8)
100479d8:	200000c0 	.word	0x200000c0

100479dc <_check_host_activity>:

static void _check_host_activity(void)
{
100479dc:	b580      	push	{r7, lr}
100479de:	b082      	sub	sp, #8
100479e0:	af00      	add	r7, sp, #0
  uint8_t expired;
  RADIO_TIMER_Context.rootNode = _update_user_timeout(RADIO_TIMER_Context.rootNode, &expired);
100479e2:	4b14      	ldr	r3, [pc, #80]	@ (10047a34 <_check_host_activity+0x58>)
100479e4:	228c      	movs	r2, #140	@ 0x8c
100479e6:	589b      	ldr	r3, [r3, r2]
100479e8:	1dfa      	adds	r2, r7, #7
100479ea:	0011      	movs	r1, r2
100479ec:	0018      	movs	r0, r3
100479ee:	f7ff fccf 	bl	10047390 <_update_user_timeout>
100479f2:	0002      	movs	r2, r0
100479f4:	4b0f      	ldr	r3, [pc, #60]	@ (10047a34 <_check_host_activity+0x58>)
100479f6:	218c      	movs	r1, #140	@ 0x8c
100479f8:	505a      	str	r2, [r3, r1]
  if (expired == 1)
100479fa:	1dfb      	adds	r3, r7, #7
100479fc:	781b      	ldrb	r3, [r3, #0]
100479fe:	2b01      	cmp	r3, #1
10047a00:	d114      	bne.n	10047a2c <_check_host_activity+0x50>
  {
    /* A new root timer is already expired, mimic timer expire */
    INCREMENT_EXPIRE_COUNT_ISR;
10047a02:	4b0c      	ldr	r3, [pc, #48]	@ (10047a34 <_check_host_activity+0x58>)
10047a04:	2291      	movs	r2, #145	@ 0x91
10047a06:	5c9b      	ldrb	r3, [r3, r2]
10047a08:	3301      	adds	r3, #1
10047a0a:	4a0a      	ldr	r2, [pc, #40]	@ (10047a34 <_check_host_activity+0x58>)
10047a0c:	2192      	movs	r1, #146	@ 0x92
10047a0e:	5c52      	ldrb	r2, [r2, r1]
10047a10:	4293      	cmp	r3, r2
10047a12:	d103      	bne.n	10047a1c <_check_host_activity+0x40>
10047a14:	4b07      	ldr	r3, [pc, #28]	@ (10047a34 <_check_host_activity+0x58>)
10047a16:	2291      	movs	r2, #145	@ 0x91
10047a18:	5c9b      	ldrb	r3, [r3, r2]
10047a1a:	e004      	b.n	10047a26 <_check_host_activity+0x4a>
10047a1c:	4b05      	ldr	r3, [pc, #20]	@ (10047a34 <_check_host_activity+0x58>)
10047a1e:	2291      	movs	r2, #145	@ 0x91
10047a20:	5c9b      	ldrb	r3, [r3, r2]
10047a22:	3301      	adds	r3, #1
10047a24:	b2db      	uxtb	r3, r3
10047a26:	4a03      	ldr	r2, [pc, #12]	@ (10047a34 <_check_host_activity+0x58>)
10047a28:	2191      	movs	r1, #145	@ 0x91
10047a2a:	5453      	strb	r3, [r2, r1]
  }
}
10047a2c:	46c0      	nop			@ (mov r8, r8)
10047a2e:	46bd      	mov	sp, r7
10047a30:	b002      	add	sp, #8
10047a32:	bd80      	pop	{r7, pc}
10047a34:	20000598 	.word	0x20000598

10047a38 <TIMER_SetRadioTimerValue>:
  * @warning The API must be called with interrupts disabled to avoid programming the timer with a value in the past
  * @retval  0 if a correct timeout has been programmed in the timeout register
  * @retval  1 if a correct timeout cannot be programmed
  */
static uint8_t TIMER_SetRadioTimerValue(uint32_t timeout, bool event_type, bool cal_req)
{
10047a38:	b580      	push	{r7, lr}
10047a3a:	b08a      	sub	sp, #40	@ 0x28
10047a3c:	af00      	add	r7, sp, #0
10047a3e:	6078      	str	r0, [r7, #4]
10047a40:	0008      	movs	r0, r1
10047a42:	0011      	movs	r1, r2
10047a44:	1cfb      	adds	r3, r7, #3
10047a46:	1c02      	adds	r2, r0, #0
10047a48:	701a      	strb	r2, [r3, #0]
10047a4a:	1cbb      	adds	r3, r7, #2
10047a4c:	1c0a      	adds	r2, r1, #0
10047a4e:	701a      	strb	r2, [r3, #0]
  uint32_t current_time, delay, radio_init_delay, device_delay, rel_timeout, rel_timeout_mt;
  uint8_t ret_val;

  /*choose the 2nd init duration. Check the event_type and cal. request*/
  if (event_type == TX)
10047a50:	1cfb      	adds	r3, r7, #3
10047a52:	781b      	ldrb	r3, [r3, #0]
10047a54:	2b00      	cmp	r3, #0
10047a56:	d015      	beq.n	10047a84 <TIMER_SetRadioTimerValue+0x4c>
  {
    if (cal_req)
10047a58:	1cbb      	adds	r3, r7, #2
10047a5a:	781b      	ldrb	r3, [r3, #0]
10047a5c:	2b00      	cmp	r3, #0
10047a5e:	d008      	beq.n	10047a72 <TIMER_SetRadioTimerValue+0x3a>
    {
      radio_init_delay = RADIO_TIMER_Context.TxRxDelay.tx_cal_delay;
10047a60:	4b6e      	ldr	r3, [pc, #440]	@ (10047c1c <TIMER_SetRadioTimerValue+0x1e4>)
10047a62:	2238      	movs	r2, #56	@ 0x38
10047a64:	5c9b      	ldrb	r3, [r3, r2]
10047a66:	623b      	str	r3, [r7, #32]
      device_delay = RADIO_TIMER_Context.TxRxDelay.tx_cal_delay_st;
10047a68:	4b6c      	ldr	r3, [pc, #432]	@ (10047c1c <TIMER_SetRadioTimerValue+0x1e4>)
10047a6a:	223c      	movs	r2, #60	@ 0x3c
10047a6c:	5c9b      	ldrb	r3, [r3, r2]
10047a6e:	61fb      	str	r3, [r7, #28]
10047a70:	e01d      	b.n	10047aae <TIMER_SetRadioTimerValue+0x76>
    }
    else
    {
      radio_init_delay = RADIO_TIMER_Context.TxRxDelay.tx_no_cal_delay;
10047a72:	4b6a      	ldr	r3, [pc, #424]	@ (10047c1c <TIMER_SetRadioTimerValue+0x1e4>)
10047a74:	2239      	movs	r2, #57	@ 0x39
10047a76:	5c9b      	ldrb	r3, [r3, r2]
10047a78:	623b      	str	r3, [r7, #32]
      device_delay = RADIO_TIMER_Context.TxRxDelay.tx_cal_delay_st;
10047a7a:	4b68      	ldr	r3, [pc, #416]	@ (10047c1c <TIMER_SetRadioTimerValue+0x1e4>)
10047a7c:	223c      	movs	r2, #60	@ 0x3c
10047a7e:	5c9b      	ldrb	r3, [r3, r2]
10047a80:	61fb      	str	r3, [r7, #28]
10047a82:	e014      	b.n	10047aae <TIMER_SetRadioTimerValue+0x76>
    }
  }
  else
  {
    if (cal_req)
10047a84:	1cbb      	adds	r3, r7, #2
10047a86:	781b      	ldrb	r3, [r3, #0]
10047a88:	2b00      	cmp	r3, #0
10047a8a:	d008      	beq.n	10047a9e <TIMER_SetRadioTimerValue+0x66>
    {
      radio_init_delay = RADIO_TIMER_Context.TxRxDelay.rx_cal_delay;
10047a8c:	4b63      	ldr	r3, [pc, #396]	@ (10047c1c <TIMER_SetRadioTimerValue+0x1e4>)
10047a8e:	223a      	movs	r2, #58	@ 0x3a
10047a90:	5c9b      	ldrb	r3, [r3, r2]
10047a92:	623b      	str	r3, [r7, #32]
      device_delay = RADIO_TIMER_Context.TxRxDelay.tx_cal_delay_st;
10047a94:	4b61      	ldr	r3, [pc, #388]	@ (10047c1c <TIMER_SetRadioTimerValue+0x1e4>)
10047a96:	223c      	movs	r2, #60	@ 0x3c
10047a98:	5c9b      	ldrb	r3, [r3, r2]
10047a9a:	61fb      	str	r3, [r7, #28]
10047a9c:	e007      	b.n	10047aae <TIMER_SetRadioTimerValue+0x76>
    }
    else
    {
      radio_init_delay = RADIO_TIMER_Context.TxRxDelay.rx_no_cal_delay;
10047a9e:	4b5f      	ldr	r3, [pc, #380]	@ (10047c1c <TIMER_SetRadioTimerValue+0x1e4>)
10047aa0:	223b      	movs	r2, #59	@ 0x3b
10047aa2:	5c9b      	ldrb	r3, [r3, r2]
10047aa4:	623b      	str	r3, [r7, #32]
      device_delay = RADIO_TIMER_Context.TxRxDelay.tx_cal_delay_st;
10047aa6:	4b5d      	ldr	r3, [pc, #372]	@ (10047c1c <TIMER_SetRadioTimerValue+0x1e4>)
10047aa8:	223c      	movs	r2, #60	@ 0x3c
10047aaa:	5c9b      	ldrb	r3, [r3, r2]
10047aac:	61fb      	str	r3, [r7, #28]
    }
  }

  /* At this point, it is care of the upper layers to guarantee that the timeout represents an absolute time in the future */
  rel_timeout = timeout - (uint32_t)_get_system_time_and_machine(&RADIO_TIMER_Context, &current_time);
10047aae:	230c      	movs	r3, #12
10047ab0:	18fa      	adds	r2, r7, r3
10047ab2:	4b5a      	ldr	r3, [pc, #360]	@ (10047c1c <TIMER_SetRadioTimerValue+0x1e4>)
10047ab4:	0011      	movs	r1, r2
10047ab6:	0018      	movs	r0, r3
10047ab8:	f7ff fc02 	bl	100472c0 <_get_system_time_and_machine>
10047abc:	0002      	movs	r2, r0
10047abe:	000b      	movs	r3, r1
10047ac0:	687b      	ldr	r3, [r7, #4]
10047ac2:	1a9b      	subs	r3, r3, r2
10047ac4:	617b      	str	r3, [r7, #20]

  rel_timeout_mt =  blue_unit_conversion(rel_timeout, RADIO_TIMER_Context.calibrationData.freq1, MULT64_THR_FREQ);
10047ac6:	4b55      	ldr	r3, [pc, #340]	@ (10047c1c <TIMER_SetRadioTimerValue+0x1e4>)
10047ac8:	699b      	ldr	r3, [r3, #24]
10047aca:	0019      	movs	r1, r3
10047acc:	4a54      	ldr	r2, [pc, #336]	@ (10047c20 <TIMER_SetRadioTimerValue+0x1e8>)
10047ace:	697b      	ldr	r3, [r7, #20]
10047ad0:	0018      	movs	r0, r3
10047ad2:	f7f8 faf5 	bl	100400c0 <blue_unit_conversion>
10047ad6:	0003      	movs	r3, r0
10047ad8:	613b      	str	r3, [r7, #16]

  /*Check if the timeout is beyond the wakeup time offset. Then program either the WakeUp timer or the Timer1*/
  if (rel_timeout > (device_delay + RADIO_TIMER_Context.hs_startup_time + MARGIN_EXT))
10047ada:	4b50      	ldr	r3, [pc, #320]	@ (10047c1c <TIMER_SetRadioTimerValue+0x1e4>)
10047adc:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
10047ade:	69fb      	ldr	r3, [r7, #28]
10047ae0:	18d3      	adds	r3, r2, r3
10047ae2:	33c8      	adds	r3, #200	@ 0xc8
10047ae4:	697a      	ldr	r2, [r7, #20]
10047ae6:	429a      	cmp	r2, r3
10047ae8:	d92f      	bls.n	10047b4a <TIMER_SetRadioTimerValue+0x112>
  {
    /*The timeout is after the wakeup_time_offset, So it is ok to program the wakeup timer*/
    delay = rel_timeout_mt - BLUEGLOB->WAKEUPINITDELAY - radio_init_delay;
10047aea:	4b4e      	ldr	r3, [pc, #312]	@ (10047c24 <TIMER_SetRadioTimerValue+0x1ec>)
10047aec:	795b      	ldrb	r3, [r3, #5]
10047aee:	b2db      	uxtb	r3, r3
10047af0:	001a      	movs	r2, r3
10047af2:	693b      	ldr	r3, [r7, #16]
10047af4:	1a9a      	subs	r2, r3, r2
10047af6:	6a3b      	ldr	r3, [r7, #32]
10047af8:	1ad3      	subs	r3, r2, r3
10047afa:	627b      	str	r3, [r7, #36]	@ 0x24
    LL_RADIO_TIMER_SetBLEWakeupTime(WAKEUP, ((current_time + delay) & TIMER_MAX_VALUE));
10047afc:	68fa      	ldr	r2, [r7, #12]
10047afe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10047b00:	18d3      	adds	r3, r2, r3
10047b02:	4a49      	ldr	r2, [pc, #292]	@ (10047c28 <TIMER_SetRadioTimerValue+0x1f0>)
10047b04:	0019      	movs	r1, r3
10047b06:	0010      	movs	r0, r2
10047b08:	f7fe fc29 	bl	1004635e <LL_RADIO_TIMER_SetBLEWakeupTime>
    LL_RADIO_TIMER_SetSleepRequestMode(WAKEUP, 0);
10047b0c:	4b46      	ldr	r3, [pc, #280]	@ (10047c28 <TIMER_SetRadioTimerValue+0x1f0>)
10047b0e:	2100      	movs	r1, #0
10047b10:	0018      	movs	r0, r3
10047b12:	f7fe fc5f 	bl	100463d4 <LL_RADIO_TIMER_SetSleepRequestMode>
    LL_RADIO_TIMER_DisableTimer1(BLUE);
10047b16:	23c0      	movs	r3, #192	@ 0xc0
10047b18:	05db      	lsls	r3, r3, #23
10047b1a:	0018      	movs	r0, r3
10047b1c:	f7fe fb66 	bl	100461ec <LL_RADIO_TIMER_DisableTimer1>
    LL_RADIO_TIMER_DisableTimer2(BLUE);
10047b20:	23c0      	movs	r3, #192	@ 0xc0
10047b22:	05db      	lsls	r3, r3, #23
10047b24:	0018      	movs	r0, r3
10047b26:	f7fe fb81 	bl	1004622c <LL_RADIO_TIMER_DisableTimer2>
    LL_RADIO_TIMER_EnableBLEWakeupTimer(WAKEUP);
10047b2a:	4b3f      	ldr	r3, [pc, #252]	@ (10047c28 <TIMER_SetRadioTimerValue+0x1f0>)
10047b2c:	0018      	movs	r0, r3
10047b2e:	f7fe fbb3 	bl	10046298 <LL_RADIO_TIMER_EnableBLEWakeupTimer>
    LL_RADIO_TIMER_EnableWakeupTimerLowPowerMode(WAKEUP);
10047b32:	4b3d      	ldr	r3, [pc, #244]	@ (10047c28 <TIMER_SetRadioTimerValue+0x1f0>)
10047b34:	0018      	movs	r0, r3
10047b36:	f7fe fc3e 	bl	100463b6 <LL_RADIO_TIMER_EnableWakeupTimerLowPowerMode>
    radio_init_delay += BLUEGLOB->WAKEUPINITDELAY;
10047b3a:	4b3a      	ldr	r3, [pc, #232]	@ (10047c24 <TIMER_SetRadioTimerValue+0x1ec>)
10047b3c:	795b      	ldrb	r3, [r3, #5]
10047b3e:	b2db      	uxtb	r3, r3
10047b40:	001a      	movs	r2, r3
10047b42:	6a3b      	ldr	r3, [r7, #32]
10047b44:	189b      	adds	r3, r3, r2
10047b46:	623b      	str	r3, [r7, #32]
10047b48:	e021      	b.n	10047b8e <TIMER_SetRadioTimerValue+0x156>
  }
  else
  {
    delay = rel_timeout_mt - RADIO_TIMER_Context.TxRxDelay.tim12_delay_mt - radio_init_delay;
10047b4a:	4b34      	ldr	r3, [pc, #208]	@ (10047c1c <TIMER_SetRadioTimerValue+0x1e4>)
10047b4c:	223d      	movs	r2, #61	@ 0x3d
10047b4e:	5c9b      	ldrb	r3, [r3, r2]
10047b50:	001a      	movs	r2, r3
10047b52:	693b      	ldr	r3, [r7, #16]
10047b54:	1a9a      	subs	r2, r3, r2
10047b56:	6a3b      	ldr	r3, [r7, #32]
10047b58:	1ad3      	subs	r3, r2, r3
10047b5a:	627b      	str	r3, [r7, #36]	@ 0x24
    LL_RADIO_TIMER_SetTimeout(BLUE, ((current_time + delay) & TIMER_MAX_VALUE));
10047b5c:	68fa      	ldr	r2, [r7, #12]
10047b5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10047b60:	18d2      	adds	r2, r2, r3
10047b62:	23c0      	movs	r3, #192	@ 0xc0
10047b64:	05db      	lsls	r3, r3, #23
10047b66:	0011      	movs	r1, r2
10047b68:	0018      	movs	r0, r3
10047b6a:	f7fe fb7f 	bl	1004626c <LL_RADIO_TIMER_SetTimeout>
    LL_RADIO_TIMER_DisableBLEWakeupTimer(WAKEUP);
10047b6e:	4b2e      	ldr	r3, [pc, #184]	@ (10047c28 <TIMER_SetRadioTimerValue+0x1f0>)
10047b70:	0018      	movs	r0, r3
10047b72:	f7fe fba1 	bl	100462b8 <LL_RADIO_TIMER_DisableBLEWakeupTimer>
    LL_RADIO_TIMER_EnableTimer1(BLUE);
10047b76:	23c0      	movs	r3, #192	@ 0xc0
10047b78:	05db      	lsls	r3, r3, #23
10047b7a:	0018      	movs	r0, r3
10047b7c:	f7fe fb26 	bl	100461cc <LL_RADIO_TIMER_EnableTimer1>
    radio_init_delay += RADIO_TIMER_Context.TxRxDelay.tim12_delay_mt;
10047b80:	4b26      	ldr	r3, [pc, #152]	@ (10047c1c <TIMER_SetRadioTimerValue+0x1e4>)
10047b82:	223d      	movs	r2, #61	@ 0x3d
10047b84:	5c9b      	ldrb	r3, [r3, r2]
10047b86:	001a      	movs	r2, r3
10047b88:	6a3b      	ldr	r3, [r7, #32]
10047b8a:	189b      	adds	r3, r3, r2
10047b8c:	623b      	str	r3, [r7, #32]
  }

  RADIO_TIMER_Context.last_anchor_mt = (current_time + rel_timeout_mt) & TIMER_MAX_VALUE;
10047b8e:	68fa      	ldr	r2, [r7, #12]
10047b90:	693b      	ldr	r3, [r7, #16]
10047b92:	18d2      	adds	r2, r2, r3
10047b94:	4b21      	ldr	r3, [pc, #132]	@ (10047c1c <TIMER_SetRadioTimerValue+0x1e4>)
10047b96:	2188      	movs	r1, #136	@ 0x88
10047b98:	505a      	str	r2, [r3, r1]

#if defined (STM32WB06) || defined (STM32WB07)
  BLUEGLOB->BYTE4 |= 1 << 7;
10047b9a:	4b22      	ldr	r3, [pc, #136]	@ (10047c24 <TIMER_SetRadioTimerValue+0x1ec>)
10047b9c:	791b      	ldrb	r3, [r3, #4]
10047b9e:	b2db      	uxtb	r3, r3
10047ba0:	4920      	ldr	r1, [pc, #128]	@ (10047c24 <TIMER_SetRadioTimerValue+0x1ec>)
10047ba2:	2280      	movs	r2, #128	@ 0x80
10047ba4:	4252      	negs	r2, r2
10047ba6:	4313      	orrs	r3, r2
10047ba8:	b2db      	uxtb	r3, r3
10047baa:	710b      	strb	r3, [r1, #4]
  BLUEGLOB->BYTE22 = 0xF0;
10047bac:	4b1d      	ldr	r3, [pc, #116]	@ (10047c24 <TIMER_SetRadioTimerValue+0x1ec>)
10047bae:	22f0      	movs	r2, #240	@ 0xf0
10047bb0:	759a      	strb	r2, [r3, #22]
  BLUEGLOB->BYTE23 = 0xFF;
10047bb2:	4b1c      	ldr	r3, [pc, #112]	@ (10047c24 <TIMER_SetRadioTimerValue+0x1ec>)
10047bb4:	22ff      	movs	r2, #255	@ 0xff
10047bb6:	75da      	strb	r2, [r3, #23]
#endif

  /* Basic low level check with an extra margin of machine units */
  if ((delay + radio_init_delay) < (radio_init_delay + 5))
10047bb8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
10047bba:	6a3b      	ldr	r3, [r7, #32]
10047bbc:	18d2      	adds	r2, r2, r3
10047bbe:	6a3b      	ldr	r3, [r7, #32]
10047bc0:	3305      	adds	r3, #5
10047bc2:	429a      	cmp	r2, r3
10047bc4:	d212      	bcs.n	10047bec <TIMER_SetRadioTimerValue+0x1b4>
  {
    LL_RADIO_TIMER_DisableTimer1(BLUE);
10047bc6:	23c0      	movs	r3, #192	@ 0xc0
10047bc8:	05db      	lsls	r3, r3, #23
10047bca:	0018      	movs	r0, r3
10047bcc:	f7fe fb0e 	bl	100461ec <LL_RADIO_TIMER_DisableTimer1>
    LL_RADIO_TIMER_DisableTimer2(BLUE);
10047bd0:	23c0      	movs	r3, #192	@ 0xc0
10047bd2:	05db      	lsls	r3, r3, #23
10047bd4:	0018      	movs	r0, r3
10047bd6:	f7fe fb29 	bl	1004622c <LL_RADIO_TIMER_DisableTimer2>
    LL_RADIO_TIMER_DisableBLEWakeupTimer(WAKEUP);
10047bda:	4b13      	ldr	r3, [pc, #76]	@ (10047c28 <TIMER_SetRadioTimerValue+0x1f0>)
10047bdc:	0018      	movs	r0, r3
10047bde:	f7fe fb6b 	bl	100462b8 <LL_RADIO_TIMER_DisableBLEWakeupTimer>
    ret_val =  1;
10047be2:	231b      	movs	r3, #27
10047be4:	18fb      	adds	r3, r7, r3
10047be6:	2201      	movs	r2, #1
10047be8:	701a      	strb	r2, [r3, #0]
10047bea:	e010      	b.n	10047c0e <TIMER_SetRadioTimerValue+0x1d6>
  }
  else
  {
    RADIO_TIMER_Context.last_setup_time = blue_unit_conversion(radio_init_delay, RADIO_TIMER_Context.calibrationData.period1, MULT64_THR_PERIOD);
10047bec:	4b0b      	ldr	r3, [pc, #44]	@ (10047c1c <TIMER_SetRadioTimerValue+0x1e4>)
10047bee:	69db      	ldr	r3, [r3, #28]
10047bf0:	0019      	movs	r1, r3
10047bf2:	4a0e      	ldr	r2, [pc, #56]	@ (10047c2c <TIMER_SetRadioTimerValue+0x1f4>)
10047bf4:	6a3b      	ldr	r3, [r7, #32]
10047bf6:	0018      	movs	r0, r3
10047bf8:	f7f8 fa62 	bl	100400c0 <blue_unit_conversion>
10047bfc:	0003      	movs	r3, r0
10047bfe:	b2d9      	uxtb	r1, r3
10047c00:	4b06      	ldr	r3, [pc, #24]	@ (10047c1c <TIMER_SetRadioTimerValue+0x1e4>)
10047c02:	2284      	movs	r2, #132	@ 0x84
10047c04:	5499      	strb	r1, [r3, r2]
    ret_val = 0;
10047c06:	231b      	movs	r3, #27
10047c08:	18fb      	adds	r3, r7, r3
10047c0a:	2200      	movs	r2, #0
10047c0c:	701a      	strb	r2, [r3, #0]
  }

  return ret_val;
10047c0e:	231b      	movs	r3, #27
10047c10:	18fb      	adds	r3, r7, r3
10047c12:	781b      	ldrb	r3, [r3, #0]
}
10047c14:	0018      	movs	r0, r3
10047c16:	46bd      	mov	sp, r7
10047c18:	b00a      	add	sp, #40	@ 0x28
10047c1a:	bd80      	pop	{r7, pc}
10047c1c:	20000598 	.word	0x20000598
10047c20:	00000326 	.word	0x00000326
10047c24:	200000c0 	.word	0x200000c0
10047c28:	60001800 	.word	0x60001800
10047c2c:	00000635 	.word	0x00000635

10047c30 <TIMER_GetPastSysTime>:
  * @param   current_system_time: Current System time
  * @warning User should guarantee that call to this function are performed in a non-interruptible context.
  * @return  STU value
  */
static uint64_t TIMER_GetPastSysTime(uint32_t time, uint64_t *current_system_time)
{
10047c30:	b5b0      	push	{r4, r5, r7, lr}
10047c32:	b084      	sub	sp, #16
10047c34:	af00      	add	r7, sp, #0
10047c36:	6078      	str	r0, [r7, #4]
10047c38:	6039      	str	r1, [r7, #0]
  uint32_t delta_systime, current_machine_time;

  *current_system_time = _get_system_time_and_machine(&RADIO_TIMER_Context, &current_machine_time);
10047c3a:	2308      	movs	r3, #8
10047c3c:	18fa      	adds	r2, r7, r3
10047c3e:	4b12      	ldr	r3, [pc, #72]	@ (10047c88 <TIMER_GetPastSysTime+0x58>)
10047c40:	0011      	movs	r1, r2
10047c42:	0018      	movs	r0, r3
10047c44:	f7ff fb3c 	bl	100472c0 <_get_system_time_and_machine>
10047c48:	0002      	movs	r2, r0
10047c4a:	000b      	movs	r3, r1
10047c4c:	6839      	ldr	r1, [r7, #0]
10047c4e:	600a      	str	r2, [r1, #0]
10047c50:	604b      	str	r3, [r1, #4]
  delta_systime = blue_unit_conversion(TIME_DIFF(current_machine_time, time), RADIO_TIMER_Context.calibrationData.period1, MULT64_THR_PERIOD);
10047c52:	68ba      	ldr	r2, [r7, #8]
10047c54:	687b      	ldr	r3, [r7, #4]
10047c56:	1ad0      	subs	r0, r2, r3
10047c58:	4b0b      	ldr	r3, [pc, #44]	@ (10047c88 <TIMER_GetPastSysTime+0x58>)
10047c5a:	69db      	ldr	r3, [r3, #28]
10047c5c:	0019      	movs	r1, r3
10047c5e:	4b0b      	ldr	r3, [pc, #44]	@ (10047c8c <TIMER_GetPastSysTime+0x5c>)
10047c60:	001a      	movs	r2, r3
10047c62:	f7f8 fa2d 	bl	100400c0 <blue_unit_conversion>
10047c66:	0003      	movs	r3, r0
10047c68:	60fb      	str	r3, [r7, #12]

  return (*current_system_time - delta_systime);
10047c6a:	683b      	ldr	r3, [r7, #0]
10047c6c:	681a      	ldr	r2, [r3, #0]
10047c6e:	685b      	ldr	r3, [r3, #4]
10047c70:	68f9      	ldr	r1, [r7, #12]
10047c72:	000c      	movs	r4, r1
10047c74:	2100      	movs	r1, #0
10047c76:	000d      	movs	r5, r1
10047c78:	1b12      	subs	r2, r2, r4
10047c7a:	41ab      	sbcs	r3, r5
}
10047c7c:	0010      	movs	r0, r2
10047c7e:	0019      	movs	r1, r3
10047c80:	46bd      	mov	sp, r7
10047c82:	b004      	add	sp, #16
10047c84:	bdb0      	pop	{r4, r5, r7, pc}
10047c86:	46c0      	nop			@ (mov r8, r8)
10047c88:	20000598 	.word	0x20000598
10047c8c:	00000635 	.word	0x00000635

10047c90 <TIMER_GetRadioTimerValue>:
  * @retval 1 if Timer1 has been programmed.
  * @retval 2 if Timer2 has been programmed.
  * @retval 3 if Wakeup Timer has been programmed.
  */
static uint8_t TIMER_GetRadioTimerValue(uint32_t *time)
{
10047c90:	b580      	push	{r7, lr}
10047c92:	b082      	sub	sp, #8
10047c94:	af00      	add	r7, sp, #0
10047c96:	6078      	str	r0, [r7, #4]
  if (LL_RADIO_TIMER_IsEnabledBLEWakeupTimer(WAKEUP))
10047c98:	4b1a      	ldr	r3, [pc, #104]	@ (10047d04 <TIMER_GetRadioTimerValue+0x74>)
10047c9a:	0018      	movs	r0, r3
10047c9c:	f7fe fb1c 	bl	100462d8 <LL_RADIO_TIMER_IsEnabledBLEWakeupTimer>
10047ca0:	1e03      	subs	r3, r0, #0
10047ca2:	d008      	beq.n	10047cb6 <TIMER_GetRadioTimerValue+0x26>
  {
    *time = LL_RADIO_TIMER_GetBLEWakeupTime(WAKEUP);
10047ca4:	4b17      	ldr	r3, [pc, #92]	@ (10047d04 <TIMER_GetRadioTimerValue+0x74>)
10047ca6:	0018      	movs	r0, r3
10047ca8:	f7fe fb65 	bl	10046376 <LL_RADIO_TIMER_GetBLEWakeupTime>
10047cac:	0002      	movs	r2, r0
10047cae:	687b      	ldr	r3, [r7, #4]
10047cb0:	601a      	str	r2, [r3, #0]
    return WAKEUP_RADIO_TIMER_BUSY;
10047cb2:	2303      	movs	r3, #3
10047cb4:	e022      	b.n	10047cfc <TIMER_GetRadioTimerValue+0x6c>
  }
  else if (LL_RADIO_TIMER_IsEnabledTimer1(BLUE))
10047cb6:	23c0      	movs	r3, #192	@ 0xc0
10047cb8:	05db      	lsls	r3, r3, #23
10047cba:	0018      	movs	r0, r3
10047cbc:	f7fe faa5 	bl	1004620a <LL_RADIO_TIMER_IsEnabledTimer1>
10047cc0:	1e03      	subs	r3, r0, #0
10047cc2:	d009      	beq.n	10047cd8 <TIMER_GetRadioTimerValue+0x48>
  {
    *time = LL_RADIO_TIMER_GetTimeout(BLUE);
10047cc4:	23c0      	movs	r3, #192	@ 0xc0
10047cc6:	05db      	lsls	r3, r3, #23
10047cc8:	0018      	movs	r0, r3
10047cca:	f7fe fadb 	bl	10046284 <LL_RADIO_TIMER_GetTimeout>
10047cce:	0002      	movs	r2, r0
10047cd0:	687b      	ldr	r3, [r7, #4]
10047cd2:	601a      	str	r2, [r3, #0]
    return RADIO_TIMER1_BUSY;
10047cd4:	2301      	movs	r3, #1
10047cd6:	e011      	b.n	10047cfc <TIMER_GetRadioTimerValue+0x6c>
  }
  else if (LL_RADIO_TIMER_IsEnabledTimer2(BLUE))
10047cd8:	23c0      	movs	r3, #192	@ 0xc0
10047cda:	05db      	lsls	r3, r3, #23
10047cdc:	0018      	movs	r0, r3
10047cde:	f7fe fab4 	bl	1004624a <LL_RADIO_TIMER_IsEnabledTimer2>
10047ce2:	1e03      	subs	r3, r0, #0
10047ce4:	d009      	beq.n	10047cfa <TIMER_GetRadioTimerValue+0x6a>
  {
    *time = LL_RADIO_TIMER_GetTimeout(BLUE);
10047ce6:	23c0      	movs	r3, #192	@ 0xc0
10047ce8:	05db      	lsls	r3, r3, #23
10047cea:	0018      	movs	r0, r3
10047cec:	f7fe faca 	bl	10046284 <LL_RADIO_TIMER_GetTimeout>
10047cf0:	0002      	movs	r2, r0
10047cf2:	687b      	ldr	r3, [r7, #4]
10047cf4:	601a      	str	r2, [r3, #0]
    return RADIO_TIMER2_BUSY;
10047cf6:	2302      	movs	r3, #2
10047cf8:	e000      	b.n	10047cfc <TIMER_GetRadioTimerValue+0x6c>
  }
  else
  {
    return 0;
10047cfa:	2300      	movs	r3, #0
  }
}
10047cfc:	0018      	movs	r0, r3
10047cfe:	46bd      	mov	sp, r7
10047d00:	b002      	add	sp, #8
10047d02:	bd80      	pop	{r7, pc}
10047d04:	60001800 	.word	0x60001800

10047d08 <HAL_RADIO_TIMER_CpuWakeUpCallback>:

__weak void HAL_RADIO_TIMER_CpuWakeUpCallback(void)
{
10047d08:	b580      	push	{r7, lr}
10047d0a:	af00      	add	r7, sp, #0
}
10047d0c:	46c0      	nop			@ (mov r8, r8)
10047d0e:	46bd      	mov	sp, r7
10047d10:	bd80      	pop	{r7, pc}

10047d12 <HAL_RADIO_TIMER_TxRxWakeUpCallback>:


__weak void HAL_RADIO_TIMER_TxRxWakeUpCallback(void)
{
10047d12:	b580      	push	{r7, lr}
10047d14:	af00      	add	r7, sp, #0
}
10047d16:	46c0      	nop			@ (mov r8, r8)
10047d18:	46bd      	mov	sp, r7
10047d1a:	bd80      	pop	{r7, pc}

10047d1c <HAL_RADIO_TIMER_CPU_WKUP_IRQHandler>:

void HAL_RADIO_TIMER_CPU_WKUP_IRQHandler(void)
{
10047d1c:	b580      	push	{r7, lr}
10047d1e:	af00      	add	r7, sp, #0
  HAL_RADIO_TIMER_TimeoutCallback();
10047d20:	f7ff f884 	bl	10046e2c <HAL_RADIO_TIMER_TimeoutCallback>

  HAL_RADIO_TIMER_CpuWakeUpCallback();
10047d24:	f7ff fff0 	bl	10047d08 <HAL_RADIO_TIMER_CpuWakeUpCallback>
}
10047d28:	46c0      	nop			@ (mov r8, r8)
10047d2a:	46bd      	mov	sp, r7
10047d2c:	bd80      	pop	{r7, pc}

10047d2e <HAL_RADIO_TIMER_TXRX_WKUP_IRQHandler>:

void HAL_RADIO_TIMER_TXRX_WKUP_IRQHandler(void)
{
10047d2e:	b580      	push	{r7, lr}
10047d30:	af00      	add	r7, sp, #0
  HAL_RADIO_TIMER_TxRxWakeUpCallback();
10047d32:	f7ff ffee 	bl	10047d12 <HAL_RADIO_TIMER_TxRxWakeUpCallback>
#if defined (STM32WB06) || defined (STM32WB07)
  HAL_RADIO_TIMER_WakeUpCallback();
10047d36:	f7ff f84d 	bl	10046dd4 <HAL_RADIO_TIMER_WakeUpCallback>
#endif
}
10047d3a:	46c0      	nop			@ (mov r8, r8)
10047d3c:	46bd      	mov	sp, r7
10047d3e:	bd80      	pop	{r7, pc}

10047d40 <HAL_RADIO_TIMER_ERROR_IRQHandler>:

void HAL_RADIO_TIMER_ERROR_IRQHandler(void)
{
10047d40:	b580      	push	{r7, lr}
10047d42:	b082      	sub	sp, #8
10047d44:	af00      	add	r7, sp, #0
  volatile uint32_t debug_cmd = 0;
10047d46:	2300      	movs	r3, #0
10047d48:	607b      	str	r3, [r7, #4]
  UNUSED(debug_cmd);
10047d4a:	687b      	ldr	r3, [r7, #4]
  BLUE->DEBUGCMDREG |= 1;
10047d4c:	23c0      	movs	r3, #192	@ 0xc0
10047d4e:	05db      	lsls	r3, r3, #23
10047d50:	6f5a      	ldr	r2, [r3, #116]	@ 0x74
10047d52:	23c0      	movs	r3, #192	@ 0xc0
10047d54:	05db      	lsls	r3, r3, #23
10047d56:	2101      	movs	r1, #1
10047d58:	430a      	orrs	r2, r1
10047d5a:	675a      	str	r2, [r3, #116]	@ 0x74
  /* If the device is configured with
     System clock = 64 MHz and BLE clock = 16 MHz
     a register read is necessary to end fine
     the clear interrupt register operation,
     due the AHB down converter latency */
  debug_cmd = BLUE->DEBUGCMDREG;
10047d5c:	23c0      	movs	r3, #192	@ 0xc0
10047d5e:	05db      	lsls	r3, r3, #23
10047d60:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
10047d62:	607b      	str	r3, [r7, #4]
}
10047d64:	46c0      	nop			@ (mov r8, r8)
10047d66:	46bd      	mov	sp, r7
10047d68:	b002      	add	sp, #8
10047d6a:	bd80      	pop	{r7, pc}

10047d6c <LL_PWR_SetNoPullB>:
{
10047d6c:	b580      	push	{r7, lr}
10047d6e:	b082      	sub	sp, #8
10047d70:	af00      	add	r7, sp, #0
10047d72:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(PWR->PUCRB, GPIONumber);
10047d74:	4b08      	ldr	r3, [pc, #32]	@ (10047d98 <LL_PWR_SetNoPullB+0x2c>)
10047d76:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
10047d78:	687b      	ldr	r3, [r7, #4]
10047d7a:	43d9      	mvns	r1, r3
10047d7c:	4b06      	ldr	r3, [pc, #24]	@ (10047d98 <LL_PWR_SetNoPullB+0x2c>)
10047d7e:	400a      	ands	r2, r1
10047d80:	629a      	str	r2, [r3, #40]	@ 0x28
  CLEAR_BIT(PWR->PDCRB, GPIONumber);
10047d82:	4b05      	ldr	r3, [pc, #20]	@ (10047d98 <LL_PWR_SetNoPullB+0x2c>)
10047d84:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
10047d86:	687b      	ldr	r3, [r7, #4]
10047d88:	43d9      	mvns	r1, r3
10047d8a:	4b03      	ldr	r3, [pc, #12]	@ (10047d98 <LL_PWR_SetNoPullB+0x2c>)
10047d8c:	400a      	ands	r2, r1
10047d8e:	62da      	str	r2, [r3, #44]	@ 0x2c
}
10047d90:	46c0      	nop			@ (mov r8, r8)
10047d92:	46bd      	mov	sp, r7
10047d94:	b002      	add	sp, #8
10047d96:	bd80      	pop	{r7, pc}
10047d98:	48500000 	.word	0x48500000

10047d9c <LL_RCC_HSE_Enable>:
  * @brief  Enable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Enable(void)
{
10047d9c:	b580      	push	{r7, lr}
10047d9e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
10047da0:	4b04      	ldr	r3, [pc, #16]	@ (10047db4 <LL_RCC_HSE_Enable+0x18>)
10047da2:	681a      	ldr	r2, [r3, #0]
10047da4:	4b03      	ldr	r3, [pc, #12]	@ (10047db4 <LL_RCC_HSE_Enable+0x18>)
10047da6:	2180      	movs	r1, #128	@ 0x80
10047da8:	0249      	lsls	r1, r1, #9
10047daa:	430a      	orrs	r2, r1
10047dac:	601a      	str	r2, [r3, #0]
}
10047dae:	46c0      	nop			@ (mov r8, r8)
10047db0:	46bd      	mov	sp, r7
10047db2:	bd80      	pop	{r7, pc}
10047db4:	48400000 	.word	0x48400000

10047db8 <LL_RCC_HSE_Disable>:
  * @brief  Disable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Disable(void)
{
10047db8:	b580      	push	{r7, lr}
10047dba:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
10047dbc:	4b04      	ldr	r3, [pc, #16]	@ (10047dd0 <LL_RCC_HSE_Disable+0x18>)
10047dbe:	681a      	ldr	r2, [r3, #0]
10047dc0:	4b03      	ldr	r3, [pc, #12]	@ (10047dd0 <LL_RCC_HSE_Disable+0x18>)
10047dc2:	4904      	ldr	r1, [pc, #16]	@ (10047dd4 <LL_RCC_HSE_Disable+0x1c>)
10047dc4:	400a      	ands	r2, r1
10047dc6:	601a      	str	r2, [r3, #0]
}
10047dc8:	46c0      	nop			@ (mov r8, r8)
10047dca:	46bd      	mov	sp, r7
10047dcc:	bd80      	pop	{r7, pc}
10047dce:	46c0      	nop			@ (mov r8, r8)
10047dd0:	48400000 	.word	0x48400000
10047dd4:	fffeffff 	.word	0xfffeffff

10047dd8 <LL_RCC_HSE_IsReady>:
  * @brief  Check if HSE oscillator Ready
  * @rmtoll CR           HSERDY        LL_RCC_HSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsReady(void)
{
10047dd8:	b580      	push	{r7, lr}
10047dda:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
10047ddc:	4b07      	ldr	r3, [pc, #28]	@ (10047dfc <LL_RCC_HSE_IsReady+0x24>)
10047dde:	681a      	ldr	r2, [r3, #0]
10047de0:	2380      	movs	r3, #128	@ 0x80
10047de2:	029b      	lsls	r3, r3, #10
10047de4:	401a      	ands	r2, r3
10047de6:	2380      	movs	r3, #128	@ 0x80
10047de8:	029b      	lsls	r3, r3, #10
10047dea:	429a      	cmp	r2, r3
10047dec:	d101      	bne.n	10047df2 <LL_RCC_HSE_IsReady+0x1a>
10047dee:	2301      	movs	r3, #1
10047df0:	e000      	b.n	10047df4 <LL_RCC_HSE_IsReady+0x1c>
10047df2:	2300      	movs	r3, #0
}
10047df4:	0018      	movs	r0, r3
10047df6:	46bd      	mov	sp, r7
10047df8:	bd80      	pop	{r7, pc}
10047dfa:	46c0      	nop			@ (mov r8, r8)
10047dfc:	48400000 	.word	0x48400000

10047e00 <LL_RCC_HSE_SetCapacitorTuning>:
  * @rmtoll RFSWHSECR        SWXOTUNE       LL_RCC_HSE_SetCapacitorTuning
  * @param  Value Between Min_Data = 0 and Max_Data = 63
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_SetCapacitorTuning(uint32_t Value)
{
10047e00:	b580      	push	{r7, lr}
10047e02:	b082      	sub	sp, #8
10047e04:	af00      	add	r7, sp, #0
10047e06:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->RFSWHSECR, RCC_RFSWHSECR_SWXOTUNE, Value << RCC_RFSWHSECR_SWXOTUNE_Pos);
10047e08:	4a0b      	ldr	r2, [pc, #44]	@ (10047e38 <LL_RCC_HSE_SetCapacitorTuning+0x38>)
10047e0a:	2398      	movs	r3, #152	@ 0x98
10047e0c:	58d3      	ldr	r3, [r2, r3]
10047e0e:	4a0b      	ldr	r2, [pc, #44]	@ (10047e3c <LL_RCC_HSE_SetCapacitorTuning+0x3c>)
10047e10:	401a      	ands	r2, r3
10047e12:	687b      	ldr	r3, [r7, #4]
10047e14:	021b      	lsls	r3, r3, #8
10047e16:	4908      	ldr	r1, [pc, #32]	@ (10047e38 <LL_RCC_HSE_SetCapacitorTuning+0x38>)
10047e18:	4313      	orrs	r3, r2
10047e1a:	2298      	movs	r2, #152	@ 0x98
10047e1c:	508b      	str	r3, [r1, r2]
  SET_BIT(RCC->RFSWHSECR, RCC_RFSWHSECR_SWXOTUNEEN);
10047e1e:	4a06      	ldr	r2, [pc, #24]	@ (10047e38 <LL_RCC_HSE_SetCapacitorTuning+0x38>)
10047e20:	2398      	movs	r3, #152	@ 0x98
10047e22:	58d3      	ldr	r3, [r2, r3]
10047e24:	4904      	ldr	r1, [pc, #16]	@ (10047e38 <LL_RCC_HSE_SetCapacitorTuning+0x38>)
10047e26:	2280      	movs	r2, #128	@ 0x80
10047e28:	4313      	orrs	r3, r2
10047e2a:	2298      	movs	r2, #152	@ 0x98
10047e2c:	508b      	str	r3, [r1, r2]
}
10047e2e:	46c0      	nop			@ (mov r8, r8)
10047e30:	46bd      	mov	sp, r7
10047e32:	b002      	add	sp, #8
10047e34:	bd80      	pop	{r7, pc}
10047e36:	46c0      	nop			@ (mov r8, r8)
10047e38:	48400000 	.word	0x48400000
10047e3c:	ffffc0ff 	.word	0xffffc0ff

10047e40 <LL_RCC_HSE_SetCurrentControl>:
  *         @arg @ref LL_RCC_HSE_CURRENTMAX_5
  *         @arg @ref LL_RCC_HSE_CURRENTMAX_6
  *         @arg @ref LL_RCC_HSE_CURRENTMAX_7
  */
__STATIC_INLINE void LL_RCC_HSE_SetCurrentControl(uint32_t CurrentMax)
{
10047e40:	b580      	push	{r7, lr}
10047e42:	b082      	sub	sp, #8
10047e44:	af00      	add	r7, sp, #0
10047e46:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->RFSWHSECR, RCC_RFSWHSECR_GMC, CurrentMax);
10047e48:	4a07      	ldr	r2, [pc, #28]	@ (10047e68 <LL_RCC_HSE_SetCurrentControl+0x28>)
10047e4a:	2398      	movs	r3, #152	@ 0x98
10047e4c:	58d3      	ldr	r3, [r2, r3]
10047e4e:	2270      	movs	r2, #112	@ 0x70
10047e50:	4393      	bics	r3, r2
10047e52:	001a      	movs	r2, r3
10047e54:	4904      	ldr	r1, [pc, #16]	@ (10047e68 <LL_RCC_HSE_SetCurrentControl+0x28>)
10047e56:	687b      	ldr	r3, [r7, #4]
10047e58:	4313      	orrs	r3, r2
10047e5a:	2298      	movs	r2, #152	@ 0x98
10047e5c:	508b      	str	r3, [r1, r2]
}
10047e5e:	46c0      	nop			@ (mov r8, r8)
10047e60:	46bd      	mov	sp, r7
10047e62:	b002      	add	sp, #8
10047e64:	bd80      	pop	{r7, pc}
10047e66:	46c0      	nop			@ (mov r8, r8)
10047e68:	48400000 	.word	0x48400000

10047e6c <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI
  * @rmtoll CFGR           STOPHSI        LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
10047e6c:	b580      	push	{r7, lr}
10047e6e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CFGR, RCC_CFGR_STOPHSI);
10047e70:	4b07      	ldr	r3, [pc, #28]	@ (10047e90 <LL_RCC_HSI_Enable+0x24>)
10047e72:	689a      	ldr	r2, [r3, #8]
10047e74:	4b06      	ldr	r3, [pc, #24]	@ (10047e90 <LL_RCC_HSI_Enable+0x24>)
10047e76:	2104      	movs	r1, #4
10047e78:	438a      	bics	r2, r1
10047e7a:	609a      	str	r2, [r3, #8]
  CLEAR_BIT(RCC->CFGR, RCC_CFGR_HSESEL);
10047e7c:	4b04      	ldr	r3, [pc, #16]	@ (10047e90 <LL_RCC_HSI_Enable+0x24>)
10047e7e:	689a      	ldr	r2, [r3, #8]
10047e80:	4b03      	ldr	r3, [pc, #12]	@ (10047e90 <LL_RCC_HSI_Enable+0x24>)
10047e82:	2102      	movs	r1, #2
10047e84:	438a      	bics	r2, r1
10047e86:	609a      	str	r2, [r3, #8]
}
10047e88:	46c0      	nop			@ (mov r8, r8)
10047e8a:	46bd      	mov	sp, r7
10047e8c:	bd80      	pop	{r7, pc}
10047e8e:	46c0      	nop			@ (mov r8, r8)
10047e90:	48400000 	.word	0x48400000

10047e94 <LL_RCC_HSI_Disable>:
  * @brief  Disable HSI
  * @rmtoll CFGR           STOPHSI        LL_RCC_HSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Disable(void)
{
10047e94:	b580      	push	{r7, lr}
10047e96:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CFGR, RCC_CFGR_HSESEL);
10047e98:	4b07      	ldr	r3, [pc, #28]	@ (10047eb8 <LL_RCC_HSI_Disable+0x24>)
10047e9a:	689a      	ldr	r2, [r3, #8]
10047e9c:	4b06      	ldr	r3, [pc, #24]	@ (10047eb8 <LL_RCC_HSI_Disable+0x24>)
10047e9e:	2102      	movs	r1, #2
10047ea0:	430a      	orrs	r2, r1
10047ea2:	609a      	str	r2, [r3, #8]
  SET_BIT(RCC->CFGR, RCC_CFGR_STOPHSI);
10047ea4:	4b04      	ldr	r3, [pc, #16]	@ (10047eb8 <LL_RCC_HSI_Disable+0x24>)
10047ea6:	689a      	ldr	r2, [r3, #8]
10047ea8:	4b03      	ldr	r3, [pc, #12]	@ (10047eb8 <LL_RCC_HSI_Disable+0x24>)
10047eaa:	2104      	movs	r1, #4
10047eac:	430a      	orrs	r2, r1
10047eae:	609a      	str	r2, [r3, #8]
}
10047eb0:	46c0      	nop			@ (mov r8, r8)
10047eb2:	46bd      	mov	sp, r7
10047eb4:	bd80      	pop	{r7, pc}
10047eb6:	46c0      	nop			@ (mov r8, r8)
10047eb8:	48400000 	.word	0x48400000

10047ebc <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
10047ebc:	b580      	push	{r7, lr}
10047ebe:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
10047ec0:	4b07      	ldr	r3, [pc, #28]	@ (10047ee0 <LL_RCC_HSI_IsReady+0x24>)
10047ec2:	681a      	ldr	r2, [r3, #0]
10047ec4:	2380      	movs	r3, #128	@ 0x80
10047ec6:	00db      	lsls	r3, r3, #3
10047ec8:	401a      	ands	r2, r3
10047eca:	2380      	movs	r3, #128	@ 0x80
10047ecc:	00db      	lsls	r3, r3, #3
10047ece:	429a      	cmp	r2, r3
10047ed0:	d101      	bne.n	10047ed6 <LL_RCC_HSI_IsReady+0x1a>
10047ed2:	2301      	movs	r3, #1
10047ed4:	e000      	b.n	10047ed8 <LL_RCC_HSI_IsReady+0x1c>
10047ed6:	2300      	movs	r3, #0
}
10047ed8:	0018      	movs	r0, r3
10047eda:	46bd      	mov	sp, r7
10047edc:	bd80      	pop	{r7, pc}
10047ede:	46c0      	nop			@ (mov r8, r8)
10047ee0:	48400000 	.word	0x48400000

10047ee4 <LL_RCC_DIRECT_HSE_Enable>:
  * @brief  Enable DIRECT_HSE mode
  * @rmtoll CFGR       HSESEL/STOPHSI         LL_RCC_HSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_DIRECT_HSE_Enable(void)
{
10047ee4:	b580      	push	{r7, lr}
10047ee6:	b082      	sub	sp, #8
10047ee8:	af00      	add	r7, sp, #0
  while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0);
10047eea:	46c0      	nop			@ (mov r8, r8)
10047eec:	4b0f      	ldr	r3, [pc, #60]	@ (10047f2c <LL_RCC_DIRECT_HSE_Enable+0x48>)
10047eee:	681a      	ldr	r2, [r3, #0]
10047ef0:	2380      	movs	r3, #128	@ 0x80
10047ef2:	029b      	lsls	r3, r3, #10
10047ef4:	4013      	ands	r3, r2
10047ef6:	d0f9      	beq.n	10047eec <LL_RCC_DIRECT_HSE_Enable+0x8>
  SET_BIT(RCC->CFGR, RCC_CFGR_HSESEL);
10047ef8:	4b0c      	ldr	r3, [pc, #48]	@ (10047f2c <LL_RCC_DIRECT_HSE_Enable+0x48>)
10047efa:	689a      	ldr	r2, [r3, #8]
10047efc:	4b0b      	ldr	r3, [pc, #44]	@ (10047f2c <LL_RCC_DIRECT_HSE_Enable+0x48>)
10047efe:	2102      	movs	r1, #2
10047f00:	430a      	orrs	r2, r1
10047f02:	609a      	str	r2, [r3, #8]
  for (volatile int i = 0; i < 6; i++)
10047f04:	2300      	movs	r3, #0
10047f06:	607b      	str	r3, [r7, #4]
10047f08:	e003      	b.n	10047f12 <LL_RCC_DIRECT_HSE_Enable+0x2e>
  {
    __asm("NOP");
10047f0a:	46c0      	nop			@ (mov r8, r8)
  for (volatile int i = 0; i < 6; i++)
10047f0c:	687b      	ldr	r3, [r7, #4]
10047f0e:	3301      	adds	r3, #1
10047f10:	607b      	str	r3, [r7, #4]
10047f12:	687b      	ldr	r3, [r7, #4]
10047f14:	2b05      	cmp	r3, #5
10047f16:	ddf8      	ble.n	10047f0a <LL_RCC_DIRECT_HSE_Enable+0x26>
  }
  SET_BIT(RCC->CFGR, RCC_CFGR_STOPHSI);
10047f18:	4b04      	ldr	r3, [pc, #16]	@ (10047f2c <LL_RCC_DIRECT_HSE_Enable+0x48>)
10047f1a:	689a      	ldr	r2, [r3, #8]
10047f1c:	4b03      	ldr	r3, [pc, #12]	@ (10047f2c <LL_RCC_DIRECT_HSE_Enable+0x48>)
10047f1e:	2104      	movs	r1, #4
10047f20:	430a      	orrs	r2, r1
10047f22:	609a      	str	r2, [r3, #8]
}
10047f24:	46c0      	nop			@ (mov r8, r8)
10047f26:	46bd      	mov	sp, r7
10047f28:	b002      	add	sp, #8
10047f2a:	bd80      	pop	{r7, pc}
10047f2c:	48400000 	.word	0x48400000

10047f30 <LL_RCC_LSCO_SetSource>:
  *         @arg @ref LL_RCC_LSCO_CLKSOURCE_LSI
  *         @arg @ref LL_RCC_LSCO_CLKSOURCE_HSI64M_DIV2048
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSCO_SetSource(uint32_t Source)
{
10047f30:	b580      	push	{r7, lr}
10047f32:	b082      	sub	sp, #8
10047f34:	af00      	add	r7, sp, #0
10047f36:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_CLKSLOWSEL, Source);
10047f38:	4b06      	ldr	r3, [pc, #24]	@ (10047f54 <LL_RCC_LSCO_SetSource+0x24>)
10047f3a:	689b      	ldr	r3, [r3, #8]
10047f3c:	4a06      	ldr	r2, [pc, #24]	@ (10047f58 <LL_RCC_LSCO_SetSource+0x28>)
10047f3e:	4013      	ands	r3, r2
10047f40:	0019      	movs	r1, r3
10047f42:	4b04      	ldr	r3, [pc, #16]	@ (10047f54 <LL_RCC_LSCO_SetSource+0x24>)
10047f44:	687a      	ldr	r2, [r7, #4]
10047f46:	430a      	orrs	r2, r1
10047f48:	609a      	str	r2, [r3, #8]
}
10047f4a:	46c0      	nop			@ (mov r8, r8)
10047f4c:	46bd      	mov	sp, r7
10047f4e:	b002      	add	sp, #8
10047f50:	bd80      	pop	{r7, pc}
10047f52:	46c0      	nop			@ (mov r8, r8)
10047f54:	48400000 	.word	0x48400000
10047f58:	fffe7fff 	.word	0xfffe7fff

10047f5c <LL_RCC_LSE_Enable>:
  * @brief  Enable  Low Speed External (LSE) crystal.
  * @rmtoll CR         LSEON         LL_RCC_LSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_Enable(void)
{
10047f5c:	b580      	push	{r7, lr}
10047f5e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_LSEON);
10047f60:	4b04      	ldr	r3, [pc, #16]	@ (10047f74 <LL_RCC_LSE_Enable+0x18>)
10047f62:	681a      	ldr	r2, [r3, #0]
10047f64:	4b03      	ldr	r3, [pc, #12]	@ (10047f74 <LL_RCC_LSE_Enable+0x18>)
10047f66:	2110      	movs	r1, #16
10047f68:	430a      	orrs	r2, r1
10047f6a:	601a      	str	r2, [r3, #0]
}
10047f6c:	46c0      	nop			@ (mov r8, r8)
10047f6e:	46bd      	mov	sp, r7
10047f70:	bd80      	pop	{r7, pc}
10047f72:	46c0      	nop			@ (mov r8, r8)
10047f74:	48400000 	.word	0x48400000

10047f78 <LL_RCC_LSE_Disable>:
  * @brief  Disable  Low Speed External (LSE) crystal.
  * @rmtoll CR         LSEON         LL_RCC_LSE_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_Disable(void)
{
10047f78:	b580      	push	{r7, lr}
10047f7a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_LSEON);
10047f7c:	4b04      	ldr	r3, [pc, #16]	@ (10047f90 <LL_RCC_LSE_Disable+0x18>)
10047f7e:	681a      	ldr	r2, [r3, #0]
10047f80:	4b03      	ldr	r3, [pc, #12]	@ (10047f90 <LL_RCC_LSE_Disable+0x18>)
10047f82:	2110      	movs	r1, #16
10047f84:	438a      	bics	r2, r1
10047f86:	601a      	str	r2, [r3, #0]
}
10047f88:	46c0      	nop			@ (mov r8, r8)
10047f8a:	46bd      	mov	sp, r7
10047f8c:	bd80      	pop	{r7, pc}
10047f8e:	46c0      	nop			@ (mov r8, r8)
10047f90:	48400000 	.word	0x48400000

10047f94 <LL_RCC_LSE_IsReady>:
  * @brief  Check if LSE oscillator Ready
  * @rmtoll CR         LSERDY        LL_RCC_LSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsReady(void)
{
10047f94:	b580      	push	{r7, lr}
10047f96:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_LSERDY) == (RCC_CR_LSERDY)) ? 1UL : 0UL);
10047f98:	4b05      	ldr	r3, [pc, #20]	@ (10047fb0 <LL_RCC_LSE_IsReady+0x1c>)
10047f9a:	681b      	ldr	r3, [r3, #0]
10047f9c:	2220      	movs	r2, #32
10047f9e:	4013      	ands	r3, r2
10047fa0:	2b20      	cmp	r3, #32
10047fa2:	d101      	bne.n	10047fa8 <LL_RCC_LSE_IsReady+0x14>
10047fa4:	2301      	movs	r3, #1
10047fa6:	e000      	b.n	10047faa <LL_RCC_LSE_IsReady+0x16>
10047fa8:	2300      	movs	r3, #0
}
10047faa:	0018      	movs	r0, r3
10047fac:	46bd      	mov	sp, r7
10047fae:	bd80      	pop	{r7, pc}
10047fb0:	48400000 	.word	0x48400000

10047fb4 <LL_RCC_LSE_EnableBypass>:
  * @brief  Enable external clock source (LSE bypass).
  * @rmtoll CR         LSEBYP        LL_RCC_LSE_EnableBypass
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_EnableBypass(void)
{
10047fb4:	b580      	push	{r7, lr}
10047fb6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_LSEBYP);
10047fb8:	4b04      	ldr	r3, [pc, #16]	@ (10047fcc <LL_RCC_LSE_EnableBypass+0x18>)
10047fba:	681a      	ldr	r2, [r3, #0]
10047fbc:	4b03      	ldr	r3, [pc, #12]	@ (10047fcc <LL_RCC_LSE_EnableBypass+0x18>)
10047fbe:	2140      	movs	r1, #64	@ 0x40
10047fc0:	430a      	orrs	r2, r1
10047fc2:	601a      	str	r2, [r3, #0]
}
10047fc4:	46c0      	nop			@ (mov r8, r8)
10047fc6:	46bd      	mov	sp, r7
10047fc8:	bd80      	pop	{r7, pc}
10047fca:	46c0      	nop			@ (mov r8, r8)
10047fcc:	48400000 	.word	0x48400000

10047fd0 <LL_RCC_LSE_DisableBypass>:
  * @brief  Disable external clock source (LSE bypass).
  * @rmtoll CR         LSEBYP        LL_RCC_LSE_DisableBypass
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_DisableBypass(void)
{
10047fd0:	b580      	push	{r7, lr}
10047fd2:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_LSEBYP);
10047fd4:	4b04      	ldr	r3, [pc, #16]	@ (10047fe8 <LL_RCC_LSE_DisableBypass+0x18>)
10047fd6:	681a      	ldr	r2, [r3, #0]
10047fd8:	4b03      	ldr	r3, [pc, #12]	@ (10047fe8 <LL_RCC_LSE_DisableBypass+0x18>)
10047fda:	2140      	movs	r1, #64	@ 0x40
10047fdc:	438a      	bics	r2, r1
10047fde:	601a      	str	r2, [r3, #0]
}
10047fe0:	46c0      	nop			@ (mov r8, r8)
10047fe2:	46bd      	mov	sp, r7
10047fe4:	bd80      	pop	{r7, pc}
10047fe6:	46c0      	nop			@ (mov r8, r8)
10047fe8:	48400000 	.word	0x48400000

10047fec <LL_RCC_LSE_IsBypassEnabled>:
  * @brief  Check if LSE bypass configuration is enabled.
  * @rmtoll CR         LSEBYP        LL_RCC_LSE_IsBypassEnabled
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsBypassEnabled(void)
{
10047fec:	b580      	push	{r7, lr}
10047fee:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_LSEBYP) == (RCC_CR_LSEBYP)) ? 1UL : 0UL);
10047ff0:	4b05      	ldr	r3, [pc, #20]	@ (10048008 <LL_RCC_LSE_IsBypassEnabled+0x1c>)
10047ff2:	681b      	ldr	r3, [r3, #0]
10047ff4:	2240      	movs	r2, #64	@ 0x40
10047ff6:	4013      	ands	r3, r2
10047ff8:	2b40      	cmp	r3, #64	@ 0x40
10047ffa:	d101      	bne.n	10048000 <LL_RCC_LSE_IsBypassEnabled+0x14>
10047ffc:	2301      	movs	r3, #1
10047ffe:	e000      	b.n	10048002 <LL_RCC_LSE_IsBypassEnabled+0x16>
10048000:	2300      	movs	r3, #0
}
10048002:	0018      	movs	r0, r3
10048004:	46bd      	mov	sp, r7
10048006:	bd80      	pop	{r7, pc}
10048008:	48400000 	.word	0x48400000

1004800c <LL_RCC_LSE_SetDriveCapability>:
  *         @arg @ref LL_RCC_LSEDRIVE_MEDIUMHIGH
  *         @arg @ref LL_RCC_LSEDRIVE_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_SetDriveCapability(uint32_t LSEDrive)
{
1004800c:	b580      	push	{r7, lr}
1004800e:	b082      	sub	sp, #8
10048010:	af00      	add	r7, sp, #0
10048012:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSSWCR, RCC_CSSWCR_LSEDRV, LSEDrive);
10048014:	4b06      	ldr	r3, [pc, #24]	@ (10048030 <LL_RCC_LSE_SetDriveCapability+0x24>)
10048016:	68db      	ldr	r3, [r3, #12]
10048018:	2260      	movs	r2, #96	@ 0x60
1004801a:	4393      	bics	r3, r2
1004801c:	0019      	movs	r1, r3
1004801e:	4b04      	ldr	r3, [pc, #16]	@ (10048030 <LL_RCC_LSE_SetDriveCapability+0x24>)
10048020:	687a      	ldr	r2, [r7, #4]
10048022:	430a      	orrs	r2, r1
10048024:	60da      	str	r2, [r3, #12]
}
10048026:	46c0      	nop			@ (mov r8, r8)
10048028:	46bd      	mov	sp, r7
1004802a:	b002      	add	sp, #8
1004802c:	bd80      	pop	{r7, pc}
1004802e:	46c0      	nop			@ (mov r8, r8)
10048030:	48400000 	.word	0x48400000

10048034 <LL_RCC_LSI_Enable>:
  * @brief  Enable LSI Oscillator
  * @rmtoll CR          LSION         LL_RCC_LSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI_Enable(void)
{
10048034:	b580      	push	{r7, lr}
10048036:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_LSION);
10048038:	4b04      	ldr	r3, [pc, #16]	@ (1004804c <LL_RCC_LSI_Enable+0x18>)
1004803a:	681a      	ldr	r2, [r3, #0]
1004803c:	4b03      	ldr	r3, [pc, #12]	@ (1004804c <LL_RCC_LSI_Enable+0x18>)
1004803e:	2104      	movs	r1, #4
10048040:	430a      	orrs	r2, r1
10048042:	601a      	str	r2, [r3, #0]
}
10048044:	46c0      	nop			@ (mov r8, r8)
10048046:	46bd      	mov	sp, r7
10048048:	bd80      	pop	{r7, pc}
1004804a:	46c0      	nop			@ (mov r8, r8)
1004804c:	48400000 	.word	0x48400000

10048050 <LL_RCC_LSI_Disable>:
  * @brief  Disable LSI Oscillator
  * @rmtoll CR          LSION         LL_RCC_LSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI_Disable(void)
{
10048050:	b580      	push	{r7, lr}
10048052:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_LSION);
10048054:	4b04      	ldr	r3, [pc, #16]	@ (10048068 <LL_RCC_LSI_Disable+0x18>)
10048056:	681a      	ldr	r2, [r3, #0]
10048058:	4b03      	ldr	r3, [pc, #12]	@ (10048068 <LL_RCC_LSI_Disable+0x18>)
1004805a:	2104      	movs	r1, #4
1004805c:	438a      	bics	r2, r1
1004805e:	601a      	str	r2, [r3, #0]
}
10048060:	46c0      	nop			@ (mov r8, r8)
10048062:	46bd      	mov	sp, r7
10048064:	bd80      	pop	{r7, pc}
10048066:	46c0      	nop			@ (mov r8, r8)
10048068:	48400000 	.word	0x48400000

1004806c <LL_RCC_LSI_IsReady>:
  * @brief  Check if LSI is Ready
  * @rmtoll CR          LSIRDY        LL_RCC_LSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI_IsReady(void)
{
1004806c:	b580      	push	{r7, lr}
1004806e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_LSIRDY) == (RCC_CR_LSIRDY)) ? 1UL : 0UL);
10048070:	4b05      	ldr	r3, [pc, #20]	@ (10048088 <LL_RCC_LSI_IsReady+0x1c>)
10048072:	681b      	ldr	r3, [r3, #0]
10048074:	2208      	movs	r2, #8
10048076:	4013      	ands	r3, r2
10048078:	2b08      	cmp	r3, #8
1004807a:	d101      	bne.n	10048080 <LL_RCC_LSI_IsReady+0x14>
1004807c:	2301      	movs	r3, #1
1004807e:	e000      	b.n	10048082 <LL_RCC_LSI_IsReady+0x16>
10048080:	2300      	movs	r3, #0
}
10048082:	0018      	movs	r0, r3
10048084:	46bd      	mov	sp, r7
10048086:	bd80      	pop	{r7, pc}
10048088:	48400000 	.word	0x48400000

1004808c <LL_RCC_RC64MPLL_Enable>:
  * @brief  Enable RC64MPLL
  * @rmtoll CR           HSIPLLON         LL_RCC_RC64MPLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_RC64MPLL_Enable(void)
{
1004808c:	b580      	push	{r7, lr}
1004808e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSIPLLON);
10048090:	4b04      	ldr	r3, [pc, #16]	@ (100480a4 <LL_RCC_RC64MPLL_Enable+0x18>)
10048092:	681a      	ldr	r2, [r3, #0]
10048094:	4b03      	ldr	r3, [pc, #12]	@ (100480a4 <LL_RCC_RC64MPLL_Enable+0x18>)
10048096:	2180      	movs	r1, #128	@ 0x80
10048098:	0189      	lsls	r1, r1, #6
1004809a:	430a      	orrs	r2, r1
1004809c:	601a      	str	r2, [r3, #0]
}
1004809e:	46c0      	nop			@ (mov r8, r8)
100480a0:	46bd      	mov	sp, r7
100480a2:	bd80      	pop	{r7, pc}
100480a4:	48400000 	.word	0x48400000

100480a8 <LL_RCC_RC64MPLL_Disable>:
  * @note Cannot be disabled if the RC64MPLL clock is used as the system clock
  * @rmtoll CR           HSIPLLON         LL_RCC_RC64MPLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_RC64MPLL_Disable(void)
{
100480a8:	b580      	push	{r7, lr}
100480aa:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSIPLLON);
100480ac:	4b04      	ldr	r3, [pc, #16]	@ (100480c0 <LL_RCC_RC64MPLL_Disable+0x18>)
100480ae:	681a      	ldr	r2, [r3, #0]
100480b0:	4b03      	ldr	r3, [pc, #12]	@ (100480c0 <LL_RCC_RC64MPLL_Disable+0x18>)
100480b2:	4904      	ldr	r1, [pc, #16]	@ (100480c4 <LL_RCC_RC64MPLL_Disable+0x1c>)
100480b4:	400a      	ands	r2, r1
100480b6:	601a      	str	r2, [r3, #0]
}
100480b8:	46c0      	nop			@ (mov r8, r8)
100480ba:	46bd      	mov	sp, r7
100480bc:	bd80      	pop	{r7, pc}
100480be:	46c0      	nop			@ (mov r8, r8)
100480c0:	48400000 	.word	0x48400000
100480c4:	ffffdfff 	.word	0xffffdfff

100480c8 <LL_RCC_RC64MPLL_IsReady>:
  * @brief  Check if RC64MPLL is Ready
  * @rmtoll CR           HSIPLLRDY        LL_RCC_RC64MPLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_RC64MPLL_IsReady(void)
{
100480c8:	b580      	push	{r7, lr}
100480ca:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIPLLRDY) == (RCC_CR_HSIPLLRDY)) ? 1UL : 0UL);
100480cc:	4b07      	ldr	r3, [pc, #28]	@ (100480ec <LL_RCC_RC64MPLL_IsReady+0x24>)
100480ce:	681a      	ldr	r2, [r3, #0]
100480d0:	2380      	movs	r3, #128	@ 0x80
100480d2:	01db      	lsls	r3, r3, #7
100480d4:	401a      	ands	r2, r3
100480d6:	2380      	movs	r3, #128	@ 0x80
100480d8:	01db      	lsls	r3, r3, #7
100480da:	429a      	cmp	r2, r3
100480dc:	d101      	bne.n	100480e2 <LL_RCC_RC64MPLL_IsReady+0x1a>
100480de:	2301      	movs	r3, #1
100480e0:	e000      	b.n	100480e4 <LL_RCC_RC64MPLL_IsReady+0x1c>
100480e2:	2300      	movs	r3, #0
}
100480e4:	0018      	movs	r0, r3
100480e6:	46bd      	mov	sp, r7
100480e8:	bd80      	pop	{r7, pc}
100480ea:	46c0      	nop			@ (mov r8, r8)
100480ec:	48400000 	.word	0x48400000

100480f0 <LL_RCC_SetRC64MPLLPrescaler>:
  *         @arg @ref LL_RCC_RC64MPLL_DIV_32
  *         @arg @ref LL_RCC_RC64MPLL_DIV_64
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetRC64MPLLPrescaler(uint32_t Prescaler)
{
100480f0:	b580      	push	{r7, lr}
100480f2:	b082      	sub	sp, #8
100480f4:	af00      	add	r7, sp, #0
100480f6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_CLKSYSDIV, Prescaler);
100480f8:	4b06      	ldr	r3, [pc, #24]	@ (10048114 <LL_RCC_SetRC64MPLLPrescaler+0x24>)
100480fa:	689b      	ldr	r3, [r3, #8]
100480fc:	22e0      	movs	r2, #224	@ 0xe0
100480fe:	4393      	bics	r3, r2
10048100:	0019      	movs	r1, r3
10048102:	4b04      	ldr	r3, [pc, #16]	@ (10048114 <LL_RCC_SetRC64MPLLPrescaler+0x24>)
10048104:	687a      	ldr	r2, [r7, #4]
10048106:	430a      	orrs	r2, r1
10048108:	609a      	str	r2, [r3, #8]
}
1004810a:	46c0      	nop			@ (mov r8, r8)
1004810c:	46bd      	mov	sp, r7
1004810e:	b002      	add	sp, #8
10048110:	bd80      	pop	{r7, pc}
10048112:	46c0      	nop			@ (mov r8, r8)
10048114:	48400000 	.word	0x48400000

10048118 <HAL_RCC_OscConfig>:
  * @param  RCC_OscInitStruct  pointer to a @ref RCC_OscInitTypeDef structure that
  *         contains the configuration information for the RCC Oscillators.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
10048118:	b580      	push	{r7, lr}
1004811a:	b084      	sub	sp, #16
1004811c:	af00      	add	r7, sp, #0
1004811e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
10048120:	687b      	ldr	r3, [r7, #4]
10048122:	2b00      	cmp	r3, #0
10048124:	d101      	bne.n	1004812a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
10048126:	2301      	movs	r3, #1
10048128:	e140      	b.n	100483ac <HAL_RCC_OscConfig+0x294>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  
  /*------------------------------- HSI Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
1004812a:	687b      	ldr	r3, [r7, #4]
1004812c:	681b      	ldr	r3, [r3, #0]
1004812e:	2210      	movs	r2, #16
10048130:	4013      	ands	r3, r2
10048132:	d033      	beq.n	1004819c <HAL_RCC_OscConfig+0x84>
  {
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
10048134:	687b      	ldr	r3, [r7, #4]
10048136:	689b      	ldr	r3, [r3, #8]
10048138:	2b00      	cmp	r3, #0
1004813a:	d102      	bne.n	10048142 <HAL_RCC_OscConfig+0x2a>
1004813c:	f7ff fe96 	bl	10047e6c <LL_RCC_HSI_Enable>
10048140:	e001      	b.n	10048146 <HAL_RCC_OscConfig+0x2e>
10048142:	f7ff fea7 	bl	10047e94 <LL_RCC_HSI_Disable>

    if(RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
10048146:	687b      	ldr	r3, [r7, #4]
10048148:	689b      	ldr	r3, [r3, #8]
1004814a:	2b04      	cmp	r3, #4
1004814c:	d113      	bne.n	10048176 <HAL_RCC_OscConfig+0x5e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
1004814e:	f7fc faaf 	bl	100446b0 <HAL_GetTick>
10048152:	0003      	movs	r3, r0
10048154:	60fb      	str	r3, [r7, #12]

      /* Wait till HSI is disabled */
      while (LL_RCC_HSI_IsReady() == 1U)
10048156:	e008      	b.n	1004816a <HAL_RCC_OscConfig+0x52>
      {
        if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
10048158:	f7fc faaa 	bl	100446b0 <HAL_GetTick>
1004815c:	0002      	movs	r2, r0
1004815e:	68fb      	ldr	r3, [r7, #12]
10048160:	1ad3      	subs	r3, r2, r3
10048162:	2b64      	cmp	r3, #100	@ 0x64
10048164:	d901      	bls.n	1004816a <HAL_RCC_OscConfig+0x52>
        {
          return HAL_TIMEOUT;
10048166:	2303      	movs	r3, #3
10048168:	e120      	b.n	100483ac <HAL_RCC_OscConfig+0x294>
      while (LL_RCC_HSI_IsReady() == 1U)
1004816a:	f7ff fea7 	bl	10047ebc <LL_RCC_HSI_IsReady>
1004816e:	0003      	movs	r3, r0
10048170:	2b01      	cmp	r3, #1
10048172:	d0f1      	beq.n	10048158 <HAL_RCC_OscConfig+0x40>
10048174:	e012      	b.n	1004819c <HAL_RCC_OscConfig+0x84>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
10048176:	f7fc fa9b 	bl	100446b0 <HAL_GetTick>
1004817a:	0003      	movs	r3, r0
1004817c:	60fb      	str	r3, [r7, #12]

      /* Wait till HSI is enabled */
      while (LL_RCC_HSI_IsReady() != 1U)
1004817e:	e008      	b.n	10048192 <HAL_RCC_OscConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
10048180:	f7fc fa96 	bl	100446b0 <HAL_GetTick>
10048184:	0002      	movs	r2, r0
10048186:	68fb      	ldr	r3, [r7, #12]
10048188:	1ad3      	subs	r3, r2, r3
1004818a:	2b64      	cmp	r3, #100	@ 0x64
1004818c:	d901      	bls.n	10048192 <HAL_RCC_OscConfig+0x7a>
        {
          return HAL_TIMEOUT;
1004818e:	2303      	movs	r3, #3
10048190:	e10c      	b.n	100483ac <HAL_RCC_OscConfig+0x294>
      while (LL_RCC_HSI_IsReady() != 1U)
10048192:	f7ff fe93 	bl	10047ebc <LL_RCC_HSI_IsReady>
10048196:	0003      	movs	r3, r0
10048198:	2b01      	cmp	r3, #1
1004819a:	d1f1      	bne.n	10048180 <HAL_RCC_OscConfig+0x68>
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
1004819c:	687b      	ldr	r3, [r7, #4]
1004819e:	681b      	ldr	r3, [r3, #0]
100481a0:	2201      	movs	r2, #1
100481a2:	4013      	ands	r3, r2
100481a4:	d039      	beq.n	1004821a <HAL_RCC_OscConfig+0x102>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* Set HSE Capacitor Tuning */
    LL_RCC_HSE_SetCapacitorTuning(CFG_HW_RCC_HSE_CAPACITOR_TUNE);
100481a6:	2020      	movs	r0, #32
100481a8:	f7ff fe2a 	bl	10047e00 <LL_RCC_HSE_SetCapacitorTuning>

    /* Set HSE Current Control */
    LL_RCC_HSE_SetCurrentControl(LL_RCC_HSE_CURRENTMAX_3);
100481ac:	2030      	movs	r0, #48	@ 0x30
100481ae:	f7ff fe47 	bl	10047e40 <LL_RCC_HSE_SetCurrentControl>

    /* Set the new HSE configuration ---------------------------------------*/
    __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
100481b2:	687b      	ldr	r3, [r7, #4]
100481b4:	685a      	ldr	r2, [r3, #4]
100481b6:	2380      	movs	r3, #128	@ 0x80
100481b8:	025b      	lsls	r3, r3, #9
100481ba:	429a      	cmp	r2, r3
100481bc:	d102      	bne.n	100481c4 <HAL_RCC_OscConfig+0xac>
100481be:	f7ff fded 	bl	10047d9c <LL_RCC_HSE_Enable>
100481c2:	e001      	b.n	100481c8 <HAL_RCC_OscConfig+0xb0>
100481c4:	f7ff fdf8 	bl	10047db8 <LL_RCC_HSE_Disable>

    /* Check the HSE State */
    if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
100481c8:	687b      	ldr	r3, [r7, #4]
100481ca:	685b      	ldr	r3, [r3, #4]
100481cc:	2b00      	cmp	r3, #0
100481ce:	d012      	beq.n	100481f6 <HAL_RCC_OscConfig+0xde>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
100481d0:	f7fc fa6e 	bl	100446b0 <HAL_GetTick>
100481d4:	0003      	movs	r3, r0
100481d6:	60fb      	str	r3, [r7, #12]

      /* Wait till HSE is ready */
      while (LL_RCC_HSE_IsReady() == 0U)
100481d8:	e008      	b.n	100481ec <HAL_RCC_OscConfig+0xd4>
      {
        if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
100481da:	f7fc fa69 	bl	100446b0 <HAL_GetTick>
100481de:	0002      	movs	r2, r0
100481e0:	68fb      	ldr	r3, [r7, #12]
100481e2:	1ad3      	subs	r3, r2, r3
100481e4:	2b64      	cmp	r3, #100	@ 0x64
100481e6:	d901      	bls.n	100481ec <HAL_RCC_OscConfig+0xd4>
        {
          return HAL_TIMEOUT;
100481e8:	2303      	movs	r3, #3
100481ea:	e0df      	b.n	100483ac <HAL_RCC_OscConfig+0x294>
      while (LL_RCC_HSE_IsReady() == 0U)
100481ec:	f7ff fdf4 	bl	10047dd8 <LL_RCC_HSE_IsReady>
100481f0:	1e03      	subs	r3, r0, #0
100481f2:	d0f2      	beq.n	100481da <HAL_RCC_OscConfig+0xc2>
100481f4:	e011      	b.n	1004821a <HAL_RCC_OscConfig+0x102>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
100481f6:	f7fc fa5b 	bl	100446b0 <HAL_GetTick>
100481fa:	0003      	movs	r3, r0
100481fc:	60fb      	str	r3, [r7, #12]

      /* Wait till HSE is disabled */
      while (LL_RCC_HSE_IsReady() != 0U)
100481fe:	e008      	b.n	10048212 <HAL_RCC_OscConfig+0xfa>
      {
        if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
10048200:	f7fc fa56 	bl	100446b0 <HAL_GetTick>
10048204:	0002      	movs	r2, r0
10048206:	68fb      	ldr	r3, [r7, #12]
10048208:	1ad3      	subs	r3, r2, r3
1004820a:	2b64      	cmp	r3, #100	@ 0x64
1004820c:	d901      	bls.n	10048212 <HAL_RCC_OscConfig+0xfa>
        {
          return HAL_TIMEOUT;
1004820e:	2303      	movs	r3, #3
10048210:	e0cc      	b.n	100483ac <HAL_RCC_OscConfig+0x294>
      while (LL_RCC_HSE_IsReady() != 0U)
10048212:	f7ff fde1 	bl	10047dd8 <LL_RCC_HSE_IsReady>
10048216:	1e03      	subs	r3, r0, #0
10048218:	d1f2      	bne.n	10048200 <HAL_RCC_OscConfig+0xe8>
      }
    }
  }

  /*--------------------------------- LSI Configuration -----------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
1004821a:	687b      	ldr	r3, [r7, #4]
1004821c:	681b      	ldr	r3, [r3, #0]
1004821e:	2204      	movs	r2, #4
10048220:	4013      	ands	r3, r2
10048222:	d03a      	beq.n	1004829a <HAL_RCC_OscConfig+0x182>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
10048224:	687b      	ldr	r3, [r7, #4]
10048226:	691b      	ldr	r3, [r3, #16]
10048228:	2b00      	cmp	r3, #0
1004822a:	d022      	beq.n	10048272 <HAL_RCC_OscConfig+0x15a>
    {
      /* Disable the LSI */
      __HAL_RCC_LSI_DISABLE();
1004822c:	f7ff ff10 	bl	10048050 <LL_RCC_LSI_Disable>
      while (__HAL_RCC_GET_LSI_READYFLAG() != 0U);
10048230:	46c0      	nop			@ (mov r8, r8)
10048232:	f7ff ff1b 	bl	1004806c <LL_RCC_LSI_IsReady>
10048236:	1e03      	subs	r3, r0, #0
10048238:	d1fb      	bne.n	10048232 <HAL_RCC_OscConfig+0x11a>

      /* Disable the LSE */
      __HAL_RCC_LSE_CONFIG(RCC_LSE_OFF);
1004823a:	f7ff fe9d 	bl	10047f78 <LL_RCC_LSE_Disable>

      /* Configure the Low Speed Clock to LSI */
      LL_RCC_LSCO_SetSource(LL_RCC_LSCO_CLKSOURCE_LSI);
1004823e:	2380      	movs	r3, #128	@ 0x80
10048240:	025b      	lsls	r3, r3, #9
10048242:	0018      	movs	r0, r3
10048244:	f7ff fe74 	bl	10047f30 <LL_RCC_LSCO_SetSource>

      /*  Enable the Internal Low Speed oscillator (LSI)  */
      __HAL_RCC_LSI_ENABLE();
10048248:	f7ff fef4 	bl	10048034 <LL_RCC_LSI_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
1004824c:	f7fc fa30 	bl	100446b0 <HAL_GetTick>
10048250:	0003      	movs	r3, r0
10048252:	60fb      	str	r3, [r7, #12]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_LSI_READYFLAG() == 0U)
10048254:	e008      	b.n	10048268 <HAL_RCC_OscConfig+0x150>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
10048256:	f7fc fa2b 	bl	100446b0 <HAL_GetTick>
1004825a:	0002      	movs	r2, r0
1004825c:	68fb      	ldr	r3, [r7, #12]
1004825e:	1ad3      	subs	r3, r2, r3
10048260:	2b02      	cmp	r3, #2
10048262:	d901      	bls.n	10048268 <HAL_RCC_OscConfig+0x150>
        {
          return HAL_TIMEOUT;
10048264:	2303      	movs	r3, #3
10048266:	e0a1      	b.n	100483ac <HAL_RCC_OscConfig+0x294>
      while (__HAL_RCC_GET_LSI_READYFLAG() == 0U)
10048268:	f7ff ff00 	bl	1004806c <LL_RCC_LSI_IsReady>
1004826c:	1e03      	subs	r3, r0, #0
1004826e:	d0f2      	beq.n	10048256 <HAL_RCC_OscConfig+0x13e>
10048270:	e013      	b.n	1004829a <HAL_RCC_OscConfig+0x182>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
10048272:	f7ff feed 	bl	10048050 <LL_RCC_LSI_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
10048276:	f7fc fa1b 	bl	100446b0 <HAL_GetTick>
1004827a:	0003      	movs	r3, r0
1004827c:	60fb      	str	r3, [r7, #12]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_LSI_READYFLAG() != 0U)
1004827e:	e008      	b.n	10048292 <HAL_RCC_OscConfig+0x17a>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
10048280:	f7fc fa16 	bl	100446b0 <HAL_GetTick>
10048284:	0002      	movs	r2, r0
10048286:	68fb      	ldr	r3, [r7, #12]
10048288:	1ad3      	subs	r3, r2, r3
1004828a:	2b02      	cmp	r3, #2
1004828c:	d901      	bls.n	10048292 <HAL_RCC_OscConfig+0x17a>
        {
          return HAL_TIMEOUT;
1004828e:	2303      	movs	r3, #3
10048290:	e08c      	b.n	100483ac <HAL_RCC_OscConfig+0x294>
      while (__HAL_RCC_GET_LSI_READYFLAG() != 0U)
10048292:	f7ff feeb 	bl	1004806c <LL_RCC_LSI_IsReady>
10048296:	1e03      	subs	r3, r0, #0
10048298:	d1f2      	bne.n	10048280 <HAL_RCC_OscConfig+0x168>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
1004829a:	687b      	ldr	r3, [r7, #4]
1004829c:	681b      	ldr	r3, [r3, #0]
1004829e:	2202      	movs	r2, #2
100482a0:	4013      	ands	r3, r2
100482a2:	d049      	beq.n	10048338 <HAL_RCC_OscConfig+0x220>

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Disable LSI */
    __HAL_RCC_LSI_DISABLE();
100482a4:	f7ff fed4 	bl	10048050 <LL_RCC_LSI_Disable>

    /* Disable LSE */
    __HAL_RCC_LSE_CONFIG(RCC_LSE_OFF);
100482a8:	f7ff fe66 	bl	10047f78 <LL_RCC_LSE_Disable>
    while (__HAL_RCC_GET_LSE_READYFLAG() != 0);
100482ac:	46c0      	nop			@ (mov r8, r8)
100482ae:	f7ff fe71 	bl	10047f94 <LL_RCC_LSE_IsReady>
100482b2:	1e03      	subs	r3, r0, #0
100482b4:	d1fb      	bne.n	100482ae <HAL_RCC_OscConfig+0x196>

    /* Configure the PB12 and PB13 in NO PULL mode */
    LL_PWR_SetNoPullB(LL_PWR_GPIO_BIT_12 |
100482b6:	23c0      	movs	r3, #192	@ 0xc0
100482b8:	019b      	lsls	r3, r3, #6
100482ba:	0018      	movs	r0, r3
100482bc:	f7ff fd56 	bl	10047d6c <LL_PWR_SetNoPullB>
                      LL_PWR_GPIO_BIT_13);

    /* Configure the Low Speed Clock to LSE */
    LL_RCC_LSCO_SetSource(LL_RCC_LSCO_CLKSOURCE_LSE);
100482c0:	2380      	movs	r3, #128	@ 0x80
100482c2:	021b      	lsls	r3, r3, #8
100482c4:	0018      	movs	r0, r3
100482c6:	f7ff fe33 	bl	10047f30 <LL_RCC_LSCO_SetSource>

    /* Set LSE oscillator drive capability */
    __HAL_RCC_LSEDRIVE_CONFIG(LSE_DRIVE_LEVEL);
100482ca:	2020      	movs	r0, #32
100482cc:	f7ff fe9e 	bl	1004800c <LL_RCC_LSE_SetDriveCapability>


    /* Set the new LSE state */
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
100482d0:	687b      	ldr	r3, [r7, #4]
100482d2:	68db      	ldr	r3, [r3, #12]
100482d4:	2b10      	cmp	r3, #16
100482d6:	d102      	bne.n	100482de <HAL_RCC_OscConfig+0x1c6>
100482d8:	f7ff fe40 	bl	10047f5c <LL_RCC_LSE_Enable>
100482dc:	e001      	b.n	100482e2 <HAL_RCC_OscConfig+0x1ca>
100482de:	f7ff fe4b 	bl	10047f78 <LL_RCC_LSE_Disable>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
100482e2:	687b      	ldr	r3, [r7, #4]
100482e4:	68db      	ldr	r3, [r3, #12]
100482e6:	2b00      	cmp	r3, #0
100482e8:	d013      	beq.n	10048312 <HAL_RCC_OscConfig+0x1fa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
100482ea:	f7fc f9e1 	bl	100446b0 <HAL_GetTick>
100482ee:	0003      	movs	r3, r0
100482f0:	60fb      	str	r3, [r7, #12]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_LSE_READYFLAG() == 0U)
100482f2:	e009      	b.n	10048308 <HAL_RCC_OscConfig+0x1f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
100482f4:	f7fc f9dc 	bl	100446b0 <HAL_GetTick>
100482f8:	0002      	movs	r2, r0
100482fa:	68fb      	ldr	r3, [r7, #12]
100482fc:	1ad3      	subs	r3, r2, r3
100482fe:	4a2d      	ldr	r2, [pc, #180]	@ (100483b4 <HAL_RCC_OscConfig+0x29c>)
10048300:	4293      	cmp	r3, r2
10048302:	d901      	bls.n	10048308 <HAL_RCC_OscConfig+0x1f0>
        {
          return HAL_TIMEOUT;
10048304:	2303      	movs	r3, #3
10048306:	e051      	b.n	100483ac <HAL_RCC_OscConfig+0x294>
      while (__HAL_RCC_GET_LSE_READYFLAG() == 0U)
10048308:	f7ff fe44 	bl	10047f94 <LL_RCC_LSE_IsReady>
1004830c:	1e03      	subs	r3, r0, #0
1004830e:	d0f1      	beq.n	100482f4 <HAL_RCC_OscConfig+0x1dc>
10048310:	e012      	b.n	10048338 <HAL_RCC_OscConfig+0x220>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
10048312:	f7fc f9cd 	bl	100446b0 <HAL_GetTick>
10048316:	0003      	movs	r3, r0
10048318:	60fb      	str	r3, [r7, #12]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_LSE_READYFLAG() != 0U)
1004831a:	e009      	b.n	10048330 <HAL_RCC_OscConfig+0x218>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
1004831c:	f7fc f9c8 	bl	100446b0 <HAL_GetTick>
10048320:	0002      	movs	r2, r0
10048322:	68fb      	ldr	r3, [r7, #12]
10048324:	1ad3      	subs	r3, r2, r3
10048326:	4a23      	ldr	r2, [pc, #140]	@ (100483b4 <HAL_RCC_OscConfig+0x29c>)
10048328:	4293      	cmp	r3, r2
1004832a:	d901      	bls.n	10048330 <HAL_RCC_OscConfig+0x218>
        {
          return HAL_TIMEOUT;
1004832c:	2303      	movs	r3, #3
1004832e:	e03d      	b.n	100483ac <HAL_RCC_OscConfig+0x294>
      while (__HAL_RCC_GET_LSE_READYFLAG() != 0U)
10048330:	f7ff fe30 	bl	10047f94 <LL_RCC_LSE_IsReady>
10048334:	1e03      	subs	r3, r0, #0
10048336:	d1f1      	bne.n	1004831c <HAL_RCC_OscConfig+0x204>
      }
    }
  }

  /*------------------------------ LSE Bypass Configuration ------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE_BYPASS) == RCC_OSCILLATORTYPE_LSE_BYPASS)
10048338:	687b      	ldr	r3, [r7, #4]
1004833a:	681b      	ldr	r3, [r3, #0]
1004833c:	2208      	movs	r2, #8
1004833e:	4013      	ands	r3, r2
10048340:	d033      	beq.n	100483aa <HAL_RCC_OscConfig+0x292>

    /* Check the parameters */
    assert_param(IS_RCC_LSE_BYPASS(RCC_OscInitStruct->LSEBYPASSState));

    /* Set the new LSE Bypass configuration -----------------------------------------*/
    __HAL_RCC_LSE_BYPASS_CONFIG(RCC_OscInitStruct->LSEBYPASSState);
10048342:	687b      	ldr	r3, [r7, #4]
10048344:	695b      	ldr	r3, [r3, #20]
10048346:	2b40      	cmp	r3, #64	@ 0x40
10048348:	d102      	bne.n	10048350 <HAL_RCC_OscConfig+0x238>
1004834a:	f7ff fe33 	bl	10047fb4 <LL_RCC_LSE_EnableBypass>
1004834e:	e001      	b.n	10048354 <HAL_RCC_OscConfig+0x23c>
10048350:	f7ff fe3e 	bl	10047fd0 <LL_RCC_LSE_DisableBypass>

    /* Check the LSE Bypass State */
    if (RCC_OscInitStruct->LSEBYPASSState != RCC_LSE_OFF)
10048354:	687b      	ldr	r3, [r7, #4]
10048356:	695b      	ldr	r3, [r3, #20]
10048358:	2b00      	cmp	r3, #0
1004835a:	d013      	beq.n	10048384 <HAL_RCC_OscConfig+0x26c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
1004835c:	f7fc f9a8 	bl	100446b0 <HAL_GetTick>
10048360:	0003      	movs	r3, r0
10048362:	60fb      	str	r3, [r7, #12]

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsBypassEnabled() == 0U)
10048364:	e009      	b.n	1004837a <HAL_RCC_OscConfig+0x262>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
10048366:	f7fc f9a3 	bl	100446b0 <HAL_GetTick>
1004836a:	0002      	movs	r2, r0
1004836c:	68fb      	ldr	r3, [r7, #12]
1004836e:	1ad3      	subs	r3, r2, r3
10048370:	4a10      	ldr	r2, [pc, #64]	@ (100483b4 <HAL_RCC_OscConfig+0x29c>)
10048372:	4293      	cmp	r3, r2
10048374:	d901      	bls.n	1004837a <HAL_RCC_OscConfig+0x262>
        {
          return HAL_TIMEOUT;
10048376:	2303      	movs	r3, #3
10048378:	e018      	b.n	100483ac <HAL_RCC_OscConfig+0x294>
      while (LL_RCC_LSE_IsBypassEnabled() == 0U)
1004837a:	f7ff fe37 	bl	10047fec <LL_RCC_LSE_IsBypassEnabled>
1004837e:	1e03      	subs	r3, r0, #0
10048380:	d0f1      	beq.n	10048366 <HAL_RCC_OscConfig+0x24e>
10048382:	e012      	b.n	100483aa <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
10048384:	f7fc f994 	bl	100446b0 <HAL_GetTick>
10048388:	0003      	movs	r3, r0
1004838a:	60fb      	str	r3, [r7, #12]

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsBypassEnabled() != 0U)
1004838c:	e009      	b.n	100483a2 <HAL_RCC_OscConfig+0x28a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
1004838e:	f7fc f98f 	bl	100446b0 <HAL_GetTick>
10048392:	0002      	movs	r2, r0
10048394:	68fb      	ldr	r3, [r7, #12]
10048396:	1ad3      	subs	r3, r2, r3
10048398:	4a06      	ldr	r2, [pc, #24]	@ (100483b4 <HAL_RCC_OscConfig+0x29c>)
1004839a:	4293      	cmp	r3, r2
1004839c:	d901      	bls.n	100483a2 <HAL_RCC_OscConfig+0x28a>
        {
          return HAL_TIMEOUT;
1004839e:	2303      	movs	r3, #3
100483a0:	e004      	b.n	100483ac <HAL_RCC_OscConfig+0x294>
      while (LL_RCC_LSE_IsBypassEnabled() != 0U)
100483a2:	f7ff fe23 	bl	10047fec <LL_RCC_LSE_IsBypassEnabled>
100483a6:	1e03      	subs	r3, r0, #0
100483a8:	d1f1      	bne.n	1004838e <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }

  return HAL_OK;
100483aa:	2300      	movs	r3, #0
}
100483ac:	0018      	movs	r0, r3
100483ae:	46bd      	mov	sp, r7
100483b0:	b004      	add	sp, #16
100483b2:	bd80      	pop	{r7, pc}
100483b4:	00001388 	.word	0x00001388

100483b8 <HAL_RCC_ClockConfig>:
  *         currently used as system clock source.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
100483b8:	b580      	push	{r7, lr}
100483ba:	b084      	sub	sp, #16
100483bc:	af00      	add	r7, sp, #0
100483be:	6078      	str	r0, [r7, #4]
100483c0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
100483c2:	687b      	ldr	r3, [r7, #4]
100483c4:	2b00      	cmp	r3, #0
100483c6:	d101      	bne.n	100483cc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
100483c8:	2301      	movs	r3, #1
100483ca:	e098      	b.n	100484fe <HAL_RCC_ClockConfig+0x146>

  /* Check the parameters */
  assert_param(IS_FLASH_WAIT_STATES(FLatency));

  /* Set FALSH_WAIT_STATES_1 */
  __HAL_FLASH_SET_WAIT_STATES(FLatency);
100483cc:	4b4e      	ldr	r3, [pc, #312]	@ (10048508 <HAL_RCC_ClockConfig+0x150>)
100483ce:	685b      	ldr	r3, [r3, #4]
100483d0:	2230      	movs	r2, #48	@ 0x30
100483d2:	4393      	bics	r3, r2
100483d4:	0019      	movs	r1, r3
100483d6:	4b4c      	ldr	r3, [pc, #304]	@ (10048508 <HAL_RCC_ClockConfig+0x150>)
100483d8:	683a      	ldr	r2, [r7, #0]
100483da:	430a      	orrs	r2, r1
100483dc:	605a      	str	r2, [r3, #4]
  /*------------------------- SYSCLK Configuration ---------------------------*/
  assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
  assert_param(IS_RCC_SYSCLK_DIVIDER(RCC_ClkInitStruct->SYSCLKDivider));

  /* HSI is selected as System Clock Source */
  if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
100483de:	687b      	ldr	r3, [r7, #4]
100483e0:	681b      	ldr	r3, [r3, #0]
100483e2:	2b02      	cmp	r3, #2
100483e4:	d10e      	bne.n	10048404 <HAL_RCC_ClockConfig+0x4c>
  {
    LL_RCC_HSI_Enable();
100483e6:	f7ff fd41 	bl	10047e6c <LL_RCC_HSI_Enable>
    
    /* Check the HSI ready flag */
    if (LL_RCC_HSI_IsReady() == 0U)
100483ea:	f7ff fd67 	bl	10047ebc <LL_RCC_HSI_IsReady>
100483ee:	1e03      	subs	r3, r0, #0
100483f0:	d101      	bne.n	100483f6 <HAL_RCC_ClockConfig+0x3e>
    {
      return HAL_ERROR;
100483f2:	2301      	movs	r3, #1
100483f4:	e083      	b.n	100484fe <HAL_RCC_ClockConfig+0x146>
    }

    /* Disable the RC64MPLL*/
    __HAL_RCC_RC64MPLL_DISABLE();
100483f6:	f7ff fe57 	bl	100480a8 <LL_RCC_RC64MPLL_Disable>
    
    /* Configure the RC64MPLL multiplication factor */
    __HAL_RCC_RC64MPLL_PRESC_CONFIG(RCC_ClkInitStruct->SYSCLKDivider);
100483fa:	687b      	ldr	r3, [r7, #4]
100483fc:	685b      	ldr	r3, [r3, #4]
100483fe:	0018      	movs	r0, r3
10048400:	f7ff fe76 	bl	100480f0 <LL_RCC_SetRC64MPLLPrescaler>
  }

  /* RC64MPLL is selected as System Clock Source */
  if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_RC64MPLL)
10048404:	687b      	ldr	r3, [r7, #4]
10048406:	681b      	ldr	r3, [r3, #0]
10048408:	2b00      	cmp	r3, #0
1004840a:	d124      	bne.n	10048456 <HAL_RCC_ClockConfig+0x9e>
  {
    /* Check the HSI ready flag */
    if (LL_RCC_HSI_IsReady() == 0U)
1004840c:	f7ff fd56 	bl	10047ebc <LL_RCC_HSI_IsReady>
10048410:	1e03      	subs	r3, r0, #0
10048412:	d101      	bne.n	10048418 <HAL_RCC_ClockConfig+0x60>
    {
      return HAL_ERROR;
10048414:	2301      	movs	r3, #1
10048416:	e072      	b.n	100484fe <HAL_RCC_ClockConfig+0x146>
    }

    /* Check the HSE ready flag */
    if (LL_RCC_HSE_IsReady() == 0U)
10048418:	f7ff fcde 	bl	10047dd8 <LL_RCC_HSE_IsReady>
1004841c:	1e03      	subs	r3, r0, #0
1004841e:	d101      	bne.n	10048424 <HAL_RCC_ClockConfig+0x6c>
    {
      return HAL_ERROR;
10048420:	2301      	movs	r3, #1
10048422:	e06c      	b.n	100484fe <HAL_RCC_ClockConfig+0x146>
    }

    /* Enable the RC64MPLL*/
    __HAL_RCC_RC64MPLL_ENABLE();
10048424:	f7ff fe32 	bl	1004808c <LL_RCC_RC64MPLL_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
10048428:	f7fc f942 	bl	100446b0 <HAL_GetTick>
1004842c:	0003      	movs	r3, r0
1004842e:	60fb      	str	r3, [r7, #12]

    /* Wait till RC64MPLL is ready */
    while (LL_RCC_RC64MPLL_IsReady() == 0)
10048430:	e008      	b.n	10048444 <HAL_RCC_ClockConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
10048432:	f7fc f93d 	bl	100446b0 <HAL_GetTick>
10048436:	0002      	movs	r2, r0
10048438:	68fb      	ldr	r3, [r7, #12]
1004843a:	1ad3      	subs	r3, r2, r3
1004843c:	2b02      	cmp	r3, #2
1004843e:	d901      	bls.n	10048444 <HAL_RCC_ClockConfig+0x8c>
      {
        return HAL_TIMEOUT;
10048440:	2303      	movs	r3, #3
10048442:	e05c      	b.n	100484fe <HAL_RCC_ClockConfig+0x146>
    while (LL_RCC_RC64MPLL_IsReady() == 0)
10048444:	f7ff fe40 	bl	100480c8 <LL_RCC_RC64MPLL_IsReady>
10048448:	1e03      	subs	r3, r0, #0
1004844a:	d0f2      	beq.n	10048432 <HAL_RCC_ClockConfig+0x7a>
      }
    }

    /* Configure the RC64MPLL multiplication factor */
    __HAL_RCC_RC64MPLL_PRESC_CONFIG(RCC_ClkInitStruct->SYSCLKDivider);
1004844c:	687b      	ldr	r3, [r7, #4]
1004844e:	685b      	ldr	r3, [r3, #4]
10048450:	0018      	movs	r0, r3
10048452:	f7ff fe4d 	bl	100480f0 <LL_RCC_SetRC64MPLLPrescaler>
  }

  /* DIRECT_HSE is selected as System Clock Source */
  if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_DIRECT_HSE)
10048456:	687b      	ldr	r3, [r7, #4]
10048458:	681b      	ldr	r3, [r3, #0]
1004845a:	2b01      	cmp	r3, #1
1004845c:	d117      	bne.n	1004848e <HAL_RCC_ClockConfig+0xd6>
  {
    /* Enable the DIRECT_HSE configuration */
    LL_RCC_DIRECT_HSE_Enable();
1004845e:	f7ff fd41 	bl	10047ee4 <LL_RCC_DIRECT_HSE_Enable>

    /* Check the HSI ready flag */
    if (LL_RCC_HSI_IsReady() != 0U)
10048462:	f7ff fd2b 	bl	10047ebc <LL_RCC_HSI_IsReady>
10048466:	1e03      	subs	r3, r0, #0
10048468:	d001      	beq.n	1004846e <HAL_RCC_ClockConfig+0xb6>
    {
      return HAL_ERROR;
1004846a:	2301      	movs	r3, #1
1004846c:	e047      	b.n	100484fe <HAL_RCC_ClockConfig+0x146>
    }

    /* Check the HSE ready flag */
    if (LL_RCC_HSE_IsReady() == 0U)
1004846e:	f7ff fcb3 	bl	10047dd8 <LL_RCC_HSE_IsReady>
10048472:	1e03      	subs	r3, r0, #0
10048474:	d101      	bne.n	1004847a <HAL_RCC_ClockConfig+0xc2>
    {
      return HAL_ERROR;
10048476:	2301      	movs	r3, #1
10048478:	e041      	b.n	100484fe <HAL_RCC_ClockConfig+0x146>
    }

    /* Configure the DIRECT_HSE multiplication factor */
    __HAL_RCC_DIRECT_HSE_PRESC_CONFIG(RCC_ClkInitStruct->SYSCLKDivider);
1004847a:	4b24      	ldr	r3, [pc, #144]	@ (1004850c <HAL_RCC_ClockConfig+0x154>)
1004847c:	689b      	ldr	r3, [r3, #8]
1004847e:	22e0      	movs	r2, #224	@ 0xe0
10048480:	4393      	bics	r3, r2
10048482:	0019      	movs	r1, r3
10048484:	687b      	ldr	r3, [r7, #4]
10048486:	685a      	ldr	r2, [r3, #4]
10048488:	4b20      	ldr	r3, [pc, #128]	@ (1004850c <HAL_RCC_ClockConfig+0x154>)
1004848a:	430a      	orrs	r2, r1
1004848c:	609a      	str	r2, [r3, #8]
  /*----------------------- FLASH Latency Configuration ------------------------*/
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the FLASH clock */

  /* Setup flash wait states because according the system clock frequency */
  if (FLatency != __HAL_FLASH_GET_WAIT_STATES())
1004848e:	4b1e      	ldr	r3, [pc, #120]	@ (10048508 <HAL_RCC_ClockConfig+0x150>)
10048490:	685b      	ldr	r3, [r3, #4]
10048492:	2230      	movs	r2, #48	@ 0x30
10048494:	4013      	ands	r3, r2
10048496:	683a      	ldr	r2, [r7, #0]
10048498:	429a      	cmp	r2, r3
1004849a:	d01d      	beq.n	100484d8 <HAL_RCC_ClockConfig+0x120>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_CONFIG register */
    __HAL_FLASH_SET_WAIT_STATES(FLatency);
1004849c:	4b1a      	ldr	r3, [pc, #104]	@ (10048508 <HAL_RCC_ClockConfig+0x150>)
1004849e:	685b      	ldr	r3, [r3, #4]
100484a0:	2230      	movs	r2, #48	@ 0x30
100484a2:	4393      	bics	r3, r2
100484a4:	0019      	movs	r1, r3
100484a6:	4b18      	ldr	r3, [pc, #96]	@ (10048508 <HAL_RCC_ClockConfig+0x150>)
100484a8:	683a      	ldr	r2, [r7, #0]
100484aa:	430a      	orrs	r2, r1
100484ac:	605a      	str	r2, [r3, #4]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
100484ae:	f7fc f8ff 	bl	100446b0 <HAL_GetTick>
100484b2:	0003      	movs	r3, r0
100484b4:	60fb      	str	r3, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_CONFIG register */
    while (__HAL_FLASH_GET_WAIT_STATES() != FLatency)
100484b6:	e008      	b.n	100484ca <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
100484b8:	f7fc f8fa 	bl	100446b0 <HAL_GetTick>
100484bc:	0002      	movs	r2, r0
100484be:	68fb      	ldr	r3, [r7, #12]
100484c0:	1ad3      	subs	r3, r2, r3
100484c2:	2b02      	cmp	r3, #2
100484c4:	d901      	bls.n	100484ca <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
100484c6:	2303      	movs	r3, #3
100484c8:	e019      	b.n	100484fe <HAL_RCC_ClockConfig+0x146>
    while (__HAL_FLASH_GET_WAIT_STATES() != FLatency)
100484ca:	4b0f      	ldr	r3, [pc, #60]	@ (10048508 <HAL_RCC_ClockConfig+0x150>)
100484cc:	685b      	ldr	r3, [r3, #4]
100484ce:	2230      	movs	r2, #48	@ 0x30
100484d0:	4013      	ands	r3, r2
100484d2:	683a      	ldr	r2, [r7, #0]
100484d4:	429a      	cmp	r2, r3
100484d6:	d1ef      	bne.n	100484b8 <HAL_RCC_ClockConfig+0x100>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  for (volatile int i = 0; i < 6; i++)
100484d8:	2300      	movs	r3, #0
100484da:	60bb      	str	r3, [r7, #8]
100484dc:	e003      	b.n	100484e6 <HAL_RCC_ClockConfig+0x12e>
  {
    __asm("NOP");
100484de:	46c0      	nop			@ (mov r8, r8)
  for (volatile int i = 0; i < 6; i++)
100484e0:	68bb      	ldr	r3, [r7, #8]
100484e2:	3301      	adds	r3, #1
100484e4:	60bb      	str	r3, [r7, #8]
100484e6:	68bb      	ldr	r3, [r7, #8]
100484e8:	2b05      	cmp	r3, #5
100484ea:	ddf8      	ble.n	100484de <HAL_RCC_ClockConfig+0x126>
  }
  SystemCoreClockUpdate();
100484ec:	f7fa ff0c 	bl	10043308 <SystemCoreClockUpdate>

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
100484f0:	f7fc f8e8 	bl	100446c4 <HAL_GetTickPrio>
100484f4:	0003      	movs	r3, r0
100484f6:	0018      	movs	r0, r3
100484f8:	f7fc f880 	bl	100445fc <HAL_InitTick>
100484fc:	0003      	movs	r3, r0
}
100484fe:	0018      	movs	r0, r3
10048500:	46bd      	mov	sp, r7
10048502:	b004      	add	sp, #16
10048504:	bd80      	pop	{r7, pc}
10048506:	46c0      	nop			@ (mov r8, r8)
10048508:	40001000 	.word	0x40001000
1004850c:	48400000 	.word	0x48400000

10048510 <HAL_RCC_GetSysClockFreq>:
  *         content of the SystemCoreClock CMSIS variable
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
10048510:	b580      	push	{r7, lr}
10048512:	af00      	add	r7, sp, #0
  return SystemCoreClock;
10048514:	4b02      	ldr	r3, [pc, #8]	@ (10048520 <HAL_RCC_GetSysClockFreq+0x10>)
10048516:	681b      	ldr	r3, [r3, #0]
}
10048518:	0018      	movs	r0, r3
1004851a:	46bd      	mov	sp, r7
1004851c:	bd80      	pop	{r7, pc}
1004851e:	46c0      	nop			@ (mov r8, r8)
10048520:	2000064c 	.word	0x2000064c

10048524 <LL_RCC_LSCO_SetSource>:
{
10048524:	b580      	push	{r7, lr}
10048526:	b082      	sub	sp, #8
10048528:	af00      	add	r7, sp, #0
1004852a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_CLKSLOWSEL, Source);
1004852c:	4b06      	ldr	r3, [pc, #24]	@ (10048548 <LL_RCC_LSCO_SetSource+0x24>)
1004852e:	689b      	ldr	r3, [r3, #8]
10048530:	4a06      	ldr	r2, [pc, #24]	@ (1004854c <LL_RCC_LSCO_SetSource+0x28>)
10048532:	4013      	ands	r3, r2
10048534:	0019      	movs	r1, r3
10048536:	4b04      	ldr	r3, [pc, #16]	@ (10048548 <LL_RCC_LSCO_SetSource+0x24>)
10048538:	687a      	ldr	r2, [r7, #4]
1004853a:	430a      	orrs	r2, r1
1004853c:	609a      	str	r2, [r3, #8]
}
1004853e:	46c0      	nop			@ (mov r8, r8)
10048540:	46bd      	mov	sp, r7
10048542:	b002      	add	sp, #8
10048544:	bd80      	pop	{r7, pc}
10048546:	46c0      	nop			@ (mov r8, r8)
10048548:	48400000 	.word	0x48400000
1004854c:	fffe7fff 	.word	0xfffe7fff

10048550 <LL_RCC_SetRFClock>:
{
10048550:	b580      	push	{r7, lr}
10048552:	b082      	sub	sp, #8
10048554:	af00      	add	r7, sp, #0
10048556:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->APB2ENR, RCC_APB2ENR_CLKBLEDIV, Source);
10048558:	4b06      	ldr	r3, [pc, #24]	@ (10048574 <LL_RCC_SetRFClock+0x24>)
1004855a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
1004855c:	2206      	movs	r2, #6
1004855e:	4393      	bics	r3, r2
10048560:	0019      	movs	r1, r3
10048562:	4b04      	ldr	r3, [pc, #16]	@ (10048574 <LL_RCC_SetRFClock+0x24>)
10048564:	687a      	ldr	r2, [r7, #4]
10048566:	430a      	orrs	r2, r1
10048568:	661a      	str	r2, [r3, #96]	@ 0x60
}
1004856a:	46c0      	nop			@ (mov r8, r8)
1004856c:	46bd      	mov	sp, r7
1004856e:	b002      	add	sp, #8
10048570:	bd80      	pop	{r7, pc}
10048572:	46c0      	nop			@ (mov r8, r8)
10048574:	48400000 	.word	0x48400000

10048578 <LL_RCC_SetSMPSPrescaler>:
{
10048578:	b580      	push	{r7, lr}
1004857a:	b082      	sub	sp, #8
1004857c:	af00      	add	r7, sp, #0
1004857e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SMPSDIV, Prescaler);
10048580:	4b06      	ldr	r3, [pc, #24]	@ (1004859c <LL_RCC_SetSMPSPrescaler+0x24>)
10048582:	689b      	ldr	r3, [r3, #8]
10048584:	4a06      	ldr	r2, [pc, #24]	@ (100485a0 <LL_RCC_SetSMPSPrescaler+0x28>)
10048586:	4013      	ands	r3, r2
10048588:	0019      	movs	r1, r3
1004858a:	4b04      	ldr	r3, [pc, #16]	@ (1004859c <LL_RCC_SetSMPSPrescaler+0x24>)
1004858c:	687a      	ldr	r2, [r7, #4]
1004858e:	430a      	orrs	r2, r1
10048590:	609a      	str	r2, [r3, #8]
}
10048592:	46c0      	nop			@ (mov r8, r8)
10048594:	46bd      	mov	sp, r7
10048596:	b002      	add	sp, #8
10048598:	bd80      	pop	{r7, pc}
1004859a:	46c0      	nop			@ (mov r8, r8)
1004859c:	48400000 	.word	0x48400000
100485a0:	ffffefff 	.word	0xffffefff

100485a4 <LL_RCC_SetSPI2I2SClockSource>:
{
100485a4:	b580      	push	{r7, lr}
100485a6:	b082      	sub	sp, #8
100485a8:	af00      	add	r7, sp, #0
100485aa:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SPI2I2SCLKSEL, Source);
100485ac:	4b06      	ldr	r3, [pc, #24]	@ (100485c8 <LL_RCC_SetSPI2I2SClockSource+0x24>)
100485ae:	689b      	ldr	r3, [r3, #8]
100485b0:	4a06      	ldr	r2, [pc, #24]	@ (100485cc <LL_RCC_SetSPI2I2SClockSource+0x28>)
100485b2:	4013      	ands	r3, r2
100485b4:	0019      	movs	r1, r3
100485b6:	4b04      	ldr	r3, [pc, #16]	@ (100485c8 <LL_RCC_SetSPI2I2SClockSource+0x24>)
100485b8:	687a      	ldr	r2, [r7, #4]
100485ba:	430a      	orrs	r2, r1
100485bc:	609a      	str	r2, [r3, #8]
}
100485be:	46c0      	nop			@ (mov r8, r8)
100485c0:	46bd      	mov	sp, r7
100485c2:	b002      	add	sp, #8
100485c4:	bd80      	pop	{r7, pc}
100485c6:	46c0      	nop			@ (mov r8, r8)
100485c8:	48400000 	.word	0x48400000
100485cc:	ff7fffff 	.word	0xff7fffff

100485d0 <LL_RCC_SetSPI3I2SClockSource>:
{
100485d0:	b580      	push	{r7, lr}
100485d2:	b082      	sub	sp, #8
100485d4:	af00      	add	r7, sp, #0
100485d6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SPI3I2SCLKSEL, Source);
100485d8:	4b06      	ldr	r3, [pc, #24]	@ (100485f4 <LL_RCC_SetSPI3I2SClockSource+0x24>)
100485da:	689b      	ldr	r3, [r3, #8]
100485dc:	4a06      	ldr	r2, [pc, #24]	@ (100485f8 <LL_RCC_SetSPI3I2SClockSource+0x28>)
100485de:	4013      	ands	r3, r2
100485e0:	0019      	movs	r1, r3
100485e2:	4b04      	ldr	r3, [pc, #16]	@ (100485f4 <LL_RCC_SetSPI3I2SClockSource+0x24>)
100485e4:	687a      	ldr	r2, [r7, #4]
100485e6:	430a      	orrs	r2, r1
100485e8:	609a      	str	r2, [r3, #8]
}
100485ea:	46c0      	nop			@ (mov r8, r8)
100485ec:	46bd      	mov	sp, r7
100485ee:	b002      	add	sp, #8
100485f0:	bd80      	pop	{r7, pc}
100485f2:	46c0      	nop			@ (mov r8, r8)
100485f4:	48400000 	.word	0x48400000
100485f8:	ffbfffff 	.word	0xffbfffff

100485fc <HAL_RCCEx_PeriphCLKConfig>:
  *  @note   (*) Peripherals are not available on all devices
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
100485fc:	b580      	push	{r7, lr}
100485fe:	b082      	sub	sp, #8
10048600:	af00      	add	r7, sp, #0
10048602:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RF_BLE clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RF) == RCC_PERIPHCLK_RF))
10048604:	687b      	ldr	r3, [r7, #4]
10048606:	681b      	ldr	r3, [r3, #0]
10048608:	2201      	movs	r2, #1
1004860a:	4013      	ands	r3, r2
1004860c:	d004      	beq.n	10048618 <HAL_RCCEx_PeriphCLKConfig+0x1c>
  {
    assert_param(IS_RCC_RF_BLE_CLOCK_SOURCE(PeriphClkInit->RFClockSelection));
    __HAL_RCC_RF_CLK_SET_CONFIG(PeriphClkInit->RFClockSelection);
1004860e:	687b      	ldr	r3, [r7, #4]
10048610:	691b      	ldr	r3, [r3, #16]
10048612:	0018      	movs	r0, r3
10048614:	f7ff ff9c 	bl	10048550 <LL_RCC_SetRFClock>
  }

  /*-------------------------- SMPS clock configuration -------------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS))
10048618:	687b      	ldr	r3, [r7, #4]
1004861a:	681b      	ldr	r3, [r3, #0]
1004861c:	2202      	movs	r2, #2
1004861e:	4013      	ands	r3, r2
10048620:	d004      	beq.n	1004862c <HAL_RCCEx_PeriphCLKConfig+0x30>
  {
    assert_param(IS_RCC_SMPS_CLOCK_PRESC(PeriphClkInit->SmpsDivSelection));
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
10048622:	687b      	ldr	r3, [r7, #4]
10048624:	695b      	ldr	r3, [r3, #20]
10048626:	0018      	movs	r0, r3
10048628:	f7ff ffa6 	bl	10048578 <LL_RCC_SetSMPSPrescaler>
  }

#if defined(SPI2)
  /*-------------------------- SPI2_I2S clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI2_I2S) == RCC_PERIPHCLK_SPI2_I2S))
1004862c:	687b      	ldr	r3, [r7, #4]
1004862e:	681b      	ldr	r3, [r3, #0]
10048630:	2204      	movs	r2, #4
10048632:	4013      	ands	r3, r2
10048634:	d004      	beq.n	10048640 <HAL_RCCEx_PeriphCLKConfig+0x44>
  {
    assert_param(IS_RCC_SPI2I2S_CLOCK_SOURCE(PeriphClkInit->SPI2I2SClockSelection));
    __HAL_RCC_SPI2I2S_CLK_CONFIG(PeriphClkInit->SPI2I2SClockSelection);
10048636:	687b      	ldr	r3, [r7, #4]
10048638:	685b      	ldr	r3, [r3, #4]
1004863a:	0018      	movs	r0, r3
1004863c:	f7ff ffb2 	bl	100485a4 <LL_RCC_SetSPI2I2SClockSource>
  }
#endif
#if defined(SPI3)
  /*-------------------------- SPI3_I2S clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI3_I2S) == RCC_PERIPHCLK_SPI3_I2S))
10048640:	687b      	ldr	r3, [r7, #4]
10048642:	681b      	ldr	r3, [r3, #0]
10048644:	2208      	movs	r2, #8
10048646:	4013      	ands	r3, r2
10048648:	d004      	beq.n	10048654 <HAL_RCCEx_PeriphCLKConfig+0x58>
  {
    assert_param(IS_RCC_SPI3I2S_CLOCK_SOURCE(PeriphClkInit->SPI3I2SClockSelection));
    __HAL_RCC_SPI3I2S_CLK_CONFIG(PeriphClkInit->SPI3I2SClockSelection);
1004864a:	687b      	ldr	r3, [r7, #4]
1004864c:	689b      	ldr	r3, [r3, #8]
1004864e:	0018      	movs	r0, r3
10048650:	f7ff ffbe 	bl	100485d0 <LL_RCC_SetSPI3I2SClockSource>
    __HAL_RCC_LPUART1_CLK_CONFIG(PeriphClkInit->LPUART1ClockSelection);
  }
#endif /* RCC_CFGR_LPUCLKSEL */

  /*-------------------------- RTC WDG BLEWKUP clock source configuration ---------------------*/
  if ((((PeriphClkInit->RTCWDGBLEWKUPClockSelection) & RCC_PERIPHCLK_RTC_WDG_BLEWKUP) == RCC_PERIPHCLK_RTC_WDG_BLEWKUP))
10048654:	687b      	ldr	r3, [r7, #4]
10048656:	68db      	ldr	r3, [r3, #12]
10048658:	2220      	movs	r2, #32
1004865a:	4013      	ands	r3, r2
1004865c:	d004      	beq.n	10048668 <HAL_RCCEx_PeriphCLKConfig+0x6c>
  {
    assert_param(IS_RCC_RTC_WDG_BLEWKUP_CLOCK_SOURCE(PeriphClkInit->RTCWDGBLEWKUPClockSelection));
    __HAL_RCC_RTC_WDG_BLEWKUP_CLK_CONFIG(PeriphClkInit->RTCWDGBLEWKUPClockSelection);
1004865e:	687b      	ldr	r3, [r7, #4]
10048660:	68db      	ldr	r3, [r3, #12]
10048662:	0018      	movs	r0, r3
10048664:	f7ff ff5e 	bl	10048524 <LL_RCC_LSCO_SetSource>
  }

  return HAL_OK;
10048668:	2300      	movs	r3, #0
}
1004866a:	0018      	movs	r0, r3
1004866c:	46bd      	mov	sp, r7
1004866e:	b002      	add	sp, #8
10048670:	bd80      	pop	{r7, pc}
	...

10048674 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
10048674:	b580      	push	{r7, lr}
10048676:	b084      	sub	sp, #16
10048678:	af00      	add	r7, sp, #0
1004867a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
1004867c:	687b      	ldr	r3, [r7, #4]
1004867e:	2b00      	cmp	r3, #0
10048680:	d101      	bne.n	10048686 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
10048682:	2301      	movs	r3, #1
10048684:	e0a8      	b.n	100487d8 <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
10048686:	687b      	ldr	r3, [r7, #4]
10048688:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
1004868a:	2b00      	cmp	r3, #0
1004868c:	d109      	bne.n	100486a2 <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
1004868e:	687b      	ldr	r3, [r7, #4]
10048690:	685a      	ldr	r2, [r3, #4]
10048692:	2382      	movs	r3, #130	@ 0x82
10048694:	005b      	lsls	r3, r3, #1
10048696:	429a      	cmp	r2, r3
10048698:	d009      	beq.n	100486ae <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
1004869a:	687b      	ldr	r3, [r7, #4]
1004869c:	2200      	movs	r2, #0
1004869e:	61da      	str	r2, [r3, #28]
100486a0:	e005      	b.n	100486ae <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
100486a2:	687b      	ldr	r3, [r7, #4]
100486a4:	2200      	movs	r2, #0
100486a6:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
100486a8:	687b      	ldr	r3, [r7, #4]
100486aa:	2200      	movs	r2, #0
100486ac:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
100486ae:	687b      	ldr	r3, [r7, #4]
100486b0:	2200      	movs	r2, #0
100486b2:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
100486b4:	687b      	ldr	r3, [r7, #4]
100486b6:	225d      	movs	r2, #93	@ 0x5d
100486b8:	5c9b      	ldrb	r3, [r3, r2]
100486ba:	b2db      	uxtb	r3, r3
100486bc:	2b00      	cmp	r3, #0
100486be:	d107      	bne.n	100486d0 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
100486c0:	687b      	ldr	r3, [r7, #4]
100486c2:	225c      	movs	r2, #92	@ 0x5c
100486c4:	2100      	movs	r1, #0
100486c6:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
100486c8:	687b      	ldr	r3, [r7, #4]
100486ca:	0018      	movs	r0, r3
100486cc:	f7fa fc08 	bl	10042ee0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
100486d0:	687b      	ldr	r3, [r7, #4]
100486d2:	225d      	movs	r2, #93	@ 0x5d
100486d4:	2102      	movs	r1, #2
100486d6:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
100486d8:	687b      	ldr	r3, [r7, #4]
100486da:	681b      	ldr	r3, [r3, #0]
100486dc:	681a      	ldr	r2, [r3, #0]
100486de:	687b      	ldr	r3, [r7, #4]
100486e0:	681b      	ldr	r3, [r3, #0]
100486e2:	2140      	movs	r1, #64	@ 0x40
100486e4:	438a      	bics	r2, r1
100486e6:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
100486e8:	687b      	ldr	r3, [r7, #4]
100486ea:	68da      	ldr	r2, [r3, #12]
100486ec:	23e0      	movs	r3, #224	@ 0xe0
100486ee:	00db      	lsls	r3, r3, #3
100486f0:	429a      	cmp	r2, r3
100486f2:	d902      	bls.n	100486fa <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
100486f4:	2300      	movs	r3, #0
100486f6:	60fb      	str	r3, [r7, #12]
100486f8:	e002      	b.n	10048700 <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
100486fa:	2380      	movs	r3, #128	@ 0x80
100486fc:	015b      	lsls	r3, r3, #5
100486fe:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
10048700:	687b      	ldr	r3, [r7, #4]
10048702:	68da      	ldr	r2, [r3, #12]
10048704:	23f0      	movs	r3, #240	@ 0xf0
10048706:	011b      	lsls	r3, r3, #4
10048708:	429a      	cmp	r2, r3
1004870a:	d008      	beq.n	1004871e <HAL_SPI_Init+0xaa>
1004870c:	687b      	ldr	r3, [r7, #4]
1004870e:	68da      	ldr	r2, [r3, #12]
10048710:	23e0      	movs	r3, #224	@ 0xe0
10048712:	00db      	lsls	r3, r3, #3
10048714:	429a      	cmp	r2, r3
10048716:	d002      	beq.n	1004871e <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
10048718:	687b      	ldr	r3, [r7, #4]
1004871a:	2200      	movs	r2, #0
1004871c:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
1004871e:	687b      	ldr	r3, [r7, #4]
10048720:	685a      	ldr	r2, [r3, #4]
10048722:	2382      	movs	r3, #130	@ 0x82
10048724:	005b      	lsls	r3, r3, #1
10048726:	401a      	ands	r2, r3
10048728:	687b      	ldr	r3, [r7, #4]
1004872a:	6899      	ldr	r1, [r3, #8]
1004872c:	2384      	movs	r3, #132	@ 0x84
1004872e:	021b      	lsls	r3, r3, #8
10048730:	400b      	ands	r3, r1
10048732:	431a      	orrs	r2, r3
10048734:	687b      	ldr	r3, [r7, #4]
10048736:	691b      	ldr	r3, [r3, #16]
10048738:	2102      	movs	r1, #2
1004873a:	400b      	ands	r3, r1
1004873c:	431a      	orrs	r2, r3
1004873e:	687b      	ldr	r3, [r7, #4]
10048740:	695b      	ldr	r3, [r3, #20]
10048742:	2101      	movs	r1, #1
10048744:	400b      	ands	r3, r1
10048746:	431a      	orrs	r2, r3
10048748:	687b      	ldr	r3, [r7, #4]
1004874a:	6999      	ldr	r1, [r3, #24]
1004874c:	2380      	movs	r3, #128	@ 0x80
1004874e:	009b      	lsls	r3, r3, #2
10048750:	400b      	ands	r3, r1
10048752:	431a      	orrs	r2, r3
10048754:	687b      	ldr	r3, [r7, #4]
10048756:	69db      	ldr	r3, [r3, #28]
10048758:	2138      	movs	r1, #56	@ 0x38
1004875a:	400b      	ands	r3, r1
1004875c:	431a      	orrs	r2, r3
1004875e:	687b      	ldr	r3, [r7, #4]
10048760:	6a1b      	ldr	r3, [r3, #32]
10048762:	2180      	movs	r1, #128	@ 0x80
10048764:	400b      	ands	r3, r1
10048766:	431a      	orrs	r2, r3
10048768:	0011      	movs	r1, r2
1004876a:	687b      	ldr	r3, [r7, #4]
1004876c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
1004876e:	2380      	movs	r3, #128	@ 0x80
10048770:	019b      	lsls	r3, r3, #6
10048772:	401a      	ands	r2, r3
10048774:	687b      	ldr	r3, [r7, #4]
10048776:	681b      	ldr	r3, [r3, #0]
10048778:	430a      	orrs	r2, r1
1004877a:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
1004877c:	687b      	ldr	r3, [r7, #4]
1004877e:	699b      	ldr	r3, [r3, #24]
10048780:	0c1b      	lsrs	r3, r3, #16
10048782:	2204      	movs	r2, #4
10048784:	401a      	ands	r2, r3
10048786:	687b      	ldr	r3, [r7, #4]
10048788:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
1004878a:	2110      	movs	r1, #16
1004878c:	400b      	ands	r3, r1
1004878e:	431a      	orrs	r2, r3
10048790:	687b      	ldr	r3, [r7, #4]
10048792:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
10048794:	2108      	movs	r1, #8
10048796:	400b      	ands	r3, r1
10048798:	431a      	orrs	r2, r3
1004879a:	687b      	ldr	r3, [r7, #4]
1004879c:	68d9      	ldr	r1, [r3, #12]
1004879e:	23f0      	movs	r3, #240	@ 0xf0
100487a0:	011b      	lsls	r3, r3, #4
100487a2:	400b      	ands	r3, r1
100487a4:	431a      	orrs	r2, r3
100487a6:	0011      	movs	r1, r2
100487a8:	68fa      	ldr	r2, [r7, #12]
100487aa:	2380      	movs	r3, #128	@ 0x80
100487ac:	015b      	lsls	r3, r3, #5
100487ae:	401a      	ands	r2, r3
100487b0:	687b      	ldr	r3, [r7, #4]
100487b2:	681b      	ldr	r3, [r3, #0]
100487b4:	430a      	orrs	r2, r1
100487b6:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
100487b8:	687b      	ldr	r3, [r7, #4]
100487ba:	681b      	ldr	r3, [r3, #0]
100487bc:	69da      	ldr	r2, [r3, #28]
100487be:	687b      	ldr	r3, [r7, #4]
100487c0:	681b      	ldr	r3, [r3, #0]
100487c2:	4907      	ldr	r1, [pc, #28]	@ (100487e0 <HAL_SPI_Init+0x16c>)
100487c4:	400a      	ands	r2, r1
100487c6:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
100487c8:	687b      	ldr	r3, [r7, #4]
100487ca:	2200      	movs	r2, #0
100487cc:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
100487ce:	687b      	ldr	r3, [r7, #4]
100487d0:	225d      	movs	r2, #93	@ 0x5d
100487d2:	2101      	movs	r1, #1
100487d4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
100487d6:	2300      	movs	r3, #0
}
100487d8:	0018      	movs	r0, r3
100487da:	46bd      	mov	sp, r7
100487dc:	b004      	add	sp, #16
100487de:	bd80      	pop	{r7, pc}
100487e0:	fffff7ff 	.word	0xfffff7ff

100487e4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
100487e4:	b580      	push	{r7, lr}
100487e6:	b082      	sub	sp, #8
100487e8:	af00      	add	r7, sp, #0
100487ea:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
100487ec:	687b      	ldr	r3, [r7, #4]
100487ee:	2b00      	cmp	r3, #0
100487f0:	d101      	bne.n	100487f6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
100487f2:	2301      	movs	r3, #1
100487f4:	e046      	b.n	10048884 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
100487f6:	687b      	ldr	r3, [r7, #4]
100487f8:	2288      	movs	r2, #136	@ 0x88
100487fa:	589b      	ldr	r3, [r3, r2]
100487fc:	2b00      	cmp	r3, #0
100487fe:	d107      	bne.n	10048810 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
10048800:	687b      	ldr	r3, [r7, #4]
10048802:	2284      	movs	r2, #132	@ 0x84
10048804:	2100      	movs	r1, #0
10048806:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
10048808:	687b      	ldr	r3, [r7, #4]
1004880a:	0018      	movs	r0, r3
1004880c:	f7fa fba2 	bl	10042f54 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
10048810:	687b      	ldr	r3, [r7, #4]
10048812:	2288      	movs	r2, #136	@ 0x88
10048814:	2124      	movs	r1, #36	@ 0x24
10048816:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
10048818:	687b      	ldr	r3, [r7, #4]
1004881a:	681b      	ldr	r3, [r3, #0]
1004881c:	681a      	ldr	r2, [r3, #0]
1004881e:	687b      	ldr	r3, [r7, #4]
10048820:	681b      	ldr	r3, [r3, #0]
10048822:	2101      	movs	r1, #1
10048824:	438a      	bics	r2, r1
10048826:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
10048828:	687b      	ldr	r3, [r7, #4]
1004882a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
1004882c:	2b00      	cmp	r3, #0
1004882e:	d003      	beq.n	10048838 <HAL_UART_Init+0x54>
  {
    UART_AdvFeatureConfig(huart);
10048830:	687b      	ldr	r3, [r7, #4]
10048832:	0018      	movs	r0, r3
10048834:	f000 fa36 	bl	10048ca4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
10048838:	687b      	ldr	r3, [r7, #4]
1004883a:	0018      	movs	r0, r3
1004883c:	f000 f8cc 	bl	100489d8 <UART_SetConfig>
10048840:	0003      	movs	r3, r0
10048842:	2b01      	cmp	r3, #1
10048844:	d101      	bne.n	1004884a <HAL_UART_Init+0x66>
  {
    return HAL_ERROR;
10048846:	2301      	movs	r3, #1
10048848:	e01c      	b.n	10048884 <HAL_UART_Init+0xa0>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
1004884a:	687b      	ldr	r3, [r7, #4]
1004884c:	681b      	ldr	r3, [r3, #0]
1004884e:	685a      	ldr	r2, [r3, #4]
10048850:	687b      	ldr	r3, [r7, #4]
10048852:	681b      	ldr	r3, [r3, #0]
10048854:	490d      	ldr	r1, [pc, #52]	@ (1004888c <HAL_UART_Init+0xa8>)
10048856:	400a      	ands	r2, r1
10048858:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
1004885a:	687b      	ldr	r3, [r7, #4]
1004885c:	681b      	ldr	r3, [r3, #0]
1004885e:	689a      	ldr	r2, [r3, #8]
10048860:	687b      	ldr	r3, [r7, #4]
10048862:	681b      	ldr	r3, [r3, #0]
10048864:	212a      	movs	r1, #42	@ 0x2a
10048866:	438a      	bics	r2, r1
10048868:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
1004886a:	687b      	ldr	r3, [r7, #4]
1004886c:	681b      	ldr	r3, [r3, #0]
1004886e:	681a      	ldr	r2, [r3, #0]
10048870:	687b      	ldr	r3, [r7, #4]
10048872:	681b      	ldr	r3, [r3, #0]
10048874:	2101      	movs	r1, #1
10048876:	430a      	orrs	r2, r1
10048878:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
1004887a:	687b      	ldr	r3, [r7, #4]
1004887c:	0018      	movs	r0, r3
1004887e:	f000 fac5 	bl	10048e0c <UART_CheckIdleState>
10048882:	0003      	movs	r3, r0
}
10048884:	0018      	movs	r0, r3
10048886:	46bd      	mov	sp, r7
10048888:	b002      	add	sp, #8
1004888a:	bd80      	pop	{r7, pc}
1004888c:	ffffb7ff 	.word	0xffffb7ff

10048890 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
10048890:	b580      	push	{r7, lr}
10048892:	b08a      	sub	sp, #40	@ 0x28
10048894:	af02      	add	r7, sp, #8
10048896:	60f8      	str	r0, [r7, #12]
10048898:	60b9      	str	r1, [r7, #8]
1004889a:	603b      	str	r3, [r7, #0]
1004889c:	1dbb      	adds	r3, r7, #6
1004889e:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
100488a0:	68fb      	ldr	r3, [r7, #12]
100488a2:	2288      	movs	r2, #136	@ 0x88
100488a4:	589b      	ldr	r3, [r3, r2]
100488a6:	2b20      	cmp	r3, #32
100488a8:	d000      	beq.n	100488ac <HAL_UART_Transmit+0x1c>
100488aa:	e090      	b.n	100489ce <HAL_UART_Transmit+0x13e>
  {
    if ((pData == NULL) || (Size == 0U))
100488ac:	68bb      	ldr	r3, [r7, #8]
100488ae:	2b00      	cmp	r3, #0
100488b0:	d003      	beq.n	100488ba <HAL_UART_Transmit+0x2a>
100488b2:	1dbb      	adds	r3, r7, #6
100488b4:	881b      	ldrh	r3, [r3, #0]
100488b6:	2b00      	cmp	r3, #0
100488b8:	d101      	bne.n	100488be <HAL_UART_Transmit+0x2e>
    {
      return  HAL_ERROR;
100488ba:	2301      	movs	r3, #1
100488bc:	e088      	b.n	100489d0 <HAL_UART_Transmit+0x140>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
100488be:	68fb      	ldr	r3, [r7, #12]
100488c0:	689a      	ldr	r2, [r3, #8]
100488c2:	2380      	movs	r3, #128	@ 0x80
100488c4:	015b      	lsls	r3, r3, #5
100488c6:	429a      	cmp	r2, r3
100488c8:	d109      	bne.n	100488de <HAL_UART_Transmit+0x4e>
100488ca:	68fb      	ldr	r3, [r7, #12]
100488cc:	691b      	ldr	r3, [r3, #16]
100488ce:	2b00      	cmp	r3, #0
100488d0:	d105      	bne.n	100488de <HAL_UART_Transmit+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
100488d2:	68bb      	ldr	r3, [r7, #8]
100488d4:	2201      	movs	r2, #1
100488d6:	4013      	ands	r3, r2
100488d8:	d001      	beq.n	100488de <HAL_UART_Transmit+0x4e>
      {
        return  HAL_ERROR;
100488da:	2301      	movs	r3, #1
100488dc:	e078      	b.n	100489d0 <HAL_UART_Transmit+0x140>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
100488de:	68fb      	ldr	r3, [r7, #12]
100488e0:	2290      	movs	r2, #144	@ 0x90
100488e2:	2100      	movs	r1, #0
100488e4:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
100488e6:	68fb      	ldr	r3, [r7, #12]
100488e8:	2288      	movs	r2, #136	@ 0x88
100488ea:	2121      	movs	r1, #33	@ 0x21
100488ec:	5099      	str	r1, [r3, r2]

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
100488ee:	f7fb fedf 	bl	100446b0 <HAL_GetTick>
100488f2:	0003      	movs	r3, r0
100488f4:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
100488f6:	68fb      	ldr	r3, [r7, #12]
100488f8:	1dba      	adds	r2, r7, #6
100488fa:	2154      	movs	r1, #84	@ 0x54
100488fc:	8812      	ldrh	r2, [r2, #0]
100488fe:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
10048900:	68fb      	ldr	r3, [r7, #12]
10048902:	1dba      	adds	r2, r7, #6
10048904:	2156      	movs	r1, #86	@ 0x56
10048906:	8812      	ldrh	r2, [r2, #0]
10048908:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
1004890a:	68fb      	ldr	r3, [r7, #12]
1004890c:	689a      	ldr	r2, [r3, #8]
1004890e:	2380      	movs	r3, #128	@ 0x80
10048910:	015b      	lsls	r3, r3, #5
10048912:	429a      	cmp	r2, r3
10048914:	d108      	bne.n	10048928 <HAL_UART_Transmit+0x98>
10048916:	68fb      	ldr	r3, [r7, #12]
10048918:	691b      	ldr	r3, [r3, #16]
1004891a:	2b00      	cmp	r3, #0
1004891c:	d104      	bne.n	10048928 <HAL_UART_Transmit+0x98>
    {
      pdata8bits  = NULL;
1004891e:	2300      	movs	r3, #0
10048920:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
10048922:	68bb      	ldr	r3, [r7, #8]
10048924:	61bb      	str	r3, [r7, #24]
10048926:	e003      	b.n	10048930 <HAL_UART_Transmit+0xa0>
    }
    else
    {
      pdata8bits  = pData;
10048928:	68bb      	ldr	r3, [r7, #8]
1004892a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
1004892c:	2300      	movs	r3, #0
1004892e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
10048930:	e030      	b.n	10048994 <HAL_UART_Transmit+0x104>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
10048932:	697a      	ldr	r2, [r7, #20]
10048934:	68f8      	ldr	r0, [r7, #12]
10048936:	683b      	ldr	r3, [r7, #0]
10048938:	9300      	str	r3, [sp, #0]
1004893a:	0013      	movs	r3, r2
1004893c:	2200      	movs	r2, #0
1004893e:	2180      	movs	r1, #128	@ 0x80
10048940:	f000 fb0e 	bl	10048f60 <UART_WaitOnFlagUntilTimeout>
10048944:	1e03      	subs	r3, r0, #0
10048946:	d005      	beq.n	10048954 <HAL_UART_Transmit+0xc4>
      {

        huart->gState = HAL_UART_STATE_READY;
10048948:	68fb      	ldr	r3, [r7, #12]
1004894a:	2288      	movs	r2, #136	@ 0x88
1004894c:	2120      	movs	r1, #32
1004894e:	5099      	str	r1, [r3, r2]

        return HAL_TIMEOUT;
10048950:	2303      	movs	r3, #3
10048952:	e03d      	b.n	100489d0 <HAL_UART_Transmit+0x140>
      }
      if (pdata8bits == NULL)
10048954:	69fb      	ldr	r3, [r7, #28]
10048956:	2b00      	cmp	r3, #0
10048958:	d10b      	bne.n	10048972 <HAL_UART_Transmit+0xe2>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
1004895a:	69bb      	ldr	r3, [r7, #24]
1004895c:	881b      	ldrh	r3, [r3, #0]
1004895e:	001a      	movs	r2, r3
10048960:	68fb      	ldr	r3, [r7, #12]
10048962:	681b      	ldr	r3, [r3, #0]
10048964:	05d2      	lsls	r2, r2, #23
10048966:	0dd2      	lsrs	r2, r2, #23
10048968:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
1004896a:	69bb      	ldr	r3, [r7, #24]
1004896c:	3302      	adds	r3, #2
1004896e:	61bb      	str	r3, [r7, #24]
10048970:	e007      	b.n	10048982 <HAL_UART_Transmit+0xf2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
10048972:	69fb      	ldr	r3, [r7, #28]
10048974:	781a      	ldrb	r2, [r3, #0]
10048976:	68fb      	ldr	r3, [r7, #12]
10048978:	681b      	ldr	r3, [r3, #0]
1004897a:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
1004897c:	69fb      	ldr	r3, [r7, #28]
1004897e:	3301      	adds	r3, #1
10048980:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
10048982:	68fb      	ldr	r3, [r7, #12]
10048984:	2256      	movs	r2, #86	@ 0x56
10048986:	5a9b      	ldrh	r3, [r3, r2]
10048988:	b29b      	uxth	r3, r3
1004898a:	3b01      	subs	r3, #1
1004898c:	b299      	uxth	r1, r3
1004898e:	68fb      	ldr	r3, [r7, #12]
10048990:	2256      	movs	r2, #86	@ 0x56
10048992:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
10048994:	68fb      	ldr	r3, [r7, #12]
10048996:	2256      	movs	r2, #86	@ 0x56
10048998:	5a9b      	ldrh	r3, [r3, r2]
1004899a:	b29b      	uxth	r3, r3
1004899c:	2b00      	cmp	r3, #0
1004899e:	d1c8      	bne.n	10048932 <HAL_UART_Transmit+0xa2>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
100489a0:	697a      	ldr	r2, [r7, #20]
100489a2:	68f8      	ldr	r0, [r7, #12]
100489a4:	683b      	ldr	r3, [r7, #0]
100489a6:	9300      	str	r3, [sp, #0]
100489a8:	0013      	movs	r3, r2
100489aa:	2200      	movs	r2, #0
100489ac:	2140      	movs	r1, #64	@ 0x40
100489ae:	f000 fad7 	bl	10048f60 <UART_WaitOnFlagUntilTimeout>
100489b2:	1e03      	subs	r3, r0, #0
100489b4:	d005      	beq.n	100489c2 <HAL_UART_Transmit+0x132>
    {
      huart->gState = HAL_UART_STATE_READY;
100489b6:	68fb      	ldr	r3, [r7, #12]
100489b8:	2288      	movs	r2, #136	@ 0x88
100489ba:	2120      	movs	r1, #32
100489bc:	5099      	str	r1, [r3, r2]

      return HAL_TIMEOUT;
100489be:	2303      	movs	r3, #3
100489c0:	e006      	b.n	100489d0 <HAL_UART_Transmit+0x140>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
100489c2:	68fb      	ldr	r3, [r7, #12]
100489c4:	2288      	movs	r2, #136	@ 0x88
100489c6:	2120      	movs	r1, #32
100489c8:	5099      	str	r1, [r3, r2]

    return HAL_OK;
100489ca:	2300      	movs	r3, #0
100489cc:	e000      	b.n	100489d0 <HAL_UART_Transmit+0x140>
  }
  else
  {
    return HAL_BUSY;
100489ce:	2302      	movs	r3, #2
  }
}
100489d0:	0018      	movs	r0, r3
100489d2:	46bd      	mov	sp, r7
100489d4:	b008      	add	sp, #32
100489d6:	bd80      	pop	{r7, pc}

100489d8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
100489d8:	b5b0      	push	{r4, r5, r7, lr}
100489da:	b090      	sub	sp, #64	@ 0x40
100489dc:	af00      	add	r7, sp, #0
100489de:	6278      	str	r0, [r7, #36]	@ 0x24
  uint32_t tmpreg;
  uint16_t brrtemp;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
100489e0:	231b      	movs	r3, #27
100489e2:	2220      	movs	r2, #32
100489e4:	189b      	adds	r3, r3, r2
100489e6:	19db      	adds	r3, r3, r7
100489e8:	2200      	movs	r2, #0
100489ea:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
100489ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
100489ee:	689a      	ldr	r2, [r3, #8]
100489f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
100489f2:	691b      	ldr	r3, [r3, #16]
100489f4:	431a      	orrs	r2, r3
100489f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
100489f8:	695b      	ldr	r3, [r3, #20]
100489fa:	431a      	orrs	r2, r3
100489fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
100489fe:	69db      	ldr	r3, [r3, #28]
10048a00:	4313      	orrs	r3, r2
10048a02:	63fb      	str	r3, [r7, #60]	@ 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
10048a04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10048a06:	681b      	ldr	r3, [r3, #0]
10048a08:	681b      	ldr	r3, [r3, #0]
10048a0a:	4aa0      	ldr	r2, [pc, #640]	@ (10048c8c <UART_SetConfig+0x2b4>)
10048a0c:	4013      	ands	r3, r2
10048a0e:	0019      	movs	r1, r3
10048a10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10048a12:	681a      	ldr	r2, [r3, #0]
10048a14:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
10048a16:	430b      	orrs	r3, r1
10048a18:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
10048a1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10048a1c:	681b      	ldr	r3, [r3, #0]
10048a1e:	685b      	ldr	r3, [r3, #4]
10048a20:	4a9b      	ldr	r2, [pc, #620]	@ (10048c90 <UART_SetConfig+0x2b8>)
10048a22:	4013      	ands	r3, r2
10048a24:	0018      	movs	r0, r3
10048a26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10048a28:	68d9      	ldr	r1, [r3, #12]
10048a2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10048a2c:	681a      	ldr	r2, [r3, #0]
10048a2e:	0003      	movs	r3, r0
10048a30:	430b      	orrs	r3, r1
10048a32:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
10048a34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10048a36:	699b      	ldr	r3, [r3, #24]
10048a38:	63fb      	str	r3, [r7, #60]	@ 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
10048a3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10048a3c:	681b      	ldr	r3, [r3, #0]
10048a3e:	4a95      	ldr	r2, [pc, #596]	@ (10048c94 <UART_SetConfig+0x2bc>)
10048a40:	4293      	cmp	r3, r2
10048a42:	d004      	beq.n	10048a4e <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
10048a44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10048a46:	6a1b      	ldr	r3, [r3, #32]
10048a48:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
10048a4a:	4313      	orrs	r3, r2
10048a4c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
10048a4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10048a50:	681b      	ldr	r3, [r3, #0]
10048a52:	689b      	ldr	r3, [r3, #8]
10048a54:	4a90      	ldr	r2, [pc, #576]	@ (10048c98 <UART_SetConfig+0x2c0>)
10048a56:	4013      	ands	r3, r2
10048a58:	0019      	movs	r1, r3
10048a5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10048a5c:	681a      	ldr	r2, [r3, #0]
10048a5e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
10048a60:	430b      	orrs	r3, r1
10048a62:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
10048a64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10048a66:	681b      	ldr	r3, [r3, #0]
10048a68:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
10048a6a:	220f      	movs	r2, #15
10048a6c:	4393      	bics	r3, r2
10048a6e:	0018      	movs	r0, r3
10048a70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10048a72:	6a59      	ldr	r1, [r3, #36]	@ 0x24
10048a74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10048a76:	681a      	ldr	r2, [r3, #0]
10048a78:	0003      	movs	r3, r0
10048a7a:	430b      	orrs	r3, r1
10048a7c:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
10048a7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10048a80:	681b      	ldr	r3, [r3, #0]
10048a82:	4a84      	ldr	r2, [pc, #528]	@ (10048c94 <UART_SetConfig+0x2bc>)
10048a84:	4293      	cmp	r3, r2
10048a86:	d16a      	bne.n	10048b5e <UART_SetConfig+0x186>
  {
    /* Retrieve frequency clock */
#if defined(RCC_CFGR_LPUCLKSEL)
    pclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_LPUART1);
#else
    pclk = UART_PERIPHCLK;
10048a88:	4b84      	ldr	r3, [pc, #528]	@ (10048c9c <UART_SetConfig+0x2c4>)
10048a8a:	637b      	str	r3, [r7, #52]	@ 0x34
#endif /* RCC_CFGR_LPUCLKSEL */

    /* If proper clock source reported */
    if (pclk != 0U)
10048a8c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
10048a8e:	2b00      	cmp	r3, #0
10048a90:	d100      	bne.n	10048a94 <UART_SetConfig+0xbc>
10048a92:	e0e3      	b.n	10048c5c <UART_SetConfig+0x284>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
10048a94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10048a96:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
10048a98:	4b81      	ldr	r3, [pc, #516]	@ (10048ca0 <UART_SetConfig+0x2c8>)
10048a9a:	0052      	lsls	r2, r2, #1
10048a9c:	5ad3      	ldrh	r3, [r2, r3]
10048a9e:	0019      	movs	r1, r3
10048aa0:	6b78      	ldr	r0, [r7, #52]	@ 0x34
10048aa2:	f7f7 fb2f 	bl	10040104 <__udivsi3>
10048aa6:	0003      	movs	r3, r0
10048aa8:	62bb      	str	r3, [r7, #40]	@ 0x28

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
10048aaa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10048aac:	685a      	ldr	r2, [r3, #4]
10048aae:	0013      	movs	r3, r2
10048ab0:	005b      	lsls	r3, r3, #1
10048ab2:	189b      	adds	r3, r3, r2
10048ab4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
10048ab6:	429a      	cmp	r2, r3
10048ab8:	d305      	bcc.n	10048ac6 <UART_SetConfig+0xee>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
10048aba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10048abc:	685b      	ldr	r3, [r3, #4]
10048abe:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
10048ac0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
10048ac2:	429a      	cmp	r2, r3
10048ac4:	d906      	bls.n	10048ad4 <UART_SetConfig+0xfc>
      {
        ret = HAL_ERROR;
10048ac6:	231b      	movs	r3, #27
10048ac8:	2220      	movs	r2, #32
10048aca:	189b      	adds	r3, r3, r2
10048acc:	19db      	adds	r3, r3, r7
10048ace:	2201      	movs	r2, #1
10048ad0:	701a      	strb	r2, [r3, #0]
10048ad2:	e0c3      	b.n	10048c5c <UART_SetConfig+0x284>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
10048ad4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
10048ad6:	61bb      	str	r3, [r7, #24]
10048ad8:	2300      	movs	r3, #0
10048ada:	61fb      	str	r3, [r7, #28]
10048adc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10048ade:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
10048ae0:	4b6f      	ldr	r3, [pc, #444]	@ (10048ca0 <UART_SetConfig+0x2c8>)
10048ae2:	0052      	lsls	r2, r2, #1
10048ae4:	5ad3      	ldrh	r3, [r2, r3]
10048ae6:	613b      	str	r3, [r7, #16]
10048ae8:	2300      	movs	r3, #0
10048aea:	617b      	str	r3, [r7, #20]
10048aec:	693a      	ldr	r2, [r7, #16]
10048aee:	697b      	ldr	r3, [r7, #20]
10048af0:	69b8      	ldr	r0, [r7, #24]
10048af2:	69f9      	ldr	r1, [r7, #28]
10048af4:	f7f7 fc7c 	bl	100403f0 <__aeabi_uldivmod>
10048af8:	0002      	movs	r2, r0
10048afa:	000b      	movs	r3, r1
10048afc:	0e11      	lsrs	r1, r2, #24
10048afe:	021d      	lsls	r5, r3, #8
10048b00:	430d      	orrs	r5, r1
10048b02:	0214      	lsls	r4, r2, #8
10048b04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10048b06:	685b      	ldr	r3, [r3, #4]
10048b08:	085b      	lsrs	r3, r3, #1
10048b0a:	60bb      	str	r3, [r7, #8]
10048b0c:	2300      	movs	r3, #0
10048b0e:	60fb      	str	r3, [r7, #12]
10048b10:	68b8      	ldr	r0, [r7, #8]
10048b12:	68f9      	ldr	r1, [r7, #12]
10048b14:	1900      	adds	r0, r0, r4
10048b16:	4169      	adcs	r1, r5
10048b18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10048b1a:	685b      	ldr	r3, [r3, #4]
10048b1c:	603b      	str	r3, [r7, #0]
10048b1e:	2300      	movs	r3, #0
10048b20:	607b      	str	r3, [r7, #4]
10048b22:	683a      	ldr	r2, [r7, #0]
10048b24:	687b      	ldr	r3, [r7, #4]
10048b26:	f7f7 fc63 	bl	100403f0 <__aeabi_uldivmod>
10048b2a:	0002      	movs	r2, r0
10048b2c:	000b      	movs	r3, r1
10048b2e:	0013      	movs	r3, r2
10048b30:	633b      	str	r3, [r7, #48]	@ 0x30
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
10048b32:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
10048b34:	23c0      	movs	r3, #192	@ 0xc0
10048b36:	009b      	lsls	r3, r3, #2
10048b38:	429a      	cmp	r2, r3
10048b3a:	d309      	bcc.n	10048b50 <UART_SetConfig+0x178>
10048b3c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
10048b3e:	2380      	movs	r3, #128	@ 0x80
10048b40:	035b      	lsls	r3, r3, #13
10048b42:	429a      	cmp	r2, r3
10048b44:	d204      	bcs.n	10048b50 <UART_SetConfig+0x178>
        {
          huart->Instance->BRR = usartdiv;
10048b46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10048b48:	681b      	ldr	r3, [r3, #0]
10048b4a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
10048b4c:	60da      	str	r2, [r3, #12]
10048b4e:	e085      	b.n	10048c5c <UART_SetConfig+0x284>
        }
        else
        {
          ret = HAL_ERROR;
10048b50:	231b      	movs	r3, #27
10048b52:	2220      	movs	r2, #32
10048b54:	189b      	adds	r3, r3, r2
10048b56:	19db      	adds	r3, r3, r7
10048b58:	2201      	movs	r2, #1
10048b5a:	701a      	strb	r2, [r3, #0]
10048b5c:	e07e      	b.n	10048c5c <UART_SetConfig+0x284>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
10048b5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10048b60:	69da      	ldr	r2, [r3, #28]
10048b62:	2380      	movs	r3, #128	@ 0x80
10048b64:	021b      	lsls	r3, r3, #8
10048b66:	429a      	cmp	r2, r3
10048b68:	d148      	bne.n	10048bfc <UART_SetConfig+0x224>
  {
    pclk = UART_PERIPHCLK;
10048b6a:	4b4c      	ldr	r3, [pc, #304]	@ (10048c9c <UART_SetConfig+0x2c4>)
10048b6c:	637b      	str	r3, [r7, #52]	@ 0x34

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
10048b6e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
10048b70:	2b00      	cmp	r3, #0
10048b72:	d100      	bne.n	10048b76 <UART_SetConfig+0x19e>
10048b74:	e072      	b.n	10048c5c <UART_SetConfig+0x284>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
10048b76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10048b78:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
10048b7a:	4b49      	ldr	r3, [pc, #292]	@ (10048ca0 <UART_SetConfig+0x2c8>)
10048b7c:	0052      	lsls	r2, r2, #1
10048b7e:	5ad3      	ldrh	r3, [r2, r3]
10048b80:	0019      	movs	r1, r3
10048b82:	6b78      	ldr	r0, [r7, #52]	@ 0x34
10048b84:	f7f7 fabe 	bl	10040104 <__udivsi3>
10048b88:	0003      	movs	r3, r0
10048b8a:	005a      	lsls	r2, r3, #1
10048b8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10048b8e:	685b      	ldr	r3, [r3, #4]
10048b90:	085b      	lsrs	r3, r3, #1
10048b92:	18d2      	adds	r2, r2, r3
10048b94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10048b96:	685b      	ldr	r3, [r3, #4]
10048b98:	0019      	movs	r1, r3
10048b9a:	0010      	movs	r0, r2
10048b9c:	f7f7 fab2 	bl	10040104 <__udivsi3>
10048ba0:	0003      	movs	r3, r0
10048ba2:	633b      	str	r3, [r7, #48]	@ 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
10048ba4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
10048ba6:	2b0f      	cmp	r3, #15
10048ba8:	d921      	bls.n	10048bee <UART_SetConfig+0x216>
10048baa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
10048bac:	2380      	movs	r3, #128	@ 0x80
10048bae:	025b      	lsls	r3, r3, #9
10048bb0:	429a      	cmp	r2, r3
10048bb2:	d21c      	bcs.n	10048bee <UART_SetConfig+0x216>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
10048bb4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
10048bb6:	b29a      	uxth	r2, r3
10048bb8:	200e      	movs	r0, #14
10048bba:	2420      	movs	r4, #32
10048bbc:	1903      	adds	r3, r0, r4
10048bbe:	19db      	adds	r3, r3, r7
10048bc0:	210f      	movs	r1, #15
10048bc2:	438a      	bics	r2, r1
10048bc4:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
10048bc6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
10048bc8:	085b      	lsrs	r3, r3, #1
10048bca:	b29b      	uxth	r3, r3
10048bcc:	2207      	movs	r2, #7
10048bce:	4013      	ands	r3, r2
10048bd0:	b299      	uxth	r1, r3
10048bd2:	1903      	adds	r3, r0, r4
10048bd4:	19db      	adds	r3, r3, r7
10048bd6:	1902      	adds	r2, r0, r4
10048bd8:	19d2      	adds	r2, r2, r7
10048bda:	8812      	ldrh	r2, [r2, #0]
10048bdc:	430a      	orrs	r2, r1
10048bde:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
10048be0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10048be2:	681b      	ldr	r3, [r3, #0]
10048be4:	1902      	adds	r2, r0, r4
10048be6:	19d2      	adds	r2, r2, r7
10048be8:	8812      	ldrh	r2, [r2, #0]
10048bea:	60da      	str	r2, [r3, #12]
10048bec:	e036      	b.n	10048c5c <UART_SetConfig+0x284>
      }
      else
      {
        ret = HAL_ERROR;
10048bee:	231b      	movs	r3, #27
10048bf0:	2220      	movs	r2, #32
10048bf2:	189b      	adds	r3, r3, r2
10048bf4:	19db      	adds	r3, r3, r7
10048bf6:	2201      	movs	r2, #1
10048bf8:	701a      	strb	r2, [r3, #0]
10048bfa:	e02f      	b.n	10048c5c <UART_SetConfig+0x284>
      }
    }
  }
  else
  {
    pclk = UART_PERIPHCLK;
10048bfc:	4b27      	ldr	r3, [pc, #156]	@ (10048c9c <UART_SetConfig+0x2c4>)
10048bfe:	637b      	str	r3, [r7, #52]	@ 0x34

    if (pclk != 0U)
10048c00:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
10048c02:	2b00      	cmp	r3, #0
10048c04:	d02a      	beq.n	10048c5c <UART_SetConfig+0x284>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
10048c06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10048c08:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
10048c0a:	4b25      	ldr	r3, [pc, #148]	@ (10048ca0 <UART_SetConfig+0x2c8>)
10048c0c:	0052      	lsls	r2, r2, #1
10048c0e:	5ad3      	ldrh	r3, [r2, r3]
10048c10:	0019      	movs	r1, r3
10048c12:	6b78      	ldr	r0, [r7, #52]	@ 0x34
10048c14:	f7f7 fa76 	bl	10040104 <__udivsi3>
10048c18:	0003      	movs	r3, r0
10048c1a:	001a      	movs	r2, r3
10048c1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10048c1e:	685b      	ldr	r3, [r3, #4]
10048c20:	085b      	lsrs	r3, r3, #1
10048c22:	18d2      	adds	r2, r2, r3
10048c24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10048c26:	685b      	ldr	r3, [r3, #4]
10048c28:	0019      	movs	r1, r3
10048c2a:	0010      	movs	r0, r2
10048c2c:	f7f7 fa6a 	bl	10040104 <__udivsi3>
10048c30:	0003      	movs	r3, r0
10048c32:	633b      	str	r3, [r7, #48]	@ 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
10048c34:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
10048c36:	2b0f      	cmp	r3, #15
10048c38:	d90a      	bls.n	10048c50 <UART_SetConfig+0x278>
10048c3a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
10048c3c:	2380      	movs	r3, #128	@ 0x80
10048c3e:	025b      	lsls	r3, r3, #9
10048c40:	429a      	cmp	r2, r3
10048c42:	d205      	bcs.n	10048c50 <UART_SetConfig+0x278>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
10048c44:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
10048c46:	b29a      	uxth	r2, r3
10048c48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10048c4a:	681b      	ldr	r3, [r3, #0]
10048c4c:	60da      	str	r2, [r3, #12]
10048c4e:	e005      	b.n	10048c5c <UART_SetConfig+0x284>
      }
      else
      {
        ret = HAL_ERROR;
10048c50:	231b      	movs	r3, #27
10048c52:	2220      	movs	r2, #32
10048c54:	189b      	adds	r3, r3, r2
10048c56:	19db      	adds	r3, r3, r7
10048c58:	2201      	movs	r2, #1
10048c5a:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
10048c5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10048c5e:	226a      	movs	r2, #106	@ 0x6a
10048c60:	2101      	movs	r1, #1
10048c62:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
10048c64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10048c66:	2268      	movs	r2, #104	@ 0x68
10048c68:	2101      	movs	r1, #1
10048c6a:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
10048c6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10048c6e:	2200      	movs	r2, #0
10048c70:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
10048c72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10048c74:	2200      	movs	r2, #0
10048c76:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
10048c78:	231b      	movs	r3, #27
10048c7a:	2220      	movs	r2, #32
10048c7c:	189b      	adds	r3, r3, r2
10048c7e:	19db      	adds	r3, r3, r7
10048c80:	781b      	ldrb	r3, [r3, #0]
}
10048c82:	0018      	movs	r0, r3
10048c84:	46bd      	mov	sp, r7
10048c86:	b010      	add	sp, #64	@ 0x40
10048c88:	bdb0      	pop	{r4, r5, r7, pc}
10048c8a:	46c0      	nop			@ (mov r8, r8)
10048c8c:	cfff69f3 	.word	0xcfff69f3
10048c90:	ffffcfff 	.word	0xffffcfff
10048c94:	41005000 	.word	0x41005000
10048c98:	11fff4ff 	.word	0x11fff4ff
10048c9c:	00f42400 	.word	0x00f42400
10048ca0:	100493bc 	.word	0x100493bc

10048ca4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
10048ca4:	b580      	push	{r7, lr}
10048ca6:	b082      	sub	sp, #8
10048ca8:	af00      	add	r7, sp, #0
10048caa:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
10048cac:	687b      	ldr	r3, [r7, #4]
10048cae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
10048cb0:	2208      	movs	r2, #8
10048cb2:	4013      	ands	r3, r2
10048cb4:	d00b      	beq.n	10048cce <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
10048cb6:	687b      	ldr	r3, [r7, #4]
10048cb8:	681b      	ldr	r3, [r3, #0]
10048cba:	685b      	ldr	r3, [r3, #4]
10048cbc:	4a4a      	ldr	r2, [pc, #296]	@ (10048de8 <UART_AdvFeatureConfig+0x144>)
10048cbe:	4013      	ands	r3, r2
10048cc0:	0019      	movs	r1, r3
10048cc2:	687b      	ldr	r3, [r7, #4]
10048cc4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
10048cc6:	687b      	ldr	r3, [r7, #4]
10048cc8:	681b      	ldr	r3, [r3, #0]
10048cca:	430a      	orrs	r2, r1
10048ccc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
10048cce:	687b      	ldr	r3, [r7, #4]
10048cd0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
10048cd2:	2201      	movs	r2, #1
10048cd4:	4013      	ands	r3, r2
10048cd6:	d00b      	beq.n	10048cf0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
10048cd8:	687b      	ldr	r3, [r7, #4]
10048cda:	681b      	ldr	r3, [r3, #0]
10048cdc:	685b      	ldr	r3, [r3, #4]
10048cde:	4a43      	ldr	r2, [pc, #268]	@ (10048dec <UART_AdvFeatureConfig+0x148>)
10048ce0:	4013      	ands	r3, r2
10048ce2:	0019      	movs	r1, r3
10048ce4:	687b      	ldr	r3, [r7, #4]
10048ce6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
10048ce8:	687b      	ldr	r3, [r7, #4]
10048cea:	681b      	ldr	r3, [r3, #0]
10048cec:	430a      	orrs	r2, r1
10048cee:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
10048cf0:	687b      	ldr	r3, [r7, #4]
10048cf2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
10048cf4:	2202      	movs	r2, #2
10048cf6:	4013      	ands	r3, r2
10048cf8:	d00b      	beq.n	10048d12 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
10048cfa:	687b      	ldr	r3, [r7, #4]
10048cfc:	681b      	ldr	r3, [r3, #0]
10048cfe:	685b      	ldr	r3, [r3, #4]
10048d00:	4a3b      	ldr	r2, [pc, #236]	@ (10048df0 <UART_AdvFeatureConfig+0x14c>)
10048d02:	4013      	ands	r3, r2
10048d04:	0019      	movs	r1, r3
10048d06:	687b      	ldr	r3, [r7, #4]
10048d08:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
10048d0a:	687b      	ldr	r3, [r7, #4]
10048d0c:	681b      	ldr	r3, [r3, #0]
10048d0e:	430a      	orrs	r2, r1
10048d10:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
10048d12:	687b      	ldr	r3, [r7, #4]
10048d14:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
10048d16:	2204      	movs	r2, #4
10048d18:	4013      	ands	r3, r2
10048d1a:	d00b      	beq.n	10048d34 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
10048d1c:	687b      	ldr	r3, [r7, #4]
10048d1e:	681b      	ldr	r3, [r3, #0]
10048d20:	685b      	ldr	r3, [r3, #4]
10048d22:	4a34      	ldr	r2, [pc, #208]	@ (10048df4 <UART_AdvFeatureConfig+0x150>)
10048d24:	4013      	ands	r3, r2
10048d26:	0019      	movs	r1, r3
10048d28:	687b      	ldr	r3, [r7, #4]
10048d2a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
10048d2c:	687b      	ldr	r3, [r7, #4]
10048d2e:	681b      	ldr	r3, [r3, #0]
10048d30:	430a      	orrs	r2, r1
10048d32:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
10048d34:	687b      	ldr	r3, [r7, #4]
10048d36:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
10048d38:	2210      	movs	r2, #16
10048d3a:	4013      	ands	r3, r2
10048d3c:	d00b      	beq.n	10048d56 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
10048d3e:	687b      	ldr	r3, [r7, #4]
10048d40:	681b      	ldr	r3, [r3, #0]
10048d42:	689b      	ldr	r3, [r3, #8]
10048d44:	4a2c      	ldr	r2, [pc, #176]	@ (10048df8 <UART_AdvFeatureConfig+0x154>)
10048d46:	4013      	ands	r3, r2
10048d48:	0019      	movs	r1, r3
10048d4a:	687b      	ldr	r3, [r7, #4]
10048d4c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
10048d4e:	687b      	ldr	r3, [r7, #4]
10048d50:	681b      	ldr	r3, [r3, #0]
10048d52:	430a      	orrs	r2, r1
10048d54:	609a      	str	r2, [r3, #8]
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
10048d56:	687b      	ldr	r3, [r7, #4]
10048d58:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
10048d5a:	2220      	movs	r2, #32
10048d5c:	4013      	ands	r3, r2
10048d5e:	d00b      	beq.n	10048d78 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
10048d60:	687b      	ldr	r3, [r7, #4]
10048d62:	681b      	ldr	r3, [r3, #0]
10048d64:	689b      	ldr	r3, [r3, #8]
10048d66:	4a25      	ldr	r2, [pc, #148]	@ (10048dfc <UART_AdvFeatureConfig+0x158>)
10048d68:	4013      	ands	r3, r2
10048d6a:	0019      	movs	r1, r3
10048d6c:	687b      	ldr	r3, [r7, #4]
10048d6e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
10048d70:	687b      	ldr	r3, [r7, #4]
10048d72:	681b      	ldr	r3, [r3, #0]
10048d74:	430a      	orrs	r2, r1
10048d76:	609a      	str	r2, [r3, #8]
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
10048d78:	687b      	ldr	r3, [r7, #4]
10048d7a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
10048d7c:	2240      	movs	r2, #64	@ 0x40
10048d7e:	4013      	ands	r3, r2
10048d80:	d01d      	beq.n	10048dbe <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
10048d82:	687b      	ldr	r3, [r7, #4]
10048d84:	681b      	ldr	r3, [r3, #0]
10048d86:	685b      	ldr	r3, [r3, #4]
10048d88:	4a1d      	ldr	r2, [pc, #116]	@ (10048e00 <UART_AdvFeatureConfig+0x15c>)
10048d8a:	4013      	ands	r3, r2
10048d8c:	0019      	movs	r1, r3
10048d8e:	687b      	ldr	r3, [r7, #4]
10048d90:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
10048d92:	687b      	ldr	r3, [r7, #4]
10048d94:	681b      	ldr	r3, [r3, #0]
10048d96:	430a      	orrs	r2, r1
10048d98:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
10048d9a:	687b      	ldr	r3, [r7, #4]
10048d9c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
10048d9e:	2380      	movs	r3, #128	@ 0x80
10048da0:	035b      	lsls	r3, r3, #13
10048da2:	429a      	cmp	r2, r3
10048da4:	d10b      	bne.n	10048dbe <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
10048da6:	687b      	ldr	r3, [r7, #4]
10048da8:	681b      	ldr	r3, [r3, #0]
10048daa:	685b      	ldr	r3, [r3, #4]
10048dac:	4a15      	ldr	r2, [pc, #84]	@ (10048e04 <UART_AdvFeatureConfig+0x160>)
10048dae:	4013      	ands	r3, r2
10048db0:	0019      	movs	r1, r3
10048db2:	687b      	ldr	r3, [r7, #4]
10048db4:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
10048db6:	687b      	ldr	r3, [r7, #4]
10048db8:	681b      	ldr	r3, [r3, #0]
10048dba:	430a      	orrs	r2, r1
10048dbc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
10048dbe:	687b      	ldr	r3, [r7, #4]
10048dc0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
10048dc2:	2280      	movs	r2, #128	@ 0x80
10048dc4:	4013      	ands	r3, r2
10048dc6:	d00b      	beq.n	10048de0 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
10048dc8:	687b      	ldr	r3, [r7, #4]
10048dca:	681b      	ldr	r3, [r3, #0]
10048dcc:	685b      	ldr	r3, [r3, #4]
10048dce:	4a0e      	ldr	r2, [pc, #56]	@ (10048e08 <UART_AdvFeatureConfig+0x164>)
10048dd0:	4013      	ands	r3, r2
10048dd2:	0019      	movs	r1, r3
10048dd4:	687b      	ldr	r3, [r7, #4]
10048dd6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
10048dd8:	687b      	ldr	r3, [r7, #4]
10048dda:	681b      	ldr	r3, [r3, #0]
10048ddc:	430a      	orrs	r2, r1
10048dde:	605a      	str	r2, [r3, #4]
  }
}
10048de0:	46c0      	nop			@ (mov r8, r8)
10048de2:	46bd      	mov	sp, r7
10048de4:	b002      	add	sp, #8
10048de6:	bd80      	pop	{r7, pc}
10048de8:	ffff7fff 	.word	0xffff7fff
10048dec:	fffdffff 	.word	0xfffdffff
10048df0:	fffeffff 	.word	0xfffeffff
10048df4:	fffbffff 	.word	0xfffbffff
10048df8:	ffffefff 	.word	0xffffefff
10048dfc:	ffffdfff 	.word	0xffffdfff
10048e00:	ffefffff 	.word	0xffefffff
10048e04:	ff9fffff 	.word	0xff9fffff
10048e08:	fff7ffff 	.word	0xfff7ffff

10048e0c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
10048e0c:	b580      	push	{r7, lr}
10048e0e:	b092      	sub	sp, #72	@ 0x48
10048e10:	af02      	add	r7, sp, #8
10048e12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
10048e14:	687b      	ldr	r3, [r7, #4]
10048e16:	2290      	movs	r2, #144	@ 0x90
10048e18:	2100      	movs	r1, #0
10048e1a:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
10048e1c:	f7fb fc48 	bl	100446b0 <HAL_GetTick>
10048e20:	0003      	movs	r3, r0
10048e22:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
10048e24:	687b      	ldr	r3, [r7, #4]
10048e26:	681b      	ldr	r3, [r3, #0]
10048e28:	681b      	ldr	r3, [r3, #0]
10048e2a:	2208      	movs	r2, #8
10048e2c:	4013      	ands	r3, r2
10048e2e:	2b08      	cmp	r3, #8
10048e30:	d12d      	bne.n	10048e8e <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
10048e32:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
10048e34:	2280      	movs	r2, #128	@ 0x80
10048e36:	0391      	lsls	r1, r2, #14
10048e38:	6878      	ldr	r0, [r7, #4]
10048e3a:	4a47      	ldr	r2, [pc, #284]	@ (10048f58 <UART_CheckIdleState+0x14c>)
10048e3c:	9200      	str	r2, [sp, #0]
10048e3e:	2200      	movs	r2, #0
10048e40:	f000 f88e 	bl	10048f60 <UART_WaitOnFlagUntilTimeout>
10048e44:	1e03      	subs	r3, r0, #0
10048e46:	d022      	beq.n	10048e8e <UART_CheckIdleState+0x82>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
10048e48:	f3ef 8310 	mrs	r3, PRIMASK
10048e4c:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
10048e4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
10048e50:	63bb      	str	r3, [r7, #56]	@ 0x38
10048e52:	2301      	movs	r3, #1
10048e54:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
10048e56:	6abb      	ldr	r3, [r7, #40]	@ 0x28
10048e58:	f383 8810 	msr	PRIMASK, r3
}
10048e5c:	46c0      	nop			@ (mov r8, r8)
10048e5e:	687b      	ldr	r3, [r7, #4]
10048e60:	681b      	ldr	r3, [r3, #0]
10048e62:	681a      	ldr	r2, [r3, #0]
10048e64:	687b      	ldr	r3, [r7, #4]
10048e66:	681b      	ldr	r3, [r3, #0]
10048e68:	2180      	movs	r1, #128	@ 0x80
10048e6a:	438a      	bics	r2, r1
10048e6c:	601a      	str	r2, [r3, #0]
10048e6e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
10048e70:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
10048e72:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
10048e74:	f383 8810 	msr	PRIMASK, r3
}
10048e78:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
10048e7a:	687b      	ldr	r3, [r7, #4]
10048e7c:	2288      	movs	r2, #136	@ 0x88
10048e7e:	2120      	movs	r1, #32
10048e80:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
10048e82:	687b      	ldr	r3, [r7, #4]
10048e84:	2284      	movs	r2, #132	@ 0x84
10048e86:	2100      	movs	r1, #0
10048e88:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
10048e8a:	2303      	movs	r3, #3
10048e8c:	e060      	b.n	10048f50 <UART_CheckIdleState+0x144>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
10048e8e:	687b      	ldr	r3, [r7, #4]
10048e90:	681b      	ldr	r3, [r3, #0]
10048e92:	681b      	ldr	r3, [r3, #0]
10048e94:	2204      	movs	r2, #4
10048e96:	4013      	ands	r3, r2
10048e98:	2b04      	cmp	r3, #4
10048e9a:	d146      	bne.n	10048f2a <UART_CheckIdleState+0x11e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
10048e9c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
10048e9e:	2280      	movs	r2, #128	@ 0x80
10048ea0:	03d1      	lsls	r1, r2, #15
10048ea2:	6878      	ldr	r0, [r7, #4]
10048ea4:	4a2c      	ldr	r2, [pc, #176]	@ (10048f58 <UART_CheckIdleState+0x14c>)
10048ea6:	9200      	str	r2, [sp, #0]
10048ea8:	2200      	movs	r2, #0
10048eaa:	f000 f859 	bl	10048f60 <UART_WaitOnFlagUntilTimeout>
10048eae:	1e03      	subs	r3, r0, #0
10048eb0:	d03b      	beq.n	10048f2a <UART_CheckIdleState+0x11e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
10048eb2:	f3ef 8310 	mrs	r3, PRIMASK
10048eb6:	60fb      	str	r3, [r7, #12]
  return(result);
10048eb8:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
10048eba:	637b      	str	r3, [r7, #52]	@ 0x34
10048ebc:	2301      	movs	r3, #1
10048ebe:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
10048ec0:	693b      	ldr	r3, [r7, #16]
10048ec2:	f383 8810 	msr	PRIMASK, r3
}
10048ec6:	46c0      	nop			@ (mov r8, r8)
10048ec8:	687b      	ldr	r3, [r7, #4]
10048eca:	681b      	ldr	r3, [r3, #0]
10048ecc:	681a      	ldr	r2, [r3, #0]
10048ece:	687b      	ldr	r3, [r7, #4]
10048ed0:	681b      	ldr	r3, [r3, #0]
10048ed2:	4922      	ldr	r1, [pc, #136]	@ (10048f5c <UART_CheckIdleState+0x150>)
10048ed4:	400a      	ands	r2, r1
10048ed6:	601a      	str	r2, [r3, #0]
10048ed8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
10048eda:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
10048edc:	697b      	ldr	r3, [r7, #20]
10048ede:	f383 8810 	msr	PRIMASK, r3
}
10048ee2:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
10048ee4:	f3ef 8310 	mrs	r3, PRIMASK
10048ee8:	61bb      	str	r3, [r7, #24]
  return(result);
10048eea:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
10048eec:	633b      	str	r3, [r7, #48]	@ 0x30
10048eee:	2301      	movs	r3, #1
10048ef0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
10048ef2:	69fb      	ldr	r3, [r7, #28]
10048ef4:	f383 8810 	msr	PRIMASK, r3
}
10048ef8:	46c0      	nop			@ (mov r8, r8)
10048efa:	687b      	ldr	r3, [r7, #4]
10048efc:	681b      	ldr	r3, [r3, #0]
10048efe:	689a      	ldr	r2, [r3, #8]
10048f00:	687b      	ldr	r3, [r7, #4]
10048f02:	681b      	ldr	r3, [r3, #0]
10048f04:	2101      	movs	r1, #1
10048f06:	438a      	bics	r2, r1
10048f08:	609a      	str	r2, [r3, #8]
10048f0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
10048f0c:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
10048f0e:	6a3b      	ldr	r3, [r7, #32]
10048f10:	f383 8810 	msr	PRIMASK, r3
}
10048f14:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
10048f16:	687b      	ldr	r3, [r7, #4]
10048f18:	228c      	movs	r2, #140	@ 0x8c
10048f1a:	2120      	movs	r1, #32
10048f1c:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
10048f1e:	687b      	ldr	r3, [r7, #4]
10048f20:	2284      	movs	r2, #132	@ 0x84
10048f22:	2100      	movs	r1, #0
10048f24:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
10048f26:	2303      	movs	r3, #3
10048f28:	e012      	b.n	10048f50 <UART_CheckIdleState+0x144>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
10048f2a:	687b      	ldr	r3, [r7, #4]
10048f2c:	2288      	movs	r2, #136	@ 0x88
10048f2e:	2120      	movs	r1, #32
10048f30:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
10048f32:	687b      	ldr	r3, [r7, #4]
10048f34:	228c      	movs	r2, #140	@ 0x8c
10048f36:	2120      	movs	r1, #32
10048f38:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
10048f3a:	687b      	ldr	r3, [r7, #4]
10048f3c:	2200      	movs	r2, #0
10048f3e:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
10048f40:	687b      	ldr	r3, [r7, #4]
10048f42:	2200      	movs	r2, #0
10048f44:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
10048f46:	687b      	ldr	r3, [r7, #4]
10048f48:	2284      	movs	r2, #132	@ 0x84
10048f4a:	2100      	movs	r1, #0
10048f4c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
10048f4e:	2300      	movs	r3, #0
}
10048f50:	0018      	movs	r0, r3
10048f52:	46bd      	mov	sp, r7
10048f54:	b010      	add	sp, #64	@ 0x40
10048f56:	bd80      	pop	{r7, pc}
10048f58:	01ffffff 	.word	0x01ffffff
10048f5c:	fffffedf 	.word	0xfffffedf

10048f60 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
10048f60:	b580      	push	{r7, lr}
10048f62:	b084      	sub	sp, #16
10048f64:	af00      	add	r7, sp, #0
10048f66:	60f8      	str	r0, [r7, #12]
10048f68:	60b9      	str	r1, [r7, #8]
10048f6a:	603b      	str	r3, [r7, #0]
10048f6c:	1dfb      	adds	r3, r7, #7
10048f6e:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
10048f70:	e051      	b.n	10049016 <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
10048f72:	69bb      	ldr	r3, [r7, #24]
10048f74:	3301      	adds	r3, #1
10048f76:	d04e      	beq.n	10049016 <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
10048f78:	f7fb fb9a 	bl	100446b0 <HAL_GetTick>
10048f7c:	0002      	movs	r2, r0
10048f7e:	683b      	ldr	r3, [r7, #0]
10048f80:	1ad3      	subs	r3, r2, r3
10048f82:	69ba      	ldr	r2, [r7, #24]
10048f84:	429a      	cmp	r2, r3
10048f86:	d302      	bcc.n	10048f8e <UART_WaitOnFlagUntilTimeout+0x2e>
10048f88:	69bb      	ldr	r3, [r7, #24]
10048f8a:	2b00      	cmp	r3, #0
10048f8c:	d101      	bne.n	10048f92 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
10048f8e:	2303      	movs	r3, #3
10048f90:	e051      	b.n	10049036 <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
10048f92:	68fb      	ldr	r3, [r7, #12]
10048f94:	681b      	ldr	r3, [r3, #0]
10048f96:	681b      	ldr	r3, [r3, #0]
10048f98:	2204      	movs	r2, #4
10048f9a:	4013      	ands	r3, r2
10048f9c:	d03b      	beq.n	10049016 <UART_WaitOnFlagUntilTimeout+0xb6>
10048f9e:	68bb      	ldr	r3, [r7, #8]
10048fa0:	2b80      	cmp	r3, #128	@ 0x80
10048fa2:	d038      	beq.n	10049016 <UART_WaitOnFlagUntilTimeout+0xb6>
10048fa4:	68bb      	ldr	r3, [r7, #8]
10048fa6:	2b40      	cmp	r3, #64	@ 0x40
10048fa8:	d035      	beq.n	10049016 <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
10048faa:	68fb      	ldr	r3, [r7, #12]
10048fac:	681b      	ldr	r3, [r3, #0]
10048fae:	69db      	ldr	r3, [r3, #28]
10048fb0:	2208      	movs	r2, #8
10048fb2:	4013      	ands	r3, r2
10048fb4:	2b08      	cmp	r3, #8
10048fb6:	d111      	bne.n	10048fdc <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
10048fb8:	68fb      	ldr	r3, [r7, #12]
10048fba:	681b      	ldr	r3, [r3, #0]
10048fbc:	2208      	movs	r2, #8
10048fbe:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
10048fc0:	68fb      	ldr	r3, [r7, #12]
10048fc2:	0018      	movs	r0, r3
10048fc4:	f000 f83c 	bl	10049040 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
10048fc8:	68fb      	ldr	r3, [r7, #12]
10048fca:	2290      	movs	r2, #144	@ 0x90
10048fcc:	2108      	movs	r1, #8
10048fce:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
10048fd0:	68fb      	ldr	r3, [r7, #12]
10048fd2:	2284      	movs	r2, #132	@ 0x84
10048fd4:	2100      	movs	r1, #0
10048fd6:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
10048fd8:	2301      	movs	r3, #1
10048fda:	e02c      	b.n	10049036 <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
10048fdc:	68fb      	ldr	r3, [r7, #12]
10048fde:	681b      	ldr	r3, [r3, #0]
10048fe0:	69da      	ldr	r2, [r3, #28]
10048fe2:	2380      	movs	r3, #128	@ 0x80
10048fe4:	011b      	lsls	r3, r3, #4
10048fe6:	401a      	ands	r2, r3
10048fe8:	2380      	movs	r3, #128	@ 0x80
10048fea:	011b      	lsls	r3, r3, #4
10048fec:	429a      	cmp	r2, r3
10048fee:	d112      	bne.n	10049016 <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
10048ff0:	68fb      	ldr	r3, [r7, #12]
10048ff2:	681b      	ldr	r3, [r3, #0]
10048ff4:	2280      	movs	r2, #128	@ 0x80
10048ff6:	0112      	lsls	r2, r2, #4
10048ff8:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
10048ffa:	68fb      	ldr	r3, [r7, #12]
10048ffc:	0018      	movs	r0, r3
10048ffe:	f000 f81f 	bl	10049040 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
10049002:	68fb      	ldr	r3, [r7, #12]
10049004:	2290      	movs	r2, #144	@ 0x90
10049006:	2120      	movs	r1, #32
10049008:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
1004900a:	68fb      	ldr	r3, [r7, #12]
1004900c:	2284      	movs	r2, #132	@ 0x84
1004900e:	2100      	movs	r1, #0
10049010:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
10049012:	2303      	movs	r3, #3
10049014:	e00f      	b.n	10049036 <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
10049016:	68fb      	ldr	r3, [r7, #12]
10049018:	681b      	ldr	r3, [r3, #0]
1004901a:	69db      	ldr	r3, [r3, #28]
1004901c:	68ba      	ldr	r2, [r7, #8]
1004901e:	4013      	ands	r3, r2
10049020:	68ba      	ldr	r2, [r7, #8]
10049022:	1ad3      	subs	r3, r2, r3
10049024:	425a      	negs	r2, r3
10049026:	4153      	adcs	r3, r2
10049028:	b2db      	uxtb	r3, r3
1004902a:	001a      	movs	r2, r3
1004902c:	1dfb      	adds	r3, r7, #7
1004902e:	781b      	ldrb	r3, [r3, #0]
10049030:	429a      	cmp	r2, r3
10049032:	d09e      	beq.n	10048f72 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
10049034:	2300      	movs	r3, #0
}
10049036:	0018      	movs	r0, r3
10049038:	46bd      	mov	sp, r7
1004903a:	b004      	add	sp, #16
1004903c:	bd80      	pop	{r7, pc}
	...

10049040 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
10049040:	b580      	push	{r7, lr}
10049042:	b08e      	sub	sp, #56	@ 0x38
10049044:	af00      	add	r7, sp, #0
10049046:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
10049048:	f3ef 8310 	mrs	r3, PRIMASK
1004904c:	617b      	str	r3, [r7, #20]
  return(result);
1004904e:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
10049050:	637b      	str	r3, [r7, #52]	@ 0x34
10049052:	2301      	movs	r3, #1
10049054:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
10049056:	69bb      	ldr	r3, [r7, #24]
10049058:	f383 8810 	msr	PRIMASK, r3
}
1004905c:	46c0      	nop			@ (mov r8, r8)
1004905e:	687b      	ldr	r3, [r7, #4]
10049060:	681b      	ldr	r3, [r3, #0]
10049062:	681a      	ldr	r2, [r3, #0]
10049064:	687b      	ldr	r3, [r7, #4]
10049066:	681b      	ldr	r3, [r3, #0]
10049068:	4926      	ldr	r1, [pc, #152]	@ (10049104 <UART_EndRxTransfer+0xc4>)
1004906a:	400a      	ands	r2, r1
1004906c:	601a      	str	r2, [r3, #0]
1004906e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
10049070:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
10049072:	69fb      	ldr	r3, [r7, #28]
10049074:	f383 8810 	msr	PRIMASK, r3
}
10049078:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
1004907a:	f3ef 8310 	mrs	r3, PRIMASK
1004907e:	623b      	str	r3, [r7, #32]
  return(result);
10049080:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
10049082:	633b      	str	r3, [r7, #48]	@ 0x30
10049084:	2301      	movs	r3, #1
10049086:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
10049088:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
1004908a:	f383 8810 	msr	PRIMASK, r3
}
1004908e:	46c0      	nop			@ (mov r8, r8)
10049090:	687b      	ldr	r3, [r7, #4]
10049092:	681b      	ldr	r3, [r3, #0]
10049094:	689a      	ldr	r2, [r3, #8]
10049096:	687b      	ldr	r3, [r7, #4]
10049098:	681b      	ldr	r3, [r3, #0]
1004909a:	491b      	ldr	r1, [pc, #108]	@ (10049108 <UART_EndRxTransfer+0xc8>)
1004909c:	400a      	ands	r2, r1
1004909e:	609a      	str	r2, [r3, #8]
100490a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
100490a2:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
100490a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
100490a6:	f383 8810 	msr	PRIMASK, r3
}
100490aa:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
100490ac:	687b      	ldr	r3, [r7, #4]
100490ae:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
100490b0:	2b01      	cmp	r3, #1
100490b2:	d118      	bne.n	100490e6 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
100490b4:	f3ef 8310 	mrs	r3, PRIMASK
100490b8:	60bb      	str	r3, [r7, #8]
  return(result);
100490ba:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
100490bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
100490be:	2301      	movs	r3, #1
100490c0:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
100490c2:	68fb      	ldr	r3, [r7, #12]
100490c4:	f383 8810 	msr	PRIMASK, r3
}
100490c8:	46c0      	nop			@ (mov r8, r8)
100490ca:	687b      	ldr	r3, [r7, #4]
100490cc:	681b      	ldr	r3, [r3, #0]
100490ce:	681a      	ldr	r2, [r3, #0]
100490d0:	687b      	ldr	r3, [r7, #4]
100490d2:	681b      	ldr	r3, [r3, #0]
100490d4:	2110      	movs	r1, #16
100490d6:	438a      	bics	r2, r1
100490d8:	601a      	str	r2, [r3, #0]
100490da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
100490dc:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
100490de:	693b      	ldr	r3, [r7, #16]
100490e0:	f383 8810 	msr	PRIMASK, r3
}
100490e4:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
100490e6:	687b      	ldr	r3, [r7, #4]
100490e8:	228c      	movs	r2, #140	@ 0x8c
100490ea:	2120      	movs	r1, #32
100490ec:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
100490ee:	687b      	ldr	r3, [r7, #4]
100490f0:	2200      	movs	r2, #0
100490f2:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
100490f4:	687b      	ldr	r3, [r7, #4]
100490f6:	2200      	movs	r2, #0
100490f8:	675a      	str	r2, [r3, #116]	@ 0x74
}
100490fa:	46c0      	nop			@ (mov r8, r8)
100490fc:	46bd      	mov	sp, r7
100490fe:	b00e      	add	sp, #56	@ 0x38
10049100:	bd80      	pop	{r7, pc}
10049102:	46c0      	nop			@ (mov r8, r8)
10049104:	fffffedf 	.word	0xfffffedf
10049108:	effffffe 	.word	0xeffffffe

1004910c <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
1004910c:	b580      	push	{r7, lr}
1004910e:	b084      	sub	sp, #16
10049110:	af00      	add	r7, sp, #0
10049112:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
10049114:	687b      	ldr	r3, [r7, #4]
10049116:	2284      	movs	r2, #132	@ 0x84
10049118:	5c9b      	ldrb	r3, [r3, r2]
1004911a:	2b01      	cmp	r3, #1
1004911c:	d101      	bne.n	10049122 <HAL_UARTEx_DisableFifoMode+0x16>
1004911e:	2302      	movs	r3, #2
10049120:	e027      	b.n	10049172 <HAL_UARTEx_DisableFifoMode+0x66>
10049122:	687b      	ldr	r3, [r7, #4]
10049124:	2284      	movs	r2, #132	@ 0x84
10049126:	2101      	movs	r1, #1
10049128:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
1004912a:	687b      	ldr	r3, [r7, #4]
1004912c:	2288      	movs	r2, #136	@ 0x88
1004912e:	2124      	movs	r1, #36	@ 0x24
10049130:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
10049132:	687b      	ldr	r3, [r7, #4]
10049134:	681b      	ldr	r3, [r3, #0]
10049136:	681b      	ldr	r3, [r3, #0]
10049138:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
1004913a:	687b      	ldr	r3, [r7, #4]
1004913c:	681b      	ldr	r3, [r3, #0]
1004913e:	681a      	ldr	r2, [r3, #0]
10049140:	687b      	ldr	r3, [r7, #4]
10049142:	681b      	ldr	r3, [r3, #0]
10049144:	2101      	movs	r1, #1
10049146:	438a      	bics	r2, r1
10049148:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
1004914a:	68fb      	ldr	r3, [r7, #12]
1004914c:	4a0b      	ldr	r2, [pc, #44]	@ (1004917c <HAL_UARTEx_DisableFifoMode+0x70>)
1004914e:	4013      	ands	r3, r2
10049150:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
10049152:	687b      	ldr	r3, [r7, #4]
10049154:	2200      	movs	r2, #0
10049156:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
10049158:	687b      	ldr	r3, [r7, #4]
1004915a:	681b      	ldr	r3, [r3, #0]
1004915c:	68fa      	ldr	r2, [r7, #12]
1004915e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
10049160:	687b      	ldr	r3, [r7, #4]
10049162:	2288      	movs	r2, #136	@ 0x88
10049164:	2120      	movs	r1, #32
10049166:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
10049168:	687b      	ldr	r3, [r7, #4]
1004916a:	2284      	movs	r2, #132	@ 0x84
1004916c:	2100      	movs	r1, #0
1004916e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
10049170:	2300      	movs	r3, #0
}
10049172:	0018      	movs	r0, r3
10049174:	46bd      	mov	sp, r7
10049176:	b004      	add	sp, #16
10049178:	bd80      	pop	{r7, pc}
1004917a:	46c0      	nop			@ (mov r8, r8)
1004917c:	dfffffff 	.word	0xdfffffff

10049180 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
10049180:	b580      	push	{r7, lr}
10049182:	b084      	sub	sp, #16
10049184:	af00      	add	r7, sp, #0
10049186:	6078      	str	r0, [r7, #4]
10049188:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
1004918a:	687b      	ldr	r3, [r7, #4]
1004918c:	2284      	movs	r2, #132	@ 0x84
1004918e:	5c9b      	ldrb	r3, [r3, r2]
10049190:	2b01      	cmp	r3, #1
10049192:	d101      	bne.n	10049198 <HAL_UARTEx_SetTxFifoThreshold+0x18>
10049194:	2302      	movs	r3, #2
10049196:	e02e      	b.n	100491f6 <HAL_UARTEx_SetTxFifoThreshold+0x76>
10049198:	687b      	ldr	r3, [r7, #4]
1004919a:	2284      	movs	r2, #132	@ 0x84
1004919c:	2101      	movs	r1, #1
1004919e:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
100491a0:	687b      	ldr	r3, [r7, #4]
100491a2:	2288      	movs	r2, #136	@ 0x88
100491a4:	2124      	movs	r1, #36	@ 0x24
100491a6:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
100491a8:	687b      	ldr	r3, [r7, #4]
100491aa:	681b      	ldr	r3, [r3, #0]
100491ac:	681b      	ldr	r3, [r3, #0]
100491ae:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
100491b0:	687b      	ldr	r3, [r7, #4]
100491b2:	681b      	ldr	r3, [r3, #0]
100491b4:	681a      	ldr	r2, [r3, #0]
100491b6:	687b      	ldr	r3, [r7, #4]
100491b8:	681b      	ldr	r3, [r3, #0]
100491ba:	2101      	movs	r1, #1
100491bc:	438a      	bics	r2, r1
100491be:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
100491c0:	687b      	ldr	r3, [r7, #4]
100491c2:	681b      	ldr	r3, [r3, #0]
100491c4:	689b      	ldr	r3, [r3, #8]
100491c6:	00db      	lsls	r3, r3, #3
100491c8:	08d9      	lsrs	r1, r3, #3
100491ca:	687b      	ldr	r3, [r7, #4]
100491cc:	681b      	ldr	r3, [r3, #0]
100491ce:	683a      	ldr	r2, [r7, #0]
100491d0:	430a      	orrs	r2, r1
100491d2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
100491d4:	687b      	ldr	r3, [r7, #4]
100491d6:	0018      	movs	r0, r3
100491d8:	f000 f854 	bl	10049284 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
100491dc:	687b      	ldr	r3, [r7, #4]
100491de:	681b      	ldr	r3, [r3, #0]
100491e0:	68fa      	ldr	r2, [r7, #12]
100491e2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
100491e4:	687b      	ldr	r3, [r7, #4]
100491e6:	2288      	movs	r2, #136	@ 0x88
100491e8:	2120      	movs	r1, #32
100491ea:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
100491ec:	687b      	ldr	r3, [r7, #4]
100491ee:	2284      	movs	r2, #132	@ 0x84
100491f0:	2100      	movs	r1, #0
100491f2:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
100491f4:	2300      	movs	r3, #0
}
100491f6:	0018      	movs	r0, r3
100491f8:	46bd      	mov	sp, r7
100491fa:	b004      	add	sp, #16
100491fc:	bd80      	pop	{r7, pc}
	...

10049200 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
10049200:	b580      	push	{r7, lr}
10049202:	b084      	sub	sp, #16
10049204:	af00      	add	r7, sp, #0
10049206:	6078      	str	r0, [r7, #4]
10049208:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
1004920a:	687b      	ldr	r3, [r7, #4]
1004920c:	2284      	movs	r2, #132	@ 0x84
1004920e:	5c9b      	ldrb	r3, [r3, r2]
10049210:	2b01      	cmp	r3, #1
10049212:	d101      	bne.n	10049218 <HAL_UARTEx_SetRxFifoThreshold+0x18>
10049214:	2302      	movs	r3, #2
10049216:	e02f      	b.n	10049278 <HAL_UARTEx_SetRxFifoThreshold+0x78>
10049218:	687b      	ldr	r3, [r7, #4]
1004921a:	2284      	movs	r2, #132	@ 0x84
1004921c:	2101      	movs	r1, #1
1004921e:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
10049220:	687b      	ldr	r3, [r7, #4]
10049222:	2288      	movs	r2, #136	@ 0x88
10049224:	2124      	movs	r1, #36	@ 0x24
10049226:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
10049228:	687b      	ldr	r3, [r7, #4]
1004922a:	681b      	ldr	r3, [r3, #0]
1004922c:	681b      	ldr	r3, [r3, #0]
1004922e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
10049230:	687b      	ldr	r3, [r7, #4]
10049232:	681b      	ldr	r3, [r3, #0]
10049234:	681a      	ldr	r2, [r3, #0]
10049236:	687b      	ldr	r3, [r7, #4]
10049238:	681b      	ldr	r3, [r3, #0]
1004923a:	2101      	movs	r1, #1
1004923c:	438a      	bics	r2, r1
1004923e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
10049240:	687b      	ldr	r3, [r7, #4]
10049242:	681b      	ldr	r3, [r3, #0]
10049244:	689b      	ldr	r3, [r3, #8]
10049246:	4a0e      	ldr	r2, [pc, #56]	@ (10049280 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
10049248:	4013      	ands	r3, r2
1004924a:	0019      	movs	r1, r3
1004924c:	687b      	ldr	r3, [r7, #4]
1004924e:	681b      	ldr	r3, [r3, #0]
10049250:	683a      	ldr	r2, [r7, #0]
10049252:	430a      	orrs	r2, r1
10049254:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
10049256:	687b      	ldr	r3, [r7, #4]
10049258:	0018      	movs	r0, r3
1004925a:	f000 f813 	bl	10049284 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
1004925e:	687b      	ldr	r3, [r7, #4]
10049260:	681b      	ldr	r3, [r3, #0]
10049262:	68fa      	ldr	r2, [r7, #12]
10049264:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
10049266:	687b      	ldr	r3, [r7, #4]
10049268:	2288      	movs	r2, #136	@ 0x88
1004926a:	2120      	movs	r1, #32
1004926c:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
1004926e:	687b      	ldr	r3, [r7, #4]
10049270:	2284      	movs	r2, #132	@ 0x84
10049272:	2100      	movs	r1, #0
10049274:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
10049276:	2300      	movs	r3, #0
}
10049278:	0018      	movs	r0, r3
1004927a:	46bd      	mov	sp, r7
1004927c:	b004      	add	sp, #16
1004927e:	bd80      	pop	{r7, pc}
10049280:	f1ffffff 	.word	0xf1ffffff

10049284 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
10049284:	b5f0      	push	{r4, r5, r6, r7, lr}
10049286:	b085      	sub	sp, #20
10049288:	af00      	add	r7, sp, #0
1004928a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
1004928c:	687b      	ldr	r3, [r7, #4]
1004928e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
10049290:	2b00      	cmp	r3, #0
10049292:	d108      	bne.n	100492a6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
10049294:	687b      	ldr	r3, [r7, #4]
10049296:	226a      	movs	r2, #106	@ 0x6a
10049298:	2101      	movs	r1, #1
1004929a:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
1004929c:	687b      	ldr	r3, [r7, #4]
1004929e:	2268      	movs	r2, #104	@ 0x68
100492a0:	2101      	movs	r1, #1
100492a2:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
100492a4:	e043      	b.n	1004932e <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
100492a6:	260f      	movs	r6, #15
100492a8:	19bb      	adds	r3, r7, r6
100492aa:	2208      	movs	r2, #8
100492ac:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
100492ae:	200e      	movs	r0, #14
100492b0:	183b      	adds	r3, r7, r0
100492b2:	2208      	movs	r2, #8
100492b4:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
100492b6:	687b      	ldr	r3, [r7, #4]
100492b8:	681b      	ldr	r3, [r3, #0]
100492ba:	689b      	ldr	r3, [r3, #8]
100492bc:	0e5b      	lsrs	r3, r3, #25
100492be:	b2da      	uxtb	r2, r3
100492c0:	240d      	movs	r4, #13
100492c2:	193b      	adds	r3, r7, r4
100492c4:	2107      	movs	r1, #7
100492c6:	400a      	ands	r2, r1
100492c8:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
100492ca:	687b      	ldr	r3, [r7, #4]
100492cc:	681b      	ldr	r3, [r3, #0]
100492ce:	689b      	ldr	r3, [r3, #8]
100492d0:	0f5b      	lsrs	r3, r3, #29
100492d2:	b2da      	uxtb	r2, r3
100492d4:	250c      	movs	r5, #12
100492d6:	197b      	adds	r3, r7, r5
100492d8:	2107      	movs	r1, #7
100492da:	400a      	ands	r2, r1
100492dc:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
100492de:	183b      	adds	r3, r7, r0
100492e0:	781b      	ldrb	r3, [r3, #0]
100492e2:	197a      	adds	r2, r7, r5
100492e4:	7812      	ldrb	r2, [r2, #0]
100492e6:	4914      	ldr	r1, [pc, #80]	@ (10049338 <UARTEx_SetNbDataToProcess+0xb4>)
100492e8:	5c8a      	ldrb	r2, [r1, r2]
100492ea:	435a      	muls	r2, r3
100492ec:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
100492ee:	197b      	adds	r3, r7, r5
100492f0:	781b      	ldrb	r3, [r3, #0]
100492f2:	4a12      	ldr	r2, [pc, #72]	@ (1004933c <UARTEx_SetNbDataToProcess+0xb8>)
100492f4:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
100492f6:	0019      	movs	r1, r3
100492f8:	f7f6 ff8e 	bl	10040218 <__divsi3>
100492fc:	0003      	movs	r3, r0
100492fe:	b299      	uxth	r1, r3
10049300:	687b      	ldr	r3, [r7, #4]
10049302:	226a      	movs	r2, #106	@ 0x6a
10049304:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
10049306:	19bb      	adds	r3, r7, r6
10049308:	781b      	ldrb	r3, [r3, #0]
1004930a:	193a      	adds	r2, r7, r4
1004930c:	7812      	ldrb	r2, [r2, #0]
1004930e:	490a      	ldr	r1, [pc, #40]	@ (10049338 <UARTEx_SetNbDataToProcess+0xb4>)
10049310:	5c8a      	ldrb	r2, [r1, r2]
10049312:	435a      	muls	r2, r3
10049314:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
10049316:	193b      	adds	r3, r7, r4
10049318:	781b      	ldrb	r3, [r3, #0]
1004931a:	4a08      	ldr	r2, [pc, #32]	@ (1004933c <UARTEx_SetNbDataToProcess+0xb8>)
1004931c:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
1004931e:	0019      	movs	r1, r3
10049320:	f7f6 ff7a 	bl	10040218 <__divsi3>
10049324:	0003      	movs	r3, r0
10049326:	b299      	uxth	r1, r3
10049328:	687b      	ldr	r3, [r7, #4]
1004932a:	2268      	movs	r2, #104	@ 0x68
1004932c:	5299      	strh	r1, [r3, r2]
}
1004932e:	46c0      	nop			@ (mov r8, r8)
10049330:	46bd      	mov	sp, r7
10049332:	b005      	add	sp, #20
10049334:	bdf0      	pop	{r4, r5, r6, r7, pc}
10049336:	46c0      	nop			@ (mov r8, r8)
10049338:	100493d4 	.word	0x100493d4
1004933c:	100493dc 	.word	0x100493dc

10049340 <memcmp>:
10049340:	b530      	push	{r4, r5, lr}
10049342:	2400      	movs	r4, #0
10049344:	3901      	subs	r1, #1
10049346:	42a2      	cmp	r2, r4
10049348:	d101      	bne.n	1004934e <memcmp+0xe>
1004934a:	2000      	movs	r0, #0
1004934c:	e005      	b.n	1004935a <memcmp+0x1a>
1004934e:	5d03      	ldrb	r3, [r0, r4]
10049350:	3401      	adds	r4, #1
10049352:	5d0d      	ldrb	r5, [r1, r4]
10049354:	42ab      	cmp	r3, r5
10049356:	d0f6      	beq.n	10049346 <memcmp+0x6>
10049358:	1b58      	subs	r0, r3, r5
1004935a:	bd30      	pop	{r4, r5, pc}

1004935c <memset>:
1004935c:	0003      	movs	r3, r0
1004935e:	1882      	adds	r2, r0, r2
10049360:	4293      	cmp	r3, r2
10049362:	d100      	bne.n	10049366 <memset+0xa>
10049364:	4770      	bx	lr
10049366:	7019      	strb	r1, [r3, #0]
10049368:	3301      	adds	r3, #1
1004936a:	e7f9      	b.n	10049360 <memset+0x4>

Disassembly of section .init:

1004936c <_init>:
1004936c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1004936e:	46c0      	nop			@ (mov r8, r8)

Disassembly of section .fini:

10049370 <_fini>:
10049370:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10049372:	46c0      	nop			@ (mov r8, r8)
